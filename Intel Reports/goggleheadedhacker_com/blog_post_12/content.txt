<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="shortcut icon" type="image/png" href="/favicon.png">
    
<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Robbinhood Malware Analysis with Radare2 | GoggleHeadedHacker</title>
<meta name="generator" content="Jekyll v4.3.2" />
<meta property="og:title" content="Robbinhood Malware Analysis with Radare2" />
<meta name="author" content="Jacob Pimental" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Learn how to reverse engineer golang malware using Radare2. This article will explain how the gopclntab works and how we can use it to extract function names. This process is explained using the Robbinhood Ransomware that attacked Baltimore." />
<meta property="og:description" content="Learn how to reverse engineer golang malware using Radare2. This article will explain how the gopclntab works and how we can use it to extract function names. This process is explained using the Robbinhood Ransomware that attacked Baltimore." />
<link rel="canonical" href="https://goggleheadedhacker.com/blog/post/12" />
<meta property="og:url" content="https://goggleheadedhacker.com/blog/post/12" />
<meta property="og:site_name" content="GoggleHeadedHacker" />
<meta property="og:image" content="https://goggleheadedhacker.com/assets/images/thumbnails/robbinhood-analysis.jpg" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2019-07-01T00:00:00+00:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://goggleheadedhacker.com/assets/images/thumbnails/robbinhood-analysis.jpg" />
<meta property="twitter:title" content="Robbinhood Malware Analysis with Radare2" />
<meta name="twitter:site" content="@Jacob_Pimental" />
<meta name="twitter:creator" content="@Jacob Pimental" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Jacob Pimental"},"dateModified":"2019-07-01T00:00:00+00:00","datePublished":"2019-07-01T00:00:00+00:00","description":"Learn how to reverse engineer golang malware using Radare2. This article will explain how the gopclntab works and how we can use it to extract function names. This process is explained using the Robbinhood Ransomware that attacked Baltimore.","headline":"Robbinhood Malware Analysis with Radare2","image":"https://goggleheadedhacker.com/assets/images/thumbnails/robbinhood-analysis.jpg","mainEntityOfPage":{"@type":"WebPage","@id":"https://goggleheadedhacker.com/blog/post/12"},"url":"https://goggleheadedhacker.com/blog/post/12"}</script>
<!-- End Jekyll SEO tag -->

</head>

  <body>
    <div id="navbar" class="navbar">
    <a href="/" class="nav-title">
        <img class="nav-img" src="/assets/images/homepage/logo_plain_svg.svg">
        <h1>GoggleHeadedHacker</h1>
    </a>
    <label for="click" id="link-list-mobile-button" class="link-list-mobile-button">
        <input id="click" class="chkbx" type="checkbox">
        <span></span>
        <span></span>
        <span></span>
    </label>
    <div id="link-list" class="link-list">
        <div id="search-container">
            <input id="search" type="text" placeholder="Search...">
            <div id="results-container">
                <ul id="results-list"></ul>
            </div>
        </div>
        <a href="/about">About</a>
        <a href="/projects">Projects</a>
        <a href="/contact">Contact</a>
        <a class="r" href="/feed.xml"><i class="fa-solid fa-rss"></i></a>
    </div>
</div>

<script src="\assets\js\simple-jekyll-search.min.js" type="text/javascript"></script>

<script>
    SimpleJekyllSearch({
        searchInput: document.getElementById('search'),
        resultsContainer: document.getElementById('results-list'),
        json: '/assets/config/posts.json',
        limit: 30
    })

    const searchBar = document.getElementById("search");
    const clickInput = document.getElementById("click");
    const linkListMobileButton = document.getElementById("link-list-mobile-button");

    clickInput.addEventListener("change", function() {
        if (this.checked) {
            linkListMobileButton.classList.add("checked");
        } else {
            linkListMobileButton.classList.remove("checked");
            searchBar.value = '';
        }
    });


    var prevScrollpos = window.pageYOffset;
    window.onscroll = function() {
        var currentScrollPos = window.pageYOffset;
        var element = document.getElementById("click");
        if ((prevScrollpos > currentScrollPos && screen.width <= 800) || element.checked) {
            document.getElementById("navbar").style.top = "0";
        } else if (prevScrollpos < currentScrollPos && screen.width <= 800) {
            document.getElementById("navbar").style.top = "-5rem";
        }
        prevScrollpos = currentScrollPos;
    }
</script>
    <div class="container">
      <div class="main_content post">
        <img style="width:35rem" src="/assets/images/thumbnails/robbinhood-analysis.jpg" alt="Robbinhood Malware Analysis">
        <h1>Robbinhood Malware Analysis with Radare2</h1>
        <h3>01 July 2019</h3>
        <p>By Jacob Pimental</p>
        <div class="share-box">

    <a class="f" href="https://www.facebook.com/sharer/sharer.php?u=https://goggleheadedhacker.com/blog/post/12" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-facebook"></i></a>

    <a class="t" href="https://twitter.com/intent/tweet?text=&url=https://goggleheadedhacker.com/blog/post/12" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa-brands fa-twitter"></i></a>

    <a class="r" href="http://www.reddit.com/submit?url=https://goggleheadedhacker.com/blog/post/12" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=900,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-reddit"></i></a>

    <a class="l" href="https://www.linkedin.com/shareArticle?mini=true&url=https://goggleheadedhacker.com/blog/post/12&title=Robbinhood Malware Analysis with Radare2" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-linkedin"></i></a>

    <a class="e" href="mailto:?subject=&amp;body=Check out this site https://goggleheadedhacker.com/blog/post/12"><i class="fa-solid fa-envelope"></i></a>                          
</div>

        <br>
        
<p>This article will provide an overview of how we can extract function names from Windows GoLang binaries to make reversing easier and to give a brief analysis on the Robbinhood Ransomware that attacked Baltimore recently. GoLang is a programming language designed around multi-threaded applications. The difficulty in reversing GoLang binaries is that all libraries are statically linked which means there will be a large number of functions in the application, most of which are not even used during execution. For example, in a normal Hello World compiled GoLang binary, radare2 detects 1800 functions.</p>

<p>The gopclntab section in a GoLang program contains a table of function locations along with their names. Radare2 is able to parse out this table and label every function accordingly, however this only works on binaries compiled for Linux. When it comes to Windows, Radare2 is not able to find the gopclntab and we are left with thousands of unlabeled functions with no clue as to what they do. I decided to learn how the gopclntab works and create a parser using r2pipe to label all functions.</p>

<h2 id="gopclntab">Gopclntab</h2>
<p>The gopclntab section always seems to start with the bytes 0xfbffffff, and after that contains the size of the table. The next 8 bytes contains the location of the first function, then the offset of that function from the start of the table. If you go to that offset from the start of the table you’ll get the offset for the name of the function.</p>

<p>Using this table we can get all of the function information for the binary. I created a small python script that uses r2pipe to parse this table and rename/create the necessary functions. You can get the script on my <a href="http://github.com/JacobPimental/r2-gohelper">gitHub</a>. There is also a really in-depth article you can read about the gopclntab <a href="http://lekstu.ga/posts/pclntab-function-recovery/">here</a>.</p>

<h2 id="robbinhood">Robbinhood</h2>
<p>In May, Baltimore was hit by a ransomware known as Robbinhood, that took out multiple services. The ransomware itself was written in GoLang, so I thought this would be a good opportunity to become familiar with GoLang reversing and analyze the sample.</p>

<p>When reversing a GoLang binary, the main function will be located at <em>main.main</em>. Seeking to that function in radare2, we can see the binary trying to open the file “C:\Windows\Temp\pub.key”. Strings in a GoLang binary are not null-terminated like most C-type programming languages. Instead, they have a variable that contains the length of the string.</p>

<p><img src="/assets/images/posts/golang/golang1.png" alt="Reverse Engineering golang Binary Strings" /></p>

<p>If the file “pub.key” does not exist, the program throws an error and exits. If it does exist, the program will get a list of drives that the computer has access to and run the function <em>main.CoolMaker</em>. The CoolMaker function spawns multiple processes of “cmd.exe” to run the service control manager in order to to shut down any endpoint agents or antivirus on the infected host.</p>

<p><img src="/assets/images/posts/golang/golang2.png" alt="Robbinhood killing processes" /></p>

<p>After the CoolMaker function has been called, Robbinhood will spawn 4 processes of the function main.main.func1, which appears to be where the actual encryption occurs. The function calls another function, <em>main.doit</em>, which creates an encryption key based on the “pub.key” file found at the start of execution. These processes will then recursively walk through the file system and encrypt any files it finds.</p>

<p>The program also logs the encrypted files names to four different log files, <em>rf_l, rf_s, ro_l, ro_s</em>. Both of the rf_* files log the names of the files the program deems “interesting”. The ro_* logs contain all other filenames. Both sets of logs are separated into large file sizes (rf_l, ro_l), and small file sizes (rf_s, ro_s). These logs are deleted as soon as execution is completed.</p>

<p><img src="/assets/images/posts/golang/golang3.png" alt="Robbinhood Log Files" /></p>

<p><img src="/assets/images/posts/golang/golang4.png" alt="Robbinhood Interesting Log Files" /></p>

<p>The dropped ransom note is contained in the binary as a base64 encoded string. The different aspects of the note, such as payment amount and user id are defined by different variables in the note to make them easily interchangeable depending on who the victim is. For example, the wallet id is defined in the ransom note as “#WALLAD#” and is replaced by the string “14yos7dpe4bx3imnoGVUcMsNBwU1hLutfj”. I did check to see if any payments had been made to the bitcoin wallet address and it looks like Jack Young was true to his word and the city didn’t pay the ransom at all.</p>

<p><img src="/assets/images/posts/golang/golang5.png" alt="Robbinhood ransom note bitcoin address" /></p>

<p><img src="/assets/images/posts/golang/golang6.png" alt="Robbinhood bitcoin wallet" /></p>

<p>Overall, this was not a very advanced Ransomware. It is very loud due to the fact that it is shutting down multiple Endpoint agents and AV. It also did not have the ability to spread at all. Every infected computer had to be targeted individually for it to cause real damage.</p>

<p>However, this was a fun sample to analyze and taught me a lot about GoLang reversing. As always, if you have any questions or comments on this, or any of my other articles, feel free to reach out to me on my <a href="http://twitter.com/jacob_pimental">Twitter</a> and <a href="http://www.linkedin.com/in/jacobpimental/">Linkedin</a>.</p>

<p>Thanks for reading and happy reversing!</p>


        <h4>Tutorial, Radare2, Malware Analysis, Malware, Linux, Windows, Scripting, Automation, r2pipe, GoLang</h4>
        <h2>More Content Like This:</h2>
<div class="card-container">
    
    
    

    
        
        

        
            
            <div class="card">
                <a href="/post/onenote-analysis"><img class="card-image" src="/assets/images/thumbnails/onenote_analysis_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/onenote-analysis"><h4>OneNote Analysis</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/post/intro-to-cutter"><img class="card-image" src="/assets/images/thumbnails/Intro-To-Cutter_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/intro-to-cutter"><h4>Intro to Cutter</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/post/blackguard-analysis"><img class="card-image" src="/assets/images/thumbnails/blackguard-deobfuscation_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/blackguard-analysis"><h4>BlackGuard Analysis - Deobfuscation Using Dnlib</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/log4jshell-analysis"><img class="card-image" src="/assets/images/thumbnails/analysis_of_log4jshell_attack_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/log4jshell-analysis"><h4>Analysis of Log4jShell Attack</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/reversing-crypto-functions-aes"><img class="card-image" src="/assets/images/thumbnails/reversing_crypto_functions_aes_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/reversing-crypto-functions-aes"><h4>Reverse Engineering Crypto Functions: AES</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/reversing-crypto-functions"><img class="card-image" src="/assets/images/thumbnails/reversing_crypto_functions_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/reversing-crypto-functions"><h4>Reverse Engineering Crypto Functions: RC4 and Salsa20</h4></a>
                </div>
            </div>
            
            
                
</div>
      </div>
    </div>
    <script src="/assets/js/donationButton.js"></script>
    <script>
      addDonationButton("Buy Me a Tea");
    </script>
    <script src="/assets/js/vanilla-back-to-top.min.js"></script>
    <script>addBackToTop({
                diameter: 40,
                backgroundColor: '#b5e853',
                textColor: '#151515'
            })</script>

		
    
      <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-153169514-1', 'auto');
  ga('send', 'pageview');
</script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WT9456CQQZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WT9456CQQZ');
</script>
    
  </body>
</html>
