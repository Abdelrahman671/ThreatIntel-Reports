<!doctype html><html lang="en" ><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.3.4" /><meta property="og:title" content="njRAT Installed from a MSI" /><meta property="og:locale" content="en" /><meta name="description" content="In my last post I walked through the analysis of an unusual MSI file that an adversary had tacked a STRRAT Java ARchive file to the end of the MSI contents. In this post, I want to walk through a more normal MSI sample that an adversary designed to delivery njRAT. If you want to follow along at home, the sample I’m working with is in MalwareBazaar here: https://bazaar.abuse.ch/sample/1f95063441e9d231e0e2b15365a8722c5136c2a6fe2716f3653c260093026354/." /><meta property="og:description" content="In my last post I walked through the analysis of an unusual MSI file that an adversary had tacked a STRRAT Java ARchive file to the end of the MSI contents. In this post, I want to walk through a more normal MSI sample that an adversary designed to delivery njRAT. If you want to follow along at home, the sample I’m working with is in MalwareBazaar here: https://bazaar.abuse.ch/sample/1f95063441e9d231e0e2b15365a8722c5136c2a6fe2716f3653c260093026354/." /><link rel="canonical" href="https://forensicitguy.github.io/njrat-installed-from-msi/" /><meta property="og:url" content="https://forensicitguy.github.io/njrat-installed-from-msi/" /><meta property="og:site_name" content="Tony Lambert" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2022-02-03T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="njRAT Installed from a MSI" /><meta name="twitter:site" content="@ForensicITGuy" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2022-03-28T23:09:20+00:00","datePublished":"2022-02-03T00:00:00+00:00","description":"In my last post I walked through the analysis of an unusual MSI file that an adversary had tacked a STRRAT Java ARchive file to the end of the MSI contents. In this post, I want to walk through a more normal MSI sample that an adversary designed to delivery njRAT. If you want to follow along at home, the sample I’m working with is in MalwareBazaar here: https://bazaar.abuse.ch/sample/1f95063441e9d231e0e2b15365a8722c5136c2a6fe2716f3653c260093026354/.","headline":"njRAT Installed from a MSI","mainEntityOfPage":{"@type":"WebPage","@id":"https://forensicitguy.github.io/njrat-installed-from-msi/"},"url":"https://forensicitguy.github.io/njrat-installed-from-msi/"}</script><title>njRAT Installed from a MSI | Tony Lambert</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="Tony Lambert"><meta name="application-name" content="Tony Lambert"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"> <script type="text/javascript"> class ModeToggle { static get MODE_KEY() { return 'mode'; } static get MODE_ATTR() { return 'data-mode'; } static get DARK_MODE() { return 'dark'; } static get LIGHT_MODE() { return 'light'; } static get ID() { return 'mode-toggle'; } constructor() { let self = this;this.sysDarkPrefers.addEventListener('change', () => { if (self.hasMode) { self.clearMode(); } self.notify(); }); if (!this.hasMode) { return; } if (this.isDarkMode) { this.setDark(); } else { this.setLight(); } } get sysDarkPrefers() { return window.matchMedia('(prefers-color-scheme: dark)'); } get isPreferDark() { return this.sysDarkPrefers.matches; } get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; } get hasMode() { return this.mode != null; } get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); }get modeStatus() { if (this.hasMode) { return this.mode; } else { return this.isPreferDark ? ModeToggle.DARK_MODE : ModeToggle.LIGHT_MODE; } } setDark() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE); } setLight() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE); } clearMode() { document.documentElement.removeAttribute(ModeToggle.MODE_ATTR); sessionStorage.removeItem(ModeToggle.MODE_KEY); }notify() { window.postMessage( { direction: ModeToggle.ID, message: this.modeStatus }, '*' ); } flipMode() { if (this.hasMode) { this.clearMode(); } else { if (this.isPreferDark) { this.setLight(); } else { this.setDark(); } } this.notify(); } } const modeToggle = new ModeToggle(); </script><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.jpg" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">Tony Lambert</a></h1><p class="site-subtitle fst-italic mb-0">An educator that does security things</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tag"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <button type="button" class="btn btn-link nav-link" aria-label="Switch Mode" id="mode-toggle"> <i class="fas fa-adjust"></i> </button> <span class="icon-border"></span> <a href="https://github.com/ForensicITGuy" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/ForensicITGuy" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="https://www.linkedin.com/in/tonymlambert/" aria-label="linkedin" target="_blank" rel="noopener noreferrer" > <i class="fab fa-linkedin"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a> <a href="https://ko-fi.com/forensicitguy" aria-label="ko-fi" target="_blank" rel="noopener noreferrer" > <i class="fas fa-mug-hot"></i> </a> <a href="https://infosec.exchange/web/@ForensicITGuy" aria-label="mastodon" target="_blank" rel="noopener noreferrer me" > <i class="fab fa-mastodon"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>njRAT Installed from a MSI</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>njRAT Installed from a MSI</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1643846400" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Feb 3, 2022 </time> </span> <span> Updated <time data-ts="1648508960" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Mar 28, 2022 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="2397 words" > <em>13 min</em> read</span></div></div></div></header><div class="content"><p>In my last post I walked through the analysis of an unusual MSI file that an adversary had tacked a STRRAT Java ARchive file to the end of the MSI contents. In this post, I want to walk through a more normal MSI sample that an adversary designed to delivery njRAT. If you want to follow along at home, the sample I’m working with is in MalwareBazaar here: <a href="https://bazaar.abuse.ch/sample/1f95063441e9d231e0e2b15365a8722c5136c2a6fe2716f3653c260093026354/">https://bazaar.abuse.ch/sample/1f95063441e9d231e0e2b15365a8722c5136c2a6fe2716f3653c260093026354/</a>.</p><h2 id="triaging-the-file"><span class="me-2">Triaging the File</span><a href="#triaging-the-file" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>As usual, let’s get started triaging with <code class="language-plaintext highlighter-rouge">file</code> and <code class="language-plaintext highlighter-rouge">diec</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>file mal.msi 
<span class="gp">mal.msi: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, MSI Installer, Code page: 1252, Title: Microsoft Visual Studio - UNREGISTERED - Wrapped using MSI Wrapper from www.exemsi.com 16.6.255.35071, Subject: Microsoft Visual Studio - UNREGISTERED - Wrapped using MSI Wrapper from www.exemsi.com, Author: Microsoft Corporation, Keywords: Installer, Template: x64;</span>1033, Revision Number: <span class="o">{</span>49C681E5-45C4-4467-92EE-456F1E355C5F<span class="o">}</span>, Create Time/Date: Sun Feb  7 22:37:14 2021, Last Saved Time/Date: Sun Feb  7 22:37:14 2021, Number of Pages: 200, Number of Words: 2, Name of Creating Application: MSI Wrapper <span class="o">(</span>10.0.50.0<span class="o">)</span>, Security: 2
<span class="go">
</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>diec mal.msi 
<span class="go">filetype: Binary
arch: NOEXEC
mode: Unknown
endianess: LE
type: Unknown
  installer: Microsoft Installer(MSI)
</span></pre></table></code></div></div><p>From the output it looks like the sample indeed has the magic bytes for a MSI. From the file output, it looks like the adversary may have used an unlicensed MSI Wrapper tool from “exemsi[.]com”. This is pretty common, there are multiple free and paid tools to create MSI files and I’ve seen samples where adversaries would essentially download trials from multiple vendors and switch vendors between campaigns. Let’s dive into the MSI contents!</p><h2 id="analyzing-the-msi-contents"><span class="me-2">Analyzing the MSI Contents</span><a href="#analyzing-the-msi-contents" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>Just like in the last post, we can use <code class="language-plaintext highlighter-rouge">oledump.py</code> to view the content streams within this MSI.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py mal.msi 
<span class="go">  1:       136 '\x05DocumentSummaryInformation'
  2:       588 '\x05SummaryInformation'
  3:    669935 '䌋䄱䜵䅾䞽䕠䓤䈳㼧䗨䓸䕙䊲䄵䠰'
  4:    212992 '䌋䄱䜵䅾䞽䘌䗶䐲䆊䌷䑲䏍䠯'
  5:       672 '䡀㬿䏲䐸䖱'
  6:      8555 '䡀㼿䕷䑬㭪䗤䠤'
  7:      1216 '䡀㼿䕷䑬㹪䒲䠯'
  8:        38 '䡀㽿䅤䈯䠶'
  9:      2064 '䡀㿿䏤䇬䗤䒬䠱'
 10:         4 '䡀䄕䑸䋦䒌䇱䗬䒬䠱'
 11:        48 '䡀䇊䌰㮱䈻䘦䈷䈜䘴䑨䈦'
 12:        24 '䡀䇊䌰㾱㼒䔨䈸䆱䠨'
 13:        42 '䡀䇊䗹䛎䆨䗸㼨䔨䈸䆱䠨'
 14:         4 '䡀䈏䗤䕸㬨䐲䒳䈱䗱䠶'
 15:        16 '䡀䈏䗤䕸䠨'
 16:        14 '䡀䈖䌧䠤'
 17:        60 '䡀䈛䌪䗶䜵'
 18:         8 '䡀䌋䄱䜵'
 19:        18 '䡀䌍䈵䗦䕲䠼'
 20:       216 '䡀䑒䗶䏤㮯䈻䘦䈷䈜䘴䑨䈦'
 21:        48 '䡀䑒䗶䏤㾯㼒䔨䈸䆱䠨'
 22:        12 '䡀䒌䓰䑲䑨䠷'
 23:        32 '䡀䓞䕪䇤䠨'
 24:        80 '䡀䕙䓲䕨䜷'
 25:       180 '䡀䘌䗶䐲䆊䌷䑲'
</span></pre></table></code></div></div><p>Don’t worry about the stream names being unreadable, that’s a common thing in the MSI files I’ve seen. We want to focus on the first two columns. The left column is the stream number and the middle is the size of the stream contents in bytes. We want to analyze the largest streams to the smallest until we start finding streams with no workable data. In this sample, we want to work with streams 3, 4, 6, 7, and 9.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 3 mal.msi | <span class="nb">head</span>
<span class="go">00000000: 4D 53 43 46 00 00 00 00  EF 38 0A 00 00 00 00 00  MSCF.....8......
00000010: 2C 00 00 00 00 00 00 00  03 01 01 00 01 00 00 00  ,...............
00000020: 9B 8E 00 00 47 00 00 00  15 00 00 00 00 38 0A 00  ....G........8..
00000030: 00 00 00 00 00 00 3C 54  57 80 20 00 73 65 72 76  ......&lt;TW. .serv
00000040: 65 72 2E 65 78 65 00 99  0A 33 F0 00 80 00 80 4D  er.exe...3.....M
00000050: 5A 90 00 03 00 00 00 04  00 00 00 FF FF 00 00 B8  Z...............
00000060: 00 00 00 00 00 00 00 40  00 00 00 00 00 00 00 00  .......@........
00000070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
00000080: 00 00 00 00 00 00 00 00  00 00 00 80 00 00 00 0E  ................
00000090: 1F BA 0E 00 B4 09 CD 21  B8 01 4C CD 21 54 68 69  .......!..L.!Thi
</span></pre></table></code></div></div><p>In stream 3 we can see the first bytes of content contain the ASCII characters <code class="language-plaintext highlighter-rouge">MSCF</code>. This is consistent with Cabinet Archive (CAB) files. We can dump out the stream and confirm this with <code class="language-plaintext highlighter-rouge">file</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-d</span> <span class="nt">-s</span> 3 mal.msi <span class="o">&gt;</span> 3.dat
<span class="go">
</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>file 3.dat 
<span class="go">3.dat: Microsoft Cabinet archive data, Windows 2000/XP setup, 669935 bytes, 1 file, at 0x2c +A "server.exe", ID 36507, number 1, 21 datablocks, 0x0 compression
</span></pre></table></code></div></div><p>Sure enough, it looks like we’ve dumped out a CAB file. We’ll get to that in a bit. Let’s finish looking through the other streams.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 4 mal.msi | <span class="nb">head</span>
<span class="go">00000000: 4D 5A 90 00 03 00 00 00  04 00 00 00 FF FF 00 00  MZ..............
00000010: B8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........@.......
00000020: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
00000030: 00 00 00 00 00 00 00 00  00 00 00 00 F0 00 00 00  ................
00000040: 0E 1F BA 0E 00 B4 09 CD  21 B8 01 4C CD 21 54 68  ........!..L.!Th
00000050: 69 73 20 70 72 6F 67 72  61 6D 20 63 61 6E 6E 6F  is program canno
00000060: 74 20 62 65 20 72 75 6E  20 69 6E 20 44 4F 53 20  t be run in DOS 
</span><span class="gp">00000070: 6D 6F 64 65 2E 0D 0D 0A  24 00 00 00 00 00 00 00  mode....$</span>.......
<span class="go">00000080: FE AE 1E EC BA CF 70 BF  BA CF 70 BF BA CF 70 BF  ......p...p...p.
00000090: B3 B7 F4 BF FA CF 70 BF  B3 B7 E5 BF AF CF 70 BF  ......p.......p.
</span></pre></table></code></div></div><p>Stream 4 looks like it contains some executable data with a <code class="language-plaintext highlighter-rouge">MZ</code> header and DOS stub. We can dump that out and continue.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 6 mal.msi | <span class="nb">head</span>
<span class="go">00000000: 4E 61 6D 65 54 61 62 6C  65 54 79 70 65 43 6F 6C  NameTableTypeCol
00000010: 75 6D 6E 5F 56 61 6C 69  64 61 74 69 6F 6E 56 61  umn_ValidationVa
00000020: 6C 75 65 4E 50 72 6F 70  65 72 74 79 49 64 5F 53  lueNPropertyId_S
00000030: 75 6D 6D 61 72 79 49 6E  66 6F 72 6D 61 74 69 6F  ummaryInformatio
00000040: 6E 44 65 73 63 72 69 70  74 69 6F 6E 53 65 74 43  nDescriptionSetC
00000050: 61 74 65 67 6F 72 79 4B  65 79 43 6F 6C 75 6D 6E  ategoryKeyColumn
00000060: 4D 61 78 56 61 6C 75 65  4E 75 6C 6C 61 62 6C 65  MaxValueNullable
00000070: 4B 65 79 54 61 62 6C 65  4D 69 6E 56 61 6C 75 65  KeyTableMinValue
00000080: 49 64 65 6E 74 69 66 69  65 72 4E 61 6D 65 20 6F  IdentifierName o
00000090: 66 20 74 61 62 6C 65 4E  61 6D 65 20 6F 66 20 63  f tableName of c

</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 7 mal.msi | <span class="nb">head</span>
<span class="go">00000000: 00 00 00 00 04 00 06 00  05 00 02 00 00 00 00 00  ................
00000010: 04 00 02 00 06 00 02 00  0B 00 15 00 05 00 05 00  ................
00000020: 01 00 2C 00 0A 00 01 00  13 00 02 00 0B 00 06 00  ..,.............
00000030: 03 00 02 00 08 00 02 00  09 00 02 00 08 00 02 00  ................
00000040: 08 00 02 00 08 00 02 00  08 00 02 00 0A 00 19 00  ................
00000050: 0D 00 01 00 0E 00 01 00  03 00 01 00 1E 00 01 00  ................
00000060: 01 00 2A 00 15 00 01 00  15 00 01 00 36 00 01 00  ..*.........6...
</span><span class="gp">00000070: 24 00 01 00 F5 00 01 00  0F 00 01 00 04 00 09 00  $</span>...............
<span class="go">00000080: 20 00 01 00 15 00 01 00  14 00 07 00 06 00 0C 00   ...............
00000090: 42 00 05 00 09 00 15 00  9F 00 05 00 08 00 0C 00  B...............

</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 9 mal.msi | <span class="nb">head</span>
<span class="go">00000000: 06 00 06 00 06 00 06 00  06 00 06 00 06 00 06 00  ................
00000010: 06 00 06 00 0A 00 0A 00  22 00 22 00 22 00 29 00  ........".".".).
00000020: 29 00 29 00 2A 00 2A 00  2A 00 2B 00 2B 00 2F 00  ).).*.*.*.+.+./.
00000030: 2F 00 2F 00 2F 00 2F 00  2F 00 35 00 35 00 35 00  /././././.5.5.5.
00000040: 3D 00 3D 00 3D 00 3D 00  3D 00 4D 00 4D 00 4D 00  =.=.=.=.=.M.M.M.
00000050: 4D 00 4D 00 4D 00 4D 00  4D 00 5C 00 5C 00 61 00  M.M.M.M.M.\.\.a.
00000060: 61 00 61 00 61 00 61 00  61 00 61 00 61 00 6F 00  a.a.a.a.a.a.a.o.
00000070: 6F 00 72 00 72 00 72 00  73 00 73 00 73 00 74 00  o.r.r.r.s.s.s.t.
00000080: 74 00 77 00 77 00 77 00  77 00 77 00 77 00 82 00  t.w.w.w.w.w.w...
00000090: 82 00 86 00 86 00 86 00  86 00 86 00 86 00 90 00  ................
</span></pre></table></code></div></div><p>Streams 6, 7, and 9 have either some string data or not much recognizable contents. If we start running into issues, dumping stream 6 might be a decent idea to see if there are scripting commands within, but that’s not necessary right now.</p><h2 id="extracting-the-cab-file"><span class="me-2">Extracting the CAB File</span><a href="#extracting-the-cab-file" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>Extracting the contents of the CAB is really easy. Just use <code class="language-plaintext highlighter-rouge">7z</code>. Extracting the contents unpacks <code class="language-plaintext highlighter-rouge">server.exe</code>, which appears to be a .NET binary.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>7z x 3.dat
<span class="go">Extracting archive: 3.dat
--         
Path = 3.dat
Type = Cab
Physical Size = 669935
Method = None
Blocks = 1
Volumes = 1
Volume Index = 0
ID = 36507

Everything is Ok 

Size:       669696
Compressed: 669935

</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>file server.exe 
<span class="go">server.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows

</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>diec server.exe 
<span class="go">filetype: PE32
arch: I386
mode: 32-bit
endianess: LE
type: GUI
  library: .NET(v4.0.30319)[-]
  compiler: VB.NET(-)[-]
  linker: Microsoft Linker(48.0)[GUI32]
</span></pre></table></code></div></div><p>The final step for this branch of analysis will be to decompile the .NET malware to its source. For this, I like to use <code class="language-plaintext highlighter-rouge">ilspycmd</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>ilspycmd server.exe <span class="o">&gt;</span> server.decompiled.cs 
<span class="go">
</span><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span><span class="nb">head </span>server.decompiled.cs 
<span class="gp">using System;</span><span class="w">
</span><span class="gp">using System.CodeDom.Compiler;</span><span class="w">
</span><span class="gp">using System.Collections.Generic;</span><span class="w">
</span><span class="gp">using System.ComponentModel;</span><span class="w">
</span><span class="gp">using System.Configuration;</span><span class="w">
</span><span class="gp">using System.Diagnostics;</span><span class="w">
</span><span class="gp">using System.Drawing;</span><span class="w">
</span><span class="gp">using System.Globalization;</span><span class="w">
</span><span class="gp">using System.IO;</span><span class="w">
</span><span class="gp">using System.Linq;</span><span class="w">
</span></pre></table></code></div></div><p>Sure enough, it looks like we got some readable C# code!</p><h2 id="what-about-that-other-exedll"><span class="me-2">What about that other EXE/DLL?</span><a href="#what-about-that-other-exedll" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>The other DLL we pulled from stream 4 might still be relevant, so let’s look into it. We can get a pretty good idea of the DLL’s functionality using a combination of <code class="language-plaintext highlighter-rouge">pedump</code> and strings from <code class="language-plaintext highlighter-rouge">floss</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>pedump <span class="nt">--exports</span> 4.dat 
<span class="go">
=== EXPORTS ===

</span><span class="gp">#</span><span class="w"> </span>module <span class="s2">"MsiCustomActions.dll"</span>
<span class="gp">#</span><span class="w"> </span><span class="nv">flags</span><span class="o">=</span>0x0  <span class="nv">ts</span><span class="o">=</span><span class="s2">"2021-02-07 22:37:10"</span>  <span class="nv">version</span><span class="o">=</span>0.0  <span class="nv">ord_base</span><span class="o">=</span>1
<span class="gp">#</span><span class="w"> </span><span class="nv">nFuncs</span><span class="o">=</span>10  <span class="nv">nNames</span><span class="o">=</span>10
<span class="go">
  ORD ENTRY_VA  NAME
    1     a5d0  _CheckReboot@4
    2     a510  _InstallFinish1@4
    3     a740  _InstallFinish2@4
    4     a9d0  _InstallMain@4
    5     a4a0  _InstallPrepare@4
    6     abc0  _InstallRollback@4
    7     ac80  _SubstWrappedArguments@4
    8     b280  _UninstallFinish1@4
    9     b6e0  _UninstallFinish2@4
    a     ac90  _UninstallPrepare@4
</span></pre></table></code></div></div><p>The exported functions in the DLL look like they might be related to generic installation activity. In addition, the DLL thinks it has a module name of <code class="language-plaintext highlighter-rouge">MsiCustomActions.dll</code>. Nothing really stands out as suspicious, let’s take a look at output from <code class="language-plaintext highlighter-rouge">floss</code> that has been ranked with <code class="language-plaintext highlighter-rouge">stringsifter</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>floss <span class="nt">-q</span> 4.dat | rank_strings <span class="o">&gt;</span> ranked_floss.txt 
<span class="gp">remnux@remnux:~/cases/njrat-msi$</span><span class="w"> </span>less ranked_floss.txt
<span class="go">
files.cab
C:\ss2\Projects\MsiWrapper\MsiCustomActions\Release\MsiCustomActions.pdb
- UNREGISTERED - Wrapped using MSI Wrapper from www.exemsi.com
SOFTWARE\EXEMSI.COM\MSI Wrapper
-R files.cab -F:* files
msiwrapper.ini
cmd.exe
SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\
msi.dll
Error setting security.
Remove cabinet file
QuietUninstallString is
UninstallString is
Protection failed.
Removal of protection failed.
Focus is
SELECT `Data` FROM `Binary` WHERE `Name` = '%s'
ShellExecuteEx failed (%d).
Error setting security. Exit code %d.
</span><span class="c">...
</span></pre></table></code></div></div><p>There are loads of strings in this binary that seem consistent with being an installation component. The debugging PDB file is named with a MSI-related path. The vendor of the MSI Wrapper is mentioned in the DLL as well. It would be nice if the binary was signed, but we can’t always get what we want.</p><p>Wrapping up, if you want to dive deeper into that njRAT server.exe process, start with the decompiled code output from <code class="language-plaintext highlighter-rouge">ilspycmd</code> and have fun. Thanks for reading!</p></div><div class="post-tail-wrapper text-muted"><div class="post-meta mb-3"> <i class="far fa-folder-open fa-fw me-1"></i> <a href="/categories/malware/">malware</a></div><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/njrat/" class="post-tag no-text-decoration" >njrat</a> <a href="/tags/msi/" class="post-tag no-text-decoration" >msi</a> <a href="/tags/oledump/" class="post-tag no-text-decoration" >oledump</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=njRAT%20Installed%20from%20a%20MSI%20-%20Tony%20Lambert&url=https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=njRAT%20Installed%20from%20a%20MSI%20-%20Tony%20Lambert&u=https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F&text=njRAT%20Installed%20from%20a%20MSI%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <a href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Linkedin" aria-label="Linkedin"> <i class="fa-fw fab fa-linkedin"></i> </a> <script defer type="module" src="https://cdn.jsdelivr.net/npm/@justinribeiro/share-to-mastodon/+esm"></script> <button class="btn text-start" data-bs-toggle="tooltip" data-bs-placement="top" title="Mastodon" aria-label="Mastodon"> <share-to-mastodon class="share-mastodon" message="njRAT%20Installed%20from%20a%20MSI%20-%20Tony%20Lambert" url="https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F"customInstanceList="[{&quot;label&quot;:&quot;mastodon.social&quot;,&quot;link&quot;:&quot;https://mastodon.social/&quot;},{&quot;label&quot;:&quot;mastodon.online&quot;,&quot;link&quot;:&quot;https://mastodon.online/&quot;},{&quot;label&quot;:&quot;fosstodon.org&quot;,&quot;link&quot;:&quot;https://fosstodon.org/&quot;},{&quot;label&quot;:&quot;infosec.exchange&quot;,&quot;link&quot;:&quot;https://infosec.exchange/&quot;}]" > <i class="fa-fw fa-brands fa-mastodon"></i> </share-to-mastodon> </button> <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fforensicitguy.github.io%2Fnjrat-installed-from-msi%2F&title=njRAT%20Installed%20from%20a%20MSI%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Reddit" aria-label="Reddit"> <i class="fa-fw fa-brands fa-square-reddit"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/decompiling-jphp-loader-binwalk-cfr/">Decompiling a JPHP Loader with binwalk and cfr</a><li class="text-truncate lh-lg"> <a href="/dissecting-java-pikabot-dropper/">Dissecting a Java Pikabot Dropper</a><li class="text-truncate lh-lg"> <a href="/timelining-malware-vhd-intelligence/">Timelining a Malicious VHD for More Intelligence</a><li class="text-truncate lh-lg"> <a href="/vhd-malware-an-excellent-choice/">Malware via VHD Files, an Excellent Choice</a><li class="text-truncate lh-lg"> <a href="/faster-malware-triage-yara/">Faster Malware Triage with YARA</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><section id="toc-wrapper" class="d-none ps-0 pe-4"><h2 class="panel-heading ps-3 mb-2">Contents</h2><nav id="toc"></nav></section></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/strrat-attached-to-msi/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1643760000" data-df="ll" > Feb 2, 2022 </time><h4 class="pt-0 my-2">STRRAT Attached to a MSI File</h4><div class="text-muted"><p>Adversaries can get really creative with ways to hide and execute payloads. In this post I’ll cover one instance where an adversary appended STRRAT to a MSI file to make it look legitimate during a...</p></div></div></a></article><article class="col"> <a href="/batloader-ursnif-redline-oh-my/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1674432000" data-df="ll" > Jan 23, 2023 </time><h4 class="pt-0 my-2">BATLoader, Ursnif, and Redline, oh my!</h4><div class="text-muted"><p>Earlier today, @MalwareHunterTeam posted on Twitter about a malicious MSI file masquerading as a Rufus installer. Searching for &amp;quot;rufus&amp;quot; in Google right now gives 2 ads that are obviously...</p></div></div></a></article><article class="col"> <a href="/analyzing-stealer-msi-using-msitools/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1644624000" data-df="ll" > Feb 12, 2022 </time><h4 class="pt-0 my-2">Analyzing a Stealer MSI using msitools</h4><div class="text-muted"><p>This post is dedicated to Josh Rickard (@MSAdministrator on Twitter) since his feedback on my blog posts has cut my triage time on MSI files down in a massive way! After writing an analysis of a MS...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/strrat-attached-to-msi/" class="btn btn-outline-primary" aria-label="Older" ><p>STRRAT Attached to a MSI File</p></a> <a href="/agenttesla-rtf-dotnet-tradecraft/" class="btn btn-outline-primary" aria-label="Newer" ><p>AgentTesla From RTF Exploitation to .NET Tradecraft</p></a></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2024</time> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Powered by <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a> with <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.1" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js,npm/tocbot@4.29.0/dist/tocbot.min.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js?baseurl=&register=true" ></script> <script defer src="https://www.googletagmanager.com/gtag/js?id=G-THRVSJGH6S"></script> <script> document.addEventListener('DOMContentLoaded', function (event) { window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'G-THRVSJGH6S'); }); </script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No result founds.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
