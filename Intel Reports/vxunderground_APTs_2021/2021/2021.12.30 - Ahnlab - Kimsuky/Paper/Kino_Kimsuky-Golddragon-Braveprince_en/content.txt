1/14
December 30, 2021
Piece of dragon's scales
sfkino-tistory-com.translate.goog/80
TL;DR
Attacks using the golddragon/braveprince cluster of the kimsuky (aka Thallium) group continue
Recently, a routine to encode API names has been added to the golddragon/braveprince cluster malware.
Quasar-based malware, an open source RAT, was discovered by searching for additional intelligence based on strings
outline
In fact, the golddragon/braveprince clusters (personally, I call them daumrat) were thinking of posting them all around mid-
2021.. While I was spending time in the lost arc, the cisco talos team organized it well and made it public. It's sweet, but
thanks to you, I have no use for it.
So, in this post, we will briefly discuss the braveprince, password stealer malware, and Quarsar RAT-based .net malware
with name en/decoding routine added through intelligence search.
Case 1. Golddragon/braveprince malware with API Name En/Decoding logic added
When the Run function is executed through rundll.exe, it is a very typical braveprince cluster that steals information and
creates svchost.exe and iexplorer.exe to steal information via daum mail. (Personally, I call it daumrat) recently discovered
golddragon/braveprince In the malware, functions were the same as before, but we found a sample with added logic to
encrypt/decrypt DLL and API names.
WTF_10003CD0 function
get encoded dll name & api name
Inside the file, there is an api_name_table containing the encoded DLL name and the API included in the DLL. Get the
encoded DLL name by comparing the encoded api names in this table.
2/14
decode string
The encoded DLL and API names received as arguments are decoded by the following routine.
1. Get the index of the character position to be decrypted in the key table
2. Calculate the position index value with a specific formula (( idx - 0x16) & 0x3F)
3. Replace the encoded string using the calculated value as an index in the key table
The decryption logic is implemented as follows.
def decryptor(enc_str): 
   key_table = 'zcgXlSWkj314CwaYLvyh0U_odZH8OReKiNIr-JM2G7QAxpnmEVbqP5TuB9Ds6fFt' 
   dec_str = '' 
   for enc_chr in enc_str: 
       if enc_chr == '.': 
           dec_str += '.' 
       else: 
           idx = key_table.index(ord(enc_chr)) 
           dec_str += chr(key_table[ (idx - 0x16) & 0x3F ]) 
    
   return dec_str
3/14
The string substitution key table used by this malware is also found in other malware used by this group. 
(link: https://asec.ahnlab.com/wp-content/uploads/2021/11/Kimsuky-group-APT-attack-analysis-report-AppleSeed-
PebbleDash.pdf )
Report published by Ahnlab
Case 2. Information Stealer 
In a stranger intelligence search, I found a sample with a familiar scent. It is a sample that has already been analyzed and
reported by talos, so let's briefly look at the functions. 
 
(link: https://blog.talosintelligence.com/2021/11/kimsuky-abuses-blogs-delivers-malware.html )
%AppData%qwer.txt file does not exist if it does not exist
Create %AppData%information folder (WORKING_PATH)
Save system information in %AppData%Information folder
cmd.exe /c ipconfig/all >> [WORKING_PATH]\netinfo.dat & arp -a >> [WORKING_PATH]\netinfo.dat
cmd.exe /c systeminfo >> [WORKING_PATH]\sysinfo.dat
cmd.exe /c tasklist >> [WORKING_PATH]\procinfo.dat
[WORKING_PATH]\filelist.dat
After the svchost.exe process is created, the data in the resource area is decrypted and then injected
It is a malicious code that modified nirsoft's webpassview program to steal user information stored in the browser
and save it as a file.
[WORKING_PATH]\aaweb.txt
4/14
Stealing system information
Stealing account information stored in web browsers
This malicious code does not have a routine to transmit the collected information to the outside and does not run without the
qwer.txt file, so it appears to be one of the system information collection modules executed by other malicious codes.
Case 3. .Net malware based on Quasar RAT 
Case 1 While performing an intelligence search with the found key value and encoded API name, I found a dropper running
Quasar RAT. The resource structure of the file is quite complex, so I expressed it as a picture 
5/14
malware resource data
The operation method of the malicious code is as follows.
If your Windows version is 10
 
Drop & Execute Privilege Elevation SW (TEXT114)
If you have high privileges and WinDefender is running
Defender Control SW & Execution (TEXT116)
Main Malicious Behavior (TEXT115)
Drop file with C2 information
6/14
Malware main logic
elevation of privilege 
The malicious code decrypts the resource file (TEXT116), maps the file to memory, and calls the Export function Reg for
privilege elevation.
factor
Privilege Elevation
S/W
file/registry path
One
computerdefaults.exe
HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command
2
sdclt.exe
HKCU\\Software\\Classes\\Folder\\shell\\open\\command
3
cmstp.exe
%AppData\Microsoft\windows\seting.ini
4
WSReset.exe
HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command
5
slui.exe
HKCU\\Software\\Classes\\Launcher.SystemSettings\\shell\\open\\command
 
 
 
7/14
Privilege Elevation S/W
[version] 
Signature=$chicago$ 
AdvancedINF=2.5 
[DefaultInstall] 
CustomDestination=CustInstDestSectionAllUsers 
RunPreSetupCommands=RunPreSetupCommandsSection 
[RunPreSetupCommandsSection] 
[MALPATH]\malware.dll,Run 
taskkill /IM cmstp.exe /F 
[CustInstDestSectionAllUsers] 
49000,49001=AllUSer_LDIDSection, 7 
[AllUSer_LDIDSection] 
"HKLM", "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\CMMGR32.EXE", "ProfileInstallPath", 
"%UnexpectedError%", "" 
[Strings] 
ServiceName="WinPwnageVPN" 
ShortSvcName="WinPwnageVPN"
Turn off winDefender 
Search "sMpEng" string among running processes to check whether Defender is running, and if it is running, drop the file
(TEXT114) in the resource area and run it with the /D option to turn off Defender.
Path: %PROGRAMFILES%\Microsfot\
File name: /[cetuikgbms]{6}.exe
8/14
win defender control
Malware installation 
The final malicious code, Quasar RAT, and the encrypted C2 file are dropped to a fixed folder.
Encrypted C2 (BIN101): %AppData%\Microsoft\Office\MsWord16.pip
Quasar RAT (BIN102): %AppData%\Microsoft\Office\StaticCache.dat
The loader running Quasar RAT creates a random folder in %AppData%\Microsoft\, drops it to a random name, and runs it.
Installation path: %AppData%\Microsoft\ [pubs, Common, Defender, Protect, Vault]
File name: [svchost, sihost, spoolsv, taskhostw, RuntimeBroker].exe
Execution argument: -start
Autorun Registration (Persistence)
Attempts to register the scheduler and register the registry (if Windefender is not running) to secure the continuity of the
malicious code.
9/14
autorun name
WindowsAutoUpdate
AdobeUpdate
DefenderUpdate
OneDriveUpdate
CloudUpdate
schtasks.exe "/create /tn \"WindowsAutoUpdate\" /tr 
\"C:\\Users\\anon\\AppData\\Roaming\\Microsoft\\Protect\\svchost.exe -start\" /sc DAILY /mo 1 /f"
Registry Path: Path: HKLM\SoftWare\Microsoft\Windows\CurrentVersion\Run
RAT Loader
RAT Loader is a .NET-based loader program named teracom or RuntimeBroker that reads Quasar-based malware, decodes
it, and executes it. PDB information exists in the loaded executable file.
G:\SRC\!Spy\!LoadAssembly\!teracom\teracom\obj\Release\teracom.pdb 
G:\SRC\!Spy\taskhost\taskhost\obj\Release\RuntimeBroker.pdb
teracom/runtimebroker info
10/14
RAT loader 
Malware based on Quasar RAT
The StaticCache.dat file that operates in memory is a Quasar RAT-based malware with a package name of RMSSVC. The
overall function is the same as Quasar RAT, so only some settings, decryption logic, and C2 address loading method will be
reviewed. 
 
(link: https://github.com/quasar/Quasar )
11/14
RAT Package
12/14
Setting information to be used for malicious behavior
Decrypt the encrypted C2 and AES-encrypted MsWord16.pip files in the Config file and set them to C2
https: //blog.daum [.]net/casalesmedia/pages/category
14.47.189.243:443
222.122.79.232:8080
222.122.79.232:443
13/14
String decryption logic
Decryption order
1. Base64 Decoding
2. 159 (0x9F) XOR
C2 File Decryption Logic (AES)
def aes_dec(enc_str): 
   enc_str = base64.b64decode(enc_str) 
   key = base64.b64decode("IuYp5htzIKk1wqlMrcwzSg==") 
   iv = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" 
   decrypt = AES.new(key, AES.MODE_CBC,IV= iv) 
   dec_str = decrypt.decrypt(enc_str) 
   print(dec_str)
conclusion
I'm just sorry for wasting your time by bringing all the finished rice cakes. But I wrote it with the hope that it might be helpful
to someone. And... I probably won't be posting any more tracking or analysis posts about these friends after this one. (The
reason will be written later along with the current situation on personal SNS.)
I end this article by sending a review to all malware/threat analysts who are struggling day and night to identify and block
threats.
Goodbye 2020! And Happy New year!!
IOC
Case 1. API Name En / Decoding logic is added golddragon / braveprince malware
 
MD5: E647B3366DC836C1F63BDC5BA2AEF3A9 
 
sha1: A7B0711B45081768817E85D6FC76E23093093F87 
 
SHA256: 3903958EB28632AA58E455EB87482D1CCEF38A6FE43512BAAD30902E8BFDD6D5
E11E2425C62F34EBB3F640BAEEFB67D5 
 
7DC6F8AAAF4431C365564A51DD37C143D857B89E 
 
237DEBA138355BFB448E74BFB68FC868F4807B24D68715A6D47E348FC0CF9257
14/14
Case 2. the Information Stealer  
MD5: 8EDFA086DE4DFDC93C0551BBB08CD5A8 
sha1: 4B1B5BED35BC676E835DE14EE033339D37F4549D 
SHA256: 5E3907E9E2ED8FF12BB4E96B52401D871526C5ED502D2149DD4F680DA4925590
Case 3. .Net based malware on Quasar RAT  
md5: C3885F3C1001A53EB4FBBB4B5F42163E
sha1: 322AD36BF0DB8244B64E2D3AFC1CCF5ED6685DF3 
SHA256: 51a92bd57ece4a107dacabf2639b6fa06bea8992e72fc9b4305a90fcd984e752
MD5: 3A7355417EBFDB5067582916BBAF0F15 
sha1: E8BEF41ED7D0704D9206880EE0F30B5ECF30F204 
SHA256: 0CF7E1268E8652D841B7BDA784707E445B9CDC2A46FFB375C8F239CB4C551F73
 
 
