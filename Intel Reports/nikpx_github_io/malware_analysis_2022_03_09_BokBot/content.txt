<!DOCTYPE html> <html lang="en-US"> <head prefix="og: http://ogp.me/ns#"> <meta charset="UTF-8" /> <meta http-equiv="X-UA-Compatible" content="ie=edge" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <meta name="mobile-web-app-capable" content="yes" /> <meta name="apple-mobile-web-app-capable" content="yes" /> <meta name="application-name" content="Malware Analysis Adventures" /> <meta name="apple-mobile-web-app-status-bar-style" content="#fff" /> <meta name="apple-mobile-web-app-title" content="Malware Analysis Adventures" /> <title> BokBot Technical Analysis - Malware Analysis Adventures </title> <link rel="alternate" href="https://nikpx.github.io/malware/analysis/2022/03/09/BokBot" hreflang="en-US" /> <link rel="canonical" href="https://nikpx.github.io/malware/analysis/2022/03/09/BokBot" /> <meta name="description" content="" /> <meta name="referrer" content="no-referrer-when-downgrade" /> <meta property="fb:app_id" content="" /> <meta property="og:site_name" content="BokBot Technical Analysis | xors" /> <meta property="og:title" content="BokBot Technical Analysis | xors" /> <meta property="og:type" content="website" /> <meta property="og:url" content="https://nikpx.github.io/malware/analysis/2022/03/09/BokBot" /> <meta property="og:description" content="" /> <meta property="og:image" content="https://nikpx.github.io/assets/img/ogp.png" /> <meta property="og:image:width" content="640" /> <meta property="og:image:height" content="640" /> <meta name="twitter:card" content="summary" /> <meta name="twitter:title" content="BokBot Technical Analysis | xors" /> <meta name="twitter:url" content="https://nikpx.github.io/malware/analysis/2022/03/09/BokBot" /> <meta name="twitter:site" content="@xors" /> <meta name="twitter:creator" content="@xors" /> <meta name="twitter:description" content="" /> <meta name="twitter:image" content="https://nikpx.github.io/assets/img/ogp.png" /> <link type="application/atom+xml" rel="alternate" href="https://nikpx.github.io/feed.xml" title="Malware Analysis Adventures" /> <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicons/apple-touch-icon.png" /> <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicons/favicon-32x32.png" /> <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicons/favicon-16x16.png" /> <link rel="manifest" href="/assets/favicons/site.webmanifest" /> <link rel="mask-icon" href="/assets/favicons/safari-pinned-tab.svg" color="#5bbad5" /> <meta name="apple-mobile-web-app-title" content="Jekyll Klise" /> <meta name="application-name" content="Jekyll Klise" /> <meta name="msapplication-TileColor" content="#da532c" /> <meta name="theme-color" content="#2c2c2c" /> <link rel="stylesheet" href="/assets/css/style.css" /> </head> <body> <div class="navbar" role="navigation"> <nav class="menu"> <input type="checkbox" id="menu-trigger" class="menu-trigger" /> <label for="menu-trigger"> <span class="menu-icon"> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <path d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z" /> </svg> </span> </label> <a id="mode"> <svg class="mode-sunny" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <title>LIGHT</title> <line x1="256" y1="48" x2="256" y2="96" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="256" y1="416" x2="256" y2="464" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="108.92" x2="369.14" y2="142.86" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="369.14" x2="108.92" y2="403.08" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="464" y1="256" x2="416" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="96" y1="256" x2="48" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="403.08" x2="369.14" y2="369.14" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="142.86" x2="108.92" y2="108.92" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <circle cx="256" cy="256" r="80" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> </svg> <svg class="mode-moon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <title>DARK</title> <line x1="256" y1="48" x2="256" y2="96" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="256" y1="416" x2="256" y2="464" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="108.92" x2="369.14" y2="142.86" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="369.14" x2="108.92" y2="403.08" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="464" y1="256" x2="416" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="96" y1="256" x2="48" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="403.08" x2="369.14" y2="369.14" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="142.86" x2="108.92" y2="108.92" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <circle cx="256" cy="256" r="80" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> </svg> </a> <div class="trigger"> <div class="trigger-container"> <a class="menu-link" href="/">home</a> <a class="menu-link" href="/about/">about</a> <a class="menu-link rss" href="/feed.xml"> <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 512 512" fill="#ED812E" > <title>RSS</title> <path d="M108.56,342.78a60.34,60.34,0,1,0,60.56,60.44A60.63,60.63,0,0,0,108.56,342.78Z" /> <path d="M48,186.67v86.55c52,0,101.94,15.39,138.67,52.11s52,86.56,52,138.67h86.66C325.33,312.44,199.67,186.67,48,186.67Z" /> <path d="M48,48v86.56c185.25,0,329.22,144.08,329.22,329.44H464C464,234.66,277.67,48,48,48Z" /> </svg> </a> </div> </div> </nav> </div> <div class="wrapper post"> <main class="page-content" aria-label="Content"> <article itemscope itemtype="https://schema.org/BlogPosting"> <header class="header"> <h1 class="header-title" itemprop="headline">BokBot Technical Analysis</h1> <div class="post-meta"> <time datetime="2022-03-09T08:30:42+00:00" itemprop="datePublished"> Mar 09, 2022 </time> <span itemprop="author" itemscope itemtype="https://schema.org/Person"> <span itemprop="name">xors</span> </span> <time hidden datetime="" itemprop="dateModified"> Mar 09, 2022 </time> <span hidden itemprop="publisher" itemtype="Person">xors</span> <span hidden itemprop="image"></span> <span hidden itemprop="mainEntityOfPage"><h1 id="executive-summary">Executive Summary</h1> </span> </div> </header> <div class="page-content" itemprop="articleBody"> <h1 id="executive-summary"> <a href="#executive-summary" class="anchor-head"></a> Executive Summary </h1> <p>BokBot, also known as IcedID, was among one of the most active malware families in 2021 and has been known for loading different types of payloads such as Cobalt Strike for example. BokBot has previously been linked to ‘NeverQuest’[1] and over the years it has gone through various code changes.</p> <p>The following article presents the findings of analysis conducted on samples which appeared in December 2021. Furthermore, the analysis focuses on the main module and its network communication features and functionality. Overall, BokBot has the typical features that you would expect from a banking trojan. Specifically, BokBot presents the following features that are notable:</p> <ol> <li>Functionality to intercept local credentials and web-form data stored in the browser along with inserting Web-Injects to specific pages in order to capture login credentials as they are entered.</li> <li>Offers the operator(s) various commands to control the compromised host.</li> <li>Network support for both HTTP(S) and network sockets.</li> <li>Unlike previous versions, debug messages have been removed.</li> </ol> <h1 id="technical-analysis"> <a href="#technical-analysis" class="anchor-head"></a> Technical Analysis </h1> <p>The following sub-sections present the findings of the analysis of the main module of BokBot.</p> <h2 id="methodology-and-approach"> <a href="#methodology-and-approach" class="anchor-head"></a> Methodology and Approach </h2> <p>The biggest obstacle in analysing BokBot was the way in which the loader loads and executes the main module. BokBot’s main module runs, in memory, as pure shellcode. As a result, dumping the decrypted component and running it directly in a debugger was not an option. Furthermore, if we consider that binary strings and Windows API functions are loaded at runtime, similar obstacles are met during static analysis too.</p> <p>To workaround the above issues, different methods were used. Initially, the Unicorn engine was used to execute and debug certain functions; this was useful to confirm that the strings decryption algorithm has been correctly converted to Python for example. In cases where this was not possible, a debug session was started by breaking at the entry point of the main module and moving on from there to selected addresses.</p> <p>The static analysis issues were easier to solve. Upon breaking at the entry point of the main module, the resolved Windows API addresses and their associated (BokBot) addresses were collected and then mapped to IDA. Lastly, the strings were decrypted by converting the decryption routine to an IDAPython script (see ‘Strings/Configuration Encryption’ section).</p> <h2 id="anti-analysis"> <a href="#anti-analysis" class="anchor-head"></a> Anti-Analysis </h2> <p>As with many other malicious binaries, anti-analysis techniques are employed to make the analysis harder. The following methods were observed:</p> <ol> <li>Calculation of execution time between two addresses. This is repeated 15 times and aims to detect emulation or debugging presence (step over). Fortunately, even though this mechanism can be easily defeated, this code is present only in one function.</li> <li>Execution of CPUID instruction to get information about the host’s processor. By passing the parameter 0x40000000, stored in EAX, to the CPUID instruction, the vendor ID is returned. Then BokBot checks if it matches any of the following patterns: <ol> <li>VMwa</li> <li>XenV</li> <li>Micr</li> <li>KVMK</li> <li>lrp</li> <li>Vbox</li> </ol> </li> </ol> <p>If any of the above techniques are triggered, Bokbot will continue anyway but inform the command-and-control server.</p> <p>Regarding BokBot’s behavior in case of anti-analysis identification, the only difference, at least from a binary perspective, appears to be in the execution of ‘BackConnect’ functionality (described in the Network Communication section); specifically in this case the operator(s) should issue the feature. Otherwise it executes the ‘BackConnect’ functionality as normal in a new thread.</p> <h2 id="stringsconfiguration-encryption"> <a href="#stringsconfiguration-encryption" class="anchor-head"></a> Strings/Configuration Encryption </h2> <p>BokBot keeps its binary strings in an encrypted format with each string being decrypted only when it is about to be used. An IDAPython script that automates the decryption process is available on GitHub.</p> <p>Likewise, BokBot’s configuration is encrypted, with the configuration being stored in the ‘.data’ section of the loader. The main module obtains a pointer to this section by reading a parameter passed into it by the loader. It is important to note that this parameter stores several pieces of important information including:</p> <ol> <li>BokBot’s loader file path</li> <li>Flag that indicates the file type (DLL or EXE)</li> <li>Pointer to encrypted configuration</li> </ol> <p>With this, it is able to decrypt the configuration; a Python script to replicate this is available on GitHub. A notable mention with regards to the configuration is that BokBot, unlike some other families, keeps it in a decrypted state for the entire execution time. This can be an important factor either for writing a memory configuration dumper or to obtain the configuration as fast as possible during an IR engagement through memory image analysis.</p> <p>Lastly, it should be noted that unlike previous versions, debug strings appear to have been removed.</p> <h2 id="persistence"> <a href="#persistence" class="anchor-head"></a> Persistence </h2> <p>BokBot supports two methods to add persistence on the compromised host. First, BokBot copies its downloader to the user’s Roaming directory (%APPDATA% environment variable) and attempts to create a scheduled task to run it. If this fails, BokBot proceeds to use its second method, which adds a new value in the ‘Run’ registry key of the current user (HKEY_CURRENT_USER).</p> <p><em>Note: In both cases, the scheduled task and the registry key names are randomly generated. In addition, BokBot’s encrypted main module file (DAT file) is added as a parameter of the downloader. This is an important artefact from an incident response perspective whilst analysing suspicious registry keys or scheduled tasks.</em></p> <h2 id="browser-interception"> <a href="#browser-interception" class="anchor-head"></a> Browser Interception </h2> <p>One of the core features of BokBot is its ability to intercept browser information. BokBot is capable of targeting the most commonly used browsers including Chrome and Firefox. Upon detecting a browser process, BokBot binds to a random port (calculated based on the generated bot ID), creates a self-signed certificate and waits for new events.</p> <p>BokBot uses the same decryption routine as for the configuration to decrypt the appropriate shellcode, supporting both x86 and x64, and injects it into the browser process. The role of the injected shellcode is to hook Windows API functions that are used during the transmission of network data. This is an approach that many malware families have followed for years in order to intercept data before any encryption is applied.</p> <p>With the appropriate shellcode injected into the browser’s process and the (BokBot) server running, BokBot is capable of intercepting sensitive data (man-in-the-middle).</p> <h2 id="data-storage"> <a href="#data-storage" class="anchor-head"></a> Data Storage </h2> <p>BokBot stores necessary data such as web-injects in the registry of the compromised host. The key is located at HKEY_CURRENT_USER\Software\Classes\CLSID\Random_Key_Name, where Random_Key_Name is generated based on an MD5 hash value derived from the bot ID and a custom hashing algorithm.</p> <h2 id="network-communication"> <a href="#network-communication" class="anchor-head"></a> Network communication </h2> <p>BokBot supports a variety of network commands. Since it supports both HTTP(S) and network sockets, this section has been separated into two parts.</p> <h3 id="http-communication"> <a href="#http-communication" class="anchor-head"></a> HTTP Communication </h3> <p>Upon execution, BokBot starts communicating to the command-and-control server via HTTP(S) requests. BokBot starts by sending a POST request in order to check if there are any commands to execute. The request contains host information such as Operating system version along with a generated bot ID. The bot ID is included in the headers of each request, see Table 1 for a brief description of headers. The initial request body includes the following information:</p> <ol> <li>MAC Address</li> <li>Compromised host name</li> <li>Domain name that the compromised host belongs</li> <li>Boolean value indicating the BokBot access privileges</li> <li>Boolean value indicating presence of anti-analysis software</li> <li>Windows build version</li> <li>NETBIOS Name</li> <li>Boolean value indicating the BokBot process integrity level</li> </ol> <table> <thead> <tr> <th>Header Name</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Authorization</td> <td>Contains various information of BokBot such as the bot and downloader IDs along with the bot’s version.</td> </tr> <tr> <td>Cookie</td> <td>Contains runtime information of BokBot such as any errors while obtaining a handle of the downloader.</td> </tr> </tbody> </table> <p><em>Table 1: HTTP Headers</em></p> <p>Once the command-and-control server receives the request, it replies with a set of command IDs that BokBot should execute (Figure 1).</p> <p><img src="/assets/BokBot/BokBot_HTTP_Commands_Reply.PNG" alt="alt text" /></p> <p><em>Figure 1: Commands To Execute</em></p> <p>The way in which BokBot matches the received commands with its appropriate function is interesting. BokBot stores an array of DWORD values representing the command ID, followed by an array of encoded function pointers. Upon receiving and parsing the commands list, BokBot loops through the commands array and if any matches, it decodes the appropriate function pointer. The encoding/decoding process is as follows (Python format):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ror</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="p">:</span> \
    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">|</span> \
    <span class="p">(</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>

<span class="n">rol</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">val</span><span class="p">,</span> <span class="n">r_bits</span><span class="p">,</span> <span class="n">max_bits</span><span class="p">:</span> \
    <span class="p">(</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> \
    <span class="p">((</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">max_bits</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">max_bits</span><span class="o">-</span><span class="p">(</span><span class="n">r_bits</span><span class="o">%</span><span class="n">max_bits</span><span class="p">)))</span>

<span class="n">max_bits</span> <span class="o">=</span> <span class="mi">64</span>
<span class="c1">#Encodes function address  0x000002442432D450
</span><span class="n">encoded_function</span> <span class="o">=</span> <span class="n">ror</span><span class="p">(</span><span class="mh">0x000002442432D450</span> <span class="o">^</span> <span class="mh">0x123456789ABCDEF</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">64</span><span class="p">)</span>
<span class="n">decoded_function_address</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="n">rol</span><span class="p">(</span><span class="n">encoded_function</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">64</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x123456789ABCDEF</span><span class="p">)</span>
</code></pre></div></div> <p>The below table summarises the identified BokBot HTTP commands (Table 2).</p> <table> <thead> <tr> <th>Command ID</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>0x4C52201</td> <td>Requests an updated version of BokBot main module from the command-and-control server. Once received, BokBot is restarted. The incoming updated version is decrypted with the same algorithm used to decrypt the BokBot configuration with the only difference being the encryption key, which is derived from the bot ID.</td> </tr> <tr> <td>0x345ABA9</td> <td>Requests an updated list of BokBot servers domains. Configuration is decrypted with the same algorithm used to decrypt the BokBot configuration with the only difference being the encryption key, which is derived from the bot ID.</td> </tr> <tr> <td>0x1F95C7A</td> <td>Requests an updated version of BokBot downloader from the command-and-control server. Once received, BokBot invokes its persistence methods again. Then it restarts itself.</td> </tr> <tr> <td>0x17300E2</td> <td>Updates the BokBot configuration key ‘sys’.</td> </tr> <tr> <td>0x1E4290D</td> <td>Updates BokBot web-injects.</td> </tr> <tr> <td>0x22E9E49</td> <td>Triggers network beacon thread to send a beacon message to the server.</td> </tr> <tr> <td>0x13CFAD5</td> <td>Updates the period time of network beacon thread.</td> </tr> <tr> <td>0x377218A</td> <td>Reads BokBot log file.</td> </tr> <tr> <td>0x274FF95</td> <td>Sets a value in the BokBot registry key to specify what type of data BokBot should log.</td> </tr> <tr> <td>0x59E8E82</td> <td>Creates new specified registry key and sets data to it.</td> </tr> <tr> <td>0x589BEA9</td> <td>Reads the data of a specified registry key.</td> </tr> <tr> <td>0x3702792</td> <td>Deletes registry key.</td> </tr> <tr> <td>0x2C9101D</td> <td>Enumerates processes and sends them to the command-and-control server.</td> </tr> <tr> <td>0x2B0C92C</td> <td>Executes system commands in the compromised host. This can include files and PowerShell scripts too.</td> </tr> <tr> <td>0x2617262</td> <td>Injects shellcode into a new process.</td> </tr> <tr> <td>0x47A7AA5</td> <td>Issues ‘BackConnect’ feature (described in the Network Communication section).</td> </tr> <tr> <td>0x3ABD5C5</td> <td>Get files list located in the desktop path.</td> </tr> <tr> <td>0x5AEEE0D</td> <td>Runs system credentials stealer.</td> </tr> <tr> <td>0x2AF7C33</td> <td>Runs browser cookie stealer. A temporary file is created to store the collected data.</td> </tr> <tr> <td>0x0D128D1</td> <td>Reads a file and sends its content to the command-and-control server.</td> </tr> <tr> <td>0x4577C59</td> <td>Searches for a file and reads its content. Then its contents are sent to the command-and-control server.</td> </tr> <tr> <td>0x172261B</td> <td>Collects system information of the compromised host by executing various commands(See Table 3 in Appendix)</td> </tr> </tbody> </table> <p><em>Table 2: BokBot HTTP Commands</em></p> <p><em>Note: Commands 0x2B0C92C and 0x2617262 support two different UAC bypass methods. The first method abuses the executable file ‘fodhelper.exe’ [2] and the second method uses the executable file ‘eventvwr.exe’ [3]. Requests from the server that involve an update to either a configuration or executable file are verified using a hard-coded public RSA key.</em></p> <p>After executing a command, BokBot compresses the data using the Zlib library and removes the first two bytes ‘0x78 0x9c’. Then, it constructs a POST request with a specific URI (each command has its own URI parameters hard-coded) and sends it to the server (Figure 2).</p> <p><img src="/assets/BokBot/BokBot_HTTP_Command_Output.PNG" alt="alt text" /> <em>Figure 2: BokBot sending collected processes names to the server</em></p> <h3 id="sockets-backconnect"> <a href="#sockets-backconnect" class="anchor-head"></a> Sockets (BackConnect) </h3> <p>The ‘BackConnect’ functionality provides the operator(s) an additional set of available commands and uses the same command-and-control server as before. Upon successful connection to the server, BokBot registers a handler and waits for data. <em>Note: The used port number is 443.</em></p> <p>At this point BokBot will perform a different set of actions depending on the status of the connection. For example, if there is a connection time-out then it sends a request to the server with command ID 2 (proceeds to internal command dispatcher) and waits again for new data. In general, BokBot uses the following structure when sending socket data:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma pack(push, 1)
</span><span class="k">struct</span> <span class="n">BC_Send_Data</span>
<span class="p">{</span>
  <span class="n">BYTE</span> <span class="n">CMD_ID</span><span class="p">;</span>
  <span class="n">BYTE</span> <span class="n">Connection_Status</span><span class="p">;</span>
  <span class="n">BYTE</span> <span class="n">Connection_Counter</span><span class="p">;</span>
  <span class="n">WORD</span> <span class="n">Error_Code</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">New_Received_Socket_IP</span><span class="p">;</span>
<span class="p">};</span>
<span class="cp">#pragma pack(pop)
</span></code></pre></div></div> <p>The above packet is added to another structure, which BokBot uses as a header, in an encrypted format. The data is encrypted using a bitwise XOR operation with the random key being stored in the packet header (see structure below).</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma pack(push, 1)
</span><span class="k">struct</span> <span class="n">BC_Send_Data_Header</span>
<span class="p">{</span>
  <span class="n">BYTE</span> <span class="n">Encoded_ID</span><span class="p">;</span> <span class="c1">// ID | 0x80</span>
  <span class="n">BYTE</span> <span class="n">Encoded_Packet_Size_In_Buffer</span><span class="p">;</span> <span class="c1">// Size | 0x80</span>
  <span class="n">DWORD</span> <span class="n">XOR_Key</span><span class="p">;</span> <span class="c1">// Random generated</span>
  <span class="n">BYTE</span> <span class="n">Encrypted_Command_Data</span><span class="p">[];</span>
<span class="p">};</span>
<span class="cp">#pragma pack(pop)
</span></code></pre></div></div> <p><em>Note: If the command’s size is greater than 126 bytes then the structure’s fields are different but the concept remains the same.</em></p> <p>Considering the above information, the important functionalities of the Back-Connect feature are triggered once data is received. The data is decrypted either using a bitwise XOR operation, using the key stored in the packet header structure, or by using the <code class="language-plaintext highlighter-rouge">DecryptMessage</code> API function. The decryption method selection is based on an integer flag that is initialised during the connection.</p> <p>Next, BokBot checks if the first byte of the encrypted network packet matches any of the below values:</p> <ul> <li>2 - Proceeds to internal command dispatcher.</li> <li>8 – Returns unsuccessful error code.</li> <li>9 – Sends a request with command ID 10 along with the decrypted data.</li> <li>10 – More data is available and has not been read.</li> </ul> <p>In the first case (value 2), BokBot proceeds to its internal command dispatcher and performs another check of the first byte (command ID) of the decrypted data with the following values:</p> <ul> <li>1 – Adds a new IP to communicate with - in this case, a connection is made to the port number 8080.</li> <li>2 – Sends request with command ID 2 to the server - this is the same request packet as in the time-out case.</li> <li>4 – Executes a command from Table 2 - command ID is specified in the packet.</li> </ul> <p>Regarding command ID 1, BokBot creates a new thread for each new received IP address that it should connect to. Furthermore, after connecting to the new IP address, BokBot sends a request with command ID 0. It should be noted that the structure of the requests and replies are different compared to previous cases:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma pack(push, 1)
</span><span class="k">struct</span> <span class="n">BackConnect_Packet</span>
<span class="p">{</span>
  <span class="n">DWORD</span> <span class="n">Verify_Value</span><span class="p">;</span> <span class="c1">// Used to verify the server. Set to 0x974F014A</span>
  <span class="n">BYTE</span> <span class="n">Command_ID</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">Bot_ID</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">Key</span><span class="p">;</span> <span class="c1">// Downloader ID. Used in the executed file </span>
<span class="p">};</span>
<span class="cp">#pragma pack(pop)
</span></code></pre></div></div> <p>Then, the server replies with the same data structure. The available command IDs are:</p> <ul> <li>1 – Changes connection timer.</li> <li>3 – Sets connection timer to 60 seconds.</li> <li>4 – Downloads and executes a file from the server - in case of error, sends command ID 2 to the server.</li> <li>5 – Decrypts embedded VNC module and injects it into a new instance of ‘DllHost.exe’.</li> </ul> <p>Throughout the connection session, BokBot sends a command with ID 1 as a beacon to the server, waiting for new data.</p> <h1 id="references"> <a href="#references" class="anchor-head"></a> References </h1> <ol> <li>https://blog.fox-it.com/2018/08/09/bokbot-the-rebirth-of-a-banker/</li> <li>https://pentestlab.blog/2017/06/07/uac-bypass-fodhelper/</li> <li>https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/</li> </ol> <h1 id="appendix"> <a href="#appendix" class="anchor-head"></a> Appendix </h1> <ol> <li>https://github.com/nikpx/BokBot/blob/master/Bokbot_IDA_Decrypt_Strings_2022.py</li> <li>https://github.com/nikpx/BokBot/blob/master/Config_Network_Data_Decrypt.py</li> </ol> <table> <thead> <tr> <th>Command</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>WMIC /Node:localhost /Namespace:\root\SecurityCenter2 Path AntiVirusProduct Get * /Format:List</td> <td>Collects installed Anti-Virus products</td> </tr> <tr> <td>ipconfig /all</td> <td>Collects network configuration/information</td> </tr> <tr> <td>systeminfo</td> <td>Operating system information</td> </tr> <tr> <td>net config workstation</td> <td>Collects workstation settings</td> </tr> <tr> <td>nltest /domain_trusts</td> <td>Collects trusted domains</td> </tr> <tr> <td>nltest /domain_trusts /all_trusts</td> <td>Collects all trusted domains</td> </tr> <tr> <td>net view /all /domain</td> <td>Collects all domain network shares</td> </tr> <tr> <td>net view /all</td> <td>Collects all network shares</td> </tr> <tr> <td>net group “Domain Admins” /domain</td> <td>Collects domain admins usernames</td> </tr> </tbody> </table> <p><em>Table 3: Commands to collect system information</em></p> </div> </article> </main> <nav class="post-nav"> <a class="post-nav-item post-nav-next" href="/malware/analysis/2022/04/19/Emotet_Loader.html"> <div class="nav-arrow">Next</div> <span class="post-title">Emotet Loader Technical Analysis</span> </a> </nav> <footer class="footer"> <a class="footer_item" href="/feed.xml">rss</a> <span class="footer_item">&copy; 2022</span> <small class="footer_theme-copyright"> <!-- Klisé Theme: https://github.com/piharpi/jekyll-klise --> <a href="https://github.com/piharpi/jekyll-klise" target="_blank" rel="noreferrer noopener" >klisé</a > theme on <a href="https://jekyllrb.com" target="_blank" rel="noreferrer noopener" >jekyll</a > </small> </footer> <script src="/assets/js/main.js" defer="defer"></script> <script src="/assets/js/galite.js"></script> <script> var galite = galite || {}; galite.UA = ""; </script> </div> </body> </html>
