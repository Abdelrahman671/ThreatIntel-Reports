<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Writing a decryptor for Jaff ransomware | ./amnesia.sh</title>
<meta name="generator" content="Jekyll v3.10.0" />
<meta property="og:title" content="Writing a decryptor for Jaff ransomware" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Analyzing a vulnerable ransomware sample" />
<meta property="og:description" content="Analyzing a vulnerable ransomware sample" />
<link rel="canonical" href="/malware/2023/02/14/jaff.html" />
<meta property="og:url" content="/malware/2023/02/14/jaff.html" />
<meta property="og:site_name" content="./amnesia.sh" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2023-02-14T22:00:00+00:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Writing a decryptor for Jaff ransomware" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2023-02-14T22:00:00+00:00","datePublished":"2023-02-14T22:00:00+00:00","description":"Analyzing a vulnerable ransomware sample","headline":"Writing a decryptor for Jaff ransomware","mainEntityOfPage":{"@type":"WebPage","@id":"/malware/2023/02/14/jaff.html"},"url":"/malware/2023/02/14/jaff.html"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="/feed.xml" title="./amnesia.sh" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">./amnesia.sh</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About Me</a><a class="page-link" href="/blog/">Blog</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Writing a decryptor for Jaff ransomware</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2023-02-14T22:00:00+00:00" itemprop="datePublished">Feb 14, 2023
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <h2 id="overview">Overview</h2>

<p>Recently, I’ve been trying to learn more about reverse engineering ransomware. Jaff is ransomware from a campaign dating back to 2017, and I was told that it had a vulnerability that would make it possible to write a decryptor. I analyzed a sample to see if I could rediscover the vulnerability myself.</p>

<p>You can find the sample I used <a href="https://malshare.com/sample.php?action=detail&amp;hash=0746594fc3e49975d3d94bac8e80c0cdaa96d90ede3b271e6f372f55b20bac2f">on MalShare</a>, and its SHA256 hash is <code class="language-plaintext highlighter-rouge">0746594fc3e49975d3d94bac8e80c0cdaa96d90ede3b271e6f372f55b20bac2f</code>.</p>

<h2 id="initial-observations">Initial Observations</h2>

<p><img src="/assets/images/jaff/detectiteasy.png" alt="" /></p>

<p>The sample is a 32-bit PE excutable written in C++. The executable did not seem to import any functions related to cryptography, and it contained a very long chunk of encrypted data. This meant that the most important functions of this program were likely being decrypted dynamically.</p>

<p>By setting breakpoints on <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> and <code class="language-plaintext highlighter-rouge">VirtualProtect</code>, I kept track of each time a RWX segment of memory was allocated. After several calls to <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> and <code class="language-plaintext highlighter-rouge">VirtualProtect</code>, the program wrote a PE file to one of these segments, which I dumped from memory. This turned out to be the actual encryptor, and it’s what I’ll be focusing on for the remainder of my analysis.</p>

<h3 id="behaviors">Behaviors</h3>

<p>When run, the sample calls itself <code class="language-plaintext highlighter-rouge">Ffv opg me liysj sfssezhz</code>:</p>

<p><img src="/assets/images/jaff/task_manager.png" alt="" /></p>

<p>Additionally, a GET request is made to <code class="language-plaintext highlighter-rouge">fkksjobnn43[.]org/a5/</code>. As I don’t have access to this C2 server, I have no way of knowing what was expected from this server or whether the encryption process would have proceeded differently if I’d been able to connect.</p>

<p><img src="/assets/images/jaff/http_request.png" alt="" /></p>

<h3 id="strings-imports-and-resources">Strings, Imports, and Resources</h3>

<p>The binary I dumped from memory imports cryptography-related functions such as <code class="language-plaintext highlighter-rouge">CryptEncrypt</code>, <code class="language-plaintext highlighter-rouge">CryptExportKey</code>, and <code class="language-plaintext highlighter-rouge">CryptGenKey</code>, as well as file enumeration functions such as <code class="language-plaintext highlighter-rouge">FindFirstFileW</code> and <code class="language-plaintext highlighter-rouge">FindNextFileW</code>. This is how I knew I was looking at the actual encryptor.</p>

<p>Additionally, there were several resources containing data used in the encryption process:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#105</code>: The string representation of the numbers <code class="language-plaintext highlighter-rouge">35326054031861368139563306184134167018130718569482731666001650817539108744401016633231304437224730790638615766740272106403143256</code> and <code class="language-plaintext highlighter-rouge">35326054031861368139563306184134167018130718569482731666001650829864568371094444203557601170206844003631101722202233367975968667</code>.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">#106</code>: The file extensions to encrypt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.xlsx .acd .pdf .pfx .crt .der .cad .dwg .MPEG .rar .veg .zip .txt .jpg .doc .wbk .mdb .vcf .docx .ics .vsc .mdf .dsr .mdi .msg .xls .ppt .pps .obd .mpd .dot .xlt .pot .obt .htm .html .mix .pub .vsd .png .ico .rtf .odt .3dm .3ds .dxf .max .obj .7z .cbr .deb .gz .rpm .sitx .tar .tar.gz .zipx .aif .iff .m3u .m4a .mid .key .vib .stl .psd .ova .xmod .wda .prn .zpf .swm .xml .xlsm .par .tib .waw .001 .002 003. .004 .005 .006 .007 .008 .009 .010 .contact .dbx .jnt .mapimail .oab .ods .ppsm .pptm .prf .pst .wab .1cd .3g2 .7ZIP .accdb .aoi .asf .asp. aspx .asx .avi .bak .cer .cfg .class .config .css .csv .db .dds .fif .flv .idx .js .kwm .laccdb .idf .lit .mbx .md .mlb .mov .mp3 .mp4 .mpg .pages .php .pwm .rm .safe .sav .save .sql .srt .swf .thm .vob .wav .wma .wmv .xlsb .aac .ai .arw .c .cdr .cls .cpi .cpp .cs .db3 .docm .dotm .dotx .drw .dxb .eps .fla .flac .fxg .java .m .m4v .pcd .pct .pl .potm .potx .ppam .ppsx .ps .pspimage .r3d .rw2 .sldm .sldx .svg .tga .wps .xla .xlam .xlm .xltm .xltx .xlw .act .adp .al .bkp .blend .cdf .cdx .cgm .cr2 .dac .dbf .dcr .ddd .design .dtd .fdb .fff .fpx .h .iif .indd .jpeg .mos .nd .nsd .nsf .nsg .nsh .odc .odp .oil .pas .pat .pef .ptx .qbb .qbm .sas7bdat .say .st4 .st6 .stc .sxc .sxw .tlg .wad .xlk .aiff .bin .bmp .cmt .dat .dit .edb .flvv .gif .groups .hdd .hpp .log .m2ts .m4p .mkv .ndf .nvram .ogg .ost .pab .pdb .pif .qed .qcow .qcow2 .rvt .st7 .stm .vbox .vdi .vhd .vhdx .vmdk .vmsd .vmx .vmxf .3fr .3pr .ab4 .accde .accdt .ach .acr .adb .srw .st5 .st8 .std .sti .stw .stx .sxd .sxg .sxi .sxm .tex .wallet .wb2 .wpd .x11 .x3f .xis .ycbcra .qbw .qbx .qby .raf .rat .raw .rdb rwl .rwz .s3db .sd0 .sda .sdf .sqlite .sqlite3 .sqlitedb .sr .srf .oth .otp .ots .ott .p12 .p7b .p7c .pdd .pem .plus_muhd .plc .pptx .psafe3 .py .qba .qbr.myd .ndd .nef .nk .nop .nrw 
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#109</code>: The ransom note in HTML form, with the string <code class="language-plaintext highlighter-rouge">[ID5]</code> in place of the victim’s decryption ID.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#110</code>: The string <code class="language-plaintext highlighter-rouge">.jaff</code>, which is the extension appended to encrypted files.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#111</code>: The URL <code class="language-plaintext highlighter-rouge">fkksjobnn43[.]org/a5/</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#112</code>: The ransom note in text form, again with <code class="language-plaintext highlighter-rouge">[ID5]</code> in place of the ID.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">#113</code>: A string of bytes which, when XORed with the second number in <code class="language-plaintext highlighter-rouge">#106</code>, gives the strings <code class="language-plaintext highlighter-rouge">ReadMe.txt</code>, <code class="language-plaintext highlighter-rouge">ReadMe.bmp</code>, and <code class="language-plaintext highlighter-rouge">ReadMe.html</code>.</li>
</ul>

<p>Additionally, the string <code class="language-plaintext highlighter-rouge">cmd /C del /Q /F %s</code> found in the program suggests that it is intended to delete itself once encryption is complete.</p>

<h2 id="the-encryption-process">The Encryption Process</h2>

<p>The sample uses 256-bit AES to encrypt files. For debugging purposes, I set a breakpoint on <code class="language-plaintext highlighter-rouge">CryptImportKey</code> to read the key blob from memory:</p>

<p><img src="/assets/images/jaff/cryptimportkey.png" alt="" /></p>

<p>A new key is generated using <code class="language-plaintext highlighter-rouge">CryptGenKey</code> each time the program is run.</p>

<p>Beginning with the root directory, the program enumerates all files and subdirectories and uses <code class="language-plaintext highlighter-rouge">CryptEncrypt</code> to AES encrypt each file. The program uses <code class="language-plaintext highlighter-rouge">GetLogicalDrives</code> to find all drives connected to the system, and encrypts all drives that are not CD-ROM drives (possibly because a CD-ROM drive would make a noticeable noise as it started up).</p>

<p>The <code class="language-plaintext highlighter-rouge">.jaff</code> extension is appended to the encrypted file, and the AES-encrypted bytes are written. We can see that there are multiple <code class="language-plaintext highlighter-rouge">WriteFile</code> calls to the encrypted file, revealing that something else is appended to the <code class="language-plaintext highlighter-rouge">.jaff</code> file before the encrypted data:</p>

<p><img src="/assets/images/jaff/writefile.png" alt="" /></p>

<p>The appended value turned out to be the ASCII representation of a large number.</p>

<p><img src="/assets/images/jaff/rsa_encrypted_key.png" alt="" /></p>

<p>Additionally, the ransom note is dropped in each encrypted directory. The note is dropped in text, HTML, and image forms, with file names of <code class="language-plaintext highlighter-rouge">ReadMe.txt</code>, <code class="language-plaintext highlighter-rouge">ReadMe.html</code>, and <code class="language-plaintext highlighter-rouge">ReadMe.bmp</code> respectively.</p>

<p><img src="/assets/images/jaff/ransom_note_with_exp.png" alt="" /></p>

<p>A new victim ID is generated each time the program is run.</p>

<h2 id="encryption-of-the-aes-key">Encryption of the AES Key</h2>

<p>I suspected that the long number appended before the encrypted data in the <code class="language-plaintext highlighter-rouge">.jaff</code> files was likely an encryption of the AES key. A new AES key was generated for each victim, so the program would need some way to store it.</p>

<h3 id="representing-the-key-bytes">Representing The Key Bytes</h3>

<p>I found that the AES key was being passed as an argument to <code class="language-plaintext highlighter-rouge">sub_402d70</code>. When passed into this function, the AES key blob was being stored as a decimal representation in little-endian format, with each decimal digit being stored as a 16-bit integer. Each byte of the key blob was converted to three decimal digits; for instance, <code class="language-plaintext highlighter-rouge">08</code> would be stored as <code class="language-plaintext highlighter-rouge">008</code> and <code class="language-plaintext highlighter-rouge">8A</code> would be stored as <code class="language-plaintext highlighter-rouge">138</code>. Additionally, the digit “1” was appended to the sequence:</p>

<p><img src="/assets/images/jaff/aes_decimal.png" alt="" /></p>

<p>For example, during one run of the program, the original AES key blob was the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>08 02 00 00 10 66 00 00 20 00 00 00 52 8A A4 D0 46 E3 4F FE E8 C6 A0 F5 91 0C 25 81 03 0E 5C 3C 57 F6 A0 43 08 32 C9 83 2C 01 FC 95
</code></pre></div></div>
<p>It was stored as the sequence of bytes</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>04 00 04 00 00 00 01 00 03 00 01 00 01 00 00 00 02 00 00 00 05 00 00 00 08 00 00 00 00 00 07 00 06 00 00 00 00 00 06 00 01 00 06 00 04 00 02 00 07 00 08 00 00 00 00 00 06 00 00 00 02 00 09 00 00 00 04 00 01 00 00 00 03 00 00 00 00 00 09 00 02 00 01 00 07 00 03 00 00 00 02 00 01 00 00 00 05 00 04 00 01 00 05 00 04 00 02 00 00 00 06 00 01 00 08 00 09 00 01 00 02 00 03 00 02 00 04 00 05 00 02 00 09 00 07 00 00 00 07 00 02 00 02 00 00 00 07 00 00 00 08 00 00 00 02 00 04 00 06 00 01 00 08 00 03 00 01 00 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 01 00 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 08 00 00 00 00 00 01
</code></pre></div></div>

<p>which corresponds to the number</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1008002000000016102000000032000000000082138164208070227079254232198160245145012037129003014092060087246160067008050201131044
</code></pre></div></div>

<p>To convert this representation back into bytes, I used the following function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_from_decimal</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> 
	<span class="n">result</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span> 
	<span class="n">s_fixed</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> 
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s_fixed</span><span class="p">)</span> <span class="p">,</span><span class="mi">3</span><span class="p">):</span> 
		<span class="n">curr_num</span> <span class="o">=</span> <span class="n">s_fixed</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">curr_num</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">'little'</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<h3 id="encrypting-the-key">Encrypting The Key</h3>

<p>At this point, it was time to look at what <code class="language-plaintext highlighter-rouge">sub_402d70</code> was actually doing. The arguments to the function were the AES key, an array of bytes that were either 1 or 0, and the decimal representation of the number <code class="language-plaintext highlighter-rouge">35326054031861368139563306184134167018130718569482731666001650829864568371094444203557601170206844003631101722202233367975968667</code>. Note that this is one of the two numbers that appeared in resource <code class="language-plaintext highlighter-rouge">#105</code>.</p>

<p>By experimenting with this subrouting in a debugger, I found that the program was calling functions that performed multiplication and division on arbitrarily large numbers. Sepecifically, the AES key was being squared over and over, and something different was done with the result based on the values in the array of 1s and 0s.</p>

<p><img src="/assets/images/jaff/repeated_square.png" alt="" /></p>

<p>This proved to be the repeated-squaring method for modular exponentiation. The AES key was being raised to an exponent, which was passed as an argument in binary form in order to aid in the repeated-squaring algorithm. The modulus was the long number stored in the resource.</p>

<p>The use of modular exponentiation immediately suggested that RSA was being used. Normally, this would mean we wouldn’t be able to decrypt the AES key, as we need the private key for that.</p>

<p>However, resource <code class="language-plaintext highlighter-rouge">#105</code> contains two numbers, and we’ve only used one so far. One of them is the public modulus n, and the other number is very close to it. It seemed possible that the second number was phi(n), which is needed to compute the private exponent d from the public exponent e. I wrote the following script to test it:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rsa_decrypt</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">):</span>
	<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span>
	<span class="k">return</span> <span class="nb">pow</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<p>Sure enough, passing in the second number as phi(n) returned the decrypted AES key! Since the RSA key was hard-coded, this meant that we had enough information to write a decryptor for any files encrypted with this sample, even if the AES key changed each time.</p>

<h2 id="the-public-exponent">The Public Exponent</h2>

<p>To generate the private exponent for the decryptor, I not only needed phi(n), but also the public exponent. However, the program generated a new public exponent each time it was run.</p>

<p>Upon closer inspection, I found that the public exponent was usually close to the victim ID given in the ransom note. Sometimes they matched exactly, but sometimes the exponent was slightly more than the ID, and occasionally they didn’t seem to match at all.</p>

<p>Eventually, I found that the victim ID seemed to be randomly generated. If a negative number was generated, the bits were negated in order to produce a positive result.</p>

<p><img src="/assets/images/jaff/exponent_from_id.png" alt="" /></p>

<p>After correcting for this, I found that either the victim ID or its negation was always close to the exponent, but there didn’t seem to be much of a pattern to the exact difference.</p>

<p>It turned out that the victim ID sometimes needed to be modified before it could work as a public exponent. In RSA, the public exponent needs to be invertible modulo phi(n), meaning that the exponent and phi(n) need to be relatively prime. However, the process that generated the victim IDs did not guarantee a result that was relatvely prime to phi(n).</p>

<p>(This is just speculation, but my guess is that this is why phi(n) was hard-coded in the executable - they needed to guarantee that they had a valid public exponent, so they had to check whether the ID and phi(n) were relatively prime. However, this also gives us enough information to decrypt the files ourselves!)</p>

<p>By incrementing the victim ID until I got a number that was relatively prime to phi(n), I managed to retrieve the public exponent.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_relatively_prime</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">):</span>
	 <span class="k">while</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">):</span>
	 	<span class="n">e</span> <span class="o">+=</span> <span class="mi">2</span>
	 <span class="k">return</span> <span class="n">e</span>
</code></pre></div></div>

<h2 id="putting-it-all-together">Putting It All Together</h2>

<p>We now have enough information to write a decryptor that decrypts the victim’s files using only the encrypted <code class="language-plaintext highlighter-rouge">.jaff</code> file and the ID number in the ransom note.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span><span class="p">,</span> <span class="n">unpack</span>

<span class="n">phi_n</span> <span class="o">=</span> <span class="mi">35326054031861368139563306184134167018130718569482731666001650817539108744401016633231304437224730790638615766740272106403143256</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">35326054031861368139563306184134167018130718569482731666001650829864568371094444203557601170206844003631101722202233367975968667</span>

<span class="k">def</span> <span class="nf">convert_from_decimal</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> 
	<span class="n">result</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span> 
	<span class="n">s_fixed</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> 
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s_fixed</span><span class="p">)</span> <span class="p">,</span><span class="mi">3</span><span class="p">):</span> 
		<span class="n">curr_num</span> <span class="o">=</span> <span class="n">s_fixed</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">curr_num</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">'little'</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">result</span>
	
<span class="k">def</span> <span class="nf">rsa_decrypt</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">):</span>
	<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span>
	<span class="k">return</span> <span class="nb">pow</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
	
<span class="k">def</span> <span class="nf">get_relatively_prime</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">):</span>
	 <span class="k">while</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">):</span>
	 	<span class="n">e</span> <span class="o">+=</span> <span class="mi">2</span>
	 <span class="k">return</span> <span class="n">e</span>
	
<span class="k">def</span> <span class="nf">aes_decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">blob</span><span class="p">):</span>
	<span class="n">iv</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">*</span><span class="mi">16</span>
	<span class="n">key_bytes</span> <span class="o">=</span> <span class="n">blob</span><span class="p">[</span><span class="mi">12</span><span class="p">:]</span>
	<span class="n">key</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key_bytes</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
	
	<span class="n">padded_text</span> <span class="o">=</span> <span class="n">ciphertext</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">*</span><span class="p">(</span><span class="mi">16</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span><span class="o">%</span><span class="mi">16</span><span class="p">)</span>
	
	<span class="k">return</span> <span class="n">key</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">padded_text</span><span class="p">)</span>
	
<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>

	<span class="c1">#parse the encrypted AES key and data from the file
</span>
	<span class="n">enc_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
	<span class="n">num_size</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">enc_file</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
	<span class="n">key_str</span> <span class="o">=</span> <span class="n">enc_file</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="n">num_size</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
	<span class="n">ciphertext</span> <span class="o">=</span> <span class="n">enc_file</span><span class="p">[</span><span class="n">num_size</span><span class="o">+</span><span class="mi">8</span><span class="p">:]</span>
	
	<span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">key_str</span><span class="p">.</span><span class="n">split</span><span class="p">()]</span>
	<span class="n">aes_key</span> <span class="o">=</span> <span class="p">[]</span>
	
	
	<span class="c1">#test both the victim ID and its negation for a valid public exponent
</span>	
	<span class="n">exp1</span> <span class="o">=</span> <span class="n">get_relatively_prime</span><span class="p">(</span><span class="nb">id</span> <span class="o">|</span> <span class="mi">1</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span> <span class="n">aes_key</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rsa_decrypt</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">exp1</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">))</span>
	<span class="k">if</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">aes_key</span><span class="p">[</span><span class="mi">0</span><span class="p">]))[</span><span class="mi">0</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'100800'</span><span class="p">:</span>
		<span class="n">aes_key</span> <span class="o">=</span> <span class="p">[]</span>
		<span class="n">not_id</span> <span class="o">=</span> <span class="o">~</span><span class="nb">id</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
		<span class="n">exp2</span> <span class="o">=</span> <span class="n">get_relatively_prime</span><span class="p">(</span><span class="n">not_id</span> <span class="o">|</span> <span class="mi">1</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span>
		<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span> <span class="n">aes_key</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rsa_decrypt</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">exp2</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">))</span>
		
	
	<span class="c1">#decode the key blob from its decimal representation
</span>	
	<span class="n">aes_key_bytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span>
	<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">aes_key</span><span class="p">:</span> <span class="n">aes_key_bytes</span> <span class="o">+=</span> <span class="n">convert_from_decimal</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">k</span><span class="p">))</span>
	
	<span class="k">return</span> <span class="n">aes_decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">aes_key_bytes</span><span class="p">)</span>
</code></pre></div></div>


  </div><a class="u-url" href="/malware/2023/02/14/jaff.html" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">./amnesia.sh</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">./amnesia.sh</li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/clairelevin"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">clairelevin</span></a></li><li><a href="https://www.linkedin.com/in/claire-levin-a8b50b256"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#linkedin"></use></svg> <span class="username">claire-levin-a8b50b256</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Malware analyst, reverse engineer, and occasional CTFer.</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
