<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>CruLoader Analysis - 4rchib4ld  Victory Road</title>
<meta name="description" content="Analysis of a custom malware loader">


  <meta name="author" content="4rchib4ld">
  
  <meta property="article:author" content="4rchib4ld">
  


<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="4rchib4ld  Victory Road">
<meta property="og:title" content="CruLoader Analysis">
<meta property="og:url" content="https://4rchib4ld.github.io/malwareanalysis/CruLoader/">


  <meta property="og:description" content="Analysis of a custom malware loader">







  <meta property="article:published_time" content="2021-04-05T00:00:00+02:00">






<link rel="canonical" href="https://4rchib4ld.github.io/malwareanalysis/CruLoader/">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://4rchib4ld.github.io/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="4rchib4ld  Victory Road Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    <!-- start custom head snippets -->

<!-- insert favicons. use https://realfavicongenerator.net/ -->

<!-- end custom head snippets -->

  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
        <a class="site-title" href="/">
          4rchib4ld  Victory Road
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/posts/">Posts</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/">Categories</a>
            </li><li class="masthead__menu-item">
              <a href="/tags/">Tags</a>
            </li><li class="masthead__menu-item">
              <a href="/about/">About</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  
  <div class="sidebar sticky">
  


<div itemscope itemtype="https://schema.org/Person" class="h-card">

  
    <div class="author__avatar">
      <a href="https://4rchib4ld.github.io/">
        <img src="/assets/images/bio-photo.jpg" alt="4rchib4ld" itemprop="image" class="u-photo">
      </a>
    </div>
  

  <div class="author__content">
    <h3 class="author__name p-name" itemprop="name">
      <a class="u-url" rel="me" href="https://4rchib4ld.github.io/" itemprop="url">4rchib4ld</a>
    </h3>
    
      <div class="author__bio p-note" itemprop="description">
        <p>Forensic, reverse engineering, CTI… I get up and I do it ?</p>

      </div>
    
  </div>

  <div class="author__urls-wrapper">
    <button class="btn btn--inverse">Follow</button>
    <ul class="author__urls social-icons">
      

      
        
          
            <li><a href="https://twitter.com/4rchib4ld" rel="nofollow noopener noreferrer me" itemprop="sameAs"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i><span class="label">Twitter</span></a></li>
          
        
          
            <li><a href="https://github.com/4rchib4ld" rel="nofollow noopener noreferrer me" itemprop="sameAs"><i class="fab fa-fw fa-github" aria-hidden="true"></i><span class="label">GitHub</span></a></li>
          
        
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      <!--
  <li>
    <a href="http://link-to-whatever-social-network.com/user/" itemprop="sameAs" rel="nofollow noopener noreferrer me">
      <i class="fas fa-fw" aria-hidden="true"></i> Custom Social Profile Link
    </a>
  </li>
-->
    </ul>
  </div>
</div>

  
  </div>



  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="CruLoader Analysis">
    <meta itemprop="description" content="Analysis of a custom malware loader">
    <meta itemprop="datePublished" content="2021-04-05T00:00:00+02:00">
    

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title p-name" itemprop="headline">
            <a href="https://4rchib4ld.github.io/malwareanalysis/CruLoader/" class="u-url" itemprop="url">CruLoader Analysis
</a>
          </h1>
          

  <p class="page__meta">
    
      
      <span class="page__meta-date">
        <i class="far fa-calendar-alt" aria-hidden="true"></i>
        
        <time datetime="2021-04-05T00:00:00+02:00">April 5, 2021</time>
      </span>
    

    <span class="page__meta-sep"></span>

    
      
      

      <span class="page__meta-readtime">
        <i class="far fa-clock" aria-hidden="true"></i>
        
          6 minute read
        
      </span>
    
  </p>


        </header>
      

      <section class="page__content e-content" itemprop="text">
        
          <aside class="sidebar__right sticky">
            <nav class="toc">
              <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> On this page</h4></header>
              <ul class="toc__menu"><li><a href="#1st-stage">1st stage</a></li><li><a href="#2nd-stage">2nd Stage</a></li><li><a href="#3rd-stage">3rd Stage</a></li><li><a href="#4th-stage">4th stage</a></li><li><a href="#lets-extract-that-config">Let’s extract that config</a></li><li><a href="#case-solved">Case solved</a></li></ul>

            </nav>
          </aside>
        
        <p>For the Zero2Auto course, <a href="https://twitter.com/0verfl0w_">@0verflow</a> and <a href="https://twitter.com/VK_Intel">@VKIntel</a> developed a sample to test our skills. This write-up will be my analysis of this brand new sample !</p>

<p>Now let’s set the context :</p>
<blockquote>
  <p>Hi there,<br />
During an ongoing investigation, one of our IR team members managed to locate an unknown sample on an infected machine belonging to one of our clients. We cannot pass that sample onto you currently as we are still analyzing it to determine what data was exfiltrated. However, one of our backend analysts developed a YARA rule based on the malware packer, and we were able to locate a similar binary that seemed to be an earlier version of the sample we’re dealing with. Would you be able to take a look at it? We’re all hands on deck here, dealing with this situation, and so we are unable to take a look at it ourselves.<br />
We’re not too sure how much the binary has changed, though developing some automation tools might be a good idea, in case the threat actors behind it start utilizing something like Cutwail to push their samples.<br />
I have uploaded the sample alongside this email.<br />
Thanks, and Good Luck!</p>
</blockquote>

<h2 id="1st-stage">1st stage</h2>

<p>OK so first we got a zip, containing a PE File.
Let’s do some statically analysis to see what we are dealing with :</p>

<p><img src="/assets/images/Pasted%20image 20210404182027.png" alt="" /></p>

<p>From what I can see, this is a 32bits PE File, containing a unknown resource in RCDATA.</p>

<p>Let’s load IDA to see what’s going on :</p>

<p><img src="/assets/images/Pasted%20image 20210404182256.png" alt="" /></p>

<p>Don’t want the malware analyst to see what library you use ? Introducing : <em>String Obfuscation</em>.
Luckily for us, the routine is fairly basic. It’s a ROT13 algorithm with a custom alphabet :</p>

<p><img src="/assets/images/Pasted%20image 20210404182651.png" alt="" /></p>

<p>Doing the same in python in order to have the good names :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">string</span>

<span class="nb">dict</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="s">'01234567890./='</span>
<span class="n">l_encr</span> <span class="o">=</span> <span class="p">[</span><span class="s">".5ea5/QPY4//"</span><span class="p">,</span> <span class="s">"pe51g5Ceb35ffn"</span><span class="p">,</span> <span class="s">"I9egh1/n//b3"</span><span class="p">,</span> <span class="s">"t5gG8e514pbag5kg"</span><span class="p">,</span> <span class="s">"E514Ceb35ffz5=bel"</span><span class="p">,</span> <span class="s">"Je9g5Ceb35ffz5=bel"</span><span class="p">,</span> <span class="s">"I9egh1/n//b3rk"</span><span class="p">,</span> <span class="s">"F5gG8e514pbag5kg"</span><span class="p">,</span> <span class="s">"E5fh=5G8e514"</span><span class="p">,</span> <span class="s">"s9a4E5fbhe35n"</span><span class="p">,</span> <span class="s">"yb14E5fbhe35"</span><span class="p">,</span> <span class="s">"F9m5b6E5fbhe35"</span><span class="p">,</span> <span class="s">"yb3.E5fbhe35"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">encr</span> <span class="ow">in</span> <span class="n">l_encr</span><span class="p">:</span>
	<span class="n">decr</span> <span class="o">=</span> <span class="s">""</span>
	<span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">encr</span><span class="p">:</span>
		<span class="n">pos</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
		<span class="n">decr</span> <span class="o">+=</span> <span class="nb">dict</span><span class="p">[(</span><span class="n">pos</span><span class="o">+</span><span class="mi">13</span><span class="p">)</span><span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="nb">dict</span><span class="p">)]</span>
	<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Encr : </span><span class="si">{</span><span class="n">encr</span><span class="si">}</span><span class="s"> --&gt; </span><span class="si">{</span><span class="n">decr</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Remember the unknown resource in RCDATA we talk earlier ? It’s time for it to rise and shine. Once the resource is loaded can you see what’s waiting for us next ? I let you 1min :</p>

<p><img src="/assets/images/Pasted%20image 20210404182959.png" alt="" /></p>

<p><img src="/assets/images/Pasted%20image 20210405091016.png" alt="" /></p>

<p>You got it right, it’s RC4 ! It’s pretty easy to spot with the The key begins at the 12th bytes of the data and is 16bytes long.
Once the resource is decrypted, a new process of itself is created in a suspended state :</p>

<p><img src="/assets/images/Pasted%20image 20210404183438.png" alt="" /></p>

<p>The decrypted executable is written to memory and execution of the process created is resume :</p>

<p><img src="/assets/images/Pasted%20image 20210404183640.png" alt="" /></p>

<p class="notice--info">In case you didn’t spotted it, it’s a classical case of <a href="https://attack.mitre.org/techniques/T1055/012/">Process Hollowing</a></p>

<p>There is now a brand new executable to analyze !</p>

<h2 id="2nd-stage">2nd Stage</h2>

<p>This part is a little more complicated then the one before. It’s relying heavily on CRC32 hashing for all sort of things like :</p>
<ul>
  <li>Check if it’s running in svchost : <img src="/assets/images/Pasted%20image 20210404184150.png" alt="" /></li>
  <li>Check any blacklisted processes
    <ul>
      <li>Looping through all running processes, hashing their names and comparing it to a harcoded array. Blacklisted processes are : “wireshark.exe”, “x32dbg.exe”, “x64dbg.exe” and “ProcessHacker.exe”</li>
    </ul>
  </li>
  <li>Load API calls</li>
</ul>

<p>This one is a little bit more tricky. There is a function that take a CRC32 hash as a parameter. The hash is matching the wanted API call. 0x8436F795 is corresponding to <code class="language-plaintext highlighter-rouge">IsDebuggerPresent()</code> for example.</p>

<p>But there is a lot of call to this functions… And a lot of APIs in kernel32.dll, ntdll.dll and wininet.dll… So if it’s not fun to do, let’s have a script doing it for us !
I made a IDA script (available <a href="https://github.com/4rchib4ld/CruLoader/blob/main/idaDeobfuscateApiCalls.py">here</a>) that resolve all API calls, the job is way easier now !</p>

<p><img src="/assets/images/Pasted image 20210405095721.png" alt="" /></p>

<p class="notice--info">Important strings are encrypted with rol 4 + a 1byte XOR Key. The following CyberChief <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')Rotate_left(4,false)XOR(%7B'option':'Hex','string':''%7D,'Standard',false)">recipe</a> can be used to decrypt them</p>

<p>With all theses API Calls, our beloved sample will now create a new svchost process :
<img src="/assets/images/Pasted%20image 20210404185709.png" alt="" /></p>

<p>And a new thread inside of it :</p>

<p><img src="/assets/images/Pasted%20image 20210404192745.png" alt="" /></p>

<p class="notice--info">The trouble with execution passed with <code class="language-plaintext highlighter-rouge">CreateRemoteThread</code> is that the thread doesn’t exist yet, and you won’t be fast enough to intercept it. My tip is to set a breakpoint on the entrypoint of the thread (the <code class="language-plaintext highlighter-rouge">ebx</code> value here). When the thread run, the debugger will stop exactly here.</p>

<p>There is now a brand new executable to analyze !
<em>(I’m lying, it’s the 2nd stage but with another entrypoint)</em></p>

<h2 id="3rd-stage">3rd Stage</h2>

<p>This stage is all about the internet. It decrypt the config URL (more on that latter on), fetch it (it contains another URL), fetch the second URL but this one is a <code class="language-plaintext highlighter-rouge">.jpg</code> so it saves it under <code class="language-plaintext highlighter-rouge">C:\Users\USER\AppData\Local\Temp\cruloader\output.jpg</code>.</p>

<p><img src="/assets/images/Pasted%20image 20210405082855.png" alt="" /></p>

<p class="notice--info">The custom UserAgent ‘cruloader’ could be used for detection</p>

<p>When everything is done, a new svchost process is created (yes, again) the <code class="language-plaintext highlighter-rouge">output.jpg</code> is decoded and written to the new process memory. Injection is done with <code class="language-plaintext highlighter-rouge">ResumeThread</code></p>

<h2 id="4th-stage">4th stage</h2>

<p>Here we are. I promess this is the final stage. The final function is the hardest :</p>

<p><img src="/assets/images/Pasted%20image 20210405083755.png" alt="" /></p>

<p>I made a flowchart of everything we saw. I feel like it helps to understand what is going on :</p>

<p>I tried to keep it simple</p>

<p><img src="/assets/images/mermaid-diagram-20210405112144.png" alt="" /></p>

<p>And that’s it ! Oh wait… The IR guy wanted some kind of automation isn’t it ? Let’s give him what he wants !</p>

<h2 id="lets-extract-that-config">Let’s extract that config</h2>

<p>Can all of this hardwork be automated and take like 3secondes ? Sadly for me… It can, so I did it.
First the objective : recover the first URL. Not the 2nd because <strong>you should not reach out to unknown server without proper protection</strong> (TOR, VPN, proxy, public WIFI… WHATEVER). Even if this is 100% safe (a reddit URL), I prefer to always keep this routine.
A couple of problems :</p>
<ul>
  <li>The 2nd stage is RC4 encrypted but we know the location and where the key is.</li>
  <li>There is no way (to my understanding) to predict the offset of the data we want</li>
  <li>Every string is encrypted with a different XOR key (but is always 1byte)</li>
  <li>Rotate Left is always 4, but can be 2 or 5 in another sample</li>
</ul>

<p>Sooooooo how I did it ?</p>

<p>Even if this is just fiction, I wanted to have something that would work for any similar sample, so the bruteforce is kinda big.</p>

<p>First the RC4 key and data is recovered from the 1st stage :</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pe</span> <span class="o">=</span> <span class="n">pefile</span><span class="p">.</span><span class="n">PE</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
<span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">pe</span><span class="p">.</span><span class="n">DIRECTORY_ENTRY_RESOURCE</span><span class="p">.</span><span class="n">entries</span><span class="p">:</span>
	<span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="s">"RC_DATA"</span> <span class="ow">or</span> <span class="s">"RCData"</span><span class="p">:</span>
 		<span class="n">new_dirs</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">directory</span>
 		<span class="k">for</span> <span class="n">res</span> <span class="ow">in</span> <span class="n">newdirs</span><span class="p">.</span><span class="n">entries</span><span class="p">:</span>
 			<span class="n">data_rva</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">directory</span><span class="p">.</span><span class="n">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">struct</span><span class="p">.</span><span class="n">OffsetToData</span>
 			<span class="n">size</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">directory</span><span class="p">.</span><span class="n">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">struct</span><span class="p">.</span><span class="n">Size</span>
 			<span class="n">data</span> <span class="o">=</span> <span class="n">pe</span><span class="p">.</span><span class="n">get_memory_mapped_image</span><span class="p">()[</span><span class="n">data_rva</span><span class="p">:</span><span class="n">data_rva</span><span class="o">+</span><span class="n">size</span><span class="p">]</span>
 			<span class="n">key</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">12</span><span class="p">:</span><span class="mi">27</span><span class="p">]</span>
 			<span class="k">return</span> <span class="n">rc4_decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="err"> </span><span class="n">data</span><span class="p">[</span><span class="mi">28</span><span class="p">:])</span>
</code></pre></div></div>

<p>And I dumped of ALL of the <code class="language-plaintext highlighter-rouge">.rdata</code> section of the 2nd stage and bruteforced it with RotateLeft and XOR key until I find an URL.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">rotAmount</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span> <span class="c1">#Bruteforce the ROT amount
</span>	<span class="n">rotated</span> <span class="o">=</span> <span class="n">rot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="err"> </span><span class="n">rotAmount</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">xorKey</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">300</span><span class="p">):</span> <span class="c1"># Bruteforce the XOR key
</span>		<span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
		<span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">rotated</span><span class="p">:</span>
			<span class="n">result</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="n">xorKey</span><span class="p">)</span>
		<span class="k">if</span> <span class="s">"http"</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
			<span class="n">pattern</span> <span class="o">=</span> <span class="s">"https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}b([-a-zA-Z0-9()@:%_+.~#?&amp;//=]*)?"</span> <span class="c1">#hope you like my tiny regex
</span>			<span class="n">config</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span><span class="err"> </span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/Pasted image 20210405111836.png" alt="" /></p>

<p>That’s might not be the most efficient way to do it, but still faster than opening IDA/x64dbg to check for the correct offset.
The full code is available <a href="https://github.com/4rchib4ld/CruLoader">here</a></p>

<p>Now the IR guy got everything he wanted !</p>

<h2 id="case-solved">Case solved</h2>

<p>And that’s it, we solved all of the mysteries behind CruLoader. I hope you liked this post and had fun reading it.
I tried not to put too many screenshots as otherwise the post would look like a gallery and I don’t think this is enjoyable. Also most of the time I put IDA pseudocode because they are smaller than the graph view in Assembly but I prefer working with assembly (yeah I’m doing this <em>just</em> for you).</p>

<p>Let me know if you find that something can be enhanced (I’m sure it can).</p>

<p>Thanks again <a href="https://twitter.com/0verfl0w_">@0verflow</a> and <a href="https://twitter.com/VK_Intel">@VKIntel</a> for this cool sample</p>

<p>See you soon for another case !</p>

        
      </section>

      <footer class="page__meta">
        
        
  


  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-tags" aria-hidden="true"></i> Tags: </strong>
    <span itemprop="keywords">
    
      <a href="/tags/#writeup" class="page__taxonomy-item p-category" rel="tag">WriteUp</a>
    
    </span>
  </p>




  


  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> Categories: </strong>
    <span itemprop="keywords">
    
      <a href="/categories/#malwareanalysis" class="page__taxonomy-item p-category" rel="tag">MalwareAnalysis</a>
    
    </span>
  </p>


        

  <p class="page__date"><strong><i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> Updated:</strong> <time class="dt-published" datetime="2021-04-05T00:00:00+02:00">April 5, 2021</time></p>

      </footer>

      <section class="page__share">
  

  <a href="https://twitter.com/intent/tweet?text=CruLoader+Analysis%20https%3A%2F%2F4rchib4ld.github.io%2Fmalwareanalysis%2FCruLoader%2F" class="btn btn--twitter" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Twitter"><i class="fab fa-fw fa-twitter" aria-hidden="true"></i><span> Twitter</span></a>

  <a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2F4rchib4ld.github.io%2Fmalwareanalysis%2FCruLoader%2F" class="btn btn--facebook" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on Facebook"><i class="fab fa-fw fa-facebook" aria-hidden="true"></i><span> Facebook</span></a>

  <a href="https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2F4rchib4ld.github.io%2Fmalwareanalysis%2FCruLoader%2F" class="btn btn--linkedin" onclick="window.open(this.href, 'window', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" title="Share on LinkedIn"><i class="fab fa-fw fa-linkedin" aria-hidden="true"></i><span> LinkedIn</span></a>
</section>


      
  <nav class="pagination">
    
      <a href="/blog/HomographAttackUsingUnicode/" class="pagination--pager" title="Homograph Attack Using Unicode
">Previous</a>
    
    
      <a href="/blog/IcedIDOnMyNeckImTheCoolest/" class="pagination--pager" title="IcedID on my neck I’m the coolest
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
    <div class="page__related">
      <h2 class="page__related-title">You May Also Enjoy</h2>
      <div class="grid__wrapper">
        
          



<div class="grid__item">
  <article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">
    
    <h2 class="archive__item-title no_toc" itemprop="headline">
      
        <a href="/blog/Nothing-but-dotnet-when-we-shoot/" rel="permalink">Nothing but dotnet when we shoot
</a>
      
    </h2>
    

  <p class="page__meta">
    
      
      <span class="page__meta-date">
        <i class="far fa-fw fa-calendar-alt" aria-hidden="true"></i>
        
        <time datetime="2022-11-20T00:00:00+01:00">November 20, 2022</time>
      </span>
    

    <span class="page__meta-sep"></span>

    
      
      

      <span class="page__meta-readtime">
        <i class="far fa-fw fa-clock" aria-hidden="true"></i>
        
          4 minute read
        
      </span>
    
  </p>


    <p class="archive__item-excerpt" itemprop="description">Little talk about dotnet and its use in malware
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">
    
    <h2 class="archive__item-title no_toc" itemprop="headline">
      
        <a href="/ctf/Barbahack2022-Satan/" rel="permalink">It’s getting hot in here
</a>
      
    </h2>
    

  <p class="page__meta">
    
      
      <span class="page__meta-date">
        <i class="far fa-fw fa-calendar-alt" aria-hidden="true"></i>
        
        <time datetime="2022-08-29T00:00:00+02:00">August 29, 2022</time>
      </span>
    

    <span class="page__meta-sep"></span>

    
      
      

      <span class="page__meta-readtime">
        <i class="far fa-fw fa-clock" aria-hidden="true"></i>
        
          3 minute read
        
      </span>
    
  </p>


    <p class="archive__item-excerpt" itemprop="description">WriteUp of the satan challenge from Barbhack 2022
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">
    
    <h2 class="archive__item-title no_toc" itemprop="headline">
      
        <a href="/blog/TurlaSnakeOfAttribution/" rel="permalink">Turla, the Snake of Attribution
</a>
      
    </h2>
    

  <p class="page__meta">
    
      
      <span class="page__meta-date">
        <i class="far fa-fw fa-calendar-alt" aria-hidden="true"></i>
        
        <time datetime="2022-04-29T00:00:00+02:00">April 29, 2022</time>
      </span>
    

    <span class="page__meta-sep"></span>

    
      
      

      <span class="page__meta-readtime">
        <i class="far fa-fw fa-clock" aria-hidden="true"></i>
        
          3 minute read
        
      </span>
    
  </p>


    <p class="archive__item-excerpt" itemprop="description">How Turla tries to avoid attribution
</p>
  </article>
</div>

        
          



<div class="grid__item">
  <article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">
    
    <h2 class="archive__item-title no_toc" itemprop="headline">
      
        <a href="/blog/HoneymoonOnIceloader/" rel="permalink">Tomorrow night ? Honeymoon on Ice(loader) ?
</a>
      
    </h2>
    

  <p class="page__meta">
    
      
      <span class="page__meta-date">
        <i class="far fa-fw fa-calendar-alt" aria-hidden="true"></i>
        
        <time datetime="2021-05-14T00:00:00+02:00">May 14, 2021</time>
      </span>
    

    <span class="page__meta-sep"></span>

    
      
      

      <span class="page__meta-readtime">
        <i class="far fa-fw fa-clock" aria-hidden="true"></i>
        
          3 minute read
        
      </span>
    
  </p>


    <p class="archive__item-excerpt" itemprop="description">Write up about the packer used by multiple threat actors during the past few months
</p>
  </article>
</div>

        
      </div>
    </div>
  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';" role="search">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    

    
      
        
          <li><a href="https://twitter.com/4rchib4ld" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i> Twitter</a></li>
        
      
        
          <li><a href="https://github.com/4rchib4ld" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-github" aria-hidden="true"></i> GitHub</a></li>
        
      
    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2022 4rchib4ld  Victory Road. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-166042355-1']);
  
    _gaq.push(['_gat._anonymizeIp']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
