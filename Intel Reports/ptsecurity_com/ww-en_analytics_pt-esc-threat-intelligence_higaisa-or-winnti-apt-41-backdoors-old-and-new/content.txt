<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>Higaisa or Winnti? APT41 backdoors, old and new</title><meta name="description" content="
	The PT Expert Security Center regularly spots emerging threats to information security, including both previously known and newly discovered malware. During such monitoring in May 2020, we detected several samples of new malware that at first glance would seem to belong to the Higaisa group. But detailed analysis pointed to the Winnti group (also known as APT41, per FireEye) of Chinese origin. Subsequent monitoring led us to discover a number of new malware samples used by the group in recent attacks. These include various droppers, loaders, and injectors; Crosswalk, ShadowPad, and PlugX backdoors; and samples of a previously undescribed backdoor that we have dubbed FunnySwitch. We can confidently state that some of these attacks were directed at a number of organizations in Russia and Hong Kong.


	In this article, we will share the results of our investigation of these samples and related network infrastructure, as well as overlaps with previously described attacks.
"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="icon" href="/images/favicons/favicon.ico" sizes="any"/><link rel="icon" href="/images/favicons/icon.svg" type="image/svg+xml"/><link rel="apple-touch-icon" href="/images/favicons/apple-touch-icon.png"/><meta name="next-head-count" content="7"/><script type="text/javascript">
                   
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
  
                   ym(93900442, "init", {
                       clickmap: true,
                       trackLinks: true,
                       accurateTrackBounce: true,
                       webvisor: true
                   });
             </script><noscript><div><img src="https://mc.yandex.ru/watch/93900442" style="position:absolute;left:-9999px" alt=""/></div></noscript><script id="mindbox-init">
    mindbox = window.mindbox || function() { mindbox.queue.push(arguments); };
    mindbox.queue = mindbox.queue || [];

    mindbox('create', {
        endpointId: 'ptsec.global',
    });
</script><script async="" src="https://api.mindbox.ru/scripts/v1/tracker.js"></script><script async="" src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" data-domain-script="0191d674-840f-7931-a533-9567b38dbd10" data-document-language="true"></script><script type="text/javascript">function OptanonWrapper() { }</script><link rel="preload" href="/_next/static/css/80c4a58119cf7c0b.css" as="style"/><link rel="stylesheet" href="/_next/static/css/80c4a58119cf7c0b.css" data-n-g=""/><link rel="preload" href="/_next/static/css/5cec7a8abaf4901f.css" as="style"/><link rel="stylesheet" href="/_next/static/css/5cec7a8abaf4901f.css" data-n-p=""/><link rel="preload" href="/_next/static/css/aabb9bc1061deee8.css" as="style"/><link rel="stylesheet" href="/_next/static/css/aabb9bc1061deee8.css" data-n-p=""/><link rel="preload" href="/_next/static/css/37c177beab301399.css" as="style"/><link rel="stylesheet" href="/_next/static/css/37c177beab301399.css" data-n-p=""/><link rel="preload" href="/_next/static/css/bb426d7648eb51ac.css" as="style"/><link rel="stylesheet" href="/_next/static/css/bb426d7648eb51ac.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="/_next/static/chunks/webpack-d6441674d4b92143.js" defer=""></script><script src="/_next/static/chunks/framework-ce84985cd166733a.js" defer=""></script><script src="/_next/static/chunks/main-2aa161cc193cdf0e.js" defer=""></script><script src="/_next/static/chunks/pages/_app-03ac6c281b4190af.js" defer=""></script><script src="/_next/static/chunks/4b358913-e177b648ea0062d1.js" defer=""></script><script src="/_next/static/chunks/f10e284a-c46ff7024e963ef1.js" defer=""></script><script src="/_next/static/chunks/dff27125-edb64a536e668286.js" defer=""></script><script src="/_next/static/chunks/4322cd96-db9c9cbc97931387.js" defer=""></script><script src="/_next/static/chunks/5300-5d5240edfe5088d0.js" defer=""></script><script src="/_next/static/chunks/4028-70e0d285b32e5897.js" defer=""></script><script src="/_next/static/chunks/2580-447bcccef7567d77.js" defer=""></script><script src="/_next/static/chunks/8675-7126786e5e2e65c5.js" defer=""></script><script src="/_next/static/chunks/585-0d6245c6d60804bf.js" defer=""></script><script src="/_next/static/chunks/8973-5b086d43f68f9a0f.js" defer=""></script><script src="/_next/static/chunks/9381-bee1ef77a768e456.js" defer=""></script><script src="/_next/static/chunks/254-dde07e0bcb3d5f5a.js" defer=""></script><script src="/_next/static/chunks/3330-13425461e8bb6bd9.js" defer=""></script><script src="/_next/static/chunks/4883-2176c4253c530a9f.js" defer=""></script><script src="/_next/static/chunks/9852-d3e7d7c2bf949d3a.js" defer=""></script><script src="/_next/static/chunks/9943-143dbfda987f993f.js" defer=""></script><script src="/_next/static/chunks/5363-fea1d2f79e1d9971.js" defer=""></script><script src="/_next/static/chunks/pages/analytics/pt-esc-threat-intelligence/%5Bslug%5D-debebc1698dc2505.js" defer=""></script><script src="/_next/static/39FkjQp2g8LNEtWCuedET/_buildManifest.js" defer=""></script><script src="/_next/static/39FkjQp2g8LNEtWCuedET/_ssgManifest.js" defer=""></script></head><body><div id="__next"><div class=""><header class="Header_header__Hd6K0" id="nav-bar"></header><main id="main" class="PageLayout_main__LUbC0"><div class="ArticleHeader_banner__enm6f"><section class="PageSection_section__GxaaG ArticleHeader_section__sve5w ArticleHeader_withBottomBar__d_wKA"><div class="ArticleHeader_header___PnMn"><div class="ArticleHeader_headerInner__2bYRI"><h2 class="Heading_base__MUnbH Heading_level_2__qXMBH"><span>Higaisa or Winnti? APT41 backdoors, old and new</span></h2></div></div><div class="ArticleHeader_bottomBar__EgyS1"><div class="ArticleHeader_leftSide__gAaId"><div class="ArticleBageLink_container__n25zS"><div class="ArticleBageLink_icon__Z9k9v"><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.312 12.1358L8 14.7438L3.688 12.1358C3.1848 11.8491 2.76468 11.4366 2.46878 10.9388C2.17288 10.441 2.01135 9.8748 2 9.29577L2 2.50377C2 2.50377 2.04 2.39977 2.16 2.35177L7.808 1.21577C7.93487 1.19175 8.06513 1.19175 8.192 1.21577L13.84 2.35177C13.96 2.35177 14 2.46377 14 2.50377L14 9.29577C13.9887 9.8748 13.8271 10.441 13.5312 10.9388C13.2353 11.4366 12.8152 11.8491 12.312 12.1358Z" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path><path d="M6.40039 7.1999L8.00039 8.7999L10.4004 6.3999" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></svg></div><a href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"><span>PT EXPERT SECURITY CENTER</span></div></a></div><div class="ArticleDate_dark__bQPEn Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"><span>13 JANUARY 2021</span></div></div><div class="ArticleHeader_rightSide__zUGU_"><button type="button" class="ButtonShareLink_extraButton__6pf3i ArticleHeader_extraButton__zTZOf Button_button__F7Ulc Button_button_size_s___Bpb6 Button_button_theme_dark__iuu3A"><span>Share<img alt="share" loading="lazy" width="16" height="16" decoding="async" data-nimg="1" style="color:transparent" src="/_next/static/media/sharing.472b5ae7.svg"/></span></button></div></div></section></div><section class="PageSection_section__GxaaG Card_section__QzdVO"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j"><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_leftColumn___AQb_"><div class="SidebarWidgets_root__EIInZ"><div class="SidebarWidget_root__IWq9u" data-theme="light"><span class="SidebarWidget_badge__gm6Re" aria-hidden="true"></span><a href="/analytics"><h4 class="SidebarWidget_link__7lVne Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_light__level_4__u4aOM"><span>Analytics articles</span></h4></a><ul class="SidebarWidget_articles__wrBxg"><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>7 January 2025</span></div><a target="_blank" href="/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Cyberthreats evolve while forecasts signal more sophisticated risks ahead</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>26 December 2024</span></div><a target="_blank" href="/analytics/trending-vulnerability-digest-november-2024"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Trending vulnerability digest November 2024</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>10 December 2024</span></div><a target="_blank" href="/analytics/artificial-intelligence-in-cyberattacks"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Artificial intelligence in cyberattacks</span></div></a></li></ul></div><div class="AdBanner_banner__Phuq9"><img alt="" loading="lazy" decoding="async" data-nimg="fill" class="AdBanner_image__8dCJL" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;object-fit:cover;color:transparent" src="https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png"/><div class="AdBanner_detail__tt_BJ"><h4 class="Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_dark__level_4__5RqHy"><span>What are the security threats on your network?</span></h4><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_dark__type_pM__3GUPK"><span>Check your traffic-for free</span></div><a class="AdBanner_button__9I57f Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_dark__iuu3A" href="/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new#contacts"><span><span>Request pilot</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></a></div></div></div></div><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"><div class="HtmlContent_content__ajDaE esiArticle_bitrixContent__PCSBe"><article>
<p>The <a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/" target="_blank">PT Expert Security Center</a> regularly spots emerging threats to information security, including both previously known and newly discovered malware. During such monitoring in May 2020, we detected several samples of new malware that at first glance would seem to belong to the Higaisa group. But detailed analysis pointed to the <a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/shadowpad-new-activity-from-the-winnti-group/" target="_blank">Winnti group (also known as APT41, per FireEye)</a> of Chinese origin. Subsequent monitoring led us to discover a number of new malware samples used by the group in recent attacks. These include various droppers, loaders, and injectors; Crosswalk, ShadowPad, and PlugX backdoors; and samples of a previously undescribed backdoor that we have dubbed FunnySwitch. We can confidently state that some of these attacks were directed at a number of organizations in Russia and Hong Kong.</p>
<p>In this article, we will share the results of our investigation of these samples and related network infrastructure, as well as overlaps with previously described attacks.</p>
<h2>Contents</h2>
<ol class="article-nav">
    <li>
    	<a class="link link_article-nav anchorLink" href="#id1">Higaisa shortcuts</a>
		<ol>
			<li><a class="link link_article-nav anchorLink" href="#id1-1">Attribution</a></li>
			<li><a class="link link_article-nav anchorLink" href="#id1-2">Crosswalk</a></li>
		</ol>
    </li>
    
    <li>
    	<a class="link link_article-nav anchorLink" href="#id2">Loaders and injectors</a>
	    <ol>
		    <li><a class="link link_article-nav anchorLink" href="#id2-1">Injectors</a></li>
		    <li><a class="link link_article-nav anchorLink" href="#id2-2">Local shellcode loaders</a></li>
		    <li>
		    	<a class="link link_article-nav anchorLink" href="#id2-3">Attack examples</a>
		    	<ol>
			    	<li><a class="link link_article-nav anchorLink" href="#id2-3-1">An encrypted resume</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id2-3-2">I can&#x27;t breathe</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id2-3-3">Chat transcript</a></li>
		    	</ol>
		    </li>
		</ol>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id3">Attacks on Russian game developers</a>
		<ol>
			<li><a class="link link_article-nav anchorLink" href="#id3-1">Unity3D Game Developer from St. Petersburg</a></li>
			<li><a class="link link_article-nav anchorLink" href="#id3-2">HFS with a surprise</a></li>
		</ol>
    </li>
    
    <li>
    	<a class="link link_article-nav anchorLink" href="#id4">A purloined certificate</a>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id5">FunnySwitch</a>
	    <ol>
		    <li><a class="link link_article-nav anchorLink" href="#id5-1">Unpacking</a></li>
		    <li>
		    	<a class="link link_article-nav anchorLink" href="#id5-2">Funny.dll</a>
		    	<ol>
			    	<li><a class="link link_article-nav anchorLink" href="#id5-2-1">Transport protocols</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id5-2-2">Network-level protocol</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id5-2-3">Application-level protocol</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id5-2-4">Supported commands</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id5-2-5">Unused code</a></li>
					<li><a class="link link_article-nav anchorLink" href="#id5-2-6">FunnySwitch vs. Crosswalk</a></li>
				</ol>
		    </li>
		</ol>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id6">ShadowPad</a>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id7">PlugX</a>
		<ol>
			<li><a class="link link_article-nav anchorLink" href="#id7-1">Paranoid PlugX</a></li>
		</ol>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id8">Conclusion</a>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id9">PT products detection names</a>
    	<ol>
			<li><a class="link link_article-nav anchorLink" href="#id9-1">PT Sandbox</a></li>
			<li><a class="link link_article-nav anchorLink" href="#id9-2">PT Network Attack Discovery</a></li>
		</ol>
    </li>

    <li>
    	<a class="link link_article-nav anchorLink" href="#id10">Applications</a>
		<ol>
			<li><a class="link link_article-nav anchorLink" href="#id10-1">Known names of files from which PL shellcode may be loaded</a></li>
			<li><a class="link link_article-nav anchorLink" href="#id10-2">IOCs</a></li>
			<li><a class="link link_article-nav anchorLink" href="#id10-3">MITRE</a></li>
		</ol>
    </li>
</ol>
<h2 id="id1">1. Higaisa shortcuts</h2>
<p>The first attack dates to May 12, 2020. At the core of the attack is an archive named <em>Project link and New copyright policy.rar</em> (75cd8d24030a3160b1f49f1b46257f9d6639433214a10564d432b74cc8c4d020). The archive contains a bait PDF document (Zeplin Copyright Policy.pdf) plus the folder <b>All tort&#x27;s projects - Web lnks</b> with two shortcuts:</p>
<ul>
<li>Conversations - iOS - Swipe Icons - Zeplin.lnk</li>
<li>Tokbox icon - Odds and Ends - iOS - Zeplin.lnk</li>
</ul>
<p>The structure of malicious shortcuts resembles the sample 20200308-sitrep-48-covid-19.pdf.lnk <a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/covid-19-and-new-year-greetings-the-higaisa-group/" target="_blank">spread by the Higaisa group</a> in March 2020.</p>
<figure>
    <img alt="Comparing command lines in the covid-19 and Zeplin shortcuts" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image1.png"/>
    <figcaption>Figure 1. Comparing command lines in the covid-19 and Zeplin shortcuts</figcaption>
</figure>
<p>The mechanism for initial infection is fundamentally the same: trying to open either of the shortcuts leads to running a command that extracts a Base64-encoded CAB archive from the body of the LNK file, after which the archive is unpacked to a temporary folder. Further actions are performed with the help of an extracted JS script.</p>
<figure>
    <img alt="Contents of script 34fDFkfSD32.js" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image2.png"/>
    <figcaption>Figure 2. Contents of script 34fDFkfSD32.js</figcaption>
</figure>
<p>But here is where the similarity with the sample described in our Higaisa report ends: instead, this script copies the payload to the folder C:\Users\Public\Downloads, achieves persistence by adding itself to the startup folder and adding a scheduler task, and runs the payload. The script also sends the output of ipconfig in a POST request to http://zeplin.atwebpages[.]com/inter.php.</p>
<p>The command run by the shortcut also contains the opening of a URL file extracted from the archive. The name of the URL file and the target address depend on which shortcut is opened:</p>
<ul>
<li><p>Conversations - iOS - Swipe Icons - Zeplin.url goes to:</p>
	<p>https://app.zeplin.io/project/5b5741802f3131c3a63057a4/screen/5b589f697e44cee37e0e61df</p>
</li>
<li><p>Tokbox icon - Odds and Ends - iOS - Zeplin.url goes to:</p>
	<p>https://app.zeplin.io/project/5c161c03fde4d550a251e20a/screen/5cef98986801a41be35122bb.</p>
</li>
</ul>
<p>This is the only difference between the two LNK files. In both cases, the target page is hosted on Zeplin, a legitimate service for collaboration between designers and developers, and requires logging in to view.</p>
<p>The payload consists of two files:</p>
<ul>
<li><p>svchast.exe</p>
	<p>It functions as a simple local shellcode loader. The shellcode read from a fixed path. Before starting, the loader checks the current year: 2018, 2019, 2020, or 2021.</p>
<figure>
    <img alt="Main function in svchast.exe" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image3.png"/>
    <figcaption>Figure 3. Main function in svchast.exe</figcaption>
</figure>
</li><li>
	<p>3t54dE3r.tmp</p>
	<p>The shellcode containing the main payload is the Crosswalk backdoor.</p>
</li>
</ul>
<p>On May 30, 2020, a new malicious archive, CV_Colliers.rar (df999d24bde96decdbb65287ca0986db98f73b4ed477e18c3ef100064bceba6d), was detected. It had two shortcuts:</p>
<ul>
<li>Curriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnk</li>
<li>International English Language Testing System certificate.pdf.lnk</li>
</ul>
<p>Their structure fully matched that of the samples from May 12. In this case, the bait consisted of PDF documents with a CV and IELTS certificate. Depending on which shortcut was opened, the output of ipconfig was sent to one of two addresses: http://goodhk.azurewebsites[.]net/inter.php or http://sixindent.epizy[.]com/inter.php.</p>
<p>Note that all three intermediate C2 servers are on third-level domains on a free hosting service. When accessed in a browser, each displays a different decoy page:</p>
<figure>
    <img alt="Page at zeplin.atwebpages_com" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image4.png"/>
    <figcaption>Figure 4. Page at zeplin.atwebpages_com</figcaption>
</figure>
<figure>
    <img alt="Page at goodhk.azurewebsites_net" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image5.png"/>
    <figcaption>Figure 5. Page at goodhk.azurewebsites_net</figcaption>
</figure>
<figure>
    <img alt="Page at sixindent.epizy_com" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image6.png"/>
    <figcaption>Figure 6. Page at sixindent.epizy_com</figcaption>
</figure>
<p>These servers do not play a major role in the functioning of the malware; their precise purpose remains unknown. It may be that the malware authors used this to monitor the success of the initial stages of infection, or else tried to lead security teams &quot;off the scent&quot; by masking the malware as a more minor threat.</p>
<h3 id="id1-1">1.1 Attribution</h3>
<p>These attacks have been studied in detail by <a href="https://blog.malwarebytes.com/threat-analysis/2020/06/higaisa/" target="_blank">Malwarebytes</a> and <a href="https://www.zscaler.com/blogs/research/return-higaisa-apt" target="_blank">Zscaler</a>. Based on the similarity of the infection chains, researchers classify them as belonging to the Higaisa group.</p>
<p>However, detailed analysis of the shellcode demonstrates that the samples actually belong to the Crosswalk malware family. Crosswalk appeared no later than 2017 and was mentioned for the first time in <a href="https://content.fireeye.com/apt-41/rpt-apt41/" target="_blank">a FireEye report</a> on the activities of the APT41 (Winnti) group.</p>
<figure>
    <img alt="From the FireEye report" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image7.png"/>
    <figcaption>Figure 7. From the FireEye report</figcaption>
</figure>
<figure>
    <img alt="Fragment of shellcode from 3t54dE3r.tmp" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image8.png"/>
    <figcaption>Figure 8. Fragment of shellcode from 3t54dE3r.tmp</figcaption>
</figure>
<p>The network infrastructure of the samples overlaps with previously known APT41 infrastructure: at the IP address of one of the C2 servers, we find an SSL certificate with SHA-1 value of b8cff709950cfa86665363d9553532db9922265c, which is also found at IP address 67.229.97[.]229, referenced in <a href="https://go.crowdstrike.com/rs/281-OBQ-266/images/Report2019GlobalThreatReport.pdf" target="_blank">a 2018 CrowdStrike report</a>. Going further, we can find domains from <a href="https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134508/winnti-more-than-just-a-game-130410.pdf" target="_blank">a Kaspersky report</a> written in 2013.</p>
<figure>
    <img alt="Fragment of network infrastructure" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image9.png"/>
    <figcaption>Figure 9. Fragment of network infrastructure</figcaption>
</figure>
<p>All this leads us to conclude that these LNK file attacks were performed by Winnti (APT41), which &quot;borrowed&quot; this shortcut technique from Higaisa.</p>
<h3 id="id1-2">1.2 Crosswalk</h3>
<p>Crosswalk is a modular backdoor implemented in shellcode. The main component connects to a C2 server, collects and sends system information, and contains functionality for installing and running up to 20 additional modules received from the server as shellcode.</p>
<p>The information collected by the module includes:</p>
<ul>
<li>OS uptime</li>
<li>Network adapter IP addresses</li>
<li>MAC address of one of the adapters</li>
<li>Operating system version and whether it is 32-bit or 64-bit</li>
<li>Username</li>
<li>Computer name</li>
<li>Name of running module</li>
<li>PID</li>
<li>Shellcode version and whether it is 32-bit or 64-bit</li>
</ul>
<p>(The shellcode supports both 32 and 64 bits.) It has two-part version numbers; we found ones including 1.0, 1.10, 1.21, 1.22, 1.25, and 2.0.</p>
<p>For more detailed analysis of one version of Crosswalk, see the <a href="https://www.carbonblack.com/blog/cb-threat-analysis-unit-technical-analysis-of-crosswalk/" target="_blank">VMware CarbonBlack investigation</a>. Based on version 1.25 (8e6945ae06dd849b9db0c2983bca82de1dddbf79afb371aa88da71c19c44c996), which was used in the attacks with LNK files, here we will describe the networking aspects of the malware in more detail.</p>
<p>Crosswalk has broad capabilities for connecting to C2 servers. The network configuration for this particular sample is at the end of the shellcode and is XOR encrypted with a 16-byte key. The data structure is as follows:</p>
<ul>
<li>Configuration size (4 bytes)</li>
<li>Key (16 bytes)</li>
<li>Encrypted configuration</li>
</ul>
<p>The configuration, in turn, contains the following fields:</p>
<ul>
<li>0x0 heartbeat interval (in seconds)</li>
<li>0x4 reconnect interval (in seconds)</li>
<li>0x8 bitmask for days of the week when connections may be made</li>
<li>0xC (inclusive) lower bound for time of day when connections may be made</li>
<li>0x10 (non-inclusive) upper bound for time of day when connections may be made</li>
<li>0x14 proxy port</li>
<li>0x18 proxy type</li>
<li>0x1C proxy host</li>
<li>0x9C proxy username</li>
<li>0x11C proxy password</li>
<li>0x19C number of C2 servers</li>
<li>0x1A0 array of structures of C2 servers</li>
</ul>
<p>A C2 server structure consists of the following fields:</p>
<ul>
<li>0x0 connection type</li>
<li>0x4 port</li>
<li>0x8 whether DNS name resolution is necessary (yes/no)</li>
<li>0xC length of hostname</li>
<li>0x10 hostname</li>
</ul>
<p>Before attempting to connect, the backdoor checks whether the current day of the week and time match those allowed in the configuration. Then, one after the other, it tries combinations of possible proxy servers (any indicated in the configuration plus system proxies) and C2 servers until it connects successfully.</p>
<p>The communication protocol used between the backdoor and C2 server can be separated logically into two levels:</p>
<ol>
<li>Application-level protocol</li>
<li>Transport-level protocol</li>
</ol>
<p>On the application level, messages consist of the following fields:</p>
<ul>
<li>FakeTLS header consisting of 5 bytes:
<ul>
<li>Entry type and protocol version (3 bytes). For the client these always equal 17 03 01; for the server, they have random values.</li>
<li>Data length, not including header (2 bytes)</li>
</ul></li>
<li>Message contents:
<ul>
<li>Command ID (4 bytes, little-endian)</li>
<li>Command data size (4 bytes, little-endian)</li>
<li>Client ID (36 bytes), generated based on the UUID when the backdoor starts operation</li>
<li>Command data</li>
</ul></li>
</ul>
<p>The first two client–server and server–client messages have command IDs 0x65 and 0x64, respectively. They contain the data that will then be used to generate the client and server session keys. The key generation algorithm is detailed in a <a href="https://www.zscaler.com/blogs/research/return-higaisa-apt" target="_blank">Zscaler report</a>. For all subsequent messages, the content (not including the FakeTLS header) is transferred in the corresponding encrypted session key. AES-128 is the encryption algorithm used.</p>
<p>The transport-level protocol depends on the connection type indicated in the configuration. Four protocols are supported:</p>
<ol>
<li>Standard TCP connection
	<p>Application-level messages are sent unchanged as TCP segments.</p>
</li>
<li>Equivalent to HTTP Long Polling
	<p>The client creates two TCP connections. The first will be used to get packets from the server, and the second to send them.</p>
	<p>During the first connection, a GET request is sent to the C2 server. The server replies with headers with code 200 and Content-Length: 524288000. The subsequent stream of application-level messages from the server to the client is sent as the body of an HTTP response.</p>
<figure>
    <img alt="First HTTP connection with C2" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image10.png"/>
    <figcaption>Figure 10. First HTTP connection with C2</figcaption>
</figure>
<p>After the correct response headers are received, the malware establishes a second connection to the same port, where a POST request is made. The header <em>dCy</em> is generated by the client based on the UUID and, it would seem, serves as the session ID that links the two connections. After receipt of a response with code 200, subsequent messages from the client to the server are sent using separate POST requests.</p>
<figure>
    <img alt="Second HTTP connection with C2" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image11.png"/>
    <figcaption>Figure 11. Second HTTP connection with C2</figcaption>
</figure></li>
<li>Duplication of socket with TLS connection
	<p>The client establishes a TCP connection and sends an HTTPS request like the following one:</p>
<pre><div class="code">GET /msdn.cpp HTTP/1.1
Connection: Keep-Alive
User-Agent: WinHTTP/1.1
Content-Length: 4294967295
Host: 149.28.152[.]196</div></pre>
<p>The HTTPS connection is not used again. Subsequent messages are exchanged in the <b>original TCP connection (without TLS encryption)</b>. Subsequent communication between the client and server occurs via protocol 1, except for when, at the beginning of the session, the client sends two packets with the FakeTLS header, which starts with the sequence 17 03 01. The first packet always has length 0. The second has length 0x3A, 0x3C, 0x3E, or 0x40 and contains random bytes. We were unable to determine the purpose of these packets.</p>
<figure>
    <img alt="Additional packets with FakeTLS header" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image12.png"/>
    <figcaption>Figure 12. Additional packets with FakeTLS header</figcaption>
</figure>
</li>
<li><a href="https://github.com/skywind3000/kcp/blob/master/README.en.md" target="_blank">KCP protocol</a>
	<p>This protocol can be implemented on top of any other protocol (including UDP) to ensure quick and reliable data transfer. The Crosswalk client uses KCP on top of a TCP connection: KCP protocol data is added to application-level messages that are then sent as TCP segments.</p>
<figure>
    <img alt="Crosswalk message with KCP headers (highlighted in yellow)" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image13.png"/>
    <figcaption>Figure 13. Crosswalk message with KCP headers (highlighted in yellow)</figcaption>
</figure>
</li>
</ol>
<p>Note that in the Crosswalk samples we detected, none of the samples used the KCP protocol in practice. But the code contains a full-fledged implementation of this protocol, which could be used in other attacks: the developers would simply need to set this connection type in the configuration.</p>
<p>The diversity of protocols and techniques would seem to protect the backdoor from network traffic inspection.</p>
<h2 id="id2">2. Loaders and injectors</h2>
<p>Investigation of network infrastructure and monitoring of new Crosswalk samples put us onto the scent of other malicious objects containing Crosswalk shellcode as their payload. We can categorize these objects into two groups: local shellcode loaders and injectors. Some of the samples in both groups are also obfuscated with VMProtect.</p>
<h3 id="id2-1">2.1 Injectors</h3>
<figure>
    <img alt="Code for injecting shellcode into a running process" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image14.png"/>
    <figcaption>Figure 14. Code for injecting shellcode into a running process</figcaption>
</figure>
<p>The injectors contain typical code that obtains SeDebugPrivilege, finds the PID of the target process, and injects shellcode into it. Depending on the sample, explorer.exe and winlogon.exe are the target processes.</p>
<p>The samples we found contain one of three payloads:</p>
<ul>
<li>Crosswalk</li>
<li>Metasploit stager</li>
<li>FunnySwitch (discussed later in this report)</li>
</ul>
<p>Crosswalk and FunnySwitch shellcode is located in the data sections &quot;as-is,&quot; while the samples with Metasploit show additional XOR encryption with the key &quot;jj1&quot;.</p>
<h3 id="id2-2">2.2 Local shellcode loaders</h3>
<p>The main function of the malware is to extract shellcode and run it in an active process. The malware samples belong to one of two categories, based on the source of shellcode that they use: in the original executable or in an external file in the same directory.</p>
<p>Most of the loaders start by checking the current year, much like the samples from the LNK file attacks.</p>
<figure>
    <img alt="Code of the loader&#x27;s main function" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image15.png"/>
    <figcaption>Figure 15. Code of the loader&#x27;s main function</figcaption>
</figure>
<p>After the malware finds the API functions it needs, it decrypts the string Global\0EluZTRM3Kye4Hv65IGfoaX9sSP7VA with the <a href="https://tools.ietf.org/html/rfc7539" target="_blank">ChaCha20</a> algorithm. In one older version, to prevent being run twice the loader creates a mutex with the name Global\5hJ4YfUoyHlwVMnS1qZkd2tEmz7GPbB. But in recent samples, the decrypted string is not used in any way. Perhaps part of the code was accidentally deleted during the development process.</p>
<p>Another artifact found in some samples is the unused string <em>CSPELOADKISSYOU</em>. Its purpose remains unclear.</p>
<figure>
    <img alt="String " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image16.png"/>
    <figcaption>Figure 16. String &quot;CSPELOADKISSYOU&quot; in data section</figcaption>
</figure>
<p>In the self-contained loaders, the shellcode is located in a PE file overlay. The shellcode is stored in a curious way: data starts from 0x60 bytes of the header, followed by the (encrypted) shellcode. The data length is stored at offset –0x24 from the end of the executable. The header always starts with the PL signature. The other header data is used for decryption: a 32-byte key is located at offset 0x28 and a 12-byte nonce for the ChaCha20 algorithm is at offset 0x50.</p>
<figure>
    <img alt="Handling of PL shellcode in the loader body (ChaCha20)" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image17.png"/>
    <figcaption>Figure 17. Handling of PL shellcode in the loader body (ChaCha20)</figcaption>
</figure>
<p>The ChaCha20 implementation is not always present: some of the samples use Microsoft CryptoAPI with AES-128-CBC for encryption. We can also find key information here in the structure of the PL shellcode: at offset 0x28, there are 32 bytes that are hashed with MD5 to obtain a cryptographic key.</p>
<figure>
    <img alt="Handling of PL shellcode in the loader body (AES-128)" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image18.png"/>
    <figcaption>Figure 18. Handling of PL shellcode in the loader body (AES-128)</figcaption>
</figure>
<p>Older loader versions use Cryptography API: Next Generation (BCrypt* functions) in an equivalent way. They use AES-128 in CFB mode as the encryption algorithm.</p>
<p>The loaders that rely on external files have a similar code structure and one of two encryption types: ChaCha20 or AES-128-CBC. The file should contain PL shellcode of the same format as in the self-contained loader. The name depends on the specific sample and is encrypted with the algorithm used in it. It can contain a full file path (although we did not detect any such samples) or a relative path.</p>
<figure>
    <img alt="Building the file name with PL shellcode" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image19.png"/>
    <figcaption>Figure 19. Building the file name with PL shellcode</figcaption>
</figure>
<p>Among all the loaders, we encountered three different shellcode payloads:</p>
<ul>
<li>Crosswalk</li>
<li>Metasploit stager</li>
<li>Cobalt Strike Beacon</li>
</ul>
<h3 id="id2-3">2.3 Attack examples</h3>
<h4 id="id2-3-1">2.3.1 An encrypted resume</h4>
<p>This malicious file is a RAR archive, electronic_resume.pdf.rar (025e053e329f7e5e930cc5aa8492a76e6bc61d5769aa614ec66088943bf77596), with two files:</p>
<figure>
    <img alt="Contents of electronic_resume.pdf.rar" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image20.png"/>
    <figcaption>Figure 20. Contents of electronic_resume.pdf.rar</figcaption>
</figure>
<p>The first file might look like bait, but trying to open it in a PDF viewer gives an error, since it is practically a copy of the latter.</p>
<p>The file <em>Электронный читатель резюме.exe</em> (&quot;Electronic reader resume.exe&quot;) is an executable self-contained loader for PL shellcode. It contains Cobalt Strike Beacon as the payload.</p>
<figure>
    <img alt="Configuration of Cobalt Strike Beacon" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image21.png"/>
    <figcaption>Figure 21. Configuration of Cobalt Strike Beacon</figcaption>
</figure>
<p>The archive was distributed on approximately June 1, 2020, from the IP address 66.42.48[.]186 and was available at hxxp://66.42.48[.]186:65500/electronic_resume.pdf.rar. The same IP address was used as C2 server.</p>
<p>The modification time of the archive files, as well as the date on which the archive was found the server, point to the attack being active in late May or early June. The Russian filenames suggest that the targets were Russian-speaking users.</p>
<h4 id="id2-3-2">2.3.2 I can&#x27;t breathe</h4>
<p>The attack is practically identical to the previous one: malware is distributed in a RAR archive video.rar (fc5c9c93781fbbac25d185ec8f920170503ec1eddfc623d2285a05d05d5552dc) and consists of two .exe files. The archive is available on June 1 on the same server at the address hxxp://66.42.48[.]186:65500/video.rar.</p>
<figure>
    <img alt="Contents of video.rar" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image22.png"/>
    <figcaption>Figure 22. Contents of video.rar</figcaption>
</figure>
<p>The executable files are self-contained loaders of Cobalt Strike Beacon PL shellcode with a similar configuration and the same C2 server.</p>
<p>The bait is notable for the topic: the hackers were attempting to exploit U.S. protests related to the death of George Floyd. The main bait was a video with the name &quot;I can&#x27;t breathe-America&#x27;s Black Death protests that the riots continue to escalate and ignite America!.mp4&quot; involving reporting on protests in late May, 2020. Judging by the logo, the source of the video was Australian portal XKb, which releases news materials in Chinese.</p>
<figure>
    <img alt="Still frame from the bait video" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image23.png"/>
    <figcaption>Figure 23. Still frame from the bait video</figcaption>
</figure>
<h4 id="id2-3-3">2.3.3 Chat transcript</h4>
<p>The archive <em>запись чата.7z</em> (&quot;chat transcript.7z&quot;) (e0b675302efc8c94e94b400a67bc627889bfdebb4f4dffdd68fdbc61d4cd03ae) contains three identical executable files with names resembling &quot;запись чата-1.png____________________________________.exe&quot; (&quot;chat transcript-1.png____________________________________.exe&quot;) in attacks again targeting Russian-speaking users.</p>
<figure>
    <img alt="Contents of the archive, the name of which promises a &#x27;chat transcript&#x27;" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image24.png"/>
    <figcaption>Figure 24. Contents of the archive, the name of which promises a &quot;chat transcript&quot;</figcaption>
</figure>
<p>The malicious files are self-contained PL shellcode loaders, but the payload here is Crosswalk version 2.0.</p>
<p>Its configuration implies three ways to connect to the C2 server at 149.28.23[.]32:</p>
<ul>
<li><p>Transport protocol 3, port 8443</p></li>
<li><p>Transport protocol 2, port 80</p></li>
<li><p>Transport protocol 1, port 8080</p></li>
</ul>
<figure>
    <img alt="Fragment of the Crosswalk configuration" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image25.png"/>
    <figcaption>Figure 25. Fragment of the Crosswalk configuration</figcaption>
</figure>
<h2 id="id3">3. Attacks on Russian game developers</h2>
<p>The Winnti group first became famous for its attacks on computer game developers. Such attacks continue today, and Russian companies are also among their targets.</p>
<h3 id="id3-1">3.1 Unity3D Game Developer from St. Petersburg</h3>
<p>The attack is based on the archive Resume.rar (4d3ad3ff281a144d9a0a8ae5680f13e201ce1a6ba70e53a74510f0e41ae6a9e6), which contains just one file: CV.chm.</p>
<p>Running the file without security updates installed causes two windows to appear simultaneously: CHM help in HTML Help and a PDF document. They contain the same information: a curriculum vitae for the position of game developer or database manager at a St. Petersburg company.</p>
<p>The CV contains plausible contact information, with a St. Petersburg address, email address ending with &quot;@yandex.ru&quot;, and phone number starting with &quot;+7&quot; (Russia&#x27;s country code). The only obviously fake aspect is the phone number: 123-45-67.</p>
<figure>
    <img alt="Result of opening the CHM file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image26.png"/>
    <figcaption>Figure 26. Result of opening the CHM file</figcaption>
</figure>
<p>The PDF file opens due to the script pass.js, which is contained in the CHM file and referenced in the code of the HTML page.</p>
<figure>
    <img alt="Reference to pass.js in HTML code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image27.png"/>
    <figcaption>Figure 27. Reference to pass.js in HTML code</figcaption>
</figure>
<p>The script uses <a href="https://twitter.com/ithurricanept/status/534993743196090368" target="_blank">a technique</a> for running an arbitrary command in a CHM file via an ActiveX object. This unpacks an HTML help file to the folder C:\Users\Public for launching the next stage of the infection: the file resume.exe, which is also embedded inside the CHM file.</p>
<figure>
    <img alt="Deobfuscated script pass.js" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image28.png"/>
    <figcaption>Figure 28. Deobfuscated script pass.js</figcaption>
</figure>
<p>resume.exe is an advanced shellcode injector of which we had encountered only one sample as of the writing of this article. Before it gets down to business, this malware, like many other samples we have seen from Winnti, checks the current year. Current processes are checked and the malware will not run if any of the following are active: ollydbg.exe|ProcessHacker.exe|Fiddler.exe|windbg.exe|tcpview.exe|idaq.exe|idaq64.exe|tcpdump.exe|Wireshark.exe.</p>
<p>On first launch, shellcode will be taken from MyResume.pdf; on subsequent launches, winness.config is the shellcode source.</p>
<figure>
    <img alt="Main function in resume.exe" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image29.png"/>
    <figcaption>Figure 29. Main function in resume.exe</figcaption>
</figure>
<p>MyResume.pdf is unpacked from the CHM file. Data read by resume.exe has been added to the end of the PDF file. If the user opens it directly, a message warns that the document is password-protected.</p>
<figure>
    <img alt="MyResume.pdf, as viewed in Adobe Acrobat Reader" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image30.png"/>
    <figcaption>Figure 30. MyResume.pdf, as viewed in Adobe Acrobat Reader</figcaption>
</figure>
<p>Compared to the PL shellcode, the data structure is more complex and contains the following:</p>
<ul>
<li>ROR-13 hash of data starting from byte 0x24 (0x20, 4 bytes)</li>
<li>Nonce for algorithm ChaCha20 (0x24, 12 bytes)</li>
<li>ChaCha20-encrypted text (0x30):
<ul>
<li>Name of PDF file (+0x0)</li>
<li>Size of PDF file (+0x20)</li>
<li>Size of auxiliary shellcode (+0x24)</li>
<li>Size of main shellcode (+0x28)</li>
<li>Constant 0xE839E900 (+0x2C)</li>
<li>PDF file</li>
<li>Auxiliary shellcode</li>
<li>Main shellcode</li>
</ul></li>
</ul>
<p>On first launch of resume.exe, the encrypted portion of the data is decrypted (the key is hard-coded in the executable) and three sections are extracted (PDF, auxiliary shellcode, and main shellcode). The PDF file is saved with a name resembling _797918755_true.pdf in a temporary folder. It then opens for the user (the second window in the screenshot on Figure 26, next to HTML Help).</p>
<figure>
    <img alt="resume.exe: actions on first launch" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image31.png"/>
    <figcaption>Figure 31. resume.exe: actions on first launch</figcaption>
</figure>
<p>The payload runs in a new process %windir%\System32\spoolsv.exe, into which the main shellcode is injected: Cobalt Strike Beacon with C2 address 149.28.84[.]98.</p>
<p>Injection occurs by creating a section via a ZwCreateSection call, getting access to it from the parent and child processes via ZwMapViewOfSection calls, copying shellcode to the section, and placing a jump to the shellcode at the entry point for spoolsv.exe.</p>
<p>For persistence, resume.exe (under the name winness.exe) is copied to the folder %appdata%\Microsoft\AddIns\ and the main shellcode is re-encrypted and saved in the same location, with the name winness.config. To ensure autostart, auxiliary shellcode writes the file svchost.bat, which transfers control to winness.exe, to the startup folder. For avoiding detection at this stage, the auxiliary shellcode is injected in a similar way into spoolsv.exe, independently loads the necessary functions, and writes to file in a separate thread.</p>
<p>When winness.exe runs after a restart, the main shellcode is decrypted from winness.config and injected into spoolsv.exe in exactly the same way.</p>
<h3 id="id3-2">3.2 HFS with a surprise</h3>
<figure>
    <img alt="HFS server on Winnti infrastructure" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image32.png"/>
    <figcaption>Figure 32. HFS server on Winnti infrastructure</figcaption>
</figure>
<p>On June 23, 2020, while investigating Winnti network infrastructure, we detected an active <a href="https://en.wikipedia.org/wiki/HTTP_File_Server" target="_blank">HttpFileServer</a> on one of the active C2 servers. Four images were there for all to see: an email icon, screenshot from a game with Russian text, screenshot of the site of a game development company, and a screenshot of information about vulnerability <a href="https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-0796" target="_blank">CVE-2020-0796</a> from the Microsoft website.</p>
<figure>
    <img alt="13524222881554126454-128.png" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image33.png"/>
    <figcaption>Figure 33. 13524222881554126454-128.png</figcaption>
</figure>
<figure>
    <img alt="EaVpPBNXgAE8s3r.jpg" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image34.png"/>
    <figcaption>Figure 34. EaVpPBNXgAE8s3r.jpg</figcaption>
</figure>
<figure>
    <img alt="website_battlestategames.png" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image35.png"/>
    <figcaption>Figure 35. website_battlestategames.png</figcaption>
</figure>
<figure>
    <img alt="windows_update.png" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image36.png"/>
    <figcaption>Figure 36. windows_update.png</figcaption>
</figure>
<p>The screenshots related to Battlestate Games, the St. Petersburg-based developer of <em>Escape from Tarkov.</em></p>
<p>Almost two months later, on August 20, 2020, the file CV.pdf____________________________________________________________.exe (e886caba3fea000a7de8948c4de0f9b5857f0baef6cf905a2c53641dbbc0277c) was uploaded to VirusTotal. This file is a self-contained loader for Cobalt Strike Beacon PL shellcode.</p>
<p>Its C2 server is interesting: update.facebookdocs[.]com.</p>
<p>We discovered that the main domain facebookdocs[.]com hosted a copy of the official site of Battlestate Games: www.battlestategames.com. Via an associated C2 IP address (108.61.214[.]194), we found an equivalent page on the phishing domain www.battllestategames[.]com (note the double &quot;l&quot;).</p>
<figure>
    <img alt="Copy of the official Battlestate Games site" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image37.png"/>
    <figcaption>Figure 37. Copy of the official Battlestate Games site</figcaption>
</figure>
<p>When used as C2 servers, such domains give attackers the ability to mask malicious traffic as legitimate activity within the company.</p>
<p>The combination of these two finds makes us think that we detected traces of preparation for, and subsequent successful implementation of, an attack on Battlestate Games.</p>
<p>Moreover, the match between the job listing for Unity3D developer (as seen in the screenshot from the official site) and contents of the curriculum vitae in the file CV.chm (as described in the previous section), considering how closely they matched in time as well as the company and &quot;applicant&quot; both being located in St. Petersburg, suggests a connection between these attacks. Most likely, the CHM file attack was used at the beginning stage of the breach, although we do not have solid confirmation for this.</p>
<p>Use of typosquatting domains for C2 servers is typical of Winnti and has been described in a <a href="https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134508/winnti-more-than-just-a-game-130410.pdf" target="_blank">Kaspersky report</a>.</p>
<p>Battlestate Games received all of the information uncovered by our investigation into the suspected attack.</p>
<h2 id="id4">4. A purloined certificate</h2>
<p>Another favorite Winnti technique is theft of certificates for code signing. Compromised certificates are used to sign malicious files intended for future attacks.</p>
<p>We found one such certificate belonging to Taiwanese company Zealot Digital:</p>
<pre><div class="code">Name:           ZEALOT DIGITAL INTERNATIONAL CORPORATION
Issuer:         GlobalSign CodeSigning CA - SHA256 - G2
Valid From:     07:43 AM 08/20/2015
Valid To:       07:43 AM 09/19/2016
Valid Usage:    Code Signing
Algorithm:      sha256RSA
Thumbprint:     91e256ac753efe79927db468a5fa60cb8a835ba5
Serial Number:  112195a147c06211d2c4b82b627e3d07bf09</div></pre>
<p>The files signed with it were predominantly used in attacks on organizations in Hong Kong. They include Crosswalk and Metasploit injectors, the juicy-potato utility, and samples of FunnySwitch and ShadowPad.</p>
<h2 id="id5">5. FunnySwitch</h2>
<p>Among the files signed with the Zealot Digital certificate, we discovered two samples of malware containing a previously unknown backdoor. We have called it FunnySwitch, based on the name of the library and one of the key classes. The backdoor is written in .NET and can send system information as well as run arbitrary JScript code, with support for six different connection types, including the ability to accept incoming connections. One of its distinguishing features is the ability to act as message relay between different copies of the backdoor and a C2 server.</p>
<h3 id="id5-1">5.1 Unpacking</h3>
<p>The attack in question starts with the SFX archive x32.exe (2063fae36db936de23eb728bcf3f8a5572f83645786c2a0a5529c71d8447a9af).</p>
<figure>
    <img alt="Contents of the archive x32.exe" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image38.png"/>
    <figcaption>Figure 38. Contents of the archive x32.exe</figcaption>
</figure>
<p>The archive unpacks three files (1.vbs, n3.exe, and p3.exe) into the folder c:\programdata, after which the extracted VBS script runs both executables.</p>
<p>The files n3.exe and p3.exe are identical and inject shellcode into the process explorer.exe. The only difference between them is the final bytes of the shellcode they inject, which contain the XML configuration. In one case, the proxy server 168.106.1[.]1 is specified there in addition:</p>
<pre><div class="code">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Config Group=&quot;aa&quot; Password=&quot;test&quot; StartTime=&quot;0&quot; EndTime=&quot;24&quot; WeekDays=&quot;0,1,2,3,4,5,6&quot;&gt;
    &lt;HttpConnector url=&quot;http://db311secsd.kasprsky[.]info/config/&quot; proxy=&quot;http://168.106.1[.]1/&quot; interval=&quot;30-60&quot;/&gt;
&lt;/Config&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Config Group=&quot;aa&quot; Password=&quot;test&quot; StartTime=&quot;0&quot; EndTime=&quot;24&quot; WeekDays=&quot;0,1,2,3,4,5,6&quot;&gt;
    &lt;HttpConnector url=&quot;http://db311secsd.kasprsky[.]info/config/&quot; interval=&quot;30-60&quot;/&gt;
&lt;/Config&gt;</div></pre>
<p>A subdomain of kasprsky[.]info, db311secsd.kasprsky[.]info, is the C2 domain. Interestingly, several of its other subdomains <a href="https://www.alaha.org/wp-content/uploads/2020/05/Cyber-Alert.pdf" target="_blank">are mentioned in an FBI report</a>. It dates to May 21, 2020, and warns of attacks on organizations linked to COVID-19 research.</p>
<p>The job of the shellcode is to launch and execute a method from the .NET assembly located immediately after its code. To do so, it gets a reference to the ICorRuntimeHost interface, which it uses to run <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">CLR</a> and create an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.appdomain" target="_blank">AppDomain</a> object. The contents of the assembly are loaded into the newly created domain. Reflection is used to run the static method Funny.Core.Run(xml_config), to which the XML configuration is passed.</p>
<figure>
    <img alt="Calling a method from the .NET assembly" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image39.png"/>
    <figcaption>Figure 39. Calling a method from the .NET assembly</figcaption>
</figure>
<p>The assembly is the library Funny.dll with obfuscation by ConfuserEx.</p>
<h3 id="id5-2">5.2 Funny.dll</h3>
<p>The backdoor starts by parsing the configuration. Its root element may contain the following fields:</p>
<ul>
<li>Debug is the flag for enabling debug logging</li>
<li>Group is an arbitrary string sent together with system information.</li>
<li>Password is the key used to encrypt messages.</li>
<li>ID identifies the relay (if not present in the configuration, the GUID is used instead).</li>
<li>StartTime, EndTime, and WeekDays restrict the times and days when the backdoor may function</li>
</ul>
<p>The <code>&lt;Config&gt;</code> element may contain an arbitrary number of elements describing various types of connectors:</p>
<ul>
<li><p>TcpConnector and TcpBindConnector are classes responsible for connecting over TCP as client and server.</p>
	<p>They have two parameters in common: <code>address</code> and <code>port</code> (by default, 38001). TcpConnector also has the <code>parameter</code> interval, which indicates how long to wait before trying to reconnect.</p></li>
<li><p>HttpConnector and HttpBindConnector are HTTP client with support for proxy and HTTP server.</p>
	<p>Supported client parameters: <code>url</code> – address to connect to, <code>interval</code> – same as at TcpConnector, <code>proxy</code> and <code>cred</code> – proxy server address and credentials. Server parameters: <code>url</code> – list of prefixes on which it will run and <code>timeout</code> – client timeout.</p>
<p>The standard classes HttpWebRequest and HttpListener from .NET Framework are used for client and server implementations. Both HTTP and HTTPS are supported: if no SSL certificate is configured for the port on which the server is running, it will be launched with CN = <code>Environment.MachineName + &quot;.local.domain&quot;</code>. The client, in turn, ignores certificate validation.</p>
</li>
<li><p>RPCConnector and RPCBindConnector are classes that allow setting up a connection via a Named Pipe. They take a single parameter, <code>name</code>, which is the name of the connection.</p></li>
</ul>
<p>TcpBindConnector and HttpBindConnector support simultaneous connections for multiple clients.</p>
<p>For the network connectors to work, the backdoor adds an allow rule to Windows Firewall with the name &quot;Core Networking ― IPv4&quot; for its executable module.</p>
<figure>
    <img alt="Code for adding Windows Firewall rules" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image40.png"/>
    <figcaption>Figure 40. Code for adding Windows Firewall rules</figcaption>
</figure>
<p>Just like with Crosswalk, there are multiple levels of the protocol: in this case, transport, network, and application.</p>
<h4 id="id5-2-1">5.2.1 Transport protocols</h4>
<ol>
<li>TCP
	<p>TCP supports three types of messages: PingMessage (0x1), PongMessage (0x2), and DataMessage (0x3). The first two monitor the connection and are relevant only at the TcpConnector/TcpBindConnector level. DataMessage contains network-level data.</p>
<p>Messages consist of a signature (4 bytes), encrypted header (16 bytes), and optional data.</p>
<p>The signature is three random bytes followed by their sum with modulo 256. Incoming messages with an invalid signature are discarded.</p>
<p>The header contains the data size (4 bytes) and byte indicating the message type (0x1, 0x2, or 0x3).</p>
<p>It is encrypted with AES-256-CBC; the key and IV are taken from the MD5 of the key string. The backdoor uses this encryption method in other cases as well, which is why we refer to it as &quot;standard&quot; in the text that follows. The key string in this case is &quot;tcp_encrypted&quot;.</p>
<figure>
    <img alt="Standard encryption in FunnySwitch" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image41.png"/>
    <figcaption>Figure 41. Standard encryption in FunnySwitch</figcaption>
</figure>
</li>
<li>HTTP with long polling
	<p>There are three types of requests: GET &quot;connect&quot;, GET &quot;pull&quot;, and POST &quot;push&quot;. To start transferring data, the client must connect by sending a GET request to a URL from the configuration and provide a special cookie value.</p>
<p>The cookie name is eight random characters. The value is an encrypted Base64 string containing the session GUID and operation name (&quot;connect&quot;). The string is encrypted in the standard way with the key &quot;http&quot;.</p>
<p>The client then constantly sends GET requests with pull operations. In response, the server returns the relevant array of messages for the client or, if no new messages have arrived in the last 10 seconds, an empty response. Client–server messages are periodically sent as an array as well, for which a POST request with push operation is used.</p>
<figure>
    <img alt="FunnySwitch connect and pull requests" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image42.png"/>
    <figcaption>Figure 42. FunnySwitch connect and pull requests</figcaption>
</figure>
<p>The special class MsgPack class, which implements a custom serialization protocol, unpacks the array and other primitive types.</p>
</li>
<li>RPC (Pipe)
	<p>Similar to TCP, except for the absence of connection monitoring.</p>
</li>
</ol>
<h4 id="id5-2-2">5.2.2 Network-level protocol</h4>
<figure>
    <img alt="Function for processing incoming network-level communications" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image43.png"/>
    <figcaption>Figure 43. Function for processing incoming network-level communications</figcaption>
</figure>
<p>All messages at this level are encrypted in the backdoor&#x27;s standard way, with the key string &quot;commonkey&quot;.</p>
<p>Messages are an array of three or four elements:</p>
<ul>
<li>Message type (&quot;hello_request&quot;, &quot;hello_response&quot;, &quot;message&quot;, &quot;error&quot;)</li>
<li>Source serialized array</li>
<li>Destination serialized array</li>
<li>Payload (application-level data)</li>
</ul>
<p>The <em>MsgPack</em> class is also used for serialization. The Source and Destination arrays contain the IDs of the relays through which the message has already passed and the IDs of the routers through it should be delivered to the recipient.</p>
<p>The bodies of hello_request and hello_response messages contain information about the sender&#x27;s system. When one of these messages is received, the relay saves data about the sender ID, used connector instance and system data. These message types are used to establish a direct connection between relays.</p>
<p>Messages of the &quot;message&quot; type (ones that are not hello_request, hello_response, or error) can be passed via several relays. If its Destination field contains only the ID of the current instance, it will be handled locally; if not, it will be sent to the next relay in the list. For connecting to the next instance, it uses the connector that was saved when exchanging hello_request and hello_response messages.</p>
<p>The backdoor collects the following system information:</p>
<ul>
<li>Values of the registry keys ProductName and CSDVersion from HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion</li>
<li>Whether the OS is 32-bit or 64-bit</li>
<li>List of IP addresses</li>
<li>Computer name</li>
<li>Username and workgroup</li>
<li>Name of running module</li>
<li>PID</li>
<li>MAC addresses of network adapters</li>
<li>Value of the Group attribute in the XML configuration</li>
</ul>
<h4 id="id5-2-3">5.2.3 Application-level protocol</h4>
<p>At the application level, data is encrypted in the standard way using the value of the Password attribute from the configuration. If no such value exists, the key string is &quot;test&quot;. Data is compressed with GZip prior to encryption.</p>
<p>After decryption and decompression, the payload is an array (packed <em>MsgPack</em>) consisting of one or two elements: a string with the name of a command and optional array of bytes (data for the command). These elements, in turn, contain another serialized array, which contains a message string ID (which will be used to send the result of the command) plus the data for the command.</p>
<h4 id="id5-2-4">5.2.4 Supported commands</h4>
<div class="table-container">
    <table class="table-article table-article_striped">
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>invoke</td>
<td><p>Run JScript code and get the result. Implementation was separated out into a JSCore .NET assembly, which is dynamically loaded from a Base64 constant defined in the main assembly.</p>
<figure>
    <img alt="Loading the Funny.Eval class from the JSCore assembly" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image44.png"/>
    <figcaption>Figure 44. Loading the Funny.Eval class from the JSCore assembly</figcaption>
</figure>
<p>Code execution is accomplished with classes from the Microsoft.JScript namespace.</p>
<figure>
    <img alt="Code fragments from the Funny.Eval class" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image45.png"/>
    <figcaption>Figure 45. Code fragments from the Funny.Eval class</figcaption>
</figure></td>
</tr>
<tr>
<td>connect</td>
<td>Takes an XML string with connector configuration and creates the corresponding object.</td>
</tr>
<tr>
<td>update</td>
<td>Packs a response containing the IDs of relays connected to the current copy, together with their system information.</td>
</tr>
<tr>
<td>query</td>
<td>Collects the configuration of active connector instances other than the RPCConnector and RPCBindConnector classes.</td>
</tr>
<tr>
<td>remove</td>
<td>Removes the specified connector.</td>
</tr>
<tr>
<td>createStream</td>
<td>Creates a message queue with the indicated name. The queue connects with the sender of the createStream command.</td>
</tr>
<tr>
<td>closeStream</td>
<td>Deletes the named message queue.</td>
</tr>
<tr>
<td>sendStream</td>
<td>Adds a message (byte array) to the queue with the specified name.</td>
</tr>
</tbody>
</table>
</div>
<p>The result of execution of each command is returned to the sender via the invoke-response command.</p>
<h4 id="id5-2-5">5.2.5 Unused code</h4>
<p>By all appearances, the FunnySwitch backdoor is still under development, as shown by the incomplete state of message queue functionality. Besides the commands described here already, the code contains the functions PullStream and SendStream, which are not used anywhere. The first extracts a message from the queue (by queue name), while the second sends its creator an arbitrary set of bytes with the stream-data command.</p>
<p>The code also contains several unused classes: an implementation of the KCP protocol, limited-size queue SizeQueue, and string serializer StreamString.</p>
<figure>
    <img alt="Fragment of KCP class code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image46.png"/>
    <figcaption>Figure 46. Fragment of KCP class code</figcaption>
</figure>
<h4 id="id5-2-6">5.2.6 FunnySwitch vs. Crosswalk</h4>
<p>Based on investigation of the two backdoors, we believe that they were written by the same developers. Several things point at common authorship:</p>
<ul>
<li><p>Use of multiple transport protocols</p></li>
<li><p>Support for specifying a proxy server</p></li>
<li><p>Identical configuration restrictions on time of day and days of the week</p></li>
<li><p>Implementation of the KCP protocol</p></li>
<li><p>Implemented (and disabled by default) logging of debug messages and errors</p></li>
</ul>
<figure>
    <img alt="Error logging in Crosswalk" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image47.png"/>
    <figcaption>Figure 47. Error logging in Crosswalk</figcaption>
</figure>
<figure>
    <img alt="Message logging in FunnySwitch" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image48.png"/>
    <figcaption>Figure 48. Message logging in FunnySwitch</figcaption>
</figure>
<h2 id="id6">6. ShadowPad</h2>
<p>During the investigation we also discovered two samples containing ShadowPad malware.</p>
<p>The first of these is the SFX archive 20200926___Request for wedding reception.exe (03b7b511716c074e9f6ef37318638337fd7449897be999505d4a3219572829b4).</p>
<figure>
    <img alt="Contents of the archive 20200926___Request for wedding reception.exe" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image49.png"/>
    <figcaption>Figure 49. Contents of the archive 20200926___Request for wedding reception.exe</figcaption>
</figure>
<p>For bait, it contains a Chinese-language Microsoft Word document with the text of a wedding banquet form.</p>
<figure>
    <img alt="Bait file wedding.docx" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image50.png"/>
    <figcaption>Figure 50. Bait file wedding.docx</figcaption>
</figure>
<p>The archive contents are unpacked to the folder c:\programdata, from where (besides the bait file being opened) the payload log.exe is launched.</p>
<p>Both the executable file and the DLL library are obfuscated with VMProtect, but we also found identical unprotected versions (as shown in the following screenshots).</p>
<p>An unpacked legitimate component of Bitdefender (386eb7aa33c76ce671d6685f79512597f1fab28ea46c8ec7d89e58340081e2bd) serves as log.exe. It dynamically loads the library log.dll.</p>
<figure>
    <img alt="Loading log.dll in log.exe" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image51.png"/>
    <figcaption>Figure 51. Loading log.dll in log.exe</figcaption>
</figure>
<p>The library, in turn, when loaded checks for whether the current module contains a certain set of bytes at offset 0x2775. If the loading module meets its expectations, these bytes change to a call instruction for a DLL function. As a result, in log.exe right after log.dll loads, a call is made to the function sub_100010D0. The called function is not explicitly exported.</p>
<figure>
    <img alt="Check and modification of executable module in log.dll" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image52.png"/>
    <figcaption>Figure 52. Check and modification of executable module in log.dll</figcaption>
</figure>
<p>A similar technique has been previously <a href="https://www.welivesecurity.com/2020/01/31/winnti-group-targeting-universities-hong-kong/" target="_blank">described by ESET</a> in the context of Winnti attacks on universities in Hong Kong. ShadowPad malware was used as the payload in these attacks.</p>
<p>In our case, the code run afterwards had been obfuscated with a new approach: all functions are split into separate instructions that shuffle between each other. Jumps between instructions occur by means of calls to a special function (rel_jmp), which emulates the jmp command. The offset at which the jump occurs is written immediately after a call instruction (see the following figure).</p>
<figure>
    <img alt="Structure of obfuscated code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image53.png"/>
    <figcaption>Figure 53. Structure of obfuscated code</figcaption>
</figure>
<p>In addition, to obfuscate the control flow in the code, conditional jumps that never run are included as well:</p>
<pre><div class="code">cmp     esp, 3181h
jb      loc_1000BCA9</div></pre>
<p>The obfuscated code is the loader for the subsequent shellcode, which is encrypted in the file log.dll.dat. After decryption, the file is deleted and the shellcode is re-encrypted, saved in the registry, and run. When log.exe is launched subsequently, the shellcode will be loaded from the registry.</p>
<p>The data is stored in a hive with a name resembling the following: (HKLM|HKCU)\Software\Classes\CLSID\{%8.8x-%4.4x-%4.4x-%8.8x%8.8x}, in key %8.8X. The values inserted in the formatting strings are generated based on the TimeDateStamp in the PE header of log.dll, and therefore are always identical for any given library copy. In our case, they equal {56a36bd2-5e2b-20b0-96f2cb9bb3f43475} and EB5D1182, respectively.</p>
<p>The payload is ShadowPad shellcode that has been obfuscated with the same rel_jmp and fake-jb techniques. The following strings are contained in its encrypted configuration:</p>
<pre><div class="code">6/30/2020 1:25:52 PM
ccc
%ProgramData%\
msdn.exe
log.dll
log.dll.dat
WMNetworkSvc
WMNetworkSvc
WMNetworkSvc
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
WMSVC
%ProgramFiles%\Windows Media Player\wmplayer.exe
%windir%\system32\svchost.exe
%windir%\system32\winlogon.exe
%windir%\explorer.exe
TCP://cigy2jft92.kasprsky.info:443
UDP://cigy2jft92.kasprsky.info:53
SOCKS4
SOCKS4
SOCKS5
SOCKS5</div></pre>
<p>They include the likely data of module assembly (June 6, 2020), name of the service used by the malware to gain persistence on the system (WMNetworkSvc), names of processes into which shellcode can be injected, and the C2 domain cigy2jft92.kasprsky[.]info.</p>
<p>As we wrote earlier, the other domain kasprsky[.]info has been used by attackers as a FunnySwitch C2 server. Investigation of subdomains and IP addresses yields another second-level domain, livehost[.]live, whose subdomain d89o0gm35t.livehost[.]live is indicated as a C2 server in one copy of Crosswalk (86100e3efa14a6805a33b2ed24234ac73e094c84cf4282426192607fb8810961). Moreover, all samples of these backdoors were signed with the stolen Zealot Digital certificate and were likely used together as part of a single campaign.</p>
<p>This is not the only example of a connection between the Crosswalk and ShadowPad network infrastructures. Two Crosswalk C2 servers we found, 103.248.21[.]134 and 103.248.21[.]179, contained an SSL certificate with SHA-1 value of b1d749a8883ac9860c45986e2ffe370feb3d9ab6. The same certificate was noted at IP address 103.4.29[.]167, which via the domain update.ilastname[.]com was used as a C2 server for another copy of ShadowPad (37be65842e3fc72a5ceccdc3d7784a96d3ca6c693d84ed99501f303637f9301a).</p>
<figure>
    <img alt="Fragment of ShadowPad and PlugX infrastructure" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image54.png"/>
    <figcaption>Figure 54. Fragment of ShadowPad and PlugX infrastructure</figcaption>
</figure>
<h2 id="id7">7. PlugX</h2>
<p>The SSL certificate pointed us to another C2 server, with the domain ns.mircosoftbox[.]com.</p>
<p>We found that this C2 server is used by an interesting copy of the PlugX backdoor. Its core is typical of PlugX, being an SFX archive (ccdb8e0162796efe19128c0bac78478fd1ff2dc3382aed0c19b0f4bd99a31efc) that contains the library mapistub.dll, which loads as a legitimate executable.</p>
<figure>
    <img alt="PlugX SFX archive" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image55.png"/>
    <figcaption>Figure 55. PlugX SFX archive</figcaption>
</figure>
<p>But mapistub.dll is only a downloader. Google Docs is used to store the payload: the library sends a request to export a certain document in .txt format, decodes it into shellcode with Base64, and runs it.</p>
<figure>
    <img alt="Loading and running shellcode in mapistub.dll" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image56.png"/>
    <figcaption>Figure 56. Loading and running shellcode in mapistub.dll</figcaption>
</figure>
<p>The shellcode has been obfuscated with junk instructions and inverted conditional jumps (combinations of jle/jg and the like). Its job is to decrypt and run the next stage, which is responsible for reflective loading of the main PlugX component and passing the structure with the configuration to it.</p>
<figure>
    <img alt="Obfuscated shellcode from Google Docs" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image57.png"/>
    <figcaption>Figure 57. Obfuscated shellcode from Google Docs</figcaption>
</figure>
<p>This process and what the similar sample does after that are described in more detail in a <a href="https://st.drweb.com/static/new-www/news/2020/july/Study_of_the_APT_attacks_on_state_institutions_in_Kazakhstan_and_Kyrgyzstan_en.pdf" target="_blank">report from Dr.Web</a> (QuickHeal shellcode and BackDoor.PlugX.28).</p>
<p>Besides the C2 servers in the configuration file, 103.79.76[.]205 and ns.mircosoftbox[.]com, in our case the attackers also used a technique typical of PlugX for getting a C2 server at a specified URL. The C2 address is encoded in the page body between the DZKS and DZJS markers.</p>
<p>Again, the address of a Google Docs document is used as the URL.</p>
<figure>
    <img alt="Document with encoded URL" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image58.png"/>
    <figcaption>Figure 58. Document with encoded URL</figcaption>
</figure>
<p>Note that the document is editable without logging in. But when we accessed it for the first time, it had the IP address 107.174.45[.]134, which is related to the domain dc-d68d34331440.mircosoftbox[.]com and, apparently, had been put in place by the attackers.</p>
<p>A similar technique has been used by Winnti in the past: <a href="https://www.trendmicro.com/en_us/research/17/c/winnti-abuses-github.html" target="_blank">according to Trend Micro</a>, an encoded C2 address was stored in GitHub repositories in 2017.</p>
<h3 id="id7-1">7.1 Paranoid PlugX</h3>
<p>We were able to detect an additional copy of PlugX that contained shellcode fully identical to that downloaded from Google Docs, except for the encrypted configuration.</p>
<p>It, too, is an SFX archive (94ea23e7f53cb9111dd61fe1a1cbb79b8bbabd2d37ed6bfa67ba2a437cfd5e92) but with different files inside.</p>
<figure>
    <img alt="Contents of the SFX archive" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image59.png"/>
    <figcaption>Figure 59. Contents of the SFX archive</figcaption>
</figure>
<p>When unpacked, the archive runs the script 1.vbs, which in turn passes control to a.bat.</p>
<figure>
    <img alt="Contents of a.bat" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image60.png"/>
    <figcaption>Figure 60. Contents of a.bat</figcaption>
</figure>
<p>The main payload is in the file image.jpg, which is actually a specially crafted .NET assembly. The assembly launches with the help of InstallUtil.exe from .NET Framework, enabling it to bypass application allowlist restrictions.</p>
<figure>
    <img alt="Running shellcode in image.jpg" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_316844/image61.png"/>
    <figcaption>Figure 61. Running shellcode in image.jpg</figcaption>
</figure>
<p>The purpose of image.jpg is to run the same PlugX shellcode with the help of CreateThread.</p>
<p>Its configuration contains two C2 servers: update.upgradsource[.]com and ns.upgradsource[.]com.</p>
<p>The domain upgradsource[.]com is mentioned in a <a href="https://unit42.paloaltonetworks.com/unit42-paranoid-plugx/" target="_blank">Unit42 report</a> on a group of similar samples named &quot;Paranoid PlugX.&quot; They received this name due to the presence of a script for wiping traces of malware from the system. Comparing the sample we found to those described in that report, we conclude with strong confidence that it belongs to the same group. Among other reasons, the structure of the .NET Wrapper module in image.jpg, and much of the cleanup script a.bat, is nearly identical.</p>
<p>According to Unit42, the main targets of Paranoid PlugX attacks were gaming companies—which are known to be a typical area of interest for Winnti. Investigation of the network infrastructure provides yet another piece of confirmation of the relationship between Paranoid PlugX and Winnti.</p>
<p>As of late 2017, update.upgradsource[.]com resolved to the IP address 121.170.185[.]183. Later, update.byeserver[.]com and update.serverbye[.]com resolved to this address as well. The second-level domains byeserver[.]com and serverbye[.]com, in turn, are listed by FireEye in its <a href="https://content.fireeye.com/apt-41/rpt-apt41/" target="_blank">report on APT41</a>.</p>
<h2 id="id8">8. Conclusion</h2>
<p>Winnti has an extensive arsenal of malware, as can be seen from the group&#x27;s attacks. Winnti uses both widely available tools (Metasploit, Cobalt Strike, PlugX) and custom-developed ones, which are constantly increasing in number. By May 2020, the group had started to use its new backdoor, FunnySwitch, which possess unusual message relay functionality.</p>
<p>One distinguishing trait of the group&#x27;s backdoors is support for multiple transport protocols for connecting to C2 servers, which complicates efforts to detect malicious traffic. Malicious files of varying resemblance are used to install the payload, from primitive RAR and SFX-RAR files to reuse of malware from other groups and multistage threats with vulnerability exploits and non-trivial shellcode loaders. But the payload may be one and the same in all these cases. Most likely, the choice is dictated by the precision (or lack thereof) of an attack: unique infection chains and highly attractive bait are held back for targeted attacks.</p>
<p>Winnti continues to pursue game developers and publishers in Russia and elsewhere. Small studios tend to neglect information security, making them a tempting target. Attacks on software developers are especially dangerous for the risk they pose to end users, as already happened in the well-known cases of CCleaner and ASUS. By ensuring timely detection and investigation of breaches, companies can avoid becoming victims of such a scenario.</p>
<h2 id="id9">9. PT products detection names</h2>
<h3 id="id9-1">9.1 <a href="https://www.ptsecurity.com/ww-en/products/sandbox/" target="_blank">PT Sandbox</a></h3>
<ul>
<li><p>Trojan-Dropper.Win32.Higaisa.a</p></li>
<li><p>Backdoor.Win32.CobaltStrike.a</p></li>
<li><p>Trojan-Dropper.Win32.Winnti.a</p></li>
<li><p>Trojan-Dropper.Win32.Winnti.b</p></li>
<li><p>Trojan-Dropper.Win32.Shadowpad.a</p></li>
<li><p>Backdoor.Win32.Shadowpad.c</p></li>
<li><p>Backdoor.Win32.FunnySwitch.a</p></li>
</ul>
<h3 id="id9-2">9.2 <a href="https://www.ptsecurity.com/ww-en/products/network-attack-discovery/" target="_blank">PT Network Attack Discovery</a></h3>
<ul>
<li><p>REMOTE [PTsecurity] Crosswalk</p>
<p>sid: 10006001;10006002;10006003;10006004;</p></li>
<li><p>SHELL [PTsecurity] Metasploit/Meterpreter</p>
<p>sid: 10003751;10003753;10003754;10003755;10006172;10002588;</p></li>
<li><p>REMOTE [PTsecurity] Cobalt Strike Beacon Observed</p>
<p>sid: 10000748;10005757;</p></li>
<li><p>REMOTE [PTsecurity] Cobalt Strike (jquery profile)</p> 
<p>sid:10005754;</p></li>
<li><p>REMOTE [PTsecurity] FunnySwitch</p>
<p>sid: 11004815;1004814;11004813;11004812;</p></li>
<li><p>SPYWARE [PTsecurity] ShadowPad</p>
<p>sid: 10005851;10005852;10005854;</p></li>
<li><p>REMOTE [PTsecurity] PlugX</p>
<p>sid: 10001390;10001391;10002946;10004422;10004426;10004472;10004473;10004515;10004532;10005968;</p></li>
</ul>
<h2 id="id10">10. Applications</h2>
<h3 id="id10-1">10.1 Known names of files from which PL shellcode may be loaded</h3>
<pre><div class="code">C_99401.NLS
DriverStatics.ax
DrtmAuth005.bin
DrtmAuth13.bin
FINTCACHE.DAT
SEService.dat
Theme.re
WspTst.xsl
cbdhsvcs.bin
chrome_proxy.dll
config.ini
localsvc.ax
log.txt
msdsm.tlb
normnfa.nls
normnfw.nls
services.bin
soundsvc.sys
storesync.dat
storesyncsvc.ini
svchosl.bin
svchost.bin
wbemcomn64.sys
wbemcomna.dat
winness.exe.config
winupdate.txt</div></pre>
<h3 id="id10-2">10.2 IOCs</h3>
<h4>File indicators</h4>
<h5><b>LNK file attacks</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>1074654a3f3df73f6e0fd0ad81597c662b75c273c92dc75c5a6bea81f093ef81</td>
<td>9b638f77634f535e52527d43ad850133788bfb0c</td>
<td>c657e04141252e39b9fa75489f6320f5</td>
</tr>
<tr>
<td>0deb252a5048c3371358618750813e947458c77e651c729b9d51363f3d16b583</td>
<td>f50b624ba6eb9d3947f22cf7f95a6f70b7c463d3</td>
<td>a140420e12b68c872fe687967ac5ddbe</td>
</tr>
<tr>
<td>8e6945ae06dd849b9db0c2983bca82de1dddbf79afb371aa88da71c19c44c996</td>
<td>5b8e644acc097f7123172d96a3a45bd398661064</td>
<td>93ffd591948223e806c248861735e006</td>
</tr>
<tr>
<td>c0a0266f6df7f1235aeb4aad554e505320560967248c9c5cce7409fc77b56bd5</td>
<td>d500cec0ce5358751f3371b69a4a9bc402df8af4</td>
<td>45278d4ad4e0f4a891ec99283df153c3</td>
</tr>
<tr>
<td>bcfff6c0d72a8041a37fe3cc5c0233ac4ef8c3b7c3c6bca70d2fcfaed4c5325e</td>
<td>1a33f41d054a2ed2d395b19852583daddd056bb4</td>
<td>177e37ec8d07d6954b2102760c74708a</td>
</tr>
<tr>
<td>35a1ff5b9ad3f46222861818e3bb8a2323e20605d15d4fe395e1d16f48189530</td>
<td>0a462e8e3b153e249507b1652d9f6180463e7027</td>
<td>17548fb49ef598901ab83b7c630fbe9a</td>
</tr>
<tr>
<td>beaa2c8dcf9fbf70358a8cf71b2acee95146dba79ba37943a939a2145b83b32e</td>
<td>acf5f997a16937072a2a72f1ba7704f9703ea27c</td>
<td>e5809996b6126a5573623a9010eb4ee2</td>
</tr>
<tr>
<td>dca8fcb7879cf4718de0ee61a88425fca9dfa9883be187bae3534076f835a54d</td>
<td>db6333f84538a21466e5ffe3c7102e0543cec167</td>
<td>d53daa634260ed28fc2e8610ecf15ad3</td>
</tr>
<tr>
<td>4733d1204b06dc95178e83834af61934a423534e1d4edd402b37e226f0f2727f</td>
<td>dba010496a7be2e5de1f923ffdfc19bf345b650b</td>
<td>9776f04d9c254a0b67f4dc000369a17c</td>
</tr>
<tr>
<td>dcd2531aa89a99f009a740eab43d2aa2b8c1ed7c8d7e755405039f3a235e23a6</td>
<td>281c1b196cd992906d8583e64011dc28d9c52e3c</td>
<td>4a4a223893c67b9d34392670002d58d7</td>
</tr>
<tr>
<td>d4df4b58ee241e276ea03235445c04d1a28e48ec8b6e2599a56f6c4b8af3269b</td>
<td>7b6b01e9f726ab0b5f94cd68687d4787008cd7f5</td>
<td>4dcd2e0287e0292a1ad71cbfdf99726e</td>
</tr>
<tr>
<td>d064f675765f54ee80392fcfb5d136cd2407d06d0ea8cd7d8632d1a2b24c0439</td>
<td>8b8b1219581555f2d9747b289d57c3e0e274fd07</td>
<td>260eae2912475e51d82534b467e5746b</td>
</tr>
<tr>
<td>32705d3d9f7058e688b471e896dce505b3c6543218be28bbac85f6abbc09b791</td>
<td>289b5017f5ee8c915f755b1c7eefffbfb3d2d799</td>
<td>28bfed8776c0787e9da3a2004c12b09a</td>
</tr>
<tr>
<td>c613487a5fc65b3b4ca855980e33dd327b3f37a61ce0809518ba98b454ebf68b</td>
<td>0f1f2431ecccb980f7d93b9af52139d0d508510f</td>
<td>997ab0b59d865c4bd63cc55b5e9c8b48</td>
</tr>
<tr>
<td>4e5e3762c850536aac6add3a5ac66f54cbd15c37bd8fc72d3ade9dd5e17f420b</td>
<td>21a5bcd916bc61585cfe1d5656240237e24157b9</td>
<td>07254dbd369ba10a1f28ae707ba72dcf</td>
</tr>
<tr>
<td>2d182910dade1237f1dd398d1e7af0d6eca3a74a6614089a3af671486420fb2b</td>
<td>0261490fb7f88cc3e9db6aa3fd185d03d7646864</td>
<td>f6886709564630fbb48121d0ccc7c0a6</td>
</tr>
</tbody>
</table>
</div>
<h5><b>Shellcode injectors</b></h5>
<h6>Payload: Crosswalk</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>0046df35f66a3b076d9206412be2f1f7ea4641d96574e7b58578c0c0995d1feb</td>
<td>b73fcfc423d1bdb4649440689ff4894639b3bd0e</td>
<td>9697d60b744a14b3003559d17cfc2f8f</td>
</tr>
<tr>
<td>325430384d642ab2a902fb0e268e85808b6cbf87506ccdc314e116e7d1b8239e</td>
<td>0f2a5bbe03c5b3422609b78ca90fb7f06bfd966b</td>
<td>eee464e5ded3f4e37d49c8a91b1eb157</td>
</tr>
<tr>
<td>9e27f110fc824d8b85855538c3320e8ea436e82737d686fcecb512b6f872e172</td>
<td>4481c4b0cf2207099c7b5979a6e81a2923d6c698</td>
<td>254ace03b179c6565ac2616dd4d24f85</td>
</tr>
<tr>
<td>bec68bcaa80bb00274ef7066ddc8de1b289fb5f8b8e8573f3a961664f41da9d7</td>
<td>cc24843afd627ced74a1d713328078a23db81e54</td>
<td>914151fa49be06ab570bb0db77ce6960</td>
</tr>
<tr>
<td>3454d87b2ce0eab44c07774c7b56318710f9a63626d6d2aaf898922178bf2792</td>
<td>e6cd7a9f5b421b80b50e5809c35732c427c6b6d8</td>
<td>fbfeecea5a8c752c9bffdf6b9f7fcf50</td>
</tr>
<tr>
<td>1e29e07b404836c82cd9b75e44a3169195a335dc494ba27f744f6605666c26aa</td>
<td>a1e0ce3c384945fdde841d91d069505879587217</td>
<td>d19c5c55733244f4a8d5a1af4e6c1250</td>
</tr>
<tr>
<td>3a9bbf4ee872904e729466aa50d570b43451b0945a41b5d9d114f8c24683c21e</td>
<td>5d1bada317d596f3dec5b86e4e42639b2f5f71ac</td>
<td>6d967f275beb3855980a80d60ef8023c</td>
</tr>
<tr>
<td>faca607b43551044fda3c799ce7e9ce61004100544eeb196734972303f57f2ae</td>
<td>159a5ca55d7c62d0167740f8f5310e18e03a8fd3</td>
<td>4518f25c6307ef6d2ea5c0e66f2b16d1</td>
</tr>
<tr>
<td>86100e3efa14a6805a33b2ed24234ac73e094c84cf4282426192607fb8810961</td>
<td>604c5f42eeb015016b35ec1c9019812afc400f5b</td>
<td>7078450715c103056b01ad87787aaed6</td>
</tr>
</tbody>
</table>
</div>
<h6>Payload: Metasploit</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>0ad8ee3fe6d45626b28c0051c4c4f83358a03096ad06fc7135621293e95c75ae</td>
<td>e8fcd7ca491bffc4838bf9eb6a7aec3f7e4acdc2</td>
<td>a752d48a4433eb2dd56c8946a345ac9e</td>
</tr>
<tr>
<td>75d573d1e788590195012a1965cfcaa911c566aee88331b7718ddc638028c175</td>
<td>ca66a779a5b720e5f73e91561bd3434db691e13b</td>
<td>2867ca5c273fbb128504a4e455e862a4</td>
</tr>
<tr>
<td>8c962ddbb515e73ecfc5df9db35a54c8c9d15713a04425298f2d89308e2a47bf</td>
<td>ce1cb0050662e541e72a24c6a969fa7b51084a60</td>
<td>2555677876b50a03e42420838c1997f1</td>
</tr>
<tr>
<td>fb23c7fc2e5e8ae33942734c453961da9ed4659368d19180a8f1ecb3b9b8e853</td>
<td>d03a5b322f3748c9019ca24dd1943507d591165e</td>
<td>9a026082cb80cdba1a68ae1d14f79b9d</td>
</tr>
<tr>
<td>012d8d787c6e7a5f3dbe1e9cce7c5da166537a819221e210ef4d108f1a0a24b3</td>
<td>d913285f75a3a1a4f2a6e0f66bfda8efc71fc669</td>
<td>d8ff9eb5582371745ffe1636a89f97ce</td>
</tr>
<tr>
<td>420dc77afe28003f14dfe6c09fbf8194ead8a6e8222b6ab126e7ee9bf4b63fd4</td>
<td>ebafff5ff0517ea5c2c783ab7d0cffded468bf4f</td>
<td>c024b658471a27ec5201f96f65f0b89a</td>
</tr>
<tr>
<td>a02258fcb3694893b900f10f0f9bb1d0d522ed098b1cc8eab59f2f70209b3a0b</td>
<td>9bdd1af6fc74a8a3c2ff0e3bf1378ff290cdb35e</td>
<td>bb4155a5add9446b6354d46a78edc8d5</td>
</tr>
<tr>
<td>f54cf6d9a5d77a89c4a2d47b02736d746764319e02ad224019db8de78842334a</td>
<td>8413380c19f348ef08051b2d6d8b39598bb05f68</td>
<td>cdddd08982ca2dd76a63cbf603956f1a</td>
</tr>
</tbody>
</table>
</div>
<h5><b>Self-contained PL shellcode loaders</b></h5>
<h6>Payload: Crosswalk</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>5841a4302fcbd63f66fc2afd41f8671744454aaa7e1ed834e935bfdb007a9a83</td>
<td>3d0b40b2a6fc691f702237ba5682335e7e74e649</td>
<td>a8bb1d69fb8a9d323bbc5d78f0e62850</td>
</tr>
<tr>
<td>e0b675302efc8c94e94b400a67bc627889bfdebb4f4dffdd68fdbc61d4cd03ae</td>
<td>4db6e492a9ef89e116f4da19f97d69cb82e08661</td>
<td>2dc960eb4691a148ece5ee2b24932f03</td>
</tr>
<tr>
<td>e398290469966aff01a9e138d45c4655790d7a641950e675785d0a2ab93e7d28</td>
<td>1e494e1cf8df105d95d0e0bb4879223030c48a0c</td>
<td>42a5908ff9b65d3b1a1a9f52ca6f06a5</td>
</tr>
<tr>
<td>8add31b6a2828e0d0a5b3ac225f6063f2c67c56036ff3f5099a9ee446459012a</td>
<td>5c11f70345d984391d041b604adfe5bfb5134755</td>
<td>5e3ef894b490d1c931a5f70d44789316</td>
</tr>
<tr>
<td>a4b2a737badef32831cbf05bfaa65b5121ddb41463177f4ac0dbc354b3b451d4</td>
<td>8c549d16dc97072f16e4a3114fbd7d47f8bc9726</td>
<td>1bc1df4b946e83f26c878f01145545a4</td>
</tr>
<tr>
<td>2fdef9d8896705f468f66eb8c20e5892d161c1d98ab5962aa231326546e25056</td>
<td>7b465b1e0d7be4d84e06a115fd55b97207de768c</td>
<td>221db0f664ea781b4dff81e0a354c63d</td>
</tr>
</tbody>
</table>
</div>
<h6>Payload: Metasploit</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>a7df8143a36638de40233b141919d767678b45bf5467e948a637eaafb2820550</td>
<td>be39c3022218ccb3abcfc6c906359b76571f4241</td>
<td>dc758b9ecca41f7f66808258efbfc6cf</td>
</tr>
<tr>
<td>283302c43466bdc6524a1e58a0ff9cc223ab8f540a1b0248d1fcffe81b87d5d6</td>
<td>b2bb31ea3b4abaf3f3edbff405e23f2ce442dfe0</td>
<td>3839d37a6a7a29a7af79f102e28b8bc2</td>
</tr>
<tr>
<td>b447a7bb633f682058d4b9df5caabbe8c794f087b80bf598d6741a255e925078</td>
<td>3c523a969cc4c273ae27fef32630701516b08873</td>
<td>63584677683b5fbf4f69053a8de9ecbe</td>
</tr>
<tr>
<td>01c8cc07a83ffd7ac9ee008685eb360c9934919e86847c50c8843807b9d9c196</td>
<td>37ec3d5be7b535a8a31001815ab275a489e302f5</td>
<td>d92db6b734b1db3874396506613a4962</td>
</tr>
<tr>
<td>21dd261e5fe46b86833cd69b299ae5ee5f24da3d4e87de509eddda4d2f63d591</td>
<td>11e86ee44e7c3592c97f7191746e170b62f724bb</td>
<td>c8f1aff87d12e0e5c7082b8a565c4abb</td>
</tr>
</tbody>
</table>
</div>
<h6>Payload: Cobalt Strike BEACON</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>ba03feb351825029426e84c2f74e314f27b56714a082759650a455dfb1a946eb</td>
<td>8890155c88c690faaf900d1e63998756809273d0</td>
<td>cbccba5f774642c80aacfed20d20435b</td>
</tr>
<tr>
<td>06210a1f9bc48128e050df0884f9759e4d202bd103aa78e6b6eb3cec1a58cdb5</td>
<td>a0128edc037a91ce127291edd9d950e7661dd764</td>
<td>64071aaa193ab18722553bf6f573547b</td>
</tr>
<tr>
<td>0d6a5183b903b1013367b9a319f21a7a3b7798d9565a0deee52951f62a708227</td>
<td>2d35c342d8fc6f5d018937491e246da2ab293d43</td>
<td>b8b43c4c4207b180ec8be82ff066172a</td>
</tr>
<tr>
<td>1bd0f0fbd7df99c41e057f6d6c7107812ef1370609ad215a92227ca79ce6df70</td>
<td>7dcb0d7300aa54ef77eb3347e6204b31d4b9c6db</td>
<td>4922247f9b83341987e0b4e80f5c153f</td>
</tr>
<tr>
<td>29233eab65960c2da4962e343a3adab768673012d074db35ebc2abe2142ee73c</td>
<td>1d3dc9bb7acfe8416ac5ab51f24b6648b91eb305</td>
<td>cb682ec885f353bcc51ac350bc015783</td>
</tr>
<tr>
<td>79fbb45d0041933dce16325b87b969db12b7a8dedc918929615104835badc80f</td>
<td>b13d58f1d24cf5e10a7013f4aeac22e974c74315</td>
<td>407990337eac6582533df5c85528817a</td>
</tr>
<tr>
<td>8f0538a18c944e2a98f1415d5528a0dab4367cd8689f598ab2da266c36403252</td>
<td>483c49349d29e11e0d195864e372a210ce5ce856</td>
<td>7e8ebe133a530ea86f179c87fc8e51f7</td>
</tr>
<tr>
<td>025e053e329f7e5e930cc5aa8492a76e6bc61d5769aa614ec66088943bf77596</td>
<td>e63646f0089ce3a224d68029eecff72ef0259609</td>
<td>f9fa912e498f20c440dde32fc8a66608</td>
</tr>
<tr>
<td>d30dd7d82059dc34e72c3131dd7ea87f427cabe7225bbf59aa69e01cd761a1fe</td>
<td>8be2fccba22fdca0e453855c7428e709186f3e0d</td>
<td>c839ae523f04e7859498de1dee570867</td>
</tr>
<tr>
<td>81ab37ae3abce3feabdefde6a008dec322e0168ce4f0456ee737135025399400</td>
<td>98d6dffb7e51170a02546eeb07c80f2592d10293</td>
<td>5ed49962d13dcd6e0eab98f966273fca</td>
</tr>
<tr>
<td>b55812f35735e4fb601575072f1b314508b2dafdcb65aa6c1245a2e1f9d80bdd</td>
<td>6986b924c58aa90a9e413d9942c25a1419d9aa0e</td>
<td>f88416bc9ffcb639f1357ebafe3ae9a7</td>
</tr>
<tr>
<td>fc5c9c93781fbbac25d185ec8f920170503ec1eddfc623d2285a05d05d5552dc</td>
<td>0902e3c41fb8e0dffc322e6a562f04588b7522a3</td>
<td>6817b7a5d1542eff1cc404a44a31353a</td>
</tr>
<tr>
<td>d879b6cac6026a5418df4bf15296890507dbaec5abe56dafda54266975488cf2</td>
<td>11c987cdafec8ea02a77a03d4c979f743138b39a</td>
<td>b02057f05f57f3a889a744533001cf7d</td>
</tr>
<tr>
<td>6e7052562db5f23c2740e9d094aae2316f77866b366eb4ef59c157e112172206</td>
<td>7fd0d64f54a54aabd04136e4111e2d8a22884324</td>
<td>dda83ca52a9d9dbdc7752db8ed9533a9</td>
</tr>
<tr>
<td>9afb78e9be08041f849563c4fd2777a373ffc76c3eccd638b1f6f846b847b968</td>
<td>2b47e9c8946536decba6066f9a57a85f143465c5</td>
<td>482d1c1e2044b0b4d1641f15d82e86b6</td>
</tr>
<tr>
<td>8b515bf88b3f7ac77861fdea61f82fb0c941bc5569922cadca254a79a744ae99</td>
<td>e46490394ddc66548067ba540d13fb3cf363c596</td>
<td>2a189598113d436e4b717abb76f1c652</td>
</tr>
<tr>
<td>f91f2a7e1944734371562f18b066f193605e07223aab90bd1e8925e23bbeaa1c</td>
<td>0b83939510bd31939c91370c53fab25aa286ba08</td>
<td>5909983db4d9023e4098e56361c96a6f</td>
</tr>
<tr>
<td>3d38dfd588fc98de099201fe9f52feb29bb401fc623d6fe03eb8f0c959ffc731</td>
<td>af76d1d293e3e8fe7ad428ca6fe47e68c858587b</td>
<td>284dcb880e68d66cb890ef85d78ea7ae</td>
</tr>
<tr>
<td>6a10027dd99f124cd9d2682b6e7b0841d070607ea22a446f3c40c0b9f9725bed</td>
<td>f2751dbfe822907ecb69b83e461b48183a485355</td>
<td>0d69dae8f83f09b8671b8552a0acd319</td>
</tr>
<tr>
<td>71a965d54c4b60f7ae4a5e46394bfca013d06e888ec64f06d5ec3d8a21eccb55</td>
<td>4b51a8233991d4255fc05d9bbfc242f779b1d31d</td>
<td>5e61778a1e660691dce99ebb8e5e257c</td>
</tr>
<tr>
<td>5347c5bbfaec8877c3b909ff80cda82f505c3ef6384a9ecf040c821fc7829736</td>
<td>1530993376416274d04907ff6369a3012694bfa9</td>
<td>62d6fb0f33d0411ea6abd3167118a0e1</td>
</tr>
<tr>
<td>de648c21b4fae290855fdf0cd63d9e6807ced0577bdcf5ff50147ba44bf30251</td>
<td>3a0c2aee518b7c003e5eb8aa7094d536b8bf1a94</td>
<td>dbd6a052331365a31f74e2c41d5cd132</td>
</tr>
<tr>
<td>7ed5cbeb6c732aa492762381033ff06d0c29f1c731530d4d27704822141a074a</td>
<td>2d0bb1fc0213e4fca5c3b485caaf964dd2da7981</td>
<td>05e1247ff02d50aed81ecd9d0b93c41c</td>
</tr>
<tr>
<td>e886caba3fea000a7de8948c4de0f9b5857f0baef6cf905a2c53641dbbc0277c</td>
<td>6b92e6d594fd6e26f9e910f10f388c43017303b2</td>
<td>48bda0c5e53b6d7ee7fb1da6130f325f</td>
</tr>
</tbody>
</table>
</div>
<h5><b>External PL shellcode loaders</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>0041b28d1f076e196af761a536aa800ebe2fcaea9084a8e17d2a43c43765efdd</td>
<td>0cb8ed29268ec9848ff1c7f25f28b620271e61c9</td>
<td>131711477620098191777f93c580ee6c</td>
</tr>
<tr>
<td>0756216ea3fea5b394e2fa86e90a75f05c3da2b4b47d61110559bd28f51da8e6</td>
<td>7a1c5e1799bdeebb01527f54a7fd89d0b720dea7</td>
<td>53e2c1eb6b87e92b5f534503f011f6ee</td>
</tr>
<tr>
<td>34aeaa89aab983318ed8f6da32556faf3057a92dc045fac1f960f3aaad3a1ba1</td>
<td>a42e6dc7f248794e91e4ec251c2c96164215b7be</td>
<td>f02a87562ffdd7a1c941dac4175854b0</td>
</tr>
<tr>
<td>40101054d18eb50b65c2ce32b00352d2486008f67c63baec5ef93cac9d5c81ed</td>
<td>11d7145b85fea84aed35c60857560a66dbff5a27</td>
<td>e5271b41cf32892cc16445ac0783f3f7</td>
</tr>
<tr>
<td>4665280d4b34c5388edeb51a6d5e808d2942c364017a42d3f1fac186b21eb571</td>
<td>09a3fb96edbd5e143ba3b579cb2c09d0dd9469eb</td>
<td>da220930ac3e45a713d9da2e6c1c246a</td>
</tr>
<tr>
<td>46f03ddf74c47960a3731de18f123b2110153ed668f9bf6ed3badd7fd099ccb6</td>
<td>90c104dadb5c21b4fca644b37f7043fef7e72d2b</td>
<td>71b250a873a070415fed172759a42b7d</td>
</tr>
<tr>
<td>4f2d8c437d32dc075074f01d10698f6d4dfc4d4bd8a595dabaa2519c6a025c8e</td>
<td>e629fda195636d99ac587b354b5c6fc228d65d81</td>
<td>8b2e72f2b13c63a583ae9a9cd474adf6</td>
</tr>
<tr>
<td>655c21fc31967282d8517b3c845f775cd0a80595f90c5c85b6027110532a1cf9</td>
<td>5fa5593b52cfc866c51f55e9a56b1adcc9db01d1</td>
<td>318b3661ec5929f069e7821fac537fe0</td>
</tr>
<tr>
<td>8f8ee8d2bc6c559a0a09ce3958727dee2f30880c615b2788d757917ca55d43ef</td>
<td>b769c9c708f59be0a0d68ddf3076c9d9037b6c27</td>
<td>1d6def7a4bed4a8772e3cae6926d405b</td>
</tr>
<tr>
<td>8fb8134bf40ad6bddd60ea77b78c30dab72c736bf29172f89d03505b80c3ae8d</td>
<td>9a17591711383d96f7cc421a71d5d394e322189a</td>
<td>7af8c2055a608c920ba5e5c63fd43207</td>
</tr>
<tr>
<td>9bf32bf4a4bc1d13bddaa6402595ad76d2d9fcc91a988313f13ed990ccb1c4c1</td>
<td>68ae7f3d2cb22c70232a35ed59f6fed70fe0f3be</td>
<td>fb2ac5049bdee8dd1753fa7e9d007e6b</td>
</tr>
<tr>
<td>9c3280bc1ebc239de86523a7046b45e9bb7ce7a40a869dda6ea92fcee727366a</td>
<td>cf90d0b4ac09dc97f675fb3cfbc8eba89db211e8</td>
<td>bb6b9a60c3b4062669bac3608ca7b0c1</td>
</tr>
<tr>
<td>bfe2673b02c54be9093cff8fd564b630109175c608f07d94e4a2ac65028a6eae</td>
<td>59c4f47b1135f21a8814c8a838277f4cfa46f2e5</td>
<td>fcceb7a3bc3b0c48c8d9c91eb0b896ab</td>
</tr>
<tr>
<td>c93999f7622caf63cbcfb26966ff11719a4e26bca7d90a843461f44a3c982a30</td>
<td>0a8fbc71a936d2e7f2830fae3d57a2f1e8e43266</td>
<td>36fe1e0db5e74ed3e6adc039720c54d6</td>
</tr>
<tr>
<td>d0686f44fb7e77ce0f68cc91c4cef12dbd691bb99b0b7be77103b7b17eec3753</td>
<td>0b09ac7691cb9b8b7b5a2e453984bc75edbc8aeb</td>
<td>b5605f71d18cc255dbbd910ac008ae6e</td>
</tr>
<tr>
<td>d6a05e20da5012c0cfc491b0044f7fded9322f5bbc664092c4b481709c3472e0</td>
<td>735e97688a70d24d922cf9a3951c5e23a91cbcb1</td>
<td>4a89eb933fa87d85542488df6ae20d82</td>
</tr>
<tr>
<td>e7f5a30d4bf7915cc97374e0f6a29573d4640961166b5c9b942030e8c10949d8</td>
<td>c224763846f8f61442e893cb8e9070ce67be5dc8</td>
<td>63c1b74c829ee362730ff37d6101d276</td>
</tr>
<tr>
<td>e935699b31707ecf9e006940f31f09514688cb45e078a66724603ee7fadf84db</td>
<td>5ba9f7cd51e8eac88f870e340c8262683d92563d</td>
<td>99b86e64d76d21b2a5bfeb48b89e3935</td>
</tr>
<tr>
<td>f36a0b99973a837d5e4d542edd739df7cac10e207be538d47a106c4edf7cff54</td>
<td>fde9357e8d6a3336dbd82d2e22dbc0772640f63f</td>
<td>0133bd3f26788732a580115218d98273</td>
</tr>
<tr>
<td>f69c6e8fe1188a461bfe249ba7afefbd7a787fcd0777c008f9580f6976118898</td>
<td>d3d4c7cf257f9fe97bdf31a4b0e3f66726fb1b6f</td>
<td>3d09dee9bc20abf33b64bcb4c6d3130f</td>
</tr>
<tr>
<td>fad80dc36a59d1cc67f3c4f5deb2650ca7f5abac43858bf38b46f60d6bb4b196</td>
<td>119b92462a91f9cc8b24dfbd84fb88ef47ecab97</td>
<td>247c48b8758a9eba48bfe39c53ff9e6e</td>
</tr>
<tr>
<td>0187d3fae2dfc1629e766d5df38bdabf5effcb4746befceb1aaf283e9fe063a1</td>
<td>648594c25aebf3865c35ce6057e36b42e9e3be31</td>
<td>dbc30db0ed5ba1ea3b2e500823448c6c</td>
</tr>
<tr>
<td>45d175f3c1cb6067f60ea90661524124102f872830a78968f46187d6bc28f70d</td>
<td>418fab494383e2ae0d94900344853cc0bc6d5385</td>
<td>337171764c99b7ae87c030e11cda00c6</td>
</tr>
<tr>
<td>ca0f235b67506ed5882fe4b520fd007f59c0970a115a61105a560b502745ac6a</td>
<td>1c265ed6b5875a619a427db1663f48fe7db01d88</td>
<td>2a3e63fdbcbbad9b4be8b35a180ea0d4</td>
</tr>
<tr>
<td>abac7a72b425ff38f8a7d8b66178da519525dc2137ca8904b42301fb46a8983e</td>
<td>d9b692d84bdc134f90b54ac2a30f6832d70e730b</td>
<td>211db7515faa09aa0623b327bd1530f1</td>
</tr>
<tr>
<td>645b14df1bd5e294ec194784bc2bd13e0b65dac33897c9b63ad9ed35ec6df3a8</td>
<td>6d3643bfdd1bd85cfdfe4b05eaf2939bbf4b22f0</td>
<td>359f5615dcf2f75bc74146afad630427</td>
</tr>
<tr>
<td>6b4b9cf828f419298cd7fda95db28c53fc53627124224d87d2ad060185767957</td>
<td>59208d32dd7440bbe4142882b8ad1ac033f08918</td>
<td>bae0fc6f570ca12a9b2980dd00bc673c</td>
</tr>
<tr>
<td>7fd19347519ec15ab8dbce66722b28a917b87ad034282ef90851e1b994463644</td>
<td>c4467556640ad45fb8e56d1fb95c93e57b209924</td>
<td>086186c935a68e7167113da46a17fa80</td>
</tr>
<tr>
<td>8308e54055b45eb63dc6c4c6a4112310a45dec041c1be7deb55bec548617136f</td>
<td>c44934f47c98c7cde7ba5978ca315a5e9099d0c8</td>
<td>cf13bdefb622fc90dcda39e20e45d636</td>
</tr>
<tr>
<td>adf52650ce698e17d5ff130bc975a82b47c6c175ad929083d757ec0fe7c4b205</td>
<td>bed84d4ef7bd8c5fb683eab51d849c891328b4d4</td>
<td>08393f7d6e0ee2b7472173f4419a602d</td>
</tr>
<tr>
<td>fb707094673a48408f9ba5240019cb502b9367fb380bb1734e0243e90b9399c3</td>
<td>e452227d134fe14df3ca35cd2abf7f1e922aa5d6</td>
<td>d761c07911138e605723f891965035b8</td>
</tr>
<tr>
<td>4da733bbf7d585ee5b5a58c0ad77047ce640a4512a84502ad5ae9240ee2fcdb0</td>
<td>ff362a3d5d873f8fd0f7c2f150582dab9251cf2c</td>
<td>5eab890242e8b811865e1bd3a7fd7868</td>
</tr>
<tr>
<td>bef3f87c6582813e23b0c8c8db9ca9ed65bc802445187378f4e62a7246133ae2</td>
<td>27e4115041c059dce22322e0242002353ab14814</td>
<td>6d33db967323d822ba3239dcdfcb555c</td>
</tr>
<tr>
<td>b83534071bbcacc175449faadbb1d6b0852fe58521da0fefd5398a4a9b1fb884</td>
<td>26ca2262f31dcc1fd6ad56f1f371a363163ba7f2</td>
<td>d12013fb90a60869cfdaaffe1a18467d</td>
</tr>
<tr>
<td>adf52650ce698e17d5ff130bc975a82b47c6c175ad929083d757ec0fe7c4b205</td>
<td>bed84d4ef7bd8c5fb683eab51d849c891328b4d4</td>
<td>08393f7d6e0ee2b7472173f4419a602d</td>
</tr>
<tr>
<td>e4df8634f5f231fae264684e63b3e0c6497b98dd24ba1b0c6f85c156d33a079c</td>
<td>e3e7b719fa1bb3fd12bb82592f85c3e4c3b1d7fa</td>
<td>03275b5b1f9d11b1731d5746827d00b1</td>
</tr>
<tr>
<td>afb5e3f05d2eedf6e0e7447a34ce6fd135a72dad11660cf21bec4178d0edc15b</td>
<td>c67ad0bb292ed20dbe9ba980e71d223249632252</td>
<td>38857fb40e0655495df270777043b813</td>
</tr>
<tr>
<td>1968f29b67920fc59e54eba7852a32f20ecbf3f09481c09ddbee1dedc37f296e</td>
<td>b49679280a2c5b01d0126fc835cc29e4fdc5900d</td>
<td>468c5c3f46299c67366727a58e3322e4</td>
</tr>
<tr>
<td>be70b599e8d7272e8debf49e6bf6e5d8d9f1965812f387a9f1e75aa34788a7c7</td>
<td>88282f8c93d61fd0caaec8807448e96f90101901</td>
<td>db394163c7e6e511d0e4046ff34d67e2</td>
</tr>
</tbody>
</table>
</div>
<h6>PL shellcode: Metasploit</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>f6085075e906a93a9696d9911577d16e2b5a92bc6b7c514d62992c14d5999205</td>
<td>4a0b8e9a56876c11c667b9ce77b371d2c6d07891</td>
<td>8849cf257c383044c006beb8e66d3add</td>
</tr>
</tbody>
</table>
</div>
<h6>PL shellcode: Cobalt Strike Beacon</h6>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>43fe07f9adeb32b20e21048e9bb41d01e6b3559d98088ac8cd8ab0fad766b885</td>
<td>30dee2118fc28bb0b2804275c92daf58236824e5</td>
<td>2a2a50ec29f741faecbff0bcf705da0a</td>
</tr>
<tr>
<td>6867f3d853de5dfe8adbd761576c29ad853611d8d1c7fdd15b07125fd05321f8</td>
<td>7420afe3c0c91442fac0c6df5dd1cfedd76503de</td>
<td>69b9d1fc0edb0a67909847e43ac79ccf</td>
</tr>
<tr>
<td>0c6c6ba92661c119168a5486faa1af94673bd4d770c13c2b49d7a0651f798857</td>
<td>cb552c22718ca9eaf16792c1ecc583c09f1f19e1</td>
<td>b67ff211420c9f5647df2de02e771864</td>
</tr>
<tr>
<td>be7ba33fcb2a19bb2d1fe746f49c39fb1b8bd5d9e46d5b6610f8a2ad3f60b248</td>
<td>7849dcf58fbb930a1327635e13e9970d4bdc7121</td>
<td>9a478e85f1aed628e3fc1f7c8fdeae82</td>
</tr>
<tr>
<td>d1a548b9ad6b4468ee3c5f6e1aaaa515021255fb13e45ff34fbff5ad88bf4de2</td>
<td>93404b4005e7ab0e8c9282ced20c16820378792b</td>
<td>eff6e2a93e60fe017e9f082cd6d3fac9</td>
</tr>
<tr>
<td>9ad808caa0b6a60a584566f3c172280617e36699326e7425356795b221af41dc</td>
<td>f3093ae9f6633449c1d4f35804d1166dcbe09ece</td>
<td>abb6e606a5fd22abfaefb1dbf970ce2f</td>
</tr>
<tr>
<td>eb9c850b1e8d8842eb900fa78135b518fb69da49c72304b5b3b4b6f4fa639e57</td>
<td>6c34f4f29cb3d8cc8f55a707d255de50caa67e8f</td>
<td>b80d303171db4adb554e656aaba15fc9</td>
</tr>
<tr>
<td>e10046b86fe821d8208cb0a6824080ea6cd47a92d4f6e22ce7f5c4c0d9605e4b</td>
<td>1cc16e3a6185b790875e3f00b68ec87feddcf93f</td>
<td>cd43240098f60c5d65290ef93ebdf6de</td>
</tr>
<tr>
<td>a783edae435c6fdf55e937b3246b454ed3b85583184b6ffc1b2faba75c9165cf</td>
<td>aed326228551a4736012c1921d3be7079541c29e</td>
<td>07377cf8abcabcf4ec87e9dde67672d6</td>
</tr>
</tbody>
</table>
</div>
<h5><b>CHM file attack</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>b6685eb069bdfeec54c9ac349b6f26fb8ecf7a27f8dfd8fcdb09983c94aed869</td>
<td>db190af369fdc654af39a54c44f37d5e5712fda8</td>
<td>06f945c39870743d51ca887efb32d649</td>
</tr>
<tr>
<td>5d549155b1a5a9c49497cf34ca0d6d4ca19c06c9996464386fc0ed696bf355a2</td>
<td>7dabbd292f8bb8b600439a9c1b2fa69eeecbcb88</td>
<td>46d3773e0e306b8a1ede7932b83fb034</td>
</tr>
<tr>
<td>02f5cb58a57d807c365edf8df5635263f428b099a38dff7fe7f4436b84efbe71</td>
<td>9c921a278ba4647269b45a5716b47ee47b6de24f</td>
<td>e8c21f8f50bc5720b1713322db4a9022</td>
</tr>
<tr>
<td>3c8049bd7d2c285acc0685d55b73e4339d4d0a755acffad697d5a6806d95bb28</td>
<td>201eac040aa2693042efa7539a88e2676dcf89af</td>
<td>e93bdab9e64bcce94f70a91e0ee115da</td>
</tr>
<tr>
<td>fcbd7ab82939b7e0aff38f48a1797ac2efdb3c01c326a2dcf828a500015e0e83</td>
<td>8a503147831499778b2d50f8337677c249c99846</td>
<td>21aa8aa3a92ebca1963595a328061843</td>
</tr>
<tr>
<td>3c6d304c050607a9b945b9c7e80805fc5d54ced16f3d27aaa42fce6434c92472</td>
<td>1e75cfd3db2cc4b0091e271a7533b828632f399c</td>
<td>951c5f08eef4ef8acc3352a44c7c0e80</td>
</tr>
<tr>
<td>4d3ad3ff281a144d9a0a8ae5680f13e201ce1a6ba70e53a74510f0e41ae6a9e6</td>
<td>9c1d4db37c2d72ac9761dd342feb8a31bc636d6d</td>
<td>b22b232381ea465aeb81fb7077141d06</td>
</tr>
</tbody>
</table>
</div>
<h5><b>FunnySwitch</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>23dfce597a6afef4a1fffd0e7cf89eba31f964f3eabcec1545317efeb25082ed</td>
<td>6dd15c03ffd3762a20b0f51faf31724d5dbf1466</td>
<td>2b0c692d9eafed5e24f2b52234ea0fa2</td>
</tr>
<tr>
<td>2063fae36db936de23eb728bcf3f8a5572f83645786c2a0a5529c71d8447a9af</td>
<td>c1e31f72adba9d5e2801e6766a24eb8d37807e9d</td>
<td>7e1948326ff96a1b6f8e8d6dee152e28</td>
</tr>
<tr>
<td>fbc56623dd4cdfdc917a9bb0fbe00fa213c656069c7094fe90ba2c355f580670</td>
<td>69b961af528eac458942dc1787f32dc432a328d9</td>
<td>2902f54dbd1f143784dfcb170dfc170d</td>
</tr>
<tr>
<td>fb0fdd18922977263f78becdedddab7a03c8de16a5431c7b4602e5be13110fa3</td>
<td>6e3d0537cd52965e52b06b984155191c41fe0a18</td>
<td>30684061b51971698984b531205429ca</td>
</tr>
<tr>
<td>b45baac2ae9c5fdfbf56131451962826a95d56f641af8ca1b74738c2eb939a76</td>
<td>4f0402e2638831d6259a366cf605eadb8c7fd478</td>
<td>5fcf6562217dd1bb21003a9613739aff</td>
</tr>
<tr>
<td>ff0527ea2f8545c86b8dfdef624362ed9e6c09d3f8589f873b1e08a895ef9635</td>
<td>ed8cc92b5a04620b01fcc4365e8f2ffe0c49eb30</td>
<td>f5b3106f2ff44bf860d077e77a1992e3</td>
</tr>
<tr>
<td>931ea6a2fc0d5b4c5c3cf2cba596a97eaa805981414c9cda4b26c8c47bf914df</td>
<td>ebb08480d3d94d6d3a8d85894d297db996d57b4f</td>
<td>b6953b1d1c78770a6d4b3e0c9d146d9b</td>
</tr>
<tr>
<td>568298593d406bd49de42688365fdc16f4a5841198583527a35f6a7d518a6b0e</td>
<td>425e6c8e89f45a8fe57a27d1eacdc850b2286099</td>
<td>bbeca57f7993a34e6296c8dedb996b76</td>
</tr>
</tbody>
</table>
</div>
<h5><b>ShadowPad</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>03b7b511716c074e9f6ef37318638337fd7449897be999505d4a3219572829b4</td>
<td>147529e1a8b00a62fa2371600988b17487260448</td>
<td>a26d2c6f7df4b74b56f9376a2d234661</td>
</tr>
<tr>
<td>5a151aa75fbfc144cb48595a86e7b0ae0ad18d2630192773ff688ae1f42989b7</td>
<td>ea43dbef69af12404549bc45fda756bfefcb3d88</td>
<td>493698b1d7acfbf57848b964b4b0ae97</td>
</tr>
<tr>
<td>3b70be53fd7421d77f14041046f7484862e63a33ec4b82590d032804b1565d0d</td>
<td>ebcb044373550b787553a9b9cd297f4b8c330cd3</td>
<td>652c44a6b5d09bf4c749a4b4d1bae895</td>
</tr>
<tr>
<td>ae000f5cef11468dde774696423ca0186b46e55781a4232f22760a0bfbfb04f0</td>
<td>ee4744c4e74aa9933f3a5c340d9b739f8399b7f2</td>
<td>4001d217c9a77d5839fbc033937f7ed4</td>
</tr>
<tr>
<td>5f1a21940be9f78a5782879ad54600bd67bfcd4d32085db7a3e8a88292db26cc</td>
<td>f6f6f352fa58d587c644953e4fd1552278827e14</td>
<td>52c28bdb6b1fc4d77b1ea58dc8c1c810</td>
</tr>
<tr>
<td>e93a9e59ee2c1a18cee75eedcbe968ed552d5c62ec6546c8a1c1f1ae2019844e</td>
<td>1a654b4191a3196353801d37a1de21535eb7a41c</td>
<td>eb763c30f69c4f438be7545e2a1ca76c</td>
</tr>
<tr>
<td>1f64194a4e4babe3f176666ffd8ee0d76d856825c19bfcd783aec1bacb74fd05</td>
<td>801b756019c075ef6a20c8219157fe8f92deebc1</td>
<td>791f92ce878c8327337eb8e35675a715</td>
</tr>
<tr>
<td>531e54c055838f281d19fed674dbc339c13e21c71b6641c23d8333f6277f28c0</td>
<td>6966687463365f08cfb25fd2c47c6e9a27af22b0</td>
<td>4ad23aae3409c31d3d72e1d10e9d957d</td>
</tr>
<tr>
<td>a1fa8cad75c5d999f1b0678fa611009572abf03dd5a836f8f2604108b503b6d2</td>
<td>c1af22e0d0585f6c6a2deab22a784717ee33f36d</td>
<td>882a60c3173e252469eb4731af3342bd</td>
</tr>
<tr>
<td>37be65842e3fc72a5ceccdc3d7784a96d3ca6c693d84ed99501f303637f9301a</td>
<td>05a2b848965d77fa154ca24fa438b8e5390c21f5</td>
<td>e542c6fabe80af604d31ef8eaaf94053</td>
</tr>
</tbody>
</table>
</div>
<h5><b>PlugX</b></h5>
<div class="table-container">
    <table class="table-article">
<tbody>
<tr>
<td>94ea23e7f53cb9111dd61fe1a1cbb79b8bbabd2d37ed6bfa67ba2a437cfd5e92</td>
<td>14c1e3dd30ef1e22e6ebadd65fb883d3e0354d47</td>
<td>329ecc81b222a796f46859d16bd4813c</td>
</tr>
<tr>
<td>ac5b4378a907949c4edd2b2ca7734173875527e9e8d5b6d69af5aea4b8ed3a69</td>
<td>2293a7510101ccfd83db4bd6429db2f9d406859a</td>
<td>d55e9a302203c8800ca89b757b0588ed</td>
</tr>
<tr>
<td>e54b7d31a8dd0fbab1fa81081e54b0b9b07634c13934adaf08b23d2b6a84b89a</td>
<td>c40acafac6c1c3ba1d1cf5497bfaf5f682f9884a</td>
<td>a7542a2dc4dd52bd4c9b08741dc32ad7</td>
</tr>
<tr>
<td>b59a37f408fcfb8b8e7e001e875629998a570f4a5f652bcbb533ab4d30f243f7</td>
<td>d1cf03da461f81822287465be5942931ac29737d</td>
<td>d3ef032a67242789316e364f7e798ff4</td>
</tr>
<tr>
<td>ccdb8e0162796efe19128c0bac78478fd1ff2dc3382aed0c19b0f4bd99a31efc</td>
<td>22bac40e845ec6551396b77e6257f50634993883</td>
<td>7affcfb9857cc14dcc07fb8d226f03e0</td>
</tr>
<tr>
<td>4dad1e908604c2faa4ad9d9ef3dcebc3a163e97398d41e5e398788fe8da2305b</td>
<td>7cbaa1757bafa3a6be0793b959feac1ea73d88ff</td>
<td>f749aa99a08fdc737f90813f174abb30</td>
</tr>
<tr>
<td>4a89a4d9fa22f42c6d3e51cf8dca0881e34763fe0448b783599bfc00984fd2ee</td>
<td>bd31d8bad119b9da702889b44854b054f15e2f47</td>
<td>4489d5077c5d2396e3a94d652adae1ca</td>
</tr>
<tr>
<td>18a14cec1abcb9c02c1094271d89f428dec1896924a949ed760d38cd0dea7217</td>
<td>a2e88dfb93c23ba7cd38a820b2e64f14192079c2</td>
<td>8d6737d573ef70b47fd39a4c5a552e0f</td>
</tr>
</tbody>
</table>
</div>
<h4>Network Indicators</h4>
<h5><b>LNK file attacks</b></h5>
<p>www.comcleanner[.]info</p>
<p>45.76.6[.]149</p>
<p>http://zeplin.atwebpages[.]com/inter.php</p>
<p>http://goodhk.azurewebsites[.]net/inter.php</p>
<p>http://sixindent.epizy[.]com/inter.php</p>
<h5><b>Shellcode injectors</b></h5>
<p>6q4qp9trwi.dnslookup[.]services</p>
<p>d89o0gm34t.livehost[.]live</p>
<p>d89o0gm35t.livehost[.]live</p>
<p>168.106.1[.]1</p>
<p>149.28.152[.]196</p>
<p>207.148.99[.]56</p>
<p>149.28.84[.]98</p>
<h5><b>Shellcode loaders</b></h5>
<p>exchange.dumb1[.]com</p>
<p>microsoftbooks.dynamic-dns[.]net</p>
<p>microsoftdocs.dns05[.]com</p>
<p>ns.microsoftdocs.dns05[.]com</p>
<p>ns1.dns-dropbox[.]com</p>
<p>ns2.dns-dropbox[.]com</p>
<p>ns1.microsoftsonline[.]net</p>
<p>ns2.microsoftsonline[.]net</p>
<p>ns3.mlcrosoft[.]site</p>
<p>onenote.dns05[.]com</p>
<p>service.dns22[.]ml</p>
<p>update.facebookdocs[.]com</p>
<p>104.224.169[.]214</p>
<p>107.182.24[.]70</p>
<p>107.182.24[.]70</p>
<p>149.248.8[.]134</p>
<p>149.28.23[.]32</p>
<p>176.122.162[.]149</p>
<p>45.76.75[.]219</p>
<p>66.42.103[.]222</p>
<p>66.42.107[.]133</p>
<p>66.42.48[.]186</p>
<p>66.98.126[.]203</p>
<h5><b>FunnySwitch</b></h5>
<p>7hln9yr3y6.symantecupd[.]com</p>
<p>db311secsd.kasprsky[.]info</p>
<p>doc.goog1eweb[.]com</p>
<h5><b>ShadowPad</b></h5>
<p>cigy2jft92.kasprsky[.]info</p>
<p>update.ilastname[.]com</p>
<h5><b>PlugX</b></h5>
<p>ns.mircosoftbox[.]com</p>
<p>ns.upgradsource[.]com</p>
<p>update.upgradsource[.]com</p>
<p>103.79.76[.]205</p>
<p>107.174.45[.]134</p>
<h3 id="id10-3">10.3 MITRE</h3>
<div class="table-container">
    <table class="table-article">
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><b>Reconnaissance</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1593.001</td>
<td>Search Open Websites/Domains: Social Media</td>
<td>Winnti uses a Twitter account to get game-related information</td>
</tr>
<tr>
<td>T1594</td>
<td>Search Victim-Owned Websites</td>
<td>Winnti finds the site of a gaming company and uses information from it to create bait</td>
</tr>
<tr>
<td><b>Resource Development</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1583.001</td>
<td>Acquire Infrastructure: Domains</td>
<td>Winnti purchases domain names that resemble those of legitimate services, including the victim&#x27;s site</td>
</tr>
<tr>
<td>T1583.006</td>
<td>Acquire Infrastructure: Web Services</td>
<td>Winnti can use GitHub and Google Docs for C2 updates</td>
</tr>
<tr>
<td>T1587.001</td>
<td>Develop Capabilities: Malware</td>
<td>Winnti uses self-developed malware in its attacks</td>
</tr>
<tr>
<td>T1587.003</td>
<td>Develop Capabilities: Digital Certificates</td>
<td>Winnti creates self-signed certificates for use in HTTPS C2 traffic</td>
</tr>
<tr>
<td>T1588.001</td>
<td>Obtain Capabilities: Malware</td>
<td>Winnti uses PlugX in its attacks</td>
</tr>
<tr>
<td>T1588.002</td>
<td>Obtain Capabilities: Tool</td>
<td>Winnti uses Metasploit and Cobalt Strike in its attacks</td>
</tr>
<tr>
<td>T1588.003</td>
<td>Obtain Capabilities: Code Signing Certificates</td>
<td>Winnti steals code signing certificates from compromised organizations</td>
</tr>
<tr>
<td>T1588.005</td>
<td>Obtain Capabilities: Exploits</td>
<td>Winnti uses a public exploit for remote code execution (RCE) by means of a CHM file</td>
</tr>
<tr>
<td><b>Initial Access</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1566.001</td>
<td>Phishing: Spearphishing Attachment</td>
<td>Winnti sends phishing messages with malicious attachments</td>
</tr>
<tr>
<td>T1566.002</td>
<td>Phishing: Spearphishing Link</td>
<td>Winnti sends phishing messages with malicious links</td>
</tr>
<tr>
<td><b>Execution</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1059.003</td>
<td>Command and Scripting Interpreter: Windows Command Shell</td>
<td>Winnti uses cmd.exe and .bat files to run commands</td>
</tr>
<tr>
<td>T1059.005</td>
<td>Command and Scripting Interpreter: Visual Basic</td>
<td>Winnti uses VBS files to pass control to subsequent malware stages</td>
</tr>
<tr>
<td>T1059.007</td>
<td>Command and Scripting Interpreter: JavaScript/JScript</td>
<td>Winnti uses malicious JScript code in intermediate stages and for the payload</td>
</tr>
<tr>
<td>T1203</td>
<td>Exploitation for Client Execution</td>
<td>Winnti exploits RCE in a CHM file by means of an ActiveX object</td>
</tr>
<tr>
<td>T1106</td>
<td>Native API</td>
<td>Winnti uses various WinAPI functions to run malicious shellcode in the current process or to inject it into another process</td>
</tr>
<tr>
<td>T1204.002</td>
<td>User Execution: Malicious File</td>
<td>Winnti tries to make users run malicious .lnk, .chm, and .exe files</td>
</tr>
<tr>
<td><b>Persistence</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1547.001</td>
<td>Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder</td>
<td>Winnti persists by means of a registry run key or a startup folder</td>
</tr>
<tr>
<td>T1543.003</td>
<td>Create or Modify System Process: Windows Service</td>
<td>Winnti persists on infected machines by creating new services</td>
</tr>
<tr>
<td>T1053.005</td>
<td>Scheduled Task/Job: Scheduled Task</td>
<td>Winnti creates a task with schtasks for persistence</td>
</tr>
<tr>
<td><b>Defense evasion</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1140</td>
<td>Deobfuscate/Decode Files or Information</td>
<td>To store shellcode with the payload, Winnti uses a custom PL format with encryption</td>
</tr>
<tr>
<td>T1574.002</td>
<td>Hijack Execution Flow: DLL Side-Loading</td>
<td>Winnti uses legitimate utilities to load DLLs from ShadowPad and PlugX</td>
</tr>
<tr>
<td>T1562.004</td>
<td>Impair Defenses: Disable or Modify System Firewall</td>
<td>FunnySwitch adds allow rules to Windows Firewall for C2 connections</td>
</tr>
<tr>
<td>T1070</td>
<td>Indicator Removal on Host</td>
<td>Paranoid PlugX deletes artifacts created during infection from the file system and registry</td>
</tr>
<tr>
<td>T1202</td>
<td>Indirect Command Execution</td>
<td>Winnti uses intermediate VBS scripts to run .bat files</td>
</tr>
<tr>
<td>T1027.002</td>
<td>Obfuscated Files or Information: Software Packing</td>
<td>Winnti can use VMProtect or custom packers for its malware</td>
</tr>
<tr>
<td>T1055.002</td>
<td>Process Injection: Portable Executable Injection</td>
<td>Winnti injects shellcode into the processes explorer.exe, winlogon.exe, wmplayer.exe, svchost.exe, and spoolsv.exe</td>
</tr>
<tr>
<td>T1218.001</td>
<td>Signed Binary Proxy Execution: Compiled HTML File</td>
<td>Winnti uses CHM files containing malicious code</td>
</tr>
<tr>
<td>T1218.004</td>
<td>Signed Binary Proxy Execution: InstallUtil</td>
<td>Paranoid PlugX can use InstallUtil to run a malicious .NET assembly</td>
</tr>
<tr>
<td>T1553.002</td>
<td>Subvert Trust Controls: Code Signing</td>
<td>Winnti uses stolen certificates to sign its malware</td>
</tr>
<tr>
<td><b>Discovery</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1082</td>
<td>System Information Discovery</td>
<td>Winnti backdoors collect information about the computer name and OS version and whether it is 32-bit or 64-bit</td>
</tr>
<tr>
<td>T1016</td>
<td>System Network Configuration Discovery</td>
<td>Winnti backdoors collect information about the IP and MAC addresses of the infected machine</td>
</tr>
<tr>
<td>T1033</td>
<td>System Owner/User Discovery</td>
<td>Winnti backdoors collect information about the name of the current user</td>
</tr>
<tr>
<td><b>Collection</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1119</td>
<td>Automated Collection</td>
<td>Winnti backdoors automatically collect information about the infected machine</td>
</tr>
<tr>
<td><b>Command and Control</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1071.001</td>
<td>Application Layer Protocol: Web Protocols</td>
<td>Winnti backdoors can use HTTP/HTTPS for C2 connections</td>
</tr>
<tr>
<td>T1132.001</td>
<td>Data Encoding: Standard Encoding</td>
<td>Winnti uses GZip for compressing FunnySwitch data</td>
</tr>
<tr>
<td>T1001.003</td>
<td>Data Obfuscation: Protocol Impersonation</td>
<td>Winnti uses FakeTLS in Crosswalk traffic</td>
</tr>
<tr>
<td>T1573.001</td>
<td>Encrypted Channel: Symmetric Cryptography</td>
<td>Winnti uses AES for encrypting traffic in its backdoors</td>
</tr>
<tr>
<td>T1008</td>
<td>Fallback Channels</td>
<td>The Winnti configuration supports indicating multiple C2 servers of various types</td>
</tr>
<tr>
<td>T1095</td>
<td>Non-Application Layer Protocol</td>
<td>Winnti backdoors can use TCP and UDP for C2 connections</td>
</tr>
<tr>
<td>T1090.001</td>
<td>Proxy: Internal Proxy</td>
<td>FunnySwitch can establish C2 connections via a peer-to-peer network of infected hosts</td>
</tr>
<tr>
<td>T1090.002</td>
<td>Proxy: External Proxy</td>
<td>Winnti backdoors support C2 connections via an external HTTP/SOCKS proxy</td>
</tr>
<tr>
<td>T1102.001</td>
<td>Web Service: Dead Drop Resolver</td>
<td>Winnti uses Google Docs for updating the C2 address in PlugX</td>
</tr>
</tbody>
</table>
</div>
</article></div></div><div class="ArticleLayout_rightColumn__c8u4z"><div class="ShareBlock_container__5nb7z"><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Share this article</span><span>:</span></div><div class="ShareBlock_icons__vIJLT"><button type="button" class="Social_icon__pVcgR"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"><path stroke="currentColor" d="M8.39 10.805a4.024 4.024 0 0 0 4.628 1.36 4.023 4.023 0 0 0 1.44-.925l2.413-2.416A4.029 4.029 0 0 0 14.012 2a4.02 4.02 0 0 0-2.83 1.13L9.8 4.507m1.81 4.688a4.024 4.024 0 0 0-4.627-1.36 4.022 4.022 0 0 0-1.44.925L3.13 11.176A4.029 4.029 0 0 0 5.988 18a4.02 4.02 0 0 0 2.83-1.13l1.375-1.377"></path></svg></button></div></div></div></div></div><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"></div></div></div></div></section><section class="PageSection_section__GxaaG Card_section__QzdVO" id="contacts"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j AnyQuestions_container__KVhzR"><div class="AnyQuestions_heading__pSibU"><h1 class="AnyQuestions_title__ScrF1 Heading_base__MUnbH Heading_level_1__oOibP Heading_theme_light__level_1__7KeY7"><span>Get in touch</span></h1><div class="Text_base__riB2c Text_type_pL__A_h0d Text_theme_light__type_pL___Cab8"><span>Fill in the form and our specialists<br> will contact you shortly</span></div></div><div class="AnyQuestions_content__rdK_e"><div class="CardsSlider_root__4cbz_ AnyQuestions_radioGroupWrapper__WrSuy"><div class="CardsSlider_scrollArea__LArfW AnyQuestions_radioGroup__DBJB4"><label style="--cards-count:3" data-testid="form-tab-feedback" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF CardRadio_checked__7uYOJ AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" checked="" value="feedback"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>General<br> questions</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>We're happy to answer any questions you may have.</span></div></label><label style="--cards-count:3" data-testid="form-tab-partnership" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="partnership"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Partnership</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Join us in making the world a safer place.</span></div></label><label style="--cards-count:3" data-testid="form-tab-pilotApplication" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="pilotApplication"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Pilot<br> application</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Test drive our solutions with a customized pilot program.</span></div></label></div></div><form><div class="FeedbackForm_fields__NxBGh"><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Name" type="text" autoComplete="name" maxLength="250" name="fullName" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Phone number" type="text" autoComplete="tel" maxLength="20" name="phone" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Email" type="text" autoComplete="email" maxLength="250" name="email" value=""/></label></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><div class="Autocomplete_root__of0uL Select_root__qV3jk Select_mode_light__6i67a"><div class="Select_select__Wgg4m"><div class="SearchField_container__r8UBy"><input placeholder="Country" class="Input_input__dAKAo SearchField_input__OhP5T" id="headlessui-combobox-input-:R1d8qkf6:" role="combobox" type="text" aria-expanded="false" aria-autocomplete="list" data-headlessui-state=""/><button class="SearchField_icon__n277G SearchField_icon_second__tgr0q SearchField_icon_action__K_KOk" id="headlessui-combobox-button-:R2d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""></button><button class="SearchField_icon__n277G SearchField_icon_grey__v_ngf" id="headlessui-combobox-button-:R3d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""><svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.7645 11.4123C12.0858 10.3117 12.9268 8.65406 12.9268 6.79999C12.9268 3.48628 10.2405 0.799988 6.92676 0.799988C3.61305 0.799988 0.926758 3.48628 0.926758 6.79999C0.926758 10.1137 3.61305 12.8 6.92676 12.8C8.3864 12.8 9.7243 12.2788 10.7645 11.4123ZM10.7645 11.4123L14.5522 15.2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg></button></div></div></div></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Textarea_container__HPtza Textarea_mode_light__E0Y92"><textarea id="comment" class="Textarea_textarea__MapxB" placeholder="How can we help?" maxLength="1000" name="comment"></textarea></label></div></div><div class="FeedbackForm_agrees__062n_"><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="consentsTerms" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent" target="_blank">my&nbsp;consent to&nbsp;the processing of&nbsp;my&nbsp;personal data</a> in&nbsp;accordance with the terms of&nbsp;the <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/privacy-policy" target="_blank">Privacy Notice</a></span></div></label><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="subscription" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I&nbsp;give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent-email" target="_blank">my&nbsp;consent to&nbsp;receive marketing and&nbsp;informational messages</a></span></div></label></div><div><div class="smart-captcha"></div><button type="submit" class="Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_light__W9pGX"><span><span>SEND</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></button></div></form></div></div></section><footer class="Footer_wrapper__igPy4"><div class="Footer_info__BLmy7"><div class="Footer_head__3m28S"><div class="Footer_copyright__JcWnj Text_base__riB2c Text_type_pM__mE14b"><span>Copyright <mark>©</mark> 2002–2024 Positive Technologies. All rights reserved.</span></div><h2 class="Footer_heading__mQ6QG Heading_base__MUnbH Heading_level_2__qXMBH"><span>Cybersecurity market leader</span></h2><div class="Footer_additionalLinks__KyguX"><a class="Footer_additionalLink__5ONRT" target="_blank" href="https://global.ptsecurity.com/policies/terms-of-use">Legal documents</a><a class="Footer_additionalLink__5ONRT" href="https://www.ptsecurity.com/choose-region/?return_url=/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new">Change region</a></div></div><nav class="Footer_nav__LBYFW"><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>Products</span></div><a class="NavBlock_list_item__wGeXz" href="/products/network-attack-discovery"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT NAD</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/threat-intelligence-feeds"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Threat Intelligence Feeds</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/sandbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Sandbox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/maxpatrol-vm"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol VM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/siem"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol SIEM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ai"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Inspector</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/blackbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT BlackBox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/isim"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ISIM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/mp-o2"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol O2</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/edr"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol EDR</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/pt-af"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Firewall</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/cs"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Container Security</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Industrial Cybersecurity Suite</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>ANALYTICS</span></div><a class="NavBlock_list_item__wGeXz" href="/analytics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Analytics articles</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/knowledge-base"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Knowledge base</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ESC threat intelligence</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/threatscape"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Threatscape</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/hacker-groups"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Hacker groups</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>COMPANY</span></div><a class="NavBlock_list_item__wGeXz" href="/about"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>About us</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/clients"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Clients</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/contacts"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Contacts</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/pt-in-the-media"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT in the Media</span></div></a><a href="https://edu.ptsecurity.com/learning-space" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Education</span></div></a><a href="https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>YouTube</span></div></a><a href="https://vacancy.global.ptsecurity.com/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Vacancy</span></div></a></div></nav></div><div><img alt="" loading="lazy" width="1200" height="100" decoding="async" data-nimg="1" class="Footer_logo__cDBuS" style="color:transparent" src="https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg"/></div></footer></main></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"seo":{"title":"Higaisa or Winnti? APT41 backdoors, old and new","description":"\r\n\tThe PT Expert Security Center regularly spots emerging threats to information security, including both previously known and newly discovered malware. During such monitoring in May 2020, we detected several samples of new malware that at first glance would seem to belong to the Higaisa group. But detailed analysis pointed to the Winnti group (also known as APT41, per FireEye) of Chinese origin. Subsequent monitoring led us to discover a number of new malware samples used by the group in recent attacks. These include various droppers, loaders, and injectors; Crosswalk, ShadowPad, and PlugX backdoors; and samples of a previously undescribed backdoor that we have dubbed FunnySwitch. We can confidently state that some of these attacks were directed at a number of organizations in Russia and Hong Kong.\r\n\r\n\r\n\tIn this article, we will share the results of our investigation of these samples and related network infrastructure, as well as overlaps with previously described attacks.\r\n"},"headerData":{"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_header_1bd424ccc4.svg","width":249,"height":22,"alt":""},"nav":[{"type":"product-menu","data":{"title":"Products","button":{"link":"/products","text":"Jump to section","targetBlank":false},"items":[{"description":"NDR system for detecting hidden threats on the perimeter and inside the network","link":"/products/network-attack-discovery","title":"PT NAD"},{"description":"Advanced sandbox with customizable virtual environments","link":"/products/sandbox","title":"PT Sandbox"},{"description":"Next-generation vulnerability management system","link":"/products/maxpatrol-vm","title":"MaxPatrol VM"},{"description":"Pinpoint threat detection solution for your infrastructure","link":"/products/siem","title":"MaxPatrol SIEM"},{"description":"Source-code analysis tool","link":"/products/ai","title":"PT Application Inspector"},{"description":"Dynamic application security testing tool","link":"/products/blackbox","title":"PT BlackBox"},{"description":"Cyberthreat detection and incident response in ICS","link":"/products/isim","title":"PT ISIM"},{"description":"Autopilot for result-driven cybersecurity","link":"/products/mp-o2/","title":"MaxPatrol O2"},{"description":"Protects your endpoints","link":"/products/edr","title":"MaxPatrol EDR"},{"description":"A web application firewall","link":"/products/pt-af","title":"PT Application Firewall"},{"description":"Innovative solution for the comprehensive protection","link":"/products/cs","title":"PT Container Security"},{"description":"The first comprehensive platform for cyberthreat detection and response in industrial systems","link":"/products/ics","title":"PT Industrial Cybersecurity Suite"},{"description":"Data feeds collected by Positive Technologies experts for threat detection","link":"/products/threat-intelligence-feeds","title":"PT Threat Intelligence Feeds"}]}},{"type":"product-menu","data":{"title":"Services","button":{"link":"/services","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/services/esc","title":"ESC"}]}},{"type":"product-menu","data":{"title":"Education","button":null,"items":[{"description":"","link":"https://edu.ptsecurity.com/learning-space","title":"Positive Education Cybersecurity Academy"},{"description":"","link":"https://edu.ptsecurity.com/pros-programs","title":"Cybersecurity programs for Professionals"},{"description":"","link":"https://edu.ptsecurity.com/c-level-programs","title":"Cybersecurity programs for Executives"},{"description":"","link":"https://edu.ptsecurity.com/product-courses","title":"Product courses"}]}},{"type":"link","data":{"link":"/about/news/","title":"News \u0026 events"}},{"type":"product-menu","data":{"title":"Analytics","button":{"link":"/analytics","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/analytics/knowledge-base","title":"Knowledge base"},{"description":"","link":"/analytics/pt-esc-threat-intelligence","title":"PT ESC threat intelligence"},{"description":"","link":"/analytics/threatscape","title":"Threatscape"},{"description":"","link":"/analytics/hacker-groups","title":"Hacker groups"}]}},{"type":"product-menu","data":{"title":"About us","button":{"link":"/about","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/about/clients","title":"Clients"},{"description":"","link":"/about/contacts","title":"Contacts"},{"description":"","link":"/about/pt-in-the-media","title":"PT in the Media"},{"description":"","link":"https://vacancy.global.ptsecurity.com/","title":"Vacancy"}]}}],"searchInputPlaceholder":"Search on ptsecurity.com"},"articleData":{"content":[],"deprecatedDetailText":"\u003carticle\u003e\r\n\u003cp\u003eThe \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/\" target=\"_blank\"\u003ePT Expert Security Center\u003c/a\u003e regularly spots emerging threats to information security, including both previously known and newly discovered malware. During such monitoring in May 2020, we detected several samples of new malware that at first glance would seem to belong to the Higaisa group. But detailed analysis pointed to the \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/shadowpad-new-activity-from-the-winnti-group/\" target=\"_blank\"\u003eWinnti group (also known as APT41, per FireEye)\u003c/a\u003e of Chinese origin. Subsequent monitoring led us to discover a number of new malware samples used by the group in recent attacks. These include various droppers, loaders, and injectors; Crosswalk, ShadowPad, and PlugX backdoors; and samples of a previously undescribed backdoor that we have dubbed FunnySwitch. We can confidently state that some of these attacks were directed at a number of organizations in Russia and Hong Kong.\u003c/p\u003e\r\n\u003cp\u003eIn this article, we will share the results of our investigation of these samples and related network infrastructure, as well as overlaps with previously described attacks.\u003c/p\u003e\r\n\u003ch2\u003eContents\u003c/h2\u003e\r\n\u003col class=\"article-nav\"\u003e\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id1\"\u003eHigaisa shortcuts\u003c/a\u003e\r\n\t\t\u003col\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id1-1\"\u003eAttribution\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id1-2\"\u003eCrosswalk\u003c/a\u003e\u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n    \r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2\"\u003eLoaders and injectors\u003c/a\u003e\r\n\t    \u003col\u003e\r\n\t\t    \u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-1\"\u003eInjectors\u003c/a\u003e\u003c/li\u003e\r\n\t\t    \u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-2\"\u003eLocal shellcode loaders\u003c/a\u003e\u003c/li\u003e\r\n\t\t    \u003cli\u003e\r\n\t\t    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-3\"\u003eAttack examples\u003c/a\u003e\r\n\t\t    \t\u003col\u003e\r\n\t\t\t    \t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-3-1\"\u003eAn encrypted resume\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-3-2\"\u003eI can't breathe\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2-3-3\"\u003eChat transcript\u003c/a\u003e\u003c/li\u003e\r\n\t\t    \t\u003c/ol\u003e\r\n\t\t    \u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id3\"\u003eAttacks on Russian game developers\u003c/a\u003e\r\n\t\t\u003col\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id3-1\"\u003eUnity3D Game Developer from St. Petersburg\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id3-2\"\u003eHFS with a surprise\u003c/a\u003e\u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n    \r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id4\"\u003eA purloined certificate\u003c/a\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5\"\u003eFunnySwitch\u003c/a\u003e\r\n\t    \u003col\u003e\r\n\t\t    \u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-1\"\u003eUnpacking\u003c/a\u003e\u003c/li\u003e\r\n\t\t    \u003cli\u003e\r\n\t\t    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2\"\u003eFunny.dll\u003c/a\u003e\r\n\t\t    \t\u003col\u003e\r\n\t\t\t    \t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-1\"\u003eTransport protocols\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-2\"\u003eNetwork-level protocol\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-3\"\u003eApplication-level protocol\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-4\"\u003eSupported commands\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-5\"\u003eUnused code\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5-2-6\"\u003eFunnySwitch vs. Crosswalk\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\t\u003c/ol\u003e\r\n\t\t    \u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id6\"\u003eShadowPad\u003c/a\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id7\"\u003ePlugX\u003c/a\u003e\r\n\t\t\u003col\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id7-1\"\u003eParanoid PlugX\u003c/a\u003e\u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id8\"\u003eConclusion\u003c/a\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id9\"\u003ePT products detection names\u003c/a\u003e\r\n    \t\u003col\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id9-1\"\u003ePT Sandbox\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id9-2\"\u003ePT Network Attack Discovery\u003c/a\u003e\u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n\r\n    \u003cli\u003e\r\n    \t\u003ca class=\"link link_article-nav anchorLink\" href=\"#id10\"\u003eApplications\u003c/a\u003e\r\n\t\t\u003col\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id10-1\"\u003eKnown names of files from which PL shellcode may be loaded\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id10-2\"\u003eIOCs\u003c/a\u003e\u003c/li\u003e\r\n\t\t\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id10-3\"\u003eMITRE\u003c/a\u003e\u003c/li\u003e\r\n\t\t\u003c/ol\u003e\r\n    \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2 id=\"id1\"\u003e1. Higaisa shortcuts\u003c/h2\u003e\r\n\u003cp\u003eThe first attack dates to May 12, 2020. At the core of the attack is an archive named \u003cem\u003eProject link and New copyright policy.rar\u003c/em\u003e (75cd8d24030a3160b1f49f1b46257f9d6639433214a10564d432b74cc8c4d020). The archive contains a bait PDF document (Zeplin Copyright Policy.pdf) plus the folder \u003cb\u003eAll tort's projects - Web lnks\u003c/b\u003e with two shortcuts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConversations - iOS - Swipe Icons - Zeplin.lnk\u003c/li\u003e\r\n\u003cli\u003eTokbox icon - Odds and Ends - iOS - Zeplin.lnk\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe structure of malicious shortcuts resembles the sample 20200308-sitrep-48-covid-19.pdf.lnk \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/covid-19-and-new-year-greetings-the-higaisa-group/\" target=\"_blank\"\u003espread by the Higaisa group\u003c/a\u003e in March 2020.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image1.png\" alt=\"Comparing command lines in the covid-19 and Zeplin shortcuts\"\u003e\r\n    \u003cfigcaption\u003eFigure 1. Comparing command lines in the covid-19 and Zeplin shortcuts\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe mechanism for initial infection is fundamentally the same: trying to open either of the shortcuts leads to running a command that extracts a Base64-encoded CAB archive from the body of the LNK file, after which the archive is unpacked to a temporary folder. Further actions are performed with the help of an extracted JS script.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image2.png\" alt=\"Contents of script 34fDFkfSD32.js\"\u003e\r\n    \u003cfigcaption\u003eFigure 2. Contents of script 34fDFkfSD32.js\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eBut here is where the similarity with the sample described in our Higaisa report ends: instead, this script copies the payload to the folder C:\\Users\\Public\\Downloads, achieves persistence by adding itself to the startup folder and adding a scheduler task, and runs the payload. The script also sends the output of ipconfig in a POST request to http://zeplin.atwebpages[.]com/inter.php.\u003c/p\u003e\r\n\u003cp\u003eThe command run by the shortcut also contains the opening of a URL file extracted from the archive. The name of the URL file and the target address depend on which shortcut is opened:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eConversations - iOS - Swipe Icons - Zeplin.url goes to:\u003c/p\u003e\r\n\t\u003cp\u003ehttps://app.zeplin.io/project/5b5741802f3131c3a63057a4/screen/5b589f697e44cee37e0e61df\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTokbox icon - Odds and Ends - iOS - Zeplin.url goes to:\u003c/p\u003e\r\n\t\u003cp\u003ehttps://app.zeplin.io/project/5c161c03fde4d550a251e20a/screen/5cef98986801a41be35122bb.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThis is the only difference between the two LNK files. In both cases, the target page is hosted on Zeplin, a legitimate service for collaboration between designers and developers, and requires logging in to view.\u003c/p\u003e\r\n\u003cp\u003eThe payload consists of two files:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003esvchast.exe\u003c/p\u003e\r\n\t\u003cp\u003eIt functions as a simple local shellcode loader. The shellcode read from a fixed path. Before starting, the loader checks the current year: 2018, 2019, 2020, or 2021.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image3.png\" alt=\"Main function in svchast.exe\"\u003e\r\n    \u003cfigcaption\u003eFigure 3. Main function in svchast.exe\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cli\u003e\r\n\t\u003cp\u003e3t54dE3r.tmp\u003c/p\u003e\r\n\t\u003cp\u003eThe shellcode containing the main payload is the Crosswalk backdoor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOn May 30, 2020, a new malicious archive, CV_Colliers.rar (df999d24bde96decdbb65287ca0986db98f73b4ed477e18c3ef100064bceba6d), was detected. It had two shortcuts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCurriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnk\u003c/li\u003e\r\n\u003cli\u003eInternational English Language Testing System certificate.pdf.lnk\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTheir structure fully matched that of the samples from May 12. In this case, the bait consisted of PDF documents with a CV and IELTS certificate. Depending on which shortcut was opened, the output of ipconfig was sent to one of two addresses: http://goodhk.azurewebsites[.]net/inter.php or http://sixindent.epizy[.]com/inter.php.\u003c/p\u003e\r\n\u003cp\u003eNote that all three intermediate C2 servers are on third-level domains on a free hosting service. When accessed in a browser, each displays a different decoy page:\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image4.png\" alt=\"Page at zeplin.atwebpages_com\"\u003e\r\n    \u003cfigcaption\u003eFigure 4. Page at zeplin.atwebpages_com\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image5.png\" alt=\"Page at goodhk.azurewebsites_net\"\u003e\r\n    \u003cfigcaption\u003eFigure 5. Page at goodhk.azurewebsites_net\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image6.png\" alt=\"Page at sixindent.epizy_com\"\u003e\r\n    \u003cfigcaption\u003eFigure 6. Page at sixindent.epizy_com\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThese servers do not play a major role in the functioning of the malware; their precise purpose remains unknown. It may be that the malware authors used this to monitor the success of the initial stages of infection, or else tried to lead security teams \"off the scent\" by masking the malware as a more minor threat.\u003c/p\u003e\r\n\u003ch3 id=\"id1-1\"\u003e1.1 Attribution\u003c/h3\u003e\r\n\u003cp\u003eThese attacks have been studied in detail by \u003ca href=\"https://blog.malwarebytes.com/threat-analysis/2020/06/higaisa/\" target=\"_blank\"\u003eMalwarebytes\u003c/a\u003e and \u003ca href=\"https://www.zscaler.com/blogs/research/return-higaisa-apt\" target=\"_blank\"\u003eZscaler\u003c/a\u003e. Based on the similarity of the infection chains, researchers classify them as belonging to the Higaisa group.\u003c/p\u003e\r\n\u003cp\u003eHowever, detailed analysis of the shellcode demonstrates that the samples actually belong to the Crosswalk malware family. Crosswalk appeared no later than 2017 and was mentioned for the first time in \u003ca href=\"https://content.fireeye.com/apt-41/rpt-apt41/\" target=\"_blank\"\u003ea FireEye report\u003c/a\u003e on the activities of the APT41 (Winnti) group.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image7.png\" alt=\"From the FireEye report\"\u003e\r\n    \u003cfigcaption\u003eFigure 7. From the FireEye report\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image8.png\" alt=\"Fragment of shellcode from 3t54dE3r.tmp\"\u003e\r\n    \u003cfigcaption\u003eFigure 8. Fragment of shellcode from 3t54dE3r.tmp\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe network infrastructure of the samples overlaps with previously known APT41 infrastructure: at the IP address of one of the C2 servers, we find an SSL certificate with SHA-1 value of b8cff709950cfa86665363d9553532db9922265c, which is also found at IP address 67.229.97[.]229, referenced in \u003ca href=\"https://go.crowdstrike.com/rs/281-OBQ-266/images/Report2019GlobalThreatReport.pdf\" target=\"_blank\"\u003ea 2018 CrowdStrike report\u003c/a\u003e. Going further, we can find domains from \u003ca href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134508/winnti-more-than-just-a-game-130410.pdf\" target=\"_blank\"\u003ea Kaspersky report\u003c/a\u003e written in 2013.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image9.png\" alt=\"Fragment of network infrastructure\"\u003e\r\n    \u003cfigcaption\u003eFigure 9. Fragment of network infrastructure\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eAll this leads us to conclude that these LNK file attacks were performed by Winnti (APT41), which \"borrowed\" this shortcut technique from Higaisa.\u003c/p\u003e\r\n\u003ch3 id=\"id1-2\"\u003e1.2 Crosswalk\u003c/h3\u003e\r\n\u003cp\u003eCrosswalk is a modular backdoor implemented in shellcode. The main component connects to a C2 server, collects and sends system information, and contains functionality for installing and running up to 20 additional modules received from the server as shellcode.\u003c/p\u003e\r\n\u003cp\u003eThe information collected by the module includes:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOS uptime\u003c/li\u003e\r\n\u003cli\u003eNetwork adapter IP addresses\u003c/li\u003e\r\n\u003cli\u003eMAC address of one of the adapters\u003c/li\u003e\r\n\u003cli\u003eOperating system version and whether it is 32-bit or 64-bit\u003c/li\u003e\r\n\u003cli\u003eUsername\u003c/li\u003e\r\n\u003cli\u003eComputer name\u003c/li\u003e\r\n\u003cli\u003eName of running module\u003c/li\u003e\r\n\u003cli\u003ePID\u003c/li\u003e\r\n\u003cli\u003eShellcode version and whether it is 32-bit or 64-bit\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e(The shellcode supports both 32 and 64 bits.) It has two-part version numbers; we found ones including 1.0, 1.10, 1.21, 1.22, 1.25, and 2.0.\u003c/p\u003e\r\n\u003cp\u003eFor more detailed analysis of one version of Crosswalk, see the \u003ca href=\"https://www.carbonblack.com/blog/cb-threat-analysis-unit-technical-analysis-of-crosswalk/\" target=\"_blank\"\u003eVMware CarbonBlack investigation\u003c/a\u003e. Based on version 1.25 (8e6945ae06dd849b9db0c2983bca82de1dddbf79afb371aa88da71c19c44c996), which was used in the attacks with LNK files, here we will describe the networking aspects of the malware in more detail.\u003c/p\u003e\r\n\u003cp\u003eCrosswalk has broad capabilities for connecting to C2 servers. The network configuration for this particular sample is at the end of the shellcode and is XOR encrypted with a 16-byte key. The data structure is as follows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConfiguration size (4 bytes)\u003c/li\u003e\r\n\u003cli\u003eKey (16 bytes)\u003c/li\u003e\r\n\u003cli\u003eEncrypted configuration\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe configuration, in turn, contains the following fields:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e0x0 heartbeat interval (in seconds)\u003c/li\u003e\r\n\u003cli\u003e0x4 reconnect interval (in seconds)\u003c/li\u003e\r\n\u003cli\u003e0x8 bitmask for days of the week when connections may be made\u003c/li\u003e\r\n\u003cli\u003e0xC (inclusive) lower bound for time of day when connections may be made\u003c/li\u003e\r\n\u003cli\u003e0x10 (non-inclusive) upper bound for time of day when connections may be made\u003c/li\u003e\r\n\u003cli\u003e0x14 proxy port\u003c/li\u003e\r\n\u003cli\u003e0x18 proxy type\u003c/li\u003e\r\n\u003cli\u003e0x1C proxy host\u003c/li\u003e\r\n\u003cli\u003e0x9C proxy username\u003c/li\u003e\r\n\u003cli\u003e0x11C proxy password\u003c/li\u003e\r\n\u003cli\u003e0x19C number of C2 servers\u003c/li\u003e\r\n\u003cli\u003e0x1A0 array of structures of C2 servers\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA C2 server structure consists of the following fields:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e0x0 connection type\u003c/li\u003e\r\n\u003cli\u003e0x4 port\u003c/li\u003e\r\n\u003cli\u003e0x8 whether DNS name resolution is necessary (yes/no)\u003c/li\u003e\r\n\u003cli\u003e0xC length of hostname\u003c/li\u003e\r\n\u003cli\u003e0x10 hostname\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBefore attempting to connect, the backdoor checks whether the current day of the week and time match those allowed in the configuration. Then, one after the other, it tries combinations of possible proxy servers (any indicated in the configuration plus system proxies) and C2 servers until it connects successfully.\u003c/p\u003e\r\n\u003cp\u003eThe communication protocol used between the backdoor and C2 server can be separated logically into two levels:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eApplication-level protocol\u003c/li\u003e\r\n\u003cli\u003eTransport-level protocol\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eOn the application level, messages consist of the following fields:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFakeTLS header consisting of 5 bytes:\r\n\u003cul\u003e\r\n\u003cli\u003eEntry type and protocol version (3 bytes). For the client these always equal 17 03 01; for the server, they have random values.\u003c/li\u003e\r\n\u003cli\u003eData length, not including header (2 bytes)\u003c/li\u003e\r\n\u003c/ul\u003e\u003c/li\u003e\r\n\u003cli\u003eMessage contents:\r\n\u003cul\u003e\r\n\u003cli\u003eCommand ID (4 bytes, little-endian)\u003c/li\u003e\r\n\u003cli\u003eCommand data size (4 bytes, little-endian)\u003c/li\u003e\r\n\u003cli\u003eClient ID (36 bytes), generated based on the UUID when the backdoor starts operation\u003c/li\u003e\r\n\u003cli\u003eCommand data\u003c/li\u003e\r\n\u003c/ul\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe first two client–server and server–client messages have command IDs 0x65 and 0x64, respectively. They contain the data that will then be used to generate the client and server session keys. The key generation algorithm is detailed in a \u003ca href=\"https://www.zscaler.com/blogs/research/return-higaisa-apt\" target=\"_blank\"\u003eZscaler report\u003c/a\u003e. For all subsequent messages, the content (not including the FakeTLS header) is transferred in the corresponding encrypted session key. AES-128 is the encryption algorithm used.\u003c/p\u003e\r\n\u003cp\u003eThe transport-level protocol depends on the connection type indicated in the configuration. Four protocols are supported:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eStandard TCP connection\r\n\t\u003cp\u003eApplication-level messages are sent unchanged as TCP segments.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eEquivalent to HTTP Long Polling\r\n\t\u003cp\u003eThe client creates two TCP connections. The first will be used to get packets from the server, and the second to send them.\u003c/p\u003e\r\n\t\u003cp\u003eDuring the first connection, a GET request is sent to the C2 server. The server replies with headers with code 200 and Content-Length: 524288000. The subsequent stream of application-level messages from the server to the client is sent as the body of an HTTP response.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image10.png\" alt=\"First HTTP connection with C2\"\u003e\r\n    \u003cfigcaption\u003eFigure 10. First HTTP connection with C2\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eAfter the correct response headers are received, the malware establishes a second connection to the same port, where a POST request is made. The header \u003cem\u003edCy\u003c/em\u003e is generated by the client based on the UUID and, it would seem, serves as the session ID that links the two connections. After receipt of a response with code 200, subsequent messages from the client to the server are sent using separate POST requests.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image11.png\" alt=\"Second HTTP connection with C2\"\u003e\r\n    \u003cfigcaption\u003eFigure 11. Second HTTP connection with C2\u003c/figcaption\u003e\r\n\u003c/figure\u003e\u003c/li\u003e\r\n\u003cli\u003eDuplication of socket with TLS connection\r\n\t\u003cp\u003eThe client establishes a TCP connection and sends an HTTPS request like the following one:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003eGET /msdn.cpp HTTP/1.1\r\nConnection: Keep-Alive\r\nUser-Agent: WinHTTP/1.1\r\nContent-Length: 4294967295\r\nHost: 149.28.152[.]196\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe HTTPS connection is not used again. Subsequent messages are exchanged in the \u003cb\u003eoriginal TCP connection (without TLS encryption)\u003c/b\u003e. Subsequent communication between the client and server occurs via protocol 1, except for when, at the beginning of the session, the client sends two packets with the FakeTLS header, which starts with the sequence 17 03 01. The first packet always has length 0. The second has length 0x3A, 0x3C, 0x3E, or 0x40 and contains random bytes. We were unable to determine the purpose of these packets.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image12.png\" alt=\"Additional packets with FakeTLS header\"\u003e\r\n    \u003cfigcaption\u003eFigure 12. Additional packets with FakeTLS header\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/skywind3000/kcp/blob/master/README.en.md\" target=\"_blank\"\u003eKCP protocol\u003c/a\u003e\r\n\t\u003cp\u003eThis protocol can be implemented on top of any other protocol (including UDP) to ensure quick and reliable data transfer. The Crosswalk client uses KCP on top of a TCP connection: KCP protocol data is added to application-level messages that are then sent as TCP segments.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image13.png\" alt=\"Crosswalk message with KCP headers (highlighted in yellow)\"\u003e\r\n    \u003cfigcaption\u003eFigure 13. Crosswalk message with KCP headers (highlighted in yellow)\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNote that in the Crosswalk samples we detected, none of the samples used the KCP protocol in practice. But the code contains a full-fledged implementation of this protocol, which could be used in other attacks: the developers would simply need to set this connection type in the configuration.\u003c/p\u003e\r\n\u003cp\u003eThe diversity of protocols and techniques would seem to protect the backdoor from network traffic inspection.\u003c/p\u003e\r\n\u003ch2 id=\"id2\"\u003e2. Loaders and injectors\u003c/h2\u003e\r\n\u003cp\u003eInvestigation of network infrastructure and monitoring of new Crosswalk samples put us onto the scent of other malicious objects containing Crosswalk shellcode as their payload. We can categorize these objects into two groups: local shellcode loaders and injectors. Some of the samples in both groups are also obfuscated with VMProtect.\u003c/p\u003e\r\n\u003ch3 id=\"id2-1\"\u003e2.1 Injectors\u003c/h3\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image14.png\" alt=\"Code for injecting shellcode into a running process\"\u003e\r\n    \u003cfigcaption\u003eFigure 14. Code for injecting shellcode into a running process\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe injectors contain typical code that obtains SeDebugPrivilege, finds the PID of the target process, and injects shellcode into it. Depending on the sample, explorer.exe and winlogon.exe are the target processes.\u003c/p\u003e\r\n\u003cp\u003eThe samples we found contain one of three payloads:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCrosswalk\u003c/li\u003e\r\n\u003cli\u003eMetasploit stager\u003c/li\u003e\r\n\u003cli\u003eFunnySwitch (discussed later in this report)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eCrosswalk and FunnySwitch shellcode is located in the data sections \"as-is,\" while the samples with Metasploit show additional XOR encryption with the key \"jj1\".\u003c/p\u003e\r\n\u003ch3 id=\"id2-2\"\u003e2.2 Local shellcode loaders\u003c/h3\u003e\r\n\u003cp\u003eThe main function of the malware is to extract shellcode and run it in an active process. The malware samples belong to one of two categories, based on the source of shellcode that they use: in the original executable or in an external file in the same directory.\u003c/p\u003e\r\n\u003cp\u003eMost of the loaders start by checking the current year, much like the samples from the LNK file attacks.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image15.png\" alt=\"Code of the loader's main function\"\u003e\r\n    \u003cfigcaption\u003eFigure 15. Code of the loader's main function\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eAfter the malware finds the API functions it needs, it decrypts the string Global\\0EluZTRM3Kye4Hv65IGfoaX9sSP7VA with the \u003ca href=\"https://tools.ietf.org/html/rfc7539\" target=\"_blank\"\u003eChaCha20\u003c/a\u003e algorithm. In one older version, to prevent being run twice the loader creates a mutex with the name Global\\5hJ4YfUoyHlwVMnS1qZkd2tEmz7GPbB. But in recent samples, the decrypted string is not used in any way. Perhaps part of the code was accidentally deleted during the development process.\u003c/p\u003e\r\n\u003cp\u003eAnother artifact found in some samples is the unused string \u003cem\u003eCSPELOADKISSYOU\u003c/em\u003e. Its purpose remains unclear.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image16.png\" alt=\"String \"CSPELOADKISSYOU\" in data section\"\u003e\r\n    \u003cfigcaption\u003eFigure 16. String \"CSPELOADKISSYOU\" in data section\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eIn the self-contained loaders, the shellcode is located in a PE file overlay. The shellcode is stored in a curious way: data starts from 0x60 bytes of the header, followed by the (encrypted) shellcode. The data length is stored at offset –0x24 from the end of the executable. The header always starts with the PL signature. The other header data is used for decryption: a 32-byte key is located at offset 0x28 and a 12-byte nonce for the ChaCha20 algorithm is at offset 0x50.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image17.png\" alt=\"Handling of PL shellcode in the loader body (ChaCha20)\"\u003e\r\n    \u003cfigcaption\u003eFigure 17. Handling of PL shellcode in the loader body (ChaCha20)\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe ChaCha20 implementation is not always present: some of the samples use Microsoft CryptoAPI with AES-128-CBC for encryption. We can also find key information here in the structure of the PL shellcode: at offset 0x28, there are 32 bytes that are hashed with MD5 to obtain a cryptographic key.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image18.png\" alt=\"Handling of PL shellcode in the loader body (AES-128)\"\u003e\r\n    \u003cfigcaption\u003eFigure 18. Handling of PL shellcode in the loader body (AES-128)\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eOlder loader versions use Cryptography API: Next Generation (BCrypt* functions) in an equivalent way. They use AES-128 in CFB mode as the encryption algorithm.\u003c/p\u003e\r\n\u003cp\u003eThe loaders that rely on external files have a similar code structure and one of two encryption types: ChaCha20 or AES-128-CBC. The file should contain PL shellcode of the same format as in the self-contained loader. The name depends on the specific sample and is encrypted with the algorithm used in it. It can contain a full file path (although we did not detect any such samples) or a relative path.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image19.png\" alt=\"Building the file name with PL shellcode\"\u003e\r\n    \u003cfigcaption\u003eFigure 19. Building the file name with PL shellcode\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eAmong all the loaders, we encountered three different shellcode payloads:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCrosswalk\u003c/li\u003e\r\n\u003cli\u003eMetasploit stager\u003c/li\u003e\r\n\u003cli\u003eCobalt Strike Beacon\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3 id=\"id2-3\"\u003e2.3 Attack examples\u003c/h3\u003e\r\n\u003ch4 id=\"id2-3-1\"\u003e2.3.1 An encrypted resume\u003c/h4\u003e\r\n\u003cp\u003eThis malicious file is a RAR archive, electronic_resume.pdf.rar (025e053e329f7e5e930cc5aa8492a76e6bc61d5769aa614ec66088943bf77596), with two files:\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image20.png\" alt=\"Contents of electronic_resume.pdf.rar\"\u003e\r\n    \u003cfigcaption\u003eFigure 20. Contents of electronic_resume.pdf.rar\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe first file might look like bait, but trying to open it in a PDF viewer gives an error, since it is practically a copy of the latter.\u003c/p\u003e\r\n\u003cp\u003eThe file \u003cem\u003eЭлектронный читатель резюме.exe\u003c/em\u003e (\"Electronic reader resume.exe\") is an executable self-contained loader for PL shellcode. It contains Cobalt Strike Beacon as the payload.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image21.png\" alt=\"Configuration of Cobalt Strike Beacon\"\u003e\r\n    \u003cfigcaption\u003eFigure 21. Configuration of Cobalt Strike Beacon\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe archive was distributed on approximately June 1, 2020, from the IP address 66.42.48[.]186 and was available at hxxp://66.42.48[.]186:65500/electronic_resume.pdf.rar. The same IP address was used as C2 server.\u003c/p\u003e\r\n\u003cp\u003eThe modification time of the archive files, as well as the date on which the archive was found the server, point to the attack being active in late May or early June. The Russian filenames suggest that the targets were Russian-speaking users.\u003c/p\u003e\r\n\u003ch4 id=\"id2-3-2\"\u003e2.3.2 I can't breathe\u003c/h4\u003e\r\n\u003cp\u003eThe attack is practically identical to the previous one: malware is distributed in a RAR archive video.rar (fc5c9c93781fbbac25d185ec8f920170503ec1eddfc623d2285a05d05d5552dc) and consists of two .exe files. The archive is available on June 1 on the same server at the address hxxp://66.42.48[.]186:65500/video.rar.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image22.png\" alt=\"Contents of video.rar\"\u003e\r\n    \u003cfigcaption\u003eFigure 22. Contents of video.rar\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe executable files are self-contained loaders of Cobalt Strike Beacon PL shellcode with a similar configuration and the same C2 server.\u003c/p\u003e\r\n\u003cp\u003eThe bait is notable for the topic: the hackers were attempting to exploit U.S. protests related to the death of George Floyd. The main bait was a video with the name \"I can't breathe-America's Black Death protests that the riots continue to escalate and ignite America!.mp4\" involving reporting on protests in late May, 2020. Judging by the logo, the source of the video was Australian portal XKb, which releases news materials in Chinese.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image23.png\" alt=\"Still frame from the bait video\"\u003e\r\n    \u003cfigcaption\u003eFigure 23. Still frame from the bait video\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003ch4 id=\"id2-3-3\"\u003e2.3.3 Chat transcript\u003c/h4\u003e\r\n\u003cp\u003eThe archive \u003cem\u003eзапись чата.7z\u003c/em\u003e (\"chat transcript.7z\") (e0b675302efc8c94e94b400a67bc627889bfdebb4f4dffdd68fdbc61d4cd03ae) contains three identical executable files with names resembling \"запись чата-1.png____________________________________.exe\" (\"chat transcript-1.png____________________________________.exe\") in attacks again targeting Russian-speaking users.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image24.png\" alt=\"Contents of the archive, the name of which promises a 'chat transcript'\"\u003e\r\n    \u003cfigcaption\u003eFigure 24. Contents of the archive, the name of which promises a \"chat transcript\"\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe malicious files are self-contained PL shellcode loaders, but the payload here is Crosswalk version 2.0.\u003c/p\u003e\r\n\u003cp\u003eIts configuration implies three ways to connect to the C2 server at 149.28.23[.]32:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eTransport protocol 3, port 8443\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTransport protocol 2, port 80\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTransport protocol 1, port 8080\u003c/p\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image25.png\" alt=\"Fragment of the Crosswalk configuration\"\u003e\r\n    \u003cfigcaption\u003eFigure 25. Fragment of the Crosswalk configuration\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003ch2 id=\"id3\"\u003e3. Attacks on Russian game developers\u003c/h2\u003e\r\n\u003cp\u003eThe Winnti group first became famous for its attacks on computer game developers. Such attacks continue today, and Russian companies are also among their targets.\u003c/p\u003e\r\n\u003ch3 id=\"id3-1\"\u003e3.1 Unity3D Game Developer from St. Petersburg\u003c/h3\u003e\r\n\u003cp\u003eThe attack is based on the archive Resume.rar (4d3ad3ff281a144d9a0a8ae5680f13e201ce1a6ba70e53a74510f0e41ae6a9e6), which contains just one file: CV.chm.\u003c/p\u003e\r\n\u003cp\u003eRunning the file without security updates installed causes two windows to appear simultaneously: CHM help in HTML Help and a PDF document. They contain the same information: a curriculum vitae for the position of game developer or database manager at a St. Petersburg company.\u003c/p\u003e\r\n\u003cp\u003eThe CV contains plausible contact information, with a St. Petersburg address, email address ending with \"@yandex.ru\", and phone number starting with \"+7\" (Russia's country code). The only obviously fake aspect is the phone number: 123-45-67.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image26.png\" alt=\"Result of opening the CHM file\"\u003e\r\n    \u003cfigcaption\u003eFigure 26. Result of opening the CHM file\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe PDF file opens due to the script pass.js, which is contained in the CHM file and referenced in the code of the HTML page.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image27.png\" alt=\"Reference to pass.js in HTML code\"\u003e\r\n    \u003cfigcaption\u003eFigure 27. Reference to pass.js in HTML code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe script uses \u003ca href=\"https://twitter.com/ithurricanept/status/534993743196090368\" target=\"_blank\"\u003ea technique\u003c/a\u003e for running an arbitrary command in a CHM file via an ActiveX object. This unpacks an HTML help file to the folder C:\\Users\\Public for launching the next stage of the infection: the file resume.exe, which is also embedded inside the CHM file.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image28.png\" alt=\"Deobfuscated script pass.js\"\u003e\r\n    \u003cfigcaption\u003eFigure 28. Deobfuscated script pass.js\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eresume.exe is an advanced shellcode injector of which we had encountered only one sample as of the writing of this article. Before it gets down to business, this malware, like many other samples we have seen from Winnti, checks the current year. Current processes are checked and the malware will not run if any of the following are active: ollydbg.exe|ProcessHacker.exe|Fiddler.exe|windbg.exe|tcpview.exe|idaq.exe|idaq64.exe|tcpdump.exe|Wireshark.exe.\u003c/p\u003e\r\n\u003cp\u003eOn first launch, shellcode will be taken from MyResume.pdf; on subsequent launches, winness.config is the shellcode source.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image29.png\" alt=\"Main function in resume.exe\"\u003e\r\n    \u003cfigcaption\u003eFigure 29. Main function in resume.exe\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eMyResume.pdf is unpacked from the CHM file. Data read by resume.exe has been added to the end of the PDF file. If the user opens it directly, a message warns that the document is password-protected.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image30.png\" alt=\"MyResume.pdf, as viewed in Adobe Acrobat Reader\"\u003e\r\n    \u003cfigcaption\u003eFigure 30. MyResume.pdf, as viewed in Adobe Acrobat Reader\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eCompared to the PL shellcode, the data structure is more complex and contains the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eROR-13 hash of data starting from byte 0x24 (0x20, 4 bytes)\u003c/li\u003e\r\n\u003cli\u003eNonce for algorithm ChaCha20 (0x24, 12 bytes)\u003c/li\u003e\r\n\u003cli\u003eChaCha20-encrypted text (0x30):\r\n\u003cul\u003e\r\n\u003cli\u003eName of PDF file (+0x0)\u003c/li\u003e\r\n\u003cli\u003eSize of PDF file (+0x20)\u003c/li\u003e\r\n\u003cli\u003eSize of auxiliary shellcode (+0x24)\u003c/li\u003e\r\n\u003cli\u003eSize of main shellcode (+0x28)\u003c/li\u003e\r\n\u003cli\u003eConstant 0xE839E900 (+0x2C)\u003c/li\u003e\r\n\u003cli\u003ePDF file\u003c/li\u003e\r\n\u003cli\u003eAuxiliary shellcode\u003c/li\u003e\r\n\u003cli\u003eMain shellcode\u003c/li\u003e\r\n\u003c/ul\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOn first launch of resume.exe, the encrypted portion of the data is decrypted (the key is hard-coded in the executable) and three sections are extracted (PDF, auxiliary shellcode, and main shellcode). The PDF file is saved with a name resembling _797918755_true.pdf in a temporary folder. It then opens for the user (the second window in the screenshot on Figure 26, next to HTML Help).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image31.png\" alt=\"resume.exe: actions on first launch\"\u003e\r\n    \u003cfigcaption\u003eFigure 31. resume.exe: actions on first launch\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe payload runs in a new process %windir%\\System32\\spoolsv.exe, into which the main shellcode is injected: Cobalt Strike Beacon with C2 address 149.28.84[.]98.\u003c/p\u003e\r\n\u003cp\u003eInjection occurs by creating a section via a ZwCreateSection call, getting access to it from the parent and child processes via ZwMapViewOfSection calls, copying shellcode to the section, and placing a jump to the shellcode at the entry point for spoolsv.exe.\u003c/p\u003e\r\n\u003cp\u003eFor persistence, resume.exe (under the name winness.exe) is copied to the folder %appdata%\\Microsoft\\AddIns\\ and the main shellcode is re-encrypted and saved in the same location, with the name winness.config. To ensure autostart, auxiliary shellcode writes the file svchost.bat, which transfers control to winness.exe, to the startup folder. For avoiding detection at this stage, the auxiliary shellcode is injected in a similar way into spoolsv.exe, independently loads the necessary functions, and writes to file in a separate thread.\u003c/p\u003e\r\n\u003cp\u003eWhen winness.exe runs after a restart, the main shellcode is decrypted from winness.config and injected into spoolsv.exe in exactly the same way.\u003c/p\u003e\r\n\u003ch3 id=\"id3-2\"\u003e3.2 HFS with a surprise\u003c/h3\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image32.png\" alt=\"HFS server on Winnti infrastructure\"\u003e\r\n    \u003cfigcaption\u003eFigure 32. HFS server on Winnti infrastructure\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eOn June 23, 2020, while investigating Winnti network infrastructure, we detected an active \u003ca href=\"https://en.wikipedia.org/wiki/HTTP_File_Server\" target=\"_blank\"\u003eHttpFileServer\u003c/a\u003e on one of the active C2 servers. Four images were there for all to see: an email icon, screenshot from a game with Russian text, screenshot of the site of a game development company, and a screenshot of information about vulnerability \u003ca href=\"https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-0796\" target=\"_blank\"\u003eCVE-2020-0796\u003c/a\u003e from the Microsoft website.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image33.png\" alt=\"13524222881554126454-128.png\"\u003e\r\n    \u003cfigcaption\u003eFigure 33. 13524222881554126454-128.png\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image34.png\" alt=\"EaVpPBNXgAE8s3r.jpg\"\u003e\r\n    \u003cfigcaption\u003eFigure 34. EaVpPBNXgAE8s3r.jpg\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image35.png\" alt=\"website_battlestategames.png\"\u003e\r\n    \u003cfigcaption\u003eFigure 35. website_battlestategames.png\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image36.png\" alt=\"windows_update.png\"\u003e\r\n    \u003cfigcaption\u003eFigure 36. windows_update.png\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe screenshots related to Battlestate Games, the St. Petersburg-based developer of \u003cem\u003eEscape from Tarkov.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eAlmost two months later, on August 20, 2020, the file CV.pdf____________________________________________________________.exe (e886caba3fea000a7de8948c4de0f9b5857f0baef6cf905a2c53641dbbc0277c) was uploaded to VirusTotal. This file is a self-contained loader for Cobalt Strike Beacon PL shellcode.\u003c/p\u003e\r\n\u003cp\u003eIts C2 server is interesting: update.facebookdocs[.]com.\u003c/p\u003e\r\n\u003cp\u003eWe discovered that the main domain facebookdocs[.]com hosted a copy of the official site of Battlestate Games: www.battlestategames.com. Via an associated C2 IP address (108.61.214[.]194), we found an equivalent page on the phishing domain www.battllestategames[.]com (note the double \"l\").\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image37.png\" alt=\"Copy of the official Battlestate Games site\"\u003e\r\n    \u003cfigcaption\u003eFigure 37. Copy of the official Battlestate Games site\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eWhen used as C2 servers, such domains give attackers the ability to mask malicious traffic as legitimate activity within the company.\u003c/p\u003e\r\n\u003cp\u003eThe combination of these two finds makes us think that we detected traces of preparation for, and subsequent successful implementation of, an attack on Battlestate Games.\u003c/p\u003e\r\n\u003cp\u003eMoreover, the match between the job listing for Unity3D developer (as seen in the screenshot from the official site) and contents of the curriculum vitae in the file CV.chm (as described in the previous section), considering how closely they matched in time as well as the company and \"applicant\" both being located in St. Petersburg, suggests a connection between these attacks. Most likely, the CHM file attack was used at the beginning stage of the breach, although we do not have solid confirmation for this.\u003c/p\u003e\r\n\u003cp\u003eUse of typosquatting domains for C2 servers is typical of Winnti and has been described in a \u003ca href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134508/winnti-more-than-just-a-game-130410.pdf\" target=\"_blank\"\u003eKaspersky report\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eBattlestate Games received all of the information uncovered by our investigation into the suspected attack.\u003c/p\u003e\r\n\u003ch2 id=\"id4\"\u003e4. A purloined certificate\u003c/h2\u003e\r\n\u003cp\u003eAnother favorite Winnti technique is theft of certificates for code signing. Compromised certificates are used to sign malicious files intended for future attacks.\u003c/p\u003e\r\n\u003cp\u003eWe found one such certificate belonging to Taiwanese company Zealot Digital:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003eName:           ZEALOT DIGITAL INTERNATIONAL CORPORATION\r\nIssuer:         GlobalSign CodeSigning CA - SHA256 - G2\r\nValid From:     07:43 AM 08/20/2015\r\nValid To:       07:43 AM 09/19/2016\r\nValid Usage:    Code Signing\r\nAlgorithm:      sha256RSA\r\nThumbprint:     91e256ac753efe79927db468a5fa60cb8a835ba5\r\nSerial Number:  112195a147c06211d2c4b82b627e3d07bf09\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe files signed with it were predominantly used in attacks on organizations in Hong Kong. They include Crosswalk and Metasploit injectors, the juicy-potato utility, and samples of FunnySwitch and ShadowPad.\u003c/p\u003e\r\n\u003ch2 id=\"id5\"\u003e5. FunnySwitch\u003c/h2\u003e\r\n\u003cp\u003eAmong the files signed with the Zealot Digital certificate, we discovered two samples of malware containing a previously unknown backdoor. We have called it FunnySwitch, based on the name of the library and one of the key classes. The backdoor is written in .NET and can send system information as well as run arbitrary JScript code, with support for six different connection types, including the ability to accept incoming connections. One of its distinguishing features is the ability to act as message relay between different copies of the backdoor and a C2 server.\u003c/p\u003e\r\n\u003ch3 id=\"id5-1\"\u003e5.1 Unpacking\u003c/h3\u003e\r\n\u003cp\u003eThe attack in question starts with the SFX archive x32.exe (2063fae36db936de23eb728bcf3f8a5572f83645786c2a0a5529c71d8447a9af).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image38.png\" alt=\"Contents of the archive x32.exe\"\u003e\r\n    \u003cfigcaption\u003eFigure 38. Contents of the archive x32.exe\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe archive unpacks three files (1.vbs, n3.exe, and p3.exe) into the folder c:\\programdata, after which the extracted VBS script runs both executables.\u003c/p\u003e\r\n\u003cp\u003eThe files n3.exe and p3.exe are identical and inject shellcode into the process explorer.exe. The only difference between them is the final bytes of the shellcode they inject, which contain the XML configuration. In one case, the proxy server 168.106.1[.]1 is specified there in addition:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\n\u0026lt;Config Group=\u0026quot;aa\u0026quot; Password=\u0026quot;test\u0026quot; StartTime=\u0026quot;0\u0026quot; EndTime=\u0026quot;24\u0026quot; WeekDays=\u0026quot;0,1,2,3,4,5,6\u0026quot;\u0026gt;\r\n    \u0026lt;HttpConnector url=\u0026quot;http://db311secsd.kasprsky[.]info/config/\u0026quot; proxy=\u0026quot;http://168.106.1[.]1/\u0026quot; interval=\u0026quot;30-60\u0026quot;/\u0026gt;\r\n\u0026lt;/Config\u0026gt;\r\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\n\u0026lt;Config Group=\u0026quot;aa\u0026quot; Password=\u0026quot;test\u0026quot; StartTime=\u0026quot;0\u0026quot; EndTime=\u0026quot;24\u0026quot; WeekDays=\u0026quot;0,1,2,3,4,5,6\u0026quot;\u0026gt;\r\n    \u0026lt;HttpConnector url=\u0026quot;http://db311secsd.kasprsky[.]info/config/\u0026quot; interval=\u0026quot;30-60\u0026quot;/\u0026gt;\r\n\u0026lt;/Config\u0026gt;\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eA subdomain of kasprsky[.]info, db311secsd.kasprsky[.]info, is the C2 domain. Interestingly, several of its other subdomains \u003ca href=\"https://www.alaha.org/wp-content/uploads/2020/05/Cyber-Alert.pdf\" target=\"_blank\"\u003eare mentioned in an FBI report\u003c/a\u003e. It dates to May 21, 2020, and warns of attacks on organizations linked to COVID-19 research.\u003c/p\u003e\r\n\u003cp\u003eThe job of the shellcode is to launch and execute a method from the .NET assembly located immediately after its code. To do so, it gets a reference to the ICorRuntimeHost interface, which it uses to run \u003ca href=\"https://docs.microsoft.com/en-us/dotnet/standard/clr\" target=\"_blank\"\u003eCLR\u003c/a\u003e and create an \u003ca href=\"https://docs.microsoft.com/en-us/dotnet/api/system.appdomain\" target=\"_blank\"\u003eAppDomain\u003c/a\u003e object. The contents of the assembly are loaded into the newly created domain. Reflection is used to run the static method Funny.Core.Run(xml_config), to which the XML configuration is passed.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image39.png\" alt=\"Calling a method from the .NET assembly\"\u003e\r\n    \u003cfigcaption\u003eFigure 39. Calling a method from the .NET assembly\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe assembly is the library Funny.dll with obfuscation by ConfuserEx.\u003c/p\u003e\r\n\u003ch3 id=\"id5-2\"\u003e5.2 Funny.dll\u003c/h3\u003e\r\n\u003cp\u003eThe backdoor starts by parsing the configuration. Its root element may contain the following fields:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDebug is the flag for enabling debug logging\u003c/li\u003e\r\n\u003cli\u003eGroup is an arbitrary string sent together with system information.\u003c/li\u003e\r\n\u003cli\u003ePassword is the key used to encrypt messages.\u003c/li\u003e\r\n\u003cli\u003eID identifies the relay (if not present in the configuration, the GUID is used instead).\u003c/li\u003e\r\n\u003cli\u003eStartTime, EndTime, and WeekDays restrict the times and days when the backdoor may function\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;Config\u0026gt;\u003c/code\u003e element may contain an arbitrary number of elements describing various types of connectors:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eTcpConnector and TcpBindConnector are classes responsible for connecting over TCP as client and server.\u003c/p\u003e\r\n\t\u003cp\u003eThey have two parameters in common: \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eport\u003c/code\u003e (by default, 38001). TcpConnector also has the \u003ccode\u003eparameter\u003c/code\u003e interval, which indicates how long to wait before trying to reconnect.\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eHttpConnector and HttpBindConnector are HTTP client with support for proxy and HTTP server.\u003c/p\u003e\r\n\t\u003cp\u003eSupported client parameters: \u003ccode\u003eurl\u003c/code\u003e – address to connect to, \u003ccode\u003einterval\u003c/code\u003e – same as at TcpConnector, \u003ccode\u003eproxy\u003c/code\u003e and \u003ccode\u003ecred\u003c/code\u003e – proxy server address and credentials. Server parameters: \u003ccode\u003eurl\u003c/code\u003e – list of prefixes on which it will run and \u003ccode\u003etimeout\u003c/code\u003e – client timeout.\u003c/p\u003e\r\n\u003cp\u003eThe standard classes HttpWebRequest and HttpListener from .NET Framework are used for client and server implementations. Both HTTP and HTTPS are supported: if no SSL certificate is configured for the port on which the server is running, it will be launched with CN = \u003ccode\u003eEnvironment.MachineName + \".local.domain\"\u003c/code\u003e. The client, in turn, ignores certificate validation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eRPCConnector and RPCBindConnector are classes that allow setting up a connection via a Named Pipe. They take a single parameter, \u003ccode\u003ename\u003c/code\u003e, which is the name of the connection.\u003c/p\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTcpBindConnector and HttpBindConnector support simultaneous connections for multiple clients.\u003c/p\u003e\r\n\u003cp\u003eFor the network connectors to work, the backdoor adds an allow rule to Windows Firewall with the name \"Core Networking ― IPv4\" for its executable module.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image40.png\" alt=\"Code for adding Windows Firewall rules\"\u003e\r\n    \u003cfigcaption\u003eFigure 40. Code for adding Windows Firewall rules\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eJust like with Crosswalk, there are multiple levels of the protocol: in this case, transport, network, and application.\u003c/p\u003e\r\n\u003ch4 id=\"id5-2-1\"\u003e5.2.1 Transport protocols\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003eTCP\r\n\t\u003cp\u003eTCP supports three types of messages: PingMessage (0x1), PongMessage (0x2), and DataMessage (0x3). The first two monitor the connection and are relevant only at the TcpConnector/TcpBindConnector level. DataMessage contains network-level data.\u003c/p\u003e\r\n\u003cp\u003eMessages consist of a signature (4 bytes), encrypted header (16 bytes), and optional data.\u003c/p\u003e\r\n\u003cp\u003eThe signature is three random bytes followed by their sum with modulo 256. Incoming messages with an invalid signature are discarded.\u003c/p\u003e\r\n\u003cp\u003eThe header contains the data size (4 bytes) and byte indicating the message type (0x1, 0x2, or 0x3).\u003c/p\u003e\r\n\u003cp\u003eIt is encrypted with AES-256-CBC; the key and IV are taken from the MD5 of the key string. The backdoor uses this encryption method in other cases as well, which is why we refer to it as \"standard\" in the text that follows. The key string in this case is \"tcp_encrypted\".\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image41.png\" alt=\"Standard encryption in FunnySwitch\"\u003e\r\n    \u003cfigcaption\u003eFigure 41. Standard encryption in FunnySwitch\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eHTTP with long polling\r\n\t\u003cp\u003eThere are three types of requests: GET \"connect\", GET \"pull\", and POST \"push\". To start transferring data, the client must connect by sending a GET request to a URL from the configuration and provide a special cookie value.\u003c/p\u003e\r\n\u003cp\u003eThe cookie name is eight random characters. The value is an encrypted Base64 string containing the session GUID and operation name (\"connect\"). The string is encrypted in the standard way with the key \"http\".\u003c/p\u003e\r\n\u003cp\u003eThe client then constantly sends GET requests with pull operations. In response, the server returns the relevant array of messages for the client or, if no new messages have arrived in the last 10 seconds, an empty response. Client–server messages are periodically sent as an array as well, for which a POST request with push operation is used.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image42.png\" alt=\"FunnySwitch connect and pull requests\"\u003e\r\n    \u003cfigcaption\u003eFigure 42. FunnySwitch connect and pull requests\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe special class MsgPack class, which implements a custom serialization protocol, unpacks the array and other primitive types.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eRPC (Pipe)\r\n\t\u003cp\u003eSimilar to TCP, except for the absence of connection monitoring.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4 id=\"id5-2-2\"\u003e5.2.2 Network-level protocol\u003c/h4\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image43.png\" alt=\"Function for processing incoming network-level communications\"\u003e\r\n    \u003cfigcaption\u003eFigure 43. Function for processing incoming network-level communications\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eAll messages at this level are encrypted in the backdoor's standard way, with the key string \"commonkey\".\u003c/p\u003e\r\n\u003cp\u003eMessages are an array of three or four elements:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMessage type (\"hello_request\", \"hello_response\", \"message\", \"error\")\u003c/li\u003e\r\n\u003cli\u003eSource serialized array\u003c/li\u003e\r\n\u003cli\u003eDestination serialized array\u003c/li\u003e\r\n\u003cli\u003ePayload (application-level data)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe \u003cem\u003eMsgPack\u003c/em\u003e class is also used for serialization. The Source and Destination arrays contain the IDs of the relays through which the message has already passed and the IDs of the routers through it should be delivered to the recipient.\u003c/p\u003e\r\n\u003cp\u003eThe bodies of hello_request and hello_response messages contain information about the sender's system. When one of these messages is received, the relay saves data about the sender ID, used connector instance and system data. These message types are used to establish a direct connection between relays.\u003c/p\u003e\r\n\u003cp\u003eMessages of the \"message\" type (ones that are not hello_request, hello_response, or error) can be passed via several relays. If its Destination field contains only the ID of the current instance, it will be handled locally; if not, it will be sent to the next relay in the list. For connecting to the next instance, it uses the connector that was saved when exchanging hello_request and hello_response messages.\u003c/p\u003e\r\n\u003cp\u003eThe backdoor collects the following system information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eValues of the registry keys ProductName and CSDVersion from HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u003c/li\u003e\r\n\u003cli\u003eWhether the OS is 32-bit or 64-bit\u003c/li\u003e\r\n\u003cli\u003eList of IP addresses\u003c/li\u003e\r\n\u003cli\u003eComputer name\u003c/li\u003e\r\n\u003cli\u003eUsername and workgroup\u003c/li\u003e\r\n\u003cli\u003eName of running module\u003c/li\u003e\r\n\u003cli\u003ePID\u003c/li\u003e\r\n\u003cli\u003eMAC addresses of network adapters\u003c/li\u003e\r\n\u003cli\u003eValue of the Group attribute in the XML configuration\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4 id=\"id5-2-3\"\u003e5.2.3 Application-level protocol\u003c/h4\u003e\r\n\u003cp\u003eAt the application level, data is encrypted in the standard way using the value of the Password attribute from the configuration. If no such value exists, the key string is \"test\". Data is compressed with GZip prior to encryption.\u003c/p\u003e\r\n\u003cp\u003eAfter decryption and decompression, the payload is an array (packed \u003cem\u003eMsgPack\u003c/em\u003e) consisting of one or two elements: a string with the name of a command and optional array of bytes (data for the command). These elements, in turn, contain another serialized array, which contains a message string ID (which will be used to send the result of the command) plus the data for the command.\u003c/p\u003e\r\n\u003ch4 id=\"id5-2-4\"\u003e5.2.4 Supported commands\u003c/h4\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article table-article_striped\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCommand\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003einvoke\u003c/td\u003e\r\n\u003ctd\u003e\u003cp\u003eRun JScript code and get the result. Implementation was separated out into a JSCore .NET assembly, which is dynamically loaded from a Base64 constant defined in the main assembly.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image44.png\" alt=\"Loading the Funny.Eval class from the JSCore assembly\"\u003e\r\n    \u003cfigcaption\u003eFigure 44. Loading the Funny.Eval class from the JSCore assembly\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eCode execution is accomplished with classes from the Microsoft.JScript namespace.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image45.png\" alt=\"Code fragments from the Funny.Eval class\"\u003e\r\n    \u003cfigcaption\u003eFigure 45. Code fragments from the Funny.Eval class\u003c/figcaption\u003e\r\n\u003c/figure\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003econnect\u003c/td\u003e\r\n\u003ctd\u003eTakes an XML string with connector configuration and creates the corresponding object.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eupdate\u003c/td\u003e\r\n\u003ctd\u003ePacks a response containing the IDs of relays connected to the current copy, together with their system information.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003equery\u003c/td\u003e\r\n\u003ctd\u003eCollects the configuration of active connector instances other than the RPCConnector and RPCBindConnector classes.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eremove\u003c/td\u003e\r\n\u003ctd\u003eRemoves the specified connector.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ecreateStream\u003c/td\u003e\r\n\u003ctd\u003eCreates a message queue with the indicated name. The queue connects with the sender of the createStream command.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ecloseStream\u003c/td\u003e\r\n\u003ctd\u003eDeletes the named message queue.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003esendStream\u003c/td\u003e\r\n\u003ctd\u003eAdds a message (byte array) to the queue with the specified name.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe result of execution of each command is returned to the sender via the invoke-response command.\u003c/p\u003e\r\n\u003ch4 id=\"id5-2-5\"\u003e5.2.5 Unused code\u003c/h4\u003e\r\n\u003cp\u003eBy all appearances, the FunnySwitch backdoor is still under development, as shown by the incomplete state of message queue functionality. Besides the commands described here already, the code contains the functions PullStream and SendStream, which are not used anywhere. The first extracts a message from the queue (by queue name), while the second sends its creator an arbitrary set of bytes with the stream-data command.\u003c/p\u003e\r\n\u003cp\u003eThe code also contains several unused classes: an implementation of the KCP protocol, limited-size queue SizeQueue, and string serializer StreamString.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image46.png\" alt=\"Fragment of KCP class code\"\u003e\r\n    \u003cfigcaption\u003eFigure 46. Fragment of KCP class code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003ch4 id=\"id5-2-6\"\u003e5.2.6 FunnySwitch vs. Crosswalk\u003c/h4\u003e\r\n\u003cp\u003eBased on investigation of the two backdoors, we believe that they were written by the same developers. Several things point at common authorship:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eUse of multiple transport protocols\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eSupport for specifying a proxy server\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eIdentical configuration restrictions on time of day and days of the week\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eImplementation of the KCP protocol\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eImplemented (and disabled by default) logging of debug messages and errors\u003c/p\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image47.png\" alt=\"Error logging in Crosswalk\"\u003e\r\n    \u003cfigcaption\u003eFigure 47. Error logging in Crosswalk\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image48.png\" alt=\"Message logging in FunnySwitch\"\u003e\r\n    \u003cfigcaption\u003eFigure 48. Message logging in FunnySwitch\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003ch2 id=\"id6\"\u003e6. ShadowPad\u003c/h2\u003e\r\n\u003cp\u003eDuring the investigation we also discovered two samples containing ShadowPad malware.\u003c/p\u003e\r\n\u003cp\u003eThe first of these is the SFX archive 20200926___Request for wedding reception.exe (03b7b511716c074e9f6ef37318638337fd7449897be999505d4a3219572829b4).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image49.png\" alt=\"Contents of the archive 20200926___Request for wedding reception.exe\"\u003e\r\n    \u003cfigcaption\u003eFigure 49. Contents of the archive 20200926___Request for wedding reception.exe\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eFor bait, it contains a Chinese-language Microsoft Word document with the text of a wedding banquet form.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image50.png\" alt=\"Bait file wedding.docx\"\u003e\r\n    \u003cfigcaption\u003eFigure 50. Bait file wedding.docx\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe archive contents are unpacked to the folder c:\\programdata, from where (besides the bait file being opened) the payload log.exe is launched.\u003c/p\u003e\r\n\u003cp\u003eBoth the executable file and the DLL library are obfuscated with VMProtect, but we also found identical unprotected versions (as shown in the following screenshots).\u003c/p\u003e\r\n\u003cp\u003eAn unpacked legitimate component of Bitdefender (386eb7aa33c76ce671d6685f79512597f1fab28ea46c8ec7d89e58340081e2bd) serves as log.exe. It dynamically loads the library log.dll.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image51.png\" alt=\"Loading log.dll in log.exe\"\u003e\r\n    \u003cfigcaption\u003eFigure 51. Loading log.dll in log.exe\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe library, in turn, when loaded checks for whether the current module contains a certain set of bytes at offset 0x2775. If the loading module meets its expectations, these bytes change to a call instruction for a DLL function. As a result, in log.exe right after log.dll loads, a call is made to the function sub_100010D0. The called function is not explicitly exported.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image52.png\" alt=\"Check and modification of executable module in log.dll\"\u003e\r\n    \u003cfigcaption\u003eFigure 52. Check and modification of executable module in log.dll\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eA similar technique has been previously \u003ca href=\"https://www.welivesecurity.com/2020/01/31/winnti-group-targeting-universities-hong-kong/\" target=\"_blank\"\u003edescribed by ESET\u003c/a\u003e in the context of Winnti attacks on universities in Hong Kong. ShadowPad malware was used as the payload in these attacks.\u003c/p\u003e\r\n\u003cp\u003eIn our case, the code run afterwards had been obfuscated with a new approach: all functions are split into separate instructions that shuffle between each other. Jumps between instructions occur by means of calls to a special function (rel_jmp), which emulates the jmp command. The offset at which the jump occurs is written immediately after a call instruction (see the following figure).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image53.png\" alt=\"Structure of obfuscated code\"\u003e\r\n    \u003cfigcaption\u003eFigure 53. Structure of obfuscated code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eIn addition, to obfuscate the control flow in the code, conditional jumps that never run are included as well:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003ecmp     esp, 3181h\r\njb      loc_1000BCA9\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe obfuscated code is the loader for the subsequent shellcode, which is encrypted in the file log.dll.dat. After decryption, the file is deleted and the shellcode is re-encrypted, saved in the registry, and run. When log.exe is launched subsequently, the shellcode will be loaded from the registry.\u003c/p\u003e\r\n\u003cp\u003eThe data is stored in a hive with a name resembling the following: (HKLM|HKCU)\\Software\\Classes\\CLSID\\{%8.8x-%4.4x-%4.4x-%8.8x%8.8x}, in key %8.8X. The values inserted in the formatting strings are generated based on the TimeDateStamp in the PE header of log.dll, and therefore are always identical for any given library copy. In our case, they equal {56a36bd2-5e2b-20b0-96f2cb9bb3f43475} and EB5D1182, respectively.\u003c/p\u003e\r\n\u003cp\u003eThe payload is ShadowPad shellcode that has been obfuscated with the same rel_jmp and fake-jb techniques. The following strings are contained in its encrypted configuration:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003e6/30/2020 1:25:52 PM\r\nccc\r\n%ProgramData%\\\r\nmsdn.exe\r\nlog.dll\r\nlog.dll.dat\r\nWMNetworkSvc\r\nWMNetworkSvc\r\nWMNetworkSvc\r\nSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\r\nWMSVC\r\n%ProgramFiles%\\Windows Media Player\\wmplayer.exe\r\n%windir%\\system32\\svchost.exe\r\n%windir%\\system32\\winlogon.exe\r\n%windir%\\explorer.exe\r\nTCP://cigy2jft92.kasprsky.info:443\r\nUDP://cigy2jft92.kasprsky.info:53\r\nSOCKS4\r\nSOCKS4\r\nSOCKS5\r\nSOCKS5\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eThey include the likely data of module assembly (June 6, 2020), name of the service used by the malware to gain persistence on the system (WMNetworkSvc), names of processes into which shellcode can be injected, and the C2 domain cigy2jft92.kasprsky[.]info.\u003c/p\u003e\r\n\u003cp\u003eAs we wrote earlier, the other domain kasprsky[.]info has been used by attackers as a FunnySwitch C2 server. Investigation of subdomains and IP addresses yields another second-level domain, livehost[.]live, whose subdomain d89o0gm35t.livehost[.]live is indicated as a C2 server in one copy of Crosswalk (86100e3efa14a6805a33b2ed24234ac73e094c84cf4282426192607fb8810961). Moreover, all samples of these backdoors were signed with the stolen Zealot Digital certificate and were likely used together as part of a single campaign.\u003c/p\u003e\r\n\u003cp\u003eThis is not the only example of a connection between the Crosswalk and ShadowPad network infrastructures. Two Crosswalk C2 servers we found, 103.248.21[.]134 and 103.248.21[.]179, contained an SSL certificate with SHA-1 value of b1d749a8883ac9860c45986e2ffe370feb3d9ab6. The same certificate was noted at IP address 103.4.29[.]167, which via the domain update.ilastname[.]com was used as a C2 server for another copy of ShadowPad (37be65842e3fc72a5ceccdc3d7784a96d3ca6c693d84ed99501f303637f9301a).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image54.png\" alt=\"Fragment of ShadowPad and PlugX infrastructure\"\u003e\r\n    \u003cfigcaption\u003eFigure 54. Fragment of ShadowPad and PlugX infrastructure\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003ch2 id=\"id7\"\u003e7. PlugX\u003c/h2\u003e\r\n\u003cp\u003eThe SSL certificate pointed us to another C2 server, with the domain ns.mircosoftbox[.]com.\u003c/p\u003e\r\n\u003cp\u003eWe found that this C2 server is used by an interesting copy of the PlugX backdoor. Its core is typical of PlugX, being an SFX archive (ccdb8e0162796efe19128c0bac78478fd1ff2dc3382aed0c19b0f4bd99a31efc) that contains the library mapistub.dll, which loads as a legitimate executable.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image55.png\" alt=\"PlugX SFX archive\"\u003e\r\n    \u003cfigcaption\u003eFigure 55. PlugX SFX archive\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eBut mapistub.dll is only a downloader. Google Docs is used to store the payload: the library sends a request to export a certain document in .txt format, decodes it into shellcode with Base64, and runs it.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image56.png\" alt=\"Loading and running shellcode in mapistub.dll\"\u003e\r\n    \u003cfigcaption\u003eFigure 56. Loading and running shellcode in mapistub.dll\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe shellcode has been obfuscated with junk instructions and inverted conditional jumps (combinations of jle/jg and the like). Its job is to decrypt and run the next stage, which is responsible for reflective loading of the main PlugX component and passing the structure with the configuration to it.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image57.png\" alt=\"Obfuscated shellcode from Google Docs\"\u003e\r\n    \u003cfigcaption\u003eFigure 57. Obfuscated shellcode from Google Docs\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThis process and what the similar sample does after that are described in more detail in a \u003ca href=\"https://st.drweb.com/static/new-www/news/2020/july/Study_of_the_APT_attacks_on_state_institutions_in_Kazakhstan_and_Kyrgyzstan_en.pdf\" target=\"_blank\"\u003ereport from Dr.Web\u003c/a\u003e (QuickHeal shellcode and BackDoor.PlugX.28).\u003c/p\u003e\r\n\u003cp\u003eBesides the C2 servers in the configuration file, 103.79.76[.]205 and ns.mircosoftbox[.]com, in our case the attackers also used a technique typical of PlugX for getting a C2 server at a specified URL. The C2 address is encoded in the page body between the DZKS and DZJS markers.\u003c/p\u003e\r\n\u003cp\u003eAgain, the address of a Google Docs document is used as the URL.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image58.png\" alt=\"Document with encoded URL\"\u003e\r\n    \u003cfigcaption\u003eFigure 58. Document with encoded URL\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eNote that the document is editable without logging in. But when we accessed it for the first time, it had the IP address 107.174.45[.]134, which is related to the domain dc-d68d34331440.mircosoftbox[.]com and, apparently, had been put in place by the attackers.\u003c/p\u003e\r\n\u003cp\u003eA similar technique has been used by Winnti in the past: \u003ca href=\"https://www.trendmicro.com/en_us/research/17/c/winnti-abuses-github.html\" target=\"_blank\"\u003eaccording to Trend Micro\u003c/a\u003e, an encoded C2 address was stored in GitHub repositories in 2017.\u003c/p\u003e\r\n\u003ch3 id=\"id7-1\"\u003e7.1 Paranoid PlugX\u003c/h3\u003e\r\n\u003cp\u003eWe were able to detect an additional copy of PlugX that contained shellcode fully identical to that downloaded from Google Docs, except for the encrypted configuration.\u003c/p\u003e\r\n\u003cp\u003eIt, too, is an SFX archive (94ea23e7f53cb9111dd61fe1a1cbb79b8bbabd2d37ed6bfa67ba2a437cfd5e92) but with different files inside.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image59.png\" alt=\"Contents of the SFX archive\"\u003e\r\n    \u003cfigcaption\u003eFigure 59. Contents of the SFX archive\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eWhen unpacked, the archive runs the script 1.vbs, which in turn passes control to a.bat.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image60.png\" alt=\"Contents of a.bat\"\u003e\r\n    \u003cfigcaption\u003eFigure 60. Contents of a.bat\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe main payload is in the file image.jpg, which is actually a specially crafted .NET assembly. The assembly launches with the help of InstallUtil.exe from .NET Framework, enabling it to bypass application allowlist restrictions.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/esc/article_316844/image61.png\" alt=\"Running shellcode in image.jpg\"\u003e\r\n    \u003cfigcaption\u003eFigure 61. Running shellcode in image.jpg\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\u003cp\u003eThe purpose of image.jpg is to run the same PlugX shellcode with the help of CreateThread.\u003c/p\u003e\r\n\u003cp\u003eIts configuration contains two C2 servers: update.upgradsource[.]com and ns.upgradsource[.]com.\u003c/p\u003e\r\n\u003cp\u003eThe domain upgradsource[.]com is mentioned in a \u003ca href=\"https://unit42.paloaltonetworks.com/unit42-paranoid-plugx/\" target=\"_blank\"\u003eUnit42 report\u003c/a\u003e on a group of similar samples named \"Paranoid PlugX.\" They received this name due to the presence of a script for wiping traces of malware from the system. Comparing the sample we found to those described in that report, we conclude with strong confidence that it belongs to the same group. Among other reasons, the structure of the .NET Wrapper module in image.jpg, and much of the cleanup script a.bat, is nearly identical.\u003c/p\u003e\r\n\u003cp\u003eAccording to Unit42, the main targets of Paranoid PlugX attacks were gaming companies—which are known to be a typical area of interest for Winnti. Investigation of the network infrastructure provides yet another piece of confirmation of the relationship between Paranoid PlugX and Winnti.\u003c/p\u003e\r\n\u003cp\u003eAs of late 2017, update.upgradsource[.]com resolved to the IP address 121.170.185[.]183. Later, update.byeserver[.]com and update.serverbye[.]com resolved to this address as well. The second-level domains byeserver[.]com and serverbye[.]com, in turn, are listed by FireEye in its \u003ca href=\"https://content.fireeye.com/apt-41/rpt-apt41/\" target=\"_blank\"\u003ereport on APT41\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2 id=\"id8\"\u003e8. Conclusion\u003c/h2\u003e\r\n\u003cp\u003eWinnti has an extensive arsenal of malware, as can be seen from the group's attacks. Winnti uses both widely available tools (Metasploit, Cobalt Strike, PlugX) and custom-developed ones, which are constantly increasing in number. By May 2020, the group had started to use its new backdoor, FunnySwitch, which possess unusual message relay functionality.\u003c/p\u003e\r\n\u003cp\u003eOne distinguishing trait of the group's backdoors is support for multiple transport protocols for connecting to C2 servers, which complicates efforts to detect malicious traffic. Malicious files of varying resemblance are used to install the payload, from primitive RAR and SFX-RAR files to reuse of malware from other groups and multistage threats with vulnerability exploits and non-trivial shellcode loaders. But the payload may be one and the same in all these cases. Most likely, the choice is dictated by the precision (or lack thereof) of an attack: unique infection chains and highly attractive bait are held back for targeted attacks.\u003c/p\u003e\r\n\u003cp\u003eWinnti continues to pursue game developers and publishers in Russia and elsewhere. Small studios tend to neglect information security, making them a tempting target. Attacks on software developers are especially dangerous for the risk they pose to end users, as already happened in the well-known cases of CCleaner and ASUS. By ensuring timely detection and investigation of breaches, companies can avoid becoming victims of such a scenario.\u003c/p\u003e\r\n\u003ch2 id=\"id9\"\u003e9. PT products detection names\u003c/h2\u003e\r\n\u003ch3 id=\"id9-1\"\u003e9.1 \u003ca href=\"https://www.ptsecurity.com/ww-en/products/sandbox/\" target=\"_blank\"\u003ePT Sandbox\u003c/a\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eTrojan-Dropper.Win32.Higaisa.a\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eBackdoor.Win32.CobaltStrike.a\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTrojan-Dropper.Win32.Winnti.a\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTrojan-Dropper.Win32.Winnti.b\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eTrojan-Dropper.Win32.Shadowpad.a\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eBackdoor.Win32.Shadowpad.c\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eBackdoor.Win32.FunnySwitch.a\u003c/p\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3 id=\"id9-2\"\u003e9.2 \u003ca href=\"https://www.ptsecurity.com/ww-en/products/network-attack-discovery/\" target=\"_blank\"\u003ePT Network Attack Discovery\u003c/a\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eREMOTE [PTsecurity] Crosswalk\u003c/p\u003e\r\n\u003cp\u003esid: 10006001;10006002;10006003;10006004;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eSHELL [PTsecurity] Metasploit/Meterpreter\u003c/p\u003e\r\n\u003cp\u003esid: 10003751;10003753;10003754;10003755;10006172;10002588;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eREMOTE [PTsecurity] Cobalt Strike Beacon Observed\u003c/p\u003e\r\n\u003cp\u003esid: 10000748;10005757;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eREMOTE [PTsecurity] Cobalt Strike (jquery profile)\u003c/p\u003e \r\n\u003cp\u003esid:10005754;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eREMOTE [PTsecurity] FunnySwitch\u003c/p\u003e\r\n\u003cp\u003esid: 11004815;1004814;11004813;11004812;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eSPYWARE [PTsecurity] ShadowPad\u003c/p\u003e\r\n\u003cp\u003esid: 10005851;10005852;10005854;\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eREMOTE [PTsecurity] PlugX\u003c/p\u003e\r\n\u003cp\u003esid: 10001390;10001391;10002946;10004422;10004426;10004472;10004473;10004515;10004532;10005968;\u003c/p\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2 id=\"id10\"\u003e10. Applications\u003c/h2\u003e\r\n\u003ch3 id=\"id10-1\"\u003e10.1 Known names of files from which PL shellcode may be loaded\u003c/h3\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003eC_99401.NLS\r\nDriverStatics.ax\r\nDrtmAuth005.bin\r\nDrtmAuth13.bin\r\nFINTCACHE.DAT\r\nSEService.dat\r\nTheme.re\r\nWspTst.xsl\r\ncbdhsvcs.bin\r\nchrome_proxy.dll\r\nconfig.ini\r\nlocalsvc.ax\r\nlog.txt\r\nmsdsm.tlb\r\nnormnfa.nls\r\nnormnfw.nls\r\nservices.bin\r\nsoundsvc.sys\r\nstoresync.dat\r\nstoresyncsvc.ini\r\nsvchosl.bin\r\nsvchost.bin\r\nwbemcomn64.sys\r\nwbemcomna.dat\r\nwinness.exe.config\r\nwinupdate.txt\u003c/div\u003e\u003c/pre\u003e\r\n\u003ch3 id=\"id10-2\"\u003e10.2 IOCs\u003c/h3\u003e\r\n\u003ch4\u003eFile indicators\u003c/h4\u003e\r\n\u003ch5\u003e\u003cb\u003eLNK file attacks\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1074654a3f3df73f6e0fd0ad81597c662b75c273c92dc75c5a6bea81f093ef81\u003c/td\u003e\r\n\u003ctd\u003e9b638f77634f535e52527d43ad850133788bfb0c\u003c/td\u003e\r\n\u003ctd\u003ec657e04141252e39b9fa75489f6320f5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0deb252a5048c3371358618750813e947458c77e651c729b9d51363f3d16b583\u003c/td\u003e\r\n\u003ctd\u003ef50b624ba6eb9d3947f22cf7f95a6f70b7c463d3\u003c/td\u003e\r\n\u003ctd\u003ea140420e12b68c872fe687967ac5ddbe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8e6945ae06dd849b9db0c2983bca82de1dddbf79afb371aa88da71c19c44c996\u003c/td\u003e\r\n\u003ctd\u003e5b8e644acc097f7123172d96a3a45bd398661064\u003c/td\u003e\r\n\u003ctd\u003e93ffd591948223e806c248861735e006\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec0a0266f6df7f1235aeb4aad554e505320560967248c9c5cce7409fc77b56bd5\u003c/td\u003e\r\n\u003ctd\u003ed500cec0ce5358751f3371b69a4a9bc402df8af4\u003c/td\u003e\r\n\u003ctd\u003e45278d4ad4e0f4a891ec99283df153c3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebcfff6c0d72a8041a37fe3cc5c0233ac4ef8c3b7c3c6bca70d2fcfaed4c5325e\u003c/td\u003e\r\n\u003ctd\u003e1a33f41d054a2ed2d395b19852583daddd056bb4\u003c/td\u003e\r\n\u003ctd\u003e177e37ec8d07d6954b2102760c74708a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e35a1ff5b9ad3f46222861818e3bb8a2323e20605d15d4fe395e1d16f48189530\u003c/td\u003e\r\n\u003ctd\u003e0a462e8e3b153e249507b1652d9f6180463e7027\u003c/td\u003e\r\n\u003ctd\u003e17548fb49ef598901ab83b7c630fbe9a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebeaa2c8dcf9fbf70358a8cf71b2acee95146dba79ba37943a939a2145b83b32e\u003c/td\u003e\r\n\u003ctd\u003eacf5f997a16937072a2a72f1ba7704f9703ea27c\u003c/td\u003e\r\n\u003ctd\u003ee5809996b6126a5573623a9010eb4ee2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003edca8fcb7879cf4718de0ee61a88425fca9dfa9883be187bae3534076f835a54d\u003c/td\u003e\r\n\u003ctd\u003edb6333f84538a21466e5ffe3c7102e0543cec167\u003c/td\u003e\r\n\u003ctd\u003ed53daa634260ed28fc2e8610ecf15ad3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4733d1204b06dc95178e83834af61934a423534e1d4edd402b37e226f0f2727f\u003c/td\u003e\r\n\u003ctd\u003edba010496a7be2e5de1f923ffdfc19bf345b650b\u003c/td\u003e\r\n\u003ctd\u003e9776f04d9c254a0b67f4dc000369a17c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003edcd2531aa89a99f009a740eab43d2aa2b8c1ed7c8d7e755405039f3a235e23a6\u003c/td\u003e\r\n\u003ctd\u003e281c1b196cd992906d8583e64011dc28d9c52e3c\u003c/td\u003e\r\n\u003ctd\u003e4a4a223893c67b9d34392670002d58d7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed4df4b58ee241e276ea03235445c04d1a28e48ec8b6e2599a56f6c4b8af3269b\u003c/td\u003e\r\n\u003ctd\u003e7b6b01e9f726ab0b5f94cd68687d4787008cd7f5\u003c/td\u003e\r\n\u003ctd\u003e4dcd2e0287e0292a1ad71cbfdf99726e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed064f675765f54ee80392fcfb5d136cd2407d06d0ea8cd7d8632d1a2b24c0439\u003c/td\u003e\r\n\u003ctd\u003e8b8b1219581555f2d9747b289d57c3e0e274fd07\u003c/td\u003e\r\n\u003ctd\u003e260eae2912475e51d82534b467e5746b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e32705d3d9f7058e688b471e896dce505b3c6543218be28bbac85f6abbc09b791\u003c/td\u003e\r\n\u003ctd\u003e289b5017f5ee8c915f755b1c7eefffbfb3d2d799\u003c/td\u003e\r\n\u003ctd\u003e28bfed8776c0787e9da3a2004c12b09a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec613487a5fc65b3b4ca855980e33dd327b3f37a61ce0809518ba98b454ebf68b\u003c/td\u003e\r\n\u003ctd\u003e0f1f2431ecccb980f7d93b9af52139d0d508510f\u003c/td\u003e\r\n\u003ctd\u003e997ab0b59d865c4bd63cc55b5e9c8b48\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4e5e3762c850536aac6add3a5ac66f54cbd15c37bd8fc72d3ade9dd5e17f420b\u003c/td\u003e\r\n\u003ctd\u003e21a5bcd916bc61585cfe1d5656240237e24157b9\u003c/td\u003e\r\n\u003ctd\u003e07254dbd369ba10a1f28ae707ba72dcf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2d182910dade1237f1dd398d1e7af0d6eca3a74a6614089a3af671486420fb2b\u003c/td\u003e\r\n\u003ctd\u003e0261490fb7f88cc3e9db6aa3fd185d03d7646864\u003c/td\u003e\r\n\u003ctd\u003ef6886709564630fbb48121d0ccc7c0a6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eShellcode injectors\u003c/b\u003e\u003c/h5\u003e\r\n\u003ch6\u003ePayload: Crosswalk\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0046df35f66a3b076d9206412be2f1f7ea4641d96574e7b58578c0c0995d1feb\u003c/td\u003e\r\n\u003ctd\u003eb73fcfc423d1bdb4649440689ff4894639b3bd0e\u003c/td\u003e\r\n\u003ctd\u003e9697d60b744a14b3003559d17cfc2f8f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e325430384d642ab2a902fb0e268e85808b6cbf87506ccdc314e116e7d1b8239e\u003c/td\u003e\r\n\u003ctd\u003e0f2a5bbe03c5b3422609b78ca90fb7f06bfd966b\u003c/td\u003e\r\n\u003ctd\u003eeee464e5ded3f4e37d49c8a91b1eb157\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9e27f110fc824d8b85855538c3320e8ea436e82737d686fcecb512b6f872e172\u003c/td\u003e\r\n\u003ctd\u003e4481c4b0cf2207099c7b5979a6e81a2923d6c698\u003c/td\u003e\r\n\u003ctd\u003e254ace03b179c6565ac2616dd4d24f85\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebec68bcaa80bb00274ef7066ddc8de1b289fb5f8b8e8573f3a961664f41da9d7\u003c/td\u003e\r\n\u003ctd\u003ecc24843afd627ced74a1d713328078a23db81e54\u003c/td\u003e\r\n\u003ctd\u003e914151fa49be06ab570bb0db77ce6960\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3454d87b2ce0eab44c07774c7b56318710f9a63626d6d2aaf898922178bf2792\u003c/td\u003e\r\n\u003ctd\u003ee6cd7a9f5b421b80b50e5809c35732c427c6b6d8\u003c/td\u003e\r\n\u003ctd\u003efbfeecea5a8c752c9bffdf6b9f7fcf50\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1e29e07b404836c82cd9b75e44a3169195a335dc494ba27f744f6605666c26aa\u003c/td\u003e\r\n\u003ctd\u003ea1e0ce3c384945fdde841d91d069505879587217\u003c/td\u003e\r\n\u003ctd\u003ed19c5c55733244f4a8d5a1af4e6c1250\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3a9bbf4ee872904e729466aa50d570b43451b0945a41b5d9d114f8c24683c21e\u003c/td\u003e\r\n\u003ctd\u003e5d1bada317d596f3dec5b86e4e42639b2f5f71ac\u003c/td\u003e\r\n\u003ctd\u003e6d967f275beb3855980a80d60ef8023c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efaca607b43551044fda3c799ce7e9ce61004100544eeb196734972303f57f2ae\u003c/td\u003e\r\n\u003ctd\u003e159a5ca55d7c62d0167740f8f5310e18e03a8fd3\u003c/td\u003e\r\n\u003ctd\u003e4518f25c6307ef6d2ea5c0e66f2b16d1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e86100e3efa14a6805a33b2ed24234ac73e094c84cf4282426192607fb8810961\u003c/td\u003e\r\n\u003ctd\u003e604c5f42eeb015016b35ec1c9019812afc400f5b\u003c/td\u003e\r\n\u003ctd\u003e7078450715c103056b01ad87787aaed6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch6\u003ePayload: Metasploit\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0ad8ee3fe6d45626b28c0051c4c4f83358a03096ad06fc7135621293e95c75ae\u003c/td\u003e\r\n\u003ctd\u003ee8fcd7ca491bffc4838bf9eb6a7aec3f7e4acdc2\u003c/td\u003e\r\n\u003ctd\u003ea752d48a4433eb2dd56c8946a345ac9e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e75d573d1e788590195012a1965cfcaa911c566aee88331b7718ddc638028c175\u003c/td\u003e\r\n\u003ctd\u003eca66a779a5b720e5f73e91561bd3434db691e13b\u003c/td\u003e\r\n\u003ctd\u003e2867ca5c273fbb128504a4e455e862a4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8c962ddbb515e73ecfc5df9db35a54c8c9d15713a04425298f2d89308e2a47bf\u003c/td\u003e\r\n\u003ctd\u003ece1cb0050662e541e72a24c6a969fa7b51084a60\u003c/td\u003e\r\n\u003ctd\u003e2555677876b50a03e42420838c1997f1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efb23c7fc2e5e8ae33942734c453961da9ed4659368d19180a8f1ecb3b9b8e853\u003c/td\u003e\r\n\u003ctd\u003ed03a5b322f3748c9019ca24dd1943507d591165e\u003c/td\u003e\r\n\u003ctd\u003e9a026082cb80cdba1a68ae1d14f79b9d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e012d8d787c6e7a5f3dbe1e9cce7c5da166537a819221e210ef4d108f1a0a24b3\u003c/td\u003e\r\n\u003ctd\u003ed913285f75a3a1a4f2a6e0f66bfda8efc71fc669\u003c/td\u003e\r\n\u003ctd\u003ed8ff9eb5582371745ffe1636a89f97ce\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e420dc77afe28003f14dfe6c09fbf8194ead8a6e8222b6ab126e7ee9bf4b63fd4\u003c/td\u003e\r\n\u003ctd\u003eebafff5ff0517ea5c2c783ab7d0cffded468bf4f\u003c/td\u003e\r\n\u003ctd\u003ec024b658471a27ec5201f96f65f0b89a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea02258fcb3694893b900f10f0f9bb1d0d522ed098b1cc8eab59f2f70209b3a0b\u003c/td\u003e\r\n\u003ctd\u003e9bdd1af6fc74a8a3c2ff0e3bf1378ff290cdb35e\u003c/td\u003e\r\n\u003ctd\u003ebb4155a5add9446b6354d46a78edc8d5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef54cf6d9a5d77a89c4a2d47b02736d746764319e02ad224019db8de78842334a\u003c/td\u003e\r\n\u003ctd\u003e8413380c19f348ef08051b2d6d8b39598bb05f68\u003c/td\u003e\r\n\u003ctd\u003ecdddd08982ca2dd76a63cbf603956f1a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eSelf-contained PL shellcode loaders\u003c/b\u003e\u003c/h5\u003e\r\n\u003ch6\u003ePayload: Crosswalk\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5841a4302fcbd63f66fc2afd41f8671744454aaa7e1ed834e935bfdb007a9a83\u003c/td\u003e\r\n\u003ctd\u003e3d0b40b2a6fc691f702237ba5682335e7e74e649\u003c/td\u003e\r\n\u003ctd\u003ea8bb1d69fb8a9d323bbc5d78f0e62850\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee0b675302efc8c94e94b400a67bc627889bfdebb4f4dffdd68fdbc61d4cd03ae\u003c/td\u003e\r\n\u003ctd\u003e4db6e492a9ef89e116f4da19f97d69cb82e08661\u003c/td\u003e\r\n\u003ctd\u003e2dc960eb4691a148ece5ee2b24932f03\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee398290469966aff01a9e138d45c4655790d7a641950e675785d0a2ab93e7d28\u003c/td\u003e\r\n\u003ctd\u003e1e494e1cf8df105d95d0e0bb4879223030c48a0c\u003c/td\u003e\r\n\u003ctd\u003e42a5908ff9b65d3b1a1a9f52ca6f06a5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8add31b6a2828e0d0a5b3ac225f6063f2c67c56036ff3f5099a9ee446459012a\u003c/td\u003e\r\n\u003ctd\u003e5c11f70345d984391d041b604adfe5bfb5134755\u003c/td\u003e\r\n\u003ctd\u003e5e3ef894b490d1c931a5f70d44789316\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea4b2a737badef32831cbf05bfaa65b5121ddb41463177f4ac0dbc354b3b451d4\u003c/td\u003e\r\n\u003ctd\u003e8c549d16dc97072f16e4a3114fbd7d47f8bc9726\u003c/td\u003e\r\n\u003ctd\u003e1bc1df4b946e83f26c878f01145545a4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2fdef9d8896705f468f66eb8c20e5892d161c1d98ab5962aa231326546e25056\u003c/td\u003e\r\n\u003ctd\u003e7b465b1e0d7be4d84e06a115fd55b97207de768c\u003c/td\u003e\r\n\u003ctd\u003e221db0f664ea781b4dff81e0a354c63d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch6\u003ePayload: Metasploit\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea7df8143a36638de40233b141919d767678b45bf5467e948a637eaafb2820550\u003c/td\u003e\r\n\u003ctd\u003ebe39c3022218ccb3abcfc6c906359b76571f4241\u003c/td\u003e\r\n\u003ctd\u003edc758b9ecca41f7f66808258efbfc6cf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e283302c43466bdc6524a1e58a0ff9cc223ab8f540a1b0248d1fcffe81b87d5d6\u003c/td\u003e\r\n\u003ctd\u003eb2bb31ea3b4abaf3f3edbff405e23f2ce442dfe0\u003c/td\u003e\r\n\u003ctd\u003e3839d37a6a7a29a7af79f102e28b8bc2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb447a7bb633f682058d4b9df5caabbe8c794f087b80bf598d6741a255e925078\u003c/td\u003e\r\n\u003ctd\u003e3c523a969cc4c273ae27fef32630701516b08873\u003c/td\u003e\r\n\u003ctd\u003e63584677683b5fbf4f69053a8de9ecbe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e01c8cc07a83ffd7ac9ee008685eb360c9934919e86847c50c8843807b9d9c196\u003c/td\u003e\r\n\u003ctd\u003e37ec3d5be7b535a8a31001815ab275a489e302f5\u003c/td\u003e\r\n\u003ctd\u003ed92db6b734b1db3874396506613a4962\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e21dd261e5fe46b86833cd69b299ae5ee5f24da3d4e87de509eddda4d2f63d591\u003c/td\u003e\r\n\u003ctd\u003e11e86ee44e7c3592c97f7191746e170b62f724bb\u003c/td\u003e\r\n\u003ctd\u003ec8f1aff87d12e0e5c7082b8a565c4abb\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch6\u003ePayload: Cobalt Strike BEACON\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eba03feb351825029426e84c2f74e314f27b56714a082759650a455dfb1a946eb\u003c/td\u003e\r\n\u003ctd\u003e8890155c88c690faaf900d1e63998756809273d0\u003c/td\u003e\r\n\u003ctd\u003ecbccba5f774642c80aacfed20d20435b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e06210a1f9bc48128e050df0884f9759e4d202bd103aa78e6b6eb3cec1a58cdb5\u003c/td\u003e\r\n\u003ctd\u003ea0128edc037a91ce127291edd9d950e7661dd764\u003c/td\u003e\r\n\u003ctd\u003e64071aaa193ab18722553bf6f573547b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0d6a5183b903b1013367b9a319f21a7a3b7798d9565a0deee52951f62a708227\u003c/td\u003e\r\n\u003ctd\u003e2d35c342d8fc6f5d018937491e246da2ab293d43\u003c/td\u003e\r\n\u003ctd\u003eb8b43c4c4207b180ec8be82ff066172a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1bd0f0fbd7df99c41e057f6d6c7107812ef1370609ad215a92227ca79ce6df70\u003c/td\u003e\r\n\u003ctd\u003e7dcb0d7300aa54ef77eb3347e6204b31d4b9c6db\u003c/td\u003e\r\n\u003ctd\u003e4922247f9b83341987e0b4e80f5c153f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e29233eab65960c2da4962e343a3adab768673012d074db35ebc2abe2142ee73c\u003c/td\u003e\r\n\u003ctd\u003e1d3dc9bb7acfe8416ac5ab51f24b6648b91eb305\u003c/td\u003e\r\n\u003ctd\u003ecb682ec885f353bcc51ac350bc015783\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e79fbb45d0041933dce16325b87b969db12b7a8dedc918929615104835badc80f\u003c/td\u003e\r\n\u003ctd\u003eb13d58f1d24cf5e10a7013f4aeac22e974c74315\u003c/td\u003e\r\n\u003ctd\u003e407990337eac6582533df5c85528817a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8f0538a18c944e2a98f1415d5528a0dab4367cd8689f598ab2da266c36403252\u003c/td\u003e\r\n\u003ctd\u003e483c49349d29e11e0d195864e372a210ce5ce856\u003c/td\u003e\r\n\u003ctd\u003e7e8ebe133a530ea86f179c87fc8e51f7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e025e053e329f7e5e930cc5aa8492a76e6bc61d5769aa614ec66088943bf77596\u003c/td\u003e\r\n\u003ctd\u003ee63646f0089ce3a224d68029eecff72ef0259609\u003c/td\u003e\r\n\u003ctd\u003ef9fa912e498f20c440dde32fc8a66608\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed30dd7d82059dc34e72c3131dd7ea87f427cabe7225bbf59aa69e01cd761a1fe\u003c/td\u003e\r\n\u003ctd\u003e8be2fccba22fdca0e453855c7428e709186f3e0d\u003c/td\u003e\r\n\u003ctd\u003ec839ae523f04e7859498de1dee570867\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e81ab37ae3abce3feabdefde6a008dec322e0168ce4f0456ee737135025399400\u003c/td\u003e\r\n\u003ctd\u003e98d6dffb7e51170a02546eeb07c80f2592d10293\u003c/td\u003e\r\n\u003ctd\u003e5ed49962d13dcd6e0eab98f966273fca\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb55812f35735e4fb601575072f1b314508b2dafdcb65aa6c1245a2e1f9d80bdd\u003c/td\u003e\r\n\u003ctd\u003e6986b924c58aa90a9e413d9942c25a1419d9aa0e\u003c/td\u003e\r\n\u003ctd\u003ef88416bc9ffcb639f1357ebafe3ae9a7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efc5c9c93781fbbac25d185ec8f920170503ec1eddfc623d2285a05d05d5552dc\u003c/td\u003e\r\n\u003ctd\u003e0902e3c41fb8e0dffc322e6a562f04588b7522a3\u003c/td\u003e\r\n\u003ctd\u003e6817b7a5d1542eff1cc404a44a31353a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed879b6cac6026a5418df4bf15296890507dbaec5abe56dafda54266975488cf2\u003c/td\u003e\r\n\u003ctd\u003e11c987cdafec8ea02a77a03d4c979f743138b39a\u003c/td\u003e\r\n\u003ctd\u003eb02057f05f57f3a889a744533001cf7d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6e7052562db5f23c2740e9d094aae2316f77866b366eb4ef59c157e112172206\u003c/td\u003e\r\n\u003ctd\u003e7fd0d64f54a54aabd04136e4111e2d8a22884324\u003c/td\u003e\r\n\u003ctd\u003edda83ca52a9d9dbdc7752db8ed9533a9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9afb78e9be08041f849563c4fd2777a373ffc76c3eccd638b1f6f846b847b968\u003c/td\u003e\r\n\u003ctd\u003e2b47e9c8946536decba6066f9a57a85f143465c5\u003c/td\u003e\r\n\u003ctd\u003e482d1c1e2044b0b4d1641f15d82e86b6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8b515bf88b3f7ac77861fdea61f82fb0c941bc5569922cadca254a79a744ae99\u003c/td\u003e\r\n\u003ctd\u003ee46490394ddc66548067ba540d13fb3cf363c596\u003c/td\u003e\r\n\u003ctd\u003e2a189598113d436e4b717abb76f1c652\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef91f2a7e1944734371562f18b066f193605e07223aab90bd1e8925e23bbeaa1c\u003c/td\u003e\r\n\u003ctd\u003e0b83939510bd31939c91370c53fab25aa286ba08\u003c/td\u003e\r\n\u003ctd\u003e5909983db4d9023e4098e56361c96a6f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3d38dfd588fc98de099201fe9f52feb29bb401fc623d6fe03eb8f0c959ffc731\u003c/td\u003e\r\n\u003ctd\u003eaf76d1d293e3e8fe7ad428ca6fe47e68c858587b\u003c/td\u003e\r\n\u003ctd\u003e284dcb880e68d66cb890ef85d78ea7ae\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6a10027dd99f124cd9d2682b6e7b0841d070607ea22a446f3c40c0b9f9725bed\u003c/td\u003e\r\n\u003ctd\u003ef2751dbfe822907ecb69b83e461b48183a485355\u003c/td\u003e\r\n\u003ctd\u003e0d69dae8f83f09b8671b8552a0acd319\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e71a965d54c4b60f7ae4a5e46394bfca013d06e888ec64f06d5ec3d8a21eccb55\u003c/td\u003e\r\n\u003ctd\u003e4b51a8233991d4255fc05d9bbfc242f779b1d31d\u003c/td\u003e\r\n\u003ctd\u003e5e61778a1e660691dce99ebb8e5e257c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5347c5bbfaec8877c3b909ff80cda82f505c3ef6384a9ecf040c821fc7829736\u003c/td\u003e\r\n\u003ctd\u003e1530993376416274d04907ff6369a3012694bfa9\u003c/td\u003e\r\n\u003ctd\u003e62d6fb0f33d0411ea6abd3167118a0e1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ede648c21b4fae290855fdf0cd63d9e6807ced0577bdcf5ff50147ba44bf30251\u003c/td\u003e\r\n\u003ctd\u003e3a0c2aee518b7c003e5eb8aa7094d536b8bf1a94\u003c/td\u003e\r\n\u003ctd\u003edbd6a052331365a31f74e2c41d5cd132\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7ed5cbeb6c732aa492762381033ff06d0c29f1c731530d4d27704822141a074a\u003c/td\u003e\r\n\u003ctd\u003e2d0bb1fc0213e4fca5c3b485caaf964dd2da7981\u003c/td\u003e\r\n\u003ctd\u003e05e1247ff02d50aed81ecd9d0b93c41c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee886caba3fea000a7de8948c4de0f9b5857f0baef6cf905a2c53641dbbc0277c\u003c/td\u003e\r\n\u003ctd\u003e6b92e6d594fd6e26f9e910f10f388c43017303b2\u003c/td\u003e\r\n\u003ctd\u003e48bda0c5e53b6d7ee7fb1da6130f325f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eExternal PL shellcode loaders\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0041b28d1f076e196af761a536aa800ebe2fcaea9084a8e17d2a43c43765efdd\u003c/td\u003e\r\n\u003ctd\u003e0cb8ed29268ec9848ff1c7f25f28b620271e61c9\u003c/td\u003e\r\n\u003ctd\u003e131711477620098191777f93c580ee6c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0756216ea3fea5b394e2fa86e90a75f05c3da2b4b47d61110559bd28f51da8e6\u003c/td\u003e\r\n\u003ctd\u003e7a1c5e1799bdeebb01527f54a7fd89d0b720dea7\u003c/td\u003e\r\n\u003ctd\u003e53e2c1eb6b87e92b5f534503f011f6ee\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e34aeaa89aab983318ed8f6da32556faf3057a92dc045fac1f960f3aaad3a1ba1\u003c/td\u003e\r\n\u003ctd\u003ea42e6dc7f248794e91e4ec251c2c96164215b7be\u003c/td\u003e\r\n\u003ctd\u003ef02a87562ffdd7a1c941dac4175854b0\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e40101054d18eb50b65c2ce32b00352d2486008f67c63baec5ef93cac9d5c81ed\u003c/td\u003e\r\n\u003ctd\u003e11d7145b85fea84aed35c60857560a66dbff5a27\u003c/td\u003e\r\n\u003ctd\u003ee5271b41cf32892cc16445ac0783f3f7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4665280d4b34c5388edeb51a6d5e808d2942c364017a42d3f1fac186b21eb571\u003c/td\u003e\r\n\u003ctd\u003e09a3fb96edbd5e143ba3b579cb2c09d0dd9469eb\u003c/td\u003e\r\n\u003ctd\u003eda220930ac3e45a713d9da2e6c1c246a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e46f03ddf74c47960a3731de18f123b2110153ed668f9bf6ed3badd7fd099ccb6\u003c/td\u003e\r\n\u003ctd\u003e90c104dadb5c21b4fca644b37f7043fef7e72d2b\u003c/td\u003e\r\n\u003ctd\u003e71b250a873a070415fed172759a42b7d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4f2d8c437d32dc075074f01d10698f6d4dfc4d4bd8a595dabaa2519c6a025c8e\u003c/td\u003e\r\n\u003ctd\u003ee629fda195636d99ac587b354b5c6fc228d65d81\u003c/td\u003e\r\n\u003ctd\u003e8b2e72f2b13c63a583ae9a9cd474adf6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e655c21fc31967282d8517b3c845f775cd0a80595f90c5c85b6027110532a1cf9\u003c/td\u003e\r\n\u003ctd\u003e5fa5593b52cfc866c51f55e9a56b1adcc9db01d1\u003c/td\u003e\r\n\u003ctd\u003e318b3661ec5929f069e7821fac537fe0\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8f8ee8d2bc6c559a0a09ce3958727dee2f30880c615b2788d757917ca55d43ef\u003c/td\u003e\r\n\u003ctd\u003eb769c9c708f59be0a0d68ddf3076c9d9037b6c27\u003c/td\u003e\r\n\u003ctd\u003e1d6def7a4bed4a8772e3cae6926d405b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8fb8134bf40ad6bddd60ea77b78c30dab72c736bf29172f89d03505b80c3ae8d\u003c/td\u003e\r\n\u003ctd\u003e9a17591711383d96f7cc421a71d5d394e322189a\u003c/td\u003e\r\n\u003ctd\u003e7af8c2055a608c920ba5e5c63fd43207\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9bf32bf4a4bc1d13bddaa6402595ad76d2d9fcc91a988313f13ed990ccb1c4c1\u003c/td\u003e\r\n\u003ctd\u003e68ae7f3d2cb22c70232a35ed59f6fed70fe0f3be\u003c/td\u003e\r\n\u003ctd\u003efb2ac5049bdee8dd1753fa7e9d007e6b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9c3280bc1ebc239de86523a7046b45e9bb7ce7a40a869dda6ea92fcee727366a\u003c/td\u003e\r\n\u003ctd\u003ecf90d0b4ac09dc97f675fb3cfbc8eba89db211e8\u003c/td\u003e\r\n\u003ctd\u003ebb6b9a60c3b4062669bac3608ca7b0c1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebfe2673b02c54be9093cff8fd564b630109175c608f07d94e4a2ac65028a6eae\u003c/td\u003e\r\n\u003ctd\u003e59c4f47b1135f21a8814c8a838277f4cfa46f2e5\u003c/td\u003e\r\n\u003ctd\u003efcceb7a3bc3b0c48c8d9c91eb0b896ab\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec93999f7622caf63cbcfb26966ff11719a4e26bca7d90a843461f44a3c982a30\u003c/td\u003e\r\n\u003ctd\u003e0a8fbc71a936d2e7f2830fae3d57a2f1e8e43266\u003c/td\u003e\r\n\u003ctd\u003e36fe1e0db5e74ed3e6adc039720c54d6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed0686f44fb7e77ce0f68cc91c4cef12dbd691bb99b0b7be77103b7b17eec3753\u003c/td\u003e\r\n\u003ctd\u003e0b09ac7691cb9b8b7b5a2e453984bc75edbc8aeb\u003c/td\u003e\r\n\u003ctd\u003eb5605f71d18cc255dbbd910ac008ae6e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed6a05e20da5012c0cfc491b0044f7fded9322f5bbc664092c4b481709c3472e0\u003c/td\u003e\r\n\u003ctd\u003e735e97688a70d24d922cf9a3951c5e23a91cbcb1\u003c/td\u003e\r\n\u003ctd\u003e4a89eb933fa87d85542488df6ae20d82\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee7f5a30d4bf7915cc97374e0f6a29573d4640961166b5c9b942030e8c10949d8\u003c/td\u003e\r\n\u003ctd\u003ec224763846f8f61442e893cb8e9070ce67be5dc8\u003c/td\u003e\r\n\u003ctd\u003e63c1b74c829ee362730ff37d6101d276\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee935699b31707ecf9e006940f31f09514688cb45e078a66724603ee7fadf84db\u003c/td\u003e\r\n\u003ctd\u003e5ba9f7cd51e8eac88f870e340c8262683d92563d\u003c/td\u003e\r\n\u003ctd\u003e99b86e64d76d21b2a5bfeb48b89e3935\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef36a0b99973a837d5e4d542edd739df7cac10e207be538d47a106c4edf7cff54\u003c/td\u003e\r\n\u003ctd\u003efde9357e8d6a3336dbd82d2e22dbc0772640f63f\u003c/td\u003e\r\n\u003ctd\u003e0133bd3f26788732a580115218d98273\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef69c6e8fe1188a461bfe249ba7afefbd7a787fcd0777c008f9580f6976118898\u003c/td\u003e\r\n\u003ctd\u003ed3d4c7cf257f9fe97bdf31a4b0e3f66726fb1b6f\u003c/td\u003e\r\n\u003ctd\u003e3d09dee9bc20abf33b64bcb4c6d3130f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efad80dc36a59d1cc67f3c4f5deb2650ca7f5abac43858bf38b46f60d6bb4b196\u003c/td\u003e\r\n\u003ctd\u003e119b92462a91f9cc8b24dfbd84fb88ef47ecab97\u003c/td\u003e\r\n\u003ctd\u003e247c48b8758a9eba48bfe39c53ff9e6e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0187d3fae2dfc1629e766d5df38bdabf5effcb4746befceb1aaf283e9fe063a1\u003c/td\u003e\r\n\u003ctd\u003e648594c25aebf3865c35ce6057e36b42e9e3be31\u003c/td\u003e\r\n\u003ctd\u003edbc30db0ed5ba1ea3b2e500823448c6c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e45d175f3c1cb6067f60ea90661524124102f872830a78968f46187d6bc28f70d\u003c/td\u003e\r\n\u003ctd\u003e418fab494383e2ae0d94900344853cc0bc6d5385\u003c/td\u003e\r\n\u003ctd\u003e337171764c99b7ae87c030e11cda00c6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eca0f235b67506ed5882fe4b520fd007f59c0970a115a61105a560b502745ac6a\u003c/td\u003e\r\n\u003ctd\u003e1c265ed6b5875a619a427db1663f48fe7db01d88\u003c/td\u003e\r\n\u003ctd\u003e2a3e63fdbcbbad9b4be8b35a180ea0d4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eabac7a72b425ff38f8a7d8b66178da519525dc2137ca8904b42301fb46a8983e\u003c/td\u003e\r\n\u003ctd\u003ed9b692d84bdc134f90b54ac2a30f6832d70e730b\u003c/td\u003e\r\n\u003ctd\u003e211db7515faa09aa0623b327bd1530f1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e645b14df1bd5e294ec194784bc2bd13e0b65dac33897c9b63ad9ed35ec6df3a8\u003c/td\u003e\r\n\u003ctd\u003e6d3643bfdd1bd85cfdfe4b05eaf2939bbf4b22f0\u003c/td\u003e\r\n\u003ctd\u003e359f5615dcf2f75bc74146afad630427\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6b4b9cf828f419298cd7fda95db28c53fc53627124224d87d2ad060185767957\u003c/td\u003e\r\n\u003ctd\u003e59208d32dd7440bbe4142882b8ad1ac033f08918\u003c/td\u003e\r\n\u003ctd\u003ebae0fc6f570ca12a9b2980dd00bc673c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7fd19347519ec15ab8dbce66722b28a917b87ad034282ef90851e1b994463644\u003c/td\u003e\r\n\u003ctd\u003ec4467556640ad45fb8e56d1fb95c93e57b209924\u003c/td\u003e\r\n\u003ctd\u003e086186c935a68e7167113da46a17fa80\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8308e54055b45eb63dc6c4c6a4112310a45dec041c1be7deb55bec548617136f\u003c/td\u003e\r\n\u003ctd\u003ec44934f47c98c7cde7ba5978ca315a5e9099d0c8\u003c/td\u003e\r\n\u003ctd\u003ecf13bdefb622fc90dcda39e20e45d636\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eadf52650ce698e17d5ff130bc975a82b47c6c175ad929083d757ec0fe7c4b205\u003c/td\u003e\r\n\u003ctd\u003ebed84d4ef7bd8c5fb683eab51d849c891328b4d4\u003c/td\u003e\r\n\u003ctd\u003e08393f7d6e0ee2b7472173f4419a602d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efb707094673a48408f9ba5240019cb502b9367fb380bb1734e0243e90b9399c3\u003c/td\u003e\r\n\u003ctd\u003ee452227d134fe14df3ca35cd2abf7f1e922aa5d6\u003c/td\u003e\r\n\u003ctd\u003ed761c07911138e605723f891965035b8\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4da733bbf7d585ee5b5a58c0ad77047ce640a4512a84502ad5ae9240ee2fcdb0\u003c/td\u003e\r\n\u003ctd\u003eff362a3d5d873f8fd0f7c2f150582dab9251cf2c\u003c/td\u003e\r\n\u003ctd\u003e5eab890242e8b811865e1bd3a7fd7868\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebef3f87c6582813e23b0c8c8db9ca9ed65bc802445187378f4e62a7246133ae2\u003c/td\u003e\r\n\u003ctd\u003e27e4115041c059dce22322e0242002353ab14814\u003c/td\u003e\r\n\u003ctd\u003e6d33db967323d822ba3239dcdfcb555c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb83534071bbcacc175449faadbb1d6b0852fe58521da0fefd5398a4a9b1fb884\u003c/td\u003e\r\n\u003ctd\u003e26ca2262f31dcc1fd6ad56f1f371a363163ba7f2\u003c/td\u003e\r\n\u003ctd\u003ed12013fb90a60869cfdaaffe1a18467d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eadf52650ce698e17d5ff130bc975a82b47c6c175ad929083d757ec0fe7c4b205\u003c/td\u003e\r\n\u003ctd\u003ebed84d4ef7bd8c5fb683eab51d849c891328b4d4\u003c/td\u003e\r\n\u003ctd\u003e08393f7d6e0ee2b7472173f4419a602d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee4df8634f5f231fae264684e63b3e0c6497b98dd24ba1b0c6f85c156d33a079c\u003c/td\u003e\r\n\u003ctd\u003ee3e7b719fa1bb3fd12bb82592f85c3e4c3b1d7fa\u003c/td\u003e\r\n\u003ctd\u003e03275b5b1f9d11b1731d5746827d00b1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eafb5e3f05d2eedf6e0e7447a34ce6fd135a72dad11660cf21bec4178d0edc15b\u003c/td\u003e\r\n\u003ctd\u003ec67ad0bb292ed20dbe9ba980e71d223249632252\u003c/td\u003e\r\n\u003ctd\u003e38857fb40e0655495df270777043b813\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1968f29b67920fc59e54eba7852a32f20ecbf3f09481c09ddbee1dedc37f296e\u003c/td\u003e\r\n\u003ctd\u003eb49679280a2c5b01d0126fc835cc29e4fdc5900d\u003c/td\u003e\r\n\u003ctd\u003e468c5c3f46299c67366727a58e3322e4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebe70b599e8d7272e8debf49e6bf6e5d8d9f1965812f387a9f1e75aa34788a7c7\u003c/td\u003e\r\n\u003ctd\u003e88282f8c93d61fd0caaec8807448e96f90101901\u003c/td\u003e\r\n\u003ctd\u003edb394163c7e6e511d0e4046ff34d67e2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch6\u003ePL shellcode: Metasploit\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef6085075e906a93a9696d9911577d16e2b5a92bc6b7c514d62992c14d5999205\u003c/td\u003e\r\n\u003ctd\u003e4a0b8e9a56876c11c667b9ce77b371d2c6d07891\u003c/td\u003e\r\n\u003ctd\u003e8849cf257c383044c006beb8e66d3add\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch6\u003ePL shellcode: Cobalt Strike Beacon\u003c/h6\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e43fe07f9adeb32b20e21048e9bb41d01e6b3559d98088ac8cd8ab0fad766b885\u003c/td\u003e\r\n\u003ctd\u003e30dee2118fc28bb0b2804275c92daf58236824e5\u003c/td\u003e\r\n\u003ctd\u003e2a2a50ec29f741faecbff0bcf705da0a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6867f3d853de5dfe8adbd761576c29ad853611d8d1c7fdd15b07125fd05321f8\u003c/td\u003e\r\n\u003ctd\u003e7420afe3c0c91442fac0c6df5dd1cfedd76503de\u003c/td\u003e\r\n\u003ctd\u003e69b9d1fc0edb0a67909847e43ac79ccf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0c6c6ba92661c119168a5486faa1af94673bd4d770c13c2b49d7a0651f798857\u003c/td\u003e\r\n\u003ctd\u003ecb552c22718ca9eaf16792c1ecc583c09f1f19e1\u003c/td\u003e\r\n\u003ctd\u003eb67ff211420c9f5647df2de02e771864\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebe7ba33fcb2a19bb2d1fe746f49c39fb1b8bd5d9e46d5b6610f8a2ad3f60b248\u003c/td\u003e\r\n\u003ctd\u003e7849dcf58fbb930a1327635e13e9970d4bdc7121\u003c/td\u003e\r\n\u003ctd\u003e9a478e85f1aed628e3fc1f7c8fdeae82\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed1a548b9ad6b4468ee3c5f6e1aaaa515021255fb13e45ff34fbff5ad88bf4de2\u003c/td\u003e\r\n\u003ctd\u003e93404b4005e7ab0e8c9282ced20c16820378792b\u003c/td\u003e\r\n\u003ctd\u003eeff6e2a93e60fe017e9f082cd6d3fac9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9ad808caa0b6a60a584566f3c172280617e36699326e7425356795b221af41dc\u003c/td\u003e\r\n\u003ctd\u003ef3093ae9f6633449c1d4f35804d1166dcbe09ece\u003c/td\u003e\r\n\u003ctd\u003eabb6e606a5fd22abfaefb1dbf970ce2f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eeb9c850b1e8d8842eb900fa78135b518fb69da49c72304b5b3b4b6f4fa639e57\u003c/td\u003e\r\n\u003ctd\u003e6c34f4f29cb3d8cc8f55a707d255de50caa67e8f\u003c/td\u003e\r\n\u003ctd\u003eb80d303171db4adb554e656aaba15fc9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee10046b86fe821d8208cb0a6824080ea6cd47a92d4f6e22ce7f5c4c0d9605e4b\u003c/td\u003e\r\n\u003ctd\u003e1cc16e3a6185b790875e3f00b68ec87feddcf93f\u003c/td\u003e\r\n\u003ctd\u003ecd43240098f60c5d65290ef93ebdf6de\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea783edae435c6fdf55e937b3246b454ed3b85583184b6ffc1b2faba75c9165cf\u003c/td\u003e\r\n\u003ctd\u003eaed326228551a4736012c1921d3be7079541c29e\u003c/td\u003e\r\n\u003ctd\u003e07377cf8abcabcf4ec87e9dde67672d6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eCHM file attack\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb6685eb069bdfeec54c9ac349b6f26fb8ecf7a27f8dfd8fcdb09983c94aed869\u003c/td\u003e\r\n\u003ctd\u003edb190af369fdc654af39a54c44f37d5e5712fda8\u003c/td\u003e\r\n\u003ctd\u003e06f945c39870743d51ca887efb32d649\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5d549155b1a5a9c49497cf34ca0d6d4ca19c06c9996464386fc0ed696bf355a2\u003c/td\u003e\r\n\u003ctd\u003e7dabbd292f8bb8b600439a9c1b2fa69eeecbcb88\u003c/td\u003e\r\n\u003ctd\u003e46d3773e0e306b8a1ede7932b83fb034\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e02f5cb58a57d807c365edf8df5635263f428b099a38dff7fe7f4436b84efbe71\u003c/td\u003e\r\n\u003ctd\u003e9c921a278ba4647269b45a5716b47ee47b6de24f\u003c/td\u003e\r\n\u003ctd\u003ee8c21f8f50bc5720b1713322db4a9022\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3c8049bd7d2c285acc0685d55b73e4339d4d0a755acffad697d5a6806d95bb28\u003c/td\u003e\r\n\u003ctd\u003e201eac040aa2693042efa7539a88e2676dcf89af\u003c/td\u003e\r\n\u003ctd\u003ee93bdab9e64bcce94f70a91e0ee115da\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efcbd7ab82939b7e0aff38f48a1797ac2efdb3c01c326a2dcf828a500015e0e83\u003c/td\u003e\r\n\u003ctd\u003e8a503147831499778b2d50f8337677c249c99846\u003c/td\u003e\r\n\u003ctd\u003e21aa8aa3a92ebca1963595a328061843\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3c6d304c050607a9b945b9c7e80805fc5d54ced16f3d27aaa42fce6434c92472\u003c/td\u003e\r\n\u003ctd\u003e1e75cfd3db2cc4b0091e271a7533b828632f399c\u003c/td\u003e\r\n\u003ctd\u003e951c5f08eef4ef8acc3352a44c7c0e80\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4d3ad3ff281a144d9a0a8ae5680f13e201ce1a6ba70e53a74510f0e41ae6a9e6\u003c/td\u003e\r\n\u003ctd\u003e9c1d4db37c2d72ac9761dd342feb8a31bc636d6d\u003c/td\u003e\r\n\u003ctd\u003eb22b232381ea465aeb81fb7077141d06\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eFunnySwitch\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e23dfce597a6afef4a1fffd0e7cf89eba31f964f3eabcec1545317efeb25082ed\u003c/td\u003e\r\n\u003ctd\u003e6dd15c03ffd3762a20b0f51faf31724d5dbf1466\u003c/td\u003e\r\n\u003ctd\u003e2b0c692d9eafed5e24f2b52234ea0fa2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2063fae36db936de23eb728bcf3f8a5572f83645786c2a0a5529c71d8447a9af\u003c/td\u003e\r\n\u003ctd\u003ec1e31f72adba9d5e2801e6766a24eb8d37807e9d\u003c/td\u003e\r\n\u003ctd\u003e7e1948326ff96a1b6f8e8d6dee152e28\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efbc56623dd4cdfdc917a9bb0fbe00fa213c656069c7094fe90ba2c355f580670\u003c/td\u003e\r\n\u003ctd\u003e69b961af528eac458942dc1787f32dc432a328d9\u003c/td\u003e\r\n\u003ctd\u003e2902f54dbd1f143784dfcb170dfc170d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efb0fdd18922977263f78becdedddab7a03c8de16a5431c7b4602e5be13110fa3\u003c/td\u003e\r\n\u003ctd\u003e6e3d0537cd52965e52b06b984155191c41fe0a18\u003c/td\u003e\r\n\u003ctd\u003e30684061b51971698984b531205429ca\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb45baac2ae9c5fdfbf56131451962826a95d56f641af8ca1b74738c2eb939a76\u003c/td\u003e\r\n\u003ctd\u003e4f0402e2638831d6259a366cf605eadb8c7fd478\u003c/td\u003e\r\n\u003ctd\u003e5fcf6562217dd1bb21003a9613739aff\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eff0527ea2f8545c86b8dfdef624362ed9e6c09d3f8589f873b1e08a895ef9635\u003c/td\u003e\r\n\u003ctd\u003eed8cc92b5a04620b01fcc4365e8f2ffe0c49eb30\u003c/td\u003e\r\n\u003ctd\u003ef5b3106f2ff44bf860d077e77a1992e3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e931ea6a2fc0d5b4c5c3cf2cba596a97eaa805981414c9cda4b26c8c47bf914df\u003c/td\u003e\r\n\u003ctd\u003eebb08480d3d94d6d3a8d85894d297db996d57b4f\u003c/td\u003e\r\n\u003ctd\u003eb6953b1d1c78770a6d4b3e0c9d146d9b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e568298593d406bd49de42688365fdc16f4a5841198583527a35f6a7d518a6b0e\u003c/td\u003e\r\n\u003ctd\u003e425e6c8e89f45a8fe57a27d1eacdc850b2286099\u003c/td\u003e\r\n\u003ctd\u003ebbeca57f7993a34e6296c8dedb996b76\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003eShadowPad\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e03b7b511716c074e9f6ef37318638337fd7449897be999505d4a3219572829b4\u003c/td\u003e\r\n\u003ctd\u003e147529e1a8b00a62fa2371600988b17487260448\u003c/td\u003e\r\n\u003ctd\u003ea26d2c6f7df4b74b56f9376a2d234661\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5a151aa75fbfc144cb48595a86e7b0ae0ad18d2630192773ff688ae1f42989b7\u003c/td\u003e\r\n\u003ctd\u003eea43dbef69af12404549bc45fda756bfefcb3d88\u003c/td\u003e\r\n\u003ctd\u003e493698b1d7acfbf57848b964b4b0ae97\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3b70be53fd7421d77f14041046f7484862e63a33ec4b82590d032804b1565d0d\u003c/td\u003e\r\n\u003ctd\u003eebcb044373550b787553a9b9cd297f4b8c330cd3\u003c/td\u003e\r\n\u003ctd\u003e652c44a6b5d09bf4c749a4b4d1bae895\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eae000f5cef11468dde774696423ca0186b46e55781a4232f22760a0bfbfb04f0\u003c/td\u003e\r\n\u003ctd\u003eee4744c4e74aa9933f3a5c340d9b739f8399b7f2\u003c/td\u003e\r\n\u003ctd\u003e4001d217c9a77d5839fbc033937f7ed4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5f1a21940be9f78a5782879ad54600bd67bfcd4d32085db7a3e8a88292db26cc\u003c/td\u003e\r\n\u003ctd\u003ef6f6f352fa58d587c644953e4fd1552278827e14\u003c/td\u003e\r\n\u003ctd\u003e52c28bdb6b1fc4d77b1ea58dc8c1c810\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee93a9e59ee2c1a18cee75eedcbe968ed552d5c62ec6546c8a1c1f1ae2019844e\u003c/td\u003e\r\n\u003ctd\u003e1a654b4191a3196353801d37a1de21535eb7a41c\u003c/td\u003e\r\n\u003ctd\u003eeb763c30f69c4f438be7545e2a1ca76c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1f64194a4e4babe3f176666ffd8ee0d76d856825c19bfcd783aec1bacb74fd05\u003c/td\u003e\r\n\u003ctd\u003e801b756019c075ef6a20c8219157fe8f92deebc1\u003c/td\u003e\r\n\u003ctd\u003e791f92ce878c8327337eb8e35675a715\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e531e54c055838f281d19fed674dbc339c13e21c71b6641c23d8333f6277f28c0\u003c/td\u003e\r\n\u003ctd\u003e6966687463365f08cfb25fd2c47c6e9a27af22b0\u003c/td\u003e\r\n\u003ctd\u003e4ad23aae3409c31d3d72e1d10e9d957d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea1fa8cad75c5d999f1b0678fa611009572abf03dd5a836f8f2604108b503b6d2\u003c/td\u003e\r\n\u003ctd\u003ec1af22e0d0585f6c6a2deab22a784717ee33f36d\u003c/td\u003e\r\n\u003ctd\u003e882a60c3173e252469eb4731af3342bd\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e37be65842e3fc72a5ceccdc3d7784a96d3ca6c693d84ed99501f303637f9301a\u003c/td\u003e\r\n\u003ctd\u003e05a2b848965d77fa154ca24fa438b8e5390c21f5\u003c/td\u003e\r\n\u003ctd\u003ee542c6fabe80af604d31ef8eaaf94053\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch5\u003e\u003cb\u003ePlugX\u003c/b\u003e\u003c/h5\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e94ea23e7f53cb9111dd61fe1a1cbb79b8bbabd2d37ed6bfa67ba2a437cfd5e92\u003c/td\u003e\r\n\u003ctd\u003e14c1e3dd30ef1e22e6ebadd65fb883d3e0354d47\u003c/td\u003e\r\n\u003ctd\u003e329ecc81b222a796f46859d16bd4813c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eac5b4378a907949c4edd2b2ca7734173875527e9e8d5b6d69af5aea4b8ed3a69\u003c/td\u003e\r\n\u003ctd\u003e2293a7510101ccfd83db4bd6429db2f9d406859a\u003c/td\u003e\r\n\u003ctd\u003ed55e9a302203c8800ca89b757b0588ed\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee54b7d31a8dd0fbab1fa81081e54b0b9b07634c13934adaf08b23d2b6a84b89a\u003c/td\u003e\r\n\u003ctd\u003ec40acafac6c1c3ba1d1cf5497bfaf5f682f9884a\u003c/td\u003e\r\n\u003ctd\u003ea7542a2dc4dd52bd4c9b08741dc32ad7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb59a37f408fcfb8b8e7e001e875629998a570f4a5f652bcbb533ab4d30f243f7\u003c/td\u003e\r\n\u003ctd\u003ed1cf03da461f81822287465be5942931ac29737d\u003c/td\u003e\r\n\u003ctd\u003ed3ef032a67242789316e364f7e798ff4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eccdb8e0162796efe19128c0bac78478fd1ff2dc3382aed0c19b0f4bd99a31efc\u003c/td\u003e\r\n\u003ctd\u003e22bac40e845ec6551396b77e6257f50634993883\u003c/td\u003e\r\n\u003ctd\u003e7affcfb9857cc14dcc07fb8d226f03e0\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4dad1e908604c2faa4ad9d9ef3dcebc3a163e97398d41e5e398788fe8da2305b\u003c/td\u003e\r\n\u003ctd\u003e7cbaa1757bafa3a6be0793b959feac1ea73d88ff\u003c/td\u003e\r\n\u003ctd\u003ef749aa99a08fdc737f90813f174abb30\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4a89a4d9fa22f42c6d3e51cf8dca0881e34763fe0448b783599bfc00984fd2ee\u003c/td\u003e\r\n\u003ctd\u003ebd31d8bad119b9da702889b44854b054f15e2f47\u003c/td\u003e\r\n\u003ctd\u003e4489d5077c5d2396e3a94d652adae1ca\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e18a14cec1abcb9c02c1094271d89f428dec1896924a949ed760d38cd0dea7217\u003c/td\u003e\r\n\u003ctd\u003ea2e88dfb93c23ba7cd38a820b2e64f14192079c2\u003c/td\u003e\r\n\u003ctd\u003e8d6737d573ef70b47fd39a4c5a552e0f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch4\u003eNetwork Indicators\u003c/h4\u003e\r\n\u003ch5\u003e\u003cb\u003eLNK file attacks\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003ewww.comcleanner[.]info\u003c/p\u003e\r\n\u003cp\u003e45.76.6[.]149\u003c/p\u003e\r\n\u003cp\u003ehttp://zeplin.atwebpages[.]com/inter.php\u003c/p\u003e\r\n\u003cp\u003ehttp://goodhk.azurewebsites[.]net/inter.php\u003c/p\u003e\r\n\u003cp\u003ehttp://sixindent.epizy[.]com/inter.php\u003c/p\u003e\r\n\u003ch5\u003e\u003cb\u003eShellcode injectors\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003e6q4qp9trwi.dnslookup[.]services\u003c/p\u003e\r\n\u003cp\u003ed89o0gm34t.livehost[.]live\u003c/p\u003e\r\n\u003cp\u003ed89o0gm35t.livehost[.]live\u003c/p\u003e\r\n\u003cp\u003e168.106.1[.]1\u003c/p\u003e\r\n\u003cp\u003e149.28.152[.]196\u003c/p\u003e\r\n\u003cp\u003e207.148.99[.]56\u003c/p\u003e\r\n\u003cp\u003e149.28.84[.]98\u003c/p\u003e\r\n\u003ch5\u003e\u003cb\u003eShellcode loaders\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003eexchange.dumb1[.]com\u003c/p\u003e\r\n\u003cp\u003emicrosoftbooks.dynamic-dns[.]net\u003c/p\u003e\r\n\u003cp\u003emicrosoftdocs.dns05[.]com\u003c/p\u003e\r\n\u003cp\u003ens.microsoftdocs.dns05[.]com\u003c/p\u003e\r\n\u003cp\u003ens1.dns-dropbox[.]com\u003c/p\u003e\r\n\u003cp\u003ens2.dns-dropbox[.]com\u003c/p\u003e\r\n\u003cp\u003ens1.microsoftsonline[.]net\u003c/p\u003e\r\n\u003cp\u003ens2.microsoftsonline[.]net\u003c/p\u003e\r\n\u003cp\u003ens3.mlcrosoft[.]site\u003c/p\u003e\r\n\u003cp\u003eonenote.dns05[.]com\u003c/p\u003e\r\n\u003cp\u003eservice.dns22[.]ml\u003c/p\u003e\r\n\u003cp\u003eupdate.facebookdocs[.]com\u003c/p\u003e\r\n\u003cp\u003e104.224.169[.]214\u003c/p\u003e\r\n\u003cp\u003e107.182.24[.]70\u003c/p\u003e\r\n\u003cp\u003e107.182.24[.]70\u003c/p\u003e\r\n\u003cp\u003e149.248.8[.]134\u003c/p\u003e\r\n\u003cp\u003e149.28.23[.]32\u003c/p\u003e\r\n\u003cp\u003e176.122.162[.]149\u003c/p\u003e\r\n\u003cp\u003e45.76.75[.]219\u003c/p\u003e\r\n\u003cp\u003e66.42.103[.]222\u003c/p\u003e\r\n\u003cp\u003e66.42.107[.]133\u003c/p\u003e\r\n\u003cp\u003e66.42.48[.]186\u003c/p\u003e\r\n\u003cp\u003e66.98.126[.]203\u003c/p\u003e\r\n\u003ch5\u003e\u003cb\u003eFunnySwitch\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003e7hln9yr3y6.symantecupd[.]com\u003c/p\u003e\r\n\u003cp\u003edb311secsd.kasprsky[.]info\u003c/p\u003e\r\n\u003cp\u003edoc.goog1eweb[.]com\u003c/p\u003e\r\n\u003ch5\u003e\u003cb\u003eShadowPad\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003ecigy2jft92.kasprsky[.]info\u003c/p\u003e\r\n\u003cp\u003eupdate.ilastname[.]com\u003c/p\u003e\r\n\u003ch5\u003e\u003cb\u003ePlugX\u003c/b\u003e\u003c/h5\u003e\r\n\u003cp\u003ens.mircosoftbox[.]com\u003c/p\u003e\r\n\u003cp\u003ens.upgradsource[.]com\u003c/p\u003e\r\n\u003cp\u003eupdate.upgradsource[.]com\u003c/p\u003e\r\n\u003cp\u003e103.79.76[.]205\u003c/p\u003e\r\n\u003cp\u003e107.174.45[.]134\u003c/p\u003e\r\n\u003ch3 id=\"id10-3\"\u003e10.3 MITRE\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n    \u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eID\u003c/th\u003e\r\n\u003cth\u003eName\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eReconnaissance\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1593.001\u003c/td\u003e\r\n\u003ctd\u003eSearch Open Websites/Domains: Social Media\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses a Twitter account to get game-related information\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1594\u003c/td\u003e\r\n\u003ctd\u003eSearch Victim-Owned Websites\u003c/td\u003e\r\n\u003ctd\u003eWinnti finds the site of a gaming company and uses information from it to create bait\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eResource Development\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1583.001\u003c/td\u003e\r\n\u003ctd\u003eAcquire Infrastructure: Domains\u003c/td\u003e\r\n\u003ctd\u003eWinnti purchases domain names that resemble those of legitimate services, including the victim's site\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1583.006\u003c/td\u003e\r\n\u003ctd\u003eAcquire Infrastructure: Web Services\u003c/td\u003e\r\n\u003ctd\u003eWinnti can use GitHub and Google Docs for C2 updates\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1587.001\u003c/td\u003e\r\n\u003ctd\u003eDevelop Capabilities: Malware\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses self-developed malware in its attacks\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1587.003\u003c/td\u003e\r\n\u003ctd\u003eDevelop Capabilities: Digital Certificates\u003c/td\u003e\r\n\u003ctd\u003eWinnti creates self-signed certificates for use in HTTPS C2 traffic\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1588.001\u003c/td\u003e\r\n\u003ctd\u003eObtain Capabilities: Malware\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses PlugX in its attacks\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1588.002\u003c/td\u003e\r\n\u003ctd\u003eObtain Capabilities: Tool\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses Metasploit and Cobalt Strike in its attacks\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1588.003\u003c/td\u003e\r\n\u003ctd\u003eObtain Capabilities: Code Signing Certificates\u003c/td\u003e\r\n\u003ctd\u003eWinnti steals code signing certificates from compromised organizations\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1588.005\u003c/td\u003e\r\n\u003ctd\u003eObtain Capabilities: Exploits\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses a public exploit for remote code execution (RCE) by means of a CHM file\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eInitial Access\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1566.001\u003c/td\u003e\r\n\u003ctd\u003ePhishing: Spearphishing Attachment\u003c/td\u003e\r\n\u003ctd\u003eWinnti sends phishing messages with malicious attachments\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1566.002\u003c/td\u003e\r\n\u003ctd\u003ePhishing: Spearphishing Link\u003c/td\u003e\r\n\u003ctd\u003eWinnti sends phishing messages with malicious links\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eExecution\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1059.003\u003c/td\u003e\r\n\u003ctd\u003eCommand and Scripting Interpreter: Windows Command Shell\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses cmd.exe and .bat files to run commands\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1059.005\u003c/td\u003e\r\n\u003ctd\u003eCommand and Scripting Interpreter: Visual Basic\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses VBS files to pass control to subsequent malware stages\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1059.007\u003c/td\u003e\r\n\u003ctd\u003eCommand and Scripting Interpreter: JavaScript/JScript\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses malicious JScript code in intermediate stages and for the payload\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1203\u003c/td\u003e\r\n\u003ctd\u003eExploitation for Client Execution\u003c/td\u003e\r\n\u003ctd\u003eWinnti exploits RCE in a CHM file by means of an ActiveX object\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1106\u003c/td\u003e\r\n\u003ctd\u003eNative API\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses various WinAPI functions to run malicious shellcode in the current process or to inject it into another process\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1204.002\u003c/td\u003e\r\n\u003ctd\u003eUser Execution: Malicious File\u003c/td\u003e\r\n\u003ctd\u003eWinnti tries to make users run malicious .lnk, .chm, and .exe files\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003ePersistence\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1547.001\u003c/td\u003e\r\n\u003ctd\u003eBoot or Logon Autostart Execution: Registry Run Keys / Startup Folder\u003c/td\u003e\r\n\u003ctd\u003eWinnti persists by means of a registry run key or a startup folder\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1543.003\u003c/td\u003e\r\n\u003ctd\u003eCreate or Modify System Process: Windows Service\u003c/td\u003e\r\n\u003ctd\u003eWinnti persists on infected machines by creating new services\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1053.005\u003c/td\u003e\r\n\u003ctd\u003eScheduled Task/Job: Scheduled Task\u003c/td\u003e\r\n\u003ctd\u003eWinnti creates a task with schtasks for persistence\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eDefense evasion\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1140\u003c/td\u003e\r\n\u003ctd\u003eDeobfuscate/Decode Files or Information\u003c/td\u003e\r\n\u003ctd\u003eTo store shellcode with the payload, Winnti uses a custom PL format with encryption\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1574.002\u003c/td\u003e\r\n\u003ctd\u003eHijack Execution Flow: DLL Side-Loading\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses legitimate utilities to load DLLs from ShadowPad and PlugX\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1562.004\u003c/td\u003e\r\n\u003ctd\u003eImpair Defenses: Disable or Modify System Firewall\u003c/td\u003e\r\n\u003ctd\u003eFunnySwitch adds allow rules to Windows Firewall for C2 connections\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1070\u003c/td\u003e\r\n\u003ctd\u003eIndicator Removal on Host\u003c/td\u003e\r\n\u003ctd\u003eParanoid PlugX deletes artifacts created during infection from the file system and registry\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1202\u003c/td\u003e\r\n\u003ctd\u003eIndirect Command Execution\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses intermediate VBS scripts to run .bat files\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1027.002\u003c/td\u003e\r\n\u003ctd\u003eObfuscated Files or Information: Software Packing\u003c/td\u003e\r\n\u003ctd\u003eWinnti can use VMProtect or custom packers for its malware\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1055.002\u003c/td\u003e\r\n\u003ctd\u003eProcess Injection: Portable Executable Injection\u003c/td\u003e\r\n\u003ctd\u003eWinnti injects shellcode into the processes explorer.exe, winlogon.exe, wmplayer.exe, svchost.exe, and spoolsv.exe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1218.001\u003c/td\u003e\r\n\u003ctd\u003eSigned Binary Proxy Execution: Compiled HTML File\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses CHM files containing malicious code\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1218.004\u003c/td\u003e\r\n\u003ctd\u003eSigned Binary Proxy Execution: InstallUtil\u003c/td\u003e\r\n\u003ctd\u003eParanoid PlugX can use InstallUtil to run a malicious .NET assembly\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1553.002\u003c/td\u003e\r\n\u003ctd\u003eSubvert Trust Controls: Code Signing\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses stolen certificates to sign its malware\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eDiscovery\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1082\u003c/td\u003e\r\n\u003ctd\u003eSystem Information Discovery\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors collect information about the computer name and OS version and whether it is 32-bit or 64-bit\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1016\u003c/td\u003e\r\n\u003ctd\u003eSystem Network Configuration Discovery\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors collect information about the IP and MAC addresses of the infected machine\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1033\u003c/td\u003e\r\n\u003ctd\u003eSystem Owner/User Discovery\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors collect information about the name of the current user\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eCollection\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1119\u003c/td\u003e\r\n\u003ctd\u003eAutomated Collection\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors automatically collect information about the infected machine\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eCommand and Control\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1071.001\u003c/td\u003e\r\n\u003ctd\u003eApplication Layer Protocol: Web Protocols\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors can use HTTP/HTTPS for C2 connections\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1132.001\u003c/td\u003e\r\n\u003ctd\u003eData Encoding: Standard Encoding\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses GZip for compressing FunnySwitch data\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1001.003\u003c/td\u003e\r\n\u003ctd\u003eData Obfuscation: Protocol Impersonation\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses FakeTLS in Crosswalk traffic\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1573.001\u003c/td\u003e\r\n\u003ctd\u003eEncrypted Channel: Symmetric Cryptography\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses AES for encrypting traffic in its backdoors\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1008\u003c/td\u003e\r\n\u003ctd\u003eFallback Channels\u003c/td\u003e\r\n\u003ctd\u003eThe Winnti configuration supports indicating multiple C2 servers of various types\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1095\u003c/td\u003e\r\n\u003ctd\u003eNon-Application Layer Protocol\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors can use TCP and UDP for C2 connections\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1090.001\u003c/td\u003e\r\n\u003ctd\u003eProxy: Internal Proxy\u003c/td\u003e\r\n\u003ctd\u003eFunnySwitch can establish C2 connections via a peer-to-peer network of infected hosts\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1090.002\u003c/td\u003e\r\n\u003ctd\u003eProxy: External Proxy\u003c/td\u003e\r\n\u003ctd\u003eWinnti backdoors support C2 connections via an external HTTP/SOCKS proxy\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1102.001\u003c/td\u003e\r\n\u003ctd\u003eWeb Service: Dead Drop Resolver\u003c/td\u003e\r\n\u003ctd\u003eWinnti uses Google Docs for updating the C2 address in PlugX\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003c/article\u003e","title":"Higaisa or Winnti? APT41 backdoors, old and new","date":"2021-01-13T21:00:00.000Z","slug":"higaisa-or-winnti-apt-41-backdoors-old-and-new","file":"","titleOfHelpfulFiles":"","helpfulFiles":[]},"footerData":{"title":"Cybersecurity market leader","copyright":"Copyright \u003cmark\u003e©\u003c/mark\u003e 2002–2024 Positive Technologies. All rights reserved.","products":{"title":"Products","navItems":[{"name":"PT NAD","link":"/products/network-attack-discovery"},{"name":"PT Threat Intelligence Feeds","link":"/products/threat-intelligence-feeds"},{"name":"PT Sandbox","link":"/products/sandbox"},{"name":"MaxPatrol VM","link":"/products/maxpatrol-vm"},{"name":"MaxPatrol SIEM","link":"/products/siem"},{"name":"PT Application Inspector","link":"/products/ai"},{"name":"PT BlackBox","link":"/products/blackbox"},{"name":"PT ISIM","link":"/products/isim"},{"name":"MaxPatrol O2","link":"/products/mp-o2"},{"name":"MaxPatrol EDR","link":"/products/edr"},{"name":"PT Application Firewall","link":"/products/pt-af"},{"name":"PT Container Security","link":"/products/cs"},{"name":"PT Industrial Cybersecurity Suite","link":"/products/ics"}]},"company":{"title":"ANALYTICS","navItems":[{"name":"Analytics articles","link":"/analytics"},{"name":"Knowledge base","link":"/analytics/knowledge-base"},{"name":"PT ESC threat intelligence","link":"/analytics/pt-esc-threat-intelligence"},{"name":"Threatscape","link":"/analytics/threatscape"},{"name":"Hacker groups","link":"/analytics/hacker-groups"}]},"social":{"title":"COMPANY","navItems":[{"name":"About us","link":"/about"},{"name":"Clients","link":"/about/clients"},{"name":"Contacts","link":"/about/contacts"},{"name":"PT in the Media","link":"/about/pt-in-the-media"},{"name":"Education","link":"https://edu.ptsecurity.com/learning-space"},{"name":"YouTube","link":"https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ"},{"name":"Vacancy","link":"https://vacancy.global.ptsecurity.com/"}]},"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg","width":1200,"height":100,"alt":""},"legalDocsLink":{"id":61,"text":"Legal documents","link":"https://global.ptsecurity.com/policies/terms-of-use","targetBlank":true}},"anyQuestionsData":{"selectProductOptions":[{"value":"network-attack-discovery","label":"PT NAD","crmId":"3212ea27-d047-42f9-9da3-9ef5233634bb"},{"value":"threat-intelligence-feeds","label":"PT Threat Intelligence Feeds","crmId":""},{"value":"sandbox","label":"PT Sandbox","crmId":"5addae27-2762-4a89-8b58-e247ab1e71dc"},{"value":"maxpatrol-vm","label":"MaxPatrol VM","crmId":"e5ffe330-69bf-4344-b0b0-c228de0f6f83"},{"value":"siem","label":"MaxPatrol SIEM","crmId":"0c54a201-09a7-4dc9-b3ca-1ce61715388b"},{"value":"ai","label":"PT Application Inspector","crmId":"4c2c50e6-2b8c-4c1e-a2da-f6423ece496b"},{"value":"blackbox","label":"PT BlackBox","crmId":"081eb4e2-54c2-4ce5-b171-d7dcaecc1c1f"},{"value":"isim","label":"PT ISIM","crmId":"67a72950-2d9c-47a1-8bb8-49540356da8f"},{"value":"mp-o2","label":"MaxPatrol O2","crmId":"29563721-4ec7-4e5b-8a48-f3674ab70749"},{"value":"edr","label":"MaxPatrol EDR","crmId":"c667eb61-0b7a-457c-991c-43b83504a7ed"},{"value":"pt-af","label":"PT Application Firewall","crmId":"b6b16deb-0ceb-4318-b947-fd238d7a9935"},{"value":"cs","label":"PT Container Security","crmId":"2df38b89-5d1f-4a0d-8be4-76ea9f8d2e30"},{"value":"ics","label":"PT Industrial Cybersecurity Suite","crmId":""}],"title":"Get in touch","description":"Fill in the form and our specialists\u003cbr/\u003e will contact you shortly","feedback":{"title":"General\u003cbr/\u003e questions","description":"We're happy to answer any questions you may have.","fieldName":"Name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you soon."},"partnership":{"title":"Partnership","description":"Join us in making the world a safer place.","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldAddress":"Address","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."},"pilotApplication":{"title":"Pilot\u003cbr/\u003e application","description":"Test drive our solutions with a customized pilot program.","fieldProduct":"Select a product","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."}},"sidebarData":{"widgets":[{"kind":"analytics-articles","data":{"title":"Analytics articles","link":"/analytics","withFlag":true,"items":[{"text":"Cyberthreats evolve while forecasts signal more sophisticated risks ahead","link":"/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead","targetBlank":true,"publishedDate":"2025-01-07T00:00:00.000Z"},{"text":"Trending vulnerability digest November 2024","link":"/analytics/trending-vulnerability-digest-november-2024","targetBlank":true,"publishedDate":"2024-12-26T00:00:00.000Z"},{"text":"Artificial intelligence in cyberattacks","link":"/analytics/artificial-intelligence-in-cyberattacks","targetBlank":true,"publishedDate":"2024-12-10T00:00:00.000Z"}]}},{"kind":"ad-banner","data":{"title":"What are the security threats on your network?","subtitle":"Check your traffic-for free","backgroundColor":null,"image":{"src":"https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png","width":542,"height":822,"alt":""},"actionProps":{"label":"Request pilot","href":"#contacts","isExternal":false}}}]},"_sentryTraceData":"577cc1ddc89043a0ae42027b7945f5b4-aded29131523444d-1","_sentryBaggage":"sentry-environment=production,sentry-release=39FkjQp2g8LNEtWCuedET,sentry-public_key=98e9d1bba200933ad4e97a71f2de0390,sentry-trace_id=577cc1ddc89043a0ae42027b7945f5b4,sentry-sample_rate=1,sentry-transaction=%2Fanalytics%2Fpt-esc-threat-intelligence%2F%5Bslug%5D,sentry-sampled=true"},"__N_SSP":true},"page":"/analytics/pt-esc-threat-intelligence/[slug]","query":{"slug":"higaisa-or-winnti-apt-41-backdoors-old-and-new"},"buildId":"39FkjQp2g8LNEtWCuedET","isFallback":false,"gssp":true,"locale":"en","locales":["en","es","pt"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>