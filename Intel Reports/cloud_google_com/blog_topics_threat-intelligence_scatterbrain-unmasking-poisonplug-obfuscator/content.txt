<!doctype html><html lang="en-US" dir="ltr"><head><base href="https://cloud.google.com/blog/"><link rel="preconnect" href="//www.gstatic.com"><meta name="referrer" content="origin"><meta name="viewport" content="initial-scale=1, width=device-width"><meta name="track-metadata-page_hosting_platform" content="blog_boq"><meta name="mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="application-name" content="Google Cloud Blog"><meta name="apple-mobile-web-app-title" content="Google Cloud Blog"><meta name="apple-mobile-web-app-status-bar-style" content="black"><meta name="msapplication-tap-highlight" content="no"><link rel="preconnect" href="//fonts.googleapis.com"><link rel="preconnect" href="//fonts.gstatic.com"><link rel="preconnect" href="//www.gstatic.com"><link rel="preconnect" href="//storage.googleapis.com"><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Google+Sans+Text_old:400,500,700,400i,500i,700i"><link rel="manifest" crossorigin="use-credentials" href="_/TransformBlogUi/manifest.json"><link rel="home" href="/?lfhs=2"><link rel="msapplication-starturl" href="/?lfhs=2"><link rel="icon" href="//www.gstatic.com/cloud/images/icons/favicon.ico" sizes="32x32"><link rel="apple-touch-icon-precomposed" href="//www.gstatic.com/cloud/images/icons/favicon.ico" sizes="32x32"><link rel="msapplication-square32x32logo" href="//www.gstatic.com/cloud/images/icons/favicon.ico" sizes="32x32"><script data-id="_gd" nonce="7Hibp_PLMbjEvbm9bu7mWQ">window.WIZ_global_data = {"Bwo7Jf":"%.@.\"US\",4]","CGQM5":"%.@.[[1]]]","DpimGf":false,"EP1ykd":["/_/*","/accounts/*","/transform","/transform/*"],"FdrFJe":"-9218519135884434017","Im6cmf":"/blog/_/TransformBlogUi","JvMKJd":"%.@.\"GTM-5CVQBG\",[[\"en\",\"\\u202aEnglish\\u202c\",true,\"en\"],[\"de\",\"\\u202aDeutsch\\u202c\",true,\"de\"],[\"es\",\"\\u202aEspañol\\u202c\",true,\"es\"],[\"es-419\",\"\\u202aEspañol (Latinoamérica)\\u202c\",true,\"es-419\"],[\"fr\",\"\\u202aFrançais\\u202c\",true,\"fr\"],[\"id\",\"\\u202aIndonesia\\u202c\",true,\"id\"],[\"it\",\"\\u202aItaliano\\u202c\",true,\"it\"],[\"pt-BR\",\"\\u202aPortuguês (Brasil)\\u202c\",true,\"pt-BR\"],[\"zh-CN\",\"\\u202a简体中文\\u202c\",true,\"zh-Hans\"],[\"zh-TW\",\"\\u202a繁體中文\\u202c\",true,\"zh-Hant\"],[\"ja\",\"\\u202a日本語\\u202c\",true,\"ja\"],[\"ko\",\"\\u202a한국어\\u202c\",true,\"ko\"]],[\"83405\",\"AIzaSyD3LJeW4Q6gtdgJlyeFZUp-GhpIoc6EUeg\"],\"en\",null,null,[],[[\"https://cloud.google.com/innovators\",\"https://cloud.google.com/innovators/plus/activate\",\"https://cloud.google.com/innovators/innovatorsplus\"],[\"https://workspace.google.com/pricing\",\"https://www.x.com/googleworkspace\",\"https://www.facebook.com/googleworkspace\",\"https://www.youtube.com/channel/UCBmwzQnSoj9b6HzNmFrg_yw\",\"https://www.instagram.com/googleworkspace\",\"https://www.linkedin.com/showcase/googleworkspace\",\"https://about.google/?utm_source\\u003dworkspace.google.com\\u0026utm_medium\\u003dreferral\\u0026utm_campaign\\u003dgsuite-footer-en\",\"https://about.google/products/?tip\\u003dexplore\",\"https://workspace.google.com\",\"https://workspace.google.com/contact/?source\\u003dgafb-form-globalnav-en\",\"https://workspace.google.com/business/signup/welcome?hl\\u003den\\u0026source\\u003dgafb-form-globalnav-en\",\"https://workspace.google.com/blog\"],[\"https://www.cloudskillsboost.google\",\"https://www.cloudskillsboost.google?utm_source\\u003dcgc\\u0026utm_medium\\u003dwebsite\\u0026utm_campaign\\u003devergreen\",\"https://www.cloudskillsboost.google/subscriptions?utm_source\\u003dcgc\\u0026utm_medium\\u003dwebsite\\u0026utm_campaign\\u003devergreenlaunchpromo\",\"https://www.cloudskillsboost.google/subscriptions?utm_source\\u003dcgc\\u0026utm_medium\\u003dwebsite\\u0026utm_campaign\\u003devergreen\",\"https://www.cloudskillsboost.google/catalog?utm_source\\u003dcgc\\u0026utm_medium\\u003dwebsite\\u0026utm_campaign\\u003devergreen\",\"https://www.cloudskillsboost.google/paths?utm_source\\u003dcgc\\u0026utm_medium\\u003dwebsite\\u0026utm_campaign\\u003devergreen\"],[\"https://mapsplatform.google.com\"],[\"https://cloud.google.com/developers\",\"https://cloud.google.com/developers/settings?utm_source\\u003dinnovators\"],[\"https://console.cloud.google.com/freetrial\",\"https://console.cloud.google.com/\",\"https://console.cloud.google.com/freetrial?redirectPath\\u003dhttps://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator/\"],[\"https://aitestkitchen.withgoogle.com/signup\",\"https://blog.google/technology/ai/join-us-in-the-ai-test-kitchen/\",\"https://cloud.google.com/ai\"],[\"https://googlecloudplatform.blogspot.com/\",\"https://github.com/GoogleCloudPlatform\",\"https://www.linkedin.com/company/google-cloud\",\"https://twitter.com/googlecloud\",\"https://www.facebook.com/googlecloud\"]],[2025,1,30],[[\"en\",\"x-default\"],\"x-default\"],[null,true],null,\"/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator/?hl\\u003den\",[\"6LcsrxUqAAAAAFhpR1lXsPN2j2nsTwy6JTbRKzJr\"]]","LVIXXb":1,"LoQv7e":false,"M55kSc":"%.@.]","MT7f9b":[],"MUE6Ne":"TransformBlogUi","PylxI":"%.@.\"cloudblog\",\"topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator\",[\"en\",\"de\",\"fr\",\"ko\",\"ja\"],\"en\",null,\"https://cloud.google.com/blog\",\"blog_article\",\"cloud.google.com\",[\"https://console.cloud.google.com/freetrial/\",\"https://cloud.google.com/contact/\",\"https://cloud.google.com/\",\"https://cloud.google.com/blog\",\"https://cloud.google.com/\",\"https://www.google.com/\",\"https://cloud.google.com/products/\",\"https://about.google.com/products/\",\"https://about.google/intl/en/\",\"https://support.google.com\"],[\"googlecloud\",\"googlecloud\",\"showcase/google-cloud\",\"googlecloud/\",\"googlecloud/\"],true]","QrtxK":"","S06Grb":"","S6lZl":105833389,"TSDtV":"%.@.[[null,[[45532645,null,true,null,null,null,\"wFnpse\"],[45449433,null,true,null,null,null,\"BotAtd\"],[45662378,null,true,null,null,null,\"DG71uf\"],[45449449,null,true,null,null,null,\"b5B1L\"],[45671693,null,false,null,null,null,\"U3qtXc\"],[45646404,null,false,null,null,null,\"tfPPe\"],[45651445,null,true,null,null,null,\"XzXOC\"],[45631885,null,false,null,null,null,\"kG32O\"],[45449445,null,true,null,null,null,\"C4H3Td\"],[45649370,null,true,null,null,null,\"LibkZ\"],[45657332,null,true,null,null,null,\"oBUucf\"],[45449438,null,false,null,null,null,\"m0uJSe\"],[45675648,null,false,null,null,null,\"QQ53xf\"],[45449467,null,null,null,\"variant2\",null,\"qL2Vf\"],[45672660,null,false,null,null,null,\"yquuPe\"],[45449469,null,null,null,\"default\",null,\"mBNY1\"],[45449434,null,true,null,null,null,\"PvZHQ\"],[45664077,null,false,null,null,null,\"w1axY\"],[45449423,null,null,null,\"default\",null,\"FIJFKf\"],[45449435,null,false,null,null,null,\"s7Z7Ld\"],[45659313,null,true,null,null,null,\"i2rGv\"],[45532646,null,true,null,null,null,\"RIvlU\"],[45449439,null,true,null,null,null,\"lsuui\"],[45650156,null,false,null,null,null,\"Pr5Lcf\"],[45651724,null,true,null,null,null,\"xYDLRc\"],[45672575,null,true,null,null,null,\"XvhzSc\"],[45449444,null,true,null,null,null,\"HGJqie\"],[45663526,null,false,null,null,null,\"kG33G\"],[45449436,null,false,null,null,null,\"NCoWOd\"],[45667527,null,false,null,null,null,\"Qzt9sd\"],[45449424,null,null,null,\"default\",null,\"PB4oCc\"],[45643590,null,false,null,null,null,\"w7jzef\"],[45674523,null,false,null,null,null,\"EB3TEf\"],[45449442,null,true,null,null,null,\"dsKk4d\"],[45672570,null,true,null,null,null,\"N2GVqc\"],[45663339,null,true,null,null,null,\"OEmSkb\"],[45664956,null,false,null,null,null,\"aeNUHe\"],[45459555,null,false,null,null,null,\"Imeoqb\"],[45449440,null,false,null,null,null,\"j9nUqf\"],[45449471,null,null,null,\"default\",null,\"Ammqqf\"],[45612748,null,false,null,null,null,\"fdXYmb\"],[45671281,null,false,null,null,null,\"TQUxrf\"],[45449443,null,false,null,null,null,\"wvKxS\"],[45616194,null,false,null,null,null,\"y3jdm\"],[45449428,null,null,null,\"default\",null,\"cbPi4d\"],[45449450,null,false,null,null,null,\"PTNaKe\"],[45449446,null,true,null,null,null,\"ktxJzc\"],[45449468,null,null,null,\"variant1\",null,\"BUEcUe\"],[45672461,null,false,null,null,null,\"Nf7gI\"],[45449422,null,null,null,\"default\",null,\"epsxQe\"],[45628378,null,true,null,null,null,\"hRRuzd\"],[45662552,null,false,null,null,null,\"epuB3d\"],[45655733,null,true,null,null,null,\"xPTOyb\"]],\"CAMSJB0l5c2IEJj+BPXvF/2KA82ttBLx8+UGFsXHEv1okvAGtMADWw\\u003d\\u003d\"]]]","UUFaWc":"%.@.null,1000,2]","Vvafkd":false,"Yllh3e":"%.@.1738281862690108,135713426,2601022149]","aAofAd":"%.@.[[[\"Solutions \\u0026 technology\",null,[[[\"AI \\u0026 Machine Learning\",\"/blog/products/ai-machine-learning\"],[\"API Management\",\"/blog/products/api-management\"],[\"Application Development\",\"/blog/products/application-development\"],[\"Application Modernization\",\"/blog/products/application-modernization\"],[\"Chrome Enterprise\",\"/blog/products/chrome-enterprise\"],[\"Compute\",\"/blog/products/compute\"],[\"Containers \\u0026 Kubernetes\",\"/blog/products/containers-kubernetes\"],[\"Data Analytics\",\"/blog/products/data-analytics\"],[\"Databases\",\"/blog/products/databases\"],[\"DevOps \\u0026 SRE\",\"/blog/products/devops-sre\"],[\"Maps \\u0026 Geospatial\",\"/blog/topics/maps-geospatial\"],[\"Security\",null,[[[\"Security \\u0026 Identity\",\"/blog/products/identity-security\"],[\"Threat Intelligence\",\"/blog/topics/threat-intelligence\"]]]],[\"Infrastructure\",\"/blog/products/infrastructure\"],[\"Infrastructure Modernization\",\"/blog/products/infrastructure-modernization\"],[\"Networking\",\"/blog/products/networking\"],[\"Productivity \\u0026 Collaboration\",\"/blog/products/productivity-collaboration\"],[\"SAP on Google Cloud\",\"/blog/products/sap-google-cloud\"],[\"Storage \\u0026 Data Transfer\",\"/blog/products/storage-data-transfer\"],[\"Sustainability\",\"/blog/topics/sustainability\"]]]],[\"Ecosystem\",null,[[[\"IT Leaders\",\"/transform\"],[\"Industries\",null,[[[\"Financial Services\",\"/blog/topics/financial-services\"],[\"Healthcare \\u0026 Life Sciences\",\"/blog/topics/healthcare-life-sciences\"],[\"Manufacturing\",\"/blog/topics/manufacturing\"],[\"Media \\u0026 Entertainment\",\"/blog/products/media-entertainment\"],[\"Public Sector\",\"/blog/topics/public-sector\"],[\"Retail\",\"/blog/topics/retail\"],[\"Supply Chain\",\"/blog/topics/supply-chain-logistics\"],[\"Telecommunications\",\"/blog/topics/telecommunications\"]]]],[\"Partners\",\"/blog/topics/partners\"],[\"Startups \\u0026 SMB\",\"/blog/topics/startups\"],[\"Training \\u0026 Certifications\",\"/blog/topics/training-certifications\"],[\"Inside Google Cloud\",\"/blog/topics/inside-google-cloud\"],[\"Google Cloud Next \\u0026 Events\",\"/blog/topics/google-cloud-next\"],[\"Google Maps Platform\",\"https://mapsplatform.google.com/resources/blog/\"],[\"Google Workspace\",\"https://workspace.google.com/blog\"]]]],[\"Developers \\u0026 Practitioners\",\"/blog/topics/developers-practitioners\"],[\"Transform with Google Cloud\",\"/transform\"]]],[[\"de\",[[[\"Neuigkeiten\",\"/blog/de/topics/whats-new/aktuelles-auf-dem-google-cloud-blog\"],[\"Lösungen \\u0026 Technologien\",null,[[[\"Anwendungsentwicklung\",\"/blog/de/products/application-development\"],[\"Anwendungsmodernisierung\",\"/blog/de/products/anwendungsmodernisierung\"],[\"API-Verwaltung\",\"/blog/de/products/api-management\"],[\"Chrome Enterprise\",\"/blog/de/products/chrome-enterprise\"],[\"Computing\",\"/blog/de/products/compute\"],[\"Containers \\u0026 Kubernetes\",\"/blog/de/products/containers-kubernetes\"],[\"Datenanalysen\",\"/blog/de/products/data-analytics\"],[\"Datenbanken\",\"/blog/de/products/databases\"],[\"DevOps \\u0026 SRE\",\"/blog/de/products/devops-sre\"],[\"Infrastruktur\",\"/blog/de/products/infrastructure\"],[\"KI \\u0026 Machine Learning\",\"/blog/de/products/ai-machine-learning\"],[\"Maps \\u0026 Geospatial\",\"/blog/de/topics/maps-geospatial\"],[\"Modernisierung der Infrastruktur\",\"/blog/de/products/modernisierung-der-infrastruktur\"],[\"Nachhaltigkeit\",\"/blog/de/topics/nachhaltigkeit\"],[\"Netzwerk\",\"/blog/de/products/networking\"],[\"Produktivität und Zusammenarbeit\",\"/blog/de/products/produktivitaet-und-kollaboration\"],[\"SAP in Google Cloud\",\"/blog/de/products/sap-google-cloud\"],[\"Sicherheit \\u0026 Identität\",\"/blog/de/products/identity-security\"],[\"Speicher und Datentransfer\",\"/blog/de/products/storage-data-transfer\"]]]],[\"Ökosystem\",null,[[[\"IT Leader\",\"/transform/de\"],[\"Industrien\",null,[[[\"Behörden und öffentlicher Sektor\",\"/blog/de/topics/public-sector\"],[\"Einzelhandel\",\"/blog/de/topics/retail\"],[\"Fertigung\",\"/blog/de/topics/fertigung\"],[\"Finanzdienstleistungen\",\"/blog/de/topics/financial-services\"],[\"Gesundheitswesen und Biowissenschaften\",\"/blog/de/topics/healthcare-life-sciences\"],[\"Lieferkette und Logistik\",\"/blog/de/topics/lieferkette-und-logistik\"],[\"Medien und Unterhaltung\",\"/blog/de/products/media-entertainment\"],[\"Telekommunikation\",\"/blog/de/topics/telecommunications\"]]]],[\"Entwickler*innen \\u0026 Fachkräfte\",\"/blog/de/topics/developers-practitioners\"],[\"Google Cloud Next \\u0026 Events\",\"/blog/de/topics/events\"],[\"Google Maps Platform\",\"/blog/de/products/maps-platform\"],[\"Google Workspace\",\"https://workspace.google.com/blog/de\"],[\"Inside Google Cloud\",\"/blog/de/topics/inside-google-cloud\"],[\"Kunden\",\"/blog/de/topics/kunden\"],[\"Partner\",\"/blog/de/topics/partners\"],[\"Start-ups und KMU\",\"/blog/de/topics/startups\"],[\"Training und Zertifizierung\",\"/blog/de/topics/training-certifications\"]]]],[\"Transformation mit Google Cloud\",\"/transform/de\"]]]],[\"en\",[[[\"Solutions \\u0026 technology\",null,[[[\"AI \\u0026 Machine Learning\",\"/blog/products/ai-machine-learning\"],[\"API Management\",\"/blog/products/api-management\"],[\"Application Development\",\"/blog/products/application-development\"],[\"Application Modernization\",\"/blog/products/application-modernization\"],[\"Chrome Enterprise\",\"/blog/products/chrome-enterprise\"],[\"Compute\",\"/blog/products/compute\"],[\"Containers \\u0026 Kubernetes\",\"/blog/products/containers-kubernetes\"],[\"Data Analytics\",\"/blog/products/data-analytics\"],[\"Databases\",\"/blog/products/databases\"],[\"DevOps \\u0026 SRE\",\"/blog/products/devops-sre\"],[\"Maps \\u0026 Geospatial\",\"/blog/topics/maps-geospatial\"],[\"Security\",null,[[[\"Security \\u0026 Identity\",\"/blog/products/identity-security\"],[\"Threat Intelligence\",\"/blog/topics/threat-intelligence\"]]]],[\"Infrastructure\",\"/blog/products/infrastructure\"],[\"Infrastructure Modernization\",\"/blog/products/infrastructure-modernization\"],[\"Networking\",\"/blog/products/networking\"],[\"Productivity \\u0026 Collaboration\",\"/blog/products/productivity-collaboration\"],[\"SAP on Google Cloud\",\"/blog/products/sap-google-cloud\"],[\"Storage \\u0026 Data Transfer\",\"/blog/products/storage-data-transfer\"],[\"Sustainability\",\"/blog/topics/sustainability\"]]]],[\"Ecosystem\",null,[[[\"IT Leaders\",\"/transform\"],[\"Industries\",null,[[[\"Financial Services\",\"/blog/topics/financial-services\"],[\"Healthcare \\u0026 Life Sciences\",\"/blog/topics/healthcare-life-sciences\"],[\"Manufacturing\",\"/blog/topics/manufacturing\"],[\"Media \\u0026 Entertainment\",\"/blog/products/media-entertainment\"],[\"Public Sector\",\"/blog/topics/public-sector\"],[\"Retail\",\"/blog/topics/retail\"],[\"Supply Chain\",\"/blog/topics/supply-chain-logistics\"],[\"Telecommunications\",\"/blog/topics/telecommunications\"]]]],[\"Partners\",\"/blog/topics/partners\"],[\"Startups \\u0026 SMB\",\"/blog/topics/startups\"],[\"Training \\u0026 Certifications\",\"/blog/topics/training-certifications\"],[\"Inside Google Cloud\",\"/blog/topics/inside-google-cloud\"],[\"Google Cloud Next \\u0026 Events\",\"/blog/topics/google-cloud-next\"],[\"Google Maps Platform\",\"https://mapsplatform.google.com/resources/blog/\"],[\"Google Workspace\",\"https://workspace.google.com/blog\"]]]],[\"Developers \\u0026 Practitioners\",\"/blog/topics/developers-practitioners\"],[\"Transform with Google Cloud\",\"/transform\"]]]],[\"fr\",[[[\"Les tendances\",\"/blog/fr/topics/les-tendances/quelles-sont-les-nouveautes-de-google-cloud\"],[\"Solutions et Technologie\",null,[[[\"Analyse de données\",\"/blog/fr/products/analyse-de-donnees/\"],[\"Bases de données\",\"/blog/fr/products/databases\"],[\"Calcul\",\"/blog/fr/products/calcul/\"],[\"Chrome Entreprise\",\"/blog/fr/products/chrome-enterprise/\"],[\"Conteneurs et Kubernetes\",\"/blog/fr/products/conteneurs-et-kubernetes/\"],[\"Développement d\u0027Applications\",\"/blog/fr/products/application-development\"],[\"Développement durable\",\"/blog/fr/topics/developpement-durable\"],[\"DevOps et ingénierie SRE\",\"/blog/fr/products/devops-sre\"],[\"Gestion des API\",\"/blog/fr/products/api-management\"],[\"IA et Machine Learning\",\"/blog/fr/products/ai-machine-learning\"],[\"Infrastructure\",\"/blog/fr/products/infrastructure\"],[\"Maps et Géospatial\",\"/blog/fr/topics/maps-geospatial\"],[\"Modernisation d\u0027Applications\",\"/blog/fr/products/modernisation-dapplications/\"],[\"Modernisation d\u0027Infrastructure\",\"/blog/fr/products/modernisation-dinfrastructure/\"],[\"Networking\",\"/blog/fr/products/networking\"],[\"Productivité et Collaboration\",\"/blog/fr/products/productivite-et-collaboration\"],[\"SAP sur Google Cloud\",\"/blog/fr/products/sap-google-cloud\"],[\"Sécurité et Identité\",\"/blog/fr/products/identity-security\"],[\"Stockage et transfert de données\",\"/blog/fr/products/storage-data-transfer\"]]]],[\"Écosystème\",null,[[[\"Responsables IT\",\"/transform/fr\"],[\"Industries\",null,[[[\"Commerce\",\"/blog/fr/topics/retail\"],[\"Manufacturing\",\"/blog/fr/topics/manufacturing\"],[\"Médias et Divertissement\",\"/blog/fr/products/media-entertainment\"],[\"Santé\",\"/blog/fr/topics/healthcare-life-sciences\"],[\"Secteur Public\",\"/blog/fr/topics/public-sector\"],[\"Services Financiers\",\"/blog/fr/topics/financial-services\"],[\"Supply Chain\",\"/blog/fr/topics/supply-chain/\"],[\"Telecommunications\",\"/blog/fr/topics/telecommunications\"]]]],[\"Clients\",\"/blog/fr/topics/clients/\"],[\"Développeurs et professionnels\",\"/blog/fr/topics/developers-practitioners\"],[\"Formations et certifications\",\"/blog/fr/topics/training-certifications\"],[\"Google Cloud Next et Événements\",\"/blog/fr/topics/evenements\"],[\"Google Maps Platform\",\"/blog/fr/products/maps-platform\"],[\"Google Workspace\",\"https://workspace.google.com/blog/fr\"],[\"Inside Google Cloud\",\"/blog/fr/topics/inside-google-cloud\"],[\"Partenaires\",\"/blog/fr/topics/partners\"],[\"Start-ups et PME\",\"/blog/fr/topics/startups\"]]]],[\"Transformer avec Google Cloud\",\"/transform/fr\"]]]],[\"ja\",[[[\"ソリューションとテクノロジー\",null,[[[\"AI \\u0026 機械学習\",\"/blog/ja/products/ai-machine-learning\"],[\"API 管理\",\"/blog/ja/products/api-management\"],[\"アプリケーション開発\",\"/blog/ja/products/application-development\"],[\"アプリケーション モダナイゼーション\",\"/blog/ja/products/application-modernization\"],[\"Chrome Enterprise\",\"/blog/ja/products/chrome-enterprise\"],[\"コンピューティング\",\"/blog/ja/products/compute\"],[\"Containers \\u0026 Kubernetes\",\"/blog/ja/products/containers-kubernetes\"],[\"データ分析\",\"/blog/ja/products/data-analytics\"],[\"データベース\",\"/blog/ja/products/databases\"],[\"DevOps \\u0026 SRE\",\"/blog/ja/products/devops-sre\"],[\"Maps \\u0026 Geospatial\",\"/blog/ja/products/maps-platform\"],[\"セキュリティ\",null,[[[\"セキュリティ \\u0026 アイデンティティ\",\"/blog/ja/products/identity-security\"],[\"脅威インテリジェンス\",\"/blog/ja/topics/threat-intelligence\"]]]],[\"インフラストラクチャ\",\"/blog/ja/products/infrastructure\"],[\"インフラ モダナイゼーション\",\"/blog/ja/products/infrastructure-modernization\"],[\"ネットワーキング\",\"/blog/ja/products/networking\"],[\"生産性とコラボレーション\",\"/blog/ja/products/productivity-collaboration\"],[\"Google Cloud での SAP\",\"/blog/ja/products/sap-google-cloud\"],[\"ストレージとデータ転送\",\"/blog/ja/products/storage-data-transfer\"],[\"サステナビリティ\",\"/blog/ja/topics/sustainability\"]]]],[\"エコシステム\",null,[[[\"ITリーダー\",\"/transform/ja\"],[\"業種\",null,[[[\"金融サービス\",\"/blog/ja/topics/financial-services\"],[\"ヘルスケア、ライフ サイエンス\",\"/blog/ja/topics/healthcare-life-sciences\"],[\"製造\",\"/blog/ja/topics/manufacturing\"],[\"メディア、エンターテイメント\",\"/blog/ja/products/media-entertainment\"],[\"公共部門\",\"/blog/ja/topics/public-sector\"],[\"小売業\",\"/blog/ja/topics/retail\"],[\"サプライ チェーン\",\"/blog/ja/topics/supply-chain-logistics\"],[\"通信\",\"/blog/ja/topics/telecommunications\"]]]],[\"顧客事例\",\"/blog/ja/topics/customers\"],[\"パートナー\",\"/blog/ja/topics/partners\"],[\"スタートアップ \\u0026 SMB\",\"/blog/ja/topics/startups\"],[\"トレーニングと認定\",\"/blog/ja/topics/training-certifications\"],[\"Inside Google Cloud\",\"/blog/ja/topics/inside-google-cloud\"],[\"Google Cloud Next と イベント\",\"/blog/ja/topics/google-cloud-next\"],[\"Google Maps Platform\",\"/blog/ja/products/maps-platform\"],[\"Google Workspace\",\"https://workspace.google.com/blog/ja\"]]]],[\"デベロッパー\",\"/blog/ja/topics/developers-practitioners\"],[\"Transform with Google Cloud\",\"/transform/ja\"]]]],[\"ko\",[[[\"솔루션 및 기술\",null,[[[\"AI 및 머신러닝\",\"/blog/ko/products/ai-machine-learning\"],[\"API 관리\",\"/blog/ko/products/api-management\"],[\"애플리케이션 개발\",\"/blog/ko/products/application-development\"],[\"애플리케이션 현대화\",\"/blog/ko/products/application-modernization\"],[\"Chrome Enterprise\",\"/blog/products/chrome-enterprise\"],[\"컴퓨팅\",\"/blog/ko/products/compute\"],[\"컨테이너 \\u0026 Kubernetes\",\"/blog/ko/products/containers-kubernetes\"],[\"데이터 분석\",\"/blog/ko/products/data-analytics\"],[\"데이터베이스\",\"/blog/ko/products/databases\"],[\"DevOps 및 SRE\",\"/blog/ko/products/devops-sre\"],[\"Maps \\u0026 Geospatial\",\"/blog/ko/products/maps-platform\"],[\"보안\",null,[[[\"보안 \\u0026 아이덴티티\",\"/blog/ko/products/identity-security\"],[\"위협 인텔리전스\",\"/blog/ko/topics/threat-intelligence\"]]]],[\"인프라\",\"/blog/ko/products/infrastructure\"],[\"Infrastructure Modernization\",\"/blog/ko/products/infrastructure-modernization\"],[\"네트워킹\",\"/blog/ko/products/networking\"],[\"생산성 및 공동작업\",\"/blog/ko/products/productivity-collaboration\"],[\"SAP on Google Cloud\",\"/blog/ko/products/sap-google-cloud\"],[\"스토리지 및 데이터 전송\",\"/blog/ko/products/storage-data-transfer\"],[\"지속가능성\",\"/blog/ko/topics/sustainability\"]]]],[\"에코시스템\",null,[[[\"IT Leaders\",\"/transform/ko\"],[\"업종\",null,[[[\"금융 서비스\",\"/blog/ko/topics/financial-services\"],[\"의료 및 생명과학\",\"/blog/ko/topics/healthcare-life-sciences\"],[\"제조업\",\"/blog/ko/topics/manufacturing\"],[\"미디어 및 엔터테인먼트\",\"/blog/ko/products/media-entertainment\"],[\"공공부문\",\"/blog/ko/topics/public-sector\"],[\"소매업\",\"/blog/ko/topics/retail\"],[\"공급망\",\"/blog/topics/supply-chain-logistics\"],[\"통신\",\"/blog/ko/topics/telecommunications\"]]]],[\"고객 사례\",\"/blog/ko/topics/customers\"],[\"파트너\",\"/blog/ko/topics/partners\"],[\"스타트업 \\u0026 SMB\",\"/blog/ko/topics/startups\"],[\"교육 \\u0026 인증\",\"/blog/ko/topics/training-certifications\"],[\"Inside Google Cloud\",\"/blog/ko/topics/inside-google-cloud\"],[\"Google Cloud Next 및 이벤트\",\"/blog/ko/topics/google-cloud-next\"],[\"Google Maps Platform\",\"/blog/ko/products/maps-platform\"],[\"Google Workspace\",\"https://workspace.google.com/blog/ko\"]]]],[\"개발 및 IT운영\",\"/blog/ko/topics/developers-practitioners\"],[\"Google Cloud와 함께 하는 디지털 혁신\",\"/transform/ko\"]]]]]]","cfb2h":"boq_cloudx-web-blog-uiserver_20250129.07_p0","eptZe":"/blog/_/TransformBlogUi/","f8POw":"%.@.[97969449,48897392,97848711,1714248,97535270,48830069,97442199,97953322,97496388,93778619,97894680,97656899,48554498,97785988,97969356,1706538,97863042,97933472,48489826,97442181,97496370,97656881,97785970],null,null,null,null,true]","fPDxwd":[97496388,97848711,97863042],"gGcLoe":false,"iCzhFc":false,"nQyAE":{"b5B1L":"true","PTNaKe":"false","ktxJzc":"true","BUEcUe":"variant1","kG32O":"false","C4H3Td":"true","QQ53xf":"false","Pr5Lcf":"false","kG33G":"false","EB3TEf":"false","OEmSkb":"true","aeNUHe":"false","j9nUqf":"false","wvKxS":"false","wFnpse":"true","U3qtXc":"false","tfPPe":"false","m0uJSe":"false","yquuPe":"false","PvZHQ":"true","s7Z7Ld":"false","i2rGv":"true","RIvlU":"true","lsuui":"true","XvhzSc":"true","HGJqie":"true","NCoWOd":"false","Qzt9sd":"false","dsKk4d":"true","N2GVqc":"true","fdXYmb":"false","TQUxrf":"false","Nf7gI":"false","epuB3d":"false","BotAtd":"true"},"p9hQne":"https://www.gstatic.com/_/boq-cloudx-web-blog/_/r/","qwAQke":"TransformBlogUi","rtQCxc":480,"u4g7r":"%.@.null,1,2]","vJ2GOe":"%.@.null,[[\"de\",[[[\"Themen\",null,[[[\"Product Announcements\",\"/blog/de/product-announcements\"],[\"KI \\u0026 Machine Learning\",\"/blog/de/ai-machine-learning\"],[\"Produktivität und Kollaboration\",\"/blog/de/productivity-collaboration\"],[\"Identität und Sicherheit\",\"/blog/de/identity-and-security\"],[\"Future of Work\",\"/blog/de/future-of-work\"],[\"Hybrides Arbeiten\",\"/blog/de/hybrid-work\"],[\"Kundenreferenzen\",\"/blog/de/customer-stories\"],[\"Entwickler*innen und Fachkräfte\",\"/blog/de/developers-practitioners\"],[\"Partner\",\"/blog/de/partners\"],[\"Events\",\"/blog/de/events\"],[\"Öffentlicher Sektor\",\"/blog/de/public-sector\"]]]],[\"Produktneuigkeiten\",null,[[[\"Gmail\",\"/blog/de/gmail\"],[\"Meet\",\"/blog/de/meet\"],[\"Chat and Spaces\",\"/blog/de/chat-spaces\"],[\"Drive\",\"/blog/de/drive\"],[\"Docs\",\"/blog/de/docs\"],[\"Sheets\",\"/blog/de/sheets\"]]]]]]],[\"en\",[[[\"Topics\",null,[[[\"Product Announcements\",\"/blog/product-announcements\"],[\"AI and Machine Learning\",\"/blog/ai-machine-learning\"],[\"Productivity and Collaboration\",\"/blog/productivity-collaboration\"],[\"Identity and Security\",\"/blog/identity-and-security\"],[\"Future of Work\",\"/blog/future-of-work\"],[\"Hybrid Work\",\"/blog/hybrid-work\"],[\"Customer Stories\",\"/blog/customer-stories\"],[\"Developers and Practitioners\",\"/blog/developers-practitioners\"],[\"Partners\",\"/blog/partners\"],[\"Events\",\"/blog/events\"],[\"Public Sector\",\"/blog/public-sector\"]]]],[\"Product News\",null,[[[\"Gmail\",\"/blog/gmail\"],[\"Meet\",\"/blog/meet\"],[\"Chat and Spaces\",\"/blog/chat-spaces\"],[\"Drive\",\"/blog/drive\"],[\"Docs\",\"/blog/docs\"],[\"Sheets\",\"/blog/sheets\"]]]]]]],[\"fr\",[[[\"Thèmes\",null,[[[\"Product Announcements\",\"/blog/fr/product-announcements\"],[\"IA et Machine Learning\",\"/blog/fr/ai-machine-learning\"],[\"Productivité et Collaboration\",\"/blog/fr/productivity-collaboration\"],[\"Identité et Sécurité\",\"/blog/fr/identity-and-security\"],[\"L\u0027avenir du travail\",\"/blog/fr/future-of-work\"],[\"Travail hybride\",\"/blog/fr/hybrid-work\"],[\"Témoignages Clients\",\"/blog/fr/customer-stories\"],[\"Développeurs et professionnels\",\"/blog/fr/developers-practitioners\"],[\"Partenaires\",\"/blog/fr/partners\"],[\"Événements\",\"/blog/fr/events\"],[\"Secteur Public\",\"/blog/fr/public-sector\"]]]],[\"Annonces sur les produits\",null,[[[\"Gmail\",\"/blog/fr/gmail\"],[\"Meet\",\"/blog/fr/meet\"],[\"Chat et Spaces\",\"/blog/fr/chat-spaces\"],[\"Drive\",\"/blog/fr/drive\"],[\"Docs\",\"/blog/fr/docs\"],[\"Sheets\",\"/blog/fr/sheets\"]]]]]]],[\"ja\",[[[\"トピック\",null,[[[\"プロダクトの発表\",\"/blog/ja/product-announcements\"],[\"AI \\u0026 機械学習\",\"/blog/ja/ai-machine-learning\"],[\"生産性とコラボレーション\",\"/blog/ja/productivity-collaboration\"],[\"アイデンティティとセキュリティ\",\"/blog/ja/identity-and-security\"],[\"未来の働き方\",\"/blog/ja/future-of-work\"],[\"ハイブリッドな働き方\",\"/blog/ja/hybrid-work\"],[\"顧客事例\",\"/blog/ja/customer-stories\"],[\"デベロッパー\",\"/blog/ja/developers-practitioners\"],[\"パートナー\",\"/blog/ja/partners\"],[\"イベント\",\"/blog/ja/events\"],[\"公共部門\",\"/blog/ja/public-sector\"]]]],[\"製品ニュース\",null,[[[\"Gmail\",\"/blog/ja/gmail\"],[\"Meet\",\"/blog/ja/meet\"],[\"Chat and Spaces\",\"/blog/ja/chat-spaces\"],[\"ドライブ\",\"/blog/ja/drive\"],[\"ドキュメント\",\"/blog/ja/docs\"],[\"スプレッドシート\",\"/blog/ja/sheets\"]]]]]]],[\"ko\",[[[\"주제\",null,[[[\"제품 업데이트\",\"/blog/ko/product-announcements\"],[\"AI 및 머신러닝\",\"/blog/ko/ai-machine-learning\"],[\"생산성 및 공동작업\",\"/blog/ko/productivity-collaboration\"],[\"인증 및 보안 \",\"/blog/ko/identity-and-security\"],[\"Future of Work\",\"/blog/ko/future-of-work\"],[\"하이브리드 업무\",\"/blog/ko/hybrid-work\"],[\"고객 사례\",\"/blog/ko/customer-stories\"],[\"개발자\",\"/blog/ko/developers-practitioners\"],[\"파트너\",\"/blog/ko/partners\"],[\"이벤트\",\"/blog/ko/events\"],[\"공공부문\",\"/blog/ko/public-sector\"]]]],[\"제품 소식\",null,[[[\"Gmail\",\"/blog/ko/gmail\"],[\"Meet\",\"/blog/ko/meet\"],[\"Chat 및 Spaces\",\"/blog/ko/chat-spaces\"],[\"Drive\",\"/blog/ko/drive\"],[\"Docs\",\"/blog/ko/docs\"],[\"Sheets\",\"/blog/ko/sheets\"]]]]]]]],null,[[\"de\",[[[[[\"Enthaltene Anwendungen\",\"https://workspace.google.com/intl/de/features/\",[[[\"Gmail\",\"https://workspace.google.com/intl/de/products/gmail/\"],[\"Meet\",\"https://workspace.google.com/intl/de/products/meet/\"],[\"Chat\",\"https://workspace.google.com/intl/de/products/chat/\"],[\"Kalender\",\"https://workspace.google.com/intl/de/products/calendar/\"],[\"Drive\",\"https://workspace.google.com/intl/de/products/drive/\"],[\"Docs\",\"https://workspace.google.com/intl/de/products/docs/\"],[\"Tabellen\",\"https://workspace.google.com/intl/de/products/sheets/\"],[\"Präsentationen\",\"https://workspace.google.com/intl/de/products/slides/\"],[\"Formulare\",\"https://workspace.google.com/intl/de/products/forms/\"],[\"Sites\",\"https://workspace.google.com/intl/de/products/sites/\"],[\"Notizen\",\"https://workspace.google.com/intl/de/products/keep/\"],[\"Apps Script\",\"https://workspace.google.com/intl/de/products/apps-script/\"]]]]]],[[[\"Sicherheit und Verwaltung\",\"https://workspace.google.com/intl/de/security/\",[[[\"Admin\",\"https://workspace.google.com/intl/de/products/admin/\"],[\"Endpunkt\",\"https://workspace.google.com/intl/de/products/admin/endpoint/\"],[\"Vault\",\"https://workspace.google.com/intl/de/products/vault/\"],[\"Work Insights\",\"https://workspace.google.com/intl/de/products/workinsights/\"]]]],[\"Lösungen\",\"https://workspace.google.com/intl/de/solutions/\",[[[\"Neue Unternehmen\",\"https://workspace.google.com/intl/de/business/new-business/\"],[\"Kleine Unternehmen\",\"https://workspace.google.com/intl/de/business/small-business/\"],[\"Große Unternehmen\",\"https://workspace.google.com/intl/de/solutions/enterprise/\"],[\"Education\",\"https://edu.google.com/products/workspace-for-education/education-fundamentals/\"],[\"Nonprofit-Organisationen\",\"https://www.google.com/nonprofits/\"]]]]]],[[[\"Preise\",\"https://workspace.google.com/intl/de/pricing.html\",[[[\"Version auswählen\",\"https://workspace.google.com/intl/de/pricing.html\"]]]],[\"Add-ons\",null,[[[\"Gemini für Workspace\",\"https://workspace.google.com/solutions/ai/\"],[\"Google Voice\",\"https://workspace.google.com/intl/de/products/voice/\"],[\"AppSheet\",\"https://about.appsheet.com/home/\"]]]]]],[[[\"Ressourcen\",\"https://workspace.google.com/intl/de/faq/\",[[[\"Telearbeit\",\"https://workspace.google.com/intl/de/working-remotely/\"],[\"Sicherheit\",\"https://workspace.google.com/intl/de/security/\"],[\"FAQ\",\"https://workspace.google.com/intl/de/faq/\"],[\"Partner\",\"https://cloud.withgoogle.com/partners/?products\\u003dGOOGLE_WORKSPACE_PRODUCT\"],[\"Google Workspace Marketplace\",\"https://workspace.google.com/marketplace/?hl\\u003dde\"],[\"Integrationen\",\"https://workspace.google.com/intl/de/integrations/\"],[\"Schulung \\u0026 Zertifizierung\",\"https://workspace.google.com/intl/de/training/\"]]]]]],[[[\"Schulung und Support\",\"https://workspace.google.com/intl/de/support/\",[[[\"Admin-Hilfe\",\"https://support.google.com/a/#topic\\u003d29157\"],[\"Einrichtungs- und Bereitstellungscenter\",\"https://workspace.google.com/setup/?hl\\u003dde\"],[\"Schulungscenter für Nutzer\",\"https://workspace.google.com/intl/de/learning-center/\"],[\"Foren für Administratoren\",\"https://productforums.google.com/forum/#!forum/apps\"],[\"Google Workspace-Dashboard\",\"https://www.google.com/appsstatus\"],[\"Presse\",\"https://cloud.google.com/press/\"]]]],[\"Mehr von Google\",null,[[[\"Google Cloud\",\"https://cloud.google.com/?hl\\u003dde\"],[\"Chrome Enterprise\",\"https://chromeenterprise.google/\"],[\"Google Lösungen für Unternehmen\",\"https://www.google.com/intl/de/services/\"],[\"Google Ads\",\"https://ads.google.com/home/?subid\\u003dde-de-xs-aw-z-a-dyn-accounts_wsft!o3\"],[\"Business Messages\",\"https://businessmessages.google/\"],[\"An Nutzerstudien teilnehmen\",\"https://userresearch.google.com/?reserved\\u003d0\\u0026utm_source\\u003dgsuite.google.com\\u0026Q_Language\\u003den\\u0026utm_medium\\u003down_srch\\u0026utm_campaign\\u003dGlobal-GSuite\\u0026utm_term\\u003d0\\u0026utm_content\\u003d0\\u0026productTag\\u003dgafw\\u0026campaignDate\\u003dnov18\\u0026pType\\u003dbprof\\u0026referral_code\\u003dug422768\"]]]]]]]]],[\"en\",[[[[[\"Included applications\",\"https://workspace.google.com/features/\",[[[\"Gmail\",\"https://workspace.google.com/products/gmail/\"],[\"Meet\",\"https://workspace.google.com/products/meet/\"],[\"Chat\",\"https://workspace.google.com/products/chat/\"],[\"Calendar\",\"https://workspace.google.com/products/calendar/\"],[\"Drive\",\"https://workspace.google.com/products/drive/\"],[\"Docs\",\"https://workspace.google.com/products/docs/\"],[\"Sheets\",\"https://workspace.google.com/products/sheets/\"],[\"Slides\",\"https://workspace.google.com/products/slides/\"],[\"Forms\",\"https://workspace.google.com/products/forms/\"],[\"Sites\",\"https://workspace.google.com/products/sites/\"],[\"Keep\",\"https://workspace.google.com/products/keep/\"],[\"Apps Script\",\"https://workspace.google.com/products/apps-script/\"]]]]]],[[[\"Security and management\",\"https://workspace.google.com/security/\",[[[\"Admin\",\"https://workspace.google.com/products/admin/\"],[\"Endpoint\",\"https://workspace.google.com/products/admin/endpoint/\"],[\"Vault\",\"https://workspace.google.com/products/vault/\"],[\"Work Insights\",\"https://workspace.google.com/products/workinsights/\"]]]],[\"Solutions\",\"https://workspace.google.com/solutions/\",[[[\"New Business\",\"https://workspace.google.com/business/new-business/\"],[\"Small Business\",\"https://workspace.google.com/business/small-business/\"],[\"Enterprise\",\"https://workspace.google.com/solutions/enterprise/\"],[\"Retail\",\"https://workspace.google.com/industries/retail/\"],[\"Manufacturing\",\"https://workspace.google.com/industries/manufacturing/\"],[\"Professional Services\",\"https://workspace.google.com/industries/professional-services/\"],[\"Technology\",\"https://workspace.google.com/industries/technology/\"],[\"Healthcare\",\"https://workspace.google.com/industries/healthcare/\"],[\"Government\",\"https://workspace.google.com/industries/government/\"],[\"Education\",\"https://edu.google.com/products/workspace-for-education/education-fundamentals/\"],[\"Nonprofits\",\"https://www.google.com/nonprofits/\"],[\"Artificial Intelligence\",\"https://workspace.google.com/solutions/ai/\"]]]]]],[[[\"Pricing\",\"https://workspace.google.com/pricing.html\",[[[\"Compare pricing plans\",\"https://workspace.google.com/pricing.html\"]]]],[\"Add-ons\",null,[[[\"Gemini for Workspace\",\"https://workspace.google.com/solutions/ai/\"],[\"Meet hardware\",\"https://workspace.google.com/products/meet-hardware/\"],[\"Google Voice\",\"https://workspace.google.com/products/voice/\"],[\"AppSheet\",\"https://about.appsheet.com/home/\"]]]]]],[[[\"Resources\",\"https://workspace.google.com/faq/\",[[[\"Working remotely\",\"https://workspace.google.com/working-remotely/\"],[\"Security\",\"https://workspace.google.com/security/\"],[\"Customer Stories\",\"https://workspace.google.com/customers/\"],[\"FAQs\",\"https://workspace.google.com/faq/\"],[\"Partners\",\"https://cloud.withgoogle.com/partners/?products\\u003dGOOGLE_WORKSPACE_PRODUCT\"],[\"Marketplace\",\"https://workspace.google.com/marketplace/\"],[\"Integrations\",\"https://workspace.google.com/integrations/\"],[\"Training \\u0026 Certification\",\"https://workspace.google.com/training/\"],[\"Refer Google Workspace\",\"https://workspace.google.com/landing/partners/referral/\"]]]]]],[[[\"Learning and support\",\"https://workspace.google.com/support/\",[[[\"Admin Help\",\"https://support.google.com/a/#topic\\u003d29157\"],[\"Setup and Deployment Center\",\"https://workspace.google.com/setup\"],[\"Learning Center for Users\",\"https://workspace.google.com/learning-center/\"],[\"Forums for Admins\",\"https://productforums.google.com/forum/#!forum/apps\"],[\"Google Workspace Dashboard\",\"https://www.google.com/appsstatus\"],[\"What\u0027s New in Google Workspace\",\"https://workspace.google.com/whatsnew/\"],[\"Find a Google Workspace Partner\",\"https://www.google.com/a/partnersearch/\"],[\"Join the community of IT Admins\",\"https://www.googlecloudcommunity.com/gc/Google-Workspace/ct-p/google-workspace\"],[\"Press\",\"https://cloud.google.com/press/\"]]]],[\"More from Google\",null,[[[\"Google Cloud\",\"https://cloud.google.com/\"],[\"Google Domains\",\"https://domains.google.com/about/?utm_source\\u003dgoogleappsforwork\\u0026utm_medium\\u003dreferral\\u0026utm_campaign\\u003dgooglepromos\"],[\"Chrome Enterprise\",\"https://chromeenterprise.google/\"],[\"Google Business Solutions\",\"https://www.google.com/services/\"],[\"Google Ads\",\"https://ads.google.com/home/?subid\\u003dus-en-xs-aw-z-a-dyn-accounts_wsft!o3\"],[\"Business Messages\",\"https://businessmessages.google/\"],[\"Join User Studies\",\"https://userresearch.google.com/?reserved\\u003d0\\u0026utm_source\\u003dgsuite.google.com\\u0026Q_Language\\u003den\\u0026utm_medium\\u003down_srch\\u0026utm_campaign\\u003dGlobal-GSuite\\u0026utm_term\\u003d0\\u0026utm_content\\u003d0\\u0026productTag\\u003dgafw\\u0026campaignDate\\u003dnov18\\u0026pType\\u003dbprof\\u0026referral_code\\u003dug422768\"]]]]]]]]],[\"fr\",[[[[[\"Enthaltene Anwendungen\",\"https://workspace.google.com/intl/fr/features/\",[[[\"Gmail\",\"https://workspace.google.com/intl/fr/products/gmail/\"],[\"Meet\",\"https://workspace.google.com/intl/fr/products/meet/\"],[\"Chat\",\"https://workspace.google.com/intl/fr/products/chat/\"],[\"Google Agenda\",\"https://workspace.google.com/intl/fr/products/calendar/\"],[\"Drive\",\"https://workspace.google.com/intl/fr/products/drive/\"],[\"Docs\",\"https://workspace.google.com/intl/fr/products/docs/\"],[\"Sheets\",\"https://workspace.google.com/intl/fr/products/sheets/\"],[\"Slides\",\"https://workspace.google.com/intl/fr/products/slides/\"],[\"Forms\",\"https://workspace.google.com/intl/fr/products/forms/\"],[\"Google Sites\",\"https://workspace.google.com/intl/fr/products/sites/\"],[\"Keep\",\"https://workspace.google.com/intl/fr/products/keep/\"],[\"Apps Script\",\"https://workspace.google.com/intl/fr/products/apps-script/\"]]]]]],[[[\"Sécurité et gestion\",\"https://workspace.google.com/intl/fr/security/\",[[[\"Console d\u0027administration\",\"https://workspace.google.com/intl/fr/products/admin/\"],[\"Point de terminaison\",\"https://workspace.google.com/intl/fr/products/admin/endpoint/\"],[\"Vault\",\"https://workspace.google.com/intl/fr/products/vault/\"],[\"Work Insights\",\"https://workspace.google.com/intl/fr/products/workinsights/\"]]]],[\"Solutions\",\"https://workspace.google.com/intl/fr/solutions/\",[[[\"Nouvelle entreprise\",\"https://workspace.google.com/intl/fr/business/new-business/\"],[\"PME\",\"https://workspace.google.com/intl/fr/business/small-business/\"],[\"Grande entreprise\",\"https://workspace.google.com/intl/fr/solutions/enterprise/\"],[\"Education\",\"https://edu.google.com/products/workspace-for-education/education-fundamentals/\"],[\"Associations\",\"https://www.google.com/nonprofits/\"]]]]]],[[[\"Tarifs\",\"https://workspace.google.com/intl/fr/pricing.html\",[[[\"Choisissez une édition\",\"https://workspace.google.com/intl/fr/pricing.html\"]]]],[\"Add-ons\",null,[[[\"Gemini pour Workspace\",\"https://workspace.google.com/solutions/ai/\"],[\"Matériel Meet\",\"https://workspace.google.com/intl/fr/products/meet-hardware/\"],[\"Google Voice\",\"https://workspace.google.com/intl/fr/products/voice/\"],[\"AppSheet\",\"https://about.appsheet.com/home/\"]]]]]],[[[\"Ressources\",\"https://workspace.google.com/intl/fr/faq/\",[[[\"Travail à distance\",\"https://workspace.google.com/intl/fr/working-remotely/\"],[\"Sécurité\",\"https://workspace.google.com/intl/fr/security/\"],[\"Questions fréquentes\",\"https://workspace.google.com/intl/fr/faq/\"],[\"Partenaires\",\"https://cloud.withgoogle.com/partners/?products\\u003dGOOGLE_WORKSPACE_PRODUCT\"],[\"Marketplace\",\"https://workspace.google.com/marketplace/?hl\\u003dfr\"],[\"Intégrations\",\"https://workspace.google.com/intl/fr/integrations/\"],[\"Formation et certification\",\"https://workspace.google.com/intl/fr/training/\"]]]]]],[[[\"Formation et assistance\",\"https://workspace.google.com/intl/fr/support/\",[[[\"Aide pour les administrateurs\",\"https://support.google.com/a/#topic\\u003d29157\"],[\"Centre de configuration et de déploiement\",\"https://workspace.google.com/setup/?hl\\u003dfr\"],[\"Centre de formation pour les utilisateurs\",\"https://workspace.google.com/intl/fr/learning-center/\"],[\"Forums pour les administrateurs\",\"https://productforums.google.com/forum/#!forum/apps\"],[\"Tableau de bord Google Workspace\",\"https://www.google.com/appsstatus#hl\\u003dfr\"],[\"Rechercher un partenaire Google Workspace\",\"https://www.google.com/a/partnersearch/?hl\\u003dfr#home\"],[\"Presse\",\"https://cloud.google.com/press/\"]]]],[\"Autres ressources Google\",null,[[[\"Google Cloud\",\"https://cloud.google.com/?hl\\u003dfr\"],[\"Chrome Enterprise\",\"https://chromeenterprise.google/\"],[\"Solutions d\u0027entreprise Google\",\"https://www.google.com/intl/fr/services/\"],[\"Google pour les Pros\",\"https://pourlespros.withgoogle.com/?utm_source\\u003dEngagement\\u0026utm_medium\\u003dep\\u0026utm_term\\u003dSMB\\u0026utm_content\\u003dFR%20Apps%20for%20work%20footert\\u0026utm_campaign\\u003dQ4_2015%20FR%20Apps%20for%20work%20footer\"],[\"Google Ads\",\"https://ads.google.com/home/?subid\\u003dfr-fr-xs-aw-z-a-dyn-accounts_wsft!o3\"],[\"Business Messages\",\"https://businessmessages.google/\"],[\"Participer aux études sur l\u0027expérience utilisateur\",\"https://userresearch.google.com/?reserved\\u003d0\\u0026utm_source\\u003dgsuite.google.com\\u0026Q_Language\\u003den\\u0026utm_medium\\u003down_srch\\u0026utm_campaign\\u003dGlobal-GSuite\\u0026utm_term\\u003d0\\u0026utm_content\\u003d0\\u0026productTag\\u003dgafw\\u0026campaignDate\\u003dnov18\\u0026pType\\u003dbprof\\u0026referral_code\\u003dug422768\"]]]]]]]]],[\"ja\",[[[[[\"ご利用いただけるアプリケーション\",\"https://workspace.google.com/intl/ja/features/\",[[[\"Gmail\",\"https://workspace.google.com/intl/ja/products/gmail/\"],[\"Meet\",\"https://workspace.google.com/intl/ja/products/meet/\"],[\"Chat\",\"https://workspace.google.com/intl/ja/products/chat/\"],[\"カレンダー\",\"https://workspace.google.com/intl/ja/products/calendar/\"],[\"ドライブ\",\"https://workspace.google.com/intl/ja/products/drive/\"],[\"ドキュメント\",\"https://workspace.google.com/intl/ja/products/docs/\"],[\"スプレッドシート\",\"https://workspace.google.com/intl/ja/products/sheets/\"],[\"スライド\",\"https://workspace.google.com/intl/ja/products/slides/\"],[\"フォーム\",\"https://workspace.google.com/intl/ja/products/forms/\"],[\"サイト\",\"https://workspace.google.com/intl/ja/products/sites/\"],[\"Keep\",\"https://workspace.google.com/intl/ja/products/keep/\"],[\"Apps Script\",\"https://workspace.google.com/intl/ja/products/apps-script/\"]]]]]],[[[\"セキュリティと管理\",\"https://workspace.google.com/intl/ja/security/\",[[[\"管理コンソール\",\"https://workspace.google.com/intl/ja/products/admin/\"],[\"エンドポイント\",\"https://workspace.google.com/intl/ja/products/admin/endpoint/\"],[\"Vault\",\"https://workspace.google.com/intl/ja/products/vault/\"],[\"Work Insights\",\"https://workspace.google.com/intl/ja/products/workinsights/\"]]]],[\"ソリューション\",\"https://workspace.google.com/intl/ja/solutions/\",[[[\"新規ビジネス\",\"https://workspace.google.com/intl/ja/business/new-business/\"],[\"小規模ビジネス\",\"https://workspace.google.com/intl/ja/business/small-business/\"],[\"大規模ビジネス\",\"https://workspace.google.com/intl/ja/solutions/enterprise/\"],[\"Education\",\"https://edu.google.com/intl/ja/products/workspace-for-education/education-fundamentals/\"],[\"非営利団体\",\"https://www.google.com/intl/ja/nonprofits/\"]]]]]],[[[\"料金\",\"https://workspace.google.com/intl/ja/pricing.html\",[[[\"エディションを選ぶ\",\"https://workspace.google.com/intl/ja/pricing.html\"]]]],[\"Add-ons\",null,[[[\"Gemini for Workspace\",\"https://workspace.google.com/solutions/ai/\"],[\"Meet ハードウェア\",\"https://workspace.google.com/intl/ja/products/meet-hardware/\"],[\"AppSheet\",\"https://about.appsheet.com/home/\"]]]]]],[[[\"関連情報\",\"https://workspace.google.com/intl/ja/faq/\",[[[\"リモートワーク\",\"https://workspace.google.com/intl/ja/working-remotely/\"],[\"セキュリティ\",\"https://workspace.google.com/intl/ja/security/\"],[\"事例紹介\",\"https://workspace.google.com/intl/ja/customers/\"],[\"よくある質問\",\"https://workspace.google.com/intl/ja/faq/\"],[\"パートナー\",\"https://cloud.withgoogle.com/partners/?products\\u003dGOOGLE_WORKSPACE_PRODUCT\"],[\"Marketplace\",\"https://workspace.google.com/marketplace/?hl\\u003dja\"],[\"統合\",\"https://workspace.google.com/intl/ja/integrations/\"],[\"トレーニングと認定資格\",\"https://workspace.google.com/intl/ja/training/\"]]]]]],[[[\"学習とサポート\",\"https://workspace.google.com/intl/ja/support/\",[[[\"管理者用ヘルプ\",\"https://support.google.com/a/#topic\\u003d29157\"],[\"設定と導入のガイド\",\"https://workspace.google.com/setup/?hl\\u003dja\"],[\"ユーザー向けラーニング センター\",\"https://workspace.google.com/intl/ja/learning-center/\"],[\"管理者向けフォーラム\",\"https://productforums.google.com/forum/#!forum/apps\"],[\"Google Workspace ステータス ダッシュボード\",\"https://www.google.com/appsstatus#hl\\u003dja\"],[\"Google Workspace パートナーを探す\",\"https://www.google.com/a/partnersearch/?hl\\u003dja#home\"],[\"プレスリリース\",\"https://cloud.google.com/press/?hl\\u003dja\"]]]],[\"その他の Google サービス\",null,[[[\"Google Cloud\",\"https://cloud.google.com/?hl\\u003dja\"],[\"Chrome Enterprise\",\"https://chromeenterprise.google/\"],[\"Google ビジネス ソリューション\",\"https://www.google.com/intl/ja/services/\"],[\"Google 広告\",\"https://ads.google.com/home/?subid\\u003dja-ja-xs-aw-z-a-dyn-accounts_wsft!o3\"],[\"Business Messages\",\"https://businessmessages.google/\"],[\"ユーザー調査に参加する\",\"https://userresearch.google.com/?reserved\\u003d0\\u0026utm_source\\u003dgsuite.google.com\\u0026Q_Language\\u003den\\u0026utm_medium\\u003down_srch\\u0026utm_campaign\\u003dGlobal-GSuite\\u0026utm_term\\u003d0\\u0026utm_content\\u003d0\\u0026productTag\\u003dgafw\\u0026campaignDate\\u003dnov18\\u0026pType\\u003dbprof\\u0026referral_code\\u003dug422768\"]]]]]]]]],[\"ko\",[[[[[\"포함된 애플리케이션\",\"https://workspace.google.com/intl/ko/features/\",[[[\"Gmail\",\"https://workspace.google.com/intl/ko/products/gmail/\"],[\"Meet\",\"https://workspace.google.com/intl/ko/products/meet/\"],[\"Chat\",\"https://workspace.google.com/intl/ko/products/chat/\"],[\"Calendar\",\"https://workspace.google.com/intl/ko/products/calendar/\"],[\"Drive\",\"https://workspace.google.com/intl/ko/products/drive/\"],[\"Docs\",\"https://workspace.google.com/intl/ko/products/docs/\"],[\"Sheets\",\"https://workspace.google.com/intl/ko/products/sheets/\"],[\"Slides\",\"https://workspace.google.com/intl/ko/products/slides/\"],[\"설문지\",\"https://workspace.google.com/intl/ko/products/forms/\"],[\"사이트 도구\",\"https://workspace.google.com/intl/ko/products/sites/\"],[\"Keep\",\"https://workspace.google.com/intl/ko/products/keep/\"],[\"Apps Script\",\"https://workspace.google.com/intl/ko/products/apps-script/\"]]]]]],[[[\"보안 및 관리\",\"https://workspace.google.com/intl/ko/security/\",[[[\"관리\",\"https://workspace.google.com/intl/ko/products/admin/\"],[\"엔드포인트\",\"https://workspace.google.com/intl/ko/products/admin/endpoint/\"],[\"Vault\",\"https://workspace.google.com/intl/ko/products/vault/\"],[\"Work Insights\",\"https://workspace.google.com/intl/ko/products/workinsights/\"]]]],[\"솔루션\",\"https://workspace.google.com/intl/ko/solutions/\",[[[\"신규 업체\",\"https://workspace.google.com/intl/ko/business/new-business/\"],[\"중소기업\",\"https://workspace.google.com/intl/ko/business/small-business/\"],[\"엔터프라이즈\",\"https://workspace.google.com/intl/ko/solutions/enterprise/\"],[\"Education\",\"https://edu.google.com/products/workspace-for-education/education-fundamentals/\"],[\"비영리단체\",\"https://www.google.com/nonprofits/\"]]]]]],[[[\"가격\",\"https://workspace.google.com/intl/ko/pricing.html\",[[[\"버전 선택\",\"https://workspace.google.com/intl/ko/pricing.html\"]]]],[\"Add-ons\",null,[[[\"Workspace를 위한 Gemini\",\"https://workspace.google.com/solutions/ai/\"],[\"AppSheet\",\"https://about.appsheet.com/home/\"]]]]]],[[[\"리소스\",\"https://workspace.google.com/intl/ko/faq/\",[[[\"원격 근무\",\"https://workspace.google.com/intl/ko/working-remotely/\"],[\"보안\",\"https://workspace.google.com/intl/ko/security/\"],[\"FAQ\",\"https://workspace.google.com/intl/ko/faq/\"],[\"파트너\",\"https://cloud.withgoogle.com/partners/?products\\u003dGOOGLE_WORKSPACE_PRODUCT\"],[\"Marketplace\",\"https://workspace.google.com/marketplace/?hl\\u003dko\"],[\"통합\",\"https://workspace.google.com/intl/ko/integrations/\"],[\"교육 및 인증\",\"https://workspace.google.com/intl/ko/training/\"]]]]]],[[[\"학습 및 지원\",\"https://workspace.google.com/intl/ko/support/\",[[[\"관리자 도움말\",\"https://support.google.com/a/#topic\\u003d29157\"],[\"설치 및 배포 센터\",\"https://workspace.google.com/setup/?hl\\u003dko\"],[\"사용자를 위한 학습 센터\",\"https://workspace.google.com/intl/ko/learning-center/\"],[\"관리자 포럼\",\"https://productforums.google.com/forum/#!forum/apps\"],[\"Google Workspace 대시보드\",\"https://www.google.com/appsstatus#hl\\u003dko\"],[\"Google Workspace 파트너 찾기\",\"https://www.google.com/a/partnersearch/?hl\\u003dko#home\"],[\"보도자료\",\"https://cloud.google.com/press/\"]]]],[\"Google의 다른 제품\",null,[[[\"Google Cloud\",\"https://cloud.google.com/?hl\\u003dko\"],[\"Chrome Enterprise\",\"https://chromeenterprise.google/\"],[\"Google 비즈니스 솔루션\",\"https://www.google.com/intl/ko_kr/business/\"],[\"Google Ads\",\"https://ads.google.com/home/?subid\\u003dkr-ko-xs-aw-z-a-dyn-accounts_wsft!o3\"],[\"Business Messages\",\"https://businessmessages.google/\"],[\"사용자 연구 참여\",\"https://userresearch.google.com/?reserved\\u003d0\\u0026utm_source\\u003dgsuite.google.com\\u0026Q_Language\\u003den\\u0026utm_medium\\u003down_srch\\u0026utm_campaign\\u003dGlobal-GSuite\\u0026utm_term\\u003d0\\u0026utm_content\\u003d0\\u0026productTag\\u003dgafw\\u0026campaignDate\\u003dnov18\\u0026pType\\u003dbprof\\u0026referral_code\\u003dug422768\"]]]]]]]]]]]","w2btAe":"%.@.null,null,\"\",false,null,null,true,false]","xn5OId":false,"xnI9P":true,"xwAfE":true,"y2FhP":"prod","yFnxrf":1884,"zChJod":"%.@.]"};</script><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">(function(){'use strict';var a=window,d=a.performance,l=k();a.cc_latency_start_time=d&&d.now?0:d&&d.timing&&d.timing.navigationStart?d.timing.navigationStart:l;function k(){return d&&d.now?d.now():(new Date).getTime()}function n(e){if(d&&d.now&&d.mark){var g=d.mark(e);if(g)return g.startTime;if(d.getEntriesByName&&(e=d.getEntriesByName(e).pop()))return e.startTime}return k()}a.onaft=function(){n("aft")};a._isLazyImage=function(e){return e.hasAttribute("data-src")||e.hasAttribute("data-ils")||e.getAttribute("loading")==="lazy"};
a.l=function(e){function g(b){var c={};c[b]=k();a.cc_latency.push(c)}function m(b){var c=n("iml");b.setAttribute("data-iml",c);return c}a.cc_aid=e;a.iml_start=a.cc_latency_start_time;a.css_size=0;a.cc_latency=[];a.ccTick=g;a.onJsLoad=function(){g("jsl")};a.onCssLoad=function(){g("cssl")};a._isVisible=function(b,c){if(!c||c.style.display=="none")return!1;var f=b.defaultView;if(f&&f.getComputedStyle&&(f=f.getComputedStyle(c),f.height=="0px"||f.width=="0px"||f.visibility=="hidden"))return!1;if(!c.getBoundingClientRect)return!0;
var h=c.getBoundingClientRect();c=h.left+a.pageXOffset;f=h.top+a.pageYOffset;if(f+h.height<0||c+h.width<0||h.height<=0||h.width<=0)return!1;b=b.documentElement;return f<=(a.innerHeight||b.clientHeight)&&c<=(a.innerWidth||b.clientWidth)};a._recordImlEl=m;document.documentElement.addEventListener("load",function(b){b=b.target;var c;b.tagName!="IMG"||b.hasAttribute("data-iid")||a._isLazyImage(b)||b.hasAttribute("data-noaft")||(c=m(b));if(a.aft_counter&&(b=a.aft_counter.indexOf(b),b!==-1&&(b=a.aft_counter.splice(b,
1).length===1,a.aft_counter.length===0&&b&&c)))a.onaft(c)},!0);a.prt=-1;a.wiz_tick=function(){var b=n("prt");a.prt=b}};}).call(this);
l('DK1zsb')</script><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">var _F_cssRowKey = 'boq-cloudx-web-blog.TransformBlogUi.hNYpR3EpoM8.L.B1.O';var _F_combinedSignature = 'AHrnUqXFzNhBNMw9Yb0fn9iNQ1nsqEy_jA';function _DumpException(e) {throw e;}</script><link rel="stylesheet" href="https://www.gstatic.com/_/mss/boq-cloudx-web-blog/_/ss/k=boq-cloudx-web-blog.TransformBlogUi.hNYpR3EpoM8.L.B1.O/am=GAy4BQ/d=1/ed=1/rs=AHrnUqUGieeNo5nBhP0BuqGOPm3GxcRa1Q/m=articleview,_b,_tp" data-id="_cl" nonce="R1KSEAE5XPV4jytr-DlCxA"><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">onCssLoad();</script><style nonce="R1KSEAE5XPV4jytr-DlCxA">@font-face{font-family:'Product Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/productsans/v9/pxiDypQkot1TnFhsFMOfGShVGdeOcEg.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Product Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/productsans/v9/pxiDypQkot1TnFhsFMOfGShVF9eO.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiIUvaYr.woff2)format('woff2');unicode-range:U+0308,U+0530-058F,U+2010,U+2024,U+25CC,U+FB13-FB17;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiAUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0980-09FE,U+1CD0,U+1CD2,U+1CD5-1CD6,U+1CD8,U+1CE1,U+1CEA,U+1CED,U+1CF2,U+1CF5-1CF7,U+200C-200D,U+20B9,U+25CC,U+A8F1;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj8UvaYr.woff2)format('woff2');unicode-range:U+0460-052F,U+1C80-1C8A,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjYUvaYr.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjMUvaYr.woff2)format('woff2');unicode-range:U+0900-097F,U+1CD0-1CF9,U+200C-200D,U+20A8,U+20B9,U+20F0,U+25CC,U+A830-A839,U+A8E0-A8FF,U+11B00-11B09;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiMUvaYr.woff2)format('woff2');unicode-range:U+030E,U+1200-1399,U+2D80-2DDE,U+AB01-AB2E,U+1E7E0-1E7E6,U+1E7E8-1E7EB,U+1E7ED-1E7EE,U+1E7F0-1E7FE;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi0UvaYr.woff2)format('woff2');unicode-range:U+0589,U+10A0-10FF,U+1C90-1CBA,U+1CBD-1CBF,U+205A,U+2D00-2D2F,U+2E31;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjEUvaYr.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPikUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A80-0AFF,U+200C-200D,U+20B9,U+25CC,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPhEUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A01-0A76,U+200C-200D,U+20B9,U+25CC,U+262C,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjAUvaYr.woff2)format('woff2');unicode-range:U+0307-0308,U+0590-05FF,U+200C-2010,U+20AA,U+25CC,U+FB1D-FB4F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjkUvaYr.woff2)format('woff2');unicode-range:U+1780-17FF,U+19E0-19FF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjsUvaYr.woff2)format('woff2');unicode-range:U+0E81-0EDF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPisUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0B01-0B77,U+1CDA,U+1CF2,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi8UvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0D81-0DF4,U+1CF2,U+200C-200D,U+25CC,U+111E1-111F4;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiQUvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0B82-0BFA,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi4UvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0C00-0C7F,U+1CDA,U+1CF2,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiYUvaYr.woff2)format('woff2');unicode-range:U+02D7,U+0303,U+0331,U+0E01-0E5B,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj0UvaYr.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjwUvaYr.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjIUvQ.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiIUvaYr.woff2)format('woff2');unicode-range:U+0308,U+0530-058F,U+2010,U+2024,U+25CC,U+FB13-FB17;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiAUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0980-09FE,U+1CD0,U+1CD2,U+1CD5-1CD6,U+1CD8,U+1CE1,U+1CEA,U+1CED,U+1CF2,U+1CF5-1CF7,U+200C-200D,U+20B9,U+25CC,U+A8F1;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj8UvaYr.woff2)format('woff2');unicode-range:U+0460-052F,U+1C80-1C8A,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjYUvaYr.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjMUvaYr.woff2)format('woff2');unicode-range:U+0900-097F,U+1CD0-1CF9,U+200C-200D,U+20A8,U+20B9,U+20F0,U+25CC,U+A830-A839,U+A8E0-A8FF,U+11B00-11B09;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiMUvaYr.woff2)format('woff2');unicode-range:U+030E,U+1200-1399,U+2D80-2DDE,U+AB01-AB2E,U+1E7E0-1E7E6,U+1E7E8-1E7EB,U+1E7ED-1E7EE,U+1E7F0-1E7FE;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi0UvaYr.woff2)format('woff2');unicode-range:U+0589,U+10A0-10FF,U+1C90-1CBA,U+1CBD-1CBF,U+205A,U+2D00-2D2F,U+2E31;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjEUvaYr.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPikUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A80-0AFF,U+200C-200D,U+20B9,U+25CC,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPhEUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A01-0A76,U+200C-200D,U+20B9,U+25CC,U+262C,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjAUvaYr.woff2)format('woff2');unicode-range:U+0307-0308,U+0590-05FF,U+200C-2010,U+20AA,U+25CC,U+FB1D-FB4F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjkUvaYr.woff2)format('woff2');unicode-range:U+1780-17FF,U+19E0-19FF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjsUvaYr.woff2)format('woff2');unicode-range:U+0E81-0EDF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPisUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0B01-0B77,U+1CDA,U+1CF2,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi8UvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0D81-0DF4,U+1CF2,U+200C-200D,U+25CC,U+111E1-111F4;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiQUvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0B82-0BFA,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi4UvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0C00-0C7F,U+1CDA,U+1CF2,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiYUvaYr.woff2)format('woff2');unicode-range:U+02D7,U+0303,U+0331,U+0E01-0E5B,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj0UvaYr.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjwUvaYr.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjIUvQ.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiIUvaYr.woff2)format('woff2');unicode-range:U+0308,U+0530-058F,U+2010,U+2024,U+25CC,U+FB13-FB17;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiAUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0980-09FE,U+1CD0,U+1CD2,U+1CD5-1CD6,U+1CD8,U+1CE1,U+1CEA,U+1CED,U+1CF2,U+1CF5-1CF7,U+200C-200D,U+20B9,U+25CC,U+A8F1;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj8UvaYr.woff2)format('woff2');unicode-range:U+0460-052F,U+1C80-1C8A,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjYUvaYr.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjMUvaYr.woff2)format('woff2');unicode-range:U+0900-097F,U+1CD0-1CF9,U+200C-200D,U+20A8,U+20B9,U+20F0,U+25CC,U+A830-A839,U+A8E0-A8FF,U+11B00-11B09;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiMUvaYr.woff2)format('woff2');unicode-range:U+030E,U+1200-1399,U+2D80-2DDE,U+AB01-AB2E,U+1E7E0-1E7E6,U+1E7E8-1E7EB,U+1E7ED-1E7EE,U+1E7F0-1E7FE;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi0UvaYr.woff2)format('woff2');unicode-range:U+0589,U+10A0-10FF,U+1C90-1CBA,U+1CBD-1CBF,U+205A,U+2D00-2D2F,U+2E31;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjEUvaYr.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPikUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A80-0AFF,U+200C-200D,U+20B9,U+25CC,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPhEUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0A01-0A76,U+200C-200D,U+20B9,U+25CC,U+262C,U+A830-A839;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjAUvaYr.woff2)format('woff2');unicode-range:U+0307-0308,U+0590-05FF,U+200C-2010,U+20AA,U+25CC,U+FB1D-FB4F;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjkUvaYr.woff2)format('woff2');unicode-range:U+1780-17FF,U+19E0-19FF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjsUvaYr.woff2)format('woff2');unicode-range:U+0E81-0EDF,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPisUvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0B01-0B77,U+1CDA,U+1CF2,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi8UvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0D81-0DF4,U+1CF2,U+200C-200D,U+25CC,U+111E1-111F4;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiQUvaYr.woff2)format('woff2');unicode-range:U+0964-0965,U+0B82-0BFA,U+200C-200D,U+20B9,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPi4UvaYr.woff2)format('woff2');unicode-range:U+0951-0952,U+0964-0965,U+0C00-0C7F,U+1CDA,U+1CF2,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPiYUvaYr.woff2)format('woff2');unicode-range:U+02D7,U+0303,U+0331,U+0E01-0E5B,U+200C-200D,U+25CC;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPj0UvaYr.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjwUvaYr.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesans/v58/4UasrENHsxJlGDuGo1OIlJfC6l_24rlCK1Yo_Iqcsih3SAyH6cAwhX9RPjIUvQ.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8FacM9Wef3EJPWRrHjgE4B6CnlZxHVDvr9oS_a.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8FacM9Wef3EJPWRrHjgE4B6CnlZxHVDv39oS_a.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8FacM9Wef3EJPWRrHjgE4B6CnlZxHVDvH9oS_a.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8FacM9Wef3EJPWRrHjgE4B6CnlZxHVDvD9oS_a.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8FacM9Wef3EJPWRrHjgE4B6CnlZxHVDv79oQ.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBg3etBT7TKx9.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBg3etBP7TKx9.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBg3etB_7TKx9.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBg3etB77TKx9.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBg3etBD7TA.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBkXYtBT7TKx9.woff2)format('woff2');unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBkXYtBP7TKx9.woff2)format('woff2');unicode-range:U+0370-0377,U+037A-037F,U+0384-038A,U+038C,U+038E-03A1,U+03A3-03FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBkXYtB_7TKx9.woff2)format('woff2');unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBkXYtB77TKx9.woff2)format('woff2');unicode-range:U+0100-02BA,U+02BD-02C5,U+02C7-02CC,U+02CE-02D7,U+02DD-02FF,U+0304,U+0308,U+0329,U+1D00-1DBF,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;}@font-face{font-family:'Google Sans Display';font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/googlesansdisplay/v13/ea8IacM9Wef3EJPWRrHjgE4B6CnlZxHVBkXYtBD7TA.woff2)format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}</style><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">(function(){'use strict';function e(){var a=g,b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}};/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var l=this||self;/*

 Copyright 2024 Google, Inc
 SPDX-License-Identifier: MIT
*/
var m=["focus","blur","error","load","toggle"];function n(a){return a==="mouseenter"?"mouseover":a==="mouseleave"?"mouseout":a==="pointerenter"?"pointerover":a==="pointerleave"?"pointerout":a};function p(a){this.l={};this.m={};this.i=null;this.g=[];this.o=a}p.prototype.handleEvent=function(a,b,c){q(this,{eventType:a,event:b,targetElement:b.target,eic:c,timeStamp:Date.now(),eia:void 0,eirp:void 0,eiack:void 0})};function q(a,b){if(a.i)a.i(b);else{b.eirp=!0;var c;(c=a.g)==null||c.push(b)}}
function r(a,b,c){if(!(b in a.l)&&a.o){var d=function(h,f,B){a.handleEvent(h,f,B)};a.l[b]=d;c=n(c||b);if(c!==b){var k=a.m[c]||[];k.push(b);a.m[c]=k}a.o.addEventListener(c,function(h){return function(f){d(b,f,h)}},void 0)}}p.prototype.j=function(a){return this.l[a]};p.prototype.ecrd=function(a){this.i=a;var b;if((b=this.g)==null?0:b.length){for(a=0;a<this.g.length;a++)q(this,this.g[a]);this.g=null}};var t=typeof navigator!=="undefined"&&/iPhone|iPad|iPod/.test(navigator.userAgent);function u(a){this.g=a;this.i=[]}u.prototype.addEventListener=function(a,b,c){t&&(this.g.style.cursor="pointer");var d=this.i,k=d.push,h=this.g;b=b(this.g);var f=!1;m.indexOf(a)>=0&&(f=!0);h.addEventListener(a,b,typeof c==="boolean"?{capture:f,passive:c}:f);k.call(d,{eventType:a,j:b,capture:f,passive:c})};var g="click dblclick focus focusin blur error focusout keydown keyup keypress load mouseover mouseout mouseenter mouseleave mousemove submit toggle touchstart touchend touchmove touchcancel auxclick change compositionstart compositionupdate compositionend beforeinput input select textinput copy cut paste mousedown mouseup wheel contextmenu dragover dragenter dragleave drop dragstart dragend pointerdown pointermove pointerup pointercancel pointerenter pointerleave pointerover pointerout gotpointercapture lostpointercapture ended loadedmetadata pagehide pageshow visibilitychange beforematch".split(" ");
if(!(g instanceof Array)){var v;var w=typeof Symbol!="undefined"&&Symbol.iterator&&g[Symbol.iterator];if(w)v=w.call(g);else if(typeof g.length=="number")v={next:e()};else throw Error(String(g)+" is not an iterable or ArrayLike");for(var x,y=[];!(x=v.next()).done;)y.push(x.value)};var z=function(a){return{trigger:function(b){var c=a.j(b.type);c||(r(a,b.type),c=a.j(b.type));var d=b.target||b.srcElement;c&&c(b.type,b,d.ownerDocument.documentElement)},configure:function(b){b(a)}}}(function(){var a=window,b=new u(a.document.documentElement),c=new p(b);g.forEach(function(h){return r(c,h)});var d,k;"onwebkitanimationend"in a&&(d="webkitAnimationEnd");r(c,"animationend",d);"onwebkittransitionend"in a&&(k="webkitTransitionEnd");r(c,"transitionend",k);return{s:c,u:b}}().s),A=["BOQ_wizbind"],
C=window||l;A[0]in C||typeof C.execScript=="undefined"||C.execScript("var "+A[0]);for(var D;A.length&&(D=A.shift());)A.length||z===void 0?C[D]&&C[D]!==Object.prototype[D]?C=C[D]:C=C[D]={}:C[D]=z;}).call(this);
</script><script noCollect src="https://www.gstatic.com/_/mss/boq-cloudx-web-blog/_/js/k=boq-cloudx-web-blog.TransformBlogUi.en_US.lCgUqUAVpfE.es5.O/am=GAy4BQ/d=1/excm=_b,_tp,articleview/ed=1/dg=0/wt=2/ujg=1/rs=AHrnUqXE2Voa396JEk3PzVUUHnaqNGuY8g/m=_b,_tp" defer id="base-js" fetchpriority="high" nonce="7Hibp_PLMbjEvbm9bu7mWQ"></script><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">if (window.BOQ_loadedInitialJS) {onJsLoad();} else {document.getElementById('base-js').addEventListener('load', onJsLoad, false);}</script><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">
    window['_wjdc'] = function (d) {window['_wjdd'] = d};
    </script><title>ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator | Google Cloud Blog</title><meta name="description" content="We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware."><meta name="robots" content="max-image-preview:large"><meta property="og:title" content="ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator | Google Cloud Blog"><meta property="og:type" content="website"><meta property="og:url" content="https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator"><meta property="og:image" content="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BA.max-2600x2600.png"><meta property="og:description" content="We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware."><meta property="og:site_name" content="Google Cloud Blog"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:url" content="https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator"><meta name="twitter:title" content="ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator | Google Cloud Blog"><meta name="twitter:description" content="We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware."><meta name="twitter:image" content="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BA.max-2600x2600.png"><meta name="twitter:site" content="@googlecloud"><script type="application/ld+json">{"@context":"https://schema.org","@type":"BlogPosting","@id":"https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator","headline":"ScatterBrain: Unmasking the Shadow of PoisonPlug\u0027s Obfuscator","description":"We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware.","image":"https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BA.max-2600x2600.png","author":[{"@type":"Person","name":"Mandiant ","url":""}],"datePublished":"2025-01-28","publisher":{"@type":"Organization","name":"Google Cloud","logo":{"@type":"ImageObject","url":"https://www.gstatic.com/devrel-devsite/prod/v8bb8fa0afe9a8c3a776ebeb25d421bb443344d789b3607754dfabea418b8c4be/cloud/images/cloud-logo.svg"}},"url":"https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator","keywords":["Threat Intelligence"],"timeRequired":"PT64M"}</script><link rel="canonical" href="https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator/"><meta name="track-metadata-page_post_title" content="ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator"><meta name="track-metadata-page_post_labels" content="Threat Intelligence"><meta name="track-metadata-page_first_published" content="2025-01-28 15:01:00"><meta name="track-metadata-page_last_published" content="2025-01-28 14:01:00"><meta name="track-metadata-page_post_author" content="Mandiant "><meta name="track-metadata-page_post_author_role" content=""><header jsaction="rcuQ6b:npT2md" jscontroller="o60eef" class="glue-header nRhiJb-tJHJj-OWXEXe-kFx1Ae" id="kO001e"><a href="./#content" class="glue-header__link glue-header__skip-content">Jump to Content</a><div class="glue-header__bar glue-header__bar--mobile DFb9Jf" track-metadata-module="header"><div class="nRhiJb-mb9u9d"><div class="glue-header__container JF2WI"><div class="nRhiJb-o2XRw-yHKmmc lUwpmd"><div class="nRhiJb-rSCjMe"><a class="nRhiJb-rSCjMe-hSRGPd" href="https://cloud.google.com/" title="Google Cloud" track-name="google cloud"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/"track-metadata-module="header"><div class="nRhiJb-rSCjMe-haAclf"><svg class="glue-header__logo-svg" viewBox="0 0 74 24" role="presentation" aria-hidden="true"><path fill="#4285F4" d="M9.24 8.19v2.46h5.88c-.18 1.38-.64 2.39-1.34 3.1-.86.86-2.2 1.8-4.54 1.8-3.62 0-6.45-2.92-6.45-6.54s2.83-6.54 6.45-6.54c1.95 0 3.38.77 4.43 1.76L15.4 2.5C13.94 1.08 11.98 0 9.24 0 4.28 0 .11 4.04.11 9s4.17 9 9.13 9c2.68 0 4.7-.88 6.28-2.52 1.62-1.62 2.13-3.91 2.13-5.75 0-.57-.04-1.1-.13-1.54H9.24z"></path><path fill="#EA4335" d="M25 6.19c-3.21 0-5.83 2.44-5.83 5.81 0 3.34 2.62 5.81 5.83 5.81s5.83-2.46 5.83-5.81c0-3.37-2.62-5.81-5.83-5.81zm0 9.33c-1.76 0-3.28-1.45-3.28-3.52 0-2.09 1.52-3.52 3.28-3.52s3.28 1.43 3.28 3.52c0 2.07-1.52 3.52-3.28 3.52z"></path><path fill="#4285F4" d="M53.58 7.49h-.09c-.57-.68-1.67-1.3-3.06-1.3C47.53 6.19 45 8.72 45 12c0 3.26 2.53 5.81 5.43 5.81 1.39 0 2.49-.62 3.06-1.32h.09v.81c0 2.22-1.19 3.41-3.1 3.41-1.56 0-2.53-1.12-2.93-2.07l-2.22.92c.64 1.54 2.33 3.43 5.15 3.43 2.99 0 5.52-1.76 5.52-6.05V6.49h-2.42v1zm-2.93 8.03c-1.76 0-3.1-1.5-3.1-3.52 0-2.05 1.34-3.52 3.1-3.52 1.74 0 3.1 1.5 3.1 3.54.01 2.03-1.36 3.5-3.1 3.5z"></path><path fill="#FBBC05" d="M38 6.19c-3.21 0-5.83 2.44-5.83 5.81 0 3.34 2.62 5.81 5.83 5.81s5.83-2.46 5.83-5.81c0-3.37-2.62-5.81-5.83-5.81zm0 9.33c-1.76 0-3.28-1.45-3.28-3.52 0-2.09 1.52-3.52 3.28-3.52s3.28 1.43 3.28 3.52c0 2.07-1.52 3.52-3.28 3.52z"></path><path fill="#34A853" d="M58 .24h2.51v17.57H58z"></path><path fill="#EA4335" d="M68.26 15.52c-1.3 0-2.22-.59-2.82-1.76l7.77-3.21-.26-.66c-.48-1.3-1.96-3.7-4.97-3.7-2.99 0-5.48 2.35-5.48 5.81 0 3.26 2.46 5.81 5.76 5.81 2.66 0 4.2-1.63 4.84-2.57l-1.98-1.32c-.66.96-1.56 1.6-2.86 1.6zm-.18-7.15c1.03 0 1.91.53 2.2 1.28l-5.25 2.17c0-2.44 1.73-3.45 3.05-3.45z"></path></svg></div><span class="nRhiJb-rSCjMe-OWXEXe-UBMNlb khBwGd">Cloud</span></a></div></div><div class="glue-header__hamburger s6BfRd"><button class="glue-header__drawer-toggle-btn" aria-label="Open the navigation drawer"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></button></div><div class="nRhiJb-o2XRw-yHKmmc UrjqX"><div class="nRhiJb-rSCjMe"><a class="nRhiJb-rSCjMe-hSRGPd" href="https://cloud.google.com/blog" title="Google Cloud Blog" track-name="blog"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog"track-metadata-module="header"><span class="nRhiJb-rSCjMe-OWXEXe-UBMNlb khBwGd">Blog</span></a></div></div></div><div class="glue-header__container ca6rub"><div class="nRhiJb-GUI8l"><a class="nRhiJb-LgbsSe  nRhiJb-LgbsSe-OWXEXe-pSzOP-o6Shpd " href="https://cloud.google.com/contact/" track-name="contact sales"track-type="blog nav"track-metadata-eventdetail="cloud.google.com/contact/"track-metadata-module="header" track-name="contact sales"track-type="button"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/contact/">Contact sales </a><a class="nRhiJb-LgbsSe  nRhiJb-LgbsSe-OWXEXe-CNusmb-o6Shpd " href="https://console.cloud.google.com/freetrial/" track-name="get started for free"track-type="blog nav"track-metadata-eventdetail="console.cloud.google.com/freetrial/"track-metadata-module="header" track-name="get started for free"track-type="button"track-metadata-position="nav"track-metadata-eventdetail="console.cloud.google.com/freetrial/">Get started for free </a></div><div class="GKI4ub"><div class="Jhiezd"><form action="/blog/search/" class="A2C6Ob"><input class="BAhdXd" jsname="oJAbI" name="query" type="text" placeholder="Find an article..."><input type="hidden" name="language" value=en hidden><input type="hidden" name="category" value=article hidden><input type="hidden" name="paginate" value="25" hidden><input type="hidden" name="order" value="newest" hidden><input type="hidden" name="hl" value=en hidden><span class="A0lwXc" jsname="D8MWrd" aria-label="Show the search input field." role="button" jsaction="click:jUF4E"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c" viewBox="0 0 24 24" role="presentation" aria-hidden="true" width="40" height="22"><path d="M20.49 19l-5.73-5.73C15.53 12.2 16 10.91 16 9.5A6.5 6.5 0 1 0 9.5 16c1.41 0 2.7-.47 3.77-1.24L19 20.49 20.49 19zM5 9.5C5 7.01 7.01 5 9.5 5S14 7.01 14 9.5 11.99 14 9.5 14 5 11.99 5 9.5z"></path></svg></span></form></div></div></div></div></div><div class="glue-header__bar glue-header__bar--desktop glue-header__drawer YcctDe" track-metadata-module="header"><div class="nRhiJb-mb9u9d M7RUq"><div class="glue-header__container JF2WI"><div class="nRhiJb-o2XRw-yHKmmc lUwpmd"><div class="nRhiJb-rSCjMe"><a class="nRhiJb-rSCjMe-hSRGPd" href="https://cloud.google.com/" title="Google Cloud" track-name="google cloud"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/"track-metadata-module="header"><div class="nRhiJb-rSCjMe-haAclf"><svg class="glue-header__logo-svg" viewBox="0 0 74 24" role="presentation" aria-hidden="true"><path fill="#4285F4" d="M9.24 8.19v2.46h5.88c-.18 1.38-.64 2.39-1.34 3.1-.86.86-2.2 1.8-4.54 1.8-3.62 0-6.45-2.92-6.45-6.54s2.83-6.54 6.45-6.54c1.95 0 3.38.77 4.43 1.76L15.4 2.5C13.94 1.08 11.98 0 9.24 0 4.28 0 .11 4.04.11 9s4.17 9 9.13 9c2.68 0 4.7-.88 6.28-2.52 1.62-1.62 2.13-3.91 2.13-5.75 0-.57-.04-1.1-.13-1.54H9.24z"></path><path fill="#EA4335" d="M25 6.19c-3.21 0-5.83 2.44-5.83 5.81 0 3.34 2.62 5.81 5.83 5.81s5.83-2.46 5.83-5.81c0-3.37-2.62-5.81-5.83-5.81zm0 9.33c-1.76 0-3.28-1.45-3.28-3.52 0-2.09 1.52-3.52 3.28-3.52s3.28 1.43 3.28 3.52c0 2.07-1.52 3.52-3.28 3.52z"></path><path fill="#4285F4" d="M53.58 7.49h-.09c-.57-.68-1.67-1.3-3.06-1.3C47.53 6.19 45 8.72 45 12c0 3.26 2.53 5.81 5.43 5.81 1.39 0 2.49-.62 3.06-1.32h.09v.81c0 2.22-1.19 3.41-3.1 3.41-1.56 0-2.53-1.12-2.93-2.07l-2.22.92c.64 1.54 2.33 3.43 5.15 3.43 2.99 0 5.52-1.76 5.52-6.05V6.49h-2.42v1zm-2.93 8.03c-1.76 0-3.1-1.5-3.1-3.52 0-2.05 1.34-3.52 3.1-3.52 1.74 0 3.1 1.5 3.1 3.54.01 2.03-1.36 3.5-3.1 3.5z"></path><path fill="#FBBC05" d="M38 6.19c-3.21 0-5.83 2.44-5.83 5.81 0 3.34 2.62 5.81 5.83 5.81s5.83-2.46 5.83-5.81c0-3.37-2.62-5.81-5.83-5.81zm0 9.33c-1.76 0-3.28-1.45-3.28-3.52 0-2.09 1.52-3.52 3.28-3.52s3.28 1.43 3.28 3.52c0 2.07-1.52 3.52-3.28 3.52z"></path><path fill="#34A853" d="M58 .24h2.51v17.57H58z"></path><path fill="#EA4335" d="M68.26 15.52c-1.3 0-2.22-.59-2.82-1.76l7.77-3.21-.26-.66c-.48-1.3-1.96-3.7-4.97-3.7-2.99 0-5.48 2.35-5.48 5.81 0 3.26 2.46 5.81 5.76 5.81 2.66 0 4.2-1.63 4.84-2.57l-1.98-1.32c-.66.96-1.56 1.6-2.86 1.6zm-.18-7.15c1.03 0 1.91.53 2.2 1.28l-5.25 2.17c0-2.44 1.73-3.45 3.05-3.45z"></path></svg></div><span class="nRhiJb-rSCjMe-OWXEXe-UBMNlb khBwGd">Cloud</span></a></div></div><div class="nRhiJb-o2XRw-yHKmmc UrjqX"><div class="nRhiJb-rSCjMe"><a class="nRhiJb-rSCjMe-hSRGPd" href="https://cloud.google.com/blog" title="Google Cloud Blog" track-name="blog"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog"track-metadata-module="header"><span class="nRhiJb-rSCjMe-OWXEXe-UBMNlb khBwGd">Blog</span></a></div></div></div><div class="glue-header__container glue-header__stepped-nav LKvi8b" role="navigation"><div class="glue-header__stepped-nav-controls-container"><div class="glue-header__stepped-nav-controls"><div class="glue-header__stepped-nav-controls-arrow"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M16.41 5.41L15 4l-8 8 8 8 1.41-1.41L9.83 12"></path></svg><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G glue-header__stepped-nav-subnav-icon" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M7.59 18.59L9 20l8-8-8-8-1.41 1.41L14.17 12"></path></svg></div><div class="glue-header__stepped-nav-controls-title glue-header__link"></div></div></div><div class="glue-header__stepped-nav-menus"></div></div><div class="glue-header__container nRhiJb-J6KYL-OWXEXe-Q4irje"><nav class="glue-header__link-bar"><ul class="glue-header__list glue-header__list--nested glue-header__deep-nav URiJfb"><li class="glue-header__item "><a class="glue-header__link">Solutions &amp; technology<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M5.41 7.59L4 9l8 8 8-8-1.41-1.41L12 14.17"></path></svg></a><ul class="glue-header__list NDdrcc"><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/ai-machine-learning" track-name="ai &amp; machine learning"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/ai-machine-learning"track-metadata-module="header"><span>AI &amp; Machine Learning</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/api-management" track-name="api management"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/api-management"track-metadata-module="header"><span>API Management</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/application-development" track-name="application development"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/application-development"track-metadata-module="header"><span>Application Development</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/application-modernization" track-name="application modernization"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/application-modernization"track-metadata-module="header"><span>Application Modernization</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/chrome-enterprise" track-name="chrome enterprise"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/chrome-enterprise"track-metadata-module="header"><span>Chrome Enterprise</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/compute" track-name="compute"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/compute"track-metadata-module="header"><span>Compute</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/containers-kubernetes" track-name="containers &amp; kubernetes"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/containers-kubernetes"track-metadata-module="header"><span>Containers &amp; Kubernetes</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/data-analytics" track-name="data analytics"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/data-analytics"track-metadata-module="header"><span>Data Analytics</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/databases" track-name="databases"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/databases"track-metadata-module="header"><span>Databases</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/devops-sre" track-name="devops &amp; sre"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/devops-sre"track-metadata-module="header"><span>DevOps &amp; SRE</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/maps-geospatial" track-name="maps &amp; geospatial"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/maps-geospatial"track-metadata-module="header"><span>Maps &amp; Geospatial</span></a></li><li class="glue-header__item "><a class="glue-header__link janap">Security<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M7.59 18.59L9 20l8-8-8-8-1.41 1.41L14.17 12"></path></svg></a><ul class="glue-header__list NDdrcc"><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/identity-security" track-name="security &amp; identity"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/identity-security"track-metadata-module="header"><span>Security &amp; Identity</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/threat-intelligence" track-name="threat intelligence"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence"track-metadata-module="header"><span>Threat Intelligence</span></a></li></ul></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/infrastructure" track-name="infrastructure"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/infrastructure"track-metadata-module="header"><span>Infrastructure</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/infrastructure-modernization" track-name="infrastructure modernization"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/infrastructure-modernization"track-metadata-module="header"><span>Infrastructure Modernization</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/networking" track-name="networking"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/networking"track-metadata-module="header"><span>Networking</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/productivity-collaboration" track-name="productivity &amp; collaboration"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/productivity-collaboration"track-metadata-module="header"><span>Productivity &amp; Collaboration</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/sap-google-cloud" track-name="sap on google cloud"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/sap-google-cloud"track-metadata-module="header"><span>SAP on Google Cloud</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/storage-data-transfer" track-name="storage &amp; data transfer"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/storage-data-transfer"track-metadata-module="header"><span>Storage &amp; Data Transfer</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/sustainability" track-name="sustainability"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/sustainability"track-metadata-module="header"><span>Sustainability</span></a></li></ul></li><li class="glue-header__item "><a class="glue-header__link">Ecosystem<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M5.41 7.59L4 9l8 8 8-8-1.41-1.41L12 14.17"></path></svg></a><ul class="glue-header__list NDdrcc"><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/transform" track-name="it leaders"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/transform"track-metadata-module="header"><span>IT Leaders</span></a></li><li class="glue-header__item "><a class="glue-header__link janap">Industries<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M7.59 18.59L9 20l8-8-8-8-1.41 1.41L14.17 12"></path></svg></a><ul class="glue-header__list NDdrcc"><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/financial-services" track-name="financial services"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/financial-services"track-metadata-module="header"><span>Financial Services</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/healthcare-life-sciences" track-name="healthcare &amp; life sciences"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/healthcare-life-sciences"track-metadata-module="header"><span>Healthcare &amp; Life Sciences</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/manufacturing" track-name="manufacturing"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/manufacturing"track-metadata-module="header"><span>Manufacturing</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/products/media-entertainment" track-name="media &amp; entertainment"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/products/media-entertainment"track-metadata-module="header"><span>Media &amp; Entertainment</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/public-sector" track-name="public sector"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/public-sector"track-metadata-module="header"><span>Public Sector</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/retail" track-name="retail"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/retail"track-metadata-module="header"><span>Retail</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/supply-chain-logistics" track-name="supply chain"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/supply-chain-logistics"track-metadata-module="header"><span>Supply Chain</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/telecommunications" track-name="telecommunications"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/telecommunications"track-metadata-module="header"><span>Telecommunications</span></a></li></ul></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/partners" track-name="partners"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/partners"track-metadata-module="header"><span>Partners</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/startups" track-name="startups &amp; smb"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/startups"track-metadata-module="header"><span>Startups &amp; SMB</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/training-certifications" track-name="training &amp; certifications"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/training-certifications"track-metadata-module="header"><span>Training &amp; Certifications</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/inside-google-cloud" track-name="inside google cloud"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/inside-google-cloud"track-metadata-module="header"><span>Inside Google Cloud</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://cloud.google.com/blog/topics/google-cloud-next" track-name="google cloud next &amp; events"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/google-cloud-next"track-metadata-module="header"><span>Google Cloud Next &amp; Events</span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://mapsplatform.google.com/resources/blog/" track-name="google maps platform"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="mapsplatform.google.com/resources/blog/"track-metadata-module="header" target="_blank"><span>Google Maps Platform<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G FsOzib nRhiJb-tHaKme-AipIyc" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="m8.9 16.075 5.4-5.4v2.675h1.4V8.3h-5.05v1.4h2.65l-5.375 5.375ZM12 21.3q-1.925 0-3.625-.738-1.7-.737-2.95-1.987-1.25-1.25-1.987-2.95Q2.7 13.925 2.7 12t.738-3.625q.737-1.7 1.987-2.95 1.25-1.25 2.95-1.988Q10.075 2.7 12 2.7t3.625.737q1.7.738 2.95 1.988 1.25 1.25 1.987 2.95.738 1.7.738 3.625t-.738 3.625q-.737 1.7-1.987 2.95-1.25 1.25-2.95 1.987-1.7.738-3.625.738Z"></path></svg></span></a></li><li class="glue-header__item "><a class="glue-header__link janap " href="https://workspace.google.com/blog" track-name="google workspace"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="workspace.google.com/blog"track-metadata-module="header" target="_blank"><span>Google Workspace<svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-SFi8G FsOzib nRhiJb-tHaKme-AipIyc" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="m8.9 16.075 5.4-5.4v2.675h1.4V8.3h-5.05v1.4h2.65l-5.375 5.375ZM12 21.3q-1.925 0-3.625-.738-1.7-.737-2.95-1.987-1.25-1.25-1.987-2.95Q2.7 13.925 2.7 12t.738-3.625q.737-1.7 1.987-2.95 1.25-1.25 2.95-1.988Q10.075 2.7 12 2.7t3.625.737q1.7.738 2.95 1.988 1.25 1.25 1.987 2.95.738 1.7.738 3.625t-.738 3.625q-.737 1.7-1.987 2.95-1.25 1.25-2.95 1.987-1.7.738-3.625.738Z"></path></svg></span></a></li></ul></li><li class="glue-header__item "><a class="glue-header__link " href="https://cloud.google.com/blog/topics/developers-practitioners" track-name="developers &amp; practitioners"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/blog/topics/developers-practitioners"track-metadata-module="header"><span>Developers &amp; Practitioners</span></a></li><li class="glue-header__item "><a class="glue-header__link " href="https://cloud.google.com/transform" track-name="transform with google cloud"track-type="blog nav"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/transform"track-metadata-module="header"><span>Transform with Google Cloud</span></a></li></ul></nav></div><div class="glue-header__container ca6rub nRhiJb-J6KYL-OWXEXe-SU0ZEf"><div class="nRhiJb-GUI8l"><a class="nRhiJb-LgbsSe  nRhiJb-LgbsSe-OWXEXe-pSzOP-o6Shpd " href="https://cloud.google.com/contact/" track-name="contact sales"track-type="blog nav"track-metadata-eventdetail="cloud.google.com/contact/"track-metadata-module="header" track-name="contact sales"track-type="button"track-metadata-position="nav"track-metadata-eventdetail="cloud.google.com/contact/">Contact sales </a><a class="nRhiJb-LgbsSe  nRhiJb-LgbsSe-OWXEXe-CNusmb-o6Shpd " href="https://console.cloud.google.com/freetrial/" track-name="get started for free"track-type="blog nav"track-metadata-eventdetail="console.cloud.google.com/freetrial/"track-metadata-module="header" track-name="get started for free"track-type="button"track-metadata-position="nav"track-metadata-eventdetail="console.cloud.google.com/freetrial/">Get started for free </a></div><div class="GKI4ub"><div class="Jhiezd"><form action="/blog/search/" class="A2C6Ob"><input class="BAhdXd" jsname="oJAbI" name="query" type="text" placeholder="Find an article..."><input type="hidden" name="language" value=en hidden><input type="hidden" name="category" value=article hidden><input type="hidden" name="paginate" value="25" hidden><input type="hidden" name="order" value="newest" hidden><input type="hidden" name="hl" value=en hidden><span class="A0lwXc" jsname="D8MWrd" aria-label="Show the search input field." role="button" jsaction="click:jUF4E"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c" viewBox="0 0 24 24" role="presentation" aria-hidden="true" width="40" height="22"><path d="M20.49 19l-5.73-5.73C15.53 12.2 16 10.91 16 9.5A6.5 6.5 0 1 0 9.5 16c1.41 0 2.7-.47 3.77-1.24L19 20.49 20.49 19zM5 9.5C5 7.01 7.01 5 9.5 5S14 7.01 14 9.5 11.99 14 9.5 14 5 11.99 5 9.5z"></path></svg></span></form></div></div></div></div></div><div class="glue-header__drawer-backdrop"></div></header><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">var AF_initDataKeys = ["ds:0"]; var AF_dataServiceRequests = {'ds:0' : {id:'nInjGe',request:["cloudblog","topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator","en"]}}; var AF_initDataChunkQueue = []; var AF_initDataCallback; var AF_initDataInitializeCallback; if (AF_initDataInitializeCallback) {AF_initDataInitializeCallback(AF_initDataKeys, AF_initDataChunkQueue, AF_dataServiceRequests);}if (!AF_initDataCallback) {AF_initDataCallback = function(chunk) {AF_initDataChunkQueue.push(chunk);};}</script></head><body id="yDmH0d" jscontroller="pjICDe" jsaction="rcuQ6b:npT2md; click:FAbpgf; auxclick:FAbpgf" class="tQj5Y ghyPEc IqBfM ecJEib EWZcud nRhiJb-qJTHM" data-has-header="true" data-has-footer="true"><script aria-hidden="true" nonce="7Hibp_PLMbjEvbm9bu7mWQ">window.wiz_progress&&window.wiz_progress();</script><div class="VUoKZ" aria-hidden="true"><div class="TRHLAc"></div></div><c-wiz jsrenderer="zPZHOe" class="SSPGKf" jsdata="deferred-i1" data-p="%.@.&quot;cloudblog&quot;,&quot;topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator&quot;,&quot;en&quot;]" data-node-index="0;0" jsmodel="hc6Ubd" view c-wiz data-ogpc><div class="T4LgNb " jsname="a9kxte"><div jsname="qJTHM" class="kFwPee"><article class="nRhiJb-qJTHM" jsaction="rcuQ6b:npT2md" jscontroller="kxO7ab"><section class="nRhiJb-DARUcf"><div class="Wdmc0c nRhiJb-DbgRPb-wNfPc-cGMI2b"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c nRhiJb-BFbNVe-r8s4j-bMElCd dIsJJe" track-name="threat intelligence"track-type="tag">Threat Intelligence</div><div class="nRhiJb-ObfsIf"><div class="nRhiJb-kR0ZEf-OWXEXe-GV1x9e-R6PoUb"></div><div class="nRhiJb-kR0ZEf-OWXEXe-GV1x9e-EehZO nRhiJb-fmcmS-oXtfBe"><h1 class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-ibL1re"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-ibL1re"><span class="FewWi"></span>ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator</div></h1></div></div><div class="nRhiJb-fmcmS-oXtfBe dEogG">January 28, 2025</div></div></section><div class="EKklye"><div class="nRhiJb-DARUcf ZWw7T"><div class="npzWPc"><div class="dzoHJ"><div class="nRhiJb-DX2B6 nRhiJb-DX2B6-OWXEXe-h30Snd"><div class="nRhiJb-j5y3u"><ul class="nRhiJb-Qijihe phRaUe" role="list"><li class="hpHPGf"><a class="nRhiJb-ARYxNe" href="https://x.com/intent/tweet?text=ScatterBrain:%20Unmasking%20the%20Shadow%20of%20PoisonPlug%27s%20Obfuscator%20@googlecloud&amp;url=https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator" track-name="x"track-type="social share"track-metadata-eventdetail="x.com/intent/tweet?text=ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator%20@googlecloud&amp;url=cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator"track-metadata-module="social icons" target="_blank" rel="noopener"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-DX2B6 nRhiJb-Bz112c-OWXEXe-nSuQf" viewBox="0 0 24 24" role="presentation" aria-hidden="true" role="presentation" aria-hidden="true"><path d="M13.9,10.5L21.1,2h-1.7l-6.3,7.4L8,2H2.2l7.6,11.1L2.2,22h1.7l6.7-7.8L16,22h5.8L13.9,10.5L13.9,10.5z M11.5,13.2l-0.8-1.1 L4.6,3.3h2.7l5,7.1l0.8,1.1l6.5,9.2h-2.7L11.5,13.2L11.5,13.2z"></path></svg></a></li><li class="hpHPGf"><a class="nRhiJb-ARYxNe" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator&amp;title=ScatterBrain:%20Unmasking%20the%20Shadow%20of%20PoisonPlug%27s%20Obfuscator" track-name="linkedin"track-type="social share"track-metadata-eventdetail="www.linkedin.com/shareArticle?mini=true&amp;url=cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator&amp;title=ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator"track-metadata-module="social icons" target="_blank" rel="noopener"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-DX2B6 nRhiJb-Bz112c-OWXEXe-nSuQf" viewBox="0 0 24 24" role="presentation" aria-hidden="true" role="presentation" aria-hidden="true"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 20c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 19H5v-9h3v9zM6.5 8.31c-1 0-1.81-.81-1.81-1.81S5.5 4.69 6.5 4.69s1.81.81 1.81 1.81S7.5 8.31 6.5 8.31zM19 19h-3v-5.3c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5V19h-3v-9h3v1.2c.52-.84 1.59-1.4 2.5-1.4 1.93 0 3.5 1.57 3.5 3.5V19z"></path></svg></a></li><li class="hpHPGf"><a class="nRhiJb-ARYxNe" href="https://www.facebook.com/sharer/sharer.php?caption=ScatterBrain:%20Unmasking%20the%20Shadow%20of%20PoisonPlug%27s%20Obfuscator&amp;u=https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator" track-name="facebook"track-type="social share"track-metadata-eventdetail="www.facebook.com/sharer/sharer.php?caption=ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator&amp;u=cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator"track-metadata-module="social icons" target="_blank" rel="noopener"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-DX2B6 nRhiJb-Bz112c-OWXEXe-nSuQf" viewBox="0 0 24 24" role="presentation" aria-hidden="true" role="presentation" aria-hidden="true"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 20c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 2v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v7h-3v-7h-2v-3h2V7.5C13 5.57 14.57 4 16.5 4H19z"></path></svg></a></li><li class="hpHPGf"><a class="nRhiJb-ARYxNe" href="mailto:?subject=ScatterBrain:%20Unmasking%20the%20Shadow%20of%20PoisonPlug%27s%20Obfuscator&amp;body=Check%20out%20this%20article%20on%20the%20Cloud%20Blog:%0A%0AScatterBrain:%20Unmasking%20the%20Shadow%20of%20PoisonPlug%27s%20Obfuscator%0A%0AWe%20been%20tracking%20multiple%20espionage%20operations%20conducted%20by%20China-nexus%20actors%20utilizing%20POISONPLUG.SHADOW%20malware.%0A%0Ahttps://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator" track-name="email"track-type="social share"track-metadata-eventdetail="mailto:?subject=ScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator&amp;body=Check%20out%20this%20article%20on%20the%20Cloud%20Blog:%0A%0AScatterBrain: Unmasking the Shadow of PoisonPlug&#39;s Obfuscator%0A%0AWe been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware.%0A%0Acloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator"track-metadata-module="social icons" target="_blank" rel="noopener"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-DX2B6 nRhiJb-Bz112c-OWXEXe-nSuQf" viewBox="0 0 24 24" role="presentation" aria-hidden="true" role="presentation" aria-hidden="true"><path d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-.8 2L12 10.8 4.8 6h14.4zM4 18V7.87l8 5.33 8-5.33V18H4z"></path></svg></a></li></ul></div></div></div></div></div><div><section class="nRhiJb-DARUcf"><div class="nRhiJb-DbgRPb-wNfPc-ma6Yeb nRhiJb-DbgRPb-wNfPc-cGMI2b"><section class="DA9Qj nRhiJb-ObfsIf nRhiJb-fmcmS-oXtfBe"><div class="nRhiJb-kR0ZEf-OWXEXe-GV1x9e-c5RTEf"></div><div class="nRhiJb-kR0ZEf-OWXEXe-GV1x9e-qWD73c"><h5 class="cHE8Ub Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c">Mandiant </h5><p class="nRhiJb-qJTHM khCp7b"></p></div></section></div></section><div class="nRhiJb-DARUcf"><div class="nRhiJb-ObfsIf nRhiJb-DbgRPb-wNfPc-ma6Yeb nRhiJb-DbgRPb-qWD73c-cGMI2b"><div class="nRhiJb-kR0ZEf-OWXEXe-GV1x9e-ibL1re dzoHJ"></div><div class="OYL9D nRhiJb-kR0ZEf-OWXEXe-GV1x9e-OiUrBf" jsname="tx2NYc"><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Written by: <span style="vertical-align:baseline">Nino Isakovic</span></p>
<hr></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h2><span style="vertical-align:baseline">Introduction</span></h2>
<p><span style="vertical-align:baseline">Since 2022, Google Threat Intelligence Group (GTIG) has been tracking multiple cyber espionage operations conducted by China-nexus actors utilizing </span><strong style="vertical-align:baseline">POISONPLUG.SHADOW</strong><span style="vertical-align:baseline">. These operations employ a custom obfuscating compiler that we refer to as "</span><strong style="vertical-align:baseline">ScatterBrain</strong><span style="vertical-align:baseline">," facilitating attacks against various entities across Europe and the Asia Pacific (APAC) region. ScatterBrain appears to be a substantial evolution of ScatterBee, an obfuscating compiler </span><a href="https://www.pwc.co.uk/issues/cyber-security-services/research/chasing-shadows.html" rel="noopener" target="_blank"><span style="text-decoration:underline;vertical-align:baseline">previously analyzed by PWC</span></a><span style="vertical-align:baseline">.</span></p>
<p><span style="vertical-align:baseline">GTIG assesses that POISONPLUG is an advanced modular backdoor used by multiple distinct, but likely related threat groups based in the PRC, however we assess that POISONPLUG.SHADOW usage appears to be further restricted to clusters associated with APT41.</span></p>
<p><span style="vertical-align:baseline">GTIG currently tracks three known POISONPLUG variants:</span></p>
<ul>
<li><span style="vertical-align:baseline">POISONPLUG</span></li>
<li><span style="vertical-align:baseline">POISONPLUG.DEED</span></li>
<li><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></li>
</ul></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">POISONPLUG.SHADOW—often referred to as "Shadowpad," a malware family name first introduced by Kaspersky—stands out due to its use of a custom obfuscating compiler specifically designed to evade detection and analysis. Its complexity is compounded by not only the extensive obfuscation mechanisms employed but also by the attackers' highly sophisticated threat tactics. These elements collectively make analysis exceptionally challenging and complicate efforts to identify, understand, and mitigate the associated threats it poses.</span></p>
<p><span style="vertical-align:baseline">In addressing these challenges, GTIG collaborates closely with the FLARE team to dissect and analyze POISONPLUG.SHADOW. This partnership utilizes state-of-the-art reverse engineering techniques and comprehensive threat intelligence capabilities required to mitigate the sophisticated threats posed by this threat actor. We remain dedicated to advancing methodologies and fostering innovation to adapt to and counteract the ever-evolving tactics of threat actors, ensuring the security of Google and our customers against sophisticated cyber espionage operations.</span></p>
<h2><span style="vertical-align:baseline">Overview</span></h2>
<p><span style="vertical-align:baseline">In this blog post, we present our in-depth analysis of the ScatterBrain obfuscator, which has led to the development of a <a href="https://github.com/mandiant/poisonplug-scatterbrain" rel="noopener" target="_blank">complete stand-alone static deobfuscator library</a> independent of any binary analysis frameworks. Our analysis is based solely on the obfuscated samples we have successfully recovered, as we do not possess the obfuscating compiler itself. Despite this limitation, we have been able to comprehensively infer every aspect of the obfuscator and the necessary requirements to break it. Our analysis further reveals that ScatterBrain is continuously evolving, with incremental changes identified over time, highlighting its ongoing development.</span></p>
<p><span style="vertical-align:baseline">This publication begins by exploring the fundamental primitives of ScatterBrain, outlining all its components and the challenges they present for analysis. We then detail the steps required to subvert and remove each protection mechanism, culminating in our deobfuscator. Our library takes protected binaries generated by ScatterBrain as input and produces fully functional deobfuscated binaries as output.</span></p>
<p><span style="vertical-align:baseline">By detailing the inner workings of ScatterBrain and sharing our deobfuscator, we hope to provide valuable insights into developing effective countermeasures. Our blog post is intentionally exhaustive, drawing from our experience in dealing with obfuscation for clients, where we observed a significant lack of clarity in understanding modern obfuscation techniques. Similarly, analysts often struggle with understanding even relatively simplistic obfuscation methods primarily because standard binary analysis tooling is not designed to account for them. Therefore, our goal is to alleviate this burden and help enhance the collective understanding against commonly seen protection mechanisms.</span></p>
<p><span style="vertical-align:baseline"><span style="vertical-align:baseline">For general questions about obfuscating compilers, </span><a href="https://cloud.google.com/blog/topics/threat-intelligence/lummac2-obfuscation-through-indirect-control-flow"><span style="text-decoration:underline;vertical-align:baseline">we refer to our previous work</span></a><span style="vertical-align:baseline"> on the topic, which provides an introduction and overview.</span></span></p>
<h2><span style="vertical-align:baseline">ScatterBrain Obfuscator</span></h2>
<h3><span style="vertical-align:baseline">Introduction</span></h3>
<p><span style="vertical-align:baseline">ScatterBrain is a sophisticated obfuscating compiler that integrates multiple operational modes and protection components to significantly complicate the analysis of the binaries it generates. Designed to render modern binary analysis frameworks and defender tools ineffective, ScatterBrain disrupts both static and dynamic analyses.</span></p>
<ul>
<li><strong style="vertical-align:baseline">Protection Modes:</strong><span style="vertical-align:baseline"> ScatterBrain operates in three distinct modes, each determining the overall structure and intensity of the applied protections. These modes allow the compiler to adapt its obfuscation strategies based on the specific requirements of the attack.</span></li>
<li><strong style="vertical-align:baseline">Protection Components: </strong><span style="vertical-align:baseline">The compiler employs key protection components that include the following:</span>
<ul>
<li><strong style="vertical-align:baseline">Selective or Full Control Flow Graph (CFG) Obfuscation:</strong><span style="vertical-align:baseline"> This technique restructures the program's control flow, making it very difficult to analyze and create detection rules for.</span></li>
<li><strong style="vertical-align:baseline">Instruction Mutations:</strong><span style="vertical-align:baseline"> ScatterBrain alters instructions to obscure their true functionality without changing the program's behavior.</span></li>
<li><strong style="vertical-align:baseline">Complete Import Protection:</strong><span style="vertical-align:baseline"> ScatterBrain employs a complete protection of a binary's import table, making it extremely difficult to understand how the binary interacts with the underlying operating system.</span></li>
</ul>
</li>
</ul>
<p><span style="vertical-align:baseline">These protection mechanisms collectively make it extremely challenging for analysts to deconstruct and understand the functionality of the obfuscated binaries. As a result, ScatterBrain poses a formidable obstacle for cybersecurity professionals attempting to dissect and mitigate the threats it generates.</span></p>
<h3><span style="vertical-align:baseline">Modes of Operation</span></h3>
<p><span style="vertical-align:baseline">A mode refers to how ScatterBrain will transform a given binary into its obfuscated representation. It is distinct from the actual core obfuscation mechanisms themselves and is more about the overall strategy of applying protections. Our analysis further revealed a consistent pattern in applying various protection modes at specific stages of an attack chain:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Selective: </strong><span style="vertical-align:baseline">A group of individually selected functions are protected, leaving the remainder of the binary in its original state. Any import references within the selected functions are also obfuscated. This mode was observed to be used strictly for dropper samples of an attack chain.</span></li>
<li><strong style="vertical-align:baseline">Complete: </strong><span style="vertical-align:baseline">The entirety of the code section and all imports are protected. This mode was applied solely to the plugins embedded within the main backdoor payload.</span></li>
<li><strong style="vertical-align:baseline">Complete "headerless": </strong><span style="vertical-align:baseline">This is an extension of the </span><strong style="vertical-align:baseline">Complete</strong><span style="vertical-align:baseline"> mode with added data protections and the removal of the PE header. This mode was exclusively reserved for the final backdoor payload.</span></li>
</ul>
<h4><span style="vertical-align:baseline">Selective</span></h4>
<p><span style="vertical-align:baseline">The selective mode of protection allows users of the obfuscator to selectively target individual functions within the binary for protection. Protecting an individual function involves keeping the function at its original starting address (produced by the original compiler and linker) and substituting the first instruction with a jump to the obfuscated code. The generated obfuscations are stored linearly from this starting point up to a designated "end marker" that signifies the ending boundary of the applied protection. This entire range constitutes a protected function.</span></p>
<p><span style="vertical-align:baseline">The disassembly of a call site to a protected function can take the following from:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>.text:180001000 sub     rsp, 28h
.text:180001004 mov     rcx, cs:g_Imagebase
.text:18000100B call    PROTECTED_FUNCTION ; call to protected func
.text:180001010 mov     ecx, eax 
.text:180001012 call    cs:ExitProcess</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 1: Disassembly of a call to a protected function</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The start of the protected function:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>.text:180001039 PROTECTED_FUNCTION 
.text:180001039   jmp     loc_18000DF97 ; jmp into obfuscated code
.text:180001039 sub_180001039 endp
.text:000000018000103E db  48h ; H.     ; garbage data
.text:000000018000103F db 0FFh
.text:0000000180001040 db 0C1h</code></pre>
<p style="text-align:center"><span style="color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 2: Disassembly inside of a protected function</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The "end marker" consists of two sets of padding instructions, an </span><code style="vertical-align:baseline">int3 </code><span style="vertical-align:baseline">instruction and a single </span><code style="vertical-align:baseline">multi-nop </code><span style="vertical-align:baseline">instruction:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>END_MARKER:
.text:18001A95C   CC CC CC CC CC CC CC CC CC CC 66 
66 0F 1F 84 00 00 00 00 00
.text:18001A95C int     3
.text:18001A95D int     3
.text:18001A95E int     3
.text:18001A95F int     3
.text:18001A960 int     3
.text:18001A961 int     3
.text:18001A962 int     3
.text:18001A963 int     3
.text:18001A964 int     3
.text:18001A965 int     3
.text:18001A966 db      66h, 66h   ; @NOTE: IDA doesn't disassemble properly
.text:18001A966 nop     word ptr [rax+rax+00000000h]
; -------------------------------------------------------------------------
; next, original function
.text:18001A970 ; [0000001F BYTES: COLLAPSED FUNCTION 
__security_check_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]</code></pre>
<p style="text-align:center"><span style="color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 3: Disassembly listing of an end marker</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h4><span style="vertical-align:baseline">Complete</span></h4>
<p><span style="vertical-align:baseline">The complete mode protects every function within the </span><code style="vertical-align:baseline">.text</code><span style="vertical-align:baseline"> section of the binary, with all protections integrated directly into a single code section. There are no end markers to signify protected regions; instead, every function is uniformly protected, ensuring comprehensive coverage without additional sectioning.</span></p>
<p><span style="vertical-align:baseline">This mode forces the need for some kind of deobfuscation tooling. Whereas selective mode only protects the selected functions and leaves everything else in its original state, this mode makes the output binary extremely difficult to analyze without accounting for the obfuscation.</span></p>
<h4><span style="vertical-align:baseline">Complete Headerless</span></h4>
<p><span style="vertical-align:baseline">This complete mode extends the complete approach to add further data obfuscations alongside the code protections. It is the most comprehensive mode of protection and was observed to be exclusively limited to the final payloads of an attack chain. It incorporates the following properties:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Full PE header of the protected binary is removed.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Custom loading logic (a loader) is introduced.</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Becomes the entry point of the protected binary</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Responsible of ensuring the protected binary is functional</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Includes the option of mapping the final payload within a separate memory region distinct from the initial memory region it was loaded in</span></p>
</li>
</ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Metadata is protected via hash-like integrity checks.</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">The metadata is utilized by the loader as part of its initialization sequence.</span></p>
</li>
</ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Import protection will require relocation adjustments.</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Done through an "import fixup table"</span></p>
</li>
</ul>
</ul>
<p><span style="vertical-align:baseline">The loader’s entry routine crudely merges with the original entry of the binary by inserting multiple </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instructions to bridge the two together. The following is what the entry point looks like after running our deobfuscator against a binary protected in headerless mode.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 4: Deobfuscated loader entry</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The loader's metadata is stored in the </span><code style="vertical-align:baseline">.data</code><span style="vertical-align:baseline"> section of the protected binary. It is found via a memory scan that applies bitwise XOR operations against predefined constants. The use of these not only locates the metadata but also serves a dual purpose of verifying its integrity. By checking that the data matches expected patterns when XORed with these constants, the loader ensures that the metadata has not been altered or tampered with.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 5: Memory scan to identify the loader's metadata inside the .data section</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The metadata contains the following (in order):</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Import fixup table</span><strong style="vertical-align:baseline"> </strong><span style="vertical-align:baseline">(fully explained in the Import Protection section)</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Integrity-hash constants</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Relative virtual address (RVA) of the</span><strong style="vertical-align:baseline"> </strong><code style="vertical-align:baseline">.data</code><strong style="vertical-align:baseline"> </strong><span style="vertical-align:baseline">section</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Offset to the import fixup table from the start of the</span><strong style="vertical-align:baseline"> </strong><code style="vertical-align:baseline">.data</code><strong style="vertical-align:baseline"> </strong><span style="vertical-align:baseline">section</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Size, in bytes, of the fixup table</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Global pointer to the memory address that the backdoor is at</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Encrypted and compressed data specific to the backdoor</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Backdoor config and plugins</span></p>
</li>
</ul>
</ul></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 6: Loader's metadata</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h3><span style="vertical-align:baseline">Core Protection Components</span></h3>
<h4><span style="vertical-align:baseline">Instruction Dispatcher</span></h4>
<p><span style="vertical-align:baseline">The </span><strong style="vertical-align:baseline">instruction dispatcher</strong><span style="vertical-align:baseline"> is the central protection component that transforms the natural control flow of a binary (or individual function) into scattered basic blocks that end with a unique dispatcher routine that dynamically guides the execution of the protected binary.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 7: Illustration of the control flow instruction dispatchers induce</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Each call to a dispatcher is immediately followed by a 32-bit encoded displacement positioned at what would normally be the return address for the call. The dispatcher decodes this displacement to calculate the destination target for the next group of instructions to execute. A protected binary can easily contain thousands or even tens of thousands of these dispatchers making manual analysis of them practically infeasible. Additionally, the dynamic dispatching and decoding logic employed by each dispatcher effectively disrupts CFG reconstruction methods used by all binary analysis frameworks.</span></p>
<p><span style="vertical-align:baseline">The decoding logic is unique for each dispatcher and is carried out using a combination of </span><code style="vertical-align:baseline">add</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">sub</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">xor</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">and</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">or</code><span style="vertical-align:baseline">, and </span><code style="vertical-align:baseline">lea</code><span style="vertical-align:baseline"> instructions. The decoded offset value is then either subtracted from or added to the expected return address of the dispatcher call to determine the final destination address. This calculated address directs execution to the next block of instructions, which will similarly end with a dispatcher that uniquely decodes and jumps to subsequent instruction blocks, continuing this process iteratively to control the program flow.</span></p>
<p><span style="vertical-align:baseline">The following screenshot illustrates what a dispatcher instance looks like when constructed in IDA Pro. Notice the scattered addresses present even within instruction dispatchers, which result from the obfuscator transforming fallthrough instructions—instructions that naturally follow the preceding instruction—into pairs of conditional branches that use opposite conditions. This ensures that one branch is always taken, effectively creating an unconditional jump. Additionally, a </span><code style="vertical-align:baseline">mov</code><span style="vertical-align:baseline"> instruction that functions as a no-op is inserted to split these branches, further obscuring the control flow.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 8: Example of an instruction dispatcher and all of its components</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The core logic for any dispatcher can be categorized into the following four phases:</span></p>
<ol>
<li><strong style="vertical-align:baseline">Preservation of Execution Context</strong>
<ul>
<li><span style="vertical-align:baseline">Each dispatcher selects a single working register (e.g., </span><code style="vertical-align:baseline">RSI</code><span style="vertical-align:baseline"> as depicted in the screenshot) during the obfuscation process. This register is used in conjunction with the stack to carry out the intended decoding operations and dispatch. </span></li>
<li><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">RFLAGS</code><span style="vertical-align:baseline"> register in turn is safeguarded by employing </span><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> instructions before carrying out the decoding sequence.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Retrieval of Encoded Displacement</strong>
<ul>
<li><span style="vertical-align:baseline">Each dispatcher retrieves a 32-bit encoded displacement located at the return address of its corresponding call instruction. This encoded displacement serves as the basis for determining the next destination address.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Decoding Sequence</strong>
<ul>
<li><span style="vertical-align:baseline">Each dispatcher employs a unique decoding sequence composed of the following arithmetic and logical instructions: </span><code style="vertical-align:baseline">xor</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">sub</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">add</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">mul</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">imul</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">div</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">idiv</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">and</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">or</code><span style="vertical-align:baseline">, and </span><code style="vertical-align:baseline">not</code><span style="vertical-align:baseline">. This variability ensures that no two dispatchers operate identically, significantly increasing the complexity of the control flow.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Termination and Dispatch</strong>
<ul>
<li><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline"> instruction is strategically used to simultaneously signal the end of the dispatcher function and redirect the program's control flow to the previously calculated destination address.</span></li>
</ul>
</li>
</ol>
<p><span style="vertical-align:baseline">It is reasonable to infer that the obfuscator utilizes a template similar to the one illustrated in Figure 9 when applying its transformations to the original binary:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 9: Instruction dispatcher template</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h3><span style="vertical-align:baseline">Opaque Predicates</span></h3>
<p><span style="vertical-align:baseline">ScatterBrain uses a series of seemingly trivial opaque predicates (OP) that appear straightforward to analysts but significantly challenge contemporary binary analysis frameworks, especially when used collectively. These opaque predicates effectively disrupt static CFG recovery techniques not specifically designed to counter their logic. Additionally, they complicate symbolic execution approaches as well by inducing path explosions and hindering path prioritization. In the following sections, we will showcase a few examples produced by ScatterBrain.</span></p>
<h5><code style="vertical-align:baseline">test</code> OP</h5>
<p><span style="vertical-align:baseline">This opaque predicate is constructed around the behavior of the </span><code style="vertical-align:baseline">test</code> <span style="vertical-align:baseline">instruction when paired with an immediate zero value. Given that the </span><code style="vertical-align:baseline">test</code> <span style="vertical-align:baseline">instruction effectively performs a bitwise AND operation, the obfuscator exploits the fact that any value bitwise AND-ed with zero always invariably results in zero.</span></p>
<p><span style="vertical-align:baseline">Here are some abstracted examples we can find in a protected binary—abstracted in the sense that all instructions are not guaranteed to follow one another directly; other forms of mutations can be between them as can instruction dispatchers.</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>test    bl, 0
jnp     loc_56C96             ; we never satisfy these conditions
------------------------------
test    r8, 0
jo      near ptr loc_3CBC8
------------------------------
test    r13, 0
jnp     near ptr loc_1A834
------------------------------
test    eax, 0
jnz     near ptr loc_46806</code></pre>
<p style="text-align:center"><span style="color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 10: Test opaque predicate examples</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">To grasp the implementation logic of this opaque predicate, the semantics of the </span><code style="vertical-align:baseline">test</code> <span style="vertical-align:baseline">instruction and its effects on the processor's flags register are required. The instruction can affect six different flags in the following manner:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Overflow Flag (OF):</strong><span style="vertical-align:baseline"> Always cleared</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Carry Flag (CF):</strong><span style="vertical-align:baseline"> Always cleared</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Sign Flag (SF):</strong><span style="vertical-align:baseline"> Set if the most significant bit (MSB) of the result is set; otherwise cleared</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Zero Flag (ZF):</strong><span style="vertical-align:baseline"> Set if the result is 0; otherwise cleared</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Parity Flag (PF):</strong><span style="vertical-align:baseline"> Set if the number of set bits in the least significant byte (LSB) of the result is even; otherwise cleared</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Auxiliary Carry Flag (AF):</strong><span style="vertical-align:baseline"> Undefined</span></p>
</li>
</ul>
<p><span style="vertical-align:baseline">Applying this understanding to the sequences produced by ScatterBrain, it is evident that the generated conditions can never be logically satisfied:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><div align="left">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%"><table border="1px" cellpadding="16px" style="border-collapse:collapse;margin-left:auto;margin-right:auto"><colgroup><col><col></colgroup>
<tbody>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p style="text-align:center"><strong><span style="vertical-align:baseline">Sequence</span></strong></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p style="text-align:center"><strong style="vertical-align:baseline">Condition Description</strong></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">test &lt;reg&gt;, 0; jo</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">OF</code> <span style="vertical-align:baseline">is always cleared</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">test &lt;reg&gt;, 0; jnae/jc/jb</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">CF</code> <span style="vertical-align:baseline">is always cleared</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">test &lt;reg&gt;, 0; js</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">Resulting value will always be zero; therefore, </span><code style="vertical-align:baseline">SF</code> <span style="vertical-align:baseline">can never be set</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">test &lt;reg&gt;, 0; jnp/jpo</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">The number of bits in zero is always zero, which is an even number; therefore, </span><code style="vertical-align:baseline">PF</code> <span style="vertical-align:baseline">can never be set</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">test &lt;reg&gt;, 0; jne/jnz</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">Resulting value will always be zero; therefore, </span><code style="vertical-align:baseline">ZF</code> <span style="vertical-align:baseline">will always be set</span></p>
</td>
</tr>
</tbody>
</table></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Table 1: Test opaque predicate understanding</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><code style="vertical-align:baseline">jcc</code> OP</h5>
<p><span style="vertical-align:baseline">The opaque predicate is designed to statically obscure the original immediate branch targets for conditional branch (</span><code style="vertical-align:baseline">jcc</code><span style="vertical-align:baseline">) instructions. Consider the following examples:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>test    eax, eax
ja      loc_3BF9C
ja      loc_2D154 

test    r13, r13
jns     loc_3EA84
jns     loc_53AD9

test    eax, eax
jnz     loc_99C5
jnz     loc_121EC

cmp     eax, FFFFFFFF
jz      loc_273EE
jz      loc_4C227</code></pre>
<p style="text-align:center"><span style="color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 11: jcc opaque predicate examples</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The implementation is straightforward: each original </span><code style="vertical-align:baseline">jcc</code> <span style="vertical-align:baseline">instruction is duplicated with a bogus branch target. Since both </span><code style="vertical-align:baseline">jcc</code> <span style="vertical-align:baseline">instructions are functionally identical except for their respective branch destinations, we can determine with certainty that the first </span><code style="vertical-align:baseline">jcc</code> <span style="vertical-align:baseline">in each pair is the original instruction. This original </span><code style="vertical-align:baseline">jcc</code> <span style="vertical-align:baseline">dictates the correct branch target to follow when the respective condition is met, while the duplicated </span><code style="vertical-align:baseline">jcc</code> <span style="vertical-align:baseline">serves to confuse analysis tools by introducing misleading branch paths.</span></p>
<h5><span style="vertical-align:baseline">Stack-Based OP</span></h5>
<p><span style="vertical-align:baseline">The stack-based opaque predicate is designed to check whether the current stack pointer (</span><code style="vertical-align:baseline">rsp</code><span style="vertical-align:baseline">) is below a predetermined immediate threshold—a condition that can never be true. It is consistently implemented by pairing the </span><code style="vertical-align:baseline">cmp rsp</code><span style="vertical-align:baseline"> instruction with a </span><code style="vertical-align:baseline">jb</code><span style="vertical-align:baseline"> (jump if below) condition immediately afterward.</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>cmp rsp, 0x8d6e
jb      near ptr unk_180009FDA</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 12: Stack-based opaque predicate example</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">This technique inserts conditions that are always false, causing CFG algorithms to follow both branches and thereby disrupt their ability to accurately reconstruct the control flow.</span></p>
<h4><span style="vertical-align:baseline">Import Protection</span></h4>
<p><span style="vertical-align:baseline">The obfuscator implements a sophisticated import protection layer. This mechanism conceals the binary 's dependencies by transforming each original </span><code style="vertical-align:baseline">call</code> <span style="vertical-align:baseline">or </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instruction directed at an import through a unique stub dispatcher routine that knows how to dynamically resolve and invoke the import in question.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 13: Illustration of all the components involved in the import protection</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">It consists of the following components:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Import-specific encrypted</strong><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">data:</strong><span style="vertical-align:baseline"> Each protected import is represented by a unique dispatcher stub and a scattered data structure that stores RVAs to both the encrypted dynamic-link library (DLL) and application programming interface (API) names. We refer to this structure as </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">. Each dispatcher stub is hardcoded with a reference to its respective </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Dispatcher stub:</strong><span style="vertical-align:baseline"> This is an obfuscated stub that dynamically resolves and invokes the intended import. While every stub shares an identical template, each contains a unique hardcoded RVA that identifies and locates its corresponding </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Resolver routine:</strong><span style="vertical-align:baseline"> Called from the dispatcher stub, this obfuscated routine resolves the import and returns it to the dispatcher, which facilitates the final call to the intended import. It begins by locating the encrypted DLL and API names based on the information in </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">. After decrypting these names, the routine uses them to resolve the memory address of the API.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Import decryption routine:</strong><span style="vertical-align:baseline"> Called from the resolver routine, this obfuscated routine is responsible for decrypting the DLL and API name blobs through a custom stream cipher implementation. It uses a hardcoded 32-bit salt that is unique per protected sample.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Fixup Table:</strong><span style="vertical-align:baseline"> Present only in headerless mode, this is a relocation fixup table that the loader in headerless mode uses to correct all memory displacements to the following import protection components:</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Encrypted DLL names</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Encrypted API names</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Import dispatcher references</span></p>
</li>
</ul>
</ul>
<h5><span style="vertical-align:baseline">Dispatcher Stub</span></h5>
<p><span style="vertical-align:baseline">The core of the import protection mechanism is the </span><strong style="vertical-align:baseline">dispatcher stub</strong><span style="vertical-align:baseline">. Each stub is tailored to an individual import and consistently employs a </span><code style="vertical-align:baseline">lea</code> <span style="vertical-align:baseline">instruction to access its respective </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">, which it passes as the only input to the resolver routine.</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>push rcx                  ; save RCX
lea rcx, [rip+obf_imp_t]  ; fetch import-specific obf_imp_t
push    rdx               ; save all other registers the stub uses
push    r8
push    r9
sub     rsp, 28h
call    ObfImportResolver ; resolve the import and return it in RAX
add     rsp, 28h
pop     r9                ; restore all saved registers
pop     r8
pop     rdx
pop     rcx
jmp     rax               ; invoke resolved import</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 14: Deobfuscated import dispatcher stub</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Each stub is obfuscated through the mutation mechanisms outlined earlier. This applies to the resolver and import decryption routines as well. The following is what the execution flow of a stub can look like. Note the scattered addresses that while presented sequentially are actually jumping all around the code segment due to the instruction dispatchers.</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>0x01123a   call InstructionDispatcher_TargetTo_11552 
0x011552   push rcx
0x011553   call InstructionDispatcher_TargetTo_5618
0x005618   lea rcx, [rip+0x33b5b]                    ; fetch obf_imp_t
0x00561f   call InstructionDispatcher_TargetTo_f00c
0x00f00c   call InstructionDispatcher_TargetTo_191b5
0x0191b5   call InstructionDispatcher_TargetTo_1705a
0x01705a   push rdx
0x01705b   call InstructionDispatcher_TargetTo_05b4
0x0105b4   push r8
0x0105b6   call InstructionDispatcher_TargetTo_f027
0x00f027   push r9
0x00f029   call InstructionDispatcher_TargetTo_18294
0x018294   test eax, 0
0x01829a   jo 0xf33c
0x00f77b   call InstructionDispatcher_TargetTo_e817
0x00e817   sub rsp, 0x28
0x00e81b   call InstructionDispatcher_TargetTo_a556
0x00a556   call 0x6afa (ObfImportResolver)
0x00a55b   call InstructionDispatcher_TargetTo_19592
0x019592   test ah, 0
0x019595   call InstructionDispatcher_TargetTo_a739
0x00a739   js 0x1935
0x00a73b   call InstructionDispatcher_TargetTo_6eaa
0x006eaa   add rsp, 0x28
0x006eae   call InstructionDispatcher_TargetTo_6257
0x006257   pop r9
0x006259   call InstructionDispatcher_TargetTo_66d6
0x0066d6   pop r8
0x0066d8   call InstructionDispatcher_TargetTo_1a3cb
0x01a3cb   pop rdx
0x01a3cc   call InstructionDispatcher_TargetTo_67ab
0x0067ab   pop rcx
0x0067ac   call InstructionDispatcher_TargetTo_6911
0x006911   jmp rax</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 15: Obfuscated import dispatcher stub</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Resolver Logic</span></h5>
<p><code style="vertical-align:baseline">obf_imp_t</code> <span style="vertical-align:baseline">is the central data structure that contains the relevant information to resolve each import. It has the following form:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>struct obf_imp_t {    // sizeof=0x18
    uint32_t CryptDllNameRVA;    // NOTE: will be 64-bits, due to padding
    uint32_t CryptAPINameRVA;    // NOTE: will be 64-bits, due to padding
    uint64_t ResolvedImportAPI;  // Where the resolved address is stored
};</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 16: obf_imp_t in its original C struct source form</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">It is processed by the resolver routine, which uses the embedded RVAs to </span><span style="vertical-align:baseline">locate the encrypted DLL and API names, decrypting each in turn. After decrypting each name blob, it uses</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">LoadLibraryA</code> <span style="vertical-align:baseline">to ensure the DLL dependency is loaded in memory and leverages</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">GetProcAddress</code> <span style="vertical-align:baseline">to retrieve the address of the import.</span></p>
<p><span style="vertical-align:baseline">Fully decompiled </span><code style="vertical-align:baseline">ObfImportResolver</code><span style="vertical-align:baseline">:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 17: Fully decompiled import resolver routine</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Import Encryption Logic</span></h5>
<p><span style="vertical-align:baseline">The import decryption logic is implemented using a Linear Congruential Generator (LCG) algorithm to generate a pseudo-random key stream, which is then used in a XOR-based stream cipher for decryption. It operates on the following formula:</span></p>
<p style="text-align:center"><span style="font-style:italic;vertical-align:baseline">X</span><sub><span style="font-style:italic;vertical-align:baseline">n</span></sub><span style="font-style:italic;vertical-align:baseline"> + 1 = (a • </span><span style="font-style:italic;vertical-align:baseline">X</span><sub><span style="font-style:italic;vertical-align:baseline">n</span></sub><span style="font-style:italic;vertical-align:baseline"><span style="vertical-align:sub"> </span></span><span style="font-style:italic;vertical-align:baseline">+ c) mod </span><span style="font-style:italic;vertical-align:baseline">2</span><sup><span style="font-style:italic;vertical-align:baseline">32</span></sup></p>
<p><span style="vertical-align:baseline">where:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><code style="vertical-align:baseline">a</code> <span style="vertical-align:baseline">is always hardcoded to </span><code style="vertical-align:baseline">17</code> <span style="vertical-align:baseline">and functions as the multiplier</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><code style="vertical-align:baseline">c</code> <span style="vertical-align:baseline">is a unique 32-bit constant determined by the encryption context and is unique per-protected sample</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">We refer to it as the </span><code style="vertical-align:baseline">imp_decrypt_const</code></p>
</li>
</ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><code style="vertical-align:baseline">mod</code><span style="vertical-align:baseline"> 2<sup>32</sup> confines the sequence values to a 32-bit range</span></p>
</li>
</ul>
<p><span style="vertical-align:baseline">The decryption logic initializes with a value from the encrypted data and iteratively generates new values using the outlined LCG formula. Each iteration produces a byte derived from the calculated value, which is then XOR'ed with the corresponding encrypted byte. This process continues byte-by-byte until it reaches a termination condition.</span></p>
<p><span style="vertical-align:baseline">A fully recovered Python implementation for the decryption logic is provided in Figure 18.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 18: Complete Python implementation of the import string decryption routine</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Import Fixup Table</span></h5>
<p><span style="vertical-align:baseline">The import relocation fixup table is a fixed-size array composed of two 32-bit RVA entries. The first RVA represents the memory displacement of where the data is referenced from. The second RVA points to the actual data in question. The entries in the fixup table can be categorized into three distinct types, each corresponding to a specific import component:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Encrypted DLL names</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Encrypted API names</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Import dispatcher references</span></p>
</li>
</ul></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 19: Illustration of the import fixup table</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The location of the fixup table is determined by the loader's metadata, which specifies an offset from the start of the </span><code style="vertical-align:baseline">.data</code><span style="vertical-align:baseline"> section to the start of the table. During initialization, the loader is responsible for applying the relocation fixups for each entry in the table.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 20: Loader metadata that shows the Import fixup table entries and metadata used to find it</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h2><span style="vertical-align:baseline">Recovery</span></h2>
<p><span style="vertical-align:baseline">Effective recovery from an obfuscated binary necessitates a thorough understanding of the protection mechanisms employed. While deobfuscation often benefits from working with an intermediate representation (IR) rather than the raw disassembly—an IR provides more granular control in undoing transformations—this obfuscator preserves the original compiled code, merely enveloping it with additional protection layers. Given this context, our deobfuscation strategy focuses on stripping away the obfuscator's transformations from the disassembly to reveal the original instructions and data. This is achieved through a series of hierarchical phases, where each subsequent phase builds upon the previous one to ensure comprehensive deobfuscation.</span></p>
<p><span style="vertical-align:baseline">We categorize this approach into three distinct categories that we eventually integrate:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">CFG Recovery</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Restoring the natural control flow by removing obfuscation artifacts at the instruction and  basic block levels. This involves two phases:</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Accounting for instruction dispatchers:</strong><span style="vertical-align:baseline"> Addressing the core of control flow protection that obscure the execution flow</span></p>
</li>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Function identification and</strong><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">recovery: </strong><span style="vertical-align:baseline">Cataloging scattered instructions and reassembling them into their original function counterparts</span></p>
</li>
</ul>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Import Recovery</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Original Import Table:</strong><span style="vertical-align:baseline"> The goal is to reconstruct the original import table, ensuring that all necessary library and function references are accurately restored.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Binary Rewriting</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Generating Deobfuscated Executables:</strong><span style="vertical-align:baseline"> This process entails creating a new, deobfuscated executable that maintains the original functionality while removing ScatterBrain's modifications.</span></p>
</li>
</ul>
</ol>
<p><span style="vertical-align:baseline">Given the complexity of each category, we concentrate on the core aspects necessary to break the obfuscator by providing a guided walkthrough of our deobfuscator's source code and highlighting the essential logic required to reverse these transformations. This step-by-step examination demonstrates how each obfuscation technique is methodically undone, ultimately restoring the binary's original structure.</span></p>
<p><span style="vertical-align:baseline">Our directory structure reflects this organized approach:</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>+---helpers
|   |    emu64.py
|   |    pefile_utils.py
|   |--- x86disasm.py
|
\---recover
    |    recover_cfg.py
    |    recover_core.py
    |    recover_dispatchers.py
    |    recover_functions.py
    |    recover_imports.py
    |--- recover_output64.py</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 21: Directory structure of our deobfuscator library</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">This comprehensive recovery process not only restores the binaries to their original state but also equips analysts with the tools and knowledge necessary to combat similar obfuscation techniques in the future.</span></p>
<h3><span style="vertical-align:baseline">CFG Recovery</span></h3>
<p><span style="vertical-align:baseline">The primary obstacle disrupting the natural control flow graph is the use of </span><strong style="vertical-align:baseline">instruction dispatchers</strong><span style="vertical-align:baseline">. Eliminating these dispatchers is our first priority in obtaining the CFG. Afterward, we need to reorganize the scattered instructions back into their original function representations—a problem known as function identification, which is notoriously difficult to generalize. Therefore, we approach it using our specific knowledge about the obfuscator.</span></p>
<p><strong style="vertical-align:baseline">Linearizing the Scattered CFG</strong></p>
<p><span style="vertical-align:baseline">Our initial step in recovering the original CFG is to eliminate the scattering effect induced by instruction dispatchers. We will transform all dispatcher call instructions into direct branches to their resolved targets. This transformation linearizes the execution flow, making it straightforward to statically pursue the second phase of our CFG recovery. This will be implemented via brute-force scanning, static parsing, emulation, and instruction patching.</span></p>
<p><strong style="vertical-align:baseline">Function Identification and Recovery</strong></p>
<p><span style="vertical-align:baseline">We leverage a recursive descent algorithm that employs a depth-first search (DFS) strategy applied to known entry points of code, attempting to exhaust all code paths by "single-stepping" one instruction at a time. We add additional logic to the processing of each instruction in the form of "mutation rules" that stipulate how each individual instruction needs to be processed. These rules aid in stripping away the obfuscator's code from the original.</span></p>
<h4><span style="vertical-align:baseline">Removing Instruction Dispatchers</span></h4>
<p><span style="vertical-align:baseline">Eliminating instruction dispatchers involves identifying each dispatcher location and its corresponding dispatch target. Recall that the target is a uniquely encoded 32-bit displacement located at the return address of the dispatcher call. To remove instruction dispatchers, it is essential to first understand how to accurately identify them. We begin by categorizing the defining properties of individual instruction dispatchers:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Target of a Near Call</strong>
<ul>
<li><span style="vertical-align:baseline">Dispatchers are always the destination of a near </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instruction, represented by the </span><code style="vertical-align:baseline">E8</code><span style="vertical-align:baseline"> opcode followed by a 32-bit displacement.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">References Encoded 32-Bit Displacement at Return Address</strong>
<ul>
<li><span style="vertical-align:baseline">Dispatchers reference the encoded 32-bit displacement located at the return address on the stack by performing a 32-bit read from the stack pointer. This displacement is essential for determining the next execution target.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Pairing of </strong><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">and </strong><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">Instructions to Safeguard Decoding</strong>
<ul>
<li><span style="vertical-align:baseline">Dispatchers use a pair of </span><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> instructions to preserve the state of the </span><code style="vertical-align:baseline">RFLAGS</code><span style="vertical-align:baseline"> register during the decoding process. This ensures that the dispatcher does not alter the original execution context, maintaining the integrity of register contents.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">End with a</strong><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">ret</code> <strong style="vertical-align:baseline">Instruction</strong>
<ul>
<li><span style="vertical-align:baseline">Each dispatcher concludes with a </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline"> instruction, which not only ends the dispatcher function but also redirects control to the next set of instructions, effectively continuing the execution flow.</span></li>
</ul>
</li>
</ul>
<p><span style="vertical-align:baseline">Leveraging the aforementioned categorizations, we implement the following approach to identify and remove instruction dispatchers:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Brute-Force Scanner for Near Call Locations</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Develop a scanner that searches for all near </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instructions within the code section of the protected binary. This scanner generates a huge array of potential call locations that may serve as dispatchers.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Implementation of a Fingerprint Routine</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">The brute-force scan yields a large number of false positives, requiring an efficient method to filter them. While emulation can filter out false positives, it is computationally expensive to do it for the brute-force results.</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Introduce a shallow fingerprinting routine that traverses the disassembly of each candidate to identify key dispatcher characteristics, such as the presence of </span><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> sequences. This significantly improves performance by eliminating most false positives before concretely verifying them through emulation.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Emulation of Targets to Recover Destinations</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Emulate execution starting from each verified call site to accurately recover the actual dispatch targets. Emulating from the call site ensures that the emulator processes the encoded offset data at the return address, abstracting away the specific decoding logic employed by each dispatcher.</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">A successful emulation also serves as the final verification step to confirm that we have identified a dispatcher.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Identification of Dispatch Targets via </strong><strong style="vertical-align:baseline">ret</strong><strong style="vertical-align:baseline"> Instructions</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Utilize the terminating </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline"> instruction to accurately identify the dispatch target within the binary.</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline"> instruction is a definitive marker indicating the end of a dispatcher function and the point at which control is redirected, making it a reliable indicator for target identification.</span></p>
</li>
</ul>
</ol>
<h5><span style="vertical-align:baseline">Brute-Force Scanner</span></h5>
<p><span style="vertical-align:baseline">The following Python code implements the brute-force scanner, which performs a comprehensive byte signature scan within the code segment of a protected binary. The scanner systematically identifies all potential </span><code style="vertical-align:baseline">call</code> <span style="vertical-align:baseline">instruction locations by scanning for the </span><code style="vertical-align:baseline">0xE8</code><span style="vertical-align:baseline"> opcode associated with near </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instructions. The identified addresses are then stored for subsequent analysis and verification.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 22: Python implementation of the brute-force scanner</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Fingerprinting Dispatchers</span></h5>
<p><span style="vertical-align:baseline">The fingerprinting routine leverages the unique characteristics of instruction dispatchers, as detailed in the Instruction Dispatchers section, to statically identify potential dispatcher locations within a protected binary. This identification process utilizes the results from the prior brute-force scan. For each address in this array, the routine disassembles the code and examines the resulting disassembly listing to determine if it matches known dispatcher signatures.</span></p>
<p><span style="vertical-align:baseline">This method is not intended to guarantee 100% accuracy, but rather serve as a cost-effective approach to identifying call locations with a high likelihood of being instruction dispatchers. Subsequent emulation will be employed to confirm these identifications.</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Successful Decoding of a </strong><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">Instruction</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">The identified location must successfully decode to a </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instruction. Dispatchers are always invoked via a </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instruction. Additionally, dispatchers utilize the return address from the call site to locate their encoded 32-bit displacement.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Absence of Subsequent </strong><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">Instructions</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Dispatchers must not contain any </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instructions within their disassembly listing. The presence of any </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instructions within a presumed dispatcher range immediately disqualifies the call location as a dispatcher candidate.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Absence of Privileged Instructions and Indirect Control Transfers</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Similarly to </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instructions, the dispatcher cannot include privileged instructions or indirect unconditional </span><code style="vertical-align:baseline">jmps</code><span style="vertical-align:baseline">. Any presence of any such instructions invalidates the call location.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Detection of </strong><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">and </strong><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">Guard Sequences</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">The dispatcher must contain </span><code style="vertical-align:baseline">pushfq</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">popfq</code><span style="vertical-align:baseline"> instructions to safeguard the </span><code style="vertical-align:baseline">RFLAGS</code><span style="vertical-align:baseline"> register during decoding. These sequences are unique to dispatchers and suffice for a generic identification without worrying about the differences that arise between how the decoding takes place.</span></p>
</li>
</ul>
</ol>
<p><span style="vertical-align:baseline">Figure 23 is the fingerprint verification routine that incorporates all the aforementioned characteristics and validation checks given a potential call location:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 23: The dispatch fingerprint routine</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Emulating Dispatchers to Resolve Destination Targets</span></h5>
<p><span style="vertical-align:baseline">After filtering potential dispatchers using the fingerprinting routine, the next step is to emulate them in order to recover their destination targets.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 24: Emulation sequence used to recover dispatcher destination targets</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The Python code in Figure 24 performs this logic and operates as follows:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Initialization of the Emulator</strong>
<ul>
<li><span style="vertical-align:baseline">Creates the core engine for simulating execution (</span><code style="vertical-align:baseline">EmulateIntel64</code><span style="vertical-align:baseline">), maps the protected binary image (</span><code style="vertical-align:baseline">imgbuffer</code><span style="vertical-align:baseline">) into the emulator's memory space, maps the Thread Environment Block (TEB) as well to simulate a realistic Windows execution environment, and creates an initial snapshot to facilitate fast resets before each emulation run without needing to reinitialize the entire emulator each time.</span></li>
<li><code style="vertical-align:baseline">MAX_DISPATCHER_RANGE</code><span style="vertical-align:baseline"> specifies the maximum number of instructions to emulate for each dispatcher. The value 45 is chosen arbitrarily, sufficient given the limited instruction count in dispatchers even with the added mutations.</span></li>
<li><span style="vertical-align:baseline">A </span><code style="vertical-align:baseline">try</code><span style="vertical-align:baseline">/</span><code style="vertical-align:baseline">except</code><span style="vertical-align:baseline"> block is used to handle any exceptions during emulation. It is assumed that exceptions result from false positives among the potential dispatchers identified earlier and can be safely ignored.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Emulating Each Potential Dispatcher</strong>
<ul>
<li><span style="vertical-align:baseline">For each potential dispatcher address (</span><code style="vertical-align:baseline">call_dispatch_ea</code><span style="vertical-align:baseline">), the emulator's context is restored to the initial snapshot. The program counter (</span><code style="vertical-align:baseline">emu.pc</code><span style="vertical-align:baseline">) is set to the address of each dispatcher. </span><code style="vertical-align:baseline">emu.stepi()</code><span style="vertical-align:baseline"> executes one instruction at the current program counter, after which the instruction is analyzed to determine whether we have finished.</span>
<ul>
<li><span style="vertical-align:baseline">If the instruction is a </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline">, the emulation has reached the dispatch point.</span></li>
<li><span style="vertical-align:baseline">The dispatch target address is read from the stack using </span><code style="vertical-align:baseline">emu.parse_u64(emu.rsp)</code><span style="vertical-align:baseline">.</span></li>
</ul>
</li>
<li><span style="vertical-align:baseline">The results are captured by </span><code style="vertical-align:baseline">d.dispatchers_to_target</code><span style="vertical-align:baseline">, which maps the dispatcher address to the dispatch target. The dispatcher address is additionally stored in the </span><code style="vertical-align:baseline">d.dispatcher_locs</code><span style="vertical-align:baseline"> lookup cache.</span>
<ul>
<li><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">break</code><span style="vertical-align:baseline"> statement exits the inner loop, proceeding to the next dispatcher.</span></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5><span style="vertical-align:baseline">Patching and Linearization</span></h5>
<p><span style="vertical-align:baseline">After collecting and verifying every captured instruction dispatcher, the final step is to replace each call location with a direct branch to its respective destination target. Since both near </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline"> instructions occupy 5 bytes in size, this replacement can be seamlessly performed by merely patching the </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline"> instruction over the </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline">.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 25: Patching sequence to transform instruction dispatcher calls to unconditional jmps to their destination targets</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">We utilize the </span><code style="vertical-align:baseline">dispatchers_to_target</code><span style="vertical-align:baseline"> map, established in the previous section, which associates each dispatcher call location with its corresponding destination target. By iterating through this map, we identify each dispatcher call location and replace the original </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> instruction with a </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline">. This substitution redirects the execution flow directly to the intended target addresses.</span></p>
<p><span style="vertical-align:baseline">This removal is pivotal to our deobfuscation strategy as it removes the intended dynamic dispatch element that instruction dispatchers were designed to provide. Although the code is still scattered throughout the code segment, the execution flow is now statically deterministic, making it immediately apparent which instruction leads to the next one.</span></p>
<p><span style="vertical-align:baseline">When we compare these results to the initial screenshot from the Instruction Dispatcher section, the blocks still appear scattered. However, their execution flow has been linearized. This progress allows us to move forward to the second phase of our CFG recovery.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 26: Linearized instruction dispatcher control flow</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h4><span style="vertical-align:baseline">Function Identification and Recovery</span></h4>
<p><span style="vertical-align:baseline">By eliminating the effects of instruction dispatchers, we have linearized the execution flow. The next step involves assimilating the dispersed code and leveraging the linearized control flow to reconstruct the original functions that comprised the unprotected binary. This recovery phase involves several stages, including raw instruction recovery, normalization, and the construction of the final CFG.</span></p>
<p><span style="vertical-align:baseline">Function identification and recovery is encapsulated in the following two abstractions:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Recovered instruction</strong><span style="vertical-align:baseline"> (</span><code style="vertical-align:baseline">RecoveredInstr</code><span style="vertical-align:baseline">): The fundamental unit for representing individual instructions recovered from an obfuscated binary. Each instance encapsulates not only the raw instruction data but also metadata essential for relocation, normalization, and analysis within the CFG recovery process.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Recovered function</strong><span style="vertical-align:baseline"> (</span><code style="vertical-align:baseline">RecoveredFunc</code><span style="vertical-align:baseline">): The end result of successfully recovering an individual function from an obfuscated binary. It aggregates multiple </span><code style="vertical-align:baseline">RecoveredInstr</code><span style="vertical-align:baseline"> instances, representing the sequence of instructions that constitute the unprotected function. The complete CFG recovery process results in an array of </span><code style="vertical-align:baseline">RecoveredFunc</code><span style="vertical-align:baseline"> instances, each corresponding to a distinct function within the binary. We will utilize these results in the final Building Relocations in Deobfuscated Binaries section to produce fully deobfuscated binaries.</span></p>
</li>
</ul>
<p><span style="vertical-align:baseline">We do not utilize a basic block abstraction for our recovery approach given the following reasons. Properly abstracting basic blocks presupposes complete CFG recovery, which introduces unnecessary complexity and overhead for our purposes. Instead, it is simpler and more efficient to conceptualize a function as an aggregation of individual instructions rather than a collection of basic blocks in this particular deobfuscation context.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 27: RecoveredInstr type definition</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 28: RecoveredFunc type definition</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">DFS Rule-Guided Stepping Introduction</span></h5>
<p><span style="vertical-align:baseline">We opted for a recursive-depth algorithm given the following reasons:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Natural fit for code traversal:</strong><span style="vertical-align:baseline"> DFS allows us to infer function boundaries based solely on the flow of execution. It mirrors the way functions call other functions, making it intuitive to implement and reason about when reconstructing function boundaries. It also simplifies following the flow of loops and conditional branches.</span></li>
<li><strong style="vertical-align:baseline">Guaranteed execution paths: </strong><span style="vertical-align:baseline">We concentrate on code that is definitely executed. Given we have at least one known entry point into the obfuscated code, we know execution must pass through it in order to reach other parts of the code. While other parts of the code may be more indirectly invoked, this entry point serves as a foundational starting point.</span>
<ul>
<li>By recursively exploring from this known entry, we will almost certainly encounter and identify virtually all code paths and functions during our traversal.</li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Adapts to instruction mutations:</strong><span style="vertical-align:baseline"> We tailor the logic of the traversal with callbacks or "rules" that stipulate how we process each individual instruction. This helps us account for known instruction mutations and aids in stripping away the obfuscator's code.</span></li>
</ul>
<p><span style="vertical-align:baseline">The core data structures involved in this process are the following: </span><code style="vertical-align:baseline">CFGResult</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline">, </span><span style="vertical-align:baseline">and </span><code style="vertical-align:baseline">RuleHandler</code><span style="vertical-align:baseline">:</span></p>
<ul>
<li><code style="vertical-align:baseline">CFGResult</code><span style="vertical-align:baseline">: Container for the results of the CFG recovery process. It aggregates all pertinent information required to represent the CFG of a function within the binary, which it primarily consumes from </span><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline">.</span></li>
<li><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline">: Maintains the state throughout the CFG recovery process, particularly during the controlled-step traversal. It encapsulates all necessary information to manage the traversal state, track progress, and store intermediate results.</span>
<ul>
<li><strong style="vertical-align:baseline">Recovered cache:</strong><span style="vertical-align:baseline"> Stores instructions that have been recovered for a protected function without any additional cleanup or verification. This initial collection is essential for preserving the raw state of the instructions as they exist within the obfuscated binary before any normalization or validation processes are applied after. It is always the first pass of recovery.</span></li>
<li><strong style="vertical-align:baseline">Normalized cache:</strong><span style="vertical-align:baseline"> The final pass in the CFG recovery process. It transforms the raw instructions stored in the recovered cache into a fully normalized CFG by removing all obfuscator-introduced instructions and ensuring the creation of valid, coherent functions.</span></li>
<li><strong style="vertical-align:baseline">Exploration stack:</strong><span style="vertical-align:baseline"> Manages the set of instruction addresses that are pending exploration during the DFS traversal for a protected function. It determines the order in which instructions are processed and utilizes a </span><code style="vertical-align:baseline">visited</code><span style="vertical-align:baseline"> set to ensure that each instruction is processed only once.</span></li>
<li><strong style="vertical-align:baseline">Obfuscator backbone:</strong><span style="vertical-align:baseline"> A mapping to preserve essential control flow links introduced by the obfuscator</span></li>
</ul>
</li>
<li><code style="vertical-align:baseline">RuleHandler</code><span style="vertical-align:baseline">: </span><span style="vertical-align:baseline">Mutation rules are merely callbacks that adhere to a specific function signature and are invoked during each instruction step of the CFG recovery process. They take as input the current protected binary, </span><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline">, and the current step-in instruction. Each rule contains specific logic designed to detect particular types of instruction characteristics introduced by the obfuscator. Based on the detection of these characteristics, the rules determine how the traversal should proceed. For instance, a rule might decide to continue traversal, skip certain instructions, or halt the process based on the nature of the mutation.</span></li>
</ul></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 29: CFGResult type definition</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 30: CFGStepState type definition</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 31: RuleHandler type definition</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The following figure is an example of a rule that is used to detect the patched instruction dispatchers we introduced in the previous section and differentiating them from standard </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instructions:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 32: RuleHandler example that identifies patched instruction dispatchers and differentiates them from standard jmp instructions</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">DFS Rule-Guided Stepping Implementation</span></h5>
<p><span style="vertical-align:baseline">The remaining component is a routine that orchestrates the CFG recovery process for a given function address within the protected binary. It leverages the </span><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline"> to manage the DFS traversal and applies mutation rules to decode and recover instructions systematically. The result will be an aggregate of </span><code style="vertical-align:baseline">RecoveredInstr</code> <span style="vertical-align:baseline">instances that constitute the first pass of raw recovery:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 33: Flow chart of our DFS rule-guided stepping algorithm</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The following Python code directly implements the algorithm outlined in Figure 33. It initializes the CFG stepping state and commences a DFS traversal starting from the function's entry address. During each step of the traversal, the current instruction address is retrieved from the </span><code style="vertical-align:baseline">to_explore</code><span style="vertical-align:baseline"> exploration stack and checked against the </span><code style="vertical-align:baseline">visited</code> <span style="vertical-align:baseline">set to prevent redundant processing. The instruction at the current address is then decoded, and a series of mutation rules are applied to handle any obfuscator-induced instruction modifications. Based on the outcomes of these rules, the traversal may continue, skip certain instructions, or halt entirely.</span></p>
<p><span style="vertical-align:baseline">Recovered instructions are appended to the </span><code style="vertical-align:baseline">recovered</code> <span style="vertical-align:baseline">cache, and their corresponding mappings are updated within the </span><code style="vertical-align:baseline">CFGStepState</code><span style="vertical-align:baseline">. The </span><code style="vertical-align:baseline">to_explore</code><span style="vertical-align:baseline"> stack is subsequently updated with the address of the next sequential instruction to ensure systematic traversal. This iterative process continues until all relevant instructions have been explored, culminating in a </span><code style="vertical-align:baseline">CFGResult</code><span style="vertical-align:baseline"> that encapsulates the fully recovered CFG.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 34: DFS rule-guided stepping algorithm Python implementation</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h5><span style="vertical-align:baseline">Normalizing the Flow</span></h5>
<p><span style="vertical-align:baseline">With the raw instructions successfully recovered, the next step is to normalize the control flow. While the raw recovery process ensures that all original instructions are captured, these instructions alone do not form a cohesive and orderly function. To achieve a streamlined control flow, we must filter and refine the recovered instructions—a process we refer to as normalization. This stage involves several key tasks:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Updating branch targets:</strong><span style="vertical-align:baseline"> Once all of the obfuscator-introduced code (instruction dispatchers and mutations) are fully removed, all branch instructions must be redirected to their correct destinations. The scattering effect introduced by obfuscation often leaves branches pointing to unrelated code segments.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Merging overlapping basic blocks:</strong><span style="vertical-align:baseline"> Contrary to the idea of a basic block as a strictly single-entry, single-exit structure, compilers can produce code in which one basic block begins within another. This overlapping of basic blocks commonly appears in loop structures. As a result, these overlaps must be resolved to ensure a coherent CFG.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Proper function boundary instruction:</strong><span style="vertical-align:baseline"> Each function must begin and end at well-defined boundaries within the binary's memory space. Correctly identifying and enforcing these boundaries is essential for accurate CFG representation and subsequent analysis.</span></p>
</li>
</ul>
<h6><span style="vertical-align:baseline">Simplifying with Synthetic Boundary Jumps</span></h6>
<p><span style="vertical-align:baseline">Rather than relying on traditional basic block abstractions—which can impose unnecessary overhead—we employ synthetic boundary jumps to simplify CFG normalization. These artificial </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline"> instructions link otherwise disjointed instructions, allowing us to avoid splitting overlapping blocks and ensuring that each function concludes at a proper boundary instruction. This approach also streamlines our binary rewriting process when reconstructing the recovered functions into the final deobfuscated output binary.</span></p>
<p><span style="vertical-align:baseline">Merging overlapping basic blocks and ensuring functions have proper boundary instructions amount to the same problem—determining which scattered instructions should be linked together. To illustrate this, we will examine how synthetic jumps effectively resolve this issue by ensuring that functions conclude with the correct boundary instructions. The exact same approach applies to merging basic blocks together.</span></p>
<h6><span style="vertical-align:baseline">Synthetic Boundary Jumps to Ensure Function Boundaries</span></h6>
<p><span style="vertical-align:baseline">Consider an example where we have successfully recovered a function using our DFS-based rule-guided approach. Inspecting the recovered instructions in the </span><code style="vertical-align:baseline">CFGState </code><span style="vertical-align:baseline">reveals a </span><code style="vertical-align:baseline">mov</code><span style="vertical-align:baseline"> instruction as the final operation. If we were to reconstruct this function in memory as-is, the absence of a subsequent fallthrough instruction would compromise the function's logic.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 35: Example of a raw recovery that does not end with a natural function boundary instruction</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">To address this, we introduce a synthetic jump whenever the last recovered instruction is not a natural function boundary (e.g., </span><code style="vertical-align:baseline">ret</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">int3</code><span style="vertical-align:baseline">).</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 36: Simple Python routine that identifies function boundary instructions</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">We determine the fallthrough address, and if it points to an obfuscator-introduced instruction, we continue forward until reaching the first regular instruction. We call this traversal "walking the obfuscator's backbone":</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 37: Python routine that implements walking the obfuscator's backbone logic</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">We then link these points with a synthetic jump. The synthetic jump inherits the original address as metadata, effectively indicating which instruction it is logically connected to.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 38: Example of adding a synthetic boundary jmp to create a natural function boundary</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h6><span style="vertical-align:baseline">Updating Branch Targets</span></h6>
<p><span style="vertical-align:baseline">After normalizing the control flow, adjusting branch targets becomes a straightforward process. Each branch instruction in the recovered code may still point to obfuscator-introduced instructions rather than the intended destinations. By iterating through the</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">normalized_flow</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">cache (generated in the next section), we identify branching instructions and verify their targets using the</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">walk_backbone</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">routine. </span></p>
<p><span style="vertical-align:baseline">This ensures that all branch targets are redirected away from the obfuscator's artifacts and correctly aligned with the intended execution paths. Notice we can ignore </span><code style="vertical-align:baseline">call</code> <span style="vertical-align:baseline">instructions given that any non-dispatcher </span><code style="vertical-align:baseline">call</code> <span style="vertical-align:baseline">instruction is guaranteed to always be legitimate and never part of the obfuscator's protection. These will, however, need to be updated during the final relocation phase outlined in the Building Relocations in Deobfuscated Binaries section. </span></p>
<p><span style="vertical-align:baseline">Once recalculated, we reassemble and decode the instructions with updated displacements, preserving both correctness and consistency.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 39: Python routine responsible for updating all branch targets</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h6><span style="vertical-align:baseline">Putting It All Together</span></h6>
<p><span style="vertical-align:baseline">Putting it all together, we developed the following algorithm that builds upon the previously recovered instructions, ensuring that each instruction, branch, and block is properly connected, resulting in a completely recovered and deobfuscated CFG for an entire protected binary. We utilize the recovered cache to construct a new, normalized cache. The algorithm employs the following steps:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Iterate Over All Recovered Instructions</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Traverse all recovered instructions produced from our DFS-based stepping approach.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Add Instruction to Normalized Cache</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">For each instruction, add it to the normalized cache, which captures the results of the normalization pass.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Identify Boundary Instructions</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Determine whether the current instruction is a boundary instruction.</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">If it is a boundary instruction</strong><span style="vertical-align:baseline">, skip further processing of this instruction and continue to the next one (return to Step 1).</span></p>
</li>
</ul>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Calculate Expected Fallthrough Instruction</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Determine the expected fallthrough instruction by identifying the sequential instruction that follows the current one in memory.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Verify Fallthrough Instruction</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Compare the calculated fallthrough instruction with the next instruction in the recovered cache.</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">If the fallthrough instruction is not the next sequential instruction in memory,</strong><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">check whether it's a recovered instruction we already normalized:</strong></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">If it is, add a synthetic jump to link the two together in the normalized cache.</span></p>
</li>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">If it is not, obtain the connecting fallthrough instruction from the recovery cache and append it to the normalized cache.</span></p>
</li>
</ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">If the fallthrough instruction matches the next instruction in the recovered cache</strong><span style="vertical-align:baseline">:</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">Do nothing, as the recovered instruction already correctly points to the fallthrough. Proceed to Step 6.</span></p>
</li>
</ul>
</ul>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Handle Final Instruction</strong></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><span style="vertical-align:baseline">Check if the current instruction is the final instruction in the recovered cache.</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">If it is the final instruction</strong><span style="vertical-align:baseline">:</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">Add a final synthetic boundary jump, because if we reach this stage, we failed the check in Step 3.</span></p>
</li>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">Continue iteration, which will cause the loop to exit.</span></p>
</li>
</ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">If it is not the final instruction</strong><span style="vertical-align:baseline">:</span></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><span style="vertical-align:baseline">Continue iteration as normal (return to Step 1).</span></p>
</li>
</ul>
</ul>
</ul>
</ol></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 40: Flow chart of our normalization algorithm</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The Python code in Figure 41 directly implements these normalization steps. It iterates over the recovered instructions and adds them to a normalized cache (</span><code style="vertical-align:baseline">normalized_flow</code><span style="vertical-align:baseline">), creates a linear mapping, and identifies where synthetic jumps are required. When a branch target points to obfuscator-injected code, it walks the backbone (</span><code style="vertical-align:baseline">walk_backbone</code><span style="vertical-align:baseline">) to find the next legitimate instruction. If the end of a function is reached without a natural boundary, a synthetic jump is created to maintain proper continuity. After the completion of the iteration, every branch target is updated (</span><code style="vertical-align:baseline">update_branch_targets</code><span style="vertical-align:baseline">), as illustrated in the previous section, to ensure that each instruction is correctly linked, resulting in a fully normalized CFG:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 41: Python implementation of our normalization algorithm</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h4><span style="vertical-align:baseline">Observing the Results</span></h4>
<p><span style="vertical-align:baseline">After applying our two primary passes, we have nearly eliminated all of the protection mechanisms. Although import protection remains to be addressed, our approach effectively transforms an incomprehensible mess into a perfectly recovered CFG.</span></p>
<p><span style="vertical-align:baseline">For example, Figure 42 and Figure 43 illustrate the before and after of a critical function within the backdoor payload, which is a component of its plugin manager system. Through additional analysis of the output, we can identify functionalities that would have been impossible to delineate, much less in such detail, without our deobfuscation process.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 42: Original obfuscated shadow::PluginProtocolCreateAndConfigure routine</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 43: Completely deobfuscated and functional shadow::PluginProtocolCreateAndConfigure routine</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h3><span style="vertical-align:baseline">Import Recovery</span></h3>
<p><span style="vertical-align:baseline">Recovering and restoring the original import table revolves around identifying which import location is associated with which import dispatcher stub. From the stub dispatcher, we can parse the respective </span><code style="vertical-align:baseline">obf_imp_t</code> <span style="vertical-align:baseline">reference in order to determine the protected import that it represents.</span></p>
<p><span style="vertical-align:baseline">We pursue the following logic:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Identify each valid call/jmp location associated to an import</strong>
<ul>
<li><span style="vertical-align:baseline">The memory displacement for these will point to the respective dispatcher stub.</span></li>
<li><span style="vertical-align:baseline">For HEADERLESS mode, we need to first resolve the fixup table to ensure the displacement points to a valid dispatcher stub.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">For each valid location traverse the dispatcher stub to extract the obf_imp_t</strong>
<ul>
<li><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">obf_imp_t</code> <span style="vertical-align:baseline">contains the RVAs to the encrypted DLL and API names.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Implement the string decryption logic</strong>
<ul>
<li><span style="vertical-align:baseline">We need to reimplement the decryption logic in order to recover the DLL and API names.</span></li>
<li><span style="vertical-align:baseline">This was already done in the initial Import Protection section.</span></li>
</ul>
</li>
</ul>
<p><span style="vertical-align:baseline">We encapsulate the recovery of imports with the following </span><code style="vertical-align:baseline">RecoveredImport</code> <span style="vertical-align:baseline">data structure:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 44: RecoveredImport type definition</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><code style="vertical-align:baseline">RecoveredImport</code> <span style="vertical-align:baseline">serves as the result produced for each import that we recover. It contains all the relevant data that we will use to rebuild the original import table when producing the deobfuscated image.</span></p>
<h4><span style="vertical-align:baseline">Locate Protected Import CALL and JMP Sites</span></h4>
<p><span style="vertical-align:baseline">Each protected import location will be reflected as either an indirect near call (</span><code style="vertical-align:baseline">FF/2</code><span style="vertical-align:baseline">) or an indirect near jmp (</span><code style="vertical-align:baseline">FF/4</code><span style="vertical-align:baseline">):</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 45: Disassembly of import calls and jmps representation</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Indirect near calls and jmps fall under the </span><code style="vertical-align:baseline">FF </code><span style="vertical-align:baseline">group opcode where the </span><strong style="vertical-align:baseline">Reg </strong><span style="vertical-align:baseline">field within the </span><strong style="vertical-align:baseline">ModR/M</strong><span style="vertical-align:baseline"> byte identifies the specific operation for the group:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><code style="vertical-align:baseline">/2</code><span style="vertical-align:baseline">: corresponds to </span><code style="vertical-align:baseline">CALL r/m64</code></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><code style="vertical-align:baseline">/4</code><span style="vertical-align:baseline">: corresponds to </span><code style="vertical-align:baseline">JMP r/m64</code></p>
</li>
</ul>
<p><span style="vertical-align:baseline">Taking an indirect near call as an example and breaking it down looks like the following:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><code style="vertical-align:baseline">FF</code><span style="vertical-align:baseline">: group opcode.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><code style="vertical-align:baseline">15</code><span style="vertical-align:baseline">: </span><strong style="vertical-align:baseline">ModR/M</strong><span style="vertical-align:baseline"> byte specifying </span><code style="vertical-align:baseline">CALL r/m64</code><span style="vertical-align:baseline"> with RIP-relative addressing.</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><code style="vertical-align:baseline">15 </code><span style="vertical-align:baseline">is encoded in binary as </span><code style="vertical-align:baseline">00010101</code></p>
</li>
<ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Mod </strong><span style="vertical-align:baseline">(bits 6-7):  </span><code style="vertical-align:baseline">00</code></p>
</li>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Indicates either a direct RIP-relative displacement or memory addressing with no displacement.</span></p>
</li>
</ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Reg </strong><span style="vertical-align:baseline">(bits 3-5): </span><code style="vertical-align:baseline">010</code></p>
</li>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">Identifies the call operation for the group</span></p>
</li>
</ul>
<li style="list-style-type:square;vertical-align:baseline">
<p><strong style="vertical-align:baseline">R/M</strong><span style="vertical-align:baseline"> (bits 0-2): </span><code style="vertical-align:baseline">101</code></p>
</li>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><span style="vertical-align:baseline">In 64-bit mode with </span><strong style="vertical-align:baseline">Mod </strong><code style="vertical-align:baseline">00</code> <span style="vertical-align:baseline">and</span><strong style="vertical-align:baseline"> R/M</strong><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">101</code><span style="vertical-align:baseline">, this indicates RIP-relative addressing.</span></p>
</li>
</ul>
</ul>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><code style="vertical-align:baseline">&lt;32-bit displacement&gt;</code><span style="vertical-align:baseline">: added to </span><code style="vertical-align:baseline">RIP</code> <span style="vertical-align:baseline">to compute the absolute address.</span></p>
</li>
</ol>
<p><span style="vertical-align:baseline">To find each protected import location and their associated dispatcher stubs we implement a trivial brute force scanner that locates all potential indirect near call/jmps via their first two opcodes.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 46: Brute-force scanner to locate all possible import locations</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The provided code scans the code section of a protected binary to identify and record all locations with opcode patterns associated with indirect call and jmp instructions. This is the first step we take, upon which we apply additional verifications to guarantee it is a valid import site.</span></p>
<h4><span style="vertical-align:baseline">Resolving the Import Fixup Table</span></h4>
<p><span style="vertical-align:baseline">We have to resolve the fixup table when we recover imports for the HEADERLESS protection in order to identify which import location is associated with which dispatcher. The memory displacement at the protected import site will be paired with its resolved location inside the table. We use this displacement as a lookup into the table to find its resolved location.</span></p>
<p><span style="vertical-align:baseline">Let's take a </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instruction to a particular import as an example.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 47: Example of a jmp import instruction including its entry in the import fixup table and the associated dispatcher stub</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instruction's displacement references the memory location </span><code style="vertical-align:baseline">0x63A88</code><span style="vertical-align:baseline">, which points to garbage data. When we inspect the entry for this import in the fixup table using the memory displacement, we can identify the location of the dispatcher stub associated with this import at </span><code style="vertical-align:baseline">0x295E1</code><span style="vertical-align:baseline">. The loader will update the referenced data at </span><code style="vertical-align:baseline">0x63A88</code> <span style="vertical-align:baseline">with </span><code style="vertical-align:baseline">0x295E1</code><span style="vertical-align:baseline">, so that when the </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instruction is invoked, execution is appropriately redirected to the dispatcher stub. </span></p>
<p><span style="vertical-align:baseline">Figure 48 is the deobfuscated code in the loader responsible for resolving the fixup table. We need to mimic this behavior in order to associate which import location targets which dispatcher.</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><pre><code>$_Loop_Resolve_ImpFixupTbl:
 mov     ecx, [rdx+4]             ; fixup , either DLL, API, or ImpStub
 mov     eax, [rdx]               ; target ref loc that needs to be "fixed up"
 inc     ebp                      ; update the counter
 add     rcx, r13                 ; calculate fixup fully (r13 is imgbase)
 add     rdx, 8                   ; next pair entry
 mov     [r13+rax+0], rcx         ; update the target ref loc w/ full fixup
 movsxd  rax, dword ptr [rsi+18h] ; fetch imptbl total size, in bytes
 shr     rax, 3                   ; account for size as a pair-entry
 cmp     ebp, eax                 ; check if done processing all entries
 jl      $_Loop_Resolve_ImpTbl</code></pre>
<p style="text-align:center"><span style="vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%">Figure 48: Deobfuscated disassembly of the algorithm used to resolve the import fixup table</span></p></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Resolving the import fixup table requires us to have first identified the data section within the protected binary and the metadata that identifies the import table (</span><code style="vertical-align:baseline">IMPTBL_OFFSET</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">IMPTBL_SIZE</code><span style="vertical-align:baseline">). The offset to the fixup table is from the start of the data section.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 49: Python re-implementation of the algorithm used to resolve the import fixup table</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Having the start of the fixup table, we simply iterate one entry at a time and identify which import displacement (</span><code style="vertical-align:baseline">location</code><span style="vertical-align:baseline">) is associated with which dispatcher stub (</span><code style="vertical-align:baseline">fixup</code><span style="vertical-align:baseline">).</span></p>
<h4><span style="vertical-align:baseline">Recovering the Import</span></h4>
<p><span style="vertical-align:baseline">Having obtained all potential import locations from the brute-force scan and accounted for relocations in HEADERLESS mode, we can proceed with the final verifications to recover each protected import. The recovery process is conducted as follows:</span></p>
<ol>
<li><strong style="vertical-align:baseline">Decode the location into a valid call or jmp instruction</strong>
<ul>
<li><span style="vertical-align:baseline">Any failure in decoding indicates that the location does not contain a valid instruction and can be safely ignored.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Use the memory displacement to locate the stub for the import</strong>
<ul>
<li><span style="vertical-align:baseline">In HEADERLESS mode, each displacement serves as a lookup key into the fixup table for the respective dispatcher.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Extract the </strong><code style="vertical-align:baseline">obf_imp_t</code> <strong style="vertical-align:baseline">structure within the dispatcher</strong>
<ul>
<li><span style="vertical-align:baseline">This is achieved by statically traversing a dispatcher's disassembly listing.</span></li>
<li><span style="vertical-align:baseline">The first </span><code style="vertical-align:baseline">lea</code><span style="vertical-align:baseline"> instruction encountered will contain the reference to the </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Process the </strong><code style="vertical-align:baseline">obf_imp_t</code> <strong style="vertical-align:baseline">to decrypt both the DLL and API names</strong>
<ul>
<li><span style="vertical-align:baseline">Utilize the two RVAs contained within the structure to locate the encrypted blobs for the DLL and API names.</span></li>
<li><span style="vertical-align:baseline">Decrypt the blobs using the outlined import decryption routine.</span></li>
</ul>
</li>
</ol></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 50: Loop that recovers each protected import</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The Python code iterates through every potential import location (</span><code style="vertical-align:baseline">potential_stubs</code><span style="vertical-align:baseline">) and attempts to decode each presumed </span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline"> or </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline"> instruction to an import. A </span><code style="vertical-align:baseline">try</code><span style="vertical-align:baseline">/</span><code style="vertical-align:baseline">except</code><span style="vertical-align:baseline"> block is employed to handle any failures, such as instruction decoding errors or other exceptions that may arise. The assumption is that any error invalidates our understanding of the recovery process and can be safely ignored. In the full code, these errors are logged and tracked for further analysis should they arise.</span></p>
<p><span style="vertical-align:baseline">Next, the code invokes a </span><code style="vertical-align:baseline">GET_STUB_DISPLACEMENT</code><span style="vertical-align:baseline"> helper function that obtains the RVA to the dispatcher associated with the import. Depending on the mode of protection, one of the following routines is used:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 51: Routines that retrieve the stub RVA based on the protection mode</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">recover_import_stub</code> <span style="vertical-align:baseline">function is utilized to reconstruct the control flow graph (CFG) of the import stub, while </span><code style="vertical-align:baseline">_extract_lea_ref</code> <span style="vertical-align:baseline">examines the instructions in the CFG to locate the </span><code style="vertical-align:baseline">lea</code> <span style="vertical-align:baseline">reference to the </span><code style="vertical-align:baseline">obf_imp_t</code><span style="vertical-align:baseline">. The </span><code style="vertical-align:baseline">GET_DLL_API_NAMES</code> <span style="vertical-align:baseline">function operates similarly to </span><code style="vertical-align:baseline">GET_STUB_DISPLACEMENT</code><span style="vertical-align:baseline">, accounting for slight differences depending on the protection mode:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 52: Routines that decrypt the DLL and API blobs based on the protection mode</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">After obtaining the decrypted DLL and API names, the code possesses all the necessary information to reveal the import that the protection conceals. The final individual output of each import entry is captured in a </span><code style="vertical-align:baseline">RecoveredImport</code><span style="vertical-align:baseline"> object and two dictionaries:</span></p>
<ul>
<li><code style="vertical-align:baseline">d.imports</code>
<ul>
<li><span style="vertical-align:baseline">This dictionary maps the address of each protected import to its recovered state. It allows for the association of the complete recovery details with the specific location in the binary where the import occurs.</span></li>
</ul>
</li>
<li><code style="vertical-align:baseline">d.imp_dict_builder</code>
<ul>
<li><span style="vertical-align:baseline">This dictionary maps each DLL name to a set of its corresponding API names. It is used to reconstruct the import table, ensuring a unique set of DLLs and the APIs utilized by the binary.</span></li>
</ul>
</li>
</ul>
<p><span style="vertical-align:baseline">This systematic collection and organization prepare the necessary data to facilitate the restoration of the original functionality in the deobfuscated output. In Figure 53 and Figure 54, we can observe these two containers to showcase their structure after a successful recovery:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 53: Output of the d.imports dictionary after a successful recovery</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 54: Output of the d.imp_dict_builder dictionary after a successful recovery</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h4><span style="vertical-align:baseline">Observing the Final Results</span></h4>
<p><span style="vertical-align:baseline">This final step—rebuilding the import table using this data—is performed by the </span><code style="vertical-align:baseline">build_import_table</code><span style="vertical-align:baseline"> function in the </span><code style="vertical-align:baseline">pefile_utils.py</code><span style="vertical-align:baseline"> source file. This part is omitted from the blog post due to its unavoidable length and the numerous tedious steps involved. However, the code is well-commented and structured to thoroughly address and showcase all aspects necessary for reconstructing the import table.</span></p>
<p><span style="vertical-align:baseline">Nonetheless, the following figure illustrates how we generate a fully functional binary from a headerless-protected input. Recall that a headerless-protected input is a raw, headerless PE binary, almost analogous to a shellcode blob. From this blob we produce an entirely new, functioning binary with the entirety of its import protection completely restored. And we can do the same for all protection modes.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 55: Display of completely restored import table for a binary protected in HEADERLESS mode</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h2><span style="vertical-align:baseline">Building Relocations in Deobfuscated Binaries</span></h2>
<p><span style="vertical-align:baseline">Now that we can fully recover the CFG of protected binaries and provide complete restoration of the original import tables, the final phase of the deobfuscator involves merging these elements to produce a functional deobfuscated binary. The code responsible for this process is encapsulated within the </span><code style="vertical-align:baseline">recover_output64.py</code><span style="vertical-align:baseline"> and the </span><code style="vertical-align:baseline">pefile_utils.py</code> <span style="vertical-align:baseline">Python files.</span></p>
<p><span style="vertical-align:baseline">The rebuild process comprises two primary steps:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><span style="vertical-align:baseline">Building the Output Image Template</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><span style="vertical-align:baseline">Building Relocations</span></p>
</li>
</ol>
<h4><strong style="vertical-align:baseline">1. Building the Output Image Template</strong></h4>
<p><span style="vertical-align:baseline">Creating an output image template is essential for generating the deobfuscated binary. This involves two key tasks:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Template PE Image: </strong><span style="vertical-align:baseline">A Portable Executable (PE) template that serves as the container for the output binary that incorporates the restoration of all obfuscated components. We also need to be cognizant of all the different characteristics between in-memory PE executables and on-file PE executables.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Handling Different Protection Modes: </strong><span style="vertical-align:baseline">Different protection modes and input stipulate different requirements.</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Headerless variants </strong><span style="vertical-align:baseline">have their file headers stripped. We must account for these variations to accurately reconstruct a functioning binary.</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Selective protection </strong><span style="vertical-align:baseline">preserves the original imports to maintain functionality as well as includes a specific import protection for all the imports leveraged within the selected functions. </span></p>
</li>
</ul>
</ul>
<h4><strong style="vertical-align:baseline">2. Building Relocations</strong></h4>
<p><span style="vertical-align:baseline">Building relocations is a critical and intricate part of the deobfuscation process. This step ensures that all address references within the deobfuscated binary are correctly adjusted to maintain functionality. It generally revolves around the following two phases:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Calculating Relocatable Displacements</strong><span style="vertical-align:baseline">: Identifying all memory references within the binary that require relocation. This involves calculating the new addresses where these references will point to. The technique we will use is generating a lookup table that maps original memory references to their new relocatable addresses.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Apply Fixups: </strong><span style="vertical-align:baseline">Modifies the binary's code to reflect the new relocatable addresses. This utilizes the aforementioned lookup table to apply necessary fixups to all instruction displacements that reference memory. This ensures that all memory references within the binary correctly point to their intended locations.</span></p>
</li>
</ul>
<p><span style="vertical-align:baseline">We intentionally omit the details of showcasing the rebuilding of the output binary image because, while essential to the deobfuscation process, it is straightforward enough and just overly tedious to be worthwhile examining in any depth. Instead, we focus exclusively on relocations, as they are more nuanced and reveal important characteristics that are not as apparent but must be understood when rewriting binaries.</span></p>
<h3><span style="vertical-align:baseline">Overview of the Relocation Process</span></h3>
<p><span style="vertical-align:baseline">Rebuilding relocations is a critical step in restoring a deobfuscated binary to an executable state. This process involves adjusting memory references within the code so that all references point to the correct locations after the code has been moved or modified. On the x86-64 architecture, this primarily concerns instructions that use </span><strong style="vertical-align:baseline">RIP-relative addressing</strong><span style="vertical-align:baseline">, a mode where memory references are relative to the instruction pointer.</span></p>
<p><span style="vertical-align:baseline">Relocation is necessary when the layout of a binary changes, such as when code is inserted, removed, or shifted during deobfuscation. Given our deobfuscation approach extracts the original instructions from the obfuscator, we are required to relocate each recovered instruction appropriately into a new code segment. This ensures that the deobfuscated state preserves the validity of all memory references and that the accuracy of the original control and data flow is sustained.</span></p>
<h4><span style="vertical-align:baseline">Understanding Instruction Relocation</span></h4>
<p><span style="vertical-align:baseline">Instruction relocation revolves around the following:</span></p>
<ul>
<li><strong style="vertical-align:baseline">Instruction's memory address: </strong><span style="vertical-align:baseline">the location in memory where an instruction resides.</span></li>
<li><strong style="vertical-align:baseline">Instruction's memory memory references: </strong><span style="vertical-align:baseline">references to memory locations used by the instruction's operands.</span></li>
</ul>
<p><span style="vertical-align:baseline">Consider the following two instructions as illustrations:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 56: Illustration of two instructions that require relocation</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Unconditional </strong><code style="vertical-align:baseline">jmp</code> <strong style="vertical-align:baseline">instruction</strong><span style="vertical-align:baseline">This instruction is located at memory address </span><code style="vertical-align:baseline">0x1000.</code> <span style="vertical-align:baseline">It references its branch target at address </span><code style="vertical-align:baseline">0x4E22</code><span style="vertical-align:baseline">. The displacement encoded within the instruction is </span><code style="vertical-align:baseline">0x3E1D</code><span style="vertical-align:baseline">, which is used to calculate the branch target relative to the instruction's position. Since it employs RIP-relative addressing, the destination is calculated by adding the displacement to the length of the instruction and its memory address.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><code style="vertical-align:baseline">lea</code><span style="vertical-align:baseline"> </span><strong style="vertical-align:baseline">instruction</strong><span style="vertical-align:baseline">This is the branch target for the </span><code style="vertical-align:baseline">jmp</code> <span style="vertical-align:baseline">instruction located at </span><code style="vertical-align:baseline">0x4E22</code><span style="vertical-align:baseline">. It also contains a memory reference to the data segment, with an encoded displacement of </span><code style="vertical-align:baseline">0x157</code><span style="vertical-align:baseline">.</span></p>
</li>
</ol>
<p><span style="vertical-align:baseline">When relocating these instructions, we must address both of the following aspects:</span></p>
<ul>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Changing the instruction's address:</strong><span style="vertical-align:baseline"> When we move an instruction to a new memory location during the relocation process, we inherently change its memory address. For example, if we relocate this instruction from </span><code style="vertical-align:baseline">0x1000</code><span style="vertical-align:baseline"> to </span><code style="vertical-align:baseline">0x2000</code><span style="vertical-align:baseline">, the instruction's address becomes </span><code style="vertical-align:baseline">0x2000</code><span style="vertical-align:baseline">.</span></p>
</li>
<li style="list-style-type:disc;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Adjusting memory displacements:</strong><span style="vertical-align:baseline"> The displacement within the instruction (</span><code style="vertical-align:baseline">0x3E1D</code> <span style="vertical-align:baseline">for the </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">0x157</code> <span style="vertical-align:baseline">for the </span><code style="vertical-align:baseline">lea</code><span style="vertical-align:baseline">) is calculated based on the instruction's original location and the location of its reference. If the instruction moves, the displacement no longer points to the correct target address. Therefore, we must recalculate the displacement to reflect the instruction's new position.</span></p>
</li>
</ul></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 57: Updated illustration demonstration of what relocation would look like</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">When relocating instructions during the deobfuscation process, we must ensure accurate control flow and data access. This requires us to adjust both the instruction's memory address and any displacements that reference other memory locations. Failing to update these values invalidates the recovered CFG.</span></p>
<h4><span style="vertical-align:baseline">What Is RIP-Relative Addressing?</span></h4>
<p><strong style="vertical-align:baseline">RIP-relative addressing</strong><span style="vertical-align:baseline"> is a mode where the instruction references memory at an offset relative to the </span><strong style="vertical-align:baseline">RIP</strong><span style="vertical-align:baseline"> (instruction pointer) register, which points to the next instruction to be executed. Instead of using absolute addresses, the instruction encapsulates the referenced address via a signed 32-bit displacement from the current instruction pointer.</span></p>
<p><span style="vertical-align:baseline">Addressing relative to the instruction pointer exists on x86 as well, but only for control-transfer instructions that support a relative displacement (e.g., JCC conditional instructions, near CALLs, and near JMPs). The x64 ISA extended this to account for almost all memory references being RIP-relative. For example, </span><a href="http://www.nynaeve.net/?p=192" rel="noopener" target="_blank"><span style="text-decoration:underline;vertical-align:baseline">most data references in x64 Windows binaries are RIP-relative</span></a><span style="vertical-align:baseline">.</span></p>
<p><span style="vertical-align:baseline">An excellent tool to visualize the intricacies of a decoded Intel x64 instruction is </span><a href="https://github.com/zyantific/zydis/blob/master/tools/ZydisInfo.c" rel="noopener" target="_blank"><span style="text-decoration:underline;vertical-align:baseline">ZydisInfo</span></a><span style="vertical-align:baseline">. Here we use it to illustrate how a LEA instruction (encoded as</span> <code style="vertical-align:baseline">488D151B510600</code><span style="vertical-align:baseline">) references RIP-relative memory at </span><code style="vertical-align:baseline">0x6511b</code><span style="vertical-align:baseline">.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 58: ZydisInfo output for the lea instruction</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">For most instructions, the displacement is encoded in the final four bytes of the instruction. When an immediate value is stored at a memory location, the immediate follows the displacement. Immediate values are restricted to a maximum of 32 bits, meaning 64-bit immediates cannot be used following a displacement. However, 8-bit and 16-bit immediate values are supported within this encoding scheme.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 59: ZydisInfo output for the mov instruction storing an immediate operand</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Displacements for control-transfer instructions are encoded as immediate operands, with the RIP register implicitly acting as the base. This is evident when decoding a </span><code style="vertical-align:baseline">jnz</code><span style="vertical-align:baseline"> instruction, where the displacement is directly embedded within the instruction and calculated relative to the current RIP.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 60: ZydisInfo output for the jnz instruction with an immediate operand as the displacement</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h3><span style="vertical-align:baseline">Steps in the Relocation Process</span></h3>
<p><span style="vertical-align:baseline">For rebuilding relocations we take the following approach:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Rebuilding the code section and creating a relocation map</strong><span style="vertical-align:baseline">With the recovered CFG and imports, we commit the changes to a new code section that contains the fully deobfuscated code. We do this by:</span></p>
</li>
<ul>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Function-by-function processing</strong><span style="vertical-align:baseline">: rebuild each function one at a time. This allows us to manage the relocation of each instruction within its respective function.</span></p>
</li>
<li style="list-style-type:circle;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Tracking instruction locations</strong><span style="vertical-align:baseline">: As we rebuild each function, we track the new memory locations of each instruction. This involves maintaining a global relocation dictionary that maps original instruction addresses to their new addresses in the deobfuscated binary. This dictionary is crucial for accurately updating references during the fixup phase.</span></p>
</li>
</ul>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Applying fixups</strong><span style="vertical-align:baseline">After rebuilding the code section and establishing the relocation map, we proceed to modify the instructions so that their memory references point to the correct locations in the deobfuscated binary. This restores the binary's complete functionality and is achieved by </span><strong style="vertical-align:baseline">adjusting memory references</strong><span style="vertical-align:baseline"> to code or data an instruction may have.</span></p>
</li>
</ol>
<h4><span style="vertical-align:baseline">Rebuilding the Code Section and Creating a Relocation Map</span></h4>
<p><span style="vertical-align:baseline">To construct the new deobfuscated code segment, we iterate over each recovered function and copy all instructions sequentially, starting from a fixed offset—for example, </span><code style="vertical-align:baseline">0x1000</code><span style="vertical-align:baseline">. During this process, we build a global relocation dictionary (</span><code style="vertical-align:baseline">global_relocs</code><span style="vertical-align:baseline">) that maps each instruction to its relocated address. This mapping is essential for adjusting memory references during the fixup phase.</span></p>
<p><span style="vertical-align:baseline">The </span><code style="vertical-align:baseline">global_relocs</code><span style="vertical-align:baseline"> dictionary uses a tuple as the key for lookups, and each key is associated with the relocated address of the instruction it represents. The tuple consists of the following three components:</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Original starting address of the function</strong><span style="vertical-align:baseline">: The address where the function begins in the protected binary. It identifies the function to which the instruction belongs.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Original instruction address within the function</strong><span style="vertical-align:baseline">: The address of the instruction in the protected binary. For the first instruction in a function, this will be the function's starting address.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Synthetic boundary JMP flag</strong><span style="vertical-align:baseline">: A boolean value indicating whether the instruction is a synthetic boundary jump introduced during normalization. These synthetic instructions were not present in the original obfuscated binary, and we need to account for them specifically during relocation because they have no original address.</span></p>
</li>
</ol></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 61: Illustration of how the new code segment and relocation map are generated</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">The following Python code implements the logic outlined in Figure 61. Error handling and logging code has been stripped for brevity.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 62: Python logic that implements the building of the code segment and generation of the relocation map</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><ol>
<li><strong style="vertical-align:baseline">Initialize current offset<br></strong><span style="vertical-align:baseline">Set the starting point in the new image buffer where the code section will be placed. The variable </span><code style="vertical-align:baseline">curr_off</code><span style="vertical-align:baseline"> is initialized to </span><code style="vertical-align:baseline">starting_off</code><span style="vertical-align:baseline">, which is typically </span><code style="vertical-align:baseline">0x1000</code><span style="vertical-align:baseline">. This represents the conventional start address of the </span><code style="vertical-align:baseline">.text</code><span style="vertical-align:baseline"> section in PE files. For SELECTIVE mode, this will be the offset to the start of the protected function.</span></li>
<li><strong style="vertical-align:baseline">Iterate over recovered functions<br></strong><span style="vertical-align:baseline">Loop through each recovered function in the deobfuscated control flow graph (</span><code style="vertical-align:baseline">d.cfg</code><span style="vertical-align:baseline">). </span><code style="vertical-align:baseline">func_ea</code><span style="vertical-align:baseline"> is the original function entry address, and </span><code style="vertical-align:baseline">rfn</code><span style="vertical-align:baseline"> is a </span><code style="vertical-align:baseline">RecoveredFunc</code><span style="vertical-align:baseline"> object encapsulating the recovered function's instructions and metadata.</span>
<ol style="list-style-type:lower-alpha">
<li><strong style="vertical-align:baseline">Handle the function start address first</strong>
<ol>
<li style="list-style-type:lower-roman;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Set function's relocated start address: </strong><span style="vertical-align:baseline">Assign the current offset to </span><code style="vertical-align:baseline">rfn.reloc_ea</code><span style="vertical-align:baseline">, marking where this function will begin in the new image buffer.</span></p>
</li>
<li style="list-style-type:lower-roman;vertical-align:baseline"><span style="vertical-align:baseline"><strong style="vertical-align:baseline">Update global relocation map: </strong><span style="vertical-align:baseline">Add an entry to the global relocation map </span><code style="vertical-align:baseline">d.global_relocs</code><span style="vertical-align:baseline"> to map the original function address to its new location.</span></span></li>
</ol>
</li>
<li><strong style="vertical-align:baseline">Iterate over each recovered instruction<br></strong><span style="vertical-align:baseline">Loop through the normalized flow of instructions within the function. We use the </span><code style="vertical-align:baseline">normalized_flow</code><span style="vertical-align:baseline"> as it allows us to iterate over each instruction linearly as we apply it to the new image.</span>
<ol style="list-style-type:lower-roman">
<li><span style="vertical-align:baseline"><strong style="vertical-align:baseline">Set instruction's relocated address: </strong><span style="vertical-align:baseline">Assign the current offset to </span><code style="vertical-align:baseline">r.reloc_ea</code><span style="vertical-align:baseline">, indicating where this instruction will reside in the new image buffer.</span></span></li>
<li><span style="vertical-align:baseline"><strong style="vertical-align:baseline">Update global relocation map: </strong><span style="vertical-align:baseline">Add an entry to </span><code style="vertical-align:baseline">d.global_relocs</code><span style="vertical-align:baseline"> for the instruction, mapping its original address to the relocated address.</span></span></li>
<li><span style="vertical-align:baseline"><span style="vertical-align:baseline"><strong style="vertical-align:baseline">Update the output image: </strong><span style="vertical-align:baseline">Write the instruction bytes to the new image buffer </span><code style="vertical-align:baseline">d.newimgbuffer</code><span style="vertical-align:baseline"> at the current offset. If the instruction was modified during deobfuscation (</span><code style="vertical-align:baseline">r.updated_bytes</code><span style="vertical-align:baseline">), use those bytes; otherwise, use the original bytes (</span><code style="vertical-align:baseline">r.instr.bytes</code><span style="vertical-align:baseline">).</span></span></span></li>
<li><span style="vertical-align:baseline"><span style="vertical-align:baseline"><span style="vertical-align:baseline"><strong style="vertical-align:baseline">Advance the offset: </strong><span style="vertical-align:baseline">Increment </span><code style="vertical-align:baseline">curr_off</code><span style="vertical-align:baseline"> by the size of the instruction to point to the next free position in the buffer and move on to the next instruction until the remainder are exhausted.</span></span></span></span></li>
</ol>
</li>
</ol>
</li>
<li><strong style="vertical-align:baseline">Align current offset to 16-byte boundary</strong><span style="vertical-align:baseline">After processing all instructions in a function, align </span><code style="vertical-align:baseline">curr_off</code><span style="vertical-align:baseline"> to the next 16-byte boundary. We use 8 bytes as an arbitrary pointer-sized value from the last instruction to pad so that the next function won't conflict with the last instruction of the previous function. This further ensures proper memory alignment for the next function, which is essential for performance and correctness on x86-64 architectures. Then repeat the process from step 2 until all functions have been exhausted.</span></li>
</ol>
<p><span style="vertical-align:baseline">This step-by-step process accurately rebuilds the deobfuscated binary's executable code section. By relocating each instruction, the code prepares the output template for the subsequent fixup phase, where references are adjusted to point to their correct locations.</span></p>
<h4><span style="vertical-align:baseline">Applying Fixups</span></h4>
<p><span style="vertical-align:baseline">After building the deobfuscated code section and relocating each recovered function in full, we apply fixups to correct addresses within the recovered code. This process adjusts the instruction bytes in the new output image so that all references point to the correct locations. It is the final step in reconstructing a functional deobfuscated binary.</span></p>
<p><span style="vertical-align:baseline">We categorize fixups into three distinct categories, based primarily on whether they apply to control flow or data flow instructions. We further distinguish between two types of control flow instructions: standard branching instructions and those introduced by the obfuscator through the import protection. Each type has specific nuances that require tailored handling, allowing us to apply precise logic to each category.</span></p>
<ol>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Import Relocations</strong><span style="vertical-align:baseline">: These involve calls and jumps to recovered imports.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Control Flow Relocations</strong><span style="vertical-align:baseline">: All standard control flow branching branching instructions.</span></p>
</li>
<li style="list-style-type:decimal;vertical-align:baseline">
<p><strong style="vertical-align:baseline">Data Flow Relocations</strong><span style="vertical-align:baseline">: Instructions that reference static memory locations.</span></p>
</li>
</ol>
<p><span style="vertical-align:baseline">Using these three categorizations, the core logic boils down to the following two phases:</span></p>
<ol>
<li><strong style="vertical-align:baseline">Resolving displacement fixups</strong>
<ul>
<li><span style="vertical-align:baseline">Differentiate between displacements encoded as immediate operands (branching instructions) and those in memory operands (data accesses and import calls).</span></li>
<li><span style="vertical-align:baseline">Calculate the correct fixup values for these displacements using the </span><code style="vertical-align:baseline">d</code><strong style="vertical-align:baseline">.</strong><code style="vertical-align:baseline">global_relocs </code><span style="vertical-align:baseline">map generated prior.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Update the output image buffer</strong>
<ul>
<li><span style="vertical-align:baseline">Once the displacements have been resolved, write the updated instruction bytes into the new code segment to reflect the changes permanently.</span></li>
</ul>
</li>
</ol>
<p><span style="vertical-align:baseline">To achieve this, we utilize several helper functions and lambda expressions. The following is a step-by-step explanation of the code responsible for calculating the fixups and updating the instruction bytes.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 63: Helper routines that aid in applying fixups</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><ul>
<li><strong style="vertical-align:baseline">Define lambda helper expressions</strong>
<ul>
<li><code style="vertical-align:baseline">PACK_FIXUP</code><span style="vertical-align:baseline">: packs a 32-bit fixup value into a little-endian byte array.</span></li>
<li><code style="vertical-align:baseline">CALC_FIXUP</code><span style="vertical-align:baseline">: calculates the fixup value by computing the difference between the destination address (</span><code style="vertical-align:baseline">dest</code><span style="vertical-align:baseline">) and the end of the current instruction (</span><code style="vertical-align:baseline">r.reloc_ea + size</code><span style="vertical-align:baseline">), ensuring it fits within 32 bits.</span></li>
<li><code style="vertical-align:baseline">IS_IN_DATA</code><span style="vertical-align:baseline">: checks if a given address is within the data section of the binary. We exclude relocating these addresses, as we preserve the data section at its original location.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Resolve fixups for each instruction</strong>
<ul>
<li><span style="vertical-align:baseline">Import and data flow relocations</span>
<ul>
<li><span style="vertical-align:baseline">Utilize the </span><code style="vertical-align:baseline">resolve_disp_fixup_and_apply</code><span style="vertical-align:baseline"> helper function as both encode the displacement within a memory operand.</span></li>
</ul>
</li>
<li><span style="vertical-align:baseline">Control flow relocations</span>
<ul>
<li><span style="vertical-align:baseline">Use the </span><code style="vertical-align:baseline">resolve_imm_fixup_and_apply</code><span style="vertical-align:baseline"> helper as the displacement is encoded in an immediate operand.</span></li>
<li><span style="vertical-align:baseline">During our CFG recovery, we transformed each </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline"> and </span><code style="vertical-align:baseline">jcc</code><span style="vertical-align:baseline"> instruction to its near jump equivalent (from 2 bytes to 6 bytes) to avoid the shortcomings of 1-byte short branches.</span>
<ul>
<li><span style="vertical-align:baseline">We force a 32-bit displacement for each branch to guarantee a sufficient range for every fixup.</span></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Update the output image buffer</strong>
<ul>
<li><span style="vertical-align:baseline">Decode the updated instruction bytes to have it reflect within the </span><code style="vertical-align:baseline">RecoveredInstr</code> <span style="vertical-align:baseline">that represents it.</span></li>
<li><span style="vertical-align:baseline">Write the updated bytes to the new image buffer</span>
<ul>
<li><code style="vertical-align:baseline">updated_bytes</code> <span style="vertical-align:baseline">reflects the final opcodes for a fully relocated instruction.</span></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><span style="vertical-align:baseline">With the helpers in place, the following Python code implements the final processing for each relocation type.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 64: The three core loops that address each relocation category</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><ul>
<li><strong style="vertical-align:baseline">Import Relocations: </strong><span style="vertical-align:baseline">The first for loop handles fixups for import relocations, utilizing data generated during the Import Recovery phase. It iterates over every recovered instruction</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">r</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">within the</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">rfn.relocs_imports</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">cache and does the following</span><span style="vertical-align:baseline">:</span>
<ul>
<li><strong style="vertical-align:baseline">Prepare updated instruction bytes: </strong><span style="vertical-align:baseline">initialize </span><code style="vertical-align:baseline">r.updated_bytes</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">with a mutable copy of the original instruction bytes to prepare it for modification</span><span style="vertical-align:baseline">.</span></li>
<li><strong style="vertical-align:baseline">Retrieve import entry and displacement: </strong><span style="vertical-align:baseline">obtain the import entry from the imports dictionary</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">d.imports</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">and retrieve the new RVA from </span><code style="vertical-align:baseline">d.import_to_rva_map</code><span style="vertical-align:baseline"> using the import's API name.</span></li>
<li><strong style="vertical-align:baseline">Apply fixup: </strong><span style="vertical-align:baseline">use the</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">resolve_disp_fixup_and_apply</code><span style="vertical-align:baseline"> helper to calculate and apply the fixup for the new RVA. This adjusts the instruction's displacement to correctly reference the imported function.</span></li>
<li><strong style="vertical-align:baseline">Update image buffer: </strong><span style="vertical-align:baseline">write </span><code style="vertical-align:baseline">r.updated_bytes</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">back into the new image using</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">update_reloc_in_img</code><span style="vertical-align:baseline">. </span><span style="vertical-align:baseline">This finalizes the fixup for the instruction in the output image.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Control Flow Relocations: </strong><span style="vertical-align:baseline">The second for loop handles fixups for control flow branching relocations (</span><code style="vertical-align:baseline">call</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">jmp</code><span style="vertical-align:baseline">, </span><code style="vertical-align:baseline">jcc</code><span style="vertical-align:baseline">). Iterating over each entry</span><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">in </span><code style="vertical-align:baseline">rfn.relocs_ctrlflow</code><span style="vertical-align:baseline">, it does the following:</span>
<ul>
<li><strong style="vertical-align:baseline">Retrieve destination</strong><span style="vertical-align:baseline">: extract the original branch destination target from the immediate operand.</span></li>
<li><strong style="vertical-align:baseline">Get relocated address</strong><span style="vertical-align:baseline">: reference the relocation dictionary</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">d.global_relocs</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">to obtain the branch target's relocated address. If it's a call target, then we specifically look up the relocated address for the start of the called function.</span></li>
<li><strong style="vertical-align:baseline">Apply fixup</strong><span style="vertical-align:baseline">: use</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">resolve_imm_fixup_and_apply</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">to adjust the branch target to its relocated address.</span></li>
<li><strong style="vertical-align:baseline">Update buffer</strong><span style="vertical-align:baseline">: finalize the fixup by writing</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">r.updated_bytes</code><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">back into the new image using </span><code style="vertical-align:baseline">update_reloc_in_img</code><span style="vertical-align:baseline">.</span></li>
</ul>
</li>
<li><strong style="vertical-align:baseline">Data Flow Relocations: </strong><span style="vertical-align:baseline">The final loop handles the resolution of all static memory references stored within</span><span style="vertical-align:baseline"> </span><code style="vertical-align:baseline">rfn.relocs_dataflow</code><span style="vertical-align:baseline">. </span><span style="vertical-align:baseline">First, we establish a list of </span><code style="vertical-align:baseline">KNOWN </code><span style="vertical-align:baseline">instructions that require data reference relocations. Given the extensive variety of such instructions, this categorization simplifies our approach and ensures a comprehensive understanding of all possible instructions present in the protected binaries. Following this, the logic mirrors that of the import and control flow relocations, systematically processing each relevant instruction to accurately adjust their memory references. </span></li>
</ul>
<p><span style="vertical-align:baseline">After reconstructing the code section and establishing the relocation map, we proceeded to adjust each instruction categorized for relocation within the deobfuscated binary. This was the final step in restoring the output binary's full functionality, as it ensures that each instruction accurately references the intended code or data segments.</span></p>
<h4><span style="vertical-align:baseline">Observing the Results</span></h4>
<p><span style="vertical-align:baseline">To demonstrate our deobfuscation library for ScatterBrain, we conduct a test study showcasing its functionality. For this test study, we select three samples: a </span><strong style="vertical-align:baseline">POISONPLUG.SHADOW</strong><span style="vertical-align:baseline"> headerless backdoor and two embedded plugins.</span></p>
<p><span style="vertical-align:baseline">We develop a Python script, </span><code style="vertical-align:baseline">example_deobfuscator.py</code><span style="vertical-align:baseline">, that consumes from our library and implements all of the recovery techniques outlined earlier. Figure 65 and Figure 66 showcase the code within our example deobfuscator:</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 65: The first half of the Python code in example_deobfuscator.py</p></span></div></section></div></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 66: The second half of the Python code in example_deobfuscator.py</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Running </span><code style="vertical-align:baseline">example_deobfuscator.py</code><span style="vertical-align:baseline"> we can see the following. Note, it takes a bit given we have to emulate more than 16,000 instruction dispatchers that were found within the headerless backdoor.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 67: The three core loops that address each relocation category</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Focusing on the headerless backdoor both for brevity and also because it is the most involved in deobfuscating, we first observe its initial state inside the IDA Pro disassembler before we inspect the output results from our deobfuscator. We can see that it is virtually impenetrable to analysis.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 68: Observing the obfuscated headerless backdoor in IDA Pro</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">After running our example deobfuscator and producing a brand new deobfuscated binary, we can see the drastic difference in output. All the original control flow has been recovered, all of the protected imports have been restored, and all required relocations have been applied. We also account for the deliberately removed PE header of the headerless backdoor that ScatterBrain removes.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 69: Observing the deobfuscated headerless backdoor in IDA Pro</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p><span style="vertical-align:baseline">Given we produce functional binaries as part of the output, the subsequent deobfuscated binary can be either run directly or debugged within your favorite debugger of choice.</span></p></span></section><section class="QzPuud"><div><section><figure class="NEBdNd"><section class="PBkdHd DhGbH" jscontroller="SCGBie" jsaction="rcuQ6b:npT2md"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><section class="glue-modal glue-modal--dark QHdDac" role="dialog" aria-modal="true"><img class="JcsBte mZzdH ZOnyjc" src="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif" alt="https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif" jsname='P3Vluc' jsaction="click:HTIlC" loading="lazy"/><button class="glue-modal__close-btn" tabindex="0" aria-label="Close this modal"></button></section></section></figure><div class="nRhiJb-cHYyed nRhiJb-DbgRPb-R6PoUb-ma6Yeb ZpqjUe"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><p>Figure 70: Debugging the deobfuscated headerless backdoor in everyone’s favorite debugger</p></span></div></section></div></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h2><span style="vertical-align:baseline">Conclusion</span></h2>
<p><span style="vertical-align:baseline">In this blog post, we delved into the sophisticated ScatterBrain obfuscator used by POISONPLUG.SHADOW, an advanced modular backdoor leveraged by specific </span><span style="vertical-align:baseline">China-nexus threat actors </span><span style="vertical-align:baseline">GTIG has been tracking since 2022. Our exploration of ScatterBrain highlighted the intricate challenges it poses for defenders. By systematically outlining and addressing each protection mechanism, we demonstrated the significant effort required to create an effective deobfuscation solution.</span></p>
<p><span style="vertical-align:baseline">Ultimately, we hope that our work provides valuable insights and practical tools for analysts and cybersecurity professionals. Our dedication to advancing methodologies and fostering collaborative innovation ensures that we remain at the forefront of combating sophisticated threats like POISONPLUG.SHADOW. Through this exhaustive examination and the introduction of our deobfuscator, we contribute to the ongoing efforts to mitigate the risks posed by highly obfuscated malware, reinforcing the resilience of cybersecurity defenses against evolving adversarial tactics.</span></p>
<h2><span style="vertical-align:baseline">Indicators of Compromise</span></h2>
<p><span style="vertical-align:baseline">A</span><span style="vertical-align:baseline"> </span><a href="https://www.virustotal.com/gui/collection/1ea8e67f29cc208993af3db36ba88d978d566b6a545ed0d73a4b4ebc959e6e85" rel="noopener" target="_blank"><span style="text-decoration:underline;vertical-align:baseline">Google Threat Intelligence Collection</span></a><span style="vertical-align:baseline"> </span><span style="vertical-align:baseline">featuring indicators of compromise (IOCs) related to the activity described in this post is now available.</span></p>
<h3><span style="vertical-align:baseline">Host-Based IOCs</span></h3></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><div align="left">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%">
<div style="color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%"><table border="1px" cellpadding="16px" style="border-collapse:collapse;margin-left:auto;margin-right:auto"><colgroup><col><col></colgroup>
<tbody>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p style="text-align:center"><strong style="vertical-align:baseline">MD5</strong></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p style="text-align:center"><strong style="vertical-align:baseline">Associated Malware Family</strong></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">5C62CDF97B2CAA60448619E36A5EB0B6</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">0009F4B9972660EEB23FF3A9DCCD8D86</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">EB42EF53761B118EFBC75C4D70906FE4</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">4BF608E852CB279E61136A895A6912A9</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">1F1361A67CE4396C3B9DBC198207EF52</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">79313BE39679F84F4FCB151A3394B8B3</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><code style="vertical-align:baseline">704FB67DFFE4D1DCE8F22E56096893BE</code></p>
</td>
<td style="vertical-align:middle;border:1px solid #000000;padding:16px">
<p><span style="vertical-align:baseline">POISONPLUG.SHADOW</span></p>
</td>
</tr>
</tbody>
</table></div>
</div>
</div>
</div>
</div>
</div>
</div></span></section><section class="Wy08Ac nRhiJb-qJTHM-OWXEXe-hJDwNd nRhiJb-DbgRPb-II5mzb-cGMI2b"><span class="dQQu7c" jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip ssk='5:kbe95'><h2><span style="vertical-align:baseline">Acknowledgements</span></h2>
<p><span style="vertical-align:baseline">Special thanks to Conor Quigley and Luke Jenkins from the Google Threat Intelligence Group for their contributions to both Mandiant and Google’s efforts in understanding and combating the POISONPLUG threat. We also appreciate the ongoing support and dedication of the teams at Google, whose combined efforts have been crucial in enhancing our cybersecurity defenses against sophisticated adversaries.</span></p></span></section><section class="kcBhad"><section class="Fabbec"><span class="WrMNjb">Posted in</span><ul class="FzXI4e"><li class="I4B51b"><a href="https://cloud.google.com/blog/topics/threat-intelligence" track-metadata-position="body"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence"track-metadata-module="tag list"track-metadata-module_headline="posted in">Threat Intelligence</a></li></ul></section></section></div></div></div></div></div><section class="nRhiJb-DARUcf " track-metadata-module="related articles" track-metadata-module_headline="related articles"><div class="nRhiJb-DbgRPb-c5RTEf-ma6Yeb nRhiJb-DbgRPb-wNfPc-cGMI2b"><h5 class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-wNfPc nRhiJb-DbgRPb-II5mzb-cGMI2b">Related articles</h5><section class="m9cUGf  HGev3   nJD2Qe  nRhiJb-ObfsIf"><div class="  QaGyvd  nRhiJb-kR0ZEf-OWXEXe-GV1x9e-c5RTEf nRhiJb-kR0ZEf-OWXEXe-GV1x9e-qWD73c-V2iZpe"><div class="mA0uBe"><a href="https://cloud.google.com/blog/topics/threat-intelligence/adversarial-misuse-generative-ai" class="lD2oe" track-name="adversarial misuse of generative ai"track-type="card"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence/adversarial-misuse-generative-ai"><div class="AhkbS "><div class="hqnDEf"><section class="PBkdHd "><img class=" D5RK8d" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" loading="lazy"/></section></div><div class="JUOx5b"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c nRhiJb-DbgRPb-c5RTEf-ma6Yeb nRhiJb-BFbNVe-r8s4j-bMElCd FI6Gl nRhiJb-fmcmS-oXtfBe" track-name="threat intelligence"track-type="tag">Threat Intelligence</div><h3 class="Qwf2Db-MnozTc HGFKtc Qwf2Db-MnozTc-OWXEXe-MnozTc-wNfPc">Adversarial Misuse of Generative AI</h3><p class="nRhiJb-cHYyed dTIXyb nRhiJb-DbgRPb-R6PoUb-ma6Yeb">By Google Threat Intelligence Group  • 55-minute read</p></div></div></a></div></div><div class="  QaGyvd  nRhiJb-kR0ZEf-OWXEXe-GV1x9e-c5RTEf nRhiJb-kR0ZEf-OWXEXe-GV1x9e-qWD73c-V2iZpe"><div class="mA0uBe"><a href="https://cloud.google.com/blog/topics/threat-intelligence/securing-cryptocurrency-organizations" class="lD2oe" track-name="securing cryptocurrency organizations"track-type="card"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence/securing-cryptocurrency-organizations"><div class="AhkbS "><div class="hqnDEf"><section class="PBkdHd "><img class=" D5RK8d" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" loading="lazy"/></section></div><div class="JUOx5b"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c nRhiJb-DbgRPb-c5RTEf-ma6Yeb nRhiJb-BFbNVe-r8s4j-bMElCd FI6Gl nRhiJb-fmcmS-oXtfBe" track-name="threat intelligence"track-type="tag">Threat Intelligence</div><h3 class="Qwf2Db-MnozTc HGFKtc Qwf2Db-MnozTc-OWXEXe-MnozTc-wNfPc">Securing Cryptocurrency Organizations</h3><p class="nRhiJb-cHYyed dTIXyb nRhiJb-DbgRPb-R6PoUb-ma6Yeb">By Mandiant  • 27-minute read</p></div></div></a></div></div><div class="  QaGyvd  nRhiJb-kR0ZEf-OWXEXe-GV1x9e-c5RTEf nRhiJb-kR0ZEf-OWXEXe-GV1x9e-qWD73c-V2iZpe"><div class="mA0uBe"><a href="https://cloud.google.com/blog/topics/threat-intelligence/single-page-applications-vulnerable" class="lD2oe" track-name="your single-page applications are vulnerable: here&#39;s how to fix them"track-type="card"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence/single-page-applications-vulnerable"><div class="AhkbS "><div class="hqnDEf"><section class="PBkdHd "><img class=" D5RK8d" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" loading="lazy"/></section></div><div class="JUOx5b"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c nRhiJb-DbgRPb-c5RTEf-ma6Yeb nRhiJb-BFbNVe-r8s4j-bMElCd FI6Gl nRhiJb-fmcmS-oXtfBe" track-name="threat intelligence"track-type="tag">Threat Intelligence</div><h3 class="Qwf2Db-MnozTc HGFKtc Qwf2Db-MnozTc-OWXEXe-MnozTc-wNfPc">Your Single-Page Applications Are Vulnerable: Here&#39;s How to Fix Them</h3><p class="nRhiJb-cHYyed dTIXyb nRhiJb-DbgRPb-R6PoUb-ma6Yeb">By Mandiant  • 9-minute read</p></div></div></a></div></div><div class="  QaGyvd  nRhiJb-kR0ZEf-OWXEXe-GV1x9e-c5RTEf nRhiJb-kR0ZEf-OWXEXe-GV1x9e-qWD73c-V2iZpe"><div class="mA0uBe"><a href="https://cloud.google.com/blog/topics/threat-intelligence/backscatter-automated-configuration-extraction" class="lD2oe" track-name="backscatter: automated configuration extraction"track-type="card"track-metadata-eventdetail="cloud.google.com/blog/topics/threat-intelligence/backscatter-automated-configuration-extraction"><div class="AhkbS "><div class="hqnDEf"><section class="PBkdHd "><img class=" D5RK8d" src="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" alt="https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png" loading="lazy"/></section></div><div class="JUOx5b"><div class="Qwf2Db-MnozTc Qwf2Db-MnozTc-OWXEXe-MnozTc-qWD73c nRhiJb-DbgRPb-c5RTEf-ma6Yeb nRhiJb-BFbNVe-r8s4j-bMElCd FI6Gl nRhiJb-fmcmS-oXtfBe" track-name="threat intelligence"track-type="tag">Threat Intelligence</div><h3 class="Qwf2Db-MnozTc HGFKtc Qwf2Db-MnozTc-OWXEXe-MnozTc-wNfPc">Backscatter: Automated Configuration Extraction</h3><p class="nRhiJb-cHYyed dTIXyb nRhiJb-DbgRPb-R6PoUb-ma6Yeb">By Mandiant  • 4-minute read</p></div></div></a></div></div></section></div></section></article></div></div><c-data id="i1" jsdata=" n2jFB;_;1"></c-data></c-wiz><script aria-hidden="true" nonce="7Hibp_PLMbjEvbm9bu7mWQ">window.wiz_progress&&window.wiz_progress();window.wiz_tick&&window.wiz_tick('zPZHOe');</script><script nonce="7Hibp_PLMbjEvbm9bu7mWQ">(function(){'use strict';var c=window,d=[];c.aft_counter=d;var e=[],f=0;function _recordIsAboveFold(a){if(!c._isLazyImage(a)&&!a.hasAttribute("data-noaft")&&a.src){var b=(c._isVisible||function(){})(c.document,a);a.setAttribute("data-atf",b);b&&(e.indexOf(a)!==-1||d.indexOf(a)!==-1||a.complete||d.push(a),a.hasAttribute("data-iml")&&(a=Number(a.getAttribute("data-iml")),a>f&&(f=a)))}}
c.initAft=function(){f=0;e=Array.prototype.slice.call(document.getElementsByTagName("img")).filter(function(a){return!!a.getAttribute("data-iml")});[].forEach.call(document.getElementsByTagName("img"),function(a){try{_recordIsAboveFold(a)}catch(b){throw b.message=a.hasAttribute("data-iid")?b.message+"\nrecordIsAboveFold error for defer inlined image":b.message+("\nrecordIsAboveFold error for img element with <src: "+a.src+">"),b;}});if(d.length===0)c.onaft(f)};}).call(this);
initAft()</script><script id="_ij" nonce="7Hibp_PLMbjEvbm9bu7mWQ">window.IJ_values = [[null,null,"",false,null,null,true,false],'0','https:\/\/cloud.google.com\/blog\/',["cloudblog","topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator",["en","de","fr","ko","ja"],"en",null,"https://cloud.google.com/blog","blog_article","cloud.google.com",["https://console.cloud.google.com/freetrial/","https://cloud.google.com/contact/","https://cloud.google.com/","https://cloud.google.com/blog","https://cloud.google.com/","https://www.google.com/","https://cloud.google.com/products/","https://about.google.com/products/","https://about.google/intl/en/","https://support.google.com"],["googlecloud","googlecloud","showcase/google-cloud","googlecloud/","googlecloud/"],true], null ,'boq_cloudx-web-blog-uiserver_20250129.07_p0','cloud.google.com',["US",4],[[["bigquery_ftv",["bigquery_ftv",[["control",["control",[97716263,97716264],["/bigquery"]]],["variantA",["variantA",[97716265,97716266],["/bigquery"]]],["variantB",["variantB",[97716267,97716268],["/bigquery"]]],["variantC",["variantC",[97716269,97716270],["/bigquery"]]]]]],["jss",["jss",[["control",["control",[93803230,93804391],["/products/ai","/products/compute","/solutions/web-hosting"]]],["variantA",["variantA",[93803231,93804392],["/products/ai","/products/compute","/solutions/web-hosting"]]],["variantB",["variantB",[93803232,93804393],["/products/ai","/products/compute","/solutions/web-hosting"]]],["variantC",["variantC",[93803233,93804394],["/products/ai","/products/compute","/solutions/web-hosting"]]]]]],["visual_interest",["visual_interest",[["control",["control",[97933470,97933471],["/free"]]],["variantA",["variantA",[97933472,97933473],["/free"]]],["variantB",["variantB",[97933474,97933475],["/free"]]],["variantC",["variantC",[97940381,97940382],["/free"]]]]]]]], 0.0 ,["GTM-5CVQBG",[["en","\u202aEnglish\u202c",true,"en"],["de","\u202aDeutsch\u202c",true,"de"],["es","\u202aEspañol\u202c",true,"es"],["es-419","\u202aEspañol (Latinoamérica)\u202c",true,"es-419"],["fr","\u202aFrançais\u202c",true,"fr"],["id","\u202aIndonesia\u202c",true,"id"],["it","\u202aItaliano\u202c",true,"it"],["pt-BR","\u202aPortuguês (Brasil)\u202c",true,"pt-BR"],["zh-CN","\u202a简体中文\u202c",true,"zh-Hans"],["zh-TW","\u202a繁體中文\u202c",true,"zh-Hant"],["ja","\u202a日本語\u202c",true,"ja"],["ko","\u202a한국어\u202c",true,"ko"]],["83405","AIzaSyD3LJeW4Q6gtdgJlyeFZUp-GhpIoc6EUeg"],"en",null,null,[],[["https://cloud.google.com/innovators","https://cloud.google.com/innovators/plus/activate","https://cloud.google.com/innovators/innovatorsplus"],["https://workspace.google.com/pricing","https://www.x.com/googleworkspace","https://www.facebook.com/googleworkspace","https://www.youtube.com/channel/UCBmwzQnSoj9b6HzNmFrg_yw","https://www.instagram.com/googleworkspace","https://www.linkedin.com/showcase/googleworkspace","https://about.google/?utm_source\u003dworkspace.google.com\u0026utm_medium\u003dreferral\u0026utm_campaign\u003dgsuite-footer-en","https://about.google/products/?tip\u003dexplore","https://workspace.google.com","https://workspace.google.com/contact/?source\u003dgafb-form-globalnav-en","https://workspace.google.com/business/signup/welcome?hl\u003den\u0026source\u003dgafb-form-globalnav-en","https://workspace.google.com/blog"],["https://www.cloudskillsboost.google","https://www.cloudskillsboost.google?utm_source\u003dcgc\u0026utm_medium\u003dwebsite\u0026utm_campaign\u003devergreen","https://www.cloudskillsboost.google/subscriptions?utm_source\u003dcgc\u0026utm_medium\u003dwebsite\u0026utm_campaign\u003devergreenlaunchpromo","https://www.cloudskillsboost.google/subscriptions?utm_source\u003dcgc\u0026utm_medium\u003dwebsite\u0026utm_campaign\u003devergreen","https://www.cloudskillsboost.google/catalog?utm_source\u003dcgc\u0026utm_medium\u003dwebsite\u0026utm_campaign\u003devergreen","https://www.cloudskillsboost.google/paths?utm_source\u003dcgc\u0026utm_medium\u003dwebsite\u0026utm_campaign\u003devergreen"],["https://mapsplatform.google.com"],["https://cloud.google.com/developers","https://cloud.google.com/developers/settings?utm_source\u003dinnovators"],["https://console.cloud.google.com/freetrial","https://console.cloud.google.com/","https://console.cloud.google.com/freetrial?redirectPath\u003dhttps://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator/"],["https://aitestkitchen.withgoogle.com/signup","https://blog.google/technology/ai/join-us-in-the-ai-test-kitchen/","https://cloud.google.com/ai"],["https://googlecloudplatform.blogspot.com/","https://github.com/GoogleCloudPlatform","https://www.linkedin.com/company/google-cloud","https://twitter.com/googlecloud","https://www.facebook.com/googlecloud"]],[2025,1,30],[["en","x-default"],"x-default"],[null,true],null,"/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator/?hl\u003den",["6LcsrxUqAAAAAFhpR1lXsPN2j2nsTwy6JTbRKzJr"]],[],'','7Hibp_PLMbjEvbm9bu7mWQ','R1KSEAE5XPV4jytr-DlCxA','DEFAULT','\/blog', 2025.0 ,'https:\/\/cloud.google.com\/blog\/topics\/threat-intelligence\/scatterbrain-unmasking-poisonplug-obfuscator\/', null ,'ltr', false ,'https:\/\/accounts.google.com\/AccountChooser?continue\x3dhttps:\/\/cloud.google.com\/blog\/topics\/threat-intelligence\/scatterbrain-unmasking-poisonplug-obfuscator\/\x26hl\x3den-US','https:\/\/accounts.google.com\/ServiceLogin?hl\x3den-US\x26continue\x3dhttps:\/\/cloud.google.com\/blog\/topics\/threat-intelligence\/scatterbrain-unmasking-poisonplug-obfuscator\/','https:\/\/accounts.google.com\/SignOutOptions?continue\x3dhttps:\/\/cloud.google.com\/blog\/topics\/threat-intelligence\/scatterbrain-unmasking-poisonplug-obfuscator\/',[[[1]]], false , false , false ,'en','en-US','en_US','https:\/\/goto2.corp.google.com\/mdtredirect?data_id_filter\x3dcloud.google.com\x26system_name\x3dcloudx-web-blog-uiserver', null , null ,'https:\/\/myaccount.google.com\/privacypolicy?hl\x3den-US', false , null ,'https:\/\/www.gstatic.com\/_\/boq-cloudx-web-blog\/_\/r\/','https:\/\/myaccount.google.com\/termsofservice?hl\x3den-US',[[[["Solutions \u0026 technology",null,[[["AI \u0026 Machine Learning","/blog/products/ai-machine-learning"],["API Management","/blog/products/api-management"],["Application Development","/blog/products/application-development"],["Application Modernization","/blog/products/application-modernization"],["Chrome Enterprise","/blog/products/chrome-enterprise"],["Compute","/blog/products/compute"],["Containers \u0026 Kubernetes","/blog/products/containers-kubernetes"],["Data Analytics","/blog/products/data-analytics"],["Databases","/blog/products/databases"],["DevOps \u0026 SRE","/blog/products/devops-sre"],["Maps \u0026 Geospatial","/blog/topics/maps-geospatial"],["Security",null,[[["Security \u0026 Identity","/blog/products/identity-security"],["Threat Intelligence","/blog/topics/threat-intelligence"]]]],["Infrastructure","/blog/products/infrastructure"],["Infrastructure Modernization","/blog/products/infrastructure-modernization"],["Networking","/blog/products/networking"],["Productivity \u0026 Collaboration","/blog/products/productivity-collaboration"],["SAP on Google Cloud","/blog/products/sap-google-cloud"],["Storage \u0026 Data Transfer","/blog/products/storage-data-transfer"],["Sustainability","/blog/topics/sustainability"]]]],["Ecosystem",null,[[["IT Leaders","/transform"],["Industries",null,[[["Financial Services","/blog/topics/financial-services"],["Healthcare \u0026 Life Sciences","/blog/topics/healthcare-life-sciences"],["Manufacturing","/blog/topics/manufacturing"],["Media \u0026 Entertainment","/blog/products/media-entertainment"],["Public Sector","/blog/topics/public-sector"],["Retail","/blog/topics/retail"],["Supply Chain","/blog/topics/supply-chain-logistics"],["Telecommunications","/blog/topics/telecommunications"]]]],["Partners","/blog/topics/partners"],["Startups \u0026 SMB","/blog/topics/startups"],["Training \u0026 Certifications","/blog/topics/training-certifications"],["Inside Google Cloud","/blog/topics/inside-google-cloud"],["Google Cloud Next \u0026 Events","/blog/topics/google-cloud-next"],["Google Maps Platform","https://mapsplatform.google.com/resources/blog/"],["Google Workspace","https://workspace.google.com/blog"]]]],["Developers \u0026 Practitioners","/blog/topics/developers-practitioners"],["Transform with Google Cloud","/transform"]]],[["de",[[["Neuigkeiten","/blog/de/topics/whats-new/aktuelles-auf-dem-google-cloud-blog"],["Lösungen \u0026 Technologien",null,[[["Anwendungsentwicklung","/blog/de/products/application-development"],["Anwendungsmodernisierung","/blog/de/products/anwendungsmodernisierung"],["API-Verwaltung","/blog/de/products/api-management"],["Chrome Enterprise","/blog/de/products/chrome-enterprise"],["Computing","/blog/de/products/compute"],["Containers \u0026 Kubernetes","/blog/de/products/containers-kubernetes"],["Datenanalysen","/blog/de/products/data-analytics"],["Datenbanken","/blog/de/products/databases"],["DevOps \u0026 SRE","/blog/de/products/devops-sre"],["Infrastruktur","/blog/de/products/infrastructure"],["KI \u0026 Machine Learning","/blog/de/products/ai-machine-learning"],["Maps \u0026 Geospatial","/blog/de/topics/maps-geospatial"],["Modernisierung der Infrastruktur","/blog/de/products/modernisierung-der-infrastruktur"],["Nachhaltigkeit","/blog/de/topics/nachhaltigkeit"],["Netzwerk","/blog/de/products/networking"],["Produktivität und Zusammenarbeit","/blog/de/products/produktivitaet-und-kollaboration"],["SAP in Google Cloud","/blog/de/products/sap-google-cloud"],["Sicherheit \u0026 Identität","/blog/de/products/identity-security"],["Speicher und Datentransfer","/blog/de/products/storage-data-transfer"]]]],["Ökosystem",null,[[["IT Leader","/transform/de"],["Industrien",null,[[["Behörden und öffentlicher Sektor","/blog/de/topics/public-sector"],["Einzelhandel","/blog/de/topics/retail"],["Fertigung","/blog/de/topics/fertigung"],["Finanzdienstleistungen","/blog/de/topics/financial-services"],["Gesundheitswesen und Biowissenschaften","/blog/de/topics/healthcare-life-sciences"],["Lieferkette und Logistik","/blog/de/topics/lieferkette-und-logistik"],["Medien und Unterhaltung","/blog/de/products/media-entertainment"],["Telekommunikation","/blog/de/topics/telecommunications"]]]],["Entwickler*innen \u0026 Fachkräfte","/blog/de/topics/developers-practitioners"],["Google Cloud Next \u0026 Events","/blog/de/topics/events"],["Google Maps Platform","/blog/de/products/maps-platform"],["Google Workspace","https://workspace.google.com/blog/de"],["Inside Google Cloud","/blog/de/topics/inside-google-cloud"],["Kunden","/blog/de/topics/kunden"],["Partner","/blog/de/topics/partners"],["Start-ups und KMU","/blog/de/topics/startups"],["Training und Zertifizierung","/blog/de/topics/training-certifications"]]]],["Transformation mit Google Cloud","/transform/de"]]]],["en",[[["Solutions \u0026 technology",null,[[["AI \u0026 Machine Learning","/blog/products/ai-machine-learning"],["API Management","/blog/products/api-management"],["Application Development","/blog/products/application-development"],["Application Modernization","/blog/products/application-modernization"],["Chrome Enterprise","/blog/products/chrome-enterprise"],["Compute","/blog/products/compute"],["Containers \u0026 Kubernetes","/blog/products/containers-kubernetes"],["Data Analytics","/blog/products/data-analytics"],["Databases","/blog/products/databases"],["DevOps \u0026 SRE","/blog/products/devops-sre"],["Maps \u0026 Geospatial","/blog/topics/maps-geospatial"],["Security",null,[[["Security \u0026 Identity","/blog/products/identity-security"],["Threat Intelligence","/blog/topics/threat-intelligence"]]]],["Infrastructure","/blog/products/infrastructure"],["Infrastructure Modernization","/blog/products/infrastructure-modernization"],["Networking","/blog/products/networking"],["Productivity \u0026 Collaboration","/blog/products/productivity-collaboration"],["SAP on Google Cloud","/blog/products/sap-google-cloud"],["Storage \u0026 Data Transfer","/blog/products/storage-data-transfer"],["Sustainability","/blog/topics/sustainability"]]]],["Ecosystem",null,[[["IT Leaders","/transform"],["Industries",null,[[["Financial Services","/blog/topics/financial-services"],["Healthcare \u0026 Life Sciences","/blog/topics/healthcare-life-sciences"],["Manufacturing","/blog/topics/manufacturing"],["Media \u0026 Entertainment","/blog/products/media-entertainment"],["Public Sector","/blog/topics/public-sector"],["Retail","/blog/topics/retail"],["Supply Chain","/blog/topics/supply-chain-logistics"],["Telecommunications","/blog/topics/telecommunications"]]]],["Partners","/blog/topics/partners"],["Startups \u0026 SMB","/blog/topics/startups"],["Training \u0026 Certifications","/blog/topics/training-certifications"],["Inside Google Cloud","/blog/topics/inside-google-cloud"],["Google Cloud Next \u0026 Events","/blog/topics/google-cloud-next"],["Google Maps Platform","https://mapsplatform.google.com/resources/blog/"],["Google Workspace","https://workspace.google.com/blog"]]]],["Developers \u0026 Practitioners","/blog/topics/developers-practitioners"],["Transform with Google Cloud","/transform"]]]],["fr",[[["Les tendances","/blog/fr/topics/les-tendances/quelles-sont-les-nouveautes-de-google-cloud"],["Solutions et Technologie",null,[[["Analyse de données","/blog/fr/products/analyse-de-donnees/"],["Bases de données","/blog/fr/products/databases"],["Calcul","/blog/fr/products/calcul/"],["Chrome Entreprise","/blog/fr/products/chrome-enterprise/"],["Conteneurs et Kubernetes","/blog/fr/products/conteneurs-et-kubernetes/"],["Développement d'Applications","/blog/fr/products/application-development"],["Développement durable","/blog/fr/topics/developpement-durable"],["DevOps et ingénierie SRE","/blog/fr/products/devops-sre"],["Gestion des API","/blog/fr/products/api-management"],["IA et Machine Learning","/blog/fr/products/ai-machine-learning"],["Infrastructure","/blog/fr/products/infrastructure"],["Maps et Géospatial","/blog/fr/topics/maps-geospatial"],["Modernisation d'Applications","/blog/fr/products/modernisation-dapplications/"],["Modernisation d'Infrastructure","/blog/fr/products/modernisation-dinfrastructure/"],["Networking","/blog/fr/products/networking"],["Productivité et Collaboration","/blog/fr/products/productivite-et-collaboration"],["SAP sur Google Cloud","/blog/fr/products/sap-google-cloud"],["Sécurité et Identité","/blog/fr/products/identity-security"],["Stockage et transfert de données","/blog/fr/products/storage-data-transfer"]]]],["Écosystème",null,[[["Responsables IT","/transform/fr"],["Industries",null,[[["Commerce","/blog/fr/topics/retail"],["Manufacturing","/blog/fr/topics/manufacturing"],["Médias et Divertissement","/blog/fr/products/media-entertainment"],["Santé","/blog/fr/topics/healthcare-life-sciences"],["Secteur Public","/blog/fr/topics/public-sector"],["Services Financiers","/blog/fr/topics/financial-services"],["Supply Chain","/blog/fr/topics/supply-chain/"],["Telecommunications","/blog/fr/topics/telecommunications"]]]],["Clients","/blog/fr/topics/clients/"],["Développeurs et professionnels","/blog/fr/topics/developers-practitioners"],["Formations et certifications","/blog/fr/topics/training-certifications"],["Google Cloud Next et Événements","/blog/fr/topics/evenements"],["Google Maps Platform","/blog/fr/products/maps-platform"],["Google Workspace","https://workspace.google.com/blog/fr"],["Inside Google Cloud","/blog/fr/topics/inside-google-cloud"],["Partenaires","/blog/fr/topics/partners"],["Start-ups et PME","/blog/fr/topics/startups"]]]],["Transformer avec Google Cloud","/transform/fr"]]]],["ja",[[["ソリューションとテクノロジー",null,[[["AI \u0026 機械学習","/blog/ja/products/ai-machine-learning"],["API 管理","/blog/ja/products/api-management"],["アプリケーション開発","/blog/ja/products/application-development"],["アプリケーション モダナイゼーション","/blog/ja/products/application-modernization"],["Chrome Enterprise","/blog/ja/products/chrome-enterprise"],["コンピューティング","/blog/ja/products/compute"],["Containers \u0026 Kubernetes","/blog/ja/products/containers-kubernetes"],["データ分析","/blog/ja/products/data-analytics"],["データベース","/blog/ja/products/databases"],["DevOps \u0026 SRE","/blog/ja/products/devops-sre"],["Maps \u0026 Geospatial","/blog/ja/products/maps-platform"],["セキュリティ",null,[[["セキュリティ \u0026 アイデンティティ","/blog/ja/products/identity-security"],["脅威インテリジェンス","/blog/ja/topics/threat-intelligence"]]]],["インフラストラクチャ","/blog/ja/products/infrastructure"],["インフラ モダナイゼーション","/blog/ja/products/infrastructure-modernization"],["ネットワーキング","/blog/ja/products/networking"],["生産性とコラボレーション","/blog/ja/products/productivity-collaboration"],["Google Cloud での SAP","/blog/ja/products/sap-google-cloud"],["ストレージとデータ転送","/blog/ja/products/storage-data-transfer"],["サステナビリティ","/blog/ja/topics/sustainability"]]]],["エコシステム",null,[[["ITリーダー","/transform/ja"],["業種",null,[[["金融サービス","/blog/ja/topics/financial-services"],["ヘルスケア、ライフ サイエンス","/blog/ja/topics/healthcare-life-sciences"],["製造","/blog/ja/topics/manufacturing"],["メディア、エンターテイメント","/blog/ja/products/media-entertainment"],["公共部門","/blog/ja/topics/public-sector"],["小売業","/blog/ja/topics/retail"],["サプライ チェーン","/blog/ja/topics/supply-chain-logistics"],["通信","/blog/ja/topics/telecommunications"]]]],["顧客事例","/blog/ja/topics/customers"],["パートナー","/blog/ja/topics/partners"],["スタートアップ \u0026 SMB","/blog/ja/topics/startups"],["トレーニングと認定","/blog/ja/topics/training-certifications"],["Inside Google Cloud","/blog/ja/topics/inside-google-cloud"],["Google Cloud Next と イベント","/blog/ja/topics/google-cloud-next"],["Google Maps Platform","/blog/ja/products/maps-platform"],["Google Workspace","https://workspace.google.com/blog/ja"]]]],["デベロッパー","/blog/ja/topics/developers-practitioners"],["Transform with Google Cloud","/transform/ja"]]]],["ko",[[["솔루션 및 기술",null,[[["AI 및 머신러닝","/blog/ko/products/ai-machine-learning"],["API 관리","/blog/ko/products/api-management"],["애플리케이션 개발","/blog/ko/products/application-development"],["애플리케이션 현대화","/blog/ko/products/application-modernization"],["Chrome Enterprise","/blog/products/chrome-enterprise"],["컴퓨팅","/blog/ko/products/compute"],["컨테이너 \u0026 Kubernetes","/blog/ko/products/containers-kubernetes"],["데이터 분석","/blog/ko/products/data-analytics"],["데이터베이스","/blog/ko/products/databases"],["DevOps 및 SRE","/blog/ko/products/devops-sre"],["Maps \u0026 Geospatial","/blog/ko/products/maps-platform"],["보안",null,[[["보안 \u0026 아이덴티티","/blog/ko/products/identity-security"],["위협 인텔리전스","/blog/ko/topics/threat-intelligence"]]]],["인프라","/blog/ko/products/infrastructure"],["Infrastructure Modernization","/blog/ko/products/infrastructure-modernization"],["네트워킹","/blog/ko/products/networking"],["생산성 및 공동작업","/blog/ko/products/productivity-collaboration"],["SAP on Google Cloud","/blog/ko/products/sap-google-cloud"],["스토리지 및 데이터 전송","/blog/ko/products/storage-data-transfer"],["지속가능성","/blog/ko/topics/sustainability"]]]],["에코시스템",null,[[["IT Leaders","/transform/ko"],["업종",null,[[["금융 서비스","/blog/ko/topics/financial-services"],["의료 및 생명과학","/blog/ko/topics/healthcare-life-sciences"],["제조업","/blog/ko/topics/manufacturing"],["미디어 및 엔터테인먼트","/blog/ko/products/media-entertainment"],["공공부문","/blog/ko/topics/public-sector"],["소매업","/blog/ko/topics/retail"],["공급망","/blog/topics/supply-chain-logistics"],["통신","/blog/ko/topics/telecommunications"]]]],["고객 사례","/blog/ko/topics/customers"],["파트너","/blog/ko/topics/partners"],["스타트업 \u0026 SMB","/blog/ko/topics/startups"],["교육 \u0026 인증","/blog/ko/topics/training-certifications"],["Inside Google Cloud","/blog/ko/topics/inside-google-cloud"],["Google Cloud Next 및 이벤트","/blog/ko/topics/google-cloud-next"],["Google Maps Platform","/blog/ko/products/maps-platform"],["Google Workspace","https://workspace.google.com/blog/ko"]]]],["개발 및 IT운영","/blog/ko/topics/developers-practitioners"],["Google Cloud와 함께 하는 디지털 혁신","/transform/ko"]]]]]],'cloud.google.com','https', null , false , null ,[[97969449,48897392,97848711,1714248,97535270,48830069,97442199,97953322,97496388,93778619,97894680,97656899,48554498,97785988,97969356,1706538,97863042,97933472,48489826,97442181,97496370,97656881,97785970],null,null,null,null,true],]; window.IJ_valuesCb && window.IJ_valuesCb();</script><script class="ds:0" nonce="7Hibp_PLMbjEvbm9bu7mWQ">AF_initDataCallback({key: 'ds:0', hash: '1', data:[["ScatterBrain: Unmasking the Shadow of PoisonPlug's Obfuscator","We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware.",[1738101600],"https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BA.max-2600x2600.png","https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator",[1738107345,596935000]],[["Mandiant "]],[null,"\u003cscript type\u003d\"application/ld+json\"\u003e{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"@id\":\"https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator\",\"headline\":\"ScatterBrain: Unmasking the Shadow of PoisonPlug\\u0027s Obfuscator\",\"description\":\"We been tracking multiple espionage operations conducted by China-nexus actors utilizing POISONPLUG.SHADOW malware.\",\"image\":\"https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BA.max-2600x2600.png\",\"author\":[{\"@type\":\"Person\",\"name\":\"Mandiant \",\"url\":\"\"}],\"datePublished\":\"2025-01-28\",\"publisher\":{\"@type\":\"Organization\",\"name\":\"Google Cloud\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://www.gstatic.com/devrel-devsite/prod/v8bb8fa0afe9a8c3a776ebeb25d421bb443344d789b3607754dfabea418b8c4be/cloud/images/cloud-logo.svg\"}},\"url\":\"https://cloud.google.com/blog/topics/threat-intelligence/scatterbrain-unmasking-poisonplug-obfuscator\",\"keywords\":[\"Threat Intelligence\"],\"timeRequired\":\"PT64M\"}\u003c/script\u003e"],["ScatterBrain: Unmasking the Shadow of PoisonPlug's Obfuscator"],null,null,[[null,null,[null,[null,"\u003cp\u003eWritten by: \u003cspan style\u003d\"vertical-align:baseline\"\u003eNino Isakovic\u003c/span\u003e\u003c/p\u003e\n\u003chr\u003e"]]],[null,null,[null,[null,"\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIntroduction\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSince 2022, Google Threat Intelligence Group (GTIG) has been tracking multiple cyber espionage operations conducted by China-nexus actors utilizing \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. These operations employ a custom obfuscating compiler that we refer to as \"\u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eScatterBrain\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e,\" facilitating attacks against various entities across Europe and the Asia Pacific (APAC) region. ScatterBrain appears to be a substantial evolution of ScatterBee, an obfuscating compiler \u003c/span\u003e\u003ca href\u003d\"https://www.pwc.co.uk/issues/cyber-security-services/research/chasing-shadows.html\" rel\u003d\"noopener\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"text-decoration:underline;vertical-align:baseline\"\u003epreviously analyzed by PWC\u003c/span\u003e\u003c/a\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGTIG assesses that POISONPLUG is an advanced modular backdoor used by multiple distinct, but likely related threat groups based in the PRC, however we assess that POISONPLUG.SHADOW usage appears to be further restricted to clusters associated with APT41.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGTIG currently tracks three known POISONPLUG variants:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.DEED\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,""],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1100x1100.jpg 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg 1667w"," 1060px,  1667px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig1.max-1700x1700.jpg"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW—often referred to as \"Shadowpad,\" a malware family name first introduced by Kaspersky—stands out due to its use of a custom obfuscating compiler specifically designed to evade detection and analysis. Its complexity is compounded by not only the extensive obfuscation mechanisms employed but also by the attackers' highly sophisticated threat tactics. These elements collectively make analysis exceptionally challenging and complicate efforts to identify, understand, and mitigate the associated threats it poses.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIn addressing these challenges, GTIG collaborates closely with the FLARE team to dissect and analyze POISONPLUG.SHADOW. This partnership utilizes state-of-the-art reverse engineering techniques and comprehensive threat intelligence capabilities required to mitigate the sophisticated threats posed by this threat actor. We remain dedicated to advancing methodologies and fostering innovation to adapt to and counteract the ever-evolving tactics of threat actors, ensuring the security of Google and our customers against sophisticated cyber espionage operations.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOverview\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIn this blog post, we present our in-depth analysis of the ScatterBrain obfuscator, which has led to the development of a \u003ca href\u003d\"https://github.com/mandiant/poisonplug-scatterbrain\" rel\u003d\"noopener\" target\u003d\"_blank\"\u003ecomplete stand-alone static deobfuscator library\u003c/a\u003e independent of any binary analysis frameworks. Our analysis is based solely on the obfuscated samples we have successfully recovered, as we do not possess the obfuscating compiler itself. Despite this limitation, we have been able to comprehensively infer every aspect of the obfuscator and the necessary requirements to break it. Our analysis further reveals that ScatterBrain is continuously evolving, with incremental changes identified over time, highlighting its ongoing development.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis publication begins by exploring the fundamental primitives of ScatterBrain, outlining all its components and the challenges they present for analysis. We then detail the steps required to subvert and remove each protection mechanism, culminating in our deobfuscator. Our library takes protected binaries generated by ScatterBrain as input and produces fully functional deobfuscated binaries as output.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBy detailing the inner workings of ScatterBrain and sharing our deobfuscator, we hope to provide valuable insights into developing effective countermeasures. Our blog post is intentionally exhaustive, drawing from our experience in dealing with obfuscation for clients, where we observed a significant lack of clarity in understanding modern obfuscation techniques. Similarly, analysts often struggle with understanding even relatively simplistic obfuscation methods primarily because standard binary analysis tooling is not designed to account for them. Therefore, our goal is to alleviate this burden and help enhance the collective understanding against commonly seen protection mechanisms.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor general questions about obfuscating compilers, \u003c/span\u003e\u003ca href\u003d\"https://cloud.google.com/blog/topics/threat-intelligence/lummac2-obfuscation-through-indirect-control-flow\"\u003e\u003cspan style\u003d\"text-decoration:underline;vertical-align:baseline\"\u003ewe refer to our previous work\u003c/span\u003e\u003c/a\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e on the topic, which provides an introduction and overview.\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eScatterBrain Obfuscator\u003c/span\u003e\u003c/h2\u003e\n\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIntroduction\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eScatterBrain is a sophisticated obfuscating compiler that integrates multiple operational modes and protection components to significantly complicate the analysis of the binaries it generates. Designed to render modern binary analysis frameworks and defender tools ineffective, ScatterBrain disrupts both static and dynamic analyses.\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eProtection Modes:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e ScatterBrain operates in three distinct modes, each determining the overall structure and intensity of the applied protections. These modes allow the compiler to adapt its obfuscation strategies based on the specific requirements of the attack.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eProtection Components: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe compiler employs key protection components that include the following:\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSelective or Full Control Flow Graph (CFG) Obfuscation:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e This technique restructures the program's control flow, making it very difficult to analyze and create detection rules for.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstruction Mutations:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e ScatterBrain alters instructions to obscure their true functionality without changing the program's behavior.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eComplete Import Protection:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e ScatterBrain employs a complete protection of a binary's import table, making it extremely difficult to understand how the binary interacts with the underlying operating system.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThese protection mechanisms collectively make it extremely challenging for analysts to deconstruct and understand the functionality of the obfuscated binaries. As a result, ScatterBrain poses a formidable obstacle for cybersecurity professionals attempting to dissect and mitigate the threats it generates.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eModes of Operation\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA mode refers to how ScatterBrain will transform a given binary into its obfuscated representation. It is distinct from the actual core obfuscation mechanisms themselves and is more about the overall strategy of applying protections. Our analysis further revealed a consistent pattern in applying various protection modes at specific stages of an attack chain:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSelective: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA group of individually selected functions are protected, leaving the remainder of the binary in its original state. Any import references within the selected functions are also obfuscated. This mode was observed to be used strictly for dropper samples of an attack chain.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eComplete: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe entirety of the code section and all imports are protected. This mode was applied solely to the plugins embedded within the main backdoor payload.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eComplete \"headerless\": \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis is an extension of the \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eComplete\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e mode with added data protections and the removal of the PE header. This mode was exclusively reserved for the final backdoor payload.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSelective\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe selective mode of protection allows users of the obfuscator to selectively target individual functions within the binary for protection. Protecting an individual function involves keeping the function at its original starting address (produced by the original compiler and linker) and substituting the first instruction with a jump to the obfuscated code. The generated obfuscations are stored linearly from this starting point up to a designated \"end marker\" that signifies the ending boundary of the applied protection. This entire range constitutes a protected function.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe disassembly of a call site to a protected function can take the following from:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003e.text:180001000 sub     rsp, 28h\r\n.text:180001004 mov     rcx, cs:g_Imagebase\r\n.text:18000100B call    PROTECTED_FUNCTION ; call to protected func\r\n.text:180001010 mov     ecx, eax \r\n.text:180001012 call    cs:ExitProcess\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 1: Disassembly of a call to a protected function\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe start of the protected function:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003e.text:180001039 PROTECTED_FUNCTION \r\n.text:180001039   jmp     loc_18000DF97 ; jmp into obfuscated code\r\n.text:180001039 sub_180001039 endp\r\n.text:000000018000103E db  48h ; H.     ; garbage data\r\n.text:000000018000103F db 0FFh\r\n.text:0000000180001040 db 0C1h\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 2: Disassembly inside of a protected function\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \"end marker\" consists of two sets of padding instructions, an \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eint3 \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction and a single \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003emulti-nop \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003eEND_MARKER:\r\n.text:18001A95C   CC CC CC CC CC CC CC CC CC CC 66 \r\n66 0F 1F 84 00 00 00 00 00\r\n.text:18001A95C int     3\r\n.text:18001A95D int     3\r\n.text:18001A95E int     3\r\n.text:18001A95F int     3\r\n.text:18001A960 int     3\r\n.text:18001A961 int     3\r\n.text:18001A962 int     3\r\n.text:18001A963 int     3\r\n.text:18001A964 int     3\r\n.text:18001A965 int     3\r\n.text:18001A966 db      66h, 66h   ; @NOTE: IDA doesn't disassemble properly\r\n.text:18001A966 nop     word ptr [rax+rax+00000000h]\r\n; -------------------------------------------------------------------------\r\n; next, original function\r\n.text:18001A970 ; [0000001F BYTES: COLLAPSED FUNCTION \r\n__security_check_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 3: Disassembly listing of an end marker\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eComplete\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe complete mode protects every function within the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.text\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e section of the binary, with all protections integrated directly into a single code section. There are no end markers to signify protected regions; instead, every function is uniformly protected, ensuring comprehensive coverage without additional sectioning.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis mode forces the need for some kind of deobfuscation tooling. Whereas selective mode only protects the selected functions and leaves everything else in its original state, this mode makes the output binary extremely difficult to analyze without accounting for the obfuscation.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eComplete Headerless\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis complete mode extends the complete approach to add further data obfuscations alongside the code protections. It is the most comprehensive mode of protection and was observed to be exclusively limited to the final payloads of an attack chain. It incorporates the following properties:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFull PE header of the protected binary is removed.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCustom loading logic (a loader) is introduced.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBecomes the entry point of the protected binary\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResponsible of ensuring the protected binary is functional\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIncludes the option of mapping the final payload within a separate memory region distinct from the initial memory region it was loaded in\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eMetadata is protected via hash-like integrity checks.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe metadata is utilized by the loader as part of its initialization sequence.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport protection will require relocation adjustments.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDone through an \"import fixup table\"\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe loader’s entry routine crudely merges with the original entry of the binary by inserting multiple \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstructions to bridge the two together. The following is what the entry point looks like after running our deobfuscator against a binary protected in headerless mode.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 4: Deobfuscated loader entry\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig4.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe loader's metadata is stored in the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.data\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e section of the protected binary. It is found via a memory scan that applies bitwise XOR operations against predefined constants. The use of these not only locates the metadata but also serves a dual purpose of verifying its integrity. By checking that the data matches expected patterns when XORed with these constants, the loader ensures that the metadata has not been altered or tampered with.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 5: Memory scan to identify the loader's metadata inside the .data section\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig5.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe metadata contains the following (in order):\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport fixup table\u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e(fully explained in the Import Protection section)\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIntegrity-hash constants\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRelative virtual address (RVA) of the\u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.data\u003c/code\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003esection\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOffset to the import fixup table from the start of the\u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.data\u003c/code\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003esection\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSize, in bytes, of the fixup table\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGlobal pointer to the memory address that the backdoor is at\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEncrypted and compressed data specific to the backdoor\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBackdoor config and plugins\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 6: Loader's metadata\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig6.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCore Protection Components\u003c/span\u003e\u003c/h3\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eInstruction Dispatcher\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003einstruction dispatcher\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e is the central protection component that transforms the natural control flow of a binary (or individual function) into scattered basic blocks that end with a unique dispatcher routine that dynamically guides the execution of the protected binary.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 7: Illustration of the control flow instruction dispatchers induce\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png 1379w"," 1060px,  1379px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig7.max-1400x1400.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach call to a dispatcher is immediately followed by a 32-bit encoded displacement positioned at what would normally be the return address for the call. The dispatcher decodes this displacement to calculate the destination target for the next group of instructions to execute. A protected binary can easily contain thousands or even tens of thousands of these dispatchers making manual analysis of them practically infeasible. Additionally, the dynamic dispatching and decoding logic employed by each dispatcher effectively disrupts CFG reconstruction methods used by all binary analysis frameworks.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe decoding logic is unique for each dispatcher and is carried out using a combination of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eadd\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003esub\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003exor\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eand\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eor\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions. The decoded offset value is then either subtracted from or added to the expected return address of the dispatcher call to determine the final destination address. This calculated address directs execution to the next block of instructions, which will similarly end with a dispatcher that uniquely decodes and jumps to subsequent instruction blocks, continuing this process iteratively to control the program flow.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe following screenshot illustrates what a dispatcher instance looks like when constructed in IDA Pro. Notice the scattered addresses present even within instruction dispatchers, which result from the obfuscator transforming fallthrough instructions—instructions that naturally follow the preceding instruction—into pairs of conditional branches that use opposite conditions. This ensures that one branch is always taken, effectively creating an unconditional jump. Additionally, a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003emov\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction that functions as a no-op is inserted to split these branches, further obscuring the control flow.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 8: Example of an instruction dispatcher and all of its components\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png 1132w"," 1060px,  1132px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig8.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe core logic for any dispatcher can be categorized into the following four phases:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003ePreservation of Execution Context\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach dispatcher selects a single working register (e.g., \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRSI\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e as depicted in the screenshot) during the obfuscation process. This register is used in conjunction with the stack to carry out the intended decoding operations and dispatch. \u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRFLAGS\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e register in turn is safeguarded by employing \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions before carrying out the decoding sequence.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRetrieval of Encoded Displacement\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach dispatcher retrieves a 32-bit encoded displacement located at the return address of its corresponding call instruction. This encoded displacement serves as the basis for determining the next destination address.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eDecoding Sequence\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach dispatcher employs a unique decoding sequence composed of the following arithmetic and logical instructions: \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003exor\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003esub\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eadd\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003emul\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eimul\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ediv\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eidiv\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eand\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eor\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003enot\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. This variability ensures that no two dispatchers operate identically, significantly increasing the complexity of the control flow.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eTermination and Dispatch\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction is strategically used to simultaneously signal the end of the dispatcher function and redirect the program's control flow to the previously calculated destination address.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIt is reasonable to infer that the obfuscator utilizes a template similar to the one illustrated in Figure 9 when applying its transformations to the original binary:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 9: Instruction dispatcher template\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png 1204w"," 1060px,  1204px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig9.max-1300x1300.png"],null,3]]],[null,null,[null,[null,"\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOpaque Predicates\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eScatterBrain uses a series of seemingly trivial opaque predicates (OP) that appear straightforward to analysts but significantly challenge contemporary binary analysis frameworks, especially when used collectively. These opaque predicates effectively disrupt static CFG recovery techniques not specifically designed to counter their logic. Additionally, they complicate symbolic execution approaches as well by inducing path explosions and hindering path prioritization. In the following sections, we will showcase a few examples produced by ScatterBrain.\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest\u003c/code\u003e OP\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis opaque predicate is constructed around the behavior of the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction when paired with an immediate zero value. Given that the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction effectively performs a bitwise AND operation, the obfuscator exploits the fact that any value bitwise AND-ed with zero always invariably results in zero.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eHere are some abstracted examples we can find in a protected binary—abstracted in the sense that all instructions are not guaranteed to follow one another directly; other forms of mutations can be between them as can instruction dispatchers.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003etest    bl, 0\r\njnp     loc_56C96             ; we never satisfy these conditions\r\n------------------------------\r\ntest    r8, 0\r\njo      near ptr loc_3CBC8\r\n------------------------------\r\ntest    r13, 0\r\njnp     near ptr loc_1A834\r\n------------------------------\r\ntest    eax, 0\r\njnz     near ptr loc_46806\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 10: Test opaque predicate examples\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo grasp the implementation logic of this opaque predicate, the semantics of the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction and its effects on the processor's flags register are required. The instruction can affect six different flags in the following manner:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eOverflow Flag (OF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Always cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eCarry Flag (CF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Always cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSign Flag (SF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Set if the most significant bit (MSB) of the result is set; otherwise cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eZero Flag (ZF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Set if the result is 0; otherwise cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eParity Flag (PF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Set if the number of set bits in the least significant byte (LSB) of the result is even; otherwise cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAuxiliary Carry Flag (AF):\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Undefined\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eApplying this understanding to the sequences produced by ScatterBrain, it is evident that the generated conditions can never be logically satisfied:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cdiv align\u003d\"left\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\u003ctable border\u003d\"1px\" cellpadding\u003d\"16px\" style\u003d\"border-collapse:collapse;margin-left:auto;margin-right:auto\"\u003e\u003ccolgroup\u003e\u003ccol\u003e\u003ccol\u003e\u003c/colgroup\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cstrong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSequence\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eCondition Description\u003c/strong\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest \u0026lt;reg\u0026gt;, 0; jo\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eOF\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eis always cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest \u0026lt;reg\u0026gt;, 0; jnae/jc/jb\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCF\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eis always cleared\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest \u0026lt;reg\u0026gt;, 0; js\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResulting value will always be zero; therefore, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eSF\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ecan never be set\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest \u0026lt;reg\u0026gt;, 0; jnp/jpo\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe number of bits in zero is always zero, which is an even number; therefore, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ePF\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ecan never be set\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etest \u0026lt;reg\u0026gt;, 0; jne/jnz\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResulting value will always be zero; therefore, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eZF\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ewill always be set\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eTable 1: Test opaque predicate understanding\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003ch5\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e OP\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe opaque predicate is designed to statically obscure the original immediate branch targets for conditional branch (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) instructions. Consider the following examples:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003etest    eax, eax\r\nja      loc_3BF9C\r\nja      loc_2D154 \r\n\r\ntest    r13, r13\r\njns     loc_3EA84\r\njns     loc_53AD9\r\n\r\ntest    eax, eax\r\njnz     loc_99C5\r\njnz     loc_121EC\r\n\r\ncmp     eax, FFFFFFFF\r\njz      loc_273EE\r\njz      loc_4C227\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 11: jcc opaque predicate examples\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe implementation is straightforward: each original \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction is duplicated with a bogus branch target. Since both \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstructions are functionally identical except for their respective branch destinations, we can determine with certainty that the first \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ein each pair is the original instruction. This original \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003edictates the correct branch target to follow when the respective condition is met, while the duplicated \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eserves to confuse analysis tools by introducing misleading branch paths.\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eStack-Based OP\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe stack-based opaque predicate is designed to check whether the current stack pointer (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ersp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) is below a predetermined immediate threshold—a condition that can never be true. It is consistently implemented by pairing the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecmp rsp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction with a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejb\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e (jump if below) condition immediately afterward.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003ecmp rsp, 0x8d6e\r\njb      near ptr unk_180009FDA\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 12: Stack-based opaque predicate example\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis technique inserts conditions that are always false, causing CFG algorithms to follow both branches and thereby disrupt their ability to accurately reconstruct the control flow.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport Protection\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe obfuscator implements a sophisticated import protection layer. This mechanism conceals the binary 's dependencies by transforming each original \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eor \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction directed at an import through a unique stub dispatcher routine that knows how to dynamically resolve and invoke the import in question.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 13: Illustration of all the components involved in the import protection\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png 1695w"," 1060px,  1695px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig13.max-1700x1700.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIt consists of the following components:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImport-specific encrypted\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003edata:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Each protected import is represented by a unique dispatcher stub and a scattered data structure that stores RVAs to both the encrypted dynamic-link library (DLL) and application programming interface (API) names. We refer to this structure as \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. Each dispatcher stub is hardcoded with a reference to its respective \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eDispatcher stub:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e This is an obfuscated stub that dynamically resolves and invokes the intended import. While every stub shares an identical template, each contains a unique hardcoded RVA that identifies and locates its corresponding \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eResolver routine:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Called from the dispatcher stub, this obfuscated routine resolves the import and returns it to the dispatcher, which facilitates the final call to the intended import. It begins by locating the encrypted DLL and API names based on the information in \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. After decrypting these names, the routine uses them to resolve the memory address of the API.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImport decryption routine:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Called from the resolver routine, this obfuscated routine is responsible for decrypting the DLL and API name blobs through a custom stream cipher implementation. It uses a hardcoded 32-bit salt that is unique per protected sample.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eFixup Table:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Present only in headerless mode, this is a relocation fixup table that the loader in headerless mode uses to correct all memory displacements to the following import protection components:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEncrypted DLL names\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEncrypted API names\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport dispatcher references\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDispatcher Stub\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe core of the import protection mechanism is the \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003edispatcher stub\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. Each stub is tailored to an individual import and consistently employs a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction to access its respective \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, which it passes as the only input to the resolver routine.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003epush rcx                  ; save RCX\r\nlea rcx, [rip+obf_imp_t]  ; fetch import-specific obf_imp_t\r\npush    rdx               ; save all other registers the stub uses\r\npush    r8\r\npush    r9\r\nsub     rsp, 28h\r\ncall    ObfImportResolver ; resolve the import and return it in RAX\r\nadd     rsp, 28h\r\npop     r9                ; restore all saved registers\r\npop     r8\r\npop     rdx\r\npop     rcx\r\njmp     rax               ; invoke resolved import\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 14: Deobfuscated import dispatcher stub\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach stub is obfuscated through the mutation mechanisms outlined earlier. This applies to the resolver and import decryption routines as well. The following is what the execution flow of a stub can look like. Note the scattered addresses that while presented sequentially are actually jumping all around the code segment due to the instruction dispatchers.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003e0x01123a   call InstructionDispatcher_TargetTo_11552 \r\n0x011552   push rcx\r\n0x011553   call InstructionDispatcher_TargetTo_5618\r\n0x005618   lea rcx, [rip+0x33b5b]                    ; fetch obf_imp_t\r\n0x00561f   call InstructionDispatcher_TargetTo_f00c\r\n0x00f00c   call InstructionDispatcher_TargetTo_191b5\r\n0x0191b5   call InstructionDispatcher_TargetTo_1705a\r\n0x01705a   push rdx\r\n0x01705b   call InstructionDispatcher_TargetTo_05b4\r\n0x0105b4   push r8\r\n0x0105b6   call InstructionDispatcher_TargetTo_f027\r\n0x00f027   push r9\r\n0x00f029   call InstructionDispatcher_TargetTo_18294\r\n0x018294   test eax, 0\r\n0x01829a   jo 0xf33c\r\n0x00f77b   call InstructionDispatcher_TargetTo_e817\r\n0x00e817   sub rsp, 0x28\r\n0x00e81b   call InstructionDispatcher_TargetTo_a556\r\n0x00a556   call 0x6afa (ObfImportResolver)\r\n0x00a55b   call InstructionDispatcher_TargetTo_19592\r\n0x019592   test ah, 0\r\n0x019595   call InstructionDispatcher_TargetTo_a739\r\n0x00a739   js 0x1935\r\n0x00a73b   call InstructionDispatcher_TargetTo_6eaa\r\n0x006eaa   add rsp, 0x28\r\n0x006eae   call InstructionDispatcher_TargetTo_6257\r\n0x006257   pop r9\r\n0x006259   call InstructionDispatcher_TargetTo_66d6\r\n0x0066d6   pop r8\r\n0x0066d8   call InstructionDispatcher_TargetTo_1a3cb\r\n0x01a3cb   pop rdx\r\n0x01a3cc   call InstructionDispatcher_TargetTo_67ab\r\n0x0067ab   pop rcx\r\n0x0067ac   call InstructionDispatcher_TargetTo_6911\r\n0x006911   jmp rax\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 15: Obfuscated import dispatcher stub\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResolver Logic\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eis the central data structure that contains the relevant information to resolve each import. It has the following form:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003estruct obf_imp_t {    // sizeof\u003d0x18\r\n    uint32_t CryptDllNameRVA;    // NOTE: will be 64-bits, due to padding\r\n    uint32_t CryptAPINameRVA;    // NOTE: will be 64-bits, due to padding\r\n    uint64_t ResolvedImportAPI;  // Where the resolved address is stored\r\n};\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 16: obf_imp_t in its original C struct source form\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIt is processed by the resolver routine, which uses the embedded RVAs to \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003elocate the encrypted DLL and API names, decrypting each in turn. After decrypting each name blob, it uses\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eLoadLibraryA\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eto ensure the DLL dependency is loaded in memory and leverages\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eGetProcAddress\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eto retrieve the address of the import.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFully decompiled \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eObfImportResolver\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 17: Fully decompiled import resolver routine\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig17.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport Encryption Logic\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe import decryption logic is implemented using a Linear Congruential Generator (LCG) algorithm to generate a pseudo-random key stream, which is then used in a XOR-based stream cipher for decryption. It operates on the following formula:\u003c/span\u003e\u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003eX\u003c/span\u003e\u003csub\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003en\u003c/span\u003e\u003c/sub\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003e + 1 \u003d (a • \u003c/span\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003eX\u003c/span\u003e\u003csub\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003en\u003c/span\u003e\u003c/sub\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:sub\"\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003e+ c) mod \u003c/span\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003e2\u003c/span\u003e\u003csup\u003e\u003cspan style\u003d\"font-style:italic;vertical-align:baseline\"\u003e32\u003c/span\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ewhere:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ea\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eis always hardcoded to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e17\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eand functions as the multiplier\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ec\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eis a unique 32-bit constant determined by the encryption context and is unique per-protected sample\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe refer to it as the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eimp_decrypt_const\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003emod\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e 2\u003csup\u003e32\u003c/sup\u003e confines the sequence values to a 32-bit range\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe decryption logic initializes with a value from the encrypted data and iteratively generates new values using the outlined LCG formula. Each iteration produces a byte derived from the calculated value, which is then XOR'ed with the corresponding encrypted byte. This process continues byte-by-byte until it reaches a termination condition.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA fully recovered Python implementation for the decryption logic is provided in Figure 18.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 18: Complete Python implementation of the import string decryption routine\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png 1227w"," 1060px,  1227px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig18.max-1300x1300.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport Fixup Table\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe import relocation fixup table is a fixed-size array composed of two 32-bit RVA entries. The first RVA represents the memory displacement of where the data is referenced from. The second RVA points to the actual data in question. The entries in the fixup table can be categorized into three distinct types, each corresponding to a specific import component:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEncrypted DLL names\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEncrypted API names\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport dispatcher references\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 19: Illustration of the import fixup table\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png 1273w"," 1060px,  1273px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig19.max-1300x1300.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe location of the fixup table is determined by the loader's metadata, which specifies an offset from the start of the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.data\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e section to the start of the table. During initialization, the loader is responsible for applying the relocation fixups for each entry in the table.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 20: Loader metadata that shows the Import fixup table entries and metadata used to find it\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png 1331w"," 1060px,  1331px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig20.max-1400x1400.png"],null,3]]],[null,null,[null,[null,"\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRecovery\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEffective recovery from an obfuscated binary necessitates a thorough understanding of the protection mechanisms employed. While deobfuscation often benefits from working with an intermediate representation (IR) rather than the raw disassembly—an IR provides more granular control in undoing transformations—this obfuscator preserves the original compiled code, merely enveloping it with additional protection layers. Given this context, our deobfuscation strategy focuses on stripping away the obfuscator's transformations from the disassembly to reveal the original instructions and data. This is achieved through a series of hierarchical phases, where each subsequent phase builds upon the previous one to ensure comprehensive deobfuscation.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe categorize this approach into three distinct categories that we eventually integrate:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eCFG Recovery\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRestoring the natural control flow by removing obfuscation artifacts at the instruction and  basic block levels. This involves two phases:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAccounting for instruction dispatchers:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Addressing the core of control flow protection that obscure the execution flow\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eFunction identification and\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003erecovery: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCataloging scattered instructions and reassembling them into their original function counterparts\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImport Recovery\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eOriginal Import Table:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e The goal is to reconstruct the original import table, ensuring that all necessary library and function references are accurately restored.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eBinary Rewriting\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eGenerating Deobfuscated Executables:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e This process entails creating a new, deobfuscated executable that maintains the original functionality while removing ScatterBrain's modifications.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGiven the complexity of each category, we concentrate on the core aspects necessary to break the obfuscator by providing a guided walkthrough of our deobfuscator's source code and highlighting the essential logic required to reverse these transformations. This step-by-step examination demonstrates how each obfuscation technique is methodically undone, ultimately restoring the binary's original structure.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOur directory structure reflects this organized approach:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003e+---helpers\r\n|   |    emu64.py\r\n|   |    pefile_utils.py\r\n|   |--- x86disasm.py\r\n|\r\n\\---recover\r\n    |    recover_cfg.py\r\n    |    recover_core.py\r\n    |    recover_dispatchers.py\r\n    |    recover_functions.py\r\n    |    recover_imports.py\r\n    |--- recover_output64.py\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 21: Directory structure of our deobfuscator library\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis comprehensive recovery process not only restores the binaries to their original state but also equips analysts with the tools and knowledge necessary to combat similar obfuscation techniques in the future.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCFG Recovery\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe primary obstacle disrupting the natural control flow graph is the use of \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003einstruction dispatchers\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. Eliminating these dispatchers is our first priority in obtaining the CFG. Afterward, we need to reorganize the scattered instructions back into their original function representations—a problem known as function identification, which is notoriously difficult to generalize. Therefore, we approach it using our specific knowledge about the obfuscator.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eLinearizing the Scattered CFG\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOur initial step in recovering the original CFG is to eliminate the scattering effect induced by instruction dispatchers. We will transform all dispatcher call instructions into direct branches to their resolved targets. This transformation linearizes the execution flow, making it straightforward to statically pursue the second phase of our CFG recovery. This will be implemented via brute-force scanning, static parsing, emulation, and instruction patching.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eFunction Identification and Recovery\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe leverage a recursive descent algorithm that employs a depth-first search (DFS) strategy applied to known entry points of code, attempting to exhaust all code paths by \"single-stepping\" one instruction at a time. We add additional logic to the processing of each instruction in the form of \"mutation rules\" that stipulate how each individual instruction needs to be processed. These rules aid in stripping away the obfuscator's code from the original.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRemoving Instruction Dispatchers\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEliminating instruction dispatchers involves identifying each dispatcher location and its corresponding dispatch target. Recall that the target is a uniquely encoded 32-bit displacement located at the return address of the dispatcher call. To remove instruction dispatchers, it is essential to first understand how to accurately identify them. We begin by categorizing the defining properties of individual instruction dispatchers:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eTarget of a Near Call\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDispatchers are always the destination of a near \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction, represented by the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eE8\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e opcode followed by a 32-bit displacement.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eReferences Encoded 32-Bit Displacement at Return Address\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDispatchers reference the encoded 32-bit displacement located at the return address on the stack by performing a 32-bit read from the stack pointer. This displacement is essential for determining the next execution target.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003ePairing of \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eand \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstructions to Safeguard Decoding\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDispatchers use a pair of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions to preserve the state of the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRFLAGS\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e register during the decoding process. This ensures that the dispatcher does not alter the original execution context, maintaining the integrity of register contents.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eEnd with a\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e \u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstruction\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach dispatcher concludes with a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction, which not only ends the dispatcher function but also redirects control to the next set of instructions, effectively continuing the execution flow.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eLeveraging the aforementioned categorizations, we implement the following approach to identify and remove instruction dispatchers:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eBrute-Force Scanner for Near Call Locations\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDevelop a scanner that searches for all near \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions within the code section of the protected binary. This scanner generates a huge array of potential call locations that may serve as dispatchers.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImplementation of a Fingerprint Routine\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe brute-force scan yields a large number of false positives, requiring an efficient method to filter them. While emulation can filter out false positives, it is computationally expensive to do it for the brute-force results.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIntroduce a shallow fingerprinting routine that traverses the disassembly of each candidate to identify key dispatcher characteristics, such as the presence of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e sequences. This significantly improves performance by eliminating most false positives before concretely verifying them through emulation.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eEmulation of Targets to Recover Destinations\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEmulate execution starting from each verified call site to accurately recover the actual dispatch targets. Emulating from the call site ensures that the emulator processes the encoded offset data at the return address, abstracting away the specific decoding logic employed by each dispatcher.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA successful emulation also serves as the final verification step to confirm that we have identified a dispatcher.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIdentification of Dispatch Targets via \u003c/strong\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eret\u003c/strong\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e Instructions\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUtilize the terminating \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction to accurately identify the dispatch target within the binary.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction is a definitive marker indicating the end of a dispatcher function and the point at which control is redirected, making it a reliable indicator for target identification.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ol\u003e\n\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBrute-Force Scanner\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe following Python code implements the brute-force scanner, which performs a comprehensive byte signature scan within the code segment of a protected binary. The scanner systematically identifies all potential \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction locations by scanning for the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0xE8\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e opcode associated with near \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions. The identified addresses are then stored for subsequent analysis and verification.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 22: Python implementation of the brute-force scanner\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig22.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFingerprinting Dispatchers\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe fingerprinting routine leverages the unique characteristics of instruction dispatchers, as detailed in the Instruction Dispatchers section, to statically identify potential dispatcher locations within a protected binary. This identification process utilizes the results from the prior brute-force scan. For each address in this array, the routine disassembles the code and examines the resulting disassembly listing to determine if it matches known dispatcher signatures.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis method is not intended to guarantee 100% accuracy, but rather serve as a cost-effective approach to identifying call locations with a high likelihood of being instruction dispatchers. Subsequent emulation will be employed to confirm these identifications.\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSuccessful Decoding of a \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstruction\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe identified location must successfully decode to a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction. Dispatchers are always invoked via a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction. Additionally, dispatchers utilize the return address from the call site to locate their encoded 32-bit displacement.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAbsence of Subsequent \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstructions\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDispatchers must not contain any \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions within their disassembly listing. The presence of any \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions within a presumed dispatcher range immediately disqualifies the call location as a dispatcher candidate.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAbsence of Privileged Instructions and Indirect Control Transfers\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSimilarly to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions, the dispatcher cannot include privileged instructions or indirect unconditional \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmps\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. Any presence of any such instructions invalidates the call location.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eDetection of \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eand \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eGuard Sequences\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe dispatcher must contain \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epushfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epopfq\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions to safeguard the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRFLAGS\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e register during decoding. These sequences are unique to dispatchers and suffice for a generic identification without worrying about the differences that arise between how the decoding takes place.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFigure 23 is the fingerprint verification routine that incorporates all the aforementioned characteristics and validation checks given a potential call location:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 23: The dispatch fingerprint routine\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png 1074w"," 1060px,  1074px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig23.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEmulating Dispatchers to Resolve Destination Targets\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter filtering potential dispatchers using the fingerprinting routine, the next step is to emulate them in order to recover their destination targets.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 24: Emulation sequence used to recover dispatcher destination targets\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png 1066w"," 1060px,  1066px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig24.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe Python code in Figure 24 performs this logic and operates as follows:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInitialization of the Emulator\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCreates the core engine for simulating execution (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eEmulateIntel64\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), maps the protected binary image (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eimgbuffer\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) into the emulator's memory space, maps the Thread Environment Block (TEB) as well to simulate a realistic Windows execution environment, and creates an initial snapshot to facilitate fast resets before each emulation run without needing to reinitialize the entire emulator each time.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eMAX_DISPATCHER_RANGE\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e specifies the maximum number of instructions to emulate for each dispatcher. The value 45 is chosen arbitrarily, sufficient given the limited instruction count in dispatchers even with the added mutations.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etry\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e/\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eexcept\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e block is used to handle any exceptions during emulation. It is assumed that exceptions result from false positives among the potential dispatchers identified earlier and can be safely ignored.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eEmulating Each Potential Dispatcher\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor each potential dispatcher address (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall_dispatch_ea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), the emulator's context is restored to the initial snapshot. The program counter (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eemu.pc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) is set to the address of each dispatcher. \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eemu.stepi()\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e executes one instruction at the current program counter, after which the instruction is analyzed to determine whether we have finished.\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIf the instruction is a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, the emulation has reached the dispatch point.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe dispatch target address is read from the stack using \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eemu.parse_u64(emu.rsp)\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe results are captured by \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.dispatchers_to_target\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, which maps the dispatcher address to the dispatch target. The dispatcher address is additionally stored in the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.dispatcher_locs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e lookup cache.\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ebreak\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e statement exits the inner loop, proceeding to the next dispatcher.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePatching and Linearization\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter collecting and verifying every captured instruction dispatcher, the final step is to replace each call location with a direct branch to its respective destination target. Since both near \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions occupy 5 bytes in size, this replacement can be seamlessly performed by merely patching the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction over the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 25: Patching sequence to transform instruction dispatcher calls to unconditional jmps to their destination targets\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig25.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe utilize the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003edispatchers_to_target\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e map, established in the previous section, which associates each dispatcher call location with its corresponding destination target. By iterating through this map, we identify each dispatcher call location and replace the original \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction with a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. This substitution redirects the execution flow directly to the intended target addresses.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis removal is pivotal to our deobfuscation strategy as it removes the intended dynamic dispatch element that instruction dispatchers were designed to provide. Although the code is still scattered throughout the code segment, the execution flow is now statically deterministic, making it immediately apparent which instruction leads to the next one.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWhen we compare these results to the initial screenshot from the Instruction Dispatcher section, the blocks still appear scattered. However, their execution flow has been linearized. This progress allows us to move forward to the second phase of our CFG recovery.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 26: Linearized instruction dispatcher control flow\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png 1245w"," 1060px,  1245px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig26.max-1300x1300.png"],null,3]]],[null,null,[null,[null,"\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFunction Identification and Recovery\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBy eliminating the effects of instruction dispatchers, we have linearized the execution flow. The next step involves assimilating the dispersed code and leveraging the linearized control flow to reconstruct the original functions that comprised the unprotected binary. This recovery phase involves several stages, including raw instruction recovery, normalization, and the construction of the final CFG.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFunction identification and recovery is encapsulated in the following two abstractions:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRecovered instruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredInstr\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e): The fundamental unit for representing individual instructions recovered from an obfuscated binary. Each instance encapsulates not only the raw instruction data but also metadata essential for relocation, normalization, and analysis within the CFG recovery process.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRecovered function\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredFunc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e): The end result of successfully recovering an individual function from an obfuscated binary. It aggregates multiple \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredInstr\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instances, representing the sequence of instructions that constitute the unprotected function. The complete CFG recovery process results in an array of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredFunc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instances, each corresponding to a distinct function within the binary. We will utilize these results in the final Building Relocations in Deobfuscated Binaries section to produce fully deobfuscated binaries.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe do not utilize a basic block abstraction for our recovery approach given the following reasons. Properly abstracting basic blocks presupposes complete CFG recovery, which introduces unnecessary complexity and overhead for our purposes. Instead, it is simpler and more efficient to conceptualize a function as an aggregation of individual instructions rather than a collection of basic blocks in this particular deobfuscation context.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 27: RecoveredInstr type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png 1190w"," 1060px,  1190px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig27.max-1200x1200.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 28: RecoveredFunc type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png 1144w"," 1060px,  1144px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig28.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDFS Rule-Guided Stepping Introduction\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe opted for a recursive-depth algorithm given the following reasons:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eNatural fit for code traversal:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e DFS allows us to infer function boundaries based solely on the flow of execution. It mirrors the way functions call other functions, making it intuitive to implement and reason about when reconstructing function boundaries. It also simplifies following the flow of loops and conditional branches.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eGuaranteed execution paths: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe concentrate on code that is definitely executed. Given we have at least one known entry point into the obfuscated code, we know execution must pass through it in order to reach other parts of the code. While other parts of the code may be more indirectly invoked, this entry point serves as a foundational starting point.\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003eBy recursively exploring from this known entry, we will almost certainly encounter and identify virtually all code paths and functions during our traversal.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAdapts to instruction mutations:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e We tailor the logic of the traversal with callbacks or \"rules\" that stipulate how we process each individual instruction. This helps us account for known instruction mutations and aids in stripping away the obfuscator's code.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe core data structures involved in this process are the following: \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGResult\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eand \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRuleHandler\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGResult\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: Container for the results of the CFG recovery process. It aggregates all pertinent information required to represent the CFG of a function within the binary, which it primarily consumes from \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: Maintains the state throughout the CFG recovery process, particularly during the controlled-step traversal. It encapsulates all necessary information to manage the traversal state, track progress, and store intermediate results.\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRecovered cache:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Stores instructions that have been recovered for a protected function without any additional cleanup or verification. This initial collection is essential for preserving the raw state of the instructions as they exist within the obfuscated binary before any normalization or validation processes are applied after. It is always the first pass of recovery.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eNormalized cache:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e The final pass in the CFG recovery process. It transforms the raw instructions stored in the recovered cache into a fully normalized CFG by removing all obfuscator-introduced instructions and ensuring the creation of valid, coherent functions.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eExploration stack:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Manages the set of instruction addresses that are pending exploration during the DFS traversal for a protected function. It determines the order in which instructions are processed and utilizes a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003evisited\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e set to ensure that each instruction is processed only once.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eObfuscator backbone:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e A mapping to preserve essential control flow links introduced by the obfuscator\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRuleHandler\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eMutation rules are merely callbacks that adhere to a specific function signature and are invoked during each instruction step of the CFG recovery process. They take as input the current protected binary, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, and the current step-in instruction. Each rule contains specific logic designed to detect particular types of instruction characteristics introduced by the obfuscator. Based on the detection of these characteristics, the rules determine how the traversal should proceed. For instance, a rule might decide to continue traversal, skip certain instructions, or halt the process based on the nature of the mutation.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 29: CFGResult type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png 939w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png 939w"," 939px,  939px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig29.max-1000x1000.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 30: CFGStepState type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png 1200w"," 1060px,  1200px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig30.max-1200x1200.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 31: RuleHandler type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig31.max-900x900.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe following figure is an example of a rule that is used to detect the patched instruction dispatchers we introduced in the previous section and differentiating them from standard \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstructions:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 32: RuleHandler example that identifies patched instruction dispatchers and differentiates them from standard jmp instructions\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig32.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDFS Rule-Guided Stepping Implementation\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe remaining component is a routine that orchestrates the CFG recovery process for a given function address within the protected binary. It leverages the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e to manage the DFS traversal and applies mutation rules to decode and recover instructions systematically. The result will be an aggregate of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredInstr\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstances that constitute the first pass of raw recovery:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 33: Flow chart of our DFS rule-guided stepping algorithm\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig33.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe following Python code directly implements the algorithm outlined in Figure 33. It initializes the CFG stepping state and commences a DFS traversal starting from the function's entry address. During each step of the traversal, the current instruction address is retrieved from the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eto_explore\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e exploration stack and checked against the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003evisited\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eset to prevent redundant processing. The instruction at the current address is then decoded, and a series of mutation rules are applied to handle any obfuscator-induced instruction modifications. Based on the outcomes of these rules, the traversal may continue, skip certain instructions, or halt entirely.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRecovered instructions are appended to the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erecovered\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ecache, and their corresponding mappings are updated within the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGStepState\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. The \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eto_explore\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e stack is subsequently updated with the address of the next sequential instruction to ensure systematic traversal. This iterative process continues until all relevant instructions have been explored, culminating in a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGResult\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e that encapsulates the fully recovered CFG.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 34: DFS rule-guided stepping algorithm Python implementation\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png 1066w"," 1060px,  1066px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig34.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch5\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eNormalizing the Flow\u003c/span\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWith the raw instructions successfully recovered, the next step is to normalize the control flow. While the raw recovery process ensures that all original instructions are captured, these instructions alone do not form a cohesive and orderly function. To achieve a streamlined control flow, we must filter and refine the recovered instructions—a process we refer to as normalization. This stage involves several key tasks:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdating branch targets:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Once all of the obfuscator-introduced code (instruction dispatchers and mutations) are fully removed, all branch instructions must be redirected to their correct destinations. The scattering effect introduced by obfuscation often leaves branches pointing to unrelated code segments.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eMerging overlapping basic blocks:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Contrary to the idea of a basic block as a strictly single-entry, single-exit structure, compilers can produce code in which one basic block begins within another. This overlapping of basic blocks commonly appears in loop structures. As a result, these overlaps must be resolved to ensure a coherent CFG.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eProper function boundary instruction:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e Each function must begin and end at well-defined boundaries within the binary's memory space. Correctly identifying and enforcing these boundaries is essential for accurate CFG representation and subsequent analysis.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch6\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSimplifying with Synthetic Boundary Jumps\u003c/span\u003e\u003c/h6\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRather than relying on traditional basic block abstractions—which can impose unnecessary overhead—we employ synthetic boundary jumps to simplify CFG normalization. These artificial \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instructions link otherwise disjointed instructions, allowing us to avoid splitting overlapping blocks and ensuring that each function concludes at a proper boundary instruction. This approach also streamlines our binary rewriting process when reconstructing the recovered functions into the final deobfuscated output binary.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eMerging overlapping basic blocks and ensuring functions have proper boundary instructions amount to the same problem—determining which scattered instructions should be linked together. To illustrate this, we will examine how synthetic jumps effectively resolve this issue by ensuring that functions conclude with the correct boundary instructions. The exact same approach applies to merging basic blocks together.\u003c/span\u003e\u003c/p\u003e\n\u003ch6\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSynthetic Boundary Jumps to Ensure Function Boundaries\u003c/span\u003e\u003c/h6\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eConsider an example where we have successfully recovered a function using our DFS-based rule-guided approach. Inspecting the recovered instructions in the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCFGState \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ereveals a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003emov\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction as the final operation. If we were to reconstruct this function in memory as-is, the absence of a subsequent fallthrough instruction would compromise the function's logic.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 35: Example of a raw recovery that does not end with a natural function boundary instruction\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig35.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo address this, we introduce a synthetic jump whenever the last recovered instruction is not a natural function boundary (e.g., \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eret\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eint3\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e).\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 36: Simple Python routine that identifies function boundary instructions\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig36.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe determine the fallthrough address, and if it points to an obfuscator-introduced instruction, we continue forward until reaching the first regular instruction. We call this traversal \"walking the obfuscator's backbone\":\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 37: Python routine that implements walking the obfuscator's backbone logic\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig37.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe then link these points with a synthetic jump. The synthetic jump inherits the original address as metadata, effectively indicating which instruction it is logically connected to.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 38: Example of adding a synthetic boundary jmp to create a natural function boundary\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig38.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003ch6\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUpdating Branch Targets\u003c/span\u003e\u003c/h6\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter normalizing the control flow, adjusting branch targets becomes a straightforward process. Each branch instruction in the recovered code may still point to obfuscator-introduced instructions rather than the intended destinations. By iterating through the\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003enormalized_flow\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ecache (generated in the next section), we identify branching instructions and verify their targets using the\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ewalk_backbone\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eroutine. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis ensures that all branch targets are redirected away from the obfuscator's artifacts and correctly aligned with the intended execution paths. Notice we can ignore \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstructions given that any non-dispatcher \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction is guaranteed to always be legitimate and never part of the obfuscator's protection. These will, however, need to be updated during the final relocation phase outlined in the Building Relocations in Deobfuscated Binaries section. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOnce recalculated, we reassemble and decode the instructions with updated displacements, preserving both correctness and consistency.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 39: Python routine responsible for updating all branch targets\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig39.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch6\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePutting It All Together\u003c/span\u003e\u003c/h6\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePutting it all together, we developed the following algorithm that builds upon the previously recovered instructions, ensuring that each instruction, branch, and block is properly connected, resulting in a completely recovered and deobfuscated CFG for an entire protected binary. We utilize the recovered cache to construct a new, normalized cache. The algorithm employs the following steps:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIterate Over All Recovered Instructions\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTraverse all recovered instructions produced from our DFS-based stepping approach.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAdd Instruction to Normalized Cache\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor each instruction, add it to the normalized cache, which captures the results of the normalization pass.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIdentify Boundary Instructions\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDetermine whether the current instruction is a boundary instruction.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIf it is a boundary instruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, skip further processing of this instruction and continue to the next one (return to Step 1).\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eCalculate Expected Fallthrough Instruction\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDetermine the expected fallthrough instruction by identifying the sequential instruction that follows the current one in memory.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eVerify Fallthrough Instruction\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCompare the calculated fallthrough instruction with the next instruction in the recovered cache.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIf the fallthrough instruction is not the next sequential instruction in memory,\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003echeck whether it's a recovered instruction we already normalized:\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIf it is, add a synthetic jump to link the two together in the normalized cache.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIf it is not, obtain the connecting fallthrough instruction from the recovery cache and append it to the normalized cache.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIf the fallthrough instruction matches the next instruction in the recovered cache\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDo nothing, as the recovered instruction already correctly points to the fallthrough. Proceed to Step 6.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eHandle Final Instruction\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCheck if the current instruction is the final instruction in the recovered cache.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIf it is the final instruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAdd a final synthetic boundary jump, because if we reach this stage, we failed the check in Step 3.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eContinue iteration, which will cause the loop to exit.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIf it is not the final instruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eContinue iteration as normal (return to Step 1).\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003c/ol\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 40: Flow chart of our normalization algorithm\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png 1640w"," 1060px,  1640px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig40.max-1700x1700.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe Python code in Figure 41 directly implements these normalization steps. It iterates over the recovered instructions and adds them to a normalized cache (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003enormalized_flow\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), creates a linear mapping, and identifies where synthetic jumps are required. When a branch target points to obfuscator-injected code, it walks the backbone (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ewalk_backbone\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) to find the next legitimate instruction. If the end of a function is reached without a natural boundary, a synthetic jump is created to maintain proper continuity. After the completion of the iteration, every branch target is updated (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eupdate_branch_targets\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), as illustrated in the previous section, to ensure that each instruction is correctly linked, resulting in a fully normalized CFG:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 41: Python implementation of our normalization algorithm\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png 1062w"," 1060px,  1062px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig41.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eObserving the Results\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter applying our two primary passes, we have nearly eliminated all of the protection mechanisms. Although import protection remains to be addressed, our approach effectively transforms an incomprehensible mess into a perfectly recovered CFG.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor example, Figure 42 and Figure 43 illustrate the before and after of a critical function within the backdoor payload, which is a component of its plugin manager system. Through additional analysis of the output, we can identify functionalities that would have been impossible to delineate, much less in such detail, without our deobfuscation process.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 42: Original obfuscated shadow::PluginProtocolCreateAndConfigure routine\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png 1063w"," 1060px,  1063px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig42.max-1100x1100.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 43: Completely deobfuscated and functional shadow::PluginProtocolCreateAndConfigure routine\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig43.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport Recovery\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRecovering and restoring the original import table revolves around identifying which import location is associated with which import dispatcher stub. From the stub dispatcher, we can parse the respective \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ereference in order to determine the protected import that it represents.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe pursue the following logic:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIdentify each valid call/jmp location associated to an import\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe memory displacement for these will point to the respective dispatcher stub.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor HEADERLESS mode, we need to first resolve the fixup table to ensure the displacement points to a valid dispatcher stub.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eFor each valid location traverse the dispatcher stub to extract the obf_imp_t\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003econtains the RVAs to the encrypted DLL and API names.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImplement the string decryption logic\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe need to reimplement the decryption logic in order to recover the DLL and API names.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis was already done in the initial Import Protection section.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe encapsulate the recovery of imports with the following \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredImport\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003edata structure:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 44: RecoveredImport type definition\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig44.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredImport\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eserves as the result produced for each import that we recover. It contains all the relevant data that we will use to rebuild the original import table when producing the deobfuscated image.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eLocate Protected Import CALL and JMP Sites\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eEach protected import location will be reflected as either an indirect near call (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eFF/2\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) or an indirect near jmp (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eFF/4\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e):\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 45: Disassembly of import calls and jmps representation\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png 373w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png 373w"," 373px,  373px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig45.max-400x400.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIndirect near calls and jmps fall under the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eFF \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003egroup opcode where the \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eReg \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003efield within the \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eModR/M\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e byte identifies the specific operation for the group:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e/2\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: corresponds to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCALL r/m64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e/4\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: corresponds to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eJMP r/m64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTaking an indirect near call as an example and breaking it down looks like the following:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eFF\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: group opcode.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e15\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eModR/M\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e byte specifying \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCALL r/m64\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e with RIP-relative addressing.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e15 \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eis encoded in binary as \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e00010101\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eMod \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e(bits 6-7):  \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e00\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIndicates either a direct RIP-relative displacement or memory addressing with no displacement.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eReg \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e(bits 3-5): \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e010\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIdentifies the call operation for the group\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:square;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eR/M\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e (bits 0-2): \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e101\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIn 64-bit mode with \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eMod \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e00\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eand\u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e R/M\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e101\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, this indicates RIP-relative addressing.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e\u0026lt;32-bit displacement\u0026gt;\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: added to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRIP\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eto compute the absolute address.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo find each protected import location and their associated dispatcher stubs we implement a trivial brute force scanner that locates all potential indirect near call/jmps via their first two opcodes.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 46: Brute-force scanner to locate all possible import locations\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig46.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe provided code scans the code section of a protected binary to identify and record all locations with opcode patterns associated with indirect call and jmp instructions. This is the first step we take, upon which we apply additional verifications to guarantee it is a valid import site.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResolving the Import Fixup Table\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe have to resolve the fixup table when we recover imports for the HEADERLESS protection in order to identify which import location is associated with which dispatcher. The memory displacement at the protected import site will be paired with its resolved location inside the table. We use this displacement as a lookup into the table to find its resolved location.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eLet's take a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction to a particular import as an example.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 47: Example of a jmp import instruction including its entry in the import fixup table and the associated dispatcher stub\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig47.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction's displacement references the memory location \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x63A88\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, which points to garbage data. When we inspect the entry for this import in the fixup table using the memory displacement, we can identify the location of the dispatcher stub associated with this import at \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x295E1\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. The loader will update the referenced data at \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x63A88\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ewith \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x295E1\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, so that when the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction is invoked, execution is appropriately redirected to the dispatcher stub. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFigure 48 is the deobfuscated code in the loader responsible for resolving the fixup table. We need to mimic this behavior in order to associate which import location targets which dispatcher.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cpre\u003e\u003ccode\u003e$_Loop_Resolve_ImpFixupTbl:\r\n mov     ecx, [rdx+4]             ; fixup , either DLL, API, or ImpStub\r\n mov     eax, [rdx]               ; target ref loc that needs to be \"fixed up\"\r\n inc     ebp                      ; update the counter\r\n add     rcx, r13                 ; calculate fixup fully (r13 is imgbase)\r\n add     rdx, 8                   ; next pair entry\r\n mov     [r13+rax+0], rcx         ; update the target ref loc w/ full fixup\r\n movsxd  rax, dword ptr [rsi+18h] ; fetch imptbl total size, in bytes\r\n shr     rax, 3                   ; account for size as a pair-entry\r\n cmp     ebp, eax                 ; check if done processing all entries\r\n jl      $_Loop_Resolve_ImpTbl\u003c/code\u003e\u003c/pre\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cspan style\u003d\"vertical-align:baseline;color:#5f6368;display:block;font-size:16px;font-style:italic;margin-top:8px;width:100%\"\u003eFigure 48: Deobfuscated disassembly of the algorithm used to resolve the import fixup table\u003c/span\u003e\u003c/p\u003e"]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eResolving the import fixup table requires us to have first identified the data section within the protected binary and the metadata that identifies the import table (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eIMPTBL_OFFSET\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eIMPTBL_SIZE\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e). The offset to the fixup table is from the start of the data section.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 49: Python re-implementation of the algorithm used to resolve the import fixup table\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png 944w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png 944w"," 944px,  944px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig49.max-1000x1000.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eHaving the start of the fixup table, we simply iterate one entry at a time and identify which import displacement (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elocation\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) is associated with which dispatcher stub (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003efixup\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e).\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRecovering the Import\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eHaving obtained all potential import locations from the brute-force scan and accounted for relocations in HEADERLESS mode, we can proceed with the final verifications to recover each protected import. The recovery process is conducted as follows:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eDecode the location into a valid call or jmp instruction\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAny failure in decoding indicates that the location does not contain a valid instruction and can be safely ignored.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUse the memory displacement to locate the stub for the import\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIn HEADERLESS mode, each displacement serves as a lookup key into the fixup table for the respective dispatcher.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eExtract the \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e \u003cstrong style\u003d\"vertical-align:baseline\"\u003estructure within the dispatcher\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis is achieved by statically traversing a dispatcher's disassembly listing.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe first \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction encountered will contain the reference to the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eProcess the \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e \u003cstrong style\u003d\"vertical-align:baseline\"\u003eto decrypt both the DLL and API names\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUtilize the two RVAs contained within the structure to locate the encrypted blobs for the DLL and API names.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDecrypt the blobs using the outlined import decryption routine.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 50: Loop that recovers each protected import\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png",null,null,"https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig50.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe Python code iterates through every potential import location (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epotential_stubs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) and attempts to decode each presumed \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e or \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction to an import. A \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003etry\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e/\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eexcept\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e block is employed to handle any failures, such as instruction decoding errors or other exceptions that may arise. The assumption is that any error invalidates our understanding of the recovery process and can be safely ignored. In the full code, these errors are logged and tracked for further analysis should they arise.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eNext, the code invokes a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eGET_STUB_DISPLACEMENT\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e helper function that obtains the RVA to the dispatcher associated with the import. Depending on the mode of protection, one of the following routines is used:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 51: Routines that retrieve the stub RVA based on the protection mode\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png 1081w"," 1060px,  1081px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig51.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erecover_import_stub\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003efunction is utilized to reconstruct the control flow graph (CFG) of the import stub, while \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e_extract_lea_ref\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eexamines the instructions in the CFG to locate the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ereference to the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eobf_imp_t\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. The \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eGET_DLL_API_NAMES\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003efunction operates similarly to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eGET_STUB_DISPLACEMENT\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, accounting for slight differences depending on the protection mode:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 52: Routines that decrypt the DLL and API blobs based on the protection mode\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png 1103w"," 1060px,  1103px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig52.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter obtaining the decrypted DLL and API names, the code possesses all the necessary information to reveal the import that the protection conceals. The final individual output of each import entry is captured in a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredImport\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e object and two dictionaries:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.imports\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis dictionary maps the address of each protected import to its recovered state. It allows for the association of the complete recovery details with the specific location in the binary where the import occurs.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.imp_dict_builder\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis dictionary maps each DLL name to a set of its corresponding API names. It is used to reconstruct the import table, ensuring a unique set of DLLs and the APIs utilized by the binary.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis systematic collection and organization prepare the necessary data to facilitate the restoration of the original functionality in the deobfuscated output. In Figure 53 and Figure 54, we can observe these two containers to showcase their structure after a successful recovery:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 53: Output of the d.imports dictionary after a successful recovery\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png 1196w"," 1060px,  1196px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig53.max-1200x1200.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 54: Output of the d.imp_dict_builder dictionary after a successful recovery\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png 1125w"," 1060px,  1125px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig54.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eObserving the Final Results\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis final step—rebuilding the import table using this data—is performed by the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ebuild_import_table\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e function in the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epefile_utils.py\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e source file. This part is omitted from the blog post due to its unavoidable length and the numerous tedious steps involved. However, the code is well-commented and structured to thoroughly address and showcase all aspects necessary for reconstructing the import table.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eNonetheless, the following figure illustrates how we generate a fully functional binary from a headerless-protected input. Recall that a headerless-protected input is a raw, headerless PE binary, almost analogous to a shellcode blob. From this blob we produce an entirely new, functioning binary with the entirety of its import protection completely restored. And we can do the same for all protection modes.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 55: Display of completely restored import table for a binary protected in HEADERLESS mode\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png 1352w"," 1060px,  1352px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig55.max-1400x1400.png"],null,3]]],[null,null,[null,[null,"\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBuilding Relocations in Deobfuscated Binaries\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eNow that we can fully recover the CFG of protected binaries and provide complete restoration of the original import tables, the final phase of the deobfuscator involves merging these elements to produce a functional deobfuscated binary. The code responsible for this process is encapsulated within the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erecover_output64.py\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003epefile_utils.py\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ePython files.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe rebuild process comprises two primary steps:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBuilding the Output Image Template\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBuilding Relocations\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e1. Building the Output Image Template\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCreating an output image template is essential for generating the deobfuscated binary. This involves two key tasks:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eTemplate PE Image: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA Portable Executable (PE) template that serves as the container for the output binary that incorporates the restoration of all obfuscated components. We also need to be cognizant of all the different characteristics between in-memory PE executables and on-file PE executables.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eHandling Different Protection Modes: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDifferent protection modes and input stipulate different requirements.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eHeaderless variants \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ehave their file headers stripped. We must account for these variations to accurately reconstruct a functioning binary.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSelective protection \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003epreserves the original imports to maintain functionality as well as includes a specific import protection for all the imports leveraged within the selected functions. \u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e2. Building Relocations\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eBuilding relocations is a critical and intricate part of the deobfuscation process. This step ensures that all address references within the deobfuscated binary are correctly adjusted to maintain functionality. It generally revolves around the following two phases:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eCalculating Relocatable Displacements\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: Identifying all memory references within the binary that require relocation. This involves calculating the new addresses where these references will point to. The technique we will use is generating a lookup table that maps original memory references to their new relocatable addresses.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eApply Fixups: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eModifies the binary's code to reflect the new relocatable addresses. This utilizes the aforementioned lookup table to apply necessary fixups to all instruction displacements that reference memory. This ensures that all memory references within the binary correctly point to their intended locations.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe intentionally omit the details of showcasing the rebuilding of the output binary image because, while essential to the deobfuscation process, it is straightforward enough and just overly tedious to be worthwhile examining in any depth. Instead, we focus exclusively on relocations, as they are more nuanced and reveal important characteristics that are not as apparent but must be understood when rewriting binaries.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOverview of the Relocation Process\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRebuilding relocations is a critical step in restoring a deobfuscated binary to an executable state. This process involves adjusting memory references within the code so that all references point to the correct locations after the code has been moved or modified. On the x86-64 architecture, this primarily concerns instructions that use \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRIP-relative addressing\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, a mode where memory references are relative to the instruction pointer.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRelocation is necessary when the layout of a binary changes, such as when code is inserted, removed, or shifted during deobfuscation. Given our deobfuscation approach extracts the original instructions from the obfuscator, we are required to relocate each recovered instruction appropriately into a new code segment. This ensures that the deobfuscated state preserves the validity of all memory references and that the accuracy of the original control and data flow is sustained.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUnderstanding Instruction Relocation\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eInstruction relocation revolves around the following:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstruction's memory address: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ethe location in memory where an instruction resides.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInstruction's memory memory references: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ereferences to memory locations used by the instruction's operands.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eConsider the following two instructions as illustrations:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 56: Illustration of two instructions that require relocation\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png 300w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png 300w"," 300px,  300px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig56.max-300x300.png"],null,3]]],[null,null,[null,[null,"\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUnconditional \u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cstrong style\u003d\"vertical-align:baseline\"\u003einstruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis instruction is located at memory address \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x1000.\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003eIt references its branch target at address \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x4E22\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. The displacement encoded within the instruction is \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x3E1D\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, which is used to calculate the branch target relative to the instruction's position. Since it employs RIP-relative addressing, the destination is calculated by adding the displacement to the length of the instruction and its memory address.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003einstruction\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis is the branch target for the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003einstruction located at \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x4E22\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. It also contains a memory reference to the data segment, with an encoded displacement of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x157\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWhen relocating these instructions, we must address both of the following aspects:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eChanging the instruction's address:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e When we move an instruction to a new memory location during the relocation process, we inherently change its memory address. For example, if we relocate this instruction from \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x1000\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x2000\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, the instruction's address becomes \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x2000\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:disc;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAdjusting memory displacements:\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e The displacement within the instruction (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x3E1D\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003efor the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x157\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003efor the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003elea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) is calculated based on the instruction's original location and the location of its reference. If the instruction moves, the displacement no longer points to the correct target address. Therefore, we must recalculate the displacement to reflect the instruction's new position.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 57: Updated illustration demonstration of what relocation would look like\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png 289w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png 289w"," 289px,  289px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig57.max-300x300.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWhen relocating instructions during the deobfuscation process, we must ensure accurate control flow and data access. This requires us to adjust both the instruction's memory address and any displacements that reference other memory locations. Failing to update these values invalidates the recovered CFG.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWhat Is RIP-Relative Addressing?\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRIP-relative addressing\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e is a mode where the instruction references memory at an offset relative to the \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRIP\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e (instruction pointer) register, which points to the next instruction to be executed. Instead of using absolute addresses, the instruction encapsulates the referenced address via a signed 32-bit displacement from the current instruction pointer.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAddressing relative to the instruction pointer exists on x86 as well, but only for control-transfer instructions that support a relative displacement (e.g., JCC conditional instructions, near CALLs, and near JMPs). The x64 ISA extended this to account for almost all memory references being RIP-relative. For example, \u003c/span\u003e\u003ca href\u003d\"http://www.nynaeve.net/?p\u003d192\" rel\u003d\"noopener\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"text-decoration:underline;vertical-align:baseline\"\u003emost data references in x64 Windows binaries are RIP-relative\u003c/span\u003e\u003c/a\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAn excellent tool to visualize the intricacies of a decoded Intel x64 instruction is \u003c/span\u003e\u003ca href\u003d\"https://github.com/zyantific/zydis/blob/master/tools/ZydisInfo.c\" rel\u003d\"noopener\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"text-decoration:underline;vertical-align:baseline\"\u003eZydisInfo\u003c/span\u003e\u003c/a\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. Here we use it to illustrate how a LEA instruction (encoded as\u003c/span\u003e \u003ccode style\u003d\"vertical-align:baseline\"\u003e488D151B510600\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) references RIP-relative memory at \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x6511b\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 58: ZydisInfo output for the lea instruction\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png 1417w"," 1060px,  1417px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig58.max-1500x1500.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor most instructions, the displacement is encoded in the final four bytes of the instruction. When an immediate value is stored at a memory location, the immediate follows the displacement. Immediate values are restricted to a maximum of 32 bits, meaning 64-bit immediates cannot be used following a displacement. However, 8-bit and 16-bit immediate values are supported within this encoding scheme.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 59: ZydisInfo output for the mov instruction storing an immediate operand\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png 560w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png 560w"," 560px,  560px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig59.max-600x600.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDisplacements for control-transfer instructions are encoded as immediate operands, with the RIP register implicitly acting as the base. This is evident when decoding a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejnz\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction, where the displacement is directly embedded within the instruction and calculated relative to the current RIP.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 60: ZydisInfo output for the jnz instruction with an immediate operand as the displacement\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png 1421w"," 1060px,  1421px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig60.max-1500x1500.png"],null,3]]],[null,null,[null,[null,"\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSteps in the Relocation Process\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFor rebuilding relocations we take the following approach:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRebuilding the code section and creating a relocation map\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWith the recovered CFG and imports, we commit the changes to a new code section that contains the fully deobfuscated code. We do this by:\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cul\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eFunction-by-function processing\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: rebuild each function one at a time. This allows us to manage the relocation of each instruction within its respective function.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:circle;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eTracking instruction locations\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: As we rebuild each function, we track the new memory locations of each instruction. This involves maintaining a global relocation dictionary that maps original instruction addresses to their new addresses in the deobfuscated binary. This dictionary is crucial for accurately updating references during the fixup phase.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eApplying fixups\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter rebuilding the code section and establishing the relocation map, we proceed to modify the instructions so that their memory references point to the correct locations in the deobfuscated binary. This restores the binary's complete functionality and is achieved by \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eadjusting memory references\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e to code or data an instruction may have.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRebuilding the Code Section and Creating a Relocation Map\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo construct the new deobfuscated code segment, we iterate over each recovered function and copy all instructions sequentially, starting from a fixed offset—for example, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x1000\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. During this process, we build a global relocation dictionary (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eglobal_relocs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) that maps each instruction to its relocated address. This mapping is essential for adjusting memory references during the fixup phase.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eglobal_relocs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e dictionary uses a tuple as the key for lookups, and each key is associated with the relocated address of the instruction it represents. The tuple consists of the following three components:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eOriginal starting address of the function\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: The address where the function begins in the protected binary. It identifies the function to which the instruction belongs.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eOriginal instruction address within the function\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: The address of the instruction in the protected binary. For the first instruction in a function, this will be the function's starting address.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSynthetic boundary JMP flag\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: A boolean value indicating whether the instruction is a synthetic boundary jump introduced during normalization. These synthetic instructions were not present in the original obfuscated binary, and we need to account for them specifically during relocation because they have no original address.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 61: Illustration of how the new code segment and relocation map are generated\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png 1612w"," 1060px,  1612px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig61.max-1700x1700.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe following Python code implements the logic outlined in Figure 61. Error handling and logging code has been stripped for brevity.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 62: Python logic that implements the building of the code segment and generation of the relocation map\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png 1097w"," 1060px,  1097px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig62.max-1100x1100.png"],null,3]]],[null,null,[null,[null,"\u003col\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eInitialize current offset\u003cbr\u003e\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSet the starting point in the new image buffer where the code section will be placed. The variable \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecurr_off\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e is initialized to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003estarting_off\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, which is typically \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0x1000\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. This represents the conventional start address of the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e.text\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e section in PE files. For SELECTIVE mode, this will be the offset to the start of the protected function.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIterate over recovered functions\u003cbr\u003e\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eLoop through each recovered function in the deobfuscated control flow graph (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.cfg\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e). \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003efunc_ea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e is the original function entry address, and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erfn\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e is a \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredFunc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e object encapsulating the recovered function's instructions and metadata.\u003c/span\u003e\n\u003col style\u003d\"list-style-type:lower-alpha\"\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eHandle the function start address first\u003c/strong\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:lower-roman;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSet function's relocated start address: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAssign the current offset to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erfn.reloc_ea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, marking where this function will begin in the new image buffer.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:lower-roman;vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate global relocation map: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAdd an entry to the global relocation map \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.global_relocs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e to map the original function address to its new location.\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eIterate over each recovered instruction\u003cbr\u003e\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eLoop through the normalized flow of instructions within the function. We use the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003enormalized_flow\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e as it allows us to iterate over each instruction linearly as we apply it to the new image.\u003c/span\u003e\n\u003col style\u003d\"list-style-type:lower-roman\"\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eSet instruction's relocated address: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAssign the current offset to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.reloc_ea\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, indicating where this instruction will reside in the new image buffer.\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate global relocation map: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAdd an entry to \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.global_relocs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e for the instruction, mapping its original address to the relocated address.\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate the output image: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWrite the instruction bytes to the new image buffer \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.newimgbuffer\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e at the current offset. If the instruction was modified during deobfuscation (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.updated_bytes\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), use those bytes; otherwise, use the original bytes (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.instr.bytes\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e).\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAdvance the offset: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIncrement \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecurr_off\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e by the size of the instruction to point to the next free position in the buffer and move on to the next instruction until the remainder are exhausted.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAlign current offset to 16-byte boundary\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter processing all instructions in a function, align \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecurr_off\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e to the next 16-byte boundary. We use 8 bytes as an arbitrary pointer-sized value from the last instruction to pad so that the next function won't conflict with the last instruction of the previous function. This further ensures proper memory alignment for the next function, which is essential for performance and correctness on x86-64 architectures. Then repeat the process from step 2 until all functions have been exhausted.\u003c/span\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis step-by-step process accurately rebuilds the deobfuscated binary's executable code section. By relocating each instruction, the code prepares the output template for the subsequent fixup phase, where references are adjusted to point to their correct locations.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eApplying Fixups\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter building the deobfuscated code section and relocating each recovered function in full, we apply fixups to correct addresses within the recovered code. This process adjusts the instruction bytes in the new output image so that all references point to the correct locations. It is the final step in reconstructing a functional deobfuscated binary.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe categorize fixups into three distinct categories, based primarily on whether they apply to control flow or data flow instructions. We further distinguish between two types of control flow instructions: standard branching instructions and those introduced by the obfuscator through the import protection. Each type has specific nuances that require tailored handling, allowing us to apply precise logic to each category.\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImport Relocations\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: These involve calls and jumps to recovered imports.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eControl Flow Relocations\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: All standard control flow branching branching instructions.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli style\u003d\"list-style-type:decimal;vertical-align:baseline\"\u003e\n\u003cp\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eData Flow Relocations\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: Instructions that reference static memory locations.\u003c/span\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUsing these three categorizations, the core logic boils down to the following two phases:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eResolving displacement fixups\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDifferentiate between displacements encoded as immediate operands (branching instructions) and those in memory operands (data accesses and import calls).\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eCalculate the correct fixup values for these displacements using the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed\u003c/code\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003e.\u003c/strong\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eglobal_relocs \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003emap generated prior.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate the output image buffer\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eOnce the displacements have been resolved, write the updated instruction bytes into the new code segment to reflect the changes permanently.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo achieve this, we utilize several helper functions and lambda expressions. The following is a step-by-step explanation of the code responsible for calculating the fixups and updating the instruction bytes.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 63: Helper routines that aid in applying fixups\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png 1112w"," 1060px,  1112px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig63.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eDefine lambda helper expressions\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ePACK_FIXUP\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: packs a 32-bit fixup value into a little-endian byte array.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eCALC_FIXUP\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: calculates the fixup value by computing the difference between the destination address (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003edest\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e) and the end of the current instruction (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.reloc_ea + size\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e), ensuring it fits within 32 bits.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eIS_IN_DATA\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: checks if a given address is within the data section of the binary. We exclude relocating these addresses, as we preserve the data section at its original location.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eResolve fixups for each instruction\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eImport and data flow relocations\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUtilize the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eresolve_disp_fixup_and_apply\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e helper function as both encode the displacement within a memory operand.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eControl flow relocations\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUse the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eresolve_imm_fixup_and_apply\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e helper as the displacement is encoded in an immediate operand.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDuring our CFG recovery, we transformed each \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e and \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e instruction to its near jump equivalent (from 2 bytes to 6 bytes) to avoid the shortcomings of 1-byte short branches.\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe force a 32-bit displacement for each branch to guarantee a sufficient range for every fixup.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate the output image buffer\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eDecode the updated instruction bytes to have it reflect within the \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eRecoveredInstr\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ethat represents it.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWrite the updated bytes to the new image buffer\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eupdated_bytes\u003c/code\u003e \u003cspan style\u003d\"vertical-align:baseline\"\u003ereflects the final opcodes for a fully relocated instruction.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWith the helpers in place, the following Python code implements the final processing for each relocation type.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 64: The three core loops that address each relocation category\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png 1114w"," 1060px,  1114px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig64.max-1200x1200.png"],null,3]]],[null,null,[null,[null,"\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eImport Relocations: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe first for loop handles fixups for import relocations, utilizing data generated during the Import Recovery phase. It iterates over every recovered instruction\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ewithin the\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erfn.relocs_imports\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ecache and does the following\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e:\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003ePrepare updated instruction bytes: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003einitialize \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.updated_bytes\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ewith a mutable copy of the original instruction bytes to prepare it for modification\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRetrieve import entry and displacement: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eobtain the import entry from the imports dictionary\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.imports\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eand retrieve the new RVA from \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.import_to_rva_map\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e using the import's API name.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eApply fixup: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003euse the\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eresolve_disp_fixup_and_apply\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e helper to calculate and apply the fixup for the new RVA. This adjusts the instruction's displacement to correctly reference the imported function.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate image buffer: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ewrite \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.updated_bytes\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eback into the new image using\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eupdate_reloc_in_img\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThis finalizes the fixup for the instruction in the output image.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eControl Flow Relocations: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe second for loop handles fixups for control flow branching relocations (\u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ecall\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejmp\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ejcc\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e). Iterating over each entry\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ein \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erfn.relocs_ctrlflow\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, it does the following:\u003c/span\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eRetrieve destination\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: extract the original branch destination target from the immediate operand.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eGet relocated address\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: reference the relocation dictionary\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003ed.global_relocs\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eto obtain the branch target's relocated address. If it's a call target, then we specifically look up the relocated address for the start of the called function.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eApply fixup\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: use\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eresolve_imm_fixup_and_apply\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eto adjust the branch target to its relocated address.\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eUpdate buffer\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e: finalize the fixup by writing\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003er.updated_bytes\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eback into the new image using \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eupdate_reloc_in_img\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eData Flow Relocations: \u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eThe final loop handles the resolution of all static memory references stored within\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003erfn.relocs_dataflow\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e. \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFirst, we establish a list of \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eKNOWN \u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003einstructions that require data reference relocations. Given the extensive variety of such instructions, this categorization simplifies our approach and ensures a comprehensive understanding of all possible instructions present in the protected binaries. Following this, the logic mirrors that of the import and control flow relocations, systematically processing each relevant instruction to accurately adjust their memory references. \u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter reconstructing the code section and establishing the relocation map, we proceeded to adjust each instruction categorized for relocation within the deobfuscated binary. This was the final step in restoring the output binary's full functionality, as it ensures that each instruction accurately references the intended code or data segments.\u003c/span\u003e\u003c/p\u003e\n\u003ch4\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eObserving the Results\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eTo demonstrate our deobfuscation library for ScatterBrain, we conduct a test study showcasing its functionality. For this test study, we select three samples: a \u003c/span\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/strong\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e headerless backdoor and two embedded plugins.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eWe develop a Python script, \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eexample_deobfuscator.py\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e, that consumes from our library and implements all of the recovery techniques outlined earlier. Figure 65 and Figure 66 showcase the code within our example deobfuscator:\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 65: The first half of the Python code in example_deobfuscator.py\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png 1261w"," 1060px,  1261px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig65.max-1300x1300.png"],null,3]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 66: The second half of the Python code in example_deobfuscator.py\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1100x1100.png 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png 1295w"," 1060px,  1295px","https://storage.googleapis.com/gweb-cloudblog-publish/images/scatterbrain-fig66.max-1300x1300.png"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eRunning \u003c/span\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eexample_deobfuscator.py\u003c/code\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e we can see the following. Note, it takes a bit given we have to emulate more than 16,000 instruction dispatchers that were found within the headerless backdoor.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 67: The three core loops that address each relocation category\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif 1613w"," 1060px,  1613px","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig67.gif"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eFocusing on the headerless backdoor both for brevity and also because it is the most involved in deobfuscating, we first observe its initial state inside the IDA Pro disassembler before we inspect the output results from our deobfuscator. We can see that it is virtually impenetrable to analysis.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 68: Observing the obfuscated headerless backdoor in IDA Pro\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif 1193w"," 1060px,  1193px","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig68.gif"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAfter running our example deobfuscator and producing a brand new deobfuscated binary, we can see the drastic difference in output. All the original control flow has been recovered, all of the protected imports have been restored, and all required relocations have been applied. We also account for the deliberately removed PE header of the headerless backdoor that ScatterBrain removes.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 69: Observing the deobfuscated headerless backdoor in IDA Pro\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif 1270w"," 1060px,  1270px","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig69.gif"],null,3]]],[null,null,[null,[null,"\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGiven we produce functional binaries as part of the output, the subsequent deobfuscated binary can be either run directly or debugged within your favorite debugger of choice.\u003c/span\u003e\u003c/p\u003e"]]],[null,null,null,null,null,null,null,null,[[[null,"\u003cp\u003eFigure 70: Debugging the deobfuscated headerless backdoor in everyone’s favorite debugger\u003c/p\u003e"],["https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif 1060w, https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif 1822w"," 1060px,  1822px","https://storage.googleapis.com/gweb-cloudblog-publish/original_images/scatterbrain-fig70.gif"],null,3]]],[null,null,[null,[null,"\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eConclusion\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIn this blog post, we delved into the sophisticated ScatterBrain obfuscator used by POISONPLUG.SHADOW, an advanced modular backdoor leveraged by specific \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eChina-nexus threat actors \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eGTIG has been tracking since 2022. Our exploration of ScatterBrain highlighted the intricate challenges it poses for defenders. By systematically outlining and addressing each protection mechanism, we demonstrated the significant effort required to create an effective deobfuscation solution.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eUltimately, we hope that our work provides valuable insights and practical tools for analysts and cybersecurity professionals. Our dedication to advancing methodologies and fostering collaborative innovation ensures that we remain at the forefront of combating sophisticated threats like POISONPLUG.SHADOW. Through this exhaustive examination and the introduction of our deobfuscator, we contribute to the ongoing efforts to mitigate the risks posed by highly obfuscated malware, reinforcing the resilience of cybersecurity defenses against evolving adversarial tactics.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eIndicators of Compromise\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eA\u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003ca href\u003d\"https://www.virustotal.com/gui/collection/1ea8e67f29cc208993af3db36ba88d978d566b6a545ed0d73a4b4ebc959e6e85\" rel\u003d\"noopener\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"text-decoration:underline;vertical-align:baseline\"\u003eGoogle Threat Intelligence Collection\u003c/span\u003e\u003c/a\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003e \u003c/span\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003efeaturing indicators of compromise (IOCs) related to the activity described in this post is now available.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eHost-Based IOCs\u003c/span\u003e\u003c/h3\u003e"]]],[null,null,[null,[null,"\u003cdiv align\u003d\"left\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\n\u003cdiv style\u003d\"color:#5f6368;overflow-x:auto;overflow-y:hidden;width:100%\"\u003e\u003ctable border\u003d\"1px\" cellpadding\u003d\"16px\" style\u003d\"border-collapse:collapse;margin-left:auto;margin-right:auto\"\u003e\u003ccolgroup\u003e\u003ccol\u003e\u003ccol\u003e\u003c/colgroup\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eMD5\u003c/strong\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cstrong style\u003d\"vertical-align:baseline\"\u003eAssociated Malware Family\u003c/strong\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e5C62CDF97B2CAA60448619E36A5EB0B6\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e0009F4B9972660EEB23FF3A9DCCD8D86\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003eEB42EF53761B118EFBC75C4D70906FE4\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e4BF608E852CB279E61136A895A6912A9\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e1F1361A67CE4396C3B9DBC198207EF52\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e79313BE39679F84F4FCB151A3394B8B3\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003ccode style\u003d\"vertical-align:baseline\"\u003e704FB67DFFE4D1DCE8F22E56096893BE\u003c/code\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003ctd style\u003d\"vertical-align:middle;border:1px solid #000000;padding:16px\"\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003ePOISONPLUG.SHADOW\u003c/span\u003e\u003c/p\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e"]]],[null,null,[null,[null,"\u003ch2\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eAcknowledgements\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan style\u003d\"vertical-align:baseline\"\u003eSpecial thanks to Conor Quigley and Luke Jenkins from the Google Threat Intelligence Group for their contributions to both Mandiant and Google’s efforts in understanding and combating the POISONPLUG threat. We also appreciate the ongoing support and dedication of the teams at Google, whose combined efforts have been crucial in enhancing our cybersecurity defenses against sophisticated adversaries.\u003c/span\u003e\u003c/p\u003e"]]]],[["Threat Intelligence","Adversarial Misuse of Generative AI","We share our findings on government-backed and information operations threat actor use of the Gemini web application.",["https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-400x400.png 324w, https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png 648w"," 324px,  648px","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png"],null,55,null,"https://cloud.google.com/blog/topics/threat-intelligence/adversarial-misuse-generative-ai",null,1,[["Google Threat Intelligence Group "]],null,"55958"],["Threat Intelligence","Securing Cryptocurrency Organizations","Recommendations and insight into preventing, detecting, and responding to intrusions at cryptocurrency organizations.",["https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-400x400.png 324w, https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png 648w"," 324px,  648px","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png"],null,27,null,"https://cloud.google.com/blog/topics/threat-intelligence/securing-cryptocurrency-organizations",null,1,[["Mandiant "]],null,"55891"],["Threat Intelligence","Your Single-Page Applications Are Vulnerable: Here's How to Fix Them","Single-page applications (SPAs) typically have multiple access control vulnerabilities that can introduce risk.",["https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-400x400.png 324w, https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png 648w"," 324px,  648px","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png"],null,9,null,"https://cloud.google.com/blog/topics/threat-intelligence/single-page-applications-vulnerable",null,1,[["Mandiant "]],null,"55848"],["Threat Intelligence","Backscatter: Automated Configuration Extraction",null,["https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-400x400.png 324w, https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png 648w"," 324px,  648px","https://storage.googleapis.com/gweb-cloudblog-publish/images/03_ThreatIntelligenceWebsiteBannerIdeas_BANN.max-700x700.png"],null,4,null,"https://cloud.google.com/blog/topics/threat-intelligence/backscatter-automated-configuration-extraction",null,1,[["Mandiant "]],null,"55842"]],null,"Threat Intelligence",null,[["Threat Intelligence","https://cloud.google.com/blog/topics/threat-intelligence","threat-intelligence"]],null,null,64], sideChannel: {}});</script><script id="wiz_jd" nonce="7Hibp_PLMbjEvbm9bu7mWQ">if (window['_wjdc']) {const wjd = {}; window['_wjdc'](wjd); delete window['_wjdc'];}</script><script aria-hidden="true" id="WIZ-footer" nonce="7Hibp_PLMbjEvbm9bu7mWQ">window.wiz_progress&&window.wiz_progress(); window.stopScanForCss&&window.stopScanForCss(); ccTick('bl');</script></body></html><footer id="ZCHFDb"><footer class="nRhiJb-RWrDld nRhiJb-yePe5c QJnbF" jscontroller="NsSboe" track-metadata-module="footer"><h3 class="nRhiJb-VqCwd-L6cTce">Footer Links</h3><section class="nRhiJb-haF9Wb r2W5Od"><section class="nRhiJb-DX2B6"><div class="nRhiJb-j5y3u"><h4 class="nRhiJb-BkAck nRhiJb-BkAck-OWXEXe-TzA9Ye">Follow us</h4><ul class="nRhiJb-Qijihe c3Uqdd" role="list"><li class="nRhiJb-KKXgde"><a class="nRhiJb-ARYxNe" href="https://www.x.com/googlecloud" target="_blank" rel="noopener" track-name="x"track-type="social link"track-metadata-position="footer"track-metadata-eventdetail="www.x.com/googlecloud"track-metadata-module="footer"track-metadata-module_headline="follow us"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-DX2B6" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M13.9,10.5L21.1,2h-1.7l-6.3,7.4L8,2H2.2l7.6,11.1L2.2,22h1.7l6.7-7.8L16,22h5.8L13.9,10.5L13.9,10.5z M11.5,13.2l-0.8-1.1 L4.6,3.3h2.7l5,7.1l0.8,1.1l6.5,9.2h-2.7L11.5,13.2L11.5,13.2z"></path></svg></a></li><li class="nRhiJb-KKXgde"><a class="nRhiJb-ARYxNe" href="https://www.youtube.com/googlecloud" target="_blank" rel="noopener" track-name="youtube"track-type="social link"track-metadata-position="footer"track-metadata-eventdetail="www.youtube.com/googlecloud"track-metadata-module="footer"track-metadata-module_headline="follow us"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-DX2B6" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M23.74 7.1s-.23-1.65-.95-2.37c-.91-.96-1.93-.96-2.4-1.02C17.04 3.47 12 3.5 12 3.5s-5.02-.03-8.37.21c-.46.06-1.48.06-2.39 1.02C.52 5.45.28 7.1.28 7.1S.04 9.05 0 10.98V13c.04 1.94.28 3.87.28 3.87s.24 1.65.96 2.38c.91.95 2.1.92 2.64 1.02 1.88.18 7.91.22 8.12.22 0 0 5.05.01 8.4-.23.46-.06 1.48-.06 2.39-1.02.72-.72.96-2.37.96-2.37s.24-1.94.25-3.87v-2.02c-.02-1.93-.26-3.88-.26-3.88zM9.57 15.5V8.49L16 12.13 9.57 15.5z"></path></svg></a></li><li class="nRhiJb-KKXgde"><a class="nRhiJb-ARYxNe" href="https://www.linkedin.com/showcase/google-cloud" target="_blank" rel="noopener" track-name="linkedin"track-type="social link"track-metadata-position="footer"track-metadata-eventdetail="www.linkedin.com/showcase/google-cloud"track-metadata-module="footer"track-metadata-module_headline="follow us"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-DX2B6" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 20c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 19H5v-9h3v9zM6.5 8.31c-1 0-1.81-.81-1.81-1.81S5.5 4.69 6.5 4.69s1.81.81 1.81 1.81S7.5 8.31 6.5 8.31zM19 19h-3v-5.3c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5V19h-3v-9h3v1.2c.52-.84 1.59-1.4 2.5-1.4 1.93 0 3.5 1.57 3.5 3.5V19z"></path></svg></a></li><li class="nRhiJb-KKXgde"><a class="nRhiJb-ARYxNe" href="https://www.instagram.com/googlecloud/" target="_blank" rel="noopener" track-name="instagram"track-type="social link"track-metadata-position="footer"track-metadata-eventdetail="www.instagram.com/googlecloud/"track-metadata-module="footer"track-metadata-module_headline="follow us"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-DX2B6" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M12,0 C15.3,0 15.7,0 17,0 C18.3,0.1 19.1,0.3 19.9,0.6 C20.7,0.9 21.3,1.3 22,2 C22.7,2.7 23.1,3.4 23.3,4.2 C23.6,5 23.8,5.8 23.9,7.1 C24,8.3 24,8.7 24,12 C24,15.3 24,15.7 23.9,16.9 C23.8,18.2 23.6,19 23.3,19.8 C23,20.6 22.6,21.2 21.9,21.9 C21.3,22.6 20.6,23 19.8,23.3 C19,23.6 18.2,23.8 16.9,23.9 C15.7,24 15.3,24 12,24 C8.7,24 8.3,24 7,24 C5.7,23.9 4.9,23.7 4.1,23.4 C3.3,23.1 2.7,22.7 2,22 C1.3,21.3 0.9,20.6 0.7,19.8 C0.4,19 0.2,18.2 0.1,16.9 C0,15.7 0,15.3 0,12 C0,8.7 0,8.3 0.1,7.1 C0.1,5.8 0.3,4.9 0.6,4.1 C0.9,3.4 1.3,2.7 2,2 C2.7,1.3 3.4,0.9 4.1,0.6 C4.9,0.3 5.8,0.1 7.1,0.1 C8.3,0 8.7,0 12,0 Z M12,2.2 C8.8,2.2 8.4,2.2 7.2,2.2 C6,2.3 5.3,2.5 4.9,2.6 C4.4,2.9 4,3.1 3.5,3.5 C3.1,3.9 2.8,4.3 2.6,4.9 C2.5,5.3 2.3,6 2.3,7.2 C2.2,8.4 2.2,8.8 2.2,12 C2.2,15.2 2.2,15.5 2.3,16.8 C2.3,17.9 2.5,18.6 2.7,19 C2.9,19.6 3.2,20 3.6,20.4 C4,20.8 4.4,21.1 5,21.3 C5.4,21.5 6,21.6 7.2,21.7 C8.4,21.8 8.8,21.8 12,21.8 C15.2,21.8 15.5,21.8 16.8,21.7 C17.9,21.7 18.6,21.5 19,21.3 C19.6,21.1 20,20.8 20.4,20.4 C20.8,20 21.1,19.6 21.3,19 C21.5,18.6 21.6,18 21.7,16.8 C21.8,15.6 21.8,15.2 21.8,12 C21.8,8.8 21.8,8.5 21.7,7.2 C21.7,6.1 21.5,5.4 21.3,5 C21.1,4.4 20.8,4 20.4,3.6 C20,3.2 19.6,2.9 19,2.7 C18.6,2.5 18,2.4 16.8,2.3 C15.6,2.2 15.2,2.2 12,2.2 Z M12,5.8 C15.4,5.8 18.2,8.6 18.2,12 C18.2,15.4 15.4,18.2 12,18.2 C8.6,18.2 5.8,15.4 5.8,12 C5.8,8.6 8.6,5.8 12,5.8 Z M12,16 C14.2,16 16,14.2 16,12 C16,9.8 14.2,8 12,8 C9.8,8 8,9.8 8,12 C8,14.2 9.8,16 12,16 Z M18.4,7 C17.6268014,7 17,6.37319865 17,5.6 C17,4.82680135 17.6268014,4.2 18.4,4.2 C19.1731986,4.2 19.8,4.82680135 19.8,5.6 C19.8,6.37319865 19.1731986,7 18.4,7 Z"></path></svg></a></li><li class="nRhiJb-KKXgde"><a class="nRhiJb-ARYxNe" href="https://www.facebook.com/googlecloud/" target="_blank" rel="noopener" track-name="facebook"track-type="social link"track-metadata-position="footer"track-metadata-eventdetail="www.facebook.com/googlecloud/"track-metadata-module="footer"track-metadata-module_headline="follow us"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-DX2B6" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 20c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 2v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v7h-3v-7h-2v-3h2V7.5C13 5.57 14.57 4 16.5 4H19z"></path></svg></a></li></ul></div></section></section><section class="nRhiJb-hlZHHf rtKYfe"><div class="nRhiJb-vQnuyc UXgbsb"><a class="ZOs9zc" href="https://cloud.google.com/" title="Google Cloud" track-name="google"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="cloud.google.com/"track-metadata-module="footer"><svg class="nRhiJb-vQnuyc-RJLb9c" viewBox="0 0 64 64" role="presentation" aria-hidden="true" width="40" height="40"><path d="M40.37 20.29L42.3333 20.3267L47.67 14.99L47.93 12.73C43.69 8.95667 38.11 6.66 32 6.66C20.9367 6.66 11.6067 14.1833 8.84 24.3833C9.42334 23.98 10.6667 24.28 10.6667 24.28L21.3333 22.5267C21.3333 22.5267 21.8867 21.62 22.1567 21.6767C24.5967 19.0067 28.1067 17.3267 32 17.3267C35.1667 17.3267 38.08 18.44 40.37 20.29Z" fill="#ea4335"/><path d="M55.1667 24.3967C53.93 19.8233 51.37 15.79 47.9267 12.7267L40.3667 20.2867C43.3933 22.7333 45.3333 26.4733 45.3333 30.66V31.9933C49.01 31.9933 52 34.9833 52 38.66C52 42.3367 49.01 45.3267 45.3333 45.3267H32L30.6667 46.6667V54.6667L32 55.9933H45.3333C54.89 55.9933 62.6667 48.2167 62.6667 38.66C62.6667 32.75 59.6933 27.5267 55.1667 24.3967Z" fill="#4285f4"/><path d="M18.6667 55.9933H31.99V45.3267H18.6667C17.6867 45.3267 16.76 45.11 15.92 44.7267L14 45.3167L8.66 50.6567L8.19334 52.46C11.1033 54.6733 14.7333 55.9933 18.6667 55.9933Z" fill="#34a853"/><path d="M18.6667 21.3267C9.11 21.3267 1.33334 29.1033 1.33334 38.66C1.33334 44.2867 4.03 49.2967 8.2 52.4633L15.93 44.7333C13.6167 43.6867 12 41.36 12 38.66C12 34.9833 14.99 31.9933 18.6667 31.9933C21.3667 31.9933 23.6933 33.61 24.74 35.9233L32.47 28.1933C29.3033 24.0233 24.2933 21.3267 18.6667 21.3267Z" fill="#fbbc05"/></svg></a></div><ul class="nRhiJb-hlZHHf-PLDbbf nRhiJb-di8rgd-ZGNLv AXb5J" role="list"><li class="glue-footer__global-links-list-item"><a class="nRhiJb-Fx4vi " href="https://cloud.google.com/" track-name="google cloud"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="cloud.google.com/"track-metadata-module="footer">Google Cloud</a></li><li class="glue-footer__global-links-list-item"><a class="nRhiJb-Fx4vi " href="https://cloud.google.com/products/" track-name="google cloud products"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="cloud.google.com/products/"track-metadata-module="footer">Google Cloud Products</a></li><li class="glue-footer__global-links-list-item"><a class="nRhiJb-Fx4vi " href="https://myaccount.google.com/privacypolicy?hl=en-US" target="_blank" track-name="privacy"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="myaccount.google.com/privacypolicy?hl=en-US"track-metadata-module="footer">Privacy</a></li><li class="glue-footer__global-links-list-item"><a class="nRhiJb-Fx4vi " href="https://myaccount.google.com/termsofservice?hl=en-US" target="_blank" track-name="terms"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="myaccount.google.com/termsofservice?hl=en-US"track-metadata-module="footer">Terms</a></li><li aria-hidden="true" class="glue-footer__global-links-list-item"><a aria-hidden="true" role="button" tabindex="0" class="nRhiJb-Fx4vi glue-footer__link glue-cookie-notification-bar-control" href="#" target="_blank" track-name="cookies management controls"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="#"track-metadata-module="footer">Cookies management controls</a></li></ul><ul class="nRhiJb-hlZHHf-PLDbbf nRhiJb-hlZHHf-PLDbbf-OWXEXe-hOedQd nRhiJb-di8rgd-ZGNLv qkxr1" role="list"><li class="glue-footer__global-links-list-item nRhiJb-hlZHHf-PLDbbf-rymPhb-ibnC6b-OWXEXe-hOedQd"><a class="nRhiJb-Fx4vi" href="https://support.google.com" target="_blank" track-name="help"track-type="footer link"track-metadata-position="footer"track-metadata-eventdetail="support.google.com"track-metadata-module="footer"><svg class="nRhiJb-Bz112c nRhiJb-Bz112c-OWXEXe-xgZe3c nRhiJb-Bz112c-OWXEXe-yePe5c-h9d3hd" viewBox="0 0 24 24" role="presentation" aria-hidden="true"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"></path></svg>Help</a></li><li class="glue-footer__global-links-list-item nRhiJb-hlZHHf-PLDbbf-rymPhb-ibnC6b-OWXEXe-hOedQd"><select jsaction="change:xU0iy" aria-label="Change language" class="nRhiJb-CL4aqd-j4gsHd"><option value="" selected disabled hidden>Language</option><option value="en" selected>‪English‬</option><option value="de">‪Deutsch‬</option><option value="fr">‪Français‬</option><option value="ko">‪한국어‬</option><option value="ja">‪日本語‬</option></select></li></ul></section></footer></footer>