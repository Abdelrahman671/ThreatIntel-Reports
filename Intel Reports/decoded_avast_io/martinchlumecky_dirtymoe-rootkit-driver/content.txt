<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">

	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1">
	    <link rel="profile" href="https://gmpg.org/xfn/11" />
	    <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />

	<!-- This site is optimized with the Yoast SEO plugin v23.6 - https://yoast.com/wordpress/plugins/seo/ -->
	<title>DirtyMoe: Rootkit Driver - Avast Threat Labs</title>
	<link rel="canonical" href="https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="DirtyMoe: Rootkit Driver - Avast Threat Labs" />
	<meta property="og:description" content="The DirtyMoe malware is a complex malicious backdoor employing various self-protection and anti-forensics mechanisms. One of the more significant safeguards is a rootkit. The next article of the DirtyMoe series explains rootkit functionality in detail." />
	<meta property="og:url" content="https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/" />
	<meta property="og:site_name" content="Avast Threat Labs" />
	<meta property="article:published_time" content="2021-08-11T09:44:03+00:00" />
	<meta property="article:modified_time" content="2021-08-11T09:44:04+00:00" />
	<meta property="og:image" content="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg" />
	<meta property="og:image:width" content="1920" />
	<meta property="og:image:height" content="500" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Martin Chlumecký" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@AvastThreatLabs" />
	<meta name="twitter:site" content="@AvastThreatLabs" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Martin Chlumecký" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="32 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#article","isPartOf":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/"},"author":{"name":"Martin Chlumecký","@id":"https://decoded.avast.io/#/schema/person/3c3a3ff3b49b0920ad16954008b387c0"},"headline":"DirtyMoe: Rootkit Driver","datePublished":"2021-08-11T09:44:03+00:00","dateModified":"2021-08-11T09:44:04+00:00","mainEntityOfPage":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/"},"wordCount":6684,"publisher":{"@id":"https://decoded.avast.io/#organization"},"image":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg","keywords":["DirtyMoe","rootkit","series"],"articleSection":["PC"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/","url":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/","name":"DirtyMoe: Rootkit Driver - Avast Threat Labs","isPartOf":{"@id":"https://decoded.avast.io/#website"},"primaryImageOfPage":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#primaryimage"},"image":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg","datePublished":"2021-08-11T09:44:03+00:00","dateModified":"2021-08-11T09:44:04+00:00","breadcrumb":{"@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#primaryimage","url":"https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg","contentUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg","width":1920,"height":500},{"@type":"BreadcrumbList","@id":"https://decoded.avast.io/martinchlumecky/dirtymoe-rootkit-driver/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://decoded.avast.io/"},{"@type":"ListItem","position":2,"name":"DirtyMoe: Rootkit Driver"}]},{"@type":"WebSite","@id":"https://decoded.avast.io/#website","url":"https://decoded.avast.io/","name":"Avast Threat Labs","description":"Uncovering Tactics, Techniques and Procedures of malicious actors","publisher":{"@id":"https://decoded.avast.io/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://decoded.avast.io/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://decoded.avast.io/#organization","name":"Avast","url":"https://decoded.avast.io/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/logo/image/","url":"","contentUrl":"","caption":"Avast"},"image":{"@id":"https://decoded.avast.io/#/schema/logo/image/"},"sameAs":["https://x.com/AvastThreatLabs"]},{"@type":"Person","@id":"https://decoded.avast.io/#/schema/person/3c3a3ff3b49b0920ad16954008b387c0","name":"Martin Chlumecký","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/79ec9118fd16e11986a379cb032b039c?s=96&d=mm&r=g","contentUrl":"https://secure.gravatar.com/avatar/79ec9118fd16e11986a379cb032b039c?s=96&d=mm&r=g","caption":"Martin Chlumecký"},"url":"https://decoded.avast.io/author/martinchlumecky/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel='dns-prefetch' href='//decoded.avast.io' />
<link rel='dns-prefetch' href='//kit.fontawesome.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Feed" href="https://decoded.avast.io/feed/" />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Comments Feed" href="https://decoded.avast.io/comments/feed/" />
		<!-- This site uses the Google Analytics by MonsterInsights plugin v9.1.1 - Using Analytics tracking - https://www.monsterinsights.com/ -->
							<script src="//www.googletagmanager.com/gtag/js?id=G-GSVBRGE9D6"  data-cfasync="false" data-wpfc-render="false" type="text/javascript" async></script>
			<script data-cfasync="false" data-wpfc-render="false" type="text/javascript">
				var mi_version = '9.1.1';
				var mi_track_user = true;
				var mi_no_track_reason = '';
								var MonsterInsightsDefaultLocations = {"page_location":"https:\/\/decoded.avast.io\/martinchlumecky\/dirtymoe-rootkit-driver\/"};
				if ( typeof MonsterInsightsPrivacyGuardFilter === 'function' ) {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsPrivacyGuardFilter( MonsterInsightsExcludeQuery ) : MonsterInsightsPrivacyGuardFilter( MonsterInsightsDefaultLocations );
				} else {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsExcludeQuery : MonsterInsightsDefaultLocations;
				}

								var disableStrs = [
										'ga-disable-G-GSVBRGE9D6',
									];

				/* Function to detect opted out users */
				function __gtagTrackerIsOptedOut() {
					for (var index = 0; index < disableStrs.length; index++) {
						if (document.cookie.indexOf(disableStrs[index] + '=true') > -1) {
							return true;
						}
					}

					return false;
				}

				/* Disable tracking if the opt-out cookie exists. */
				if (__gtagTrackerIsOptedOut()) {
					for (var index = 0; index < disableStrs.length; index++) {
						window[disableStrs[index]] = true;
					}
				}

				/* Opt-out function */
				function __gtagTrackerOptout() {
					for (var index = 0; index < disableStrs.length; index++) {
						document.cookie = disableStrs[index] + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
						window[disableStrs[index]] = true;
					}
				}

				if ('undefined' === typeof gaOptout) {
					function gaOptout() {
						__gtagTrackerOptout();
					}
				}
								window.dataLayer = window.dataLayer || [];

				window.MonsterInsightsDualTracker = {
					helpers: {},
					trackers: {},
				};
				if (mi_track_user) {
					function __gtagDataLayer() {
						dataLayer.push(arguments);
					}

					function __gtagTracker(type, name, parameters) {
						if (!parameters) {
							parameters = {};
						}

						if (parameters.send_to) {
							__gtagDataLayer.apply(null, arguments);
							return;
						}

						if (type === 'event') {
														parameters.send_to = monsterinsights_frontend.v4_id;
							var hookName = name;
							if (typeof parameters['event_category'] !== 'undefined') {
								hookName = parameters['event_category'] + ':' + name;
							}

							if (typeof MonsterInsightsDualTracker.trackers[hookName] !== 'undefined') {
								MonsterInsightsDualTracker.trackers[hookName](parameters);
							} else {
								__gtagDataLayer('event', name, parameters);
							}
							
						} else {
							__gtagDataLayer.apply(null, arguments);
						}
					}

					__gtagTracker('js', new Date());
					__gtagTracker('set', {
						'developer_id.dZGIzZG': true,
											});
					if ( MonsterInsightsLocations.page_location ) {
						__gtagTracker('set', MonsterInsightsLocations);
					}
										__gtagTracker('config', 'G-GSVBRGE9D6', {"forceSSL":"true","link_attribution":"true"} );
															window.gtag = __gtagTracker;										(function () {
						/* https://developers.google.com/analytics/devguides/collection/analyticsjs/ */
						/* ga and __gaTracker compatibility shim. */
						var noopfn = function () {
							return null;
						};
						var newtracker = function () {
							return new Tracker();
						};
						var Tracker = function () {
							return null;
						};
						var p = Tracker.prototype;
						p.get = noopfn;
						p.set = noopfn;
						p.send = function () {
							var args = Array.prototype.slice.call(arguments);
							args.unshift('send');
							__gaTracker.apply(null, args);
						};
						var __gaTracker = function () {
							var len = arguments.length;
							if (len === 0) {
								return;
							}
							var f = arguments[len - 1];
							if (typeof f !== 'object' || f === null || typeof f.hitCallback !== 'function') {
								if ('send' === arguments[0]) {
									var hitConverted, hitObject = false, action;
									if ('event' === arguments[1]) {
										if ('undefined' !== typeof arguments[3]) {
											hitObject = {
												'eventAction': arguments[3],
												'eventCategory': arguments[2],
												'eventLabel': arguments[4],
												'value': arguments[5] ? arguments[5] : 1,
											}
										}
									}
									if ('pageview' === arguments[1]) {
										if ('undefined' !== typeof arguments[2]) {
											hitObject = {
												'eventAction': 'page_view',
												'page_path': arguments[2],
											}
										}
									}
									if (typeof arguments[2] === 'object') {
										hitObject = arguments[2];
									}
									if (typeof arguments[5] === 'object') {
										Object.assign(hitObject, arguments[5]);
									}
									if ('undefined' !== typeof arguments[1].hitType) {
										hitObject = arguments[1];
										if ('pageview' === hitObject.hitType) {
											hitObject.eventAction = 'page_view';
										}
									}
									if (hitObject) {
										action = 'timing' === arguments[1].hitType ? 'timing_complete' : hitObject.eventAction;
										hitConverted = mapArgs(hitObject);
										__gtagTracker('event', action, hitConverted);
									}
								}
								return;
							}

							function mapArgs(args) {
								var arg, hit = {};
								var gaMap = {
									'eventCategory': 'event_category',
									'eventAction': 'event_action',
									'eventLabel': 'event_label',
									'eventValue': 'event_value',
									'nonInteraction': 'non_interaction',
									'timingCategory': 'event_category',
									'timingVar': 'name',
									'timingValue': 'value',
									'timingLabel': 'event_label',
									'page': 'page_path',
									'location': 'page_location',
									'title': 'page_title',
									'referrer' : 'page_referrer',
								};
								for (arg in args) {
																		if (!(!args.hasOwnProperty(arg) || !gaMap.hasOwnProperty(arg))) {
										hit[gaMap[arg]] = args[arg];
									} else {
										hit[arg] = args[arg];
									}
								}
								return hit;
							}

							try {
								f.hitCallback();
							} catch (ex) {
							}
						};
						__gaTracker.create = newtracker;
						__gaTracker.getByName = newtracker;
						__gaTracker.getAll = function () {
							return [];
						};
						__gaTracker.remove = noopfn;
						__gaTracker.loaded = true;
						window['__gaTracker'] = __gaTracker;
					})();
									} else {
										console.log("");
					(function () {
						function __gtagTracker() {
							return null;
						}

						window['__gtagTracker'] = __gtagTracker;
						window['gtag'] = __gtagTracker;
					})();
									}
			</script>
				<!-- / Google Analytics by MonsterInsights -->
		<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/decoded.avast.io\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.6.2"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://decoded.avast.io/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='syntax-highlighting-code-block-theme-css' href='https://decoded.avast.io/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.5.0' type='text/css' media='all' />
<style id='syntax-highlighting-code-block-inline-css' type='text/css'>
.wp-block-code {
	border: 0;
	padding: 0;
	-webkit-text-size-adjust: 100%;
	text-size-adjust: 100%;
}

.wp-block-code > span {
	display: block;
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}

.hljs > mark.shcb-loc { background-color: #ddf6ff; }
</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--johannes-acc: #ff7900;--wp--preset--color--johannes-meta: #ffffff;--wp--preset--color--johannes-bg: #1c1c1c;--wp--preset--color--johannes-bg-alt-1: #252525;--wp--preset--color--johannes-bg-alt-2: #333333;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 12.8px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 40px;--wp--preset--font-size--x-large: 42px;--wp--preset--font-size--normal: 16px;--wp--preset--font-size--huge: 52px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='johannes-main-css' href='https://decoded.avast.io/wp-content/themes/johannes/assets/css/min.css?ver=1.1.3' type='text/css' media='all' />
<style id='johannes-main-inline-css' type='text/css'>
:root {--color_header_top_bg: #424851;--color_header_top_txt: #989da2;--color_header_top_acc: #ffffff;--color_header_middle_bg: #2d364c;--color_header_middle_txt: #ffffff;--color_header_middle_acc: #ff8000;--color_header_middle_bg_multi: #424851;--color_header_bottom_bg: #ffffff;--color_header_bottom_txt: #424851;--color_header_bottom_acc: #f13b3b;--color_header_sticky_bg: ;--color_header_sticky_txt: ;--color_header_sticky_acc: ;--color_bg: #1c1c1c;--color_bg_dark: #1b1b1b;--color_h: #ffffff;--color_txt: #ffffff;--color_acc: #ff7900;--color_meta: #ffffff;--color_bg_alt_1: #252525;--color_bg_alt_2: #333333;--color_footer_bg: #ffffff;--color_footer_txt: #424851;--color_footer_acc: #f13b3b;--color_footer_meta: #989da2;--color_dark_txt: #1c1c1c;--color_button_txt: #fff;--color_button_hover: #1c1c1c;--color_border: #444;--color_border_light: #7d7d7d;--color_category_events: #ffffff;--color_category_events_dark: #b3b3b3;--color_category_events_light: #ffffff;--color_category_iot: #37eb34;--color_category_iot_dark: #27a525;--color_category_iot_light: #73f171;--color_category_mobile: #066dce;--color_category_mobile_dark: #054d91;--color_category_mobile_light: #5199dd;--color_category_network: #d32b47;--color_category_network_dark: #941f32;--color_category_network_light: #e16b7f;--color_category_other-research: #e5eb34;--color_category_other-research_dark: #a1a525;--color_category_other-research_light: #edf171;--color_category_pc: #f87934;--color_category_pc_dark: #ae5525;--color_category_pc_light: #fba271;--color_category_reports: #858585;--color_category_reports_dark: #5e5e5e;--color_category_reports_light: #aaaaaa;--color_category_uncategorized: #ffffff;--color_category_uncategorized_dark: #b3b3b3;--color_category_uncategorized_light: #ffffff;}.category-pill.johannes-layout-g .entry-category a.category-events {background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));border-bottom: solid 2px var(--color_category_events_light);border-top: solid 2px var(--color_category_events_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-events .entry-title a {border-left: 3px solid var(--color_category_events);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-events:hover .entry-title a,.widget_categories li.category-events a {color: var(--color_category_events_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-events,.header-layout-11 .slot-r>nav>ul>li.category-events,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events,.widget_categories li.category-events a {border: 2px solid var(--color_category_events_light);background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-events:hover,.header-layout-11 .slot-r>nav>ul>li.category-events:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events:hover,.widget_categories li.category-events a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_events_light);}.category-pill.johannes-layout-g .entry-category a.category-iot {background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));border-bottom: solid 2px var(--color_category_iot_light);border-top: solid 2px var(--color_category_iot_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-iot .entry-title a {border-left: 3px solid var(--color_category_iot);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-iot:hover .entry-title a,.widget_categories li.category-iot a {color: var(--color_category_iot_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-iot,.header-layout-11 .slot-r>nav>ul>li.category-iot,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot,.widget_categories li.category-iot a {border: 2px solid var(--color_category_iot_light);background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot:hover,.widget_categories li.category-iot a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_iot_light);}.category-pill.johannes-layout-g .entry-category a.category-mobile {background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));border-bottom: solid 2px var(--color_category_mobile_light);border-top: solid 2px var(--color_category_mobile_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-mobile .entry-title a {border-left: 3px solid var(--color_category_mobile);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-mobile:hover .entry-title a,.widget_categories li.category-mobile a {color: var(--color_category_mobile_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile,.header-layout-11 .slot-r>nav>ul>li.category-mobile,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile,.widget_categories li.category-mobile a {border: 2px solid var(--color_category_mobile_light);background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile:hover,.widget_categories li.category-mobile a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_mobile_light);}.category-pill.johannes-layout-g .entry-category a.category-network {background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));border-bottom: solid 2px var(--color_category_network_light);border-top: solid 2px var(--color_category_network_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-network .entry-title a {border-left: 3px solid var(--color_category_network);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-network:hover .entry-title a,.widget_categories li.category-network a {color: var(--color_category_network_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-network,.header-layout-11 .slot-r>nav>ul>li.category-network,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network,.widget_categories li.category-network a {border: 2px solid var(--color_category_network_light);background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-network:hover,.header-layout-11 .slot-r>nav>ul>li.category-network:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network:hover,.widget_categories li.category-network a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_network_light);}.category-pill.johannes-layout-g .entry-category a.category-other-research {background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));border-bottom: solid 2px var(--color_category_other-research_light);border-top: solid 2px var(--color_category_other-research_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-other-research .entry-title a {border-left: 3px solid var(--color_category_other-research);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-other-research:hover .entry-title a,.widget_categories li.category-other-research a {color: var(--color_category_other-research_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research,.header-layout-11 .slot-r>nav>ul>li.category-other-research,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research,.widget_categories li.category-other-research a {border: 2px solid var(--color_category_other-research_light);background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research:hover,.widget_categories li.category-other-research a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_other-research_light);}.category-pill.johannes-layout-g .entry-category a.category-pc {background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));border-bottom: solid 2px var(--color_category_pc_light);border-top: solid 2px var(--color_category_pc_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-pc .entry-title a {border-left: 3px solid var(--color_category_pc);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-pc:hover .entry-title a,.widget_categories li.category-pc a {color: var(--color_category_pc_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-pc,.header-layout-11 .slot-r>nav>ul>li.category-pc,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc,.widget_categories li.category-pc a {border: 2px solid var(--color_category_pc_light);background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc:hover,.widget_categories li.category-pc a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_pc_light);}.category-pill.johannes-layout-g .entry-category a.category-reports {background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));border-bottom: solid 2px var(--color_category_reports_light);border-top: solid 2px var(--color_category_reports_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-reports .entry-title a {border-left: 3px solid var(--color_category_reports);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-reports:hover .entry-title a,.widget_categories li.category-reports a {color: var(--color_category_reports_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-reports,.header-layout-11 .slot-r>nav>ul>li.category-reports,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports,.widget_categories li.category-reports a {border: 2px solid var(--color_category_reports_light);background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports:hover,.widget_categories li.category-reports a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_reports_light);}.category-pill.johannes-layout-g .entry-category a.category-uncategorized {background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));border-bottom: solid 2px var(--color_category_uncategorized_light);border-top: solid 2px var(--color_category_uncategorized_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-uncategorized .entry-title a {border-left: 3px solid var(--color_category_uncategorized);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-uncategorized:hover .entry-title a,.widget_categories li.category-uncategorized a {color: var(--color_category_uncategorized_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized,.widget_categories li.category-uncategorized a {border: 2px solid var(--color_category_uncategorized_light);background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized:hover,.widget_categories li.category-uncategorized a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_uncategorized_light);}body{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;color: var( --color_txt );background: var( --color_bg );}.johannes-header{font-family: 'Muli', Arial, sans-serif;font-weight: 700;font-style: normal;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.wp-block-cover .wp-block-cover-image-text, .wp-block-cover .wp-block-cover-text, .wp-block-cover h2, .wp-block-cover-image .wp-block-cover-image-text, .wp-block-cover-image .wp-block-cover-text, .wp-block-cover-image h2,.entry-category a,.single-md-content .entry-summary,p.has-drop-cap:not(:focus)::first-letter,.johannes_posts_widget .entry-header > a {font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}b,strong,.entry-tags a,.entry-category a,.entry-meta a,.wp-block-tag-cloud a{font-weight: 900; }.entry-content strong{font-weight: bold;}.header-top{background: var( --color_header_top_bg );color: var( --color_header_top_txt );}.header-top nav > ul > li > a,.header-top .johannes-menu-social a{color: var( --color_header_top_txt );}.header-top nav > ul > li:hover > a,.header-top nav > ul > li.current-menu-item > a,.header-top .johannes-menu-social li:hover a{color: var( --color_header_top_acc );}.header-middle,.header-mobile{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-middle > .container {height: 130px;}.header-middle a,.johannes-mega-menu .sub-menu li:hover a,.header-mobile a{color: var( --color_header_middle_txt );}.header-middle li:hover > a,.header-middle .current-menu-item > a,.header-middle .johannes-mega-menu .sub-menu li a:hover,.header-middle .johannes-site-branding .site-title a:hover,.header-mobile .site-title a,.header-mobile a:hover{color: var( --color_header_middle_acc );}.header-middle .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-middle .sub-menu{background: var( --color_header_middle_bg );}.johannes-cover-indent .header-middle .johannes-menu>li>a:hover,.johannes-cover-indent .header-middle .johannes-menu-action a:hover{color: var( --color_header_middle_acc );}.header-sticky-main{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-sticky-main a,.header-sticky-main .johannes-mega-menu .sub-menu li:hover a,.header-sticky-main .johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_middle_txt );}.header-sticky-main li:hover > a,.header-sticky-main .current-menu-item > a,.header-sticky-main .johannes-mega-menu .sub-menu li a:hover,.header-sticky-main .johannes-site-branding .site-title a:hover{color: var( --color_header_middle_acc );}.header-sticky-main .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-sticky-main .sub-menu{background: var( --color_header_middle_bg );}.header-sticky-contextual{color: var( --color_header_middle_bg );background: var( --color_header_middle_txt );}.header-sticky-contextual,.header-sticky-contextual a{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;}.header-sticky-contextual a{color: var( --color_header_middle_bg );}.header-sticky-contextual .meta-comments:after{background: var( --color_header_middle_bg );}.header-sticky-contextual .meks_ess a:hover{color: var( --color_header_middle_acc );background: transparent;}.header-bottom{color: var( --color_header_bottom_txt );background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.johannes-header-bottom-boxed .header-bottom{background: transparent;border: none;}.johannes-header-bottom-boxed .header-bottom-slots{background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.header-bottom-slots{height: 70px;}.header-bottom a,.johannes-mega-menu .sub-menu li:hover a,.johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_bottom_txt );}.header-bottom li:hover > a,.header-bottom .current-menu-item > a,.header-bottom .johannes-mega-menu .sub-menu li a:hover,.header-bottom .johannes-site-branding .site-title a:hover{color: var( --color_header_bottom_acc );}.header-bottom .johannes-site-branding .site-title a{color: var( --color_header_bottom_txt );}.header-bottom .sub-menu{background: var( --color_header_bottom_bg );}.johannes-menu-action .search-form input[type=text]{background: var( --color_bg );}.johannes-header-multicolor .header-middle .slot-l,.johannes-header-multicolor .header-sticky .header-sticky-main .container > .slot-l,.johannes-header-multicolor .header-mobile .slot-l,.johannes-header-multicolor .slot-l .johannes-site-branding:after{background: var( --color_header_middle_bg_multi );}.johannes-cover-indent .johannes-cover{min-height: 450px;}.page.johannes-cover-indent .johannes-cover{min-height: 250px;}.single.johannes-cover-indent .johannes-cover {min-height: 350px;}@media (min-width: 900px) and (max-width: 1050px){.header-middle > .container {height: 100px;}.header-bottom > .container,.header-bottom-slots {height: 50px;}}.johannes-modal{background: var( --color_bg );}.johannes-modal .johannes-menu-social li a:hover,.meks_ess a:hover{background: var( --color_txt );}.johannes-modal .johannes-menu-social li:hover a{color: var( --color_button_hover );}.johannes-modal .johannes-modal-close{color: var( --color_txt );}.johannes-modal .johannes-modal-close:hover{color: var( --color_acc );}.meks_ess a:hover{color: var( --color_bg );}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.has-large-font-size {color: var( --color_h );}.entry-title a,a{color: var( --color_txt );}.johannes-post .entry-title a{color: var( --color_h );}.entry-content a:not([class*=button]),.comment-content a:not([class*=button]){color: var( --color_acc );}.entry-content a:not([class*=button]):hover,.comment-content a:not([class*=button]):hover{color: var( --color_txt );}.entry-title a:hover,a:hover,.entry-meta a,.written-by a,.johannes-overlay .entry-meta a:hover,body .johannes-cover .section-bg+.container .johannes-breadcrumbs a:hover,.johannes-cover .section-bg+.container .section-head a:not(.johannes-button):not(.cat-item):hover,.entry-content .wp-block-tag-cloud a:hover{color: var( --color_acc );}.entry-meta,.entry-content .entry-tags a,.entry-content .fn a,.comment-metadata,.entry-content .comment-metadata a,.written-by > span,.johannes-breadcrumbs{color: var( --color_meta );}.entry-meta a:hover,.written-by a:hover,.entry-content .wp-block-tag-cloud a{color: var( --color_txt );}.entry-meta .meta-item + .meta-item:before{background:var( --color_txt );}.entry-format i{color: var( --color_bg );background:var( --color_txt );}.category-pill .entry-category a{background-color: var( --color_acc );color: var( --color_button_txt );}.category-pill .entry-category a:hover{background-color: var( --color_txt );color: var( --color_button_hover );}.johannes-overlay.category-pill .entry-category a:hover,.johannes-cover.category-pill .entry-category a:hover {background-color: #ffffff;color: var( --color_dark_txt );}.white-bg-alt-2 .johannes-bg-alt-2 .category-pill .entry-category a:hover,.white-bg-alt-2 .johannes-bg-alt-2 .entry-format i{background-color: #ffffff;color: var( --color_dark_txt );}.media-shadow:after{background: rgba(255,255,255,0.1);}.entry-content .entry-tags a:hover,.entry-content .fn a:hover{color: var( --color_acc );}.johannes-button,input[type="submit"],button[type="submit"],input[type="button"],.wp-block-button .wp-block-button__link,.comment-reply-link,#cancel-comment-reply-link,.johannes-pagination a,.johannes-pagination,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.category-pill .entry-category a{font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}.johannes-bg-alt-1,.has-arrows .owl-nav,.has-arrows .owl-stage-outer:after,.media-shadow:after {background-color: #252525}.johannes-bg-alt-2 {background-color: #333333}.johannes-button-primary,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a{box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);background: var( --color_acc );color: var( --color_button_txt );}.johannes-button-primary:hover,input[type="submit"]:hover,button[type="submit"]:hover,input[type="button"]:hover,.johannes-pagination a:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);color: var( --color_button_txt );}.johannes-button.disabled{background: var( --color_bg_alt_1 );color: var( --color_txt ); box-shadow: none;}.johannes-button-secondary,.comment-reply-link,#cancel-comment-reply-link,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a{box-shadow: inset 0 0px 0px 1px var( --color_txt );color: var( --color_txt );opacity: .5;}.johannes-button-secondary:hover,.comment-reply-link:hover,#cancel-comment-reply-link:hover,.meks-instagram-follow-link .meks-widget-cta:hover,.mks_autor_link_wrap a:hover,.mks_read_more a:hover{box-shadow: inset 0 0px 0px 1px var( --color_acc ); opacity: 1;color: var( --color_acc );}.johannes-breadcrumbs a,.johannes-action-close:hover,.single-md-content .entry-summary span,form label .required{color: var( --color_acc );}.johannes-breadcrumbs a:hover{color: var( --color_txt );}.section-title:after{background-color: var( --color_acc );}hr{background: rgba(255,255,255,0.2);}.wp-block-preformatted,.wp-block-verse,pre,code, kbd, pre, samp, address{background:var( --color_bg_alt_1 );}.entry-content ul li:before,.wp-block-quote:before,.comment-content ul li:before{color: var( --color_txt );}.wp-block-quote.is-large:before{color: var( --color_acc );}.wp-block-table.is-style-stripes tr:nth-child(odd){background:var( --color_bg_alt_1 );}.wp-block-table.is-style-regular tbody tr,.entry-content table tr,.comment-content table tr{border-bottom: 1px solid rgba(255,255,255,0.1);}.wp-block-pullquote:not(.is-style-solid-color){color: var( --color_txt );border-color: var( --color_acc );}.wp-block-pullquote{background: var( --color_acc );color: var( --color_bg );}.johannes-sidebar-none .wp-block-pullquote.alignfull.is-style-solid-color{box-shadow: -526px 0 0 #ff7900, -1052px 0 0 #ff7900,526px 0 0 #ff7900, 1052px 0 0 var( --color_acc );}.wp-block-button .wp-block-button__link{background: var( --color_acc );color: var( --color_button_txt );box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);}.wp-block-button .wp-block-button__link:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);}.is-style-outline .wp-block-button__link {background: 0 0;color:var( --color_acc );border: 2px solid currentcolor;}.entry-content .is-style-solid-color a:not([class*=button]){color:var( --color_bg );}.entry-content .is-style-solid-color a:not([class*=button]):hover{color:var( --color_txt );}input[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=range], input[type=search], input[type=tel], input[type=text], input[type=time], input[type=url], input[type=week], select, textarea{border: 1px solid rgba(255,255,255,0.3);}body .johannes-wrapper .meks_ess{border-color: rgba(255,255,255,0.1); }.widget_eu_cookie_law_widget #eu-cookie-law input, .widget_eu_cookie_law_widget #eu-cookie-law input:focus, .widget_eu_cookie_law_widget #eu-cookie-law input:hover{background: var( --color_acc );color: var( --color_button_txt );}.double-bounce1, .double-bounce2{background-color: var( --color_acc );}.johannes-pagination .page-numbers.current,.paginated-post-wrapper span{background: var( --color_bg_alt_1 );color: var( --color_txt );}.widget li{color: rgba(255,255,255,0.8);}.widget_calendar #today a{color: #fff;}.widget_calendar #today a{background: var( --color_acc );}.tagcloud a{border-color: rgba(255,255,255,0.5);color: rgba(255,255,255,0.8);}.tagcloud a:hover{color: var( --color_acc );border-color: var( --color_acc );}.rssSummary,.widget p{color: var( --color_txt );}.johannes-bg-alt-1 .count,.johannes-bg-alt-1 li a,.johannes-bg-alt-1 .johannes-accordion-nav{background-color: var( --color_bg_alt_1 );}.johannes-bg-alt-2 .count,.johannes-bg-alt-2 li a,.johannes-bg-alt-2 .johannes-accordion-nav,.johannes-bg-alt-2 .cat-item .count, .johannes-bg-alt-2 .rss-date, .widget .johannes-bg-alt-2 .post-date, .widget .johannes-bg-alt-2 cite{background-color: var( --color_bg_alt_2 );color: #FFF;}.white-bg-alt-1 .widget .johannes-bg-alt-1 select option,.white-bg-alt-2 .widget .johannes-bg-alt-2 select option{background: var( --color_bg_alt_2 );}.widget .johannes-bg-alt-2 li a:hover{color: var( --color_acc );}.widget_categories .johannes-bg-alt-1 ul li .dots:before,.widget_archive .johannes-bg-alt-1 ul li .dots:before{color: var( --color_txt );}.widget_categories .johannes-bg-alt-2 ul li .dots:before,.widget_archive .johannes-bg-alt-2 ul li .dots:before{color: #FFF;}.search-alt input[type=search], .search-alt input[type=text], .widget_search input[type=search], .widget_search input[type=text],.mc-field-group input[type=email], .mc-field-group input[type=text]{border-bottom: 1px solid rgba(255,255,255,0.2);}.johannes-sidebar-hidden{background: var( --color_bg );}.johannes-footer{background: var( --color_footer_bg );color: var( --color_footer_txt );}.johannes-footer a,.johannes-footer .widget-title{color: var( --color_footer_txt );}.johannes-footer a:hover{color: var( --color_footer_acc );}.johannes-footer-widgets + .johannes-copyright{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .widget .count,.johannes-footer .widget_categories li a,.johannes-footer .widget_archive li a,.johannes-footer .widget .johannes-accordion-nav{background-color: var( --color_footer_bg );}.footer-divider{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .rssSummary,.johannes-footer .widget p{color: var( --color_footer_txt );}.johannes-empty-message{background: var( --color_bg_alt_1 );}.error404 .h0{color: var( --color_acc );}.johannes-goto-top,.johannes-goto-top:hover{background: var( --color_txt );color: var( --color_bg );}.johannes-ellipsis div{background: var( --color_acc );}.white-bg-alt-2 .johannes-bg-alt-2 .section-subnav .johannes-button-secondary:hover{color: var( --color_acc );}.section-subnav a{color: var( --color_txt );}.johannes-cover .section-subnav a{color: var( --color_button_txt );}.section-subnav a:hover{color: var( --color_acc );}@media(min-width: 600px){.size-johannes-fa-a{ height: 450px !important;}.size-johannes-single-3{ height: 450px !important;}.size-johannes-single-4{ height: 540px !important;}.size-johannes-page-3{ height: 360px !important;}.size-johannes-page-4{ height: 405px !important;}.size-johannes-wa-3{ height: 405px !important;}.size-johannes-wa-4{ height: 567px !important;}.size-johannes-archive-2{ height: 405px !important;}.size-johannes-archive-3{ height: 405px !important;}}@media(min-width: 900px){.size-johannes-a{ height: 484px !important;}.size-johannes-b{ height: 491px !important;}.size-johannes-c{ height: 304px !important;}.size-johannes-d{ height: 194px !important;}.size-johannes-e{ height: 304px !important;}.size-johannes-f{ height: 214px !important;}.size-johannes-fa-a{ height: 500px !important;}.size-johannes-fa-b{ height: 635px !important;}.size-johannes-fa-c{ height: 540px !important;}.size-johannes-fa-d{ height: 344px !important;}.size-johannes-fa-e{ height: 442px !important;}.size-johannes-single-1{ height: 484px !important;}.size-johannes-single-2{ height: 484px !important;}.size-johannes-single-3{ height: 500px !important;}.size-johannes-single-4{ height: 600px !important;}.size-johannes-single-5{ height: 442px !important;}.size-johannes-page-1{ height: 484px !important;}.size-johannes-page-2{ height: 484px !important;}.size-johannes-page-3{ height: 400px !important;}.size-johannes-page-4{ height: 450px !important;}.size-johannes-wa-1{ height: 442px !important;}.size-johannes-wa-2{ height: 304px !important;}.size-johannes-wa-3{ height: 450px !important;}.size-johannes-wa-4{ height: 630px !important;}.size-johannes-archive-2{ height: 450px !important;}.size-johannes-archive-3{ height: 450px !important;}}@media(min-width: 900px){.has-small-font-size{ font-size: 1.3rem;}.has-normal-font-size{ font-size: 1.6rem;}.has-large-font-size{ font-size: 4.0rem;}.has-huge-font-size{ font-size: 5.2rem;}}.has-johannes-acc-background-color{ background-color: #ff7900;}.has-johannes-acc-color{ color: #ff7900;}.has-johannes-meta-background-color{ background-color: #ffffff;}.has-johannes-meta-color{ color: #ffffff;}.has-johannes-bg-background-color{ background-color: #1c1c1c;}.has-johannes-bg-color{ color: #1c1c1c;}.has-johannes-bg-alt-1-background-color{ background-color: #252525;}.has-johannes-bg-alt-1-color{ color: #252525;}.has-johannes-bg-alt-2-background-color{ background-color: #333333;}.has-johannes-bg-alt-2-color{ color: #333333;}body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:3rem;}h1, .h1{font-size:2.6rem;}h2, .h2{font-size:2.4rem;}h3, .h3{font-size:2.2rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2rem;}h5, .h5{font-size:1.8rem;}h6, .h6{font-size:1.6rem;}.entry-meta{font-size:1.2rem;}.section-title {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.mks_author_widget h3{font-size:2.2rem;}.widget,.johannes-breadcrumbs{font-size:1.4rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.2rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 2.6rem;}.johannes-cover-indent .johannes-cover{margin-top: -70px;}.johannes-menu-social li a:after, .menu-social-container li a:after{font-size:1.6rem;}.johannes-modal .johannes-menu-social li>a:after,.johannes-menu-action .jf{font-size:2.4rem;}.johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.johannes-button-medium,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.wp-block-button .wp-block-button__link{font-size:1.3rem;}.johannes-button-small,.comment-reply-link,#cancel-comment-reply-link{font-size:1.2rem;}.category-pill .entry-category a,.category-pill-small .entry-category a{font-size:1.1rem;}@media (min-width: 600px){ .johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.wp-block-button .wp-block-button__link{font-size:1.4rem;}.category-pill .entry-category a{font-size:1.4rem;}.category-pill-small .entry-category a{font-size:1.1rem;}}@media (max-width: 374px){.johannes-overlay .h1,.johannes-overlay .h2,.johannes-overlay .h3,.johannes-overlay .h4,.johannes-overlay .h5{font-size: 2.2rem;}}@media (max-width: 600px){ .johannes-layout-fa-d .h5{font-size: 2.4rem;}.johannes-layout-f.category-pill .entry-category a{background-color: transparent;color: var( --color_acc );}.johannes-layout-c .h3,.johannes-layout-d .h5{font-size: 2.4rem;}.johannes-layout-f .h3{font-size: 1.8rem;}}@media (min-width: 600px) and (max-width: 1050px){ .johannes-layout-fa-c .h2{font-size:3.6rem;}.johannes-layout-fa-d .h5{font-size:2.4rem;}.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:5.2rem;}}@media (max-width: 1050px){ body.single-post .single-md-content{max-width: 766px;width: 100%;}body.page .single-md-content.col-lg-6,body.page .single-md-content.col-lg-6{flex: 0 0 100%}body.page .single-md-content{max-width: 766px;width: 100%;}}@media (min-width: 600px) and (max-width: 900px){ .display-1{font-size:4.6rem;}h1, .h1{font-size:4rem;}h2, .h2,.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:3.2rem;}h3, .h3,.johannes-layout-fa-c .h2,.johannes-layout-fa-d .h5,.johannes-layout-d .h5,.johannes-layout-e .h2{font-size:2.8rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2.4rem;}h5, .h5{font-size:2rem;}h6, .h6{font-size:1.8rem;}.section-title {font-size:3.2rem;}.johannes-section.wa-layout .display-1{font-size: 3rem;}.johannes-layout-f .h3{font-size: 3.2rem}.johannes-site-branding .site-title.logo-img-none{font-size: 3rem;}}@media (min-width: 900px){ body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:5.2rem;}h1, .h1 {font-size:5.2rem;}h2, .h2 {font-size:4.0rem;}h3, .h3 {font-size:3.6rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2 {font-size:3.2rem;}h5, .h5 {font-size:2.8rem;}h6, .h6 {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.section-title{font-size:4.0rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.6rem;}.johannes-section-instagram .h2{font-size: 3rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 4rem;}.entry-meta{font-size:1.4rem;}.johannes-cover-indent .johannes-cover {margin-top: -130px;}.johannes-cover-indent .johannes-cover .section-head{top: 32.5px;}}.section-description .search-alt input[type=text],.search-alt input[type=text]{color: var( --color_txt );}::-webkit-input-placeholder {color: rgba(255,255,255,0.5);}::-moz-placeholder {color: rgba(255,255,255,0.5);}:-ms-input-placeholder {color: rgba(255,255,255,0.5);}:-moz-placeholder{color: rgba(255,255,255,0.5);}.section-description .search-alt input[type=text]::-webkit-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]::-moz-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-ms-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-moz-placeholder{color: var( --color_txt );}.section-description .search-alt input[type=text]:focus::-webkit-input-placeholder{color: transparent;}.section-description .search-alt input[type=text]:focus::-moz-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-ms-input-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-moz-placeholder{color: transparent;}
</style>
<link rel='stylesheet' id='avast-common-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/common.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='avast-theme-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/dark.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='font_awesome-css' href='https://kit.fontawesome.com/a2abe1aedb.js?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='johannes-fonts-css' href='https://fonts.googleapis.com/css?family=Muli%3Aregular%2C900%2C700&#038;ver=1.1.3' type='text/css' media='all' />
<link rel='stylesheet' id='meks_ess-main-css' href='https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/css/main.css?ver=1.3' type='text/css' media='all' />
<script type="text/javascript">
            window._nslDOMReady = function (callback) {
                if ( document.readyState === "complete" || document.readyState === "interactive" ) {
                    callback();
                } else {
                    document.addEventListener( "DOMContentLoaded", callback );
                }
            };
            </script><script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/google-analytics-for-wordpress/assets/js/frontend-gtag.min.js?ver=9.1.1" id="monsterinsights-frontend-script-js" async="async" data-wp-strategy="async"></script>
<script data-cfasync="false" data-wpfc-render="false" type="text/javascript" id='monsterinsights-frontend-script-js-extra'>/* <![CDATA[ */
var monsterinsights_frontend = {"js_events_tracking":"true","download_extensions":"doc,pdf,ppt,zip,xls,docx,pptx,xlsx","inbound_paths":"[{\"path\":\"\\\/go\\\/\",\"label\":\"affiliate\"},{\"path\":\"\\\/recommend\\\/\",\"label\":\"affiliate\"}]","home_url":"https:\/\/decoded.avast.io","hash_tracking":"false","v4_id":"G-GSVBRGE9D6"};/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://decoded.avast.io/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://decoded.avast.io/wp-json/wp/v2/posts/3885" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://decoded.avast.io/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.6.2" />
<link rel='shortlink' href='https://decoded.avast.io/?p=3885' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fmartinchlumecky%2Fdirtymoe-rootkit-driver%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fmartinchlumecky%2Fdirtymoe-rootkit-driver%2F&#038;format=xml" />
        <script type="text/javascript" id="avast-theme-switch">
			function getCookie(cname) {
			  var name = cname + "=";
			  var decodedCookie = decodeURIComponent(document.cookie);
			  var ca = decodedCookie.split(';');
			  for(var i = 0; i <ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
				  c = c.substring(1);
				}
				if (c.indexOf(name) == 0) {
				  return c.substring(name.length, c.length);
				}
			  }
			  return "";
			}
			
			function setCookie(cname, cvalue, exdays) {
			  var d = new Date();
			  d.setTime(d.getTime() + (exdays*24*60*60*1000));
			  var expires = "expires="+ d.toUTCString();
			  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
			}
			
			function toggleTheme()
			{
				theme_cookie = getCookie("avast_theme");
				if (!theme_cookie) {console.log("theme cookie is null");theme_cookie = "dark";}
				theme_cookie = (theme_cookie != "dark" ? 'dark' : 'light');
				setTheme(theme_cookie);
			}
			
			function setTheme(theme)
			{
				console.log("settin theme to " + theme);
				const theme_element = document.querySelector('#avast-theme-css');
				theme_cookie = (theme_cookie == "dark" ? 'dark' : 'light');
				theme_element.setAttribute('href', "https://decoded.avast.io/wp-content/themes/johannes-avast/css/" + theme_cookie + ".css");
				setCookie("avast_theme", theme_cookie, 10*365);
			}
			
			theme_cookie = getCookie("avast_theme");
			if (!theme_cookie) {theme_cookie = "dark";}
			setTheme(theme_cookie);
		</script>
    <link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-32x32.png" sizes="32x32" />
<link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-180x180.png" />
<meta name="msapplication-TileImage" content="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-270x270.png" />
<style type="text/css">div.nsl-container[data-align="left"] {
    text-align: left;
}

div.nsl-container[data-align="center"] {
    text-align: center;
}

div.nsl-container[data-align="right"] {
    text-align: right;
}


div.nsl-container div.nsl-container-buttons a[data-plugin="nsl"] {
    text-decoration: none;
    box-shadow: none;
    border: 0;
}

div.nsl-container .nsl-container-buttons {
    display: flex;
    padding: 5px 0;
}

div.nsl-container.nsl-container-block .nsl-container-buttons {
    display: inline-grid;
    grid-template-columns: minmax(145px, auto);
}

div.nsl-container-block-fullwidth .nsl-container-buttons {
    flex-flow: column;
    align-items: center;
}

div.nsl-container-block-fullwidth .nsl-container-buttons a,
div.nsl-container-block .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px 0;
    width: 100%;
}

div.nsl-container-inline {
    margin: -5px;
    text-align: left;
}

div.nsl-container-inline .nsl-container-buttons {
    justify-content: center;
    flex-wrap: wrap;
}

div.nsl-container-inline .nsl-container-buttons a {
    margin: 5px;
    display: inline-block;
}

div.nsl-container-grid .nsl-container-buttons {
    flex-flow: row;
    align-items: center;
    flex-wrap: wrap;
}

div.nsl-container-grid .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px;
    max-width: 280px;
    width: 100%;
}

@media only screen and (min-width: 650px) {
    div.nsl-container-grid .nsl-container-buttons a {
        width: auto;
    }
}

div.nsl-container .nsl-button {
    cursor: pointer;
    vertical-align: top;
    border-radius: 4px;
}

div.nsl-container .nsl-button-default {
    color: #fff;
    display: flex;
}

div.nsl-container .nsl-button-icon {
    display: inline-block;
}

div.nsl-container .nsl-button-svg-container {
    flex: 0 0 auto;
    padding: 8px;
    display: flex;
    align-items: center;
}

div.nsl-container svg {
    height: 24px;
    width: 24px;
    vertical-align: top;
}

div.nsl-container .nsl-button-default div.nsl-button-label-container {
    margin: 0 24px 0 12px;
    padding: 10px 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 20px;
    letter-spacing: .25px;
    overflow: hidden;
    text-align: center;
    text-overflow: clip;
    white-space: nowrap;
    flex: 1 1 auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-transform: none;
    display: inline-block;
}

div.nsl-container .nsl-button-google[data-skin="dark"] .nsl-button-svg-container {
    margin: 1px;
    padding: 7px;
    border-radius: 3px;
    background: #fff;
}

div.nsl-container .nsl-button-google[data-skin="light"] {
    border-radius: 1px;
    box-shadow: 0 1px 5px 0 rgba(0, 0, 0, .25);
    color: RGBA(0, 0, 0, 0.54);
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container {
    padding: 0 6px;
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container svg {
    height: 40px;
    width: auto;
}

div.nsl-container .nsl-button-apple[data-skin="light"] {
    color: #000;
    box-shadow: 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="white"] {
    color: #000;
    box-shadow: inset 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="light"] {
    color: #1877F2;
    box-shadow: inset 0 0 0 1px #1877F2;
}

div.nsl-container .nsl-button-spotify[data-skin="white"] {
    color: #191414;
    box-shadow: inset 0 0 0 1px #191414;
}

div.nsl-container .nsl-button-apple div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack[data-skin="light"] {
    color: #000000;
    box-shadow: inset 0 0 0 1px #DDDDDD;
}

div.nsl-container .nsl-button-tiktok[data-skin="light"] {
    color: #161823;
    box-shadow: 0 0 0 1px rgba(22, 24, 35, 0.12);
}


div.nsl-container .nsl-button-kakao {
    color: rgba(0, 0, 0, 0.85);
}

.nsl-clear {
    clear: both;
}

.nsl-container {
    clear: both;
}

.nsl-disabled-provider .nsl-button {
    filter: grayscale(1);
    opacity: 0.8;
}

/*Button align start*/

div.nsl-container-inline[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-inline[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-inline[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}


div.nsl-container-grid[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-grid[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-grid[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}

div.nsl-container-grid[data-align="space-around"] .nsl-container-buttons {
    justify-content: space-around;
}

div.nsl-container-grid[data-align="space-between"] .nsl-container-buttons {
    justify-content: space-between;
}

/* Button align end*/

/* Redirect */

#nsl-redirect-overlay {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 1000000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(1px);
    background-color: RGBA(0, 0, 0, .32);;
}

#nsl-redirect-overlay-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
}

#nsl-redirect-overlay-spinner {
    content: '';
    display: block;
    margin: 20px;
    border: 9px solid RGBA(0, 0, 0, .6);
    border-top: 9px solid #fff;
    border-radius: 50%;
    box-shadow: inset 0 0 0 1px RGBA(0, 0, 0, .6), 0 0 0 1px RGBA(0, 0, 0, .6);
    width: 40px;
    height: 40px;
    animation: nsl-loader-spin 2s linear infinite;
}

@keyframes nsl-loader-spin {
    0% {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

#nsl-redirect-overlay-title {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    font-size: 18px;
    font-weight: bold;
    color: #3C434A;
}

#nsl-redirect-overlay-text {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    text-align: center;
    font-size: 14px;
    color: #3C434A;
}

/* Redirect END*/</style><style type="text/css">/* Notice fallback */
#nsl-notices-fallback {
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 10000;
}

.admin-bar #nsl-notices-fallback {
    top: 42px;
}

#nsl-notices-fallback > div {
    position: relative;
    background: #fff;
    border-left: 4px solid #fff;
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
    margin: 5px 15px 2px;
    padding: 1px 20px;
}

#nsl-notices-fallback > div.error {
    display: block;
    border-left-color: #dc3232;
}

#nsl-notices-fallback > div.updated {
    display: block;
    border-left-color: #46b450;
}

#nsl-notices-fallback p {
    margin: .5em 0;
    padding: 2px;
}

#nsl-notices-fallback > div:after {
    position: absolute;
    right: 5px;
    top: 5px;
    content: '\00d7';
    display: block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    text-align: center;
    font-size: 20px;
    cursor: pointer;
}</style>		<style type="text/css" id="wp-custom-css">
			.wp-block-image.has-custom-border img, .wp-block-image img {
    box-sizing: border-box;
    border: 0px solid var(--color_border) !important;
}

.hljs, .hljs-subst {
	color: lightgray;
}		</style>
		<style id="kirki-inline-styles"></style>	</head>

	<body class="post-template-default single single-post postid-3885 single-format-standard wp-embed-responsive johannes-cover-indent 6 johannes-sidebar-none white-bg-alt-1 white-bg-alt-2 johannes-header-no-margin johannes-header-labels-hidden johannes-footer-margin johannes-v_1_1_3 johannes-child">

	<div class="johannes-wrapper">

	    		    
		    <header class="johannes-header johannes-header-main d-none d-lg-block">
		    	
		        <div class="header-middle header-layout-11">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png, https://storage.googleapis.com/wordpress-salat-test/sites/2/2019/06/Asset-22ldpi-1.png 2x"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
		<div class="slot-r">
			<div class="slot-r-top">
									    <nav class="menu-main-menu-container"><ul id="menu-main-menu" class="johannes-menu johannes-menu-primary"><li id="menu-item-367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li id="menu-item-369" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li id="menu-item-370" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li id="menu-item-371" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>																			<ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
												</div>
			<div class="slot-r-bottom">
															<ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>												</div>
		</div>
    </div>
</div>		    	
		    </header>

		    <div class="johannes-header header-mobile d-lg-none">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
        <div class="slot-r">
            <ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
        </div>
    </div>
</div>
		    
	    

            <div class="johannes-section category-pill johannes-cover johannes-bg-alt-2 johannes-section-margin-alt size-johannes-single-3">
    
                <div class="section-bg">
            <img width="1920" height="500" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1-1920x500.jpg" class="attachment-johannes-single-3 size-johannes-single-3 wp-post-image" alt="" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1.jpg 1920w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1-300x78.jpg 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1-1024x267.jpg 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1-768x200.jpg 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/DirtyMoe-2-1920x500-1-1536x400.jpg 1536w" sizes="(max-width: 1920px) 100vw, 1920px" />                        </div>
        
    <div class="container">
        <div class="section-head johannes-content-alt section-head-alt">
                                      <h1 class="entry-title">DirtyMoe: Rootkit Driver</h1>                            <div class="entry-meta">
                    <span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/martinchlumecky/">Martin Chlumecký</a></span></span><span class="meta-item meta-date"><span class="updated">August 11, 2021</span></span><span class="meta-item meta-rtime">38 min read</span>                </div>
                    </div>
    </div>
</div>


<div class="johannes-section">
    <div class="container">
        <div class="section-content row justify-content-center">
            
            
            <div class="col-12 col-lg-8 single-md-content col-md-special johannes-order-1 ">
                 
                <article id="post-3885" class="post-3885 post type-post status-publish format-standard has-post-thumbnail hentry tag-dirtymoe tag-rootkit tag-series category-pc">

                    
                    
                    
                    <div class="entry-content entry-single clearfix">
                        
<p class="has-normal-font-size"><strong>Abstract</strong></p>



<p class="has-normal-font-size">In the first post <a href="https://decoded.avast.io/martinchlumecky/dirtymoe-1/">DirtyMoe: Introduction and General Overview of Modularized Malware</a>, we have described one of the complex and sophisticated malware called DirtyMoe. The main observed roles of the malware are Cryptojacking and DDoS attacks that are still popular. There is no doubt that malware has been released for profit, and all evidence points to Chinese territory. In most cases, the PurpleFox campaign is used to exploit vulnerable systems where the exploit gains the highest privileges and installs the malware via the MSI installer. In short, the installer misuses Windows System Event Notification Service (SENS) for the malware deployment. At the end of the deployment, two processes (workers) execute malicious activities received from well-concealed C&amp;C servers.</p>



<p class="has-normal-font-size">As we mentioned in the <a href="https://decoded.avast.io/martinchlumecky/dirtymoe-1/">first post</a>, every good malware must implement a set of protection, anti-forensics, anti-tracking, and anti-debugging techniques. One of the most used techniques for hiding malicious activity is using rootkits. In general, the main goal of the rootkits is to hide itself and other modules of the hosted malware on the kernel layer. The rootkits are potent tools but carry a high risk of being detected because the rootkits work in the kernel-mode, and each critical bug leads to BSoD.</p>



<p class="has-normal-font-size">The primary aim of this next article is to analyze rootkit techniques that DirtyMoe uses. The main part of this study examines the functionality of a DirtyMoe driver, aiming to provide complex information about the driver in terms of static and dynamic analysis. The key techniques of the DirtyMoe rootkit can be listed as follows: the driver can hide itself and other malware activities on kernel and user mode. Moreover, the driver can execute commands received from the user-mode under the kernel privileges. Another significant aspect of the driver is an injection of an arbitrary DLL file into targeted processes. Last but not least is the driver&#8217;s functionality that censors the file system content. In the same way, we describe the refined routine that deploys the driver into the kernel and which anti-forensic method the malware authors used.</p>



<p class="has-normal-font-size">Another essential point of this research is the investigation of the driver&#8217;s meta-data, which showed that the driver is code-signed with the certificates that have been stolen and revoked in the past. However, the certificates are widespread in the wild and are misused in other malicious software in the present.</p>



<p class="has-normal-font-size">Finally, the last part summarises the rootkit functionally and draws together the key findings of digital certificates, making a link between DirtyMoe and other malicious software. In addition, we discuss the implementation level and sources of the used rootkit techniques.</p>



<h1 class="wp-block-heading">1. Sample</h1>



<p class="has-normal-font-size">The subject of this research is a sample with SHA-256:<br><code>AABA7DB353EB9400E3471EAAA1CF0105F6D1FAB0CE63F1A2665C8BA0E8963A05</code><br>The sample is a windows driver that DirtyMoe drops on the system startup.</p>



<p class="has-normal-font-size"><em>Note: VirusTotal keeps a record of 44 of 71 AV engines (62 %) which detect the samples as malicious. On the other hand, the DirtyMoe DLL file is detected by 86 % of registered AVs. Therefore, the detection coverage is sufficient since the driver is dumped from the DLL file.</em></p>



<h6 class="wp-block-heading"><strong>Basic Information</strong></h6>



<ul id="block-fe52ea47-ef46-4816-a37f-ca7db6c5baa3" class="has-normal-font-size wp-block-list"><li>File Type: Portable Executable 64</li><li>File Info: Microsoft Visual C++ 8.0 (Driver)</li><li>File Size: 116.04 KB (118824 bytes)</li><li>Digital Signature: Shanghai Yulian Software Technology Co., Ltd. (上海域联软件技术有限公司)</li></ul>



<h6 class="wp-block-heading"><strong>Imports</strong></h6>



<p class="has-normal-font-size">The driver imports two libraries <code>FltMgr</code> and <code>ntosrnl</code>. <strong>Table 1</strong> summarizes the most suspicious methods from the driver&#8217;s point.</p>



<figure class="wp-block-table is-style-regular"><table class="has-fixed-layout"><tbody><tr><td><strong>Routine</strong></td><td><strong>Description</strong></td></tr><tr><td><code>FltSetCallbackDataDirty</code></td><td>A minifilter driver&#8217;s pre or post operation calls the routine to indicate that it has modified the contents of the callback data structure.</td></tr><tr><td><code>FltGetRequestorProcessId</code></td><td>Routine returns the process ID for the process requested for a given I/O operation.</td></tr><tr><td><code>FltRegisterFilter</code></td><td>FltRegisterFilter registers a minifilter driver.</td></tr><tr><td><code>ZwDeleteValueKey</code><br><code>ZwSetValueKey</code><br><code>ZwQueryValueKey</code><br><code>ZwOpenKey</code></td><td>Routines delete, set, query, and open registry entries in kernel-mode.</td></tr><tr><td><code>ZwTerminateProcess</code></td><td>Routine terminates a process and all of its threads in kernel-mode.</td></tr><tr><td><code>ZwQueryInformationProcess</code></td><td>Retrieves information about the specified process.</td></tr><tr><td><code>MmGetSystemRoutineAddress</code></td><td>Returns a pointer to a function specified by a routine parameter.</td></tr><tr><td><code>ZwAllocateVirtualMemory</code></td><td>Reserves a range of application-accessible virtual addresses in the specified process in kernel-mode.</td></tr></tbody></table><figcaption><strong>Table 1</strong>. Kernel methods imported by the DirtyMoe driver</figcaption></figure>



<p class="has-normal-font-size">At first glance, the driver looks up kernel routine via <code>MmGetSystemRoutineAddress()</code> as a form of obfuscation since the string table contains routine names operating with <code>VirtualMemory</code>; e.g., <code>ZwProtectVirtualMemory()</code>, <code>ZwReadVirtualMemory()</code>, <code>ZwWriteVirtualMemory()</code>. The kernel-routine <code>ZwQueryInformationProcess()</code> and strings such as <code>services.exe</code>, <code>winlogon.exe</code> point out that the rootkit probably works with kernel structures of the critical windows processes.</p>



<h1 class="wp-block-heading">2. DirtyMoe Driver Analysis</h1>



<p class="has-normal-font-size">The DirtyMoe driver does not execute any specific malware activities. However, it provides a wide scale of rootkit and backdoor techniques. The driver has been designed as a service support system for the DirtyMoe service in the user-mode.</p>



<p class="has-normal-font-size">The driver can perform actions originally needed with high privileges, such as writing a file into the system folder, writing to the system registry, killing an arbitrary process, etc. The malware in the user-mode just sends a defined control code, and data to the driver and it provides higher privilege actions.</p>



<p class="has-normal-font-size">Further, the malware can use the driver to hide some records helping to mask malicious activities. The driver affects the system registry, and can conceal arbitrary keys. Moreover, the system process <code>services.exe</code> is patched in its memory, and the driver can exclude arbitrary services from the list of running services. Additionally, the driver modifies the kernel structures recording loaded drivers, so the malware can choose which driver is visible or not. Therefore, the malware is active, but the system and user cannot list the malware records using standard API calls to enumerate the system registry, services, or loaded drivers. The malware can also hide requisite files stored in the file system since the driver implements a mechanism of the minifilter. Consequently, if a user requests a record from the file system, the driver catches this request and can affect the query result that is passed to the user.</p>



<p class="has-normal-font-size">The driver<strong> </strong>consists of 10 main functionalities as <strong>Table 2</strong> illustrates.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>Function</strong></td><td><strong>Description</strong></td></tr><tr><td><a href="#tl-driver-entry">Driver Entry</a></td><td>routine called by the kernel when the driver is loaded.</td></tr><tr><td><a href="#tl-start-routine">Start Routine</a></td><td>is run as a kernel thread restoring the driver configuration from the system registry.</td></tr><tr><td><a href="#tl-device-control">Device Control</a></td><td>processes system-defined I/O control codes (IOCTLs) controlling the driver from the user-mode.</td></tr><tr><td><a href="#tl-minifilter">Minifilter Driver</a></td><td>routine completes processing for one or more types of I/O operations; <em>QueryDirectory</em> in this case. In other words, the routine filters folder enumerations.</td></tr><tr><td><a href="#tl-thread-notification">Thread Notification</a></td><td>routine registers a driver-supplied callback that is notified when a new thread is created.</td></tr><tr><td><a href="#tl-callback-ntfs">Callback of NTFS Driver</a></td><td>wraps the original callback of the NTFS driver for <code>IRP_MJ_CREATE</code> major function.</td></tr><tr><td><a href="#tl-registry-hiding">Registry Hiding</a></td><td>is hook method provides registry key hiding.</td></tr><tr><td><a href="#tl-service-hiding">Service Hiding</a></td><td>is a routine hiding a defined service.</td></tr><tr><td><a href="#tl-driver-hiding">Driver Hiding</a></td><td>is a routine hiding a defined driver.</td></tr><tr><td><a href="#tl-driver-unload">Driver Unload</a></td><td>routine is called by kernel when the driver is unloaded.</td></tr></tbody></table><figcaption><strong>Table 2</strong>. Main driver functionality</figcaption></figure>



<p class="has-normal-font-size">Most of the implemented functionalities are available as public samples on internet forums. The level of programming skills is different for each driver functionality. It seems that the driver author merged the public samples in most cases. Therefore, the driver contains a few bugs and unused code. The driver is still in development, and we will probably find other versions in the wild.</p>



<h2 class="wp-block-heading" id="tl-driver-entry">2.1 Driver Entry</h2>



<p class="has-normal-font-size">The <em>Driver Entry</em> is the first routine that is called by the kernel after driver loading. The driver initializes a large number of global variables for the proper operation of the driver. Firstly, the driver detects the OS version and setups required offsets for further malicious use. Secondly, the variable for pointing of the <em>driver image</em> is initialized. The <em>driver image</em> is used for hiding a driver. The driver also associates the following major functions:</p>



<ol class="has-normal-font-size wp-block-list"><li><code>IRP_MJ_CREATE</code>, <code>IRP_MJ_CLOSE</code> &#8211; no interest action,</li><li><code>IRP_MJ_DEVICE_CONTROL</code> &#8211; used for driver configuration and control,</li><li><code>IRP_MJ_SHUTDOWN</code> &#8211; writes malware-defined data into the disk and registry.</li></ol>



<p class="has-normal-font-size">The <em>Driver Entry</em> creates a symbolic link to the driver and tries to associate it with other malicious monitoring or filtering callbacks. The first one is a minifilter activated by the <code>FltRegisterFilter()</code> method registering the <code>FltPostOperation()</code>; it filters access to the system drives and allows it to hide files and directories.</p>



<p class="has-normal-font-size">Further, the initialization method swaps a major function <code>IRP_MJ_CREATE</code> for <code>\FileSystem\Ntfs</code> driver. So, each API call of <code>CreateFile()</code> or a kernel-mode function <code>IoCreateFile()</code> can be monitored and affected by the malicious <code>MalNtfsCreatCallback()</code> callback.</p>



<p class="has-normal-font-size">Another <em>Driver Entry</em> method sets a callback method using <code>PsSetCreateThreadNotifyRoutine()</code>. The <code>NotifyRoutine()</code> monitors a kernel process creation, and the malware can inject malicious code into newly created processes/threads.</p>



<p class="has-normal-font-size">Finally, the driver tries to restore its configuration from the system registry.</p>



<h2 class="wp-block-heading" id="tl-start-routine">2.2 Start Routine</h2>



<p class="has-normal-font-size">The <em>Start Routine</em> is run as a kernel system thread created in the <a href="#tl-driver-entry">Driver Entry</a> routine. The <em>Start Routine</em> writes the driver version into the SYSTEM registry as follows:</p>



<ul class="has-normal-font-size wp-block-list"><li>Key: <code>HKLM\SYSTEM\CurrentControlSet\Control\WinApi\WinDeviceVer</code></li><li>Value: <code>20161122</code></li></ul>



<p class="has-normal-font-size">If the following <code>SOFTWARE</code> registry key is present, the driver loads artifacts needed for the process injecting:</p>



<ul class="has-normal-font-size wp-block-list"><li><code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\Secure</code></li></ul>



<p class="has-normal-font-size">The last part of <em>Start Routine</em> loads the rest of the necessary entries from the registry. The complete list of the system registry is documented in <a href="#tl-appendix-a">Appendix A</a>.</p>



<h2 class="wp-block-heading" id="tl-device-control">2.3 Device Control</h2>



<p class="has-normal-font-size">The device control is a mechanism for controlling a loaded driver. A driver receives the <code>IRP_MJ_DEVICE_CONTROL</code> I/O control code (IOCTL) if a user-mode thread calls Win32 API <code>DeviceIoControl()</code>; visit <a href="#tl-references">[1]</a> for more information. The user-mode application sends <code>IRP_MJ_DEVICE_CONTROL</code> directly to a specific device driver. The driver then performs the corresponding operation. Therefore, malicious user-mode applications can control the driver via this mechanism.</p>



<p class="has-normal-font-size">The driver supports approx. 60 control codes. We divided the control codes into 3 basic groups: <strong>controlling</strong>, <strong>inserting</strong>, and <strong>setting</strong>.</p>



<h6 class="wp-block-heading" id="tl-dc-control"><strong>Controlling</strong></h6>



<p class="has-normal-font-size">There are 9 main control codes invoking driver functionality from the user-mode. The following <strong>Table 3</strong> summarizes controlling IOCTL that can be sent by malware using the Win32 API.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>IOCTL</strong></td><td><strong>Description</strong></td></tr><tr><td>0x222C80</td><td>The driver accepts other IOCTLs only if the driver is activated. Malware in the user-mode can activate the driver by sending this IOCTL and authorization code equal <code>0xB6C7C230</code>.</td></tr><tr><td>0x2224C0&nbsp;</td><td>The malware sends data which the driver writes to the system registry. A key, value, and data type are set by <a href="#tl-dc-setting"><strong>Setting</strong></a> control codes.<br><em>used variable: regKey, regValue, regData, regType</em></td></tr><tr><td>0x222960</td><td>This IOCTL clears all data stored by the driver.<br><em>used variable: see <a href="#tl-dc-setting"><strong>Setting</strong></a><strong> </strong>and <a href="#tl-dc-insert"><strong>Inserting</strong></a><strong> </strong>variables</em></td></tr><tr><td>0x2227EC</td><td>If the malware needs to hide a specific driver, the driver adds a specific driver name to the<br><em>listBaseDllName </em>and hides it using <a href="#tl-driver-hiding">Driver Hiding</a>.</td></tr><tr><td>0x2227E8</td><td>The driver adds the name of the registry key to the <em>WinDeviceAddress </em>list and hides this key<br>using <a href="#tl-registry-hiding">Registry Hiding</a>.<br><em>used variable: WinDeviceAddress</em></td></tr><tr><td>0x2227F0</td><td>The driver hides a given service defined by the name of the DLL image. The name is inserted into the <em>listServices </em>variable, and the <a href="#tl-service-hiding">Service Hiding</a> technique hides the service in the system.</td></tr><tr><td>0x2227DC</td><td>If the malware wants to deactivate the <a href="#tl-registry-hiding">Registry Hiding</a>, the driver restores the original kernel<br><code>GetCellRoutine()</code>.</td></tr><tr><td>0x222004</td><td>The malware sends a process ID that wants to terminate. The driver calls kernel function<br><code>ZwTerminateProcess()</code> and terminates the process and all of its threads regardless of malware privileges.</td></tr><tr><td>0x2224C8</td><td>The malware sends data which driver writes to the file defined by <em>filePath</em> variable; see <a href="#tl-dc-setting"><strong>Setting</strong></a> control codes<br><em>used variable: filePath, fileData</em></td></tr></tbody></table><figcaption><strong>Table 3</strong>. Controlling IOCTLs</figcaption></figure>



<h6 class="wp-block-heading" id="tl-dc-insert"> <strong><strong>Inserting</strong></strong></h6>



<p class="has-normal-font-size">There are 11 control codes inserting items into white/blacklists. The following <strong>Table 4</strong> summarizes variables and their purpose.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>White/Black list</strong></td><td><strong>Variable</strong></td><td><strong>Purpose</strong></td></tr><tr><td>Registry HIVE</td><td>WinDeviceAddress</td><td>Defines a list of registry entries that the malware wants to hide in the system.</td></tr><tr><td>Process Image File Name</td><td>WinDeviceMaker</td><td>Represents a whitelist of processes defined by<em> process image file name</em>. It is used in <a href="#tl-callback-ntfs">Callback of NTFS Driver</a>, and grants access to the NTFS file systems. Further, it operates in <a href="#tl-minifilter">Minifilter Driver</a> and prevents hiding files defined in the <em>WinDeviceNumber</em> variable. The last use is in <a href="#tl-registry-hiding">Registry Hiding</a>; the malware does not hide registry keys for the whitelisted processes.</td></tr><tr><td></td><td>WinDeviceMakerB</td><td>Defines a whitelist of processes defined by <em>process image file name</em>. It is used in <a href="#tl-callback-ntfs">Callback of NTFS Driver</a>, and grants access to the NTFS file systems.</td></tr><tr><td></td><td>WinDeviceMakerOnly </td><td>Specifies a blacklist of processes defined by the <em>process image file name</em>. It is used in <a href="#tl-callback-ntfs">Callback of NTFS Driver</a> and refuses access to the NTFS file systems.</td></tr><tr><td>File names<br>(<em>full path</em>)</td><td>WinDeviceName<br>WinDeviceNameB</td><td>Determines a whitelist of files that should be granted access by <a href="#tl-callback-ntfs">Callback of NTFS Driver</a>. It is used in combination with <em>WinDeviceMaker </em>and <em>WinDeviceMakerB</em>. So, if a file is on the whitelist and a requested process is also whitelisted, the driver grants access to the file.</td></tr><tr><td></td><td>WinDeviceNameOnly</td><td>Defines a blacklist of files that should be denied access by <a href="#tl-callback-ntfs">Callback of NTFS Driver</a>. It is used in combination with <em>WinDeviceMakerOnly</em>. So, if a file is on the blacklist and a requesting process is also blacklisted, the driver refuses access to the file.</td></tr><tr><td>File names<br>(<em>containing number</em>)</td><td>WinDeviceNumber</td><td>Defines a list of files that should be hidden in the system by <a href="#tl-minifilter">Minifilter Driver</a>. The malware uses a name convention as follows: <kbd>[A-Z][a-z][0-9]+\.[a-z]{3}</kbd>. So, a file name includes a number.</td></tr><tr><td>Process ID</td><td>ListProcessId1</td><td>Defines a list of processes requiring access to NTFS file systems. The malware does not restrict the access for these processes; see <a href="#tl-callback-ntfs">Callback of NTFS Driver</a>.</td></tr><tr><td></td><td>ListProcessId2</td><td>The same purpose as <em>ListProcessId1</em>. Additionally, it is used as the whitelist for the registry hiding, so the driver does not restrict access. The <a href="#tl-minifilter">Minifilter Driver</a> does not limit processes in this list.</td></tr><tr><td>Driver names</td><td>listBaseDllName</td><td>Defines a list of drivers that should be hidden in the system;<br>see <a href="#tl-driver-hiding">Driver Hiding</a>.</td></tr><tr><td>Service names</td><td>listServices</td><td>Specifies a list of services that should be hidden in the system;<br>see <a href="#tl-service-hiding">Service Hiding</a>.</td></tr></tbody></table><figcaption><strong>Table 4</strong>. White and Black lists</figcaption></figure>



<h6 class="wp-block-heading" id="tl-dc-setting"><strong>Setting</strong></h6>



<p class="has-normal-font-size">The setting control codes store scalar values as a global variable. The following <strong>Table 5</strong> summarizes and groups these variables and their purpose.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>Function</strong></td><td><strong>Variable</strong></td><td><strong>Description</strong></td></tr><tr><td>File Writing<br>(<em>Shutdown</em>)</td><td>filename1_for_ShutDown<br>data1_for_ShutDown</td><td>Defines a file name and data for the first file written during the driver shutdown.</td></tr><tr><td></td><td>filename2_for_ShutDown<br>data2_for_ShutDown</td><td>Defines a file name and data for the second file written during the driver shutdown.</td></tr><tr><td>Registry Writing<br>(<em>Shutdown</em>)</td><td>regKey1_shutdown<br>regValue1_shutdown<br>regData1_shutdown<br>regType1</td><td>Specifies the first registry key path, value name, data, and type (REG_BINARY, REG_DWORD, REG_SZ, etc.) written during the driver shutdown.</td></tr><tr><td></td><td>regKey2_shutdown<br>regValue2_shutdown<br>regData2_shutdown<br>regType2</td><td>Specifies the second registry key path, value name, data, and type (REG_BINARY, REG_DWORD, REG_SZ, etc.) written during the driver shutdown.</td></tr><tr><td>File Data Writing</td><td>filePath</td><td>Determines filename which will be used to write data;<br>see <a href="#tl-dc-control"><strong>Controlling</strong></a><strong> </strong>IOCTL <code>0x2224C8</code>.</td></tr><tr><td>Registry Writing</td><td>regKey<br>regValue<br>regType</td><td>Specifies registry key path, value name, and type (REG_BINARY, REG_DWORD, REG_SZ, etc.);<br>see <a href="#tl-dc-control"><strong>Controlling</strong></a><strong> </strong>IOCTL <code>0x2224C0</code>.</td></tr><tr><td>Unknow<br>(<em>unused</em>)</td><td>dwWinDevicePathA<br>dwWinDeviceDataA</td><td>Keeps a path and data for file A.</td></tr><tr><td></td><td>dwWinDevicePathB<br>dwWinDeviceDataB</td><td>Keeps a path and data for file B.</td></tr></tbody></table><figcaption><strong>Table 5</strong>. Global driver variables</figcaption></figure>



<p class="has-normal-font-size">The following <strong>Table 6</strong> summarizes variables used for the process injection; see <a href="#tl-thread-notification">Thread Notification</a>.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>Function</strong></td><td><strong>Variable</strong></td><td><strong>Description</strong></td></tr><tr><td>Process to Inject</td><td>dwWinDriverMaker2<br>dwWinDriverMaker2_2</td><td>Defines two command-line arguments. If a process with one of the arguments is created, the driver should inject the process.</td></tr><tr><td></td><td>dwWinDriverMaker1<br>dwWinDriverMaker1_2</td><td>Defines two process names that should be injected if the process is created.</td></tr><tr><td>DLL to Inject</td><td>dwWinDriverPath1<br>dwWinDriverDataA</td><td>Specifies a file name and data for the process injection defined by <em>dwWinDriverMaker2 </em>or <em>dwWinDriverMaker1</em>.</td></tr><tr><td></td><td>dwWinDriverPath1_2<br>dwWinDriverDataA_2</td><td>Defines a file name and data for the process injection defined by <em>dwWinDriverMaker2_2 </em>or <em>dwWinDriverMaker1_2</em>.</td></tr><tr><td></td><td>dwWinDriverPath2<br>dwWinDriverDataB</td><td>Keeps a file name and data for the process injection defined by <em>dwWinDriverMaker2 </em>or <em>dwWinDriverMaker1</em>.</td></tr><tr><td></td><td>dwWinDriverPath2_2<br>dwWinDriverDataB_2</td><td>Specifies a file name and data for the process injection defined by <em>dwWinDriverMaker2_2 </em>or <em>dwWinDriverMaker1_2</em>.</td></tr></tbody></table><figcaption><strong>Table 6</strong>. Injection variables</figcaption></figure>



<h2 class="wp-block-heading" id="tl-minifilter">2.4 Minifilter Driver</h2>



<p class="has-normal-font-size">The minifilter driver is registered in the <a href="#tl-driver-entry">Driver Entry</a> routine using the <code>FltRegisterFilter()</code> method. One of the method arguments defines configuration (<code>FLT_REGISTRATION</code>) and callback methods (<code>FLT_OPERATION_REGISTRATION</code>). If the <em>QueryDirectory </em>system request is invoked, the malware driver catches this request and processes it by its <code>FltPostOperation()</code>.</p>



<p class="has-normal-font-size">The <code>FltPostOperation()</code> method can modify a result of the <em>QueryDirectory </em>operations (IRP). In fact, the malware driver can affect (hide, insert, modify) a directory enumeration. So, some applications in the user-mode may not see the actual image of the requested directory.</p>



<p class="has-normal-font-size">The driver affects the <em>QueryDirectory</em> results only if a requested process is not present in whitelists. There are two whitelists. The first whitelists (<em>Process ID</em> and <em>File names</em>) cause that the <em>QueryDirectory</em> results are not modified if the process ID or process image file name, requesting the given I/O operation (<em>QueryDirectory</em>), is present in the whitelists. It represents malware processes that should have access to the file system without restriction. The further whitelist is called <em>WinDeviceNumber</em>, defining a set of suffixes. The <code>FltPostOperation()</code> iterates each item of the <em>QueryDirectory</em>. If the enumerated item name has a suffix defined in the whitelist, the driver removes the item from the <em>QueryDirectory</em> results. It ensures that the whitelisted files are not visible for non-malware processes <a href="#tl-references">[2]</a>. So, the driver can easily hide an arbitrary directory/file for the user-mode applications, including <code>explorer.exe</code>. The name of the <em>WinDeviceNumber</em> whitelist is probably derived from malware file names, e.g, <code>Ke145057.xsl</code>, since the suffix is a number; see <a href="#tl-appendix-b">Appendix B</a>.</p>



<h2 class="wp-block-heading" id="tl-callback-ntfs">2.5 Callback of NTFS Driver</h2>



<p class="has-normal-font-size">When the driver is loaded, the <a href="#tl-driver-entry">Driver Entry</a> routine modifies the system driver for the NTFS filesystem. The original callback method for the <code>IRP_MJ_CREATE</code> major function is replaced by a malicious callback <code>MalNtfsCreatCallback()</code> as <strong>Figure 1</strong> illustrates. The malicious callback determines what should gain access and  what  should not.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-01.-Rewrite-IRP_MJ_CREATE-callback-of-the-regular-NTFS-driver.png"><img decoding="async" width="850" height="249" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-01.-Rewrite-IRP_MJ_CREATE-callback-of-the-regular-NTFS-driver.png" alt="" class="wp-image-3919" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-01.-Rewrite-IRP_MJ_CREATE-callback-of-the-regular-NTFS-driver.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-01.-Rewrite-IRP_MJ_CREATE-callback-of-the-regular-NTFS-driver-300x88.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-01.-Rewrite-IRP_MJ_CREATE-callback-of-the-regular-NTFS-driver-768x225.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption><strong>Figure 1</strong>. Rewrite IRP_MJ_CREATE callback of the regular NTFS driver</figcaption></figure>



<p class="has-normal-font-size">The malicious callback is active only if the <a href="#tl-minifilter">Minifilter Driver</a> registration has been done and the original callback has been replaced. There are whitelists and one blacklist. The whitelists store information about allowed <em>process image names</em>, <em>process ID</em>, and allowed <em>files</em>. If the process requesting the disk access is whitelisted, then the requested file must also be on the white list. It is double protection. The blacklist is focused on <em>processing image names</em>. Therefore, the blacklisted processes are denied access to the file system. <strong>Figure 2</strong> demonstrates the whitelisting of processes. If a process is on the whitelist, the driver calls the original callback; otherwise, the request ends with access denied.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-02.-Grant-access-to-white-listed-processes.png"><img decoding="async" width="850" height="369" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-02.-Grant-access-to-white-listed-processes.png" alt="" class="wp-image-3922" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-02.-Grant-access-to-white-listed-processes.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-02.-Grant-access-to-white-listed-processes-300x130.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-02.-Grant-access-to-white-listed-processes-768x333.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption><strong>Figure 2</strong>. Grant access to whitelisted processes</figcaption></figure>



<p class="has-normal-font-size">In general, if the malicious callback determines that the requesting process is authorized to access the file system, the driver calls the original <code>IRP_MJ_CREATE</code> major function. If not, the driver finishes the request as <code>STATUS_ACCESS_DENIED</code>.</p>



<h2 class="wp-block-heading" id="tl-registry-hiding">2.6 Registry Hiding</h2>



<p class="has-normal-font-size">The driver can hide a given registry key. Each manipulation with a registry key is hooked by the kernel method <code>GetCellRoutine()</code>. The configuration manager assigns a control block for each open registry key. The control block (<code>CM_KEY_CONTROL_BLOCK</code>) structure keeps all control blocks in a hash table to quickly search for existing control blocks. The <code>GetCellRoutine()</code> hook method computes a memory address of a requested key. Therefore, if the malware driver takes control over the <code>GetCellRoutine()</code>, the driver can filter which registry keys will be visible; more precisely, which keys will be searched in the hash table.</p>



<p class="has-normal-font-size">The malware driver finds an address of the original <code>GetCellRoutine()</code> and replaces it with its own malicious hook method, <code>MalGetCellRoutine()</code>. The driver uses well-documented implementation <a href="#tl-references">[3, 4]</a>. It just goes through kernel structures obtained via the <code>ZwOpenKey()</code> kernel call. Then, the driver looks for <code>CM_KEY_CONTROL_BLOCK</code>, and its associated HHIVE structured correspond with the requested key. The HHIVE structure contains a pointer to the <code>GetCellRoutine()</code> method, which the driver replaces; see <strong>Figure 3</strong>.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-03.-Overwriting-GetCellRoutine.png"><img loading="lazy" decoding="async" width="850" height="489" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-03.-Overwriting-GetCellRoutine.png" alt="" class="wp-image-3924" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-03.-Overwriting-GetCellRoutine.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-03.-Overwriting-GetCellRoutine-300x173.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-03.-Overwriting-GetCellRoutine-768x442.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption><strong>Figure 3</strong>. Overwriting GetCellRoutine</figcaption></figure>



<p class="has-normal-font-size">This method&#8217;s pitfall is that offsets of looked structure, variable, or method are specific for each windows version or build. So, the driver must determine on which Windows version the driver runs.</p>



<p class="has-normal-font-size">The <code>MalGetCellRoutine()</code> hook method performs 3 basic operations as follow:</p>



<ol class="has-normal-font-size wp-block-list"><li>The driver calls the original kernel <code>GetCellRoutine()</code> method.</li><li>Checks whitelists for a requested registry key.</li><li>Catches or releases the requested registry key according to the whitelist check.</li></ol>



<h6 class="wp-block-heading"><strong>Registry Key Hiding</strong></h6>



<p class="has-normal-font-size">The hiding technique uses a simple principle. The driver iterates across a whole HIVE of a requested key. If the driver finds a registry key to hide, it returns the last registry key of the iterated HIVE. When the interaction is at the end of the HIVE, the driver does not return the last key since it was returned before, but it just returns NULL, which ends the HIVE searching.</p>



<p class="has-normal-font-size">The consequence of this principle is that if the driver wants to hide more than one key, the driver returns the last key of the searched HIVE more times. So, the final results of the registry query can contain duplicate keys.</p>



<h6 class="wp-block-heading"><strong>Whitelisting</strong></h6>



<p class="has-normal-font-size">The <code>services.exe</code> and <code>System</code> services are whitelisted by default, and there is no restriction. Whitelisted <em>process image names</em> are also without any registry access restriction.</p>



<p class="has-normal-font-size">A decision-making mechanism is more complicated for Windows 10. The driver hides the request key only for <code>regedit.exe</code> application if the Windows 10 build is 14393 (July 2016) or 15063 (March 2017).</p>



<h2 class="wp-block-heading" id="tl-thread-notification">2.7 Thread Notification</h2>



<p class="has-normal-font-size">The main purpose of the <em>Thread Notification</em> is to inject malicious code into created threads. The driver registers a thread notification routine via <code>PsSetCreateThreadNotifyRoutine()</code> during the <a href="#tl-driver-entry">Device Entry</a> initialization. The routine registers a callback which is subsequently notified when a new thread is created or deleted. The suspicious callback (<code>PCREATE_THREAD_NOTIFY_ROUTINE</code>) <code>NotifyRoutine()</code> takes three arguments: <em>ProcessID</em>, <em>ThreadID</em>, and <em>Create </em>flag. The driver affects only threads in which <em>Create flag</em> is set to TRUE, so only newly created threads.</p>



<p class="has-normal-font-size">The whitelisting is focused on two aspects. The first one is an <em>image name</em>, and the second one is <em>command-line arguments</em> of a created thread. The <em>image name</em> is stored in <em>WinDriverMaker1</em>, and arguments are stored as a checksum in the <em>WinDriverMaker2 </em>variable. The driver is designed to inject only two processes defined by a <em>process name</em> and two processes defined by <em>command line arguments</em>. There are no whitelists, just 4 global variables.</p>



<h6 class="wp-block-heading">2.7.1 <strong>Kernel Method Lookup</strong></h6>



<p class="has-normal-font-size">The successful injection of the malicious code requires several kernel methods. The driver does not call these methods directly due to detection techniques, and it tries to obfuscate the required method. The driver requires the following kernel methods: <code>ZwReadVirtualMemory</code>, <code>ZwWriteVirtualMemory</code>, <code>ZwQueryVirtualMemory</code>, <code>ZwProtectVirtualMemory</code>, <code>NtTestAlert</code>, <code>LdrLoadDll</code></p>



<p class="has-normal-font-size">The kernel methods are needed for successful thread injection because the driver needs to read/write process data of an injected thread, including program instruction.</p>



<p class="has-normal-font-size"><strong><span style="text-decoration: underline">Virtual Memory Method Lookup</span></strong></p>



<p class="has-normal-font-size">The driver gets the address of the <code>ZwAllocateVirtualMemory()</code> method. As <strong>Figure 4</strong> illustrates, all lookup methods are consecutively located after <code>ZwAllocateVirtualMemory()</code> method in <code>ntdll.dll</code>.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-04.-Code-segment-of-ntdll.dll-with-VirtualMemory-methods.png"><img loading="lazy" decoding="async" width="850" height="504" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-04.-Code-segment-of-ntdll.dll-with-VirtualMemory-methods.png" alt="" class="wp-image-3926" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-04.-Code-segment-of-ntdll.dll-with-VirtualMemory-methods.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-04.-Code-segment-of-ntdll.dll-with-VirtualMemory-methods-300x178.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-04.-Code-segment-of-ntdll.dll-with-VirtualMemory-methods-768x455.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption><strong>Figure 4.</strong> Code segment of ntdll.dll with VirtualMemory methods</figcaption></figure>



<p class="has-normal-font-size">The driver starts to inspect the code segments from the address of the <code>ZwAllocateVirtualMemory()</code> and looks up for instructions representing the constant move to <code>eax</code> (e.g. <kbd>mov eax, ??h</kbd>). It identifies the <code>VirtualMemory</code> methods; see <strong>Table 7</strong> for constants.</p>



<figure class="wp-block-table is-style-regular"><table><tbody><tr><td><strong>Constant</strong></td><td><strong>Method</strong></td></tr><tr><td>0x18</td><td><code>ZwAllocateVirtualMemory</code></td></tr><tr><td>0x23</td><td><code>ZwQueryVirtualMemory</code></td></tr><tr><td>0x3A</td><td><code>NtWriteVirtualMemory</code></td></tr><tr><td>0x50</td><td><code>ZwProtectVirtualMemory</code></td></tr></tbody></table><figcaption><strong>Table 7</strong>. Constants of Virtual Memory methods for Windows 10 (64 bit)</figcaption></figure>



<p class="has-normal-font-size">When an appropriate constants is found, the final address of a lookup method is calculated as follow:</p>



<p class="has-normal-font-size"><code>method_address = constant_address - alignment_constant</code>;<br>where <code>alignment_constant</code> helps to point to the start of the looked-up method.</p>



<p class="has-normal-font-size">The steps to find methods can be summarized as follow:</p>



<ol class="has-normal-font-size wp-block-list"><li>Get the address of <code>ZwAllocateVirtualMemory()</code>, which is not suspected in terms of detection.</li><li>Each sought method contains a specific constant on a specific address (<code>constant_address</code>).</li><li>If the <code>constant_address<em> </em></code>is found, another specific offset (<code>alignment_constant</code>) is subtracted;<br>the <code>alignment_constant </code>is specific for each Windows version.</li></ol>



<p class="has-normal-font-size">The exact implementation of the <span style="text-decoration: underline">Virtual Memory Method Lookup</span> method&nbsp; is shown in <strong>Figure 5</strong>.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-05.-GetVirtualMemoryMethods.png"><img loading="lazy" decoding="async" width="850" height="821" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-05.-GetVirtualMemoryMethods.png" alt="" class="wp-image-3929" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-05.-GetVirtualMemoryMethods.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-05.-GetVirtualMemoryMethods-300x290.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-05.-GetVirtualMemoryMethods-768x742.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption><strong>Figure 5.</strong> Implementation of the lookup routine searching for the kernel VirtualMemory methods</figcaption></figure>



<p class="has-normal-font-size">The success of this obfuscation depends on the Window version identification. We found one Windows 7 version which returns different methods than the malware wants; namely, <code>ZwCompressKey()</code>, <code>ZwCommitEnlistment()</code>, <code>ZwCreateNamedPipeFile()</code>, <code>ZwAlpcDeleteSectionView()</code>.<br>The <code>alignment_constant</code><em> </em>is derived from the current Windows version during the driver initialization; see the <a href="#tl-driver-entry">Driver Entry</a> routine.</p>



<p class="has-normal-font-size" id="tl-nttest-ldrload"><strong><span style="text-decoration: underline">NtTestAlert and LdrLoadDll Lookup</span></strong></p>



<p class="has-normal-font-size">A different approach is used for getting <code>NtTestAlert()</code> and <code>LdrLoadDll()</code> routines. The driver attaches to the <code>winlogon.exe</code> process and gets the pointer to the kernel structure <code>PEB_LDR_DATA</code> containing PE header and imports of all processes in the system. If the import table includes a required method, then the driver extracts the base address, which is the entry point to the sought routine.</p>



<h6 class="wp-block-heading"> 2.7.2  <strong>Process Injection</strong></h6>



<p class="has-normal-font-size">The aim of the process injection is to load a defined DLL library into a new thread via kernel function <code>LdrLoadDll()</code>. The process injection is slightly different for x86 and x64 OS versions.</p>



<p class="has-normal-font-size">The x64 OS version abuses the original <code>NtTestAlert()</code> routine, which checks the thread&#8217;s APC queue. The APC (Asynchronous Procedure Call) is a technique to queue a job to be done in the context of a specific thread. It is called periodically. The driver rewrites the instructions of the <code>NtTestAlert()</code> which jumps to the entry point of the malicious code.</p>



<p class="has-normal-font-size"><span style="text-decoration: underline"><strong>Modification of NtTestAlert Code</strong></span></p>



<p class="has-normal-font-size">The first step to the process injection is to find free memory for a code cave. The driver finds the free memory near the <code>NtTestAlert()</code> routine address. The code cave includes a shellcode as <strong>Figure 6.</strong> demonstrates.</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-06.-Malicious-payload-overwriting-NtTestAlert-routine-1.png"><img loading="lazy" decoding="async" width="850" height="189" src="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-06.-Malicious-payload-overwriting-NtTestAlert-routine-1.png" alt="" class="wp-image-3985" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-06.-Malicious-payload-overwriting-NtTestAlert-routine-1.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-06.-Malicious-payload-overwriting-NtTestAlert-routine-1-300x67.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2021/08/Figure-06.-Malicious-payload-overwriting-NtTestAlert-routine-1-768x171.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption> <strong>Figure 6.</strong> Malicious payload overwriting the original NtTestAlert() routine </figcaption></figure>



<p class="has-normal-font-size">The shellcode prepares a parameter (<code>code_cave</code> address) for the malicious code and then jumps into it. The original <code>NtTestAlert()</code> address is moved into <code>rax</code> because the malicious code ends by the return instruction, and therefore the original <code>NtTestAlert()</code> is invoked. Finally, <code>rdx</code> contains the jump address, where the driver injected the malicious code. The next item of the code cave is a path to the DLL file, which shall be loaded into the injected process. Other items of the code cave are the original address and original code instructions of the <code>NtTestAlert()</code>.</p>



<p class="has-normal-font-size">The driver writes the malicious code into the address defined in <code>dll_loading_shellcode</code>. The original instructions of <code>NtTestAlert()</code> are rewritten with the instruction which just jumps to the shellcode. It causes that when the <code>NtTestAlert()</code> is called, the shellcode is activated and jumps into the malicious code.</p>



<p class="has-normal-font-size"><strong><span style="text-decoration: underline">Malicious Code x64</span></strong></p>



<p class="has-normal-font-size">The malicious code for x64 is simple. Firstly, it recovers the original instruction of the rewritten <code>NtTestAlert()</code> code. Secondly, the code invokes the found <code>LdrLoadDll()</code> method and loads appropriate DLL into the address space of the injected process. Finally, the code executes the return instruction and jumps back to the original <code>NtTestAlert()</code> function.</p>



<p class="has-normal-font-size">The x86 OS version abuses the entry point of the injected process directly. The procedure is very similar to the x64 injection, and the x86 malicious code is also identical to the x64 version. However, the x86 malicious code needs to find a 32bit variant of the&nbsp; <code>LdrLoadDll()</code> method. It uses the similar technique described above (<a href="#tl-nttest-ldrload">NtTestAlert and LdrLoadDll Lookup</a>).</p>



<h2 class="wp-block-heading" id="tl-service-hiding">2.8 Service Hiding</h2>



<p class="has-normal-font-size">Windows uses the Services Control Manager (SCM) to manage the system services. The executable of SCM is <code>services.exe</code>. This program runs at the system startup and performs several functions, such as running, ending, and interacting with system services. The SCM process also keeps all run services in an undocumented service record (<code>SERVICE_RECORD</code>) structure.</p>



<p class="has-normal-font-size">The driver must patch the service record to hide a required service. Firstly, the driver must find the process <code>services.exe</code> and attach it to this one via <code>KeStackAttachProcess()</code>. The malware author defined a byte sequence which the driver looks for in the process memory to find the service record. The <code>services.exe</code> keeps all run services as a linked list of <code>SERVICE_RECORD</code> <a href="#tl-references">[5]</a>. The malware driver iterates this list and unlinks required services defined by <em>listServices</em> whitelist; see <strong><a href="#tl-dc-insert">Table 4</a></strong>.</p>



<p class="has-normal-font-size">The used byte sequence for Windows 2000, XP, Vista, and Windows 7 is as follows: <code>{45 3B E5 74 40 48 8D 0D}</code>. There is another byte sequence <code>{48 83 3D ?? ?? ?? ?? ?? 48 8D 0D}</code> that is never used because it is bound to the Windows version that the malware driver has never identified; maybe in development.</p>



<p class="has-normal-font-size">The hidden services cannot be detected using PowerShell command <kbd>Get-Service</kbd>, Windows Task Manager, Process Explorer, etc. However, started services are logged via Windows Event Log. Therefore, we can enumerate all regular services and all logged services. Then, we can create differences to find hidden services.</p>



<h2 class="wp-block-heading" id="tl-driver-hiding">2.9 Driver Hiding</h2>



<p class="has-normal-font-size">The driver is able to hide itself or another malicious driver based on the IOCTL from the user-mode. The <a href="#tl-driver-entry">Driver Entry</a> is initiated by a parameter representing a driver object (<a href="https://www.nirsoft.net/kernel_struct/vista/DRIVER_OBJECT.html" target="_blank" rel="noreferrer noopener"><code>DRIVER_OBJECT</code></a>) of the loaded driver image. The driver object contains an officially undocumented item called a driver section. The <a href="https://www.nirsoft.net/kernel_struct/vista/LDR_DATA_TABLE_ENTRY.html" target="_blank" rel="noreferrer noopener"><code>LDR_DATA_TABLE_ENTRY</code></a> kernel structure stores information about the loaded driver, such as base/entry point address, image name, image size, etc. The driver section points to <a href="https://www.nirsoft.net/kernel_struct/vista/LDR_DATA_TABLE_ENTRY.html" target="_blank" rel="noreferrer noopener"><code>LDR_DATA_TABLE_ENTRY</code></a> as a double-linked list representing all loaded drivers in the system.</p>



<p class="has-normal-font-size">When a user-mode application lists all loaded drivers, the kernel enumerates the double-linked list of the <a href="https://www.nirsoft.net/kernel_struct/vista/LDR_DATA_TABLE_ENTRY.html" target="_blank" rel="noreferrer noopener"><code>LDR_DATA_TABLE_ENTRY</code></a> structure. The malware driver iterates the whole list and unlinks items (drivers) that should be hidden. Therefore, the kernel loses pointers to the hidden drivers and cannot enumerate all loaded drivers <a href="#tl-references">[6]</a>.</p>



<h2 class="wp-block-heading" id="tl-driver-unload">2.10 Driver Unload</h2>



<p class="has-normal-font-size">The <em>Driver Unload</em> function contains suspicious code, but it seems to be never used in this version. The rest of the unload functionality executes standard procedure to unload the driver from the system.</p>



<h1 class="wp-block-heading">3. Loading Driver During Boot</h1>



<p class="has-normal-font-size">The DirtyMoe service loads the malicious driver. A driver image is not permanently stored on a disk since the service always extracts, loads, and deletes the driver images on the service startup. The secondary service aim is to eliminate evidence about driver loading and eventually complicate a forensic analysis. The service aspires to camouflage registry and disk activity. The DirtyMoe service is registered as follows:</p>



<p class="has-normal-font-size"><code>Service name: Ms&lt;volume_id&gt;App</code>; e.g., MsE3947328App<code><br>Registry key: HKLM\SYSTEM\CurrentControlSet\services\&lt;service_name&gt;<br>ImagePath: %SystemRoot%\system32\svchost.exe -k netsvcs<br>ServiceDll: C:\Windows\System32\&lt;service_name&gt;.dll, ServiceMain<br>ServiceType: SERVICE_WIN32_SHARE_PROCESS<br>ServiceStart: SERVICE_AUTO_START</code></p>



<h2 class="wp-block-heading" id="tl-registry-operation">3.1 Registry Operation</h2>



<p class="has-normal-font-size">On startup, the service creates a registry record, describing the malicious driver to load; see following example:</p>



<p class="has-normal-font-size"><code>Registry key: HKLM\SYSTEM\CurrentControlSet\services\dump_E3947328<br>ImagePath: \??\C:\Windows\System32\drivers\dump_LSI_FC.sys<br>DisplayName: dump_E3947328</code></p>



<p class="has-normal-font-size">At first glance, it is evident that <code>ImagePath</code> does not reflect <code>DisplayName</code>, which is the Windows common naming convention. Moreover,  <code>ImagePath</code> prefixed with <code>dump_</code> string is used for virtual drivers (loaded only in memory) managing the memory dump during the Windows crash. The malware tries to use the virtual driver name convention not to be so conspicuous. The principle of the Dump Memory using the virtual drivers is described in <a href="#tl-references">[7, 8]</a>.</p>



<p class="has-normal-font-size"><code>ImagePath</code> values are different from each windows reboot, but it always abuses the name of the system native driver; see a few instances collected during windows boot: <code>dump_ACPI.sys</code>, <code>dump_RASPPPOE.sys</code>, <code>dump_LSI_FC.sys</code>, <code>dump_USBPRINT.sys</code>, <code>dump_VOLMGR.sys</code>, <code>dump_INTELPPM.sys</code>, <code>dump_PARTMGR.sys</code></p>



<h2 class="wp-block-heading">3.2 Driver Loading</h2>



<p class="has-normal-font-size">When the registry entry is ready, the DirtyMoe service dumps the driver into the file defined by <code>ImagePath</code>. Then, the service loads the driver via <code>ZwLoadDriver()</code>.</p>



<h2 class="wp-block-heading">3.3 Evidence Cleanup</h2>



<p class="has-normal-font-size">When the driver is loaded either successfully or unsuccessfully, the DirtyMoe service starts to mask various malicious components to protect the whole malware hierarchy.</p>



<p class="has-normal-font-size">The DirtyMoe service removes the registry key representing the loaded driver; see <a href="#tl-registry-operation">Registry Operation</a>. Further, the loaded driver hides the malware services, as the <a href="#tl-service-hiding">Service Hiding</a> section describes. Registry entries related to the driver are removed via the API call. Therefore, a forensics track can be found in the SYSTEM registry HIVE, located in <code>%SystemRoot%\system32\config\SYSTEM</code>. The API call just removes a relevant HIVE pointer, but unreferenced data is still present in the HIVE stored on the disk. Hence, we can read removed registry entries via <a href="https://ericzimmerman.github.io/#!index.md">RegistryExplorer</a>.</p>



<p class="has-normal-font-size">The loaded driver also removes the dumped (<code>dump_</code> prefix) driver file. We were not able to restore this file via tools enabling recovery of deleted files, but it was extracted directly from the service DLL file.</p>



<h6 class="wp-block-heading"><strong>Capturing driver image and register keys</strong></h6>



<p class="has-normal-font-size">The malware service is responsible for the driver loading and cleans up of loading evidence. We put a breakpoint into the <code>nt!IopLoadDriver()</code> kernel method, which is reached if a process wants to load a driver into the system. We waited for the wanted driver, and then we listed all the system processes. The corresponding service (<code>svchost.exe</code>) has a call stack that contains the kernel call for driver loading, but the corresponding service has been killed by EIP registry modifying. The process (service) was killed, and the whole Windows ended in BSoD. Windows made a crash dump, so the file system caches have been flushed, and the malicious service did not finish the cleanup in time. Therefore, we were able to mount a volume and read all wanted data.</p>



<h2 class="wp-block-heading">3.4 Forensic Traces</h2>



<p class="has-normal-font-size">Although the DirtyMoe service takes great pains to cover up the malicious activities, there are a few aspects that help identify the malware.</p>



<p class="has-normal-font-size">The DirtyMoe service and loaded driver itself are hidden; however, the Windows Event Log system records information about started services. Therefore, we can get additional information such as <em>ProcessID </em>and <em>ThreadID </em>of all services, including the hidden services.</p>



<p class="has-normal-font-size">WinDbg connected to the Windows kernel can display all loaded modules using the <code>lm</code> command. The module list can uncover non-virtual drivers with prefix <code>dump_</code> and identify the malicious drivers.</p>



<p class="has-normal-font-size">Offline connected volume can provide the DLL library of the services and other supporting files, which are unfortunately encrypted and obfuscated with VMProtect. Finally, the offline SYSTEM registry stores records of the DirtyMoe service.</p>



<h1 class="wp-block-heading">4. Certificates</h1>



<p class="has-normal-font-size">Windows Vista and later versions of Windows require that loaded drivers must be code-signed. The digital code-signature should verify the identity and integrity of the driver vendor <a href="#tl-references">[9]</a>. However, Windows does not check the current status of all certificates signing a Windows driver. So, if one of the certificates in the path is expired or revoked, the driver is still loaded into the system. We will not discuss why Windows loads drivers with invalid certificates since this topic is really wide. The backward compatibility but also a potential impact on the kernel implementation play a role.</p>



<p class="has-normal-font-size">DirtyMoe drivers are signed with three certificates as follow:</p>



<p class="has-normal-font-size"><strong>Beijing Kate Zhanhong Technology Co.,Ltd.</strong><br>Valid From: 28-Nov-2013 (2:00:00)<br>Valid To: 29-Nov-2014 (1:59:59)<br>SN: 3C5883BD1DBCD582AD41C8778E4F56D9<br>Thumbprint: 02A8DC8B4AEAD80E77B333D61E35B40FBBB010A0<br>Revocation Status: Revoked on 22-May-‎2014 (9:28:59)</p>



<p class="has-normal-font-size"><strong>Beijing Founder Apabi Technology Limited</strong><br>Valid From: 22-May-2018 (2:00:00)<br>Valid To: 29-May-2019 (14:00:00)<br>SN: 06B7AA2C37C0876CCB0378D895D71041<br>Thumbprint: 8564928AA4FBC4BBECF65B402503B2BE3DC60D4D<br>Revocation Status: Revoked on 22-May-‎2018 (2:00:01)</p>



<p class="has-normal-font-size"><strong>Shanghai Yulian Software Technology Co., Ltd. (上海域联软件技术有限公司)</strong><br>Valid From: 23-Mar-2011 (2:00:00)<br>Valid To: 23-Mar-2012 (1:59:59)<br>SN: 5F78149EB4F75EB17404A8143AAEAED7<br>Thumbprint: 31E5380E1E0E1DD841F0C1741B38556B252E6231<br>Revocation Status: Revoked on 18-Apr-‎2011 (10:42:04)</p>



<p class="has-normal-font-size">The certificates have been revoked by their certification authorities, and they are registered as stolen, leaked, misuse, etc. <a href="#tl-references">[10]</a>. Although all certificates have been revoked in the past, Windows loads these drivers successfully because the root certificate authorities are marked as trusted.</p>



<h1 class="wp-block-heading">5. Summarization and Discussion</h1>



<p class="has-normal-font-size">We summarize the main functionality of the DirtyMoe driver. We discuss the quality of the driver implementation, anti-forensic mechanisms, and stolen certificates for successful driver loading.</p>



<h2 class="wp-block-heading">5.1 Main Functionality</h2>



<h6 class="wp-block-heading"><strong>Authorization</strong></h6>



<p class="has-normal-font-size">The driver is controlled via IOCTL codes which are sent by malware processes in the user-mode. However, the driver implements the authorization instrument, which verifies that the IOCTLs are sent by authenticated processes. Therefore, not all processes can communicate with the driver.</p>



<h6 class="wp-block-heading"><strong>Affecting the Filesystem</strong></h6>



<p class="has-normal-font-size">If a rootkit is in the kernel, it can do “anything”. The DirtyMoe driver registers itself in the filter manager and begins to influence the results of filesystem I/O operations; in fact, it begins to filter the content of the filesystem. Furthermore, the driver replaces the <code>NtfsCreatCallback()</code> callback function of the NTFS driver, so the driver can determine who should gain access and what should not get to the filesystem.</p>



<h6 class="wp-block-heading"><strong>Thread Monitoring and Code injection</strong></h6>



<p class="has-normal-font-size">The DirtyMoe driver enrolls a malicious routine which is invoked if the system creates a new thread. The malicious routine abuses the APC kernel mechanism to execute the malicious code. It loads arbitrary DLL into the new thread.&nbsp;</p>



<h6 class="wp-block-heading"><strong>Registry Hiding</strong></h6>



<p class="has-normal-font-size">This technique abuses the kernel hook method that indexes registry keys in HIVE. The code execution of the hook method is redirected to the malicious routine so that the driver can control the indexing of registry keys. Actually, the driver can select which keys will be indexed or not.</p>



<h6 class="wp-block-heading"><strong>Service and Driver Hiding</strong></h6>



<p class="has-normal-font-size">Patching of specific kernel structures causes that certain API functions do not enumerate all system services or loaded drivers. Windows services and drivers are stored as a double-linked list in the kernel. The driver corrupts the kernel structures so that malicious services and drivers are unlinked from these structures. Consequently, if the kernel iterates these structures for the purpose of enumeration, the malicious items are skipped.</p>



<h2 class="wp-block-heading">5.2 Anti-Forensic Technique</h2>



<p class="has-normal-font-size">As we mentioned above, the driver is able to hide itself. But before driver loading, the DirtyMoe service must register the driver in the registry and dump the driver into the file. When the driver is loaded, the DirtyMoe service deletes all registry entries related to the driver loading. The driver deletes its own file from the file system through the kernel-mode. Therefore, the driver is loaded in the memory, but its file is gone.</p>



<p class="has-normal-font-size">The DirtyMoe service removes the registry entries via standard API calls. We can restore this data from the physical storage since the API calls only remove the pointer from HIVE. The dumped driver file is never physically stored on the disk drive because its size is too small and is present only in cache memory. Accordingly, the file is removed from the cache before cache flushing to the disk, so we cannot restore the file from the physical disk.</p>



<h2 class="wp-block-heading">5.3 Discussion</h2>



<p class="has-normal-font-size">The whole driver serves as an all-in-one super rootkit package. Any malware can register itself in the driver if knowing the authorization code. After successful registration, the malware can use a wide range of driver functionality. Hypothetically, the authorization code is hardcoded, and the driver&#8217;s name can be derived so we can communicate with the driver and stop it.</p>



<p class="has-normal-font-size">The system loads the driver via the DirtyMoe service within a few seconds. Moreover, the driver file is never present in the file system physically, only in the cache. The driver is loaded via the API call, and the DirtyMoe service keeps a handler of the driver file, so the file manipulation with the driver file is limited. However, the driver removes its own file using kernel-call. Therefore, the driver file is removed from the file system cache, and the driver handler is still relevant, with the difference that the driver file does not exist, including its forensic traces.</p>



<p class="has-normal-font-size">The DirtyMoe malware is written using Delphi in most cases. Naturally, the driver is coded in native C. The code style of the driver and the rest of the malware is very different. We analyzed that most of the driver functionalities are downloaded from internet forums as public samples. Each implementation part of the driver is also written in a different style. The malware authors have merged individual rootkit functionality into one kit. They also merged known bugs, so the driver shows a few significant symptoms of driver presence in the system. The authors needed to adapt the functionality of the public samples to their purpose, but that has been done in a very dilettante way. It seems that the malware authors are familiar only with Delphi.</p>



<p class="has-normal-font-size">Finally, the code-signature certificates that are used have been revoked in the middle of their validity period. However, the certificates are still widely used for code signing, so the private keys of the certificates have probably been stolen or leaked. In addition, the stolen certificates have been signed by the certification authority which Microsoft trusts, so the certificates signed in this way can be successfully loaded into the system despite their revocation. Moreover, the trend in the use of certificates is growing, and predictions show that it will continue to grow in the future. We will analyze the problems of the code-signature certificates in the future post.</p>



<h1 class="wp-block-heading">6. Conclusion</h1>



<p class="has-normal-font-size">DirtyMoe driver is an advanced piece of rootkit that DirtyMoe uses to effectively hide malicious activity on host systems. This research was undertaken to inspect the rootkit functionally of the DirtyMoe driver and evaluate the impact on infected systems. This study set out to investigate and present the analysis of the DirtyMoe driver, namely its functionality, the ability to conceal, deployment, and code-signature.</p>



<p class="has-normal-font-size">The research has shown that the driver provides key functionalities to hide malicious processes, services, and registry keys. Another dangerous action of the driver is the injection of malicious code into newly created processes. Moreover, the driver also implements the minifilter, which monitors and affects I/O operations on the file system. Therefore, the content of the file system is filtered, and appropriate files/directories can be hidden for users. An implication of this finding is that malware itself and its artifacts are hidden even for AVs. More importantly, the driver implements another anti-forensic technique which removes the driver’s evidence from disk and registry immediately after driver loading. However, a few traces can be found on the victim’s machines.</p>



<p class="has-normal-font-size">This study has provided the first comprehensive review of the driver that protects and serves each malware service and process of the DirtyMoe malware. The scope of this study was limited in terms of driver functionality. However, further experimental investigations are needed to hunt out and investigate other samples that have been signed by the revoked certificates. Because of this, the malware author can be traced and identified using thus abused certificates.</p>



<h1 class="wp-block-heading">IoCs</h1>



<p class="has-normal-font-size"><strong>Samples (SHA-256)</strong><br><code>550F8D092AFCD1D08AC63D9BEE9E7400E5C174B9C64D551A2AD19AD19C0126B1<br>AABA7DB353EB9400E3471EAAA1CF0105F6D1FAB0CE63F1A2665C8BA0E8963A05<br>B3B5FFF57040C801A4392DA2AF83F4BF6200C575AA4A64AB9A135B58AA516080<br>CB95EF8809A89056968B669E038BA84F708DF26ADD18CE4F5F31A5C9338188F9<br>EB29EDD6211836E6D1877A1658E648BEB749091CE7D459DBD82DC57C84BC52B1</code></p>



<h1 class="wp-block-heading" id="tl-references">References</h1>



<p class="has-normal-font-size">[1] <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/irp-mj-device-control" target="_blank" rel="noreferrer noopener">Kernel-Mode Driver Architecture</a><br>[2] <a href="https://www.codeproject.com/Articles/32744/Driver-to-Hide-Processes-and-Files" target="_blank" rel="noreferrer noopener">Driver to Hide Processes and Files</a><br>[3] <a href="http://pstgroup.blogspot.com/2007/07/tips.html" target="_blank" rel="noreferrer noopener">A piece of code to hide registry entries</a><br>[4] <a href="https://github.com/JKornev/hidden" target="_blank" rel="noreferrer noopener">Hidden</a><br>[5] <a href="https://blogs.blackberry.com/en/2017/10/threat-spotlight-opening-hackers-door" target="_blank" rel="noreferrer noopener">Opening Hacker’s Door</a><br>[6] <a href="http://www.rohitab.com/discuss/topic/41522-hiding-loaded-driver-with-dkom" target="_blank" rel="noreferrer noopener">Hiding loaded driver with DKOM</a><br>[7] <a href="https://crashdmp.files.wordpress.com/2013/05/cfp-whitepaper.pdf" target="_blank" rel="noreferrer noopener">Crashdmp-ster Diving the Windows 8 Crash Dump Stack</a><br>[8] <a href="https://devblogs.microsoft.com/oldnewthing/20160913-00/?p=94305" target="_blank" rel="noreferrer noopener">Ghost drivers named dump_*.sys</a><br>[9] <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/install/driver-signing" target="_blank" rel="noreferrer noopener">Driver Signing</a><br>[10] <a href="https://www.zdnet.com/article/australian-web-hosts-hit-with-a-manic-menagerie-of-malware" target="_blank" rel="noreferrer noopener">Australian web hosts hit with a Manic Menagerie of malware</a></p>



<h2 class="wp-block-heading" id="tl-appendix-a">Appendix A</h2>



<p class="has-normal-font-size"><strong>Registry entries used in the </strong><a href="#tl-start-routine"><strong>Start Routine</strong></a></p>



<p class="has-normal-font-size"><code>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceAddress<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceNumber<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceId<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceName<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceNameB<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceNameOnly<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverMaker1<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverMaker1_2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverMaker2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverMaker2_2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDevicePathA<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDevicePathB<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverPath1<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverPath1_2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverPath2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverPath2_2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceDataA<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDeviceDataB<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverDataA<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverDataA_2<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverDataB<br>\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\WinApi\\WinDriverDataB_2</code></p>



<h2 class="wp-block-heading" id="tl-appendix-b"><br> Appendix B</h2>



<p class="has-normal-font-size"><strong>Example of registry entries configuring the driver</strong></p>



<p class="has-normal-font-size">Key: <code>ControlSet001\Control\WinApi</code><br>Value: <code>WinDeviceAddress</code><br>Data: <code>Ms312B9050App</code>;&nbsp;&nbsp;&nbsp;</p>



<p class="has-normal-font-size">Value: <code>WinDeviceNumber</code><br>Data:<br><code>\WINDOWS\AppPatch\Ke601169.xsl;<br>\WINDOWS\AppPatch\Ke237043.xsl;<br>\WINDOWS\AppPatch\Ke311799.xsl;<br>\WINDOWS\AppPatch\Ke119163.xsl;<br>\WINDOWS\AppPatch\Ke531580.xsl;<br>\WINDOWS\AppPatch\Ke856583.xsl;<br>\WINDOWS\AppPatch\Ke999860.xsl;<br>\WINDOWS\AppPatch\Ke410472.xsl;<br>\WINDOWS\AppPatch\Ke673389.xsl;<br>\WINDOWS\AppPatch\Ke687417.xsl;<br>\WINDOWS\AppPatch\Ke689468.xsl;<br>\WINDOWS\AppPatch\Ac312B9050.sdb;<br>\WINDOWS\System32\Ms312B9050App.dll;</code></p>



<p class="has-normal-font-size">Value: <code>WinDeviceName</code><br>Data:<br><code>C:\WINDOWS\AppPatch\Ac312B9050.sdb;<br>C:\WINDOWS\System32\Ms312B9050App.dll;</code></p>



<p class="has-normal-font-size">Value: <code>WinDeviceId</code><br>Data: <code>dump_FDC.sys</code>;</p>
                                            </div>

                </article>

                                    <div class="entry-tags clearfix">
                        <span>Tagged as</span><a href="https://decoded.avast.io/tag/dirtymoe/" rel="tag">DirtyMoe</a>, <a href="https://decoded.avast.io/tag/rootkit/" rel="tag">rootkit</a>, <a href="https://decoded.avast.io/tag/series/" rel="tag">series</a>                    </div>
                
                                     
		<div class="meks_ess no-labels"><span class="johannes-share-label">Share:</span><a href="#" class="meks_ess-item socicon-twitter" data-url="http://twitter.com/intent/tweet?url=https%3A%2F%2Fdecoded.avast.io%2Fmartinchlumecky%2Fdirtymoe-rootkit-driver%2F&amp;text=DirtyMoe%3A%20Rootkit%20Driver"><span>X</span></a><a href="#" class="meks_ess-item socicon-facebook" data-url="http://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdecoded.avast.io%2Fmartinchlumecky%2Fdirtymoe-rootkit-driver%2F&amp;t=DirtyMoe%3A%20Rootkit%20Driver"><span>Facebook</span></a></div>                
                               
		        

            </div>

            
        </div>
    </div>
</div>

        <div class="johannes-section johannes-related section-margin johannes-bg-alt-2">
        <div class="container">
            <div class="section-head">
                <h5 class="section-title h2">Further reading</h5>
            </div>
            <div class="section-content row justify-content-center">
                <div class="col-12 ">
                    <div class="row johannes-items johannes-posts">
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8850 post type-post status-publish format-standard has-post-thumbnail hentry tag-predictions tag-threats category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/"><img width="259" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/12/predictions3.jpeg" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/other-research/" rel="tag" class="cat-item category-other-research">Other/Research</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">December 4, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatintel/">Threat Intelligence Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The digital world is evolving at breakneck speed. In 2025, we’re set to witness transformative changes in cybersecurity that will redefine trust, security, and how we navigate our digital lives. Here’s what we see coming: AI Blurs Reality: Hyper-personalized AI experiences will raise questions...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8842 post type-post status-publish format-standard has-post-thumbnail hentry tag-desktop tag-malware tag-mobile tag-report tag-risk tag-threats category-reports">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/"><img width="291" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/11/jamesathatch_a_group_of_cybersecurity_experts_analysing_graphs__85ce4799-6a1a-45dd-be38-bdb871363db7.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">November 19, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatresearch/">Threat Research Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The third quarter threat report is here—and it’s packed with answers. Our Threat Labs team had uncovered some heavy stories behind the stats, exposing the relentless tactics shaping today’s threat landscape. Here’s what you need to know: 614% explosion in Scam-Yourself Attacks: Over 2 million users...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8701 post type-post status-publish format-standard has-post-thumbnail hentry tag-ai tag-cryptocurrency tag-scam category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-540x304.png 540w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">August 13, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/martinchlumecky1/">Martin Chlumecký</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>As digital currencies have grown, so have cryptocurrency scams, posing significant user risks. The rise of AI and deepfake technology has intensified scams exploiting famous personalities and events by creating realistic fake videos. Platforms like X and YouTube have been especially targeted, with...</p>
	    </div>
        </article>                        </div>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    

    
    
    <footer id="johannes-footer" class="johannes-footer">
        <div class="container">

                            <div class="footer-divider"></div>
                
	<div class="row johannes-footer-widgets justify-content-center">
	    	        	    	        	    	        	    	        	    	</div>
            
                            <div class="johannes-copyright">
                    <p>2024 Copyright © Avast Software s.r.o.</p>
                </div>
                    </div>
    </footer>

            <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>    

</div>


    <a href="javascript:void(0)" id="johannes-goto-top" class="johannes-goto-top"><i class="jf jf-chevron-up"></i></a>

<div class="johannes-action-overlay">

</div><div class="johannes-sidebar johannes-sidebar-hidden">

	<div class="johannes-sidebar-branding">
	    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span>	    <span class="johannes-action-close"><i class="jf jf-close" aria-hidden="true"></i></span>
	</div>	

		<div class="johannes-menu-mobile widget d-md-block d-lg-none">
		<div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Menu</h4>
			    <nav class="menu-main-menu-container"><ul id="menu-main-menu-1" class="johannes-menu johannes-menu-primary"><li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>			                                    <ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>                            		</div>
	</div>

		    <div id="categories-2" class="widget widget_categories"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-32 category-events"><a href="https://decoded.avast.io/category/events/">Events</a>
</li>
	<li class="cat-item cat-item-23 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a>
</li>
	<li class="cat-item cat-item-22 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a>
</li>
	<li class="cat-item cat-item-20 category-network"><a href="https://decoded.avast.io/category/network/">Network</a>
</li>
	<li class="cat-item cat-item-106 category-other-research"><a href="https://decoded.avast.io/category/other-research/">Other/Research</a>
</li>
	<li class="cat-item cat-item-21 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a>
</li>
	<li class="cat-item cat-item-135 category-reports"><a href="https://decoded.avast.io/category/reports/">Reports</a>
</li>
	<li class="cat-item cat-item-1 category-uncategorized"><a href="https://decoded.avast.io/category/uncategorized/">Uncategorized</a>
</li>
			</ul>

			</div></div><div id="tag_cloud-2" class="widget widget_tag_cloud"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Tags</h4><div class="tagcloud"><a href="https://decoded.avast.io/tag/ai/" class="tag-cloud-link tag-link-194 tag-link-position-1" style="font-size: 9.3023255813953pt;" aria-label="AI (3 items)">AI</a>
<a href="https://decoded.avast.io/tag/analysis/" class="tag-cloud-link tag-link-5 tag-link-position-2" style="font-size: 20.480620155039pt;" aria-label="analysis (42 items)">analysis</a>
<a href="https://decoded.avast.io/tag/android/" class="tag-cloud-link tag-link-6 tag-link-position-3" style="font-size: 12.015503875969pt;" aria-label="Android (6 items)">Android</a>
<a href="https://decoded.avast.io/tag/apt/" class="tag-cloud-link tag-link-63 tag-link-position-4" style="font-size: 12.015503875969pt;" aria-label="APT (6 items)">APT</a>
<a href="https://decoded.avast.io/tag/backdoor/" class="tag-cloud-link tag-link-65 tag-link-position-5" style="font-size: 14.837209302326pt;" aria-label="backdoor (12 items)">backdoor</a>
<a href="https://decoded.avast.io/tag/botnet/" class="tag-cloud-link tag-link-157 tag-link-position-6" style="font-size: 10.387596899225pt;" aria-label="botnet (4 items)">botnet</a>
<a href="https://decoded.avast.io/tag/brazil/" class="tag-cloud-link tag-link-38 tag-link-position-7" style="font-size: 8pt;" aria-label="brazil (2 items)">brazil</a>
<a href="https://decoded.avast.io/tag/cryptocurrency/" class="tag-cloud-link tag-link-105 tag-link-position-8" style="font-size: 11.255813953488pt;" aria-label="cryptocurrency (5 items)">cryptocurrency</a>
<a href="https://decoded.avast.io/tag/cryptomining/" class="tag-cloud-link tag-link-9 tag-link-position-9" style="font-size: 14.077519379845pt;" aria-label="cryptomining (10 items)">cryptomining</a>
<a href="https://decoded.avast.io/tag/csrf/" class="tag-cloud-link tag-link-26 tag-link-position-10" style="font-size: 9.3023255813953pt;" aria-label="csrf (3 items)">csrf</a>
<a href="https://decoded.avast.io/tag/ddos/" class="tag-cloud-link tag-link-173 tag-link-position-11" style="font-size: 9.3023255813953pt;" aria-label="ddos (3 items)">ddos</a>
<a href="https://decoded.avast.io/tag/decryptor/" class="tag-cloud-link tag-link-165 tag-link-position-12" style="font-size: 12.558139534884pt;" aria-label="decryptor (7 items)">decryptor</a>
<a href="https://decoded.avast.io/tag/decryptors/" class="tag-cloud-link tag-link-134 tag-link-position-13" style="font-size: 15.271317829457pt;" aria-label="decryptors (13 items)">decryptors</a>
<a href="https://decoded.avast.io/tag/desktop/" class="tag-cloud-link tag-link-139 tag-link-position-14" style="font-size: 15.271317829457pt;" aria-label="desktop (13 items)">desktop</a>
<a href="https://decoded.avast.io/tag/dirtymoe/" class="tag-cloud-link tag-link-117 tag-link-position-15" style="font-size: 11.255813953488pt;" aria-label="DirtyMoe (5 items)">DirtyMoe</a>
<a href="https://decoded.avast.io/tag/dns-hijack/" class="tag-cloud-link tag-link-27 tag-link-position-16" style="font-size: 9.3023255813953pt;" aria-label="dns hijack (3 items)">dns hijack</a>
<a href="https://decoded.avast.io/tag/exploit/" class="tag-cloud-link tag-link-28 tag-link-position-17" style="font-size: 12.558139534884pt;" aria-label="exploit (7 items)">exploit</a>
<a href="https://decoded.avast.io/tag/fake-app/" class="tag-cloud-link tag-link-7 tag-link-position-18" style="font-size: 8pt;" aria-label="fake-app (2 items)">fake-app</a>
<a href="https://decoded.avast.io/tag/ghostdns/" class="tag-cloud-link tag-link-29 tag-link-position-19" style="font-size: 9.3023255813953pt;" aria-label="ghostdns (3 items)">ghostdns</a>
<a href="https://decoded.avast.io/tag/google-play-store/" class="tag-cloud-link tag-link-40 tag-link-position-20" style="font-size: 8pt;" aria-label="Google Play Store (2 items)">Google Play Store</a>
<a href="https://decoded.avast.io/tag/iot/" class="tag-cloud-link tag-link-13 tag-link-position-21" style="font-size: 13.100775193798pt;" aria-label="iot (8 items)">iot</a>
<a href="https://decoded.avast.io/tag/malware/" class="tag-cloud-link tag-link-37 tag-link-position-22" style="font-size: 22pt;" aria-label="malware (58 items)">malware</a>
<a href="https://decoded.avast.io/tag/mobile/" class="tag-cloud-link tag-link-8 tag-link-position-23" style="font-size: 16.899224806202pt;" aria-label="mobile (19 items)">mobile</a>
<a href="https://decoded.avast.io/tag/obfuscation/" class="tag-cloud-link tag-link-57 tag-link-position-24" style="font-size: 11.255813953488pt;" aria-label="obfuscation (5 items)">obfuscation</a>
<a href="https://decoded.avast.io/tag/p-code/" class="tag-cloud-link tag-link-110 tag-link-position-25" style="font-size: 11.255813953488pt;" aria-label="P-Code (5 items)">P-Code</a>
<a href="https://decoded.avast.io/tag/phishing/" class="tag-cloud-link tag-link-31 tag-link-position-26" style="font-size: 11.255813953488pt;" aria-label="phishing (5 items)">phishing</a>
<a href="https://decoded.avast.io/tag/predictions/" class="tag-cloud-link tag-link-14 tag-link-position-27" style="font-size: 8pt;" aria-label="predictions (2 items)">predictions</a>
<a href="https://decoded.avast.io/tag/ransomware/" class="tag-cloud-link tag-link-47 tag-link-position-28" style="font-size: 15.813953488372pt;" aria-label="ransomware (15 items)">ransomware</a>
<a href="https://decoded.avast.io/tag/rat/" class="tag-cloud-link tag-link-34 tag-link-position-29" style="font-size: 11.255813953488pt;" aria-label="rat (5 items)">rat</a>
<a href="https://decoded.avast.io/tag/report/" class="tag-cloud-link tag-link-136 tag-link-position-30" style="font-size: 14.837209302326pt;" aria-label="report (12 items)">report</a>
<a href="https://decoded.avast.io/tag/research/" class="tag-cloud-link tag-link-109 tag-link-position-31" style="font-size: 12.558139534884pt;" aria-label="Research (7 items)">Research</a>
<a href="https://decoded.avast.io/tag/reversing/" class="tag-cloud-link tag-link-45 tag-link-position-32" style="font-size: 16.46511627907pt;" aria-label="reversing (17 items)">reversing</a>
<a href="https://decoded.avast.io/tag/risk/" class="tag-cloud-link tag-link-138 tag-link-position-33" style="font-size: 14.837209302326pt;" aria-label="risk (12 items)">risk</a>
<a href="https://decoded.avast.io/tag/rootkit/" class="tag-cloud-link tag-link-126 tag-link-position-34" style="font-size: 11.255813953488pt;" aria-label="rootkit (5 items)">rootkit</a>
<a href="https://decoded.avast.io/tag/router/" class="tag-cloud-link tag-link-25 tag-link-position-35" style="font-size: 9.3023255813953pt;" aria-label="router (3 items)">router</a>
<a href="https://decoded.avast.io/tag/security/" class="tag-cloud-link tag-link-54 tag-link-position-36" style="font-size: 9.3023255813953pt;" aria-label="security (3 items)">security</a>
<a href="https://decoded.avast.io/tag/series/" class="tag-cloud-link tag-link-113 tag-link-position-37" style="font-size: 15.813953488372pt;" aria-label="series (15 items)">series</a>
<a href="https://decoded.avast.io/tag/spyware/" class="tag-cloud-link tag-link-35 tag-link-position-38" style="font-size: 8pt;" aria-label="spyware (2 items)">spyware</a>
<a href="https://decoded.avast.io/tag/stealer/" class="tag-cloud-link tag-link-36 tag-link-position-39" style="font-size: 13.100775193798pt;" aria-label="stealer (8 items)">stealer</a>
<a href="https://decoded.avast.io/tag/takedown/" class="tag-cloud-link tag-link-50 tag-link-position-40" style="font-size: 8pt;" aria-label="takedown (2 items)">takedown</a>
<a href="https://decoded.avast.io/tag/threat-intel/" class="tag-cloud-link tag-link-11 tag-link-position-41" style="font-size: 8pt;" aria-label="threat-intel (2 items)">threat-intel</a>
<a href="https://decoded.avast.io/tag/threats/" class="tag-cloud-link tag-link-137 tag-link-position-42" style="font-size: 15.596899224806pt;" aria-label="threats (14 items)">threats</a>
<a href="https://decoded.avast.io/tag/vb/" class="tag-cloud-link tag-link-108 tag-link-position-43" style="font-size: 12.558139534884pt;" aria-label="VB (7 items)">VB</a>
<a href="https://decoded.avast.io/tag/vulnerability/" class="tag-cloud-link tag-link-12 tag-link-position-44" style="font-size: 12.015503875969pt;" aria-label="vulnerability (6 items)">vulnerability</a>
<a href="https://decoded.avast.io/tag/worm/" class="tag-cloud-link tag-link-49 tag-link-position-45" style="font-size: 8pt;" aria-label="worm (2 items)">worm</a></div>
</div></div>
		<div id="recent-posts-2" class="widget widget_recent_entries"><div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/">Decrypted: DoNex Ransomware and its Predecessors</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/">New Diamorphine rootkit variant seen undetected in the wild</a>
									</li>
					</ul>

		</div></div><div id="archives-2" class="widget widget_archive"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Archive</h4>
			<ul>
					<li><a href='https://decoded.avast.io/2024/12/'>December 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/11/'>November 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/08/'>August 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/07/'>July 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/06/'>June 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/05/'>May 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/04/'>April 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/02/'>February 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/01/'>January 2024</a></li>
	<li><a href='https://decoded.avast.io/2023/12/'>December 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/11/'>November 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/10/'>October 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/09/'>September 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/08/'>August 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/07/'>July 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/06/'>June 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/05/'>May 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/04/'>April 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/02/'>February 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/01/'>January 2023</a></li>
	<li><a href='https://decoded.avast.io/2022/12/'>December 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/11/'>November 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/10/'>October 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/09/'>September 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/08/'>August 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/07/'>July 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/06/'>June 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/05/'>May 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/04/'>April 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/03/'>March 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/02/'>February 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/01/'>January 2022</a></li>
	<li><a href='https://decoded.avast.io/2021/12/'>December 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/11/'>November 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/10/'>October 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/09/'>September 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/08/'>August 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/07/'>July 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/06/'>June 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/05/'>May 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/04/'>April 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/03/'>March 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/02/'>February 2021</a></li>
	<li><a href='https://decoded.avast.io/2020/12/'>December 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/11/'>November 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/10/'>October 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/09/'>September 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/08/'>August 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/06/'>June 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/05/'>May 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/04/'>April 2020</a></li>
	<li><a href='https://decoded.avast.io/2019/12/'>December 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/09/'>September 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/08/'>August 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/07/'>July 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/04/'>April 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/03/'>March 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/02/'>February 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/01/'>January 2019</a></li>
	<li><a href='https://decoded.avast.io/2018/08/'>August 2018</a></li>
	<li><a href='https://decoded.avast.io/2018/01/'>January 2018</a></li>
	<li><a href='https://decoded.avast.io/2017/10/'>October 2017</a></li>
			</ul>

			</div></div><div id="meta-2" class="widget widget_meta"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Meta</h4>
		<ul>
						<li><a rel="nofollow" href="https://decoded.avast.io/wp-login.php">Log in</a></li>
			<li><a href="https://decoded.avast.io/feed/">Entries feed</a></li>
			<li><a href="https://decoded.avast.io/comments/feed/">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</div></div>    
</div>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.masonry.min.js?ver=3.1.2b" id="jquery-masonry-js"></script>
<script type="text/javascript" id="johannes-main-js-extra">
/* <![CDATA[ */
var johannes_js_settings = {"rtl_mode":"","header_sticky":"","header_sticky_offset":"300","header_sticky_up":"","popup":"1","go_to_top":"1","grid":{"column":50,"gutter":{"xs":15,"sm":15,"md":30,"lg":30,"xl":48},"breakpoint":{"xs":0,"sm":374,"md":600,"lg":900,"xl":1128}}};
/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/themes/johannes/assets/js/min.js?ver=1.1.3" id="johannes-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/js/main.js?ver=1.3" id="meks_ess-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.7" id="page-links-to-js"></script>
<script type="text/javascript">(function (undefined) {let scriptOptions={"_localizedStrings":{"redirect_overlay_title":"Hold On","redirect_overlay_text":"You are being redirected to another page,<br>it may take a few seconds.","webview_notification_text":"The selected provider doesn't support embedded browsers!"},"_targetWindow":"prefer-popup","_redirectOverlay":"overlay-with-spinner-and-message","_unsupportedWebviewBehavior":""};
/**
 * Used when Cross-Origin-Opener-Policy blocked the access to the opener. We can't have a reference of the opened windows, so we should attempt to refresh only the windows that has opened popups.
 */
window._nslHasOpenedPopup = false;
window._nslWebViewNoticeElement = null;

window.NSLPopup = function (url, title, w, h) {
    const userAgent = navigator.userAgent,
        mobile = function () {
            return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                /\b(iP[ao]d)/.test(userAgent) ||
                /Android/i.test(userAgent) ||
                /Mobile/i.test(userAgent);
        },
        screenX = window.screenX !== undefined ? window.screenX : window.screenLeft,
        screenY = window.screenY !== undefined ? window.screenY : window.screenTop,
        outerWidth = window.outerWidth !== undefined ? window.outerWidth : document.documentElement.clientWidth,
        outerHeight = window.outerHeight !== undefined ? window.outerHeight : document.documentElement.clientHeight - 22,
        targetWidth = mobile() ? null : w,
        targetHeight = mobile() ? null : h,
        left = parseInt(screenX + (outerWidth - targetWidth) / 2, 10),
        right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
        features = [];
    if (targetWidth !== null) {
        features.push('width=' + targetWidth);
    }
    if (targetHeight !== null) {
        features.push('height=' + targetHeight);
    }
    features.push('left=' + left);
    features.push('top=' + right);
    features.push('scrollbars=1');

    const newWindow = window.open(url, title, features.join(','));

    if (window.focus) {
        newWindow.focus();
    }

    window._nslHasOpenedPopup = true;

    return newWindow;
};

let isWebView = null;

function checkWebView() {
    if (isWebView === null) {
        function _detectOS(ua) {
            if (/Android/.test(ua)) {
                return "Android";
            } else if (/iPhone|iPad|iPod/.test(ua)) {
                return "iOS";
            } else if (/Windows/.test(ua)) {
                return "Windows";
            } else if (/Mac OS X/.test(ua)) {
                return "Mac";
            } else if (/CrOS/.test(ua)) {
                return "Chrome OS";
            } else if (/Firefox/.test(ua)) {
                return "Firefox OS";
            }
            return "";
        }

        function _detectBrowser(ua) {
            let android = /Android/.test(ua);

            if (/Opera Mini/.test(ua) || / OPR/.test(ua) || / OPT/.test(ua)) {
                return "Opera";
            } else if (/CriOS/.test(ua)) {
                return "Chrome for iOS";
            } else if (/Edge/.test(ua)) {
                return "Edge";
            } else if (android && /Silk\//.test(ua)) {
                return "Silk";
            } else if (/Chrome/.test(ua)) {
                return "Chrome";
            } else if (/Firefox/.test(ua)) {
                return "Firefox";
            } else if (android) {
                return "AOSP";
            } else if (/MSIE|Trident/.test(ua)) {
                return "IE";
            } else if (/Safari\//.test(ua)) {
                return "Safari";
            } else if (/AppleWebKit/.test(ua)) {
                return "WebKit";
            }
            return "";
        }

        function _detectBrowserVersion(ua, browser) {
            if (browser === "Opera") {
                return /Opera Mini/.test(ua) ? _getVersion(ua, "Opera Mini/") :
                    / OPR/.test(ua) ? _getVersion(ua, " OPR/") :
                        _getVersion(ua, " OPT/");
            } else if (browser === "Chrome for iOS") {
                return _getVersion(ua, "CriOS/");
            } else if (browser === "Edge") {
                return _getVersion(ua, "Edge/");
            } else if (browser === "Chrome") {
                return _getVersion(ua, "Chrome/");
            } else if (browser === "Firefox") {
                return _getVersion(ua, "Firefox/");
            } else if (browser === "Silk") {
                return _getVersion(ua, "Silk/");
            } else if (browser === "AOSP") {
                return _getVersion(ua, "Version/");
            } else if (browser === "IE") {
                return /IEMobile/.test(ua) ? _getVersion(ua, "IEMobile/") :
                    /MSIE/.test(ua) ? _getVersion(ua, "MSIE ")
                        :
                        _getVersion(ua, "rv:");
            } else if (browser === "Safari") {
                return _getVersion(ua, "Version/");
            } else if (browser === "WebKit") {
                return _getVersion(ua, "WebKit/");
            }
            return "0.0.0";
        }

        function _getVersion(ua, token) {
            try {
                return _normalizeSemverString(ua.split(token)[1].trim().split(/[^\w\.]/)[0]);
            } catch (o_O) {
            }
            return "0.0.0";
        }

        function _normalizeSemverString(version) {
            const ary = version.split(/[\._]/);
            return (parseInt(ary[0], 10) || 0) + "." +
                (parseInt(ary[1], 10) || 0) + "." +
                (parseInt(ary[2], 10) || 0);
        }

        function _isWebView(ua, os, browser, version, options) {
            switch (os + browser) {
                case "iOSSafari":
                    return false;
                case "iOSWebKit":
                    return _isWebView_iOS(options);
                case "AndroidAOSP":
                    return false;
                case "AndroidChrome":
                    return parseFloat(version) >= 42 ? /; wv/.test(ua) : /\d{2}\.0\.0/.test(version) ? true : _isWebView_Android(options);
            }
            return false;
        }

        function _isWebView_iOS(options) {
            const document = (window["document"] || {});

            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("fullscreenEnabled" in document || "webkitFullscreenEnabled" in document || false);
        }

        function _isWebView_Android(options) {
            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("requestFileSystem" in window || "webkitRequestFileSystem" in window || false);
        }

        const options = {},
            nav = window.navigator || {},
            ua = nav.userAgent || "",
            os = _detectOS(ua),
            browser = _detectBrowser(ua),
            browserVersion = _detectBrowserVersion(ua, browser);

        isWebView = _isWebView(ua, os, browser, browserVersion, options);
    }

    return isWebView;
}

function isAllowedWebViewForUserAgent(provider) {
    const facebookAllowedWebViews = [
        'Instagram',
        'FBAV',
        'FBAN'
    ];
    let whitelist = [];

    if (provider && provider === 'facebook') {
        whitelist = facebookAllowedWebViews;
    }

    const nav = window.navigator || {},
        ua = nav.userAgent || "";

    if (whitelist.length && ua.match(new RegExp(whitelist.join('|')))) {
        return true;
    }

    return false;
}

function disableButtonInWebView(providerButtonElement) {
    if (providerButtonElement) {
        providerButtonElement.classList.add('nsl-disabled-provider');
        providerButtonElement.setAttribute('href', '#');

        providerButtonElement.addEventListener('pointerdown', (e) => {
            if (!window._nslWebViewNoticeElement) {
                window._nslWebViewNoticeElement = document.createElement('div');
                window._nslWebViewNoticeElement.id = "nsl-notices-fallback";
                window._nslWebViewNoticeElement.addEventListener('pointerdown', function (e) {
                    this.parentNode.removeChild(this);
                    window._nslWebViewNoticeElement = null;
                });
                const webviewNoticeHTML = '<div class="error"><p>' + scriptOptions._localizedStrings.webview_notification_text + '</p></div>';

                window._nslWebViewNoticeElement.insertAdjacentHTML("afterbegin", webviewNoticeHTML);
                document.body.appendChild(window._nslWebViewNoticeElement);
            }
        });
    }

}

window._nslDOMReady(function () {

    window.nslRedirect = function (url) {
        if (scriptOptions._redirectOverlay) {
            const overlay = document.createElement('div');
            overlay.id = "nsl-redirect-overlay";
            let overlayHTML = '';
            const overlayContainer = "<div id='nsl-redirect-overlay-container'>",
                overlayContainerClose = "</div>",
                overlaySpinner = "<div id='nsl-redirect-overlay-spinner'></div>",
                overlayTitle = "<p id='nsl-redirect-overlay-title'>" + scriptOptions._localizedStrings.redirect_overlay_title + "</p>",
                overlayText = "<p id='nsl-redirect-overlay-text'>" + scriptOptions._localizedStrings.redirect_overlay_text + "</p>";

            switch (scriptOptions._redirectOverlay) {
                case "overlay-only":
                    break;
                case "overlay-with-spinner":
                    overlayHTML = overlayContainer + overlaySpinner + overlayContainerClose;
                    break;
                default:
                    overlayHTML = overlayContainer + overlaySpinner + overlayTitle + overlayText + overlayContainerClose;
                    break;
            }

            overlay.insertAdjacentHTML("afterbegin", overlayHTML);
            document.body.appendChild(overlay);
        }

        window.location = url;
    };

    let targetWindow = scriptOptions._targetWindow || 'prefer-popup',
        lastPopup = false;


    document.addEventListener('click', function (e) {
        if (e.target) {
            const buttonLinkElement = e.target.closest('a[data-plugin="nsl"][data-action="connect"]') || e.target.closest('a[data-plugin="nsl"][data-action="link"]');
            if (buttonLinkElement) {
                if (lastPopup && !lastPopup.closed) {
                    e.preventDefault();
                    lastPopup.focus();
                } else {

                    let href = buttonLinkElement.href,
                        success = false;
                    if (href.indexOf('?') !== -1) {
                        href += '&';
                    } else {
                        href += '?';
                    }

                    const redirectTo = buttonLinkElement.dataset.redirect;
                    if (redirectTo === 'current') {
                        href += 'redirect=' + encodeURIComponent(window.location.href) + '&';
                    } else if (redirectTo && redirectTo !== '') {
                        href += 'redirect=' + encodeURIComponent(redirectTo) + '&';
                    }

                    if (targetWindow !== 'prefer-same-window' && checkWebView()) {
                        targetWindow = 'prefer-same-window';
                    }

                    if (targetWindow === 'prefer-popup') {
                        lastPopup = NSLPopup(href + 'display=popup', 'nsl-social-connect', buttonLinkElement.dataset.popupwidth, buttonLinkElement.dataset.popupheight);
                        if (lastPopup) {
                            success = true;
                            e.preventDefault();
                        }
                    } else if (targetWindow === 'prefer-new-tab') {
                        const newTab = window.open(href + 'display=popup', '_blank');
                        if (newTab) {
                            if (window.focus) {
                                newTab.focus();
                            }
                            success = true;
                            window._nslHasOpenedPopup = true;
                            e.preventDefault();
                        }
                    }

                    if (!success) {
                        window.location = href;
                        e.preventDefault();
                    }
                }
            }
        }
    });

    let buttonCountChanged = false;

    const googleLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="google"]');
    if (googleLoginButtons.length && checkWebView()) {
        googleLoginButtons.forEach(function (googleLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(googleLoginButton);
            } else {
                googleLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const facebookLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="facebook"]');
    if (facebookLoginButtons.length && checkWebView() && /Android/.test(window.navigator.userAgent) && !isAllowedWebViewForUserAgent('facebook')) {
        facebookLoginButtons.forEach(function (facebookLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(facebookLoginButton);
            } else {
                facebookLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const separators = document.querySelectorAll('div.nsl-separator');
    if (buttonCountChanged && separators.length) {
        separators.forEach(function (separator) {
            const separatorParentNode = separator.parentNode;
            if (separatorParentNode) {
                const separatorButtonContainer = separatorParentNode.querySelector('div.nsl-container-buttons');
                if (separatorButtonContainer && !separatorButtonContainer.hasChildNodes()) {
                    separator.remove();
                }
            }
        })
    }
});

/**
 * Cross-Origin-Opener-Policy blocked the access to the opener
 */
if (typeof BroadcastChannel === "function") {
    const _nslLoginBroadCastChannel = new BroadcastChannel('nsl_login_broadcast_channel');
    _nslLoginBroadCastChannel.onmessage = (event) => {
        if (window?._nslHasOpenedPopup && event.data?.action === 'redirect') {
            window._nslHasOpenedPopup = false;

            const url = event.data?.href;
            _nslLoginBroadCastChannel.close();
            if (typeof window.nslRedirect === 'function') {
                window.nslRedirect(url);
            } else {
                window.opener.location = url;
            }
        }
    };
}})();</script></body>

</html>