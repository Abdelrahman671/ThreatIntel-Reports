<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Embracing offensive tooling: Building detections against Koadic using EQL — Elastic Security Labs</title><meta name="description" content="Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL)."/><meta property="og:title" content="Embracing offensive tooling: Building detections against Koadic using EQL — Elastic Security Labs"/><meta property="og:description" content="Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL)."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/blog-thumb-network-attack-map.jpg?8a79995f717ec1916998b6d2b08ae52e"/><meta property="og:image:alt" content="Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL)."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Embracing offensive tooling: Building detections against Koadic using EQL — Elastic Security Labs"/><meta name="twitter:description" content="Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL)."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/blog-thumb-network-attack-map.jpg?8a79995f717ec1916998b6d2b08ae52e"/><meta name="twitter:image:alt" content="Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL)."/><link rel="canonical" href="https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2022-06-01T00:00:00.000Z">1 June 2022</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Embracing offensive tooling: Building detections against Koadic using&nbsp;EQL</span></h1><p class="text-zinc-200 text-base md:text-xl">Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL).</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>13 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Embracing offensive tooling: Building detections against Koadic using EQL" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fembracing-offensive-tooling-building-detections-against-koadic-using-eql%2Fblog-thumb-network-attack-map.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><p>This year at <a href="http://www.bsidesdfw.com/">BSidesDFW</a>, my local security conference, I highlighted a continuing trend of adversaries using open source offensive tools. The <a href="https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs">talk</a> reviewed one of these post-exploitation frameworks named <a href="https://github.com/zerosum0x0/koadic">Koadic</a> and walked through different ways defenders can build behavioral detections through the use of <a href="https://www.endgame.com/blog/technical-blog/introducing-event-query-language">Event Query Language</a> (EQL). In this post, I wanted to review this research by providing background into Koadic and its features, why it’s relevant, and then dive into some EQL examples where I will share different detection strategies against the Koadic framework.</p>
<p>Adversaries continue to adopt open source attack frameworks as part of their toolset. By using these off-the-shelf tools, attackers are able to complete their objectives while reducing their development costs and present attribution problems for incident responders. These tools challenge traditional investigative techniques by creating the idea of plausible deniability and leave fewer toolmarks that can be traced back to an adversary. Even with strong threat intelligence capabilities and proper defensive visibility, it’s not always an easy task to differentiate red team operations from real adversary behavior — especially in the early phases of an attack.</p>
<p>As defenders, we are required to actively monitor offensive open source projects. These projects serve as canaries in a coal mine, giving us an opportunity to gain insights into new attacker tradecraft. Not only does this get us into an attacker mindset, but all the code is freely available for emulation and review. Some different ways to get value from dissecting these tools can be through validating your detection capabilities, generating new analytics, developing threat hunting hypotheses, or by simply transferring knowledge around an underlying behavior.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="why-koadic" class="absolute -top-32"></span>Why Koadic?</h3>
<p>Koadic is a great candidate to demonstrate behavior-based detections due its interesting way of leveraging technologies built into the Windows OS — such as Windows Script Host (WSH) and the Component Object Model (COM). COM and WSH fall into the general category of “living off the land” tools, which allow adversaries to proxy the execution of their toolset through <a href="https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries">built-in Windows programs</a>.</p>
<p>This can be very desirable from an attacker’s standpoint, as it allows them to blend in better within the network while producing less of a forensic footprint — rather than dropping and executing a file on disk. COM and WSH are particularly attractive to attackers because of a lack of robust, built-in logging capabilities in contrast to tools like PowerShell (for which Windows has added extensive logging capabilities in newer versions). Koadic is good enough for mature threat groups such as <a href="https://attack.mitre.org/groups/G0007/">APT28</a> and has received frequent updates over the last couple years.</p>
<p></p>
<p><em>Koadic overview &amp; features</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="eql" class="absolute -top-32"></span>EQL</h3>
<p>Some of the more exciting parts of my job as a practitioner come when writing behavioral detections using EQL. This process brings out my inner detective skills that I find to be fulfilling and challenging at the same time. The language enables practitioners to go beyond matching static values such as Indicators of Compromise (IoCs) to a much more comprehensive and flexible way to detect adversary behaviors. With the ability to leverage features like time-bound sequencing or track process lineage, more options are opened up to us as defenders to build reliable and lasting detections.</p>
<p>I find this to be rewarding, as I can directly apply my previous SOC work experience around host-based forensics into a much more dynamic detection that holds up against the latest attacker tradecraft. The best part is that EQL has a very simple syntax with a short learning curve, so if you aren’t able to adopt EQL today, hopefully the logic within these queries can be applied to your current solution.</p>
<p>For a quick recap into the language itself and its core capabilities, I recommend reviewing our previous blog post: <a href="https://www.endgame.com/blog/technical-blog/introducing-event-query-language">Introducing Event Query Language</a>. In summary, EQL is a schema-independent and OS-agnostic language built for real-time detection with stream processing. It supports multiple-event behaviors and also offers post-processing commands used to analyze large amounts of data. With that background, let’s start diving into some of the different ways to detect Koadic using EQL.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initial-access" class="absolute -top-32"></span>Initial access</h3>
<p><strong>Spearphishing Attachment (</strong><a href="https://attack.mitre.org/techniques/T1193/"><strong>T1193</strong></a><strong>)</strong></p>
<p>Validating parent-child process relationships continues to be a fruitful technique for hunting and building detections. As attacker activity becomes more evasive, however, we also have a need for flexibility as defenders. This first example shows off the value of tracking process ancestry using EQL’s descendant function, which lets us maintain state and track full process genealogy. This is an important concept because it goes beyond the typical parent-child process paradigm that many languages are limited to.</p>
<p>By tracking further descendant processes, defenders have the ability to follow process chains infinitely down the process tree. This provides more freedom in how we can express suspicious behavior together while also allowing tighter controls around process ancestry.</p>
<p></p>
<p><em>Descendant process tree visualization (APT28)</em></p>
<p>This process chain comes from a sample <a href="https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/">reported</a> by Palo Alto Networks in June 2018 associated with <a href="https://attack.mitre.org/groups/G0007/">APT28</a> activity. In this EQL expression, we are monitoring all descendant processes of our email client (Outlook.exe) and only looking for new process creation events tied to <a href="https://attack.mitre.org/techniques/T1170/">Mshta</a>. This allows us to focus on the initial attack vector (Spearphishing email) and then filter on Windows programs being used to execute attacker code. This is a great foundation for strong analytics — if we wanted to create something more robust, we could build out a longer array of cohorts associated with initial compromise stages, as well as add the entire Microsoft Office suite as descendants.</p>
<p></p>
<p><em>Initial access &amp; execution - Spearphishing example</em></p>
<p>EQL query:</p>
<pre><code>process where process_name == &quot;mshta.exe&quot; and descendant of
[process where process_name == &quot;outlook.exe&quot;]</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="defense-evasionexecution" class="absolute -top-32"></span>Defense evasion/execution</h3>
<p><strong>Mshta (</strong><a href="https://attack.mitre.org/techniques/T1170/"><strong>T1170</strong></a><strong>), Rundll32 (</strong><a href="https://attack.mitre.org/techniques/T1085/"><strong>T1085</strong></a><strong>)</strong></p>
<p>Tools like Koadic often include some usability features that help facilitate payload building, also known as <a href="https://github.com/zerosum0x0/koadic/tree/master/data/stager/js">stagers</a>. These small pieces of code get executed on the victim machine and are used to establish a network connection back to the attacker in order to bring in a staged payload for execution. Stagers represent a significant portion of the early phases of the intrusion process. The following example continues exploring the detection strategy for a variety of Windows utilities used to proxy execution with Koadic stagers.</p>
<p>The EQL query below uses the sequence operator, a function of EQL that matches based on the order of events in a sequence. In this case, we are matching when one of these standard Windows administration utilities initiates a network connection. Where another language might require an analyst to write several rules — one for each of these utilities — EQL enables us to build an array capable of matching many permutations.</p>
<p>Using the filter operator joins these events in sequence by their process identifier (PID). I like this example because it’s capable of detecting malware and other offensive tools that aren’t specific to Koadic. With that said, it might take a little filtering to remove potentially benign events such as network administrative activity, but this kind of behavior is something every organization should be tracking and reviewing on a certain cadence.</p>
<p></p>
<p><em>Defense evasion &amp; execution - stagers</em></p>
<p>EQL query:</p>
<pre><code>sequence by unique_pid
[process where subtype.create and process_name in
(&quot;mshta.exe&quot;, &quot;regsvr32.exe&quot;, &quot;rundll32.exe&quot;, &quot;wmic.exe&quot;)]
[network where process_name in
(&quot;mshta.exe&quot;, &quot;regsvr32.exe&quot;, &quot;rundll32.exe&quot;, &quot;wmic.exe&quot;)]</code></pre>
<p>One of the more interesting takeaways when reviewing offensive tooling is finding the different artifacts that get left behind unintentionally. All it takes is one “loud” artifact, such as a file or registry modification that sticks out, to quickly find suspicious activity.</p>
<p>In Koadic’s case, HTTP stagers use Internet Explorer’s core architecture to make a web request by default, which causes the stager to be created within the Temporary Internet Files directory. This behavior occurs due to the way Internet Explorer caches browser content to quickly load web pages. Monitoring this kind of behavior with certain executables can lead to reliable detections outside Koadic, such as generic <a href="https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html">cradles</a> used to download and execute malicious code.</p>
<p></p>
<p><em>Defense evasion &amp; execution - cached stager</em></p>
<p>EQL query:</p>
<pre><code>file where process_name in
(&quot;mshta.exe&quot;,&quot;regsvr32.exe&quot;, &quot;rundll32.exe&quot;, &quot;wmic.exe&quot;)
and subtype.create and file_path == &quot;*Content.IE5*&quot;</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="discovery" class="absolute -top-32"></span>Discovery</h3>
<p><strong>Account Discovery (</strong><a href="https://attack.mitre.org/techniques/T1087/"><strong>T1087</strong></a><strong>), Remote System Discovery (</strong><a href="https://attack.mitre.org/techniques/T1018/"><strong>T1096</strong></a><strong>)</strong></p>
<p></p>
<p><em>Discovery - macro</em></p>
<p>A feature of EQL is the ability to share or reuse similar logic between queries. By using macro declaration, we can bundle a collection of items together and call the array like a variable. A good example would be grouping Microsoft Office applications into a macro, or, in this case, several different Windows programs that can be used for discovery and enumeration.</p>
<p>EQL query (macro):</p>
<pre><code>macro KOADIC_DISCOVERY(name)
name in (
&quot;arp.exe&quot;, &quot;findstr.exe&quot;, &quot;hostname.exe&quot;, &quot;ipconfig.exe&quot;,
&quot;nbtstat.exe&quot;, &quot;net.exe&quot;, &quot;net1.exe&quot;, &quot;netsh.exe&quot;,
&quot;nltest.exe&quot;, &quot;ping.exe&quot;, &quot;systeminfo.exe&quot;, &quot;tasklist.exe&quot;,
&quot;tracert.exe&quot;, &quot;whoami.exe&quot;
)</code></pre>
<p>The Elastic Endpoint Resolver view below helps provide some context about how Koadic spawns child processes. By using the Koadic module (exec_cmd), and running a natively supported command such as “whoami /groups”, we can see the Rundll32.exe application was invoked by WmiPrvse.exe and passes instructions down to the command prompt before launching the Whoami.exe application.</p>
<p></p>
<p><em>Elastic Endpoint Resolver visualization</em></p>
<p>Now that we have a better understanding of the attack chain, let’s tie our previous macro (KOADIC_DISCOVERY) into a sequence-based detection looking for three process creation events from any one of those enumeration programs within a period of 10 minutes, executed by the same user. This same feature would let you monitor for processes that were previously observed. For example, maybe 15 days later the process makes a network connection to pull down an additional payload. What other language lets you find long-term payloads that sit dormant for weeks or months?</p>
<p>EQL query:</p>
<pre><code>sequence by user_name with maxspan=10m
[process where subtype.create and KOADIC_DISCOVERY(process_name)]
[process where subtype.create and KOADIC_DISCOVERY(process_name)]
[process where subtype.create and KOADIC_DISCOVERY(process_name)]
| unique user_name</code></pre>
<p>The query above is fully-functional and can be used as a generic detection for initial discovery and enumeration. But what if we had some reason to tighten the logic around Koadic specifically? Understanding the process genealogy of Koadic at the endpoint level, we can leverage different process relationship tracking functions in EQL such as <strong>child of</strong> and <strong>descendant of</strong>.</p>
<p>By using the <strong>child of</strong> function and setting the parent process to Rundll32.exe, we are essentially getting the grandchildren of Rundll32.exe. Then if we wanted to take it even further, we can add the <strong>descendant of</strong> parent process WmiPrvse.exe. This example demonstrates the flexibility of EQL to provide powerful detection capabilities for real adversary behavior.</p>
<p></p>
<p><em>Process tree visualization - child of and descendant of</em></p>
<p>EQL query:</p>
<pre><code>sequence by user_name with maxspan=10m
[process where child of [process where parent_process_name == &quot;rundll32.exe&quot;]
and KOADIC_DISCOVERY(process_name) and
descendant of [process where parent_process_name == &quot;wmiprvse.exe&quot;]]
[process where child of [process where parent_process_name == &quot;rundll32.exe&quot;]
and KOADIC_DISCOVERY(process_name) and
descendant of [process where parent_process_name == &quot;wmiprvse.exe&quot;]]
| unique user_name</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="privilege-escalation" class="absolute -top-32"></span>Privilege escalation</h3>
<p><strong>Bypass User Account Account (</strong><a href="https://attack.mitre.org/techniques/T1088/"><strong>T1088</strong></a><strong>)</strong></p>
<p>While attackers control targeting of victims in many cases, they don’t always wind up with an elevated user during initial compromise. Even when a spearphishing victim is a local administrator, the attacker will oftentimes need to escalate from a Medium to High integrity process before continuing. Off-the-shelf offensive tools like Koadic can enable that transition with relative ease, including several different UAC Bypass modules out of the box.</p>
<p>For this example, we’ll examine a well-known UAC Bypass technique published by Matt Nelson (<a href="https://twitter.com/enigma0x3?s=20">@enigma0x3</a>) while leveraging the Computer Management launcher — CompMgmtLauncher.exe — which is interoperable with the Microsoft Management Console (MMC). Details about this technique, which still works on Windows 7 endpoints, can be found <a href="https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/">here</a>.</p>
<p>This technique involves modifying the Windows Registry to change the default association of files the MMC interacts with (HKCU\Software\Classes\mscfile\shell\open\command) to an application of the attacker’s choice. By deploying a malicious script object with a compatible extension and altering this registry key value to launch a built-in script interpreter, an adversary is able to circumvent controls.</p>
<p>Right after this registry modification, look for the new process creation event tied to the auto-elevated Microsoft program (CompMgmtLauncher.exe), followed by common Koadic stager descendant processes such as Mshta.exe or Rundll32.exe — processes that should be running in a high integrity context. We can combine those events into an ordered sequence and constrain the total run-time for all the steps to complete within 10 seconds.</p>
<p></p>
<p><em>Privilege escalation - UAC bypass</em></p>
<p>EQL query:</p>
<pre><code>sequence with maxspan=10s
[registry where length(bytes_written_string) \&gt; 0 and key_type in
(&quot;sz&quot;, &quot;expandSz&quot;) and key_path == &quot;*\\mscfile\\shell\\open\\command\\&quot;
and user_name != &quot;SYSTEM&quot;]
[process where process_path == &quot;C:\\Windows\\System32\\CompMgmtLauncher.exe&quot;]
[process where process_name in (&quot;mshta.exe&quot;,&quot;rundll32.exe&quot;) and
integrity_level == &quot;high&quot;]</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="collectionexfiltration" class="absolute -top-32"></span>Collection/exfiltration</h3>
<p><strong>Data from Local System (</strong><a href="https://attack.mitre.org/techniques/T1005/"><strong>T1005</strong></a><strong>)</strong></p>
<p>Koadic’s method of C2 may be interesting to analysts of several kinds due to the transactional way it exchanges data between implants and server. This behavior is highlighted through some direct examples of specific commands executed below:</p>
<p></p>
<p><em>Command shell redirection into text files</em></p>
<p>Koadic redirects STDOUT/STDERR to a temporary text file that stores the output of the operator’s commands as they were presented to the server. These commands are then read back into the Koadic C2 terminal. One second after this file is initially created, it is automatically deleted.</p>
<p>With the right endpoint visibility, malicious behaviors you might be incapable of otherwise detecting stand out. To demonstrate a detection around this, we will use the event of function to filter only for processes that come from cmd.exe that contain a redirector (\&gt;), then tie the PID of that process to same PID that performed file activity related to the text (.txt) file activity.</p>
<p>EQL query:</p>
<pre><code>file where file_name == &quot;*.txt&quot; and
event of [process where process_name == &quot;cmd.exe&quot; and command_line == &quot;*\&gt;*&quot;]</code></pre>
<p></p>
<p><em>Example results showing file modification</em></p>
<p>If you wanted to get more context, such as what command was passed from Koadic, we can turn the detection into a sequence and add the process event.</p>
<p>EQL query:</p>
<pre><code>sequence with maxspan=5s by unique_pid
[process where subtype.create and process_name == &quot;cmd.exe&quot; and command_line == &quot;*\&gt;*&quot; and
descendant of [process where process_name == &quot;wmiprvse.exe&quot;]]
[file where subtype.create and wildcard(file_name, &quot;*.txt&quot;, &quot;*.log&quot;)]</code></pre>
<p></p>
<p><em>Example results combining process and file modification</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h3>
<p>To summarize, we analyzed one offensive framework (Koadic) and several of its prominent features, reviewed a flexible query language (EQL) to express detection logic, and stepped through several ways to identify behavior tied to Koadic with example analytics.</p>
<p>I see the availability of offensive frameworks like Koadic as an opportunity for defenders, and a motivation to stay vigilant. Thinking creatively about how to detect these post-exploitation behaviors and assessing how these tools perform against their own detection capabilities will put an organization on a path to greater success in stopping similar threats.</p>
<p>To help enable organizations, we’ve added all the queries in this post into the <a href="https://eqllib.readthedocs.io/en/latest/analytics.html">EQLLib repository</a>. For readers interested in the original presentation from BSidesDFW this year, here is a link to the <a href="https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs/edit?usp=sharing">slides</a>.</p>
<p><a href="https://github.com/elastic/elasticsearch/issues/49581">EQL support is being added to Elasticsearch.</a></p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#why-koadic"><span>Why&nbsp;Koadic?</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#eql"><span>EQL</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#initial-access"><span>Initial&nbsp;access</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#defense-evasionexecution"><span>Defense&nbsp;evasion/execution</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#discovery"><span>Discovery</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#privilege-escalation"><span>Privilege&nbsp;escalation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#collectionexfiltration"><span>Collection/exfiltration</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql#conclusion"><span>Conclusion</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Embracing offensive tooling: Building detections against Koadic using EQL&amp;url=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql&amp;title=Embracing offensive tooling: Building detections against Koadic using EQL" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/embracing-offensive-tooling-building-detections-against-koadic-using-eql&amp;title=Embracing offensive tooling: Building detections against Koadic using EQL" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Embracing offensive tooling: Building detections against Koadic using EQL","slug":"embracing-offensive-tooling-building-detections-against-koadic-using-eql","date":"2022-06-01","description":"Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL).","image":"blog-thumb-network-attack-map.jpg","body":{"raw":"\nThis year at [BSidesDFW](http://www.bsidesdfw.com/), my local security conference, I highlighted a continuing trend of adversaries using open source offensive tools. The [talk](https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs) reviewed one of these post-exploitation frameworks named [Koadic](https://github.com/zerosum0x0/koadic) and walked through different ways defenders can build behavioral detections through the use of [Event Query Language](https://www.endgame.com/blog/technical-blog/introducing-event-query-language) (EQL). In this post, I wanted to review this research by providing background into Koadic and its features, why it’s relevant, and then dive into some EQL examples where I will share different detection strategies against the Koadic framework.\n\nAdversaries continue to adopt open source attack frameworks as part of their toolset. By using these off-the-shelf tools, attackers are able to complete their objectives while reducing their development costs and present attribution problems for incident responders. These tools challenge traditional investigative techniques by creating the idea of plausible deniability and leave fewer toolmarks that can be traced back to an adversary. Even with strong threat intelligence capabilities and proper defensive visibility, it’s not always an easy task to differentiate red team operations from real adversary behavior — especially in the early phases of an attack.\n\nAs defenders, we are required to actively monitor offensive open source projects. These projects serve as canaries in a coal mine, giving us an opportunity to gain insights into new attacker tradecraft. Not only does this get us into an attacker mindset, but all the code is freely available for emulation and review. Some different ways to get value from dissecting these tools can be through validating your detection capabilities, generating new analytics, developing threat hunting hypotheses, or by simply transferring knowledge around an underlying behavior.\n\n### Why Koadic?\n\nKoadic is a great candidate to demonstrate behavior-based detections due its interesting way of leveraging technologies built into the Windows OS — such as Windows Script Host (WSH) and the Component Object Model (COM). COM and WSH fall into the general category of “living off the land” tools, which allow adversaries to proxy the execution of their toolset through [built-in Windows programs](https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries).\n\nThis can be very desirable from an attacker’s standpoint, as it allows them to blend in better within the network while producing less of a forensic footprint — rather than dropping and executing a file on disk. COM and WSH are particularly attractive to attackers because of a lack of robust, built-in logging capabilities in contrast to tools like PowerShell (for which Windows has added extensive logging capabilities in newer versions). Koadic is good enough for mature threat groups such as [APT28](https://attack.mitre.org/groups/G0007/) and has received frequent updates over the last couple years.\n\n![Koadic overview](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/features_koadic.png)\n\n_Koadic overview \u0026 features_\n\n### EQL\n\nSome of the more exciting parts of my job as a practitioner come when writing behavioral detections using EQL. This process brings out my inner detective skills that I find to be fulfilling and challenging at the same time. The language enables practitioners to go beyond matching static values such as Indicators of Compromise (IoCs) to a much more comprehensive and flexible way to detect adversary behaviors. With the ability to leverage features like time-bound sequencing or track process lineage, more options are opened up to us as defenders to build reliable and lasting detections.\n\nI find this to be rewarding, as I can directly apply my previous SOC work experience around host-based forensics into a much more dynamic detection that holds up against the latest attacker tradecraft. The best part is that EQL has a very simple syntax with a short learning curve, so if you aren’t able to adopt EQL today, hopefully the logic within these queries can be applied to your current solution.\n\nFor a quick recap into the language itself and its core capabilities, I recommend reviewing our previous blog post: [Introducing Event Query Language](https://www.endgame.com/blog/technical-blog/introducing-event-query-language). In summary, EQL is a schema-independent and OS-agnostic language built for real-time detection with stream processing. It supports multiple-event behaviors and also offers post-processing commands used to analyze large amounts of data. With that background, let’s start diving into some of the different ways to detect Koadic using EQL.\n\n### Initial access\n\n**Spearphishing Attachment (**[**T1193**](https://attack.mitre.org/techniques/T1193/)**)**\n\nValidating parent-child process relationships continues to be a fruitful technique for hunting and building detections. As attacker activity becomes more evasive, however, we also have a need for flexibility as defenders. This first example shows off the value of tracking process ancestry using EQL’s descendant function, which lets us maintain state and track full process genealogy. This is an important concept because it goes beyond the typical parent-child process paradigm that many languages are limited to.\n\nBy tracking further descendant processes, defenders have the ability to follow process chains infinitely down the process tree. This provides more freedom in how we can express suspicious behavior together while also allowing tighter controls around process ancestry.\n\n![Descendant process tree](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/mshta_descendant.jpg)\n\n_Descendant process tree visualization (APT28)_\n\nThis process chain comes from a sample [reported](https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/) by Palo Alto Networks in June 2018 associated with [APT28](https://attack.mitre.org/groups/G0007/) activity. In this EQL expression, we are monitoring all descendant processes of our email client (Outlook.exe) and only looking for new process creation events tied to [Mshta](https://attack.mitre.org/techniques/T1170/). This allows us to focus on the initial attack vector (Spearphishing email) and then filter on Windows programs being used to execute attacker code. This is a great foundation for strong analytics — if we wanted to create something more robust, we could build out a longer array of cohorts associated with initial compromise stages, as well as add the entire Microsoft Office suite as descendants.\n\n![Initial access and execution - spearfishing](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/intial_access_mshta_eql.png)\n\n_Initial access \u0026 execution - Spearphishing example_\n\nEQL query:\n\n```\nprocess where process_name == \"mshta.exe\" and descendant of\n[process where process_name == \"outlook.exe\"]\n```\n\n### Defense evasion/execution\n\n**Mshta (**[**T1170**](https://attack.mitre.org/techniques/T1170/)**), Rundll32 (**[**T1085**](https://attack.mitre.org/techniques/T1085/)**)**\n\nTools like Koadic often include some usability features that help facilitate payload building, also known as [stagers](https://github.com/zerosum0x0/koadic/tree/master/data/stager/js). These small pieces of code get executed on the victim machine and are used to establish a network connection back to the attacker in order to bring in a staged payload for execution. Stagers represent a significant portion of the early phases of the intrusion process. The following example continues exploring the detection strategy for a variety of Windows utilities used to proxy execution with Koadic stagers.\n\nThe EQL query below uses the sequence operator, a function of EQL that matches based on the order of events in a sequence. In this case, we are matching when one of these standard Windows administration utilities initiates a network connection. Where another language might require an analyst to write several rules — one for each of these utilities — EQL enables us to build an array capable of matching many permutations.\n\nUsing the filter operator joins these events in sequence by their process identifier (PID). I like this example because it’s capable of detecting malware and other offensive tools that aren’t specific to Koadic. With that said, it might take a little filtering to remove potentially benign events such as network administrative activity, but this kind of behavior is something every organization should be tracking and reviewing on a certain cadence.\n\n![Defense evasion and execution - Mshta](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/defense_evasion_stager.PNG)\n\n_Defense evasion \u0026 execution - stagers_\n\nEQL query:\n\n```\nsequence by unique_pid\n[process where subtype.create and process_name in\n(\"mshta.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")]\n[network where process_name in\n(\"mshta.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")]\n```\n\nOne of the more interesting takeaways when reviewing offensive tooling is finding the different artifacts that get left behind unintentionally. All it takes is one “loud” artifact, such as a file or registry modification that sticks out, to quickly find suspicious activity.\n\nIn Koadic’s case, HTTP stagers use Internet Explorer’s core architecture to make a web request by default, which causes the stager to be created within the Temporary Internet Files directory. This behavior occurs due to the way Internet Explorer caches browser content to quickly load web pages. Monitoring this kind of behavior with certain executables can lead to reliable detections outside Koadic, such as generic [cradles](https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html) used to download and execute malicious code.\n\n![Defense evasion \u0026 execution - cached stager](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/cached_stager.jpg)\n\n_Defense evasion \u0026 execution - cached stager_\n\nEQL query:\n\n```\nfile where process_name in\n(\"mshta.exe\",\"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")\nand subtype.create and file_path == \"*Content.IE5*\"\n```\n\n### Discovery\n\n**Account Discovery (**[**T1087**](https://attack.mitre.org/techniques/T1087/)**), Remote System Discovery (**[**T1096**](https://attack.mitre.org/techniques/T1018/)**)**\n\n![Discovery - macro](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/macro.png)\n\n_Discovery - macro_\n\nA feature of EQL is the ability to share or reuse similar logic between queries. By using macro declaration, we can bundle a collection of items together and call the array like a variable. A good example would be grouping Microsoft Office applications into a macro, or, in this case, several different Windows programs that can be used for discovery and enumeration.\n\nEQL query (macro):\n\n```\nmacro KOADIC_DISCOVERY(name)\nname in (\n\"arp.exe\", \"findstr.exe\", \"hostname.exe\", \"ipconfig.exe\",\n\"nbtstat.exe\", \"net.exe\", \"net1.exe\", \"netsh.exe\",\n\"nltest.exe\", \"ping.exe\", \"systeminfo.exe\", \"tasklist.exe\",\n\"tracert.exe\", \"whoami.exe\"\n)\n```\n\nThe Elastic Endpoint Resolver view below helps provide some context about how Koadic spawns child processes. By using the Koadic module (exec_cmd), and running a natively supported command such as “whoami /groups”, we can see the Rundll32.exe application was invoked by WmiPrvse.exe and passes instructions down to the command prompt before launching the Whoami.exe application.\n\n![Elastic Endpoint Resolver](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/resolver.jpg)\n\n_Elastic Endpoint Resolver visualization_\n\nNow that we have a better understanding of the attack chain, let’s tie our previous macro (KOADIC_DISCOVERY) into a sequence-based detection looking for three process creation events from any one of those enumeration programs within a period of 10 minutes, executed by the same user. This same feature would let you monitor for processes that were previously observed. For example, maybe 15 days later the process makes a network connection to pull down an additional payload. What other language lets you find long-term payloads that sit dormant for weeks or months?\n\nEQL query:\n\n```\nsequence by user_name with maxspan=10m\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n| unique user_name\n```\n\nThe query above is fully-functional and can be used as a generic detection for initial discovery and enumeration. But what if we had some reason to tighten the logic around Koadic specifically? Understanding the process genealogy of Koadic at the endpoint level, we can leverage different process relationship tracking functions in EQL such as **child of** and **descendant of**.\n\nBy using the **child of** function and setting the parent process to Rundll32.exe, we are essentially getting the grandchildren of Rundll32.exe. Then if we wanted to take it even further, we can add the **descendant of** parent process WmiPrvse.exe. This example demonstrates the flexibility of EQL to provide powerful detection capabilities for real adversary behavior.\n\n![Process tree visualization - child of and descendant of](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/grandchild_descendant.jpg)\n\n_Process tree visualization - child of and descendant of_\n\nEQL query:\n\n```\nsequence by user_name with maxspan=10m\n[process where child of [process where parent_process_name == \"rundll32.exe\"]\nand KOADIC_DISCOVERY(process_name) and\ndescendant of [process where parent_process_name == \"wmiprvse.exe\"]]\n[process where child of [process where parent_process_name == \"rundll32.exe\"]\nand KOADIC_DISCOVERY(process_name) and\ndescendant of [process where parent_process_name == \"wmiprvse.exe\"]]\n| unique user_name\n```\n\n### Privilege escalation\n\n**Bypass User Account Account (**[**T1088**](https://attack.mitre.org/techniques/T1088/)**)**\n\nWhile attackers control targeting of victims in many cases, they don’t always wind up with an elevated user during initial compromise. Even when a spearphishing victim is a local administrator, the attacker will oftentimes need to escalate from a Medium to High integrity process before continuing. Off-the-shelf offensive tools like Koadic can enable that transition with relative ease, including several different UAC Bypass modules out of the box.\n\nFor this example, we’ll examine a well-known UAC Bypass technique published by Matt Nelson ([@enigma0x3](https://twitter.com/enigma0x3?s=20)) while leveraging the Computer Management launcher — CompMgmtLauncher.exe — which is interoperable with the Microsoft Management Console (MMC). Details about this technique, which still works on Windows 7 endpoints, can be found [here](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/).\n\nThis technique involves modifying the Windows Registry to change the default association of files the MMC interacts with (HKCU\\Software\\Classes\\mscfile\\shell\\open\\command) to an application of the attacker’s choice. By deploying a malicious script object with a compatible extension and altering this registry key value to launch a built-in script interpreter, an adversary is able to circumvent controls.\n\nRight after this registry modification, look for the new process creation event tied to the auto-elevated Microsoft program (CompMgmtLauncher.exe), followed by common Koadic stager descendant processes such as Mshta.exe or Rundll32.exe — processes that should be running in a high integrity context. We can combine those events into an ordered sequence and constrain the total run-time for all the steps to complete within 10 seconds.\n\n![Privilege escalation - UAC bypass](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/privilege_escalation.png)\n\n_Privilege escalation - UAC bypass_\n\nEQL query:\n\n```\nsequence with maxspan=10s\n[registry where length(bytes_written_string) \\\u003e 0 and key_type in\n(\"sz\", \"expandSz\") and key_path == \"*\\\\mscfile\\\\shell\\\\open\\\\command\\\\\"\nand user_name != \"SYSTEM\"]\n[process where process_path == \"C:\\\\Windows\\\\System32\\\\CompMgmtLauncher.exe\"]\n[process where process_name in (\"mshta.exe\",\"rundll32.exe\") and\nintegrity_level == \"high\"]\n```\n\n### Collection/exfiltration\n\n**Data from Local System (**[**T1005**](https://attack.mitre.org/techniques/T1005/)**)**\n\nKoadic’s method of C2 may be interesting to analysts of several kinds due to the transactional way it exchanges data between implants and server. This behavior is highlighted through some direct examples of specific commands executed below:\n\n![Specific commands](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/koadic_redirection.PNG)\n\n_Command shell redirection into text files_\n\nKoadic redirects STDOUT/STDERR to a temporary text file that stores the output of the operator’s commands as they were presented to the server. These commands are then read back into the Koadic C2 terminal. One second after this file is initially created, it is automatically deleted.\n\nWith the right endpoint visibility, malicious behaviors you might be incapable of otherwise detecting stand out. To demonstrate a detection around this, we will use the event of function to filter only for processes that come from cmd.exe that contain a redirector (\\\\\u003e), then tie the PID of that process to same PID that performed file activity related to the text (.txt) file activity.\n\nEQL query:\n\n```\nfile where file_name == \"*.txt\" and\nevent of [process where process_name == \"cmd.exe\" and command_line == \"*\\\u003e*\"]\n```\n\n![Example results](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/files_created.PNG)\n\n_Example results showing file modification_\n\nIf you wanted to get more context, such as what command was passed from Koadic, we can turn the detection into a sequence and add the process event.\n\nEQL query:\n\n```\nsequence with maxspan=5s by unique_pid\n[process where subtype.create and process_name == \"cmd.exe\" and command_line == \"*\\\u003e*\" and\ndescendant of [process where process_name == \"wmiprvse.exe\"]]\n[file where subtype.create and wildcard(file_name, \"*.txt\", \"*.log\")]\n```\n\n![Example results](/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/results2.jpg)\n\n_Example results combining process and file modification_\n\n### Conclusion\n\nTo summarize, we analyzed one offensive framework (Koadic) and several of its prominent features, reviewed a flexible query language (EQL) to express detection logic, and stepped through several ways to identify behavior tied to Koadic with example analytics.\n\nI see the availability of offensive frameworks like Koadic as an opportunity for defenders, and a motivation to stay vigilant. Thinking creatively about how to detect these post-exploitation behaviors and assessing how these tools perform against their own detection capabilities will put an organization on a path to greater success in stopping similar threats.\n\nTo help enable organizations, we’ve added all the queries in this post into the [EQLLib repository](https://eqllib.readthedocs.io/en/latest/analytics.html). For readers interested in the original presentation from BSidesDFW this year, here is a link to the [slides](https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs/edit?usp=sharing).\n\n[EQL support is being added to Elasticsearch.](https://github.com/elastic/elasticsearch/issues/49581)\n","code":"var Component=(()=\u003e{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var i in e)o(n,i,{get:e[i],enumerable:!0})},r=(n,e,i,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!m.call(n,a)\u0026\u0026a!==i\u0026\u0026o(n,a,{get:()=\u003ee[a],enumerable:!(s=p(e,a))||s.enumerable});return n};var y=(n,e,i)=\u003e(i=n!=null?h(u(n)):{},r(e||!n||!n.__esModule?o(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=\u003er(o({},\"__esModule\",{value:!0}),n);var l=f((E,c)=\u003e{c.exports=_jsx_runtime});var q={};w(q,{default:()=\u003ek,frontmatter:()=\u003ev});var t=y(l()),v={title:\"Embracing offensive tooling: Building detections against Koadic using EQL\",slug:\"embracing-offensive-tooling-building-detections-against-koadic-using-eql\",date:\"2022-06-01\",description:\"Find new ways to build behavioral detections against post-exploitation frameworks such as Koadic using Event Query Language (EQL).\",author:[{slug:\"daniel-stepanic\"}],image:\"blog-thumb-network-attack-map.jpg\",category:[{slug:\"security-research\"}]};function d(n){let e=Object.assign({p:\"p\",a:\"a\",h3:\"h3\",img:\"img\",em:\"em\",strong:\"strong\",pre:\"pre\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"This year at \",(0,t.jsx)(e.a,{href:\"http://www.bsidesdfw.com/\",rel:\"nofollow\",children:\"BSidesDFW\"}),\", my local security conference, I highlighted a continuing trend of adversaries using open source offensive tools. The \",(0,t.jsx)(e.a,{href:\"https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs\",rel:\"nofollow\",children:\"talk\"}),\" reviewed one of these post-exploitation frameworks named \",(0,t.jsx)(e.a,{href:\"https://github.com/zerosum0x0/koadic\",rel:\"nofollow\",children:\"Koadic\"}),\" and walked through different ways defenders can build behavioral detections through the use of \",(0,t.jsx)(e.a,{href:\"https://www.endgame.com/blog/technical-blog/introducing-event-query-language\",rel:\"nofollow\",children:\"Event Query Language\"}),\" (EQL). In this post, I wanted to review this research by providing background into Koadic and its features, why it\\u2019s relevant, and then dive into some EQL examples where I will share different detection strategies against the Koadic framework.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Adversaries continue to adopt open source attack frameworks as part of their toolset. By using these off-the-shelf tools, attackers are able to complete their objectives while reducing their development costs and present attribution problems for incident responders. These tools challenge traditional investigative techniques by creating the idea of plausible deniability and leave fewer toolmarks that can be traced back to an adversary. Even with strong threat intelligence capabilities and proper defensive visibility, it\\u2019s not always an easy task to differentiate red team operations from real adversary behavior \\u2014 especially in the early phases of an attack.\"}),`\n`,(0,t.jsx)(e.p,{children:\"As defenders, we are required to actively monitor offensive open source projects. These projects serve as canaries in a coal mine, giving us an opportunity to gain insights into new attacker tradecraft. Not only does this get us into an attacker mindset, but all the code is freely available for emulation and review. Some different ways to get value from dissecting these tools can be through validating your detection capabilities, generating new analytics, developing threat hunting hypotheses, or by simply transferring knowledge around an underlying behavior.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"why-koadic\",children:\"Why Koadic?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Koadic is a great candidate to demonstrate behavior-based detections due its interesting way of leveraging technologies built into the Windows OS \\u2014 such as Windows Script Host (WSH) and the Component Object Model (COM). COM and WSH fall into the general category of \\u201Cliving off the land\\u201D tools, which allow adversaries to proxy the execution of their toolset through \",(0,t.jsx)(e.a,{href:\"https://github.com/LOLBAS-Project/LOLBAS/tree/master/yml/OSBinaries\",rel:\"nofollow\",children:\"built-in Windows programs\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This can be very desirable from an attacker\\u2019s standpoint, as it allows them to blend in better within the network while producing less of a forensic footprint \\u2014 rather than dropping and executing a file on disk. COM and WSH are particularly attractive to attackers because of a lack of robust, built-in logging capabilities in contrast to tools like PowerShell (for which Windows has added extensive logging capabilities in newer versions). Koadic is good enough for mature threat groups such as \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/groups/G0007/\",rel:\"nofollow\",children:\"APT28\"}),\" and has received frequent updates over the last couple years.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/features_koadic.png\",alt:\"Koadic overview\",width:\"1440\",height:\"634\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Koadic overview \u0026 features\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"eql\",children:\"EQL\"}),`\n`,(0,t.jsx)(e.p,{children:\"Some of the more exciting parts of my job as a practitioner come when writing behavioral detections using EQL. This process brings out my inner detective skills that I find to be fulfilling and challenging at the same time. The language enables practitioners to go beyond matching static values such as Indicators of Compromise (IoCs) to a much more comprehensive and flexible way to detect adversary behaviors. With the ability to leverage features like time-bound sequencing or track process lineage, more options are opened up to us as defenders to build reliable and lasting detections.\"}),`\n`,(0,t.jsx)(e.p,{children:\"I find this to be rewarding, as I can directly apply my previous SOC work experience around host-based forensics into a much more dynamic detection that holds up against the latest attacker tradecraft. The best part is that EQL has a very simple syntax with a short learning curve, so if you aren\\u2019t able to adopt EQL today, hopefully the logic within these queries can be applied to your current solution.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For a quick recap into the language itself and its core capabilities, I recommend reviewing our previous blog post: \",(0,t.jsx)(e.a,{href:\"https://www.endgame.com/blog/technical-blog/introducing-event-query-language\",rel:\"nofollow\",children:\"Introducing Event Query Language\"}),\". In summary, EQL is a schema-independent and OS-agnostic language built for real-time detection with stream processing. It supports multiple-event behaviors and also offers post-processing commands used to analyze large amounts of data. With that background, let\\u2019s start diving into some of the different ways to detect Koadic using EQL.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"initial-access\",children:\"Initial access\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Spearphishing Attachment (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1193/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1193\"})}),(0,t.jsx)(e.strong,{children:\")\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"Validating parent-child process relationships continues to be a fruitful technique for hunting and building detections. As attacker activity becomes more evasive, however, we also have a need for flexibility as defenders. This first example shows off the value of tracking process ancestry using EQL\\u2019s descendant function, which lets us maintain state and track full process genealogy. This is an important concept because it goes beyond the typical parent-child process paradigm that many languages are limited to.\"}),`\n`,(0,t.jsx)(e.p,{children:\"By tracking further descendant processes, defenders have the ability to follow process chains infinitely down the process tree. This provides more freedom in how we can express suspicious behavior together while also allowing tighter controls around process ancestry.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/mshta_descendant.jpg\",alt:\"Descendant process tree\",width:\"1440\",height:\"487\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Descendant process tree visualization (APT28)\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This process chain comes from a sample \",(0,t.jsx)(e.a,{href:\"https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\",rel:\"nofollow\",children:\"reported\"}),\" by Palo Alto Networks in June 2018 associated with \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/groups/G0007/\",rel:\"nofollow\",children:\"APT28\"}),\" activity. In this EQL expression, we are monitoring all descendant processes of our email client (Outlook.exe) and only looking for new process creation events tied to \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1170/\",rel:\"nofollow\",children:\"Mshta\"}),\". This allows us to focus on the initial attack vector (Spearphishing email) and then filter on Windows programs being used to execute attacker code. This is a great foundation for strong analytics \\u2014 if we wanted to create something more robust, we could build out a longer array of cohorts associated with initial compromise stages, as well as add the entire Microsoft Office suite as descendants.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/intial_access_mshta_eql.png\",alt:\"Initial access and execution - spearfishing\",width:\"1440\",height:\"718\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Initial access \u0026 execution - Spearphishing example\"})}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`process where process_name == \"mshta.exe\" and descendant of\n[process where process_name == \"outlook.exe\"]\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"defense-evasionexecution\",children:\"Defense evasion/execution\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Mshta (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1170/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1170\"})}),(0,t.jsx)(e.strong,{children:\"), Rundll32 (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1085/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1085\"})}),(0,t.jsx)(e.strong,{children:\")\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Tools like Koadic often include some usability features that help facilitate payload building, also known as \",(0,t.jsx)(e.a,{href:\"https://github.com/zerosum0x0/koadic/tree/master/data/stager/js\",rel:\"nofollow\",children:\"stagers\"}),\". These small pieces of code get executed on the victim machine and are used to establish a network connection back to the attacker in order to bring in a staged payload for execution. Stagers represent a significant portion of the early phases of the intrusion process. The following example continues exploring the detection strategy for a variety of Windows utilities used to proxy execution with Koadic stagers.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The EQL query below uses the sequence operator, a function of EQL that matches based on the order of events in a sequence. In this case, we are matching when one of these standard Windows administration utilities initiates a network connection. Where another language might require an analyst to write several rules \\u2014 one for each of these utilities \\u2014 EQL enables us to build an array capable of matching many permutations.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using the filter operator joins these events in sequence by their process identifier (PID). I like this example because it\\u2019s capable of detecting malware and other offensive tools that aren\\u2019t specific to Koadic. With that said, it might take a little filtering to remove potentially benign events such as network administrative activity, but this kind of behavior is something every organization should be tracking and reviewing on a certain cadence.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/defense_evasion_stager.PNG\",alt:\"Defense evasion and execution - Mshta\",width:\"1440\",height:\"769\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Defense evasion \u0026 execution - stagers\"})}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by unique_pid\n[process where subtype.create and process_name in\n(\"mshta.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")]\n[network where process_name in\n(\"mshta.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")]\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"One of the more interesting takeaways when reviewing offensive tooling is finding the different artifacts that get left behind unintentionally. All it takes is one \\u201Cloud\\u201D artifact, such as a file or registry modification that sticks out, to quickly find suspicious activity.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In Koadic\\u2019s case, HTTP stagers use Internet Explorer\\u2019s core architecture to make a web request by default, which causes the stager to be created within the Temporary Internet Files directory. This behavior occurs due to the way Internet Explorer caches browser content to quickly load web pages. Monitoring this kind of behavior with certain executables can lead to reliable detections outside Koadic, such as generic \",(0,t.jsx)(e.a,{href:\"https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\",rel:\"nofollow\",children:\"cradles\"}),\" used to download and execute malicious code.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/cached_stager.jpg\",alt:\"Defense evasion \u0026 execution - cached stager\",width:\"1440\",height:\"807\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Defense evasion \u0026 execution - cached stager\"})}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`file where process_name in\n(\"mshta.exe\",\"regsvr32.exe\", \"rundll32.exe\", \"wmic.exe\")\nand subtype.create and file_path == \"*Content.IE5*\"\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"discovery\",children:\"Discovery\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Account Discovery (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1087/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1087\"})}),(0,t.jsx)(e.strong,{children:\"), Remote System Discovery (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1018/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1096\"})}),(0,t.jsx)(e.strong,{children:\")\"})]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/macro.png\",alt:\"Discovery - macro\",width:\"1440\",height:\"808\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Discovery - macro\"})}),`\n`,(0,t.jsx)(e.p,{children:\"A feature of EQL is the ability to share or reuse similar logic between queries. By using macro declaration, we can bundle a collection of items together and call the array like a variable. A good example would be grouping Microsoft Office applications into a macro, or, in this case, several different Windows programs that can be used for discovery and enumeration.\"}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query (macro):\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`macro KOADIC_DISCOVERY(name)\nname in (\n\"arp.exe\", \"findstr.exe\", \"hostname.exe\", \"ipconfig.exe\",\n\"nbtstat.exe\", \"net.exe\", \"net1.exe\", \"netsh.exe\",\n\"nltest.exe\", \"ping.exe\", \"systeminfo.exe\", \"tasklist.exe\",\n\"tracert.exe\", \"whoami.exe\"\n)\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"The Elastic Endpoint Resolver view below helps provide some context about how Koadic spawns child processes. By using the Koadic module (exec_cmd), and running a natively supported command such as \\u201Cwhoami /groups\\u201D, we can see the Rundll32.exe application was invoked by WmiPrvse.exe and passes instructions down to the command prompt before launching the Whoami.exe application.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/resolver.jpg\",alt:\"Elastic Endpoint Resolver\",width:\"1440\",height:\"1172\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Elastic Endpoint Resolver visualization\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Now that we have a better understanding of the attack chain, let\\u2019s tie our previous macro (KOADIC_DISCOVERY) into a sequence-based detection looking for three process creation events from any one of those enumeration programs within a period of 10 minutes, executed by the same user. This same feature would let you monitor for processes that were previously observed. For example, maybe 15 days later the process makes a network connection to pull down an additional payload. What other language lets you find long-term payloads that sit dormant for weeks or months?\"}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by user_name with maxspan=10m\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n[process where subtype.create and KOADIC_DISCOVERY(process_name)]\n| unique user_name\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The query above is fully-functional and can be used as a generic detection for initial discovery and enumeration. But what if we had some reason to tighten the logic around Koadic specifically? Understanding the process genealogy of Koadic at the endpoint level, we can leverage different process relationship tracking functions in EQL such as \",(0,t.jsx)(e.strong,{children:\"child of\"}),\" and \",(0,t.jsx)(e.strong,{children:\"descendant of\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"By using the \",(0,t.jsx)(e.strong,{children:\"child of\"}),\" function and setting the parent process to Rundll32.exe, we are essentially getting the grandchildren of Rundll32.exe. Then if we wanted to take it even further, we can add the \",(0,t.jsx)(e.strong,{children:\"descendant of\"}),\" parent process WmiPrvse.exe. This example demonstrates the flexibility of EQL to provide powerful detection capabilities for real adversary behavior.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/grandchild_descendant.jpg\",alt:\"Process tree visualization - child of and descendant of\",width:\"1440\",height:\"591\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Process tree visualization - child of and descendant of\"})}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by user_name with maxspan=10m\n[process where child of [process where parent_process_name == \"rundll32.exe\"]\nand KOADIC_DISCOVERY(process_name) and\ndescendant of [process where parent_process_name == \"wmiprvse.exe\"]]\n[process where child of [process where parent_process_name == \"rundll32.exe\"]\nand KOADIC_DISCOVERY(process_name) and\ndescendant of [process where parent_process_name == \"wmiprvse.exe\"]]\n| unique user_name\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"privilege-escalation\",children:\"Privilege escalation\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Bypass User Account Account (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1088/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1088\"})}),(0,t.jsx)(e.strong,{children:\")\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"While attackers control targeting of victims in many cases, they don\\u2019t always wind up with an elevated user during initial compromise. Even when a spearphishing victim is a local administrator, the attacker will oftentimes need to escalate from a Medium to High integrity process before continuing. Off-the-shelf offensive tools like Koadic can enable that transition with relative ease, including several different UAC Bypass modules out of the box.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For this example, we\\u2019ll examine a well-known UAC Bypass technique published by Matt Nelson (\",(0,t.jsx)(e.a,{href:\"https://twitter.com/enigma0x3?s=20\",rel:\"nofollow\",children:\"@enigma0x3\"}),\") while leveraging the Computer Management launcher \\u2014 CompMgmtLauncher.exe \\u2014 which is interoperable with the Microsoft Management Console (MMC). Details about this technique, which still works on Windows 7 endpoints, can be found \",(0,t.jsx)(e.a,{href:\"https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This technique involves modifying the Windows Registry to change the default association of files the MMC interacts with (HKCU\\\\Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command) to an application of the attacker\\u2019s choice. By deploying a malicious script object with a compatible extension and altering this registry key value to launch a built-in script interpreter, an adversary is able to circumvent controls.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Right after this registry modification, look for the new process creation event tied to the auto-elevated Microsoft program (CompMgmtLauncher.exe), followed by common Koadic stager descendant processes such as Mshta.exe or Rundll32.exe \\u2014 processes that should be running in a high integrity context. We can combine those events into an ordered sequence and constrain the total run-time for all the steps to complete within 10 seconds.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/privilege_escalation.png\",alt:\"Privilege escalation - UAC bypass\",width:\"1440\",height:\"810\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Privilege escalation - UAC bypass\"})}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence with maxspan=10s\n[registry where length(bytes_written_string) \\\\\u003e 0 and key_type in\n(\"sz\", \"expandSz\") and key_path == \"*\\\\\\\\mscfile\\\\\\\\shell\\\\\\\\open\\\\\\\\command\\\\\\\\\"\nand user_name != \"SYSTEM\"]\n[process where process_path == \"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\CompMgmtLauncher.exe\"]\n[process where process_name in (\"mshta.exe\",\"rundll32.exe\") and\nintegrity_level == \"high\"]\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"collectionexfiltration\",children:\"Collection/exfiltration\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Data from Local System (\"}),(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1005/\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"T1005\"})}),(0,t.jsx)(e.strong,{children:\")\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"Koadic\\u2019s method of C2 may be interesting to analysts of several kinds due to the transactional way it exchanges data between implants and server. This behavior is highlighted through some direct examples of specific commands executed below:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/koadic_redirection.PNG\",alt:\"Specific commands\",width:\"1184\",height:\"57\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Command shell redirection into text files\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Koadic redirects STDOUT/STDERR to a temporary text file that stores the output of the operator\\u2019s commands as they were presented to the server. These commands are then read back into the Koadic C2 terminal. One second after this file is initially created, it is automatically deleted.\"}),`\n`,(0,t.jsx)(e.p,{children:\"With the right endpoint visibility, malicious behaviors you might be incapable of otherwise detecting stand out. To demonstrate a detection around this, we will use the event of function to filter only for processes that come from cmd.exe that contain a redirector (\\\\\u003e), then tie the PID of that process to same PID that performed file activity related to the text (.txt) file activity.\"}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`file where file_name == \"*.txt\" and\nevent of [process where process_name == \"cmd.exe\" and command_line == \"*\\\\\u003e*\"]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/files_created.PNG\",alt:\"Example results\",width:\"1047\",height:\"101\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example results showing file modification\"})}),`\n`,(0,t.jsx)(e.p,{children:\"If you wanted to get more context, such as what command was passed from Koadic, we can turn the detection into a sequence and add the process event.\"}),`\n`,(0,t.jsx)(e.p,{children:\"EQL query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence with maxspan=5s by unique_pid\n[process where subtype.create and process_name == \"cmd.exe\" and command_line == \"*\\\\\u003e*\" and\ndescendant of [process where process_name == \"wmiprvse.exe\"]]\n[file where subtype.create and wildcard(file_name, \"*.txt\", \"*.log\")]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/results2.jpg\",alt:\"Example results\",width:\"1202\",height:\"126\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example results combining process and file modification\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,t.jsx)(e.p,{children:\"To summarize, we analyzed one offensive framework (Koadic) and several of its prominent features, reviewed a flexible query language (EQL) to express detection logic, and stepped through several ways to identify behavior tied to Koadic with example analytics.\"}),`\n`,(0,t.jsx)(e.p,{children:\"I see the availability of offensive frameworks like Koadic as an opportunity for defenders, and a motivation to stay vigilant. Thinking creatively about how to detect these post-exploitation behaviors and assessing how these tools perform against their own detection capabilities will put an organization on a path to greater success in stopping similar threats.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To help enable organizations, we\\u2019ve added all the queries in this post into the \",(0,t.jsx)(e.a,{href:\"https://eqllib.readthedocs.io/en/latest/analytics.html\",rel:\"nofollow\",children:\"EQLLib repository\"}),\". For readers interested in the original presentation from BSidesDFW this year, here is a link to the \",(0,t.jsx)(e.a,{href:\"https://docs.google.com/presentation/d/1Wq76DqLzrF2-qxnhWTSXzmuHjBdXoND2tzMw2zeopfs/edit?usp=sharing\",rel:\"nofollow\",children:\"slides\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/elasticsearch/issues/49581\",rel:\"nofollow\",children:\"EQL support is being added to Elasticsearch.\"})})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var k=x;return b(q);})();\n;return Component;"},"_id":"articles/embracing-offensive-tooling-building-detections-against-koadic-using-eql.mdx","_raw":{"sourceFilePath":"articles/embracing-offensive-tooling-building-detections-against-koadic-using-eql.mdx","sourceFileName":"embracing-offensive-tooling-building-detections-against-koadic-using-eql.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/embracing-offensive-tooling-building-detections-against-koadic-using-eql"},"type":"Article","imageUrl":"/assets/images/embracing-offensive-tooling-building-detections-against-koadic-using-eql/blog-thumb-network-attack-map.jpg","readingTime":"13 min read","series":"","url":"/embracing-offensive-tooling-building-detections-against-koadic-using-eql","headings":[{"level":3,"title":"Why Koadic?","href":"#why-koadic"},{"level":3,"title":"EQL","href":"#eql"},{"level":3,"title":"Initial access","href":"#initial-access"},{"level":3,"title":"Defense evasion/execution","href":"#defense-evasionexecution"},{"level":3,"title":"Discovery","href":"#discovery"},{"level":3,"title":"Privilege escalation","href":"#privilege-escalation"},{"level":3,"title":"Collection/exfiltration","href":"#collectionexfiltration"},{"level":3,"title":"Conclusion","href":"#conclusion"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var j=(t,n,e)=\u003e(e=t!=null?m(d(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),D=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((h,c)=\u003e{c.exports=_jsx_runtime});var X={};g(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Daniel Stepanic\",description:\"Elastic\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"embracing-offensive-tooling-building-detections-against-koadic-using-eql"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>