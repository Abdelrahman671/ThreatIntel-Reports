<!doctype html><html lang="en"><head><title data-rh="true">Incremental Source Generators in .NET | Posts By SpecterOps Team Members</title><meta data-rh="true" charset="utf-8"/><meta data-rh="true" name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1,maximum-scale=1"/><meta data-rh="true" name="theme-color" content="#000000"/><meta data-rh="true" name="twitter:app:name:iphone" content="Medium"/><meta data-rh="true" name="twitter:app:id:iphone" content="828256236"/><meta data-rh="true" property="al:ios:app_name" content="Medium"/><meta data-rh="true" property="al:ios:app_store_id" content="828256236"/><meta data-rh="true" property="al:android:package" content="com.medium.reader"/><meta data-rh="true" property="fb:app_id" content="542599432471018"/><meta data-rh="true" property="og:site_name" content="Medium"/><meta data-rh="true" property="og:type" content="article"/><meta data-rh="true" property="article:published_time" content="2024-10-03T14:07:18.062Z"/><meta data-rh="true" name="title" content="Incremental Source Generators in .NET | Posts By SpecterOps Team Members"/><meta data-rh="true" property="og:title" content="Dotnet Source Generators in 2024 Part 1: Getting Started"/><meta data-rh="true" property="al:android:url" content="medium://p/76d619b633f5"/><meta data-rh="true" property="al:ios:url" content="medium://p/76d619b633f5"/><meta data-rh="true" property="al:android:app_name" content="Medium"/><meta data-rh="true" name="description" content="In this blog post, we will cover the basics of a source generator, the major types involved, some common issues you might encounter, how to properly log those issues, and how to fix them. Source…"/><meta data-rh="true" property="og:description" content="Introduction"/><meta data-rh="true" property="og:url" content="https://posts.specterops.io/dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5"/><meta data-rh="true" property="al:web:url" content="https://posts.specterops.io/dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5"/><meta data-rh="true" property="og:image" content="https://miro.medium.com/v2/da:true/resize:fit:975/0*sAAfVq4rGtGduDRs"/><meta data-rh="true" property="article:author" content="https://dragoqcc.medium.com"/><meta data-rh="true" name="author" content="Jonathan Owens"/><meta data-rh="true" name="robots" content="index,noarchive,follow,max-image-preview:large"/><meta data-rh="true" name="referrer" content="unsafe-url"/><meta data-rh="true" property="twitter:title" content="Dotnet Source Generators in 2024 Part 1: Getting Started"/><meta data-rh="true" name="twitter:site" content="@specterops"/><meta data-rh="true" name="twitter:app:url:iphone" content="medium://p/76d619b633f5"/><meta data-rh="true" property="twitter:description" content="Introduction"/><meta data-rh="true" name="twitter:image:src" content="https://miro.medium.com/v2/da:true/resize:fit:975/0*sAAfVq4rGtGduDRs"/><meta data-rh="true" name="twitter:card" content="summary_large_image"/><meta data-rh="true" name="twitter:label1" content="Reading time"/><meta data-rh="true" name="twitter:data1" content="17 min read"/><link data-rh="true" rel="icon" href="https://miro.medium.com/v2/resize:fill:256:256/1*D-FDlfkqivRBQZoESrwtqw.png"/><link data-rh="true" rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml"/><link data-rh="true" rel="apple-touch-icon" sizes="152x152" href="https://miro.medium.com/v2/resize:fill:304:304/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="120x120" href="https://miro.medium.com/v2/resize:fill:240:240/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="76x76" href="https://miro.medium.com/v2/resize:fill:152:152/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="60x60" href="https://miro.medium.com/v2/resize:fill:120:120/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="mask-icon" href="https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png" color="#171717"/><link data-rh="true" id="glyph_preload_link" rel="preload" as="style" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" id="glyph_link" rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" rel="author" href="https://dragoqcc.medium.com"/><link data-rh="true" rel="canonical" href="https://posts.specterops.io/dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5"/><link data-rh="true" rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/76d619b633f5"/><script data-rh="true" type="application/ld+json">{"@context":"http:\u002F\u002Fschema.org","@type":"NewsArticle","image":["https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fda:true\u002Fresize:fit:1200\u002F0*sAAfVq4rGtGduDRs"],"url":"https:\u002F\u002Fposts.specterops.io\u002Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5","dateCreated":"2024-10-01T18:10:32.085Z","datePublished":"2024-10-01T18:10:32.085Z","dateModified":"2024-11-15T20:05:10.297Z","headline":"Incremental Source Generators in .NET | Posts By SpecterOps Team Members","name":"Incremental Source Generators in .NET | Posts By SpecterOps Team Members","description":"In this blog post, we will cover the basics of a source generator, the major types involved, some common issues you might encounter, how to properly log those issues, and how to fix them. Source…","identifier":"76d619b633f5","author":{"@type":"Person","name":"Jonathan Owens","url":"https:\u002F\u002Fdragoqcc.medium.com"},"creator":["Jonathan Owens"],"publisher":{"@type":"Organization","name":"Posts By SpecterOps Team Members","url":"posts.specterops.io","logo":{"@type":"ImageObject","width":149,"height":60,"url":"https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:298\u002F1*s-5BWBr8XsgtIU5azKNhZQ.jpeg"}},"mainEntityOfPage":"https:\u002F\u002Fposts.specterops.io\u002Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5"}</script><style type="text/css" data-fela-rehydration="593" data-fela-type="STATIC">html{box-sizing:border-box;-webkit-text-size-adjust:100%}*, *:before, *:after{box-sizing:inherit}body{margin:0;padding:0;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;color:rgba(0,0,0,0.8);position:relative;min-height:100vh}h1, h2, h3, h4, h5, h6, dl, dd, ol, ul, menu, figure, blockquote, p, pre, form{margin:0}menu, ol, ul{padding:0;list-style:none;list-style-image:none}main{display:block}a{color:inherit;text-decoration:none}a, button, input{-webkit-tap-highlight-color:transparent}img, svg{vertical-align:middle}button{background:transparent;overflow:visible}button, input, optgroup, select, textarea{margin:0}:root{--reach-tabs:1;--reach-menu-button:1}#speechify-root{font-family:Sohne, sans-serif}div[data-popper-reference-hidden="true"]{visibility:hidden;pointer-events:none}.grecaptcha-badge{visibility:hidden}
/*XCode style (c) Angel Garcia <angelgarcia.mail@gmail.com>*/.hljs {background: #fff;color: black;
}/* Gray DOCTYPE selectors like WebKit */
.xml .hljs-meta {color: #c0c0c0;
}.hljs-comment,
.hljs-quote {color: #007400;
}.hljs-tag,
.hljs-attribute,
.hljs-keyword,
.hljs-selector-tag,
.hljs-literal,
.hljs-name {color: #aa0d91;
}.hljs-variable,
.hljs-template-variable {color: #3F6E74;
}.hljs-code,
.hljs-string,
.hljs-meta .hljs-string {color: #c41a16;
}.hljs-regexp,
.hljs-link {color: #0E0EFF;
}.hljs-title,
.hljs-symbol,
.hljs-bullet,
.hljs-number {color: #1c00cf;
}.hljs-section,
.hljs-meta {color: #643820;
}.hljs-title.class_,
.hljs-class .hljs-title,
.hljs-type,
.hljs-built_in,
.hljs-params {color: #5c2699;
}.hljs-attr {color: #836C28;
}.hljs-subst {color: #000;
}.hljs-formula {background-color: #eee;font-style: italic;
}.hljs-addition {background-color: #baeeba;
}.hljs-deletion {background-color: #ffc8bd;
}.hljs-selector-id,
.hljs-selector-class {color: #9b703f;
}.hljs-doctag,
.hljs-strong {font-weight: bold;
}.hljs-emphasis {font-style: italic;
}
</style><style type="text/css" data-fela-rehydration="593" data-fela-type="KEYFRAME">@-webkit-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@-moz-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE">.a{font-family:medium-content-sans-serif-font, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif}.b{font-weight:400}.c{background-color:rgba(255, 255, 255, 1)}.l{display:block}.m{position:sticky}.n{top:0}.o{z-index:500}.p{padding:0 24px}.q{align-items:center}.r{border-bottom:solid 1px #F2F2F2}.y{height:41px}.z{line-height:20px}.ab{display:flex}.ac{height:57px}.ae{flex:1 0 auto}.af{color:inherit}.ag{fill:inherit}.ah{font-size:inherit}.ai{border:inherit}.aj{font-family:inherit}.ak{letter-spacing:inherit}.al{font-weight:inherit}.am{padding:0}.an{margin:0}.ao{cursor:pointer}.ap:disabled{cursor:not-allowed}.aq:disabled{color:#6B6B6B}.ar:disabled{fill:#6B6B6B}.au{width:auto}.av path{fill:#242424}.aw{height:25px}.ax{margin-left:16px}.ay{border:none}.az{border-radius:20px}.ba{width:240px}.bb{background:#F9F9F9}.bc path{fill:#6B6B6B}.be{outline:none}.bf{font-family:sohne, "Helvetica Neue", Helvetica, Arial, sans-serif}.bg{font-size:14px}.bh{width:100%}.bi{padding:10px 20px 10px 0}.bj{background-color:transparent}.bk{color:#242424}.bl::placeholder{color:#6B6B6B}.bm{display:inline-block}.bn{margin-left:12px}.bo{margin-right:12px}.bp{border-radius:4px}.bq{margin-left:24px}.br{height:24px}.bx{background-color:#F9F9F9}.by{border-radius:50%}.bz{height:32px}.ca{width:32px}.cb{justify-content:center}.ch{max-width:680px}.ci{min-width:0}.cj{animation:k1 1.2s ease-in-out infinite}.ck{height:100vh}.cl{margin-bottom:16px}.cm{margin-top:48px}.cn{align-items:flex-start}.co{flex-direction:column}.cp{justify-content:space-between}.cq{margin-bottom:24px}.cw{width:80%}.cx{background-color:#F2F2F2}.dd{height:44px}.de{width:44px}.df{margin:auto 0}.dg{margin-bottom:4px}.dh{height:16px}.di{width:120px}.dj{width:80px}.dp{margin-bottom:8px}.dq{width:96%}.dr{width:98%}.ds{width:81%}.dt{margin-left:8px}.du{color:#6B6B6B}.dv{font-size:13px}.dw{height:100%}.ep{color:#FFFFFF}.eq{fill:#FFFFFF}.er{background:rgba(128, 128, 183, 1)}.es{border-color:rgba(128, 128, 183, 1)}.ew:disabled{cursor:inherit !important}.ex:disabled{opacity:0.3}.ey:disabled:hover{background:rgba(128, 128, 183, 1)}.ez:disabled:hover{border-color:rgba(128, 128, 183, 1)}.fa{border-radius:99em}.fb{border-width:1px}.fc{border-style:solid}.fd{box-sizing:border-box}.fe{text-decoration:none}.ff{text-align:center}.fi{margin-right:32px}.fj{position:relative}.fk{fill:#6B6B6B}.fn{background:transparent}.fo svg{margin-left:4px}.fp svg{fill:#6B6B6B}.fr{box-shadow:inset 0 0 0 1px rgba(0, 0, 0, 0.05)}.fs{position:absolute}.fz{margin:0 24px}.gd{background:rgba(255, 255, 255, 1)}.ge{border:1px solid #F2F2F2}.gf{box-shadow:0 1px 4px #F2F2F2}.gg{max-height:100vh}.gh{overflow-y:auto}.gi{left:0}.gj{top:calc(100vh + 100px)}.gk{bottom:calc(100vh + 100px)}.gl{width:10px}.gm{pointer-events:none}.gn{word-break:break-word}.go{word-wrap:break-word}.gp:after{display:block}.gq:after{content:""}.gr:after{clear:both}.gs{line-height:1.23}.gt{letter-spacing:0}.gu{font-style:normal}.gv{font-weight:700}.ia{align-items:baseline}.ib{width:48px}.ic{height:48px}.id{border:2px solid rgba(255, 255, 255, 1)}.ie{z-index:0}.if{box-shadow:none}.ig{border:1px solid rgba(0, 0, 0, 0.05)}.ih{margin-left:-12px}.ii{width:28px}.ij{height:28px}.ik{z-index:1}.il{width:24px}.im{margin-bottom:2px}.in{flex-wrap:nowrap}.io{font-size:16px}.ip{line-height:24px}.ir{margin:0 8px}.is{display:inline}.it{color:rgba(128, 128, 183, 1)}.iu{fill:rgba(128, 128, 183, 1)}.ix{flex:0 0 auto}.ja{flex-wrap:wrap}.jd{white-space:pre-wrap}.je{margin-right:4px}.jf{overflow:hidden}.jg{max-height:20px}.jh{text-overflow:ellipsis}.ji{display:-webkit-box}.jj{-webkit-line-clamp:1}.jk{-webkit-box-orient:vertical}.jl{word-break:break-all}.jn{padding-left:8px}.jo{padding-right:8px}.kp> *{flex-shrink:0}.kq{overflow-x:scroll}.kr::-webkit-scrollbar{display:none}.ks{scrollbar-width:none}.kt{-ms-overflow-style:none}.ku{width:74px}.kv{flex-direction:row}.kw{z-index:2}.kz{-webkit-user-select:none}.la{border:0}.lb{fill:rgba(117, 117, 117, 1)}.le{outline:0}.lf{user-select:none}.lg> svg{pointer-events:none}.lp{cursor:progress}.lq{margin-left:4px}.lr{margin-top:0px}.ls{opacity:1}.lt{padding:4px 0}.lw{width:16px}.ly{display:inline-flex}.me{max-width:100%}.mf{padding:8px 2px}.mg svg{color:#6B6B6B}.mx{line-height:1.12}.my{letter-spacing:-0.022em}.mz{font-weight:600}.nu{margin-bottom:-0.28em}.nv{line-height:1.58}.nw{letter-spacing:-0.004em}.nx{font-family:source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif}.os{margin-bottom:-0.46em}.oy{font-style:italic}.oz{margin-left:auto}.pa{margin-right:auto}.pb{max-width:241px}.ph{clear:both}.pi{height:auto}.pj{text-decoration:underline}.pk{max-width:975px}.pm{cursor:zoom-in}.pn{z-index:auto}.pp{margin-top:10px}.pq{max-width:728px}.pt{list-style-type:disc}.pu{margin-left:30px}.pv{padding-left:0px}.qb{padding:2px 4px}.qc{font-size:75%}.qd> strong{font-family:inherit}.qe{font-family:source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace}.qf{list-style-type:decimal}.qg{margin:auto}.qh{padding-bottom:100%}.qi{height:0}.qj{overflow-x:auto}.qk{padding:32px}.ql{border:1px solid #E5E5E5}.qm{line-height:1.4}.qn{margin-top:-0.2em}.qo{margin-bottom:-0.2em}.qp{white-space:pre}.qq{min-width:fit-content}.qr{line-height:1.18}.rf{margin-bottom:-0.31em}.rg{max-width:772px}.rh{max-width:598px}.ri{max-width:670px}.rj{max-width:1600px}.rk{max-width:1107px}.rl{max-width:1425px}.rm{max-width:257px}.rn{margin-bottom:26px}.ro{margin-top:6px}.rp{margin-top:8px}.rq{margin-right:8px}.rr{padding:8px 16px}.rs{border-radius:100px}.rt{transition:background 300ms ease}.rv{white-space:nowrap}.rw{border-top:none}.rx{margin-bottom:14px}.ry{height:52px}.rz{max-height:52px}.sa{box-sizing:content-box}.sb{position:static}.sd{max-width:155px}.sj{margin-right:20px}.sp{height:0px}.sq{margin-bottom:40px}.sr{margin-bottom:48px}.tf{border-radius:2px}.th{height:64px}.ti{width:64px}.tj{align-self:flex-end}.tk{color:rgba(255, 255, 255, 1)}.tl{fill:rgba(255, 255, 255, 1)}.tm{background:rgba(25, 25, 25, 1)}.tn{border-color:rgba(25, 25, 25, 1)}.tq:disabled{opacity:0.1}.tr:disabled:hover{background:rgba(25, 25, 25, 1)}.ts:disabled:hover{border-color:rgba(25, 25, 25, 1)}.tt{flex:1 1 auto}.tz{padding-right:4px}.ua{font-weight:500}.uh{margin-top:16px}.uq{gap:18px}.ur{fill:rgba(61, 61, 61, 1)}.ut{padding-bottom:6px}.uu{border-bottom:1px solid #F2F2F2}.va{margin-top:32px}.vb{fill:#242424}.vc{background:0}.vd{border-color:#242424}.ve:disabled:hover{color:#242424}.vf:disabled:hover{fill:#242424}.vg:disabled:hover{border-color:#242424}.vr{border-bottom:solid 1px #E5E5E5}.vs{margin-top:72px}.vt{padding:24px 0}.vu{margin-bottom:0px}.vv{margin-right:16px}.as:hover:not(:disabled){color:rgba(25, 25, 25, 1)}.at:hover:not(:disabled){fill:rgba(25, 25, 25, 1)}.et:hover{background:rgba(110, 110, 154, 1)}.eu:hover{border-color:rgba(110, 110, 154, 1)}.ev:hover{cursor:pointer}.fl:hover{color:#242424}.fm:hover{fill:#242424}.fq:hover svg{fill:#242424}.ft:hover{background-color:rgba(0, 0, 0, 0.1)}.iq:hover{text-decoration:underline}.iv:hover:not(:disabled){color:rgba(110, 110, 154, 1)}.iw:hover:not(:disabled){fill:rgba(110, 110, 154, 1)}.ld:hover{fill:rgba(8, 8, 8, 1)}.lu:hover{fill:#000000}.lv:hover p{color:#000000}.lx:hover{color:#000000}.mh:hover svg{color:#000000}.ru:hover{background-color:#F2F2F2}.tg:hover{background-color:none}.to:hover{background:#000000}.tp:hover{border-color:#242424}.us:hover{fill:rgba(25, 25, 25, 1)}.bd:focus-within path{fill:#242424}.lc:focus{fill:rgba(8, 8, 8, 1)}.mi:focus svg{color:#000000}.po:focus{transform:scale(1.01)}.lh:active{border-style:none}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (min-width: 1080px)">.d{display:none}.bw{width:64px}.cg{margin:0 64px}.cv{height:48px}.dc{margin-bottom:52px}.do{margin-bottom:48px}.ef{font-size:14px}.eg{line-height:20px}.em{font-size:13px}.eo{padding:5px 12px}.fh{display:flex}.fy{margin-bottom:68px}.gc{max-width:680px}.hq{font-size:42px}.hr{margin-top:1.19em}.hs{margin-bottom:32px}.ht{line-height:52px}.hu{letter-spacing:-0.011em}.hz{align-items:center}.kb{border-top:solid 1px #F2F2F2}.kc{border-bottom:solid 1px #F2F2F2}.kd{margin:32px 0 0}.ke{padding:3px 8px}.kn> *{margin-right:24px}.ko> :last-child{margin-right:0}.lo{margin-top:0px}.md{margin:0}.nq{font-size:24px}.nr{margin-top:1.95em}.ns{line-height:30px}.nt{letter-spacing:-0.016em}.oo{font-size:20px}.op{margin-top:0.94em}.oq{line-height:32px}.or{letter-spacing:-0.003em}.ox{margin-top:2.14em}.pg{margin-top:56px}.qa{margin-top:1.14em}.rc{margin-top:1.72em}.rd{line-height:24px}.re{letter-spacing:0}.si{display:inline-block}.so{margin-bottom:104px}.ss{flex-direction:row}.sv{margin-bottom:0}.sw{margin-right:20px}.tu{max-width:500px}.um{margin-bottom:88px}.up{margin-bottom:72px}.uz{margin:40px 0 16px}.vl{width:min-width}.vq{padding-top:72px}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (max-width: 1079.98px)">.e{display:none}.ln{margin-top:0px}.pr{margin-left:auto}.ps{text-align:center}.sh{display:inline-block}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (max-width: 903.98px)">.f{display:none}.lm{margin-top:0px}.sg{display:inline-block}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (max-width: 727.98px)">.g{display:none}.lk{margin-top:0px}.ll{margin-right:0px}.sf{display:inline-block}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (max-width: 551.98px)">.h{display:none}.s{display:flex}.t{justify-content:space-between}.bs{width:24px}.cc{margin:0 24px}.cr{height:40px}.cy{margin-bottom:44px}.dk{margin-bottom:32px}.dx{font-size:13px}.dy{line-height:20px}.eh{padding:0px 8px 1px}.fu{margin-bottom:4px}.gw{font-size:32px}.gx{margin-top:1.01em}.gy{margin-bottom:24px}.gz{line-height:38px}.ha{letter-spacing:-0.014em}.hv{align-items:flex-start}.iy{flex-direction:column}.jb{margin-bottom:2px}.jp{margin:24px -24px 0}.jq{padding:0}.kf> *{margin-right:8px}.kg> :last-child{margin-right:24px}.kx{margin-left:0px}.li{margin-top:0px}.lj{margin-right:0px}.lz{margin:0}.mj{border:1px solid #F2F2F2}.mk{border-radius:99em}.ml{padding:0px 16px 0px 12px}.mm{height:38px}.mn{align-items:center}.mp svg{margin-right:8px}.na{font-size:20px}.nb{margin-top:1.2em}.nc{line-height:24px}.nd{letter-spacing:0}.ny{font-size:18px}.nz{margin-top:0.67em}.oa{line-height:28px}.ob{letter-spacing:-0.003em}.ot{margin-top:1.56em}.pc{margin-top:40px}.pw{margin-top:1.34em}.qs{font-size:16px}.qt{margin-top:1.23em}.se{display:inline-block}.sk{margin-bottom:96px}.td{margin-bottom:20px}.te{margin-right:0}.ty{max-width:100%}.ub{font-size:24px}.uc{line-height:30px}.ud{letter-spacing:-0.016em}.ui{margin-bottom:64px}.uv{margin:32px 0 16px}.vh{width:100%}.vm{padding-top:48px}.mo:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (min-width: 904px) and (max-width: 1079.98px)">.i{display:none}.bv{width:64px}.cf{margin:0 64px}.cu{height:48px}.db{margin-bottom:52px}.dn{margin-bottom:48px}.ed{font-size:14px}.ee{line-height:20px}.ek{font-size:13px}.el{padding:5px 12px}.fg{display:flex}.fx{margin-bottom:68px}.gb{max-width:680px}.hl{font-size:42px}.hm{margin-top:1.19em}.hn{margin-bottom:32px}.ho{line-height:52px}.hp{letter-spacing:-0.011em}.hy{align-items:center}.jx{border-top:solid 1px #F2F2F2}.jy{border-bottom:solid 1px #F2F2F2}.jz{margin:32px 0 0}.ka{padding:3px 8px}.kl> *{margin-right:24px}.km> :last-child{margin-right:0}.mc{margin:0}.nm{font-size:24px}.nn{margin-top:1.95em}.no{line-height:30px}.np{letter-spacing:-0.016em}.ok{font-size:20px}.ol{margin-top:0.94em}.om{line-height:32px}.on{letter-spacing:-0.003em}.ow{margin-top:2.14em}.pf{margin-top:56px}.pz{margin-top:1.14em}.qz{margin-top:1.72em}.ra{line-height:24px}.rb{letter-spacing:0}.sn{margin-bottom:104px}.st{flex-direction:row}.sx{margin-bottom:0}.sy{margin-right:20px}.tv{max-width:500px}.ul{margin-bottom:88px}.uo{margin-bottom:72px}.uy{margin:40px 0 16px}.vk{width:min-width}.vp{padding-top:72px}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (min-width: 728px) and (max-width: 903.98px)">.j{display:none}.w{display:flex}.x{justify-content:space-between}.bu{width:64px}.ce{margin:0 48px}.ct{height:48px}.da{margin-bottom:52px}.dm{margin-bottom:48px}.eb{font-size:13px}.ec{line-height:20px}.ej{padding:0px 8px 1px}.fw{margin-bottom:68px}.ga{max-width:680px}.hg{font-size:42px}.hh{margin-top:1.19em}.hi{margin-bottom:32px}.hj{line-height:52px}.hk{letter-spacing:-0.011em}.hx{align-items:center}.jt{border-top:solid 1px #F2F2F2}.ju{border-bottom:solid 1px #F2F2F2}.jv{margin:32px 0 0}.jw{padding:3px 8px}.kj> *{margin-right:24px}.kk> :last-child{margin-right:0}.mb{margin:0}.ni{font-size:24px}.nj{margin-top:1.95em}.nk{line-height:30px}.nl{letter-spacing:-0.016em}.og{font-size:20px}.oh{margin-top:0.94em}.oi{line-height:32px}.oj{letter-spacing:-0.003em}.ov{margin-top:2.14em}.pe{margin-top:56px}.py{margin-top:1.14em}.qw{margin-top:1.72em}.qx{line-height:24px}.qy{letter-spacing:0}.sm{margin-bottom:104px}.su{flex-direction:row}.sz{margin-bottom:0}.ta{margin-right:20px}.tw{max-width:500px}.uk{margin-bottom:88px}.un{margin-bottom:72px}.ux{margin:40px 0 16px}.vj{width:min-width}.vo{padding-top:72px}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="all and (min-width: 552px) and (max-width: 727.98px)">.k{display:none}.u{display:flex}.v{justify-content:space-between}.bt{width:24px}.cd{margin:0 24px}.cs{height:40px}.cz{margin-bottom:44px}.dl{margin-bottom:32px}.dz{font-size:13px}.ea{line-height:20px}.ei{padding:0px 8px 1px}.fv{margin-bottom:4px}.hb{font-size:32px}.hc{margin-top:1.01em}.hd{margin-bottom:24px}.he{line-height:38px}.hf{letter-spacing:-0.014em}.hw{align-items:flex-start}.iz{flex-direction:column}.jc{margin-bottom:2px}.jr{margin:24px 0 0}.js{padding:0}.kh> *{margin-right:8px}.ki> :last-child{margin-right:8px}.ky{margin-left:0px}.ma{margin:0}.mq{border:1px solid #F2F2F2}.mr{border-radius:99em}.ms{padding:0px 16px 0px 12px}.mt{height:38px}.mu{align-items:center}.mw svg{margin-right:8px}.ne{font-size:20px}.nf{margin-top:1.2em}.ng{line-height:24px}.nh{letter-spacing:0}.oc{font-size:18px}.od{margin-top:0.67em}.oe{line-height:28px}.of{letter-spacing:-0.003em}.ou{margin-top:1.56em}.pd{margin-top:40px}.px{margin-top:1.34em}.qu{font-size:16px}.qv{margin-top:1.23em}.sl{margin-bottom:96px}.tb{margin-bottom:20px}.tc{margin-right:0}.tx{max-width:100%}.ue{font-size:24px}.uf{line-height:30px}.ug{letter-spacing:-0.016em}.uj{margin-bottom:64px}.uw{margin:32px 0 16px}.vi{width:100%}.vn{padding-top:48px}.mv:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="print">.sc{display:none}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="(orientation: landscape) and (max-width: 903.98px)">.jm{max-height:none}</style><style type="text/css" data-fela-rehydration="593" data-fela-type="RULE" media="(prefers-reduced-motion: no-preference)">.pl{transition:transform 300ms cubic-bezier(0.2, 0, 0.2, 1)}</style></head><body><div id="root"><div class="a b c"><div class="d e f g h i j k"></div><script>document.domain = document.domain;</script><div class="l c"><div class="l m n o c"><div class="p q r s t u v w x i d y z"><a class="du ag dv bf ak b am an ao ap aq ar as at s u w i d q dw z" href="https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F76d619b633f5&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderCollection&amp;source=---top_nav_layout_nav----------------------------------" rel="noopener follow">Open in app<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10" class="dt"><path fill="currentColor" d="M.985 8.485a.375.375 0 1 0 .53.53zM8.75 1.25h.375A.375.375 0 0 0 8.75.875zM8.375 6.5a.375.375 0 1 0 .75 0zM3.5.875a.375.375 0 1 0 0 .75zm-1.985 8.14 7.5-7.5-.53-.53-7.5 7.5zm6.86-7.765V6.5h.75V1.25zM3.5 1.625h5.25v-.75H3.5z"></path></svg></a><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton" href="https://medium.com/m/signin?operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign up</a></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="p q r ab ac"><div class="ab q ae"><a class="af ag ah ai aj ak al am an ao ap aq ar as at ab" aria-label="Homepage" data-testid="headerMediumLogo" href="https://medium.com/?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="719" height="160" fill="none" viewBox="0 0 719 160" class="au av aw"><path fill="#242424" d="m174.104 9.734.215-.047V8.02H130.39L89.6 103.89 48.81 8.021H1.472v1.666l.212.047c8.018 1.81 12.09 4.509 12.09 14.242V137.93c0 9.734-4.087 12.433-12.106 14.243l-.212.047v1.671h32.118v-1.665l-.213-.048c-8.018-1.809-12.089-4.509-12.089-14.242V30.586l52.399 123.305h2.972l53.925-126.743V140.75c-.687 7.688-4.721 10.062-11.982 11.701l-.215.05v1.652h55.948v-1.652l-.215-.05c-7.269-1.639-11.4-4.013-12.087-11.701l-.037-116.774h.037c0-9.733 4.071-12.432 12.087-14.242m25.555 75.488c.915-20.474 8.268-35.252 20.606-35.507 3.806.063 6.998 1.312 9.479 3.714 5.272 5.118 7.751 15.812 7.368 31.793zm-.553 5.77h65.573v-.275c-.186-15.656-4.721-27.834-13.466-36.196-7.559-7.227-18.751-11.203-30.507-11.203h-.263c-6.101 0-13.584 1.48-18.909 4.16-6.061 2.807-11.407 7.003-15.855 12.511-7.161 8.874-11.499 20.866-12.554 34.343q-.05.606-.092 1.212a50 50 0 0 0-.065 1.151 85.807 85.807 0 0 0-.094 5.689c.71 30.524 17.198 54.917 46.483 54.917 25.705 0 40.675-18.791 44.407-44.013l-1.886-.664c-6.557 13.556-18.334 21.771-31.738 20.769-18.297-1.369-32.314-19.922-31.042-42.395m139.722 41.359c-2.151 5.101-6.639 7.908-12.653 7.908s-11.513-4.129-15.418-11.63c-4.197-8.053-6.405-19.436-6.405-32.92 0-28.067 8.729-46.22 22.24-46.22 5.657 0 10.111 2.807 12.236 7.704zm43.499 20.008c-8.019-1.897-12.089-4.722-12.089-14.951V1.309l-48.716 14.353v1.757l.299-.024c6.72-.543 11.278.386 13.925 2.83 2.072 1.915 3.082 4.853 3.082 8.987v18.66c-4.803-3.067-10.516-4.56-17.448-4.56-14.059 0-26.909 5.92-36.176 16.672-9.66 11.205-14.767 26.518-14.767 44.278-.003 31.72 15.612 53.039 38.851 53.039 13.595 0 24.533-7.449 29.54-20.013v16.865h43.711v-1.746zM424.1 19.819c0-9.904-7.468-17.374-17.375-17.374-9.859 0-17.573 7.632-17.573 17.374s7.721 17.374 17.573 17.374c9.907 0 17.375-7.47 17.375-17.374m11.499 132.546c-8.019-1.897-12.089-4.722-12.089-14.951h-.035V43.635l-43.714 12.551v1.705l.263.024c9.458.842 12.047 4.1 12.047 15.152v81.086h43.751v-1.746zm112.013 0c-8.018-1.897-12.089-4.722-12.089-14.951V43.635l-41.621 12.137v1.71l.246.026c7.733.813 9.967 4.257 9.967 15.36v59.279c-2.578 5.102-7.415 8.131-13.274 8.336-9.503 0-14.736-6.419-14.736-18.073V43.638l-43.714 12.55v1.703l.262.024c9.459.84 12.05 4.097 12.05 15.152v50.17a56.3 56.3 0 0 0 .91 10.444l.787 3.423c3.701 13.262 13.398 20.197 28.59 20.197 12.868 0 24.147-7.966 29.115-20.43v17.311h43.714v-1.747zm169.818 1.788v-1.749l-.213-.05c-8.7-2.006-12.089-5.789-12.089-13.49v-63.79c0-19.89-11.171-31.761-29.883-31.761-13.64 0-25.141 7.882-29.569 20.16-3.517-13.01-13.639-20.16-28.606-20.16-13.146 0-23.449 6.938-27.869 18.657V43.643L545.487 55.68v1.715l.263.024c9.345.829 12.047 4.181 12.047 14.95v81.784h40.787v-1.746l-.215-.053c-6.941-1.631-9.181-4.606-9.181-12.239V66.998c1.836-4.289 5.537-9.37 12.853-9.37 9.086 0 13.692 6.296 13.692 18.697v77.828h40.797v-1.746l-.215-.053c-6.94-1.631-9.18-4.606-9.18-12.239V75.066a42 42 0 0 0-.578-7.26c1.947-4.661 5.86-10.177 13.475-10.177 9.214 0 13.691 6.114 13.691 18.696v77.828z"></path></svg></a><div class="ax h"><div class="ab ay az ba bb q bc bd"><div class="bm" aria-hidden="false" aria-describedby="searchResults" aria-labelledby="searchResults"></div><div class="bn bo ab"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div><input role="combobox" aria-controls="searchResults" aria-expanded="false" aria-label="search" data-testid="headerSearchInput" tabindex="0" class="ay be bf bg z bh bi bj bk bl" placeholder="Search" value=""/></div></div></div><div class="h k w fg fh"><div class="fi ab"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerWriteButton" href="https://medium.com/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav-----------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Write"><path fill="currentColor" d="M14 4a.5.5 0 0 0 0-1zm7 6a.5.5 0 0 0-1 0zm-7-7H4v1h10zM3 4v16h1V4zm1 17h16v-1H4zm17-1V10h-1v10zm-1 1a1 1 0 0 0 1-1h-1zM3 20a1 1 0 0 0 1 1v-1zM4 3a1 1 0 0 0-1 1h1z"></path><path stroke="currentColor" d="m17.5 4.5-8.458 8.458a.25.25 0 0 0-.06.098l-.824 2.47a.25.25 0 0 0 .316.316l2.47-.823a.25.25 0 0 0 .098-.06L19.5 6.5m-2-2 2.323-2.323a.25.25 0 0 1 .354 0l1.646 1.646a.25.25 0 0 1 0 .354L19.5 6.5m-2-2 2 2"></path></svg><div class="dt l">Write</div></div></a></span></div></div><div class="k j i d"><div class="fi ab"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSearchButton" href="https://medium.com/search?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Search"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div></a></div></div><div class="fi h k j"><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton" href="https://medium.com/m/signin?operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign up</a></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="l" aria-hidden="false"><button class="ay fn am ab q ao fo fp fq" aria-label="user options menu" data-testid="headerUserIcon"><div class="l fj"><img alt="" class="l fd by bz ca cx" src="https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png" width="32" height="32" loading="lazy" role="presentation"/><div class="fr by l bz ca fs n ay ft"></div></div></button></div></div></div><div class="l"><div class="fu fv fw fx fy l"><div class="ab cb"><div class="ci bh fz ga gb gc"></div></div><article><div class="l"><div class="l"><span class="l"></span><section><div><div class="fs gi gj gk gl gm"></div><div class="gn go gp gq gr"><div class="ab cb"><div class="ci bh fz ga gb gc"><div><h1 id="c563" class="pw-post-title gs gt gu bf gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu bk" data-testid="storyTitle">Dotnet Source Generators in 2024 Part 1: Getting Started</h1><div><div class="speechify-ignore ab cp"><div class="speechify-ignore bh l"><div class="hv hw hx hy hz ab"><div><div class="ab ia"><div><div class="bm" aria-hidden="false"><a href="https://dragoqcc.medium.com/?source=post_page---byline--76d619b633f5--------------------------------" rel="noopener follow"><div class="l ib ic by id ie"><div class="l fj"><img alt="Jonathan Owens" class="l fd by dd de cx" src="https://miro.medium.com/v2/resize:fill:88:88/1*NcRudyjrwDx6UPl-YDD_6Q.png" width="44" height="44" loading="lazy" data-testid="authorPhoto"/><div class="if by l dd de fs n ig ft"></div></div></div></a></div></div><div class="ih ab fj"><div><div class="bm" aria-hidden="false"><a href="https://posts.specterops.io/?source=post_page---byline--76d619b633f5--------------------------------" rel="noopener  ugc nofollow"><div class="l ii ij by id ik"><div class="l fj"><img alt="Posts By SpecterOps Team Members" class="l fd by br il cx" src="https://miro.medium.com/v2/resize:fill:48:48/1*D-FDlfkqivRBQZoESrwtqw.png" width="24" height="24" loading="lazy" data-testid="publicationPhoto"/><div class="if by l br il fs n ig ft"></div></div></div></a></div></div></div></div></div><div class="bn bh l"><div class="ab"><div style="flex:1"><span class="bf b bg z bk"><div class="im ab q"><div class="ab q in"><div class="ab q"><div><div class="bm" aria-hidden="false"><p class="bf b io ip bk"><a class="af ag ah ai aj ak al am an ao ap aq ar iq" data-testid="authorName" href="https://dragoqcc.medium.com/?source=post_page---byline--76d619b633f5--------------------------------" rel="noopener follow">Jonathan Owens</a></p></div></div></div><span class="ir is" aria-hidden="true"><span class="bf b bg z du">·</span></span><p class="bf b io ip du"><span><a class="it iu ah ai aj ak al am an ao ap aq ar ex iv iw" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa07d497fb5bc&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=post_page-a07d497fb5bc--byline--76d619b633f5---------------------post_header-----------" rel="noopener follow">Follow</a></span></p></div></div></span></div></div><div class="l ix"><span class="bf b bg z du"><div class="ab cn iy iz ja"><div class="jb jc ab"><div class="bf b bg z du ab jd"><span class="je l ix">Published in</span><div><div class="l" aria-hidden="false"><a class="af ag ah ai aj ak al am an ao ap aq ar iq ab q" data-testid="publicationName" href="https://posts.specterops.io/?source=post_page---byline--76d619b633f5--------------------------------" rel="noopener  ugc nofollow"><p class="bf b bg z jf jg jh ji jj jk jl jm bk">Posts By SpecterOps Team Members</p></a></div></div></div><div class="h k"><span class="ir is" aria-hidden="true"><span class="bf b bg z du">·</span></span></div></div><span class="bf b bg z du"><div class="ab ae"><span data-testid="storyReadTime">17 min read</span><div class="jn jo l" aria-hidden="true"><span class="l" aria-hidden="true"><span class="bf b bg z du">·</span></span></div><span data-testid="storyPublishDate">Oct 1, 2024</span></div></span></div></span></div></div></div><div class="ab cp jp jq jr js jt ju jv jw jx jy jz ka kb kc kd ke"><div class="h k w fg fh q"><div class="ku l"><div class="ab q kv kw"><div class="pw-multi-vote-icon fj je kx ky kz"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fspecter-ops-posts%2F76d619b633f5&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=---header_actions--76d619b633f5---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="la ao lb lc ld le am lf lg lh kz"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l li lj lk ll lm ln lo"><p class="bf b dv z du"><span class="lp">--</span></p></div></div></div><div><div class="bm" aria-hidden="false"><button class="ao la ls lt ab q fk lu lv" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="lr"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg><p class="bf b dv z du"><span class="pw-responses-count lq lr">2</span></p></button></div></div></div><div class="ab q kf kg kh ki kj kk kl km kn ko kp kq kr ks kt"><div class="lw k j i d"></div><div class="h k"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F76d619b633f5&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=---header_actions--76d619b633f5---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lx" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="fd ly cn"><div class="l ae"><div class="ab cb"><div class="lz ma mb mc md me ci bh"><div class="ab"><div class="bm bh" aria-hidden="false"><div><div class="bm" aria-hidden="false"><button aria-label="Listen" data-testid="audioPlayButton" class="af fk ah ai aj ak al mf an ao ap ex mg mh lv mi mj mk ml mm s mn mo mp mq mr ms mt u mu mv mw"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0m9-10C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2m3.376 10.416-4.599 3.066a.5.5 0 0 1-.777-.416V8.934a.5.5 0 0 1 .777-.416l4.599 3.066a.5.5 0 0 1 0 .832" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Listen</p></div></button></div></div></div></div></div></div></div></div><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="headerSocialShareButton" class="af fk ah ai aj ak al mf an ao ap ex mg mh lv mi mj mk ml mm s mn mo mp mq mr ms mt u mu mv mw"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Share</p></div></button></div></div></div></div></div></div></div></div></div><h1 id="3ae8" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Introduction</h1><p id="bf50" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">In this blog post, we will cover the basics of a source generator, the major types involved, some common issues you might encounter, how to properly log those issues, and how to fix them.</p><p id="5934" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Source Generators have existed since .NET 5 was first introduced in late 2020. They have seen numerous improvements since that initial release, including the creation of newer Incremental Source Generators.</p><p id="4dd3" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><strong class="nx gv"><em class="oy">TLDR: Source generators in .NET enable you to inspect user code and generate additional code on the fly based on that analysis. The example in this blog post may seem a bit redundant, but as you use more advanced patterns, you can generate hundreds of lines of code, helping to reduce boilerplate and repetitive code across your projects. Source generators are also great for lowering runtime reflection use, which can be expensive and slow down your applications.</em></strong></p><p id="5743" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><strong class="nx gv">Update</strong>: I updated the stated reason a source generator must target the .NET standard and removed some redundant code from the examples.</p><p id="c897" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">While developing a C# library to perform messaging between various process components or between processes, I encountered an issue where client programs using this new messaging library would need to add a list of all the “Messenger types.” I had heard of source generators and experimented with them a small amount before encountering this problem, so I figured I could dive in and devise a working solution to handle this and inject the list of “Messenger types” as a property automagically.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div class="oz pa pb"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*sOX8dRV1Q8gJw9Hr 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*sOX8dRV1Q8gJw9Hr 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*sOX8dRV1Q8gJw9Hr 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*sOX8dRV1Q8gJw9Hr 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*sOX8dRV1Q8gJw9Hr 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*sOX8dRV1Q8gJw9Hr 1100w, https://miro.medium.com/v2/resize:fit:482/format:webp/0*sOX8dRV1Q8gJw9Hr 482w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 241px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*sOX8dRV1Q8gJw9Hr 640w, https://miro.medium.com/v2/resize:fit:720/0*sOX8dRV1Q8gJw9Hr 720w, https://miro.medium.com/v2/resize:fit:750/0*sOX8dRV1Q8gJw9Hr 750w, https://miro.medium.com/v2/resize:fit:786/0*sOX8dRV1Q8gJw9Hr 786w, https://miro.medium.com/v2/resize:fit:828/0*sOX8dRV1Q8gJw9Hr 828w, https://miro.medium.com/v2/resize:fit:1100/0*sOX8dRV1Q8gJw9Hr 1100w, https://miro.medium.com/v2/resize:fit:482/0*sOX8dRV1Q8gJw9Hr 482w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 241px"/><img alt="" class="bh me pi c" width="241" height="209" loading="lazy" role="presentation"/></picture></div></figure><p id="53e3" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">I have also been learning various programming paradigms and interesting practices. Vertical Slice architecture and aspect-oriented programming (AOP) are the two relevant to this blog. Vertical slices focus on grouping things that will change together, typically by the feature they represent, regardless of the layer they belong to. The goal of the slices is to minimize coupling between slices and maximize coupling in a slice (i.e., things in a feature depend on each other while trying not to rely on other slice features). This keeps the code base modular and makes it easy to update, remove, or add new slices, as the changes shouldn’t directly affect existing slices. [<a class="af pj" href="https://www.jimmybogard.com/vertical-slice-architecture/" rel="noopener ugc nofollow" target="_blank">You can read more on vertical slices here</a>]</p><p id="fcb1" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. Typically, in C#, this is implemented by creating attributes that are then placed on classes, methods, etc., to introduce or modify the decorated code. So, with these things in mind, I wanted to look at creating a feature that worked with vertical slices using AOP, and given my newfound challenge of automatically injecting a list of objects into my messenger app at build time, I had just the target goal in mind to combine all of it together.</p><p id="12f5" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">With that brief overview of why I started messing with source generators, let’s take a quick step back and cover the basics of what a source generator is, what it lets you do, and what it doesn’t.</p><h1 id="bf95" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">What is a Source Generator?</h1><p id="8b70" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">According to Microsoft: “<em class="oy">Source generators aim to enable compile-time metaprogramming, that is, code that can be created at compile time and added to the compilation. Source generators will be able to read the contents of the compilation before running, as well as access any additional files, enabling generators to introspect both user C# code and generator-specific files. Generators create a pipeline, starting from base input sources and mapping them to the output they wish to produce. The more exposed, properly equatable states exist, the earlier the compiler will be able to cut off changes and reuse the same output.</em>”</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="oz pa pk"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*sAAfVq4rGtGduDRs 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*sAAfVq4rGtGduDRs 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*sAAfVq4rGtGduDRs 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*sAAfVq4rGtGduDRs 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*sAAfVq4rGtGduDRs 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*sAAfVq4rGtGduDRs 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*sAAfVq4rGtGduDRs 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*sAAfVq4rGtGduDRs 640w, https://miro.medium.com/v2/resize:fit:720/0*sAAfVq4rGtGduDRs 720w, https://miro.medium.com/v2/resize:fit:750/0*sAAfVq4rGtGduDRs 750w, https://miro.medium.com/v2/resize:fit:786/0*sAAfVq4rGtGduDRs 786w, https://miro.medium.com/v2/resize:fit:828/0*sAAfVq4rGtGduDRs 828w, https://miro.medium.com/v2/resize:fit:1100/0*sAAfVq4rGtGduDRs 1100w, https://miro.medium.com/v2/resize:fit:1400/0*sAAfVq4rGtGduDRs 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh me pi c" width="700" height="278" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">Figure 1 — <a class="af pj" href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/media/source-generators/source-generator-visualization.png" rel="noopener ugc nofollow" target="_blank">Source Generator dataflow</a>, Microsoft</figcaption></figure><p id="174a" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Simply put, source generators in .NET are library projects that you can add to a solution or include in existing NuGet packages. They are meant to be utilized only during the build process to add new code to a project.</p><p id="5bba" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">[<a class="af pj" href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview" rel="noopener ugc nofollow" target="_blank">Read more about common source generator use cases here</a>].</p><h1 id="c0ad" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">What Are Source Generators Not Meant to Do</h1><p id="22aa" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">Microsoft calls out two main concepts as areas where generators are not meant to be used. The first area is adding language features. Microsoft states: “<em class="oy">Source generators are not designed to replace new language features: for instance, one could imagine records being implemented as a source generator that converts the specified syntax to a compilable C# representation. We explicitly consider this to be an anti-pattern; the language will continue to evolve and add new features, and we don’t expect source generators to be a way to enable this. Doing so would create new ‘dialects’ of C# that are incompatible with the compiler without generators.</em>”</p><p id="bb94" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">In this regard, I agree with the team that allowing any .NET developer to start adding new features to the language opens up the possibility of competing features, confusing requirements, and incompatibility with the .NET compiler; which will only serve to confuse and push developers away from source generators altogether.</p><p id="b5af" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The second is in code modification; the Microsoft documentation also states, “<em class="oy">There are many post-processing tasks that users perform on their assemblies today, which here we define broadly as ‘code rewriting’. These include, but are not limited to:</em></p><ul class=""><li id="23b8" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk"><em class="oy">Optimization</em></li><li id="7674" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><em class="oy">Logging injection</em></li><li id="db94" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><em class="oy">IL Weaving</em></li><li id="8c0b" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><em class="oy">Call site re-writing</em></li></ul><p id="c899" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><em class="oy">While these techniques have many valuable use cases, they do not fit into the idea of source generation. They are, by definition, code altering operations which are explicitly ruled out by the source generator’s proposal.</em>”</p><p id="5f7f" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">While technically accurate, this feels more like a semantic line in the sand for the team not wanting a “generator” to perform replacement and not a language-breaking functionality to have access to. With that said, I will show a workaround for code rewriting that I’ve used recently if that is part of your goal for using a source generator.</p><p id="dd0e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">A source generator is also not an Analyzer. While often used together and sharing many of the exact same requirements to utilize one in a project, a generator’s job is to produce code and an analyzer’s job is to produce warnings or errors based on various rules such as code formatting or, as we will see in source generators, to block access to specific functions/code bases that the analyzer’s author deemed unwelcome.</p><h1 id="90a7" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">The Primary Type of Source Generator in Modern .NET</h1><p id="62cb" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">At the time of writing this (September 2024), the .NET team has decided to deprecate source generators implementing “ISourceGenerator” in favor of incremental generators. This change will be enforced, seemingly blocking access to older “ISourceGenerator” APIs with versions of the Roslyn API after version 4.10.0 / .NET 9. (<a class="af pj" href="https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.md#summary" rel="noopener ugc nofollow" target="_blank">Old Generator Deprecated</a>). In light of that, this blog post series will only cover “IncrementalGenerator” usage.</p><h1 id="a988" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">What Is an Incremental Source Generator?</h1><p id="9e91" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">An incremental generator is a source generator that performs its evaluation and execution on items only after they pass some filtering requirements, significantly increasing performance.</p><p id="5f23" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Typically, source generators try to execute during design time and compile time. While nice, this incurs an execution of any classes marked as a source generator every time something changes in the project (i.e., delete a line of code, add a line of code, make a new file, etc.). As you can imagine, having something running every time you type is not ideal for performance; thus, Microsoft created these incremental generators to help solve that performance problem.</p><h1 id="f536" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Adding an Incremental Source Generator to Your Project</h1><p id="74fe" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">Source generators must target <code class="cx qb qc qd qe b">.NET standard 2.0</code>. This is because, currently, the .NET compiler targets .NET standard 2.0, and a Source Generator is an assembly loaded by the compiler that must target a version it will understand. By the end of this section, we will have a solution containing three projects.</p><ul class=""><li id="89d1" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk"><code class="cx qb qc qd qe b">A .NET standard 2.0 library (Source Generator)</code></li><li id="b01c" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b">A .NET standard 2.0 library (A shared library for the generator and consumers)</code></li><li id="874c" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b">A .NET 8 web API project (Main project)</code></li></ul><p id="4584" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">You can use the <code class="cx qb qc qd qe b">dotnet</code> command in a terminal or your IDE of choice to create these projects. I will use the dotnet tool since it is IDE/platform agnostic. The following commands will produce the required projects.</p><ol class=""><li id="42dc" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os qf pu pv bk"><code class="cx qb qc qd qe b">dotnet new sln -n IncrementalSourceGenPractice</code></li><li id="9abe" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os qf pu pv bk"><code class="cx qb qc qd qe b">dotnet new webapi -n WebProject — project .\IncrementalSourceGenPractice.sln</code></li><li id="5fb6" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os qf pu pv bk"><code class="cx qb qc qd qe b">dotnet new classlib -f netstandard2.0 — langVersion 12 -n SourceGenerator — project .\IncrementalSourceGenPractice.sln</code></li><li id="3839" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os qf pu pv bk"><code class="cx qb qc qd qe b">dotnet new classlib -f netstandard2.0 — langVersion 12 -n SourceGenerator.SharedLibrary — project .\IncrementalSourceGenPractice.sln</code></li><li id="0bbd" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os qf pu pv bk"><code class="cx qb qc qd qe b">dotnet sln .\IncrementalSourceGenPractice.sln add .\SourceGenerator.SharedLibrary\SourceGenerator.SharedLibrary.csproj .\SourceGenerator\SourceGenerator.csproj .\WebProject\WebProject.csproj</code></li></ol><p id="c485" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Before creating the source generator, adding a few Nuget packages and changes to the .csproj files are required. Open the <em class="oy">SourceGenerator.csproj</em> file<em class="oy"> </em>and ensure it matches the following content.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">SourceGenerator.csproj</figcaption></figure><p id="a5dc" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The version numbers of the package references will likely be different, which is fine as long as they are valid for the <em class="oy">.NET standard 2.0 target</em>.</p><p id="63f5" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The three configuration settings added are the following</p><p id="8b8f" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">1. <code class="cx qb qc qd qe b">&lt;EnforceExtendedAnalyzerRules&gt;true&lt;/EnforceExtendedAnalyzerRules&gt;</code></p><ul class=""><li id="5012" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk">Ensures the generator is using the recommended rules created by the .NET team</li></ul><p id="fde7" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">2. <code class="cx qb qc qd qe b">&lt;IsRoslynComponent&gt;true&lt;/IsRoslynComponent&gt;</code></p><ul class=""><li id="a896" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk">Enables the project to act as a generator and work with the Roslyn compiler, making debugging of the generator possible</li></ul><p id="116e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">3. <code class="cx qb qc qd qe b">&lt;IncludeBuildOutput&gt;false&lt;/IncludeBuildOutput&gt;</code></p><ul class=""><li id="e33a" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk">This prevents the project build from being included in output, which is ideal since the generator is meant to be compile-time only</li></ul><p id="5ebb" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The other odd configuration in this <em class="oy">.csproj</em> file is the <code class="cx qb qc qd qe b">OutputItemType=”Analyzer”</code> added to the project reference for the shared library. Even though the shared library is not an analyzer, this is required so the generator can access it during generation.</p><p id="6e3c" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The final bit of configuration required is for the <em class="oy">webproject.csproj</em> file.</p><p id="5ac5" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Add the following lines to the project.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="5942" class="qm my gu qe b bg qn qo l qp qq">&lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt;<br/>&lt;CompilerGeneratedFilesOutputPath&gt;.\GeneratedFiles&lt;/CompilerGeneratedFilesOutputPath&gt;</span></pre><ul class=""><li id="5d1c" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk">These two options allow the source generator files to be written to the filesystem and set a custom path to write them to vs. using the default path.</li></ul><p id="1329" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Lastly, add the following item group also to the <em class="oy">webproject.csproj</em> file.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="9f93" class="qm my gu qe b bg qn qo l qp qq">&lt;ItemGroup&gt;<br/>&lt;ProjectReference Include=&quot;..\SourceGenerator.SharedLibrary\SourceGenerator.SharedLibrary.csproj&quot; /&gt;<br/>&lt;ProjectReference Include=&quot;..\SourceGenerator\SourceGenerator.csproj&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt;<br/>&lt;/ItemGroup&gt;</span></pre><ul class=""><li id="8316" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk">When referencing the source generator, we do not need the output assembly again because it is not required after compile time.</li></ul><h1 id="a40e" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Adding a Relevant Target for Generation</h1><p id="d69a" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">In this first part, we will generate something relatively simple; however, later posts go deeper into using source generators and we will create a small AOP framework to achieve the goal outlined at the start of this blog.</p><p id="8f6f" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Open the <em class="oy">WebProject </em>and<em class="oy"> </em>add a new class called <code class="cx qb qc qd qe b">Calculator.cs</code> with the following source.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="4457" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">We will then generate functions for this class to add, subtract, multiply, and divide. We must mark the class as partial to stick with the intended functionality of only adding content to existing classes. This indicates that more of the class’s source code may be in a different file.</p><h1 id="f4cd" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Starting on the Incremental Source Generator</h1><p id="19fc" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">Congratulations; we finally made it through the required setup.</p><p id="a63e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Finally, with that configuration done, we can start writing the source generator. In the <em class="oy">SourceGenerator</em> project, add a class named <code class="cx qb qc qd qe b">CalculatorGenerator</code><em class="oy"> </em>with the following content.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="8400" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This gives the bare-bones starting point. To be a valid Incremental source generator, the class must inherit from `IIncrementalGenerator` and be decorated with the <code class="cx qb qc qd qe b">[Generator]</code> attribute. The interface requires our generator to implement only the’ Initialize’ function.</p><h2 id="025a" class="qr my gu bf mz qs qt dy nd qu qv ea nh og qw qx qy ok qz ra rb oo rc rd re rf bk">The Providers</h2><p id="5040" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">The <code class="cx qb qc qd qe b">IncrementalGeneratorInitializationContext</code> argument it provides in the <code class="cx qb qc qd qe b">Initialize</code> method will give access to the underlying source.</p><p id="da0d" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The context object does this via several different “providers.”</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="oz pa rg"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*M7qvpmIvfEArNlov 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*M7qvpmIvfEArNlov 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*M7qvpmIvfEArNlov 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*M7qvpmIvfEArNlov 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*M7qvpmIvfEArNlov 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*M7qvpmIvfEArNlov 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*M7qvpmIvfEArNlov 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*M7qvpmIvfEArNlov 640w, https://miro.medium.com/v2/resize:fit:720/0*M7qvpmIvfEArNlov 720w, https://miro.medium.com/v2/resize:fit:750/0*M7qvpmIvfEArNlov 750w, https://miro.medium.com/v2/resize:fit:786/0*M7qvpmIvfEArNlov 786w, https://miro.medium.com/v2/resize:fit:828/0*M7qvpmIvfEArNlov 828w, https://miro.medium.com/v2/resize:fit:1100/0*M7qvpmIvfEArNlov 1100w, https://miro.medium.com/v2/resize:fit:1400/0*M7qvpmIvfEArNlov 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh me pi c" width="700" height="172" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">Different Provides for Accessing Various Contexts</figcaption></figure><ul class=""><li id="afb3" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">CompilationProvider</em></code> -&gt; Can access data relevant to the entire compilation (assemblies, all source files, various solution-wide options, and configs )</li><li id="5477" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">SyntaxProvider</em></code> -&gt; Access to syntax trees to analyze, transform, and select nodes for future work (Most commonly accessed)</li><li id="18f6" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">ParseOptionProvider</em></code> -&gt; Gives access to various bits of info about the code being parsed, such as language, whether it’s regular code files, script files, custom preprocessor names, etc.</li><li id="28f6" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">AdditionalTextsProvider</em></code> -&gt; Additional texts are any non-source files you might want to access, such as a JSON file with various user-defined properties</li><li id="6482" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">MetadataReferencesProvider</em></code> -&gt; Allows getting references to various things like assemblies without getting the whole assembly item directly</li><li id="094b" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b"><em class="oy">AnalyzerConfigOptionsProvider</em></code> -&gt; If a source file has additional analyzer rules applied to it, this can access them</li></ul><p id="d803" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The ones we care about are <code class="cx qb qc qd qe b">CompilationProvider</code> and <code class="cx qb qc qd qe b">SyntaxProvider</code>.</p><p id="96db" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Access the <code class="cx qb qc qd qe b">context.SyntaxProvider.CreateSyntaxProvider()</code> method call.</p><p id="6a22" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This method takes two arguments. The first is called the<code class="cx qb qc qd qe b">predicate</code>, a super lightweight filter that reduces everything in the codebase to only the items we care about. The second is called the<code class="cx qb qc qd qe b">transform</code>, which ingests what we care about from the filter and makes any additional changes, property access, additional filtering, etc., as desired before returning the objects we want to work with later.</p><p id="bf8c" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">An example of using this <code class="cx qb qc qd qe b">syntaxProvider</code> method is as follows.</p><p id="d63c" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The names of the arguments (predicate, transform) do not have to be supplied. I included them to make it easier to understand which is which.</p><p id="583e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><strong class="nx gv">Update</strong>: A previous version of this blog post contained a `.Where()` filter call to remove possible null results. However, in this case, the `ClassDeclarationSyntax` objects are never null, so I have removed that line of code.</p><p id="8bcd" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">It should also be noted that returning Syntax Nodes like this is not great because Roslyn can utilize caching if we give it something like a record type to return instead. It&#x27;s more straightforward to compare previously returned ones to ones it might want to return in the future. For now, we will use the syntax nodes, and in the next part of the series, we will cover some optimizations.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><h2 id="61cb" class="qr my gu bf mz qs qt dy nd qu qv ea nh og qw qx qy ok qz ra rb oo rc rd re rf bk">The Predicate</h2><p id="df66" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">The predicate code’s first argument is a <code class="cx qb qc qd qe b">SyntaxNode</code> , and the second is a <code class="cx qb qc qd qe b">CancellationToken</code>. The token allows any asynchronous tasking performed in this method to be gracefully stopped if needed. In this example, it is unnecessary, so we will focus on the SyntaxNode.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="9191" class="qm my gu qe b bg qn qo l qp qq">(SyntaxNode node, _) =&gt;<br/>{<br/>  return node is ClassDeclarationSyntax classDeclaration &amp;&amp; <br/>  classDeclaration.Identifier.ToString() == “Calculator”;<br/>}</span></pre><p id="5039" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The preceding code can seem daunting initially, as you are quickly bombarded with terms not typically seen by C# developers (e.g., SyntaxNode, ClassDeclerationSyntax, identifier, etc.). If you are anything like me, you are wondering what they mean, what they are used for, and why you need to use them.</p><p id="8c14" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Source generators work alongside / utilize the Roslyn compiler. Roslyn is a set of compilers and code analysis APIs. Roslyn understands your code and projects by breaking down almost everything into <code class="cx qb qc qd qe b">SyntaxNodes</code> and <code class="cx qb qc qd qe b">SyntaxTokens</code>.</p><p id="aebe" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Some examples of <strong class="nx gv"><em class="oy">syntax tokens</em></strong> include access modifiers like <code class="cx qb qc qd qe b">public</code> or <code class="cx qb qc qd qe b">private</code>, modifiers like <code class="cx qb qc qd qe b">static</code>, <code class="cx qb qc qd qe b">abstract</code>, and <code class="cx qb qc qd qe b">partial</code>. Names of items like a class name, namespace, method name, etc.</p><p id="c319" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Tokens also include grammar items in the language, like semicolons, brackets, etc.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div class="oz pa rh"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*Ef7HA7ZRaMzK5WH1 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*Ef7HA7ZRaMzK5WH1 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*Ef7HA7ZRaMzK5WH1 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*Ef7HA7ZRaMzK5WH1 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*Ef7HA7ZRaMzK5WH1 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*Ef7HA7ZRaMzK5WH1 1100w, https://miro.medium.com/v2/resize:fit:1196/format:webp/0*Ef7HA7ZRaMzK5WH1 1196w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 598px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*Ef7HA7ZRaMzK5WH1 640w, https://miro.medium.com/v2/resize:fit:720/0*Ef7HA7ZRaMzK5WH1 720w, https://miro.medium.com/v2/resize:fit:750/0*Ef7HA7ZRaMzK5WH1 750w, https://miro.medium.com/v2/resize:fit:786/0*Ef7HA7ZRaMzK5WH1 786w, https://miro.medium.com/v2/resize:fit:828/0*Ef7HA7ZRaMzK5WH1 828w, https://miro.medium.com/v2/resize:fit:1100/0*Ef7HA7ZRaMzK5WH1 1100w, https://miro.medium.com/v2/resize:fit:1196/0*Ef7HA7ZRaMzK5WH1 1196w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 598px"/><img alt="" class="bh me pi c" width="598" height="121" loading="lazy" role="presentation"/></picture></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">Example of a SyntaxToken Item</figcaption></figure><p id="21d5" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Examples of <strong class="nx gv"><em class="oy">syntax nodes</em></strong> include<code class="cx qb qc qd qe b"> class declarations</code>, <code class="cx qb qc qd qe b">method declarations</code>, <code class="cx qb qc qd qe b">bodies of methods</code>, and <code class="cx qb qc qd qe b">individual lines of code</code>, including assignments, expressions, and using statements.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div class="oz pa ri"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*XRWDhLNHHcpKNaTL 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*XRWDhLNHHcpKNaTL 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*XRWDhLNHHcpKNaTL 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*XRWDhLNHHcpKNaTL 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*XRWDhLNHHcpKNaTL 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*XRWDhLNHHcpKNaTL 1100w, https://miro.medium.com/v2/resize:fit:1340/format:webp/0*XRWDhLNHHcpKNaTL 1340w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 670px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*XRWDhLNHHcpKNaTL 640w, https://miro.medium.com/v2/resize:fit:720/0*XRWDhLNHHcpKNaTL 720w, https://miro.medium.com/v2/resize:fit:750/0*XRWDhLNHHcpKNaTL 750w, https://miro.medium.com/v2/resize:fit:786/0*XRWDhLNHHcpKNaTL 786w, https://miro.medium.com/v2/resize:fit:828/0*XRWDhLNHHcpKNaTL 828w, https://miro.medium.com/v2/resize:fit:1100/0*XRWDhLNHHcpKNaTL 1100w, https://miro.medium.com/v2/resize:fit:1340/0*XRWDhLNHHcpKNaTL 1340w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 670px"/><img alt="" class="bh me pi c" width="670" height="258" loading="lazy" role="presentation"/></picture></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">Example of a Syntax Node in this case a Class Declaration Syntax Node</figcaption></figure><p id="db18" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This programmatic code breakdown is then used to analyze code, write new classes, modify methods, etc. While this can feel daunting, something to remember is that syntax is ultimately still text, and syntax objects can be cast into a string if required. This is precisely what we do in the predicate to convert this <code class="cx qb qc qd qe b">SyntaxToken</code> into a string with the <code class="cx qb qc qd qe b">.ToString()</code> method to compare it to our target name.</p><p id="dfd6" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">There are various syntax nodes and token types, which I plan to break down and provide examples of in later posts in the series.</p><p id="1bb5" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">In summary, the <em class="oy">predicate</em> says if this piece of code represents declaring a class like <code class="cx qb qc qd qe b">public partial class Calculator</code>, then check if its identifier (i.e., class name) is “Calculator,” and if so, pass it to the <em class="oy">transform</em>. This way, when the generator sees a node like <code class="cx qb qc qd qe b">public static void Main()</code>, it knows to skip it.</p><h2 id="a4df" class="qr my gu bf mz qs qt dy nd qu qv ea nh og qw qx qy ok qz ra rb oo rc rd re rf bk">The Transform</h2><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="8d85" class="qm my gu qe b bg qn qo l qp qq">transform: (GeneratorSyntaxContext ctx, _) =&gt;<br/>{<br/>   var classDeclaration = (ClassDeclarationSyntax)ctx.Node;<br/>   return classDeclaration;<br/>}</span></pre><p id="16bf" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The <em class="oy">transform</em> takes in the item that passed the filter and a cancellation token again to help cancel it if needed. The <code class="cx qb qc qd qe b">GeneratorSyntaxContext</code> item is basically the node and some extra metadata. We then cast the context node item to a <code class="cx qb qc qd qe b">ClassDeclarationSyntax</code>. This is required because even though the filter only passed us nodes of that type, the <code class="cx qb qc qd qe b">SyntaxContext</code> does not understand that; however, we can cast it and safely know we are getting what we expect.</p><p id="ba51" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The transform is where we could extract members of the class, bodies of methods, etc.; whatever item we want to work on. In this example, we want to work on a class, so we get the item as a <code class="cx qb qc qd qe b">ClassDeclarationSyntax</code>.</p><p id="234d" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Finally, we add a where statement to filter out any null items that may have made it through. This is optional, but ensuring we aren’t getting some weird invalid item does not hurt.</p><p id="0555" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The <code class="cx qb qc qd qe b">CreateSyntaxProvider</code> returns an <code class="cx qb qc qd qe b">IncrementalValuesProvider&lt;T&gt;</code> where T is whatever item type we are trying to return from the method call.</p><p id="c159" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">An `IncrementalValuesProvider` is a fancy word for the object holding our returned items. There is also an <code class="cx qb qc qd qe b">IncrementalValueProvider&lt;T&gt;</code>, which is similar but is meant to have one object instead.</p><p id="0d91" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">For example, our code’s <code class="cx qb qc qd qe b">ValuesProvider</code> contains class declarations from the <code class="cx qb qc qd qe b">ClassDeclarationSyntax</code> type.</p><p id="d23a" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This then leaves us with an initialization method like this:</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="4c5e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The last central part of using a source generator is telling it what to do with the items we got back. Go ahead and add the <code class="cx qb qc qd qe b">context. RegisterSourceOutput()</code> line to your project. This tells the generator what to do with the returned items. Next, we will go over the content of this Execute method.</p><h2 id="7e39" class="qr my gu bf mz qs qt dy nd qu qv ea nh og qw qx qy ok qz ra rb oo rc rd re rf bk">The Execute Method</h2><p id="8919" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">Alright, so we have our target type; we are filtering out everything we don’t care about, so let’s send it to the execute method and generate our source code.</p><p id="76b1" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The execute method is typically defined as follows:</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="8db8" class="qm my gu qe b bg qn qo l qp qq">public void Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context)<br/>{<br/>  //Code to perform work on the calculator class<br/>}</span></pre><p id="e9b2" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The first argument will vary depending on the work you are trying to perform and the method can be modified to take extra arguments as needed. The <code class="cx qb qc qd qe b">SourceProductionContext</code> object gives us essential information about the project/solution and enables us to add code to the compilation to include it in the final build.</p><p id="95a8" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Since our goal is to generate some simple calculator functions, we will first check all the members of the class we are working on to see if they already have a method with the same name so we don’t accidentally override an existing version. Next, we will gather some metadata, like the namespace, any modifiers, and any using statements, to ensure the code compiles correctly. Lastly, we will insert the code we want into the source file and save it to the compilation.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="a464" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><strong class="nx gv"><em class="oy">Note:</em></strong> This code block tries to get the Namespace via the child nodes of a class, this will <strong class="nx gv"><em class="oy">never work</em></strong> and will always return null. We utilize this to help showcase logging and we fix this in the final working copy at the end.<br/>So, the “final” generator code should look like the following:</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="7bbc" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Alright, all the pieces are in place. Let’s build the solution and check out the generated code.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="oz pa rj"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*cxLUynP4ZgkbQ3q4 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*cxLUynP4ZgkbQ3q4 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*cxLUynP4ZgkbQ3q4 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*cxLUynP4ZgkbQ3q4 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*cxLUynP4ZgkbQ3q4 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*cxLUynP4ZgkbQ3q4 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*cxLUynP4ZgkbQ3q4 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*cxLUynP4ZgkbQ3q4 640w, https://miro.medium.com/v2/resize:fit:720/0*cxLUynP4ZgkbQ3q4 720w, https://miro.medium.com/v2/resize:fit:750/0*cxLUynP4ZgkbQ3q4 750w, https://miro.medium.com/v2/resize:fit:786/0*cxLUynP4ZgkbQ3q4 786w, https://miro.medium.com/v2/resize:fit:828/0*cxLUynP4ZgkbQ3q4 828w, https://miro.medium.com/v2/resize:fit:1100/0*cxLUynP4ZgkbQ3q4 1100w, https://miro.medium.com/v2/resize:fit:1400/0*cxLUynP4ZgkbQ3q4 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh me pi c" width="700" height="131" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">Example Error Messages When Source Generation Fails</figcaption></figure><p id="116b" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Well, that’s not what we hoped for; however, as with many development projects, errors are bound to happen. Don’t panic yet; that is intended to show off some important things when working with source generators. First, source generators will only present a warning when they fail to generate code, so watch for warning messages like this when compiling the code.</p><p id="c9bb" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk"><code class="cx qb qc qd qe b">Warning CS8785 : Generator ‘CalculatorGenerator’ failed to generate source. It will not contribute to the output and compilation errors may occur as a result. Exception was of type ‘NullReferenceException’ with message ‘Object reference not set to an instance of an object.’.</code></p><p id="4249" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Second, source generators execute at<strong class="nx gv"><em class="oy"> compile time</em></strong>, making capturing extra context from the exception challenging as you might typically do with a try-catch where you can print info to the console.</p><p id="d37a" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">If you try something like the following, you will notice no additional information is sent to the console.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="081a" class="qm my gu qe b bg qn qo l qp qq">public void Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context) <br/>{<br/>  Try<br/>  {<br/>     // code from before<br/>  }<br/>  catch(Exception ex)<br/>  {<br/>     Console.WriteLine(ex);<br/>  }<br/>}</span></pre><p id="5659" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">OK, no problem. Instead, Let’s save the message to a file in the catch statement.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="oz pa rk"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*92SZIQO6ZuT0fvQo 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*92SZIQO6ZuT0fvQo 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*92SZIQO6ZuT0fvQo 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*92SZIQO6ZuT0fvQo 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*92SZIQO6ZuT0fvQo 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*92SZIQO6ZuT0fvQo 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*92SZIQO6ZuT0fvQo 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*92SZIQO6ZuT0fvQo 640w, https://miro.medium.com/v2/resize:fit:720/0*92SZIQO6ZuT0fvQo 720w, https://miro.medium.com/v2/resize:fit:750/0*92SZIQO6ZuT0fvQo 750w, https://miro.medium.com/v2/resize:fit:786/0*92SZIQO6ZuT0fvQo 786w, https://miro.medium.com/v2/resize:fit:828/0*92SZIQO6ZuT0fvQo 828w, https://miro.medium.com/v2/resize:fit:1100/0*92SZIQO6ZuT0fvQo 1100w, https://miro.medium.com/v2/resize:fit:1400/0*92SZIQO6ZuT0fvQo 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh me pi c" width="700" height="65" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">File API Blocked in Source Generators</figcaption></figure><p id="c3f2" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">OK, maybe not. If we can’t log to a file in the generator and we can’t log to the console, how will we get the details we need to figure out what is going wrong?</p><h1 id="e0e1" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Logging in Source Generators</h1><p id="6a12" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">This brings us to logging in source generators, which I wanted to include in this first part because it is by far the most accessible means of troubleshooting issues when using source generators.</p><p id="b527" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">To enable logging in the source generator, open the shared library we made at the start. It should have a single class named <code class="cx qb qc qd qe b">class1</code>. Rename that to <code class="cx qb qc qd qe b">GeneratorLogging</code>. While the File API is blocked inside the source generator itself, adding that functionality to a secondary library and having it write the content in a file for you is possible.</p><p id="0e89" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">A simple logging class would be something like the following</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="a9d9" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">There are a few key parts I will quickly explain.</p><ul class=""><li id="a708" class="nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os pt pu pv bk"><code class="cx qb qc qd qe b">The lock object</code> -&gt; This ensures that only one instance of the log message call runs simultaneously. This way, the source generators do not step on each other while trying to access the same file. Even with just one source generator, this can still happen because it checks multiple classes simultaneously.</li><li id="9768" class="nv nw gu nx b ny pw oa ob oc px oe of og py oi oj ok pz om on oo qa oq or os pt pu pv bk"><code class="cx qb qc qd qe b">The log message method</code> -&gt; This method will create the file at the provided path if it does exist. Then, so long as the log level is equal to or higher than the set level, it will log the message to the file. It will also add a small header and footer to messages set higher than info to better showcase errors.</li></ul><h1 id="7199" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Fixing the Example Code</h1><p id="23e8" class="pw-post-body-paragraph nv nw gu nx b ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os gn bk">Using the logging class is very straightforward; if you haven’t already, ensure the shared library is added as a dependency of the generator project so it can access it. So, let’s add some logging calls to our current code and see what the log shows.</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="558e" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">If needed, perform <code class="cx qb qc qd qe b">dotnet clean</code> to clean up any previous logs or generated files. Then, build the solution and check the log file.</p><p id="b740" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">The log will then contain output like the following:</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="337f" class="qm my gu qe b bg qn qo l qp qq">[+] Generated Log File<br/>[+] This file contains log messages from the source generator<br/>Logging started at 2024–09–14 19:42:12.287<br/>[+] Found 2 members in the Calculator class<br/>[+] Checked if methods exist in Calculator class<br/>[+] Added using statements to generated class<br/><br/>[Error start]<br/>[-] Exception occurred in generator: System.NullReferenceException: Object reference not set to an instance of an object.<br/> at SourceGenerator.CalculatorGenerator.Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context)<br/>[Error end]</span></pre><p id="0242" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">From this log output, we can see the generator is running into this Null Reference Exception right after the using statement code, so let’s take a more in-depth look at that.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="1e7a" class="qm my gu qe b bg qn qo l qp qq">GeneratorLogging.LogMessage(“[+] Added using statements to generated class”);<br/>calcGeneratedClassBuilder.AppendLine();<br/><br/>SyntaxNode calcClassNamespace = calculatorClass.Parent;<br/><br/>while (calcClassNamespace is not NamespaceDeclarationSyntax)<br/>{<br/>  calcClassNamespace = calcClassNamespace.Parent;<br/>}<br/>GeneratorLogging.LogMessage($&quot;[+] Found namespace for Calculator class {calcClassNamespace?.Name}&quot;, LoggingLevel.Info);</span></pre><p id="5782" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Here, we see the <code class="cx qb qc qd qe b">calcClassNamespace</code> enumerates through the parents of the class object until it finds something. However, we did not add any null checks to ensure we had a namespace before continuing. Let’s modify this section of code to handle the nulls and perform a check against the nodes ancestors as well.</p><pre class="pc pd pe pf pg qj qe qk bp ql bb bk"><span id="a0a1" class="qm my gu qe b bg qn qo l qp qq">GeneratorLogging.LogMessage(“[+] Added using statements to generated class”);<br/> <br/> calcGeneratedClassBuilder.AppendLine();<br/> <br/> BaseNamespaceDeclarationSyntax? calcClassNamespace = calculatorClass.DescendantNodes().OfType&lt;NamespaceDeclarationSyntax&gt;().FirstOrDefault() ?? <br/> (BaseNamespaceDeclarationSyntax?)calculatorClass.DescendantNodes().OfType&lt;FileScopedNamespaceDeclarationSyntax&gt;().FirstOrDefault();<br/> <br/> calcClassNamespace ??= calculatorClass.Ancestors().OfType&lt;NamespaceDeclarationSyntax&gt;().FirstOrDefault();<br/> calcClassNamespace ??= calculatorClass.Ancestors().OfType&lt;FileScopedNamespaceDeclarationSyntax&gt;().FirstOrDefault();<br/> <br/> if(calcClassNamespace is null)<br/> {<br/> GeneratorLogging.LogMessage(“[-] Could not find namespace for Calculator class”, LoggingLevel.Error);<br/> }<br/> GeneratorLogging.LogMessage($”[+] Found namespace for Calculator class {calcClassNamespace?.Name}”);</span></pre><p id="38ab" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This updated version will now search through all of the ancestor nodes to see if the previous checks were null and update them as needed. We should get a log entry to keep troubleshooting issues if they are still null.</p><p id="80bf" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">This then gives us a final working source generator of:</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="7b26" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">We can test this by modifying the <code class="cx qb qc qd qe b">WebApi project</code> we created at the start.</p><p id="87a3" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">Open the WebApi <em class="oy">program.cs </em>file and modify it to look like this:</p><figure class="pc pd pe pf pg ph"><div class="qg jf l fj"><div class="qh qi l"></div></div></figure><p id="73e4" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">When we run this project and send a get request to the <code class="cx qb qc qd qe b">/</code> URL, we will get back a message with the results from the source-generated methods.</p><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="oz pa rl"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*gHdWBUNPFvEQozxa 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*gHdWBUNPFvEQozxa 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*gHdWBUNPFvEQozxa 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*gHdWBUNPFvEQozxa 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*gHdWBUNPFvEQozxa 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*gHdWBUNPFvEQozxa 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*gHdWBUNPFvEQozxa 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*gHdWBUNPFvEQozxa 640w, https://miro.medium.com/v2/resize:fit:720/0*gHdWBUNPFvEQozxa 720w, https://miro.medium.com/v2/resize:fit:750/0*gHdWBUNPFvEQozxa 750w, https://miro.medium.com/v2/resize:fit:786/0*gHdWBUNPFvEQozxa 786w, https://miro.medium.com/v2/resize:fit:828/0*gHdWBUNPFvEQozxa 828w, https://miro.medium.com/v2/resize:fit:1100/0*gHdWBUNPFvEQozxa 1100w, https://miro.medium.com/v2/resize:fit:1400/0*gHdWBUNPFvEQozxa 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh me pi c" width="700" height="352" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pp ff pq oz pa pr ps bf b bg z du">API Call Showing the Generated Code Compiled and Executed Correctly</figcaption></figure><h1 id="a8e8" class="mx my gu bf mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu bk">Conclusion for Part 1</h1><figure class="pc pd pe pf pg ph oz pa paragraph-image"><div class="oz pa rm"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/0*XR5ezYD0b29SEbwi 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*XR5ezYD0b29SEbwi 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*XR5ezYD0b29SEbwi 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*XR5ezYD0b29SEbwi 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*XR5ezYD0b29SEbwi 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*XR5ezYD0b29SEbwi 1100w, https://miro.medium.com/v2/resize:fit:514/format:webp/0*XR5ezYD0b29SEbwi 514w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 257px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/0*XR5ezYD0b29SEbwi 640w, https://miro.medium.com/v2/resize:fit:720/0*XR5ezYD0b29SEbwi 720w, https://miro.medium.com/v2/resize:fit:750/0*XR5ezYD0b29SEbwi 750w, https://miro.medium.com/v2/resize:fit:786/0*XR5ezYD0b29SEbwi 786w, https://miro.medium.com/v2/resize:fit:828/0*XR5ezYD0b29SEbwi 828w, https://miro.medium.com/v2/resize:fit:1100/0*XR5ezYD0b29SEbwi 1100w, https://miro.medium.com/v2/resize:fit:514/0*XR5ezYD0b29SEbwi 514w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 257px"/><img alt="" class="bh me pi c" width="257" height="196" loading="lazy" role="presentation"/></picture></div></figure><p id="595f" class="pw-post-body-paragraph nv nw gu nx b ny ot oa ob oc ou oe of og ov oi oj ok ow om on oo ox oq or os gn bk">I would like to cover many other capabilities of source generators in future parts that help showcase the real power behind them. So, if you enjoyed this first installment, stick around for more in-depth looks at C# source generators.</p></div></div></div></div></section></div></div></article></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="rn ro ab ja"><div class="rp ab"><a class="rq ay am ao" href="https://medium.com/tag/c-sharp-programming?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><div class="rr fj cx rs ge rt ru bf b bg z bk rv">C Sharp Programming</div></a></div><div class="rp ab"><a class="rq ay am ao" href="https://medium.com/tag/programming?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><div class="rr fj cx rs ge rt ru bf b bg z bk rv">Programming</div></a></div><div class="rp ab"><a class="rq ay am ao" href="https://medium.com/tag/dotnet?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><div class="rr fj cx rs ge rt ru bf b bg z bk rv">Dotnet</div></a></div><div class="rp ab"><a class="rq ay am ao" href="https://medium.com/tag/dotnet-core?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><div class="rr fj cx rs ge rt ru bf b bg z bk rv">Dotnet Core</div></a></div><div class="rp ab"><a class="rq ay am ao" href="https://medium.com/tag/cybersecurity?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><div class="rr fj cx rs ge rt ru bf b bg z bk rv">Cybersecurity</div></a></div></div></div></div><div class="l"></div><footer class="rw rx ry rz sa ab q sb ik c"><div class="l ae"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="ab cp sc"><div class="ab q kv"><div class="sd l"><span class="l se sf sg e d"><div class="ab q kv kw"><div class="pw-multi-vote-icon fj je kx ky kz"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fspecter-ops-posts%2F76d619b633f5&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=---footer_actions--76d619b633f5---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="la ao lb lc ld le am lf lg lh kz"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l li lj lk ll lm ln lo"><p class="bf b dv z du"><span class="lp">--</span></p></div></div></span><span class="l h g f sh si"><div class="ab q kv kw"><div class="pw-multi-vote-icon fj je kx ky kz"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fspecter-ops-posts%2F76d619b633f5&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=---footer_actions--76d619b633f5---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="la ao lb lc ld le am lf lg lh kz"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l li lj lk ll lm ln lo"><p class="bf b dv z du"><span class="lp">--</span></p></div></div></span></div><div class="bq ab"><div><div class="bm" aria-hidden="false"><button class="ao la ls lt ab q fk lu lv" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="lr"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg><p class="bf b bg z du"><span class="pw-responses-count lq lr">2</span></p></button></div></div></div></div><div class="ab q"><div class="sj l ix"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F76d619b633f5&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;source=---footer_actions--76d619b633f5---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lx" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="sj l ix"><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="footerSocialShareButton" class="af fk ah ai aj ak al mf an ao ap ex mg mh lv mi"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg></button></div></div></div></div></div></div></div></div></div></footer><div class="sk sl sm sn so l"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="sp bh r sq"></div><div class="sr l"><div class="ab ss st su iz iy"><div class="sv sw sx sy sz ta tb tc td te ab cp"><div class="h k"><a href="https://posts.specterops.io/?source=post_page---post_publication_info--76d619b633f5--------------------------------" rel="noopener follow"><div class="fj ab"><img alt="Posts By SpecterOps Team Members" class="tf ib ic cx" src="https://miro.medium.com/v2/resize:fill:96:96/1*D-FDlfkqivRBQZoESrwtqw.png" width="48" height="48" loading="lazy"/><div class="tf l ic ib fs n fr tg"></div></div></a></div><div class="j i d"><a href="https://posts.specterops.io/?source=post_page---post_publication_info--76d619b633f5--------------------------------" rel="noopener follow"><div class="fj ab"><img alt="Posts By SpecterOps Team Members" class="tf ti th cx" src="https://miro.medium.com/v2/resize:fill:128:128/1*D-FDlfkqivRBQZoESrwtqw.png" width="64" height="64" loading="lazy"/><div class="tf l th ti fs n fr tg"></div></div></a></div><div class="j i d tj ix"><div class="ab"><span><a class="bf b bg z tk rr tl tm tn to tp ev ew tq tr ts fa fb fc fd bm fe ff" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Fspecter-ops-posts&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;collection=Posts+By+SpecterOps+Team+Members&amp;collectionId=f05f8696e3cc&amp;source=post_page---post_publication_info--76d619b633f5---------------------follow_profile-----------" rel="noopener follow">Follow</a></span></div></div></div><div class="ab co tt"><div class="tu tv tw tx ty l"><a class="af ag ah aj ak al am an ao ap aq ar as at ab q" href="https://posts.specterops.io/?source=post_page---post_publication_info--76d619b633f5--------------------------------" rel="noopener follow"><h2 class="pw-author-name bf ua ub uc ud ue uf ug og qx qy ok ra rb oo rd re bk"><span class="gn tz">Published in <!-- -->Posts By SpecterOps Team Members</span></h2></a><div class="rp ab ia"><div class="l ix"><span class="pw-follower-count bf b bg z du"><a class="af ag ah ai aj ak al am an ao ap aq ar iq" rel="noopener follow" href="/followers?source=post_page---post_publication_info--76d619b633f5--------------------------------">4.8K Followers</a></span></div><div class="bf b bg z du ab jd"><span class="ir l" aria-hidden="true"><span class="bf b bg z du">·</span></span><a class="af ag ah ai aj ak al am an ao ap aq ar iq" rel="noopener follow" href="/adfs-entra-lab-with-ludus-9bffbc51673f?source=post_page---post_publication_info--76d619b633f5--------------------------------">Last published <span>Dec 19, 2024</span></a></div></div><div class="uh l"><p class="bf b bg z bk"><span class="gn">Posts from SpecterOps team members on various topics relating information security</span></p></div></div></div><div class="h k"><div class="ab"><span><a class="bf b bg z tk rr tl tm tn to tp ev ew tq tr ts fa fb fc fd bm fe ff" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Fspecter-ops-posts&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;collection=Posts+By+SpecterOps+Team+Members&amp;collectionId=f05f8696e3cc&amp;source=post_page---post_publication_info--76d619b633f5---------------------follow_profile-----------" rel="noopener follow">Follow</a></span></div></div></div></div><div class="ab ss st su iz iy"><div class="sv sw sx sy sz ta tb tc td te ab cp"><div class="h k"><a tabindex="0" href="https://dragoqcc.medium.com/?source=post_page---post_author_info--76d619b633f5--------------------------------" rel="noopener follow"><div class="l fj"><img alt="Jonathan Owens" class="l fd by ic ib cx" src="https://miro.medium.com/v2/resize:fill:96:96/1*NcRudyjrwDx6UPl-YDD_6Q.png" width="48" height="48" loading="lazy"/><div class="fr by l ic ib fs n ay tg"></div></div></a></div><div class="j i d"><a tabindex="0" href="https://dragoqcc.medium.com/?source=post_page---post_author_info--76d619b633f5--------------------------------" rel="noopener follow"><div class="l fj"><img alt="Jonathan Owens" class="l fd by th ti cx" src="https://miro.medium.com/v2/resize:fill:128:128/1*NcRudyjrwDx6UPl-YDD_6Q.png" width="64" height="64" loading="lazy"/><div class="fr by l th ti fs n ay tg"></div></div></a></div><div class="j i d tj ix"><div class="ab"><span><a class="bf b bg z tk rr tl tm tn to tp ev ew tq tr ts fa fb fc fd bm fe ff" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa07d497fb5bc&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=post_page-a07d497fb5bc--post_author_info--76d619b633f5---------------------follow_profile-----------" rel="noopener follow">Follow</a></span></div></div></div><div class="ab co tt"><div class="tu tv tw tx ty l"><a class="af ag ah aj ak al am an ao ap aq ar as at ab q" href="https://dragoqcc.medium.com/?source=post_page---post_author_info--76d619b633f5--------------------------------" rel="noopener follow"><h2 class="pw-author-name bf ua ub uc ud ue uf ug og qx qy ok ra rb oo rd re bk"><span class="gn tz">Written by <!-- -->Jonathan Owens</span></h2></a><div class="rp ab ia"><div class="l ix"><span class="pw-follower-count bf b bg z du"><a class="af ag ah ai aj ak al am an ao ap aq ar iq" href="https://dragoqcc.medium.com/followers?source=post_page---post_author_info--76d619b633f5--------------------------------" rel="noopener follow">4 Followers</a></span></div><div class="bf b bg z du ab jd"><span class="ir l" aria-hidden="true"><span class="bf b bg z du">·</span></span><a class="af ag ah ai aj ak al am an ao ap aq ar iq" href="https://medium.com/@dragoqcc/following?source=post_page---post_author_info--76d619b633f5--------------------------------" rel="noopener follow">3 Following</a></div></div><div class="uh l"><p class="bf b bg z bk"><span class="gn">Consultant at SpecterOps</span></p></div></div></div><div class="h k"><div class="ab"><span><a class="bf b bg z tk rr tl tm tn to tp ev ew tq tr ts fa fb fc fd bm fe ff" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa07d497fb5bc&amp;operation=register&amp;redirect=https%3A%2F%2Fposts.specterops.io%2Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5&amp;user=Jonathan+Owens&amp;userId=a07d497fb5bc&amp;source=post_page-a07d497fb5bc--post_author_info--76d619b633f5---------------------follow_profile-----------" rel="noopener follow">Follow</a></span></div></div></div></div></div></div><div class="ui uj uk ul um l"><div class="sp bh r ui uj un uo up"></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="ab q cp"><h2 class="bf ua na nc nd ne ng nh ni nk nl nm no np nq ns nt bk">Responses (<!-- -->2<!-- -->)</h2><div class="ab uq"><div><div class="bm" aria-hidden="false"><a class="ur us" href="https://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page---post_responses--76d619b633f5--------------------------------" rel="noopener follow" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><path fill-rule="evenodd" d="M11.987 5.036a.754.754 0 0 1 .914-.01c.972.721 1.767 1.218 2.6 1.543.828.322 1.719.485 2.887.505a.755.755 0 0 1 .741.757c-.018 3.623-.43 6.256-1.449 8.21-1.034 1.984-2.662 3.209-4.966 4.083a.75.75 0 0 1-.537-.003c-2.243-.874-3.858-2.095-4.897-4.074-1.024-1.951-1.457-4.583-1.476-8.216a.755.755 0 0 1 .741-.757c1.195-.02 2.1-.182 2.923-.503.827-.322 1.6-.815 2.519-1.535m.468.903c-.897.69-1.717 1.21-2.623 1.564-.898.35-1.856.527-3.026.565.037 3.45.469 5.817 1.36 7.515.884 1.684 2.25 2.762 4.284 3.571 2.092-.81 3.465-1.89 4.344-3.575.886-1.698 1.299-4.065 1.334-7.512-1.149-.039-2.091-.217-2.99-.567-.906-.353-1.745-.873-2.683-1.561m-.009 9.155a2.672 2.672 0 1 0 0-5.344 2.672 2.672 0 0 0 0 5.344m0 1a3.672 3.672 0 1 0 0-7.344 3.672 3.672 0 0 0 0 7.344m-1.813-3.777.525-.526.916.917 1.623-1.625.526.526-2.149 2.152z" clip-rule="evenodd"></path></svg></a></div></div></div></div><div class="ut uu uv uw ux uy uz l"></div><div class="va l"><button class="bf b bg z bk rr vb vc vd lx lu tp ev ew ex ve vf vg fa vh vi vj vk vl fb fc fd bm fe ff">See all responses</button></div></div></div></div><div class="vm vn vo vp vq l bx"><div class="h k j"><div class="sp bh vr vs"></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="vt ab kv ja"><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://help.medium.com/hc/en-us?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Help</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.statuspage.io/?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Status</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/about?autoplay=1&amp;source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">About</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Careers</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="pressinquiries@medium.com?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Press</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://blog.medium.com/?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Blog</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Privacy</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Terms</p></a></div><div class="vu vv l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://speechify.com/medium?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Text to speech</p></a></div><div class="vu l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/business?source=post_page-----76d619b633f5--------------------------------" rel="noopener follow"><p class="bf b dv z du">Teams</p></a></div></div></div></div></div></div></div></div></div></div><script>window.__BUILD_ID__="main-20241218-235912-1e3024e5b3"</script><script>window.__GRAPHQL_URI__ = "https://posts.specterops.io/_/graphql"</script><script>window.__PRELOADED_STATE__ = {"algolia":{"queries":{}},"cache":{"experimentGroupSet":true,"reason":"This request is not using the cache middleware worker","group":"disabled","tags":["group-edgeCachePosts","post-76d619b633f5","user-a07d497fb5bc","collection-f05f8696e3cc"],"serverVariantState":"","middlewareEnabled":false,"cacheStatus":"DYNAMIC","shouldUseCache":false,"vary":[],"lohpSummerUpsellEnabled":false},"client":{"hydrated":false,"isUs":false,"isNativeMedium":false,"isSafariMobile":false,"isSafari":false,"isFirefox":false,"routingEntity":{"type":"COLLECTION","id":"f05f8696e3cc","explicit":true},"viewerIsBot":false},"debug":{"requestId":"6805dbb0-2da1-4f2b-8b68-509e7a111e03","hybridDevServices":[],"originalSpanCarrier":{"traceparent":"00-0c51026b80a6751683ee52159af14a99-3594ddb9ce28022d-01"}},"multiVote":{"clapsPerPost":{}},"navigation":{"branch":{"show":null,"hasRendered":null,"blockedByCTA":false},"hideGoogleOneTap":false,"hasRenderedAlternateUserBanner":null,"currentLocation":"https:\u002F\u002Fposts.specterops.io\u002Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5","host":"posts.specterops.io","hostname":"posts.specterops.io","referrer":"","hasSetReferrer":false,"susiModal":{"step":null,"operation":"register"},"postRead":false,"partnerProgram":{"selectedCountryCode":null},"queryString":"?source=rss----f05f8696e3cc---4"},"config":{"nodeEnv":"production","version":"main-20241218-235912-1e3024e5b3","target":"production","productName":"Medium","publicUrl":"https:\u002F\u002Fcdn-client.medium.com\u002Flite","authDomain":"medium.com","authGoogleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","favicon":"production","glyphUrl":"https:\u002F\u002Fglyph.medium.com","branchKey":"key_live_ofxXr2qTrrU9NqURK8ZwEhknBxiI6KBm","algolia":{"appId":"MQ57UUUQZ2","apiKeySearch":"394474ced050e3911ae2249ecc774921","indexPrefix":"medium_","host":"-dsn.algolia.net"},"recaptchaKey":"6Lfc37IUAAAAAKGGtC6rLS13R1Hrw_BqADfS1LRk","recaptcha3Key":"6Lf8R9wUAAAAABMI_85Wb8melS7Zj6ziuf99Yot5","recaptchaEnterpriseKeyId":"6Le-uGgpAAAAAPprRaokM8AKthQ9KNGdoxaGUvVp","datadog":{"applicationId":"6702d87d-a7e0-42fe-bbcb-95b469547ea0","clientToken":"pub853ea8d17ad6821d9f8f11861d23dfed","rumToken":"pubf9cc52896502b9413b68ba36fc0c7162","context":{"deployment":{"target":"production","tag":"main-20241218-235912-1e3024e5b3","commit":"1e3024e5b30a200d8e607e363a93175b656225c2"}},"datacenter":"us"},"googleAnalyticsCode":"G-7JY7T788PK","googlePay":{"apiVersion":"2","apiVersionMinor":"0","merchantId":"BCR2DN6TV7EMTGBM","merchantName":"Medium","instanceMerchantId":"13685562959212738550"},"applePay":{"version":3},"signInWallCustomDomainCollectionIds":["3a8144eabfe3","336d898217ee","61061eb0c96b","138adf9c44c","819cc2aaeee0"],"mediumMastodonDomainName":"me.dm","mediumOwnedAndOperatedCollectionIds":["8a9336e5bb4","b7e45b22fec3","193b68bd4fba","8d6b8a439e32","54c98c43354d","3f6ecf56618","d944778ce714","92d2092dc598","ae2a65f35510","1285ba81cada","544c7006046e","fc8964313712","40187e704f1c","88d9857e584e","7b6769f2748b","bcc38c8f6edf","cef6983b292","cb8577c9149e","444d13b52878","713d7dbc99b0","ef8e90590e66","191186aaafa0","55760f21cdc5","9dc80918cc93","bdc4052bbdba","8ccfed20cbb2"],"tierOneDomains":["medium.com","thebolditalic.com","arcdigital.media","towardsdatascience.com","uxdesign.cc","codeburst.io","psiloveyou.xyz","writingcooperative.com","entrepreneurshandbook.co","prototypr.io","betterhumans.coach.me","theascent.pub"],"topicsToFollow":["d61cf867d93f","8a146bc21b28","1eca0103fff3","4d562ee63426","aef1078a3ef5","e15e46793f8d","6158eb913466","55f1c20aba7a","3d18b94f6858","4861fee224fd","63c6f1f93ee","1d98b3a9a871","decb52b64abf","ae5d4995e225","830cded25262"],"topicToTagMappings":{"accessibility":"accessibility","addiction":"addiction","android-development":"android-development","art":"art","artificial-intelligence":"artificial-intelligence","astrology":"astrology","basic-income":"basic-income","beauty":"beauty","biotech":"biotech","blockchain":"blockchain","books":"books","business":"business","cannabis":"cannabis","cities":"cities","climate-change":"climate-change","comics":"comics","coronavirus":"coronavirus","creativity":"creativity","cryptocurrency":"cryptocurrency","culture":"culture","cybersecurity":"cybersecurity","data-science":"data-science","design":"design","digital-life":"digital-life","disability":"disability","economy":"economy","education":"education","equality":"equality","family":"family","feminism":"feminism","fiction":"fiction","film":"film","fitness":"fitness","food":"food","freelancing":"freelancing","future":"future","gadgets":"gadgets","gaming":"gaming","gun-control":"gun-control","health":"health","history":"history","humor":"humor","immigration":"immigration","ios-development":"ios-development","javascript":"javascript","justice":"justice","language":"language","leadership":"leadership","lgbtqia":"lgbtqia","lifestyle":"lifestyle","machine-learning":"machine-learning","makers":"makers","marketing":"marketing","math":"math","media":"media","mental-health":"mental-health","mindfulness":"mindfulness","money":"money","music":"music","neuroscience":"neuroscience","nonfiction":"nonfiction","outdoors":"outdoors","parenting":"parenting","pets":"pets","philosophy":"philosophy","photography":"photography","podcasts":"podcast","poetry":"poetry","politics":"politics","privacy":"privacy","product-management":"product-management","productivity":"productivity","programming":"programming","psychedelics":"psychedelics","psychology":"psychology","race":"race","relationships":"relationships","religion":"religion","remote-work":"remote-work","san-francisco":"san-francisco","science":"science","self":"self","self-driving-cars":"self-driving-cars","sexuality":"sexuality","social-media":"social-media","society":"society","software-engineering":"software-engineering","space":"space","spirituality":"spirituality","sports":"sports","startups":"startup","style":"style","technology":"technology","transportation":"transportation","travel":"travel","true-crime":"true-crime","tv":"tv","ux":"ux","venture-capital":"venture-capital","visual-design":"visual-design","work":"work","world":"world","writing":"writing"},"defaultImages":{"avatar":{"imageId":"1*dmbNkD5D-u45r44go_cf0g.png","height":150,"width":150},"orgLogo":{"imageId":"7*V1_7XP4snlmqrc_0Njontw.png","height":110,"width":500},"postLogo":{"imageId":"bd978bb536350a710e8efb012513429cabdc4c28700604261aeda246d0f980b7","height":810,"width":1440},"postPreviewImage":{"imageId":"1*hn4v1tCaJy7cWMyb0bpNpQ.png","height":386,"width":579}},"collectionStructuredData":{"8d6b8a439e32":{"name":"Elemental","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F980\u002F1*9ygdqoKprhwuTVKUM0DLPA@2x.png","width":980,"height":159}}},"3f6ecf56618":{"name":"Forge","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F596\u002F1*uULpIlImcO5TDuBZ6lm7Lg@2x.png","width":596,"height":183}}},"ae2a65f35510":{"name":"GEN","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F264\u002F1*RdVZMdvfV3YiZTw6mX7yWA.png","width":264,"height":140}}},"88d9857e584e":{"name":"LEVEL","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*JqYMhNX6KNNb2UlqGqO2WQ.png","width":540,"height":108}}},"7b6769f2748b":{"name":"Marker","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F383\u002F1*haCUs0wF6TgOOvfoY-jEoQ@2x.png","width":383,"height":92}}},"444d13b52878":{"name":"OneZero","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*cw32fIqCbRWzwJaoQw6BUg.png","width":540,"height":123}}},"8ccfed20cbb2":{"name":"Zora","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*tZUQqRcCCZDXjjiZ4bDvgQ.png","width":540,"height":106}}}},"embeddedPostIds":{"coronavirus":"cd3010f9d81f"},"sharedCdcMessaging":{"COVID_APPLICABLE_TAG_SLUGS":[],"COVID_APPLICABLE_TOPIC_NAMES":[],"COVID_APPLICABLE_TOPIC_NAMES_FOR_TOPIC_PAGE":[],"COVID_MESSAGES":{"tierA":{"text":"For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":66,"end":73,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"tierB":{"text":"Anyone can publish on Medium per our Policies, but we don’t fact-check every story. For more info about the coronavirus, see cdc.gov.","markups":[{"start":37,"end":45,"href":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Fcategories\u002F201931128-Policies-Safety"},{"start":125,"end":132,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"paywall":{"text":"This article has been made free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":56,"end":70,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":138,"end":145,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"unbound":{"text":"This article is free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":45,"end":59,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":127,"end":134,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]}},"COVID_BANNER_POST_ID_OVERRIDE_WHITELIST":["3b31a67bff4a"]},"sharedVoteMessaging":{"TAGS":["politics","election-2020","government","us-politics","election","2020-presidential-race","trump","donald-trump","democrats","republicans","congress","republican-party","democratic-party","biden","joe-biden","maga"],"TOPICS":["politics","election"],"MESSAGE":{"text":"Find out more about the U.S. election results here.","markups":[{"start":46,"end":50,"href":"https:\u002F\u002Fcookpolitical.com\u002F2020-national-popular-vote-tracker"}]},"EXCLUDE_POSTS":["397ef29e3ca5"]},"embedPostRules":[],"recircOptions":{"v1":{"limit":3},"v2":{"limit":8}},"braintreeClientKey":"production_zjkj96jm_m56f8fqpf7ngnrd4","braintree":{"enabled":true,"merchantId":"m56f8fqpf7ngnrd4","merchantAccountId":{"usd":"AMediumCorporation_instant","eur":"amediumcorporation_EUR","cad":"amediumcorporation_CAD"},"publicKey":"ds2nn34bg2z7j5gd","braintreeEnvironment":"production","dashboardUrl":"https:\u002F\u002Fwww.braintreegateway.com\u002Fmerchants","gracePeriodDurationInDays":14,"mediumMembershipPlanId":{"monthly":"ce105f8c57a3","monthlyV2":"e8a5e126-792b-4ee6-8fba-d574c1b02fc5","monthlyWithTrial":"d5ee3dbe3db8","monthlyPremium":"fa741a9b47a2","yearly":"a40ad4a43185","yearlyV2":"3815d7d6-b8ca-4224-9b8c-182f9047866e","yearlyStaff":"d74fb811198a","yearlyWithTrial":"b3bc7350e5c7","yearlyPremium":"e21bd2c12166","monthlyOneYearFree":"e6c0637a-2bad-4171-ab4f-3c268633d83c","monthly25PercentOffFirstYear":"235ecc62-0cdb-49ae-9378-726cd21c504b","monthly20PercentOffFirstYear":"ba518864-9c13-4a99-91ca-411bf0cac756","monthly15PercentOffFirstYear":"594c029b-9f89-43d5-88f8-8173af4e070e","monthly10PercentOffFirstYear":"c6c7bc9a-40f2-4b51-8126-e28511d5bdb0","monthlyForStudents":"629ebe51-da7d-41fd-8293-34cd2f2030a8","yearlyOneYearFree":"78ba7be9-0d9f-4ece-aa3e-b54b826f2bf1","yearly25PercentOffFirstYear":"2dbb010d-bb8f-4eeb-ad5c-a08509f42d34","yearly20PercentOffFirstYear":"47565488-435b-47f8-bf93-40d5fbe0ebc8","yearly15PercentOffFirstYear":"8259809b-0881-47d9-acf7-6c001c7f720f","yearly10PercentOffFirstYear":"9dd694fb-96e1-472c-8d9e-3c868d5c1506","yearlyForStudents":"e29345ef-ab1c-4234-95c5-70e50fe6bc23","monthlyCad":"p52orjkaceei","yearlyCad":"h4q9g2up9ktt"},"braintreeDiscountId":{"oneMonthFree":"MONTHS_FREE_01","threeMonthsFree":"MONTHS_FREE_03","sixMonthsFree":"MONTHS_FREE_06","fiftyPercentOffOneYear":"FIFTY_PERCENT_OFF_ONE_YEAR"},"3DSecureVersion":"2","defaultCurrency":"usd","providerPlanIdCurrency":{"4ycw":"usd","rz3b":"usd","3kqm":"usd","jzw6":"usd","c2q2":"usd","nnsw":"usd","q8qw":"usd","d9y6":"usd","fx7w":"cad","nwf2":"cad"}},"paypalClientId":"AXj1G4fotC2GE8KzWX9mSxCH1wmPE3nJglf4Z2ig_amnhvlMVX87otaq58niAg9iuLktVNF_1WCMnN7v","paypal":{"host":"https:\u002F\u002Fapi.paypal.com:443","clientMode":"production","serverMode":"live","webhookId":"4G466076A0294510S","monthlyPlan":{"planId":"P-9WR0658853113943TMU5FDQA","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlan":{"planId":"P-7N8963881P8875835MU5JOPQ","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oneYearGift":{"name":"Medium Membership (1 Year, Digital Gift Code)","description":"Unlimited access to the best and brightest stories on Medium. Gift codes can be redeemed at medium.com\u002Fredeem.","price":"50.00","currency":"USD","sku":"membership-gift-1-yr"},"oldMonthlyPlan":{"planId":"P-96U02458LM656772MJZUVH2Y","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlan":{"planId":"P-59P80963JF186412JJZU3SMI","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"monthlyPlanWithTrial":{"planId":"P-66C21969LR178604GJPVKUKY","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlanWithTrial":{"planId":"P-6XW32684EX226940VKCT2MFA","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oldMonthlyPlanNoSetupFee":{"planId":"P-4N046520HR188054PCJC7LJI","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlanNoSetupFee":{"planId":"P-7A4913502Y5181304CJEJMXQ","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"sdkUrl":"https:\u002F\u002Fwww.paypal.com\u002Fsdk\u002Fjs"},"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","log":{"json":true,"level":"info"},"imageUploadMaxSizeMb":25,"staffPicks":{"title":"Staff Picks","catalogId":"c7bc6e1ee00f"}},"session":{"xsrf":""}}</script><script>window.__APOLLO_STATE__ = {"ROOT_QUERY":{"__typename":"Query","viewer":null,"variantFlags":[{"__typename":"VariantFlag","name":"enable_ios_dynamic_paywall_aspiriational","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_marketing_emails","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_pub_featuring","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_two_hour_refresh","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_android_dynamic_aspirational_paywall","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_trust_service_recaptcha","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_update_topic_portals_wtf","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ios_dynamic_paywall_programming","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"allow_signup","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_lists_v2","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_explicit_signals_updated_post_previews","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_in_app_free_trial","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_friend_links_creation","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"can_receive_tips_v0","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_apple_sign_in","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_import","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_enable_home_post_menu","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_client","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_creator_welcome_email","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_mastodon_avatar_upload","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_members_only_audio","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_tag_recs","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"can_send_tips_v0","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_auto_follow_on_subscribe","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_see_pronouns","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_simplified_digest_v2_b","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_updated_pub_recs_ui","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_iceland_nux","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"price_smoke_test_yearly","valueType":{"__typename":"VariantFlagString","value":""}},{"__typename":"VariantFlag","name":"enable_android_verified_author","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_legacy_feed_in_iceland","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lite_homepage","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_maim_the_meter","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_sprig","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"available_monthly_plan","valueType":{"__typename":"VariantFlagString","value":"60e220181034"}},{"__typename":"VariantFlag","name":"enable_verifications_service","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_recommended_publishers_query","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"coronavirus_topic_recirc","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_integration","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_cache_less_following_feed","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_enable_friend_links_creation","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_topic_portals","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_susi_redesign_android","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_tipping_v0_ios","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_diversification_rex","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"skip_fs_cache_user_vals","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_sharer_create_post_share_key","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_app_flirty_thirty","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_apple_pay","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_rito_upstream_deadlines","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_rex_new_push_notification_endpoint","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_social_share_sheet","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_eventstats_event_processing","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_mastodon_for_members_username_selection","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_pill_based_home_feed","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_winback_promotion_email","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_configure_pronouns","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"onboarding_tags_from_top_views","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_starspace","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"glyph_font_set","valueType":{"__typename":"VariantFlagString","value":"m2-unbound-source-serif-pro"}},{"__typename":"VariantFlag","name":"enable_explicit_signals","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lite_continue_this_thread","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_rex_aggregator_v2","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_deprecate_legacy_providers_v3","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_entities_to_follow_v2","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_susi_redesign_ios","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_recirc_model","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_webhook","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_branch_io","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_friend_links_postpage_banners","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_new_stripe_customers","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_enable_verified_book_author","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"available_annual_plan","valueType":{"__typename":"VariantFlagString","value":"2c754bcc2995"}},{"__typename":"VariantFlag","name":"browsable_stream_config_bucket","valueType":{"__typename":"VariantFlagString","value":"curated-topics"}},{"__typename":"VariantFlag","name":"enable_footer_app_buttons","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_post_bottom_responses","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"num_post_bottom_responses_to_show","valueType":{"__typename":"VariantFlagNumber","value":3}},{"__typename":"VariantFlag","name":"enable_conversion_ranker_v2","valueType":{"__typename":"VariantFlagString","value":"control"}},{"__typename":"VariantFlag","name":"enable_publication_hierarchy_web","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_automod","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_trial_membership","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_tick_landing_page","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_post_bottom_responses_native","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_android_offline_reading","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_premium_tier","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"available_annual_premium_plan","valueType":{"__typename":"VariantFlagString","value":"4a442ace1476"}},{"__typename":"VariantFlag","name":"enable_google_one_tap","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_intrinsic_automatic_actions","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"disable_partner_program_enrollment","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_pp_v4","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_boost_nia_v01","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"reader_fair_distribution_non_qp","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_conversion_model_v2","valueType":{"__typename":"VariantFlagString","value":"group_2"}},{"__typename":"VariantFlag","name":"enable_iceland_forced_android","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ios_autorefresh","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_remove_twitter_onboarding_step","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"limit_post_referrers","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ios_easy_resubscribe","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_update_explore_wtf","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"allow_test_auth","valueType":{"__typename":"VariantFlagString","value":"disallow"}},{"__typename":"VariantFlag","name":"enable_medium2_kbfd","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_premium_tier_badge","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"rex_generator_max_candidates","valueType":{"__typename":"VariantFlagNumber","value":1000}},{"__typename":"VariantFlag","name":"available_monthly_premium_plan","valueType":{"__typename":"VariantFlagString","value":"12a660186432"}},{"__typename":"VariantFlag","name":"enable_pp_country_expansion","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_switch_plan_premium_tier","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_gift_banner","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_sharer_validate_post_share_key","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_editor_new_publishing_flow","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"price_smoke_test_monthly","valueType":{"__typename":"VariantFlagString","value":""}},{"__typename":"VariantFlag","name":"enable_android_miro_v2","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_paypal","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_enable_friend_links_postpage_banners","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"signin_services","valueType":{"__typename":"VariantFlagString","value":"twitter,facebook,google,email,google-fastidv,google-one-tap,apple"}},{"__typename":"VariantFlag","name":"ios_display_paywall_after_onboarding","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_author_cards_byline","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_tipping_v0_android","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_moc_load_processor_all_recs_surfaces","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_moc_load_processor_first_story","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_newsletter_lo_flow_custom_domains","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_abandoned_cart_promotion_email","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ios_offline_reading","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_tribute_landing_page","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"limit_user_follows","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"reengagement_notification_duration","valueType":{"__typename":"VariantFlagNumber","value":3}},{"__typename":"VariantFlag","name":"android_rating_prompt_stories_read_threshold","valueType":{"__typename":"VariantFlagNumber","value":2}},{"__typename":"VariantFlag","name":"enable_google_webhook","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_moc_load_processor_c","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_bg_post_post","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"goliath_externalsearch_enable_comment_deindexation","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_post_publish_permission_check","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_rex_reading_history","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"signup_services","valueType":{"__typename":"VariantFlagString","value":"twitter,facebook,google,email,google-fastidv,google-one-tap,apple"}},{"__typename":"VariantFlag","name":"android_enable_syntax_highlight","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"mobile_custom_app_icon","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_new_manage_membership_flow","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ml_rank_rex_anno","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"ios_enable_lock_responses","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_aurora_pub_follower_page","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lite_response_markup","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_post_bottom_responses_input","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_speechify_ios","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_author_cards","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lite_server_upstream_deadlines","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_pre_pp_v4","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_recaptcha_enterprise","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_abandoned_paywall_promotion_email","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lite_archive_page","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"allow_access","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"android_enable_image_sharer","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_mastodon_for_members","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_ranker_v10","valueType":{"__typename":"VariantFlagString","value":"control"}},{"__typename":"VariantFlag","name":"textshots_userid","valueType":{"__typename":"VariantFlagString","value":""}},{"__typename":"VariantFlag","name":"enable_android_dynamic_programming_paywall","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_group_gifting","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_seamless_social_sharing","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_braintree_google_pay","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_cancellation_discount_v1_gate","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_apple_webhook","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_sms_verification_for_publish","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_speechify_widget","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"redefined_top_posts","valueType":{"__typename":"VariantFlagBoolean","value":true}},{"__typename":"VariantFlag","name":"enable_lo_homepage","valueType":{"__typename":"VariantFlagString","value":"control"}}],"collectionByDomainOrSlug({\"domainOrSlug\":\"posts.specterops.io\"})":{"__ref":"Collection:f05f8696e3cc"},"postResult({\"id\":\"76d619b633f5\"})":{"__ref":"Post:76d619b633f5"}},"ImageMetadata:1*D-FDlfkqivRBQZoESrwtqw.png":{"__typename":"ImageMetadata","id":"1*D-FDlfkqivRBQZoESrwtqw.png"},"Collection:f05f8696e3cc":{"__typename":"Collection","id":"f05f8696e3cc","favicon":{"__ref":"ImageMetadata:1*D-FDlfkqivRBQZoESrwtqw.png"},"customStyleSheet":null,"colorPalette":{"__typename":"ColorPalette","highlightSpectrum":{"__typename":"ColorSpectrum","backgroundColor":"#FFFFFFFF","colorPoints":[{"__typename":"ColorPoint","color":"#FFF3F1FF","point":0},{"__typename":"ColorPoint","color":"#FFF1EFFF","point":0.1},{"__typename":"ColorPoint","color":"#FFEEEDFF","point":0.2},{"__typename":"ColorPoint","color":"#FFECEBFF","point":0.3},{"__typename":"ColorPoint","color":"#FFEAE9FF","point":0.4},{"__typename":"ColorPoint","color":"#FFE8E7FF","point":0.5},{"__typename":"ColorPoint","color":"#FFE5E4FF","point":0.6},{"__typename":"ColorPoint","color":"#FFE3E2FF","point":0.7},{"__typename":"ColorPoint","color":"#FFE1E0FF","point":0.8},{"__typename":"ColorPoint","color":"#FFDEDEFF","point":0.9},{"__typename":"ColorPoint","color":"#FFDCDCFF","point":1}]},"defaultBackgroundSpectrum":{"__typename":"ColorSpectrum","backgroundColor":"#FFFFFFFF","colorPoints":[{"__typename":"ColorPoint","color":"#FF8080B7","point":0},{"__typename":"ColorPoint","color":"#FF7777A8","point":0.1},{"__typename":"ColorPoint","color":"#FF6E6E9A","point":0.2},{"__typename":"ColorPoint","color":"#FF65658B","point":0.3},{"__typename":"ColorPoint","color":"#FF5C5B7D","point":0.4},{"__typename":"ColorPoint","color":"#FF52526E","point":0.5},{"__typename":"ColorPoint","color":"#FF484860","point":0.6},{"__typename":"ColorPoint","color":"#FF3D3D51","point":0.7},{"__typename":"ColorPoint","color":"#FF323241","point":0.8},{"__typename":"ColorPoint","color":"#FF262632","point":0.9},{"__typename":"ColorPoint","color":"#FF191921","point":1}]},"tintBackgroundSpectrum":{"__typename":"ColorSpectrum","backgroundColor":"#FF1E184B","colorPoints":[{"__typename":"ColorPoint","color":"#FF1E184B","point":0},{"__typename":"ColorPoint","color":"#FF3A3866","point":0.1},{"__typename":"ColorPoint","color":"#FF54537D","point":0.2},{"__typename":"ColorPoint","color":"#FF6C6C93","point":0.3},{"__typename":"ColorPoint","color":"#FF8383A6","point":0.4},{"__typename":"ColorPoint","color":"#FF9999B9","point":0.5},{"__typename":"ColorPoint","color":"#FFAEAECA","point":0.6},{"__typename":"ColorPoint","color":"#FFC3C2DB","point":0.7},{"__typename":"ColorPoint","color":"#FFD8D6EB","point":0.8},{"__typename":"ColorPoint","color":"#FFEBEAFA","point":0.9},{"__typename":"ColorPoint","color":"#FFFFFDFF","point":1}]}},"domain":"posts.specterops.io","slug":"specter-ops-posts","googleAnalyticsId":"UA-102239211-2","name":"Posts By SpecterOps Team Members","subscriberCount":4869,"description":"Posts from SpecterOps team members on various topics relating information security","avatar":{"__ref":"ImageMetadata:1*D-FDlfkqivRBQZoESrwtqw.png"},"latestPostsConnection({\"paging\":{\"limit\":1}})":{"__typename":"PostConnection","posts":[{"__ref":"Post:9bffbc51673f"}]},"viewerEdge":{"__ref":"CollectionViewerEdge:collectionId:f05f8696e3cc-viewerId:lo_59ab6e7ea0fe"},"twitterUsername":"specterops","facebookPageId":null,"logo":{"__ref":"ImageMetadata:1*s-5BWBr8XsgtIU5azKNhZQ.jpeg"}},"User:297bdc3a9260":{"__typename":"User","id":"297bdc3a9260","customDomainState":null,"hasSubdomain":false,"username":"beyviel.david"},"Post:9bffbc51673f":{"__typename":"Post","id":"9bffbc51673f","firstPublishedAt":1734622184551,"creator":{"__ref":"User:297bdc3a9260"},"collection":{"__ref":"Collection:f05f8696e3cc"},"isSeries":false,"mediumUrl":"https:\u002F\u002Fposts.specterops.io\u002Fadfs-entra-lab-with-ludus-9bffbc51673f","sequence":null,"uniqueSlug":"adfs-entra-lab-with-ludus-9bffbc51673f"},"LinkedAccounts:a07d497fb5bc":{"__typename":"LinkedAccounts","mastodon":null,"id":"a07d497fb5bc"},"Membership:924e011eb338":{"__typename":"Membership","tier":"MEMBER","id":"924e011eb338"},"User:a07d497fb5bc":{"__typename":"User","id":"a07d497fb5bc","linkedAccounts":{"__ref":"LinkedAccounts:a07d497fb5bc"},"isSuspended":false,"name":"Jonathan Owens","imageId":"1*NcRudyjrwDx6UPl-YDD_6Q.png","customDomainState":{"__typename":"CustomDomainState","live":{"__typename":"CustomDomain","domain":"dragoqcc.medium.com"}},"hasSubdomain":true,"username":"dragoqcc","verifications":{"__typename":"VerifiedInfo","isBookAuthor":false},"socialStats":{"__typename":"SocialStats","followerCount":4,"followingCount":1,"collectionFollowingCount":2},"bio":"Consultant at SpecterOps","membership":{"__ref":"Membership:924e011eb338"},"allowNotes":true,"viewerEdge":{"__ref":"UserViewerEdge:userId:a07d497fb5bc-viewerId:lo_59ab6e7ea0fe"},"twitterScreenName":""},"Paragraph:8dd7ee56865d_0":{"__typename":"Paragraph","id":"8dd7ee56865d_0","name":"c563","type":"H3","href":null,"layout":null,"metadata":null,"text":"Dotnet Source Generators in 2024 Part 1: Getting Started","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_1":{"__typename":"Paragraph","id":"8dd7ee56865d_1","name":"3ae8","type":"H3","href":null,"layout":null,"metadata":null,"text":"Introduction","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_2":{"__typename":"Paragraph","id":"8dd7ee56865d_2","name":"bf50","type":"P","href":null,"layout":null,"metadata":null,"text":"In this blog post, we will cover the basics of a source generator, the major types involved, some common issues you might encounter, how to properly log those issues, and how to fix them.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_3":{"__typename":"Paragraph","id":"8dd7ee56865d_3","name":"5934","type":"P","href":null,"layout":null,"metadata":null,"text":"Source Generators have existed since .NET 5 was first introduced in late 2020. They have seen numerous improvements since that initial release, including the creation of newer Incremental Source Generators.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_4":{"__typename":"Paragraph","id":"8dd7ee56865d_4","name":"4dd3","type":"P","href":null,"layout":null,"metadata":null,"text":"TLDR: Source generators in .NET enable you to inspect user code and generate additional code on the fly based on that analysis. The example in this blog post may seem a bit redundant, but as you use more advanced patterns, you can generate hundreds of lines of code, helping to reduce boilerplate and repetitive code across your projects. Source generators are also great for lowering runtime reflection use, which can be expensive and slow down your applications.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"STRONG","start":0,"end":464,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":464,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_5":{"__typename":"Paragraph","id":"8dd7ee56865d_5","name":"5743","type":"P","href":null,"layout":null,"metadata":null,"text":"Update: I updated the stated reason a source generator must target the .NET standard and removed some redundant code from the examples.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"STRONG","start":0,"end":6,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_6":{"__typename":"Paragraph","id":"8dd7ee56865d_6","name":"c897","type":"P","href":null,"layout":null,"metadata":null,"text":"While developing a C# library to perform messaging between various process components or between processes, I encountered an issue where client programs using this new messaging library would need to add a list of all the “Messenger types.” I had heard of source generators and experimented with them a small amount before encountering this problem, so I figured I could dive in and devise a working solution to handle this and inject the list of “Messenger types” as a property automagically.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*sOX8dRV1Q8gJw9Hr":{"__typename":"ImageMetadata","id":"0*sOX8dRV1Q8gJw9Hr","originalHeight":209,"originalWidth":241,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_7":{"__typename":"Paragraph","id":"8dd7ee56865d_7","name":"3064","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*sOX8dRV1Q8gJw9Hr"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_8":{"__typename":"Paragraph","id":"8dd7ee56865d_8","name":"53e3","type":"P","href":null,"layout":null,"metadata":null,"text":"I have also been learning various programming paradigms and interesting practices. Vertical Slice architecture and aspect-oriented programming (AOP) are the two relevant to this blog. Vertical slices focus on grouping things that will change together, typically by the feature they represent, regardless of the layer they belong to. The goal of the slices is to minimize coupling between slices and maximize coupling in a slice (i.e., things in a feature depend on each other while trying not to rely on other slice features). This keeps the code base modular and makes it easy to update, remove, or add new slices, as the changes shouldn’t directly affect existing slices. [You can read more on vertical slices here]","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":675,"end":716,"href":"https:\u002F\u002Fwww.jimmybogard.com\u002Fvertical-slice-architecture\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_9":{"__typename":"Paragraph","id":"8dd7ee56865d_9","name":"fcb1","type":"P","href":null,"layout":null,"metadata":null,"text":"AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. Typically, in C#, this is implemented by creating attributes that are then placed on classes, methods, etc., to introduce or modify the decorated code. So, with these things in mind, I wanted to look at creating a feature that worked with vertical slices using AOP, and given my newfound challenge of automatically injecting a list of objects into my messenger app at build time, I had just the target goal in mind to combine all of it together.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_10":{"__typename":"Paragraph","id":"8dd7ee56865d_10","name":"12f5","type":"P","href":null,"layout":null,"metadata":null,"text":"With that brief overview of why I started messing with source generators, let’s take a quick step back and cover the basics of what a source generator is, what it lets you do, and what it doesn’t.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_11":{"__typename":"Paragraph","id":"8dd7ee56865d_11","name":"bf95","type":"H3","href":null,"layout":null,"metadata":null,"text":"What is a Source Generator?","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_12":{"__typename":"Paragraph","id":"8dd7ee56865d_12","name":"8b70","type":"P","href":null,"layout":null,"metadata":null,"text":"According to Microsoft: “Source generators aim to enable compile-time metaprogramming, that is, code that can be created at compile time and added to the compilation. Source generators will be able to read the contents of the compilation before running, as well as access any additional files, enabling generators to introspect both user C# code and generator-specific files. Generators create a pipeline, starting from base input sources and mapping them to the output they wish to produce. The more exposed, properly equatable states exist, the earlier the compiler will be able to cut off changes and reuse the same output.”","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":25,"end":626,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*sAAfVq4rGtGduDRs":{"__typename":"ImageMetadata","id":"0*sAAfVq4rGtGduDRs","originalHeight":386,"originalWidth":975,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_13":{"__typename":"Paragraph","id":"8dd7ee56865d_13","name":"3093","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*sAAfVq4rGtGduDRs"},"text":"Figure 1 — Source Generator dataflow, Microsoft","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":11,"end":36,"href":"https:\u002F\u002Flearn.microsoft.com\u002Fen-us\u002Fdotnet\u002Fcsharp\u002Froslyn-sdk\u002Fmedia\u002Fsource-generators\u002Fsource-generator-visualization.png","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_14":{"__typename":"Paragraph","id":"8dd7ee56865d_14","name":"174a","type":"P","href":null,"layout":null,"metadata":null,"text":"Simply put, source generators in .NET are library projects that you can add to a solution or include in existing NuGet packages. They are meant to be utilized only during the build process to add new code to a project.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_15":{"__typename":"Paragraph","id":"8dd7ee56865d_15","name":"5bba","type":"P","href":null,"layout":null,"metadata":null,"text":"[Read more about common source generator use cases here].","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":1,"end":55,"href":"https:\u002F\u002Flearn.microsoft.com\u002Fen-us\u002Fdotnet\u002Fcsharp\u002Froslyn-sdk\u002Fsource-generators-overview","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_16":{"__typename":"Paragraph","id":"8dd7ee56865d_16","name":"c0ad","type":"H3","href":null,"layout":null,"metadata":null,"text":"What Are Source Generators Not Meant to Do","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_17":{"__typename":"Paragraph","id":"8dd7ee56865d_17","name":"22aa","type":"P","href":null,"layout":null,"metadata":null,"text":"Microsoft calls out two main concepts as areas where generators are not meant to be used. The first area is adding language features. Microsoft states: “Source generators are not designed to replace new language features: for instance, one could imagine records being implemented as a source generator that converts the specified syntax to a compilable C# representation. We explicitly consider this to be an anti-pattern; the language will continue to evolve and add new features, and we don’t expect source generators to be a way to enable this. Doing so would create new ‘dialects’ of C# that are incompatible with the compiler without generators.”","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":153,"end":650,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_18":{"__typename":"Paragraph","id":"8dd7ee56865d_18","name":"bb94","type":"P","href":null,"layout":null,"metadata":null,"text":"In this regard, I agree with the team that allowing any .NET developer to start adding new features to the language opens up the possibility of competing features, confusing requirements, and incompatibility with the .NET compiler; which will only serve to confuse and push developers away from source generators altogether.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_19":{"__typename":"Paragraph","id":"8dd7ee56865d_19","name":"b5af","type":"P","href":null,"layout":null,"metadata":null,"text":"The second is in code modification; the Microsoft documentation also states, “There are many post-processing tasks that users perform on their assemblies today, which here we define broadly as ‘code rewriting’. These include, but are not limited to:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":78,"end":249,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_20":{"__typename":"Paragraph","id":"8dd7ee56865d_20","name":"23b8","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Optimization","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":12,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_21":{"__typename":"Paragraph","id":"8dd7ee56865d_21","name":"7674","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Logging injection","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":17,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_22":{"__typename":"Paragraph","id":"8dd7ee56865d_22","name":"db94","type":"ULI","href":null,"layout":null,"metadata":null,"text":"IL Weaving","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":10,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_23":{"__typename":"Paragraph","id":"8dd7ee56865d_23","name":"8c0b","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Call site re-writing","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":20,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_24":{"__typename":"Paragraph","id":"8dd7ee56865d_24","name":"c899","type":"P","href":null,"layout":null,"metadata":null,"text":"While these techniques have many valuable use cases, they do not fit into the idea of source generation. They are, by definition, code altering operations which are explicitly ruled out by the source generator’s proposal.”","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":221,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_25":{"__typename":"Paragraph","id":"8dd7ee56865d_25","name":"5f7f","type":"P","href":null,"layout":null,"metadata":null,"text":"While technically accurate, this feels more like a semantic line in the sand for the team not wanting a “generator” to perform replacement and not a language-breaking functionality to have access to. With that said, I will show a workaround for code rewriting that I’ve used recently if that is part of your goal for using a source generator.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_26":{"__typename":"Paragraph","id":"8dd7ee56865d_26","name":"dd0e","type":"P","href":null,"layout":null,"metadata":null,"text":"A source generator is also not an Analyzer. While often used together and sharing many of the exact same requirements to utilize one in a project, a generator’s job is to produce code and an analyzer’s job is to produce warnings or errors based on various rules such as code formatting or, as we will see in source generators, to block access to specific functions\u002Fcode bases that the analyzer’s author deemed unwelcome.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_27":{"__typename":"Paragraph","id":"8dd7ee56865d_27","name":"90a7","type":"H3","href":null,"layout":null,"metadata":null,"text":"The Primary Type of Source Generator in Modern .NET","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_28":{"__typename":"Paragraph","id":"8dd7ee56865d_28","name":"62cb","type":"P","href":null,"layout":null,"metadata":null,"text":"At the time of writing this (September 2024), the .NET team has decided to deprecate source generators implementing “ISourceGenerator” in favor of incremental generators. This change will be enforced, seemingly blocking access to older “ISourceGenerator” APIs with versions of the Roslyn API after version 4.10.0 \u002F .NET 9. (Old Generator Deprecated). In light of that, this blog post series will only cover “IncrementalGenerator” usage.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":324,"end":348,"href":"https:\u002F\u002Fgithub.com\u002Fdotnet\u002Froslyn\u002Fblob\u002Fmain\u002Fdocs\u002Ffeatures\u002Fsource-generators.md#summary","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_29":{"__typename":"Paragraph","id":"8dd7ee56865d_29","name":"a988","type":"H3","href":null,"layout":null,"metadata":null,"text":"What Is an Incremental Source Generator?","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_30":{"__typename":"Paragraph","id":"8dd7ee56865d_30","name":"9e91","type":"P","href":null,"layout":null,"metadata":null,"text":"An incremental generator is a source generator that performs its evaluation and execution on items only after they pass some filtering requirements, significantly increasing performance.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_31":{"__typename":"Paragraph","id":"8dd7ee56865d_31","name":"5f23","type":"P","href":null,"layout":null,"metadata":null,"text":"Typically, source generators try to execute during design time and compile time. While nice, this incurs an execution of any classes marked as a source generator every time something changes in the project (i.e., delete a line of code, add a line of code, make a new file, etc.). As you can imagine, having something running every time you type is not ideal for performance; thus, Microsoft created these incremental generators to help solve that performance problem.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_32":{"__typename":"Paragraph","id":"8dd7ee56865d_32","name":"f536","type":"H3","href":null,"layout":null,"metadata":null,"text":"Adding an Incremental Source Generator to Your Project","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_33":{"__typename":"Paragraph","id":"8dd7ee56865d_33","name":"74fe","type":"P","href":null,"layout":null,"metadata":null,"text":"Source generators must target .NET standard 2.0. This is because, currently, the .NET compiler targets .NET standard 2.0, and a Source Generator is an assembly loaded by the compiler that must target a version it will understand. By the end of this section, we will have a solution containing three projects.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":30,"end":47,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_34":{"__typename":"Paragraph","id":"8dd7ee56865d_34","name":"89d1","type":"ULI","href":null,"layout":null,"metadata":null,"text":"A .NET standard 2.0 library (Source Generator)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":46,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_35":{"__typename":"Paragraph","id":"8dd7ee56865d_35","name":"b01c","type":"ULI","href":null,"layout":null,"metadata":null,"text":"A .NET standard 2.0 library (A shared library for the generator and consumers)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":78,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_36":{"__typename":"Paragraph","id":"8dd7ee56865d_36","name":"874c","type":"ULI","href":null,"layout":null,"metadata":null,"text":"A .NET 8 web API project (Main project)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":39,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_37":{"__typename":"Paragraph","id":"8dd7ee56865d_37","name":"4584","type":"P","href":null,"layout":null,"metadata":null,"text":"You can use the dotnet command in a terminal or your IDE of choice to create these projects. I will use the dotnet tool since it is IDE\u002Fplatform agnostic. The following commands will produce the required projects.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":16,"end":22,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_38":{"__typename":"Paragraph","id":"8dd7ee56865d_38","name":"42dc","type":"OLI","href":null,"layout":null,"metadata":null,"text":"dotnet new sln -n IncrementalSourceGenPractice","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":46,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_39":{"__typename":"Paragraph","id":"8dd7ee56865d_39","name":"9abe","type":"OLI","href":null,"layout":null,"metadata":null,"text":"dotnet new webapi -n WebProject — project .\\IncrementalSourceGenPractice.sln","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":76,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_40":{"__typename":"Paragraph","id":"8dd7ee56865d_40","name":"5fb6","type":"OLI","href":null,"layout":null,"metadata":null,"text":"dotnet new classlib -f netstandard2.0 — langVersion 12 -n SourceGenerator — project .\\IncrementalSourceGenPractice.sln","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":118,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_41":{"__typename":"Paragraph","id":"8dd7ee56865d_41","name":"3839","type":"OLI","href":null,"layout":null,"metadata":null,"text":"dotnet new classlib -f netstandard2.0 — langVersion 12 -n SourceGenerator.SharedLibrary — project .\\IncrementalSourceGenPractice.sln","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":132,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_42":{"__typename":"Paragraph","id":"8dd7ee56865d_42","name":"0bbd","type":"OLI","href":null,"layout":null,"metadata":null,"text":"dotnet sln .\\IncrementalSourceGenPractice.sln add .\\SourceGenerator.SharedLibrary\\SourceGenerator.SharedLibrary.csproj .\\SourceGenerator\\SourceGenerator.csproj .\\WebProject\\WebProject.csproj","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":190,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_43":{"__typename":"Paragraph","id":"8dd7ee56865d_43","name":"c485","type":"P","href":null,"layout":null,"metadata":null,"text":"Before creating the source generator, adding a few Nuget packages and changes to the .csproj files are required. Open the SourceGenerator.csproj file and ensure it matches the following content.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":122,"end":144,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":149,"end":150,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:dd367dc0ae1158c23a5b82cf17ba07f5":{"__typename":"MediaResource","id":"dd367dc0ae1158c23a5b82cf17ba07f5","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Generators blog part 1, csproj"},"Paragraph:8dd7ee56865d_44":{"__typename":"Paragraph","id":"8dd7ee56865d_44","name":"8035","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"SourceGenerator.csproj","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:dd367dc0ae1158c23a5b82cf17ba07f5"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_45":{"__typename":"Paragraph","id":"8dd7ee56865d_45","name":"a5dc","type":"P","href":null,"layout":null,"metadata":null,"text":"The version numbers of the package references will likely be different, which is fine as long as they are valid for the .NET standard 2.0 target.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":120,"end":144,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_46":{"__typename":"Paragraph","id":"8dd7ee56865d_46","name":"63f5","type":"P","href":null,"layout":null,"metadata":null,"text":"The three configuration settings added are the following","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_47":{"__typename":"Paragraph","id":"8dd7ee56865d_47","name":"8b8f","type":"P","href":null,"layout":null,"metadata":null,"text":"1. \u003CEnforceExtendedAnalyzerRules\u003Etrue\u003C\u002FEnforceExtendedAnalyzerRules\u003E","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":3,"end":68,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_48":{"__typename":"Paragraph","id":"8dd7ee56865d_48","name":"5012","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Ensures the generator is using the recommended rules created by the .NET team","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_49":{"__typename":"Paragraph","id":"8dd7ee56865d_49","name":"fde7","type":"P","href":null,"layout":null,"metadata":null,"text":"2. \u003CIsRoslynComponent\u003Etrue\u003C\u002FIsRoslynComponent\u003E","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":3,"end":46,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_50":{"__typename":"Paragraph","id":"8dd7ee56865d_50","name":"a896","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Enables the project to act as a generator and work with the Roslyn compiler, making debugging of the generator possible","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_51":{"__typename":"Paragraph","id":"8dd7ee56865d_51","name":"116e","type":"P","href":null,"layout":null,"metadata":null,"text":"3. \u003CIncludeBuildOutput\u003Efalse\u003C\u002FIncludeBuildOutput\u003E","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":3,"end":49,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_52":{"__typename":"Paragraph","id":"8dd7ee56865d_52","name":"e33a","type":"ULI","href":null,"layout":null,"metadata":null,"text":"This prevents the project build from being included in output, which is ideal since the generator is meant to be compile-time only","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_53":{"__typename":"Paragraph","id":"8dd7ee56865d_53","name":"5ebb","type":"P","href":null,"layout":null,"metadata":null,"text":"The other odd configuration in this .csproj file is the OutputItemType=”Analyzer” added to the project reference for the shared library. Even though the shared library is not an analyzer, this is required so the generator can access it during generation.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":56,"end":81,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":36,"end":43,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_54":{"__typename":"Paragraph","id":"8dd7ee56865d_54","name":"6e3c","type":"P","href":null,"layout":null,"metadata":null,"text":"The final bit of configuration required is for the webproject.csproj file.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":51,"end":68,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_55":{"__typename":"Paragraph","id":"8dd7ee56865d_55","name":"5ac5","type":"P","href":null,"layout":null,"metadata":null,"text":"Add the following lines to the project.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_56":{"__typename":"Paragraph","id":"8dd7ee56865d_56","name":"5942","type":"PRE","href":null,"layout":null,"metadata":null,"text":"\u003CEmitCompilerGeneratedFiles\u003Etrue\u003C\u002FEmitCompilerGeneratedFiles\u003E\n\u003CCompilerGeneratedFilesOutputPath\u003E.\\GeneratedFiles\u003C\u002FCompilerGeneratedFilesOutputPath\u003E","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"xml"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_57":{"__typename":"Paragraph","id":"8dd7ee56865d_57","name":"5d1c","type":"ULI","href":null,"layout":null,"metadata":null,"text":"These two options allow the source generator files to be written to the filesystem and set a custom path to write them to vs. using the default path.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_58":{"__typename":"Paragraph","id":"8dd7ee56865d_58","name":"1329","type":"P","href":null,"layout":null,"metadata":null,"text":"Lastly, add the following item group also to the webproject.csproj file.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":49,"end":66,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_59":{"__typename":"Paragraph","id":"8dd7ee56865d_59","name":"9f93","type":"PRE","href":null,"layout":null,"metadata":null,"text":"\u003CItemGroup\u003E\n\u003CProjectReference Include=\"..\\SourceGenerator.SharedLibrary\\SourceGenerator.SharedLibrary.csproj\" \u002F\u003E\n\u003CProjectReference Include=\"..\\SourceGenerator\\SourceGenerator.csproj\" ReferenceOutputAssembly=\"false\" OutputItemType=\"Analyzer\" \u002F\u003E\n\u003C\u002FItemGroup\u003E","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"xml"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_60":{"__typename":"Paragraph","id":"8dd7ee56865d_60","name":"8316","type":"ULI","href":null,"layout":null,"metadata":null,"text":"When referencing the source generator, we do not need the output assembly again because it is not required after compile time.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_61":{"__typename":"Paragraph","id":"8dd7ee56865d_61","name":"a40e","type":"H3","href":null,"layout":null,"metadata":null,"text":"Adding a Relevant Target for Generation","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_62":{"__typename":"Paragraph","id":"8dd7ee56865d_62","name":"d69a","type":"P","href":null,"layout":null,"metadata":null,"text":"In this first part, we will generate something relatively simple; however, later posts go deeper into using source generators and we will create a small AOP framework to achieve the goal outlined at the start of this blog.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_63":{"__typename":"Paragraph","id":"8dd7ee56865d_63","name":"8f6f","type":"P","href":null,"layout":null,"metadata":null,"text":"Open the WebProject and add a new class called Calculator.cs with the following source.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":47,"end":60,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":9,"end":20,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":23,"end":24,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:30ebc82f45a40769bd16d812efb22e7a":{"__typename":"MediaResource","id":"30ebc82f45a40769bd16d812efb22e7a","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"The template calculator class we will generate new code for"},"Paragraph:8dd7ee56865d_64":{"__typename":"Paragraph","id":"8dd7ee56865d_64","name":"fb97","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:30ebc82f45a40769bd16d812efb22e7a"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_65":{"__typename":"Paragraph","id":"8dd7ee56865d_65","name":"4457","type":"P","href":null,"layout":null,"metadata":null,"text":"We will then generate functions for this class to add, subtract, multiply, and divide. We must mark the class as partial to stick with the intended functionality of only adding content to existing classes. This indicates that more of the class’s source code may be in a different file.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_66":{"__typename":"Paragraph","id":"8dd7ee56865d_66","name":"f4cd","type":"H3","href":null,"layout":null,"metadata":null,"text":"Starting on the Incremental Source Generator","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_67":{"__typename":"Paragraph","id":"8dd7ee56865d_67","name":"19fc","type":"P","href":null,"layout":null,"metadata":null,"text":"Congratulations; we finally made it through the required setup.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_68":{"__typename":"Paragraph","id":"8dd7ee56865d_68","name":"a63e","type":"P","href":null,"layout":null,"metadata":null,"text":"Finally, with that configuration done, we can start writing the source generator. In the SourceGenerator project, add a class named CalculatorGenerator with the following content.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":132,"end":151,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":89,"end":104,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":151,"end":152,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:10d010241aa9280c31d8b38892d66486":{"__typename":"MediaResource","id":"10d010241aa9280c31d8b38892d66486","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"The barebones version of the generator class that will create the code for our calculator"},"Paragraph:8dd7ee56865d_69":{"__typename":"Paragraph","id":"8dd7ee56865d_69","name":"ad38","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:10d010241aa9280c31d8b38892d66486"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_70":{"__typename":"Paragraph","id":"8dd7ee56865d_70","name":"8400","type":"P","href":null,"layout":null,"metadata":null,"text":"This gives the bare-bones starting point. To be a valid Incremental source generator, the class must inherit from `IIncrementalGenerator` and be decorated with the [Generator] attribute. The interface requires our generator to implement only the’ Initialize’ function.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":164,"end":175,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_71":{"__typename":"Paragraph","id":"8dd7ee56865d_71","name":"025a","type":"H4","href":null,"layout":null,"metadata":null,"text":"The Providers","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_72":{"__typename":"Paragraph","id":"8dd7ee56865d_72","name":"5040","type":"P","href":null,"layout":null,"metadata":null,"text":"The IncrementalGeneratorInitializationContext argument it provides in the Initialize method will give access to the underlying source.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":4,"end":45,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":74,"end":84,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_73":{"__typename":"Paragraph","id":"8dd7ee56865d_73","name":"da0d","type":"P","href":null,"layout":null,"metadata":null,"text":"The context object does this via several different “providers.”","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*M7qvpmIvfEArNlov":{"__typename":"ImageMetadata","id":"0*M7qvpmIvfEArNlov","originalHeight":189,"originalWidth":772,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_74":{"__typename":"Paragraph","id":"8dd7ee56865d_74","name":"d49a","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*M7qvpmIvfEArNlov"},"text":"Different Provides for Accessing Various Contexts","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_75":{"__typename":"Paragraph","id":"8dd7ee56865d_75","name":"afb3","type":"ULI","href":null,"layout":null,"metadata":null,"text":"CompilationProvider -\u003E Can access data relevant to the entire compilation (assemblies, all source files, various solution-wide options, and configs )","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":19,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":19,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_76":{"__typename":"Paragraph","id":"8dd7ee56865d_76","name":"5477","type":"ULI","href":null,"layout":null,"metadata":null,"text":"SyntaxProvider -\u003E Access to syntax trees to analyze, transform, and select nodes for future work (Most commonly accessed)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":14,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":14,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_77":{"__typename":"Paragraph","id":"8dd7ee56865d_77","name":"18f6","type":"ULI","href":null,"layout":null,"metadata":null,"text":"ParseOptionProvider -\u003E Gives access to various bits of info about the code being parsed, such as language, whether it’s regular code files, script files, custom preprocessor names, etc.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":19,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":19,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_78":{"__typename":"Paragraph","id":"8dd7ee56865d_78","name":"28f6","type":"ULI","href":null,"layout":null,"metadata":null,"text":"AdditionalTextsProvider -\u003E Additional texts are any non-source files you might want to access, such as a JSON file with various user-defined properties","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":23,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":23,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_79":{"__typename":"Paragraph","id":"8dd7ee56865d_79","name":"6482","type":"ULI","href":null,"layout":null,"metadata":null,"text":"MetadataReferencesProvider -\u003E Allows getting references to various things like assemblies without getting the whole assembly item directly","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":26,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":26,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_80":{"__typename":"Paragraph","id":"8dd7ee56865d_80","name":"094b","type":"ULI","href":null,"layout":null,"metadata":null,"text":"AnalyzerConfigOptionsProvider -\u003E If a source file has additional analyzer rules applied to it, this can access them","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":29,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":29,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_81":{"__typename":"Paragraph","id":"8dd7ee56865d_81","name":"d803","type":"P","href":null,"layout":null,"metadata":null,"text":"The ones we care about are CompilationProvider and SyntaxProvider.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":27,"end":46,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":51,"end":65,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_82":{"__typename":"Paragraph","id":"8dd7ee56865d_82","name":"96db","type":"P","href":null,"layout":null,"metadata":null,"text":"Access the context.SyntaxProvider.CreateSyntaxProvider() method call.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":11,"end":56,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_83":{"__typename":"Paragraph","id":"8dd7ee56865d_83","name":"6a22","type":"P","href":null,"layout":null,"metadata":null,"text":"This method takes two arguments. The first is called thepredicate, a super lightweight filter that reduces everything in the codebase to only the items we care about. The second is called thetransform, which ingests what we care about from the filter and makes any additional changes, property access, additional filtering, etc., as desired before returning the objects we want to work with later.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":56,"end":65,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":191,"end":200,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_84":{"__typename":"Paragraph","id":"8dd7ee56865d_84","name":"bf8c","type":"P","href":null,"layout":null,"metadata":null,"text":"An example of using this syntaxProvider method is as follows.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":25,"end":39,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_85":{"__typename":"Paragraph","id":"8dd7ee56865d_85","name":"d63c","type":"P","href":null,"layout":null,"metadata":null,"text":"The names of the arguments (predicate, transform) do not have to be supplied. I included them to make it easier to understand which is which.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_86":{"__typename":"Paragraph","id":"8dd7ee56865d_86","name":"583e","type":"P","href":null,"layout":null,"metadata":null,"text":"Update: A previous version of this blog post contained a `.Where()` filter call to remove possible null results. However, in this case, the `ClassDeclarationSyntax` objects are never null, so I have removed that line of code.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"STRONG","start":0,"end":6,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_87":{"__typename":"Paragraph","id":"8dd7ee56865d_87","name":"8bcd","type":"P","href":null,"layout":null,"metadata":null,"text":"It should also be noted that returning Syntax Nodes like this is not great because Roslyn can utilize caching if we give it something like a record type to return instead. It's more straightforward to compare previously returned ones to ones it might want to return in the future. For now, we will use the syntax nodes, and in the next part of the series, we will cover some optimizations.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:b0ad897bf84ad2327a80bf198b4c2f86":{"__typename":"MediaResource","id":"b0ad897bf84ad2327a80bf198b4c2f86","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"SourceGen Blog1, value Provider example"},"Paragraph:8dd7ee56865d_88":{"__typename":"Paragraph","id":"8dd7ee56865d_88","name":"fde6","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:b0ad897bf84ad2327a80bf198b4c2f86"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_89":{"__typename":"Paragraph","id":"8dd7ee56865d_89","name":"61cb","type":"H4","href":null,"layout":null,"metadata":null,"text":"The Predicate","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_90":{"__typename":"Paragraph","id":"8dd7ee56865d_90","name":"df66","type":"P","href":null,"layout":null,"metadata":null,"text":"The predicate code’s first argument is a SyntaxNode , and the second is a CancellationToken. The token allows any asynchronous tasking performed in this method to be gracefully stopped if needed. In this example, it is unnecessary, so we will focus on the SyntaxNode.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":41,"end":51,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":74,"end":91,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_91":{"__typename":"Paragraph","id":"8dd7ee56865d_91","name":"9191","type":"PRE","href":null,"layout":null,"metadata":null,"text":"(SyntaxNode node, _) =\u003E\n{\n  return node is ClassDeclarationSyntax classDeclaration && \n  classDeclaration.Identifier.ToString() == “Calculator”;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_92":{"__typename":"Paragraph","id":"8dd7ee56865d_92","name":"5039","type":"P","href":null,"layout":null,"metadata":null,"text":"The preceding code can seem daunting initially, as you are quickly bombarded with terms not typically seen by C# developers (e.g., SyntaxNode, ClassDeclerationSyntax, identifier, etc.). If you are anything like me, you are wondering what they mean, what they are used for, and why you need to use them.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_93":{"__typename":"Paragraph","id":"8dd7ee56865d_93","name":"8c14","type":"P","href":null,"layout":null,"metadata":null,"text":"Source generators work alongside \u002F utilize the Roslyn compiler. Roslyn is a set of compilers and code analysis APIs. Roslyn understands your code and projects by breaking down almost everything into SyntaxNodes and SyntaxTokens.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":199,"end":210,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":215,"end":227,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_94":{"__typename":"Paragraph","id":"8dd7ee56865d_94","name":"aebe","type":"P","href":null,"layout":null,"metadata":null,"text":"Some examples of syntax tokens include access modifiers like public or private, modifiers like static, abstract, and partial. Names of items like a class name, namespace, method name, etc.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":61,"end":67,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":71,"end":78,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":95,"end":101,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":103,"end":111,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":117,"end":124,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":17,"end":30,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":17,"end":30,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_95":{"__typename":"Paragraph","id":"8dd7ee56865d_95","name":"c319","type":"P","href":null,"layout":null,"metadata":null,"text":"Tokens also include grammar items in the language, like semicolons, brackets, etc.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*Ef7HA7ZRaMzK5WH1":{"__typename":"ImageMetadata","id":"0*Ef7HA7ZRaMzK5WH1","originalHeight":121,"originalWidth":598,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_96":{"__typename":"Paragraph","id":"8dd7ee56865d_96","name":"27a8","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*Ef7HA7ZRaMzK5WH1"},"text":"Example of a SyntaxToken Item","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_97":{"__typename":"Paragraph","id":"8dd7ee56865d_97","name":"21d5","type":"P","href":null,"layout":null,"metadata":null,"text":"Examples of syntax nodes include class declarations, method declarations, bodies of methods, and individual lines of code, including assignments, expressions, and using statements.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":32,"end":51,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":53,"end":72,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":74,"end":91,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":97,"end":121,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":12,"end":24,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":12,"end":24,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*XRWDhLNHHcpKNaTL":{"__typename":"ImageMetadata","id":"0*XRWDhLNHHcpKNaTL","originalHeight":258,"originalWidth":670,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_98":{"__typename":"Paragraph","id":"8dd7ee56865d_98","name":"537a","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*XRWDhLNHHcpKNaTL"},"text":"Example of a Syntax Node in this case a Class Declaration Syntax Node","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_99":{"__typename":"Paragraph","id":"8dd7ee56865d_99","name":"db18","type":"P","href":null,"layout":null,"metadata":null,"text":"This programmatic code breakdown is then used to analyze code, write new classes, modify methods, etc. While this can feel daunting, something to remember is that syntax is ultimately still text, and syntax objects can be cast into a string if required. This is precisely what we do in the predicate to convert this SyntaxToken into a string with the .ToString() method to compare it to our target name.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":316,"end":327,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":351,"end":362,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_100":{"__typename":"Paragraph","id":"8dd7ee56865d_100","name":"dfd6","type":"P","href":null,"layout":null,"metadata":null,"text":"There are various syntax nodes and token types, which I plan to break down and provide examples of in later posts in the series.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_101":{"__typename":"Paragraph","id":"8dd7ee56865d_101","name":"1bb5","type":"P","href":null,"layout":null,"metadata":null,"text":"In summary, the predicate says if this piece of code represents declaring a class like public partial class Calculator, then check if its identifier (i.e., class name) is “Calculator,” and if so, pass it to the transform. This way, when the generator sees a node like public static void Main(), it knows to skip it.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":87,"end":118,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":268,"end":293,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":16,"end":25,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":211,"end":220,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_102":{"__typename":"Paragraph","id":"8dd7ee56865d_102","name":"a4df","type":"H4","href":null,"layout":null,"metadata":null,"text":"The Transform","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_103":{"__typename":"Paragraph","id":"8dd7ee56865d_103","name":"8d85","type":"PRE","href":null,"layout":null,"metadata":null,"text":"transform: (GeneratorSyntaxContext ctx, _) =\u003E\n{\n   var classDeclaration = (ClassDeclarationSyntax)ctx.Node;\n   return classDeclaration;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_104":{"__typename":"Paragraph","id":"8dd7ee56865d_104","name":"16bf","type":"P","href":null,"layout":null,"metadata":null,"text":"The transform takes in the item that passed the filter and a cancellation token again to help cancel it if needed. The GeneratorSyntaxContext item is basically the node and some extra metadata. We then cast the context node item to a ClassDeclarationSyntax. This is required because even though the filter only passed us nodes of that type, the SyntaxContext does not understand that; however, we can cast it and safely know we are getting what we expect.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":119,"end":141,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":234,"end":256,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":345,"end":358,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":4,"end":13,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_105":{"__typename":"Paragraph","id":"8dd7ee56865d_105","name":"ba51","type":"P","href":null,"layout":null,"metadata":null,"text":"The transform is where we could extract members of the class, bodies of methods, etc.; whatever item we want to work on. In this example, we want to work on a class, so we get the item as a ClassDeclarationSyntax.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":190,"end":212,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_106":{"__typename":"Paragraph","id":"8dd7ee56865d_106","name":"234d","type":"P","href":null,"layout":null,"metadata":null,"text":"Finally, we add a where statement to filter out any null items that may have made it through. This is optional, but ensuring we aren’t getting some weird invalid item does not hurt.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_107":{"__typename":"Paragraph","id":"8dd7ee56865d_107","name":"0555","type":"P","href":null,"layout":null,"metadata":null,"text":"The CreateSyntaxProvider returns an IncrementalValuesProvider\u003CT\u003E where T is whatever item type we are trying to return from the method call.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":4,"end":24,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":36,"end":64,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_108":{"__typename":"Paragraph","id":"8dd7ee56865d_108","name":"c159","type":"P","href":null,"layout":null,"metadata":null,"text":"An `IncrementalValuesProvider` is a fancy word for the object holding our returned items. There is also an IncrementalValueProvider\u003CT\u003E, which is similar but is meant to have one object instead.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":107,"end":134,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_109":{"__typename":"Paragraph","id":"8dd7ee56865d_109","name":"0d91","type":"P","href":null,"layout":null,"metadata":null,"text":"For example, our code’s ValuesProvider contains class declarations from the ClassDeclarationSyntax type.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":24,"end":38,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":76,"end":98,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_110":{"__typename":"Paragraph","id":"8dd7ee56865d_110","name":"d23a","type":"P","href":null,"layout":null,"metadata":null,"text":"This then leaves us with an initialization method like this:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:c00809482473b3d19c0697bf6cb5a90d":{"__typename":"MediaResource","id":"c00809482473b3d19c0697bf6cb5a90d","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, blog1, final initialize method"},"Paragraph:8dd7ee56865d_111":{"__typename":"Paragraph","id":"8dd7ee56865d_111","name":"47ce","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:c00809482473b3d19c0697bf6cb5a90d"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_112":{"__typename":"Paragraph","id":"8dd7ee56865d_112","name":"4c5e","type":"P","href":null,"layout":null,"metadata":null,"text":"The last central part of using a source generator is telling it what to do with the items we got back. Go ahead and add the context. RegisterSourceOutput() line to your project. This tells the generator what to do with the returned items. Next, we will go over the content of this Execute method.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":124,"end":155,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_113":{"__typename":"Paragraph","id":"8dd7ee56865d_113","name":"7e39","type":"H4","href":null,"layout":null,"metadata":null,"text":"The Execute Method","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_114":{"__typename":"Paragraph","id":"8dd7ee56865d_114","name":"8919","type":"P","href":null,"layout":null,"metadata":null,"text":"Alright, so we have our target type; we are filtering out everything we don’t care about, so let’s send it to the execute method and generate our source code.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_115":{"__typename":"Paragraph","id":"8dd7ee56865d_115","name":"76b1","type":"P","href":null,"layout":null,"metadata":null,"text":"The execute method is typically defined as follows:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_116":{"__typename":"Paragraph","id":"8dd7ee56865d_116","name":"8db8","type":"PRE","href":null,"layout":null,"metadata":null,"text":"public void Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context)\n{\n  \u002F\u002FCode to perform work on the calculator class\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_117":{"__typename":"Paragraph","id":"8dd7ee56865d_117","name":"e9b2","type":"P","href":null,"layout":null,"metadata":null,"text":"The first argument will vary depending on the work you are trying to perform and the method can be modified to take extra arguments as needed. The SourceProductionContext object gives us essential information about the project\u002Fsolution and enables us to add code to the compilation to include it in the final build.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":147,"end":170,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_118":{"__typename":"Paragraph","id":"8dd7ee56865d_118","name":"95a8","type":"P","href":null,"layout":null,"metadata":null,"text":"Since our goal is to generate some simple calculator functions, we will first check all the members of the class we are working on to see if they already have a method with the same name so we don’t accidentally override an existing version. Next, we will gather some metadata, like the namespace, any modifiers, and any using statements, to ensure the code compiles correctly. Lastly, we will insert the code we want into the source file and save it to the compilation.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:f854aa10ea2e8c34783650948971019f":{"__typename":"MediaResource","id":"f854aa10ea2e8c34783650948971019f","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, blog, part 1, execute method"},"Paragraph:8dd7ee56865d_119":{"__typename":"Paragraph","id":"8dd7ee56865d_119","name":"2e69","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:f854aa10ea2e8c34783650948971019f"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_120":{"__typename":"Paragraph","id":"8dd7ee56865d_120","name":"a464","type":"P","href":null,"layout":null,"metadata":null,"text":"Note: This code block tries to get the Namespace via the child nodes of a class, this will never work and will always return null. We utilize this to help showcase logging and we fix this in the final working copy at the end.\nSo, the “final” generator code should look like the following:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"STRONG","start":0,"end":5,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":91,"end":101,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":0,"end":5,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":91,"end":101,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:448789dddc2b13f03024903d2085d840":{"__typename":"MediaResource","id":"448789dddc2b13f03024903d2085d840","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, Blog Part 1, Execute class, compiles but flawed logic"},"Paragraph:8dd7ee56865d_121":{"__typename":"Paragraph","id":"8dd7ee56865d_121","name":"9ddb","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:448789dddc2b13f03024903d2085d840"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_122":{"__typename":"Paragraph","id":"8dd7ee56865d_122","name":"7bbc","type":"P","href":null,"layout":null,"metadata":null,"text":"Alright, all the pieces are in place. Let’s build the solution and check out the generated code.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*cxLUynP4ZgkbQ3q4":{"__typename":"ImageMetadata","id":"0*cxLUynP4ZgkbQ3q4","originalHeight":298,"originalWidth":1600,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_123":{"__typename":"Paragraph","id":"8dd7ee56865d_123","name":"b11a","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*cxLUynP4ZgkbQ3q4"},"text":"Example Error Messages When Source Generation Fails","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_124":{"__typename":"Paragraph","id":"8dd7ee56865d_124","name":"116b","type":"P","href":null,"layout":null,"metadata":null,"text":"Well, that’s not what we hoped for; however, as with many development projects, errors are bound to happen. Don’t panic yet; that is intended to show off some important things when working with source generators. First, source generators will only present a warning when they fail to generate code, so watch for warning messages like this when compiling the code.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_125":{"__typename":"Paragraph","id":"8dd7ee56865d_125","name":"c9bb","type":"P","href":null,"layout":null,"metadata":null,"text":"Warning CS8785 : Generator ‘CalculatorGenerator’ failed to generate source. It will not contribute to the output and compilation errors may occur as a result. Exception was of type ‘NullReferenceException’ with message ‘Object reference not set to an instance of an object.’.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":275,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_126":{"__typename":"Paragraph","id":"8dd7ee56865d_126","name":"4249","type":"P","href":null,"layout":null,"metadata":null,"text":"Second, source generators execute at compile time, making capturing extra context from the exception challenging as you might typically do with a try-catch where you can print info to the console.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"STRONG","start":36,"end":49,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":36,"end":49,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_127":{"__typename":"Paragraph","id":"8dd7ee56865d_127","name":"d37a","type":"P","href":null,"layout":null,"metadata":null,"text":"If you try something like the following, you will notice no additional information is sent to the console.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_128":{"__typename":"Paragraph","id":"8dd7ee56865d_128","name":"081a","type":"PRE","href":null,"layout":null,"metadata":null,"text":"public void Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context) \n{\n  Try\n  {\n     \u002F\u002F code from before\n  }\n  catch(Exception ex)\n  {\n     Console.WriteLine(ex);\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_129":{"__typename":"Paragraph","id":"8dd7ee56865d_129","name":"5659","type":"P","href":null,"layout":null,"metadata":null,"text":"OK, no problem. Instead, Let’s save the message to a file in the catch statement.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*92SZIQO6ZuT0fvQo":{"__typename":"ImageMetadata","id":"0*92SZIQO6ZuT0fvQo","originalHeight":102,"originalWidth":1107,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_130":{"__typename":"Paragraph","id":"8dd7ee56865d_130","name":"d2c2","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*92SZIQO6ZuT0fvQo"},"text":"File API Blocked in Source Generators","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_131":{"__typename":"Paragraph","id":"8dd7ee56865d_131","name":"c3f2","type":"P","href":null,"layout":null,"metadata":null,"text":"OK, maybe not. If we can’t log to a file in the generator and we can’t log to the console, how will we get the details we need to figure out what is going wrong?","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_132":{"__typename":"Paragraph","id":"8dd7ee56865d_132","name":"e0e1","type":"H3","href":null,"layout":null,"metadata":null,"text":"Logging in Source Generators","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_133":{"__typename":"Paragraph","id":"8dd7ee56865d_133","name":"6a12","type":"P","href":null,"layout":null,"metadata":null,"text":"This brings us to logging in source generators, which I wanted to include in this first part because it is by far the most accessible means of troubleshooting issues when using source generators.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_134":{"__typename":"Paragraph","id":"8dd7ee56865d_134","name":"b527","type":"P","href":null,"layout":null,"metadata":null,"text":"To enable logging in the source generator, open the shared library we made at the start. It should have a single class named class1. Rename that to GeneratorLogging. While the File API is blocked inside the source generator itself, adding that functionality to a secondary library and having it write the content in a file for you is possible.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":125,"end":131,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":148,"end":164,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_135":{"__typename":"Paragraph","id":"8dd7ee56865d_135","name":"0e89","type":"P","href":null,"layout":null,"metadata":null,"text":"A simple logging class would be something like the following","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:d2ee7383cf66da2e79d4042bf2ab6d95":{"__typename":"MediaResource","id":"d2ee7383cf66da2e79d4042bf2ab6d95","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, blog part 1, A class to handle logging messages from a source generator"},"Paragraph:8dd7ee56865d_136":{"__typename":"Paragraph","id":"8dd7ee56865d_136","name":"5584","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:d2ee7383cf66da2e79d4042bf2ab6d95"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_137":{"__typename":"Paragraph","id":"8dd7ee56865d_137","name":"a9d9","type":"P","href":null,"layout":null,"metadata":null,"text":"There are a few key parts I will quickly explain.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_138":{"__typename":"Paragraph","id":"8dd7ee56865d_138","name":"a708","type":"ULI","href":null,"layout":null,"metadata":null,"text":"The lock object -\u003E This ensures that only one instance of the log message call runs simultaneously. This way, the source generators do not step on each other while trying to access the same file. Even with just one source generator, this can still happen because it checks multiple classes simultaneously.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":15,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_139":{"__typename":"Paragraph","id":"8dd7ee56865d_139","name":"9768","type":"ULI","href":null,"layout":null,"metadata":null,"text":"The log message method -\u003E This method will create the file at the provided path if it does exist. Then, so long as the log level is equal to or higher than the set level, it will log the message to the file. It will also add a small header and footer to messages set higher than info to better showcase errors.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":22,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_140":{"__typename":"Paragraph","id":"8dd7ee56865d_140","name":"7199","type":"H3","href":null,"layout":null,"metadata":null,"text":"Fixing the Example Code","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_141":{"__typename":"Paragraph","id":"8dd7ee56865d_141","name":"23e8","type":"P","href":null,"layout":null,"metadata":null,"text":"Using the logging class is very straightforward; if you haven’t already, ensure the shared library is added as a dependency of the generator project so it can access it. So, let’s add some logging calls to our current code and see what the log shows.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:385cf2859d0c6be2ccde8d9ce079a1f7":{"__typename":"MediaResource","id":"385cf2859d0c6be2ccde8d9ce079a1f7","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, Part 1, Exec with logging"},"Paragraph:8dd7ee56865d_142":{"__typename":"Paragraph","id":"8dd7ee56865d_142","name":"51b6","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:385cf2859d0c6be2ccde8d9ce079a1f7"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_143":{"__typename":"Paragraph","id":"8dd7ee56865d_143","name":"558e","type":"P","href":null,"layout":null,"metadata":null,"text":"If needed, perform dotnet clean to clean up any previous logs or generated files. Then, build the solution and check the log file.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":19,"end":31,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_144":{"__typename":"Paragraph","id":"8dd7ee56865d_144","name":"b740","type":"P","href":null,"layout":null,"metadata":null,"text":"The log will then contain output like the following:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_145":{"__typename":"Paragraph","id":"8dd7ee56865d_145","name":"337f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"[+] Generated Log File\n[+] This file contains log messages from the source generator\nLogging started at 2024–09–14 19:42:12.287\n[+] Found 2 members in the Calculator class\n[+] Checked if methods exist in Calculator class\n[+] Added using statements to generated class\n\n[Error start]\n[-] Exception occurred in generator: System.NullReferenceException: Object reference not set to an instance of an object.\n at SourceGenerator.CalculatorGenerator.Execute(ClassDeclarationSyntax calculatorClass, SourceProductionContext context)\n[Error end]","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"plaintext"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_146":{"__typename":"Paragraph","id":"8dd7ee56865d_146","name":"0242","type":"P","href":null,"layout":null,"metadata":null,"text":"From this log output, we can see the generator is running into this Null Reference Exception right after the using statement code, so let’s take a more in-depth look at that.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_147":{"__typename":"Paragraph","id":"8dd7ee56865d_147","name":"1e7a","type":"PRE","href":null,"layout":null,"metadata":null,"text":"GeneratorLogging.LogMessage(“[+] Added using statements to generated class”);\ncalcGeneratedClassBuilder.AppendLine();\n\nSyntaxNode calcClassNamespace = calculatorClass.Parent;\n\nwhile (calcClassNamespace is not NamespaceDeclarationSyntax)\n{\n  calcClassNamespace = calcClassNamespace.Parent;\n}\nGeneratorLogging.LogMessage($\"[+] Found namespace for Calculator class {calcClassNamespace?.Name}\", LoggingLevel.Info);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_148":{"__typename":"Paragraph","id":"8dd7ee56865d_148","name":"5782","type":"P","href":null,"layout":null,"metadata":null,"text":"Here, we see the calcClassNamespace enumerates through the parents of the class object until it finds something. However, we did not add any null checks to ensure we had a namespace before continuing. Let’s modify this section of code to handle the nulls and perform a check against the nodes ancestors as well.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":17,"end":35,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_149":{"__typename":"Paragraph","id":"8dd7ee56865d_149","name":"a0a1","type":"PRE","href":null,"layout":null,"metadata":null,"text":"GeneratorLogging.LogMessage(“[+] Added using statements to generated class”);\n \n calcGeneratedClassBuilder.AppendLine();\n \n BaseNamespaceDeclarationSyntax? calcClassNamespace = calculatorClass.DescendantNodes().OfType\u003CNamespaceDeclarationSyntax\u003E().FirstOrDefault() ?? \n (BaseNamespaceDeclarationSyntax?)calculatorClass.DescendantNodes().OfType\u003CFileScopedNamespaceDeclarationSyntax\u003E().FirstOrDefault();\n \n calcClassNamespace ??= calculatorClass.Ancestors().OfType\u003CNamespaceDeclarationSyntax\u003E().FirstOrDefault();\n calcClassNamespace ??= calculatorClass.Ancestors().OfType\u003CFileScopedNamespaceDeclarationSyntax\u003E().FirstOrDefault();\n \n if(calcClassNamespace is null)\n {\n GeneratorLogging.LogMessage(“[-] Could not find namespace for Calculator class”, LoggingLevel.Error);\n }\n GeneratorLogging.LogMessage($”[+] Found namespace for Calculator class {calcClassNamespace?.Name}”);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_150":{"__typename":"Paragraph","id":"8dd7ee56865d_150","name":"38ab","type":"P","href":null,"layout":null,"metadata":null,"text":"This updated version will now search through all of the ancestor nodes to see if the previous checks were null and update them as needed. We should get a log entry to keep troubleshooting issues if they are still null.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_151":{"__typename":"Paragraph","id":"8dd7ee56865d_151","name":"80bf","type":"P","href":null,"layout":null,"metadata":null,"text":"This then gives us a final working source generator of:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:50b108415f0110617e43ced6881796e5":{"__typename":"MediaResource","id":"50b108415f0110617e43ced6881796e5","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"Source Gen, blog part 1, final generator class"},"Paragraph:8dd7ee56865d_152":{"__typename":"Paragraph","id":"8dd7ee56865d_152","name":"f169","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:50b108415f0110617e43ced6881796e5"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_153":{"__typename":"Paragraph","id":"8dd7ee56865d_153","name":"7b26","type":"P","href":null,"layout":null,"metadata":null,"text":"We can test this by modifying the WebApi project we created at the start.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":34,"end":48,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_154":{"__typename":"Paragraph","id":"8dd7ee56865d_154","name":"87a3","type":"P","href":null,"layout":null,"metadata":null,"text":"Open the WebApi program.cs file and modify it to look like this:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":16,"end":27,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"MediaResource:673f0284e8b3088d36d3531400658f7b":{"__typename":"MediaResource","id":"673f0284e8b3088d36d3531400658f7b","iframeSrc":"","iframeHeight":0,"iframeWidth":0,"title":"SourceGen, Post 1, WebAPI, Example Usage"},"Paragraph:8dd7ee56865d_155":{"__typename":"Paragraph","id":"8dd7ee56865d_155","name":"c0f9","type":"IFRAME","href":null,"layout":"INSET_CENTER","metadata":null,"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":{"__typename":"Iframe","mediaResource":{"__ref":"MediaResource:673f0284e8b3088d36d3531400658f7b"}},"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_156":{"__typename":"Paragraph","id":"8dd7ee56865d_156","name":"73e4","type":"P","href":null,"layout":null,"metadata":null,"text":"When we run this project and send a get request to the \u002F URL, we will get back a message with the results from the source-generated methods.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":55,"end":56,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*gHdWBUNPFvEQozxa":{"__typename":"ImageMetadata","id":"0*gHdWBUNPFvEQozxa","originalHeight":715,"originalWidth":1425,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_157":{"__typename":"Paragraph","id":"8dd7ee56865d_157","name":"cb7d","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*gHdWBUNPFvEQozxa"},"text":"API Call Showing the Generated Code Compiled and Executed Correctly","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_158":{"__typename":"Paragraph","id":"8dd7ee56865d_158","name":"a8e8","type":"H3","href":null,"layout":null,"metadata":null,"text":"Conclusion for Part 1","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:0*XR5ezYD0b29SEbwi":{"__typename":"ImageMetadata","id":"0*XR5ezYD0b29SEbwi","originalHeight":196,"originalWidth":257,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:8dd7ee56865d_159":{"__typename":"Paragraph","id":"8dd7ee56865d_159","name":"f082","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:0*XR5ezYD0b29SEbwi"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:8dd7ee56865d_160":{"__typename":"Paragraph","id":"8dd7ee56865d_160","name":"595f","type":"P","href":null,"layout":null,"metadata":null,"text":"I would like to cover many other capabilities of source generators in future parts that help showcase the real power behind them. So, if you enjoyed this first installment, stick around for more in-depth looks at C# source generators.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"CollectionViewerEdge:collectionId:f05f8696e3cc-viewerId:lo_59ab6e7ea0fe":{"__typename":"CollectionViewerEdge","id":"collectionId:f05f8696e3cc-viewerId:lo_59ab6e7ea0fe","isEditor":false,"isMuting":false},"UserViewerEdge:userId:a07d497fb5bc-viewerId:lo_59ab6e7ea0fe":{"__typename":"UserViewerEdge","id":"userId:a07d497fb5bc-viewerId:lo_59ab6e7ea0fe","isMuting":false},"ImageMetadata:1*s-5BWBr8XsgtIU5azKNhZQ.jpeg":{"__typename":"ImageMetadata","id":"1*s-5BWBr8XsgtIU5azKNhZQ.jpeg","originalWidth":2000,"originalHeight":805},"PostViewerEdge:postId:76d619b633f5-viewerId:lo_59ab6e7ea0fe":{"__typename":"PostViewerEdge","shouldIndexPostForExternalSearch":true,"id":"postId:76d619b633f5-viewerId:lo_59ab6e7ea0fe"},"Tag:c-sharp-programming":{"__typename":"Tag","id":"c-sharp-programming","displayTitle":"C Sharp Programming","normalizedTagSlug":"c-sharp-programming"},"Tag:programming":{"__typename":"Tag","id":"programming","displayTitle":"Programming","normalizedTagSlug":"programming"},"Tag:dotnet":{"__typename":"Tag","id":"dotnet","displayTitle":"Dotnet","normalizedTagSlug":"dotnet"},"Tag:dotnet-core":{"__typename":"Tag","id":"dotnet-core","displayTitle":"Dotnet Core","normalizedTagSlug":"dotnet-core"},"Tag:cybersecurity":{"__typename":"Tag","id":"cybersecurity","displayTitle":"Cybersecurity","normalizedTagSlug":"cybersecurity"},"Post:76d619b633f5":{"__typename":"Post","id":"76d619b633f5","collection":{"__ref":"Collection:f05f8696e3cc"},"content({\"postMeteringOptions\":{}})":{"__typename":"PostContent","isLockedPreviewOnly":false,"bodyModel":{"__typename":"RichText","sections":[{"__typename":"Section","name":"7d0b","startIndex":0,"textLayout":null,"imageLayout":null,"backgroundImage":null,"videoLayout":null,"backgroundVideo":null}],"paragraphs":[{"__ref":"Paragraph:8dd7ee56865d_0"},{"__ref":"Paragraph:8dd7ee56865d_1"},{"__ref":"Paragraph:8dd7ee56865d_2"},{"__ref":"Paragraph:8dd7ee56865d_3"},{"__ref":"Paragraph:8dd7ee56865d_4"},{"__ref":"Paragraph:8dd7ee56865d_5"},{"__ref":"Paragraph:8dd7ee56865d_6"},{"__ref":"Paragraph:8dd7ee56865d_7"},{"__ref":"Paragraph:8dd7ee56865d_8"},{"__ref":"Paragraph:8dd7ee56865d_9"},{"__ref":"Paragraph:8dd7ee56865d_10"},{"__ref":"Paragraph:8dd7ee56865d_11"},{"__ref":"Paragraph:8dd7ee56865d_12"},{"__ref":"Paragraph:8dd7ee56865d_13"},{"__ref":"Paragraph:8dd7ee56865d_14"},{"__ref":"Paragraph:8dd7ee56865d_15"},{"__ref":"Paragraph:8dd7ee56865d_16"},{"__ref":"Paragraph:8dd7ee56865d_17"},{"__ref":"Paragraph:8dd7ee56865d_18"},{"__ref":"Paragraph:8dd7ee56865d_19"},{"__ref":"Paragraph:8dd7ee56865d_20"},{"__ref":"Paragraph:8dd7ee56865d_21"},{"__ref":"Paragraph:8dd7ee56865d_22"},{"__ref":"Paragraph:8dd7ee56865d_23"},{"__ref":"Paragraph:8dd7ee56865d_24"},{"__ref":"Paragraph:8dd7ee56865d_25"},{"__ref":"Paragraph:8dd7ee56865d_26"},{"__ref":"Paragraph:8dd7ee56865d_27"},{"__ref":"Paragraph:8dd7ee56865d_28"},{"__ref":"Paragraph:8dd7ee56865d_29"},{"__ref":"Paragraph:8dd7ee56865d_30"},{"__ref":"Paragraph:8dd7ee56865d_31"},{"__ref":"Paragraph:8dd7ee56865d_32"},{"__ref":"Paragraph:8dd7ee56865d_33"},{"__ref":"Paragraph:8dd7ee56865d_34"},{"__ref":"Paragraph:8dd7ee56865d_35"},{"__ref":"Paragraph:8dd7ee56865d_36"},{"__ref":"Paragraph:8dd7ee56865d_37"},{"__ref":"Paragraph:8dd7ee56865d_38"},{"__ref":"Paragraph:8dd7ee56865d_39"},{"__ref":"Paragraph:8dd7ee56865d_40"},{"__ref":"Paragraph:8dd7ee56865d_41"},{"__ref":"Paragraph:8dd7ee56865d_42"},{"__ref":"Paragraph:8dd7ee56865d_43"},{"__ref":"Paragraph:8dd7ee56865d_44"},{"__ref":"Paragraph:8dd7ee56865d_45"},{"__ref":"Paragraph:8dd7ee56865d_46"},{"__ref":"Paragraph:8dd7ee56865d_47"},{"__ref":"Paragraph:8dd7ee56865d_48"},{"__ref":"Paragraph:8dd7ee56865d_49"},{"__ref":"Paragraph:8dd7ee56865d_50"},{"__ref":"Paragraph:8dd7ee56865d_51"},{"__ref":"Paragraph:8dd7ee56865d_52"},{"__ref":"Paragraph:8dd7ee56865d_53"},{"__ref":"Paragraph:8dd7ee56865d_54"},{"__ref":"Paragraph:8dd7ee56865d_55"},{"__ref":"Paragraph:8dd7ee56865d_56"},{"__ref":"Paragraph:8dd7ee56865d_57"},{"__ref":"Paragraph:8dd7ee56865d_58"},{"__ref":"Paragraph:8dd7ee56865d_59"},{"__ref":"Paragraph:8dd7ee56865d_60"},{"__ref":"Paragraph:8dd7ee56865d_61"},{"__ref":"Paragraph:8dd7ee56865d_62"},{"__ref":"Paragraph:8dd7ee56865d_63"},{"__ref":"Paragraph:8dd7ee56865d_64"},{"__ref":"Paragraph:8dd7ee56865d_65"},{"__ref":"Paragraph:8dd7ee56865d_66"},{"__ref":"Paragraph:8dd7ee56865d_67"},{"__ref":"Paragraph:8dd7ee56865d_68"},{"__ref":"Paragraph:8dd7ee56865d_69"},{"__ref":"Paragraph:8dd7ee56865d_70"},{"__ref":"Paragraph:8dd7ee56865d_71"},{"__ref":"Paragraph:8dd7ee56865d_72"},{"__ref":"Paragraph:8dd7ee56865d_73"},{"__ref":"Paragraph:8dd7ee56865d_74"},{"__ref":"Paragraph:8dd7ee56865d_75"},{"__ref":"Paragraph:8dd7ee56865d_76"},{"__ref":"Paragraph:8dd7ee56865d_77"},{"__ref":"Paragraph:8dd7ee56865d_78"},{"__ref":"Paragraph:8dd7ee56865d_79"},{"__ref":"Paragraph:8dd7ee56865d_80"},{"__ref":"Paragraph:8dd7ee56865d_81"},{"__ref":"Paragraph:8dd7ee56865d_82"},{"__ref":"Paragraph:8dd7ee56865d_83"},{"__ref":"Paragraph:8dd7ee56865d_84"},{"__ref":"Paragraph:8dd7ee56865d_85"},{"__ref":"Paragraph:8dd7ee56865d_86"},{"__ref":"Paragraph:8dd7ee56865d_87"},{"__ref":"Paragraph:8dd7ee56865d_88"},{"__ref":"Paragraph:8dd7ee56865d_89"},{"__ref":"Paragraph:8dd7ee56865d_90"},{"__ref":"Paragraph:8dd7ee56865d_91"},{"__ref":"Paragraph:8dd7ee56865d_92"},{"__ref":"Paragraph:8dd7ee56865d_93"},{"__ref":"Paragraph:8dd7ee56865d_94"},{"__ref":"Paragraph:8dd7ee56865d_95"},{"__ref":"Paragraph:8dd7ee56865d_96"},{"__ref":"Paragraph:8dd7ee56865d_97"},{"__ref":"Paragraph:8dd7ee56865d_98"},{"__ref":"Paragraph:8dd7ee56865d_99"},{"__ref":"Paragraph:8dd7ee56865d_100"},{"__ref":"Paragraph:8dd7ee56865d_101"},{"__ref":"Paragraph:8dd7ee56865d_102"},{"__ref":"Paragraph:8dd7ee56865d_103"},{"__ref":"Paragraph:8dd7ee56865d_104"},{"__ref":"Paragraph:8dd7ee56865d_105"},{"__ref":"Paragraph:8dd7ee56865d_106"},{"__ref":"Paragraph:8dd7ee56865d_107"},{"__ref":"Paragraph:8dd7ee56865d_108"},{"__ref":"Paragraph:8dd7ee56865d_109"},{"__ref":"Paragraph:8dd7ee56865d_110"},{"__ref":"Paragraph:8dd7ee56865d_111"},{"__ref":"Paragraph:8dd7ee56865d_112"},{"__ref":"Paragraph:8dd7ee56865d_113"},{"__ref":"Paragraph:8dd7ee56865d_114"},{"__ref":"Paragraph:8dd7ee56865d_115"},{"__ref":"Paragraph:8dd7ee56865d_116"},{"__ref":"Paragraph:8dd7ee56865d_117"},{"__ref":"Paragraph:8dd7ee56865d_118"},{"__ref":"Paragraph:8dd7ee56865d_119"},{"__ref":"Paragraph:8dd7ee56865d_120"},{"__ref":"Paragraph:8dd7ee56865d_121"},{"__ref":"Paragraph:8dd7ee56865d_122"},{"__ref":"Paragraph:8dd7ee56865d_123"},{"__ref":"Paragraph:8dd7ee56865d_124"},{"__ref":"Paragraph:8dd7ee56865d_125"},{"__ref":"Paragraph:8dd7ee56865d_126"},{"__ref":"Paragraph:8dd7ee56865d_127"},{"__ref":"Paragraph:8dd7ee56865d_128"},{"__ref":"Paragraph:8dd7ee56865d_129"},{"__ref":"Paragraph:8dd7ee56865d_130"},{"__ref":"Paragraph:8dd7ee56865d_131"},{"__ref":"Paragraph:8dd7ee56865d_132"},{"__ref":"Paragraph:8dd7ee56865d_133"},{"__ref":"Paragraph:8dd7ee56865d_134"},{"__ref":"Paragraph:8dd7ee56865d_135"},{"__ref":"Paragraph:8dd7ee56865d_136"},{"__ref":"Paragraph:8dd7ee56865d_137"},{"__ref":"Paragraph:8dd7ee56865d_138"},{"__ref":"Paragraph:8dd7ee56865d_139"},{"__ref":"Paragraph:8dd7ee56865d_140"},{"__ref":"Paragraph:8dd7ee56865d_141"},{"__ref":"Paragraph:8dd7ee56865d_142"},{"__ref":"Paragraph:8dd7ee56865d_143"},{"__ref":"Paragraph:8dd7ee56865d_144"},{"__ref":"Paragraph:8dd7ee56865d_145"},{"__ref":"Paragraph:8dd7ee56865d_146"},{"__ref":"Paragraph:8dd7ee56865d_147"},{"__ref":"Paragraph:8dd7ee56865d_148"},{"__ref":"Paragraph:8dd7ee56865d_149"},{"__ref":"Paragraph:8dd7ee56865d_150"},{"__ref":"Paragraph:8dd7ee56865d_151"},{"__ref":"Paragraph:8dd7ee56865d_152"},{"__ref":"Paragraph:8dd7ee56865d_153"},{"__ref":"Paragraph:8dd7ee56865d_154"},{"__ref":"Paragraph:8dd7ee56865d_155"},{"__ref":"Paragraph:8dd7ee56865d_156"},{"__ref":"Paragraph:8dd7ee56865d_157"},{"__ref":"Paragraph:8dd7ee56865d_158"},{"__ref":"Paragraph:8dd7ee56865d_159"},{"__ref":"Paragraph:8dd7ee56865d_160"}]},"validatedShareKey":"","shareKeyCreator":null},"creator":{"__ref":"User:a07d497fb5bc"},"inResponseToEntityType":null,"isLocked":false,"isMarkedPaywallOnly":false,"lockedSource":"LOCKED_POST_SOURCE_NONE","mediumUrl":"https:\u002F\u002Fposts.specterops.io\u002Fdotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5","primaryTopic":null,"topics":[{"__typename":"Topic","slug":"programming"}],"isPublished":true,"latestPublishedVersion":"8dd7ee56865d","visibility":"PUBLIC","postResponses":{"__typename":"PostResponses","count":2},"clapCount":22,"allowResponses":true,"isLimitedState":false,"title":"Dotnet Source Generators in 2024 Part 1: Getting Started","isSeries":false,"sequence":null,"uniqueSlug":"dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5","socialTitle":"","socialDek":"","canonicalUrl":"","metaDescription":"","latestPublishedAt":1727964438062,"readingTime":16.332075471698115,"previewContent":{"__typename":"PreviewContent","subtitle":"Introduction"},"previewImage":{"__ref":"ImageMetadata:0*sAAfVq4rGtGduDRs"},"isShortform":false,"seoTitle":"Incremental Source Generators in .NET","firstPublishedAt":1727806232085,"updatedAt":1731701110297,"shortformType":"SHORTFORM_TYPE_LINK","seoDescription":"","viewerEdge":{"__ref":"PostViewerEdge:postId:76d619b633f5-viewerId:lo_59ab6e7ea0fe"},"isSuspended":false,"license":"ALL_RIGHTS_RESERVED","tags":[{"__ref":"Tag:c-sharp-programming"},{"__ref":"Tag:programming"},{"__ref":"Tag:dotnet"},{"__ref":"Tag:dotnet-core"},{"__ref":"Tag:cybersecurity"}],"isNewsletter":false,"statusForCollection":"APPROVED","pendingCollection":null,"detectedLanguage":"en","wordCount":4010,"layerCake":4,"responsesLocked":false}}</script><script src="https://cdn-client.medium.com/lite/static/js/manifest.48bdf878.js"></script><script src="https://cdn-client.medium.com/lite/static/js/9865.1496d74a.js"></script><script src="https://cdn-client.medium.com/lite/static/js/main.872afbe3.js"></script><script src="https://cdn-client.medium.com/lite/static/js/instrumentation.d9108df7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/reporting.ff22a7a5.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9120.5df29668.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5049.d1ead72d.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4810.6318add7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6618.db187378.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2707.a4e221ac.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9977.933c1c9a.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8599.73cb8339.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5250.9f9e01d2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9898.d9e26c5e.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2648.26563adf.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8393.826a25fb.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4863.28ab43f6.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6589.247b1d02.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5642.0f82ef97.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6546.cd03f950.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6834.8aa8d357.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2420.2a5e2d95.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/839.1c286b32.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7975.60bcefe8.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2106.0350840b.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7394.73a57633.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5794.9e8ff5dd.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8204.7749bc66.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4391.59acaed3.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/PostPage.MainContent.2dc8b1c6.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8414.6565ad5f.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/3974.8d3e0217.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2527.d5e0c2f5.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/PostResponsesContent.7ad7ca92.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/responses.editor.5a11f4da.chunk.js"></script><script>window.main();</script></body></html>