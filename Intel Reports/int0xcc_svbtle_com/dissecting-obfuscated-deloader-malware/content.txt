<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Dissecting DEloader malware with obfuscation </title>
  <script>(function(d) {var config = {kitId: 'tze3uwp',scriptTimeout: 1000,async: true},h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)})(document);</script>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="shortcut icon" href="https://lightning.svbtle.com/cargo/favicon-3686f5990e669ad2a1684f0ac250c4d9ddc03e2ef6f3c980f17b7aae786833ef.ico">
  <link rel="icon" sizes="196x196" href="https://lightning.svbtle.com/cargo/apple-touch-icon-8ed2bd858a30400ead0535543ffb8ad2ab3e036a2f0adb797dc641458d00a41a.png">
  <link rel="mask-icon" href="https://lightning.svbtle.com/cargo/default-b7e7b5361ab4c50a9ceb6dc296e0f157e2ec9c2f2c6f30832d991dc361d69512.svg" color="black">
  <meta name="generator" content="Svbtle.com" />
  <meta name="description" content="DEloader is a loader malware which is mostly used to load Zeus banking trojan . It is a stealth malware designed to keep the payload hidden and encrypted in the memory . A payload is dynamically retrieved from a remote https server So far there... | Raashid  Bhat | Malware Research Blog."/>
  <link rel="canonical" href="https://int0xcc.svbtle.com/dissecting-obfuscated-deloader-malware" />
  <meta property="og:url" content="https://int0xcc.svbtle.com/dissecting-obfuscated-deloader-malware" />
  <meta property="twitter:site" content="@svbtle" />
  <meta property="twitter:title" content="Dissecting DEloader malware with obfuscation " />
  <meta property="twitter:description" content="DEloader is a loader malware which is mostly used to load Zeus banking trojan . It is a stealth malware designed to keep the payload hidden and encrypted in the memory . A payload is dynamically retrieved from a remote https server So far there..." />
  <meta property="twitter:creator" content="@raashidbhatt" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:image" content="https://svbtleusercontent.com/kLUj89gtBtPXZC2J4avjRg0xspap.png" />
  <meta property="twitter:domain" content="https://int0xcc.svbtle.com" />
  <meta property="og:title" content="Dissecting DEloader malware with obfuscation  &bull; Raashid  Bhat" />
  <meta property="og:type" content="article" />
  <meta property="og:description" content="DEloader is a loader malware which is mostly used to load Zeus banking trojan . It is a stealth malware designed to keep the payload hidden and encrypted in the memory . A payload is dynamically retrieved from a remote https server So far there... | Raashid  Bhat | Malware Research Blog." />
  <meta property="og:image" content="https://svbtleusercontent.com/kLUj89gtBtPXZC2J4avjRg0xspap.png" />
  <meta property="og:site_name" content="Raashid  Bhat on Svbtle" />
  <meta property="fb:app_id" content="346346195413177" />
  <link rel="alternate" type="application/rss+xml" href="https://int0xcc.svbtle.com/feed" />
  <link rel="stylesheet" href="https://lightning.svbtle.com/cargo/legacy/build.blog-120c367e4cc2cdf2d031c71f795ecea0ef4033f8b24d12d8e147c86e08e2ed2a.css" media="all" data-turbolinks-track="reload" />
  <script src="https://lightning.svbtle.com/cargo/build.blog-41a284c81b4230cd8ab812d35fabef8cc99e927407ed15604d3206997ef79818.js" data-turbolinks-track="reload"></script>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-VGMRYDBB5R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('set', 'linker', {
    'accept_incoming': true
  });
  gtag('config', 'G-VGMRYDBB5R');
</script>  <script src="https://lightning.svbtle.com/cargo/share_buttons-dd547cdb8c37c1c5b949d9a5f034ef854d39634831852762b3d730f59a9e47d4.js" data-turbolinks-track="true"></script>
  <script src="//platform.twitter.com/widgets.js" async></script>
</head>
<body class="overlord blog">
<style scoped>
figure.avatar a,
figure#user_logo a,
figure#user_foot a,
nav#overlord.user_top figure#logo_top a,
figure.kudo.complete div.filling {
  background-image: url('https://svbtleusercontent.com/x75cXsjA0QTd7zEA5JgXxUsrIcozqt8Iyw_medium.jpg')
}

figure.kudo.activated div.filling,
figure.kudo.complete div.filling {
  background-color: #668194;
}

figure.kudo.activated a,
figure.kudo.complete a {
  border-color: #668194;
}

blockquote,
a blockquote,
div#readnext:hover span.flank_title,
div#foot_more:hover a,
div#foot_userbar a#bottom_tagline span:hover,
article.linked h1.article_title a:hover,
a.continue_button:hover,
article p a:hover,
ul#lightning_drop,
figure#user_foot,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
section#readnext:hover p span,
nav#overlord.user_top figure#logo_top {
  border-color: #668194;
}
/*figure#user_logo,*/

figure.avatar,
nav#overlord.user_top figure#logo_top a,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
figure#user_logo a,
figure#user_foot a  {
	background-color: #668194;
}

h6.separator_title.read_first,
header#user_top h2 a,
footer#blog_foot h5 a,
article.post h1 a:hover,
div.preview strong,
nav#overlord h2#nav_title.user_top a,
section#readnext:hover h3,
section#readnext:hover p span {
  color: #668194;
}

@keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}

@-moz-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}

@-webkit-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}


</style>

<figure id="loading">&nbsp;</figure>
<nav id="overlord" class="user_top">
  <div id="lockup" class="">
    <figure id="logo_top" class=" user_top">
      <a href="/">Svbtle</a>
    </figure>
    <h2 id="nav_title" class="user_top"><a href="https://int0xcc.svbtle.com">Raashid  Bhat</a></h2>
  </div>
  <figure id="hamburger">
    <a href="#menu" id="hamburger_button">Menu</a>
  </figure>
  <ul id="dropdown" class="onblog">
    <li class="dropdown_message">
     <a href="https://svbtle.com">Raashid  Bhat is writing on the <span class="logoize">Svbtle</span> network.</a>
    </li>
    <li><a href="https://www.linkedin.com/in/raashid-bhat/"  target="_blank">linkedin.com/in/ra...</a></li>
    <li><a href="https://x.com/raashidbhatt" class="xdotcom" target="_blank">@raashidbhatt</a></li>
    <li><a href="https://github.com/raashidbhatt" class="github" target="_blank">raashidbhatt</a></li>
    <li><a href="mailto:raashidbhatt@gmail.com?subject=hi%20from%20svbtle">say&nbsp;hello</a></li>
    <li><a href="/feed">rss feed</a></li>
    <li style="margin: 0; padding: 0;"><hr class="overlord_nav" /></li>
    <li><a href="https://svbtle.com/about">about svbtle</a></li>
    <li><a href="https://svbtle.com/signup">sign up</a></li>
  </ul>
</nav>
<div id="whiteout"></div>

<section id="container" class="blog user_post">
  <article id="ovZXYhWHi2D8bd3MpMobBH" class="post  historical">
	<time datetime="2018-09-06" class="article_time">September  6, 2018</time>
  <h1 class="article_title">
    <a href="https://int0xcc.svbtle.com/dissecting-obfuscated-deloader-malware">Dissecting DEloader malware with obfuscation </a>
  </h1>
	<p>DEloader is a loader malware which is mostly used to load Zeus banking trojan .  It  is a stealth malware designed to keep the payload hidden and encrypted in the memory .  A payload is dynamically retrieved from a remote https server   So far there have been 3 versions of DEloader captured in the wild . Version <strong>0x10E0700</strong> ,  <strong>0x1050500h</strong> and <strong>0x1120300h</strong>. More recently in version <strong>0x1120300h</strong> they added code obfuscation </p>

<p>Main loader file is a DLL with export named as <strong>‘start’</strong> or <strong>‘begin’</strong> . These exports are called by packer . Essentially because this DLL is memory loaded image , imports and images are relocated via the code in these exports <br>
<a href="https://svbtleusercontent.com/kLUj89gtBtPXZC2J4avjRg0xspap.png"><img src="https://svbtleusercontent.com/kLUj89gtBtPXZC2J4avjRg0xspap_small.png" alt="1.png"></a></p>

<p>Earlier version included a share file map as a marker for infection . Shared file mapping would contain necessary information for the Deloader to run<br>
<a href="https://svbtleusercontent.com/5oa7ffJPanQe5JRfL5FTd90xspap.png"><img src="https://svbtleusercontent.com/5oa7ffJPanQe5JRfL5FTd90xspap_small.png" alt="2.png"></a></p>

<p>If the mapping is found,  the data from the map is fed to decoding algorithm which is based on Rc4 and decodes using a fixed state buffer . This Algorithm is later used to decode buffer downloaded from c2 .<br>
<a href="https://svbtleusercontent.com/8cmebqjVSyCu8Q45VCJCV50xspap.png"><img src="https://svbtleusercontent.com/8cmebqjVSyCu8Q45VCJCV50xspap_small.png" alt="image4-23.png"></a></p>

<p>Buffer can be either downloaded from c2 or the previously saved one is extracted from registry , which is later decoded using an embedded  rc4 state buffer . </p>

<p><a href="https://svbtleusercontent.com/jKNfgcrk6fwYx1xgz3mEhX0xspap.png"><img src="https://svbtleusercontent.com/jKNfgcrk6fwYx1xgz3mEhX0xspap_small.png" alt="image5-25.png"></a></p>

<p><a href="https://svbtleusercontent.com/3vRXY6QFPRGXYaN3TrzZW80xspap.png"><img src="https://svbtleusercontent.com/3vRXY6QFPRGXYaN3TrzZW80xspap_small.png" alt="image6-27.png"></a></p>

<p>C2’s are present in an embedded structure known baseconifg which consists configuration and c2’s address necessary for the loader to operate . In both the versions static config in encoded state </p>

<p>It can have single or multiple c2’s  . Each of them is separated by a semi-colon ‘;’ .   <br>
In earlier versions c2 url was present as an encoded resource on a remote https server . And was downloaded using a get HTTP/HTTPSs request </p>

<p><a href="https://svbtleusercontent.com/wSnfAHoniiyMRGeQtqwyFm0xspap.png"><img src="https://svbtleusercontent.com/wSnfAHoniiyMRGeQtqwyFm0xspap_small.png" alt="image7-29.png"></a></p>

<p>However in the latest version,  it includes a URL where encoded system internal data is posted and in return an encoded data buff is returned back . <br>
<a href="https://svbtleusercontent.com/6NhvwRRwvNtfn79uT7rWzh0xspap.png"><img src="https://svbtleusercontent.com/6NhvwRRwvNtfn79uT7rWzh0xspap_small.png" alt="image8-31.png"></a></p>

<p>This data is encoded with the same rc4state buffer extracted from static config embedded in the binary .Depending upon an internal flag it could be compressed as well . The compression algorithm used is unrv2b which happens to be the same one used in traditional Zeus malware .Also integrity of data is checked against a CRC32 hash DWORD present at the end of the data packet <br>
raw response can  represented as </p>

<pre><code class="prettyprint">struct RawResponse
{
        BYTE Data[len - 4];
        DWORD CRC32Data;

};



 struct 
{
        __int64 DecompressionLength;
        BYTE CompressedData[]
};
</code></pre>

<p><a href="https://svbtleusercontent.com/qEiwhcJ5e35LitegaSWZN80xspap.png"><img src="https://svbtleusercontent.com/qEiwhcJ5e35LitegaSWZN80xspap_small.png" alt="image9-33.png"></a><br>
After decompression data packet is arranged in a structure which consists of </p>

<pre><code class="prettyprint">struct InternalC2Parsed
{
        unsigned int PlaceHolder = 0x1000000;
        unsigned int Version; // 4
        void *PEBuffer_32bit; 
        unsigned int PEBuffer_32bit_len; 
        void *PEBuffer_64bit;  
        unsigned int PEBuffer_64bit_len;
        void *C2StructDecompressed;  
        int C2StructDecompressed_len; 

};
</code></pre>

<p>Depending upon the type of system a particular type of payload(32bit or 64bit ) payload in injected in process memory . If the system happens to be 64bit , a well known technique “heavens gate” is used to inject to 64bit process from a 32 bit running process<br>
  <br>
<a href="https://svbtleusercontent.com/iqGb42fmLbjocYKtXu6Z3Y0xspap.png"><img src="https://svbtleusercontent.com/iqGb42fmLbjocYKtXu6Z3Y0xspap_small.png" alt="image10-35.png"></a></p>

<p>Following python script demonstrates the ability to decode and decompress </p>

<pre><code class="prettyprint">#!/usr/bin/env python

import ucl
def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]  # swap


        K = S[(S[i] + S[j]) % 256]
        yield K


if __name__ == '__main__':
    plaintext = open("Bindata", "rb").read()
    import array

    keystream = [
    0xD7, 0x81, 0x83, 0xA6, 0x59, 0x4B, 0x88, 0x32, 0xFB, 0x8D, 0x7A, 0x64, 0x08, 0x9F, 0x6D, 0x01,
    0x2C, 0xD8, 0x50, 0xCE, 0xA3, 0x4A, 0xF9, 0x21, 0x40, 0x91, 0xE4, 0x28, 0x22, 0xAA, 0x41, 0x0D,
    0x68, 0x44, 0xA7, 0xB8, 0xA5, 0xFE, 0x3A, 0x2F, 0x7C, 0xDA, 0x37, 0x94, 0x46, 0x92, 0x86, 0x0A,
    0x25, 0xEA, 0x45, 0xB1, 0xAE, 0x7B, 0xE2, 0x3F, 0xBC, 0x7D, 0x84, 0x9A, 0xE5, 0x77, 0x0F, 0xA2,
    0xDD, 0x1A, 0x5F, 0xFA, 0x78, 0x67, 0x12, 0x02, 0x03, 0x3B, 0x65, 0x62, 0xF5, 0xBE, 0x8C, 0x27,
    0x9D, 0x69, 0xA8, 0x56, 0x5E, 0xE6, 0x61, 0xFF, 0x72, 0x5C, 0x19, 0xD6, 0xD4, 0x6A, 0x52, 0xD2,
    0xDC, 0x55, 0xDF, 0x70, 0x18, 0x0C, 0xEE, 0x87, 0x95, 0x07, 0xA1, 0x05, 0xA4, 0x5D, 0xE1, 0x06,
    0xB0, 0xC0, 0x29, 0x80, 0x53, 0xE7, 0xE3, 0x93, 0x16, 0xF2, 0x1B, 0x96, 0xDB, 0x90, 0xAC, 0xF6,
    0x7E, 0x6F, 0xF1, 0x6C, 0xB6, 0xF4, 0x63, 0xB3, 0x8A, 0xC3, 0xFC, 0x8F, 0x1F, 0x3D, 0x9C, 0x2B,
    0xB9, 0xCB, 0x35, 0x2D, 0xA0, 0xC6, 0x74, 0xFD, 0xBF, 0x23, 0xEB, 0xB5, 0x89, 0x82, 0x30, 0xBB,
    0x0B, 0x76, 0x17, 0x4F, 0x4E, 0x1E, 0xD9, 0x58, 0x13, 0x6B, 0x26, 0x9E, 0xD0, 0xE0, 0x48, 0xF0,
    0x6E, 0xB4, 0x0E, 0xC4, 0xEC, 0x00, 0xD1, 0xCF, 0xC8, 0x7F, 0x20, 0x38, 0x79, 0xCD, 0x49, 0xC7,
    0x47, 0xED, 0x31, 0xCA, 0xC1, 0x39, 0xC9, 0x98, 0x1D, 0x33, 0x5A, 0x3E, 0x51, 0x4C, 0x8B, 0x24,
    0xB2, 0xB7, 0x4D, 0xE8, 0x54, 0xEF, 0x9B, 0xC5, 0x09, 0xF7, 0x2A, 0x3C, 0xBD, 0x36, 0x71, 0x2E,
    0x15, 0xF3, 0xA9, 0x60, 0x10, 0xAF, 0xC2, 0x73, 0x97, 0x34, 0x66, 0x99, 0x8E, 0xDE, 0xAD, 0xAB,
    0xBA, 0xF8, 0x11, 0xD5, 0x75, 0x43, 0x57, 0x04, 0xCC, 0xE9, 0x42, 0x85, 0x14, 0x1C, 0x5B, 0xD3 
]

    arr = array.array("B", keystream)
    keystream = PRGA(arr)
    import sys
    finBuf = array.array("B")

    i = 0
    for c in plaintext:

        finBuf.append(ord(c) ^ keystream.next())

        i = i + 1

    open("FinalData.bin", "wb").write(finBuf.tostring())
</code></pre>

<p>and to finally decomrpess the data we can use CTYPES to call the  following subroutine in python  <br>
<a href="https://github.com/wt/coreboot/blob/master/payloads/bayou/nrv2b.c">https://github.com/wt/coreboot/blob/master/payloads/bayou/nrv2b.c</a></p>

<pre><code class="prettyprint">#ifndef ENDIAN
#define ENDIAN   0
#endif
#ifndef BITSIZE
#define BITSIZE 32
#endif

#define GETBIT_8(bb, src, ilen) \
    (((bb = bb &amp; 0x7f ? bb*2 : ((unsigned)src[ilen++]*2+1)) &gt;&gt; 8) &amp; 1)

#define GETBIT_LE16(bb, src, ilen) \
    (bb*=2,bb&amp;0xffff ? (bb&gt;&gt;16)&amp;1 : (ilen+=2,((bb=(src[ilen-2]+src[ilen-1]*256)*2+1)&gt;&gt;16)&amp;1))
#define GETBIT_LE32(bb, src, ilen) \
    (bc &gt; 0 ? ((bb&gt;&gt;--bc)&amp;1) : (bc=31,\
    bb=*(const uint32_t *)((src)+ilen),ilen+=4,(bb&gt;&gt;31)&amp;1))

#if ENDIAN == 0 &amp;&amp; BITSIZE == 8
#define GETBIT(bb, src, ilen) GETBIT_8(bb, src, ilen)
#endif
#if ENDIAN == 0 &amp;&amp; BITSIZE == 16
#define GETBIT(bb, src, ilen) GETBIT_LE16(bb, src, ilen)
#endif
#if ENDIAN == 0 &amp;&amp; BITSIZE == 32
#define GETBIT(bb, src, ilen) GETBIT_LE32(bb, src, ilen)
#endif

static unsigned long unrv2b(uint8_t * src, uint8_t * dst, unsigned long *ilen_p)
{
        unsigned long ilen = 0, olen = 0, last_m_off = 1;
        uint32_t bb = 0;
        unsigned bc = 0;
        const uint8_t *m_pos;

        // skip length
        src += 4;
        /* FIXME: check olen with the length stored in first 4 bytes */

        for (;;) {
                unsigned int m_off, m_len;
                while (GETBIT(bb, src, ilen)) {
                        dst[olen++] = src[ilen++];
                }

                m_off = 1;
                do {
                        m_off = m_off * 2 + GETBIT(bb, src, ilen);
                } while (!GETBIT(bb, src, ilen));
                if (m_off == 2) {
                        m_off = last_m_off;
                } else {
                        m_off = (m_off - 3) * 256 + src[ilen++];
                        if (m_off == 0xffffffffU)
                                break;
                        last_m_off = ++m_off;
                }

                m_len = GETBIT(bb, src, ilen);
                m_len = m_len * 2 + GETBIT(bb, src, ilen);
                if (m_len == 0) {
                        m_len++;
                        do {
                                m_len = m_len * 2 + GETBIT(bb, src, ilen);
                        } while (!GETBIT(bb, src, ilen));
                        m_len += 2;
                }
                m_len += (m_off &gt; 0xd00);

                m_pos = dst + olen - m_off;
                dst[olen++] = *m_pos++;
                do {
                        dst[olen++] = *m_pos++;
                } while (--m_len &gt; 0);
        }

        *ilen_p = ilen;

        return olen;

}
</code></pre>

<p>Finally after decoding and decompression a vaid PE file is obtained . A file size of 1.05MB.</p>

<p><a href="https://svbtleusercontent.com/dBAL6WkaR1EyN8UrRZeLQs0xspap.png"><img src="https://svbtleusercontent.com/dBAL6WkaR1EyN8UrRZeLQs0xspap_small.png" alt="image11-37.png"></a></p>
<h2 id="source-code-level-obfuscation_2">Source code level  obfuscation . <a class="head_anchor" href="#source-code-level-obfuscation_2">#</a></h2>
<p>In a more recent version 0x1120300h source code level obfuscation was added . This type of obfuscation is known as opaque predicates which makes the process of reverse engineering bit  difficult . The basic Idea behind this technique is to include calculation based comparison instruction which end with a conditional jump , which are not the part of the original code , but are the part of code path . </p>

<p>In the images below a comparison is shown between a CRC32() function in version  <strong>0x1120300h</strong> and an earlier version  <strong>0x1050500h</strong>. Which demonstrates the multiple junk instructs and paths added with inclusion of opaque predicates</p>

<p><a href="https://svbtleusercontent.com/tjYaykaLCYVC5pHki8nWMu0xspap.png"><img src="https://svbtleusercontent.com/tjYaykaLCYVC5pHki8nWMu0xspap_small.png" alt="image12-39.png"></a></p>

<p>This happens to be quite evident in the entropy comparison of the binary in whole .<br>
<a href="https://svbtleusercontent.com/uRbHqF466psp66bY8XpiK70xspap.png"><img src="https://svbtleusercontent.com/uRbHqF466psp66bY8XpiK70xspap_small.png" alt="image13-41.png"></a></p>

<p>Even the downloaded payload which happens to be a version of traditional Zeus banking malware is also obfuscated , which generally in its unpacked form is detected by most of then antivirus scans , but due to code level obfuscation is marked clean by most of the major anti virus engines <br>
<a href="https://svbtleusercontent.com/aGexP44eduShbbrHnxvDbL0xspap.png"><img src="https://svbtleusercontent.com/aGexP44eduShbbrHnxvDbL0xspap_small.png" alt="image14-43.png"></a></p>

<p>conclusion :</p>

<p>Deloader is still under heavy development . DeLoader has consistently evolved since past few years . With the addition of a hard obfuscation technique is it quite sure that the authors of deloader want to make this analysis hard  and apparently makes it slip the anti virus filter . The use of encryption and compression make the data sent around the command and control server cryptic and hard to detect using a pattern . The payload which s mostly being delivered is a financial malware , designed to steal banking credentials , which makes it clear that authors are inclined towards monetization of injecting machines  .</p>

  <figure class="postend kudo able clearfix" id="kudo_ovZXYhWHi2D8bd3MpMobBH">
    <a href="#kudo">
      <div class="filling">&nbsp;</div>
    </a>
    <div class="num">15</div>
    <div class="txt">Kudos</div>
  </figure>
  <figure class="side kudo able clearfix" id="kudo_side_ovZXYhWHi2D8bd3MpMobBH">
    <a href="#kudo">
      <div class="filling">&nbsp;</div>
    </a>
    <div class="num">15</div>
    <div class="txt">Kudos</div>
  </figure>
</article>

  <div id="share_links" data-no-turbolink>
    <a href="https://twitter.com/share" class="twitter-share-button" data-via="raashidbhatt" data-related="svbtle" data-no-turbolink>Tweet</a>
    <div style="margin-top: 4px; margin-bottom: 8px; margin-left: 0px; display: block;" class="fb-share-button" data-href="https://int0xcc.svbtle.com/dissecting-obfuscated-deloader-malware" data-layout="button_count" data-no-turbolink></div>
  <div>
</section>
<section id="readnext">
  <a href="https://int0xcc.svbtle.com/cutwail-malware-with-a-crash-reporting-feature">
    <h4 class="readnext_header">Now read this</h4>
    <h3 class="readnext_title">Cutwail : Malware With a Crash Reporting Feature.</h3>
    <p class="readnext_content">Cutwail Spam component is a part of PushDo Botnet . Recently I was analysing Cutwail and came across an interesting patch reporting functionality in Cutwail . It starts with Fixing IAT ( Import Address Table ) to correct corresponding... <span class="continue_btn">Continue&nbsp;&rarr;</span></p>
  </a>
</section>
<footer id="blog_foot" class="cf">
  <ul id="foot_links">
    <li><a href="https://x.com/raashidbhatt">@raashidbhatt</a></li>
    <li><a href="mailto:raashidbhatt@gmail.com?subject=Svbtle">say hello</a></li>
    <li><a href="https://www.linkedin.com/in/raashid-bhat/" >linkedin.com/in/ra...</a></li>
  </ul>
  <figure id="user_foot"><a href="/">Svbtle</a></figure>
  <h5><a href="https://int0xcc.svbtle.com">Raashid  Bhat</a></h5>
</footer>
<footer id="foot">
  <figure id="logo_foot"><a href="https://svbtle.com">Svbtle</a></figure>
  <a href="https://svbtle.com/terms" style="color: #ccc; margin-left: 25px;">Terms</a> <span style="color: #ccc;">•</span> <a href="https://svbtle.com/privacy" style="color: #ccc;">Privacy</a>
  <span style="color: #ccc;">•</span> <a href="https://svbtle.com/promise" style="color: #ccc; margin-right: 15px;">Promise</a>
  <br/><br/>
</footer>

<div id="lights">&nbsp;</div>
<div id="app-data" data-name="svbtle" data-version="8.5-legible" data-magicNum="2572031820.15"></div><div id="px-data" data-ax="posts" data-sx="show"></div><div id="user-data" data-here="false" data-state="logged-out"></div><div id="blog-data" data-title="Raashid  Bhat" data-blogname="int0xcc" data-extid="6UBJCix6mX26ewyuugsksk" data-color="668194" data-color-rgb="102,129,148" data-color-rgba="(102,129,148,0.5)" data-blog-tracker="false"></div></body>
</html>
