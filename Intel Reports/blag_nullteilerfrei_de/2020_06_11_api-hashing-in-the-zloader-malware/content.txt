<!DOCTYPE html>
<html lang="en-US" >
<head>
		<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="profile" href="http://gmpg.org/xfn/11" />
			<link rel="pingback" href="https://blag.nullteilerfrei.de/xmlrpc.php">
		<title>API Hashing in the Zloader malware &#8211; nullteilerfrei</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Feed" href="https://blag.nullteilerfrei.de/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Comments Feed" href="https://blag.nullteilerfrei.de/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; API Hashing in the Zloader malware Comments Feed" href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blag.nullteilerfrei.de\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://blag.nullteilerfrei.de/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='katex-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/bootstrap.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/font-awesome.css?ver=4.6.3' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-default-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/style.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-core-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style.css?ver=1.1.5' type='text/css' media='all' />
<style id='switty-style-core-inline-css' type='text/css'>

			.gridpostloop {
			  width: 100%;
			}
		
			@media (min-width: 768px) {
				.woocommerce ul.products li.product, .woocommerce-page ul.products li.product {
					width: 22%;
				}
			}
			
</style>
<link rel='stylesheet' id='switty-style-woo-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style-woo.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='kirki_google_fonts-css' href='https://fonts.googleapis.com/css?family=Libre+Baskerville%3Aregular%7CArvo%3Aregular%7CRajdhani%3A500%7CRoboto%3Aregular&#038;subset' type='text/css' media='all' />
<link rel='stylesheet' id='kirki-styles-switty_config-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/inc/frameworks/kirki/assets/css/kirki-styles.css' type='text/css' media='all' />
<style id='kirki-styles-switty_config-inline-css' type='text/css'>
body{font-family:"Libre Baskerville", Georgia, serif;font-weight:400;font-style:normal;text-align:inherit;color:#ffffff;}body h1, .h1{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h2, .h2{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h3, .h3{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h4, .h4{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h5, .h5{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h6, .h6{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}#maincontainer p{font-family:"Libre Baskerville", Georgia, serif;font-size:16px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}#navbar ul.navbar-nav li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;text-align:inherit;color:#ffffff;}.side-menu-menu-wrap ul li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}.widget_sidebar_main ul li, .widget_sidebar_main ol li{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer-copyright{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#BCBCBC;background-color:#111111;}body a, .woocommerce .star-rating span{color:#358247;}.widget_sidebar_main .right-widget-title-spn{border-bottom-color:#358247;}.navigation.pagination .nav-links .page-numbers, .navigation.pagination .nav-links .page-numbers:last-child{border-color:#358247;}.woocommerce .widget_price_filter .ui-slider .ui-slider-handle, .woocommerce .widget_price_filter .ui-slider .ui-slider-range{background-color:#358247;}body a:hover{color:#000000;}.spclbtn, #back-to-top{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit, .woocommerce a.button, .woocommerce button.button, .woocommerce input.button{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit:hover, .woocommerce a.button:hover, .woocommerce button.button:hover, .woocommerce input.button:hover{color:#ffffff;background-color:#000000;}.woocommerce #respond input#submit.alt, .woocommerce a.button.alt, .woocommerce button.button.alt, .woocommerce input.button.alt{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit.alt:hover, .woocommerce a.button.alt:hover, .woocommerce button.button.alt:hover, .woocommerce input.button.alt:hover{color:#ffffff;background-color:#000000;}.woocommerce-product-search input[type="submit"]{color:#ffffff;background-color:#358247;}.wpcf7-form .wpcf7-form-control.wpcf7-submit{color:#ffffff;background-color:#358247;}.spclbtn:hover, #back-to-top:hover{background-color:#000000;}.woocommerce-product-search input[type="submit"]:hover{background-color:#000000;}.wpcf7-form .wpcf7-form-control.wpcf7-submit:hover{background-color:#000000;}#navbar .navbar-brand{color:#E2E2E2;}.navbar-default .navbar-nav > li > a{color:#E2E2E2;}.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus{color:#ffffff;}.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus{color:#ffffff;}.navbar-default .navbar-nav > li.current-menu-parent > a{color:#ffffff;}#navbar{background-color:rgba(1, 9, 3, 0.50);}.afterscroolnav{background-color:rgba(1, 9, 3, 0.30)!important;}#navbar .dropdown-menu a{color:#6b6b6b;background-color:#f4f4f4;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu > .active > a:hover, #navbar .dropdown-menu > .active > a:focus{color:#000000;}#navbar .dropdown-menu a:hover{color:#000000;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu a:hover, #navbar .dropdown-menu > a:focus{background-color:#358247;}.postsloop{background-color:#ffffff;}.sticky{background-color:#d3d3d3;}#comments .comment.even{color:#000000;background-color:#f8f8f8;}#comments .pingback.even{color:#000000;background-color:#f8f8f8;}#comments .comment.odd{color:#000000;background-color:#eeeeee;}#comments .pingback.odd{color:#000000;background-color:#eeeeee;}.footer-copyright a{color:#395132;}.footer-copyright a:hover{color:#44C47E;}#logoasimg .custom-logo{width:200px;}
</style>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/en-spam/en-spam.js?ver=6.7.1" id="en-spam-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/showdown.min.js?ver=6.7.1" id="showdown-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/html5shiv.js?ver=3.7.3" id="html5shiv-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/respond.js?ver=1.1.5" id="respond-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://blag.nullteilerfrei.de/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://blag.nullteilerfrei.de/wp-json/wp/v2/posts/5291" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blag.nullteilerfrei.de/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/" />
<link rel='shortlink' href='https://blag.nullteilerfrei.de/?p=5291' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F06%2F11%2Fapi-hashing-in-the-zloader-malware%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F06%2F11%2Fapi-hashing-in-the-zloader-malware%2F&#038;format=xml" />
<style type="text/css" id="custom-background-css">
body.custom-background { background-image: url("https://blag.nullteilerfrei.de/wp-content/uploads/2017/06/bg_bw.jpg"); background-position: center center; background-size: cover; background-repeat: no-repeat; background-attachment: fixed; }
</style>
	</head>

<body class="post-template-default single single-post postid-5291 single-format-standard custom-background" >

<nav id="navbar" class="navbar navbar-default navbar-fixed-top" >
<div class="container">
	<div class="navbar-header">
		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
			<span class="sr-only">Toggle navigation</span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>
					<a class="navbar-brand" href="https://blag.nullteilerfrei.de/"> nullteilerfrei</a>
				
	</div>
						
	<div id="bs-example-navbar-collapse-1" class="collapse navbar-collapse"><ul id="primary-menu" class="nav navbar-nav navbar-right"><li id="menu-item-3880" class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880">			<form  class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880" role="search" method="get" action="https://blag.nullteilerfrei.de/">
								<div>
					<label class="screen-reader-text" for="s">Search</label>					<input type="text" value="" name="s" id="s" />
											<input type="submit" id="searchsubmit" value="search" />
									</div>
			</form>
		</li>
<li id="menu-item-272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-272"><a title="about" href="https://blag.nullteilerfrei.de/about/"><span class="glyphicon The who, the what, the why."></span>&nbsp;about</a></li>
<li id="menu-item-3858" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3858"><a title="admin" href="https://blag.nullteilerfrei.de/wp-admin/">admin</a></li>
</ul></div></div>
</nav>




<div id="maincontainer" class="container-fluid mrt50 mrb35">
	<div class="container">
		<div class="row">

<div class="col-md-12">
	<div id="post-5291" class="clearfix postsloop mrt50 post-5291 post type-post status-publish format-standard hentry category-malware category-tech">
	<div class="content-first pdb20" itemscope itemtype="http://schema.org/CreativeWork">

					
		<div class="content-second pdl20 pdr20">
			<h1 class="the-title entry-title" itemprop="headline">API Hashing in the Zloader malware</h1>
		</div>
					
		<div class="content-third pdl20 pdr20">
			
			
	<hr class="mrt10 mrb10" />
	
	<span class="switty-entry-meta">
		
		<span class="vcard author" itemprop="author" itemscope itemtype="http://schema.org/Person"><span class="fn"> <a class="url authorurl" rel="author" itemprop="url" href="https://blag.nullteilerfrei.de/author/born/" ><span itemprop="name">born</span></a></span></span>
						
					<span class="categoryurl"><a href="https://blag.nullteilerfrei.de/category/tech/malware/" rel="category tag">malware-analysis</a>, <a href="https://blag.nullteilerfrei.de/category/tech/" rel="category tag">technology</a></span>
								
		<a href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/" ><span class="post-date updated" itemprop="dateModified">2020-06-11</span></a>
						
	</span>
			
	<hr class="mrt10 mrb10" />

				
			<div class="entry-content" itemprop="text">
					
				<div class='showdown'>Directing your attention as a reverse engineer is key for not wasting your life looking at irrelevant code. This blag post will use an anti-analysis technique used in the Zloader malware as an example to practice this art. We will also take a short detour into code-level obfuscation and are going to re-implement the API hashing function from Zloader in Python.

This post is aimed towards reverse engineering beginners that have already heard about API hashing. If you don't know, what Ghidra is or how to use it, you will need to brush over some parts of this post.

<span id="more-5291"></span>

## What is API Hashing

In case, you don't follow this blag closely, I'll quickly summarize, what I mean with API hashing: if a malware author doesn't want to include API function names in the malware - neither in the import address table nor as strings somehow passed to <code>GetProcAddress</code> for example - they can use API hashing. This involves calculating some sort of hash for each combination of DLL file name and API function name (often only the latter) and inclusion of those hashes in the malware instead.

Given an API hash, the malware can enumerate all loaded DLLs and their exported functions to calculate hashes with the same custom algorithm and compare the result to the given hash, ultimately enabeling resolution of the corresponding API function. The topic is covered more thoroughly in the <a href="/2019/11/09/api-hashing-why-and-how/">post about API hashing in the REvil ransomware</a>.

## Identifying the API Resolution Function

We will be looking at the Zloader sample with SHA256 hash 

<pre><code>4029f9fcba1c53d86f2c59f07d5657930bd5ee64cca4c5929cbd3142484e815a</code></pre>
<a href="/2020/05/24/zloader-string-obfuscation/">In another blag post about string obfuscation,</a> we stumbled upon the API hashing function of Zloader: The function <code>FUN_030a3170</code> is called in $190$ places and each time, it receives some small integral number and a larger value fitting into a <code>DWORD</code>. This alone slightly smells like API hashing but a dead give-away is the fact that the returned value of the function is always <code>CALL</code>ed shortly after:

<pre><code class="c">pcVar1 = (code *)FUN_030a3170(0,0x6aa0e84);
iVar2 = (*pcVar1)(2,0);</code></pre>
So let us rename <code>FUN_030a3170</code> to <code>ev_ResolveApi</code> and take note of a few argument combinations:

| First Argument | Second Argument | Call
|---             |---              |---
| <code>0</code>            | <code>0x6aa0e84</code>     | <code>f(2,0)</code>
| <code>1</code>            | <code>0xf3c7b77</code>     | <code>f(0,puVar5,puVar4,0xcf0000,0x80000000,0x80000000,0x80000000,0x80000000,0,0,uVar3,0);</code>
| <code>9</code>            | <code>0xabc78f7</code>     | <code>f(puVar1,1,&amp;local_14,0)</code>

A quick look at the decompiled code of the function should instantly make you loose interested in reverse engineering it top to bottom: It looks very convoluted and long. But let us not give up but leap our way to the goal.

# The First Argument

So let's skip over everything and only realize that the first argument is used to index the array named <code>PTR_DAT_030bc2ec</code>. The data <code>PTR_DAT_030bc2ec[param_1]</code> is then passed to <a href="/2020/05/24/zloader-string-obfuscation/">the string deobfuscation function, analyzed in a previous blag post</a>. Double clicking the array will show the following in the assembly listing view:

<pre><code>                PTR_DAT_030bc2ec                                XREF[1]:     FUN_030a3170:030a3224(R)  
030bc2ec e8 c3 0b 03                            addr       DAT_030bc3e8                                            = 32h    2
030bc2f0 f5 c3 0b 03                            addr       DAT_030bc3f5                                            = 2Ch    ,
030bc2f4 00 c4 0b 03                            addr       DAT_030bc400                                            = 37h    7
...
030bc348 e8 c3 0b 03                            addr       DAT_030bc3e8                                            = 32h    2
030bc34c db c4 0b 03                            addr       DAT_030bc4db                                            = 3Bh    ;</code></pre>
Ghidra identified each of the array entries as a pointer. So let's interpret each entry of this array as an obfuscated string and decrypt it:

| Index | DLL Name
|---    |---
| 0     | <code>kernel32.dll</code>
| 1     | <code>user32.dll</code>
| 2     | <code>ntdll.dll</code>
| 3     | <code>shlwapi.dll</code>
| 4     | <code>iphlpapi.dll</code>
| 5     | <code>urlmon.dll</code>
| 6     | <code>ws2_32.dll</code>
| 7     | <code>crypt32.dll</code>
| 8     | <code>shell32.dll</code>
| 9     | <code>advapi32.dll</code>
| 10    | <code>gdiplus.dll</code>
| 11    | <code>gdi32.dll</code>
| 12    | <code>ole32.dll</code>
| 13    | <code>psapi.dll</code>
| 14    | <code>cabinet.dll</code>
| 15    | <code>imagehlp.dll</code>
| 16    | <code>netapi32.dll</code>
| 17    | <code>wtsapi32.dll</code>
| 18    | <code>mpr.dll</code>
| 19    | <code>wininet.dll</code>
| 20    | <code>userenv.dll</code>
| 21    | <code>bcrypt.dll</code>

Hence the first argument to the function is an index into the above listed array of DLL names and hence almost certainly used to specify the DLL to use when resolving an API function.

Note the choice of words here: I did not say that I am sure that the argument is used to specify the DLL which is used to resolve a function; but only, that I am almost certain. When reverse engineering like this, you should keep the amount of certainty for every statement in the back of your head. So if something doesn't make sense anymore, you can track back and more easily assess, where to dig deeper. In this case, I don't see a lot of other possibilities, what this DLL name will be used for otherwise.

## The second argument

Let us do a similar trick with the second argument: don't reverse engineer the whole function but just look at the four places, where the second argument appears while keeping in mind that we believe it to specify an API hash of the function to be resolved:

<pre><code>uVar1 = param_2 % uVar1;
...
uVar2 = FUN_030b9a70(uVar2,param_2,0,0);
...
pcVar5 = FUN_030a3620(iVar4,param_2);
...
*local_14 = param_2;</code></pre>
The alleged API hash is passed into the two functions <code>FUN_030b9a70</code> and <code>FUN_030a3620</code>. We will now take a look at the two, keeping an eye out for code that calculates an API hash to then compare it to the passed argument.

On first glance, the first of the two functions looks promising: it contains some arithmetic operations and calls a few other functions. But looking at the return value, one can instantly see that it either returns <code>0xa1</code> or <code>0</code>. So these are probably not the droids we are looking for. The second function - <code>FUN_030a3620</code> - looks at least as promising as the first one: it contains the two constants <code>0x60</code> and <code>0x18</code> at the very top and also uses a few (nested) loops. 

So if someone would point a gun to my head and ask me for an opinion, which of the two you should investigate further, I'd definitely choose the second. And you should always imagine that someone is pointing a gun to your head while reverse engineering. We don't have no time for anything else.

I nearly forgot to repeat a life hack from the <a href="2019/11/09/api-hashing-why-and-how/">very same blag post already referenced a few times</a>, which should clear up, why I got so excited about the two constants  <code>0x60</code> and <code>0x18</code>: <code>0x18</code> is the offset of the _Optional Header_ within the _PE header_ and <code>0x60</code> is the offset of the _Data Directories_ within that Optional Header. We don't need to understand everything here but can simply assume that there is some sort of PE parsing going on (that is parsing of the Windows _Portable Executable_ file format). And you need PE parsing to list exports from loaded DLLs, hence you need PE parsing to calculate API hashes of loaded functions.

Lucky for us, the API hash passed in as an argument is only used in one single line:

<pre><code>if (uVar3 == param_2) {</code></pre>
And since it does not make much sense to compare an API hash with anything else but another API hash, it is reasonable to assume that <code>uVar3</code> also contains an API hash. It is also plausible that it contains the API hash calculated by the malware based on loaded DLL names and their exported functions. Since the value of <code>uVar3</code> comes out of <code>FUN_030a3140</code> let's rename that function to <code>pr_ApiHash</code>. It receives <code>local_90</code> and <code>-1</code> as arguments. So let's just assume for now that <code>local_90</code> is somehow derived from DLL and function names and dive into <code>pr_ApiHash</code>.

## The API Hashing Function

Lazy time is over now. We finally need to understand some code and what exactly, <code>pr_ApiHash</code> does with its arguments to arrive at an API hash. Since we already assumed that the first argument contains some data derived from DLL and function names, let us focus on the second argument for now: It is first compared with <code>-1</code> - which makes sense because we already observed this value as an argument - and another function, <code>FUN_030a2fe0</code>, is called with the alleged DLL and function names as arguments. Let's look into <code>FUN_030a2fe0</code> and retype its argument to <code>BYTE *</code>:

<pre><code>int __cdecl FUN_030a2fe0(BYTE *param_1) {
  int iVar1;
  int iVar2;
  
  if (param_1 != (BYTE *)0x0) {
    iVar2 = -1;
    do {
      iVar1 = iVar2 + 1;
      iVar2 = iVar2 + 1;
    } while (param_1[iVar1] != &#039;\0&#039;);
    return iVar2;
  }
  return 0;
}</code></pre>
If the passed data is the <code>NULL</code> pointer, the function will return <code>0</code>. Otherwise, it will initialize the variable <code>iVar2</code> with <code>-1</code> and increase value passed into the function until it is the <code>NULL</code> terminator. During each iteration, the return variable <code>iVar2</code> is incremented by one. Since this is a do-while loop, this incrementation happens at least one time. Staring at this code a bit more, you can see that this function will interpret the passed argument as a string and return its length. This is huge because we can now guess the type of the argument and also the type of the variable passed into this function: it probably is just <code>char *</code> as opposed to some complex data structure derived from DLL and function names. 

So let us rename <code>FUN_030a2fe0</code> to <code>strlen</code> and retype the two arguments to <code>pr_ApiHash</code> according to what we just learned. While we are at it, realize that <code>uVar4</code> is the value returned from <code>pr_ApiHash</code> and rename that variable to <code>ApiHash</code>.

<pre><code>uint __cdecl pr_ApiHash(char *SomeString,int StrLen) {
  byte bVar1;
  uint uVar2;
  uint uVar3;
  uint ApiHash;
  
  if (StrLen == -1) {
    StrLen = strlen(SomeString);
  }
  ApiHash = 0;
  if ( (SomeString != (char *)0x0) &amp;&amp; (0 &lt; StrLen) ) {
    ApiHash = 0;
    do {
      bVar1 = FUN_030a5260();
      ApiHash = (uint)(byte)*SomeString + (ApiHash &lt;&lt; (bVar1 &amp; 0x1f));
      if ( (ApiHash &amp; 0xf0000000) != 0 ) {
        uVar3 = (ApiHash &amp; 0xf0000000) &gt;&gt; 0x18;
        uVar2 = FUN_030a9b90(0xfffffff,0xffffffff,0);
        ApiHash = FUN_030aeef0(~(uVar2 | ~ApiHash | uVar3),(uVar2 | ~ApiHash) &amp; uVar3,(HINSTANCE)0x0);
      }
      SomeString = (char *)( (byte *)SomeString + 1);
      StrLen = StrLen + -1;
    } while (StrLen != 0);
  }
  return ApiHash;
}</code></pre>
## Code-Level Obfuscation

Now we need to get _really_ un-lazy. There are three functions used during calculation of the API hash with names <code>FUN_030a5260</code>, <code>FUN_030a9b90</code> and, <code>FUN_030aeef0</code>. Each of these functions needs special attention. 

* Even though the return value of <code>FUN_030a5260</code> is used, Ghidra did not correctly guess the function signature and somehow determine that it is a <code>void</code> function. Change the signature (Hotkey <code>F</code>), check "Use Custom Storage" and change the returned data type to <code>int</code> and the storage location to <code>EAX</code>. Choosing <code>EAX</code> is often correct and I suggest to just try it and justify later if the resulting decompiled code makes sense. Again, purely for time-efficiency reasons. The result will be a convoluted function that ends with <code>return _DAT_030be374 ^ 0xa2df808b</code>. Follow <code>_DAT_030be374</code> and change the type to <code>ddw</code> (Hotkey <code>D</code> three times). This reveals that this global variable contains the value <code>0xA2DF808F</code>. Xor-ing with <code>0xa2df808b</code> results in <code>4</code>. Hence, we can rename <code>FUN_030a5260</code> to <code>Return4</code>.
* Similarly, <code>FUN_030a9b90</code> is identified to be a <code>void</code> function. Performing the same procedure as above (adapt the signature to return an <code>int</code> in <code>EAX</code>) will lead to a very simple decompiled function that only Xors the first two arguments. Hence you can rename it to <code>Xor</code> (and also remove the last parameter if you feel tidy).
* Finally, <code>FUN_030aeef0</code> only seems to calculate the binary or of the two parameters, hence rename it to <code>Bor</code> (and, again, remove the third parameter if you like).

The above three functions are probably caused by anti-analysis techniques employed by the malware author. The technique used in the first function is called "constant unfolding" because it is the opposite of the compiler optimization technique called <a href="https://en.wikipedia.org/wiki/Constant_folding">constant folding</a>. Constant folding evaluates constant expressions during compile time to avoid unnecessary calculations during run time. Constant unfolding does the reverse: it identifies constants - <code>4</code> in this case - and replaces them with some sort of calculation - <code>_DAT_030be374 ^ 0xa2df808b</code> in this case - during compile/build time.

Similarly, the other two function employ the opposite of the compiler optimization technique called <a href="https://en.wikipedia.org/wiki/Inline_expansion">inlining</a>: Instead of performing the arithmetic operation in-line (here, a simple Xor / Binary Or), a function is called that performs this operation. In addition to that, unnecessary instructions where inserted into this un-in-lined function that make the code harder to read. Specifically the condition of a branch like

<pre><code>if ( ( ( (param_2 == 0xb4c6d61) &amp;&amp; (fuLoad != param_1)) &amp;&amp;
    (in_stack_0000000c != (HINSTANCE)0xb4c6d61)) &amp;&amp;
    ( ( (int)in_stack_0000000c &lt;&lt; 7 | (uint)in_stack_0000000c) == 0)) {</code></pre>
that is never taken is called <a href="https://en.wikipedia.org/wiki/Opaque_predicate">opaque predicate</a>. In addition to that, both function contain some jung instructions without any side effects. A lot of them have been removed by the Ghidra decompiler, but since identifying those is hard - even heuristically - some still remain.

## Re-Implementing the Hashing Function

Offentimes you want to emulate API hashing in a different language because it enables you to annotate API resolution calls during static analysis. Re-implementing an algorithm will often also get rid of any implementational details that may have even been introduces by a compiler or obfuscator during built. This in turns eases identification of overlaps in the hashing method between different malware families, which in turn may indicate a link between the families.

After performing the above-described steps and some minor adjustments to variable names in the <code>pr_ApiHash</code> function, we end up with the following:

<pre><code>uint __cdecl pr_ApiHash(char *SomeString,int StrLen) {
  byte Four;
  uint Mask;
  uint HighNibble;
  uint ApiHash;
  
  if (StrLen == -1) {
    StrLen = strlen(SomeString);
  }
  ApiHash = 0;
  if ( ( SomeString != (char *)0x0 ) &amp;&amp; (0 &lt; StrLen) ) {
    ApiHash = 0;
    do {
      _Four = Return4();
      ApiHash = (uint)(byte)*SomeString + (ApiHash &lt;&lt; ( (byte)_Four &amp; 0x1f ));
      if ( (ApiHash &amp; 0xf0000000) != 0 ) {
        HighNibble = (ApiHash &amp; 0xf0000000) &gt;&gt; 0x18;
        Mask = Xor(0xfffffff,0xffffffff);
        ApiHash = Bor(~(Mask | ~ApiHash | HighNibble),(Mask | ~ApiHash) &amp; HighNibble);
      }
      SomeString = (char *)( (byte *)SomeString + 1 );
      StrLen = StrLen + -1;
    } while (StrLen != 0);
  }
  return ApiHash;
}</code></pre>
You can just copy this into a text editor and change the syntax a bit until it is valid code of your language of choice. If your language natively supports bigints (like Python), better make sure to sprinkle it with enough <code>&amp; 0xffffffff</code>. I decided to use Python for now and since I very much enjoy totally unnecessary optimizations, I ended up with the following:

<pre><code class="python">def calc_hash(function_name):
    mask = 0xf0000000
    ret = 0
    for c in function_name:
        ret = ord(c) + (ret &lt;&lt; 0x4)
        if ret &amp; mask:
            ret = (~ret | mask) ^ (~ret | ~mask) &gt;&gt; 0x18
    return ret &amp; 0xffffffff</code></pre>
## API Hash Lookup

We already know that the API hash <code>0x6aa0e84</code> from the <code>kernel32.dll</code> should resolve to a function that accepts two arguments like so <code>f(2,0)</code>. So let us plug all exports from the <code>kernel32.dll</code> into the hashing function and check the result:

<pre><code class="python">import pefile

pe = pefile.PE(data=open(&#039;C:\\Windows\\SysWOW64\\kernel32.dll&#039;, &#039;rb&#039;).read())
export = pe.DIRECTORY_ENTRY_EXPORT
dll_name = pe.get_string_at_rva(export.struct.Name)
for pe_export in export.symbols:
    export_name = pe_export.name.decode(&#039;utf-8&#039;)
    if calc_hash(export_name) == 0x6aa0e84:
        print(export_name)</code></pre>
Which ... fails by giving no result. Since I was pretty sure about everything _but_ the data actually passed into <code>pr_ApiHash</code>, I decided to do some reversing around that next: Ghidra determined the type of variable <code>local_90</code> to be <code>undefined2 local_90 [50]</code>. This is Ghidra's way of telling you that it thinks it is an array with $50$ entries where each entry has a length of 2 bytes. Since we already established that the array is actual a string, I decided to retype it to <code>char[100]</code>:

<pre><code>...
FUN_0309ea50(local_90, uVar3);
cVar1 = *(char *)(iVar5 + param_1);
if (cVar1 != &#039;\0&#039;) {
    i = 0;
    do {
    local_90[i] = FUN_0309a690(cVar1);;
    cVar1 = *(char *)(iVar5 + param_1 + 1 + i);
    i = i + 1;
    } while (cVar1 != &#039;\0&#039;);
}
uVar4 = pr_ApiHash(local_90,-1);
...</code></pre>
So the values of that array come out of the function <code>FUN_0309a690</code>. Let's take a close look at it: the function receives a value and either returns it or adds <code>0x20</code> and returns the result. Because the condition looks complicated and was hit pretty hard by the obfuscator the author probably uses, I was just lucky to know what adding the number <code>0x20</code> in the context of strings may mean: converting upper-case characters to lower-case characters. So my leap of faith was to assume that <code>FUN_0309a690</code> actually is <code>pr_toLower</code>. And heureca! Running the above Python code with lower-cased <code>export_name</code> results in a single hit, namely <code>CreateToolhelp32Snapshot</code> which accepts two <code>DWORD</code> arguments <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot">according to the documentation</a>. This is in-line with our observation from the table at the start of this post.

## Summary

What can you take away from this post? Maybe it is that I'm just as lazy as a sloth and don't even reverse engineer. Maybe, that adding or subtracting <code>0x20</code> means converting between upper and lower case strings. Maybe, that offsets <code>0x18</code> and <code>0x60</code> indicate PE parsing. Or maybe, that it is sometimes possible to understand a lot of about a malware without going into every single line of code and understanding everything.
</div>						
				<div class="clearfix pdt20"></div>
						
										
										
			</div>

			
<div id="comments" class="comments-area">

			<h2 class="comments-title">
			2 Replies to &ldquo;API Hashing in the Zloader malware&rdquo;		</h2>

		<ol class="comment-list">
					<li id="comment-31394" class="comment even thread-even depth-1">
			<article id="div-comment-31394" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/f466dfc38f60480877b3cec050f88160?s=42&#038;r=g' srcset='https://secure.gravatar.com/avatar/f466dfc38f60480877b3cec050f88160?s=84&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' decoding='async'/>						<b class="fn">ANonym</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/#comment-31394"><time datetime="2021-01-04T13:28:20+01:00">2021-01-04 at 1:28 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<div class='showdown'>Is the hash in "def calc_hash" the Fowler-Noll algorithm used in Sunburst as well?
</div>				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/?replytocom=31394#respond" data-commentid="31394" data-postid="5291" data-belowelement="div-comment-31394" data-respondelement="respond" data-replyto="Reply to ANonym" aria-label="Reply to ANonym">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
		<li id="comment-31395" class="comment byuser comment-author-born bypostauthor odd alt thread-odd thread-alt depth-1">
			<article id="div-comment-31395" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/4949f5a9b72917f8ae6635a34aea9fb0?s=42&#038;r=g' srcset='https://secure.gravatar.com/avatar/4949f5a9b72917f8ae6635a34aea9fb0?s=84&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' decoding='async'/>						<b class="fn"><a href="http://www.wallenborn.net" class="url" rel="ugc external nofollow">born</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/#comment-31395"><time datetime="2021-01-10T01:12:20+01:00">2021-01-10 at 1:12 am</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<div class='showdown'>@ANonym: no. 

Every algorithm from the FNV family involves a so-called "FNV prime". The above algorithm doesn't involve any such magic number, only some bitmasks and very small integers.
</div>				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://blag.nullteilerfrei.de/2020/06/11/api-hashing-in-the-zloader-malware/?replytocom=31395#respond" data-commentid="31395" data-postid="5291" data-belowelement="div-comment-31395" data-respondelement="respond" data-replyto="Reply to born" aria-label="Reply to born">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="clearfix"></div>
		
		
		<div class="clearfix"></div>

	
	
		<div id="respond" class="comment-respond">
		<h2 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2020/06/11/api-hashing-in-the-zloader-malware/#respond" style="display:none;">Cancel reply</a></small></h2><form action="https://blag.nullteilerfrei.de/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><div class="form-group comment-form-comment">
		<label for="comment">Comment<span class="required"> *</span></label> 
		<textarea class="form-control" placeholder="Your comment" id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea>
		</div><div class="form-group comment-form-author"><label for="author">Name <span class="required">*</span></label> <input class="form-control" placeholder="Your name" id="author" name="author" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-email"><label for="email">Email <span class="required">*</span></label> <input class="form-control" placeholder="Your email" id="email" name="email" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-url"><label for="url">Website</label> <input class="form-control" placeholder="Your website" id="url" name="url" type="text" value="" size="30" /></div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="spclbtn" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='5291' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- .comments-area -->
				
		</div>
			
	</div>
</div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://blag.nullteilerfrei.de/2020/05/31/string-obfuscation-in-the-hamweq-irc-bot/" rel="prev">&larr; String Obfuscation in the Hamweq IRC-bot</a></div><div class="nav-next"><a href="https://blag.nullteilerfrei.de/2020/06/28/wrapping-integers-in-python-with-metaclassing/" rel="next">Wrapping integers in Python with Metaclassing &rarr;</a></div></div>
	</nav></div>
		</div>
	</div>
</div>


<div class="container-fluid footer-copyright">
	<div class="container">
		<div class="row">

			<div class="col-md-6">
				<div class="cprtlft_ctmzr">
					Authors have copyrights. People say these things in footers.				</div>
			</div>

			<div class="col-md-6">
				<div class="cprtrgt_ctmzr fr spclfl">
					All Hail the Great Yawgmoth, Father of Machines.				</div>
			</div>

		</div>
	</div>
</div>


<link rel='stylesheet' id='hljstheme-css' href='https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/styles/default.css?ver=0.6.2' type='text/css' media='all' />
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.js?ver=6.7.1" id="katex-main-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/auto-render.min.js?ver=6.7.1" id="katex-auto-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/default.js?ver=6.7.1" id="configure-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/bootstrap.js?ver=3.3.7" id="bootstrap-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/script.js?ver=1.1.5" id="switty-script-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.common.pack.js?ver=0.6.2" id="hljs_preload-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.custom.pack.js?ver=0.6.2" id="hljs-js"></script>
    <style>pre.hljs {padding: 5px;}
pre.hljs code {}</style>
    <script type="text/javascript">
    (function($, window) {
        var init_fn_flag = false;
        var init_fn = (function() {
            if (init_fn_flag)
                return;
            init_fn_flag = true;
             hljs.configure({"tabReplace":"    "});
            $('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        });
        $(document).ready(init_fn);
        $(window).on("load", init_fn);
    })(jQuery, window);
    </script>
<img src="https://vg09.met.vgwort.de/na/fc79be48dce54dc5afe54fb59c642bae" width="1" height="1" alt="" class="wpvgw-marker-image" loading="eager" data-no-lazy="1" referrerpolicy="no-referrer-when-downgrade" style="display:none;" /></body>
</html>
