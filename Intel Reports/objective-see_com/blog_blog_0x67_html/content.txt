<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x67/preview.png />
<meta name="twitter:title" content=Analysis&#32;of&#32;CVE-2021-30860 />
<meta name="twitter:description" content=the&#32;flaw&#32;and&#32;fix&#32;of&#32;a&#32;zero-click&#32;vulnerability,&#32;exploited&#32;in&#32;the&#32;wild />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Analysis&#32;of&#32;CVE-2021-30860 />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x67/preview.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Analysis of CVE-2021-30860</div>
  <div class="blogSubTitle">the flaw and fix of a zero-click vulnerability, exploited in the wild</div>
  <div class="blogDate" style="padding-top:10px;">by: Tom McGuire / September 16, 2021</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
    <div class="download-link" style="padding: 10px; margin-left: 20px; ">
        <a href="https://1password.com/?utm_medium=parnter&utm_source=Objective-See&utm_campaign=gp&utm_content=sponsorship" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/1Password.png" height="50px">
            <div class="logo-title" style="text-align: center;">...the world‚Äôs most-loved password manager.</div>
        </a>
    </div>
    <div class="download-link" style="padding: 10px; margin-left: 15px; ">
        <a href="http://kandji.io/" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/kandji.png" height="50px">
            <div class="logo-title" style="text-align: center;">...next-generation apple enterprise management.</div>
        </a>
    </div>
    <br>
    <br>
    <div class="download-link" style="padding: 10px;">
        <a href="https://mosyle.com" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/mosyle.png" height="55px">
        <div class="logo-title" style="text-align: center;">...modern apple mdm & security for enterprise &amp; education.</div>
        </a>
    </div>
    <div class="download-link" style="padding: 10px;">
        <a href="https://www.jamf.com?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/jamf.png" height="55px">
        <div class="logo-title" style="text-align: center;">...the standard in apple enterprise management.</div>
        </a>
    </div>
    <br>
    <br>
    <div class="download-link" style="padding: 10px;">
        <a href="https://macpaw.com/cleanmymac" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/cleanmymac.png" height="55px">
        <div class="logo-title" style="text-align: center;">...an all-in-one package to awesomize your Mac.</div>
        </a>
    </div>
    </center>
      <br>
      <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
</div>
<br>
<br>
<br>
<div class="note">
This guest blog post, was written by Tom McGuire, a senior instructor and cybersecurity focus area coordinator at Johns Hopkins and tech editor of my upcoming <a class="inlineLink" href="https://taomm.org/">The Art of Mac Malware: Analysis</a> book.
<br>
<br>
Here, he shares his analysis of reversing Apple's patch for CVE-2021-30860 (a zero-click iOS/macOS vulnerability exploited in the wild) ...highlighting both the underlying flaw, and Apple's fix. 
<br>
<br>
<center>Mahalo for sharing Tom! ü§©</center>
</div>
<br>
<div class="note">
‚ÑπÔ∏è For another write-up on this bug, see Mickey Jin's excellent post:
<br>
<br>
<center>
 "<a class="inlineLink" href="https://www.trendmicro.com/en_us/research/21/i/analyzing-pegasus-spywares-zero-click-iphone-exploit-forcedentry.html">Analyzing The ForcedEntry Zero-Click iPhone Exploit Used By Pegasus</a>."
</center>
</div>
<h3 id="wild-wild-west----quick-initial-analysis-of-cve-2021-30860">Wild, wild west -  Quick Initial Analysis of CVE-2021-30860</h3>
<p>Recently, Apple released <a href="https://support.apple.com/en-us/HT212807">iOS/iPadOS 14.8</a> and <a href="https://support.apple.com/en-us/HT212804">macOS Big Sur 11.6</a> which fixes both an integer overflow and a use after free vulnerability (the <a href="https://support.apple.com/en-us/HT212806">watchOS</a> platform was also patched to fix the integer overflow issue). This blog post will analyze the integer overflow in CoreGraphics, <code>CVE-2021-30860</code>. After examining the modified .dylib, it appears that there were other issues that were resolved as well, related to imaging processing. We will focus in on the <code>JBIG2</code> processing, specifically in the <code>JBIG2::readTextRegionSeg</code>.</p>
<p>I could not find information about Apple&rsquo;s use of <code>JBIG2</code> libraries. However, as we will see there is a likely chance there was some collaboration with open source software (see: <a href="https://gitlab.freedesktop.org/poppler/poppler/-/blob/master/poppler/JBIG2Stream.cc">https://gitlab.freedesktop.org/poppler/poppler/-/blob/master/poppler/JBIG2Stream.cc</a>). The source code shown is from poppler, but as shown in the header file the origin is &ldquo;Copyright 2002-2003 Glyph &amp; Cog, LLC&rdquo;.</p>
<p>An integer overflow can lead to a variety of issues. A common result with an integer overflow is to cause a dynamic memory allocation  (e.g. malloc(), calloc() etc..) to be too small. Later, data is copied from a source that is larger than the allocated size, resulting in a heap buffer overflow. (Not all integer overflows will manifest this way, but it is a common occurrence and relevant to this discussion.)</p>
<p><code>CVE-2021-30860</code> is an integer overflow in the CoreGraphics component, specifically the decoding of a <code>JBIG2</code> data. <code>JBIG2</code> (Joint Bi-level Image Experts Group) is an image compression format which can be embedded as a stream in a PDF or PSD document, or potentially other formats as well. You can read more about it <a href="https://en.wikipedia.org/wiki/JBIG2">here</a>.</p>
<p>Before we dive into the assembly and uncover the vulnerability and how it was fixed, we want to look at the discovery. CitizenLab <a href="https://citizenlab.ca/2021/09/forcedentry-nso-group-imessage-zero-click-exploit-captured-in-the-wild/">reported this vulnerability</a>, which they dubbed FORCEDENTRY (a knock at Apple&rsquo;s recent security component, BlastDoor!), to Apple after they had done some analysis on journalist&rsquo;s phones suspected of being hacked. In their reporting, CitizenLab attributes the attacks to the NSO group, due to the Pegasus software that was seen on these infected devices:</p>
<img src="../images/blog/blog_0x67/clabpegasus.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">CitizenLab thoughts on Pegaus</center>

<p>During their analysis, they uncovered crash logs and noticed quite a few image files that seemed to crash the <code>IMTranscoderAgent</code>. <code>IMTranscoderAgent</code> is one of the components related to processing of iMessage data, including upon sending/receiving images!</p>
<p>According to CitizenLab, they reported the vulnerability to Apple on Tuesday, September 7, 2021 and Apple confirmed and released the patches for the issue on Monday, September 13, 2021. That is a quick turnaround, so let&rsquo;s see how well they did with the patching!</p>
<p>Image file formats are notorious for having vulnerabilities that can lead to arbitrary remote code execution (RCE) on devices (CVE-2009-1858, CVE-2015-6778, CVE-2020-1910, etc..).</p>
<img src="../images/blog/blog_0x67/whatsapp.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Imaging parsing issues are not new!</center>

<p>It is not surprising that such an issue existed here. With this <code>JBIG2</code> processing vulnerability (which exists in the <code>readTextRegionSeg</code> method), I will note that another <em>very</em> similar vulnerability was previously patched. This issue is nearly the same logic as the one in FORCEDENTRY. The method <code>readSymbolDictSeg</code> contains integer overflow checks that help prevent the scenario that we will examine in this post! (Don&rsquo;t worry, we will get back to this and do a quick look to see this in assembly).</p>
<p>Of particular note to the attacks reported by CitizenLab, the file formats were PDF files, with embedded <code>JBIG2</code> streams. Zero-click iMessage vulnerabilities have existed before (see, <a href="https://citizenlab.ca/2020/12/the-great-ipwn-journalists-hacked-with-suspected-nso-group-imessage-zero-click-exploit/">here</a> and <a href="https://blog.zecops.com/research/the-recent-ios-0-click-cve-2021-30860-sounds-familiar-an-unreleased-write-up-one-year-later/">here</a>).</p>
<p>In an effort to help reduce this attack surface, Apple recently (iOS14) introduced the &ldquo;BlastDoor&rdquo; feature. Samuel Gro√ü, of Google&rsquo;s Project 0, posted an excellent <a href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html">write-up</a> about this new feature:</p>
<img src="../images/blog/blog_0x67/blastdoor.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlastDoor analysis by Google P0</center>

<p>For our purposes, what we need to understand is that the BlastDoor feature is meant to &ldquo;sandbox&rdquo; processing in the iMessage chain. In other words, when an image or document is received via iMessage and automatically parsed, it is done in a sandboxed environment. The intent is that, if a vulnerability exists in some of the processing engine, the exploitation will be limited to this sandboxed environment, keeping the rest of the system &lsquo;safe&rsquo;. This is true for certain file formats, but it appears that Apple did not sandbox all potential automatically parsed formats (looking at you PSD files, and likely other raster formats).</p>
<p>Though I have not gone through and analyzed any changes to BlastDoor since this patch, I can only hope that Apple has increased the robustness of BlastDoor and has prevented PDF, PSD and other raster file format parsing from going through the <code>IMTranscoderAgent</code>. That is, going forward, the hope is these other notoriously prone formats are processed in the BlastDoor sandboxed environment&hellip;perhaps we can look at that in a future blog post!</p>
<p>With the background out of the way, let&rsquo;s get to reversing and find out what happened and how it was fixed!</p>
<p>In order to examine this, we first need to grab a vulnerable version of the <code>.dylib</code> (we will be using macOS 11.5.2) and a fixed version (macOS 11.6). I had Hopper and IDA for analysis as well, so for the sake of time, I utilized them both. First, we need to grab the <code>CoreGraphics.dylib</code> from the two systems. At first, I was looking in the usual spot (<code>/System/Library/Frameworks/CoreGraphics</code>) and quickly noticed this was not the correct library. It turns out that on recent versions of macOS, many of the core frameworks are located in the dyld cache! This is a very large file, but is located in <code>/System/Library/dyld/dyld_shared_cache_x86_64</code>. (I&rsquo;m using the x86_64 version).</p>
<img src="../images/blog/blog_0x67/dyldcache.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">dyld cache from the respective folders</center>

<p>Armed with the knowledge of where the dyld cache is located, we need to extract the <code>CoreGraphics.dylib</code> from it. One of the simplest ways is to use the Hopper disassembler. Opening the <code>dyld_shared_cache_x86_64</code> file in Hopper presents you with myriad of Frameworks to examine. Of course, we will filter on the &ldquo;CoreGraphics&rdquo; one to open it up.</p>
<img src="../images/blog/blog_0x67/hopper_filter_cg.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Hopper opening dyld_cache</center>

<p>From here, I was most interested in learning the differences between the 11.5.2 version and the 11.6 version. At this point, I decided to use Hopper to output the <code>CoreGraphics.dylib</code> to its own dedicated Mach-O file. To do this, we can use the &ldquo;File-&gt;Produce New Executable&rdquo; (or <code>cmd+shift+e</code>). Doing this for both the 11.5.2 <code>dyld_cache</code> and the 11.6 <code>dyld_cache</code> yields us the two <code>CoreGraphics.dylib</code> that we can easily analyze.</p>
<img src="../images/blog/blog_0x67/cg_to_new_exec.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Hopper producing new executable</center>

<p>In order to diff these quickly, I decided to utilize IDA and BinDiff (we certainly can use other tools as well). So let&rsquo;s open both <code>CoreGraphics-11_5_2.dylib</code> and <code>CoreGraphics-11_6.dylib</code> in IDA, saving the corresponding <code>.i64</code> files. After closing both databases, I re-opened the <code>CoreGraphics-11_5_2.dylib</code> and launched BinDiff (<code>ctrl + 6</code>). After choosing &ldquo;Diff Database&hellip;&rdquo; and selecting the <code>CoreGraphics-11_6.i64</code> database, we wait for BinDiff to do its magic! It&rsquo;s not that bad actually. If you&rsquo;ve not used BinDiff, the matching functions is quite useful. It also gives a guide for what has changed within a function. The <a href="https://www.zynamics.com/bindiff/manual/">BinDiff manual</a>, from Zynamics site, gives a good description of the &ldquo;Matched Functions Subview&rdquo; and explains the &ldquo;change&rdquo; column.</p>
<img src="../images/blog/blog_0x67/bindiff.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BinDiff</center>

<p>Open BinDiff from the 11.5.2 version (primary) and use the <code>.i64</code> db for the 11.6 version (secondary)</p>
<p>We notice that there are 10 functions that have changed. It turns out that there was an API change or parameter size change to one of them (one of the parameters was removed), thus 4 of these functions aren&rsquo;t as &ldquo;different&rdquo; as they first appear. In Figure 8 below, the left most column is the similarity. 1.00 is identical* while lower values are less similar. We notice that there are a few entries with 0.99 similarity. These functions are mostly similar up to variance of some number of  Instructions (I). The 0.92 similar function is the one of interest to us (some of the other functions are also worth examining‚Ä¶perhaps for another blogpost!). The &ldquo;G&rdquo;, in the 3rd column (change) indicates there is a graph change (number of basic blocks or number of edges differ). There are also differences in the branch inversion, indicated by the &ldquo;J&rdquo;. The &ldquo;L&rdquo; indicates the number of loops has changed. The graph structure is an important change to look at, as this could indicate a new branch condition was added or altered!</p>
<img src="../images/blog/blog_0x67/bindiff_matches.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Showing the differences to focus our analysis!</center>

<p>For this post, the most interesting function related to the <code>JBIG2</code> processing that differs between the 2 versions is located at: <code>00007FFF252466E0</code> (11.5.2 version) and <code>00007FFF25247710</code> (11.6 version) (In Figure 8, this is the <code>readTextRegionSeg_0</code> named routine).</p>
<p>This is the <code>JBIG2::readTextRegionSeg</code> function. As you can see, I didn&rsquo;t have symbols when doing this, however, I did notice some interesting strings present in the <code>CoreGraphics.dylib</code>, which turned out to be very useful in piecing together the code paths (obviously symbols would greatly help here, but even without them, we can identify the root cause&hellip;with a little help from open source software!)</p>
<p>Utilizing the strings located in the dylib, and the <a href="https://gitlab.freedesktop.org/poppler/poppler/-/blob/master/poppler/JBIG2Stream.cc">source code</a> for a <code>JBIG2Stream processor</code>, we can match up some of the code!</p>
<p>Using source code as a guide, we can look at the issue in source and then match it to the disassembled version confirming the existence of the vulnerability in the 11.5.2 version.</p>
<p>As we can see below, the numSyms variable (an unsigned 32-bit integer), is incremented by the size of the currently processed segment. Thus, if there is more than one <code>jbig2SegSymbolDict</code> segment, <code>numSyms</code> will be updated with the size of that segment. This can lead to an integer overflow as there is no checking surrounding this area.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span> <span style="color:#ae81ff">1966</span>   <span style="color:#75715e">// get symbol dictionaries and tables
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#ae81ff">1967</span>   numSyms <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1968</span>   <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> nRefSegs; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1969</span>     <span style="color:#66d9ef">if</span> ((seg <span style="color:#f92672">=</span> findSegment(refSegs[i]))) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1970</span>         <span style="color:#66d9ef">if</span> (seg<span style="color:#f92672">-&gt;</span>getType() <span style="color:#f92672">==</span> jbig2SegSymbolDict) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1971</span>                 numSyms <span style="color:#f92672">+=</span> ((JBIG2SymbolDict <span style="color:#f92672">*</span>)seg)<span style="color:#f92672">-&gt;</span>getSize();
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1972</span>          } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (seg<span style="color:#f92672">-&gt;</span>getType() <span style="color:#f92672">==</span> jbig2SegCodeTable) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1973</span>                 codeTables.push_back(seg);
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1974</span>          }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1975</span>      } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1976</span>         error(errSyntaxError, curStr<span style="color:#f92672">-&gt;</span>getPos(), 
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;Invalid segment reference in JBIG2 text region&#34;</span>);
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1977</span>         <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1978</span>      }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1979</span>    } 
</span></span></code></pre></div>
<p>As you can see from the disassembly below from the vulnerable version (11.5.2), the <code>add eax, [rbx+0ch]</code> (which is a 32-bit calculation), has no checking to ensure this hasn&rsquo;t wrapped. Thus, we have an integer overflow in which <code>numSyms</code> could wrap around.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A56</span> nRefSegs_loop:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A56</span>                 mov     esi, [r13<span style="color:#f92672">+</span>r12<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A5B</span>                 mov     rdi, r14
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A5E</span>                 call    findSegment
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A63</span>                 test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A66</span>                 jz      loc_7FFF25246CDD
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A6C</span>                 mov     rbx, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A6F</span>                 mov     rax, [rax]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A72</span>                 mov     rdi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A75</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]   <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A78</span>                 cmp     eax, <span style="color:#ae81ff">1</span>                <span style="color:#75715e">; jbig2SegSymbolDict</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A7B</span>                 jnz     short loc_7FFF25246A8E
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A7D</span>                 mov     eax, <span style="color:#66d9ef">dword</span> ptr [rbp<span style="color:#f92672">+</span>numSyms]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A83</span>                 add     eax, [rbx<span style="color:#f92672">+</span><span style="color:#ae81ff">0Ch</span>]        <span style="color:#75715e">; numSyms += getSize()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A83</span>                                               <span style="color:#75715e">; no overflow check here!</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A86</span>                 mov     <span style="color:#66d9ef">dword</span> ptr [rbp<span style="color:#f92672">+</span>numSyms], eax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A8C</span>                 jmp     short loc_7FFF25246AA7
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A8E</span> <span style="color:#75715e">; --------------------------------------------------------------</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A8E</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A8E</span> loc_7FFF25246A8E:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A8E</span>                 mov     rax, [rbx]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A91</span>                 mov     rdi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A94</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]   <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A97</span>                 cmp     eax, <span style="color:#ae81ff">3</span>                <span style="color:#75715e">; jbig2SegCodeTable</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A9A</span>                 jnz     short loc_7FFF25246AA7
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A9C</span>                 mov     rdi, r15
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246A9F</span>                 mov     rsi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AA2</span>                 call    push_back</span></span></code></pre></div>
<p>As we noted earlier, an integer overflow is often paired with 1 or more other mistakes. For example, it is used in an allocation routine to allocate dynamic memory. That is exactly the case here!</p>
<p>In the assembly below, we can see the <code>numSyms</code> being moved into <code>EDI</code> (prepping for the first argument to <code>gmallocn</code>). The <code>numSyms</code> value is controlled by the attacker. For example, we could have one segment be <code>0xFFFFFFFF</code> and the other be 2. We could also use <code>0x80000000</code> and <code>0x80000001</code>. The goal, of course, is to get <code>numSyms</code> to be a small number so the allocator, <code>gmallocn</code>, will create a small allocation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AC1</span>                 mov     edi, <span style="color:#66d9ef">dword</span> ptr [rbp<span style="color:#f92672">+</span>numSyms]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AC7</span>                 cmp     edi, <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ACA</span>                 jb      short loc_7FFF25246ADB
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ACC</span>                 xor     ecx, ecx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ACE</span>                 mov     eax, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD3</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD3</span> loc_7FFF25246AD3:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD3</span>                 inc     ecx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD5</span>                 add     eax, eax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD7</span>                 cmp     eax, edi
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AD9</span>                 jb      short loc_7FFF25246AD3
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ADB</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ADB</span> loc_7FFF25246ADB:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246ADB</span>                 mov     [rbp<span style="color:#f92672">+</span>var_2C4], ecx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AE1</span>                 mov     esi, <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AE6</span>                 call    gmallocn
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AEB</span>                 mov     r8, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AEE</span>                 xor     ebx, ebx</span></span></code></pre></div>
<p>If we assume the <code>numSyms</code> was 1 following the overflow, <code>gmallocn</code> will allocate an 8-byte region for this. But where does this small allocation get used? And can we get more data to be copied into this buffer than was allocated?</p>
<p>Luckily we don&rsquo;t have far to go to see where there is an issue! First, we will look at the source code. We notice that this loop has similar processing to the vulnerable overflow one. In particular, it processes the <code>jbig2SegSymbolDict</code> segment. In this code path, we can see that the <code>getSize</code> method is called again and the bounds of the loop are tied to this. Since <code>getSize</code> returns an unsigned int (and <code>k</code> is already an unsigned int), this comparison is unsigned. Thus, even if <code>getSize</code> is <code>0x80000000</code>, this portion will execute.</p>
<p>As you can see on line 2004, the <code>syms</code> variable receives the bitmap. This <code>syms</code> was the result of the <code>gmallocn</code> allocation. Recall that only 8-bytes were allocated, in our example. But the <code>getSize</code> could be much larger, resulting in a heap buffer overflow!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span> <span style="color:#ae81ff">1998</span>     kk <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1999</span>     <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> nRefSegs; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2000</span>         <span style="color:#66d9ef">if</span> ((seg <span style="color:#f92672">=</span> findSegment(refSegs[i]))) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2001</span>             <span style="color:#66d9ef">if</span> (seg<span style="color:#f92672">-&gt;</span>getType() <span style="color:#f92672">==</span> jbig2SegSymbolDict) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2002</span>                 symbolDict <span style="color:#f92672">=</span> (JBIG2SymbolDict <span style="color:#f92672">*</span>)seg;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2003</span>                 <span style="color:#66d9ef">for</span> (k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; k <span style="color:#f92672">&lt;</span> symbolDict<span style="color:#f92672">-&gt;</span>getSize(); <span style="color:#f92672">++</span>k) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2004</span>                     syms[kk<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> symbolDict<span style="color:#f92672">-&gt;</span>getBitmap(k); <span style="color:#f92672">&lt;--</span> overflow<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2005</span>                 }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2006</span>             }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2007</span>         }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2008</span>     }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2009</span>  
</span></span></code></pre></div>
<p>Let&rsquo;s confirm the existence of this in the 11.5.2 code as well. From the code below, we can see that the <code>getBitmap_copyloop</code> is unbounded! Thus, a heap buffer overflow exists!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AF0</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AF0</span> loc_7FFF25246AF0:                      
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AF0</span>                 mov     r15, r8
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AF3</span>                 mov     esi, [r13<span style="color:#f92672">+</span>rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AF8</span>                 mov     rdi, r14
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246AFB</span>                 call    findSegment
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B00</span>                 test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B03</span>                 jz      short loc_7FFF25246B53
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B05</span>                 mov     r12, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B08</span>                 mov     rax, [rax]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B0B</span>                 mov     rdi, r12
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B0E</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]    <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B11</span>                 cmp     eax, <span style="color:#ae81ff">1</span>                 <span style="color:#75715e">; jbig2SegSymbolDict</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B14</span>                 jnz     short loc_7FFF25246B53
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B16</span>                 mov     eax, [r12<span style="color:#f92672">+</span><span style="color:#ae81ff">0Ch</span>]         <span style="color:#75715e">; getSize()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B1B</span>                 test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B1E</span>                 mov     r8, r15
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B21</span>                 jz      short loc_7FFF25246B56
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B23</span>                 mov     r9, [rbp<span style="color:#f92672">+</span>var_2C0]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B2A</span>                 mov     edx, r9d
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B2D</span>                 xor     ecx, ecx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B2F</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B2F</span> getBitmap_copyloop:                     
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B2F</span>                 lea     esi, [rdx<span style="color:#f92672">+</span>rcx]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B32</span>                 mov     rdi, [r12<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B37</span>                 mov     rdi, [rdi<span style="color:#f92672">+</span>rcx<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B3B</span>                 mov     [r8<span style="color:#f92672">+</span>rsi<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>], rdi    <span style="color:#75715e">; leads to a heap overflow</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B3F</span>                 inc     rcx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B42</span>                 cmp     rax, rcx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25246B45</span>                 jnz     short getBitmap_copyloop</span></span></code></pre></div>
<p>Unfortunately, I did not have a sample to examine, so I could not confirm how the specific sample that CitizenLab had performed the attack.</p>
<h2 id="the-patch">The Patch</h2>
<p>In order to examine the fix, we need to look at the 11.6 version of the <code>CoreGraphics.dylib</code>. I would&rsquo;ve expected to see an integer overflow check in the calculation of <code>numSyms</code> in the first loop. However, that is not the case. Below is the 11.6 version of the processing loop which is identical to 11.5.2! Maybe Apple will send out a proper fix soon :-)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A79</span> nRefSegs_loop:                          
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A79</span>                 mov     esi, [r12<span style="color:#f92672">+</span>r14<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A7D</span>                 mov     rdi, r13
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A80</span>                 call    findSegment
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A85</span>                 test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A88</span>                 jz      loc_7FFF25247D1D
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A8E</span>                 mov     rbx, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A91</span>                 mov     rax, [rax]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A94</span>                 mov     rdi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A97</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]  <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A9A</span>                 cmp     eax, <span style="color:#ae81ff">1</span>               <span style="color:#75715e">; jbig2SegSymbolDict</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A9D</span>                 jnz     short loc_7FFF25247AB0
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247A9F</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>numSyms]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AA5</span>                 add     eax, [rbx<span style="color:#f92672">+</span><span style="color:#ae81ff">0Ch</span>]       <span style="color:#75715e">; numSysm += getSize()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AA5</span>                                              <span style="color:#75715e">; still no overflow check!</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AA5</span>                                              <span style="color:#75715e">; even in patched/11.6!</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AA8</span>                 mov     [rbp<span style="color:#f92672">+</span>numSyms], eax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AAE</span>                 jmp     short loc_7FFF25247ACD
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB0</span> <span style="color:#75715e">; --------------------------------------------------------------</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB0</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB0</span> loc_7FFF25247AB0:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB0</span>                 mov     rax, [rbx]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB3</span>                 mov     rdi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB6</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]   <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AB9</span>                 cmp     eax, <span style="color:#ae81ff">3</span>                <span style="color:#75715e">; jbig2SegSodeTable</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247ABC</span>                 jnz     short loc_7FFF25247ACD
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247ABE</span>                 mov     rdi, [rbp<span style="color:#f92672">+</span>var_2F0]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AC5</span>                 mov     rsi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247AC8</span>                 call    push_back</span></span></code></pre></div>
<p>Hrmm‚Ä¶not quite what I was expecting to see, but that‚Äôs OK..there are other changes in this function. Recall that we noted that the integer overflow itself doesn&rsquo;t always lead to an issue, but it is usually paired with 1 or more other conditions. In this case, there are 2 other conditions that lead to the exploitable case. First, as we saw, the small <code>numSyms</code> value is used to allocate a memory region. With a small allocated buffer and the second issue of the copy loop using the larger values for its bounds (i.e. <code>getSize</code>), we have a recipe for the heap buffer overflow!</p>
<p>Based on that, and so far the fact that neither the <code>numSyms</code> calculation, nor the <code>gmallocn</code> area were changed, we can hope that this is fixed in the copy loop! And this is exactly what happened.</p>
<p>We can see below that we only go into the <code>getBitmap_copyloop</code> for the <code>numSyms</code> times. But this is only half of the problem. Since <code>getBitmap</code> is called in a loop, they also need to make sure that they stop the loop early there as well!</p>
<p>You can see that change in the <code>getBitmap_copyloop</code>, where they are now checking not only against the size of the segment (seen at <code>00007FFF25247B6B</code>), but they are also checking to ensure that the data copied to that point won&rsquo;t exceed the allocated buffer size (seen at <code>00007FFF25247B5B</code> and <code>00007FFF25247B7F</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B23</span> loc_7FFF25247B23:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B23</span>     mov     esi, [r12<span style="color:#f92672">+</span>r14<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B27</span>     mov     rdi, r13
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B2A</span>     call    findSegment
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B2F</span>     test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B32</span>     jz      short loc_7FFF25247B87
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B34</span>     mov     rbx, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B37</span>     mov     rax, [rax]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B3A</span>     mov     rdi, rbx
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B3D</span>     call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]    <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B40</span>     cmp     eax, <span style="color:#ae81ff">1</span>                 <span style="color:#75715e">; jbig2SegSymbolDict</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B43</span>     jnz     short loc_7FFF25247B87
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B45</span>     cmp     r15d, [rbp<span style="color:#f92672">+</span>numSyms]    <span style="color:#75715e">; new check to make sure we aren&#39;t</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B45</span>                                    <span style="color:#75715e">; going beyond the number of symbols</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B45</span>                                    <span style="color:#75715e">;</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B45</span>                                    <span style="color:#75715e">; r15 is the &#39;counter&#39; for that</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B45</span>                                    <span style="color:#75715e">; originally set to 0</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B4C</span>     jnb     short loc_7FFF25247B87
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B4E</span>     mov     ecx, [rbx<span style="color:#f92672">+</span><span style="color:#ae81ff">0Ch</span>]         <span style="color:#75715e">; effectively ecx = getSize();</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B51</span>     mov     r15d, r15d
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B54</span>     mov     rdx, [rbp<span style="color:#f92672">+</span>orig_numSyms]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B5B</span>     sub     rdx, r15               <span style="color:#75715e">; keep track of symbols copied</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B5E</span>     mov     rax, [rbp<span style="color:#f92672">+</span>var_318]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B65</span>     lea     rsi, [rax<span style="color:#f92672">+</span>r15<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B69</span>     xor     eax, eax               <span style="color:#75715e">; copy loop counter</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B6B</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B6B</span> getBitmap_copyloop:                     
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B6B</span>     cmp     rcx, rax               <span style="color:#75715e">; normal getSize() check </span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B6E</span>     jz      short loc_7FFF25247B84
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B70</span>     mov     rdi, [rbx<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B74</span>     mov     rdi, [rdi<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B78</span>     mov     [rsi<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>], rdi
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B7C</span>     inc     rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B7F</span>     cmp     rdx, rax              <span style="color:#75715e">; this check ensures they won&#39;t write</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B7F</span>                                   <span style="color:#75715e">;  out of bounds in the copy loop!</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B82</span>     jnz     short getBitmap_copyloop
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B84</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B84</span> loc_7FFF25247B84:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B84</span>     add     r15d, eax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B87</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B87</span> loc_7FFF25247B87:                    
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B87</span>     inc     r14
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B8A</span>     cmp     r14, [rbp<span style="color:#f92672">+</span>nRefSegs]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25247B91</span>     jnz     short loc_7FFF25247B23</span></span></code></pre></div>
<p>This was certainly not the expected patch path when I first recognized the vulnerability. I would&rsquo;ve thought the overflow would&rsquo;ve been fixed at the point of calculation of numSyms. There may be a reason this is not the case. Perhaps that they still want the processing to occur even in the case of some &lsquo;malformed&rsquo; PDFs for whatever reason. Who knows!</p>
<h4 id="readsymboldictseg-and-differences-in-the-patch"><code>readSymbolDictSeg</code> and Differences in the Patch</h4>
<p>As we alluded to earlier, another method has a very similar processing loop, but it was actually protected from the integer overflow before this release! In fact, the fix in this code checks for the integer overflow when calculating the number of symbols!</p>
<p>Using our <code>JBIG2</code> source code as an example, we can see the following processing. On lines 1536-1539, we see the integer overflow check to ensure that when the statement on line 1540 is executed, it won&rsquo;t overflow!</p>
<p>In addition, they are checking to ensure the number of new symbols hasn&rsquo;t exceeded the bounds (lines 1548-1549)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span> <span style="color:#ae81ff">1527</span>     <span style="color:#75715e">// get referenced segments: input symbol dictionaries and code tables
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#ae81ff">1528</span>     numInputSyms <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1529</span>     <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> nRefSegs; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1530</span>         <span style="color:#75715e">// This is need by bug 12014, returning false makes it not crash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#ae81ff">1531</span>         <span style="color:#75715e">// but we end up with a empty page while acroread is able to render
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#ae81ff">1532</span>         <span style="color:#75715e">// part of it
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#ae81ff">1533</span>         <span style="color:#66d9ef">if</span> ((seg <span style="color:#f92672">=</span> findSegment(refSegs[i]))) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1534</span>             <span style="color:#66d9ef">if</span> (seg<span style="color:#f92672">-&gt;</span>getType() <span style="color:#f92672">==</span> jbig2SegSymbolDict) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1535</span>                 j <span style="color:#f92672">=</span> ((JBIG2SymbolDict <span style="color:#f92672">*</span>)seg)<span style="color:#f92672">-&gt;</span>getSize();
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1536</span>                 <span style="color:#a6e22e">if</span> (numInputSyms <span style="color:#f92672">&gt;</span> UINT_MAX <span style="color:#f92672">-</span> j) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1537</span>                     error(errSyntaxError, curStr<span style="color:#f92672">-&gt;</span>getPos(), 
</span></span><span style="display:flex;"><span>                                <span style="color:#e6db74">&#34;Too many input symbols in JBIG2 symbol dictionary&#34;</span>);
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1538</span>                     <span style="color:#66d9ef">goto</span> eofError;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1539</span>                 }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1540</span>                 numInputSyms <span style="color:#f92672">+=</span> j;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1541</span>             } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (seg<span style="color:#f92672">-&gt;</span>getType() <span style="color:#f92672">==</span> jbig2SegCodeTable) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1542</span>                 codeTables.push_back(seg);
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1543</span>             }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1544</span>         } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1545</span>             <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1546</span>         }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1547</span>     }
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1548</span>     <span style="color:#66d9ef">if</span> (numInputSyms <span style="color:#f92672">&gt;</span> UINT_MAX <span style="color:#f92672">-</span> numNewSyms) {
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1549</span>         error(errSyntaxError, curStr<span style="color:#f92672">-&gt;</span>getPos(), 
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;Too many input symbols in JBIG2 symbol dictionary&#34;</span>);
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1550</span>         <span style="color:#66d9ef">goto</span> eofError;
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1551</span>     }</span></span></code></pre></div>
<p>In the assembly from 11.5.2, we can see the overflow check at addresses <code>00007FFF2524576D</code> - <code>00007FFF25245774</code>, with the branch at <code>00007FFF25245774</code> going down the error path:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245748</span> loc_7FFF25245748:                       
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245748</span>                 mov     rax, [rbp<span style="color:#f92672">+</span>var_68]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524574C</span>                 mov     esi, [rax<span style="color:#f92672">+</span>rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524574F</span>                 mov     rdi, r14
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245752</span>                 call    findSegment
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245757</span>                 test    rax, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524575A</span>                 jz      short loc_7FFF25245791
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524575C</span>                 mov     r12, rax
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524575F</span>                 mov     rax, [rax]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245762</span>                 mov     rdi, r12
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245765</span>                 call    <span style="color:#66d9ef">qword</span> ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">10h</span>]    <span style="color:#75715e">; getType()</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245768</span>                 cmp     eax, <span style="color:#ae81ff">1</span>                 <span style="color:#75715e">; jbig2SegSymbolDict</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524576B</span>                 jnz     short loc_7FFF25245776
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF2524576D</span>                 add     r13d, [r12<span style="color:#f92672">+</span><span style="color:#ae81ff">0Ch</span>]
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245772</span>                 jnb     short loc_7FFF25245791 <span style="color:#75715e">; integer overflow check</span>
</span></span><span style="display:flex;"><span>__text:<span style="color:#960050;background-color:#1e0010">00007</span><span style="color:#a6e22e">FFF25245774</span>                 jmp     short integer_overflow</span></span></code></pre></div>
<p>As you can see, this overflow check was done during the calculation of the number of symbols. This is due to the <code>jnb</code> instruction. The add instruction will perform both signed and unsigned operation and adjust the <code>Overflow Flag</code> (<code>OF</code>) and/or <code>Carry Flag</code> (<code>CF</code>) for signed and unsigned respectively. The <code>jnb</code> instruction (a pseudonym for <code>jnc</code>) indicates to jump if the carry flag is 0 (i.e. no integer wrapping occurred). In this case, this is the &lsquo;good&rsquo; path, whereas if the <code>CF</code> was set, this would indicate an integer wrapping and the corresponding error path is taken!</p>
<p>On the other hand, the <code>readTextRegionSeg</code> method, the <code>numSyms</code> can still overflow, however, in the processing loop when the <code>getBitmp</code> method is copying to the allocated region, there is a check to ensure that this data is not overflowed.</p>
<p>Based on the analysis and the abundance of common strings, it seems that Apple is likely using an opensource version of the <code>JBIG2</code> processing, and making their own modifications. (Admittedly, I did search for their notes on this, but didn&rsquo;t find it&hellip;if anyone confirms that they are using that would be awesome). It does seem that a different developer implemented the fix in <code>CVE-2021-30860</code> than the one found in the <code>readSymbolDictSeg</code> method.</p>
<h3 id="concluding-thoughts">Concluding Thoughts</h3>
<p>There were other functions that were patched as well. For example, in the 11.6 version, it is worth analyzing the functions at address <code>00007FFF24EF2684</code> and <code>00007FFF250F6301</code>. Perhaps for another blog post&hellip;</p>
<p>As we noted, this vulnerability is (well prior to the patch) exploitable through a crafted iMessage without any user-interaction. In other words, a specially crafted PDF file could be sent to an iMessage recipient, and the victim&rsquo;s <code>IMTranscoderAgent</code> begins processing the malicious payload outside of the BlastDoor sandbox. As noted in the beginning of this post, hopefully Apple will also update BlastDoor and prevent these dangerous file formats from being processed outside the Sandbox environment!</p>
<p>Apple&rsquo;s iDevices have gotten more secure especially from allowing their system to be modified upon reboot. Thus, a good practice for iOS users is to a) update when updates are available and b) reboot the phone every so often! Of course this won&rsquo;t stop these 0day attacks, but it is at least a good security practice. It would be worth downloading <a href="https://www.iverify.io">iVerify</a> to help test for common infections as well as for recommendations to increase the security posture of your device!</p>
<img src="../images/blog/blog_0x67/iVerify.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">iVerify</center>

<h3 id="part-0x2">Part 0x2</h3>
<p>&hellip;stay tuned! üßê</p>

</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>