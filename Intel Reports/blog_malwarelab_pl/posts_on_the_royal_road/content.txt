<!DOCTYPE html>
<html>
<head>
    
        
<meta charset="utf-8">
<meta name="HandheldFriendly" content="True">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer-when-downgrade">

<title>On the Royal Road  - MalwareLab.pl Research Notes</title>
<meta name="description" content="">

<link rel="alternate" type="application/rss+xml" title="RSS" href="https://blog.malwarelab.pl/rss/">

<link rel="icon" type="image/x-icon" href="https://blog.malwarelab.pl/favicon.ico">
<link rel="apple-touch-icon-precomposed" href="https://blog.malwarelab.pl/favicon.png">

<link rel="stylesheet" href="https://blog.malwarelab.pl/static/css/style.css?rnd=1593086112" />

<meta property="og:title" content="On the Royal Road" />
<meta property="og:description" content="Intro Royal Road or 8.t is one of the most known RTF weaponizer, its used and shared mostly amongst Chinese speaking actors - there are also couple very good publications including one form nao_sec, Sebdraven and Anomali. It was on my todo list for some time, and thanks to recent twitter discussion as well as quarantine time i finally took a deeper look at it. We&rsquo;ll go into how to quickly analyze RTF maldocs, quickly tear-down shellcode used and finally how to extract embedded payload." />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://blog.malwarelab.pl/posts/on_the_royal_road/" />
<meta property="article:published_time" content="2020-03-21T13:24:15+01:00" />
<meta property="article:modified_time" content="2020-03-21T13:24:15+01:00" />

<meta name="twitter:card" content="summary"/>
<meta name="twitter:title" content="On the Royal Road"/>
<meta name="twitter:description" content="Intro Royal Road or 8.t is one of the most known RTF weaponizer, its used and shared mostly amongst Chinese speaking actors - there are also couple very good publications including one form nao_sec, Sebdraven and Anomali. It was on my todo list for some time, and thanks to recent twitter discussion as well as quarantine time i finally took a deeper look at it. We&rsquo;ll go into how to quickly analyze RTF maldocs, quickly tear-down shellcode used and finally how to extract embedded payload."/>








    
</head>
<body>
    <div class="container">
        <header> 
            
                <h1 class="site-header">
    <a href="https://blog.malwarelab.pl">MalwareLab.pl Research Notes</a>
</h1>
<nav>
    
    
</nav>

            
        </header>
        <main>
            

    <article class="post">
        <header>
            <h1>On the Royal Road</h1>
        </header>
        <div class="content">
            <h1 id="intro">Intro</h1>
<p>Royal Road or 8.t is one of the most known RTF weaponizer, its used and shared mostly amongst Chinese speaking actors - there are also couple very good publications including one form <a href="https://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html">nao_sec</a>, <a href="https://medium.com/@Sebdraven">Sebdraven</a> and <a href="https://www.anomali.com/blog/analyzing-digital-quartermasters-in-asia-do-chinese-and-indian-apts-have-a-shared-supply-chain">Anomali</a>. It was on my todo list for some time, and thanks to recent <a href="https://twitter.com/Sebdraven/status/1239853425594155008">twitter discussion</a> as well as quarantine time i finally took a deeper look at it. We&rsquo;ll go into how to quickly analyze RTF maldocs,
quickly tear-down shellcode used and finally how to extract embedded payload.</p>
<h1 id="getting-shellcode">Getting shellcode</h1>
<p>Document that will be used as an example caused a discussion on twitter regarding actor behind this attack due to some code overlap of a dropped payload. We wont talk about this part tho,
aforementioned document has a sha256 <strong>1527f7b9bdea7752f72ffcd8b0a97e9f05092fed2cb9909a463e5775e12bd2d6</strong>  and in order to lures victim it exploits current pandemic situation having a title <strong>President discusses budget savings due to coronavirus with Finance Minister.rtf</strong><br>
Like with most documents, you can relay on oletools to help you with dissecting rtfs, rtfobj does a great job extracting both shellcode and encoded payload.</p>
<pre><code>File: '/tmp/5e31d16d6bf35ea117d6d2c4d42ea879.bin' - size: 574379 bytes
---+----------+---------------------------------------------------------------
id |index     |OLE Object                                                     
---+----------+---------------------------------------------------------------
0  |0000CAE6h |format_id: 2 (Embedded)                                        
   |          |class name: 'Package'                                          
   |          |data size: 254164                                              
   |          |OLE Package object:                                            
   |          |Filename: u'wd32PrvSE.wmf'                                     
   |          |Source path: u'C:\\Windows\\wd32PrvSE.wmf'                     
   |          |Temp path = u'C:\\Windows\\wd32PrvSE.wmf'                      
   |          |MD5 = 'b33dabc3e9e653ce14fdc5323cec12f8'                       
---+----------+---------------------------------------------------------------
1  |00088D1Eh |format_id: 2 (Embedded)                                        
   |          |class name: 'Equation.2\x00\x124Vx\x90\x124VxvT2'              
   |          |data size: 6436                                                
   |          |MD5 = '865ea38d8074829351a66826ebab2fe9'                       
---+----------+---------------------------------------------------------------
2  |00088D04h |Not a well-formed OLE object                                   
---+----------+---------------------------------------------------------------
Saving file embedded in OLE object #0:
  format_id  = 2
  class name = 'Equation.2\x00\x124Vx\x90\x124VxvT2'
  data size  = 6436
  saving to file /tmp/5e31d16d6bf35ea117d6d2c4d42ea879.bin_object_00088D1E.bin
  md5 865ea38d8074829351a66826ebab2fe9
</code></pre><h1 id="shellcode-stub">Shellcode stub</h1>
<p>From output above we can assume that document attempts to exploit a bug in Equation Editor so object number 1 will most likely contain a shellcode and will be a target of our analysis. Let&rsquo;s throw it in our favorite disassembler. Unfortunately IDA doesn&rsquo;t reveal any code which hints us that somewhere there there is a decoding stub, responsible for decoding actual shellcode. Indeed we can find one at offset <code>6Ah</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">seg000:<span style="color:#960050;background-color:#1e0010">0000006</span><span style="color:#a6e22e">A</span> <span style="color:#66d9ef">E8</span> <span style="color:#66d9ef">FF</span> <span style="color:#66d9ef">FF</span> <span style="color:#66d9ef">FF</span> <span style="color:#66d9ef">FF</span>                          <span style="color:#66d9ef">call</span>    <span style="color:#66d9ef">near</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">loc_6A</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">4</span>
seg000:<span style="color:#960050;background-color:#1e0010">0000006</span><span style="color:#a6e22e">F</span> <span style="color:#66d9ef">C3</span>                                      <span style="color:#66d9ef">retn</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000070</span>                         <span style="color:#75715e">; ---------------------------------------------------------------------------
</span><span style="color:#75715e"></span>seg000:<span style="color:#960050;background-color:#1e0010">00000070</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">F</span>                                      <span style="color:#66d9ef">pop</span>     <span style="color:#66d9ef">edi</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000071</span> <span style="color:#960050;background-color:#1e0010">83</span> <span style="color:#a6e22e">C7</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">A</span>                                <span style="color:#66d9ef">add</span>     <span style="color:#66d9ef">edi</span>, <span style="color:#ae81ff">1</span><span style="color:#66d9ef">Ah</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000074</span> <span style="color:#960050;background-color:#1e0010">33</span> <span style="color:#a6e22e">C9</span>                                   <span style="color:#66d9ef">xor</span>     <span style="color:#66d9ef">ecx</span>, <span style="color:#66d9ef">ecx</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000076</span> <span style="color:#960050;background-color:#1e0010">66</span> <span style="color:#a6e22e">B9</span> <span style="color:#66d9ef">A5</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">B</span>                             <span style="color:#66d9ef">mov</span>     <span style="color:#66d9ef">cx</span>, <span style="color:#ae81ff">0</span><span style="color:#66d9ef">BA5h</span>
seg000:<span style="color:#960050;background-color:#1e0010">0000007</span><span style="color:#a6e22e">A</span>
seg000:<span style="color:#960050;background-color:#1e0010">0000007</span><span style="color:#a6e22e">A</span>                         <span style="color:#66d9ef">loc_7A</span>:                                 <span style="color:#75715e">; CODE XREF: seg000:00000087âj
</span><span style="color:#75715e"></span><span style="color:#66d9ef">seg000</span>:<span style="color:#ae81ff">0000007</span><span style="color:#66d9ef">A</span> <span style="color:#ae81ff">66</span> <span style="color:#ae81ff">83</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">F</span> <span style="color:#ae81ff">00</span>                             <span style="color:#66d9ef">cmp</span>     <span style="color:#66d9ef">word</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">edi</span>], <span style="color:#ae81ff">0</span>
seg000:<span style="color:#960050;background-color:#1e0010">0000007</span><span style="color:#a6e22e">E</span> <span style="color:#ae81ff">74</span> <span style="color:#ae81ff">05</span>                                   <span style="color:#66d9ef">jz</span>      <span style="color:#66d9ef">short</span> <span style="color:#66d9ef">loc_85</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000080</span> <span style="color:#960050;background-color:#1e0010">66</span> <span style="color:#960050;background-color:#1e0010">81</span> <span style="color:#960050;background-color:#1e0010">37</span> <span style="color:#a6e22e">C3</span> <span style="color:#ae81ff">90</span>                          <span style="color:#66d9ef">xor</span>     <span style="color:#66d9ef">word</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">edi</span>], <span style="color:#ae81ff">90</span><span style="color:#66d9ef">C3h</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000085</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000085</span>                         loc_85:                                 <span style="color:#75715e">; CODE XREF: seg000:0000007Eâj
</span><span style="color:#75715e"></span>seg000:<span style="color:#960050;background-color:#1e0010">00000085</span> <span style="color:#960050;background-color:#1e0010">47</span>                                      <span style="color:#a6e22e">inc</span>     <span style="color:#66d9ef">edi</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000086</span> <span style="color:#960050;background-color:#1e0010">47</span>                                      <span style="color:#a6e22e">inc</span>     <span style="color:#66d9ef">edi</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000087</span> <span style="color:#a6e22e">E2</span> <span style="color:#66d9ef">F1</span>                                   <span style="color:#66d9ef">loop</span>    <span style="color:#66d9ef">loc_7A</span>
</code></pre></div><p>When analyzing shellcodes used in Equation Editor exploits i prefer to look for a bytes indicating jumps or calls instead of parsing structure of a file, this yields quicker results and allows to throw out garbage bytes like here at the begin of a file. Anyhow here we have a typical jump-into-instruction and short xoring loop. Nothing that can&rsquo;t be solved with a bit of scripting. To make it more fun, will make it a generic</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode_first_stage</span>():
    pat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;C3 5F 83 C7 ? 33 C9 66 B9 ? ? 66 83 3F ? 74 ?? 66 81 37 ? ? 47 47 E2 ?&#34;</span>
    off <span style="color:#f92672">=</span> FindBinary(idaapi<span style="color:#f92672">.</span>get_imagebase(), idaapi<span style="color:#f92672">.</span>SEARCH_DOWN,pat)
    size <span style="color:#f92672">=</span> ida_bytes<span style="color:#f92672">.</span>get_word(off<span style="color:#f92672">+</span><span style="color:#ae81ff">9</span>)
    key  <span style="color:#f92672">=</span> ida_bytes<span style="color:#f92672">.</span>get_word(off <span style="color:#f92672">+</span> <span style="color:#ae81ff">20</span>)
    ea <span style="color:#f92672">=</span> off <span style="color:#f92672">+</span> ida_bytes<span style="color:#f92672">.</span>get_byte(off <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(size):
        <span style="color:#66d9ef">if</span> ida_bytes<span style="color:#f92672">.</span>get_word(ea):
            patch_word(ea,ida_bytes<span style="color:#f92672">.</span>get_word(ea) <span style="color:#f92672">^</span> key)
        ea <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
</code></pre></div><p>This will take care of our problem. It is also worth noticing that this stub is pretty uncommon due to comparison to zero at <code>7Ah</code> which makes it pretty good candidate for YARA signature! something like that should do the trick.</p>
<pre><code>rule royal_road_dec_loop : RoyalRoad
{
  meta:
    author = &quot;mak&quot;
    hash = &quot;1527f7b9bdea7752f72ffcd8b0a97e9f05092fed2cb9909a463e5775e12bd2d6&quot;
    hash = &quot;3e216e2b0320201082b81ebc3a35b65a242ff260f2d7f8e441970ac5262b3a71&quot;
    description = &quot;matches a shellcode stub in binary and rtf document&quot;
  
  /*
  0x70L 5F                            pop edi
  0x71L 83C71A                        add edi, 0x1a
  0x74L 33C9                          xor ecx, ecx
  0x76L 66B9A50B                      mov cx, 0xba5
  0x7aL 66833F00                      cmp word ptr [edi], 0
  0x7eL 7405                          je 0x85
  0x80L 668137C390                    xor word ptr [edi], 0x90c3
  0x85L 47                            inc edi
  0x86L 47                            inc edi
  0x87L E2F1                          loop 0x7a
   */
  strings:
    $chunk_1 = { 5F 83 C7 ?? 33 C9 66 B9 ?? ?? 66 83 3F ?? 74 ?? 66 81 37 ?? ?? 47 47 E2  }
    $enc_chunk = { 35 46 38 33 43 37 ?? ?? 33 33 43 39 36 36 42 39 ?? ?? ?? ?? 36 36 38 33 33 46 ?? ?? 37 34 ?? ?? 36 36 38 31 33 37 ?? ?? ?? ?? 34 37 34 37 45 32 }
    $enc_chunk1 = { 35 66 38 33 63 37 ?? ?? 33 33 63 39 36 36 62 39 ?? ?? ?? ?? 36 36 38 33 33 66 ?? ?? 37 34 ?? ?? 36 36 38 31 33 37 ?? ?? ?? ?? 34 37 34 37 65 32 }
    $rtf = &quot;{\\rt&quot;

  condition:
    ($rtf and 1 of ($enc*)) or $chunk_1
  
}

</code></pre><p>Note that we have hex encoded version for upper and lower cases.
But enough of this digression, lets get back to our shellcode.</p>
<h1 id="shellcode">Shellcode</h1>
<p>At first glance, decompilation of main shellcode function doesn&rsquo;t look very nice, but we can make it work. If one scroll down a little it&rsquo;s actually pretty easy to find a decoding loop and make an educated guess that this will decode a payload, but this time will do it step by step.<br>
First when dealing with shellcodes (or generally with most malwares) its important to find how it utilize API calls. In most cases there will be a search for library addresses by walking a PEB and later parsing PE files and applying some sort of hashing in order to resolve imports. Same here.
At offset <code>b67h</code> there is a function that will resolve all necessary imports.</p>
<pre><code>  v0 = (int *)(sub_79E() + 13247445);
  v0[2] = sub_6BF();
  v1 = sub_669();
  v2 = v0[27];
  v3 = v0[2];
  *v0 = v1;
  v4 = ((int (__fastcall *)(int, int))sub_70A)(v3, v2);
  v5 = v0[98];
  v6 = v0[2];
  v0[27] = v4;
  v0[98] = ((int (__fastcall *)(int, int))sub_70A)(v6, v5);
</code></pre><p>At top of this function we can see a call to a function and some strange number being added to a returned value, this is typical way of obfuscating address of a global structure that will hold pointers to resolved APIs - sometimes it also hold hashes of APIs that need to be resolved, exactly like in this case - which we can see immediately when following memory operations. After looking at <code>sub_70A</code> we found out that hashing algorithm is <code>ror7</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ror7_hash</span>(name):
    x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> name:
        x <span style="color:#f92672">=</span> ror(x, <span style="color:#ae81ff">7</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xffffffff</span>
        x <span style="color:#f92672">+=</span> ord(c)
        x <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xffffffff</span>
    <span style="color:#66d9ef">return</span> x
</code></pre></div><p>After this quick analysis we know that:</p>
<ul>
<li>hashing function is <code>ror7</code></li>
<li>list of hash values is located at <code>-13242239 + 13247445 = 0x1456</code></li>
</ul>
<p>Lets create a script that will create <strong>CTX</strong> objects for us. First we need a list of API names, here <a href="https://github.com/mak/mlib">mlib</a> has you covered as it exposes couple thousands of standard APIs one can found in windows dll&rsquo;s. Rest is just a matter of creating and naming a structure members. Following script accomplishes that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> mlib.winapi <span style="color:#f92672">import</span> make_hash_dict
<span style="color:#f92672">from</span> mlib.hash <span style="color:#f92672">import</span> ror7_hash
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_ctx</span>(addr):
    api_dict <span style="color:#f92672">=</span> make_hash_dict(ror7_hash)
    st_id <span style="color:#f92672">=</span> ida_struct<span style="color:#f92672">.</span>add_struc(idaapi<span style="color:#f92672">.</span>BADADDR,<span style="color:#e6db74">&#39;ctx&#39;</span>)
    st <span style="color:#f92672">=</span> ida_struct<span style="color:#f92672">.</span>get_struc(st_id)
    h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> 
    <span style="color:#66d9ef">while</span> h <span style="color:#f92672">!=</span> idaapi<span style="color:#f92672">.</span>BADADDR:
        h <span style="color:#f92672">=</span> ida_bytes<span style="color:#f92672">.</span>get_dword(addr)
        name <span style="color:#f92672">=</span> api_dict<span style="color:#f92672">.</span>get(h,None)
        <span style="color:#66d9ef">if</span> name:
            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;api_&#39;</span> <span style="color:#f92672">+</span> name
        addr <span style="color:#f92672">+=</span><span style="color:#ae81ff">4</span> 
        ida_struct<span style="color:#f92672">.</span>add_struc_member(st, name, idaapi<span style="color:#f92672">.</span>BADADDR, idaapi<span style="color:#f92672">.</span>FF_DWORD, None, <span style="color:#ae81ff">4</span>)
</code></pre></div><p>And soon after applying this and some more types we can get a nice clear view of a main function</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">ctx <span style="color:#f92672">*</span><span style="color:#a6e22e">main_function</span>()
{
  <span style="color:#66d9ef">int</span> v0; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  ctx <span style="color:#f92672">*</span>v1; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v2; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>i; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// [esp-44h] [ebp-68h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v14; <span style="color:#75715e">// [esp+10h] [ebp-14h]
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>pefile; <span style="color:#75715e">// [esp+14h] [ebp-10h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v16; <span style="color:#75715e">// [esp+18h] [ebp-Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v17; <span style="color:#75715e">// [esp+1Ch] [ebp-8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> file_size; <span style="color:#75715e">// [esp+20h] [ebp-4h]
</span><span style="color:#75715e"></span>
  v0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v1 <span style="color:#f92672">=</span> (ctx <span style="color:#f92672">*</span>)(get_ctx_offset() <span style="color:#f92672">+</span> <span style="color:#ae81ff">13247445</span>);
  resolve_api();
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_GetTempPathA, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">260</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)v1<span style="color:#f92672">-&gt;</span>temp_path, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v2 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>file_name;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>temp_path; <span style="color:#f92672">*</span>i; <span style="color:#f92672">++</span>i )
    ;
  v4 <span style="color:#f92672">=</span> i <span style="color:#f92672">-</span> v2;
  <span style="color:#66d9ef">do</span>
  {
    v5 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v2;
    v2[v4] <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v2;
    <span style="color:#f92672">++</span>v2;
  }
  <span style="color:#66d9ef">while</span> ( v5 );
  v14 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_CreateFileA, <span style="color:#ae81ff">7</span>, (<span style="color:#66d9ef">int</span>)v1<span style="color:#f92672">-&gt;</span>temp_path, <span style="color:#ae81ff">0x80000000</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">128</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v6 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_GetFileSize, <span style="color:#ae81ff">2</span>, v14, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v13 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>api_VirtualAlloc;
  file_size <span style="color:#f92672">=</span> v6;
  pefile <span style="color:#f92672">=</span> (_BYTE <span style="color:#f92672">*</span>)v1<span style="color:#f92672">-&gt;</span>call_func(v13, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">0</span>, v6, <span style="color:#ae81ff">12288</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_ReadFile, <span style="color:#ae81ff">5</span>, v14, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)pefile, v6, <span style="color:#f92672">&amp;</span>v16, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2029427297</span>;
  v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( file_size <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
  {
    <span style="color:#66d9ef">do</span>
    {
      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
      <span style="color:#66d9ef">do</span>
      {
        v7 <span style="color:#f92672">=</span> v7 <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">^</span> ((v7 <span style="color:#f92672">^</span> (v7 <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">27</span>)) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v7);
        <span style="color:#f92672">--</span>v9;
      }
      <span style="color:#66d9ef">while</span> ( v9 );
      pefile[v8<span style="color:#f92672">++</span>] <span style="color:#f92672">^=</span> v7;
    }
    <span style="color:#66d9ef">while</span> ( v8 <span style="color:#f92672">&lt;</span> file_size );
    v0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  }
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    v10 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_GetFileSize, <span style="color:#ae81ff">2</span>, v0, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
    <span style="color:#66d9ef">if</span> ( v10 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x1000</span> )
    {
      v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_ReadFile, <span style="color:#ae81ff">5</span>, v0, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v17, <span style="color:#ae81ff">4</span>, <span style="color:#f92672">&amp;</span>v16, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
      <span style="color:#66d9ef">if</span> ( v17 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">535703600</span> )
        <span style="color:#66d9ef">break</span>;
    }
    v0 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>;
  }
  v11 <span style="color:#f92672">=</span> v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_VirtualAlloc, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">0</span>, v10, <span style="color:#ae81ff">12288</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_WriteFile, <span style="color:#ae81ff">5</span>, v0, v11, v10, <span style="color:#f92672">&amp;</span>v16, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_CloseHandle, <span style="color:#ae81ff">1</span>, v0, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  load_pe(pefile, file_size);
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_CloseHandle, <span style="color:#ae81ff">1</span>, v14, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  v1<span style="color:#f92672">-&gt;</span>call_func(v1<span style="color:#f92672">-&gt;</span>api_TerminateProcess, <span style="color:#ae81ff">2</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  <span style="color:#66d9ef">return</span> v1;

</code></pre></div><p>This will be enough to continue analysis of a campaign, as we can now switch to decoding payload and analyze whats there, however its sometimes worth to dig a little deeper into and uncover some interesting flavors that are inside. We will do exactly that.</p>
<h1 id="call_func---down-to-rabbit-hole"><code>call_func</code> - down to rabbit hole</h1>
<p>We skipped over analysis of how exactly api is resolved, lets apply some types first and take another look. First thing that will strike us is that it walks <code>IMAGE_DATA_DIRECTORY</code> instead of <code>EXPORTS</code>, indeed <code>get_api</code> function (located at <code>70Ah</code>) will recive as a frist argument
pointer to begin of msvcrt.dll and will relay on addresses resolved when this librarly was loaded. This is a very nice anti-analysis trick, as this library is not automatically loaded, and can cause some problems when analyzing shellcode outside of it designed host. After address is resolved <code>5</code> is being added to it, this is strange! Keep it in mind and lets move to function located at <code>7B7h</code>. This function will make sure that we have <code>GetProcAddr</code> and <code>VirtualProtect</code> as well will try to resolve address of <code>clearerr</code> from <code>msvcrt.dll</code> (via <code>GetProcAddr</code>). In order to call any of those APIs we have to go through a wrapper at <code>8AEh</code> and eventually we will reach function at <code>8D5h</code> that will call our pointer, but before that it will do some checks.</p>
<p><img src="/static/blog/img/onrr.check_hook.png" alt=""></p>
<p>Here lays the mystery of those <code>+5</code> from <code>get_api</code>, before API is called first few bytes of its prologue are checked. Any experienced eye can immediately recognize right hand values as an encoding of <strong>call</strong> or <strong>jmp</strong> asm opcodes. This is anti-hooking mechanism! If it detects hooking it will skip first 5 bytes emulating typical function prologue, thus rendering most of user-mode api loggers useless.<br>
After address <code>clearerr</code> is resolved, it content is overwritten with bytes from <code>8AEh</code> to <code>8FDh</code> which contains functions responsible for anti-hooking call proxy. There is another nice trick here, as the address of interesting area is dynamically calculated</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">A4</span>                 <span style="color:#66d9ef">call</span>    <span style="color:#66d9ef">override_clearerr</span>
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">A9</span>                 <span style="color:#66d9ef">call</span>    <span style="color:#66d9ef">$</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">5</span>
<span style="color:#a6e22e">...</span>
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">F4</span>                 <span style="color:#66d9ef">pop</span>     <span style="color:#66d9ef">ebx</span>
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">F5</span>                 <span style="color:#66d9ef">mov</span>     <span style="color:#66d9ef">eax</span>, [<span style="color:#66d9ef">ebx</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">1</span>]
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">F8</span>                 <span style="color:#66d9ef">add</span>     <span style="color:#66d9ef">ebx</span>, <span style="color:#66d9ef">eax</span>
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">FA</span>                 <span style="color:#66d9ef">add</span>     <span style="color:#66d9ef">ebx</span>, <span style="color:#ae81ff">5</span>
seg000:<span style="color:#960050;background-color:#1e0010">000008</span><span style="color:#a6e22e">FD</span>                 <span style="color:#66d9ef">mov</span>     [<span style="color:#66d9ef">ebp-18h</span>], <span style="color:#66d9ef">ebx</span>
seg000:<span style="color:#960050;background-color:#1e0010">00000900</span>                 <span style="color:#a6e22e">push</span>    <span style="color:#ae81ff">50</span><span style="color:#66d9ef">h</span> <span style="color:#75715e">; &#39;P&#39;       ; a3
</span><span style="color:#75715e"></span><span style="color:#66d9ef">seg000</span>:<span style="color:#ae81ff">00000902</span>                 <span style="color:#66d9ef">mov</span>     <span style="color:#66d9ef">edx</span>, [<span style="color:#66d9ef">ebp-18h</span>]  <span style="color:#75715e">; a2
</span><span style="color:#75715e"></span><span style="color:#66d9ef">seg000</span>:<span style="color:#ae81ff">00000905</span>                 <span style="color:#66d9ef">mov</span>     <span style="color:#66d9ef">ecx</span>, [<span style="color:#66d9ef">ebp-8</span>]    <span style="color:#75715e">; a1
</span><span style="color:#75715e"></span><span style="color:#66d9ef">seg000</span>:<span style="color:#ae81ff">00000908</span>                 <span style="color:#66d9ef">call</span>    <span style="color:#66d9ef">copy</span>
</code></pre></div><p>Here, beside call-pop technique, we can see that address that will be called from <code>8A9h</code> is extracted allowing to put interesting region anywhere in binary.
While that deep analysis is not necessary to obtain final payload, it adds some information about anyone who coded this shellcode as those tricks are quite sophisticated and uncommon, One can try to go through past and current samples of Royal Road and check how this shellcode evolves and if its maybe typical to specific threat actor or not.</p>
<h1 id="optimizing-decoding">Optimizing decoding</h1>
<p>Along side their publication researchers at <strong>nao_sec</strong> released a <a href="https://github.com/nao-sec/rr_decoder/raw/master/rr_decode.py">tool</a> that can help decode embedded payload into proper PE file. They realized that keys used to bootstrap decoding algorithm in shellcode are reused
and first 4 bytes of encoded binary will always be the same. They found 4 different algorithms and 4 diffrent keys, all of the algorithms look more or less the same and have a shape of the one discussed earlier.
It is important to notice that in their code two decoding functions (<code>decode_b25a6f00</code> and <code>decode_b2a66dff</code>) are totally different than what one can see in binaries, those are simple xors with one byte.
Lets take a look at <code>decode_b2a66dff</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  <span style="color:#66d9ef">int</span> v0, v9;
  <span style="color:#66d9ef">int</span> v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2029427297</span>;
  <span style="color:#66d9ef">int</span> v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">do</span>
    {
      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
      <span style="color:#66d9ef">do</span>
      {
        v7 <span style="color:#f92672">=</span> v7 <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">^</span> ((v7 <span style="color:#f92672">^</span> (v7 <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">27</span>)) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v7);
        <span style="color:#f92672">--</span>v9;
      }
      <span style="color:#66d9ef">while</span> ( v9 );
      v8<span style="color:#f92672">++</span>;
      printf(<span style="color:#e6db74">&#34;%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, v7);
    }
    <span style="color:#66d9ef">while</span> ( v8 <span style="color:#f92672">&lt;</span> v18 );
    v0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;

</code></pre></div><p>This function will very quickly reach <code>0xfffffffc</code> and is degenerating whole encoding scheme to just a xor with constant byte 0xfc. Lets split the line into simpler components</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> ((v7 <span style="color:#f92672">^</span> (v7 <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">27</span>)) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">int</span> z <span style="color:#f92672">=</span>  v7<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">4</span>;
v7 <span style="color:#f92672">=</span> z <span style="color:#f92672">^</span> x <span style="color:#f92672">|</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>v7);
</code></pre></div><p>Problem lies in <code>v7&amp;4</code> which will keep its bit light up forever after the first time it will be set to 1. This is because it will be XORed with 1 bit variable and ORed with a value multiplied by 2. Next the bit will spread around the rest of the bits with every step until all the bits on the left will be set to 1 (thanks to @dsredford for clarification)
This is clearly a mistake caused probably by a typo or lack understanding of operators priority, what author wanted to accomplish was something like this (based on later modifications):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> ((v7 <span style="color:#f92672">^</span> (v7 <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">27</span>)) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">3</span>)
<span style="color:#66d9ef">int</span> z <span style="color:#f92672">=</span>  v7<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">4</span>;
v7 <span style="color:#f92672">=</span> (z <span style="color:#f92672">^</span> x)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>v7);
</code></pre></div><p>Unfortunately these mistakes are not present in every version, hence more elaborate codes in <code>rr_decode.py</code>. This script can of course take care of other schemas but it take some time when dealing with bigger binaries:</p>
<pre><code>$ python3 rr_decode.py ./df684cc86f19d5843f07dfd3603603723bb6491a29a88de7c3d70686df8635cc.bin_8.t xx.bin
[!] Type [b0747746] is Detected!
[+] Decoding...
[!] Complete!

real	31m49.903s
user	30m30.094s
sys	0m40.822s
$ du -hs /tmp/xx.bin
536K	/tmp/xx.bin
</code></pre><p>This is a problem for our automatic processing. Maybe we can do something about it? Lets take a look at this one,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x48B53A6C</span>;
  v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( v8 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
  {
    v11 <span style="color:#f92672">=</span> v8;
    <span style="color:#66d9ef">do</span>
    {
      v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
      <span style="color:#66d9ef">do</span>
      {
        v9 <span style="color:#f92672">=</span> ((v9 <span style="color:#f92672">^</span> ((v9 <span style="color:#f92672">^</span> (v9 <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">26</span>)) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">3</span>)) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v9)) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
        <span style="color:#f92672">--</span>v12;
      }
      <span style="color:#66d9ef">while</span> ( v12 );
      <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(v10<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> v22) <span style="color:#f92672">^=</span> v9;
    }
    <span style="color:#66d9ef">while</span> ( v10 <span style="color:#f92672">&lt;</span> v11 );

</code></pre></div><p>can we somehow optimize expression assigned to <code>v9</code>? It turns out we can! ;]<br>
Lets expand it a little bit this part <code>((9 ^ ((v9 ^ (v9 &gt;&gt; 26)) &gt;&gt; 3))&amp;1</code> using the fact that <code>(x ^ y ) &gt;&gt; z</code> is the same as <code>(x &gt;&gt; z) ^ (x &gt;&gt; z)</code>. We&rsquo;ll end up with <code>(v9 ^  ((v9&gt;&gt;27)&gt;&gt;3) ^ (v9&gt;&gt;3))&amp;1</code>.
We can see here that the whole expression is being anded with 1, meaning we only care about one bit of this operation. This bit will be a result of xoring 3 bits from a number, more precisely we will xor following bits</p>
<ul>
<li>0th</li>
<li>3th</li>
<li>29th</li>
</ul>
<p>extracting those bits is easy, for example to get a 29th bit one can do:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">(x <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">29</span>)) <span style="color:#f92672">==</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">29</span>)
</code></pre></div><p>We tested many variants of how to efficiently write it down, but it turns out that doing just that yields best results!. We ended up with a following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode_b0747746</span>(data):
    xor_key <span style="color:#f92672">=</span> <span style="color:#ae81ff">1219836524</span>

    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(len(data)):
        <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>):
            x0 <span style="color:#f92672">=</span> (xor_key <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x20000000</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x20000000</span>
            x1 <span style="color:#f92672">=</span> (xor_key <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span>
            x2 <span style="color:#f92672">=</span> xor_key <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>
            x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> (x0 <span style="color:#f92672">^</span> x1 <span style="color:#f92672">^</span> x2)
            xor_key <span style="color:#f92672">=</span> (xor_key <span style="color:#f92672">+</span> xor_key) <span style="color:#f92672">+</span> x
        data[i] <span style="color:#f92672">^=</span> xor_key <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>

    <span style="color:#66d9ef">return</span> data
</code></pre></div><p>and its way faster</p>
<pre><code>$ time ripper df684cc86f19d5843f07dfd3603603723bb6491a29a88de7c3d70686df8635cc.bin 
Potential malware family dected: ['royal_road']
malware data:
	
{'object_name': None,
 'payload': '23d263b6f55ac81f64c3c3cf628dd169d745e0f2b264581305f2f46efc879587',
 'payload_enc_type': 'b0747746',
 'payload_key': 1219836524,
 'shellcode_key': 50064,
 'target_path': '%TEMP%\\..\\..\\Roaming\\Microsoft\\Word\\STARTUP\\intel.wll',
 'type': 'royal_road_rtf'}

real	6m11.555s
user	6m3.671s
sys	0m0.162s
</code></pre><p>Similar operation can be done for 4th encoding scheme, but we will leave this as an exercise for a reader.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Even with a plethora of tools and analysis made available by other researchers its beneficial to sometimes take a deeper look into a subject. This can potentially uncover new ways of dealing with problems, revels new clues or patterns typical to threat actor, or simply find a nice new trick. This time we saw most of those came to life. In addition to deep analysis of Royal Road shellcode we showed some generic methods of how to approach and/or speed up future analysis of any type of shellcode by utilizing power of scripting your disassembler and concentrating on most important parts. More of those tips an tricks can be found in our <strong>ExtREme Malware Analysis</strong> training.<br>
It seems that Royal Road is going to stay with us for some time, despite all of the public research and that it exploits more than year old vulnerabilities. That being said we are looking forward to see if developers will implement any new trick or will change their approach in anyway. Research <a href="https://www.virusbulletin.com/conference/vb2019/abstracts/attribution-object-using-rtf-object-dimensions-track-apt-phishing-weaponizers">published at VB2019</a> shows that Royal Road is no longer in use only by APT groups but also by typical cyber-crime actors and we think its safe to assume that this weapnonizer was somehow leaked as we are seeing very strange testing payloads that almost reassemble red team exercises<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> which suggests that its somehow available to any parties<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h1 id="analysis-artifacts---hashes-domains-urls-etc">Analysis Artifacts - Hashes, domains, urls, etc</h1>
<p>HASHES:
2aff4cbb4b1ba8a62e45b74944362d757ebfdb960867db5e7dbca7a6beab69e1
723bdb101d5d046a470618ff3c90dcad9018530cf02248f2c30f3a95e8eb9f8a
aaa9ad2f93c15204053516500c73b86bdbcc14956f5f63cb208528c68fad8755
657c45152a924cbf8542faff7fc10aa264bb9d4b55f79bf992569704b392610b
52aa0924797e3600d9a2d2f9f55526358aba19bcc25b5d22c98ce05d2b6cfc25
44657dcf6286836be5898a464165331ebaa9d7d57762f88f8255ab9499751338
5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9
da23586cf0efffab039358e2b4410ea0a6b6eb4a9d7430a0d46ca1235a402027
3f12dbce11f6faf0b27a4046e3c341b672228764eb5c3f98cee709980f2ec955
4ac1e100cf5d46dca4cca9e051d744ff1406630904f836d95ee3c172a9d2aca5
440ab62ec3520c378c61ee2def3da3ec32f553ab3ddd6eccda0cb0a70d9e8523
d7f15f750cceeb9e28e412f278949f183f98aeb65fe99731b2340c8f1c008465
100ded4eeffbd9c927cccd7850a3e83a2fb7b127e40e03f1570bbf6939cbb5fe
98f06ddae144a0f22aac6898caa3469b965b1b02b90c1d54600e7e461a1cbdf7
72cdfc4b25c6c0253a4cf1449d2a67343ee87c32176425bac5a7cbdd30007ec3
1527f7b9bdea7752f72ffcd8b0a97e9f05092fed2cb9909a463e5775e12bd2d6
c83c28add56ec8cad23a14155d5d3d082a1166c64ea5b7432e0acaa728231165
500b6037ddb5efff0dd91f75b22ccce5b04d996c459d83d1f07fae8780b24e09
b7bebe92a5802aa922e5719c948e35716f908e67701cfffaeebfcadc7a6e650a
0eb7ba6457367f8f5f917f37ebbf1e7ccf0e971557dbe5d7547e49d129ac0e98
855a060c43a83aa42faa63bfe4b08f31b4ba11cd64ea4cad69ad50910730f02f
9d99badebbfc6616d9a74dbfced6b7db9097d274366a232025469980f9a229a0
df684cc86f19d5843f07dfd3603603723bb6491a29a88de7c3d70686df8635cc</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>fb38bea02499d8cec47c88333234b033849307d6ad4d4442e6b6fd6837664d3b and ac61b5fa62ea33717bdc80178f1083c49cfd34204b56556c805b8edb2265e534 <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>It&rsquo;s also possible that someone went an extra mile and create a weaponizer that will appear as Royal Road based on publicly available YARA signatures <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

        </div>
        <div class="article-info">
    
        <div class="article-date">2020-03-21</div>
    
    <div class="article-taxonomies">
        
            
                <ul class="article-tags">
                    
                        <li><a href="https://blog.malwarelab.pl/tags/royal-road">#Royal Road</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/threat-intel">#Threat intel</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/threat-hunting">#Threat Hunting</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/apt">#APT</a></li>
                    
                </ul>
        
    </div>
</div>
    </article>
    


        </main>
        <footer>
            
                <p>Â© 2020<br>
Powered by <a target="_blank" href="https://gohugo.io/">Hugo</a>, theme <a target="_blank" href="https://github.com/mitrichius/hugo-theme-anubis">Anubis</a>.
</p>
            
        </footer>
    </div>
</body>
</html>
