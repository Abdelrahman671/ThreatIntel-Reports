<!DOCTYPE html>

<html lang="en">
<head>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.css" rel="stylesheet"/>
<title>Statically unpacking a simple .NET dropper </title>
<!-- Meta -->
<meta charset="utf-8"/>
<meta content="IE=edge" http-equiv="X-UA-Compatible"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="Our target is a 2-layers .NET dropper using multiple cipher passes (XOR, AES ECB and AES CBC + PBKDF2) to finally drop a Loki sample. Without even starting a debugger, we will show how to unpack it 100% statically using Malcat's builtin transformations and the python scripting engine." name="description"/>
<meta content="Malcat EI" name="author"/>
<link href="https://malcat.fr/favicon.ico" rel="shortcut icon"/>
<meta content="Statically unpacking a simple .NET dropper" property="og:title"/>
<meta content="article" property="og:type">
<meta content="Our target is a 2-layers .NET dropper using multiple cipher passes (XOR, AES ECB and AES CBC + PBKDF2) to finally drop a Loki sample. Without even starting a debugger, we will show how to unpack it 100% statically using Malcat's builtin transformations and the python scripting engine." property="og:description"/>
<meta content="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/anom.png" property="og:image"/>
<meta content="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/" property="og:url"/>
<meta content="summary_large_image" name="twitter:card"/>
<meta content="MALCAT" property="og:site_name"/>
<meta content="@malcat4ever" name="twitter:site"/>
<meta content="@malcat4ever" name="twitter:creator"/>
<!-- FontAwesome JS -->
<link href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" rel="stylesheet">
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet">
<!--<script defer src="https://malcat.fr/theme/fontawesome/js/all.js"></script>-->
<link href="https://malcat.fr/theme/fontawesome/css/all.min.css" rel="stylesheet"/>
<!-- Javascript -->
<script src="https://malcat.fr/theme/plugins/jquery-3.4.1.min.js"></script>
<script src="https://malcat.fr/theme/plugins/popper.min.js"></script>
<script src="https://malcat.fr/theme/plugins/bootstrap/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>
<script src="https://malcat.fr/theme/plugins/tiny-slider/min/tiny-slider.js"></script>
<!-- Plugin CSS -->
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet"/>
<!-- Theme CSS -->
<link href="https://malcat.fr/theme/css/theme.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/extra.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/pygment.css" id="theme-style" rel="stylesheet"/>
<!-- Feeds -->
<link href="https://malcat.fr/rss.xml" rel="alternate" title="MALCAT Full RSS Feed" type="application/rss+xml">
</link></link></link></meta><link href="https://malcat.fr\blog/statically-unpacking-a-simple-net-dropper/" rel="canonical"/><script type="application/ld+json">{"@context": "https://schema.org", "@type": "BreadcrumbList", "itemListElement": [{"@type": "ListItem", "position": 1, "name": "MALCAT", "item": "https://malcat.fr"}, {"@type": "ListItem", "position": 2, "name": "Blog", "item": "https://malcat.fr\\blog"}, {"@type": "ListItem", "position": 3, "name": "Statically unpacking a simple net dropper", "item": "https://malcat.fr\\blog/statically-unpacking-a-simple-net-dropper"}, {"@type": "ListItem", "position": 4, "name": "Index", "item": "https://malcat.fr\\blog/statically-unpacking-a-simple-net-dropper/index.html"}]}</script><script type="application/ld+json">{"@context": "https://schema.org", "@type": "Article", "author": {"@type": "Person", "name": "malcat team"}, "publisher": {"@type": "Organization", "name": "MALCAT"}, "headline": "Statically unpacking a simple .NET dropper", "about": "malware analysis", "datePublished": "2021-08-16 00:00"}</script></head>
<body>
<header class="header text-center">
<div class="wrapper force-overflow">
<nav class="navbar navbar-expand-lg navbar-dark" id="sidebar">
<button aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler" data-target="#navigation" data-toggle="collapse" type="button">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse flex-column" id="navigation">
<div class="sidebar-header profile-section pt-3 pt-lg-0">
<a href="https://malcat.fr"><img alt="logo" class="profile-image mb-3 mx-auto" src="https://malcat.fr/theme/images/malcat.png"/></a>
<div class="bio mb-3">MALCATÂ -Â the binary file dissector</div>
</div>
<ul class="list-unstyled components">
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/index.html">The software</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/features.html">Features &amp; roadmap</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/download.html">Download</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/about-us.html">About</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://doc.malcat.fr">User manual</a>
</li>
<li class="nav-item active">
<a class="nav-link" href="https://malcat.fr/blog.html">Blog</a>
</li>
</ul>
<div class="toc-container">
<div class="pb-3"></div>
<span>Table of contents</span>
<nav class="toc js-toc"></nav>
<div class="pb-3"></div>
</div>
</div>
</nav>
</div><!--//force-overflow-->
</header>
<div class="main-wrapper">
<section class="theme-bg-light">
<div class="container single-col-max-width">
<header class="blog-post-header">
<h1 class="title mb-3 theme-bg-light">Statically unpacking a simple .NET dropper</h1>
<div class="meta mb-3">
<span class="date"><i class="fa fa-calendar"></i>Mon 16 August 2021</span>
<span class="date"><i class="fa fa-user"></i><a href="https://malcat.fr/author/malcat-team.html">malcat team</a></span>
<span class="date"><i class="fa fa-tags"></i><a href="https://malcat.fr/category/malware-analysis.html">malware analysis</a>, <a href="https://malcat.fr/category/tutorial.html">tutorial</a>, <a href="https://malcat.fr/category/dotnet.html">dotnet</a>, <a href="https://malcat.fr/category/unpacking.html">unpacking</a>, <a href="https://malcat.fr/category/loki.html">loki</a></span>
</div>
</header>
</div>
</section>
<section class="latest-blog-section p-3 p-lg-5">
<article class="blog-post px-3 py-5 p-md-5">
<div class="blog-post-body js-toc-content container single-col-max-width">
<dl class="row">
<dt class="col-sm-3 theme-bg-light mb-1">Sample:</dt>
<dd class="col-sm-9">15180ee9f6a8682b24a0d5cb0491bb4e09d457bfab5a24ec1fcb077dab59773b (<a href="https://bazaar.abuse.ch/sample/15180ee9f6a8682b24a0d5cb0491bb4e09d457bfab5a24ec1fcb077dab59773b/">Bazaar</a>, <a href="https://www.virustotal.com/gui/file/15180ee9f6a8682b24a0d5cb0491bb4e09d457bfab5a24ec1fcb077dab59773b">VT</a>)</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Infection chain:</dt>
<dd class="col-sm-9">.NET dropper -&gt; .NET dropper + Reflective DLL -&gt; Loki</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Difficulty:</dt>
<dd class="col-sm-9">Easy</dd>
</dl>
<h1 id="introduction">Introduction</h1>
<p>Today we will try to unpack a simple 2-layers .NET dropper using static analysis only. The goal of most malware packer/obfuscator is not to be hard to crack: it is to circumvent AV detection for a while, and eventually get replaced by a new one afterwards. And at the very end of the packer food chain are packers written in VB, .NET and AutoIT: they are particularly cheap and easy to crack. The sample we are about to analyse is no exception and will make a good introduction to Malcat's decryption algorithms. </p>
<p>A quick glance at the file metadata tells us immediately that the file is suspicious. A VB.NET application from Microsoft with a 2013 copyright but freshly compiled... sure, those version informations are 100% not fake.</p>
<figure id="format1"><img alt="Fake version information" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/rsrc.png"><figcaption>Figure 1: Fake version information</figcaption></img></figure>
<p>Let us cut the overview right there as we will directly focus on the packed payload.</p>
<h1 id="locating-the-payload">Locating the payload</h1>
<p>Most .NET packers embed one or more encrypted assemblies. .NET assemblies are not small, they have to be put somewhere. They are usually put inside .NET resources (sometimes insides pictures), .NET static arrays or strings. For this sample, Malcat has already spotted a 800KB+ hexadecimal string inside the program (HugeStringHexa), which is kind of <em>unusual</em>.</p>
<figure id="format2"><img alt="A look at the anomalies" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/anom.png"/><figcaption>Figure 2: A look at the anomalies</figcaption></figure>
<p>This is confirmed in the Strings view (shortcut: <strong>F6</strong>), which tells us than more than 90% of the file is made of strings, and that our big hexadecimal string is by far the biggest one (the size 412768 is given in <em>characters</em>, so actual size for UTF16 is twice as much, about 824KB). Moreover, it has exactly one code reference, which is always a good indicator for packed data:</p>
<figure id="format3"><img alt="Big hexa string" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/strings.png"/><figcaption>Figure 3: Big hexa string</figcaption></figure>
<p>If we follow the string reference in the Code view (right-click on the string, and then choose Cross-references sub-menu) we land on the code snippet presented below. By looking at the names of the method and package there, we can infer that the application we are analyzing was most likely a clean .NET software that has been only slightly modified to include a couple of malicious methods. This is a technique commonly used by obfuscators to evade AV heuristics. </p>
<p>The content of the method also tells us that we won't have to start our VM for now. In fact, the hexadecimal string seems to be decrypted using a simple XOR algorithm using the key <code>"wnhILKQcVU"</code>:</p>
<figure id="format4"><img alt="String decryption" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/code.png"/> <figcaption>Figure 4: String decryption</figcaption></figure>
<h1 id="decrypting-the-first-layer">Decrypting the first layer</h1>
<p>Malcat comes with several decryption algorithms which we will use on the string. First, right-click on the big hexa string and chose the <code>Transform...</code> sub-menu. We will apply the following transformations (in order):</p>
<ul>
<li>change text encoding from UTF-16le to UTF-8: we get an ascii hexadecimal string</li>
<li>hex decode the hexadecimal string: we get the raw bytes</li>
<li>decrypt using the XOR algorithm and the key <code>"wnhILKQcVU"</code></li>
</ul>
<p>After these three pass, we obtain ... a base64 string, so the job is still not finished. Using Malcat's transformations, we can easily decode the base64 string. The result is identified by Malcat as a ... GZIP archive. Sure, after encoding your payload in hexa and base64, now you start to care about storage efficiency. But ok, Malcat can handle GZIP archives just fine. Just double-click the content stream inside the <code>files</code> tab to finally obtain ... a new PE file!</p>
<figure id="format5"><img alt="Unpacking the first layer" class="gif" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/layer1.gif"/><figcaption>Figure 5: Unpacking the first layer</figcaption></figure>
<p>At this point we can discard the rest of the application: the payload we just decrypted made for more than 90% of the file and the packer authors cared enough to pack it several time. So it's pretty safe to assume that we got everything there was to see there.</p>
<h1 id="decrypting-the-second-layer">Decrypting the second layer</h1>
<p>The second layer is also a .NET executable which also contains stolen VersionInformations (claims to be WallpaperChanger.dll). This time, there seem to be more than one packed content:</p>
<ul>
<li>we see a high-entropy .net resource named <code>Tesla</code> of about 60Kb</li>
<li>one big base64 string of about 185Kb at offset <code>0x100131da</code></li>
<li>two small hexadecimal strings of ~100 bytes</li>
</ul>
<p>The rest of the application seem to be a clean app, with a few added malicious methods inside the class <code>WallpaperChanger.QsJAksvOJQZGMrkQGUrJCZfDxJspOiApOTEDEDQQQBBEDh</code>. So we will save us some time and not analyze the code, and instead focus on the packed data: the big resource and the big base64 string. Let us start with the resource.</p>
<figure id="format6"><img alt="Second layer overview" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/layer2_overview.png"/><figcaption>Figure 6: Second layer overview</figcaption></figure>
<p>When adding a resource to a .NET program under VisualStudio, a standard resource getter name <code>get_&lt;resource_name&gt;</code> is often created. So we will go into the symbols list (shortcut: <strong>F5</strong>), hit <strong>Ctrl+F</strong> and look for <code>Tesla</code>. There is exactly one method named <code>WallpaperChanger.Properties.Resources.get_Tesla</code> at offset <code>0x1000278c</code>. The getter has only one code reference at address <code>0x100026dc</code> which looks promising:</p>
<figure id="format7"><img alt="the method decrypting resource + strings" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/decryption.png"/><figcaption>Figure 7: the method decrypting resource + strings</figcaption></figure>
<p>We see two different decryption methods called there:</p>
<ul>
<li>the method <code>AESDecrypt</code> used to decrypt the .NET resource <code>Tesla</code></li>
<li>the method <code>RijndaelDecrypt</code> used to decrypt the two small base64 strings we spotted earlier.</li>
</ul>
<p>The big base64 string does not seem to be decrypted there. Since the small strings seem to be of little interest, let us focus on the method <code>AESDecrypt</code> first. </p>
<h2 id="decrypting-the-tesla-resource">Decrypting the Tesla resource</h2>
<p>It looks like the authors of the packer were not satisfied with the security offered by XOR encryption and chose to step up their game:</p>
<figure id="format8"><img alt="the method AESDecrypt" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/aesdecrypt.png"/><figcaption>Figure 8: the method AESDecrypt</figcaption></figure>
<p>The code is pretty straightforward: the string <code>"eØ±Ð±Få¼Ùè¾Aç§Ø§Ð²Ð´PØ¡ãè¿ª"</code> is first encoded in utf16-BE and then hashed using the SHA256 algorithm. The result will be used as KEY for the AES algorithm. No IV is defined, since the encryption mode is set to ECB. At the end, the resource content is decrypted using AES. We could easily recover the decrypted content using a debugger there, but since the code is pretty straightforward, we can also do everything statically inside Malcat. First, we need to compute the AES key. We can simulate what the code is doing using the following script: </p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kn">import</span> <span class="nn">hashlib</span>
<span class="n">raw_bytes</span> <span class="o">=</span> <span class="s2">"eØ±Ð±Få¼Ùè¾Aç§Ø§Ð²Ð´PØ¡ãè¿ª"</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">"utf-16-be"</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">raw_bytes</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>
<span class="c1"># -&gt; "ab6edf45e299a7b2968a9d7cd013c1164efc6165508d691f085b7d9462ee945b"</span>
</code></pre></div></td></tr></table></div>
<p>Hit <code>F8</code> to enter the script editor, remove the example script, paste this content and you will see the result in the output window. Copy the key in the clipboard and you are ready to decrypt the resource using Malcat's AES transform:</p>
<figure id="format9"><img alt="decrypting the Tesla resource" class="gif" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/runpe_decoding.gif"/><figcaption>Figure 9: decrypting the Tesla resource</figcaption></figure>
<p>What we get is a reflexive PE injector .NET DLL rightly named <code>RunPE.dll</code>. This is the kind of utility assembly which is used by dropper to inject their payload into a running process. Interesting, but it's definitely not our payload.</p>
<h2 id="decrypting-the-base64-string">Decrypting the base64 string</h2>
<p>Our next payload candidate is the big 185kb base64-encoded string located at address <code>0x100131da</code>. There is again only on code location referencing this string at address <code>0x1000208c</code>. We can see that the string is decrypted using the method <code>RijndaelDecrypt</code> this time using the key <code>"wnhILKQcVU"</code>.  This is the same key which was used in the first layer for the XOR encryption.</p>
<figure id="format10"><img alt="the RijndaelDecrypt method" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/RijndaelDecrypt.png"/><figcaption>Figure 10: the RijndaelDecrypt method</figcaption></figure>
<p>This time the block cipher is used in CBC mode (the default in .NET) and the key generation is based on the Rfc2898 (aka PBKDF2) algorithm. If we have a look at the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=net-5.0">offical  documentation</a>, we can see that the constructor of the class  <code>Rfc2898DeriveBytes</code> takes two inputs:</p>
<ul>
<li>a key, which in our case would be the string <code>"wnhILKQcVU"</code> (encoded in UTF-8 by default, since no encoding is specified)</li>
<li>a salt, which looks like a 8 bytes array initialized with the value of the field <code>DD5783BCF1E9002BC00AD5B83A95ED6E4EBB4AD5</code></li>
</ul>
<p>The class <code>Rfc2898DeriveBytes</code> is then used to generate a given number of bytes (32 and then 16 in this case) which are used as key and IV for the cipher.
Regarding the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndaelmanaged?view=net-5.0">Rijndael algorithm</a>, we can see that in the .NET core implementation, it defaults to AES256. This is good news for us, this means that the only thing we have to figure out is how to generate the key and IV. Again, we could debug the sample, but where is the fun in that? We will rewrite it in python instead.</p>
<p>First thing first, we have to retrieve the salt value (an 8 bytes array) which is located in the field <code>DD5783BCF1E9002BC00AD5B83A95ED6E4EBB4AD5</code>. By clicking on the field in the Code view, we can see its definition in the <code>FieldTable</code> structure. This field has three important flags set: <code>HasRVA</code>, <code>Static</code> and <code>InitOnly</code> which indicates that this is a static initialized variable. Also the <code>HasRVA</code> flag tells us that the field has an entry inside the .NET <code>FieldRVA</code> table.</p>
<figure id="format11"><img alt="the field holding the salt value" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/field.png"/><figcaption>Figure 11: the field holding the salt value</figcaption></figure>
<p>The <code>FieldRVA</code> table has only one entry for field number 0x15 (aka 21) which is our field (the field <code>DD5783BCF1E9002BC00AD5B83A95ED6E4EBB4AD5</code> is at index 20 aka 0x14 in the <code>FieldTable</code>, but Field references start at 1 because 0 is reserved). </p>
<figure id="format12"><img alt="the corresponding FieldRVA entry" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/fieldrva.png"/><figcaption>Figure 12: the corresponding FieldRVA entry</figcaption></figure>
<p>The format of the data stored depends on the field type (and whether or not a <code>ClassLayout</code> exists). But we are dealing with a very simple 8 bytes array here, so reading the initial value is very simple: it is <code>{ 1, 2, 3, 4, 5, 6, 7, 8 }</code>, our salt.</p>
<p>Next, we need to emulate the behavior of the class <code>Rfc2898DeriveBytes</code>. We will use the <code>Cryptodome</code> python package which comes bundled with Malcat and its PBKDF2 algorithm. Go into the script editor (shortcut: <strong>F8</strong>) and paste the following code:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span>
<span class="normal">5</span>
<span class="normal">6</span>
<span class="normal">7</span>
<span class="normal">8</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kn">from</span> <span class="nn">Cryptodome.Protocol.KDF</span> <span class="kn">import</span> <span class="n">PBKDF2</span>
<span class="n">pwd</span> <span class="o">=</span> <span class="s2">"wnhILKQcVU"</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">"utf8"</span><span class="p">)</span>  
<span class="n">salt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span>           <span class="c1"># content of DD5783BCF1E9002BC00AD5B83A95ED6E4EBB4AD5</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">PBKDF2</span><span class="p">(</span><span class="n">pwd</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="mi">32</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="p">[:</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">hex</span><span class="p">())</span>              <span class="c1"># the first 32 bytes are used for the key</span>
<span class="c1"># -&gt; "34ca280dd207ea1e1915f7ccdc5d59344c55c6863947e507e982a337bdc57742" </span>
<span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">32</span><span class="p">:]</span><span class="o">.</span><span class="n">hex</span><span class="p">())</span>              <span class="c1"># the next 16 bytes are used for the IV</span>
<span class="c1"># -&gt; "be77bdd5564bbc0c4da984f89d88213d"</span>
</code></pre></div></td></tr></table></div>
<p>Now that we know both the key and the IV, we can decrypt the string at offset <code>0x100131da</code> using the usual steps:</p>
<ul>
<li>Right-click on the string from the code view or the strings view and chose <strong>Transform..</strong></li>
<li>Change encoding from utf16 to utf8</li>
<li>Base64 decode the result</li>
<li>AES decrypt the result in CBC mode using the key and IV found above</li>
<li>Base64 decode the result ...</li>
<li>Extract the GZipped content ......</li>
<li>We get a new PE file!</li>
</ul>
<p>The PE file looks like a native infostealer and is detected as <em>Loki</em> on <a href="https://www.virustotal.com/gui/file/85a7353b7657a5837c2c355b3ff114cb0936789777ed704a0edd1230cb8d5d8a/details">VirusTotal</a>. While a lot of its content is in plain text, some strings and configurations are still encrypted. The decryption process may be the subject of another blog post.</p>
<figure id="format13"><img alt="the final payload: Loki infostealer" class="photo" src="https://malcat.fr/blog/statically-unpacking-a-simple-net-dropper/loki.png"/><figcaption>Figure 13: the final payload: Loki infostealer</figcaption></figure>
<h1 id="conclusion">Conclusion</h1>
<p>We have seen how to navigate inside a .NET program, look for possible payload locations and how to use the different decryption algorithms inside Malcat to extract the stages of the malware. We also introduced the python script engine of Malcat, even if we just scratched the surface there (a scripting example which makes use of the bindings will be the subject of a future blog post).</p>
<p>Statically unpacking a sample, while  more complicated than debugging, offer many advantages: </p>
<ul>
<li>we get better quality dumps</li>
<li>we don't care about anti-debugging and anti-sandboxing tricks</li>
<li>the scripts which were developed can be reused on other samples in the future</li>
<li>it forces us to better understand the packing logic, and makes us less likely to miss something</li>
</ul>
<p>I hope you enjoyed this first tutorial, feel free to share with us your remarks or suggestions!</p>
</div>
</article>
</section>
<footer class="footer text-center py-4">
<small class="copyright">Copyright Â© <a href="https://malcat.fr" target="_blank">MALCAT</a></small><small class="copyright" style="margin-left:4em">View our <a href="https://malcat.fr/privacypolicy.html" target="_blank">privacy policy</a></small>
<div class="text-center w-100">
<ul class="social-list list-inline py-2 mx-auto">
<li class="list-inline-item"><a href="https://malcat.fr/rss.xml"><i class="fas fa-rss fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://twitter.com/malcat4ever"><i class="fab fa-twitter fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://discord.gg/Pf3s2ZKqtU"><i class="fab fa-discord fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://www.linkedin.com/company/malcat"><i class="fab fa-linkedin fa-fw"></i></a></li>
</ul><!--//social-list-->
</div><!--//dark-mode-toggle-->
</footer>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.min.js"></script>
<script language="javascript">
tocbot.init({
  // Where to render the table of contents.
  tocSelector: '.js-toc',
  // Where to grab the headings to build the table of contents.
  contentSelector: '.js-toc-content',
  // Which headings to grab inside of the contentSelector element.
  headingSelector: 'h1, h2, h3',
  // For headings inside relative or absolute positioned containers within content.
  hasInnerContainers: true,
  collapseDepth: 4,
});
</script>
</body>
</html>
