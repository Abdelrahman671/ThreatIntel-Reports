<!DOCTYPE html><html lang="en"><head><link href="/theme/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/font-awesome.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/fonts.css" rel="stylesheet" type="text/css"/><link href="/theme/css/pygment.css" rel="stylesheet" type="text/css"/><link href="/theme/css/blog.css" rel="stylesheet" type="text/css"/><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1.0" name="viewport"/><link href="/theme/images/favicon.ico" rel="icon" type="image/x-icon"/><title>Lexfo's security blog - Obfuscated obfuscation</title></head><body><a class="float" id="float" onclick="window.scrollTo({top: 0, behavior: 'smooth'});" style="opacity: 0 !important"><i class="fas fa-arrow-up"></i></a><script>
			document.addEventListener("scroll", (event) => {
				float = document.getElementById("float")
				if (document.documentElement.scrollTop == 0) {
					float.style.opacity = 0;
				} else {
					float.style.opacity = 1;
				}
			});
		</script><nav class="navbar"><a href="https://lexfo.fr"><embed class="logo" src="/theme/images/lexfo-logo.svg"/></a><div class="nav-links"><a class="nav-link" href="/index.html">BLOG POSTS</a> <a class="nav-link" href="/categories.html">CATEGORIES</a> <a class="nav-link" href="/tags.html">TAGS</a> <a class="nav-link" href="/archives.html">ARCHIVES</a></div><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></nav><header><h1><span class="gradient">Obfuscated obfuscation</span></h1><div class="blog-post-meta"><p><span class="mr-3">Mon 11 April 2022 by <strong>Lexfo</strong> in <a href="category/vulnerability.html">Vulnerability</a>.</span></p></div><div class="col-md-12 row mb-3" hidden=""><a class="tag" href="tag/reverse.html"><span class="fas fa-tag"></span> Reverse</a></div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=Obfuscated%20obfuscation&amp;url=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/dexguard.html&amp;title=Obfuscated%20obfuscation&amp;summary=This%20article%20is%20a%20step-by-step%20guide%20to%20reverse%20an%20APK%20protected%20with%20DexGuard%20using%20Jadx&amp;source=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=Obfuscated%20obfuscation&amp;body=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></header><main class="blog-post"><div class="blog-post-content"><h1 id="introduction">Introduction</h1><p>During a Red Team, we stumbled upon a device running Android. Next to the battery slot, a pin header providing access to a debug UART and an USB port were present. After improvising a custom USB cable by crimping bullet terminals since we didn't have access to a soldering iron, we gained access to the device through MTP:</p><table><thead><tr><th style="text-align: center;">8-pin connector</th><th style="text-align: center;">A mouse had to be sacrificed</th></tr></thead><tbody><tr><td style="text-align: center;"><figure><img src="/images/dexguard/cnx_.png"/><figcaption>USB Connector</figcaption></figure></td><td style="text-align: center;"><figure><img src="/images/dexguard/cable_.png"/><figcaption>Improvised USB Cable</figcaption></figure></td></tr></tbody></table><p>Using MTP, we could retrieve a configuration file containing only ASCII characters, however they didn't make sense. Best guess we had was it could be some Base64 with a custom charset randomly selected.</p><p>Since we supposed these configuration files would only be obfuscated, we wanted to reverse engineer the application that can read them. Based on the name of a service displayed on the device, we knew what to search for on Google Play to find an APK that would use, and thus decode, such configuration files. As a matter of fact, the application is a Mobile Device Management.</p><p>Obviously, the APK was all obfuscated. We quickly found the Java interface used for the decoding of the configuration:</p><div class="highlight"><pre><span></span><code><span class="kd">public</span><span class="w"> </span><span class="kd">interface</span> <span class="nc">AbstractC3001</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="cm">/* renamed from: Ä± */</span>
<span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="nf">mo20891</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">MissingDataForEncryptionException</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>However, no implementation of this interface could be found in what we had. Obviously, the implementation must have been encrypted and dynamically loaded at runtime.</p><hr/><ul><li><a href="#decompiling-the-apk">Decompiling the APK</a></li><li><a href="#decrypting-the-class-loader">Decrypting the Class Loader</a><ul><li><a href="#aes-key">AES Key</a></li><li><a href="#aes-shift-row-matrix">AES Shift Row matrix</a></li><li><a href="#input-stream">Input Stream</a></li><li><a href="#getting-the-class-loader-dex">Getting the Class Loader Dex</a></li></ul></li><li><a href="#decrypting-the-protected-classes">Decrypting the Protected Classes</a><ul><li><a href="#identifying-the-class-loader-call-to-decrypt-the-protected-classes">Identifying the Class Loader call to decrypt the Protected Classes</a></li><li><a href="#decryption-key">Decryption key</a></li><li><a href="#stream-cipher">Stream cipher</a></li><li><a href="#input-stream">Input Stream</a></li><li><a href="#getting-the-protected-classes-dex">Getting the Protected Classes Dex</a></li></ul></li><li><a href="#decompiling-the-whole-project">Decompiling the whole project</a><ul><li><a href="#string-obfuscation">String obfuscation</a></li><li><a href="#deobfuscating-the-configuration-file">Deobfuscating the configuration file</a></li><li><a href="#bonus">Bonus</a></li></ul></li><li><a href="#conclusion">Conclusion</a></li></ul><hr/><h1 id="decompiling-the-apk">Decompiling the APK</h1><p>First, we need to decompile the APK. <a href="https://github.com/skylot/jadx">Jadx</a> can work quite well to get some Java-esque output. Getting the smali for reference with <a href="https://ibotpeaches.github.io/Apktool/">Apktool</a> is also a good idea.</p><div class="highlight"><pre><span></span><code>$ jadx --show-bad-code --deobf -d out/ target.apk 
$ apktool d target.apk
</code></pre></div><p>One of the packages is heavily obfuscated in the application. In our case it is named <code>p014o</code>. The use of Dexguard can be recognized with its Class Manager (CM) that resolves class and method names at runtime. The prototype for the CM is basically <code>String $$c(arg1, arg2, arg3)</code>. We can find it easily:</p><div class="highlight"><pre><span></span><code>$ grep -r 'private static String $$c(' out/sources/
out/sources/p014o/C2958.java:    private static String $$c(int r7, short r8, short r9) {
</code></pre></div><p>Now we need to find "strange" resources. Two resources at the root of the application folder have non-printable names that end in '-'. They also start with a Java reference and are followed by a high-entropy blob of data.</p><div class="highlight"><pre><span></span><code>$ ls out/resources/*-
out/resources/ââÂ -
'out/resources/'$'\342\200\251''â'$'\342\200\251''-'
$ strings -n 10 out/resources/*-
java/io/Serializable
java/io/Serializable-
</code></pre></div><p>These resources are actually encrypted with custom versions of well-known cryptographic algorithms. One will be the Class Loader (CL), and the other one the Protected Classes. In order to decrypt the Protected Classes (PC), we first need to decrypt the Class Loader which will contain the key and some parameters for the Protected Classes decryption.</p><p>In the CM (in our case: <code>out/sources/p014o/C2958.java</code>), there is a huge static initialization. This is where the Protected Classes will be decrypted and then loaded.</p><p>Last time we checked, the Dexguard mode of operation was:</p><ul><li>load a resource as an InputStream;</li><li>feed the result to a class inheriting from FilterInputStream to decrypt it;</li><li>do some useless obfuscation to waste a few minutes of time from a reverser;</li><li>feed the decrypted result to a ZipInputStream to get a DEX file;</li><li>finally load the resulting DEX as a Resource using the <code>loadDex</code> method.</li></ul><p>So let's find what classes extend FilterInputStream using grep:</p><div class="highlight"><pre><span></span><code>$ grep -r 'extends FilterInputStream' out/sources/p014o/
out/sources/p014o/C1538.java:public class C1538 extends FilterInputStream {
out/sources/p014o/C1489.java:public final class C1489 extends FilterInputStream {
out/sources/p014o/C2081.java:public final class C2081 extends FilterInputStream {
out/sources/p014o/C1207.java:public final class C1207 extends FilterInputStream {
out/sources/p014o/C0991.java:public final class C0991 extends FilterInputStream {
out/sources/p014o/C1742.java:public final class C1742 extends FilterInputStream {
out/sources/p014o/C1209.java:public final class C1209 extends FilterInputStream {
out/sources/p014o/C4315CoN.java:public final class C4315CoN extends FilterInputStream {
</code></pre></div><p>The class in <code>C1207</code> strongly resembles some fast AES implementation, as can be seen from its dependency <code>C1210</code> with a static initializer computing AES lookup tables:</p><div class="highlight"><pre><span></span><code><span class="kd">static</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">bArr</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
<span class="w">    </span><span class="kt">byte</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="kt">byte</span><span class="w"> </span><span class="n">b2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(((</span><span class="n">b</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">128</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">27</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">b</span><span class="p">));</span>
<span class="w">        </span><span class="kt">byte</span><span class="w"> </span><span class="n">b3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">b2</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">b2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">));</span>
<span class="w">        </span><span class="kt">byte</span><span class="w"> </span><span class="n">b4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">b3</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">b3</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">));</span>
<span class="w">        </span><span class="kt">byte</span><span class="w"> </span><span class="n">b5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">b4</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">b4</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">));</span>
<span class="w">        </span><span class="n">b2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">b5</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">b5</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">128</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">));</span>
<span class="w">        </span><span class="n">bArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f1476</span><span class="p">;</span>
<span class="w">        </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span>
<span class="w">        </span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(((((</span><span class="n">b2</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">99</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">7</span><span class="p">)))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">6</span><span class="p">)))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">i2</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)));</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="n">bArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">99</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">256</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f1476</span><span class="o">[</span><span class="n">i3</span><span class="o">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span>
<span class="w">        </span><span class="n">f1471</span><span class="o">[</span><span class="n">i4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="n">i3</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i5</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">256</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i5</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="mi">283</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i6</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i5</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i6</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">256</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i6</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="mi">283</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i7</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i6</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i7</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">256</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i7</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="mi">283</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i7</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i3</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i9</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">i5</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">i6</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i7</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i8</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">((</span><span class="n">i8</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i6</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i8</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i5</span><span class="p">);</span>
<span class="w">        </span><span class="n">f1475</span><span class="o">[</span><span class="n">i4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i9</span><span class="p">;</span>
<span class="w">        </span><span class="n">f1470</span><span class="o">[</span><span class="n">i4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">24</span><span class="p">);</span>
<span class="w">        </span><span class="n">f1472</span><span class="o">[</span><span class="n">i4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">);</span>
<span class="w">        </span><span class="n">f1474</span><span class="o">[</span><span class="n">i4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i9</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">24</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">f1473</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">16777216</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i10</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i11</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i11</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w"> </span><span class="n">i11</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">i10</span><span class="w"> </span><span class="o">&lt;&lt;=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i10</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">256</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i10</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="mi">283</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="n">f1473</span><span class="o">[</span><span class="n">i11</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i10</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">24</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>The class <code>C1209</code> looks like a broken stream cipher loosely based on Mersenne twisters with 64-bits word size and two 4-words internal states, as can be deduced from its dependency class <code>C1208</code>:</p><div class="highlight"><pre><span></span><code><span class="kd">public</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C1208</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="cm">/* renamed from: Î¹ */</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="nf">m1400</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="n">jArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">long</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="n">jArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i2</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">4294967295L</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">((((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">4294967295L</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">32</span><span class="p">);</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="kt">long</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jArr</span><span class="o">[</span><span class="n">i3</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="o">]</span><span class="p">;</span>
<span class="w">            </span><span class="n">jArr</span><span class="o">[</span><span class="n">i3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">j</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">30</span><span class="p">))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1812433253</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i3</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">jArr</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>In the past, we also found TEA, XTEA and Blowfish.</p><p>Because the encryption algorithm implemented in <code>C1209</code> is severely broken, we could directly guess the missing bits of key that are present in the Class Loader and decrypt the Protected Classes. However, in some cases it is still necessary to decrypt the Class Loader to retrieve them. In order to cover all the cases we will do like if we couldn't directly decrypt the Protected Classes with the information we already have.</p><h1 id="decrypting-the-class-loader">Decrypting the Class Loader</h1><p>In order to decrypt the Class Loader, we have to find a reference to one of the two decryption algorithms implemented in <code>C1209</code> and <code>C1207</code>. By looking into the CM (class <code>C2958</code>), we can find a call to the <code>C1207</code> constructor:</p><div class="highlight"><pre><span></span><code><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">bArr3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">]</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">29</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">61</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">81</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">30</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">71</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">19</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">31</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">123</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">74</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">10</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">119</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">11</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">37</span><span class="p">;</span>
<span class="n">bArr3</span><span class="o">[</span><span class="mi">12</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">12</span><span class="p">;</span>
<span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">bArr3</span><span class="o">[</span><span class="mi">13</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">75</span><span class="p">;</span>
<span class="w">    </span><span class="n">bArr3</span><span class="o">[</span><span class="mi">14</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">65</span><span class="p">;</span>
<span class="w">    </span><span class="n">bArr3</span><span class="o">[</span><span class="mi">15</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">104</span><span class="p">;</span>
<span class="w">    </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">bArr4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="p">)</span><span class="w"> </span><span class="n">bArr3</span><span class="p">.</span><span class="na">clone</span><span class="p">();</span>
<span class="w">    </span><span class="n">C1203</span><span class="p">.</span><span class="na">m1385</span><span class="p">(</span><span class="n">bArr4</span><span class="p">,</span><span class="w"> </span><span class="n">f5121</span><span class="p">,</span><span class="w"> </span><span class="n">f5116</span><span class="p">);</span>
<span class="w">    </span><span class="n">inputStream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">C1207</span><span class="p">(</span><span class="n">inputStream2</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">bArr4</span><span class="p">,</span><span class="w"> </span><span class="n">C1210</span><span class="p">.</span><span class="na">m1404</span><span class="p">(</span><span class="mi">518096760</span><span class="p">));</span>
</code></pre></div><p>The first argument is an InputStream, we will take a look at it later. The second is actually the number of rounds, 8 instead of 10 for AES128; the third argument is the key, notice that it is modified by a call to <code>C1203.m1385()</code>. Finally, the last argument is the ShiftRow matrix that is obviously different than the one in normal AES. It is generated through a call to <code>C1210.m1404()</code>. The actual prototype would look like that:</p><div class="highlight"><pre><span></span><code><span class="kd">public</span><span class="w"> </span><span class="nf">C1207</span><span class="p">(</span><span class="n">InputStream</span><span class="w"> </span><span class="n">inputStream</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">numRound</span><span class="p">,</span><span class="w"> </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">aesKey</span><span class="p">,</span><span class="w"> </span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="n">shiftRowMatrix</span><span class="p">);</span>
</code></pre></div><h2 id="aes-key">AES Key</h2><p>The key can be easily identified in the code snippet above. Although, we need to take a look at <code>C1203.m1385</code> to see how it is actually modified before it is used:</p><div class="highlight"><pre><span></span><code><span class="cm">/* renamed from: o.Ä¸Ó */</span>
<span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C1203</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="cm">/* renamed from: É© */</span>
<span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">m1385</span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">bArr</span><span class="p">,</span><span class="w"> </span><span class="kt">byte</span><span class="w"> </span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">bArr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(((</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>As we can see, a XOR operation with <code>f5121</code> is applied for bytes whose index matches a bit set to 1 in <code>f5116</code>, LSB first.</p><div class="highlight"><pre><span></span><code><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">f5116</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2459692291946227616L</span><span class="p">;</span>
<span class="cm">/* ... */</span>
<span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">byte</span><span class="w"> </span><span class="n">f5121</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">89</span><span class="p">;</span>
</code></pre></div><p>We can obtain the final key using a small C code:</p><div class="highlight"><pre><span></span><code><span class="k">static</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">key</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">-29</span><span class="p">,</span><span class="w"> </span><span class="mi">-87</span><span class="p">,</span><span class="w"> </span><span class="mi">-61</span><span class="p">,</span><span class="w"> </span><span class="mi">81</span><span class="p">,</span><span class="w"> </span><span class="mi">-30</span><span class="p">,</span><span class="w"> </span><span class="mi">-71</span><span class="p">,</span><span class="w"> </span><span class="mi">-19</span><span class="p">,</span><span class="w"> </span><span class="mi">-31</span><span class="p">,</span><span class="w"> </span><span class="mi">123</span><span class="p">,</span><span class="w"> </span><span class="mi">-74</span><span class="p">,</span><span class="w"> </span><span class="mi">119</span><span class="p">,</span><span class="w"> </span><span class="mi">-37</span><span class="p">,</span><span class="w"> </span><span class="mi">-12</span><span class="p">,</span><span class="w"> </span><span class="mi">-75</span><span class="p">,</span><span class="w"> </span><span class="mi">65</span><span class="p">,</span><span class="w"> </span><span class="mi">-104</span><span class="w"> </span><span class="p">};</span>

<span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="nf">modif_key</span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="w"> </span><span class="n">ikey</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mask</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(((</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mask</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">ikey</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="n">m</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ikey</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The result is:</p><div class="highlight"><pre><span></span><code>Before: E3A9C351E2B9EDE17BB677DBF4B54198
After:  E3A9C351E21EED46DC11D0DBF412413F
</code></pre></div><h2 id="aes-shift-row-matrix">AES Shift Row matrix</h2><p>Next, we need to compute the actual shift row matrix used. Normally the Shift Row operation for AES decryption uses this matrix:</p><p></p><figure><img src="/images/dexguard/mat_org.png"/><figcaption>Matrix - original</figcaption></figure><p></p><p>Let's take a look at <code>C1210.m1404</code>:</p><div class="highlight"><pre><span></span><code><span class="cm">/* renamed from: É© */</span>
<span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="nf">m1404</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="n">bArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="mi">4</span><span class="o">][]</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"> </span><span class="n">i2</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span>
<span class="w">        </span><span class="n">bArr</span><span class="o">[</span><span class="n">i2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[]</span><span class="p">{(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">i3</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">i3</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">i3</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">i3</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">6</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">)};</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">bArr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>It is called with <code>518096760</code>, converting to base-4 (<code>0132320120131320</code>) and rearranging as done in the snippet above would give the following matrix:</p><p></p><figure><img src="/images/dexguard/mat_int.png"/><figcaption>Matrix - intermediate</figcaption></figure><p></p><p>Now let's take a look at the <code>C1207</code> constructor. Although useless, there is another transformation applied to this matrix. This is useless because if we want to make things quick, based on what we already have we can simply compile the <code>C1207</code> class with <code>javac</code> and call it with the arguments we already have computed. So, it doesn't add any value to the obfuscation. Anyway, here is the final transformation:</p><div class="highlight"><pre><span></span><code><span class="cm">/* renamed from: Î¹ */</span>
<span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="nf">m1399</span><span class="p">(</span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="n">bArr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">byte</span><span class="o">[][]</span><span class="w"> </span><span class="n">bArr2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="n">bArr</span><span class="p">.</span><span class="na">length</span><span class="o">][]</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">bArr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">bArr2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i2</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">bArr2</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">bArr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i2</span><span class="o">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="n">i2</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">bArr2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>For each row, the cell values and their indices are exchanged, giving the final Shift Row matrix used:</p><p></p><figure><img src="/images/dexguard/mat_final.png"/><figcaption>Matrix - final</figcaption></figure><p></p><h2 id="input-stream">Input Stream</h2><p>We now have the algorithm to decrypt the Class Loader, which is a modified AES128 with 8-rounds and a custom Shift Row matrix, as well as the decryption key. We also know that the encrypted Class Loader is one of the two resource files with non-printable characters in their names.</p><p>If we backtrack the InputStream argument, we obtain it after this call:</p><div class="highlight"><pre><span></span><code><span class="n">i6</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span>
<span class="cm">/* ... */</span>
<span class="kt">int</span><span class="w"> </span><span class="n">length4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bArr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span>
<span class="kt">int</span><span class="w"> </span><span class="n">i90</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">i6</span><span class="p">;</span>
<span class="kt">int</span><span class="w"> </span><span class="n">i91</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">length4</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">i90</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">length4</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">i90</span><span class="p">);</span>
<span class="cm">/* ... */</span>
<span class="n">Object</span><span class="o">[]</span><span class="w"> </span><span class="n">objArr22</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">;</span>
<span class="n">objArr22</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">i91</span><span class="p">);</span>
<span class="n">objArr22</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">i6</span><span class="p">);</span>
<span class="n">objArr22</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bArr</span><span class="p">;</span>
<span class="kt">short</span><span class="w"> </span><span class="n">s30</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="mi">135</span><span class="p">;</span>
<span class="n">InputStream</span><span class="w"> </span><span class="n">inputStream2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">InputStream</span><span class="p">)</span><span class="w"> </span><span class="n">Class</span><span class="p">.</span><span class="na">forName</span><span class="p">(</span><span class="n">$$c</span><span class="p">((</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="n">f5118</span><span class="o">[</span><span class="mi">35</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">s30</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">s30</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">376</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">s30</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">376</span><span class="p">)))).</span><span class="na">getDeclaredConstructor</span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="p">.</span><span class="na">class</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">TYPE</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">TYPE</span><span class="p">).</span><span class="na">newInstance</span><span class="p">(</span><span class="n">objArr22</span><span class="p">);</span>
</code></pre></div><p>Note that the formula <code>(a &amp; b) + (a | b)</code> is equivalent to <code>a + b</code>. While we could decrypt the class name by reimplementing the <code>$$c</code> method, it seems quite obvious that the constructor is simply:</p><div class="highlight"><pre><span></span><code><span class="n">ByteArrayInputStream</span><span class="p">(</span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">length</span><span class="p">);</span>
</code></pre></div><p>The offset is 20 and the length is the whole buffer length minus 20. Since the resources we found started with <code>java/io/Serializable</code> which is 20 bytes long, it actually makes sense.</p><p>We need to take a look at what operation is done to <code>bArr</code> before being used in the <code>ByteArrayInputStream</code> constructor. We have this code snippet above in the code:</p><div class="highlight"><pre><span></span><code><span class="n">i6</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span>
<span class="n">i7</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8664</span><span class="p">;</span>
<span class="n">str3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str2</span><span class="p">;</span>
<span class="n">cls</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span>
<span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i89</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">i6</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">210</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">i6</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">210</span><span class="p">);</span>
<span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">byte</span><span class="w"> </span><span class="n">b19</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bArr</span><span class="o">[</span><span class="p">((</span><span class="n">i6</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">4167</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">i6</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">4167</span><span class="p">)</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="n">bArr</span><span class="o">[</span><span class="n">i89</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">b19</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">9</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">((</span><span class="n">b19</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">9</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">));</span>
</code></pre></div><p>Note that the formulae <code>((a | b) &lt;&lt; 1) - (a ^ b)</code> and <code>(a ^ b) + ((a &amp; b) &lt;&lt; 1)</code> are equivalent to <code>a + b</code>. The code above can be reduced to:</p><div class="highlight"><pre><span></span><code><span class="n">bArr</span><span class="o">[</span><span class="mi">20</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">210</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bArr</span><span class="o">[</span><span class="mi">20</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4167</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">9</span><span class="p">;</span>
</code></pre></div><h2 id="getting-the-class-loader-dex">Getting the Class Loader Dex</h2><p>The resource files were 8708 and 4188 bytes long respectively. Since AES works on 16-bytes blocks, the best candidate is thus the file whose length is 8708 since it is <code>243 * 16 + 20</code>.</p><p>By replacing the 230th byte by the 4187th added with 9 (which gives <code>0x4 + 0x9 = 0x0d</code>), we can finally decrypt the CL using the key <code>0xE3A9C351E21EED46DC11D0DBF412413F</code> with a slightly modified version of the AES implementation to take into account the reduced round number and the custom Shift Row matrix. A diff based on the <a href="https://web.archive.org/web/20060618010435/http://www.iaik.tu-graz.ac.at/research/krypto/AES/old/~rijmen/rijndael/rijndael-fst-3.0.zip">reference implementation of AES</a> can be found in the annex.</p><p>The decryption can be obtained using this C code, for example:</p><div class="highlight"><pre><span></span><code><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">outfd</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">20</span><span class="p">],</span><span class="w"> </span><span class="n">obuf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">keyexp</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="mi">9</span><span class="p">];</span>

<span class="w">    </span><span class="n">fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="n">O_RDONLY</span><span class="p">);</span>
<span class="w">    </span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">20</span><span class="p">);</span>
<span class="w">    </span><span class="n">outfd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="n">O_WRONLY</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">O_CREAT</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">O_TRUNC</span><span class="p">,</span><span class="w"> </span><span class="n">S_IRUSR</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">S_IWUSR</span><span class="p">);</span>

<span class="w">    </span><span class="n">modif_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="mi">-89</span><span class="p">,</span><span class="w"> </span><span class="mi">2459692291946227616ULL</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p">);</span>
<span class="w">    </span><span class="n">m1404</span><span class="p">(</span><span class="mi">518096760</span><span class="p">);</span>
<span class="w">    </span><span class="n">m1399</span><span class="p">();</span>

<span class="w">    </span><span class="n">rijndaelKeySetupDec</span><span class="p">(</span><span class="n">keyexp</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="mi">128</span><span class="p">);</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">rijndaelDecrypt</span><span class="p">(</span><span class="n">keyexp</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">obuf</span><span class="p">);</span>
<span class="w">        </span><span class="n">write</span><span class="p">(</span><span class="n">outfd</span><span class="p">,</span><span class="w"> </span><span class="n">obuf</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">close</span><span class="p">(</span><span class="n">outfd</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>We can now obtain the JAR file in plaintext:</p><div class="highlight"><pre><span></span><code>$ gcc -o main main.c rijndael-alg-fst.c
$ ./main encfile1 cl.jar
KEY: E3A9C351E21EED46DC11D0DBF412413F
ShifRow Matrix:
0, 3, 1, 2,
2, 1, 3, 0,
1, 0, 2, 3,
3, 2, 0, 1,
</code></pre></div><p>And finally get the Dex file:</p><div class="highlight"><pre><span></span><code>$ unzip cl.jar
Archive:  cl.jar
warning [cl.jar]:  22 extra bytes at beginning or within zip file
  (attempting to process anyway)
  inflating: classes.dex
</code></pre></div><h1 id="decrypting-the-protected-classes">Decrypting the Protected Classes</h1><p>We can now feed this <code>classes.dex</code> to Jadx along with the one from the APK we are analyzing so that both are integrated:</p><div class="highlight"><pre><span></span><code>$ mv classes.dex classes2.dex
$ unzip target.apk classes.dex
Archive:  target.apk
  inflating: classes.dex             
$ jadx --show-bad-code --deobf -d cl/ classes*.dex
INFO  - loading ...
INFO  - processing ...
ERROR - finished with errors, count: 26
</code></pre></div><p>We now have the Class Loader decompiled with the renaming matching the other decompiled classes, thanks to Jadx. The classes have now all be renamed because of the deobfuscation flag given to Jadx. The Class Manager, formerly <code>C2958</code> is now named <code>C2274</code>. The second decryption class identified, <code>C1209</code> is now named <code>C1081</code>. The newly obtained Class Loader is named <code>C2257</code>.</p><h2 id="identifying-the-class-loader-call-to-decrypt-the-protected-classes">Identifying the Class Loader call to decrypt the Protected Classes</h2><p>If we go back to the Class Manager (now renamed <code>C2274</code>), there is one use of an InputStream object that we didn't investigate:</p><div class="highlight"><pre><span></span><code><span class="n">clsArr7</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Class</span><span class="p">.</span><span class="na">forName</span><span class="p">(</span><span class="n">$$c</span><span class="p">(</span><span class="n">b20</span><span class="p">,</span><span class="w"> </span><span class="n">s31</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">i94</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">415</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">i94</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">415</span><span class="p">))));</span>
<span class="n">clsArr7</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Short</span><span class="p">.</span><span class="na">TYPE</span><span class="p">;</span>
<span class="n">clsArr7</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">TYPE</span><span class="p">;</span>
<span class="n">clsArr7</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">TYPE</span><span class="p">;</span>
<span class="n">inputStream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">InputStream</span><span class="p">)</span><span class="w"> </span><span class="n">cls6</span><span class="p">.</span><span class="na">getMethod</span><span class="p">(</span><span class="n">$$c8</span><span class="p">,</span><span class="w"> </span><span class="n">clsArr7</span><span class="p">).</span><span class="na">invoke</span><span class="p">(</span><span class="n">obj25</span><span class="p">,</span><span class="w"> </span><span class="n">objArr23</span><span class="p">);</span>
</code></pre></div><p>The argument <code>objArr23</code> can be found some few lines above:</p><div class="highlight"><pre><span></span><code><span class="n">Object</span><span class="o">[]</span><span class="w"> </span><span class="n">objArr23</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Object</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">;</span>
<span class="n">objArr23</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1541368241</span><span class="p">;</span>
<span class="n">objArr23</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">197155059</span><span class="p">;</span>
<span class="n">objArr23</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span>
<span class="n">objArr23</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inputStream2</span><span class="p">;</span>
</code></pre></div><p>This means the method signature looks like this:</p><div class="highlight"><pre><span></span><code><span class="n">InputStream</span><span class="w"> </span><span class="nf">method</span><span class="p">(</span><span class="n">InputStream</span><span class="p">,</span><span class="w"> </span><span class="kt">short</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span>
</code></pre></div><p>If we take a look at the Class Loader we just decrypted (named <code>C2257</code> in our case), only one method has this specific signature. Looking for InputStream gives us this code snippet:</p><div class="highlight"><pre><span></span><code><span class="cm">/* renamed from: Ç */</span>
<span class="kd">public</span><span class="w"> </span><span class="n">InputStream</span><span class="w"> </span><span class="nf">mo19845</span><span class="p">(</span><span class="n">InputStream</span><span class="w"> </span><span class="n">inputStream</span><span class="p">,</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">IOException</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">C1081</span><span class="w"> </span><span class="n">r7</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">C1081</span><span class="p">(</span><span class="n">inputStream</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f3561</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f3560</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="p">);</span>
<span class="w">            </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f3551</span><span class="p">;</span>
<span class="w">                </span><span class="kt">int</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">i3</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mi">61</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">((</span><span class="n">i3</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">61</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">                </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">                    </span><span class="n">f3548</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">128</span><span class="p">;</span>
<span class="w">                    </span><span class="kt">int</span><span class="w"> </span><span class="n">i5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span>
<span class="w">                    </span><span class="k">return</span><span class="w"> </span><span class="n">r7</span><span class="p">;</span>
<span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                    </span><span class="k">throw</span><span class="w"> </span><span class="n">e</span><span class="p">;</span>
<span class="w">                </span><span class="p">}</span>
<span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">ClassCastException</span><span class="w"> </span><span class="n">e2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="k">throw</span><span class="w"> </span><span class="n">e2</span><span class="p">;</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e3</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="n">e3</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">IndexOutOfBoundsException</span><span class="w"> </span><span class="n">e4</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="n">e4</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>We can see the call to the second decryption algorithm, with some interesting arguments:</p><div class="highlight"><pre><span></span><code><span class="n">C1081</span><span class="p">(</span><span class="n">inputStream</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f3561</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f3560</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="p">);</span>
</code></pre></div><h2 id="decryption-key">Decryption key</h2><p>The value we were missing to call <code>C1081</code> (formerly <code>C1209</code> that we identified as a cipher loosely based on Mersenne twisters) can now be recovered from the Class Loader <code>C2257</code>:</p><div class="highlight"><pre><span></span><code><span class="k">this</span><span class="p">.</span><span class="na">f3560</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1658185820</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="na">f3561</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="mi">1460155994</span><span class="p">;</span>
</code></pre></div><p>As is usual for DexGuard, we had to decrypt the Class Loader in order to find the key to decrypt the Protected Classes. However, note that in this instance, because the second encryption algorithm used is broken, we could have directly guessed those two missing 32-bits values.</p><p>The call to the decryption class is then:</p><div class="highlight"><pre><span></span><code><span class="n">C1081</span><span class="p">(</span><span class="n">inputStream</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1460155994</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">197155059</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1658185820</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1541368241</span><span class="p">);</span>
</code></pre></div><h2 id="stream-cipher">Stream cipher</h2><p>The <code>C1081</code> constructor uses the 4th argument (8) as a block size. Although, looking at the code it could be used as a stream cipher directly.</p><p>The <code>int</code> arguments are transformed through another class during initialization:</p><div class="highlight"><pre><span></span><code><span class="k">this</span><span class="p">.</span><span class="na">f1021</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">C1080</span><span class="p">.</span><span class="na">m1121</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i4</span><span class="p">,</span><span class="w"> </span><span class="n">i5</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i4</span><span class="p">);</span>
<span class="k">this</span><span class="p">.</span><span class="na">f1022</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">C1080</span><span class="p">.</span><span class="na">m1121</span><span class="p">(</span><span class="n">i2</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i4</span><span class="p">,</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">i4</span><span class="p">);</span>
</code></pre></div><p>This is the seeding method identified at the beginning of this analysis that actually helped understand on what was based this algorithm. The implementation of this method is as follows:</p><div class="highlight"><pre><span></span><code><span class="kd">public</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C1080</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="cm">/* renamed from: Î¹ */</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="nf">m1121</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="n">jArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">long</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="n">jArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i2</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">4294967295L</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">((((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">4294967295L</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">32</span><span class="p">);</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="kt">long</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jArr</span><span class="o">[</span><span class="n">i3</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="o">]</span><span class="p">;</span>
<span class="w">            </span><span class="n">jArr</span><span class="o">[</span><span class="n">i3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">j</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">30</span><span class="p">))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1812433253</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">i3</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">jArr</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>You might notice the constant <code>1812433253</code> which is the value for <code>f</code> used in the 32-bits version of the Mersenne-Twister MT19937. This class actually implements the initialization part of a Mersenne twister with <code>w = 64</code> and <code>n = 4</code>. Since it is called twice, we have two internal states. One is initialized with <code>0xcd75fe9a4209647</code> and the other one is initialized with <code>0x501f3142390a81eb</code>. Without decrypting the Class Loader, we would only have the lower part of the first initialization and the upper part of the second.</p><p>Now let's take a look at the decryption implementation:</p><div class="highlight"><pre><span></span><code><span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="n">jArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f1021</span><span class="p">;</span>
<span class="kt">long</span><span class="o">[]</span><span class="w"> </span><span class="n">jArr2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f1022</span><span class="p">;</span>
<span class="kt">short</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f1017</span><span class="p">;</span>
<span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span>
<span class="kt">int</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span>
<span class="n">jArr2</span><span class="o">[</span><span class="n">i2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">jArr</span><span class="o">[</span><span class="n">i2</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2147483085</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jArr2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2147483647L</span><span class="p">;</span>
<span class="n">jArr</span><span class="o">[</span><span class="n">i2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">jArr</span><span class="o">[</span><span class="n">s</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2147483085</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jArr2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2147483647L</span><span class="p">;</span>
<span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f1019</span><span class="p">;</span><span class="w"> </span><span class="n">i3</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">bArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">f1018</span><span class="p">;</span>
<span class="w">    </span><span class="n">bArr</span><span class="o">[</span><span class="n">i3</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">byte</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="p">(((</span><span class="kt">long</span><span class="p">)</span><span class="w"> </span><span class="n">bArr</span><span class="o">[</span><span class="n">i3</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="na">f1021</span><span class="o">[</span><span class="k">this</span><span class="p">.</span><span class="na">f1017</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">i3</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="p">))</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">)));</span>
<span class="p">}</span>
<span class="k">this</span><span class="p">.</span><span class="na">f1017</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="na">f1017</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span>
</code></pre></div><p>The two MT-like internal states are first updated with one another, then the current 8-byte block from the ciphertext is XOR'd with the current word from the first internal state.</p><p>The internal state update puts the integer part of a division by <code>2^31-1</code> in the second internal state and the remainder in the first one. Because of that, after the 4th update, we will have a maximum of 31 bits per word in the first internal state and 33 in the second.</p><p>Because the operations are done on signed integer, we have to take into account that the remaining upper bits will be either all 0s or all 1s. This means that blocks of ~32 bits are either the same as the cleartext or have all their bits reversed in the resulting ciphertext. This is particularly inefficient.</p><p>Moreover, because we know that the plaintext will start with the string <code>java/</code>, we can directly recover the missing upper part of the seed for the first internal state. The remaining missing 32-bits can then be easily bruteforced or computed by guessing the rest of the starting string in the plaintext (based on a dictionary).</p><h2 id="input-stream_1">Input Stream</h2><p>As for the Class Loader, a byte in the ciphertext is actually incorrect. The exact same operation is applied with the Protected Class ciphertext, that is, replacing the 230th byte by the 4187th added with 9. Note that it is always the second-to-last byte of the smaller resource that is taken as a reference to modify a byte close to the beginning of the resources.</p><p>Note that if we look at the control flow, we should have noticed that the member <code>f3601</code> from the Class Manager will actually hold the Class Loader. There are checks such as:</p><div class="highlight"><pre><span></span><code><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">f3601</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
</code></pre></div><p>This is to determine if we are decrypting the Class Loader (when not null) or the Protected Classes.</p><h2 id="getting-the-protected-classes-dex">Getting the Protected Classes Dex</h2><p>We will need to do the same byte modification before "decrypting". By replacing the 230th byte by the 4187th added with 9 (which gives <code>0x1 + 0x9 = 0x0a</code>), we can finally decrypt the Protected classes using the "double key" <code>0xcd75fe9a4209647 0x501f3142390a81eb</code>.</p><p>Since the output of Jadx can be directly compiled, we can use the original implementation in Java. We can also quickly reimplement it in <code>C</code>:</p><div class="highlight"><pre><span></span><code><span class="kt">int64_t</span><span class="w"> </span><span class="n">twister1</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
<span class="kt">int64_t</span><span class="w"> </span><span class="n">twister2</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">init</span><span class="p">(</span><span class="kt">int64_t</span><span class="w"> </span><span class="n">seed</span><span class="p">,</span><span class="w"> </span><span class="kt">int64_t</span><span class="w"> </span><span class="o">*</span><span class="n">state</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
<span class="w">    </span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seed</span><span class="p">;</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mh">0x6c078965</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">30</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">outfd</span><span class="p">;</span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>

<span class="w">    </span><span class="n">fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="n">O_RDONLY</span><span class="p">);</span>
<span class="w">    </span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">20</span><span class="p">);</span>
<span class="w">    </span><span class="n">outfd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="n">O_WRONLY</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">O_CREAT</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">O_TRUNC</span><span class="p">,</span><span class="w"> </span><span class="n">S_IRUSR</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">S_IWUSR</span><span class="p">);</span>

<span class="w">    </span><span class="n">init</span><span class="p">(</span><span class="mh">0x0cd75fe9a4209647</span><span class="p">,</span><span class="w"> </span><span class="n">twister1</span><span class="p">);</span>
<span class="w">    </span><span class="n">init</span><span class="p">(</span><span class="mh">0x501f3142390a81eb</span><span class="p">,</span><span class="w"> </span><span class="n">twister2</span><span class="p">);</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">twister2</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">twister1</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x7FFFFDCD</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">twister2</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">])</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mh">0x7FFFFFFF</span><span class="p">;</span>
<span class="w">        </span><span class="n">twister1</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">twister1</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x7FFFFDCD</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">twister2</span><span class="p">[(</span><span class="n">idx</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">4</span><span class="p">])</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mh">0x7FFFFFFF</span><span class="p">;</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="p">(</span><span class="n">twister1</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">(</span><span class="mi">8</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="n">idx</span><span class="o">++</span><span class="p">;</span>
<span class="w">        </span><span class="n">idx</span><span class="w"> </span><span class="o">%=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span>
<span class="w">        </span><span class="n">write</span><span class="p">(</span><span class="n">outfd</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">close</span><span class="p">(</span><span class="n">outfd</span><span class="p">);</span>
<span class="w">    </span><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Then we can obtain the Dex file:</p><div class="highlight"><pre><span></span><code>$ unzip pc.jar
Archive:  pc.jar
warning [pc.jar]:  22 extra bytes at beginning or within zip file
  (attempting to process anyway)
  inflating: classes.dex
</code></pre></div><h1 id="decompiling-the-whole-project">Decompiling the whole project</h1><p>We can now feed this new <code>classes.dex</code> to Jadx along with the one from the APK we are analyzing so that both are integrated:</p><div class="highlight"><pre><span></span><code>$ mv cl/classes.dex classes3.dex
$ jadx --show-bad-code --deobf -d project/ classes*.dex
INFO  - loading ...
INFO  - processing ...
ERROR - finished with errors, count: 26
</code></pre></div><p>Note that this time the class name didn't change, since we only added two additional classes with no direct dependency over the rest of the decompilation. We can find the additional classes using diff:</p><div class="highlight"><pre><span></span><code>$ diff -rq project/sources/p010o/ cl/sources/p010o/ | grep Only
Only in project/sources/p010o/: C3157.java
Only in project/sources/p010o/: C3158.java
</code></pre></div><p>The first class implements an AES encryption with a hardcoded key to communicate with the MDM server, and the second one is used to deobfuscate the configuration files. We indeed found what looks like a base64 decoding using an obfuscated custom charset:</p><div class="highlight"><pre><span></span><code><span class="kt">int</span><span class="w"> </span><span class="n">indexOf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m6296</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[]</span><span class="p">{</span><span class="mi">56674</span><span class="p">,</span><span class="w"> </span><span class="cm">/*[...]*/</span><span class="w"> </span><span class="mi">40470</span><span class="p">}).</span><span class="na">intern</span><span class="p">().</span><span class="na">indexOf</span><span class="p">(</span><span class="n">substring2</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
<span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">indexOf</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">m6296</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[]</span><span class="p">{</span><span class="mi">29383</span><span class="p">,</span><span class="w"> </span><span class="mi">11261</span><span class="p">,</span><span class="w"> </span><span class="mi">45856</span><span class="p">,</span><span class="w"> </span><span class="mi">8033</span><span class="p">,</span><span class="w"> </span><span class="mi">10541</span><span class="p">,</span><span class="w"> </span><span class="mi">22108</span><span class="p">,</span><span class="w"> </span><span class="mi">25214</span><span class="p">,</span><span class="w"> </span><span class="mi">30659</span><span class="p">,</span><span class="w"> </span><span class="mi">58107</span><span class="p">,</span><span class="w"> </span><span class="mi">55254</span><span class="p">,</span><span class="w"> </span><span class="mi">14618</span><span class="p">,</span><span class="w"> </span><span class="mi">58864</span><span class="p">,</span><span class="w"> </span><span class="mi">14018</span><span class="p">,</span><span class="w"> </span><span class="mi">44529</span><span class="p">,</span><span class="w"> </span><span class="mi">7991</span><span class="p">,</span><span class="w"> </span><span class="mi">15470</span><span class="p">,</span><span class="w"> </span><span class="mi">19635</span><span class="p">,</span><span class="w"> </span><span class="mi">39717</span><span class="p">,</span><span class="w"> </span><span class="mi">39670</span><span class="p">,</span><span class="w"> </span><span class="mi">16382</span><span class="p">,</span><span class="w"> </span><span class="mi">48010</span><span class="p">,</span><span class="w"> </span><span class="mi">15556</span><span class="p">,</span><span class="w"> </span><span class="mi">55341</span><span class="p">,</span><span class="w"> </span><span class="mi">57354</span><span class="p">,</span><span class="w"> </span><span class="mi">38037</span><span class="p">,</span><span class="w"> </span><span class="mi">11242</span><span class="p">,</span><span class="w"> </span><span class="mi">4227</span><span class="p">,</span><span class="w"> </span><span class="mi">54049</span><span class="p">,</span><span class="w"> </span><span class="mi">48270</span><span class="p">,</span><span class="w"> </span><span class="mi">19667</span><span class="p">,</span><span class="w"> </span><span class="mi">812</span><span class="p">,</span><span class="w"> </span><span class="mi">6934</span><span class="p">,</span><span class="w"> </span><span class="mi">28332</span><span class="p">,</span><span class="w"> </span><span class="mi">14278</span><span class="p">,</span><span class="w"> </span><span class="mi">47363</span><span class="p">,</span><span class="w"> </span><span class="mi">20756</span><span class="p">,</span><span class="w"> </span><span class="mi">57729</span><span class="p">,</span><span class="w"> </span><span class="mi">41508</span><span class="p">,</span><span class="w"> </span><span class="mi">31548</span><span class="p">,</span><span class="w"> </span><span class="mi">11732</span><span class="p">,</span><span class="w"> </span><span class="mi">20431</span><span class="p">,</span><span class="w"> </span><span class="mi">31561</span><span class="p">,</span><span class="w"> </span><span class="mi">33119</span><span class="p">,</span><span class="w"> </span><span class="mi">61383</span><span class="p">,</span><span class="w"> </span><span class="mi">24025</span><span class="p">,</span><span class="w"> </span><span class="mi">58306</span><span class="p">,</span><span class="w"> </span><span class="mi">18241</span><span class="p">,</span><span class="w"> </span><span class="mi">30904</span><span class="p">,</span><span class="w"> </span><span class="mi">52967</span><span class="p">,</span><span class="w"> </span><span class="mi">36982</span><span class="p">,</span><span class="w"> </span><span class="mi">32032</span><span class="p">,</span><span class="w"> </span><span class="mi">40856</span><span class="p">,</span><span class="w"> </span><span class="mi">34637</span><span class="p">,</span><span class="w"> </span><span class="mi">20511</span><span class="p">,</span><span class="w"> </span><span class="mi">4255</span><span class="p">,</span><span class="w"> </span><span class="mi">54644</span><span class="p">,</span><span class="w"> </span><span class="mi">53525</span><span class="p">,</span><span class="w"> </span><span class="mi">56183</span><span class="p">,</span><span class="w"> </span><span class="mi">24255</span><span class="p">,</span><span class="w"> </span><span class="mi">22493</span><span class="p">,</span><span class="w"> </span><span class="mi">27537</span><span class="p">,</span><span class="w"> </span><span class="mi">12587</span><span class="p">,</span><span class="w"> </span><span class="mi">31638</span><span class="p">,</span><span class="w"> </span><span class="mi">39543</span><span class="p">,</span><span class="w"> </span><span class="mi">20593</span><span class="p">,</span><span class="w"> </span><span class="mi">21294</span><span class="p">}).</span><span class="na">intern</span><span class="p">().</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="sc">'Z'</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="sc">'X'</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">'X'</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f5309</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">111</span><span class="p">;</span>
<span class="w">    </span><span class="n">f5312</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i4</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">128</span><span class="p">;</span>
<span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">cArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">29383</span><span class="p">,</span><span class="w"> </span><span class="mi">11261</span><span class="p">,</span><span class="w"> </span><span class="mi">45856</span><span class="p">,</span><span class="w"> </span><span class="mi">8033</span><span class="p">,</span><span class="w"> </span><span class="mi">10541</span><span class="p">,</span><span class="w"> </span><span class="mi">22108</span><span class="p">,</span><span class="w"> </span><span class="mi">25214</span><span class="p">,</span><span class="w"> </span><span class="mi">30659</span><span class="p">,</span><span class="w"> </span><span class="mi">58107</span><span class="p">,</span><span class="w"> </span><span class="mi">55254</span><span class="p">,</span><span class="w"> </span><span class="mi">14618</span><span class="p">,</span><span class="w"> </span><span class="mi">58864</span><span class="p">,</span><span class="w"> </span><span class="mi">14018</span><span class="p">,</span><span class="w"> </span><span class="mi">44529</span><span class="p">,</span><span class="w"> </span><span class="mi">7991</span><span class="p">,</span><span class="w"> </span><span class="mi">15470</span><span class="p">,</span><span class="w"> </span><span class="mi">19635</span><span class="p">,</span><span class="w"> </span><span class="mi">39717</span><span class="p">,</span><span class="w"> </span><span class="mi">39670</span><span class="p">,</span><span class="w"> </span><span class="mi">16382</span><span class="p">,</span><span class="w"> </span><span class="mi">48010</span><span class="p">,</span><span class="w"> </span><span class="mi">15556</span><span class="p">,</span><span class="w"> </span><span class="mi">55341</span><span class="p">,</span><span class="w"> </span><span class="mi">57354</span><span class="p">,</span><span class="w"> </span><span class="mi">38037</span><span class="p">,</span><span class="w"> </span><span class="mi">11242</span><span class="p">,</span><span class="w"> </span><span class="mi">4227</span><span class="p">,</span><span class="w"> </span><span class="mi">54049</span><span class="p">,</span><span class="w"> </span><span class="mi">48270</span><span class="p">,</span><span class="w"> </span><span class="mi">19667</span><span class="p">,</span><span class="w"> </span><span class="mi">812</span><span class="p">,</span><span class="w"> </span><span class="mi">6934</span><span class="p">,</span><span class="w"> </span><span class="mi">28332</span><span class="p">,</span><span class="w"> </span><span class="mi">14278</span><span class="p">,</span><span class="w"> </span><span class="mi">47363</span><span class="p">,</span><span class="w"> </span><span class="mi">20756</span><span class="p">,</span><span class="w"> </span><span class="mi">57729</span><span class="p">,</span><span class="w"> </span><span class="mi">41508</span><span class="p">,</span><span class="w"> </span><span class="mi">31548</span><span class="p">,</span><span class="w"> </span><span class="mi">11732</span><span class="p">,</span><span class="w"> </span><span class="mi">20431</span><span class="p">,</span><span class="w"> </span><span class="mi">31561</span><span class="p">,</span><span class="w"> </span><span class="mi">33119</span><span class="p">,</span><span class="w"> </span><span class="mi">61383</span><span class="p">,</span><span class="w"> </span><span class="mi">24025</span><span class="p">,</span><span class="w"> </span><span class="mi">58306</span><span class="p">,</span><span class="w"> </span><span class="mi">18241</span><span class="p">,</span><span class="w"> </span><span class="mi">30904</span><span class="p">,</span><span class="w"> </span><span class="mi">52967</span><span class="p">,</span><span class="w"> </span><span class="mi">36982</span><span class="p">,</span><span class="w"> </span><span class="mi">32032</span><span class="p">,</span><span class="w"> </span><span class="mi">40856</span><span class="p">,</span><span class="w"> </span><span class="mi">34637</span><span class="p">,</span><span class="w"> </span><span class="mi">20511</span><span class="p">,</span><span class="w"> </span><span class="mi">4255</span><span class="p">,</span><span class="w"> </span><span class="mi">54644</span><span class="p">,</span><span class="w"> </span><span class="mi">53525</span><span class="p">,</span><span class="w"> </span><span class="mi">56183</span><span class="p">,</span><span class="w"> </span><span class="mi">24255</span><span class="p">,</span><span class="w"> </span><span class="mi">22493</span><span class="p">,</span><span class="w"> </span><span class="mi">27537</span><span class="p">,</span><span class="w"> </span><span class="mi">12587</span><span class="p">,</span><span class="w"> </span><span class="mi">31638</span><span class="p">,</span><span class="w"> </span><span class="mi">39543</span><span class="p">,</span><span class="w"> </span><span class="mi">20593</span><span class="p">,</span><span class="w"> </span><span class="mi">21294</span><span class="p">};</span>
</code></pre></div><h2 id="string-obfuscation">String obfuscation</h2><p>Obviously, DexGuard also provides some level of string obfuscation. The class responsible for the deobfuscation is <code>C1107</code> (formerly <code>C1236</code> in the original decompilation output):</p><div class="highlight"><pre><span></span><code><span class="kd">public</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="kd">class</span> <span class="nc">C1107</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="cm">/* renamed from: É© */</span>
<span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">m1192</span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">cArr</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">c2</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">c3</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">c4</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">c5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">58224</span><span class="p">;</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">cArr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">cArr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c5</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c3</span><span class="p">))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c4</span><span class="p">)));</span>
<span class="w">            </span><span class="n">cArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">cArr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c2</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c5</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c</span><span class="p">))));</span>
<span class="w">            </span><span class="n">c5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">c5</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">40503</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Four <code>wide char</code> are necessary, they change in each class that uses this obfuscation. In our class the values are:</p><div class="highlight"><pre><span></span><code><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">m6297</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">f5307</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">34125</span><span class="p">;</span>
<span class="w">    </span><span class="n">f5310</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">13075</span><span class="p">;</span>
<span class="w">    </span><span class="n">f5311</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">49843</span><span class="p">;</span>
<span class="w">    </span><span class="n">f5306</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">58803</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The method is invoked with the constant in this order:</p><div class="highlight"><pre><span></span><code><span class="n">C1107</span><span class="p">.</span><span class="na">m1192</span><span class="p">(</span><span class="n">cArr3</span><span class="p">,</span><span class="w"> </span><span class="n">f5306</span><span class="p">,</span><span class="w"> </span><span class="n">f5311</span><span class="p">,</span><span class="w"> </span><span class="n">f5307</span><span class="p">,</span><span class="w"> </span><span class="n">f5310</span><span class="p">);</span>
</code></pre></div><p>The first element gives the string size, since there is some garbage at the end. The deobfuscation can be called directly in java, or reimplemented in another language to decode all obfuscated strings. As a matter of fact, in its latest version, <a href="https://www.pnfsoftware.com/">JEB</a> will directly give the decoded string, saving us some precious time.</p><p>Originally, we used the following code to deobfuscate the strings:</p><div class="highlight"><pre><span></span><code><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">cArr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">out</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">str_idx</span><span class="p">,</span><span class="w"> </span><span class="n">str_sz</span><span class="p">;</span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">58803</span><span class="p">,</span><span class="w"> </span><span class="n">c2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">49843</span><span class="p">,</span><span class="w"> </span><span class="n">c3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">34125</span><span class="p">,</span><span class="w"> </span><span class="n">c4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">13075</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="w"> </span><span class="n">str</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">c5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">58224</span><span class="p">;</span>
<span class="w">    </span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="w">    </span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c5</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c3</span><span class="p">))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c4</span><span class="p">)));</span>
<span class="w">        </span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c2</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c5</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">((</span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">c</span><span class="p">))));</span>
<span class="w">        </span><span class="n">c5</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">c5</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">40503</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">str_sz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="w">        </span><span class="n">str_idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">        </span><span class="n">out</span><span class="p">[</span><span class="n">str_idx</span><span class="o">++</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">str_idx</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">str_sz</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">out</span><span class="p">[</span><span class="n">str_idx</span><span class="o">++</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="n">cArr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">str_idx</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">str_sz</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">out</span><span class="p">[</span><span class="n">str_idx</span><span class="o">++</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="p">)</span><span class="w"> </span><span class="n">cArr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">out</span><span class="p">[</span><span class="n">str_idx</span><span class="o">++</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">str_idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">str_sz</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">out</span><span class="p">[</span><span class="n">str_idx</span><span class="o">++</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="n">out</span><span class="p">);</span>
</code></pre></div><p>Which gives the following Java code for the decoding of our configuration files:</p><div class="highlight"><pre><span></span><code><span class="kt">int</span><span class="w"> </span><span class="n">indexOf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">"[REDACTED]"</span><span class="p">.</span><span class="na">indexOf</span><span class="p">(</span><span class="n">substring2</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">));;</span>
<span class="k">if</span><span class="p">(</span><span class="n">indexOf</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(((</span><span class="kt">char</span><span class="p">)</span><span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">v5</span><span class="p">)));</span>
<span class="p">}</span>
</code></pre></div><p>As we originally guessed, it was indeed a Base64 encoding with a custom charset.</p><h2 id="deobfuscating-the-configuration-file">Deobfuscating the configuration file</h2><p>There is some additional obfuscation after that. The buffer is reversed and each byte is added with a value incremented at each index and reset every 5 characters.</p><p>In the end, we obtain some useful credentials to play a bit more with the device:</p><div class="highlight"><pre><span></span><code><span class="nt">&lt;user</span><span class="w"> </span><span class="na">username=</span><span class="s">"admin"</span><span class="w"> </span><span class="na">password=</span><span class="s">"[REDACTED]"</span><span class="w"> </span><span class="na">group=</span><span class="s">"ADMIN"</span><span class="w"> </span><span class="nt">/&gt;</span>
</code></pre></div><p>With these credentials, it is possible to reach the Android configuration and activate ADB, as well as the BlueTooth tethering in order to bounce on an internal network.</p><h2 id="bonus">Bonus</h2><p>Once ADB was activated, we could dump a lot of files from the device, such as all the applications installed. From there, finding a command injection run as root is just a matter of time. This is useful to dump the WiFi credentials in order to not depend on the device to bounce on the internal network.</p><h1 id="conclusion">Conclusion</h1><p>The aim of this blog post was to present a method for reverse engineering Android application protected by DexGuard using opensource tools, in the context of a real-world example. Using <code>JEB</code> can however speed up the process of deobfuscation, but as far as we know, the most "technical" parts must still be made separately to obtain the decrypted DEX files.</p><p>While the device in itself seemed innocuous, it ended up being a great way to gain access to a sensitive network. Stacking layers upon layers of obfuscation doesn't help against a motivated attacker.</p><h1 id="annex">Annex</h1><h2 id="diff-between-aes-reference-implementation-and-dexguard-implementation">Diff between AES reference implementation and DexGuard implementation</h2><div class="highlight"><pre><span></span><code><span class="gh">diff -ru aes/rijndael-alg-fst.c code/rijndael-alg-fst.c</span>
<span class="gd">--- aes/rijndael-alg-fst.c  2000-12-06 22:48:16.000000000 +0100</span>
<span class="gi">+++ code/rijndael-alg-fst.c 2022-04-05 15:23:49.400531669 +0200</span>
<span class="gu">@@ -725,7 +725,7 @@</span>
<span class="w"> </span> *
<span class="w"> </span> * @return the number of rounds for the given cipher key size.
<span class="w"> </span> */
<span class="gd">-int rijndaelKeySetupEnc(u32 rk[/*4*(Nr + 1)*/], const u8 cipherKey[], int keyBits) {</span>
<span class="gi">+int rijndaelKeySetupEnc(u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 cipherKey[], int keyBits) {</span>
<span class="w"> </span>       int i = 0;
<span class="w"> </span>   u32 temp;

<span class="gu">@@ -745,8 +745,8 @@</span>
<span class="w"> </span>           rk[5] = rk[1] ^ rk[4];
<span class="w"> </span>           rk[6] = rk[2] ^ rk[5];
<span class="w"> </span>           rk[7] = rk[3] ^ rk[6];
<span class="gd">-           if (++i == 10) {</span>
<span class="gd">-               return 10;</span>
<span class="gi">+           if (++i == Nr) {</span>
<span class="gi">+               return Nr;</span>
<span class="w"> </span>           }
<span class="w"> </span>           rk += 4;
<span class="w"> </span>       }
<span class="gu">@@ -765,8 +765,8 @@</span>
<span class="w"> </span>           rk[ 7] = rk[ 1] ^ rk[ 6];
<span class="w"> </span>           rk[ 8] = rk[ 2] ^ rk[ 7];
<span class="w"> </span>           rk[ 9] = rk[ 3] ^ rk[ 8];
<span class="gd">-           if (++i == 8) {</span>
<span class="gd">-               return 12;</span>
<span class="gi">+           if (++i == (3 * Nr) &gt;&gt; 2) {</span>
<span class="gi">+               return Nr;</span>
<span class="w"> </span>           }
<span class="w"> </span>           rk[10] = rk[ 4] ^ rk[ 9];
<span class="w"> </span>           rk[11] = rk[ 5] ^ rk[10];
<span class="gu">@@ -787,8 +787,8 @@</span>
<span class="w"> </span>           rk[ 9] = rk[ 1] ^ rk[ 8];
<span class="w"> </span>           rk[10] = rk[ 2] ^ rk[ 9];
<span class="w"> </span>           rk[11] = rk[ 3] ^ rk[10];
<span class="gd">-           if (++i == 7) {</span>
<span class="gd">-               return 14;</span>
<span class="gi">+           if (++i == Nr &gt;&gt; 1) {</span>
<span class="gi">+               return Nr;</span>
<span class="w"> </span>           }
<span class="w"> </span>           temp = rk[11];
<span class="w"> </span>           rk[12] = rk[ 4] ^
<span class="gu">@@ -811,12 +811,12 @@</span>
<span class="w"> </span> *
<span class="w"> </span> * @return the number of rounds for the given cipher key size.
<span class="w"> </span> */
<span class="gd">-int rijndaelKeySetupDec(u32 rk[/*4*(Nr + 1)*/], const u8 cipherKey[], int keyBits) {</span>
<span class="gd">-   int Nr, i, j;</span>
<span class="gi">+int rijndaelKeySetupDec(u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 cipherKey[], int keyBits) {</span>
<span class="gi">+   int i, j;</span>
<span class="w"> </span>   u32 temp;

<span class="w"> </span>   /* expand the cipher key: */
<span class="gd">-   Nr = rijndaelKeySetupEnc(rk, cipherKey, keyBits);</span>
<span class="gi">+   rijndaelKeySetupEnc(rk, Nr, cipherKey, keyBits);</span>
<span class="w"> </span>   /* invert the order of the round keys: */
<span class="w"> </span>   for (i = 0, j = 4*Nr; i &lt; j; i += 4, j -= 4) {
<span class="w"> </span>       temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
<span class="gu">@@ -1125,27 +1125,27 @@</span>
<span class="w"> </span>    for (;;) {
<span class="w"> </span>        t0 =
<span class="w"> </span>            Td0[(s0 &gt;&gt; 24)       ] ^
<span class="gd">-            Td1[(s3 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(s2 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(s1      ) &amp; 0xff] ^</span>
<span class="gi">+            Td1[(s2 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(s1 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(s3      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[4];
<span class="w"> </span>        t1 =
<span class="gd">-            Td0[(s1 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(s0 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(s3 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(s3 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(s1 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(s0 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="w"> </span>            Td3[(s2      ) &amp; 0xff] ^
<span class="w"> </span>            rk[5];
<span class="w"> </span>        t2 =
<span class="gd">-            Td0[(s2 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(s1 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(s0 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(s3      ) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(s1 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(s3 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(s2 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(s0      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[6];
<span class="w"> </span>        t3 =
<span class="gd">-            Td0[(s3 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(s2 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(s1 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(s0      ) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(s2 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(s0 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(s3 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(s1      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[7];

<span class="w"> </span>        rk += 8;
<span class="gu">@@ -1155,27 +1155,27 @@</span>

<span class="w"> </span>        s0 =
<span class="w"> </span>            Td0[(t0 &gt;&gt; 24)       ] ^
<span class="gd">-            Td1[(t3 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(t2 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(t1      ) &amp; 0xff] ^</span>
<span class="gi">+            Td1[(t2 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(t1 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(t3      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[0];
<span class="w"> </span>        s1 =
<span class="gd">-            Td0[(t1 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(t0 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(t3 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(t3 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(t1 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(t0 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="w"> </span>            Td3[(t2      ) &amp; 0xff] ^
<span class="w"> </span>            rk[1];
<span class="w"> </span>        s2 =
<span class="gd">-            Td0[(t2 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(t1 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(t0 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(t3      ) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(t1 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(t3 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(t2 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(t0      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[2];
<span class="w"> </span>        s3 =
<span class="gd">-            Td0[(t3 &gt;&gt; 24)       ] ^</span>
<span class="gd">-            Td1[(t2 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gd">-            Td2[(t1 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gd">-            Td3[(t0      ) &amp; 0xff] ^</span>
<span class="gi">+            Td0[(t2 &gt;&gt; 24)       ] ^</span>
<span class="gi">+            Td1[(t0 &gt;&gt; 16) &amp; 0xff] ^</span>
<span class="gi">+            Td2[(t3 &gt;&gt;  8) &amp; 0xff] ^</span>
<span class="gi">+            Td3[(t1      ) &amp; 0xff] ^</span>
<span class="w"> </span>            rk[3];
<span class="w"> </span>    }
<span class="w"> </span>#endif /* ?FULL_UNROLL */
<span class="gu">@@ -1185,30 +1185,30 @@</span>
<span class="w"> </span>    */
<span class="w"> </span>       s0 =
<span class="w"> </span>           (Td4[(t0 &gt;&gt; 24)       ] &amp; 0xff000000) ^
<span class="gd">-           (Td4[(t3 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gd">-           (Td4[(t2 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gd">-           (Td4[(t1      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="gi">+           (Td4[(t2 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gi">+           (Td4[(t1 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gi">+           (Td4[(t3      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="w"> </span>           rk[0];
<span class="w"> </span>   PUTU32(pt     , s0);
<span class="w"> </span>       s1 =
<span class="gd">-           (Td4[(t1 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gd">-           (Td4[(t0 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gd">-           (Td4[(t3 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gi">+           (Td4[(t3 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gi">+           (Td4[(t1 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gi">+           (Td4[(t0 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="w"> </span>           (Td4[(t2      ) &amp; 0xff] &amp; 0x000000ff) ^
<span class="w"> </span>           rk[1];
<span class="w"> </span>   PUTU32(pt +  4, s1);
<span class="w"> </span>       s2 =
<span class="gd">-           (Td4[(t2 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gd">-           (Td4[(t1 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gd">-           (Td4[(t0 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gd">-           (Td4[(t3      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="gi">+           (Td4[(t1 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gi">+           (Td4[(t3 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gi">+           (Td4[(t2 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gi">+           (Td4[(t0      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="w"> </span>           rk[2];
<span class="w"> </span>   PUTU32(pt +  8, s2);
<span class="w"> </span>       s3 =
<span class="gd">-           (Td4[(t3 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gd">-           (Td4[(t2 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gd">-           (Td4[(t1 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gd">-           (Td4[(t0      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="gi">+           (Td4[(t2 &gt;&gt; 24)       ] &amp; 0xff000000) ^</span>
<span class="gi">+           (Td4[(t0 &gt;&gt; 16) &amp; 0xff] &amp; 0x00ff0000) ^</span>
<span class="gi">+           (Td4[(t3 &gt;&gt;  8) &amp; 0xff] &amp; 0x0000ff00) ^</span>
<span class="gi">+           (Td4[(t1      ) &amp; 0xff] &amp; 0x000000ff) ^</span>
<span class="w"> </span>           rk[3];
<span class="w"> </span>   PUTU32(pt + 12, s3);
<span class="w"> </span>}
<span class="gh">diff -ru aes/rijndael-alg-fst.h code/rijndael-alg-fst.h</span>
<span class="gd">--- aes/rijndael-alg-fst.h  2000-12-06 18:50:46.000000000 +0100</span>
<span class="gi">+++ code/rijndael-alg-fst.h 2022-04-05 15:23:49.408531739 +0200</span>
<span class="gu">@@ -34,8 +34,8 @@</span>
<span class="w"> </span>typedef unsigned short u16;
<span class="w"> </span>typedef unsigned int   u32;

<span class="gd">-int rijndaelKeySetupEnc(u32 rk[/*4*(Nr + 1)*/], const u8 cipherKey[], int keyBits);</span>
<span class="gd">-int rijndaelKeySetupDec(u32 rk[/*4*(Nr + 1)*/], const u8 cipherKey[], int keyBits);</span>
<span class="gi">+int rijndaelKeySetupEnc(u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 cipherKey[], int keyBits);</span>
<span class="gi">+int rijndaelKeySetupDec(u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 cipherKey[], int keyBits);</span>
<span class="w"> </span>void rijndaelEncrypt(const u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 pt[16], u8 ct[16]);
<span class="w"> </span>void rijndaelDecrypt(const u32 rk[/*4*(Nr + 1)*/], int Nr, const u8 ct[16], u8 pt[16]);
</code></pre></div></div><div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=Obfuscated%20obfuscation&amp;url=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/dexguard.html&amp;title=Obfuscated%20obfuscation&amp;summary=This%20article%20is%20a%20step-by-step%20guide%20to%20reverse%20an%20APK%20protected%20with%20DexGuard%20using%20Jadx&amp;source=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=Obfuscated%20obfuscation&amp;body=https%3A//blog.lexfo.fr/dexguard.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></div></main><a class="banner" href="https://www.ambionics.io/blog/"><p>Visit also our blog dedicated to web security research</p><img class="logo" src="/theme/images/ambionics-logo.svg"/></a><footer><div class="footer"><div><a href="https://lexfo.fr"><img class="logo" src="/theme/images/lexfo-logo.svg"/></a><p>+33 1 40 17 91 28 <br/> 5, rue Saulnier <br/> 75009 Paris</p></div><div><p><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></p></div></div><hr/><div class="footer" style="color: #515151;"><div><p>Â© LEXFO 2024 - All rights reserved</p></div><div class="footer-networks"><a href="https://twitter.com/LexfoSecurite"><i class="fab fa-x-twitter"></i></a> <a href="https://www.linkedin.com/company/lexfo/"><i class="fab fa-linkedin"></i></a> <a href="https://github.com/lexfo"><i class="fab fa-github"></i></a></div></div></footer></body></html>