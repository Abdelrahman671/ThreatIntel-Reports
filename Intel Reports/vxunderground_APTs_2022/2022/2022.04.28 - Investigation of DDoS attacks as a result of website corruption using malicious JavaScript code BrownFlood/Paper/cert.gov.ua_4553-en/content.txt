1/6
cert-gov-ua.translate.goog /article/39923
Investigation of DDoS attacks as a result of website
corruption using malicious JavaScript code BrownFlood
(CERT-UA # 4553)
General information:
The government team for responding to computer emergencies in Ukraine CERT-UA in close cooperation
with the National Bank of Ukraine (CSIRT-NBU) has taken measures to investigate DDoS attacks, for
which attackers place malicious JavaScript code (BrownFlood) in the structure of the web pages and files
of compromised websites (mostly under WordPress), as a result of which the computing resources of
computers of visitors to such websites are used to generate an abnormal number of requests to attack
objects, URLs of which are statically defined in malicious JavaScript. code.
The mentioned malicious JavaScript-code can be placed in the structure of the main files of the website
(HTML, JavaScript, etc.), including in base64-encoded form. Figure 1-3 shows the relevant examples.
Fig.1
2/6
Fig.2
Fig.3
3/6
To detect similar to the mentioned abnormal activity in the log files of the web server, you should pay
attention to the events with the response code 404 and, if they are abnormal, correlate them with the
values   of the HTTP header "Referer", which will contain the address of the web resource initiated a
request (Fig.4). Based on the tested version of BrownFlood, the URI is formed by the Math.random ()
function and will look similar to that shown in Figure 2. This template can also be used to search using
regular expressions, however, this feature can be changed by attackers at any time.
Fig.4
For an exhaustive list of compromised websites that contain BrownFlood code, see the "Compromise
Indicators" section. Yara's rules for detecting this malware are listed in the "Threat Detection" section.
CERT-UA has taken measures to inform about the threat to website owners, as well as relevant domain
name registrars and hosting providers.
Activity is tracked by UAC-0101.
Compromise indicators:
Network:
hxxp: // cmtheodor [.] be 
hxxp: // staystrongjewels [.] com 
hxxp: // kesp [.] cl 
hxxp: // mosquito [.] com 
hxxp: // timeandbright [.] com 
hxxp: // winchconstruction [.] com 
hxxp: // nejsemlama [.] cz 
hxxp: // mitraseo [.] hol [.] es 
hxxp: // blog [.] gocon [.] in 
hxxp: // anniversarygiftsforcouples [.] com 
hxxp: // granitecsinks [.] ca 
hxxp: // easternexecutiveclub [.] com 
hxxp: // economiquity [.] org 
hxxp: // enlamentedeunasesor [.] com 
hxxp: // fan-guy [.] com 
hxxp: // garagemusicschool [.] it 
4/6
hxxp: // iforma [.] es 
hxxp: // inter-webservices [.] com 
hxxp: // karunadana [.] org 
hxxp: // pius-studio [.] at 
hxxp: // ludepa [.] ec 
hxxp: // e-wwg [.] com 
hxxp: // brunoboys [.] no 
hxxp: // lesrochersblancs [.] com 
hxxp: // lonelyatthetop [.] com 
hxxp: //sea-dobbiaco.bz [.] it 
hxxp: // gopoppers [.] com 
hxxp: // aspe [.] ro 
hxxp: // podologaneri [.] it 
hxxp: // cuts-international [.] org 
hxxp: // texlidia [.] com 
hxxp: // programasparapc [.] net 
hxxp: //hamnavard.sharif [.] ir / wp-content / plugins / visitors-traffic-
real-time-statistics / js / front.js? ver = 5.6.8 
hxxps: // xcasinobonuses [.] net / wp-content / themes / xcasinobonuses / js 
/ bootstrap.min.js 
hxxps: // olei [.] ro / wp-content / plugins / translatepress-multilingual / 
assets / js / trp-frontend-compatibility.js 
hxxps: //floorfix.com [.] au / wp-content / themes / evolve / library / media 
/ js / parallax / parallax.js? ver = 5.1.13 
Recommendations:
1. Take steps to detect and remove malicious JavaScript code.
2. Provide up-to-date and up-to-date support for website content management systems (CMS).
3. Restrict access to website management pages.
Threat detection tools:
Yara:
rule MAL_BrownFlood_1 
{
 target:
  description = "To detect BrownFlood JavaScript DDoS implant" 
  author = "CERT-UA" 
  created = "2022-04-27" 
  version = 2 
5/6
 strings:
  $ s1 = ": //" 
  $ s2 = "fetch (" 
  $ f1 = "AbortController ()" 
  $ f2 = "Math.random ()" 
  $ f3 = "await" 
  $ f4 = ".shift (" 
  $ f5 = ".push (" 
  $ m1 = "GET" 
  $ m2 = "no-cors" 
   
  $ a1 = "fetchWithTimeout" 
  $ a2 = "CONCURRENCY_LIMIT" 
  $ a3 = "flood" 
  
 condition: 
  (
   all of ($ s *) and 
   for all of ($ f *): (# == 1) and 
   all of ($ m *) 
  ) or
  (
   all of ($ s *) and 
   2 of ($ a *) 
  )
}
rule MAL_BrownFlood_2 
{
 target:
  description = "To detect BrownFlood JavaScript DDoS implant (base64 
encoded)"
  author = "CERT-UA" 
  created = "2022-04-27" 
  version = 2 
 strings:
  $ s1 = "http: //" base64 
  $ s2 = "https: //" base64 
   
  $ i = "fetch (" base64 
6/6
  $ f1 = "AbortController ()" base64 
  $ f2 = "Math.random ()" base64 
  $ f3 = "await" base64 
  $ f4 = ".shift (" base64 
  $ f5 = ".push (" base64 
  $ m1 = "GET" base64 
  $ m2 = "no-cors" base64 
   
  $ a1 = "fetchWithTimeout" base64 
  $ a2 = "CONCURRENCY_LIMIT" base64 
  $ a3 = "flood" base64 
  
 condition: 
  (
   any of ($ s *) and 
   $ i and
   for all of ($ f *): (# <6) and 
   all of ($ m *) 
  )
  or
  (
   any of ($ s *) and 
   $ i and
   2 of ($ a *) 
  )
}
