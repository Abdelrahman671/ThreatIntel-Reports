<!doctype html><html lang="en"><head><title data-rh="true">VexTrio’s Browser Fingerprinting. Hey everyone, welcome back to the first… | by Gi7w0rm | Medium</title><meta data-rh="true" charset="utf-8"/><meta data-rh="true" name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1,maximum-scale=1"/><meta data-rh="true" name="theme-color" content="#000000"/><meta data-rh="true" name="twitter:app:name:iphone" content="Medium"/><meta data-rh="true" name="twitter:app:id:iphone" content="828256236"/><meta data-rh="true" property="al:ios:app_name" content="Medium"/><meta data-rh="true" property="al:ios:app_store_id" content="828256236"/><meta data-rh="true" property="al:android:package" content="com.medium.reader"/><meta data-rh="true" property="fb:app_id" content="542599432471018"/><meta data-rh="true" property="og:site_name" content="Medium"/><meta data-rh="true" property="og:type" content="article"/><meta data-rh="true" property="article:published_time" content="2024-03-19T19:02:13.301Z"/><meta data-rh="true" name="title" content="VexTrio’s Browser Fingerprinting. Hey everyone, welcome back to the first… | by Gi7w0rm | Medium"/><meta data-rh="true" property="og:title" content="VexTrio’s Browser Fingerprinting"/><meta data-rh="true" property="al:android:url" content="medium://p/aeb721be6e30"/><meta data-rh="true" property="al:ios:url" content="medium://p/aeb721be6e30"/><meta data-rh="true" property="al:android:app_name" content="Medium"/><meta data-rh="true" name="description" content="Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at Javascript inject-based malware: Browser Fingerprinting. To…"/><meta data-rh="true" property="og:description" content="Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at…"/><meta data-rh="true" property="og:url" content="https://gi7w0rm.medium.com/vextrios-browser-fingerprinting-aeb721be6e30"/><meta data-rh="true" property="al:web:url" content="https://gi7w0rm.medium.com/vextrios-browser-fingerprinting-aeb721be6e30"/><meta data-rh="true" property="og:image" content="https://miro.medium.com/v2/resize:fit:1152/1*IOMq6n4m17tmyiJ1FdMAsw.png"/><meta data-rh="true" property="article:author" content="https://gi7w0rm.medium.com"/><meta data-rh="true" name="author" content="Gi7w0rm"/><meta data-rh="true" name="robots" content="index,noarchive,follow,max-image-preview:large"/><meta data-rh="true" name="referrer" content="unsafe-url"/><meta data-rh="true" property="twitter:title" content="VexTrio’s Browser Fingerprinting"/><meta data-rh="true" name="twitter:site" content="@Medium"/><meta data-rh="true" name="twitter:app:url:iphone" content="medium://p/aeb721be6e30"/><meta data-rh="true" property="twitter:description" content="Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at…"/><meta data-rh="true" name="twitter:image:src" content="https://miro.medium.com/v2/resize:fit:1152/1*IOMq6n4m17tmyiJ1FdMAsw.png"/><meta data-rh="true" name="twitter:card" content="summary_large_image"/><meta data-rh="true" name="twitter:creator" content="@Gi7w0rm"/><meta data-rh="true" name="twitter:label1" content="Reading time"/><meta data-rh="true" name="twitter:data1" content="40 min read"/><link data-rh="true" rel="icon" href="https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19"/><link data-rh="true" rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml"/><link data-rh="true" rel="apple-touch-icon" sizes="152x152" href="https://miro.medium.com/v2/resize:fill:304:304/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="120x120" href="https://miro.medium.com/v2/resize:fill:240:240/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="76x76" href="https://miro.medium.com/v2/resize:fill:152:152/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="60x60" href="https://miro.medium.com/v2/resize:fill:120:120/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="mask-icon" href="https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png" color="#171717"/><link data-rh="true" rel="preconnect" href="https://glyph.medium.com" crossOrigin=""/><link data-rh="true" id="glyph_preload_link" rel="preload" as="style" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" id="glyph_link" rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" rel="author" href="https://gi7w0rm.medium.com"/><link data-rh="true" rel="canonical" href="https://gi7w0rm.medium.com/vextrios-browser-fingerprinting-aeb721be6e30"/><link data-rh="true" rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/aeb721be6e30"/><script data-rh="true" type="application/ld+json">{"@context":"http:\u002F\u002Fschema.org","@type":"NewsArticle","image":["https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:1200\u002F1*IOMq6n4m17tmyiJ1FdMAsw.png"],"url":"https:\u002F\u002Fgi7w0rm.medium.com\u002Fvextrios-browser-fingerprinting-aeb721be6e30","dateCreated":"2024-03-19T19:02:13.301Z","datePublished":"2024-03-19T19:02:13.301Z","dateModified":"2024-03-20T04:20:27.929Z","headline":"VexTrio’s Browser Fingerprinting - Gi7w0rm - Medium","name":"VexTrio’s Browser Fingerprinting - Gi7w0rm - Medium","description":"Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at Javascript inject-based malware: Browser Fingerprinting. To…","identifier":"aeb721be6e30","author":{"@type":"Person","name":"Gi7w0rm","url":"https:\u002F\u002Fgi7w0rm.medium.com"},"creator":["Gi7w0rm"],"publisher":{"@type":"Organization","name":"Medium","url":"https:\u002F\u002Fgi7w0rm.medium.com\u002F","logo":{"@type":"ImageObject","width":272,"height":60,"url":"https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:544\u002F7*V1_7XP4snlmqrc_0Njontw.png"}},"mainEntityOfPage":"https:\u002F\u002Fgi7w0rm.medium.com\u002Fvextrios-browser-fingerprinting-aeb721be6e30"}</script><style type="text/css" data-fela-rehydration="509" data-fela-type="STATIC">html{box-sizing:border-box;-webkit-text-size-adjust:100%}*, *:before, *:after{box-sizing:inherit}body{margin:0;padding:0;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;color:rgba(0,0,0,0.8);position:relative;min-height:100vh}h1, h2, h3, h4, h5, h6, dl, dd, ol, ul, menu, figure, blockquote, p, pre, form{margin:0}menu, ol, ul{padding:0;list-style:none;list-style-image:none}main{display:block}a{color:inherit;text-decoration:none}a, button, input{-webkit-tap-highlight-color:transparent}img, svg{vertical-align:middle}button{background:transparent;overflow:visible}button, input, optgroup, select, textarea{margin:0}:root{--reach-tabs:1;--reach-menu-button:1}#speechify-root{font-family:Sohne, sans-serif}div[data-popper-reference-hidden="true"]{visibility:hidden;pointer-events:none}.grecaptcha-badge{visibility:hidden}
/*XCode style (c) Angel Garcia <angelgarcia.mail@gmail.com>*/.hljs {background: #fff;color: black;
}/* Gray DOCTYPE selectors like WebKit */
.xml .hljs-meta {color: #c0c0c0;
}.hljs-comment,
.hljs-quote {color: #007400;
}.hljs-tag,
.hljs-attribute,
.hljs-keyword,
.hljs-selector-tag,
.hljs-literal,
.hljs-name {color: #aa0d91;
}.hljs-variable,
.hljs-template-variable {color: #3F6E74;
}.hljs-code,
.hljs-string,
.hljs-meta .hljs-string {color: #c41a16;
}.hljs-regexp,
.hljs-link {color: #0E0EFF;
}.hljs-title,
.hljs-symbol,
.hljs-bullet,
.hljs-number {color: #1c00cf;
}.hljs-section,
.hljs-meta {color: #643820;
}.hljs-title.class_,
.hljs-class .hljs-title,
.hljs-type,
.hljs-built_in,
.hljs-params {color: #5c2699;
}.hljs-attr {color: #836C28;
}.hljs-subst {color: #000;
}.hljs-formula {background-color: #eee;font-style: italic;
}.hljs-addition {background-color: #baeeba;
}.hljs-deletion {background-color: #ffc8bd;
}.hljs-selector-id,
.hljs-selector-class {color: #9b703f;
}.hljs-doctag,
.hljs-strong {font-weight: bold;
}.hljs-emphasis {font-style: italic;
}
</style><style type="text/css" data-fela-rehydration="509" data-fela-type="KEYFRAME">@-webkit-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@-moz-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE">.a{font-family:medium-content-sans-serif-font, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif}.b{font-weight:400}.c{background-color:rgba(255, 255, 255, 1)}.l{display:block}.m{position:sticky}.n{top:0}.o{z-index:500}.p{padding:0 24px}.q{align-items:center}.r{border-bottom:solid 1px #F2F2F2}.y{height:41px}.z{line-height:20px}.ab{display:flex}.ac{height:57px}.ae{flex:1 0 auto}.af{color:inherit}.ag{fill:inherit}.ah{font-size:inherit}.ai{border:inherit}.aj{font-family:inherit}.ak{letter-spacing:inherit}.al{font-weight:inherit}.am{padding:0}.an{margin:0}.ao{cursor:pointer}.ap:disabled{cursor:not-allowed}.aq:disabled{color:#6B6B6B}.ar:disabled{fill:#6B6B6B}.au{width:auto}.av path{fill:#242424}.aw{height:25px}.ax{margin-left:16px}.ay{border:none}.az{border-radius:20px}.ba{width:240px}.bb{background:#F9F9F9}.bc path{fill:#6B6B6B}.be{outline:none}.bf{font-family:sohne, "Helvetica Neue", Helvetica, Arial, sans-serif}.bg{font-size:14px}.bh{width:100%}.bi{padding:10px 20px 10px 0}.bj{background-color:transparent}.bk{color:#242424}.bl::placeholder{color:#6B6B6B}.bm{display:inline-block}.bn{margin-left:12px}.bo{margin-right:12px}.bp{border-radius:4px}.bq{margin-left:24px}.br{height:24px}.bx{background-color:#F9F9F9}.by{border-radius:50%}.bz{height:32px}.ca{width:32px}.cb{justify-content:center}.ch{max-width:680px}.ci{min-width:0}.cj{animation:k1 1.2s ease-in-out infinite}.ck{height:100vh}.cl{margin-bottom:16px}.cm{margin-top:48px}.cn{align-items:flex-start}.co{flex-direction:column}.cp{justify-content:space-between}.cq{margin-bottom:24px}.cw{width:80%}.cx{background-color:#F2F2F2}.dd{height:44px}.de{width:44px}.df{margin:auto 0}.dg{margin-bottom:4px}.dh{height:16px}.di{width:120px}.dj{width:80px}.dp{margin-bottom:8px}.dq{width:96%}.dr{width:98%}.ds{width:81%}.dt{margin-left:8px}.du{color:#6B6B6B}.dv{font-size:13px}.dw{height:100%}.ep{color:#FFFFFF}.eq{fill:#FFFFFF}.er{background:#1A8917}.es{border-color:#1A8917}.ew:disabled{cursor:inherit !important}.ex:disabled{opacity:0.3}.ey:disabled:hover{background:#1A8917}.ez:disabled:hover{border-color:#1A8917}.fa{border-radius:99em}.fb{border-width:1px}.fc{border-style:solid}.fd{box-sizing:border-box}.fe{text-decoration:none}.ff{text-align:center}.fi{margin-right:32px}.fj{position:relative}.fk{fill:#6B6B6B}.fn{background:transparent}.fo svg{margin-left:4px}.fp svg{fill:#6B6B6B}.fr{box-shadow:inset 0 0 0 1px rgba(0, 0, 0, 0.05)}.fs{position:absolute}.fz{margin:0 24px}.gd{background:rgba(255, 255, 255, 1)}.ge{border:1px solid #F2F2F2}.gf{box-shadow:0 1px 4px #F2F2F2}.gg{max-height:100vh}.gh{overflow-y:auto}.gi{left:0}.gj{top:calc(100vh + 100px)}.gk{bottom:calc(100vh + 100px)}.gl{width:10px}.gm{pointer-events:none}.gn{word-break:break-word}.go{word-wrap:break-word}.gp:after{display:block}.gq:after{content:""}.gr:after{clear:both}.gs{line-height:1.23}.gt{letter-spacing:0}.gu{font-style:normal}.gv{font-weight:700}.ia{align-items:baseline}.ib{width:48px}.ic{height:48px}.id{border:2px solid rgba(255, 255, 255, 1)}.ie{z-index:0}.if{box-shadow:none}.ig{border:1px solid rgba(0, 0, 0, 0.05)}.ih{margin-bottom:2px}.ii{flex-wrap:nowrap}.ij{font-size:16px}.ik{line-height:24px}.im{margin:0 8px}.in{display:inline}.io{color:#1A8917}.ip{fill:#1A8917}.is{flex:0 0 auto}.iv{flex-wrap:wrap}.iw{padding-left:8px}.ix{padding-right:8px}.jy> *{flex-shrink:0}.jz{overflow-x:scroll}.ka::-webkit-scrollbar{display:none}.kb{scrollbar-width:none}.kc{-ms-overflow-style:none}.kd{width:74px}.ke{flex-direction:row}.kf{z-index:2}.kg{margin-right:4px}.kj{-webkit-user-select:none}.kk{border:0}.kl{fill:rgba(117, 117, 117, 1)}.ko{outline:0}.kp{user-select:none}.kq> svg{pointer-events:none}.kz{cursor:progress}.la{opacity:1}.lb{padding:4px 0}.le{margin-top:0px}.lf{width:16px}.lh{display:inline-flex}.ln{max-width:100%}.lo{padding:8px 2px}.lp svg{color:#6B6B6B}.mg{line-height:1.58}.mh{letter-spacing:-0.004em}.mi{font-family:source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif}.nd{margin-bottom:-0.46em}.ne{margin-left:auto}.nf{margin-right:auto}.ng{max-width:1152px}.nm{clear:both}.no{cursor:zoom-in}.np{z-index:auto}.nr{height:auto}.ns{box-shadow:inset 3px 0 0 0 #242424}.nt{padding-left:23px}.nu{margin-left:-20px}.nv{font-style:italic}.nw{text-decoration:underline}.nx{overflow-x:auto}.ny{font-family:source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace}.nz{padding:32px}.oa{border:1px solid #E5E5E5}.ob{line-height:1.4}.oc{letter-spacing:-0.022em}.od{margin-top:-0.2em}.oe{margin-bottom:-0.2em}.of{white-space:pre}.og{min-width:fit-content}.oh{list-style-type:decimal}.oi{margin-left:30px}.oj{padding-left:0px}.op{list-style-type:disc}.oq{line-height:1.18}.or{font-weight:600}.ph{margin-bottom:-0.31em}.pi{max-width:986px}.pj{margin-top:10px}.pk{max-width:728px}.pn{max-width:982px}.po{padding:2px 4px}.pp{font-size:75%}.pq> strong{font-family:inherit}.pw{max-width:992px}.px{max-width:902px}.py{max-width:1030px}.pz{max-width:402px}.qa{max-width:3563px}.qb{margin-bottom:26px}.qc{margin-top:6px}.qd{margin-top:8px}.qe{margin-right:8px}.qf{padding:8px 16px}.qg{border-radius:100px}.qh{transition:background 300ms ease}.qj{white-space:nowrap}.qk{border-top:none}.qq{height:52px}.qr{max-height:52px}.qs{box-sizing:content-box}.qt{position:static}.qu{z-index:1}.qw{max-width:155px}.rc{margin-right:20px}.ri{align-items:flex-end}.rj{width:76px}.rk{height:76px}.rl{border:2px solid #F9F9F9}.rm{height:72px}.rn{width:72px}.ro{stroke:#F2F2F2}.rp{height:36px}.rq{width:36px}.rr{color:#F2F2F2}.rs{fill:#F2F2F2}.rt{background:#F2F2F2}.ru{border-color:#F2F2F2}.sa{font-weight:500}.sb{font-size:24px}.sc{line-height:30px}.sd{letter-spacing:-0.016em}.se{margin-top:16px}.sf{height:0px}.sg{border-bottom:solid 1px #E5E5E5}.sm{margin-top:72px}.sn{padding:24px 0}.so{margin-bottom:0px}.sp{margin-right:16px}.as:hover:not(:disabled){color:rgba(25, 25, 25, 1)}.at:hover:not(:disabled){fill:rgba(25, 25, 25, 1)}.et:hover{background:#156D12}.eu:hover{border-color:#156D12}.ev:hover{cursor:pointer}.fl:hover{color:#242424}.fm:hover{fill:#242424}.fq:hover svg{fill:#242424}.ft:hover{background-color:rgba(0, 0, 0, 0.1)}.il:hover{text-decoration:underline}.iq:hover:not(:disabled){color:#156D12}.ir:hover:not(:disabled){fill:#156D12}.kn:hover{fill:rgba(8, 8, 8, 1)}.lc:hover{fill:#000000}.ld:hover p{color:#000000}.lg:hover{color:#000000}.lq:hover svg{color:#000000}.qi:hover{background-color:#F2F2F2}.rv:hover{background:#F2F2F2}.rw:hover{border-color:#F2F2F2}.rx:hover{cursor:wait}.ry:hover{color:#F2F2F2}.rz:hover{fill:#F2F2F2}.bd:focus-within path{fill:#242424}.km:focus{fill:rgba(8, 8, 8, 1)}.lr:focus svg{color:#000000}.nq:focus{transform:scale(1.01)}.kr:active{border-style:none}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (min-width: 1080px)">.d{display:none}.bw{width:64px}.cg{margin:0 64px}.cv{height:48px}.dc{margin-bottom:52px}.do{margin-bottom:48px}.ef{font-size:14px}.eg{line-height:20px}.em{font-size:13px}.eo{padding:5px 12px}.fh{display:flex}.fy{margin-bottom:68px}.gc{max-width:680px}.hq{font-size:42px}.hr{margin-top:1.19em}.hs{margin-bottom:32px}.ht{line-height:52px}.hu{letter-spacing:-0.011em}.hz{align-items:center}.jk{border-top:solid 1px #F2F2F2}.jl{border-bottom:solid 1px #F2F2F2}.jm{margin:32px 0 0}.jn{padding:3px 8px}.jw> *{margin-right:24px}.jx> :last-child{margin-right:0}.ky{margin-top:0px}.lm{margin:0}.mz{font-size:20px}.na{margin-top:2.14em}.nb{line-height:32px}.nc{letter-spacing:-0.003em}.nl{margin-top:56px}.oo{margin-top:1.14em}.pe{margin-top:1.72em}.pf{line-height:24px}.pg{letter-spacing:0}.pv{margin-top:0.94em}.qp{margin-bottom:88px}.rb{display:inline-block}.rh{padding-top:72px}.sl{margin-top:40px}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (max-width: 1079.98px)">.e{display:none}.kx{margin-top:0px}.pl{margin-left:auto}.pm{text-align:center}.ra{display:inline-block}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (max-width: 903.98px)">.f{display:none}.kw{margin-top:0px}.qz{display:inline-block}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (max-width: 727.98px)">.g{display:none}.ku{margin-top:0px}.kv{margin-right:0px}.qy{display:inline-block}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (max-width: 551.98px)">.h{display:none}.s{display:flex}.t{justify-content:space-between}.bs{width:24px}.cc{margin:0 24px}.cr{height:40px}.cy{margin-bottom:44px}.dk{margin-bottom:32px}.dx{font-size:13px}.dy{line-height:20px}.eh{padding:0px 8px 1px}.fu{margin-bottom:4px}.gw{font-size:32px}.gx{margin-top:1.01em}.gy{margin-bottom:24px}.gz{line-height:38px}.ha{letter-spacing:-0.014em}.hv{align-items:flex-start}.it{flex-direction:column}.iy{margin:24px -24px 0}.iz{padding:0}.jo> *{margin-right:8px}.jp> :last-child{margin-right:24px}.kh{margin-left:0px}.ks{margin-top:0px}.kt{margin-right:0px}.li{margin:0}.ls{border:1px solid #F2F2F2}.lt{border-radius:99em}.lu{padding:0px 16px 0px 12px}.lv{height:38px}.lw{align-items:center}.ly svg{margin-right:8px}.mj{font-size:18px}.mk{margin-top:1.56em}.ml{line-height:28px}.mm{letter-spacing:-0.003em}.nh{margin-top:40px}.ok{margin-top:1.34em}.os{font-size:16px}.ot{margin-top:1.23em}.ou{letter-spacing:0}.pr{margin-top:0.67em}.ql{margin-bottom:80px}.qx{display:inline-block}.rd{padding-top:48px}.sh{margin-top:32px}.lx:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (min-width: 904px) and (max-width: 1079.98px)">.i{display:none}.bv{width:64px}.cf{margin:0 64px}.cu{height:48px}.db{margin-bottom:52px}.dn{margin-bottom:48px}.ed{font-size:14px}.ee{line-height:20px}.ek{font-size:13px}.el{padding:5px 12px}.fg{display:flex}.fx{margin-bottom:68px}.gb{max-width:680px}.hl{font-size:42px}.hm{margin-top:1.19em}.hn{margin-bottom:32px}.ho{line-height:52px}.hp{letter-spacing:-0.011em}.hy{align-items:center}.jg{border-top:solid 1px #F2F2F2}.jh{border-bottom:solid 1px #F2F2F2}.ji{margin:32px 0 0}.jj{padding:3px 8px}.ju> *{margin-right:24px}.jv> :last-child{margin-right:0}.ll{margin:0}.mv{font-size:20px}.mw{margin-top:2.14em}.mx{line-height:32px}.my{letter-spacing:-0.003em}.nk{margin-top:56px}.on{margin-top:1.14em}.pb{margin-top:1.72em}.pc{line-height:24px}.pd{letter-spacing:0}.pu{margin-top:0.94em}.qo{margin-bottom:88px}.rg{padding-top:72px}.sk{margin-top:40px}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (min-width: 728px) and (max-width: 903.98px)">.j{display:none}.w{display:flex}.x{justify-content:space-between}.bu{width:64px}.ce{margin:0 48px}.ct{height:48px}.da{margin-bottom:52px}.dm{margin-bottom:48px}.eb{font-size:13px}.ec{line-height:20px}.ej{padding:0px 8px 1px}.fw{margin-bottom:68px}.ga{max-width:680px}.hg{font-size:42px}.hh{margin-top:1.19em}.hi{margin-bottom:32px}.hj{line-height:52px}.hk{letter-spacing:-0.011em}.hx{align-items:center}.jc{border-top:solid 1px #F2F2F2}.jd{border-bottom:solid 1px #F2F2F2}.je{margin:32px 0 0}.jf{padding:3px 8px}.js> *{margin-right:24px}.jt> :last-child{margin-right:0}.lk{margin:0}.mr{font-size:20px}.ms{margin-top:2.14em}.mt{line-height:32px}.mu{letter-spacing:-0.003em}.nj{margin-top:56px}.om{margin-top:1.14em}.oy{margin-top:1.72em}.oz{line-height:24px}.pa{letter-spacing:0}.pt{margin-top:0.94em}.qn{margin-bottom:88px}.rf{padding-top:72px}.sj{margin-top:40px}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="all and (min-width: 552px) and (max-width: 727.98px)">.k{display:none}.u{display:flex}.v{justify-content:space-between}.bt{width:24px}.cd{margin:0 24px}.cs{height:40px}.cz{margin-bottom:44px}.dl{margin-bottom:32px}.dz{font-size:13px}.ea{line-height:20px}.ei{padding:0px 8px 1px}.fv{margin-bottom:4px}.hb{font-size:32px}.hc{margin-top:1.01em}.hd{margin-bottom:24px}.he{line-height:38px}.hf{letter-spacing:-0.014em}.hw{align-items:flex-start}.iu{flex-direction:column}.ja{margin:24px 0 0}.jb{padding:0}.jq> *{margin-right:8px}.jr> :last-child{margin-right:8px}.ki{margin-left:0px}.lj{margin:0}.lz{border:1px solid #F2F2F2}.ma{border-radius:99em}.mb{padding:0px 16px 0px 12px}.mc{height:38px}.md{align-items:center}.mf svg{margin-right:8px}.mn{font-size:18px}.mo{margin-top:1.56em}.mp{line-height:28px}.mq{letter-spacing:-0.003em}.ni{margin-top:40px}.ol{margin-top:1.34em}.ov{font-size:16px}.ow{margin-top:1.23em}.ox{letter-spacing:0}.ps{margin-top:0.67em}.qm{margin-bottom:80px}.re{padding-top:48px}.si{margin-top:32px}.me:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="print">.qv{display:none}</style><style type="text/css" data-fela-rehydration="509" data-fela-type="RULE" media="(prefers-reduced-motion: no-preference)">.nn{transition:transform 300ms cubic-bezier(0.2, 0, 0.2, 1)}</style></head><body><div id="root"><div class="a b c"><div class="d e f g h i j k"></div><script>document.domain = document.domain;</script><div class="l c"><div class="l m n o c"><div class="p q r s t u v w x i d y z"><a class="du ag dv bf ak b am an ao ap aq ar as at s u w i d q dw z" href="https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Faeb721be6e30&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderUser&amp;source=---top_nav_layout_nav----------------------------------" rel="noopener follow">Open in app<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10" class="dt"><path fill="currentColor" d="M.985 8.485a.375.375 0 1 0 .53.53zM8.75 1.25h.375A.375.375 0 0 0 8.75.875zM8.375 6.5a.375.375 0 1 0 .75 0zM3.5.875a.375.375 0 1 0 0 .75zm-1.985 8.14 7.5-7.5-.53-.53-7.5 7.5zm6.86-7.765V6.5h.75V1.25zM3.5 1.625h5.25v-.75H3.5z"></path></svg></a><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><button class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton">Sign up</button></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="p q r ab ac"><div class="ab q ae"><a class="af ag ah ai aj ak al am an ao ap aq ar as at ab" aria-label="Homepage" data-testid="headerMediumLogo" href="https://medium.com/?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="719" height="160" fill="none" viewBox="0 0 719 160" class="au av aw"><path fill="#242424" d="m174.104 9.734.215-.047V8.02H130.39L89.6 103.89 48.81 8.021H1.472v1.666l.212.047c8.018 1.81 12.09 4.509 12.09 14.242V137.93c0 9.734-4.087 12.433-12.106 14.243l-.212.047v1.671h32.118v-1.665l-.213-.048c-8.018-1.809-12.089-4.509-12.089-14.242V30.586l52.399 123.305h2.972l53.925-126.743V140.75c-.687 7.688-4.721 10.062-11.982 11.701l-.215.05v1.652h55.948v-1.652l-.215-.05c-7.269-1.639-11.4-4.013-12.087-11.701l-.037-116.774h.037c0-9.733 4.071-12.432 12.087-14.242m25.555 75.488c.915-20.474 8.268-35.252 20.606-35.507 3.806.063 6.998 1.312 9.479 3.714 5.272 5.118 7.751 15.812 7.368 31.793zm-.553 5.77h65.573v-.275c-.186-15.656-4.721-27.834-13.466-36.196-7.559-7.227-18.751-11.203-30.507-11.203h-.263c-6.101 0-13.584 1.48-18.909 4.16-6.061 2.807-11.407 7.003-15.855 12.511-7.161 8.874-11.499 20.866-12.554 34.343q-.05.606-.092 1.212a50 50 0 0 0-.065 1.151 85.807 85.807 0 0 0-.094 5.689c.71 30.524 17.198 54.917 46.483 54.917 25.705 0 40.675-18.791 44.407-44.013l-1.886-.664c-6.557 13.556-18.334 21.771-31.738 20.769-18.297-1.369-32.314-19.922-31.042-42.395m139.722 41.359c-2.151 5.101-6.639 7.908-12.653 7.908s-11.513-4.129-15.418-11.63c-4.197-8.053-6.405-19.436-6.405-32.92 0-28.067 8.729-46.22 22.24-46.22 5.657 0 10.111 2.807 12.236 7.704zm43.499 20.008c-8.019-1.897-12.089-4.722-12.089-14.951V1.309l-48.716 14.353v1.757l.299-.024c6.72-.543 11.278.386 13.925 2.83 2.072 1.915 3.082 4.853 3.082 8.987v18.66c-4.803-3.067-10.516-4.56-17.448-4.56-14.059 0-26.909 5.92-36.176 16.672-9.66 11.205-14.767 26.518-14.767 44.278-.003 31.72 15.612 53.039 38.851 53.039 13.595 0 24.533-7.449 29.54-20.013v16.865h43.711v-1.746zM424.1 19.819c0-9.904-7.468-17.374-17.375-17.374-9.859 0-17.573 7.632-17.573 17.374s7.721 17.374 17.573 17.374c9.907 0 17.375-7.47 17.375-17.374m11.499 132.546c-8.019-1.897-12.089-4.722-12.089-14.951h-.035V43.635l-43.714 12.551v1.705l.263.024c9.458.842 12.047 4.1 12.047 15.152v81.086h43.751v-1.746zm112.013 0c-8.018-1.897-12.089-4.722-12.089-14.951V43.635l-41.621 12.137v1.71l.246.026c7.733.813 9.967 4.257 9.967 15.36v59.279c-2.578 5.102-7.415 8.131-13.274 8.336-9.503 0-14.736-6.419-14.736-18.073V43.638l-43.714 12.55v1.703l.262.024c9.459.84 12.05 4.097 12.05 15.152v50.17a56.3 56.3 0 0 0 .91 10.444l.787 3.423c3.701 13.262 13.398 20.197 28.59 20.197 12.868 0 24.147-7.966 29.115-20.43v17.311h43.714v-1.747zm169.818 1.788v-1.749l-.213-.05c-8.7-2.006-12.089-5.789-12.089-13.49v-63.79c0-19.89-11.171-31.761-29.883-31.761-13.64 0-25.141 7.882-29.569 20.16-3.517-13.01-13.639-20.16-28.606-20.16-13.146 0-23.449 6.938-27.869 18.657V43.643L545.487 55.68v1.715l.263.024c9.345.829 12.047 4.181 12.047 14.95v81.784h40.787v-1.746l-.215-.053c-6.941-1.631-9.181-4.606-9.181-12.239V66.998c1.836-4.289 5.537-9.37 12.853-9.37 9.086 0 13.692 6.296 13.692 18.697v77.828h40.797v-1.746l-.215-.053c-6.94-1.631-9.18-4.606-9.18-12.239V75.066a42 42 0 0 0-.578-7.26c1.947-4.661 5.86-10.177 13.475-10.177 9.214 0 13.691 6.114 13.691 18.696v77.828z"></path></svg></a><div class="ax h"><div class="ab ay az ba bb q bc bd"><div class="bm" aria-hidden="false" aria-describedby="searchResults" aria-labelledby="searchResults"></div><div class="bn bo ab"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div><input role="combobox" aria-controls="searchResults" aria-expanded="false" aria-label="search" data-testid="headerSearchInput" tabindex="0" class="ay be bf bg z bh bi bj bk bl" placeholder="Search" value=""/></div></div></div><div class="h k w fg fh"><div class="fi ab"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerWriteButton" href="https://medium.com/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav-----------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Write"><path fill="currentColor" d="M14 4a.5.5 0 0 0 0-1zm7 6a.5.5 0 0 0-1 0zm-7-7H4v1h10zM3 4v16h1V4zm1 17h16v-1H4zm17-1V10h-1v10zm-1 1a1 1 0 0 0 1-1h-1zM3 20a1 1 0 0 0 1 1v-1zM4 3a1 1 0 0 0-1 1h1z"></path><path stroke="currentColor" d="m17.5 4.5-8.458 8.458a.25.25 0 0 0-.06.098l-.824 2.47a.25.25 0 0 0 .316.316l2.47-.823a.25.25 0 0 0 .098-.06L19.5 6.5m-2-2 2.323-2.323a.25.25 0 0 1 .354 0l1.646 1.646a.25.25 0 0 1 0 .354L19.5 6.5m-2-2 2 2"></path></svg><div class="dt l">Write</div></div></a></span></div></div><div class="k j i d"><div class="fi ab"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSearchButton" href="https://medium.com/search?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Search"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div></a></div></div><div class="fi h k j"><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><button class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton">Sign up</button></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="l" aria-hidden="false"><button class="ay fn am ab q ao fo fp fq" aria-label="user options menu" data-testid="headerUserIcon"><div class="l fj"><img alt="" class="l fd by bz ca cx" src="https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png" width="32" height="32" loading="lazy" role="presentation"/><div class="fr by l bz ca fs n ay ft"></div></div></button></div></div></div><div class="l"><div class="fu fv fw fx fy l"><div class="ab cb"><div class="ci bh fz ga gb gc"></div></div><article><div class="l"><div class="l"><span class="l"></span><section><div><div class="fs gi gj gk gl gm"></div><div class="gn go gp gq gr"><div class="ab cb"><div class="ci bh fz ga gb gc"><div><h1 id="3012" class="pw-post-title gs gt gu bf gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu bk" data-testid="storyTitle">VexTrio’s Browser Fingerprinting</h1><div><div class="speechify-ignore ab cp"><div class="speechify-ignore bh l"><div class="hv hw hx hy hz ab"><div><div class="ab ia"><div><div class="bm" aria-hidden="false"><a rel="noopener follow" href="/?source=post_page---byline--aeb721be6e30--------------------------------"><div class="l ib ic by id ie"><div class="l fj"><img alt="Gi7w0rm" class="l fd by dd de cx" src="https://miro.medium.com/v2/resize:fill:88:88/1*XNZYIunppMSwHbb0Dxx3cA.png" width="44" height="44" loading="lazy" data-testid="authorPhoto"/><div class="if by l dd de fs n ig ft"></div></div></div></a></div></div></div></div><div class="bn bh l"><div class="ab"><div style="flex:1"><span class="bf b bg z bk"><div class="ih ab q"><div class="ab q ii"><div class="ab q"><div><div class="bm" aria-hidden="false"><p class="bf b ij ik bk"><a class="af ag ah ai aj ak al am an ao ap aq ar il" data-testid="authorName" rel="noopener follow" href="/?source=post_page---byline--aeb721be6e30--------------------------------">Gi7w0rm</a></p></div></div></div><span class="im in" aria-hidden="true"><span class="bf b bg z du">·</span></span><p class="bf b ij ik du"><span><a class="io ip ah ai aj ak al am an ao ap aq ar ex iq ir" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffa7639fc99f0&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=post_page-fa7639fc99f0--byline--aeb721be6e30---------------------post_header-----------" rel="noopener follow">Follow</a></span></p></div></div></span></div></div><div class="l is"><span class="bf b bg z du"><div class="ab cn it iu iv"><span class="bf b bg z du"><div class="ab ae"><span data-testid="storyReadTime">40 min read</span><div class="iw ix l" aria-hidden="true"><span class="l" aria-hidden="true"><span class="bf b bg z du">·</span></span></div><span data-testid="storyPublishDate">Mar 19, 2024</span></div></span></div></span></div></div></div><div class="ab cp iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn"><div class="h k w fg fh q"><div class="kd l"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Faeb721be6e30&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=---header_actions--aeb721be6e30---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></div><div><div class="bm" aria-hidden="false"><button class="ao kk la lb ab q fk lc ld" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="le"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg></button></div></div></div><div class="ab q jo jp jq jr js jt ju jv jw jx jy jz ka kb kc"><div class="lf k j i d"></div><div class="h k"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faeb721be6e30&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;source=---header_actions--aeb721be6e30---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lg" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="fd lh cn"><div class="l ae"><div class="ab cb"><div class="li lj lk ll lm ln ci bh"><div class="ab"><div class="bm bh" aria-hidden="false"><div><div class="bm" aria-hidden="false"><button aria-label="Listen" data-testid="audioPlayButton" class="af fk ah ai aj ak al lo an ao ap ex lp lq ld lr ls lt lu lv s lw lx ly lz ma mb mc u md me mf"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0m9-10C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2m3.376 10.416-4.599 3.066a.5.5 0 0 1-.777-.416V8.934a.5.5 0 0 1 .777-.416l4.599 3.066a.5.5 0 0 1 0 .832" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Listen</p></div></button></div></div></div></div></div></div></div></div><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="headerSocialShareButton" class="af fk ah ai aj ak al lo an ao ap ex lp lq ld lr ls lt lu lv s lw lx ly lz ma mb mc u md me mf"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Share</p></div></button></div></div></div></div></div></div></div></div></div><p id="c695" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at Javascript inject-based malware: Browser Fingerprinting.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf ng"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*IOMq6n4m17tmyiJ1FdMAsw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*IOMq6n4m17tmyiJ1FdMAsw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*IOMq6n4m17tmyiJ1FdMAsw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*IOMq6n4m17tmyiJ1FdMAsw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*IOMq6n4m17tmyiJ1FdMAsw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*IOMq6n4m17tmyiJ1FdMAsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*IOMq6n4m17tmyiJ1FdMAsw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*IOMq6n4m17tmyiJ1FdMAsw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="545" loading="eager" role="presentation"/></picture></div></div></figure><p id="6c18" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">To do so, we are going to have a look at the fingerprinting stage of VexTrio, a malicious TDS (Traffic Distribution System) currently injected into webpages across the globe, that redirects visitors to an array of different fraudpages. Its functionality is probably best described like this:</p><blockquote class="ns nt nu"><p id="03bf" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">VexTrio actors inject malicious JavaScript code into vulnerable WordPress websites, which then redirects visitors to potentially harmful content. The visitors go through a redirect chain that involves fraudulent domains whose purpose is to track victims and conditionally send them to landing webpages that serve riskware, spyware, adware, scams, pornographic images, or other unwanted programs. (Source: <a class="af nw" href="https://blogs.infoblox.com/cyber-threat-intelligence/cyber-threat-advisory/vextrio-ddga-domains-spread-adware-spyware-and-scam-web-forms/" rel="noopener ugc nofollow" target="_blank">Infoblox</a>)</p></blockquote><p id="ba8e" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">To decide where to lead a user that opens a page infected with VexTrio, the malicious TDS uses several different methods to fingerprint the potential victim&#x27;s browser. Depending on the JavaScript chain used, this can start by only allowing Users to be redirected if they meet certain conditions when visiting an infected site.</p><blockquote class="ns nt nu"><p id="f5b2" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">1. The user must visit the WordPress website from a search engine. For example, the referrer URL can be <a class="af nw" href="https://www.google.com/." rel="noopener ugc nofollow" target="_blank"><em class="gu">https://www.google.com/</em>.</a></p><p id="f264" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">2. Cookies are enabled in the user’s web browser.</p><p id="e34b" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">3. The user has not visited a VexTrio compromised web page in the past 24 hours.</p><p id="a136" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">(Source: <a class="af nw" href="https://blogs.infoblox.com/cyber-threat-intelligence/cyber-threat-advisory/vextrio-ddga-domains-spread-adware-spyware-and-scam-web-forms/" rel="noopener ugc nofollow" target="_blank">Infoblox</a>)</p></blockquote><p id="72ea" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, this initial step of the infection chain already assures several things. First, by checking the referrer header, it is less likely that the VexTrio malware accidentally redirects a Website administrator or regular user of a website as both of those would likely not visit their website via a Search Engine but by directly opening the URL.</p><p id="6652" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Second, by assuring that the User&#x27;s Browser Cookies are enabled, the malware assures its functionality, as it makes use of several cookies, depending on its redirection chain. One of which is used to identify that no victim is redirected more than once in 24 hours. This leads us to the 3rd point, which likely serves the purpose of flying under the radar, as malicious redirecting behavior is not persistent but only happens once every 24 hours, making it less likely for users to complain to an administrator. It could also assure that a potential victim of more intrusive attacks, like VexTrio leading to Malware, does not get infected several times in a short timespan, reducing the noise of reoccurring infections on the attacker side.</p><p id="2fac" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">However, the purpose of this blog post is not to shed light on the initial VexTrio injection page, but on the several methods used to redirect victims to the different kinds of fraud that can be delivered by the VexTrio TDS.</p><p id="5310" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">For doing so, the malware makes use of several fingerprinting methods being delivered in a second-stage JavaScript file, once a potential victim passes the above-described checks. These fingerprinting methods are used mainly to make sure that a potential victim is legitimate and not a researcher or web crawler. After each check is run, the malware returns a string value, which is then used by the VexTrio server to decide which redirect to serve the victim. Luckily for us, the actors behind VexTrio try to keep their code pretty clean. This allows us to have a look at all the checks at once due to a huge function that is only used to start each individual check and work with the result. Originally the function names were all generic, from A1 to A29</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="ab9e" class="ob oc gu ny b bg od oe l of og">function chk() {<br/>  try {<br/>    if (CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_Webdriver_in_Navigator_Interface().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_Permission_DENIED_in_State_Prompt().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_SPOOKYOSCHECK_likely_Devtools().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_Phantom_in_Window().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_BROWSERAUTOMATION_via_domElements().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_PHANTOMAS().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_Selenium_DOM_based().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_NodeJS_Buffer().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (DETECT_Chromium_based_automation_driver().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_setTimeout_Integrity().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_setInterval_Integrity().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_XMLHTTPRequest_1().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_XMLHTTPRequest_2().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_UserAgent_not_automation().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_NumberofLogicalProcessors_IOS().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_Browser_VoiceList().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK__STACKTRACE_Behavior().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else if (CHECK_VirtualBox().split(&quot;:&quot;)[1] === &quot;1&quot;) {<br/>      return &quot;a0:&quot; + 1;<br/>    } else {<br/>      return &quot;a0:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a0:e&quot;;<br/>  }<br/>}</span></pre><p id="d2f0" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">I will now try to walk you through these checks to explain what they do and how they work. This likely means to look at a lot of JavaScript and Browser Documentation. So buckle up for some craziness ahead. First of all, let&#x27;s look at the most used helper functions:</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="9566" class="ob oc gu ny b bg od oe l of og">function CHECK_DEVICE_IN_USERAGENT_STRING() {<br/>  var c = navigator.userAgent.toLowerCase();<br/>  var d;<br/>  if (c.indexOf(&quot;windows phone&quot;) &gt;= 0) {<br/>    d = &quot;Windows Phone&quot;;<br/>  } else if (c.indexOf(&quot;win&quot;) &gt;= 0) {<br/>    d = &quot;Windows&quot;;<br/>  } else if (c.indexOf(&quot;kaios&quot;) &gt;= 0) {<br/>    d = &quot;Kaios&quot;;<br/>  } else if (c.indexOf(&quot;android&quot;) &gt;= 0 || c.indexOf(&quot;spreadtrum&quot;) &gt;= 0) {<br/>    d = &quot;Android&quot;;<br/>  } else if (c.indexOf(&quot;linux&quot;) &gt;= 0 || c.indexOf(&quot;cros&quot;) &gt;= 0) {<br/>    d = &quot;Linux&quot;;<br/>  } else if (c.indexOf(&quot;iphone&quot;) &gt;= 0 || c.indexOf(&quot;ipad&quot;) &gt;= 0) {<br/>    d = &quot;iOS&quot;;<br/>  } else if (c.indexOf(&quot;mac&quot;) &gt;= 0) {<br/>    d = &quot;Mac&quot;;<br/>  } else {<br/>    d = &quot;Other&quot;;<br/>  }<br/>  return d;<br/>}</span></pre><p id="5c27" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">and</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="14b1" class="ob oc gu ny b bg od oe l of og">function DETECT_Browser_Type() {<br/>  var c = navigator.userAgent;<br/>  var d;<br/>  if (c.indexOf(&quot;OPR/&quot;) !== -1 || c.indexOf(&quot;Opera&quot;) !== -1) {<br/>    d = &quot;Opera&quot;;<br/>  } else if ((c.indexOf(&quot;MSIE&quot;) !== -1 || c.indexOf(&quot;Trident&quot;) !== -1) &amp;&amp; c.indexOf(&quot;MAXTHON&quot;) === -1) {<br/>    d = &quot;Internet Explorer&quot;;<br/>  } else if (c.indexOf(&quot;Edge&quot;) !== -1 || c.indexOf(&quot;EdgA&quot;) !== -1) {<br/>    d = &quot;Edge&quot;;<br/>  } else if (c.indexOf(&quot;SamsungBrowser&quot;) !== -1) {<br/>    d = &quot;Samsung Browser&quot;;<br/>  } else if (c.indexOf(&quot;UCBrowser&quot;) !== -1) {<br/>    d = &quot;UC Browser&quot;;<br/>  } else if (c.indexOf(&quot;Android&quot;) !== -1 &amp;&amp; c.indexOf(&quot;Chrome&quot;) === -1 &amp;&amp; c.indexOf(&quot;Firefox&quot;) === -1) {<br/>    d = &quot;Android Browser&quot;;<br/>  } else if (c.indexOf(&quot;Chrome&quot;) !== -1 || c.indexOf(&quot;CriOS&quot;) !== -1) {<br/>    d = &quot;Chrome&quot;;<br/>  } else if (c.indexOf(&quot;Safari&quot;) !== -1 &amp;&amp; c.indexOf(&quot;Chrome&quot;) === -1) {<br/>    d = &quot;Safari&quot;;<br/>  } else if (c.indexOf(&quot;Firefox&quot;) !== -1) {<br/>    d = &quot;Firefox&quot;;<br/>  } else {<br/>    d = &quot;Other&quot;;<br/>  }<br/>  return d;<br/>}</span></pre><p id="46a6" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Both of these are pretty straightforward and work based on the potential victims&#x27; User-agent Header.</p><blockquote class="ns nt nu"><p id="30ca" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The User-Agent <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Glossary/Request_header" rel="noopener ugc nofollow" target="_blank">request header</a> is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Glossary/User_agent" rel="noopener ugc nofollow" target="_blank">user agent</a>. (Src: <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent" rel="noopener ugc nofollow" target="_blank">Mozilla.org</a>)</p></blockquote><p id="50ee" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">So let&#x27;s see an example UserAgent string to better understand what we can identify based on this header:</p><blockquote class="ns nt nu"><p id="dc05" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</p></blockquote><p id="5744" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Let&#x27;s split this into parts and try to understand everything individually:</p><ol class=""><li id="86fd" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd oh oi oj bk">Mozilla/5.0: A historical string used at the start of most UserAgent strings that can be ignored.</li><li id="f1d7" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">Windows NT 10.0: Windows NT is the name of the Windows Kernel. 10.0 is the Kernel Version used by the person above, who made the web request. Using <a class="af nw" href="https://de.wikipedia.org/wiki/Microsoft_Windows_NT" rel="noopener ugc nofollow" target="_blank">online </a>resources, we can easily identify that whoever is making this web request is using a Windows Operating system. More specifically, either a late version of Windows 10 or Windows 11. (Technically it could also be a Windows Server 2016, 2019 or 2021).</li><li id="3a00" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">Win64; x64: This gives us the Windows <a class="af nw" href="https://de.wikipedia.org/wiki/X64" rel="noopener ugc nofollow" target="_blank">processor architecture</a> used. From an attacker&#x27;s perspective, this could be important as x64 malware binaries would not be able to run on an x32 operating system.</li><li id="1327" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">AppleWebKit/537.36: This is the browser&#x27;s rendering engine and version. The rendering engine is used to translate the source code of a website into a visual representation. In this case, it appears to be AppleWebKit. Now, historically this part of the UserAgent string used to be accurate, as for a long time AppleWebKit was used by all Apple and Chromium-based browsers. However, in 2013 Google started to create and use their own fork of AppleWebKit (called Blink). For some reason this was never really announced in the UserAgent of a Webbrowser so nowadays the above could be either Safari, Chrome, or other Chromium or WebKit-based browsers. The only thing we can already clearly exclude is Mozilla’s Firefox which uses Gecko and properly announces that.</li><li id="c598" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">(KHTML like Gecko): Another historical piece of information. Technically, AppleWebKit is itself a fork of another browser rendering engine called KHTML. When Apple released WebKit around 2005, they wanted to make sure that the new rendering engine was accepted by all major web servers around. So they simply put KHTML like Gecko into the string to announce that their new rendering engine would behave the same way as Mozilla’s Gecko Engine.</li><li id="4bc2" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">Chrome/121.0.0.0: This is the actual Browser using the above UserAgent Header. Google Chrome Version 121</li><li id="2a00" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">Safari/537.36: And this is yet another historical piece of information. When Google released Chrome they wanted to ensure that all Websites accept their requests as well. So they copied the Safari UserAgent of that time and added their own Chrome Version (6.) into it.</li></ol><p id="6823" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">As you see, there is a lot of information to unpack from a UserAgent. And this is only one example. The below UserAgents are also perfectly fine:</p><ul class=""><li id="b2e0" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd op oi oj bk">Dalvik/2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build/MRA58K)</li><li id="a7c2" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Mobile/15E148 Safari/604.1</li><li id="7757" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0</li></ul><p id="3165" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">And as you can easily see, they vastly differ from what we saw before. However, all of them share 2 characteristics:</p><ol class=""><li id="77ec" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd oh oi oj bk">A bracket with precise details about the used operating system</li><li id="bb9a" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">The potential to precisely identify the used Browser by trying to find the exact part of the string that is not represented in other UserAgents.</li></ol><p id="23f6" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">But what&#x27;s important to note here is that technically, the software that makes the web request can decide if and which UserAgent to set. Common tools like wget, curl or the python-request library all set individual UserAgents, if not told to do otherwise, which gives web servers an easy way to identify uncommon web requests. If you want to learn more about the history of UserAgents, I highly suggest reading <a class="af nw" href="https://humanwhocodes.com/blog/2010/01/12/history-of-the-user-agent-string/" rel="noopener ugc nofollow" target="_blank">this post</a>.</p><p id="aefd" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Coming back to VexTrio, we can now understand what the first two presented fingerprinting functions do. The function “CHECK_DEVICE_IN_USERAGENT_STRING” is used to parse the UserAgent received from the victim and identify the Operating System. To do so, it converts the user-agent into all lowercase letters and then iterates over it to identify characteristic strings that uniquely identify the OS. If the OS is not identified, it sets the return value to “Other”. The function “DETECT_Browser_Type” is used to identify the victim&#x27;s browser (Chrome, Firefox, Safari, etc.). If you watch closely you can see that it makes use of some of the previously discussed historical features of UserAgent strings. For example, a browser is only identified as being “Safari”, if there is no “Chrome” string in the header. As we just learned, thats the precise difference between a Safari and a Chrome header as Google just added the Chrome Version in a Safari UserAgent string. Again, if the Browser is not identified, it is set to “Other”.</p><p id="10ae" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">As we will see during this article, VexTrio makes continuous use of both the above-described functions. But to keep things in order I will now walk through every check in order A1 to A29.</p><h2 id="dea5" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 1: CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="388d" class="ob oc gu ny b bg od oe l of og">function CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE() {<br/>  if (typeof navigator.languages !== &quot;undefined&quot;) {<br/>    try {<br/>      var c = navigator.languages[0].substr(0, 2);<br/>      if (c !== navigator.language.substr(0, 2)) {<br/>        return &quot;a1:&quot; + 1;<br/>      }<br/>    } catch (d) {<br/>      return &quot;a1:e&quot;;<br/>    }<br/>  }<br/>  return &quot;a1:&quot; + 0;<br/>}</span></pre><p id="4884" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The first real check VexTrio does is to compare the value of the user&#x27;s preferred language (navigator.language) with the first array of the browsers.languages array. More precisely it compares the first 2 letters of the ISO code representation of said elements. In Firefox, both values should always be the same. However, for other browsers, this is not necessarily true. In the case of the VexTrio code, if the ISO codes are not the same, the return value is “a1:1” (Check a1 = bad), if the values are the same or if the navigator.languages array is not defined it returns “a1:0” (Check a1 = good). I believe the VexTrio authors might not have thought this check through. While I get the initial intention of saying that a browser behaves weirdly if the UI/preferred language does not match the first entry in the languages array, this is not necessarily an indicator of something being odd. For example, <a class="af nw" href="https://github.com/brave/brave-browser/issues/24314" rel="noopener ugc nofollow" target="_blank">Brave browser&#x27;s anti-tracking feature intentionally sets these values to be different</a> and browsers different from Mozilla Firefox are not obligated to have these values equal. At this time I am unaware of what VexTrio tries to accomplish with this check, but I am very open to suggestions.</p><h2 id="be97" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 2: CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="28ed" class="ob oc gu ny b bg od oe l of og">function CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE() {<br/>  try {<br/>    if (window.screen.width &lt; window.screen.availWidth || window.screen.height &lt; window.screen.availHeight) {<br/>      if (window.screen.width === window.screen.availHeight &amp;&amp; window.screen.height === window.screen.availWidth || window.screen.width === window.screen.availHeight + 20 &amp;&amp; window.screen.height === window.screen.availWidth) {<br/>        return &quot;a2:&quot; + 0;<br/>      } else {<br/>        return &quot;a2:&quot; + 1;<br/>      }<br/>    } else {<br/>      return &quot;a2:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a2:e&quot;;<br/>  }<br/>}</span></pre><p id="5ff6" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">In this second check, VexTrio compares the size of the current window representation against the size of the available screen by checking both the total height to the available height and the total width to the available width.</p><p id="f7c7" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">To understand this check, let&#x27;s first understand the values that are compared. According to my research, the values window.screen.availWidth and window.screen.availHeight return the available width and height of the browser window that is available for rendering a webpage. Usually, this is the number of pixels of height/width of the screen minus the value of pixels used for static features of a web browser, like the taskbar, search bar, or other browser UI features.</p><p id="5bf4" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">In contrast, window.screen.height and window.screen.width show the maximum screen size as configured in the OS screen resolution settings. These values do not take into account any form of statically rendered browser UI features.</p><p id="aba9" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Logically, for a normal web browser, it should always be expected that the available Height and available width values are smaller than the height and width values, as every “normal” web browser renders UI features reducing the available width and height. The first part of the above check uses exactly this assumption to check for the browser&#x27;s legitimacy. If the height and width ratio is bigger than the available height and width value, the check is passed and the function returns a2:0 (check 2 passed).</p><p id="c234" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">However, if the check is not passed, it can not be immediately said that the browser is not legitimate. A secondary check is done to check if the width value equals the availHeight value (or availHeight value +20 pixels) and the height value equals the availWidth value. I have yet to figure out why these values would be legitimate browser values as well. My initial assumption was that this could have to do with rotating screens where the availHeight might be the width and vice versa. However, an initial test on my Laptops rotating screen did not result in the described behavior as the values automatically adjusted for the rotated screen. Maybe this is different on some mobile devices? Feel free to comment below.</p><h2 id="ea28" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 3: CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="07e4" class="ob oc gu ny b bg od oe l of og">function CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING() {<br/>  try {<br/>    var d = navigator.oscpu;<br/>    var f = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    if (typeof d !== &quot;undefined&quot;) {<br/>      d = d.toLowerCase();<br/>      if (d === &quot;&quot; &amp;&amp; f === &quot;Kaios&quot;) {<br/>        return &quot;a3:&quot; + 0;<br/>      } else if (d.indexOf(&quot;win&quot;) &gt;= 0 &amp;&amp; f !== &quot;Windows&quot; &amp;&amp; f !== &quot;Windows Phone&quot;) {<br/>        return &quot;a3:&quot; + 1;<br/>      } else if (d.indexOf(&quot;linux&quot;) &gt;= 0 &amp;&amp; f !== &quot;Linux&quot; &amp;&amp; f !== &quot;Android&quot;) {<br/>        return &quot;a3:&quot; + 1;<br/>      } else if (d.indexOf(&quot;mac&quot;) &gt;= 0 &amp;&amp; f !== &quot;Mac&quot; &amp;&amp; f !== &quot;iOS&quot;) {<br/>        return &quot;a3:&quot; + 1;<br/>      } else if ((d.indexOf(&quot;win&quot;) === -1 &amp;&amp; d.indexOf(&quot;linux&quot;) === -1 &amp;&amp; d.indexOf(&quot;mac&quot;) === -1) !== (f === &quot;Other&quot;)) {<br/>        return &quot;a3:&quot; + 1;<br/>      } else {<br/>        return &quot;a3:&quot; + 0;<br/>      }<br/>    } else {<br/>      return &quot;a3:&quot; + 0;<br/>    }<br/>  } catch (g) {<br/>    return &quot;a3:e&quot;;<br/>  }<br/>}</span></pre><p id="cd56" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 3 is a rather simple comparison check. It makes use of the navigator.oscpu property. This deprecated property returns a string that identifies the OS used for running the browser that is currently visiting a webpage. The table below shows the expected value of the oscpu property together with the OS it&#x27;s referring to.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf pi"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ONm-HKMXg1TeMw5VF5l5pA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ONm-HKMXg1TeMw5VF5l5pA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ONm-HKMXg1TeMw5VF5l5pA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ONm-HKMXg1TeMw5VF5l5pA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ONm-HKMXg1TeMw5VF5l5pA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ONm-HKMXg1TeMw5VF5l5pA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ONm-HKMXg1TeMw5VF5l5pA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ONm-HKMXg1TeMw5VF5l5pA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="463" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 1: oscpu values (Source: <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu" rel="noopener ugc nofollow" target="_blank">mozilla.org</a>)</figcaption></figure><p id="a43d" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, using the navigator.oscpu property and the previously discussed method of retrieving the OS from the UserAgent header, VexTrio has 2 ways of receiving the OS. Check 3 now takes these two methods and compares their result under the condition that navigator.oscpu does not return “undefined”. If the OS returned by navigator.oscpu is the same as the UserAgent value, the check is passed (a3:0). If not, VexTrio assumes the visitor is not legitimate, as it suggests someone is fiddling either with the UserAgent or the Browser.</p><h2 id="f1fc" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check4: CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="e96f" class="ob oc gu ny b bg od oe l of og">function CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX() {<br/>  try {<br/>    var c = navigator.oscpu;<br/>    var d = DETECT_Browser_Type();<br/>    if (typeof c !== &quot;undefined&quot; &amp;&amp; d !== &quot;Firefox&quot;) {<br/>      return &quot;a4:&quot; + 1;<br/>    } else {<br/>      return &quot;a4:&quot; + 0;<br/>    }<br/>  } catch (f) {<br/>    return &quot;a4:e&quot;;<br/>  }<br/>}</span></pre><p id="3ed3" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, there is one problem with the previously discussed check. The feature “navigator.oscpu” is largely discontinued and currently only still supported by Firefox and Firefox for Android. On all other browsers “navigator.oscpu” returns “undefined”. VexTrio makes use of this check by comparing the return value with the result of the UserAgent Browser Type check (discussed above). If the Browser identified is not Firefox, but the type of the result for navigator.oscpu is not undefined, VexTrio automatically assumes something is wrong. The check is therefore not passed (a4:1).</p><h2 id="f224" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 5: CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="064b" class="ob oc gu ny b bg od oe l of og">function CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT() {<br/>  try {<br/>    var c = navigator.platform.toLowerCase();<br/>    var d = navigator.userAgent.toLowerCase();<br/>    var f = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    if (c === &quot;&quot; &amp;&amp; f === &quot;Kaios&quot;) {<br/>      return &quot;a5:&quot; + 0;<br/>    } else if (d.indexOf(&quot;maui&quot;) &gt;= 0 &amp;&amp; c.indexOf(&quot;pike&quot;) &gt;= 0) {<br/>      return &quot;a5:&quot; + 0;<br/>    } else if (d.indexOf(&quot;j2me/midp&quot;) &gt;= 0 &amp;&amp; c.indexOf(&quot;pike&quot;) &gt;= 0) {<br/>      return &quot;a5:&quot; + 0;<br/>    } else if (c === &quot;arm&quot; &amp;&amp; f === &quot;Windows Phone&quot;) {<br/>      return &quot;a5:&quot; + 0;<br/>    } else if (c.indexOf(&quot;win&quot;) &gt;= 0 &amp;&amp; f !== &quot;Windows&quot; &amp;&amp; f !== &quot;Windows Phone&quot;) {<br/>      return &quot;a5:&quot; + 1;<br/>    } else if ((c.indexOf(&quot;linux&quot;) &gt;= 0 || c.indexOf(&quot;android&quot;) &gt;= 0 || c.indexOf(&quot;pike&quot;) &gt;= 0) &amp;&amp; f !== &quot;Linux&quot; &amp;&amp; f !== &quot;Android&quot; &amp;&amp; f !== &quot;Kaios&quot;) {<br/>      return &quot;a5:&quot; + 1;<br/>    } else if ((c.indexOf(&quot;mac&quot;) &gt;= 0 || c.indexOf(&quot;ipad&quot;) &gt;= 0 || c.indexOf(&quot;ipod&quot;) &gt;= 0 || c.indexOf(&quot;iphone&quot;) &gt;= 0) &amp;&amp; f !== &quot;Mac&quot; &amp;&amp; f !== &quot;iOS&quot;) {<br/>      return &quot;a5:&quot; + 1;<br/>    } else if (c === &quot;macintel&quot; &amp;&amp; d.indexOf(&quot;iphone&quot;) &gt;= 0) {<br/>      return &quot;a5:&quot; + 1;<br/>    } else {<br/>      var g = c.indexOf(&quot;win&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;linux&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;mac&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;iphone&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;pike&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;ipod&quot;) &lt; 0 &amp;&amp; c.indexOf(&quot;ipad&quot;) &lt; 0;<br/>      if (g !== (f === &quot;Other&quot;)) {<br/>        return &quot;a5:&quot; + 1;<br/>      }<br/>    }<br/>    return &quot;a5:&quot; + 0;<br/>  } catch (h) {<br/>    return &quot;a5:e&quot;;<br/>  }<br/>}</span></pre><p id="5b53" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 5 is again a comparison check. It takes the values of the native browser properties navigator.platform and navigator.useragent plus the value for the previously described function that returns the OS from the received UserAgent. The function then does several checks based on these straightforward values. For example, it checks if the OS returned by navigator.platform contains typical Apple-based platform indicators (Mac, iPad, iPod or iPhone) but there is no mention of a Mac or iOS operating system in the UserAgent, which would be odd as all 4 platforms would either be Mac or iOS based. Hence if true the check would not be passed (a5:1).</p><p id="87b9" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">I am not going to explain every single check done in this function as they all follow the pattern of comparison-based checks to detect oddities between navigator.platform and UserAgent-based platform value.</p><h2 id="fe31" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 6: CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="108a" class="ob oc gu ny b bg od oe l of og">function CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS() {<br/>  try {<br/>    var c = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    if (typeof navigator.plugins === &quot;undefined&quot; &amp;&amp; c !== &quot;Windows&quot; &amp;&amp; c !== &quot;Windows Phone&quot;) {<br/>      return &quot;a6:&quot; + 1;<br/>    } else {<br/>      return &quot;a6:&quot; + 0;<br/>    }<br/>  } catch (d) {<br/>    return &quot;a6:e&quot;;<br/>  }<br/>}</span></pre><p id="05b5" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 6 is based on the navigator.plugins value. Now, the navigator.plugins property is pretty interesting. According to the Mozilla developer documentation, it has been deprecated in all browsers except for Safari. While on Safari this property returns an actual array of all installed browser plugins and their description, on all other browsers it seems to return a hardcoded list of PDF plugins.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf pn"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*JsekrJ794lKmR3EmvmpakA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*JsekrJ794lKmR3EmvmpakA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*JsekrJ794lKmR3EmvmpakA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*JsekrJ794lKmR3EmvmpakA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*JsekrJ794lKmR3EmvmpakA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*JsekrJ794lKmR3EmvmpakA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*JsekrJ794lKmR3EmvmpakA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*JsekrJ794lKmR3EmvmpakA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="447" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 2: Deprecation status of navigator.plugins (source: <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/plugins" rel="noopener ugc nofollow" target="_blank">mozilla.org</a>)</figcaption></figure><p id="e392" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, despite the fact that all browsers that all common browsers seem to have some form of return value for the navigator.plugins property, either a real list of plugins or a list of hardcoded pdf values, check 6 assumes that under Windows and Microsoft Phone, the value could potentially be undefined. I am not aware as to why this should be the case. However, VexTrio checks if the return value of the property is undefined despite the fact that the OS returned by the UserAgent OS check function is not Windows or Windows Phone. In this case, the check fails and a6:1 gets returned, else the check is passed. My best guess is that there are browser automation tools that do not bother to define the navigator.plugins array and could therefore be detected as illegitimate browsers using this check.</p><h2 id="a1a8" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 7: CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="d4fd" class="ob oc gu ny b bg od oe l of og">function CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE() {<br/>  try {<br/>    var c = navigator.productSub;<br/>    var d = DETECT_Browser_Type();<br/>    if ((d === &quot;Chrome&quot; || d === &quot;Safari&quot;) &amp;&amp; c !== &quot;20030107&quot;) {<br/>      return &quot;a7:&quot; + 1;<br/>    } else if (d === &quot;Opera&quot; &amp;&amp; c !== &quot;20030107&quot; &amp;&amp; typeof c !== &quot;undefined&quot;) {<br/>      return &quot;a7:&quot; + 1;<br/>    } else {<br/>      return &quot;a7:&quot; + 0;<br/>    }<br/>  } catch (f) {<br/>    return &quot;a7:e&quot;;<br/>  }<br/>}</span></pre><p id="3e15" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 7 is a specific check for Chrome, Safari, and Opera Browsers. Again, a quick look at the Mozilla Developers <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub" rel="noopener ugc nofollow" target="_blank">documentation</a> makes this check pretty easy to understand.</p><blockquote class="ns nt nu"><p id="807b" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The <code class="cx po pp pq ny b">Navigator.productSub</code> read-only property returns the build number of the current browser.</p><p id="322a" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">On IE, this property returns undefined.</p><p id="cec0" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">On Apple Safari and Google Chrome this property always returns <code class="cx po pp pq ny b">20030107</code>. (additonally also on Opera after release v. 15)</p></blockquote><p id="68ca" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 7 of the analyzed VexTrio sample makes use of the fact that Safari, Chrome and Opera return a fixed version number by assuring that if the identified Browser is Chrome, Safari or Opera, the returned property value is indeed the expected version “20030107&quot;. If not, some sort of manipulation is assumed and the check fails with a7:1.</p><p id="9eb4" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 8: CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="ce78" class="ob oc gu ny b bg od oe l of og">function CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE() {<br/>  try {<br/>    var c = DETECT_Browser_Type();<br/>    var d = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    var f = eval.toString().length;<br/>    if (f === 37 &amp;&amp; c !== &quot;Safari&quot; &amp;&amp; c !== &quot;Firefox&quot; &amp;&amp; c !== &quot;Other&quot; &amp;&amp; d === &quot;iOS&quot; &amp;&amp; c !== &quot;Chrome&quot;) {<br/>      return &quot;a8:&quot; + 1;<br/>    } else if (f === 39 &amp;&amp; c !== &quot;Internet Explorer&quot; &amp;&amp; c !== &quot;Other&quot;) {<br/>      return &quot;a8:&quot; + 1;<br/>    } else if (f === 33 &amp;&amp; c !== &quot;Chrome&quot; &amp;&amp; c !== &quot;Opera&quot; &amp;&amp; c !== &quot;Edge&quot; &amp;&amp; c !== &quot;UC Browser&quot; &amp;&amp; c !== &quot;Samsung Browser&quot; &amp;&amp; c !== &quot;Other&quot; &amp;&amp; c !== &quot;Android Browser&quot;) {<br/>      return &quot;a8:&quot; + 1;<br/>    } else {<br/>      return &quot;a8:&quot; + 0;<br/>    }<br/>  } catch (g) {<br/>    return &quot;a8:e&quot;;<br/>  }<br/>}</span></pre><p id="76cb" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 8 is quite an interesting one. It relies on the fact that the eval function used in different browsers, when turned into a string, seems to have different lengths. Apparently, there are 3 different lengths for the eval function which can be associated with known browsers. By making use of the previously discussed UserAgent functions and the length of the eval function string, the check assures that if one of the known lengths for the eval function is identified, the browser and OS are the ones that can be directly related to said length. E.g. if the length of the eval function string is 39, the Browser can only be either Microsoft Explorer or “Other”. If the length is 39 but the browser is not one of the 2, then VexTrio assumes it is not looking at a legitimate visitor.</p><h2 id="3beb" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 9: CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="5f72" class="ob oc gu ny b bg od oe l of og">function CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE() {<br/>  try {<br/>    var c = DETECT_Browser_Type();<br/>    var d;<br/>    try {<br/>      throw &quot;a&quot;;<br/>    } catch (f) {<br/>      try {<br/>        f.toSource();<br/>        d = true;<br/>      } catch (g) {<br/>        d = false;<br/>      }<br/>    }<br/>    if (d &amp;&amp; c !== &quot;Firefox&quot; &amp;&amp; c !== &quot;Other&quot;) {<br/>      return &quot;a9:&quot; + 1;<br/>    } else {<br/>      return &quot;a9:&quot; + 0;<br/>    }<br/>  } catch (h) {<br/>    return &quot;a9:e&quot;;<br/>  }<br/>}</span></pre><p id="226e" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Test a9 (which I named “CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE” for our convenience ^^) is a check that makes use of an obsolete browser function called toSource(). Before its deprecation, this function could be used to convert a function passed as an argument into its source code representation. However, this function is not used by any modern browser anymore. The try/catch statement works in a way that if the function is present, d is set to true, else to false. If d is true but the browser is not Firefox or “Other”, VexTrio assumes something is wrong and the test is failed (a9:1). I am not sure why the Firefox exception is made here. Maybe the toSource() function was supported by Firefox up to very recent versions and so sorting them out too would make a lot of potential users/victims using older Firefox Versions be sorted out.</p><p id="c109" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Anyways, this check is passed for all Browsers that do not implement the function, so all normal browsers should pass the check with a9:0.</p><h2 id="b5fd" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Intermezzo: Two additional helper functions</h2><p id="d966" class="pw-post-body-paragraph mg mh gu mi b mj pr ml mm mn ps mp mq mr pt mt mu mv pu mx my mz pv nb nc nd gn bk">Before we continue with the analysis of VexTrio’s Browser fingerprinting Checks, we need to have a look at two additional helper functions used during the next fingerprinting steps.</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="3bad" class="ob oc gu ny b bg od oe l of og">function HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR() {<br/>  try {<br/>    var c = document.createElement(&quot;canvas&quot;);<br/>    var d = c.getContext(&quot;webgl&quot;);<br/>    var e = d.getExtension(&quot;WEBGL_debug_renderer_info&quot;);<br/>    var f = d.getParameter(e.UNMASKED_VENDOR_WEBGL);<br/>    var g = d.getParameter(e.UNMASKED_RENDERER_WEBGL);<br/>    return [f, g];<br/>  } catch (h) {<br/>    return false;<br/>  }<br/>}</span></pre><p id="4321" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">First up we are looking at a very interesting little trick. It makes use of debug functionalities to receive information on a victim. So let’s understand what we are looking at.</p><p id="ee91" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The first thing the above function does is to create a new DOM element of type “canvas”. A Canvas element in this context is an HTML element that can be manipulated by either the “canvas scripting API” or the “WebGL API” to create graphics and animations on a webpage.</p><p id="5d47" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, after creating that element, if we want to start manipulating the canvas from the JavaScript context, we need to access its context. This can be done by the getContext function. The function used by VexTrio does set the drawing context of the newly created canvas element to “WebGL”.</p><p id="5117" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, the reason for this lies in a certain extension of the WebGL drawing context, called “WEBGL_debug_renderer_info”. This extension of the WebGL API is used for debugging canvas drawings by giving a developer two constant strings representing the current graphics card used to render the website. The constant strings are called UNMASKED_VENDOR_WEBGL and UNMASKED_RENDERER_WEBGL and can be accessed via the getParameter() function of the extension. <br/>In other words, by making use of this method, the above function (and thereby VexTrio) is able to identify the graphics card of the potential victim. We will see the usefulness of this information later on.</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="2489" class="ob oc gu ny b bg od oe l of og">var voiceslist = &quot;&quot;;<br/>function populateVoiceList() {<br/>  try {<br/>    var c = speechSynthesis.getVoices();<br/>    if (c.length !== 0) {<br/>      var d = &quot;&quot;;<br/>      for (var f = 0; f &lt; c.length; f++) {<br/>        d = d + &quot; &quot; + c[f].name;<br/>      }<br/>      voiceslist = d;<br/>    } else {<br/>      setTimeout(function () {<br/>        populateVoiceList();<br/>      }, 5);<br/>    }<br/>  } catch (g) {}<br/>}<br/>populateVoiceList();</span></pre><p id="d988" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The second new helper function is all about speechSynthesis features. The function tries to access the speechSynthesis interface of the web browser to get a list of all available voices, iterates over it, and concatenates all names of all available voices into one string. If the list of voices can not be retrieved immediately, it retries the process after a 5-second timeout, most likely to account for potential loading delays in different web browsers. If any error occurs the function exits silently. Note that the function is directly executed on page load. The voicelist string will be used in a later check.</p><h2 id="787c" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 10: CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="b0fa" class="ob oc gu ny b bg od oe l of og">function CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS() {<br/>  try {<br/>    var c = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    var d = DETECT_Browser_Type();<br/>    var f = HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR();<br/>    if (!f) {<br/>      return &quot;a10:&quot; + 0;<br/>    } else if (c === &quot;iOS&quot; &amp;&amp; f[0].indexOf(&quot;Apple&quot;) === -1 &amp;&amp; f[0].indexOf(&quot;Imagination Technologies&quot;) === -1) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else if (c === &quot;Mac&quot; &amp;&amp; f[0].indexOf(&quot;Intel&quot;) === -1 &amp;&amp; f[0].indexOf(&quot;ATI Technologies&quot;) === -1 &amp;&amp; f[0].indexOf(&quot;NVIDIA Corporation&quot;) === -1 &amp;&amp; f[0].indexOf(&quot;Apple&quot;) === -1) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else if (c === &quot;Android&quot; &amp;&amp; (f[0] === &quot;Google Inc. (NVIDIA)&quot; || f[0] === &quot;Google Inc. (Intel)&quot; || f[0] === &quot;Google Inc. (Google)&quot; || f[0] === &quot;Google Inc.&quot; || f[0].indexOf(&quot;NVIDIA Corporation&quot;) !== -1)) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else if (c === &quot;Windows&quot; &amp;&amp; d === &quot;Edge&quot; &amp;&amp; f[0].indexOf(&quot;Microsoft&quot;) === -1) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else if (c === &quot;Windows&quot; &amp;&amp; (d === &quot;Chrome&quot; || d === &quot;Firefox&quot;) &amp;&amp; f[0].indexOf(&quot;Google Inc&quot;) === -1) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else if (f[0].indexOf(&quot;VMware&quot;) !== -1) {<br/>      return &quot;a10:&quot; + 1;<br/>    } else {<br/>      return &quot;a10:&quot; + 0;<br/>    }<br/>  } catch (g) {<br/>    return &quot;a10:e&quot;;<br/>  }<br/>}</span></pre><p id="bfac" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 10 is the first to make use of the newly introduced helper function that receives graphiccard details via a WebGL debug property. Certain operating systems are usually bound to certain graphics card vendors. So by using the initially discussed functions to identify the OS and Browser from the User-agent string, VexTrio compares the identified operating system to the graphic card vendor. As an example, if the identified OS is Android, the check assures that the graphics card vendor (f[0]) is either “Google Inc. (NVIDIA)”, “Google Inc. (Intel)”, “Google Inc. (Google)”, “Google Inc.” or contains the string “NVIDIA Corporation”. If none of these assumed values is given, the check assumes something is wrong and returns a10:1. Similar checks are done for iOS, Mac and Windows and their respective assumed graphics card vendor values.</p><p id="fe84" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Additionally, before the check is passed, a check for the presence of the string “VMware” in the graphics card vendor value is done, to ensure that the visiting browser is not running inside a VMWare virtual machine. This check is most likely done to evade the prying eyes of malware analysts trying to analyze the VexTrio malware in a virtual environment.</p><h2 id="1475" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 11: CHECK_Webdriver_in_Navigator_Interface</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="3987" class="ob oc gu ny b bg od oe l of og">function CHECK_Webdriver_in_Navigator_Interface() {<br/>  try {<br/>    var c;<br/>    browser = DETECT_Browser_Type();<br/>    os = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    c = &quot;webdriver&quot; in navigator &amp;&amp; navigator.webdriver;<br/>    if (c) {<br/>      return &quot;a11:&quot; + 1;<br/>    } else {<br/>      return &quot;a11:&quot; + 0;<br/>    }<br/>  } catch (d) {<br/>    return &quot;a11:e&quot;;<br/>  }<br/>}</span></pre><p id="8f79" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The next check in VexTrio’s arsenal is rather straightforward. It is probably a web equivalent for the “IsDebuggerPresent” Windows API call commonly used by malicious software to simply ask the system it executes on for the presence of a debugger. To understand the function, let’s first have a look at the Mozilla developer documentation of the navigator.webdriver property.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf pw"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*aXyzVAoLKF2IG2UJkYYM6Q.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*aXyzVAoLKF2IG2UJkYYM6Q.png 640w, https://miro.medium.com/v2/resize:fit:720/1*aXyzVAoLKF2IG2UJkYYM6Q.png 720w, https://miro.medium.com/v2/resize:fit:750/1*aXyzVAoLKF2IG2UJkYYM6Q.png 750w, https://miro.medium.com/v2/resize:fit:786/1*aXyzVAoLKF2IG2UJkYYM6Q.png 786w, https://miro.medium.com/v2/resize:fit:828/1*aXyzVAoLKF2IG2UJkYYM6Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*aXyzVAoLKF2IG2UJkYYM6Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*aXyzVAoLKF2IG2UJkYYM6Q.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="445" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 3: Navigator.webdriver property docu (Source: <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver" rel="noopener ugc nofollow" target="_blank">mozilla.org</a>)</figcaption></figure><p id="5bfd" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">As you can see, the property is a simple boolean value that returns true if the browser is started in conjunction with different flags commonly used in automation (or debugging) scenarios. VexTrio simply asks the browser: “Hey are you running automated?” and if true, the visitor is not legitimate and fails the check (a11:1).</p><h2 id="6f70" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Intermezzo 2: getPermissionStatus function</h2><p id="cfd1" class="pw-post-body-paragraph mg mh gu mi b mj pr ml mm mn ps mp mq mr pt mt mu mv pu mx my mz pv nb nc nd gn bk">The next two checks rely on the set of browser permissions given by the browser to a visited webpage. As you probably know, there are websites with a certain set of features that require additional permissions, like accessing the device&#x27;s microphone, webcam or sending notifications as Pop-Up messages. Most modern browsers have a default behavior on how to handle such permission requests by a webpage. Here is an example of the default permissions given to the website “medium.com” by Google Chrome.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf px"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*0onp55jO8qvCM0TjjoxQ7A.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*0onp55jO8qvCM0TjjoxQ7A.png 640w, https://miro.medium.com/v2/resize:fit:720/1*0onp55jO8qvCM0TjjoxQ7A.png 720w, https://miro.medium.com/v2/resize:fit:750/1*0onp55jO8qvCM0TjjoxQ7A.png 750w, https://miro.medium.com/v2/resize:fit:786/1*0onp55jO8qvCM0TjjoxQ7A.png 786w, https://miro.medium.com/v2/resize:fit:828/1*0onp55jO8qvCM0TjjoxQ7A.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*0onp55jO8qvCM0TjjoxQ7A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*0onp55jO8qvCM0TjjoxQ7A.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="642" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 4: Partial set of browser permissions given to medium.com by Google Chrome</figcaption></figure><p id="dc98" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">As you can see, most permissions are set to “Ask” by default, meaning if the website requests permission, the browser will ask the user via a Pop-Up, if the webpage should be allowed to get the required permission or not. And the next thing VexTrio does is to work with those permissions.</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="5a11" class="ob oc gu ny b bg od oe l of og">var permissions = false;<br/>getPermissionStatus();<br/>function getPermissionStatus() {<br/>  try {<br/>    browser = DETECT_Browser_Type();<br/>    if (browser !== &quot;Samsung Browser&quot; &amp;&amp; browser !== &quot;Firefox&quot;) {<br/>      navigator.permissions.query({<br/>        name: &quot;notifications&quot;<br/>      }).then(function (c) {<br/>        if (Notification.permission === &quot;denied&quot; &amp;&amp; c.state === &quot;prompt&quot;) {<br/>          permissions = true;<br/>        } else {<br/>          permissions = false;<br/>        }<br/>      });<br/>      return permissions;<br/>    }<br/>  } catch (c) {}<br/>}</span></pre><p id="4052" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">More specifically, if VexTrio identifies the Browser as not being Firefox and not being Samsung Browser, it queries the “notifications” permission using the “navigator.permissions.query()” method. Now, instead of returning the result straight away, the query() method returns a “promise” object. A promise object is an object that allows the use of asynchronous operations in JavaScript. Basically, you define an object before knowing that the object will have a result and what the result will be. Then you can make use of “.then” on this promise to define actions that will be taken once the asynchronous operation has finished, depending on the state it has finished in. The possible result states to handle are “fulfilled” or “rejected”. However, VexTrio does only define an action for a successful query operation (fulfilled). In case of a fulfilled query, the result will be stored in the “c” variable. In the case of this function, “c” is going to be a PermissionStatus object, which has the following properties:</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf py"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*6dOpfyfGcnd7CM5t93DyBw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*6dOpfyfGcnd7CM5t93DyBw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*6dOpfyfGcnd7CM5t93DyBw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*6dOpfyfGcnd7CM5t93DyBw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*6dOpfyfGcnd7CM5t93DyBw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*6dOpfyfGcnd7CM5t93DyBw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*6dOpfyfGcnd7CM5t93DyBw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*6dOpfyfGcnd7CM5t93DyBw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="474" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 5: Properties of the PermissionStatus object (Source: <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus" rel="noopener ugc nofollow" target="_blank">mozzilla.org</a>)</figcaption></figure><p id="867f" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">This object will then be used together with the return value of “Notifications.permission” to assign a boolean value to the “permissions” variable. The following if-statement is responsible for this assignment:</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="7f4f" class="ob oc gu ny b bg od oe l of og">if (Notification.permission === &quot;denied&quot; &amp;&amp; c.state === &quot;prompt&quot;) {<br/>          permissions = true;<br/>        } else {<br/>          permissions = false;</span></pre><p id="dae1" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now, I am still not 100% certain but I believe that the condition which sets the permissions variable to true is only ever met if something is odd about the relation between the permission property of the Notification object and the state of the result of the query for the PermissionStatus object. Under normal circumstances one of the following should be the case:</p><ul class=""><li id="2a27" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd op oi oj bk">Notification.permission === “default” &amp;&amp; c.state === “prompt”</li><li id="f008" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">Notification.permission === “denied” &amp;&amp; c.state === “denied”</li><li id="1698" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">Notification.permission === “granted” &amp;&amp; c.state === “granted”</li></ul><p id="bb7a" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">There seems to be no legitimate way where a Chromium-based browser has the “denied” &amp;&amp; “prompt” combination set.</p><h2 id="f231" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 12: CHECK_Permission_DENIED_in_State_Prompt</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="bc96" class="ob oc gu ny b bg od oe l of og">function CHECK_Permission_DENIED_in_State_Prompt() {<br/>  try {<br/>    if (permissions) {<br/>      return &quot;a12:&quot; + 1;<br/>    } else {<br/>      return &quot;a12:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a12:e&quot;;<br/>  }<br/>}</span></pre><p id="434f" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Consequently, the next Check done by VexTrio fails exactly when “permissions” was set to true.</p><h2 id="715b" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 13: DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="85c8" class="ob oc gu ny b bg od oe l of og">function DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD() {<br/>  try {<br/>    var c = window.navigator.permissions;<br/>    if (c.query.toString().replace(/\s+/g, &quot;&quot;) !== &quot;function query() { [native code] }&quot;.replace(/\s+/g, &quot;&quot;)) {<br/>      return &quot;a13:&quot; + 1;<br/>    }<br/>    if (c.query.toString.toString().replace(/\s+/g, &quot;&quot;) !== &quot;function toString() { [native code] }&quot;.replace(/\s+/g, &quot;&quot;)) {<br/>      return &quot;a13:&quot; + 1;<br/>    }<br/>    if (c.query.toString.hasOwnProperty(&quot;[[Handler]]&quot;) &amp;&amp; c.query.toString.hasOwnProperty(&quot;[[Target]]&quot;) &amp;&amp; c.query.toString.hasOwnProperty(&quot;[[IsRevoked]]&quot;)) {<br/>      return &quot;a13:&quot; + 1;<br/>    }<br/>    if (c.hasOwnProperty(&quot;query&quot;)) {<br/>      return &quot;a13:&quot; + 1;<br/>    }<br/>    return &quot;a13:&quot; + 0;<br/>  } catch (d) {<br/>    return &quot;a13:e&quot;;<br/>  }<br/>}</span></pre><p id="3a38" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The next check again involves browser permissions, however, in this case VexTrio is more interested in the code implementation behind the involved functions. First it gets the permissions object of the current window. Then it turns the previously discussed “query” method into a string representation using the .toString() method. This method should return a string representation of the object. Interestingly enough, it rather returns the following string: “function toString() { [native code] }”. I replicated this behavior from the web developer console:</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div class="ne nf pz"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 1100w, https://miro.medium.com/v2/resize:fit:804/format:webp/1*K9-eVxv2ZK7f-UF5ucvYzA.png 804w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 402px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*K9-eVxv2ZK7f-UF5ucvYzA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*K9-eVxv2ZK7f-UF5ucvYzA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*K9-eVxv2ZK7f-UF5ucvYzA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*K9-eVxv2ZK7f-UF5ucvYzA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*K9-eVxv2ZK7f-UF5ucvYzA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*K9-eVxv2ZK7f-UF5ucvYzA.png 1100w, https://miro.medium.com/v2/resize:fit:804/1*K9-eVxv2ZK7f-UF5ucvYzA.png 804w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 402px"/><img alt="" class="bh ln nr c" width="402" height="61" loading="lazy" role="presentation"/></picture></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 6: native code result</figcaption></figure><p id="ae69" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">This check is likely done to check that the query function has not been manipulated. To cite the <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" rel="noopener ugc nofollow" target="_blank">official documentation</a>: “If the <code class="cx po pp pq ny b">toString()</code> method is called on built-in function objects, a function created by <code class="cx po pp pq ny b"><a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="noopener ugc nofollow" target="_blank">Function.prototype.bind()</a></code>, or other non-JavaScript functions, then <code class="cx po pp pq ny b">toString()</code> returns a <em class="nv">native function string</em>”.</p><p id="ea59" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The same is done with the “toString()” function itself. Under normal browser conditions the same “toString(){ [native code] }” result is expected. If any of the 2 toString() methods do not have the expected result, the check is failed (a13:1).</p><p id="4043" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Additionally, a second method is used to check for the ownership of certain properties. To cite the documentation:</p><blockquote class="ns nt nu"><p id="7f48" class="mg mh nv mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The <code class="cx po pp pq ny b">hasOwnProperty()</code> method returns <code class="cx po pp pq ny b">true</code> if the specified property is a direct property of the object — even if the value is <code class="cx po pp pq ny b">null</code> or <code class="cx po pp pq ny b">undefined</code>. The method returns <code class="cx po pp pq ny b">false</code> if the property is inherited, or has not been declared at all.</p></blockquote><p id="531e" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The fingerprinting check done now is to assure that the properties “[[Handler]]”, “[[Target]]” and “[[IsRevoked]]” of the .toString() value of the query method are not owned by the object itself. The same is checked for the query() function itself in its relation to the permissions object.</p><p id="e063" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">I must admit that the reasoning for this check is not completely clear to me as it involves deep knowledge of how the methods converted into strings in a browser javascript context behave. However, it is safe to assume that this is done to assure that all the before-mentioned properties are as expected and nothing indicates that some sort of browser automation or browser virtualization has intervened with the native properties and the browser is a “legitimate visitor/victim” for VexTrio. Failing these checks would lead to the expected return value “a13:1&quot; indicating that the visiting browser is not to be trusted by VexTrio.</p><h2 id="f861" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 14: CHECK_SPOOKYOSCHECK_likely_Devtools</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="a154" class="ob oc gu ny b bg od oe l of og">function CHECK_SPOOKYOSCHECK_likely_Devtools() {<br/>  try {<br/>    os = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>    browser = DETECT_Browser_Type();<br/>    if (browser === &quot;Chrome&quot; &amp;&amp; os !== &quot;iOS&quot;) {<br/>      var c = 0;<br/>      var d = /./;<br/>      d.toString = function () {<br/>        c++;<br/>        return &quot;spooky&quot;;<br/>      };<br/>      console.debug(d);<br/>      if (c &gt; 1) {<br/>        return &quot;a14:&quot; + 1;<br/>      } else {<br/>        return &quot;a14:&quot; + 0;<br/>      }<br/>    } else {<br/>      return &quot;a14:&quot; + 0;<br/>    }<br/>  } catch (f) {<br/>    return &quot;a14:e&quot;;<br/>  }<br/>}</span></pre><p id="ab6f" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The “Spooky Check” is probably one of those that caused me the most headaches when analyzing VexTrio’s fingerprinting methods. And until now, I can only really explain it by making an assumption.</p><p id="7c7a" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The check targets the Google Chrome browser under the condition that it is not installed on an iOS device. In case this is true, the check creates a regular expression object with the value “/./”. The toString method of this object is overridden to increment a counter c each time the toString method is called and then returns a string “spooky”.</p><p id="4156" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The object d is then logged to the console using console.debug(d). The trick here is that the console.debug() function makes use of the overwritten toString() function to print the object to the console. By doing so, the counter c is increased by 1. However, if the counter is increased by more than 1, VexTrio assumes foul play and the check is failed. Sadly I don’t have an explanation under which circumstances the counter should be increased by more than one. I assume that this could happen in some sort of virtual/coding environment, or if someone hooks the debug function for some additional functionality. I would appreciate it if someone with more JavaScript and browser automation knowledge would step up to explain it. I will make sure to add the missing information to this blog post if available.</p><p id="2a95" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">If the toString function is not called more than once, or if the visitor is not using Chrome or is using Chrome under iOS, the test is passed.</p><h2 id="8812" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 15: DETECT_Phantom_in_Window</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="2993" class="ob oc gu ny b bg od oe l of og">function DETECT_Phantom_in_Window() {<br/>  try {<br/>    function c() {<br/>      return [&quot;callPhantom&quot; in window, &quot;_phantom&quot; in window, &quot;phantom&quot; in window];<br/>    }<br/>    result = c().some(function (d) {<br/>      return d;<br/>    });<br/>    if (result) {<br/>      return &quot;a15:&quot; + 1;<br/>    } else {<br/>      return &quot;a15:&quot; + 0;<br/>    }<br/>  } catch (d) {<br/>    return &quot;a15:e&quot;;<br/>  }<br/>}</span></pre><p id="82a4" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Luckily we continue with a way simpler check, which is to make sure that the VexTrio code is not executed in a <a class="af nw" href="https://phantomjs.org/" rel="noopener ugc nofollow" target="_blank">phantomjs</a> context. PhantomJS is a headless web browser scriptable with JavaScript. To make sure VexTrio is not executed in the context of phantomjs, the code checks if the own DOM contains any of the following properties:</p><ul class=""><li id="e35a" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd op oi oj bk">callPhantom: A method that used to be provided by PhantomJS for invoking native code from the script.</li><li id="6e93" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">_phantom: An older, now deprecated property that was once used by PhantomJS.</li><li id="d74a" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">phantom: Represents the PhantomJS scripting API.</li></ul><p id="20aa" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">If any of these is present, the boolean value “true” will be logged to the returned array. Else the value “false” is logged. Then the .some() function is used to execute a function in case any of the returned values is true. In this case, the check fails as VexTrio registered obvious signs of emulation using phantomjs.<br/>Else the check is passed (a15:0)</p><h2 id="d87c" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 16: DETECT_BROWSERAUTOMATION_via_domElements</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="9d67" class="ob oc gu ny b bg od oe l of og">function DETECT_BROWSERAUTOMATION_via_domElements() {<br/>  try {<br/>    var c = [&quot;__webdriver_evaluate&quot;, &quot;__selenium_evaluate&quot;, &quot;__webdriver_script_function&quot;, &quot;__webdriver_script_func&quot;, &quot;__webdriver_script_fn&quot;, &quot;__fxdriver_evaluate&quot;, &quot;__driver_unwrapped&quot;, &quot;__webdriver_unwrapped&quot;, &quot;__driver_evaluate&quot;, &quot;__selenium_unwrapped&quot;, &quot;__fxdriver_unwrapped&quot;];<br/>    var d = [&quot;webdriver&quot;, &quot;_phantom&quot;, &quot;__nightmare&quot;, &quot;_selenium&quot;, &quot;callPhantom&quot;, &quot;callSelenium&quot;, &quot;_Selenium_IDE_Recorder&quot;, &quot;__stopAllTimers&quot;];<br/>    for (var f in d) {<br/>      var g = d[f];<br/>      if (window[g]) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>    }<br/>    ;<br/>    for (var h in c) {<br/>      var i = c[h];<br/>      if (window.document[i]) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>    }<br/>    ;<br/>    try {<br/>      if (window.external &amp;&amp; window.external.toString() &amp;&amp; window.external.toString().indexOf(&quot;Sequentum&quot;) != -1) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>      if (window.document.documentElement.getAttribute(&quot;selenium&quot;)) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>      if (window.document.documentElement.getAttribute(&quot;webdriver&quot;)) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>      if (window.document.documentElement.getAttribute(&quot;driver&quot;)) {<br/>        return &quot;a16:&quot; + 1;<br/>      }<br/>    } catch (j) {<br/>      &quot;a16:&quot; + 0;<br/>    }<br/>    return &quot;a16:&quot; + 0;<br/>  } catch (k) {<br/>    return &quot;a16:e&quot;;<br/>  }<br/>}</span></pre><p id="0837" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The next Fingerprinting function checks for the existence of all kinds of window and dom properties which could indicate the use of browser automation. This includes checks for <a class="af nw" href="https://www.selenium.dev/documentation/webdriver/" rel="noopener ugc nofollow" target="_blank">Selenium</a>, <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/WebDriver" rel="noopener ugc nofollow" target="_blank">Webdriver</a>, <a class="af nw" href="https://phantomjs.org" rel="noopener ugc nofollow" target="_blank">PhantomJS</a> and<a class="af nw" href="https://github.com/segment-boneyard/nightmare" rel="noopener ugc nofollow" target="_blank">Nightmare</a>. To do so, the first step is to check if any of the values from the array:</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="652c" class="ob oc gu ny b bg od oe l of og">[&quot;webdriver&quot;, &quot;_phantom&quot;, &quot;__nightmare&quot;, &quot;_selenium&quot;, &quot;callPhantom&quot;, &quot;callSelenium&quot;, &quot;_Selenium_IDE_Recorder&quot;, &quot;__stopAllTimers&quot;];</span></pre><p id="c908" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">are present as window properties. If so, the check has failed because all these are clear signs for automation. One could ask themselves why Check 15 is done after all since all but one value for PhantomJS detection is also checked in Check 16. But I guess someone just copy-pasted code here without really thinking about it.</p><p id="67cb" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Then, the check continues with another array of “bad strings”:</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="e535" class="ob oc gu ny b bg od oe l of og">[&quot;__webdriver_evaluate&quot;, &quot;__selenium_evaluate&quot;, &quot;__webdriver_script_function&quot;, &quot;__webdriver_script_func&quot;, &quot;__webdriver_script_fn&quot;, &quot;__fxdriver_evaluate&quot;, &quot;__driver_unwrapped&quot;, &quot;__webdriver_unwrapped&quot;, &quot;__driver_evaluate&quot;, &quot;__selenium_unwrapped&quot;, &quot;__fxdriver_unwrapped&quot;];</span></pre><p id="6937" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">this time making sure that none of these appear as a property of the DOM copy saved in the windows.document object. Again, all values are associated with the previously mentioned automation tools. If any exists, the check fails and a16:1 is returned.</p><p id="7303" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">After doing these rather simple string-based checks, 4 more checks are done. <br/>The first one checks for the existence of a property of window.external which when turned into a string contains the word: “Sequentum”. This is likely an attempt to block automation solutions and web scraping by <a class="af nw" href="https://www.sequentum.com/" rel="noopener ugc nofollow" target="_blank">https://www.sequentum.com/</a>.</p><p id="37e5" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Then we three see checks for the values “selenium”, “webdriver” and “driver” respectively. For each value, the fingerprinting check assures that it is not given as an attribute of the web page&#x27;s root element (normally the first &lt;html&gt; tag). An example that would get detected is:</p><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="0798" class="ob oc gu ny b bg od oe l of og">&lt;!DOCTYPE html&gt;<br/>&lt;html lang=&quot;en&quot; driver=&quot;true&quot;&gt;<br/>&lt;head&gt;<br/>    &lt;title&gt;Sample Page with Driver Attribute&lt;/title&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<br/>    &lt;header&gt;<br/>        &lt;h1&gt;Welcome to My Page&lt;/h1&gt;<br/>    &lt;/header&gt;<br/>    &lt;main&gt;<br/>        &lt;p&gt;This is a simple HTML page to demonstrate the &quot;driver&quot; attribute on the root element.&lt;/p&gt;<br/>    &lt;/main&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;</span></pre><p id="a120" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Again, if any of the attributes is present the check is failed (a16:1). <br/>If none of the previously described checks fail, the check is passed.</p><p id="7fce" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">All parts of this check are well known. Some mentions:</p><ul class=""><li id="b516" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd op oi oj bk"><a class="af nw" href="https://medium.com/@browserscan/browser-fingerprints-101-automation-detection-322ac81156ae" rel="noopener">https://medium.com/@browserscan/browser-fingerprints-101-automation-detection-322ac81156ae</a></li><li id="d6e1" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk"><a class="af nw" href="https://chris124567.github.io/2020-07-22-reverse-engineering-distil-networks-antibot-javascript/" rel="noopener ugc nofollow" target="_blank">https://chris124567.github.io/2020-07-22-reverse-engineering-distil-networks-antibot-javascript/</a></li></ul><h2 id="382f" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 17: DETECT_PHANTOMAS</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="7dcf" class="ob oc gu ny b bg od oe l of og">function DETECT_PHANTOMAS() {<br/>  try {<br/>    function c() {<br/>      return [&quot;__phantomas&quot; in window];<br/>    }<br/>    result = c().some(function (d) {<br/>      return d;<br/>    });<br/>    if (result) {<br/>      return &quot;a17:&quot; + 1;<br/>    } else {<br/>      return &quot;a17:&quot; + 0;<br/>    }<br/>  } catch (d) {<br/>    return &quot;a17:e&quot;;<br/>  }<br/>}</span></pre><p id="60b9" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Well, 3rd time is a charm. The same method as Check15 and Check16 is used to check for the existence of the string “__phantomas” as a window property. If yes the check is failed, if no it is passed.<br/>This is a detection method of the <a class="af nw" href="https://github.com/macbre/phantomas" rel="noopener ugc nofollow" target="_blank">phantomas</a> tool.</p><h2 id="970b" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 18: DETECT_Selenium_DOM_based</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="4383" class="ob oc gu ny b bg od oe l of og">function DETECT_Selenium_DOM_based() {<br/>  try {<br/>    for (var c in window.document) {<br/>      if (c.match(/\$[a-z]dc_/) &amp;&amp; window.document[c].cache_) {<br/>        return &quot;a18:&quot; + 1;<br/>      }<br/>    }<br/>    return &quot;a18:&quot; + 0;<br/>  } catch (d) {<br/>    return &quot;a18:e&quot;;<br/>  }<br/>}</span></pre><p id="9662" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">This Check was a bit more difficult to understand, however this mainly results from the regular expression being used and my lack of knowledge of what it could be searching for. The overall functionality however is quite simple. VexTrio uses a regular expression to search over all properties of the window.document. If the name of the property matches the regex and additionally, the property has a subproperty .cache_ then the check is failed. (This second part of the check hints that the searched property is assumed to be an object itself.)</p><p id="47f0" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Now the difficulty is to understand what the RegEx is actually looking for. <br/>The RegEx matches on strings that start with a “$” sign, followed by any lowercase letter a-z, followed by “dc_”.</p><p id="4207" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Well, I haven’t encountered a real mention of this regular expression in the context of browser fingerprinting. I am sure somewhere out there is the answer to this secret, but Google is not the best search engine to search regular expressions with.<br/>Anyhow, I asked some people with more knowledge of JavaScript and they suggested it is most likely another method to detect the Selenium browser automation toolkit.</p><h2 id="c47a" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 19: DETECT_NodeJS_Buffer</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="9a7f" class="ob oc gu ny b bg od oe l of og">function DETECT_NodeJS_Buffer() {<br/>  try {<br/>    if (window.Buffer !== undefined) {<br/>      return &quot;a19:&quot; + 1;<br/>    } else {<br/>      return &quot;a19:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a19:e&quot;;<br/>  }<br/>}</span></pre><p id="d5f3" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 19 is straightforward. If the window.Buffer property is defined, the check is failed and the visitor is not legitimate in the eyes of VexTrio.</p><p id="82b8" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Googling for the window.Buffer in correlation to JavaScript returns many results hinting at the NodeJS framework. I, therefore, believe that this Check aims to detect the NodeJS framework and visitors using NodeJS to open the VexTrio landing page, hinting at researchers, browser automation or webscraping frameworks making use of NodeJS.</p><h2 id="98e5" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 20: DETECT_Chromium_based_automation_driver</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="f022" class="ob oc gu ny b bg od oe l of og">function DETECT_Chromium_based_automation_driver() {<br/>  try {<br/>    if (window.domAutomation || window.domAutomationController) {<br/>      return &quot;a20:&quot; + 1;<br/>    } else {<br/>      return &quot;a20:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a20:e&quot;;<br/>  }<br/>}</span></pre><p id="fd05" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Check 20 detects the presence of a webdriver by checking for the existence of the window.domAutomation or the window.domAutomationController properties. If any of these two is present the browser is likely automated and the check is failed, else it is passed (a20:0).</p><h2 id="115c" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 21: CHECK_setTimeout_Integrity &amp;&amp; Check 22: CHECK_setInterval_Integrity</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="bfb5" class="ob oc gu ny b bg od oe l of og">function CHECK_setTimeout_Integrity() {<br/>  try {<br/>    if (setTimeout.toString().replace(/\s+/g, &quot;&quot;) !== &quot;function setTimeout() { [native code] }&quot;.replace(/\s/g, &quot;&quot;)) {<br/>      return &quot;a21:&quot; + 1;<br/>    } else {<br/>      return &quot;a21:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a21:e&quot;;<br/>  }<br/>}<br/><br/>function CHECK_setInterval_Integrity() {<br/>  try {<br/>    if (setInterval.toString().replace(/\s+/g, &quot;&quot;) !== &quot;function setInterval() { [native code] }&quot;.replace(/\s/g, &quot;&quot;)) {<br/>      return &quot;a22:&quot; + 1;<br/>    } else {<br/>      return &quot;a22:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a22:e&quot;;<br/>  }<br/>}</span></pre><p id="85e5" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Another check is based on the toString() method as described in Check13. This time it is used to check that the setTimeout function is not manipulated. This would likely detect any virtualization solution or automation framework that fiddles with the setTimout() function.</p><p id="f27a" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">The same is also done with the setInterval function in Check 22.</p><p id="260e" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">If any of the functions does not return the expected { native code } string, the check is failed.</p><h2 id="2ab5" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 23: CHECK_XMLHTTPRequest_1 and Check 24: CHECK_XMLHTTPRequest_2</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="0cc9" class="ob oc gu ny b bg od oe l of og">function CHECK_XMLHTTPRequest_1() {<br/>  try {<br/>    var c = &quot;kl&quot;;<br/>    var f = &quot;IsCO&quot;;<br/>    var g = &quot;RSRequest&quot;;<br/>    var h = c + f + g;<br/>    if (window.XMLHttpRequest.prototype.open.toString().indexOf(h) !== -1) {<br/>      return &quot;a42:&quot; + 1;<br/>    } else {<br/>      return &quot;a42:&quot; + 0;<br/>    }<br/>  } catch (i) {<br/>    return &quot;a42:e&quot;;<br/>  }<br/>}<br/>function CHECK_XMLHTTPRequest_2() {<br/>  try {<br/>    var c = &quot;klI&quot;;<br/>    var d = &quot;sCOR&quot;;<br/>    var f = &quot;SRequest&quot;;<br/>    var g = c + d + f;<br/>    if (window.XMLHttpRequest.prototype.send.toString().indexOf(g) !== -1) {<br/>      return &quot;a43:&quot; + 1;<br/>    } else {<br/>      return &quot;a43:&quot; + 0;<br/>    }<br/>  } catch (h) {<br/>    return &quot;a43:e&quot;;<br/>  }<br/>}</span></pre><p id="9126" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">These next two checks involve the handling of XMLHttpRequests. More specifically, they ensure that the XMLHttpRequests’ open() and send() methods do not contain the value “klISCORSRequest” when turned into a string. Now, while I can tell you that <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" rel="noopener ugc nofollow" target="_blank">XMLHttpRequests</a> are a way of loading WebContent dynamically on an already loaded page. I can also tell you that the send() method is used to send a request to a server, while the <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open" rel="noopener ugc nofollow" target="_blank">open()</a> method is used to initialize or reopen a request. I can tell you that CORS is short for <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" rel="noopener ugc nofollow" target="_blank">Cross-Origin Resource Sharing</a> and has something to do with how and if servers are allowed to access content from external HTTP requests. What I sadly can’t tell you is where the “klISCORSRequest” property is used. Googling the term leads to zero results. The official documentation of the <a class="af nw" href="https://fetch.spec.whatwg.org/#cors-protocol" rel="noopener ugc nofollow" target="_blank">CORS protocol</a> and <a class="af nw" href="https://xhr.spec.whatwg.org/" rel="noopener ugc nofollow" target="_blank">XMLHttpRequests</a> have no reference to it as well. The only sure thing is that if “klISCORSRequest” is encountered in the properties of the XMLHttpRequest send() and open() methods, then VexTrio does not like it. The corresponding check is failed and a42:1/a43:1 is returned.</p><p id="d51c" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk"><em class="nv">Sidenote: As you probably noticed, VexTrio suddenly stops to count the checks in numerical order at this point. Instead of continuing with checks 23 and 24, VexTrio uses checks 42 and 43. For me this is an indication that those fingerprinting checks are most likely copy-pasted from an external source. We will get back to this in the Conclusion section of this article.</em></p><h2 id="fa12" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 25: CHECK_UserAgent_not_automation</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="d514" class="ob oc gu ny b bg od oe l of og">function CHECK_UserAgent_not_automation() {<br/>  try {<br/>    var c = &quot;phantomjs&quot;;<br/>    var d = &quot;headless&quot;;<br/>    var f = &quot;avira&quot;;<br/>    var g = &quot;googleweblight&quot;;<br/>    var h = navigator.userAgent.toLowerCase();<br/>    if (h.indexOf(c) !== -1 || h.indexOf(d) !== -1 || h.indexOf(f) !== -1 || h.indexOf(g) !== -1) {<br/>      return &quot;a60:&quot; + 1;<br/>    } else {<br/>      return &quot;a60:&quot; + 0;<br/>    }<br/>  } catch (i) {<br/>    return &quot;a60:e&quot;;<br/>  }<br/>}</span></pre><p id="06d8" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Another of those checks that could have easily been integrated into previous checks working with the victim’s web-requests UserAgent. <br/>This time, VexTrio makes sure that none of the strings “phantomjs”, “headless”, “avira” and “googleweblight” are found in it.</p><p id="e5b2" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Hereby</p><ul class=""><li id="25c6" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd op oi oj bk">phantomjs: Would indicate browser automation using PhantomJS</li><li id="ea98" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">headless: Would indicate a browser being run in headless mode (so without any User UI, which is a common case in browser automation</li><li id="8f59" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">avira: Would indicate a webrequest by the known security vendor Avira. My working theory is that a browser using Avira’s security plugins might be sending such requests.</li><li id="ef97" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd op oi oj bk">googleweblight: A check for the <a class="af nw" href="https://en.wikipedia.org/wiki/Google_Web_Light" rel="noopener ugc nofollow" target="_blank">GoogleWebLight</a> proxy service (Discontinued in 2022). This check is likely completely useless.</li></ul><p id="d965" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">If any of those strings are encountered in the UserAgent, check 25 (60) is failed, returning a60:1, if the check is passed, the function returns a60:0.</p><h2 id="ab6e" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 26: CHECK_STACKTRACE_Behavior</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="8934" class="ob oc gu ny b bg od oe l of og">function CHECK_STACKTRACE_Behavior() {<br/>  var c;<br/>  var d;<br/>  try {<br/>    document.createElement(0);<br/>  } catch (e) {<br/>    try {<br/>      d = e.stack.split(&quot;\n&quot;);<br/>      c = d.length &gt;= 2 ? !!d[1].match(/Ob[cej]{3}t\.a[lp]{3}y[\(&lt; ]{3}an[oynm]{5}us&gt;/) : true;<br/>    } catch (f) {}<br/>    if (c) {<br/>      return &quot;a78:&quot; + 1;<br/>    } else {<br/>      return &quot;a78:&quot; + 0;<br/>    }<br/>  }<br/>}</span></pre><p id="b3a0" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">This Check is pretty cool from a technical standpoint. It is a way to detect <a class="af nw" href="https://github.com/berstend/puppeteer-extra" rel="noopener ugc nofollow" target="_blank">Puppeter with the extra-stealth plugi</a>n, more or less directly from a Github Issue: <br/><a class="af nw" href="https://github.com/berstend/puppeteer-extra/issues/318#issuecomment-699700974" rel="noopener ugc nofollow" target="_blank">https://github.com/berstend/puppeteer-extra/issues/318#issuecomment-699700974</a> <br/>which has since been fixed.<br/>Basically, the check works as follows:</p><ol class=""><li id="908a" class="mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd oh oi oj bk">An intentionally erroneous document.createElement() call is made.<br/>By passing an Integer as the parameter where createElement expects a string, the function runs into an error.</li><li id="1a53" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">The first error routine is used to catch the error and evaluate the Stack trace which normally comes included when a browser runs into a JavaScript error. The stacktrace is split into lines. Then, if there are more than two lines, the second line is checked for a match on the RegEx “/Ob[cej]{3}t\.a[lp]{3}y[\(&lt; ]{3}an[oynm]{5}us&gt;/” <br/>This does exactly match on errors returned where the Stack has been manipulated by the above-mentioned Plugin.</li><li id="ffae" class="mg mh gu mi b mj ok ml mm mn ol mp mq mr om mt mu mv on mx my mz oo nb nc nd oh oi oj bk">If the RegEx does match under the condition that more than 2 lines of Stacktrace are returned, the fingerprint did result in the discovery of an automation and the test is failed (a78:1), else it is passed.</li></ol><p id="ef3b" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">I believe it’s one of the most interesting checks in VexTrio’s arsenal. Using Stacktraces to identify browser automation by intentionally provoking an error is something to keep in mind.</p><h2 id="6990" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 27: CHECK_NumberofLogicalProcessors_IOS</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="060b" class="ob oc gu ny b bg od oe l of og">function CHECK_NumberofLogicalProcessors_IOS() {<br/>  try {<br/>    if (CHECK_DEVICE_IN_USERAGENT_STRING() === &quot;iOS&quot; &amp;&amp; window.navigator.hardwareConcurrency !== undefined &amp;&amp; window.navigator.hardwareConcurrency &gt; 4) {<br/>      return &quot;a86:&quot; + 1;<br/>    } else {<br/>      return &quot;a86:&quot; + 0;<br/>    }<br/>  } catch (c) {<br/>    return &quot;a86:e&quot;;<br/>  }<br/>}</span></pre><p id="d3df" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Let’s get back to some more simple checks. Check 27 is a fingerprint-based on the number of logical processors. If the device is a device making use of the iOS operating system and the <a class="af nw" href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency" rel="noopener ugc nofollow" target="_blank">window.navigator.hardwareConcurrency</a> property is defined, it is not allowed to return a value bigger than 4. According to my research, ever since the A11 Apple processor, likely all iPhones from the iPhone 8 onwards have 6 and more logical processors. Oddly enough the iPhone 8 was released in the same year in which Safari dropped support for the hardwareConcurrency() method. So while I initially hoped that this check would prevent some iOS users from passing as legitimate, I assume that since the iPhone 8 attempting to print a Safari User this way would most likely result in them still getting passed on as victims, as the hardwareConcurrency() method likely returns undefined.<br/>At least if you are using Chrome on iOS with an iPhone 8 onwards you are most likely falling through and getting sorted out for the more malicious payloads.</p><p id="e6ff" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Anyways, if you pass the check and look like innocent prey, the function returns a86:0, else it’s a86:1.</p><h2 id="3ab7" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 28: CHECK_Browser_VoiceList</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="5f8a" class="ob oc gu ny b bg od oe l of og">function CHECK_Browser_VoiceList() {<br/>  var c = CHECK_DEVICE_IN_USERAGENT_STRING();<br/>  if (voiceslist.toLowerCase().indexOf(&quot;lekha&quot;) !== -1 &amp;&amp; (c.indexOf(&quot;Win&quot;) !== -1 || c === &quot;Kaios&quot; || c === &quot;Android&quot; || c === &quot;Linux&quot;)) {<br/>    return &quot;a89:&quot; + 1;<br/>  } else {<br/>    return &quot;a89:&quot; + 0;<br/>  }<br/>}</span></pre><p id="f6bd" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Remember that voicelist variable VexTrio filled some checks ago? Well, here it will be used again. In its essence, there seems to be a voicepack for browsers which is called “lekha”. It is only used under Apple devices and if the user agent says you are a Windows, Kaios, Linux or Android user, encountering it in the voicelist means something is wrong. Hence if this voicepack is available and you are on any of the aforementioned non-apple devices, you fail the check (a89:1). Else you pass (a89:0).</p><h2 id="541b" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Check 29: CHECK_VirtualBox</h2><pre class="nh ni nj nk nl nx ny nz bp oa bb bk"><span id="0ecb" class="ob oc gu ny b bg od oe l of og">function CHECK_VirtualBox() {<br/>  try {<br/>    var c = HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR();<br/>    if (c[1].indexOf(&quot;VirtualBox&quot;) !== -1) {<br/>      return &quot;a92:1&quot;;<br/>    } else {<br/>      return &quot;a92:0&quot;;<br/>    }<br/>  } catch (d) {<br/>    return &quot;a92:e&quot;;<br/>  }<br/>}</span></pre><p id="2a9c" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">We finally made it to our last check. It makes use of the previously mentioned WebGL debugging values trick again to get the Graphiccard Renderer and Vendor. The value for the Graphiccard Vendor is then checked for occurrences of the string “VirtualBox”. If it is found VexTrio assumes that it is opened in a browser that is run from a virtual machine. And this is enough for the visitor to not look innocent enough to fall victim to their more fraudulent payloads. Hence the check is failed (a92:1). If “VirtualBox” is not discovered in the graphics card vendor string, the check is passed (a92:0).</p><h2 id="3f1f" class="oq oc gu bf or os ot dy ou ov ow ea ox mr oy oz pa mv pb pc pd mz pe pf pg ph bk">Conclusion</h2><p id="a9d8" class="pw-post-body-paragraph mg mh gu mi b mj pr ml mm mn ps mp mq mr pt mt mu mv pu mx my mz pv nb nc nd gn bk">In summary, VexTrio makes use of 29 different functions to check the legitimacy of a visitor/victim who visits an infected webpage. A central function which is given at the beginning of this article is then responsible for evaluating the fingerprinting results. If any of the checks described before had a return value ending with a “:1”, the result of that analysis is a0:1. Else it&#x27;s a0:0 if all checks were passed or a0:e if the analysis function failed to execute properly. The final result is then turned into a JSON object, AES CBC encrypted (with a key that is inside the remaining VexTrio source code), and sent to the server as a token value. The server is then responsible for evaluating the fingerprint result together with some additional parameters sent by the remaining VexTrio script. As the serverside code stays hidden, it is not possible to say which steps are taken on the server side. However, as a result of these hidden mechanisms, the server will respond with further JavaScript, redirecting victims to all sorts of scams and advertisements.</p><p id="c1a4" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Personally, I believe there are some interesting takeaways from the previous analysis. First of all, it is pretty interesting to see the different methods used by VexTrio to fingerprint a modern web browser. Many of the checks done by VexTrio are likely also used by different malware families.</p><p id="655f" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Based on the way the different fingerprinting methods are presented, I assume that most of them are actually copy-pasted from 3rd party sources. While I was able to proof this for some of the checks (see: Check 26), I have yet to find a source that contains all the techniques explained above. If anyone should discover an open-source script that does, don’t hesitate to reach out.</p><p id="2fbd" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Another thing I noticed is the amount of functionalities used in the above-mentioned fingerprinting methods which are marked as “deprecated” in the Mozilla developer documentation. I demonstrated this in the analysis of Check 6. In total, 7 out of 29 checks would stop working if all browser vendors would follow up on the deprecation status.</p><p id="7e27" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Additionally, there is a clear reference in the WebGL documentation about the security implications for the retrieval of the WebGL rendering debug variables used in Check 10 and 29.<br/>It appears to be a real-life example of the good old “usability” vs. “security” problem.</p><figure class="nh ni nj nk nl nm ne nf paragraph-image"><div role="button" tabindex="0" class="nn no fj np bh nq"><div class="ne nf qa"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ymmXi6rCiFjRyyVxkEqNkA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ymmXi6rCiFjRyyVxkEqNkA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ymmXi6rCiFjRyyVxkEqNkA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ymmXi6rCiFjRyyVxkEqNkA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ymmXi6rCiFjRyyVxkEqNkA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ymmXi6rCiFjRyyVxkEqNkA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ymmXi6rCiFjRyyVxkEqNkA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ymmXi6rCiFjRyyVxkEqNkA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh ln nr c" width="700" height="156" loading="lazy" role="presentation"/></picture></div></div><figcaption class="pj ff pk ne nf pl pm bf b bg z du">Figure 7: WebGL debug token issues (Source:<a class="af nw" href="https://registry.khronos.org/webgl/extensions/WEBGL_debug_renderer_info/" rel="noopener ugc nofollow" target="_blank"> registry.khronos.org</a>)</figcaption></figure><p id="5ea9" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">I always find it interesting to see such decision problems and how they are handled. In this case, the fingerprinting in VexTrio is a negative example in a much bigger debate. I do not want to point fingers here but rather highlight that it is not always easy to decide if security and privacy are more important than usability and that the above methods of fingerprinting are known to the web development community.</p><p id="df0b" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">But for now, let&#x27;s rep up this post. I hope you learned something on the way and enjoyed the read. Who knows, maybe some of you will even fiddle around with the given code samples to discover additional methods of fingerprinting or how to counter them? :)<br/>I am as always happy about any sort of feedback and remain open to suggestions on improving my work.</p><p id="65d8" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">If you made it here, please know that you are awesome and that I am happy to have you reading my work.</p><p id="c1ae" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Remember to follow my socials: <a class="af nw" href="https://linktr.ee/gi7w0rm" rel="noopener ugc nofollow" target="_blank">https://linktr.ee/gi7w0rm</a> to not miss my content. And if you want to go the extra step, I am currently still collecting for a new rig to do my security work. I would greatly appreciate a tip over at <a class="af nw" href="https://ko-fi.com/gi7w0rm" rel="noopener ugc nofollow" target="_blank">https://ko-fi.com/gi7w0rm</a>.</p><p id="c09d" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Until the next time</p><p id="72b3" class="pw-post-body-paragraph mg mh gu mi b mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd gn bk">Cheers ❤</p></div></div></div></div></section></div></div></article></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="qb qc ab iv"><div class="qd ab"><a class="qe ay am ao" href="https://medium.com/tag/infosec?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><div class="qf fj cx qg ge qh qi bf b bg z bk qj">Infosec</div></a></div><div class="qd ab"><a class="qe ay am ao" href="https://medium.com/tag/javascript?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><div class="qf fj cx qg ge qh qi bf b bg z bk qj">JavaScript</div></a></div><div class="qd ab"><a class="qe ay am ao" href="https://medium.com/tag/fingerprinting?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><div class="qf fj cx qg ge qh qi bf b bg z bk qj">Fingerprinting</div></a></div><div class="qd ab"><a class="qe ay am ao" href="https://medium.com/tag/malware?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><div class="qf fj cx qg ge qh qi bf b bg z bk qj">Malware</div></a></div><div class="qd ab"><a class="qe ay am ao" href="https://medium.com/tag/malware-analysis?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><div class="qf fj cx qg ge qh qi bf b bg z bk qj">Malware Analysis</div></a></div></div></div></div><div class="l"></div><footer class="qk ql qm qn qo qp qq qr qs ab q qt qu c"><div class="l ae"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="ab cp qv"><div class="ab q ke"><div class="qw l"><span class="l qx qy qz e d"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Faeb721be6e30&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=---footer_actions--aeb721be6e30---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></span><span class="l h g f ra rb"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Faeb721be6e30&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=---footer_actions--aeb721be6e30---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></span></div><div class="bq ab"><div><div class="bm" aria-hidden="false"><button class="ao kk la lb ab q fk lc ld" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="le"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg></button></div></div></div></div><div class="ab q"><div class="rc l is"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faeb721be6e30&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;source=---footer_actions--aeb721be6e30---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lg" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="rc l is"><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="footerSocialShareButton" class="af fk ah ai aj ak al lo an ao ap ex lp lq ld lr"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg></button></div></div></div></div></div></div></div></div></div></footer><div class="rd re rf rg rh l bx"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="cl ab ri cp"><div class="ab ia"><a rel="noopener follow" href="/?source=post_page---post_author_info--aeb721be6e30--------------------------------"><div class="l rj rk by rl ie"><div class="l fj"><img alt="Gi7w0rm" class="l fd by rm rn cx" src="https://miro.medium.com/v2/resize:fill:144:144/1*XNZYIunppMSwHbb0Dxx3cA.png" width="72" height="72" loading="lazy"/><div class="if by l rm rn fs n ig ft"></div></div></div></a></div><div class="j i d"><div class="ab"><span><button class="bf b bg z ep qf eq er es et eu ev ew ex ey ez fa au fb fc fd bm fe ff">Follow</button></span><div class="dt l"><div><div><div class="bm" aria-hidden="false"><div class="l"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3a4e97b76a4b&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;newsletterV3=fa7639fc99f0&amp;newsletterV3Id=3a4e97b76a4b&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=---post_author_info--aeb721be6e30---------------------subscribe_user-----------" rel="noopener follow"><button class="bf b bg z rr am rs rt ru rv rw rx ry rz ew ex ey ez fa fb fc fd bm fe ff" aria-label="Subscribe"><svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" fill="none" viewBox="0 0 38 38" class="ro rp rq"><rect width="0.5" height="6.5" x="26.25" y="9.25" rx="0.25"></rect><rect width="0.5" height="6.5" x="29.75" y="12.25" rx="0.25" transform="rotate(90 29.75 12.25)"></rect><path d="M19.5 12.5h-7a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1v-5"></path><path d="M11.5 14.5 19 20l4-3"></path></svg></button></a></span></div></div></div></div></div></div></div></div><div class="ab cn cp"><div class="l"><div class="ab q"><a class="af ag ah ai aj ak al am an ao ap aq ar as at ab q" rel="noopener follow" href="/?source=post_page---post_author_info--aeb721be6e30--------------------------------"><h2 class="pw-author-name bf sa sb sc sd bk"><span class="gn ix">Written by <!-- -->Gi7w0rm</span></h2></a></div><div class="qd ab"><div class="l is"><span class="pw-follower-count bf b bg z bk"><a class="af ag ah ai aj ak al am an ao ap aq ar il" rel="noopener follow" href="/followers?source=post_page---post_author_info--aeb721be6e30--------------------------------">193 Followers</a></span></div></div><div class="se l"></div></div><div class="h k"><div class="ab"><span><button class="bf b bg z ep qf eq er es et eu ev ew ex ey ez fa au fb fc fd bm fe ff">Follow</button></span><div class="dt l"><div><div><div class="bm" aria-hidden="false"><div class="l"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3a4e97b76a4b&amp;operation=register&amp;redirect=https%3A%2F%2Fgi7w0rm.medium.com%2Fvextrios-browser-fingerprinting-aeb721be6e30&amp;newsletterV3=fa7639fc99f0&amp;newsletterV3Id=3a4e97b76a4b&amp;user=Gi7w0rm&amp;userId=fa7639fc99f0&amp;source=---post_author_info--aeb721be6e30---------------------subscribe_user-----------" rel="noopener follow"><button class="bf b bg z rr am rs rt ru rv rw rx ry rz ew ex ey ez fa fb fc fd bm fe ff" aria-label="Subscribe"><svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" fill="none" viewBox="0 0 38 38" class="ro rp rq"><rect width="0.5" height="6.5" x="26.25" y="9.25" rx="0.25"></rect><rect width="0.5" height="6.5" x="29.75" y="12.25" rx="0.25" transform="rotate(90 29.75 12.25)"></rect><path d="M19.5 12.5h-7a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1v-5"></path><path d="M11.5 14.5 19 20l4-3"></path></svg></button></a></span></div></div></div></div></div></div></div></div><div class="sf bh sg sh si sj sk sl"></div></div></div><div class="h k j"><div class="sf bh sg sm"></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="sn ab ke iv"><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://help.medium.com/hc/en-us?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Help</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.statuspage.io/?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Status</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/about?autoplay=1&amp;source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">About</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Careers</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="pressinquiries@medium.com?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Press</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://blog.medium.com/?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Blog</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Privacy</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Terms</p></a></div><div class="so sp l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://speechify.com/medium?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Text to speech</p></a></div><div class="so l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/business?source=post_page-----aeb721be6e30--------------------------------" rel="noopener follow"><p class="bf b dv z du">Teams</p></a></div></div></div></div></div></div></div></div></div></div><script>window.__BUILD_ID__="main-20241101-141657-368ddd3325"</script><script>window.__GRAPHQL_URI__ = "https://gi7w0rm.medium.com/_/graphql"</script><script>window.__PRELOADED_STATE__ = {"algolia":{"queries":{}},"cache":{"experimentGroupSet":true,"reason":"","group":"enabled","tags":["group-edgeCachePosts","post-aeb721be6e30","user-fa7639fc99f0"],"serverVariantState":"44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a","middlewareEnabled":true,"cacheStatus":"DYNAMIC","shouldUseCache":true,"vary":[],"lohpSummerUpsellEnabled":false,"publicationHierarchyEnabled":false},"client":{"hydrated":false,"isUs":false,"isNativeMedium":false,"isSafariMobile":false,"isSafari":false,"isFirefox":false,"routingEntity":{"type":"USER","id":"fa7639fc99f0","explicit":true},"viewerIsBot":false},"debug":{"requestId":"ea650d21-086c-4a28-9402-0fa1eaa2f41a","hybridDevServices":[],"originalSpanCarrier":{"traceparent":"00-36cba150bf83179b015a6e5c92781c8d-17511fa542bb90b4-01"}},"multiVote":{"clapsPerPost":{}},"navigation":{"branch":{"show":null,"hasRendered":null,"blockedByCTA":false},"hideGoogleOneTap":false,"hasRenderedAlternateUserBanner":null,"currentLocation":"https:\u002F\u002Fgi7w0rm.medium.com\u002Fvextrios-browser-fingerprinting-aeb721be6e30","host":"gi7w0rm.medium.com","hostname":"gi7w0rm.medium.com","referrer":"","hasSetReferrer":false,"susiModal":{"step":null,"operation":"register"},"postRead":false,"partnerProgram":{"selectedCountryCode":null},"queryString":"","currentHash":""},"config":{"nodeEnv":"production","version":"main-20241101-141657-368ddd3325","target":"production","productName":"Medium","publicUrl":"https:\u002F\u002Fcdn-client.medium.com\u002Flite","authDomain":"medium.com","authGoogleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","favicon":"production","glyphUrl":"https:\u002F\u002Fglyph.medium.com","branchKey":"key_live_ofxXr2qTrrU9NqURK8ZwEhknBxiI6KBm","algolia":{"appId":"MQ57UUUQZ2","apiKeySearch":"394474ced050e3911ae2249ecc774921","indexPrefix":"medium_","host":"-dsn.algolia.net"},"recaptchaKey":"6Lfc37IUAAAAAKGGtC6rLS13R1Hrw_BqADfS1LRk","recaptcha3Key":"6Lf8R9wUAAAAABMI_85Wb8melS7Zj6ziuf99Yot5","recaptchaEnterpriseKeyId":"6Le-uGgpAAAAAPprRaokM8AKthQ9KNGdoxaGUvVp","datadog":{"applicationId":"6702d87d-a7e0-42fe-bbcb-95b469547ea0","clientToken":"pub853ea8d17ad6821d9f8f11861d23dfed","rumToken":"pubf9cc52896502b9413b68ba36fc0c7162","context":{"deployment":{"target":"production","tag":"main-20241101-141657-368ddd3325","commit":"368ddd33257676ac7efa246a2596cb30755c7d31"}},"datacenter":"us"},"googleAnalyticsCode":"G-7JY7T788PK","googlePay":{"apiVersion":"2","apiVersionMinor":"0","merchantId":"BCR2DN6TV7EMTGBM","merchantName":"Medium","instanceMerchantId":"13685562959212738550"},"applePay":{"version":3},"signInWallCustomDomainCollectionIds":["3a8144eabfe3","336d898217ee","61061eb0c96b","138adf9c44c","819cc2aaeee0"],"mediumMastodonDomainName":"me.dm","mediumOwnedAndOperatedCollectionIds":["8a9336e5bb4","b7e45b22fec3","193b68bd4fba","8d6b8a439e32","54c98c43354d","3f6ecf56618","d944778ce714","92d2092dc598","ae2a65f35510","1285ba81cada","544c7006046e","fc8964313712","40187e704f1c","88d9857e584e","7b6769f2748b","bcc38c8f6edf","cef6983b292","cb8577c9149e","444d13b52878","713d7dbc99b0","ef8e90590e66","191186aaafa0","55760f21cdc5","9dc80918cc93","bdc4052bbdba","8ccfed20cbb2"],"tierOneDomains":["medium.com","thebolditalic.com","arcdigital.media","towardsdatascience.com","uxdesign.cc","codeburst.io","psiloveyou.xyz","writingcooperative.com","entrepreneurshandbook.co","prototypr.io","betterhumans.coach.me","theascent.pub"],"topicsToFollow":["d61cf867d93f","8a146bc21b28","1eca0103fff3","4d562ee63426","aef1078a3ef5","e15e46793f8d","6158eb913466","55f1c20aba7a","3d18b94f6858","4861fee224fd","63c6f1f93ee","1d98b3a9a871","decb52b64abf","ae5d4995e225","830cded25262"],"topicToTagMappings":{"accessibility":"accessibility","addiction":"addiction","android-development":"android-development","art":"art","artificial-intelligence":"artificial-intelligence","astrology":"astrology","basic-income":"basic-income","beauty":"beauty","biotech":"biotech","blockchain":"blockchain","books":"books","business":"business","cannabis":"cannabis","cities":"cities","climate-change":"climate-change","comics":"comics","coronavirus":"coronavirus","creativity":"creativity","cryptocurrency":"cryptocurrency","culture":"culture","cybersecurity":"cybersecurity","data-science":"data-science","design":"design","digital-life":"digital-life","disability":"disability","economy":"economy","education":"education","equality":"equality","family":"family","feminism":"feminism","fiction":"fiction","film":"film","fitness":"fitness","food":"food","freelancing":"freelancing","future":"future","gadgets":"gadgets","gaming":"gaming","gun-control":"gun-control","health":"health","history":"history","humor":"humor","immigration":"immigration","ios-development":"ios-development","javascript":"javascript","justice":"justice","language":"language","leadership":"leadership","lgbtqia":"lgbtqia","lifestyle":"lifestyle","machine-learning":"machine-learning","makers":"makers","marketing":"marketing","math":"math","media":"media","mental-health":"mental-health","mindfulness":"mindfulness","money":"money","music":"music","neuroscience":"neuroscience","nonfiction":"nonfiction","outdoors":"outdoors","parenting":"parenting","pets":"pets","philosophy":"philosophy","photography":"photography","podcasts":"podcast","poetry":"poetry","politics":"politics","privacy":"privacy","product-management":"product-management","productivity":"productivity","programming":"programming","psychedelics":"psychedelics","psychology":"psychology","race":"race","relationships":"relationships","religion":"religion","remote-work":"remote-work","san-francisco":"san-francisco","science":"science","self":"self","self-driving-cars":"self-driving-cars","sexuality":"sexuality","social-media":"social-media","society":"society","software-engineering":"software-engineering","space":"space","spirituality":"spirituality","sports":"sports","startups":"startup","style":"style","technology":"technology","transportation":"transportation","travel":"travel","true-crime":"true-crime","tv":"tv","ux":"ux","venture-capital":"venture-capital","visual-design":"visual-design","work":"work","world":"world","writing":"writing"},"defaultImages":{"avatar":{"imageId":"1*dmbNkD5D-u45r44go_cf0g.png","height":150,"width":150},"orgLogo":{"imageId":"7*V1_7XP4snlmqrc_0Njontw.png","height":110,"width":500},"postLogo":{"imageId":"bd978bb536350a710e8efb012513429cabdc4c28700604261aeda246d0f980b7","height":810,"width":1440},"postPreviewImage":{"imageId":"1*hn4v1tCaJy7cWMyb0bpNpQ.png","height":386,"width":579}},"collectionStructuredData":{"8d6b8a439e32":{"name":"Elemental","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F980\u002F1*9ygdqoKprhwuTVKUM0DLPA@2x.png","width":980,"height":159}}},"3f6ecf56618":{"name":"Forge","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F596\u002F1*uULpIlImcO5TDuBZ6lm7Lg@2x.png","width":596,"height":183}}},"ae2a65f35510":{"name":"GEN","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F264\u002F1*RdVZMdvfV3YiZTw6mX7yWA.png","width":264,"height":140}}},"88d9857e584e":{"name":"LEVEL","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*JqYMhNX6KNNb2UlqGqO2WQ.png","width":540,"height":108}}},"7b6769f2748b":{"name":"Marker","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F383\u002F1*haCUs0wF6TgOOvfoY-jEoQ@2x.png","width":383,"height":92}}},"444d13b52878":{"name":"OneZero","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*cw32fIqCbRWzwJaoQw6BUg.png","width":540,"height":123}}},"8ccfed20cbb2":{"name":"Zora","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*tZUQqRcCCZDXjjiZ4bDvgQ.png","width":540,"height":106}}}},"embeddedPostIds":{"coronavirus":"cd3010f9d81f"},"sharedCdcMessaging":{"COVID_APPLICABLE_TAG_SLUGS":[],"COVID_APPLICABLE_TOPIC_NAMES":[],"COVID_APPLICABLE_TOPIC_NAMES_FOR_TOPIC_PAGE":[],"COVID_MESSAGES":{"tierA":{"text":"For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":66,"end":73,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"tierB":{"text":"Anyone can publish on Medium per our Policies, but we don’t fact-check every story. For more info about the coronavirus, see cdc.gov.","markups":[{"start":37,"end":45,"href":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Fcategories\u002F201931128-Policies-Safety"},{"start":125,"end":132,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"paywall":{"text":"This article has been made free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":56,"end":70,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":138,"end":145,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"unbound":{"text":"This article is free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":45,"end":59,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":127,"end":134,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]}},"COVID_BANNER_POST_ID_OVERRIDE_WHITELIST":["3b31a67bff4a"]},"sharedVoteMessaging":{"TAGS":["politics","election-2020","government","us-politics","election","2020-presidential-race","trump","donald-trump","democrats","republicans","congress","republican-party","democratic-party","biden","joe-biden","maga"],"TOPICS":["politics","election"],"MESSAGE":{"text":"Find out more about the U.S. election results here.","markups":[{"start":46,"end":50,"href":"https:\u002F\u002Fcookpolitical.com\u002F2020-national-popular-vote-tracker"}]},"EXCLUDE_POSTS":["397ef29e3ca5"]},"embedPostRules":[],"recircOptions":{"v1":{"limit":3},"v2":{"limit":8}},"braintreeClientKey":"production_zjkj96jm_m56f8fqpf7ngnrd4","braintree":{"enabled":true,"merchantId":"m56f8fqpf7ngnrd4","merchantAccountId":{"usd":"AMediumCorporation_instant","eur":"amediumcorporation_EUR","cad":"amediumcorporation_CAD"},"publicKey":"ds2nn34bg2z7j5gd","braintreeEnvironment":"production","dashboardUrl":"https:\u002F\u002Fwww.braintreegateway.com\u002Fmerchants","gracePeriodDurationInDays":14,"mediumMembershipPlanId":{"monthly":"ce105f8c57a3","monthlyV2":"e8a5e126-792b-4ee6-8fba-d574c1b02fc5","monthlyWithTrial":"d5ee3dbe3db8","monthlyPremium":"fa741a9b47a2","yearly":"a40ad4a43185","yearlyV2":"3815d7d6-b8ca-4224-9b8c-182f9047866e","yearlyStaff":"d74fb811198a","yearlyWithTrial":"b3bc7350e5c7","yearlyPremium":"e21bd2c12166","monthlyOneYearFree":"e6c0637a-2bad-4171-ab4f-3c268633d83c","monthly25PercentOffFirstYear":"235ecc62-0cdb-49ae-9378-726cd21c504b","monthly20PercentOffFirstYear":"ba518864-9c13-4a99-91ca-411bf0cac756","monthly15PercentOffFirstYear":"594c029b-9f89-43d5-88f8-8173af4e070e","monthly10PercentOffFirstYear":"c6c7bc9a-40f2-4b51-8126-e28511d5bdb0","monthlyForStudents":"629ebe51-da7d-41fd-8293-34cd2f2030a8","yearlyOneYearFree":"78ba7be9-0d9f-4ece-aa3e-b54b826f2bf1","yearly25PercentOffFirstYear":"2dbb010d-bb8f-4eeb-ad5c-a08509f42d34","yearly20PercentOffFirstYear":"47565488-435b-47f8-bf93-40d5fbe0ebc8","yearly15PercentOffFirstYear":"8259809b-0881-47d9-acf7-6c001c7f720f","yearly10PercentOffFirstYear":"9dd694fb-96e1-472c-8d9e-3c868d5c1506","yearlyForStudents":"e29345ef-ab1c-4234-95c5-70e50fe6bc23","monthlyCad":"p52orjkaceei","yearlyCad":"h4q9g2up9ktt"},"braintreeDiscountId":{"oneMonthFree":"MONTHS_FREE_01","threeMonthsFree":"MONTHS_FREE_03","sixMonthsFree":"MONTHS_FREE_06","fiftyPercentOffOneYear":"FIFTY_PERCENT_OFF_ONE_YEAR"},"3DSecureVersion":"2","defaultCurrency":"usd","providerPlanIdCurrency":{"4ycw":"usd","rz3b":"usd","3kqm":"usd","jzw6":"usd","c2q2":"usd","nnsw":"usd","q8qw":"usd","d9y6":"usd","fx7w":"cad","nwf2":"cad"}},"paypalClientId":"AXj1G4fotC2GE8KzWX9mSxCH1wmPE3nJglf4Z2ig_amnhvlMVX87otaq58niAg9iuLktVNF_1WCMnN7v","paypal":{"host":"https:\u002F\u002Fapi.paypal.com:443","clientMode":"production","serverMode":"live","webhookId":"4G466076A0294510S","monthlyPlan":{"planId":"P-9WR0658853113943TMU5FDQA","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlan":{"planId":"P-7N8963881P8875835MU5JOPQ","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oneYearGift":{"name":"Medium Membership (1 Year, Digital Gift Code)","description":"Unlimited access to the best and brightest stories on Medium. Gift codes can be redeemed at medium.com\u002Fredeem.","price":"50.00","currency":"USD","sku":"membership-gift-1-yr"},"oldMonthlyPlan":{"planId":"P-96U02458LM656772MJZUVH2Y","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlan":{"planId":"P-59P80963JF186412JJZU3SMI","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"monthlyPlanWithTrial":{"planId":"P-66C21969LR178604GJPVKUKY","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlanWithTrial":{"planId":"P-6XW32684EX226940VKCT2MFA","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oldMonthlyPlanNoSetupFee":{"planId":"P-4N046520HR188054PCJC7LJI","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlanNoSetupFee":{"planId":"P-7A4913502Y5181304CJEJMXQ","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"sdkUrl":"https:\u002F\u002Fwww.paypal.com\u002Fsdk\u002Fjs"},"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","log":{"json":true,"level":"info"},"imageUploadMaxSizeMb":25,"staffPicks":{"title":"Staff Picks","catalogId":"c7bc6e1ee00f"}},"session":{"xsrf":""}}</script><script>window.__APOLLO_STATE__ = {"ROOT_QUERY":{"__typename":"Query","viewer":null,"collectionByDomainOrSlug({\"domainOrSlug\":\"gi7w0rm.medium.com\"})":null,"postResult({\"id\":\"aeb721be6e30\"})":{"__ref":"Post:aeb721be6e30"}},"LinkedAccounts:fa7639fc99f0":{"__typename":"LinkedAccounts","mastodon":null,"id":"fa7639fc99f0"},"UserViewerEdge:userId:fa7639fc99f0-viewerId:lo_89e6d1bd25b7":{"__typename":"UserViewerEdge","id":"userId:fa7639fc99f0-viewerId:lo_89e6d1bd25b7","isFollowing":false,"isUser":false,"isMuting":false},"NewsletterV3:3a4e97b76a4b":{"__typename":"NewsletterV3","id":"3a4e97b76a4b","type":"NEWSLETTER_TYPE_AUTHOR","slug":"fa7639fc99f0","name":"fa7639fc99f0","collection":null,"user":{"__ref":"User:fa7639fc99f0"}},"User:fa7639fc99f0":{"__typename":"User","id":"fa7639fc99f0","name":"Gi7w0rm","username":"gi7w0rm","newsletterV3":{"__ref":"NewsletterV3:3a4e97b76a4b"},"linkedAccounts":{"__ref":"LinkedAccounts:fa7639fc99f0"},"isSuspended":false,"imageId":"1*XNZYIunppMSwHbb0Dxx3cA.png","mediumMemberAt":0,"verifications":{"__typename":"VerifiedInfo","isBookAuthor":false},"socialStats":{"__typename":"SocialStats","followerCount":193},"customDomainState":{"__typename":"CustomDomainState","live":{"__typename":"CustomDomain","domain":"gi7w0rm.medium.com"}},"hasSubdomain":true,"bio":"","isPartnerProgramEnrolled":false,"viewerEdge":{"__ref":"UserViewerEdge:userId:fa7639fc99f0-viewerId:lo_89e6d1bd25b7"},"viewerIsUser":false,"postSubscribeMembershipUpsellShownAt":0,"userPostCounts({\"includeResponsesCount\":true})":null,"membership":null,"allowNotes":true,"twitterScreenName":"Gi7w0rm"},"Paragraph:95e4f1a2ebf9_0":{"__typename":"Paragraph","id":"95e4f1a2ebf9_0","name":"3012","type":"H3","href":null,"layout":null,"metadata":null,"text":"VexTrio’s Browser Fingerprinting","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_1":{"__typename":"Paragraph","id":"95e4f1a2ebf9_1","name":"c695","type":"P","href":null,"layout":null,"metadata":null,"text":"Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at Javascript inject-based malware: Browser Fingerprinting.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*IOMq6n4m17tmyiJ1FdMAsw.png":{"__typename":"ImageMetadata","id":"1*IOMq6n4m17tmyiJ1FdMAsw.png","originalHeight":896,"originalWidth":1152,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_2":{"__typename":"Paragraph","id":"95e4f1a2ebf9_2","name":"4039","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*IOMq6n4m17tmyiJ1FdMAsw.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_3":{"__typename":"Paragraph","id":"95e4f1a2ebf9_3","name":"6c18","type":"P","href":null,"layout":null,"metadata":null,"text":"To do so, we are going to have a look at the fingerprinting stage of VexTrio, a malicious TDS (Traffic Distribution System) currently injected into webpages across the globe, that redirects visitors to an array of different fraudpages. Its functionality is probably best described like this:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_4":{"__typename":"Paragraph","id":"95e4f1a2ebf9_4","name":"03bf","type":"BQ","href":null,"layout":null,"metadata":null,"text":"VexTrio actors inject malicious JavaScript code into vulnerable WordPress websites, which then redirects visitors to potentially harmful content. The visitors go through a redirect chain that involves fraudulent domains whose purpose is to track victims and conditionally send them to landing webpages that serve riskware, spyware, adware, scams, pornographic images, or other unwanted programs. (Source: Infoblox)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":405,"end":413,"href":"https:\u002F\u002Fblogs.infoblox.com\u002Fcyber-threat-intelligence\u002Fcyber-threat-advisory\u002Fvextrio-ddga-domains-spread-adware-spyware-and-scam-web-forms\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_5":{"__typename":"Paragraph","id":"95e4f1a2ebf9_5","name":"ba8e","type":"P","href":null,"layout":null,"metadata":null,"text":"To decide where to lead a user that opens a page infected with VexTrio, the malicious TDS uses several different methods to fingerprint the potential victim's browser. Depending on the JavaScript chain used, this can start by only allowing Users to be redirected if they meet certain conditions when visiting an infected site.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_6":{"__typename":"Paragraph","id":"95e4f1a2ebf9_6","name":"f5b2","type":"BQ","href":null,"layout":null,"metadata":null,"text":"1. The user must visit the WordPress website from a search engine. For example, the referrer URL can be https:\u002F\u002Fwww.google.com\u002F.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":104,"end":128,"href":"https:\u002F\u002Fwww.google.com\u002F.","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":104,"end":127,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_7":{"__typename":"Paragraph","id":"95e4f1a2ebf9_7","name":"f264","type":"BQ","href":null,"layout":null,"metadata":null,"text":"2. Cookies are enabled in the user’s web browser.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_8":{"__typename":"Paragraph","id":"95e4f1a2ebf9_8","name":"e34b","type":"BQ","href":null,"layout":null,"metadata":null,"text":"3. The user has not visited a VexTrio compromised web page in the past 24 hours.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_9":{"__typename":"Paragraph","id":"95e4f1a2ebf9_9","name":"a136","type":"BQ","href":null,"layout":null,"metadata":null,"text":"(Source: Infoblox)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":9,"end":17,"href":"https:\u002F\u002Fblogs.infoblox.com\u002Fcyber-threat-intelligence\u002Fcyber-threat-advisory\u002Fvextrio-ddga-domains-spread-adware-spyware-and-scam-web-forms\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_10":{"__typename":"Paragraph","id":"95e4f1a2ebf9_10","name":"72ea","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, this initial step of the infection chain already assures several things. First, by checking the referrer header, it is less likely that the VexTrio malware accidentally redirects a Website administrator or regular user of a website as both of those would likely not visit their website via a Search Engine but by directly opening the URL.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_11":{"__typename":"Paragraph","id":"95e4f1a2ebf9_11","name":"6652","type":"P","href":null,"layout":null,"metadata":null,"text":"Second, by assuring that the User's Browser Cookies are enabled, the malware assures its functionality, as it makes use of several cookies, depending on its redirection chain. One of which is used to identify that no victim is redirected more than once in 24 hours. This leads us to the 3rd point, which likely serves the purpose of flying under the radar, as malicious redirecting behavior is not persistent but only happens once every 24 hours, making it less likely for users to complain to an administrator. It could also assure that a potential victim of more intrusive attacks, like VexTrio leading to Malware, does not get infected several times in a short timespan, reducing the noise of reoccurring infections on the attacker side.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_12":{"__typename":"Paragraph","id":"95e4f1a2ebf9_12","name":"2fac","type":"P","href":null,"layout":null,"metadata":null,"text":"However, the purpose of this blog post is not to shed light on the initial VexTrio injection page, but on the several methods used to redirect victims to the different kinds of fraud that can be delivered by the VexTrio TDS.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_13":{"__typename":"Paragraph","id":"95e4f1a2ebf9_13","name":"5310","type":"P","href":null,"layout":null,"metadata":null,"text":"For doing so, the malware makes use of several fingerprinting methods being delivered in a second-stage JavaScript file, once a potential victim passes the above-described checks. These fingerprinting methods are used mainly to make sure that a potential victim is legitimate and not a researcher or web crawler. After each check is run, the malware returns a string value, which is then used by the VexTrio server to decide which redirect to serve the victim. Luckily for us, the actors behind VexTrio try to keep their code pretty clean. This allows us to have a look at all the checks at once due to a huge function that is only used to start each individual check and work with the result. Originally the function names were all generic, from A1 to A29","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_14":{"__typename":"Paragraph","id":"95e4f1a2ebf9_14","name":"ab9e","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function chk() {\n  try {\n    if (CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_Webdriver_in_Navigator_Interface().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_Permission_DENIED_in_State_Prompt().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_SPOOKYOSCHECK_likely_Devtools().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_Phantom_in_Window().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_BROWSERAUTOMATION_via_domElements().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_PHANTOMAS().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_Selenium_DOM_based().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_NodeJS_Buffer().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (DETECT_Chromium_based_automation_driver().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_setTimeout_Integrity().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_setInterval_Integrity().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_XMLHTTPRequest_1().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_XMLHTTPRequest_2().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_UserAgent_not_automation().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_NumberofLogicalProcessors_IOS().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_Browser_VoiceList().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK__STACKTRACE_Behavior().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else if (CHECK_VirtualBox().split(\":\")[1] === \"1\") {\n      return \"a0:\" + 1;\n    } else {\n      return \"a0:\" + 0;\n    }\n  } catch (c) {\n    return \"a0:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_15":{"__typename":"Paragraph","id":"95e4f1a2ebf9_15","name":"d2f0","type":"P","href":null,"layout":null,"metadata":null,"text":"I will now try to walk you through these checks to explain what they do and how they work. This likely means to look at a lot of JavaScript and Browser Documentation. So buckle up for some craziness ahead. First of all, let's look at the most used helper functions:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_16":{"__typename":"Paragraph","id":"95e4f1a2ebf9_16","name":"9566","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_DEVICE_IN_USERAGENT_STRING() {\n  var c = navigator.userAgent.toLowerCase();\n  var d;\n  if (c.indexOf(\"windows phone\") \u003E= 0) {\n    d = \"Windows Phone\";\n  } else if (c.indexOf(\"win\") \u003E= 0) {\n    d = \"Windows\";\n  } else if (c.indexOf(\"kaios\") \u003E= 0) {\n    d = \"Kaios\";\n  } else if (c.indexOf(\"android\") \u003E= 0 || c.indexOf(\"spreadtrum\") \u003E= 0) {\n    d = \"Android\";\n  } else if (c.indexOf(\"linux\") \u003E= 0 || c.indexOf(\"cros\") \u003E= 0) {\n    d = \"Linux\";\n  } else if (c.indexOf(\"iphone\") \u003E= 0 || c.indexOf(\"ipad\") \u003E= 0) {\n    d = \"iOS\";\n  } else if (c.indexOf(\"mac\") \u003E= 0) {\n    d = \"Mac\";\n  } else {\n    d = \"Other\";\n  }\n  return d;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_17":{"__typename":"Paragraph","id":"95e4f1a2ebf9_17","name":"5c27","type":"P","href":null,"layout":null,"metadata":null,"text":"and","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_18":{"__typename":"Paragraph","id":"95e4f1a2ebf9_18","name":"14b1","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_Browser_Type() {\n  var c = navigator.userAgent;\n  var d;\n  if (c.indexOf(\"OPR\u002F\") !== -1 || c.indexOf(\"Opera\") !== -1) {\n    d = \"Opera\";\n  } else if ((c.indexOf(\"MSIE\") !== -1 || c.indexOf(\"Trident\") !== -1) && c.indexOf(\"MAXTHON\") === -1) {\n    d = \"Internet Explorer\";\n  } else if (c.indexOf(\"Edge\") !== -1 || c.indexOf(\"EdgA\") !== -1) {\n    d = \"Edge\";\n  } else if (c.indexOf(\"SamsungBrowser\") !== -1) {\n    d = \"Samsung Browser\";\n  } else if (c.indexOf(\"UCBrowser\") !== -1) {\n    d = \"UC Browser\";\n  } else if (c.indexOf(\"Android\") !== -1 && c.indexOf(\"Chrome\") === -1 && c.indexOf(\"Firefox\") === -1) {\n    d = \"Android Browser\";\n  } else if (c.indexOf(\"Chrome\") !== -1 || c.indexOf(\"CriOS\") !== -1) {\n    d = \"Chrome\";\n  } else if (c.indexOf(\"Safari\") !== -1 && c.indexOf(\"Chrome\") === -1) {\n    d = \"Safari\";\n  } else if (c.indexOf(\"Firefox\") !== -1) {\n    d = \"Firefox\";\n  } else {\n    d = \"Other\";\n  }\n  return d;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_19":{"__typename":"Paragraph","id":"95e4f1a2ebf9_19","name":"46a6","type":"P","href":null,"layout":null,"metadata":null,"text":"Both of these are pretty straightforward and work based on the potential victims' User-agent Header.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_20":{"__typename":"Paragraph","id":"95e4f1a2ebf9_20","name":"30ca","type":"BQ","href":null,"layout":null,"metadata":null,"text":"The User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and\u002For version of the requesting user agent. (Src: Mozilla.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":15,"end":29,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FGlossary\u002FRequest_header","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":178,"end":188,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FGlossary\u002FUser_agent","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":196,"end":207,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FHTTP\u002FHeaders\u002FUser-Agent","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_21":{"__typename":"Paragraph","id":"95e4f1a2ebf9_21","name":"50ee","type":"P","href":null,"layout":null,"metadata":null,"text":"So let's see an example UserAgent string to better understand what we can identify based on this header:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_22":{"__typename":"Paragraph","id":"95e4f1a2ebf9_22","name":"dc05","type":"BQ","href":null,"layout":null,"metadata":null,"text":"Mozilla\u002F5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\u002F537.36 (KHTML, like Gecko) Chrome\u002F121.0.0.0 Safari\u002F537.36","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_23":{"__typename":"Paragraph","id":"95e4f1a2ebf9_23","name":"5744","type":"P","href":null,"layout":null,"metadata":null,"text":"Let's split this into parts and try to understand everything individually:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_24":{"__typename":"Paragraph","id":"95e4f1a2ebf9_24","name":"86fd","type":"OLI","href":null,"layout":null,"metadata":null,"text":"Mozilla\u002F5.0: A historical string used at the start of most UserAgent strings that can be ignored.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_25":{"__typename":"Paragraph","id":"95e4f1a2ebf9_25","name":"f1d7","type":"OLI","href":null,"layout":null,"metadata":null,"text":"Windows NT 10.0: Windows NT is the name of the Windows Kernel. 10.0 is the Kernel Version used by the person above, who made the web request. Using online resources, we can easily identify that whoever is making this web request is using a Windows Operating system. More specifically, either a late version of Windows 10 or Windows 11. (Technically it could also be a Windows Server 2016, 2019 or 2021).","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":148,"end":155,"href":"https:\u002F\u002Fde.wikipedia.org\u002Fwiki\u002FMicrosoft_Windows_NT","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_26":{"__typename":"Paragraph","id":"95e4f1a2ebf9_26","name":"3a00","type":"OLI","href":null,"layout":null,"metadata":null,"text":"Win64; x64: This gives us the Windows processor architecture used. From an attacker's perspective, this could be important as x64 malware binaries would not be able to run on an x32 operating system.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":38,"end":60,"href":"https:\u002F\u002Fde.wikipedia.org\u002Fwiki\u002FX64","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_27":{"__typename":"Paragraph","id":"95e4f1a2ebf9_27","name":"1327","type":"OLI","href":null,"layout":null,"metadata":null,"text":"AppleWebKit\u002F537.36: This is the browser's rendering engine and version. The rendering engine is used to translate the source code of a website into a visual representation. In this case, it appears to be AppleWebKit. Now, historically this part of the UserAgent string used to be accurate, as for a long time AppleWebKit was used by all Apple and Chromium-based browsers. However, in 2013 Google started to create and use their own fork of AppleWebKit (called Blink). For some reason this was never really announced in the UserAgent of a Webbrowser so nowadays the above could be either Safari, Chrome, or other Chromium or WebKit-based browsers. The only thing we can already clearly exclude is Mozilla’s Firefox which uses Gecko and properly announces that.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_28":{"__typename":"Paragraph","id":"95e4f1a2ebf9_28","name":"c598","type":"OLI","href":null,"layout":null,"metadata":null,"text":"(KHTML like Gecko): Another historical piece of information. Technically, AppleWebKit is itself a fork of another browser rendering engine called KHTML. When Apple released WebKit around 2005, they wanted to make sure that the new rendering engine was accepted by all major web servers around. So they simply put KHTML like Gecko into the string to announce that their new rendering engine would behave the same way as Mozilla’s Gecko Engine.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_29":{"__typename":"Paragraph","id":"95e4f1a2ebf9_29","name":"4bc2","type":"OLI","href":null,"layout":null,"metadata":null,"text":"Chrome\u002F121.0.0.0: This is the actual Browser using the above UserAgent Header. Google Chrome Version 121","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_30":{"__typename":"Paragraph","id":"95e4f1a2ebf9_30","name":"2a00","type":"OLI","href":null,"layout":null,"metadata":null,"text":"Safari\u002F537.36: And this is yet another historical piece of information. When Google released Chrome they wanted to ensure that all Websites accept their requests as well. So they copied the Safari UserAgent of that time and added their own Chrome Version (6.) into it.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_31":{"__typename":"Paragraph","id":"95e4f1a2ebf9_31","name":"6823","type":"P","href":null,"layout":null,"metadata":null,"text":"As you see, there is a lot of information to unpack from a UserAgent. And this is only one example. The below UserAgents are also perfectly fine:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_32":{"__typename":"Paragraph","id":"95e4f1a2ebf9_32","name":"b2e0","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Dalvik\u002F2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build\u002FMRA58K)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_33":{"__typename":"Paragraph","id":"95e4f1a2ebf9_33","name":"a7c2","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Mozilla\u002F5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit\u002F605.1.15 (KHTML, like Gecko) Version\u002F12.1 Mobile\u002F15E148 Safari\u002F604.1","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_34":{"__typename":"Paragraph","id":"95e4f1a2ebf9_34","name":"7757","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Mozilla\u002F5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko\u002F20100101 Firefox\u002F122.0","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_35":{"__typename":"Paragraph","id":"95e4f1a2ebf9_35","name":"3165","type":"P","href":null,"layout":null,"metadata":null,"text":"And as you can easily see, they vastly differ from what we saw before. However, all of them share 2 characteristics:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_36":{"__typename":"Paragraph","id":"95e4f1a2ebf9_36","name":"77ec","type":"OLI","href":null,"layout":null,"metadata":null,"text":"A bracket with precise details about the used operating system","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_37":{"__typename":"Paragraph","id":"95e4f1a2ebf9_37","name":"bb9a","type":"OLI","href":null,"layout":null,"metadata":null,"text":"The potential to precisely identify the used Browser by trying to find the exact part of the string that is not represented in other UserAgents.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_38":{"__typename":"Paragraph","id":"95e4f1a2ebf9_38","name":"23f6","type":"P","href":null,"layout":null,"metadata":null,"text":"But what's important to note here is that technically, the software that makes the web request can decide if and which UserAgent to set. Common tools like wget, curl or the python-request library all set individual UserAgents, if not told to do otherwise, which gives web servers an easy way to identify uncommon web requests. If you want to learn more about the history of UserAgents, I highly suggest reading this post.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":411,"end":420,"href":"https:\u002F\u002Fhumanwhocodes.com\u002Fblog\u002F2010\u002F01\u002F12\u002Fhistory-of-the-user-agent-string\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_39":{"__typename":"Paragraph","id":"95e4f1a2ebf9_39","name":"aefd","type":"P","href":null,"layout":null,"metadata":null,"text":"Coming back to VexTrio, we can now understand what the first two presented fingerprinting functions do. The function “CHECK_DEVICE_IN_USERAGENT_STRING” is used to parse the UserAgent received from the victim and identify the Operating System. To do so, it converts the user-agent into all lowercase letters and then iterates over it to identify characteristic strings that uniquely identify the OS. If the OS is not identified, it sets the return value to “Other”. The function “DETECT_Browser_Type” is used to identify the victim's browser (Chrome, Firefox, Safari, etc.). If you watch closely you can see that it makes use of some of the previously discussed historical features of UserAgent strings. For example, a browser is only identified as being “Safari”, if there is no “Chrome” string in the header. As we just learned, thats the precise difference between a Safari and a Chrome header as Google just added the Chrome Version in a Safari UserAgent string. Again, if the Browser is not identified, it is set to “Other”.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_40":{"__typename":"Paragraph","id":"95e4f1a2ebf9_40","name":"10ae","type":"P","href":null,"layout":null,"metadata":null,"text":"As we will see during this article, VexTrio makes continuous use of both the above-described functions. But to keep things in order I will now walk through every check in order A1 to A29.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_41":{"__typename":"Paragraph","id":"95e4f1a2ebf9_41","name":"dea5","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 1: CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_42":{"__typename":"Paragraph","id":"95e4f1a2ebf9_42","name":"388d","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_COMPARE_ISO_CODE_LANGUAGE_ARRAY_VS_ISO_CODE_PRIMARY_LANGUAGE() {\n  if (typeof navigator.languages !== \"undefined\") {\n    try {\n      var c = navigator.languages[0].substr(0, 2);\n      if (c !== navigator.language.substr(0, 2)) {\n        return \"a1:\" + 1;\n      }\n    } catch (d) {\n      return \"a1:e\";\n    }\n  }\n  return \"a1:\" + 0;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_43":{"__typename":"Paragraph","id":"95e4f1a2ebf9_43","name":"4884","type":"P","href":null,"layout":null,"metadata":null,"text":"The first real check VexTrio does is to compare the value of the user's preferred language (navigator.language) with the first array of the browsers.languages array. More precisely it compares the first 2 letters of the ISO code representation of said elements. In Firefox, both values should always be the same. However, for other browsers, this is not necessarily true. In the case of the VexTrio code, if the ISO codes are not the same, the return value is “a1:1” (Check a1 = bad), if the values are the same or if the navigator.languages array is not defined it returns “a1:0” (Check a1 = good). I believe the VexTrio authors might not have thought this check through. While I get the initial intention of saying that a browser behaves weirdly if the UI\u002Fpreferred language does not match the first entry in the languages array, this is not necessarily an indicator of something being odd. For example, Brave browser's anti-tracking feature intentionally sets these values to be different and browsers different from Mozilla Firefox are not obligated to have these values equal. At this time I am unaware of what VexTrio tries to accomplish with this check, but I am very open to suggestions.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":906,"end":991,"href":"https:\u002F\u002Fgithub.com\u002Fbrave\u002Fbrave-browser\u002Fissues\u002F24314","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_44":{"__typename":"Paragraph","id":"95e4f1a2ebf9_44","name":"be97","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 2: CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_45":{"__typename":"Paragraph","id":"95e4f1a2ebf9_45","name":"28ed","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_COMPARE_AVAILABLE_WINDOW_SIZE_TO_CURRENT_WINDOW_SIZE() {\n  try {\n    if (window.screen.width \u003C window.screen.availWidth || window.screen.height \u003C window.screen.availHeight) {\n      if (window.screen.width === window.screen.availHeight && window.screen.height === window.screen.availWidth || window.screen.width === window.screen.availHeight + 20 && window.screen.height === window.screen.availWidth) {\n        return \"a2:\" + 0;\n      } else {\n        return \"a2:\" + 1;\n      }\n    } else {\n      return \"a2:\" + 0;\n    }\n  } catch (c) {\n    return \"a2:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_46":{"__typename":"Paragraph","id":"95e4f1a2ebf9_46","name":"5ff6","type":"P","href":null,"layout":null,"metadata":null,"text":"In this second check, VexTrio compares the size of the current window representation against the size of the available screen by checking both the total height to the available height and the total width to the available width.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_47":{"__typename":"Paragraph","id":"95e4f1a2ebf9_47","name":"f7c7","type":"P","href":null,"layout":null,"metadata":null,"text":"To understand this check, let's first understand the values that are compared. According to my research, the values window.screen.availWidth and window.screen.availHeight return the available width and height of the browser window that is available for rendering a webpage. Usually, this is the number of pixels of height\u002Fwidth of the screen minus the value of pixels used for static features of a web browser, like the taskbar, search bar, or other browser UI features.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_48":{"__typename":"Paragraph","id":"95e4f1a2ebf9_48","name":"5bf4","type":"P","href":null,"layout":null,"metadata":null,"text":"In contrast, window.screen.height and window.screen.width show the maximum screen size as configured in the OS screen resolution settings. These values do not take into account any form of statically rendered browser UI features.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_49":{"__typename":"Paragraph","id":"95e4f1a2ebf9_49","name":"aba9","type":"P","href":null,"layout":null,"metadata":null,"text":"Logically, for a normal web browser, it should always be expected that the available Height and available width values are smaller than the height and width values, as every “normal” web browser renders UI features reducing the available width and height. The first part of the above check uses exactly this assumption to check for the browser's legitimacy. If the height and width ratio is bigger than the available height and width value, the check is passed and the function returns a2:0 (check 2 passed).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_50":{"__typename":"Paragraph","id":"95e4f1a2ebf9_50","name":"c234","type":"P","href":null,"layout":null,"metadata":null,"text":"However, if the check is not passed, it can not be immediately said that the browser is not legitimate. A secondary check is done to check if the width value equals the availHeight value (or availHeight value +20 pixels) and the height value equals the availWidth value. I have yet to figure out why these values would be legitimate browser values as well. My initial assumption was that this could have to do with rotating screens where the availHeight might be the width and vice versa. However, an initial test on my Laptops rotating screen did not result in the described behavior as the values automatically adjusted for the rotated screen. Maybe this is different on some mobile devices? Feel free to comment below.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_51":{"__typename":"Paragraph","id":"95e4f1a2ebf9_51","name":"ea28","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 3: CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_52":{"__typename":"Paragraph","id":"95e4f1a2ebf9_52","name":"07e4","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_COMPARE_OSCPU_TO_DEVICE_USERAGENT_STRING() {\n  try {\n    var d = navigator.oscpu;\n    var f = CHECK_DEVICE_IN_USERAGENT_STRING();\n    if (typeof d !== \"undefined\") {\n      d = d.toLowerCase();\n      if (d === \"\" && f === \"Kaios\") {\n        return \"a3:\" + 0;\n      } else if (d.indexOf(\"win\") \u003E= 0 && f !== \"Windows\" && f !== \"Windows Phone\") {\n        return \"a3:\" + 1;\n      } else if (d.indexOf(\"linux\") \u003E= 0 && f !== \"Linux\" && f !== \"Android\") {\n        return \"a3:\" + 1;\n      } else if (d.indexOf(\"mac\") \u003E= 0 && f !== \"Mac\" && f !== \"iOS\") {\n        return \"a3:\" + 1;\n      } else if ((d.indexOf(\"win\") === -1 && d.indexOf(\"linux\") === -1 && d.indexOf(\"mac\") === -1) !== (f === \"Other\")) {\n        return \"a3:\" + 1;\n      } else {\n        return \"a3:\" + 0;\n      }\n    } else {\n      return \"a3:\" + 0;\n    }\n  } catch (g) {\n    return \"a3:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_53":{"__typename":"Paragraph","id":"95e4f1a2ebf9_53","name":"cd56","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 3 is a rather simple comparison check. It makes use of the navigator.oscpu property. This deprecated property returns a string that identifies the OS used for running the browser that is currently visiting a webpage. The table below shows the expected value of the oscpu property together with the OS it's referring to.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ONm-HKMXg1TeMw5VF5l5pA.png":{"__typename":"ImageMetadata","id":"1*ONm-HKMXg1TeMw5VF5l5pA.png","originalHeight":652,"originalWidth":986,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_54":{"__typename":"Paragraph","id":"95e4f1a2ebf9_54","name":"213a","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ONm-HKMXg1TeMw5VF5l5pA.png"},"text":"Figure 1: oscpu values (Source: mozilla.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":32,"end":43,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002Foscpu","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_55":{"__typename":"Paragraph","id":"95e4f1a2ebf9_55","name":"a43d","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, using the navigator.oscpu property and the previously discussed method of retrieving the OS from the UserAgent header, VexTrio has 2 ways of receiving the OS. Check 3 now takes these two methods and compares their result under the condition that navigator.oscpu does not return “undefined”. If the OS returned by navigator.oscpu is the same as the UserAgent value, the check is passed (a3:0). If not, VexTrio assumes the visitor is not legitimate, as it suggests someone is fiddling either with the UserAgent or the Browser.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_56":{"__typename":"Paragraph","id":"95e4f1a2ebf9_56","name":"f1fc","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check4: CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_57":{"__typename":"Paragraph","id":"95e4f1a2ebf9_57","name":"e96f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_OSCPU_NOT_UNDEFINED_AND_BROWSER_NOT_FIREFOX() {\n  try {\n    var c = navigator.oscpu;\n    var d = DETECT_Browser_Type();\n    if (typeof c !== \"undefined\" && d !== \"Firefox\") {\n      return \"a4:\" + 1;\n    } else {\n      return \"a4:\" + 0;\n    }\n  } catch (f) {\n    return \"a4:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_58":{"__typename":"Paragraph","id":"95e4f1a2ebf9_58","name":"3ed3","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, there is one problem with the previously discussed check. The feature “navigator.oscpu” is largely discontinued and currently only still supported by Firefox and Firefox for Android. On all other browsers “navigator.oscpu” returns “undefined”. VexTrio makes use of this check by comparing the return value with the result of the UserAgent Browser Type check (discussed above). If the Browser identified is not Firefox, but the type of the result for navigator.oscpu is not undefined, VexTrio automatically assumes something is wrong. The check is therefore not passed (a4:1).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_59":{"__typename":"Paragraph","id":"95e4f1a2ebf9_59","name":"f224","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 5: CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_60":{"__typename":"Paragraph","id":"95e4f1a2ebf9_60","name":"064b","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_COMPARE_PLATFORM_USERAGENT_DEVICEINUSERAGENT() {\n  try {\n    var c = navigator.platform.toLowerCase();\n    var d = navigator.userAgent.toLowerCase();\n    var f = CHECK_DEVICE_IN_USERAGENT_STRING();\n    if (c === \"\" && f === \"Kaios\") {\n      return \"a5:\" + 0;\n    } else if (d.indexOf(\"maui\") \u003E= 0 && c.indexOf(\"pike\") \u003E= 0) {\n      return \"a5:\" + 0;\n    } else if (d.indexOf(\"j2me\u002Fmidp\") \u003E= 0 && c.indexOf(\"pike\") \u003E= 0) {\n      return \"a5:\" + 0;\n    } else if (c === \"arm\" && f === \"Windows Phone\") {\n      return \"a5:\" + 0;\n    } else if (c.indexOf(\"win\") \u003E= 0 && f !== \"Windows\" && f !== \"Windows Phone\") {\n      return \"a5:\" + 1;\n    } else if ((c.indexOf(\"linux\") \u003E= 0 || c.indexOf(\"android\") \u003E= 0 || c.indexOf(\"pike\") \u003E= 0) && f !== \"Linux\" && f !== \"Android\" && f !== \"Kaios\") {\n      return \"a5:\" + 1;\n    } else if ((c.indexOf(\"mac\") \u003E= 0 || c.indexOf(\"ipad\") \u003E= 0 || c.indexOf(\"ipod\") \u003E= 0 || c.indexOf(\"iphone\") \u003E= 0) && f !== \"Mac\" && f !== \"iOS\") {\n      return \"a5:\" + 1;\n    } else if (c === \"macintel\" && d.indexOf(\"iphone\") \u003E= 0) {\n      return \"a5:\" + 1;\n    } else {\n      var g = c.indexOf(\"win\") \u003C 0 && c.indexOf(\"linux\") \u003C 0 && c.indexOf(\"mac\") \u003C 0 && c.indexOf(\"iphone\") \u003C 0 && c.indexOf(\"pike\") \u003C 0 && c.indexOf(\"ipod\") \u003C 0 && c.indexOf(\"ipad\") \u003C 0;\n      if (g !== (f === \"Other\")) {\n        return \"a5:\" + 1;\n      }\n    }\n    return \"a5:\" + 0;\n  } catch (h) {\n    return \"a5:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_61":{"__typename":"Paragraph","id":"95e4f1a2ebf9_61","name":"5b53","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 5 is again a comparison check. It takes the values of the native browser properties navigator.platform and navigator.useragent plus the value for the previously described function that returns the OS from the received UserAgent. The function then does several checks based on these straightforward values. For example, it checks if the OS returned by navigator.platform contains typical Apple-based platform indicators (Mac, iPad, iPod or iPhone) but there is no mention of a Mac or iOS operating system in the UserAgent, which would be odd as all 4 platforms would either be Mac or iOS based. Hence if true the check would not be passed (a5:1).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_62":{"__typename":"Paragraph","id":"95e4f1a2ebf9_62","name":"87b9","type":"P","href":null,"layout":null,"metadata":null,"text":"I am not going to explain every single check done in this function as they all follow the pattern of comparison-based checks to detect oddities between navigator.platform and UserAgent-based platform value.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_63":{"__typename":"Paragraph","id":"95e4f1a2ebf9_63","name":"fe31","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 6: CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_64":{"__typename":"Paragraph","id":"95e4f1a2ebf9_64","name":"108a","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_PLUGINSUNDEFINED_BUT_USERAGENTOS_NOT_WINDOWS() {\n  try {\n    var c = CHECK_DEVICE_IN_USERAGENT_STRING();\n    if (typeof navigator.plugins === \"undefined\" && c !== \"Windows\" && c !== \"Windows Phone\") {\n      return \"a6:\" + 1;\n    } else {\n      return \"a6:\" + 0;\n    }\n  } catch (d) {\n    return \"a6:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_65":{"__typename":"Paragraph","id":"95e4f1a2ebf9_65","name":"05b5","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 6 is based on the navigator.plugins value. Now, the navigator.plugins property is pretty interesting. According to the Mozilla developer documentation, it has been deprecated in all browsers except for Safari. While on Safari this property returns an actual array of all installed browser plugins and their description, on all other browsers it seems to return a hardcoded list of PDF plugins.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*JsekrJ794lKmR3EmvmpakA.png":{"__typename":"ImageMetadata","id":"1*JsekrJ794lKmR3EmvmpakA.png","originalHeight":627,"originalWidth":982,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_66":{"__typename":"Paragraph","id":"95e4f1a2ebf9_66","name":"3251","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*JsekrJ794lKmR3EmvmpakA.png"},"text":"Figure 2: Deprecation status of navigator.plugins (source: mozilla.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":59,"end":70,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002Fplugins","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_67":{"__typename":"Paragraph","id":"95e4f1a2ebf9_67","name":"e392","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, despite the fact that all browsers that all common browsers seem to have some form of return value for the navigator.plugins property, either a real list of plugins or a list of hardcoded pdf values, check 6 assumes that under Windows and Microsoft Phone, the value could potentially be undefined. I am not aware as to why this should be the case. However, VexTrio checks if the return value of the property is undefined despite the fact that the OS returned by the UserAgent OS check function is not Windows or Windows Phone. In this case, the check fails and a6:1 gets returned, else the check is passed. My best guess is that there are browser automation tools that do not bother to define the navigator.plugins array and could therefore be detected as illegitimate browsers using this check.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_68":{"__typename":"Paragraph","id":"95e4f1a2ebf9_68","name":"a1a8","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 7: CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_69":{"__typename":"Paragraph","id":"95e4f1a2ebf9_69","name":"d4fd","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_BROWSER_BUILDNUMBER_AGAINST_BROWSERTYPE() {\n  try {\n    var c = navigator.productSub;\n    var d = DETECT_Browser_Type();\n    if ((d === \"Chrome\" || d === \"Safari\") && c !== \"20030107\") {\n      return \"a7:\" + 1;\n    } else if (d === \"Opera\" && c !== \"20030107\" && typeof c !== \"undefined\") {\n      return \"a7:\" + 1;\n    } else {\n      return \"a7:\" + 0;\n    }\n  } catch (f) {\n    return \"a7:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_70":{"__typename":"Paragraph","id":"95e4f1a2ebf9_70","name":"3e15","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 7 is a specific check for Chrome, Safari, and Opera Browsers. Again, a quick look at the Mozilla Developers documentation makes this check pretty easy to understand.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":114,"end":127,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002FproductSub","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_71":{"__typename":"Paragraph","id":"95e4f1a2ebf9_71","name":"807b","type":"BQ","href":null,"layout":null,"metadata":null,"text":"The Navigator.productSub read-only property returns the build number of the current browser.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":4,"end":24,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_72":{"__typename":"Paragraph","id":"95e4f1a2ebf9_72","name":"322a","type":"BQ","href":null,"layout":null,"metadata":null,"text":"On IE, this property returns undefined.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_73":{"__typename":"Paragraph","id":"95e4f1a2ebf9_73","name":"cec0","type":"BQ","href":null,"layout":null,"metadata":null,"text":"On Apple Safari and Google Chrome this property always returns 20030107. (additonally also on Opera after release v. 15)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":63,"end":71,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_74":{"__typename":"Paragraph","id":"95e4f1a2ebf9_74","name":"68ca","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 7 of the analyzed VexTrio sample makes use of the fact that Safari, Chrome and Opera return a fixed version number by assuring that if the identified Browser is Chrome, Safari or Opera, the returned property value is indeed the expected version “20030107\". If not, some sort of manipulation is assumed and the check fails with a7:1.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_75":{"__typename":"Paragraph","id":"95e4f1a2ebf9_75","name":"9eb4","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 8: CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_76":{"__typename":"Paragraph","id":"95e4f1a2ebf9_76","name":"ce78","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_LENGTH_OF_EVAL_FUNCTION_AGAINST_BROWSER_TYPE() {\n  try {\n    var c = DETECT_Browser_Type();\n    var d = CHECK_DEVICE_IN_USERAGENT_STRING();\n    var f = eval.toString().length;\n    if (f === 37 && c !== \"Safari\" && c !== \"Firefox\" && c !== \"Other\" && d === \"iOS\" && c !== \"Chrome\") {\n      return \"a8:\" + 1;\n    } else if (f === 39 && c !== \"Internet Explorer\" && c !== \"Other\") {\n      return \"a8:\" + 1;\n    } else if (f === 33 && c !== \"Chrome\" && c !== \"Opera\" && c !== \"Edge\" && c !== \"UC Browser\" && c !== \"Samsung Browser\" && c !== \"Other\" && c !== \"Android Browser\") {\n      return \"a8:\" + 1;\n    } else {\n      return \"a8:\" + 0;\n    }\n  } catch (g) {\n    return \"a8:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_77":{"__typename":"Paragraph","id":"95e4f1a2ebf9_77","name":"76cb","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 8 is quite an interesting one. It relies on the fact that the eval function used in different browsers, when turned into a string, seems to have different lengths. Apparently, there are 3 different lengths for the eval function which can be associated with known browsers. By making use of the previously discussed UserAgent functions and the length of the eval function string, the check assures that if one of the known lengths for the eval function is identified, the browser and OS are the ones that can be directly related to said length. E.g. if the length of the eval function string is 39, the Browser can only be either Microsoft Explorer or “Other”. If the length is 39 but the browser is not one of the 2, then VexTrio assumes it is not looking at a legitimate visitor.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_78":{"__typename":"Paragraph","id":"95e4f1a2ebf9_78","name":"3beb","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 9: CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_79":{"__typename":"Paragraph","id":"95e4f1a2ebf9_79","name":"5f72","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE() {\n  try {\n    var c = DETECT_Browser_Type();\n    var d;\n    try {\n      throw \"a\";\n    } catch (f) {\n      try {\n        f.toSource();\n        d = true;\n      } catch (g) {\n        d = false;\n      }\n    }\n    if (d && c !== \"Firefox\" && c !== \"Other\") {\n      return \"a9:\" + 1;\n    } else {\n      return \"a9:\" + 0;\n    }\n  } catch (h) {\n    return \"a9:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_80":{"__typename":"Paragraph","id":"95e4f1a2ebf9_80","name":"226e","type":"P","href":null,"layout":null,"metadata":null,"text":"Test a9 (which I named “CHECK_Mozilla_UNIQUE_TOSOURCE_FKT_AGAINST_BROWSER_TYPE” for our convenience ^^) is a check that makes use of an obsolete browser function called toSource(). Before its deprecation, this function could be used to convert a function passed as an argument into its source code representation. However, this function is not used by any modern browser anymore. The try\u002Fcatch statement works in a way that if the function is present, d is set to true, else to false. If d is true but the browser is not Firefox or “Other”, VexTrio assumes something is wrong and the test is failed (a9:1). I am not sure why the Firefox exception is made here. Maybe the toSource() function was supported by Firefox up to very recent versions and so sorting them out too would make a lot of potential users\u002Fvictims using older Firefox Versions be sorted out.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_81":{"__typename":"Paragraph","id":"95e4f1a2ebf9_81","name":"c109","type":"P","href":null,"layout":null,"metadata":null,"text":"Anyways, this check is passed for all Browsers that do not implement the function, so all normal browsers should pass the check with a9:0.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_82":{"__typename":"Paragraph","id":"95e4f1a2ebf9_82","name":"b5fd","type":"H4","href":null,"layout":null,"metadata":null,"text":"Intermezzo: Two additional helper functions","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_83":{"__typename":"Paragraph","id":"95e4f1a2ebf9_83","name":"d966","type":"P","href":null,"layout":null,"metadata":null,"text":"Before we continue with the analysis of VexTrio’s Browser fingerprinting Checks, we need to have a look at two additional helper functions used during the next fingerprinting steps.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_84":{"__typename":"Paragraph","id":"95e4f1a2ebf9_84","name":"3bad","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR() {\n  try {\n    var c = document.createElement(\"canvas\");\n    var d = c.getContext(\"webgl\");\n    var e = d.getExtension(\"WEBGL_debug_renderer_info\");\n    var f = d.getParameter(e.UNMASKED_VENDOR_WEBGL);\n    var g = d.getParameter(e.UNMASKED_RENDERER_WEBGL);\n    return [f, g];\n  } catch (h) {\n    return false;\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_85":{"__typename":"Paragraph","id":"95e4f1a2ebf9_85","name":"4321","type":"P","href":null,"layout":null,"metadata":null,"text":"First up we are looking at a very interesting little trick. It makes use of debug functionalities to receive information on a victim. So let’s understand what we are looking at.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_86":{"__typename":"Paragraph","id":"95e4f1a2ebf9_86","name":"ee91","type":"P","href":null,"layout":null,"metadata":null,"text":"The first thing the above function does is to create a new DOM element of type “canvas”. A Canvas element in this context is an HTML element that can be manipulated by either the “canvas scripting API” or the “WebGL API” to create graphics and animations on a webpage.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_87":{"__typename":"Paragraph","id":"95e4f1a2ebf9_87","name":"5d47","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, after creating that element, if we want to start manipulating the canvas from the JavaScript context, we need to access its context. This can be done by the getContext function. The function used by VexTrio does set the drawing context of the newly created canvas element to “WebGL”.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_88":{"__typename":"Paragraph","id":"95e4f1a2ebf9_88","name":"5117","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, the reason for this lies in a certain extension of the WebGL drawing context, called “WEBGL_debug_renderer_info”. This extension of the WebGL API is used for debugging canvas drawings by giving a developer two constant strings representing the current graphics card used to render the website. The constant strings are called UNMASKED_VENDOR_WEBGL and UNMASKED_RENDERER_WEBGL and can be accessed via the getParameter() function of the extension. \nIn other words, by making use of this method, the above function (and thereby VexTrio) is able to identify the graphics card of the potential victim. We will see the usefulness of this information later on.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_89":{"__typename":"Paragraph","id":"95e4f1a2ebf9_89","name":"2489","type":"PRE","href":null,"layout":null,"metadata":null,"text":"var voiceslist = \"\";\nfunction populateVoiceList() {\n  try {\n    var c = speechSynthesis.getVoices();\n    if (c.length !== 0) {\n      var d = \"\";\n      for (var f = 0; f \u003C c.length; f++) {\n        d = d + \" \" + c[f].name;\n      }\n      voiceslist = d;\n    } else {\n      setTimeout(function () {\n        populateVoiceList();\n      }, 5);\n    }\n  } catch (g) {}\n}\npopulateVoiceList();","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_90":{"__typename":"Paragraph","id":"95e4f1a2ebf9_90","name":"d988","type":"P","href":null,"layout":null,"metadata":null,"text":"The second new helper function is all about speechSynthesis features. The function tries to access the speechSynthesis interface of the web browser to get a list of all available voices, iterates over it, and concatenates all names of all available voices into one string. If the list of voices can not be retrieved immediately, it retries the process after a 5-second timeout, most likely to account for potential loading delays in different web browsers. If any error occurs the function exits silently. Note that the function is directly executed on page load. The voicelist string will be used in a later check.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_91":{"__typename":"Paragraph","id":"95e4f1a2ebf9_91","name":"787c","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 10: CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_92":{"__typename":"Paragraph","id":"95e4f1a2ebf9_92","name":"b0fa","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_Compare_DEVICEUSERAGENTSTRING_to_BrowserType_to_WEBGL_DEBUG_TOKENS() {\n  try {\n    var c = CHECK_DEVICE_IN_USERAGENT_STRING();\n    var d = DETECT_Browser_Type();\n    var f = HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR();\n    if (!f) {\n      return \"a10:\" + 0;\n    } else if (c === \"iOS\" && f[0].indexOf(\"Apple\") === -1 && f[0].indexOf(\"Imagination Technologies\") === -1) {\n      return \"a10:\" + 1;\n    } else if (c === \"Mac\" && f[0].indexOf(\"Intel\") === -1 && f[0].indexOf(\"ATI Technologies\") === -1 && f[0].indexOf(\"NVIDIA Corporation\") === -1 && f[0].indexOf(\"Apple\") === -1) {\n      return \"a10:\" + 1;\n    } else if (c === \"Android\" && (f[0] === \"Google Inc. (NVIDIA)\" || f[0] === \"Google Inc. (Intel)\" || f[0] === \"Google Inc. (Google)\" || f[0] === \"Google Inc.\" || f[0].indexOf(\"NVIDIA Corporation\") !== -1)) {\n      return \"a10:\" + 1;\n    } else if (c === \"Windows\" && d === \"Edge\" && f[0].indexOf(\"Microsoft\") === -1) {\n      return \"a10:\" + 1;\n    } else if (c === \"Windows\" && (d === \"Chrome\" || d === \"Firefox\") && f[0].indexOf(\"Google Inc\") === -1) {\n      return \"a10:\" + 1;\n    } else if (f[0].indexOf(\"VMware\") !== -1) {\n      return \"a10:\" + 1;\n    } else {\n      return \"a10:\" + 0;\n    }\n  } catch (g) {\n    return \"a10:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_93":{"__typename":"Paragraph","id":"95e4f1a2ebf9_93","name":"bfac","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 10 is the first to make use of the newly introduced helper function that receives graphiccard details via a WebGL debug property. Certain operating systems are usually bound to certain graphics card vendors. So by using the initially discussed functions to identify the OS and Browser from the User-agent string, VexTrio compares the identified operating system to the graphic card vendor. As an example, if the identified OS is Android, the check assures that the graphics card vendor (f[0]) is either “Google Inc. (NVIDIA)”, “Google Inc. (Intel)”, “Google Inc. (Google)”, “Google Inc.” or contains the string “NVIDIA Corporation”. If none of these assumed values is given, the check assumes something is wrong and returns a10:1. Similar checks are done for iOS, Mac and Windows and their respective assumed graphics card vendor values.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_94":{"__typename":"Paragraph","id":"95e4f1a2ebf9_94","name":"fe84","type":"P","href":null,"layout":null,"metadata":null,"text":"Additionally, before the check is passed, a check for the presence of the string “VMware” in the graphics card vendor value is done, to ensure that the visiting browser is not running inside a VMWare virtual machine. This check is most likely done to evade the prying eyes of malware analysts trying to analyze the VexTrio malware in a virtual environment.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_95":{"__typename":"Paragraph","id":"95e4f1a2ebf9_95","name":"1475","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 11: CHECK_Webdriver_in_Navigator_Interface","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_96":{"__typename":"Paragraph","id":"95e4f1a2ebf9_96","name":"3987","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_Webdriver_in_Navigator_Interface() {\n  try {\n    var c;\n    browser = DETECT_Browser_Type();\n    os = CHECK_DEVICE_IN_USERAGENT_STRING();\n    c = \"webdriver\" in navigator && navigator.webdriver;\n    if (c) {\n      return \"a11:\" + 1;\n    } else {\n      return \"a11:\" + 0;\n    }\n  } catch (d) {\n    return \"a11:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_97":{"__typename":"Paragraph","id":"95e4f1a2ebf9_97","name":"8f79","type":"P","href":null,"layout":null,"metadata":null,"text":"The next check in VexTrio’s arsenal is rather straightforward. It is probably a web equivalent for the “IsDebuggerPresent” Windows API call commonly used by malicious software to simply ask the system it executes on for the presence of a debugger. To understand the function, let’s first have a look at the Mozilla developer documentation of the navigator.webdriver property.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*aXyzVAoLKF2IG2UJkYYM6Q.png":{"__typename":"ImageMetadata","id":"1*aXyzVAoLKF2IG2UJkYYM6Q.png","originalHeight":630,"originalWidth":992,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_98":{"__typename":"Paragraph","id":"95e4f1a2ebf9_98","name":"2ebf","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*aXyzVAoLKF2IG2UJkYYM6Q.png"},"text":"Figure 3: Navigator.webdriver property docu (Source: mozilla.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":53,"end":64,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002Fwebdriver","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_99":{"__typename":"Paragraph","id":"95e4f1a2ebf9_99","name":"5bfd","type":"P","href":null,"layout":null,"metadata":null,"text":"As you can see, the property is a simple boolean value that returns true if the browser is started in conjunction with different flags commonly used in automation (or debugging) scenarios. VexTrio simply asks the browser: “Hey are you running automated?” and if true, the visitor is not legitimate and fails the check (a11:1).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_100":{"__typename":"Paragraph","id":"95e4f1a2ebf9_100","name":"6f70","type":"H4","href":null,"layout":null,"metadata":null,"text":"Intermezzo 2: getPermissionStatus function","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_101":{"__typename":"Paragraph","id":"95e4f1a2ebf9_101","name":"cfd1","type":"P","href":null,"layout":null,"metadata":null,"text":"The next two checks rely on the set of browser permissions given by the browser to a visited webpage. As you probably know, there are websites with a certain set of features that require additional permissions, like accessing the device's microphone, webcam or sending notifications as Pop-Up messages. Most modern browsers have a default behavior on how to handle such permission requests by a webpage. Here is an example of the default permissions given to the website “medium.com” by Google Chrome.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*0onp55jO8qvCM0TjjoxQ7A.png":{"__typename":"ImageMetadata","id":"1*0onp55jO8qvCM0TjjoxQ7A.png","originalHeight":827,"originalWidth":902,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_102":{"__typename":"Paragraph","id":"95e4f1a2ebf9_102","name":"1e83","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*0onp55jO8qvCM0TjjoxQ7A.png"},"text":"Figure 4: Partial set of browser permissions given to medium.com by Google Chrome","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_103":{"__typename":"Paragraph","id":"95e4f1a2ebf9_103","name":"dc98","type":"P","href":null,"layout":null,"metadata":null,"text":"As you can see, most permissions are set to “Ask” by default, meaning if the website requests permission, the browser will ask the user via a Pop-Up, if the webpage should be allowed to get the required permission or not. And the next thing VexTrio does is to work with those permissions.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_104":{"__typename":"Paragraph","id":"95e4f1a2ebf9_104","name":"5a11","type":"PRE","href":null,"layout":null,"metadata":null,"text":"var permissions = false;\ngetPermissionStatus();\nfunction getPermissionStatus() {\n  try {\n    browser = DETECT_Browser_Type();\n    if (browser !== \"Samsung Browser\" && browser !== \"Firefox\") {\n      navigator.permissions.query({\n        name: \"notifications\"\n      }).then(function (c) {\n        if (Notification.permission === \"denied\" && c.state === \"prompt\") {\n          permissions = true;\n        } else {\n          permissions = false;\n        }\n      });\n      return permissions;\n    }\n  } catch (c) {}\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_105":{"__typename":"Paragraph","id":"95e4f1a2ebf9_105","name":"4052","type":"P","href":null,"layout":null,"metadata":null,"text":"More specifically, if VexTrio identifies the Browser as not being Firefox and not being Samsung Browser, it queries the “notifications” permission using the “navigator.permissions.query()” method. Now, instead of returning the result straight away, the query() method returns a “promise” object. A promise object is an object that allows the use of asynchronous operations in JavaScript. Basically, you define an object before knowing that the object will have a result and what the result will be. Then you can make use of “.then” on this promise to define actions that will be taken once the asynchronous operation has finished, depending on the state it has finished in. The possible result states to handle are “fulfilled” or “rejected”. However, VexTrio does only define an action for a successful query operation (fulfilled). In case of a fulfilled query, the result will be stored in the “c” variable. In the case of this function, “c” is going to be a PermissionStatus object, which has the following properties:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*6dOpfyfGcnd7CM5t93DyBw.png":{"__typename":"ImageMetadata","id":"1*6dOpfyfGcnd7CM5t93DyBw.png","originalHeight":697,"originalWidth":1030,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_106":{"__typename":"Paragraph","id":"95e4f1a2ebf9_106","name":"4ae6","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*6dOpfyfGcnd7CM5t93DyBw.png"},"text":"Figure 5: Properties of the PermissionStatus object (Source: mozzilla.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":61,"end":73,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FPermissionStatus","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_107":{"__typename":"Paragraph","id":"95e4f1a2ebf9_107","name":"867f","type":"P","href":null,"layout":null,"metadata":null,"text":"This object will then be used together with the return value of “Notifications.permission” to assign a boolean value to the “permissions” variable. The following if-statement is responsible for this assignment:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_108":{"__typename":"Paragraph","id":"95e4f1a2ebf9_108","name":"7f4f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"if (Notification.permission === \"denied\" && c.state === \"prompt\") {\n          permissions = true;\n        } else {\n          permissions = false;","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_109":{"__typename":"Paragraph","id":"95e4f1a2ebf9_109","name":"dae1","type":"P","href":null,"layout":null,"metadata":null,"text":"Now, I am still not 100% certain but I believe that the condition which sets the permissions variable to true is only ever met if something is odd about the relation between the permission property of the Notification object and the state of the result of the query for the PermissionStatus object. Under normal circumstances one of the following should be the case:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_110":{"__typename":"Paragraph","id":"95e4f1a2ebf9_110","name":"2a27","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Notification.permission === “default” && c.state === “prompt”","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_111":{"__typename":"Paragraph","id":"95e4f1a2ebf9_111","name":"f008","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Notification.permission === “denied” && c.state === “denied”","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_112":{"__typename":"Paragraph","id":"95e4f1a2ebf9_112","name":"1698","type":"ULI","href":null,"layout":null,"metadata":null,"text":"Notification.permission === “granted” && c.state === “granted”","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_113":{"__typename":"Paragraph","id":"95e4f1a2ebf9_113","name":"bb7a","type":"P","href":null,"layout":null,"metadata":null,"text":"There seems to be no legitimate way where a Chromium-based browser has the “denied” && “prompt” combination set.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_114":{"__typename":"Paragraph","id":"95e4f1a2ebf9_114","name":"f231","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 12: CHECK_Permission_DENIED_in_State_Prompt","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_115":{"__typename":"Paragraph","id":"95e4f1a2ebf9_115","name":"bc96","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_Permission_DENIED_in_State_Prompt() {\n  try {\n    if (permissions) {\n      return \"a12:\" + 1;\n    } else {\n      return \"a12:\" + 0;\n    }\n  } catch (c) {\n    return \"a12:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_116":{"__typename":"Paragraph","id":"95e4f1a2ebf9_116","name":"434f","type":"P","href":null,"layout":null,"metadata":null,"text":"Consequently, the next Check done by VexTrio fails exactly when “permissions” was set to true.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_117":{"__typename":"Paragraph","id":"95e4f1a2ebf9_117","name":"715b","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 13: DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_118":{"__typename":"Paragraph","id":"95e4f1a2ebf9_118","name":"85c8","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_NAVIGATORPERMISSIONS_PROPERTIES_ODD() {\n  try {\n    var c = window.navigator.permissions;\n    if (c.query.toString().replace(\u002F\\s+\u002Fg, \"\") !== \"function query() { [native code] }\".replace(\u002F\\s+\u002Fg, \"\")) {\n      return \"a13:\" + 1;\n    }\n    if (c.query.toString.toString().replace(\u002F\\s+\u002Fg, \"\") !== \"function toString() { [native code] }\".replace(\u002F\\s+\u002Fg, \"\")) {\n      return \"a13:\" + 1;\n    }\n    if (c.query.toString.hasOwnProperty(\"[[Handler]]\") && c.query.toString.hasOwnProperty(\"[[Target]]\") && c.query.toString.hasOwnProperty(\"[[IsRevoked]]\")) {\n      return \"a13:\" + 1;\n    }\n    if (c.hasOwnProperty(\"query\")) {\n      return \"a13:\" + 1;\n    }\n    return \"a13:\" + 0;\n  } catch (d) {\n    return \"a13:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_119":{"__typename":"Paragraph","id":"95e4f1a2ebf9_119","name":"3a38","type":"P","href":null,"layout":null,"metadata":null,"text":"The next check again involves browser permissions, however, in this case VexTrio is more interested in the code implementation behind the involved functions. First it gets the permissions object of the current window. Then it turns the previously discussed “query” method into a string representation using the .toString() method. This method should return a string representation of the object. Interestingly enough, it rather returns the following string: “function toString() { [native code] }”. I replicated this behavior from the web developer console:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*K9-eVxv2ZK7f-UF5ucvYzA.png":{"__typename":"ImageMetadata","id":"1*K9-eVxv2ZK7f-UF5ucvYzA.png","originalHeight":61,"originalWidth":402,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_120":{"__typename":"Paragraph","id":"95e4f1a2ebf9_120","name":"8fd9","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*K9-eVxv2ZK7f-UF5ucvYzA.png"},"text":"Figure 6: native code result","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_121":{"__typename":"Paragraph","id":"95e4f1a2ebf9_121","name":"ae69","type":"P","href":null,"layout":null,"metadata":null,"text":"This check is likely done to check that the query function has not been manipulated. To cite the official documentation: “If the toString() method is called on built-in function objects, a function created by Function.prototype.bind(), or other non-JavaScript functions, then toString() returns a native function string”.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":129,"end":139,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":209,"end":234,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":276,"end":286,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":97,"end":119,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FObject\u002FtoString","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":209,"end":234,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FFunction\u002Fbind","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":297,"end":319,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_122":{"__typename":"Paragraph","id":"95e4f1a2ebf9_122","name":"ea59","type":"P","href":null,"layout":null,"metadata":null,"text":"The same is done with the “toString()” function itself. Under normal browser conditions the same “toString(){ [native code] }” result is expected. If any of the 2 toString() methods do not have the expected result, the check is failed (a13:1).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_123":{"__typename":"Paragraph","id":"95e4f1a2ebf9_123","name":"4043","type":"P","href":null,"layout":null,"metadata":null,"text":"Additionally, a second method is used to check for the ownership of certain properties. To cite the documentation:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_124":{"__typename":"Paragraph","id":"95e4f1a2ebf9_124","name":"7f48","type":"BQ","href":null,"layout":null,"metadata":null,"text":"The hasOwnProperty() method returns true if the specified property is a direct property of the object — even if the value is null or undefined. The method returns false if the property is inherited, or has not been declared at all.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":4,"end":20,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":36,"end":40,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":125,"end":129,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":133,"end":142,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":163,"end":168,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_125":{"__typename":"Paragraph","id":"95e4f1a2ebf9_125","name":"531e","type":"P","href":null,"layout":null,"metadata":null,"text":"The fingerprinting check done now is to assure that the properties “[[Handler]]”, “[[Target]]” and “[[IsRevoked]]” of the .toString() value of the query method are not owned by the object itself. The same is checked for the query() function itself in its relation to the permissions object.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_126":{"__typename":"Paragraph","id":"95e4f1a2ebf9_126","name":"e063","type":"P","href":null,"layout":null,"metadata":null,"text":"I must admit that the reasoning for this check is not completely clear to me as it involves deep knowledge of how the methods converted into strings in a browser javascript context behave. However, it is safe to assume that this is done to assure that all the before-mentioned properties are as expected and nothing indicates that some sort of browser automation or browser virtualization has intervened with the native properties and the browser is a “legitimate visitor\u002Fvictim” for VexTrio. Failing these checks would lead to the expected return value “a13:1\" indicating that the visiting browser is not to be trusted by VexTrio.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_127":{"__typename":"Paragraph","id":"95e4f1a2ebf9_127","name":"f861","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 14: CHECK_SPOOKYOSCHECK_likely_Devtools","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_128":{"__typename":"Paragraph","id":"95e4f1a2ebf9_128","name":"a154","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_SPOOKYOSCHECK_likely_Devtools() {\n  try {\n    os = CHECK_DEVICE_IN_USERAGENT_STRING();\n    browser = DETECT_Browser_Type();\n    if (browser === \"Chrome\" && os !== \"iOS\") {\n      var c = 0;\n      var d = \u002F.\u002F;\n      d.toString = function () {\n        c++;\n        return \"spooky\";\n      };\n      console.debug(d);\n      if (c \u003E 1) {\n        return \"a14:\" + 1;\n      } else {\n        return \"a14:\" + 0;\n      }\n    } else {\n      return \"a14:\" + 0;\n    }\n  } catch (f) {\n    return \"a14:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_129":{"__typename":"Paragraph","id":"95e4f1a2ebf9_129","name":"ab6f","type":"P","href":null,"layout":null,"metadata":null,"text":"The “Spooky Check” is probably one of those that caused me the most headaches when analyzing VexTrio’s fingerprinting methods. And until now, I can only really explain it by making an assumption.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_130":{"__typename":"Paragraph","id":"95e4f1a2ebf9_130","name":"7c7a","type":"P","href":null,"layout":null,"metadata":null,"text":"The check targets the Google Chrome browser under the condition that it is not installed on an iOS device. In case this is true, the check creates a regular expression object with the value “\u002F.\u002F”. The toString method of this object is overridden to increment a counter c each time the toString method is called and then returns a string “spooky”.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_131":{"__typename":"Paragraph","id":"95e4f1a2ebf9_131","name":"4156","type":"P","href":null,"layout":null,"metadata":null,"text":"The object d is then logged to the console using console.debug(d). The trick here is that the console.debug() function makes use of the overwritten toString() function to print the object to the console. By doing so, the counter c is increased by 1. However, if the counter is increased by more than 1, VexTrio assumes foul play and the check is failed. Sadly I don’t have an explanation under which circumstances the counter should be increased by more than one. I assume that this could happen in some sort of virtual\u002Fcoding environment, or if someone hooks the debug function for some additional functionality. I would appreciate it if someone with more JavaScript and browser automation knowledge would step up to explain it. I will make sure to add the missing information to this blog post if available.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_132":{"__typename":"Paragraph","id":"95e4f1a2ebf9_132","name":"2a95","type":"P","href":null,"layout":null,"metadata":null,"text":"If the toString function is not called more than once, or if the visitor is not using Chrome or is using Chrome under iOS, the test is passed.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_133":{"__typename":"Paragraph","id":"95e4f1a2ebf9_133","name":"8812","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 15: DETECT_Phantom_in_Window","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_134":{"__typename":"Paragraph","id":"95e4f1a2ebf9_134","name":"2993","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_Phantom_in_Window() {\n  try {\n    function c() {\n      return [\"callPhantom\" in window, \"_phantom\" in window, \"phantom\" in window];\n    }\n    result = c().some(function (d) {\n      return d;\n    });\n    if (result) {\n      return \"a15:\" + 1;\n    } else {\n      return \"a15:\" + 0;\n    }\n  } catch (d) {\n    return \"a15:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_135":{"__typename":"Paragraph","id":"95e4f1a2ebf9_135","name":"82a4","type":"P","href":null,"layout":null,"metadata":null,"text":"Luckily we continue with a way simpler check, which is to make sure that the VexTrio code is not executed in a phantomjs context. PhantomJS is a headless web browser scriptable with JavaScript. To make sure VexTrio is not executed in the context of phantomjs, the code checks if the own DOM contains any of the following properties:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":111,"end":120,"href":"https:\u002F\u002Fphantomjs.org\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_136":{"__typename":"Paragraph","id":"95e4f1a2ebf9_136","name":"e35a","type":"ULI","href":null,"layout":null,"metadata":null,"text":"callPhantom: A method that used to be provided by PhantomJS for invoking native code from the script.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_137":{"__typename":"Paragraph","id":"95e4f1a2ebf9_137","name":"6e93","type":"ULI","href":null,"layout":null,"metadata":null,"text":"_phantom: An older, now deprecated property that was once used by PhantomJS.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_138":{"__typename":"Paragraph","id":"95e4f1a2ebf9_138","name":"d74a","type":"ULI","href":null,"layout":null,"metadata":null,"text":"phantom: Represents the PhantomJS scripting API.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_139":{"__typename":"Paragraph","id":"95e4f1a2ebf9_139","name":"20aa","type":"P","href":null,"layout":null,"metadata":null,"text":"If any of these is present, the boolean value “true” will be logged to the returned array. Else the value “false” is logged. Then the .some() function is used to execute a function in case any of the returned values is true. In this case, the check fails as VexTrio registered obvious signs of emulation using phantomjs.\nElse the check is passed (a15:0)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_140":{"__typename":"Paragraph","id":"95e4f1a2ebf9_140","name":"d87c","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 16: DETECT_BROWSERAUTOMATION_via_domElements","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_141":{"__typename":"Paragraph","id":"95e4f1a2ebf9_141","name":"9d67","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_BROWSERAUTOMATION_via_domElements() {\n  try {\n    var c = [\"__webdriver_evaluate\", \"__selenium_evaluate\", \"__webdriver_script_function\", \"__webdriver_script_func\", \"__webdriver_script_fn\", \"__fxdriver_evaluate\", \"__driver_unwrapped\", \"__webdriver_unwrapped\", \"__driver_evaluate\", \"__selenium_unwrapped\", \"__fxdriver_unwrapped\"];\n    var d = [\"webdriver\", \"_phantom\", \"__nightmare\", \"_selenium\", \"callPhantom\", \"callSelenium\", \"_Selenium_IDE_Recorder\", \"__stopAllTimers\"];\n    for (var f in d) {\n      var g = d[f];\n      if (window[g]) {\n        return \"a16:\" + 1;\n      }\n    }\n    ;\n    for (var h in c) {\n      var i = c[h];\n      if (window.document[i]) {\n        return \"a16:\" + 1;\n      }\n    }\n    ;\n    try {\n      if (window.external && window.external.toString() && window.external.toString().indexOf(\"Sequentum\") != -1) {\n        return \"a16:\" + 1;\n      }\n      if (window.document.documentElement.getAttribute(\"selenium\")) {\n        return \"a16:\" + 1;\n      }\n      if (window.document.documentElement.getAttribute(\"webdriver\")) {\n        return \"a16:\" + 1;\n      }\n      if (window.document.documentElement.getAttribute(\"driver\")) {\n        return \"a16:\" + 1;\n      }\n    } catch (j) {\n      \"a16:\" + 0;\n    }\n    return \"a16:\" + 0;\n  } catch (k) {\n    return \"a16:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"dart"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_142":{"__typename":"Paragraph","id":"95e4f1a2ebf9_142","name":"0837","type":"P","href":null,"layout":null,"metadata":null,"text":"The next Fingerprinting function checks for the existence of all kinds of window and dom properties which could indicate the use of browser automation. This includes checks for Selenium, Webdriver, PhantomJS andNightmare. To do so, the first step is to check if any of the values from the array:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":177,"end":185,"href":"https:\u002F\u002Fwww.selenium.dev\u002Fdocumentation\u002Fwebdriver\u002F","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":187,"end":196,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FWebDriver","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":198,"end":207,"href":"https:\u002F\u002Fphantomjs.org","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":211,"end":220,"href":"https:\u002F\u002Fgithub.com\u002Fsegment-boneyard\u002Fnightmare","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_143":{"__typename":"Paragraph","id":"95e4f1a2ebf9_143","name":"652c","type":"PRE","href":null,"layout":null,"metadata":null,"text":"[\"webdriver\", \"_phantom\", \"__nightmare\", \"_selenium\", \"callPhantom\", \"callSelenium\", \"_Selenium_IDE_Recorder\", \"__stopAllTimers\"];","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_144":{"__typename":"Paragraph","id":"95e4f1a2ebf9_144","name":"c908","type":"P","href":null,"layout":null,"metadata":null,"text":"are present as window properties. If so, the check has failed because all these are clear signs for automation. One could ask themselves why Check 15 is done after all since all but one value for PhantomJS detection is also checked in Check 16. But I guess someone just copy-pasted code here without really thinking about it.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_145":{"__typename":"Paragraph","id":"95e4f1a2ebf9_145","name":"67cb","type":"P","href":null,"layout":null,"metadata":null,"text":"Then, the check continues with another array of “bad strings”:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_146":{"__typename":"Paragraph","id":"95e4f1a2ebf9_146","name":"e535","type":"PRE","href":null,"layout":null,"metadata":null,"text":"[\"__webdriver_evaluate\", \"__selenium_evaluate\", \"__webdriver_script_function\", \"__webdriver_script_func\", \"__webdriver_script_fn\", \"__fxdriver_evaluate\", \"__driver_unwrapped\", \"__webdriver_unwrapped\", \"__driver_evaluate\", \"__selenium_unwrapped\", \"__fxdriver_unwrapped\"];","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_147":{"__typename":"Paragraph","id":"95e4f1a2ebf9_147","name":"6937","type":"P","href":null,"layout":null,"metadata":null,"text":"this time making sure that none of these appear as a property of the DOM copy saved in the windows.document object. Again, all values are associated with the previously mentioned automation tools. If any exists, the check fails and a16:1 is returned.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_148":{"__typename":"Paragraph","id":"95e4f1a2ebf9_148","name":"7303","type":"P","href":null,"layout":null,"metadata":null,"text":"After doing these rather simple string-based checks, 4 more checks are done. \nThe first one checks for the existence of a property of window.external which when turned into a string contains the word: “Sequentum”. This is likely an attempt to block automation solutions and web scraping by https:\u002F\u002Fwww.sequentum.com\u002F.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":290,"end":316,"href":"https:\u002F\u002Fwww.sequentum.com\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_149":{"__typename":"Paragraph","id":"95e4f1a2ebf9_149","name":"37e5","type":"P","href":null,"layout":null,"metadata":null,"text":"Then we three see checks for the values “selenium”, “webdriver” and “driver” respectively. For each value, the fingerprinting check assures that it is not given as an attribute of the web page's root element (normally the first \u003Chtml\u003E tag). An example that would get detected is:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_150":{"__typename":"Paragraph","id":"95e4f1a2ebf9_150","name":"0798","type":"PRE","href":null,"layout":null,"metadata":null,"text":"\u003C!DOCTYPE html\u003E\n\u003Chtml lang=\"en\" driver=\"true\"\u003E\n\u003Chead\u003E\n    \u003Ctitle\u003ESample Page with Driver Attribute\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n    \u003Cheader\u003E\n        \u003Ch1\u003EWelcome to My Page\u003C\u002Fh1\u003E\n    \u003C\u002Fheader\u003E\n    \u003Cmain\u003E\n        \u003Cp\u003EThis is a simple HTML page to demonstrate the \"driver\" attribute on the root element.\u003C\u002Fp\u003E\n    \u003C\u002Fmain\u003E\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"xml"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_151":{"__typename":"Paragraph","id":"95e4f1a2ebf9_151","name":"a120","type":"P","href":null,"layout":null,"metadata":null,"text":"Again, if any of the attributes is present the check is failed (a16:1). \nIf none of the previously described checks fail, the check is passed.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_152":{"__typename":"Paragraph","id":"95e4f1a2ebf9_152","name":"7fce","type":"P","href":null,"layout":null,"metadata":null,"text":"All parts of this check are well known. Some mentions:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_153":{"__typename":"Paragraph","id":"95e4f1a2ebf9_153","name":"b516","type":"ULI","href":null,"layout":null,"metadata":null,"text":"https:\u002F\u002Fmedium.com\u002F@browserscan\u002Fbrowser-fingerprints-101-automation-detection-322ac81156ae","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":0,"end":90,"href":"https:\u002F\u002Fmedium.com\u002F@browserscan\u002Fbrowser-fingerprints-101-automation-detection-322ac81156ae","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_154":{"__typename":"Paragraph","id":"95e4f1a2ebf9_154","name":"d6e1","type":"ULI","href":null,"layout":null,"metadata":null,"text":"https:\u002F\u002Fchris124567.github.io\u002F2020-07-22-reverse-engineering-distil-networks-antibot-javascript\u002F","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":0,"end":96,"href":"https:\u002F\u002Fchris124567.github.io\u002F2020-07-22-reverse-engineering-distil-networks-antibot-javascript\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_155":{"__typename":"Paragraph","id":"95e4f1a2ebf9_155","name":"382f","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 17: DETECT_PHANTOMAS","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_156":{"__typename":"Paragraph","id":"95e4f1a2ebf9_156","name":"7dcf","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_PHANTOMAS() {\n  try {\n    function c() {\n      return [\"__phantomas\" in window];\n    }\n    result = c().some(function (d) {\n      return d;\n    });\n    if (result) {\n      return \"a17:\" + 1;\n    } else {\n      return \"a17:\" + 0;\n    }\n  } catch (d) {\n    return \"a17:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_157":{"__typename":"Paragraph","id":"95e4f1a2ebf9_157","name":"60b9","type":"P","href":null,"layout":null,"metadata":null,"text":"Well, 3rd time is a charm. The same method as Check15 and Check16 is used to check for the existence of the string “__phantomas” as a window property. If yes the check is failed, if no it is passed.\nThis is a detection method of the phantomas tool.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":233,"end":242,"href":"https:\u002F\u002Fgithub.com\u002Fmacbre\u002Fphantomas","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_158":{"__typename":"Paragraph","id":"95e4f1a2ebf9_158","name":"970b","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 18: DETECT_Selenium_DOM_based","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_159":{"__typename":"Paragraph","id":"95e4f1a2ebf9_159","name":"4383","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_Selenium_DOM_based() {\n  try {\n    for (var c in window.document) {\n      if (c.match(\u002F\\$[a-z]dc_\u002F) && window.document[c].cache_) {\n        return \"a18:\" + 1;\n      }\n    }\n    return \"a18:\" + 0;\n  } catch (d) {\n    return \"a18:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_160":{"__typename":"Paragraph","id":"95e4f1a2ebf9_160","name":"9662","type":"P","href":null,"layout":null,"metadata":null,"text":"This Check was a bit more difficult to understand, however this mainly results from the regular expression being used and my lack of knowledge of what it could be searching for. The overall functionality however is quite simple. VexTrio uses a regular expression to search over all properties of the window.document. If the name of the property matches the regex and additionally, the property has a subproperty .cache_ then the check is failed. (This second part of the check hints that the searched property is assumed to be an object itself.)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_161":{"__typename":"Paragraph","id":"95e4f1a2ebf9_161","name":"47f0","type":"P","href":null,"layout":null,"metadata":null,"text":"Now the difficulty is to understand what the RegEx is actually looking for. \nThe RegEx matches on strings that start with a “$” sign, followed by any lowercase letter a-z, followed by “dc_”.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_162":{"__typename":"Paragraph","id":"95e4f1a2ebf9_162","name":"4207","type":"P","href":null,"layout":null,"metadata":null,"text":"Well, I haven’t encountered a real mention of this regular expression in the context of browser fingerprinting. I am sure somewhere out there is the answer to this secret, but Google is not the best search engine to search regular expressions with.\nAnyhow, I asked some people with more knowledge of JavaScript and they suggested it is most likely another method to detect the Selenium browser automation toolkit.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_163":{"__typename":"Paragraph","id":"95e4f1a2ebf9_163","name":"c47a","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 19: DETECT_NodeJS_Buffer","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_164":{"__typename":"Paragraph","id":"95e4f1a2ebf9_164","name":"9a7f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_NodeJS_Buffer() {\n  try {\n    if (window.Buffer !== undefined) {\n      return \"a19:\" + 1;\n    } else {\n      return \"a19:\" + 0;\n    }\n  } catch (c) {\n    return \"a19:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_165":{"__typename":"Paragraph","id":"95e4f1a2ebf9_165","name":"d5f3","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 19 is straightforward. If the window.Buffer property is defined, the check is failed and the visitor is not legitimate in the eyes of VexTrio.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_166":{"__typename":"Paragraph","id":"95e4f1a2ebf9_166","name":"82b8","type":"P","href":null,"layout":null,"metadata":null,"text":"Googling for the window.Buffer in correlation to JavaScript returns many results hinting at the NodeJS framework. I, therefore, believe that this Check aims to detect the NodeJS framework and visitors using NodeJS to open the VexTrio landing page, hinting at researchers, browser automation or webscraping frameworks making use of NodeJS.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_167":{"__typename":"Paragraph","id":"95e4f1a2ebf9_167","name":"98e5","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 20: DETECT_Chromium_based_automation_driver","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_168":{"__typename":"Paragraph","id":"95e4f1a2ebf9_168","name":"f022","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function DETECT_Chromium_based_automation_driver() {\n  try {\n    if (window.domAutomation || window.domAutomationController) {\n      return \"a20:\" + 1;\n    } else {\n      return \"a20:\" + 0;\n    }\n  } catch (c) {\n    return \"a20:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_169":{"__typename":"Paragraph","id":"95e4f1a2ebf9_169","name":"fd05","type":"P","href":null,"layout":null,"metadata":null,"text":"Check 20 detects the presence of a webdriver by checking for the existence of the window.domAutomation or the window.domAutomationController properties. If any of these two is present the browser is likely automated and the check is failed, else it is passed (a20:0).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_170":{"__typename":"Paragraph","id":"95e4f1a2ebf9_170","name":"115c","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 21: CHECK_setTimeout_Integrity && Check 22: CHECK_setInterval_Integrity","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_171":{"__typename":"Paragraph","id":"95e4f1a2ebf9_171","name":"bfb5","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_setTimeout_Integrity() {\n  try {\n    if (setTimeout.toString().replace(\u002F\\s+\u002Fg, \"\") !== \"function setTimeout() { [native code] }\".replace(\u002F\\s\u002Fg, \"\")) {\n      return \"a21:\" + 1;\n    } else {\n      return \"a21:\" + 0;\n    }\n  } catch (c) {\n    return \"a21:e\";\n  }\n}\n\nfunction CHECK_setInterval_Integrity() {\n  try {\n    if (setInterval.toString().replace(\u002F\\s+\u002Fg, \"\") !== \"function setInterval() { [native code] }\".replace(\u002F\\s\u002Fg, \"\")) {\n      return \"a22:\" + 1;\n    } else {\n      return \"a22:\" + 0;\n    }\n  } catch (c) {\n    return \"a22:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_172":{"__typename":"Paragraph","id":"95e4f1a2ebf9_172","name":"85e5","type":"P","href":null,"layout":null,"metadata":null,"text":"Another check is based on the toString() method as described in Check13. This time it is used to check that the setTimeout function is not manipulated. This would likely detect any virtualization solution or automation framework that fiddles with the setTimout() function.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_173":{"__typename":"Paragraph","id":"95e4f1a2ebf9_173","name":"f27a","type":"P","href":null,"layout":null,"metadata":null,"text":"The same is also done with the setInterval function in Check 22.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_174":{"__typename":"Paragraph","id":"95e4f1a2ebf9_174","name":"260e","type":"P","href":null,"layout":null,"metadata":null,"text":"If any of the functions does not return the expected { native code } string, the check is failed.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_175":{"__typename":"Paragraph","id":"95e4f1a2ebf9_175","name":"2ab5","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 23: CHECK_XMLHTTPRequest_1 and Check 24: CHECK_XMLHTTPRequest_2","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_176":{"__typename":"Paragraph","id":"95e4f1a2ebf9_176","name":"0cc9","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_XMLHTTPRequest_1() {\n  try {\n    var c = \"kl\";\n    var f = \"IsCO\";\n    var g = \"RSRequest\";\n    var h = c + f + g;\n    if (window.XMLHttpRequest.prototype.open.toString().indexOf(h) !== -1) {\n      return \"a42:\" + 1;\n    } else {\n      return \"a42:\" + 0;\n    }\n  } catch (i) {\n    return \"a42:e\";\n  }\n}\nfunction CHECK_XMLHTTPRequest_2() {\n  try {\n    var c = \"klI\";\n    var d = \"sCOR\";\n    var f = \"SRequest\";\n    var g = c + d + f;\n    if (window.XMLHttpRequest.prototype.send.toString().indexOf(g) !== -1) {\n      return \"a43:\" + 1;\n    } else {\n      return \"a43:\" + 0;\n    }\n  } catch (h) {\n    return \"a43:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_177":{"__typename":"Paragraph","id":"95e4f1a2ebf9_177","name":"9126","type":"P","href":null,"layout":null,"metadata":null,"text":"These next two checks involve the handling of XMLHttpRequests. More specifically, they ensure that the XMLHttpRequests’ open() and send() methods do not contain the value “klISCORSRequest” when turned into a string. Now, while I can tell you that XMLHttpRequests are a way of loading WebContent dynamically on an already loaded page. I can also tell you that the send() method is used to send a request to a server, while the open() method is used to initialize or reopen a request. I can tell you that CORS is short for Cross-Origin Resource Sharing and has something to do with how and if servers are allowed to access content from external HTTP requests. What I sadly can’t tell you is where the “klISCORSRequest” property is used. Googling the term leads to zero results. The official documentation of the CORS protocol and XMLHttpRequests have no reference to it as well. The only sure thing is that if “klISCORSRequest” is encountered in the properties of the XMLHttpRequest send() and open() methods, then VexTrio does not like it. The corresponding check is failed and a42:1\u002Fa43:1 is returned.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":247,"end":262,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FXMLHttpRequest","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":426,"end":432,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FXMLHttpRequest\u002Fopen","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":521,"end":550,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FHTTP\u002FCORS","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":810,"end":823,"href":"https:\u002F\u002Ffetch.spec.whatwg.org\u002F#cors-protocol","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":828,"end":843,"href":"https:\u002F\u002Fxhr.spec.whatwg.org\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_178":{"__typename":"Paragraph","id":"95e4f1a2ebf9_178","name":"d51c","type":"P","href":null,"layout":null,"metadata":null,"text":"Sidenote: As you probably noticed, VexTrio suddenly stops to count the checks in numerical order at this point. Instead of continuing with checks 23 and 24, VexTrio uses checks 42 and 43. For me this is an indication that those fingerprinting checks are most likely copy-pasted from an external source. We will get back to this in the Conclusion section of this article.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"EM","start":0,"end":370,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_179":{"__typename":"Paragraph","id":"95e4f1a2ebf9_179","name":"fa12","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 25: CHECK_UserAgent_not_automation","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_180":{"__typename":"Paragraph","id":"95e4f1a2ebf9_180","name":"d514","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_UserAgent_not_automation() {\n  try {\n    var c = \"phantomjs\";\n    var d = \"headless\";\n    var f = \"avira\";\n    var g = \"googleweblight\";\n    var h = navigator.userAgent.toLowerCase();\n    if (h.indexOf(c) !== -1 || h.indexOf(d) !== -1 || h.indexOf(f) !== -1 || h.indexOf(g) !== -1) {\n      return \"a60:\" + 1;\n    } else {\n      return \"a60:\" + 0;\n    }\n  } catch (i) {\n    return \"a60:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_181":{"__typename":"Paragraph","id":"95e4f1a2ebf9_181","name":"06d8","type":"P","href":null,"layout":null,"metadata":null,"text":"Another of those checks that could have easily been integrated into previous checks working with the victim’s web-requests UserAgent. \nThis time, VexTrio makes sure that none of the strings “phantomjs”, “headless”, “avira” and “googleweblight” are found in it.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_182":{"__typename":"Paragraph","id":"95e4f1a2ebf9_182","name":"e5b2","type":"P","href":null,"layout":null,"metadata":null,"text":"Hereby","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_183":{"__typename":"Paragraph","id":"95e4f1a2ebf9_183","name":"25c6","type":"ULI","href":null,"layout":null,"metadata":null,"text":"phantomjs: Would indicate browser automation using PhantomJS","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_184":{"__typename":"Paragraph","id":"95e4f1a2ebf9_184","name":"ea98","type":"ULI","href":null,"layout":null,"metadata":null,"text":"headless: Would indicate a browser being run in headless mode (so without any User UI, which is a common case in browser automation","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_185":{"__typename":"Paragraph","id":"95e4f1a2ebf9_185","name":"8f59","type":"ULI","href":null,"layout":null,"metadata":null,"text":"avira: Would indicate a webrequest by the known security vendor Avira. My working theory is that a browser using Avira’s security plugins might be sending such requests.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_186":{"__typename":"Paragraph","id":"95e4f1a2ebf9_186","name":"ef97","type":"ULI","href":null,"layout":null,"metadata":null,"text":"googleweblight: A check for the GoogleWebLight proxy service (Discontinued in 2022). This check is likely completely useless.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":32,"end":46,"href":"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FGoogle_Web_Light","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_187":{"__typename":"Paragraph","id":"95e4f1a2ebf9_187","name":"d965","type":"P","href":null,"layout":null,"metadata":null,"text":"If any of those strings are encountered in the UserAgent, check 25 (60) is failed, returning a60:1, if the check is passed, the function returns a60:0.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_188":{"__typename":"Paragraph","id":"95e4f1a2ebf9_188","name":"ab6e","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 26: CHECK_STACKTRACE_Behavior","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_189":{"__typename":"Paragraph","id":"95e4f1a2ebf9_189","name":"8934","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_STACKTRACE_Behavior() {\n  var c;\n  var d;\n  try {\n    document.createElement(0);\n  } catch (e) {\n    try {\n      d = e.stack.split(\"\\n\");\n      c = d.length \u003E= 2 ? !!d[1].match(\u002FOb[cej]{3}t\\.a[lp]{3}y[\\(\u003C ]{3}an[oynm]{5}us\u003E\u002F) : true;\n    } catch (f) {}\n    if (c) {\n      return \"a78:\" + 1;\n    } else {\n      return \"a78:\" + 0;\n    }\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_190":{"__typename":"Paragraph","id":"95e4f1a2ebf9_190","name":"b3a0","type":"P","href":null,"layout":null,"metadata":null,"text":"This Check is pretty cool from a technical standpoint. It is a way to detect Puppeter with the extra-stealth plugin, more or less directly from a Github Issue: \nhttps:\u002F\u002Fgithub.com\u002Fberstend\u002Fpuppeteer-extra\u002Fissues\u002F318#issuecomment-699700974 \nwhich has since been fixed.\nBasically, the check works as follows:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":77,"end":114,"href":"https:\u002F\u002Fgithub.com\u002Fberstend\u002Fpuppeteer-extra","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":161,"end":238,"href":"https:\u002F\u002Fgithub.com\u002Fberstend\u002Fpuppeteer-extra\u002Fissues\u002F318#issuecomment-699700974","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_191":{"__typename":"Paragraph","id":"95e4f1a2ebf9_191","name":"908a","type":"OLI","href":null,"layout":null,"metadata":null,"text":"An intentionally erroneous document.createElement() call is made.\nBy passing an Integer as the parameter where createElement expects a string, the function runs into an error.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_192":{"__typename":"Paragraph","id":"95e4f1a2ebf9_192","name":"1a53","type":"OLI","href":null,"layout":null,"metadata":null,"text":"The first error routine is used to catch the error and evaluate the Stack trace which normally comes included when a browser runs into a JavaScript error. The stacktrace is split into lines. Then, if there are more than two lines, the second line is checked for a match on the RegEx “\u002FOb[cej]{3}t\\.a[lp]{3}y[\\(\u003C ]{3}an[oynm]{5}us\u003E\u002F” \nThis does exactly match on errors returned where the Stack has been manipulated by the above-mentioned Plugin.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_193":{"__typename":"Paragraph","id":"95e4f1a2ebf9_193","name":"ffae","type":"OLI","href":null,"layout":null,"metadata":null,"text":"If the RegEx does match under the condition that more than 2 lines of Stacktrace are returned, the fingerprint did result in the discovery of an automation and the test is failed (a78:1), else it is passed.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_194":{"__typename":"Paragraph","id":"95e4f1a2ebf9_194","name":"ef3b","type":"P","href":null,"layout":null,"metadata":null,"text":"I believe it’s one of the most interesting checks in VexTrio’s arsenal. Using Stacktraces to identify browser automation by intentionally provoking an error is something to keep in mind.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_195":{"__typename":"Paragraph","id":"95e4f1a2ebf9_195","name":"6990","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 27: CHECK_NumberofLogicalProcessors_IOS","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_196":{"__typename":"Paragraph","id":"95e4f1a2ebf9_196","name":"060b","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_NumberofLogicalProcessors_IOS() {\n  try {\n    if (CHECK_DEVICE_IN_USERAGENT_STRING() === \"iOS\" && window.navigator.hardwareConcurrency !== undefined && window.navigator.hardwareConcurrency \u003E 4) {\n      return \"a86:\" + 1;\n    } else {\n      return \"a86:\" + 0;\n    }\n  } catch (c) {\n    return \"a86:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_197":{"__typename":"Paragraph","id":"95e4f1a2ebf9_197","name":"d3df","type":"P","href":null,"layout":null,"metadata":null,"text":"Let’s get back to some more simple checks. Check 27 is a fingerprint-based on the number of logical processors. If the device is a device making use of the iOS operating system and the window.navigator.hardwareConcurrency property is defined, it is not allowed to return a value bigger than 4. According to my research, ever since the A11 Apple processor, likely all iPhones from the iPhone 8 onwards have 6 and more logical processors. Oddly enough the iPhone 8 was released in the same year in which Safari dropped support for the hardwareConcurrency() method. So while I initially hoped that this check would prevent some iOS users from passing as legitimate, I assume that since the iPhone 8 attempting to print a Safari User this way would most likely result in them still getting passed on as victims, as the hardwareConcurrency() method likely returns undefined.\nAt least if you are using Chrome on iOS with an iPhone 8 onwards you are most likely falling through and getting sorted out for the more malicious payloads.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":185,"end":221,"href":"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002FhardwareConcurrency","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_198":{"__typename":"Paragraph","id":"95e4f1a2ebf9_198","name":"e6ff","type":"P","href":null,"layout":null,"metadata":null,"text":"Anyways, if you pass the check and look like innocent prey, the function returns a86:0, else it’s a86:1.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_199":{"__typename":"Paragraph","id":"95e4f1a2ebf9_199","name":"3ab7","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 28: CHECK_Browser_VoiceList","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_200":{"__typename":"Paragraph","id":"95e4f1a2ebf9_200","name":"5f8a","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_Browser_VoiceList() {\n  var c = CHECK_DEVICE_IN_USERAGENT_STRING();\n  if (voiceslist.toLowerCase().indexOf(\"lekha\") !== -1 && (c.indexOf(\"Win\") !== -1 || c === \"Kaios\" || c === \"Android\" || c === \"Linux\")) {\n    return \"a89:\" + 1;\n  } else {\n    return \"a89:\" + 0;\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"AUTO","lang":"csharp"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_201":{"__typename":"Paragraph","id":"95e4f1a2ebf9_201","name":"f6bd","type":"P","href":null,"layout":null,"metadata":null,"text":"Remember that voicelist variable VexTrio filled some checks ago? Well, here it will be used again. In its essence, there seems to be a voicepack for browsers which is called “lekha”. It is only used under Apple devices and if the user agent says you are a Windows, Kaios, Linux or Android user, encountering it in the voicelist means something is wrong. Hence if this voicepack is available and you are on any of the aforementioned non-apple devices, you fail the check (a89:1). Else you pass (a89:0).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_202":{"__typename":"Paragraph","id":"95e4f1a2ebf9_202","name":"541b","type":"H4","href":null,"layout":null,"metadata":null,"text":"Check 29: CHECK_VirtualBox","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_203":{"__typename":"Paragraph","id":"95e4f1a2ebf9_203","name":"0ecb","type":"PRE","href":null,"layout":null,"metadata":null,"text":"function CHECK_VirtualBox() {\n  try {\n    var c = HELPER_WEBGL_DEBUG_TOKENS_FOR_RENDERER_AND_VENDOR();\n    if (c[1].indexOf(\"VirtualBox\") !== -1) {\n      return \"a92:1\";\n    } else {\n      return \"a92:0\";\n    }\n  } catch (d) {\n    return \"a92:e\";\n  }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":{"__typename":"CodeBlockMetadata","mode":"EXPLICIT","lang":"javascript"},"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_204":{"__typename":"Paragraph","id":"95e4f1a2ebf9_204","name":"2a9c","type":"P","href":null,"layout":null,"metadata":null,"text":"We finally made it to our last check. It makes use of the previously mentioned WebGL debugging values trick again to get the Graphiccard Renderer and Vendor. The value for the Graphiccard Vendor is then checked for occurrences of the string “VirtualBox”. If it is found VexTrio assumes that it is opened in a browser that is run from a virtual machine. And this is enough for the visitor to not look innocent enough to fall victim to their more fraudulent payloads. Hence the check is failed (a92:1). If “VirtualBox” is not discovered in the graphics card vendor string, the check is passed (a92:0).","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_205":{"__typename":"Paragraph","id":"95e4f1a2ebf9_205","name":"3f1f","type":"H4","href":null,"layout":null,"metadata":null,"text":"Conclusion","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_206":{"__typename":"Paragraph","id":"95e4f1a2ebf9_206","name":"a9d8","type":"P","href":null,"layout":null,"metadata":null,"text":"In summary, VexTrio makes use of 29 different functions to check the legitimacy of a visitor\u002Fvictim who visits an infected webpage. A central function which is given at the beginning of this article is then responsible for evaluating the fingerprinting results. If any of the checks described before had a return value ending with a “:1”, the result of that analysis is a0:1. Else it's a0:0 if all checks were passed or a0:e if the analysis function failed to execute properly. The final result is then turned into a JSON object, AES CBC encrypted (with a key that is inside the remaining VexTrio source code), and sent to the server as a token value. The server is then responsible for evaluating the fingerprint result together with some additional parameters sent by the remaining VexTrio script. As the serverside code stays hidden, it is not possible to say which steps are taken on the server side. However, as a result of these hidden mechanisms, the server will respond with further JavaScript, redirecting victims to all sorts of scams and advertisements.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_207":{"__typename":"Paragraph","id":"95e4f1a2ebf9_207","name":"c1a4","type":"P","href":null,"layout":null,"metadata":null,"text":"Personally, I believe there are some interesting takeaways from the previous analysis. First of all, it is pretty interesting to see the different methods used by VexTrio to fingerprint a modern web browser. Many of the checks done by VexTrio are likely also used by different malware families.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_208":{"__typename":"Paragraph","id":"95e4f1a2ebf9_208","name":"655f","type":"P","href":null,"layout":null,"metadata":null,"text":"Based on the way the different fingerprinting methods are presented, I assume that most of them are actually copy-pasted from 3rd party sources. While I was able to proof this for some of the checks (see: Check 26), I have yet to find a source that contains all the techniques explained above. If anyone should discover an open-source script that does, don’t hesitate to reach out.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_209":{"__typename":"Paragraph","id":"95e4f1a2ebf9_209","name":"2fbd","type":"P","href":null,"layout":null,"metadata":null,"text":"Another thing I noticed is the amount of functionalities used in the above-mentioned fingerprinting methods which are marked as “deprecated” in the Mozilla developer documentation. I demonstrated this in the analysis of Check 6. In total, 7 out of 29 checks would stop working if all browser vendors would follow up on the deprecation status.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_210":{"__typename":"Paragraph","id":"95e4f1a2ebf9_210","name":"7e27","type":"P","href":null,"layout":null,"metadata":null,"text":"Additionally, there is a clear reference in the WebGL documentation about the security implications for the retrieval of the WebGL rendering debug variables used in Check 10 and 29.\nIt appears to be a real-life example of the good old “usability” vs. “security” problem.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ymmXi6rCiFjRyyVxkEqNkA.png":{"__typename":"ImageMetadata","id":"1*ymmXi6rCiFjRyyVxkEqNkA.png","originalHeight":792,"originalWidth":3563,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:95e4f1a2ebf9_211":{"__typename":"Paragraph","id":"95e4f1a2ebf9_211","name":"8a5b","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ymmXi6rCiFjRyyVxkEqNkA.png"},"text":"Figure 7: WebGL debug token issues (Source: registry.khronos.org)","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":43,"end":64,"href":"https:\u002F\u002Fregistry.khronos.org\u002Fwebgl\u002Fextensions\u002FWEBGL_debug_renderer_info\u002F","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_212":{"__typename":"Paragraph","id":"95e4f1a2ebf9_212","name":"5ea9","type":"P","href":null,"layout":null,"metadata":null,"text":"I always find it interesting to see such decision problems and how they are handled. In this case, the fingerprinting in VexTrio is a negative example in a much bigger debate. I do not want to point fingers here but rather highlight that it is not always easy to decide if security and privacy are more important than usability and that the above methods of fingerprinting are known to the web development community.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_213":{"__typename":"Paragraph","id":"95e4f1a2ebf9_213","name":"df0b","type":"P","href":null,"layout":null,"metadata":null,"text":"But for now, let's rep up this post. I hope you learned something on the way and enjoyed the read. Who knows, maybe some of you will even fiddle around with the given code samples to discover additional methods of fingerprinting or how to counter them? :)\nI am as always happy about any sort of feedback and remain open to suggestions on improving my work.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_214":{"__typename":"Paragraph","id":"95e4f1a2ebf9_214","name":"65d8","type":"P","href":null,"layout":null,"metadata":null,"text":"If you made it here, please know that you are awesome and that I am happy to have you reading my work.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_215":{"__typename":"Paragraph","id":"95e4f1a2ebf9_215","name":"c1ae","type":"P","href":null,"layout":null,"metadata":null,"text":"Remember to follow my socials: https:\u002F\u002Flinktr.ee\u002Fgi7w0rm to not miss my content. And if you want to go the extra step, I am currently still collecting for a new rig to do my security work. I would greatly appreciate a tip over at https:\u002F\u002Fko-fi.com\u002Fgi7w0rm.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":31,"end":56,"href":"https:\u002F\u002Flinktr.ee\u002Fgi7w0rm","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":230,"end":255,"href":"https:\u002F\u002Fko-fi.com\u002Fgi7w0rm","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_216":{"__typename":"Paragraph","id":"95e4f1a2ebf9_216","name":"c09d","type":"P","href":null,"layout":null,"metadata":null,"text":"Until the next time","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:95e4f1a2ebf9_217":{"__typename":"Paragraph","id":"95e4f1a2ebf9_217","name":"72b3","type":"P","href":null,"layout":null,"metadata":null,"text":"Cheers ❤","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"PostViewerEdge:postId:aeb721be6e30-viewerId:lo_89e6d1bd25b7":{"__typename":"PostViewerEdge","shouldIndexPostForExternalSearch":true,"id":"postId:aeb721be6e30-viewerId:lo_89e6d1bd25b7"},"Tag:infosec":{"__typename":"Tag","id":"infosec","displayTitle":"Infosec","normalizedTagSlug":"infosec"},"Tag:javascript":{"__typename":"Tag","id":"javascript","displayTitle":"JavaScript","normalizedTagSlug":"javascript"},"Tag:fingerprinting":{"__typename":"Tag","id":"fingerprinting","displayTitle":"Fingerprinting","normalizedTagSlug":"fingerprinting"},"Tag:malware":{"__typename":"Tag","id":"malware","displayTitle":"Malware","normalizedTagSlug":"malware"},"Tag:malware-analysis":{"__typename":"Tag","id":"malware-analysis","displayTitle":"Malware Analysis","normalizedTagSlug":"malware-analysis"},"Post:aeb721be6e30":{"__typename":"Post","id":"aeb721be6e30","collection":null,"content({\"postMeteringOptions\":{}})":{"__typename":"PostContent","isLockedPreviewOnly":false,"bodyModel":{"__typename":"RichText","sections":[{"__typename":"Section","name":"5bbe","startIndex":0,"textLayout":null,"imageLayout":null,"backgroundImage":null,"videoLayout":null,"backgroundVideo":null}],"paragraphs":[{"__ref":"Paragraph:95e4f1a2ebf9_0"},{"__ref":"Paragraph:95e4f1a2ebf9_1"},{"__ref":"Paragraph:95e4f1a2ebf9_2"},{"__ref":"Paragraph:95e4f1a2ebf9_3"},{"__ref":"Paragraph:95e4f1a2ebf9_4"},{"__ref":"Paragraph:95e4f1a2ebf9_5"},{"__ref":"Paragraph:95e4f1a2ebf9_6"},{"__ref":"Paragraph:95e4f1a2ebf9_7"},{"__ref":"Paragraph:95e4f1a2ebf9_8"},{"__ref":"Paragraph:95e4f1a2ebf9_9"},{"__ref":"Paragraph:95e4f1a2ebf9_10"},{"__ref":"Paragraph:95e4f1a2ebf9_11"},{"__ref":"Paragraph:95e4f1a2ebf9_12"},{"__ref":"Paragraph:95e4f1a2ebf9_13"},{"__ref":"Paragraph:95e4f1a2ebf9_14"},{"__ref":"Paragraph:95e4f1a2ebf9_15"},{"__ref":"Paragraph:95e4f1a2ebf9_16"},{"__ref":"Paragraph:95e4f1a2ebf9_17"},{"__ref":"Paragraph:95e4f1a2ebf9_18"},{"__ref":"Paragraph:95e4f1a2ebf9_19"},{"__ref":"Paragraph:95e4f1a2ebf9_20"},{"__ref":"Paragraph:95e4f1a2ebf9_21"},{"__ref":"Paragraph:95e4f1a2ebf9_22"},{"__ref":"Paragraph:95e4f1a2ebf9_23"},{"__ref":"Paragraph:95e4f1a2ebf9_24"},{"__ref":"Paragraph:95e4f1a2ebf9_25"},{"__ref":"Paragraph:95e4f1a2ebf9_26"},{"__ref":"Paragraph:95e4f1a2ebf9_27"},{"__ref":"Paragraph:95e4f1a2ebf9_28"},{"__ref":"Paragraph:95e4f1a2ebf9_29"},{"__ref":"Paragraph:95e4f1a2ebf9_30"},{"__ref":"Paragraph:95e4f1a2ebf9_31"},{"__ref":"Paragraph:95e4f1a2ebf9_32"},{"__ref":"Paragraph:95e4f1a2ebf9_33"},{"__ref":"Paragraph:95e4f1a2ebf9_34"},{"__ref":"Paragraph:95e4f1a2ebf9_35"},{"__ref":"Paragraph:95e4f1a2ebf9_36"},{"__ref":"Paragraph:95e4f1a2ebf9_37"},{"__ref":"Paragraph:95e4f1a2ebf9_38"},{"__ref":"Paragraph:95e4f1a2ebf9_39"},{"__ref":"Paragraph:95e4f1a2ebf9_40"},{"__ref":"Paragraph:95e4f1a2ebf9_41"},{"__ref":"Paragraph:95e4f1a2ebf9_42"},{"__ref":"Paragraph:95e4f1a2ebf9_43"},{"__ref":"Paragraph:95e4f1a2ebf9_44"},{"__ref":"Paragraph:95e4f1a2ebf9_45"},{"__ref":"Paragraph:95e4f1a2ebf9_46"},{"__ref":"Paragraph:95e4f1a2ebf9_47"},{"__ref":"Paragraph:95e4f1a2ebf9_48"},{"__ref":"Paragraph:95e4f1a2ebf9_49"},{"__ref":"Paragraph:95e4f1a2ebf9_50"},{"__ref":"Paragraph:95e4f1a2ebf9_51"},{"__ref":"Paragraph:95e4f1a2ebf9_52"},{"__ref":"Paragraph:95e4f1a2ebf9_53"},{"__ref":"Paragraph:95e4f1a2ebf9_54"},{"__ref":"Paragraph:95e4f1a2ebf9_55"},{"__ref":"Paragraph:95e4f1a2ebf9_56"},{"__ref":"Paragraph:95e4f1a2ebf9_57"},{"__ref":"Paragraph:95e4f1a2ebf9_58"},{"__ref":"Paragraph:95e4f1a2ebf9_59"},{"__ref":"Paragraph:95e4f1a2ebf9_60"},{"__ref":"Paragraph:95e4f1a2ebf9_61"},{"__ref":"Paragraph:95e4f1a2ebf9_62"},{"__ref":"Paragraph:95e4f1a2ebf9_63"},{"__ref":"Paragraph:95e4f1a2ebf9_64"},{"__ref":"Paragraph:95e4f1a2ebf9_65"},{"__ref":"Paragraph:95e4f1a2ebf9_66"},{"__ref":"Paragraph:95e4f1a2ebf9_67"},{"__ref":"Paragraph:95e4f1a2ebf9_68"},{"__ref":"Paragraph:95e4f1a2ebf9_69"},{"__ref":"Paragraph:95e4f1a2ebf9_70"},{"__ref":"Paragraph:95e4f1a2ebf9_71"},{"__ref":"Paragraph:95e4f1a2ebf9_72"},{"__ref":"Paragraph:95e4f1a2ebf9_73"},{"__ref":"Paragraph:95e4f1a2ebf9_74"},{"__ref":"Paragraph:95e4f1a2ebf9_75"},{"__ref":"Paragraph:95e4f1a2ebf9_76"},{"__ref":"Paragraph:95e4f1a2ebf9_77"},{"__ref":"Paragraph:95e4f1a2ebf9_78"},{"__ref":"Paragraph:95e4f1a2ebf9_79"},{"__ref":"Paragraph:95e4f1a2ebf9_80"},{"__ref":"Paragraph:95e4f1a2ebf9_81"},{"__ref":"Paragraph:95e4f1a2ebf9_82"},{"__ref":"Paragraph:95e4f1a2ebf9_83"},{"__ref":"Paragraph:95e4f1a2ebf9_84"},{"__ref":"Paragraph:95e4f1a2ebf9_85"},{"__ref":"Paragraph:95e4f1a2ebf9_86"},{"__ref":"Paragraph:95e4f1a2ebf9_87"},{"__ref":"Paragraph:95e4f1a2ebf9_88"},{"__ref":"Paragraph:95e4f1a2ebf9_89"},{"__ref":"Paragraph:95e4f1a2ebf9_90"},{"__ref":"Paragraph:95e4f1a2ebf9_91"},{"__ref":"Paragraph:95e4f1a2ebf9_92"},{"__ref":"Paragraph:95e4f1a2ebf9_93"},{"__ref":"Paragraph:95e4f1a2ebf9_94"},{"__ref":"Paragraph:95e4f1a2ebf9_95"},{"__ref":"Paragraph:95e4f1a2ebf9_96"},{"__ref":"Paragraph:95e4f1a2ebf9_97"},{"__ref":"Paragraph:95e4f1a2ebf9_98"},{"__ref":"Paragraph:95e4f1a2ebf9_99"},{"__ref":"Paragraph:95e4f1a2ebf9_100"},{"__ref":"Paragraph:95e4f1a2ebf9_101"},{"__ref":"Paragraph:95e4f1a2ebf9_102"},{"__ref":"Paragraph:95e4f1a2ebf9_103"},{"__ref":"Paragraph:95e4f1a2ebf9_104"},{"__ref":"Paragraph:95e4f1a2ebf9_105"},{"__ref":"Paragraph:95e4f1a2ebf9_106"},{"__ref":"Paragraph:95e4f1a2ebf9_107"},{"__ref":"Paragraph:95e4f1a2ebf9_108"},{"__ref":"Paragraph:95e4f1a2ebf9_109"},{"__ref":"Paragraph:95e4f1a2ebf9_110"},{"__ref":"Paragraph:95e4f1a2ebf9_111"},{"__ref":"Paragraph:95e4f1a2ebf9_112"},{"__ref":"Paragraph:95e4f1a2ebf9_113"},{"__ref":"Paragraph:95e4f1a2ebf9_114"},{"__ref":"Paragraph:95e4f1a2ebf9_115"},{"__ref":"Paragraph:95e4f1a2ebf9_116"},{"__ref":"Paragraph:95e4f1a2ebf9_117"},{"__ref":"Paragraph:95e4f1a2ebf9_118"},{"__ref":"Paragraph:95e4f1a2ebf9_119"},{"__ref":"Paragraph:95e4f1a2ebf9_120"},{"__ref":"Paragraph:95e4f1a2ebf9_121"},{"__ref":"Paragraph:95e4f1a2ebf9_122"},{"__ref":"Paragraph:95e4f1a2ebf9_123"},{"__ref":"Paragraph:95e4f1a2ebf9_124"},{"__ref":"Paragraph:95e4f1a2ebf9_125"},{"__ref":"Paragraph:95e4f1a2ebf9_126"},{"__ref":"Paragraph:95e4f1a2ebf9_127"},{"__ref":"Paragraph:95e4f1a2ebf9_128"},{"__ref":"Paragraph:95e4f1a2ebf9_129"},{"__ref":"Paragraph:95e4f1a2ebf9_130"},{"__ref":"Paragraph:95e4f1a2ebf9_131"},{"__ref":"Paragraph:95e4f1a2ebf9_132"},{"__ref":"Paragraph:95e4f1a2ebf9_133"},{"__ref":"Paragraph:95e4f1a2ebf9_134"},{"__ref":"Paragraph:95e4f1a2ebf9_135"},{"__ref":"Paragraph:95e4f1a2ebf9_136"},{"__ref":"Paragraph:95e4f1a2ebf9_137"},{"__ref":"Paragraph:95e4f1a2ebf9_138"},{"__ref":"Paragraph:95e4f1a2ebf9_139"},{"__ref":"Paragraph:95e4f1a2ebf9_140"},{"__ref":"Paragraph:95e4f1a2ebf9_141"},{"__ref":"Paragraph:95e4f1a2ebf9_142"},{"__ref":"Paragraph:95e4f1a2ebf9_143"},{"__ref":"Paragraph:95e4f1a2ebf9_144"},{"__ref":"Paragraph:95e4f1a2ebf9_145"},{"__ref":"Paragraph:95e4f1a2ebf9_146"},{"__ref":"Paragraph:95e4f1a2ebf9_147"},{"__ref":"Paragraph:95e4f1a2ebf9_148"},{"__ref":"Paragraph:95e4f1a2ebf9_149"},{"__ref":"Paragraph:95e4f1a2ebf9_150"},{"__ref":"Paragraph:95e4f1a2ebf9_151"},{"__ref":"Paragraph:95e4f1a2ebf9_152"},{"__ref":"Paragraph:95e4f1a2ebf9_153"},{"__ref":"Paragraph:95e4f1a2ebf9_154"},{"__ref":"Paragraph:95e4f1a2ebf9_155"},{"__ref":"Paragraph:95e4f1a2ebf9_156"},{"__ref":"Paragraph:95e4f1a2ebf9_157"},{"__ref":"Paragraph:95e4f1a2ebf9_158"},{"__ref":"Paragraph:95e4f1a2ebf9_159"},{"__ref":"Paragraph:95e4f1a2ebf9_160"},{"__ref":"Paragraph:95e4f1a2ebf9_161"},{"__ref":"Paragraph:95e4f1a2ebf9_162"},{"__ref":"Paragraph:95e4f1a2ebf9_163"},{"__ref":"Paragraph:95e4f1a2ebf9_164"},{"__ref":"Paragraph:95e4f1a2ebf9_165"},{"__ref":"Paragraph:95e4f1a2ebf9_166"},{"__ref":"Paragraph:95e4f1a2ebf9_167"},{"__ref":"Paragraph:95e4f1a2ebf9_168"},{"__ref":"Paragraph:95e4f1a2ebf9_169"},{"__ref":"Paragraph:95e4f1a2ebf9_170"},{"__ref":"Paragraph:95e4f1a2ebf9_171"},{"__ref":"Paragraph:95e4f1a2ebf9_172"},{"__ref":"Paragraph:95e4f1a2ebf9_173"},{"__ref":"Paragraph:95e4f1a2ebf9_174"},{"__ref":"Paragraph:95e4f1a2ebf9_175"},{"__ref":"Paragraph:95e4f1a2ebf9_176"},{"__ref":"Paragraph:95e4f1a2ebf9_177"},{"__ref":"Paragraph:95e4f1a2ebf9_178"},{"__ref":"Paragraph:95e4f1a2ebf9_179"},{"__ref":"Paragraph:95e4f1a2ebf9_180"},{"__ref":"Paragraph:95e4f1a2ebf9_181"},{"__ref":"Paragraph:95e4f1a2ebf9_182"},{"__ref":"Paragraph:95e4f1a2ebf9_183"},{"__ref":"Paragraph:95e4f1a2ebf9_184"},{"__ref":"Paragraph:95e4f1a2ebf9_185"},{"__ref":"Paragraph:95e4f1a2ebf9_186"},{"__ref":"Paragraph:95e4f1a2ebf9_187"},{"__ref":"Paragraph:95e4f1a2ebf9_188"},{"__ref":"Paragraph:95e4f1a2ebf9_189"},{"__ref":"Paragraph:95e4f1a2ebf9_190"},{"__ref":"Paragraph:95e4f1a2ebf9_191"},{"__ref":"Paragraph:95e4f1a2ebf9_192"},{"__ref":"Paragraph:95e4f1a2ebf9_193"},{"__ref":"Paragraph:95e4f1a2ebf9_194"},{"__ref":"Paragraph:95e4f1a2ebf9_195"},{"__ref":"Paragraph:95e4f1a2ebf9_196"},{"__ref":"Paragraph:95e4f1a2ebf9_197"},{"__ref":"Paragraph:95e4f1a2ebf9_198"},{"__ref":"Paragraph:95e4f1a2ebf9_199"},{"__ref":"Paragraph:95e4f1a2ebf9_200"},{"__ref":"Paragraph:95e4f1a2ebf9_201"},{"__ref":"Paragraph:95e4f1a2ebf9_202"},{"__ref":"Paragraph:95e4f1a2ebf9_203"},{"__ref":"Paragraph:95e4f1a2ebf9_204"},{"__ref":"Paragraph:95e4f1a2ebf9_205"},{"__ref":"Paragraph:95e4f1a2ebf9_206"},{"__ref":"Paragraph:95e4f1a2ebf9_207"},{"__ref":"Paragraph:95e4f1a2ebf9_208"},{"__ref":"Paragraph:95e4f1a2ebf9_209"},{"__ref":"Paragraph:95e4f1a2ebf9_210"},{"__ref":"Paragraph:95e4f1a2ebf9_211"},{"__ref":"Paragraph:95e4f1a2ebf9_212"},{"__ref":"Paragraph:95e4f1a2ebf9_213"},{"__ref":"Paragraph:95e4f1a2ebf9_214"},{"__ref":"Paragraph:95e4f1a2ebf9_215"},{"__ref":"Paragraph:95e4f1a2ebf9_216"},{"__ref":"Paragraph:95e4f1a2ebf9_217"}]},"validatedShareKey":"","shareKeyCreator":null},"creator":{"__ref":"User:fa7639fc99f0"},"inResponseToEntityType":null,"isLocked":false,"isMarkedPaywallOnly":false,"lockedSource":"LOCKED_POST_SOURCE_NONE","mediumUrl":"https:\u002F\u002Fgi7w0rm.medium.com\u002Fvextrios-browser-fingerprinting-aeb721be6e30","primaryTopic":null,"topics":[],"isPublished":true,"latestPublishedVersion":"95e4f1a2ebf9","visibility":"PUBLIC","postResponses":{"__typename":"PostResponses","count":0},"clapCount":5,"allowResponses":true,"isLimitedState":false,"title":"VexTrio’s Browser Fingerprinting","isSeries":false,"sequence":null,"uniqueSlug":"vextrios-browser-fingerprinting-aeb721be6e30","socialTitle":"","socialDek":"","canonicalUrl":"","metaDescription":"","latestPublishedAt":1710874933301,"readingTime":39.314465408805034,"previewContent":{"__typename":"PreviewContent","subtitle":"Hey everyone, welcome back to the first blog post in 2024. Today, we are going to have a look at something I came across while looking at…"},"previewImage":{"__ref":"ImageMetadata:1*IOMq6n4m17tmyiJ1FdMAsw.png"},"isShortform":false,"seoTitle":"","firstPublishedAt":1710874933301,"updatedAt":1710908427929,"shortformType":"SHORTFORM_TYPE_LINK","seoDescription":"","viewerEdge":{"__ref":"PostViewerEdge:postId:aeb721be6e30-viewerId:lo_89e6d1bd25b7"},"isSuspended":false,"license":"ALL_RIGHTS_RESERVED","tags":[{"__ref":"Tag:infosec"},{"__ref":"Tag:javascript"},{"__ref":"Tag:fingerprinting"},{"__ref":"Tag:malware"},{"__ref":"Tag:malware-analysis"}],"isNewsletter":false,"statusForCollection":null,"pendingCollection":null,"detectedLanguage":"en","wordCount":10118,"layerCake":0}}</script><script>window.__MIDDLEWARE_STATE__={"session":{"xsrf":""},"cache":{"cacheStatus":"HIT"}}</script><script src="https://cdn-client.medium.com/lite/static/js/manifest.24f082fe.js"></script><script src="https://cdn-client.medium.com/lite/static/js/9865.1496d74a.js"></script><script src="https://cdn-client.medium.com/lite/static/js/main.e66fdbd5.js"></script><script src="https://cdn-client.medium.com/lite/static/js/instrumentation.d9108df7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/reporting.ff22a7a5.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5049.d1ead72d.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4810.6318add7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6618.db187378.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/1386.90da86c2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9977.5b3eb23a.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/719.0e220795.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5250.9f9e01d2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6349.b071a958.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2648.26563adf.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8393.826a25fb.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/1443.a8a73f48.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/3735.afb7e926.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5642.cee3e6b2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6546.cd03f950.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6834.08de95de.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/1781.db373833.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2420.2a5e2d95.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/839.ca7937c2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7975.d195c6f1.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2106.21ff89d3.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7394.e27cfbf2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2961.00a48598.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/230.ec2ef161.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4391.59acaed3.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/PostPage.MainContent.6aeac6a8.chunk.js"></script><script>window.main();</script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8dd7695b2d096d75',t:'MTczMDc1Mjc0Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"8dd7695b2d096d75","version":"2024.10.4","serverTiming":{"name":{"cfExtPri":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"0b5f665943484354a59c39c6833f7078","b":1}' crossorigin="anonymous"></script>
</body></html>