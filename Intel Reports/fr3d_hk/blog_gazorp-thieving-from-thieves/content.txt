<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="generator" content="Bludit">

<!-- Dynamic title tag -->
<title>Gazorp - Thieving from thieves | fr3d.hk</title>

<!-- Dynamic description tag -->
<meta name="description" content="This is a look into the short-lived piece of malware called Gazorp, and how its creators placed a backdoor within its command &amp; control panel. I'll be looking at the code and how the backdoor was created and hidden.">

<!-- Include Favicon -->
<link rel="icon" href="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png" type="image/png">

<!-- Include Bootstrap CSS file bootstrap.css -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-kernel/css/bootstrap.min.css?version=3.12.0">

<!-- Include CSS Styles from this theme -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-themes/blogx/css/style.css?version=3.12.0">

<!-- Load Bludit Plugins: Site head -->
<link rel="canonical" href="https://fr3d.hk/blog/gazorp-thieving-from-thieves"/>

<!-- Open Graph -->
<meta property="og:locale" content="en, en_US, en_AU, en_CA, en_GB, en_IE, en_NZ">
<meta property="og:type" content="article">
<meta property="og:title" content="Gazorp - Thieving from thieves">
<meta property="og:description" content="This is a look into the short-lived piece of malware called Gazorp, and how its creators placed a backdoor within its command &amp; control panel. I'll be looking at the code and how the backdoor was created and hidden.">
<meta property="og:url" content="https://fr3d.hk/blog/gazorp-thieving-from-thieves">
<meta property="og:site_name" content="fr3d.hk">
<meta property="og:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/login.png">

<!-- Robots plugin -->
<link rel="alternate" type="application/rss+xml" href="https://fr3d.hk/blog/rss.xml" title="RSS Feed">

<!-- Twitter Cards -->
<meta property="twitter:card" content="summary">
<meta property="twitter:site" content="">
<meta property="twitter:title" content="Gazorp - Thieving from thieves">
<meta property="twitter:description" content="This is a look into the short-lived piece of malware called Gazorp, and how its creators placed a backdoor within its command &amp; control panel. I'll be looking at the code and how the backdoor was created and hidden.">
<meta property="twitter:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/login.png">
<link href="/blog/bl-plugins/viewerjs/css/viewer.css" rel="stylesheet"></head>
<body>

	<!-- Load Bludit Plugins: Site Body Begin -->
	
	<!-- Navbar -->
	<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark text-uppercase">
	<div class="container">
		<a class="navbar-brand" href="https://fr3d.hk/blog/">
			<span class="text-white">fr3d.hk</span>
		</a>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarResponsive">
			<ul class="navbar-nav ml-auto">

				<!-- Static pages -->
				
				<!-- Social Networks -->
								<li class="nav-item">
					<a class="nav-link" href="https://twitter.com/fr3dhk" target="_blank">
						<img class="d-none d-sm-block nav-svg-icon" src="https://fr3d.hk/blog/bl-themes/blogx/img/twitter.svg" alt="Twitter" />
						<span class="d-inline d-sm-none">Twitter</span>
					</a>
				</li>
				
			</ul>
		</div>
	</div>
</nav>

	<!-- Content -->
	<div class="container">
		<div class="row">

			<!-- Blog Posts -->
			<div class="col-md-9">
			<!-- Post -->
<div class="card my-5 border-0">

	<!-- Load Bludit Plugins: Page Begin -->
	<style>.seo-breadcrumbs {margin:0; padding:0.4rem 0;} .seo-breadcrumbs li {display:inline;padding:0.2rem 0 0.2rem 0.2rem ; font-size:14px; list-style:none; } .seo-breadcrumbs li a {} .seo-breadcrumbs li+li:before {padding: 0 4px 0 0; color: black; content: "\000BB";}</style><nav aria-label="breadcrumb"><ol itemscope itemtype="http://schema.org/BreadcrumbList" class="seo-breadcrumbs"><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">You are here: <a href="https://fr3d.hk/blog/" itemprop="item" ><span itemprop="name">fr3d.hk</span></a>
    <meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><a href="https://fr3d.hk/blog/category/malware">Malware</a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><span itemprop="name"><a href="https://fr3d.hk/blog/gazorp-thieving-from-thieves" itemprop="item">Gazorp - Thieving from thieves</a></span><meta itemprop="position" content="3" /></li></ol></nav>
	<!-- Cover image -->
	
	<div class="card-body p-0">
		<!-- Title -->
		<a class="text-dark" href="https://fr3d.hk/blog/gazorp-thieving-from-thieves">
			<h1 class="title">Gazorp - Thieving from thieves</h1>
		</a>

				<!-- Creation date -->
		<h6 class="card-subtitle mb-3 text-muted">April 29, 2020 - Reading time: 15 minutes</h6>
		
		<!-- Full content -->
		<p><span id="docs-internal-guid-eccc783f-7fff-5c5b-75f9-6e7f4a2a6cf6">This is a look into the short-lived piece of malware called Gazorp, and how its creators placed a backdoor within its command &amp; control panel. I'll be looking at the code and how the backdoor was created and hidden.</span></p>
<p><!-- pagebreak --></p>
<div id="page_content">
<h2>Foreword</h2>
<hr>
<p><span id="docs-internal-guid-4ee570fb-7fff-ae8b-2e0b-e9ce63d1924c">I would like to begin by saying that I apologize for the lack of content recently. The planned post did not end up working out due to some unforeseen issues, but I believe that this post is a worthy replacement. A lot of credit for this story goes to hexlax (<a href="https://twitter.com/hexlax">twitter</a>). He let me know of this backdoor and shared his research into it, although the research presented in this post is my own and was carried out in light of his discoveries.</span></p>
<h2>Introduction</h2>
<hr>
<p><span id="docs-internal-guid-c57a4d0a-7fff-e6a9-209f-50d193599728">Gazorp was a piece of malware distributed around late 2018. This malware was shared through a free to use builder that was hosted on an onion site. On this site, anybody could build a ready to go copy of Gazorp and use the included C&amp;C (C2) panel to receive the logs of their freshly built malware. When built, the site would prompt you to download a zip file which included your built malware. The panel, along with instructions on how to set up the panel were also included. The panel login looked like this.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/login.png" alt="">Panel Login</p>
<p><span id="docs-internal-guid-e9de4c0b-7fff-175d-2b09-8253edc08c35">As word of a new free to use malware spread across forums, threat researchers were quick to discover that Gazorp was just AZORult v3.0 with a reskinned panel. For their part, the creators of Gazorp claimed that they had redesigned the AZORult panel and fixed multiple vulnerabilities/flaws. Because Gazorp ended up just being AZORult, it was made clear the creators had cracked an original build of the malware and were changing strings within the build to point it to a new C2. You may now be asking, why would anyone put in the effort of re-coding a C2 and then distributing it for free? Well, it was obviously too good to be true.</span></p>
<h2>The Backdoor</h2>
<hr>
<p><span id="docs-internal-guid-85fd6736-7fff-4373-b822-e0901edae1e5">Because hexlax had discovered the backdoor when the malware was still being used, he managed to snag seven separate builds of Gazorp. These were incredibly helpful in my research, as they allowed me to make comparisons of what was changing between builds. At first, I used a free service called Intezer to check if the builds were in fact AZORult.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/intezer.png" alt="">Intezer</p>
<p><span id="docs-internal-guid-47350ba2-7fff-8755-7f58-8a690764b375">There was no surprise that the malware had a 92% match with AZORult. Because I had seven builds, I began comparing them in HxD and found that there was nothing different besides their targeted C2s. Due to this, I decided to move on and look at the panel which is the more interesting of the two items. Using another file comparison tool I found out that a constant within the PHP code was changing.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/phpdiff.png" alt="">Changing Constant</p>
<p><span id="docs-internal-guid-bf110b5c-7fff-b7dd-eb34-4cc3c0a7666e"></span></p>
<p dir="ltr">These changes were very weird, as they were in a class that was used to get the location of a given IP. Usually these libraries are just included and do not differ from their original source, but in this case the constant was changing every build. Another thing that was changing was the gate name. This gate name was randomly generated, and is where the malware is pointed to when you put in your domain into the web builder. I wanted to verify that the builds were hitting this PHP file so I spun up my instance of Cuckoo sandbox and ran one of the samples.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/cuckoo.png" alt="">Cuckoo</p>
<p><span id="docs-internal-guid-7715c138-7fff-2383-2793-b38074e52bb1">The build sends a POST to the gate, along with some encrypted data that is unimportant, and is related to how AZORult functions. So now that I know my entry point, let's see how I can find my way into the 'IP2Location' file that contains the changing constant. The gate looks like so:</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/gate.png" alt="">Gate</p>
<p><span id="docs-internal-guid-d9204751-7fff-50b5-04b6-28a64895a207">We can see that the gate receives the POST data and then decodes it with an XOR key, we will discuss this key later. The results of that decryption are then compared with the string <em>reportdata</em>, and if <em>reportdata </em>is within the decrypted input, then the decrypted data is sent into the <em>parse_bot_report</em> function. This function is unimportant for our intentions, and contains two lines which will bring us closer to the backdoor. </span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/bot_report.png" alt="">parse_bot_report</p>
<p><span id="docs-internal-guid-30a52c17-7fff-0646-5484-48f68e585933">The function tries to get the ip of the bot, and try to deduce the country from this. Let's take a quick peek into the "get_bot_ip" function:</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/get_bot_ip.png" alt="">get_bot_ip</p>
<p><span id="docs-internal-guid-901917aa-7fff-89cb-eef2-a0d390b929a4">Within this function we see the first of the checks implemented to stop others from by mistake triggering the backdoor. The constant BOT_IP_HEADER is actually just set to another string.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/bot_ip_header.png" alt="">bot_ip_header</p>
<p><span id="docs-internal-guid-0731ea37-7fff-ac6a-0fd1-4c389ddac6c3">The string HTTP_CLIENT_IP is a header that can be set within a web request to denote the client's IP. So why does the code go to this extent to hide the possibility of a bot setting its own IP? Well, AZORult never uses this functionality, and because of this we can guess it's not intended to be used by the built malware. The next function called from <em>parse_bot_report </em>is the <em>get_isocode </em>function where the IP in the header is used as a parameter. Let's take a look at it:</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/get_isocode.png" alt="">get_isocode</p>
<p><span id="docs-internal-guid-1ac727ea-7fff-4b02-5db1-eb49df543fb4">So this is the function that calls us into the PHP file containing the backdoor. It includes the <em>IP2Location </em>file and then creates a new instance of the database included with the library. Once that's done, the function calls us into the lookup function that has a parameter of  which if you remember, is possible to be set through including the <em>HTTP_CLIENT_IP </em>header within our request. The <em>lookup </em>function is where the magic happens, so let's take a look at it and follow where our parameter of  is used. </span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/hash1.png" alt="">fields_h</p>
<p><span id="docs-internal-guid-ea8c3ce2-7fff-f4a7-d25c-c57f38f5710e">Our variable of IP is compared to a constant called <em>IP_ROOT</em>. This constant is set to "0.0.0.0" within the config. So this comparison is checking if the IP of the bot is equal to "0.0.0.0", but this IP would never be set by the malware. So this must be a check for a manual request, which was setting its own IP through the <em>get_bot_ip</em> function. So where does the <em>fields_h</em> bool get used? </span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/code_h.png" alt="">code_h</p>
<p><span id="docs-internal-guid-ceff480e-7fff-f92c-d9b4-ce1afe1e3388">Well, the variable is used to place us into this comparison. This time, another request header is checked against another constant, but this constant is different. If you remember from my initial discovery of the backdoor, it was through a changing constant in each of the panels. Well <em>IP_HASH </em>is that changing constant, in the case of this build, it is set to a random string.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/ip_hash.png" alt="">IP_HASH</p>
<p><span id="docs-internal-guid-c92fb72d-7fff-3961-9534-1a2b7b3f6a81">In the case of the panel, it was set to a seemingly random string, which was different in each of the seven different panels I had. It is important to note once again, these checks are comparing request headers that are never used by AZORult, so they must be intended to be checking a request that wasn't made by the malware. Again, a constant is set to true. In this case, it is named <em>code_h</em>. Like we did with <em>fields_h</em>, following this variable we find the backdoor.</span></p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/country_hair.png" alt="">The Backdoor</p>
<p><span id="docs-internal-guid-c415ecf5-7fff-dad0-645a-f76ea1d6368d">The first line within the backdoor is setting a variable to a constant that is defined in the <em>IP2Location</em> file. The <em>EXCEPTION_FUNCTION</em> constant is set to create_function. If you look at <em>create_function</em> then you find it is a method of creating a function by setting arguments as the first parameter, and then code within the second parameter. In this case the code is parsed through the cookie <em>countrycode</em>. An @ symbol is then used on the created function to suppress all errors. Once the function has been created, and the variable <em>country_hair</em> has been set to it, then the created function is called. </span></p>
<h2>Exploitation</h2>
<hr>
<p dir="ltr">Now that we covered how everything works let's recap, here are the steps needed to get to the backdoor.</p>
<ol>
<li dir="ltr">
<p dir="ltr" role="presentation">XOR encrypt <em>reportdata </em>and POST it to the gate</p>
</li>
<li dir="ltr">
<p dir="ltr" role="presentation">Set the Client-IP header in the POST request to '0.0.0.0' to get past the first check</p>
</li>
<li dir="ltr">
<p dir="ltr" role="presentation">Set the HASH header to the string in the IP_HASH constant 'a01f2b04a7' to get past the second check</p>
</li>
<li dir="ltr">
<p dir="ltr" role="presentation">Set the countrycode cookie to a PHP payload of your choice</p>
</li>
</ol>
<p dir="ltr">Because I wanted to accomplish this exploit with ease I created a Python script to trigger the backdoor.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/ffcb0ec8ab6a4410e0b2dc6cb7a91827/exploit.png" alt="">Python Script</p>
<p><span id="docs-internal-guid-649731aa-7fff-eea5-612f-92c2ff56d36f">An important thing to note is that because Gazorp was using a cracked version of AZORult, and was only changing the gate URL, It was not changing the encryption used for its POST request. Hence, this script will work with all Gazorp panels. The PHP payload must be URL encoded as well, in order for it to work.</span></p>
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Epilogue</h2>
<hr>
<p><span id="docs-internal-guid-546da6be-7fff-0a8a-e38f-07dca72b2242">Gazorp was a short-lived piece of malware created for the sole purpose of backdooring its users. The Gazorps onion site has been down for ages now, and AZORult has become a useless piece of malware due to the ways browsers encrypt their store data. I have not been able to find any live instances of this malware, and hence have decided that it is a good time to show this backdoor. I'd like to again say thank you to hexlax &amp; a huge thanks to Steved3 (<a href="https://twitter.com/SteveD3">twitter</a>) for editing! Lastly and most importantly thank you for reading this post. Until the next time, goodbye.</span></p>
</div>
	</div>

	<!-- Load Bludit Plugins: Page End -->
	
</div>
			</div>

			<!-- Right Sidebar -->
			<div class="col-md-3">
			<div class="plugin plugin-categories"><h2 class="plugin-label">Categories</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/category/general">General (2)</a></li><li><a href="https://fr3d.hk/blog/category/malware">Malware (9)</a></li><li><a href="https://fr3d.hk/blog/category/phishing">Phishing (1)</a></li></ul></div></div><div class="plugin plugin-pages"><h2 class="plugin-label">Links</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/rss.xml">RSS Feed</a></li></ul></div></div>			</div>

		</div>
	</div>

	<!-- Footer -->
	<footer class="footer bg-dark">
	<div class="container">
		<p class="m-0 text-center text-white text-uppercase">Copyright © 2021<span class="ml-5 text-warning">Powered by<img class="mini-logo" src="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png"/><a target="_blank" class="text-white" href="https://www.bludit.com">Bludit</a></span></p>
	</div>
</footer>
	<!-- Javascript -->
	<script src="https://fr3d.hk/blog/bl-kernel/js/jquery.min.js?version=3.12.0"></script>
<script src="https://fr3d.hk/blog/bl-kernel/js/bootstrap.bundle.min.js?version=3.12.0"></script>

	<!-- Load Bludit Plugins: Site Body End -->
	<script>var links = document.querySelectorAll( 'a' );  for (var i = 0, length = links.length; i < length; i++) {if (links[i].hostname != window.location.hostname) {links[i].target = '_blank';}}</script>

<script src="/blog/bl-plugins/viewerjs/js/viewer.js"></script>

</body>
</html>