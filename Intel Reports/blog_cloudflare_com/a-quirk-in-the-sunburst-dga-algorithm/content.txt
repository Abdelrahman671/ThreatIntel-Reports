<!DOCTYPE html> <html lang="en-us" dir="ltr"> <head><script async src="https://ot.www.cloudflare.com/public/vendor/onetrust/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" data-domain-script="b1e05d49-f072-4bae-9116-bdb78af15448"></script><meta name="HandheldFriendly" content="True"><meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="baidu-site-verification" content="KeThzeyMOr"><meta name="baidu-site-verification" content="code-NIlrS7gNhx"><meta charset="UTF-8"><meta name="description" content="Get the latest news on how products at Cloudflare are built, technologies used, and join the teams helping to build a better Internet."><title>A quirk in the SUNBURST DGA algorithm</title><meta name="title" content="A quirk in the SUNBURST DGA algorithm"><meta name="msvalidate.01" content="CF295E1604697F9CAD18B5A232E871F6"><meta class="swiftype" name="language" data-type="string" content="en"><script src="/static/z/i.js" type="text/javascript" referrerpolicy="origin"></script><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="apple-touch-icon" sizes="180x180" href="/images/favicon-32x32.png"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-32x32.png"><link rel="mask-icon" href="/images/favicon-32x32.png" color="#f78100"><link rel="stylesheet" href="/themes/ashes.min.css"><link rel="sitemap" href="/sitemap.xml"><meta name="msapplication-TileColor" content="#da532c"><meta name="theme-color" content="#ffffff"><link rel="canonical" href="https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/"><link rel="alternate" hreflang="en-us" href="https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/"><!-- General Meta Tags --> <meta property="article:published_time" content="2020-12-18T00:30:00.000+00:00"> <meta property="article:modified_time" content="2024-10-10T00:44:19.855Z">  <meta property="article:tag" content="Cloudflare Zero Trust"><meta property="article:tag" content="Cloudflare Gateway"><meta property="article:tag" content="Deep Dive"><meta property="article:tag" content="Threat Intelligence"> <meta property="article:publisher" content="https://www.facebook.com/cloudflare"> <!-- Facebook Meta Tags --> <meta property="og:site_name" content="The Cloudflare Blog"> <meta property="og:type" content="article"> <meta property="og:title" content="A quirk in the SUNBURST DGA algorithm"> <meta property="og:description" content="On Wednesday, December 16, the RedDrip Team from QiAnXin Technology released their discoveries (tweet, github) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. I"> <meta property="og:url" content="https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/"> <meta property="og:image:width" content="1200"> <meta property="og:image:height" content="628"> <!-- Twitter/X Meta Tags --> <meta name="twitter:title" content="A quirk in the SUNBURST DGA algorithm"> <meta name="twitter:description" content="On Wednesday, December 16, the RedDrip Team from QiAnXin Technology released their discoveries (tweet, github) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. I"> <meta name="twitter:url" content="https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/"> <meta name="twitter:card" content="summary_large_image">  <meta name="twitter:label1" content="Written by"> <meta name="twitter:data1" content="Nick Blazier"> <meta name="twitter:label2" content="Filed under"><meta name="twitter:data2" content="Cloudflare Zero Trust,Cloudflare Gateway,Deep Dive,Threat Intelligence"> <meta name="twitter:site" content="@cloudflare">  <meta property="og:image" content=""> <meta name="twitter:image" content=""> <link rel="stylesheet" href="/_astro/index.5BtHvQ-S.css" /><script type="module" src="/_astro/hoisted.Byv_OtGt.js"></script></head><style>astro-island,astro-slot,astro-static-slot{display:contents}</style><script>(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event("astro:only"));})();;(()=>{var b=Object.defineProperty;var f=(c,o,i)=>o in c?b(c,o,{enumerable:!0,configurable:!0,writable:!0,value:i}):c[o]=i;var l=(c,o,i)=>(f(c,typeof o!="symbol"?o+"":o,i),i);var p;{let c={0:t=>m(t),1:t=>i(t),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(i(t)),5:t=>new Set(i(t)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(t),9:t=>new Uint16Array(t),10:t=>new Uint32Array(t)},o=t=>{let[e,r]=t;return e in c?c[e](r):void 0},i=t=>t.map(o),m=t=>typeof t!="object"||t===null?t:Object.fromEntries(Object.entries(t).map(([e,r])=>[e,o(r)]));customElements.get("astro-island")||customElements.define("astro-island",(p=class extends HTMLElement{constructor(){super(...arguments);l(this,"Component");l(this,"hydrator");l(this,"hydrate",async()=>{var d;if(!this.hydrator||!this.isConnected)return;let e=(d=this.parentElement)==null?void 0:d.closest("astro-island[ssr]");if(e){e.addEventListener("astro:hydrate",this.hydrate,{once:!0});return}let r=this.querySelectorAll("astro-slot"),a={},h=this.querySelectorAll("template[data-astro-template]");for(let n of h){let s=n.closest(this.tagName);s!=null&&s.isSameNode(this)&&(a[n.getAttribute("data-astro-template")||"default"]=n.innerHTML,n.remove())}for(let n of r){let s=n.closest(this.tagName);s!=null&&s.isSameNode(this)&&(a[n.getAttribute("name")||"default"]=n.innerHTML)}let u;try{u=this.hasAttribute("props")?m(JSON.parse(this.getAttribute("props"))):{}}catch(n){let s=this.getAttribute("component-url")||"<unknown>",y=this.getAttribute("component-export");throw y&&(s+=` (export ${y})`),console.error(`[hydrate] Error parsing props for component ${s}`,this.getAttribute("props"),n),n}await this.hydrator(this)(this.Component,u,a,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),this.dispatchEvent(new CustomEvent("astro:hydrate"))});l(this,"unmount",()=>{this.isConnected||this.dispatchEvent(new CustomEvent("astro:unmount"))})}disconnectedCallback(){document.removeEventListener("astro:after-swap",this.unmount),document.addEventListener("astro:after-swap",this.unmount,{once:!0})}connectedCallback(){if(!this.hasAttribute("await-children")||document.readyState==="interactive"||document.readyState==="complete")this.childrenConnectedCallback();else{let e=()=>{document.removeEventListener("DOMContentLoaded",e),r.disconnect(),this.childrenConnectedCallback()},r=new MutationObserver(()=>{var a;((a=this.lastChild)==null?void 0:a.nodeType)===Node.COMMENT_NODE&&this.lastChild.nodeValue==="astro:end"&&(this.lastChild.remove(),e())});r.observe(this,{childList:!0}),document.addEventListener("DOMContentLoaded",e)}}async childrenConnectedCallback(){let e=this.getAttribute("before-hydration-url");e&&await import(e),this.start()}start(){let e=JSON.parse(this.getAttribute("opts")),r=this.getAttribute("client");if(Astro[r]===void 0){window.addEventListener(`astro:${r}`,()=>this.start(),{once:!0});return}Astro[r](async()=>{let a=this.getAttribute("renderer-url"),[h,{default:u}]=await Promise.all([import(this.getAttribute("component-url")),a?import(a):()=>()=>{}]),d=this.getAttribute("component-export")||"default";if(!d.includes("."))this.Component=h[d];else{this.Component=h;for(let n of d.split("."))this.Component=this.Component[n]}return this.hydrator=u,this.hydrate},e,this)}attributeChangedCallback(){this.hydrate()}},l(p,"observedAttributes",["props"]),p))}})();</script><astro-island uid="2wKQo1" component-url="/_astro/GoogleAnalytics.BZlu7bbu.js" component-export="GoogleAnalytics" renderer-url="/_astro/client.BQCS8AJJ.js" props="{&quot;title&quot;:[0,&quot;A quirk in the SUNBURST DGA algorithm&quot;],&quot;canonical&quot;:[0,&quot;https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;info&quot;:[0,{&quot;id&quot;:[0,&quot;7vPEi0QIhuwlb050ssMzXB&quot;],&quot;title&quot;:[0,&quot;A quirk in the SUNBURST DGA algorithm&quot;],&quot;slug&quot;:[0,&quot;a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;excerpt&quot;:[0,&quot;On Wednesday, December 16, the RedDrip Team from QiAnXin Technology released their discoveries (tweet, github) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. I&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;\n            &lt;figure class=\&quot;kg-card kg-image-card \&quot;&gt;\n            \n            &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4y3VW6SLU672JNv2ExYhPt/5dc75005a2adcc9bb306992098032dad/Sunburst.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1600\&quot; height=\&quot;898\&quot; loading=\&quot;lazy\&quot;/&gt;\n            \n            &lt;/figure&gt;&lt;p&gt;On Wednesday, December 16, the RedDrip Team from QiAnXin Technology &lt;a href=\&quot;https://mp.weixin.qq.com/s/v-ekPFtVNZG1W7vWjcuVug\&quot;&gt;released their discoveries&lt;/a&gt; (&lt;a href=\&quot;https://twitter.com/RedDrip7/status/1339168187619790848?s=20\&quot;&gt;tweet&lt;/a&gt;, &lt;a href=\&quot;https://github.com/RedDrip7/SunBurst_DGA_Decode\&quot;&gt;github&lt;/a&gt;) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. In studying queries performed by the malware, Cloudflare has uncovered additional details about how the Domain Generation Algorithm (DGA) encodes data and exfiltrates the compromised hostname to the command and control servers.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;background\&quot;&gt;Background&lt;/h3&gt;\n            &lt;a href=\&quot;#background\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;The RedDrip team discovered that the DNS queries are created by combining the previously reverse-engineered unique guid (based on hashing of hostname and MAC address) with a payload that is a custom base 32 encoding of the hostname. The article they published includes screenshots of decompiled or reimplemented C# functions that are included in the compromised DLL. This background primer summarizes their work so far (which is published in Chinese).&lt;/p&gt;&lt;p&gt;RedDrip discovered that the DGA subdomain portion of the query is split into three parts:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;&amp;lt;encoded_guid&amp;gt; + &amp;lt;byte&amp;gt; + &amp;lt;encoded_hostname&amp;gt;&lt;/b&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;An example malicious domain is:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;7cbtailjomqle1pjvr2d32i2voe60ce2.appsync-api.us-east-1.avsvmcloud.com&lt;/b&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Where the domain is split into the three parts as&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-yzei{border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-z6tn{border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}\n.tg .tg-8tm3{background-color:#efefef;border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}\n.tg .tg-v8qi{background-color:#efefef;border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot; style=\&quot;undefined;table-layout: fixed; width: 683px\&quot;&gt;\n&lt;colgroup&gt;\n&lt;col style=\&quot;width: 265px\&quot;&gt;\n&lt;col style=\&quot;width: 180px\&quot;&gt;\n&lt;col style=\&quot;width: 238px\&quot;&gt;\n&lt;/colgroup&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-8tm3\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Encoded guid (15 chars)&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-v8qi\&quot;&gt;&lt;span style=\&quot;font-weight:bold\&quot;&gt;byte&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-v8qi\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal\&quot;&gt;Encoded hostname&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-yzei\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;7cbtailjomqle1p&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-z6tn\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;j&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-z6tn\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;vr2d32i2voe60ce2&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;The work from the RedDrip Team focused on the encoded hostname portion of the string, we have made additional insights related to the encoded hostname and encoded guid portions.&lt;/p&gt;&lt;p&gt;At a high level the encoded hostnames take one of two encoding schemes. If all of the characters in the hostname are contained in the set of domain name-safe characters &lt;code&gt;&amp;quot;0123456789abcdefghijklmnopqrstuvwxyz-_.&amp;quot;&lt;/code&gt; then the &lt;code&gt;OrionImprovementBusinessLayer.CryptoHelper.Base64Decode&lt;/code&gt; algorithm, explained in the article, is used. If there are characters outside of that set in the hostname, then the &lt;code&gt;OrionImprovementBusinessLayer.CryptoHelper.Base64Encode&lt;/code&gt; is used instead and â00â is prepended to the encoding. This allows us to simply check if the first two characters of the encoded hostname are â00â and know how the hostname is encoded.&lt;/p&gt;&lt;p&gt;These function names within the compromised DLL are meant to resemble the names of legitimate functions, but in fact perform the message encoding for the malware. The DLL function Base64Decode is meant to resemble the legitimate function name base64decode, but its purpose is actually to perform the encoding of the query (which is a variant of base32 encoding).&lt;/p&gt;&lt;p&gt;The RedDrip Team has posted Python code for encoding and decoding the queries, including identifying random characters inserted into the queries at regular character intervals.&lt;/p&gt;&lt;p&gt;One potential issue we encountered with their implementation is the inclusion of a check clause looking for a â0â character in the encoded hostname (line 138 of the decoding script). This line causes the decoding algorithm to ignore any encoded hostnames that do not contain a â0â. We believe this was included because â0â is the encoded value of a â0â, â.â, â-â or â_â. Since fully qualified hostnames are comprised of multiple parts separated by â.âs, e.g. âexample.comâ, it makes sense to be expecting a â.â in the unencoded hostname and therefore only consider encoded hostnames containing a â0â. However, this causes the decoder to ignore many of the recorded DGA domains.&lt;/p&gt;&lt;p&gt;As we explain below, we believe that long domains are split across multiple queries where the second half is much shorter and unlikely to include a â.â. For example âwww2.example.câ takes up one message, meaning that in order to transmit the entire domain âwww2.example.câ a second message containing just âomâ would also need to be sent. This second message does not contain a â.â so its encoded form does not contain a â0â and it is ignored in the RedDrip teamâs implementation.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;the-quirk-hostnames-are-split-across-multiple-queries\&quot;&gt;The quirk: hostnames are split across multiple queries&lt;/h3&gt;\n            &lt;a href=\&quot;#the-quirk-hostnames-are-split-across-multiple-queries\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;A list of observed queries performed by the malware was published publicly on &lt;a href=\&quot;https://github.com/bambenek/research/blob/main/sunburst/uniq-hostnames.txt\&quot;&gt;GitHub&lt;/a&gt;. Applying the decoding script to this set of queries, we see some queries appear to be truncated, such as &lt;code&gt;grupobazar.loca&lt;/code&gt;, but also some decoded hostnames are curiously short or incomplete, such as âcomâ, â.comâ, or a single letter, such as âmâ, or âlâ.&lt;/p&gt;&lt;p&gt;When the hostname does not fit into the available payload section of the encoded query, it is split up across multiple queries. Queries are matched up by matching the GUID section after applying a byte-by-byte exclusive-or (xor).&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;analysis-of-first-15-characters\&quot;&gt;Analysis of first 15 characters&lt;/h3&gt;\n            &lt;a href=\&quot;#analysis-of-first-15-characters\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Noticing that long domains are split across multiple requests led us to believe that the first 16 characters encoded information to associate multipart messages. This would allow the receiver on the other end to correctly re-assemble the messages and get the entire domain. The RedDrip team identified the first 15 bytes as a GUID, we focused on those bytes and will refer to them subsequently as the header.&lt;/p&gt;&lt;p&gt;We found the following queries that we believed to be matches without knowing yet the correct pairings between message 1 and message 2 (payload has been altered):&lt;/p&gt;&lt;p&gt;&lt;b&gt;Part 1 - Both decode to âwww2.example.câ&lt;/b&gt;&lt;code&gt;r1q6arhpujcf6jb6qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;code&gt;r8stkst71ebqgj66qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Part 2 - Both decode to âomâ&lt;/b&gt;&lt;code&gt;0oni12r13ficnkqb2h.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;code&gt;ulfmcf44qd58t9e82h.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This gives us a final combined payload of &lt;b&gt;www2.example.com&lt;/b&gt;&lt;/p&gt;&lt;p&gt;This example gave us two sets of messages where we were confident the second part was associated with the first part, and allowed us to find the following relationship where message1 is the header of the first message and message2 is the header of the second:&lt;/p&gt;&lt;p&gt;&lt;code&gt;_Base32Decode(message1) XOR KEY = Base32Decode(message2)_&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The KEY is a single character. That character is xorâd with each byte of the Base32Decoded first header to produce the Base32Decoded second header. We do not currently know how to infer what character is used as the key, but we can still match messages together without that information. Since A XOR B = C where we know A and C but not B, we can instead use A XOR C = B. This means that in order to pair messages together we simply need to look for messages where XORâing them together results in a repeating character (the key).&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;i&gt;Base32Decode(message1) XOR Base32Decode(message2) = KEY&lt;/i&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Looking at the examples above this becomes&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 1&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 2&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Header&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;r1q6arhpujcf6jb&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0oni12r13ficnkq&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode (binary)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;101101000100110110111111011&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;010010000000011001010111111&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;01111000101001110100000101&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;110110010010000011010010000&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;001000110110110100111100100&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00100011111111000000000100&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;Weâve truncated the results slightly, but below shows the two binary representations and the third line shows the result of the XOR.&lt;/p&gt;&lt;p&gt;101101000100110110111111011010010000000011001010111111011110001010011101110110010010000011010010000001000110110110100111100100001000111111110000011011010110110101101101011011010110110101101101011011010110110101101101&lt;/p&gt;&lt;p&gt;We can see the XOR result is the repeating sequence â01101101âmeaning the original key was 0x6D or âmâ.&lt;/p&gt;&lt;p&gt;We provide the following python code as an implementation for matching paired messages (Note: the decoding functions are those provided by the RedDrip team):&lt;/p&gt;\n            &lt;pre class=\&quot;language-bash\&quot;&gt;&lt;code class=\&quot;language-bash\&quot;&gt;# string1 is the first 15 characters of the first message\n# string2 is the first 15 characters of the second message\ndef is_match(string1, string2):\n    encoded1 = Base32Decode(string1)\n    encoded2 = Base32Decode(string2)\n    xor_result = [chr(ord(a) ^ ord(b)) for a,b in zip(encoded1, encoded2)]\n    match_char = xor_result[0]\n    for character in xor_result[0:9]:\n        if character != match_char:\n            return False, None\n    return True, &amp;quot;0x{:02X}&amp;quot;.format(ord(match_char))&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;The following are additional headers which based on the payload content Cloudflare is confident are pairs (the payload has been redacted because it contains hostname information that is not yet publicly available):&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:18px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vrffaikp47gnsd4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;aob0ceh5l8cr6mco&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x4E&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vrffaikp47gnsd4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;aob0ceh5l8cr6mco&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x54&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 3:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-60hs{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-60hs\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vvu7884g0o86pr4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-60hs\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;6gpt7s654cfn4h6h&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x2B&lt;/p&gt;&lt;p&gt;We hypothesize that the xorkey can be derived from the header bytes and/or padding byte of the two messages, though we have not yet determined the relationship.&lt;/p&gt;&lt;hr/&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;update-12-18-2020\&quot;&gt;Update (12/18/2020):&lt;/h2&gt;\n            &lt;a href=\&quot;#update-12-18-2020\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Erik Hjelmvik posted a blog &lt;a href=\&quot;https://www.netresec.com/?page=Blog&amp;month=2020-12&amp;post=Reassembling-Victim-Domain-Fragments-from-SUNBURST-DNS\&quot;&gt;explaining where the xor key is located&lt;/a&gt;. Based on his code, we provide a python implementation for converting the header (first 16 bytes) into the decoded GUID as a string. Messages can then be paired by matching GUIDâs to reconstruct the full hostname.&lt;/p&gt;\n            &lt;pre class=\&quot;language-bash\&quot;&gt;&lt;code class=\&quot;language-bash\&quot;&gt;def decrypt_secure_string(header):\n    decoded = Base32Decode(header[0:16])\n    xor_key = ord(decoded[0])\n    decrypted = [&amp;quot;{0:02x}&amp;quot;.format(ord(b) ^ xor_key) for b in decoded]\n    return &amp;#039;&amp;#039;.join(decrypted[1:9])&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Updated example:&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 1&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 2&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Header&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;r1q6arhpujcf6jb&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0oni12r13ficnkq&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode Header (hex)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;b44dbf6900cafde29d05&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;d920d2046da7908ff004&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode first byte (xor key)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0xb4&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0xd9&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;XOR result (hex)\n&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00f90bddb47e495629&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00f90bddb47e495629&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&quot;],&quot;published_at&quot;:[0,&quot;2020-12-18T00:30:00.000+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-10-10T00:44:19.855Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5lypqCT188LGgkVsUxun0K/beb63fa4b8ff6791d1e97ff470214230/a-quirk-in-the-sunburst-dga-algorithm.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;3QNaVNNpUXrfZYUGDJkXwA&quot;],&quot;name&quot;:[0,&quot;Cloudflare Zero Trust&quot;],&quot;slug&quot;:[0,&quot;cloudflare-zero-trust&quot;]}],[0,{&quot;id&quot;:[0,&quot;15qx2Nvwrm4X8zknw3vXgC&quot;],&quot;name&quot;:[0,&quot;Cloudflare Gateway&quot;],&quot;slug&quot;:[0,&quot;gateway&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;6hv2Z69PGr0qU411KfQNUE&quot;],&quot;name&quot;:[0,&quot;Threat Intelligence&quot;],&quot;slug&quot;:[0,&quot;threat-intelligence&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Nick Blazier&quot;],&quot;slug&quot;:[0,&quot;nick-blazier&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6EqysfZ9O4B7fiqUFUpnuO/eb6b0dbd838f46c5275aed437b76e95f/nick-blazier.png&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Jesse Kipp&quot;],&quot;slug&quot;:[0,&quot;jesse&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/8yRqemLc8lLhE9Uwzd7G4/a303cca84c1840cc961831f1ea6b4213/jesse.jpg&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}]]],&quot;meta_description&quot;:[0,null],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;A quirk in the SUNBURST DGA algorithm Config&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0],&quot;description&quot;:[0],&quot;imgPreview&quot;:[0,&quot;&quot;]}]}],&quot;tagInfo&quot;:[0],&quot;authorInfo&quot;:[0],&quot;translatedPosts&quot;:[1,[]]}" ssr="" client="only" opts="{&quot;name&quot;:&quot;GoogleAnalytics&quot;,&quot;value&quot;:&quot;react&quot;}"></astro-island><script>(()=>{var i=t=>{let e=async()=>{await(await t())()};"requestIdleCallback"in window?window.requestIdleCallback(e):setTimeout(e,200)};(self.Astro||(self.Astro={})).idle=i;window.dispatchEvent(new Event("astro:idle"));})();</script><astro-island uid="2eLWtI" prefix="r3" component-url="/_astro/Navigation.WgR_RIZt.js" component-export="Navigation" renderer-url="/_astro/client.BQCS8AJJ.js" props="{&quot;title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;logo&quot;:[0,&quot;//images.ctfassets.net/zkvhlag99gkb/69RwBidpiEHCDZ9rFVVk7T/092507edbed698420b89658e5a6d5105/CF_logo_stacked_blktype.png&quot;],&quot;pagesStore&quot;:[0,{&quot;page&quot;:[0,&quot;Post&quot;],&quot;slug&quot;:[0,&quot;a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;translationsAvailable&quot;:[1,[]],&quot;navData&quot;:[1,[[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6QktrXeEFcl4e2dZUTZVGl&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:20.198Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:36:40.437Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,11],&quot;revision&quot;:[0,5],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Product News&quot;],&quot;name&quot;:[0,&quot;Product News&quot;],&quot;slug&quot;:[0,&quot;product-news&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;5kZtWqjqa7aOUoZr8NFGwI&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:26.040Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:30:22.751Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,5],&quot;revision&quot;:[0,3],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;name&quot;:[0,&quot;Radar&quot;],&quot;slug&quot;:[0,&quot;cloudflare-radar&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;J61Eszqn98amrYHq4IhTx&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:46.068Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:27:04.797Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,15],&quot;revision&quot;:[0,8],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Zero Trust&quot;],&quot;name&quot;:[0,&quot;Zero Trust&quot;],&quot;slug&quot;:[0,&quot;zero-trust&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;48r7QV00gLMWOIcM1CSDRy&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:54:22.790Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:25:45.018Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,13],&quot;revision&quot;:[0,7],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Speed &amp; Reliability&quot;],&quot;name&quot;:[0,&quot;Speed &amp; Reliability&quot;],&quot;slug&quot;:[0,&quot;speed-and-reliability&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:42:46.231Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:24:54.845Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,11],&quot;revision&quot;:[0,6],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Security&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;4HIPcb68qM0e26fIxyfzwQ&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:21.536Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:23:10.574Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,13],&quot;revision&quot;:[0,7],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Developers&quot;],&quot;name&quot;:[0,&quot;Developers&quot;],&quot;slug&quot;:[0,&quot;developers&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6Foe3R8of95cWVnQwe5Toi&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T22:44:28.803Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:21:42.459Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,17],&quot;revision&quot;:[0,9],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;AI&quot;],&quot;name&quot;:[0,&quot;AI&quot;],&quot;slug&quot;:[0,&quot;ai&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;16yk8DVbNNifxov5cWvAov&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:56:23.848Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:19:20.134Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,8],&quot;revision&quot;:[0,4],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Policy &amp; Legal&quot;],&quot;name&quot;:[0,&quot;Policy &amp; Legal&quot;],&quot;slug&quot;:[0,&quot;policy&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;V86khSc459Yi1AhTlvtY7&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:46:53.657Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-12-12T01:18:59.839Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,18],&quot;revision&quot;:[0,9],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Partners&quot;],&quot;name&quot;:[0,&quot;Partners&quot;],&quot;slug&quot;:[0,&quot;partners&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;4g8tPriKOAUwdUT4jNPebe&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:46:40.927Z&quot;],&quot;updatedAt&quot;:[0,&quot;2024-10-10T07:05:21.343Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,9],&quot;revision&quot;:[0,5],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Life at Cloudflare&quot;],&quot;name&quot;:[0,&quot;Life at Cloudflare&quot;],&quot;slug&quot;:[0,&quot;life-at-cloudflare&quot;],&quot;featured&quot;:[0,true]}]}]]]}],&quot;locale&quot;:[0,&quot;en-us&quot;],&quot;translations&quot;:[0,{&quot;posts.by&quot;:[0,&quot;By&quot;],&quot;footer.gdpr&quot;:[0,&quot;GDPR&quot;],&quot;lang_blurb1&quot;:[0,&quot;This post is also available in {lang1}.&quot;],&quot;lang_blurb2&quot;:[0,&quot;This post is also available in {lang1} and {lang2}.&quot;],&quot;lang_blurb3&quot;:[0,&quot;This post is also available in {lang1}, {lang2} and {lang3}.&quot;],&quot;footer.press&quot;:[0,&quot;Press&quot;],&quot;header.title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;search.clear&quot;:[0,&quot;Clear&quot;],&quot;search.filter&quot;:[0,&quot;Filter&quot;],&quot;search.source&quot;:[0,&quot;Source&quot;],&quot;footer.careers&quot;:[0,&quot;Careers&quot;],&quot;footer.company&quot;:[0,&quot;Company&quot;],&quot;footer.support&quot;:[0,&quot;Support&quot;],&quot;footer.the_net&quot;:[0,&quot;theNet&quot;],&quot;search.filters&quot;:[0,&quot;Filters&quot;],&quot;footer.our_team&quot;:[0,&quot;Our team&quot;],&quot;footer.webinars&quot;:[0,&quot;Webinars&quot;],&quot;page.more_posts&quot;:[0,&quot;More posts&quot;],&quot;posts.time_read&quot;:[0,&quot;{time} min read&quot;],&quot;search.language&quot;:[0,&quot;Language&quot;],&quot;footer.community&quot;:[0,&quot;Community&quot;],&quot;footer.resources&quot;:[0,&quot;Resources&quot;],&quot;footer.solutions&quot;:[0,&quot;Solutions&quot;],&quot;footer.trademark&quot;:[0,&quot;Trademark&quot;],&quot;header.subscribe&quot;:[0,&quot;Subscribe&quot;],&quot;footer.compliance&quot;:[0,&quot;Compliance&quot;],&quot;footer.free_plans&quot;:[0,&quot;Free plans&quot;],&quot;footer.impact_ESG&quot;:[0,&quot;Impact/ESG&quot;],&quot;posts.follow_on_X&quot;:[0,&quot;Follow on X&quot;],&quot;footer.help_center&quot;:[0,&quot;Help center&quot;],&quot;footer.network_map&quot;:[0,&quot;Network Map&quot;],&quot;header.please_wait&quot;:[0,&quot;Please Wait&quot;],&quot;page.related_posts&quot;:[0,&quot;Related posts&quot;],&quot;search.result_stat&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt; for &lt;strong&gt;{search_keyword}&lt;/strong&gt;&quot;],&quot;footer.case_studies&quot;:[0,&quot;Case Studies&quot;],&quot;footer.connect_2024&quot;:[0,&quot;Connect 2024&quot;],&quot;footer.terms_of_use&quot;:[0,&quot;Terms of Use&quot;],&quot;footer.white_papers&quot;:[0,&quot;White Papers&quot;],&quot;footer.cloudflare_tv&quot;:[0,&quot;Cloudflare TV&quot;],&quot;footer.community_hub&quot;:[0,&quot;Community Hub&quot;],&quot;footer.compare_plans&quot;:[0,&quot;Compare plans&quot;],&quot;footer.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.email_address&quot;:[0,&quot;Email Address&quot;],&quot;page.error.not_found&quot;:[0,&quot;Page not found&quot;],&quot;footer.developer_docs&quot;:[0,&quot;Developer docs&quot;],&quot;footer.privacy_policy&quot;:[0,&quot;Privacy Policy&quot;],&quot;footer.request_a_demo&quot;:[0,&quot;Request a demo&quot;],&quot;page.continue_reading&quot;:[0,&quot;Continue reading&quot;],&quot;footer.analysts_report&quot;:[0,&quot;Analyst reports&quot;],&quot;footer.for_enterprises&quot;:[0,&quot;For enterprises&quot;],&quot;footer.getting_started&quot;:[0,&quot;Getting Started&quot;],&quot;footer.learning_center&quot;:[0,&quot;Learning Center&quot;],&quot;footer.project_galileo&quot;:[0,&quot;Project Galileo&quot;],&quot;pagination.newer_posts&quot;:[0,&quot;Newer Posts&quot;],&quot;pagination.older_posts&quot;:[0,&quot;Older Posts&quot;],&quot;posts.social_buttons.x&quot;:[0,&quot;Discuss on X&quot;],&quot;search.source_location&quot;:[0,&quot;Source/Location&quot;],&quot;footer.about_cloudflare&quot;:[0,&quot;About Cloudflare&quot;],&quot;footer.athenian_project&quot;:[0,&quot;Athenian Project&quot;],&quot;footer.become_a_partner&quot;:[0,&quot;Become a partner&quot;],&quot;footer.cloudflare_radar&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;footer.network_services&quot;:[0,&quot;Network services&quot;],&quot;footer.trust_and_safety&quot;:[0,&quot;Trust &amp; Safety&quot;],&quot;header.get_started_free&quot;:[0,&quot;Get Started Free&quot;],&quot;page.search.placeholder&quot;:[0,&quot;Search Cloudflare&quot;],&quot;footer.cloudflare_status&quot;:[0,&quot;Cloudflare Status&quot;],&quot;footer.cookie_preference&quot;:[0,&quot;Cookie Preferences&quot;],&quot;header.valid_email_error&quot;:[0,&quot;Must be valid email.&quot;],&quot;footer.connectivity_cloud&quot;:[0,&quot;Connectivity cloud&quot;],&quot;footer.developer_services&quot;:[0,&quot;Developer services&quot;],&quot;footer.investor_relations&quot;:[0,&quot;Investor relations&quot;],&quot;page.not_found.error_code&quot;:[0,&quot;Error Code: 404&quot;],&quot;footer.logos_and_press_kit&quot;:[0,&quot;Logos &amp; press kit&quot;],&quot;footer.application_services&quot;:[0,&quot;Application services&quot;],&quot;footer.get_a_recommendation&quot;:[0,&quot;Get a recommendation&quot;],&quot;posts.social_buttons.reddit&quot;:[0,&quot;Discuss on Reddit&quot;],&quot;footer.sse_and_sase_services&quot;:[0,&quot;SSE and SASE services&quot;],&quot;page.not_found.outdated_link&quot;:[0,&quot;You may have used an outdated link, or you may have typed the address incorrectly.&quot;],&quot;footer.report_security_issues&quot;:[0,&quot;Report Security Issues&quot;],&quot;page.error.error_message_page&quot;:[0,&quot;Sorry, we can&#39;t find the page you are looking for.&quot;],&quot;header.subscribe_notifications&quot;:[0,&quot;Subscribe to receive notifications of new posts:&quot;],&quot;footer.cloudflare_for_campaigns&quot;:[0,&quot;Cloudflare for Campaigns&quot;],&quot;header.subscription_confimation&quot;:[0,&quot;Subscription confirmed. Thank you for subscribing!&quot;],&quot;posts.social_buttons.hackernews&quot;:[0,&quot;Discuss on Hacker News&quot;],&quot;footer.diversity_equity_inclusion&quot;:[0,&quot;Diversity, equity &amp; inclusion&quot;],&quot;footer.critical_infrastructure_defense_project&quot;:[0,&quot;Critical Infrastructure Defense Project&quot;]}]}" ssr="" client="idle" opts="{&quot;name&quot;:&quot;NavigationComponent&quot;,&quot;value&quot;:true}" await-children=""><header class="flex flex-row flex-wrap justify-between items-flex-end mw8 center mv3 pl3 pr1"><div class="w-100 flex items-flex-end justify-between justify-start-l"><div class="w-100 tr flex justify-end"><div class="flex justify-between items-center"><span class="dn di-l pr1"><a href="https://dash.cloudflare.com/sign-up" class="f1 blue1 dn di-l b no-underline underline-hover" target="_blank" rel="noreferrer">Get Started Free</a></span><span class="f1 gray4 dn di-l pr1">|</span><span class="dn di-l"><a target="_blank" href="https://www.cloudflare.com/plans/enterprise/contact/" class="f1 gray4 no-underline underline-hover pr1" rel="noreferrer">Contact Sales</a></span></div></div></div><div class="w-100 w-50-l flex items-end nb5 nb1-l"><a href="/" class="header-logo mr4 dn db-l"><img class="header-logo" src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/69RwBidpiEHCDZ9rFVVk7T/092507edbed698420b89658e5a6d5105/CF_logo_stacked_blktype.png" alt="The Cloudflare Blog" width="170" height="57"/></a><h2 class="mt0 mb1 dn di-l"><a href="/" class="fw5 f5 gray3 no-underline"><span class="dn di-l">The Cloudflare Blog</span></a></h2></div><div class="w-100 w-50-l dn db-l"><div class="w-100 tr mkto-sub-message"><p class="f2">Subscribe to receive notifications of new posts:</p></div><div class="w-100 tr"><div class="marketo-form-container"><form id="mktoForm_1653"><div class="top-subscribe-form-container"><div class="top-subscribe-form-field"><input placeholder="Email Address" class="top-subscribe-form-input" name="email" type="email" title="Must be valid email."/></div><button class="top-subscribe-form-button" type="button">Subscribe</button></div></form></div></div></div></header><nav dir="ltr" class="bb b--black-10 db dn-l w-100 ph3 "><div class=" flex justify-between items-center" style="height:44px"><a href="/search/"><img class="h-6 w-6" src="/images/magnifier.svg" alt="magnifier icon"/></a><button type="button" style="background:transparent;border:none"><img src="/images/hamburger.svg" alt="hamburger menu"/></button></div><div class="js-mobile-nav-container dn"><div class="flex flex-column flex-wrap bg-gray9 o-95 absolute w-90 ph3 z-1"><div class="pv3 ph2 tl"><a href="/tag/product-news/" class="no-underline gray1 f4 fw7">Product News</a></div><div class="pv3 ph2 tl"><a href="/tag/cloudflare-radar/" class="no-underline gray1 f4 fw7">Radar</a></div><div class="pv3 ph2 tl"><a href="/tag/zero-trust/" class="no-underline gray1 f4 fw7">Zero Trust</a></div><div class="pv3 ph2 tl"><a href="/tag/speed-and-reliability/" class="no-underline gray1 f4 fw7">Speed &amp; Reliability</a></div><div class="pv3 ph2 tl"><a href="/tag/security/" class="no-underline gray1 f4 fw7">Security</a></div><div class="pv3 ph2 tl"><a href="/tag/developers/" class="no-underline gray1 f4 fw7">Developers</a></div><div class="pv3 ph2 tl"><a href="/tag/ai/" class="no-underline gray1 f4 fw7">AI</a></div><div class="pv3 ph2 tl"><a href="/tag/policy/" class="no-underline gray1 f4 fw7">Policy &amp; Legal</a></div><div class="pv3 ph2 tl"><a href="/tag/partners/" class="no-underline gray1 f4 fw7">Partners</a></div><div class="pv3 ph2 tl"><a href="/tag/life-at-cloudflare/" class="no-underline gray1 f4 fw7">Life at Cloudflare</a></div></div></div></nav><nav id="nav" class="w-100 bb-0 bb-l b--black-10 z-1"><div id="desktop-nav-items-container" class="flex flex-wrap justify-between items-center mw8 center mv3 mv0-l"><div data-tag="product-news" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/product-news/" class="no-underline gray1 f2 fw5 pv3">Product News</a></div><div data-tag="cloudflare-radar" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/cloudflare-radar/" class="no-underline gray1 f2 fw5 pv3">Radar</a></div><div data-tag="zero-trust" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/zero-trust/" class="no-underline gray1 f2 fw5 pv3">Zero Trust</a></div><div data-tag="speed-and-reliability" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/speed-and-reliability/" class="no-underline gray1 f2 fw5 pv3">Speed &amp; Reliability</a></div><div data-tag="security" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/security/" class="no-underline gray1 f2 fw5 pv3">Security</a></div><div data-tag="developers" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/developers/" class="no-underline gray1 f2 fw5 pv3">Developers</a></div><div data-tag="ai" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/ai/" class="no-underline gray1 f2 fw5 pv3">AI</a></div><div data-tag="policy" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/policy/" class="no-underline gray1 f2 fw5 pv3">Policy &amp; Legal</a></div><div data-tag="partners" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/partners/" class="no-underline gray1 f2 fw5 pv3">Partners</a></div><div data-tag="life-at-cloudflare" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/life-at-cloudflare/" class="no-underline gray1 f2 fw5 pv3">Life at Cloudflare</a></div><div class="nav-item ml2 mr3 dn db-l pv3" data-tag="search icon"><a href="/search/"><img id="search-icon" class="h-6 w-6" src="/images/magnifier.svg" alt="magnifier icon"/></a></div></div></nav><!--astro:end--></astro-island><progress class="reading-progress" value="0" max="100" aria-label="Reading progress"></progress><script>(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event("astro:load"));})();</script><astro-island uid="MkNAF" prefix="r1" component-url="/_astro/Post.DnH_Wpc8.js" component-export="Post" renderer-url="/_astro/client.BQCS8AJJ.js" props="{&quot;post&quot;:[0,{&quot;id&quot;:[0,&quot;7vPEi0QIhuwlb050ssMzXB&quot;],&quot;title&quot;:[0,&quot;A quirk in the SUNBURST DGA algorithm&quot;],&quot;slug&quot;:[0,&quot;a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;excerpt&quot;:[0,&quot;On Wednesday, December 16, the RedDrip Team from QiAnXin Technology released their discoveries (tweet, github) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. I&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;\n            &lt;figure class=\&quot;kg-card kg-image-card \&quot;&gt;\n            \n            &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4y3VW6SLU672JNv2ExYhPt/5dc75005a2adcc9bb306992098032dad/Sunburst.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1600\&quot; height=\&quot;898\&quot; loading=\&quot;lazy\&quot;/&gt;\n            \n            &lt;/figure&gt;&lt;p&gt;On Wednesday, December 16, the RedDrip Team from QiAnXin Technology &lt;a href=\&quot;https://mp.weixin.qq.com/s/v-ekPFtVNZG1W7vWjcuVug\&quot;&gt;released their discoveries&lt;/a&gt; (&lt;a href=\&quot;https://twitter.com/RedDrip7/status/1339168187619790848?s=20\&quot;&gt;tweet&lt;/a&gt;, &lt;a href=\&quot;https://github.com/RedDrip7/SunBurst_DGA_Decode\&quot;&gt;github&lt;/a&gt;) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. In studying queries performed by the malware, Cloudflare has uncovered additional details about how the Domain Generation Algorithm (DGA) encodes data and exfiltrates the compromised hostname to the command and control servers.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;background\&quot;&gt;Background&lt;/h3&gt;\n            &lt;a href=\&quot;#background\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;The RedDrip team discovered that the DNS queries are created by combining the previously reverse-engineered unique guid (based on hashing of hostname and MAC address) with a payload that is a custom base 32 encoding of the hostname. The article they published includes screenshots of decompiled or reimplemented C# functions that are included in the compromised DLL. This background primer summarizes their work so far (which is published in Chinese).&lt;/p&gt;&lt;p&gt;RedDrip discovered that the DGA subdomain portion of the query is split into three parts:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;&amp;lt;encoded_guid&amp;gt; + &amp;lt;byte&amp;gt; + &amp;lt;encoded_hostname&amp;gt;&lt;/b&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;An example malicious domain is:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;7cbtailjomqle1pjvr2d32i2voe60ce2.appsync-api.us-east-1.avsvmcloud.com&lt;/b&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Where the domain is split into the three parts as&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-yzei{border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-z6tn{border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}\n.tg .tg-8tm3{background-color:#efefef;border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}\n.tg .tg-v8qi{background-color:#efefef;border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot; style=\&quot;undefined;table-layout: fixed; width: 683px\&quot;&gt;\n&lt;colgroup&gt;\n&lt;col style=\&quot;width: 265px\&quot;&gt;\n&lt;col style=\&quot;width: 180px\&quot;&gt;\n&lt;col style=\&quot;width: 238px\&quot;&gt;\n&lt;/colgroup&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-8tm3\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Encoded guid (15 chars)&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-v8qi\&quot;&gt;&lt;span style=\&quot;font-weight:bold\&quot;&gt;byte&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-v8qi\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal\&quot;&gt;Encoded hostname&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-yzei\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;7cbtailjomqle1p&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-z6tn\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;j&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-z6tn\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none\&quot;&gt;vr2d32i2voe60ce2&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;The work from the RedDrip Team focused on the encoded hostname portion of the string, we have made additional insights related to the encoded hostname and encoded guid portions.&lt;/p&gt;&lt;p&gt;At a high level the encoded hostnames take one of two encoding schemes. If all of the characters in the hostname are contained in the set of domain name-safe characters &lt;code&gt;&amp;quot;0123456789abcdefghijklmnopqrstuvwxyz-_.&amp;quot;&lt;/code&gt; then the &lt;code&gt;OrionImprovementBusinessLayer.CryptoHelper.Base64Decode&lt;/code&gt; algorithm, explained in the article, is used. If there are characters outside of that set in the hostname, then the &lt;code&gt;OrionImprovementBusinessLayer.CryptoHelper.Base64Encode&lt;/code&gt; is used instead and â00â is prepended to the encoding. This allows us to simply check if the first two characters of the encoded hostname are â00â and know how the hostname is encoded.&lt;/p&gt;&lt;p&gt;These function names within the compromised DLL are meant to resemble the names of legitimate functions, but in fact perform the message encoding for the malware. The DLL function Base64Decode is meant to resemble the legitimate function name base64decode, but its purpose is actually to perform the encoding of the query (which is a variant of base32 encoding).&lt;/p&gt;&lt;p&gt;The RedDrip Team has posted Python code for encoding and decoding the queries, including identifying random characters inserted into the queries at regular character intervals.&lt;/p&gt;&lt;p&gt;One potential issue we encountered with their implementation is the inclusion of a check clause looking for a â0â character in the encoded hostname (line 138 of the decoding script). This line causes the decoding algorithm to ignore any encoded hostnames that do not contain a â0â. We believe this was included because â0â is the encoded value of a â0â, â.â, â-â or â_â. Since fully qualified hostnames are comprised of multiple parts separated by â.âs, e.g. âexample.comâ, it makes sense to be expecting a â.â in the unencoded hostname and therefore only consider encoded hostnames containing a â0â. However, this causes the decoder to ignore many of the recorded DGA domains.&lt;/p&gt;&lt;p&gt;As we explain below, we believe that long domains are split across multiple queries where the second half is much shorter and unlikely to include a â.â. For example âwww2.example.câ takes up one message, meaning that in order to transmit the entire domain âwww2.example.câ a second message containing just âomâ would also need to be sent. This second message does not contain a â.â so its encoded form does not contain a â0â and it is ignored in the RedDrip teamâs implementation.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;the-quirk-hostnames-are-split-across-multiple-queries\&quot;&gt;The quirk: hostnames are split across multiple queries&lt;/h3&gt;\n            &lt;a href=\&quot;#the-quirk-hostnames-are-split-across-multiple-queries\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;A list of observed queries performed by the malware was published publicly on &lt;a href=\&quot;https://github.com/bambenek/research/blob/main/sunburst/uniq-hostnames.txt\&quot;&gt;GitHub&lt;/a&gt;. Applying the decoding script to this set of queries, we see some queries appear to be truncated, such as &lt;code&gt;grupobazar.loca&lt;/code&gt;, but also some decoded hostnames are curiously short or incomplete, such as âcomâ, â.comâ, or a single letter, such as âmâ, or âlâ.&lt;/p&gt;&lt;p&gt;When the hostname does not fit into the available payload section of the encoded query, it is split up across multiple queries. Queries are matched up by matching the GUID section after applying a byte-by-byte exclusive-or (xor).&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;analysis-of-first-15-characters\&quot;&gt;Analysis of first 15 characters&lt;/h3&gt;\n            &lt;a href=\&quot;#analysis-of-first-15-characters\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Noticing that long domains are split across multiple requests led us to believe that the first 16 characters encoded information to associate multipart messages. This would allow the receiver on the other end to correctly re-assemble the messages and get the entire domain. The RedDrip team identified the first 15 bytes as a GUID, we focused on those bytes and will refer to them subsequently as the header.&lt;/p&gt;&lt;p&gt;We found the following queries that we believed to be matches without knowing yet the correct pairings between message 1 and message 2 (payload has been altered):&lt;/p&gt;&lt;p&gt;&lt;b&gt;Part 1 - Both decode to âwww2.example.câ&lt;/b&gt;&lt;code&gt;r1q6arhpujcf6jb6qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;code&gt;r8stkst71ebqgj66qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Part 2 - Both decode to âomâ&lt;/b&gt;&lt;code&gt;0oni12r13ficnkqb2h.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;code&gt;ulfmcf44qd58t9e82h.appsync-api.us-west-2.avsvmcloud.com&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This gives us a final combined payload of &lt;b&gt;www2.example.com&lt;/b&gt;&lt;/p&gt;&lt;p&gt;This example gave us two sets of messages where we were confident the second part was associated with the first part, and allowed us to find the following relationship where message1 is the header of the first message and message2 is the header of the second:&lt;/p&gt;&lt;p&gt;&lt;code&gt;_Base32Decode(message1) XOR KEY = Base32Decode(message2)_&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The KEY is a single character. That character is xorâd with each byte of the Base32Decoded first header to produce the Base32Decoded second header. We do not currently know how to infer what character is used as the key, but we can still match messages together without that information. Since A XOR B = C where we know A and C but not B, we can instead use A XOR C = B. This means that in order to pair messages together we simply need to look for messages where XORâing them together results in a repeating character (the key).&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;i&gt;Base32Decode(message1) XOR Base32Decode(message2) = KEY&lt;/i&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Looking at the examples above this becomes&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 1&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 2&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Header&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;r1q6arhpujcf6jb&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0oni12r13ficnkq&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode (binary)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;101101000100110110111111011&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;010010000000011001010111111&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;01111000101001110100000101&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;110110010010000011010010000&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;001000110110110100111100100&lt;/span&gt;&lt;br&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00100011111111000000000100&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;Weâve truncated the results slightly, but below shows the two binary representations and the third line shows the result of the XOR.&lt;/p&gt;&lt;p&gt;101101000100110110111111011010010000000011001010111111011110001010011101110110010010000011010010000001000110110110100111100100001000111111110000011011010110110101101101011011010110110101101101011011010110110101101101&lt;/p&gt;&lt;p&gt;We can see the XOR result is the repeating sequence â01101101âmeaning the original key was 0x6D or âmâ.&lt;/p&gt;&lt;p&gt;We provide the following python code as an implementation for matching paired messages (Note: the decoding functions are those provided by the RedDrip team):&lt;/p&gt;\n            &lt;pre class=\&quot;language-bash\&quot;&gt;&lt;code class=\&quot;language-bash\&quot;&gt;# string1 is the first 15 characters of the first message\n# string2 is the first 15 characters of the second message\ndef is_match(string1, string2):\n    encoded1 = Base32Decode(string1)\n    encoded2 = Base32Decode(string2)\n    xor_result = [chr(ord(a) ^ ord(b)) for a,b in zip(encoded1, encoded2)]\n    match_char = xor_result[0]\n    for character in xor_result[0:9]:\n        if character != match_char:\n            return False, None\n    return True, &amp;quot;0x{:02X}&amp;quot;.format(ord(match_char))&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;The following are additional headers which based on the payload content Cloudflare is confident are pairs (the payload has been redacted because it contains hostname information that is not yet publicly available):&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:18px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vrffaikp47gnsd4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;aob0ceh5l8cr6mco&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x4E&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vrffaikp47gnsd4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;aob0ceh5l8cr6mco&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x54&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 3:&lt;/b&gt;&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-60hs{font-size:20px;text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-60hs\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;vvu7884g0o86pr4a&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-60hs\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;6gpt7s654cfn4h6h&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;xorkey: 0x2B&lt;/p&gt;&lt;p&gt;We hypothesize that the xorkey can be derived from the header bytes and/or padding byte of the two messages, though we have not yet determined the relationship.&lt;/p&gt;&lt;hr/&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;update-12-18-2020\&quot;&gt;Update (12/18/2020):&lt;/h2&gt;\n            &lt;a href=\&quot;#update-12-18-2020\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Erik Hjelmvik posted a blog &lt;a href=\&quot;https://www.netresec.com/?page=Blog&amp;month=2020-12&amp;post=Reassembling-Victim-Domain-Fragments-from-SUNBURST-DNS\&quot;&gt;explaining where the xor key is located&lt;/a&gt;. Based on his code, we provide a python implementation for converting the header (first 16 bytes) into the decoded GUID as a string. Messages can then be paired by matching GUIDâs to reconstruct the full hostname.&lt;/p&gt;\n            &lt;pre class=\&quot;language-bash\&quot;&gt;&lt;code class=\&quot;language-bash\&quot;&gt;def decrypt_secure_string(header):\n    decoded = Base32Decode(header[0:16])\n    xor_key = ord(decoded[0])\n    decrypted = [&amp;quot;{0:02x}&amp;quot;.format(ord(b) ^ xor_key) for b in decoded]\n    return &amp;#039;&amp;#039;.join(decrypted[1:9])&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Updated example:&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 1&lt;/th&gt;\n    &lt;th class=\&quot;tg-wa1i\&quot;&gt;Message 2&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-style:normal;text-decoration:none\&quot;&gt;Header&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;r1q6arhpujcf6jb&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0oni12r13ficnkq&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode Header (hex)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;b44dbf6900cafde29d05&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;d920d2046da7908ff004&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;Base32Decode first byte (xor key)&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0xb4&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;0xd9&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;XOR result (hex)\n&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00f90bddb47e495629&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none\&quot;&gt;00f90bddb47e495629&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;&lt;!--kg-card-end: html--&gt;&quot;],&quot;published_at&quot;:[0,&quot;2020-12-18T00:30:00.000+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-10-10T00:44:19.855Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5lypqCT188LGgkVsUxun0K/beb63fa4b8ff6791d1e97ff470214230/a-quirk-in-the-sunburst-dga-algorithm.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;3QNaVNNpUXrfZYUGDJkXwA&quot;],&quot;name&quot;:[0,&quot;Cloudflare Zero Trust&quot;],&quot;slug&quot;:[0,&quot;cloudflare-zero-trust&quot;]}],[0,{&quot;id&quot;:[0,&quot;15qx2Nvwrm4X8zknw3vXgC&quot;],&quot;name&quot;:[0,&quot;Cloudflare Gateway&quot;],&quot;slug&quot;:[0,&quot;gateway&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;6hv2Z69PGr0qU411KfQNUE&quot;],&quot;name&quot;:[0,&quot;Threat Intelligence&quot;],&quot;slug&quot;:[0,&quot;threat-intelligence&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Nick Blazier&quot;],&quot;slug&quot;:[0,&quot;nick-blazier&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6EqysfZ9O4B7fiqUFUpnuO/eb6b0dbd838f46c5275aed437b76e95f/nick-blazier.png&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Jesse Kipp&quot;],&quot;slug&quot;:[0,&quot;jesse&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/8yRqemLc8lLhE9Uwzd7G4/a303cca84c1840cc961831f1ea6b4213/jesse.jpg&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}]]],&quot;meta_description&quot;:[0,null],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;A quirk in the SUNBURST DGA algorithm Config&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0],&quot;description&quot;:[0],&quot;imgPreview&quot;:[0,&quot;&quot;]}]}],&quot;initialReadingTime&quot;:[0,&quot;4&quot;],&quot;relatedPosts&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;5GK429XQHhFzVyKSXGZ2R6&quot;],&quot;title&quot;:[0,&quot;Elephants in tunnels: how Hyperdrive connects to databases inside your VPC networks&quot;],&quot;slug&quot;:[0,&quot;elephants-in-tunnels-how-hyperdrive-connects-to-databases-inside-your-vpc-networks&quot;],&quot;excerpt&quot;:[0,&quot;Hyperdrive (Cloudflareâs globally distributed SQL connection pooler and cache) recently added support for directing database traffic from Workers across Cloudflare Tunnels. We dive deep on what it took to add this feature.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;With Septemberâs &lt;a href=\&quot;https://blog.cloudflare.com/builder-day-2024-announcements/#connect-to-private-databases-from-workers\&quot;&gt;&lt;u&gt;announcement&lt;/u&gt;&lt;/a&gt; of Hyperdriveâs ability to send database traffic from &lt;a href=\&quot;https://workers.cloudflare.com/\&quot;&gt;&lt;u&gt;Workers&lt;/u&gt;&lt;/a&gt; over &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\&quot;&gt;&lt;u&gt;Cloudflare Tunnels&lt;/u&gt;&lt;/a&gt;, we wanted to dive into the details of what it took to make this happen.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;hyper-who\&quot;&gt;Hyper-who?&lt;/h2&gt;\n            &lt;a href=\&quot;#hyper-who\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Accessing your data from anywhere in Region Earth can be hard. Traditional databases are powerful, familiar, and feature-rich, but your users can be thousands of miles away from your database. This can cause slower connection startup times, slower queries, and connection exhaustion as everything takes longer to accomplish.&lt;/p&gt;&lt;p&gt;&lt;a href=\&quot;https://developers.cloudflare.com/workers/\&quot;&gt;&lt;u&gt;Cloudflare Workers&lt;/u&gt;&lt;/a&gt; is an incredibly lightweight runtime, which enables our customers to deploy their applications globally by default and renders the &lt;a href=\&quot;https://en.wikipedia.org/wiki/Cold_start_(computing)\&quot;&gt;&lt;u&gt;cold start&lt;/u&gt;&lt;/a&gt; problem almost irrelevant. The trade-off for these light, ephemeral execution contexts is the lack of persistence for things like database connections. Database connections are also notoriously expensive to spin up, with many round trips required between client and server before any query or result bytes can be exchanged.&lt;/p&gt;&lt;p&gt;&lt;a href=\&quot;https://blog.cloudflare.com/hyperdrive-making-regional-databases-feel-distributed\&quot;&gt;&lt;u&gt;Hyperdrive&lt;/u&gt;&lt;/a&gt; is designed to make the centralized databases you already have feel like theyâre global while keeping connections to those databases hot. We use our &lt;a href=\&quot;https://www.cloudflare.com/network/\&quot;&gt;&lt;u&gt;global network&lt;/u&gt;&lt;/a&gt; to get faster routes to your database, keep connection pools primed, and cache your most frequently run queries as close to users as possible.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;why-a-tunnel\&quot;&gt;Why a Tunnel?&lt;/h2&gt;\n            &lt;a href=\&quot;#why-a-tunnel\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;For something as sensitive as your database, exposing access to the public Internet can be uncomfortable. It is common to instead host your database on a private network, and allowlist known-safe IP addresses or configure &lt;a href=\&quot;https://www.cloudflare.com/learning/network-layer/what-is-gre-tunneling/\&quot;&gt;&lt;u&gt;GRE tunnels&lt;/u&gt;&lt;/a&gt; to permit traffic to it. This is complex, toilsome, and error-prone.Â &lt;/p&gt;&lt;p&gt;On Cloudflareâs &lt;a href=\&quot;https://www.cloudflare.com/en-gb/developer-platform/\&quot;&gt;&lt;u&gt;Developer Platform&lt;/u&gt;&lt;/a&gt;, we strive for simplicity and ease-of-use. We cannot expect all of our customers to be experts in configuring networking solutions, and so we went in search of a simpler solution. &lt;a href=\&quot;https://www.cloudflare.com/the-net/top-of-mind-security/customer-zero/\&quot;&gt;&lt;u&gt;Being your own customer&lt;/u&gt;&lt;/a&gt; is rarely a bad choice, and it so happens that Cloudflare offers an excellent option for this scenario: Tunnels.&lt;/p&gt;&lt;p&gt;&lt;a href=\&quot;https://www.cloudflare.com/products/tunnel/\&quot;&gt;&lt;u&gt;Cloudflare Tunnel&lt;/u&gt;&lt;/a&gt; is a Zero Trust product that creates a secure connection between your private network and Cloudflare. Exposing services within your private network can be as simple as &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/downloads/\&quot;&gt;&lt;u&gt;running a &lt;/u&gt;&lt;code&gt;&lt;u&gt;cloudflared&lt;/u&gt;&lt;/code&gt;&lt;u&gt; binary&lt;/u&gt;&lt;/a&gt;, or deploying a Docker container running the &lt;a href=\&quot;https://hub.docker.com/r/cloudflare/cloudflared\&quot;&gt;&lt;code&gt;&lt;u&gt;cloudflared&lt;/u&gt;&lt;/code&gt;&lt;u&gt; image we distribute&lt;/u&gt;&lt;/a&gt;. &lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3182f43rbwdH9krF1xhdlC/d22430cdb1efa134031f94fea691c36e/image1.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1000\&quot; height=\&quot;180\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;a-custom-handler-and-generic-streams\&quot;&gt;A custom handler and generic streams&lt;/h2&gt;\n            &lt;a href=\&quot;#a-custom-handler-and-generic-streams\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Integrating with Tunnels to support sending Postgres directly through them was a bit of a new challenge for us. Most of the time, when we use Tunnels internally (more on that later!), we rely on the excellent job &lt;code&gt;cloudflared&lt;/code&gt; does of handling all of the mechanics, and we just treat them as pipes. That wouldnât work for Hyperdrive, though, so we had to dig into how Tunnels actually ingress traffic to build a solution.&lt;/p&gt;&lt;p&gt;Hyperdrive handles Postgres traffic using an entirely custom implementation of the &lt;a href=\&quot;https://www.postgresql.org/docs/current/protocol.html\&quot;&gt;&lt;u&gt;Postgres message protocol&lt;/u&gt;&lt;/a&gt;. This is necessary, because we sometimes have to &lt;a href=\&quot;https://blog.cloudflare.com/postgres-named-prepared-statements-supported-hyperdrive\&quot;&gt;&lt;u&gt;alter the specific type or content&lt;/u&gt;&lt;/a&gt; of messages sent from client to server, or vice versa. Handling individual bytes gives us the flexibility to implement whatever logic any new feature might need.&lt;/p&gt;&lt;p&gt;An additional, perhaps less obvious, benefit of handling Postgres message traffic as just bytes is that we are not bound to the transport layer choices of some &lt;a href=\&quot;https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\&quot;&gt;&lt;u&gt;ORM&lt;/u&gt;&lt;/a&gt; or library. One of the nuances of running services in Cloudflare is that we may want to egress traffic over different services or protocols, for a variety of different reasons. In this case, being able to egress traffic via a Tunnel would be pretty challenging if we were stuck with whatever raw TCP socket a library had established for us.&lt;/p&gt;&lt;p&gt;The way we accomplish this relies on a mainstay of Rust: &lt;a href=\&quot;https://doc.rust-lang.org/book/ch10-02-traits.html\&quot;&gt;&lt;u&gt;traits&lt;/u&gt;&lt;/a&gt; (which are how Rust lets developers apply logic across generic functions and types). In the Rust ecosystem, there are two traits that define the behavior Hyperdrive wants out of its transport layers: &lt;a href=\&quot;https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html\&quot;&gt;&lt;code&gt;&lt;u&gt;AsyncRead&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=\&quot;https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html\&quot;&gt;&lt;code&gt;&lt;u&gt;AsyncWrite&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;. There are a couple of others we also need, but weâre going to focus on just these two. These traits enable us to code our entire custom handler against a generic stream of data, without the handler needing to know anything about the underlying protocol used to implement the stream. So, we can pass around a WebSocket connection as a generic I/O stream, wherever it might be needed.&lt;/p&gt;&lt;p&gt;As an example, the code to create a generic TCP stream and send a Postgres startup message across it might look like this:&lt;/p&gt;\n            &lt;pre class=\&quot;language-RUST\&quot;&gt;&lt;code class=\&quot;language-RUST\&quot;&gt;/// Send a startup message to a Postgres server, in the role of a PG client.\n/// https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-STARTUPMESSAGE\npub async fn send_startup&amp;lt;S&amp;gt;(stream: &amp;amp;mut S, user_name: &amp;amp;str, db_name: &amp;amp;str, app_name: &amp;amp;str) -&amp;gt; Result&amp;lt;(), ConnectionError&amp;gt;\nwhere\n    S: AsyncWrite + Unpin,\n{\n    let protocol_number = 196608 as i32;\n    let user_str = &amp;amp;b&amp;quot;user\\0&amp;quot;[..];\n    let user_bytes = user_name.as_bytes();\n    let db_str = &amp;amp;b&amp;quot;database\\0&amp;quot;[..];\n    let db_bytes = db_name.as_bytes();\n    let app_str = &amp;amp;b&amp;quot;application_name\\0&amp;quot;[..];\n    let app_bytes = app_name.as_bytes();\n    let len = 4 + 4\n        + user_str.len() + user_bytes.len() + 1\n        + db_str.len() + db_bytes.len() + 1\n        + app_str.len() + app_bytes.len() + 1 + 1;\n\n    // Construct a BytesMut of our startup message, then send it\n    let mut startup_message = BytesMut::with_capacity(len as usize);\n    startup_message.put_i32(len as i32);\n    startup_message.put_i32(protocol_number);\n    startup_message.put(user_str);\n    startup_message.put_slice(user_bytes);\n    startup_message.put_u8(0);\n    startup_message.put(db_str);\n    startup_message.put_slice(db_bytes);\n    startup_message.put_u8(0);\n    startup_message.put(app_str);\n    startup_message.put_slice(app_bytes);\n    startup_message.put_u8(0);\n    startup_message.put_u8(0);\n\n    match stream.write_all(&amp;amp;startup_message).await {\n        Ok(_) =&amp;gt; Ok(()),\n        Err(err) =&amp;gt; {\n            error!(&amp;quot;Error writing startup to server: {}&amp;quot;, err.to_string());\n            ConnectionError::InternalError\n        }\n    }\n}\n\n/// Connect to a TCP socket\nlet stream = match TcpStream::connect((&amp;quot;localhost&amp;quot;, 5432)).await {\n    Ok(s) =&amp;gt; s,\n    Err(err) =&amp;gt; {\n        error!(&amp;quot;Error connecting to address: {}&amp;quot;, err.to_string());\n        return ConnectionError::InternalError;\n    }\n};\nlet _ = send_startup(&amp;amp;mut stream, &amp;quot;db_user&amp;quot;, &amp;quot;my_db&amp;quot;).await;&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;With this approach, if we wanted to encrypt the stream using &lt;a href=\&quot;https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/#:~:text=Transport%20Layer%20Security%2C%20or%20TLS,web%20browsers%20loading%20a%20website.\&quot;&gt;&lt;u&gt;TLS&lt;/u&gt;&lt;/a&gt; before we write to it (upgrading our existing &lt;code&gt;TcpStream&lt;/code&gt; connection in-place, to an &lt;code&gt;SslStream&lt;/code&gt;), we would only have to change the code we use to create the stream, while generating and sending the traffic would remain unchanged. This is because &lt;code&gt;SslStream&lt;/code&gt; also implements &lt;code&gt;AsyncWrite&lt;/code&gt;!&lt;/p&gt;\n            &lt;pre class=\&quot;language-RUST\&quot;&gt;&lt;code class=\&quot;language-RUST\&quot;&gt;/// We&amp;#039;re handwaving the SSL setup here. You&amp;#039;re welcome.\nlet conn_config = new_tls_client_config()?;\n\n/// Encrypt the TcpStream, returning an SslStream\nlet ssl_stream = match tokio_boring::connect(conn_config, domain, stream).await {\n    Ok(s) =&amp;gt; s,\n    Err(err) =&amp;gt; {\n        error!(&amp;quot;Error during websocket TLS handshake: {}&amp;quot;, err.to_string());\n        return ConnectionError::InternalError;\n    }\n};\nlet _ = send_startup(&amp;amp;mut ssl_stream, &amp;quot;db_user&amp;quot;, &amp;quot;my_db&amp;quot;).await;&lt;/pre&gt;&lt;/code&gt;\n            \n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;whence-websocket\&quot;&gt;Whence WebSocket&lt;/h2&gt;\n            &lt;a href=\&quot;#whence-websocket\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;&lt;a href=\&quot;https://datatracker.ietf.org/doc/html/rfc6455\&quot;&gt;&lt;u&gt;WebSocket&lt;/u&gt;&lt;/a&gt; is an application layer protocol that enables bidirectional communication between a client and server. Typically, to establish a WebSocket connection, a client initiates an HTTP request and indicates they wish to upgrade the connection to WebSocket via the âUpgradeâ header. Then, once the client and server complete the handshake, both parties can send messages over the connection until one of them terminates it.&lt;/p&gt;&lt;p&gt;Now, it turns out that the way Cloudflare Tunnels work under the hood is that both ends of the tunnel want to speak WebSocket, and rely on a translation layer to convert all traffic to or from WebSocket. The &lt;code&gt;cloudflared&lt;/code&gt; daemon you spin up within your private network handles this for us! For Hyperdrive, however, we did not have a suitable translation layer to send Postgres messages across WebSocket, and had to write one.&lt;/p&gt;&lt;p&gt;One of the (many) fantastic things about Rust traits is that the contract they present is very clear. To be &lt;code&gt;AsyncRead&lt;/code&gt;, you just need to implement &lt;code&gt;poll_read&lt;/code&gt;. To be &lt;code&gt;AsyncWrite&lt;/code&gt;, you need to implement only three functions (&lt;code&gt;poll_write&lt;/code&gt;, &lt;code&gt;poll_flush&lt;/code&gt;, and &lt;code&gt;poll_shutdown&lt;/code&gt;). Further, there is excellent support for WebSocket in Rust built on top of the &lt;a href=\&quot;https://github.com/snapview/tungstenite-rs\&quot;&gt;&lt;u&gt;tungstenite-rs library&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thus, building our custom WebSocket stream such that it can share the same machinery as all our other generic streams just means translating the existing WebSocket support into these poll functions. There are some existing OSS projects that do this, but for multiple reasons we could not use the existing options. The primary reason is that Hyperdrive operates across multiple threads (thanks to the &lt;a href=\&quot;https://docs.rs/tokio/latest/tokio/runtime/index.html\&quot;&gt;&lt;u&gt;tokio runtime&lt;/u&gt;&lt;/a&gt;), and so we rely on our connections to also handle &lt;a href=\&quot;https://doc.rust-lang.org/std/marker/trait.Send.html\&quot;&gt;&lt;code&gt;&lt;u&gt;Send&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=\&quot;https://doc.rust-lang.org/std/marker/trait.Sync.html\&quot;&gt;&lt;code&gt;&lt;u&gt;Sync&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href=\&quot;https://doc.rust-lang.org/std/marker/trait.Unpin.html\&quot;&gt;&lt;code&gt;&lt;u&gt;Unpin&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;. None of the available solutions had all five traits handled. It turns out that most of them went with the paradigm of &lt;a href=\&quot;https://docs.rs/futures/latest/futures/sink/trait.Sink.html\&quot;&gt;&lt;code&gt;&lt;u&gt;Sink&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=\&quot;https://docs.rs/futures/latest/futures/stream/trait.Stream.html\&quot;&gt;&lt;code&gt;&lt;u&gt;Stream&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;, which provide a solid base from which to translate to &lt;code&gt;AsyncRead&lt;/code&gt; and &lt;code&gt;AsyncWrite&lt;/code&gt;. In fact some of the functions overlap, and can be passed through almost unchanged. For example, &lt;code&gt;poll_flush&lt;/code&gt; and &lt;code&gt;poll_shutdown&lt;/code&gt; have 1-to-1 analogs, and require almost no engineering effort to convert from &lt;code&gt;Sink&lt;/code&gt; to &lt;code&gt;AsyncWrite&lt;/code&gt;.&lt;/p&gt;\n            &lt;pre class=\&quot;language-RUST\&quot;&gt;&lt;code class=\&quot;language-RUST\&quot;&gt;/// We use this struct to implement the traits we need on top of a WebSocketStream\npub struct HyperSocket&amp;lt;S&amp;gt;\nwhere\n    S: AsyncRead + AsyncWrite + Send + Sync + Unpin,\n{\n    inner: WebSocketStream&amp;lt;S&amp;gt;,\n    read_state: Option&amp;lt;ReadState&amp;gt;,\n    write_err: Option&amp;lt;Error&amp;gt;,\n}\n\nimpl&amp;lt;S&amp;gt; AsyncWrite for HyperSocket&amp;lt;S&amp;gt;\nwhere\n    S: AsyncRead + AsyncWrite + Send + Sync + Unpin,\n{\n    fn poll_flush(mut self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&amp;#039;_&amp;gt;) -&amp;gt; Poll&amp;lt;io::Result&amp;lt;()&amp;gt;&amp;gt; {\n        match ready!(Pin::new(&amp;amp;mut self.inner).poll_flush(cx)) {\n            Ok(_) =&amp;gt; Poll::Ready(Ok(())),\n            Err(err) =&amp;gt; Poll::Ready(Err(Error::new(ErrorKind::Other, err))),\n        }\n    }\n\n    fn poll_shutdown(mut self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context&amp;lt;&amp;#039;_&amp;gt;) -&amp;gt; Poll&amp;lt;io::Result&amp;lt;()&amp;gt;&amp;gt; {\n        match ready!(Pin::new(&amp;amp;mut self.inner).poll_close(cx)) {\n            Ok(_) =&amp;gt; Poll::Ready(Ok(())),\n            Err(err) =&amp;gt; Poll::Ready(Err(Error::new(ErrorKind::Other, err))),\n        }\n    }\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;With that translation done, we can use an existing WebSocket library to upgrade our &lt;code&gt;SslStream&lt;/code&gt; connection to a Cloudflare Tunnel, and wrap the result in our &lt;code&gt;AsyncRead/AsyncWrite&lt;/code&gt; implementation. The result can then be used anywhere that our other transport streams would work, without any changes needed to the rest of our codebase!Â &lt;/p&gt;&lt;p&gt;That would look something like this:&lt;/p&gt;\n            &lt;pre class=\&quot;language-RUST\&quot;&gt;&lt;code class=\&quot;language-RUST\&quot;&gt;let websocket = match tokio_tungstenite::client_async(request, ssl_stream).await {\n    Ok(ws) =&amp;gt; Ok(ws),\n    Err(err) =&amp;gt; {\n        error!(&amp;quot;Error during websocket conn setup: {}&amp;quot;, err.to_string());\n        return ConnectionError::InternalError;\n    }\n};\nlet websocket_stream = HyperSocket::new(websocket));\nlet _ = send_startup(&amp;amp;mut websocket_stream, &amp;quot;db_user&amp;quot;, &amp;quot;my_db&amp;quot;).await;&lt;/pre&gt;&lt;/code&gt;\n            \n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;access-granted\&quot;&gt;Access granted&lt;/h2&gt;\n            &lt;a href=\&quot;#access-granted\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;An observant reader might have noticed that in the code example above we snuck in a variable named request that we passed in when upgrading from an &lt;code&gt;SslStream to a WebSocketStream&lt;/code&gt;. This is for multiple reasons. The first reason is that Tunnels are assigned a hostname and use this hostname for routing. The second and more interesting reason is that (as mentioned above) when negotiating an upgrade from HTTP to WebSocket, a request must be sent to the server hosting the ingress side of the Tunnel to &lt;a href=\&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism\&quot;&gt;&lt;u&gt;perform the upgrade&lt;/u&gt;&lt;/a&gt;. This is pretty universal, but we also add in an extra piece here.&lt;/p&gt;&lt;p&gt;At Cloudflare, we believe that &lt;a href=\&quot;https://blog.cloudflare.com/secure-by-default-understanding-new-cisa-guide/\&quot;&gt;&lt;u&gt;secure defaults&lt;/u&gt;&lt;/a&gt; and &lt;a href=\&quot;https://www.cloudflare.com/learning/security/glossary/what-is-defense-in-depth/\&quot;&gt;&lt;u&gt;defense in depth&lt;/u&gt;&lt;/a&gt; are the correct ways to build a better Internet. This is why traffic across Tunnels is encrypted, for example. However, that does not necessarily prevent unwanted traffic from being sent into your Tunnel, and therefore egressing out to your database. While Postgres offers a robust set of &lt;a href=\&quot;https://www.postgresql.org/docs/current/user-manag.html\&quot;&gt;&lt;u&gt;access control&lt;/u&gt;&lt;/a&gt; options for protecting your database, wouldnât it be best if unwanted traffic never got into your private network in the first place?Â &lt;/p&gt;&lt;p&gt;To that end, all &lt;a href=\&quot;https://developers.cloudflare.com/hyperdrive/configuration/connect-to-private-database/\&quot;&gt;&lt;u&gt;Tunnels set up for use with Hyperdrive&lt;/u&gt;&lt;/a&gt; should have a &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/applications/\&quot;&gt;&lt;u&gt;Zero Trust Access Application&lt;/u&gt;&lt;/a&gt; configured to protect them. These applications should use a &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/identity/service-tokens/\&quot;&gt;&lt;u&gt;Service Token&lt;/u&gt;&lt;/a&gt; to authorize connections. When setting up a new Hyperdrive, you have the option to provide the tokenâs ID and Secret, which will be encrypted and stored alongside the rest of your configuration. These will be presented as part of the WebSocket upgrade request to authorize the connection, allowing your database traffic through while preventing unwanted access.&lt;/p&gt;&lt;p&gt;This can be done within the requestâs headers, and might look something like this:&lt;/p&gt;\n            &lt;pre class=\&quot;language-RUST\&quot;&gt;&lt;code class=\&quot;language-RUST\&quot;&gt;let ws_url = format!(&amp;quot;wss://{}&amp;quot;, host);\nlet mut request = match ws_url.into_client_request() {\n    Ok(req) =&amp;gt; req,\n    Err(err) =&amp;gt; {\n        error!(\n            &amp;quot;Hostname {} could not be parsed into a valid request URL: {}&amp;quot;, \n            host,\n            err.to_string()\n        );\n        return ConnectionError::InternalError;\n    }\n};\nrequest.headers_mut().insert(\n    &amp;quot;CF-Access-Client-Id&amp;quot;,\n    http::header::HeaderValue::from_str(&amp;amp;client_id).unwrap(),\n);\nrequest.headers_mut().insert(\n    &amp;quot;CF-Access-Client-Secret&amp;quot;,\n    http::header::HeaderValue::from_str(&amp;amp;client_secret).unwrap(),\n);\n&lt;/pre&gt;&lt;/code&gt;\n            \n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;building-for-customer-zero\&quot;&gt;Building for customer zero&lt;/h2&gt;\n            &lt;a href=\&quot;#building-for-customer-zero\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;If youâve been reading the blog for a long time, some of this might sound a bit familiar.Â  This isnât the first time that weâve &lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-tunnel-for-postgres/\&quot;&gt;&lt;u&gt;sent Postgres traffic across a tunnel&lt;/u&gt;&lt;/a&gt;, itâs something most of us do from our laptops regularly.Â  This works very well for interactive use cases with low traffic volume and a high tolerance for latency, but historically most of our products have not been able to employ the same approach.&lt;/p&gt;&lt;p&gt;Cloudflare operates &lt;a href=\&quot;https://www.cloudflare.com/network/\&quot;&gt;&lt;u&gt;many data centers&lt;/u&gt;&lt;/a&gt; around the world, and most services run in every one of those data centers. There are some tasks, however, that make the most sense to run in a more centralized fashion. These include tasks such as managing control plane operations, or storing configuration state.Â  Nearly every Cloudflare product houses its control plane information in &lt;a href=\&quot;https://blog.cloudflare.com/performance-isolation-in-a-multi-tenant-database-environment/\&quot;&gt;&lt;u&gt;Postgres clusters&lt;/u&gt;&lt;/a&gt; run centrally in a handful of our data centers, and we use a variety of approaches for accessing that centralized data from elsewhere in our network. For example, many services currently use a push-based model to publish updates to &lt;a href=\&quot;https://blog.cloudflare.com/moving-quicksilver-into-production/\&quot;&gt;&lt;u&gt;Quicksilver&lt;/u&gt;&lt;/a&gt;, and work through the complexities implied by such a model. This has been a recurring challenge for any team looking to build a new product.&lt;/p&gt;&lt;p&gt;Hyperdriveâs entire reason for being is to make it easy to access such central databases from our global network. When we began exploring Tunnel integrations as a feature, many internal teams spoke up immediately and strongly suggested theyâd be interested in using it themselves. This was an excellent opportunity for Cloudflare to scratch its own itch, while also getting a lot of traffic on a new feature before releasing it directly to the public. As always, being âcustomer zeroâ means that we get fast feedback, more reliability over time, stronger connections between teams, and an overall better suite of products. We jumped at the chance.&lt;/p&gt;&lt;p&gt;As we rolled out early versions of Tunnel integration, we worked closely with internal teams to get them access to it, and fixed any rough spots they encountered. Weâre pleased to share that this first batch of teams have found great success building new or refactored products on Hyperdrive over Tunnels. For example: if youâve already tried out &lt;a href=\&quot;https://blog.cloudflare.com/builder-day-2024-announcements/#continuous-integration-and-delivery\&quot;&gt;&lt;u&gt;Workers Builds&lt;/u&gt;&lt;/a&gt;, or recently &lt;a href=\&quot;https://www.cloudflare.com/trust-hub/reporting-abuse/\&quot;&gt;&lt;u&gt;submitted an abuse report&lt;/u&gt;&lt;/a&gt;, youâre among our first users!Â  At the time of this writing, we have several more internal teams working to onboard, and we on the Hyperdrive team are very excited to see all the different ways in which fast and simple connections from Workers to a centralized database can help Cloudflare just as much as theyâve been helping our external customers.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;outro\&quot;&gt;Outro&lt;/h2&gt;\n            &lt;a href=\&quot;#outro\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Cloudflare is on a mission to make the Internet faster, safer, and more reliable. Hyperdrive was built to make connecting to centralized databases from the Workers runtime as quick and consistent as possible, and this latest development is designed to help all those who want to use Hyperdrive without directly exposing resources within their virtual private clouds (VPCs) on the public web.&lt;/p&gt;&lt;p&gt;To this end, we chose to build a solution around our suite of industry-leading &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/\&quot;&gt;&lt;u&gt;Zero Trust&lt;/u&gt;&lt;/a&gt; tools, and were delighted to find how simple it was to implement in our runtime given the power and extensibility of the Rust &lt;code&gt;trait&lt;/code&gt; system.Â &lt;/p&gt;&lt;p&gt;Without waiting for the ink to dry, multiple teams within Cloudflare have adopted this new feature to quickly and easily solve what have historically been complex challenges, and are happily operating it in production today.&lt;/p&gt;&lt;p&gt;And now, if you haven&amp;#39;t already, try &lt;a href=\&quot;https://developers.cloudflare.com/hyperdrive/configuration/connect-to-private-database/\&quot;&gt;&lt;u&gt;setting up Hyperdrive across a Tunnel&lt;/u&gt;&lt;/a&gt;, and let us know what you think in the &lt;a href=\&quot;https://discord.com/channels/595317990191398933/1150557986239021106\&quot;&gt;&lt;u&gt;Hyperdrive Discord channel&lt;/u&gt;&lt;/a&gt;!&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2024-10-25T14:00+01:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-10-29T13:01:27.233Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/24ic7s5StC7EDyqYne4WN6/02f061b0aef358ecc2d5da4150e5b0fc/image2.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;3JAY3z7p7An94s6ScuSQPf&quot;],&quot;name&quot;:[0,&quot;Developer Platform&quot;],&quot;slug&quot;:[0,&quot;developer-platform&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;6hbkItfupogJP3aRDAq6v8&quot;],&quot;name&quot;:[0,&quot;Cloudflare Workers&quot;],&quot;slug&quot;:[0,&quot;workers&quot;]}],[0,{&quot;id&quot;:[0,&quot;5EP9xxxSTGvFx3RIxjqIgP&quot;],&quot;name&quot;:[0,&quot;Hyperdrive&quot;],&quot;slug&quot;:[0,&quot;hyperdrive&quot;]}],[0,{&quot;id&quot;:[0,&quot;5f5l99WZnbCCF9O6Emw56A&quot;],&quot;name&quot;:[0,&quot;Postgres&quot;],&quot;slug&quot;:[0,&quot;postgres&quot;]}],[0,{&quot;id&quot;:[0,&quot;1pPf2NNj9SXrC0A0ERKp9v&quot;],&quot;name&quot;:[0,&quot;SQL&quot;],&quot;slug&quot;:[0,&quot;sql&quot;]}],[0,{&quot;id&quot;:[0,&quot;w4e8pkoz9c8xNDVhy9eNe&quot;],&quot;name&quot;:[0,&quot;Rust&quot;],&quot;slug&quot;:[0,&quot;rust&quot;]}],[0,{&quot;id&quot;:[0,&quot;1aoMsyWESTqiSKzdHZXOKW&quot;],&quot;name&quot;:[0,&quot;WebSockets&quot;],&quot;slug&quot;:[0,&quot;websockets&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Andrew Repp&quot;],&quot;slug&quot;:[0,&quot;andrew-repp&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1moTBd0N5e74Bn9NWn2ksO/9642b164dcf16e501a79e56520548aa2/andrew-repp.jpg&quot;],&quot;location&quot;:[0,&quot;Chicago, IL, USA&quot;],&quot;website&quot;:[0,&quot;http://andrewrepp.com&quot;],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Emilio AssunÃ§Ã£o&quot;],&quot;slug&quot;:[0,&quot;emilio-assuncao&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3tOkImW4PKNYEyP4o7Pkhe/ee40249c46e72656a8e2352485ec7d5e/_tmp_mini_magick20221018-42-16be3qy.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0]}],[0,{&quot;name&quot;:[0,&quot;Abhishek Chanda&quot;],&quot;slug&quot;:[0,&quot;abhishek-chanda&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3P0qYqbNeI32RV8dDNiWyr/851507446803b9f182229b98e512eb5f/_tmp_mini_magick20221012-43-o7wrnr.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0,&quot;@rony358&quot;],&quot;facebook&quot;:[0]}]]],&quot;meta_description&quot;:[0,&quot;Hyperdrive (Cloudflareâs globally distributed SQL connection pooler and cache) recently added support for directing database traffic from Workers across Cloudflare Tunnels. We dive deep on what it took to add this feature.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/elephants-in-tunnels-how-hyperdrive-connects-to-databases-inside-your-vpc-networks&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Elephants in tunnels: how Hyperdrive connects to databases inside your VPC networks&quot;],&quot;description&quot;:[0,&quot;Hyperdrive (Cloudflareâs globally distributed SQL connection pooler and cache) recently added support for directing database traffic from Workers across Cloudflare Tunnels. We dive deep on what it took to add this feature.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3ut6WBHomsRN0iP92D1hpp/ecdc9573ebc09c140c865494d029f54e/image2.png&quot;]}]}],[0,{&quot;id&quot;:[0,&quot;KUIHP5Rgyl2H3pGVE6m99&quot;],&quot;title&quot;:[0,&quot;Fearless SSH: short-lived certificates bring Zero Trust to infrastructure&quot;],&quot;slug&quot;:[0,&quot;intro-access-for-infrastructure-ssh&quot;],&quot;excerpt&quot;:[0,&quot;Access for Infrastructure, BastionZeroâs integration into Cloudflare One, will enable organizations to apply Zero Trust controls to their servers, databases, Kubernetes clusters, and more. Today weâre announcing short-lived SSH access as the first available feature of this integration.\n&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;&lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-acquires-bastionzero\&quot;&gt;&lt;u&gt;BastionZero joined Cloudflare&lt;/u&gt;&lt;/a&gt; in May 2024. We are thrilled to announce Access for Infrastructure as BastionZeroâs native integration into our &lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-sase/\&quot;&gt;&lt;u&gt;SASE&lt;/u&gt;&lt;/a&gt; platform, Cloudflare One. Access for Infrastructure will enable organizations to apply Zero Trust controls in front of their servers, databases, network devices, Kubernetes clusters, and more. Today, weâre announcing &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#_top\&quot;&gt;&lt;u&gt;short-lived SSH access&lt;/u&gt;&lt;/a&gt; as the first available feature. Over the coming months we will announce support for other popular infrastructure access target types like &lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-the-remote-desktop-protocol/\&quot;&gt;&lt;u&gt;Remote Desktop Protocol (RDP)&lt;/u&gt;&lt;/a&gt;, Kubernetes, and databases.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;applying-zero-trust-principles-to-infrastructure\&quot;&gt;Applying Zero Trust principles to infrastructure&lt;/h2&gt;\n            &lt;a href=\&quot;#applying-zero-trust-principles-to-infrastructure\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Organizations have embraced &lt;a href=\&quot;https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/\&quot;&gt;&lt;u&gt;Zero Trust&lt;/u&gt;&lt;/a&gt; initiatives that modernize secure access to web applications and networks, but often the strategies they use to manage privileged access to their infrastructure can be siloed, overcomplicated, or ineffective. When we speak to customers about their infrastructure access solution, we see common themes and pain points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Too risky:&lt;/b&gt; Long-lived credentials and shared keys get passed around and inflate the risk of compromise, excessive permissions, and lateral movement&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Too clunky&lt;/b&gt;: Manual credential rotations and poor visibility into infrastructure access slow down incident response and compliance efforts&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some organizations have dealt with the problem of privileged access to their infrastructure by purchasing a &lt;a href=\&quot;https://en.wikipedia.org/wiki/Privileged_access_management\&quot;&gt;&lt;u&gt;Privileged Access Management (PAM)&lt;/u&gt;&lt;/a&gt; solution or by building a homegrown key management tool. Traditional PAM solutions introduce audit logging and session recording features that capture user interactions with their servers and other infrastructure and/or centralized vaults that rotate keys and passwords for infrastructure every time a key is used. But this centralization can introduce performance bottlenecks, harm usability, and come with a significant price tag. Meanwhile, homegrown solutions are built from primitives provided by cloud providers or custom infrastructure-as-code solutions, and can be costly and tiresome to build out and maintain.Â &lt;/p&gt;&lt;p&gt;We believe that organizations should apply Zero Trust principles to their most sensitive corporate resources, which naturally includes their infrastructure. Thatâs why weâre augmenting Cloudflareâs &lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-ztna/\&quot;&gt;&lt;u&gt;Zero Trust Network Access (ZTNA)&lt;/u&gt;&lt;/a&gt; service with &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#_top\&quot;&gt;&lt;u&gt;Access to Infrastructure&lt;/u&gt;&lt;/a&gt; to support privileged access to sensitive infrastructure, and offering features that will look somewhat similar to those found in a PAM solution:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Access&lt;/b&gt;: Connect remote users to infrastructure targets via Cloudflareâs global network.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;: Eliminate the management of credentials for servers, containers, clusters, and databases and replace them with &lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-sso/\&quot;&gt;&lt;u&gt;SSO&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-multi-factor-authentication/\&quot;&gt;&lt;u&gt;MFA&lt;/u&gt;&lt;/a&gt;, and &lt;a href=\&quot;https://blog.cloudflare.com/6-new-ways-to-validate-device-posture/\&quot;&gt;&lt;u&gt;device posture&lt;/u&gt;&lt;/a&gt;.Â &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Authorization&lt;/b&gt;: Use policy-based access control to determine who can access what target, when, and under what role.Â &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Auditing&lt;/b&gt;: Provide command logs and session recordings to allow administrators to audit and replay their developersâ interactions with the organizationâs infrastructure.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At Cloudflare, we are big believers that unified experiences produce the best security outcomes, and because of that, we are natively rebuilding each BastionZero feature into Cloudflareâs ZTNA service. Today, we will cover the recently-released feature for short-lived SSH access.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;secure-shell-ssh-and-its-security-risks\&quot;&gt;Secure Shell (SSH) and its security risks&lt;/h2&gt;\n            &lt;a href=\&quot;#secure-shell-ssh-and-its-security-risks\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;&lt;a href=\&quot;https://www.cloudflare.com/learning/access-management/what-is-ssh/\&quot;&gt;&lt;u&gt;SSH&lt;/u&gt;&lt;/a&gt; (Secure Shell) is a protocol that is commonly used by developers or system administrators to secure the connections used to remotely administer and manage (usually Linux/Unix) servers. SSH access to a server often comes with elevated privileges, including the ability to delete or &lt;a href=\&quot;https://www.cloudflare.com/learning/security/what-is-data-exfiltration/\&quot;&gt;exfiltrate&lt;/a&gt; data or to install or remove applications on the server.Â &lt;/p&gt;&lt;p&gt;Modern enterprises can have tens, hundreds, or even thousands of SSH targets. Servers accessible via SSH can be targeted in &lt;a href=\&quot;https://thehackernews.com/2023/12/warning-poorly-secured-linux-ssh.html\&quot;&gt;&lt;u&gt;cryptojacking&lt;/u&gt;&lt;/a&gt; or &lt;a href=\&quot;https://thehackernews.com/2023/06/cybercriminals-hijacking-vulnerable-ssh.html\&quot;&gt;&lt;u&gt;proxyjacking&lt;/u&gt;&lt;/a&gt; attacks. Manually tracking, rotating, and validating SSH credentials that grant access is a chore that is often left undone, which creates risks that these long-lived credentials could be compromised. Thereâs nothing stopping users from copying SSH credentials and sharing them with other users or transferring them to unauthorized devices.&lt;/p&gt;&lt;p&gt;Although many organizations will gate access to their servers to users that are inside their corporate network, this is no longer enough to protect against modern attackers. Today, the principles of Zero Trust demand that an organization also tracks who exactly is accessing their servers with SSH, and what commands they are running on those servers once they have access. In fact, the elevated privileges that come along with SSH access mean that compliance frameworks like &lt;a href=\&quot;https://www.cloudflare.com/en-gb/trust-hub/compliance-resources/soc-2/\&quot;&gt;&lt;u&gt;SOC2&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://www.cloudflare.com/en-gb/trust-hub/compliance-resources/iso-certifications/\&quot;&gt;&lt;u&gt;ISO27001&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://www.cloudflare.com/en-gb/trust-hub/compliance-resources/fedramp/\&quot;&gt;&lt;u&gt;FedRAMP&lt;/u&gt;&lt;/a&gt; and others have criteria that require monitoring who has access with SSH and what exactly they are doing with that access.Â &lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;introducing-ssh-with-access-for-infrastructure\&quot;&gt;Introducing SSH with Access for Infrastructure&lt;/h2&gt;\n            &lt;a href=\&quot;#introducing-ssh-with-access-for-infrastructure\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Weâve introduced&lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#_top\&quot;&gt;&lt;u&gt; SSH with Access for Infrastructure&lt;/u&gt;&lt;/a&gt; to provide customers with granular control over privileged access to servers via SSH. The feature provides improved visibility into who accessed what service and what they did during their SSH session, while also eliminating the risk and overhead associated with managing SSH credentials. Specifically, this feature enables organizations to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Eliminate security risk and overhead of managing SSH keys and instead use short-lived SSH certificates issued by a Cloudflare-managed certificate authority (CA).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Author fine-grained policy to govern who can SSH to your servers and through which SSH user(s) they can log in as.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Monitor infrastructure access with Access and SSH command logs, supporting regulatory compliance and providing visibility in case of security breach.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Avoid changing end-user workflows. SSH with Access for Infrastructure supports whatever native SSH clients end users happen to be using.Â &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;SSH with Access for Infrastructure is supported through one of the most common deployment models of Cloudflare One customers. Users can connect using our device client (WARP), and targets are made accessible using Cloudflare Tunnel (cloudflared or the WARP connector). This architecture allows customers with existing Cloudflare One deployments to enable this feature with little to no effort. The only additional setup will be configuring your target server to accept a Cloudflare SSH certificate.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4msjrxXyhuuh7rUmB0zn8c/3e24a431820aee57651bad1d57e57ec5/BLOG-2604_2.png\&quot; alt=\&quot;BLOG-2604 2\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;823\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Cloudflare One already offers multiple ways to secure organizations&amp;#39; SSH traffic through network controls. This new SSH with Access for Infrastructure aims to incorporate the strengths of those existing solutions together with additional controls to authorize ports, protocols, and specific users as well as a much improved deployment workflow and audit logging capabilities.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;eliminating-ssh-credentials-using-an-ssh-ca\&quot;&gt;Eliminating SSH credentials using an SSH CA&lt;/h2&gt;\n            &lt;a href=\&quot;#eliminating-ssh-credentials-using-an-ssh-ca\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;How does Access for Infrastructure eliminate your SSH credentials? This is done by replacing SSH password and SSH keys with an SSH Certificate Authority (CA) that is managed by Cloudflare. Generally speaking, a CAâs job is to issue certificates that bind an entity to an entityâs public key. Cloudflareâs SSH CA has a secret key that is used to sign certificates that authorize access to a target (server) via SSH, and a public key that is used by the target (server) to cryptographically validate these certificates. The public key for the SSH CA can be obtained by &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#generate-a-cloudflare-ssh-ca\&quot;&gt;&lt;u&gt;querying the Cloudflare API&lt;/u&gt;&lt;/a&gt;. And the secret key for the SSH CA is kept secure by Cloudflare and never exposed to anyone.Â &lt;/p&gt;&lt;p&gt;To use SSH with Access for Infrastructure to grant access via SSH to a set of targets (i.e. servers), you need to &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#modify-your-sshd-config\&quot;&gt;&lt;u&gt;instruct those servers to trust the Cloudflare SSH CA&lt;/u&gt;&lt;/a&gt;. Those servers will then grant access via SSH whenever they are presented with an SSH certificate that is validly signed by the Cloudflare SSH CA.&lt;/p&gt;&lt;p&gt;The same Cloudflare SSH CA is used to support SSH access for all of your developers and engineers to all your target servers. This greatly simplifies key management. You no longer need to manage long-lived SSH keys and passwords for individual end users, because access to targets with SSH is granted via certificates that are dynamically issued by the Cloudflare SSH CA. And, because the Cloudflare SSH CA issued short-lived SSH certificates that expire after 3 minutes, you also donât have to worry about creating or managing long-lived SSH credentials that could be stolen by attackers.Â &lt;/p&gt;&lt;p&gt;The 3-minute time window on the SSH certificate only applies to the time window during which the user has to authenticate to the target server; it does not apply to the length of the SSH session, which can be arbitrarily longer than 3 minutes. This 3-minute window was chosen because it was short enough to reduce the risk of security compromise and long enough to ensure that we donât miss the time window of the userâs authentication to the server, especially if the user is on a slow connection.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;centrally-managing-policies-down-to-the-specific-linux-user\&quot;&gt;Centrally managing policies down to the specific Linux user&lt;/h2&gt;\n            &lt;a href=\&quot;#centrally-managing-policies-down-to-the-specific-linux-user\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;One of the problems with traditional SSH is that once a user has an SSH key or password installed on a server, they will have access to that server forever â unless an administrator somehow remembers to remove their SSH key or password from the server in question. This leads to &lt;i&gt;privilege creep,&lt;/i&gt; where too many people have standing access to too many servers, creating a security risk if an SSH key or password is ever stolen or leaked.&lt;/p&gt;&lt;p&gt;Instead, SSH with Access for Infrastructure allows you to centrally write policies in the Cloudflare dashboard specifying exactly what (set of) users has access to what (set of) servers. Users may be authenticated by SSO, MFA, device posture, location, and more, which provides better security than just authenticating them via long-lived SSH keys or passwords that could be stolen by attackers.&lt;/p&gt;&lt;p&gt;Moreover, the SSH certificates issued by the Cloudflare CA include a field called &lt;i&gt;valid_principals&lt;/i&gt; which indicates the specific Linux user (e.g. &lt;i&gt;root&lt;/i&gt;, &lt;i&gt;read-only&lt;/i&gt;, &lt;i&gt;ubuntu&lt;/i&gt;, &lt;i&gt;ec2-user&lt;/i&gt;) that can be assumed by the SSH connection. As such, you can write policies that specify the (set of) Linux users that a given (set of) end users may access on a given (set of) servers, as shown in the figure below. This allows you to centrally control the privileges that a given end user has when accessing a given target server. (The one caveat here is that the server must also be pre-configured to already know about the specific Linux user (e.g. &lt;i&gt;root) &lt;/i&gt;that is specified in the policies and presented in the SSH certificate. Cloudflare is NOT managing the Linux users on your Linux servers.)&lt;/p&gt;&lt;p&gt;As shown below, you could write a policy that says users in Canada, the UK, and Australia that are authenticated with MFA and face recognition can access the &lt;i&gt;root &lt;/i&gt;and &lt;i&gt;ec2-user &lt;/i&gt;Linux users on a given set of servers in AWS.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4D580wfY5DxQ9iSNhflztJ/a97eea9e68b0a44ea2b9c544d1cf3bda/BLOG-2604_3.png\&quot; alt=\&quot;BLOG-2604 3\&quot; class=\&quot;kg-image\&quot; width=\&quot;1336\&quot; height=\&quot;1172\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;how-does-cloudflare-capture-ssh-command-logs\&quot;&gt;How does Cloudflare capture SSH command logs?&lt;/h2&gt;\n            &lt;a href=\&quot;#how-does-cloudflare-capture-ssh-command-logs\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Cloudflare captures SSH command logs because we built an SSH proxy that intercepts the SSH connections. The SSH proxy establishes one SSH connection between itself and the end userâs SSH client, and another SSH connection between itself and the target (server). The SSH proxy can therefore inspect the SSH commands and log them.Â &lt;/p&gt;&lt;p&gt;SSH commands are encrypted at rest using a public key that the customer uploads via the Cloudflare API. Cloudflare cannot read SSH command logs at rest, but they can be extracted (in encrypted form) from the Cloudflare API and decrypted by the customer (who holds the corresponding private key). Instructions for uploading the &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#enable-ssh-command-logging\&quot;&gt;&lt;u&gt;encryption public key are available in our developer documentation&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1KvuPqP9XfUn5M6sE5Qvw4/c8eb24587b4301d4ca9bfad0b2037ee1/Log_for_digital-ocean.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1200\&quot; height=\&quot;628\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;how-the-ssh-interception-works-under-the-hood\&quot;&gt;How the SSH interception works under the hood&lt;/h2&gt;\n            &lt;a href=\&quot;#how-the-ssh-interception-works-under-the-hood\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          \n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;how-does-generic-ssh-work\&quot;&gt;How does generic SSH work?&lt;/h3&gt;\n            &lt;a href=\&quot;#how-does-generic-ssh-work\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;To understand how Cloudflareâs SSH proxy works, we first must review how a generic SSH connection is established.&lt;/p&gt;&lt;p&gt;First off, SSH runs over TCP, so to establish an SSH connection, we first need to complete a TCP handshake. Then, once the TCP handshake is complete, an SSH key exchange is needed to establish an ephemeral symmetric key between the client and the server that will be used to encrypt and authenticate their SSH traffic. The SSH key exchange is based on the server public key, also known as the &lt;i&gt;hostkey. &lt;/i&gt;If youâve ever used SSH, youâve probably seen this message â that is the SSH server telling your SSH client to trust this hostkey for all future SSH interactions. (This is also known as TOFU or Trust On First Use.)&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3rjmLTfw8CauXPT0kumYyw/7cbfe372a00f7c7b1f6957743113b20a/BLOG-2604_5.png\&quot; alt=\&quot;BLOG-2604 5\&quot; class=\&quot;kg-image\&quot; width=\&quot;1741\&quot; height=\&quot;215\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Finally, the client needs to authenticate itself to the server. This can be done using SSH passwords, SSH keys, or SSH certificates (as described above). SSH also has a mode called &lt;i&gt;none&lt;/i&gt;, which means that the client does NOT need to authenticate itself to the server at all.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;so-how-does-cloudflares-ssh-proxy-work\&quot;&gt;So how does Cloudflareâs SSH proxy work?Â &lt;/h3&gt;\n            &lt;a href=\&quot;#so-how-does-cloudflares-ssh-proxy-work\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        \n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6znMxrzjyakDF3KBqEWUHX/c12a50ef7ef6c77d4bbacaac3ee8ec60/BLOG-2604_6.png\&quot; alt=\&quot;BLOG-2604 6\&quot; class=\&quot;kg-image\&quot; width=\&quot;1312\&quot; height=\&quot;998\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;To understand this, we note that whenever you set up SSH with Access for Infrastructure in the Cloudflare dashboard, you first need to create the set of targets (i.e. servers) that you want to make accessible via SSH. Targets can be defined by IP address or hostname. You then create an Access for Infrastructure application that captures the TCP ports (e.g. port 22) that SSH runs over for those targets, and write policies for those SSH connections, as we already described above and &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#5-add-an-infrastructure-application\&quot;&gt;&lt;u&gt;in our developer documentation&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This setup allows Cloudflare to know the set of IP addresses and ports for which it must intercept SSH traffic. Thus, whenever Cloudflare sees a TCP handshake with an IP address and port that must be intercepted, it sends traffic for that TCP connection to the SSH proxy.Â &lt;/p&gt;&lt;p&gt;The SSH proxy leverages the clientâs already authenticated identity from the WARP client, and enforces the configured Access for Infrastructure policies against it. If the policies do not allow the identity to connect to the target under the requested Linux user (e.g. &lt;i&gt;root)&lt;/i&gt;, the SSH proxy will reject the connection and log an &lt;b&gt;&lt;i&gt;Access denied&lt;/i&gt;&lt;/b&gt;&lt;b&gt; &lt;/b&gt;event to the Access logs. Otherwise, if policies do allow the identity to connect, the the SSH proxy will establish the following two SSH connections:Â &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;SSH connection from SSH proxy to target&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SSH connection from end userâs SSH client (via Cloudflareâs WARP client) to SSH proxy&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Letâs take a look at each of these SSH connections, and the cryptographic material used to set them up.Â &lt;/p&gt;&lt;p&gt;&lt;b&gt;To establish the SSH connection from SSH proxy to the target&lt;/b&gt;, the SSH proxy acts as a client in the SSH key exchange between itself and the target server. The handshake uses the target serverâs &lt;i&gt;hostkey&lt;/i&gt; to establish an ephemeral symmetric key between the client and the server that will encrypt and authenticate their SSH traffic. Next, the SSH proxy must authenticate itself to the target server. This is done by presenting the server with a short-lived SSH certificate, issued by the Cloudflare SSH CA, for the specified Linux user that is requested for this connection as we already described above. Because the target server has been configured to trust the Cloudflare SSH CA, the target server will be able to successfully validate the certificate and the SSH connection will be established.&lt;/p&gt;&lt;p&gt;&lt;b&gt;To establish the SSH connection from the end-user&amp;#39;s SSH client to SSH proxy&lt;/b&gt;, the SSH proxy acts as a server in the SSH key exchange between itself and the end-userâs SSH client.Â &lt;/p&gt;&lt;p&gt;To do this, the SSH proxy needs to inform the end userâs SSH client about the &lt;i&gt;hostkey&lt;/i&gt; that will be used to establish this connection. But what &lt;i&gt;hostkey&lt;/i&gt; should be used? We cannot use the same &lt;i&gt;hostkey &lt;/i&gt;used by the target server, because that &lt;i&gt;hostkey &lt;/i&gt;is the public key that corresponds to a private key that is known only to the target server, and not known to the SSH proxy. So, Cloudflareâs SSH proxy needs to generate its own &lt;i&gt;hostkey&lt;/i&gt;. We donât want the end user to randomly see warnings like the one shown below, so the SSH proxy should provide the same &lt;i&gt;hostkey &lt;/i&gt;each time the user wants to access a given target server. But, if something does change with the &lt;i&gt;hostkey &lt;/i&gt;of the target server, we do want the warning below to be shown.Â &lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3VBYjkE9DOpN7A5IjLSN0H/bfbc9e3a65cb81abc6fe4eb5c5780b39/BLOG-2604_7.png\&quot; alt=\&quot;BLOG-2604 7\&quot; class=\&quot;kg-image\&quot; width=\&quot;1673\&quot; height=\&quot;425\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;To achieve the desired behavior, the SSH proxy generates a &lt;i&gt;hostkey &lt;/i&gt;and its corresponding private key by hashing together (a) a fixed secret value valid that associated with the customer account, along with (b) the &lt;i&gt;hostkey&lt;/i&gt; that was provided by this target server (in the connection from SSH proxy to target server). This part of the design ensures that the end user only needs to see the TOFU notification the very first time it connects to the target server via WARP, because the same &lt;i&gt;hostkey&lt;/i&gt; is used for all future connections to that target. And, if the &lt;i&gt;hostkey&lt;/i&gt; of the target server does change as a result of a Monster-In-The-Middle attack, the warning above will be shown to the user.&lt;/p&gt;&lt;p&gt;Finally, during the SSH key exchange handshake from WARP client to SSH proxy, the SSH proxy informs that end userâs native SSH client that it is using &lt;i&gt;none&lt;/i&gt; for client authentication. This means that the SSH client does NOT need to authenticate itself to the server at all. This part of the design ensures that the user need not enter any SSH passwords or store any SSH keys in its SSH configuration in order to connect to the target server via WARP. Also, this does not compromise security, because the SSH proxy has already authenticated the end user via Cloudflareâs WARP client and thus does not need to use the native SSH client authentication in the native SSH client.&lt;/p&gt;&lt;p&gt;Put this all together, and we have accomplished our goal of having end users authenticate to target servers without any SSH keys or passwords, using Cloudflareâs SSH CA instead. Moreover, we also preserve the desired behaviors of the TOFU notifications and warnings built into native SSH clients!&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;all-the-keys\&quot;&gt;All the keys&lt;/h2&gt;\n            &lt;a href=\&quot;#all-the-keys\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Before we wrap up, letâs review the cryptographic keys you need in order to deploy SSH with Access for Infrastructure. There are two keys:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Public key of the SSH CA. &lt;/b&gt;The private key of the SSH CA is only known to Cloudflare and not shared with anyone. The public key of the &lt;a href=\&quot;https://ranbel-infrastructure-access.cloudflare-docs-7ou.pages.dev/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#generate-a-cloudflare-ssh-ca\&quot;&gt;&lt;u&gt;SSH CA is obtained from the Cloudflare API&lt;/u&gt;&lt;/a&gt; and must be &lt;a href=\&quot;https://ranbel-infrastructure-access.cloudflare-docs-7ou.pages.dev/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#generate-a-cloudflare-ssh-ca\&quot;&gt;&lt;u&gt;installed&lt;/u&gt;&lt;/a&gt; on all your target servers. The same public key is used for all of your targets. This public key does not need to be kept secret.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Private key for SSH command log encryption. &lt;/b&gt;To obtain logs of SSH commands, you need to generate a &lt;a href=\&quot;https://ranbel-infrastructure-access.cloudflare-docs-7ou.pages.dev/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#generate-a-cloudflare-ssh-ca\&quot;&gt;&lt;u&gt;public-private key pair, and upload the public key to Cloudflare&lt;/u&gt;&lt;/a&gt;. The public key will be used to encrypt your SSH commands logs at REST. You need to keep the private key secret, and you can use it to &lt;a href=\&quot;https://ranbel-infrastructure-access.cloudflare-docs-7ou.pages.dev/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#view-ssh-logs\&quot;&gt;&lt;u&gt;decrypt&lt;/u&gt;&lt;/a&gt; your SSH command logs.Â &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Thatâs it! No other keys, passwords, or credentials to manage!&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;try-it-out-today\&quot;&gt;Try it out today&lt;/h2&gt;\n            &lt;a href=\&quot;#try-it-out-today\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;At Cloudflare, we are committed to providing the most comprehensive solution for ZTNA, which now also includes privileged access to sensitive infrastructure like servers accessed over SSH.&lt;/p&gt;&lt;p&gt;Organizations can now treat SSH like any other Access application and enforce strong MFA, device context, and policy-based access prior to granting user access. This allows organizations to consolidate their infrastructure access policies into their broader SSE or SASE architecture.&lt;/p&gt;&lt;p&gt;You can try out Access for Infrastructure today by following &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#_top\&quot;&gt;&lt;u&gt;these instructions in our developer documentation&lt;/u&gt;&lt;/a&gt;. Access for Infrastructure is currently available free to teams of under 50 users, and at no extra cost to existing pay-as-you-go and Contract plan customers through an Access or Zero Trust subscription. Expect to hear about a lot more features from us as we continue to natively rebuild &lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-acquires-bastionzero/\&quot;&gt;&lt;u&gt;BastionZero&lt;/u&gt;&lt;/a&gt;âs technology into Cloudflareâs Access for Infrastructure service!&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2024-10-23T14:00+01:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-11-22T18:50:38.763Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3sq4uvd8bFS9168WAhnxbJ/b8c7342c8bc376eeb97f407ae3447425/BLOG-2604_1.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;J61Eszqn98amrYHq4IhTx&quot;],&quot;name&quot;:[0,&quot;Zero Trust&quot;],&quot;slug&quot;:[0,&quot;zero-trust&quot;]}],[0,{&quot;id&quot;:[0,&quot;3QNaVNNpUXrfZYUGDJkXwA&quot;],&quot;name&quot;:[0,&quot;Cloudflare Zero Trust&quot;],&quot;slug&quot;:[0,&quot;cloudflare-zero-trust&quot;]}],[0,{&quot;id&quot;:[0,&quot;013htAspXBEMdE76Afcyq2&quot;],&quot;name&quot;:[0,&quot;Acquisitions&quot;],&quot;slug&quot;:[0,&quot;acquisitions&quot;]}],[0,{&quot;id&quot;:[0,&quot;64Z8wlRoBi6qbWfgdpgCJl&quot;],&quot;name&quot;:[0,&quot;SSH&quot;],&quot;slug&quot;:[0,&quot;ssh&quot;]}],[0,{&quot;id&quot;:[0,&quot;6c9EM6c5poinGKIR6xldFo&quot;],&quot;name&quot;:[0,&quot;Cloudflare Access&quot;],&quot;slug&quot;:[0,&quot;cloudflare-access&quot;]}],[0,{&quot;id&quot;:[0,&quot;4Z2oveL0P0AeqGa5lL4Vo1&quot;],&quot;name&quot;:[0,&quot;Cloudflare One&quot;],&quot;slug&quot;:[0,&quot;cloudflare-one&quot;]}],[0,{&quot;id&quot;:[0,&quot;6twWoAUd2y0j3cAMfKjwcW&quot;],&quot;name&quot;:[0,&quot;Compliance&quot;],&quot;slug&quot;:[0,&quot;compliance&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Sharon Goldberg&quot;],&quot;slug&quot;:[0,&quot;goldbe&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6cKoimXGrudpdJuCAzYWGI/d84cd85760c1a34559532fc16f5f8d66/goldbe.png&quot;],&quot;location&quot;:[0,&quot;Boston&quot;],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,&quot;@goldbe&quot;],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Ann Ming Samborski&quot;],&quot;slug&quot;:[0,&quot;ann-ming-samborski&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4K0P5wAoqGbOXiq1av6lQG/79f00a158601cad50455f23a261c6c7f/headshot-small.png&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0]}],[0,{&quot;name&quot;:[0,&quot;Sebby Lipman&quot;],&quot;slug&quot;:[0,&quot;sebby-lipman&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1afMCOihEipPVGN5d4PuMQ/186f55217afeab10639f80c621d7e14e/WIN_20240610_13_33_05_Pro.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0]}]]],&quot;meta_description&quot;:[0,&quot;Access for Infrastructure, BastionZeroâs integration into Cloudflare One, will enable organizations to apply Zero Trust controls to their servers, databases, Kubernetes clusters, and more. Today weâre announcing short-lived SSH access as the first available feature of this integration.\n&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/intro-access-for-infrastructure-ssh&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Fearless SSH: short-lived certificates bring Zero Trust to infrastructure&quot;],&quot;description&quot;:[0,&quot;Access for Infrastructure, BastionZeroâs integration into Cloudflare One, will enable organizations to apply Zero Trust controls to their servers, databases, Kubernetes clusters, and more. Today weâre announcing short-lived SSH access as the first available feature of this integration.\n&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3EsJXLKj5uJfANEOLZ5jF6/a5da7c34e4b316c2bd18f37b29148918/Fearless_SSH-_short-lived_certificates_bring_Zero_Trust_to_infrastructure-OG.png&quot;]}]}],[0,{&quot;id&quot;:[0,&quot;4awe2vvz8flXFLuz3BGm7j&quot;],&quot;title&quot;:[0,&quot;Training a million models per day to save customers of all sizes from DDoS attacks&quot;],&quot;slug&quot;:[0,&quot;training-a-million-models-per-day-to-save-customers-of-all-sizes-from-ddos&quot;],&quot;excerpt&quot;:[0,&quot;In this post we will describe how we use anomaly detection to watch for novel DDoS attacks. Weâll provide an overview of how we build models which flag unusual traffic and keep our customers safe.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Our always-on DDoS protection runs inside every server across our global network. Â It constantly analyzes incoming traffic, looking for signals associated with previously identified DDoS attacks. We dynamically create &lt;a href=\&quot;https://developers.cloudflare.com/ddos-protection/about/how-ddos-protection-works/\&quot;&gt;&lt;u&gt;fingerprints&lt;/u&gt;&lt;/a&gt; to flag malicious traffic, which is dropped when detected in high enough volume â so it never reaches its destination â keeping customer websites online.&lt;/p&gt;&lt;p&gt;In many cases, flagging bad traffic can be straightforward. For example, if we see too many requests to a destination with the same protocol violation, we can be fairly sure this is an automated script, rather than a surge of requests from a legitimate web browser.&lt;/p&gt;&lt;p&gt;Our DDoS systems are great at detecting attacks, but thereâs a minor catch. Much like the human immune system, they are great at spotting attacks similar to things they have seen before. But for new and novel threats, they need a little help knowing what to look for, which is an expensive and time-consuming human endeavor.&lt;/p&gt;&lt;p&gt;Cloudflare protects millions of Internet properties, and we serve over 60 million HTTP requests per second on average, so trying to find unmitigated attacks in such a huge volume of traffic is a daunting task. In order to protect the smallest of companies, we need a way to find unmitigated attacks that may only be a few thousand requests per second, as even these can be enough to take smaller sites offline.&lt;/p&gt;&lt;p&gt;To better protect our customers, we also have a system to automatically identify unmitigated, or partially mitigated DDoS attacks, so we can better shore up our defenses against emerging threats. In this post we will introduce this anomaly detection pipeline, weâll provide an overview of how it builds statistical models which flag unusual traffic and keep our customers safe. Letâs jump in!&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;a-naive-volumetric-model\&quot;&gt;A naive volumetric model&lt;/h2&gt;\n            &lt;a href=\&quot;#a-naive-volumetric-model\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;A DDoS attack, by definition, is characterized by a higher than normal volume of traffic destined for a particular destination. We can use this fact to loosely sketch out a potential approach. Letâs look at an example website, and look at the request volume over the course of a day, broken down into 1 minute intervals.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6j97IMawigCOtQEIKLzQ4n/8ab1e487a5dc8faaecc732b8fbb7d8d4/image3.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;887\&quot; height=\&quot;667\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;We can plot this same data as a histogram:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1Ys3wf2GY6e5K4rEBUTDBN/5cff86a1f90ee5e0eae9ec394f2322b3/image6.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;887\&quot; height=\&quot;549\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;The data follows a bell-shaped curve, also known as a normal distribution. We can use this fact to flag observations which appear outside the usual range. By first calculating the mean and standard deviation of our dataset, we can then use these values to rate new observations by calculating how many standard deviations (or sigma) the data is from the mean.&lt;/p&gt;&lt;p&gt;This value is also called the z-score â a z-score of 3 is the same as 3-sigma, which corresponds to 3 standard deviations from the mean. A data point with a high enough z-score is sufficiently unusual that it might signal an attack. Since the mean and standard deviation are stationary, we can calculate a request volume threshold for each z-score value, and use traffic volumes above these thresholds to signal an ongoing attack.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4X5WaA5QssNRlWWaz4UUYL/05b88c9cfe52f6ba05cef7cab033d53d/image1.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;883\&quot; height=\&quot;665\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sup&gt;&lt;i&gt;Trigger thresholds for z-score of 3, 4 and 5&lt;/i&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;Unfortunately, itâs incredibly rare to see traffic that is this uniform in practice, as user load will naturally vary over a day. Here Iâve simulated some traffic for a website which runs a meal delivery service, and as you might expect it has big peaks around meal times, and low traffic overnight since it only operates in a single country.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Pk6sFmz8lqjUJrdTev8Xw/194436196eddbbb11576b74f1515d6c6/image2.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;883\&quot; height=\&quot;667\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Our volume data no longer follows a normal distribution and our 3-sigma threshold is now much further away, so smaller attacks could pass undetected.&lt;/p&gt;&lt;p&gt;Many websites elastically scale their underlying hardware based upon anticipated load to save on costs. In the example above the website operator would run far fewer servers overnight, when the anticipated load is low, to save on running costs. This makes the website more vulnerable to attacks during off-peak hours as there would be less hardware to absorb them. An attack as low as a few hundred requests per minute may be enough to overwhelm the site early in the morning, even though the peak-time infrastructure could easily absorb this volume.&lt;/p&gt;&lt;p&gt;This approach relies on traffic volume being stable over time, meaning itâs roughly flat throughout the day, but this is rarely true in practice. Even when it is true, benign increases in traffic are common, such as an e-commerce site running a Black Friday sale. In this situation, a website would expect a surge in traffic that our model wouldnât anticipate, and we may incorrectly flag real shoppers as attackers.&lt;/p&gt;&lt;p&gt;It turns out this approach makes too many naive assumptions about what traffic should look like, so itâs impossible to choose an appropriate sigma threshold which works well for all customers.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;time-series-forecasting\&quot;&gt;Time series forecasting&lt;/h2&gt;\n            &lt;a href=\&quot;#time-series-forecasting\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Letâs continue with trying to determine a volumetric baseline for our meal delivery example. A reasonable assumption we could add is that yesterdayâs traffic shape should approximate the expected shape of traffic today. This idea is called âseasonalityâ. Weekly seasonality is also pretty common, i.e. websites see more or less traffic on certain weekdays or on weekends.&lt;/p&gt;&lt;p&gt;There are many methods designed to analyze a dataset, unpick the varying horizons of seasonality within it, and then build an appropriate predictive model. We wonât go into them here but reading about &lt;a href=\&quot;https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average\&quot;&gt;&lt;u&gt;Seasonal ARIMA (SARIMA)&lt;/u&gt;&lt;/a&gt; is a good place to start if you are looking for further information.&lt;/p&gt;&lt;p&gt;There are three main challenges that make SARIMA methods unsuitable for our purposes. First is that in order to get a good idea of seasonality, you need a lot of data. To predict weekly seasonality, you need at least a few weeks worth of data. Weâd require a massive dataset to predict monthly, or even annual, patterns (such as Black Friday). This means new customers wouldnât be protected until theyâd been with us for multiple years, so this isnât a particularly practical approach.&lt;/p&gt;&lt;p&gt;The second issue is the cost of training models. In order to maintain good accuracy, time series models need to be frequently retrained. The exact frequency varies between methods, but in the worst cases, a model is only good for 2â3 inferences, meaning weâd need to retrain all our models every 10â20 minutes. This is feasible, but itâs incredibly wasteful.&lt;/p&gt;&lt;p&gt;The third hurdle is the hardest to work around, and is the reason why a purely volumetric model doesnât work. Most websites experience completely benign spikes in traffic that lie outside prior norms. Flash sales are one such example, or 1,000,000 visitors driven to a site from Reddit, or a Super Bowl commercial.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;a-better-way\&quot;&gt;A better way?&lt;/h2&gt;\n            &lt;a href=\&quot;#a-better-way\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;So if volumetric modeling wonât work, what can we do instead? Fortunately, volume isnât the only axis we can use to measure traffic. Consider the end usersâ browsers for example. It would be reasonable to assume that over a given time interval, the proportion of users across the top 5 browsers would remain reasonably stationary, or at least within a predictable range. More importantly, this proportion is unlikely to change too much during benign traffic surges.&lt;/p&gt;&lt;p&gt;Through careful analysis we were able to discover about a dozen such variables with the following features for a given zone:Â &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;They follow a normal distribution&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;They arenât correlated, or are only loosely correlated with volume&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;They deviate from the underlying normal distribution during âunder attackâ events&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Recall our initial volume model, where we used z-score to define a cutoff. We can expand this same idea to multiple dimensions. We have a dozen different time series (each feature is a single time series), which we can imagine as a cloud of points in 12 dimensions. Here is a sample showing 3 such features, with each point representing the traffic readings at a different point in time. Note that both graphs show the same cloud of points from two different angles.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5idkNYYgL0IhY8d2HapYud/f3696ec7fb91f8641a04ba261d0cf673/image4.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;680\&quot; height=\&quot;329\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;To use our z-score analogy from before, weâd want our points to be spherical, since our multidimensional- z-score is then just the distance from the centre of the cloud. We could then use this distance to define a cutoff threshold for attacks.&lt;/p&gt;&lt;p&gt;For several reasons, a perfect sphere is unlikely in practice. Our various features measure different things, so they have very different scales of ânormalâ. One property might vary between 100-300 whereas another property might usually occupy the interval 0-1. A change of 3 in this latter property would be a significant anomaly, whereas in the first this would just be within the normal range.&lt;/p&gt;&lt;p&gt;More subtly, two or more axes may be correlated, so an increase in one is usually mirrored with a proportional increase/decrease in another dimension. This turns our sphere into an off-axis disc shape, as pictured above.&lt;/p&gt;&lt;p&gt;Fortunately, we have a couple of mathematical tricks up our sleeve. The first is scale normalization. In each of our n dimensions, we subtract the mean, and divide by the standard deviation. This makes all our dimensions the same size and centres them around zero. This gives a multidimensional analogue of z-score, but it wonât fix the disc shape.&lt;/p&gt;&lt;p&gt;What we can do is figure out the orientation and dimensions of the disc, and for this we use a tool called &lt;a href=\&quot;https://en.wikipedia.org/wiki/Principal_component_analysis\&quot;&gt;&lt;u&gt;Principal Component Analysis (PCA)&lt;/u&gt;&lt;/a&gt;. This lets us reorient our disc, and rescale the axes according to their size, to make them all the same.&lt;/p&gt;&lt;p&gt;Imagine grabbing the disc out of the air, then drawing new X and Y axes on the top surface, with the origin at the center of the disc. Our new Z-axis is the thickness of the disc. We can compare the thickness to the diameter of the disc, to give us a scaling factor for the Z direction. Imagine stretching the disc along the z-axis until itâs as tall as the length across the diameter.&lt;/p&gt;&lt;p&gt;In reality thereâs nothing to say that X &amp;amp; Y have to be the same size either, but hopefully you get the general idea. PCA lets us draw new axes along these lines of correlation in an arbitrary number of dimensions, and convert our n-dimensional disc into a nicely behaved sphere of points (technically an n-dimensional sphere).&lt;/p&gt;&lt;p&gt;Having done all this work, we can uniquely define a coordinate transformation which takes any measurement from our raw features, and tells us where it should lie in the sphere, and since all our dimensions are the same size we can generate an anomaly score purely based on its distance from the centre of the cloud.&lt;/p&gt;&lt;p&gt;As a final trick, we can also use a final scaling operation to ensure the sphere for dataset A is the same size as the sphere generated from dataset B, meaning we can do this same process for any traffic data and define a cutoff distance Î» which is the same across all our models. Rather than fine-tuning models for each individual customer zone, we can tune this to a value which applies globally.&lt;/p&gt;&lt;p&gt;Another name for this measurement is &lt;a href=\&quot;https://en.wikipedia.org/wiki/Mahalanobis_distance\&quot;&gt;&lt;u&gt;Mahalanobis distance&lt;/u&gt;&lt;/a&gt;. (Inclined readers can understand this equivalence by considering the role of the covariance matrix in PCA and Mahalanobis distance. Further discussion can be found on &lt;a href=\&quot;https://stats.stackexchange.com/questions/166525/is-mahalanobis-distance-equivalent-to-the-euclidean-one-on-the-pca-rotated-data\&quot;&gt;&lt;u&gt;this&lt;/u&gt;&lt;/a&gt; StackExchange post.) We further tune the process to discard dimensions with little variance â if our disc is too thin we discard the thickness dimension.Â  In practice, such dimensions were too sensitive to be useful.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1OcPc7zoehsizwzPEkD1Fc/094bd59ca6d6aba3c301fd74f12d580a/image5.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;887\&quot; height=\&quot;860\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Weâre left with a multidimensional analogue of the z-score we started with, but this time our variables arenât correlated with peacetime traffic volume. Above we show 2 output dimensions, with coloured circles which show Mahalanobis distances of 4, 5 and 6. Anything outside the green circle will be classified as an attack.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;how-we-train-1-million-models-daily-to-keep-customers-safe\&quot;&gt;How we train ~1 million models daily to keep customers safe&lt;/h2&gt;\n            &lt;a href=\&quot;#how-we-train-1-million-models-daily-to-keep-customers-safe\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;The approach weâve outlined is incredibly parallelizable: a single model requires only the traffic data for that one website, and the datasets needed can be quite small. We use 4 weeks of training data chunked into 5 minute intervals which is only ~8k rows/website.&lt;/p&gt;&lt;p&gt;We run all our training and inference in an Apache Airflow deployment in Kubernetes. Due to the parallelizability, we can scale horizontally as needed. On average, we can train about 3 models/second/thread. We currently retrain models every day, but weâve observed very little intraday model drift (i.e. yesterdayâs model is the same as todayâs), so training frequency may be reduced in the future.&lt;/p&gt;&lt;p&gt;We donât consider it necessary to build models for all our customers, instead we train models for a large sample of representative customers, including a large number on the Free plan. The goal is to identify attacks for further study which we then use to tune our existing DDoS systems for all customers.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;join-us\&quot;&gt;Join us!&lt;/h2&gt;\n            &lt;a href=\&quot;#join-us\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;If youâve read this far you may have questions, like âhow do you filter attacks from your training data?â or you may have spotted a handful of other technical details which Iâve elided to keep this post accessible to a general audience. If so, you would fit in well here at Cloudflare. Weâre helping to build a better Internet, and weâre &lt;a href=\&quot;https://www.cloudflare.com/careers/jobs/?title=data+scientist\&quot;&gt;&lt;u&gt;hiring&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2024-10-23T14:00+01:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-10-23T13:00:03.656Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1W3gJ8c5G8beqNKdLJ1xUi/53333ecaf57258bd20c5fabe02cdf46c/Training_a_million_models_per_day_to_save_customers_of_all_sizes_from_DDoS_attacks-header.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;64g1G2mvZyb6PjJsisO09T&quot;],&quot;name&quot;:[0,&quot;DDoS&quot;],&quot;slug&quot;:[0,&quot;ddos&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;1HAYmR545ufVxM2rQzz0SE&quot;],&quot;name&quot;:[0,&quot;Machine Learning&quot;],&quot;slug&quot;:[0,&quot;machine-learning&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Nick Wood&quot;],&quot;slug&quot;:[0,&quot;nick-wood&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7qTZDAtaw85IDos0L7YfL/3cd3a86ddaf5d30884dbfb6b5a21d4cf/nick-wood.png&quot;],&quot;location&quot;:[0,&quot;London&quot;],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Manish Arora&quot;],&quot;slug&quot;:[0,&quot;manish&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4u7fayYeIfvEDkEviluW6O/62548ae5a3f678a8e8f1ae566dbdb54d/manish.png&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null]}]]],&quot;meta_description&quot;:[0,&quot;In this post we will describe how we use anomaly detection to watch for novel DDoS attacks. Weâll provide an overview of how we build models which flag unusual traffic and keep our customers safe.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/training-a-million-models-per-day-to-save-customers-of-all-sizes-from-ddos&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Training a million models per day to save customers of all sizes from DDoS attacks&quot;],&quot;description&quot;:[0,&quot;In this blog post we will describe how we use anomaly detection to watch for novel DDoS attacks. Weâll provide an overview of how we build models which flag unusual traffic and keep our customers safe.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/51szbb5L3mZlpeYyg9X4x5/3156a1839c376be15edb196e5d499afe/Training_a_million_models_per_day_to_save_customers_of_all_sizes_from_DDoS_attacks-OG.png&quot;]}]}],[0,{&quot;id&quot;:[0,&quot;2UYBSJmJKD66lXTstsRhTg&quot;],&quot;title&quot;:[0,&quot;Building Vectorize, a distributed vector database, on Cloudflareâs Developer Platform&quot;],&quot;slug&quot;:[0,&quot;building-vectorize-a-distributed-vector-database-on-cloudflare-developer-platform&quot;],&quot;excerpt&quot;:[0,&quot;Vectorize was recently upgraded and made generally available, now supporting indexes of up to 5 million vectors, delivering faster responses, with lower pricing and a free tier. This post dives deep into how we built Vectorize to enable these improvements.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;&lt;a href=\&quot;https://developers.cloudflare.com/vectorize/\&quot;&gt;&lt;u&gt;Vectorize&lt;/u&gt;&lt;/a&gt; is a globally distributed vector database that enables you to build full-stack, AI-powered applications with Cloudflare Workers. Vectorize makes querying embeddings â representations of values or objects like text, images, audio that are designed to be consumed by machine learning models and semantic search algorithms â faster, easier and more affordable.&lt;/p&gt;&lt;p&gt;In this post, we dive deep into how we built Vectorize on &lt;a href=\&quot;https://developers.cloudflare.com/\&quot;&gt;&lt;u&gt;Cloudflareâs Developer Platform&lt;/u&gt;&lt;/a&gt;, leveraging Cloudflareâs &lt;a href=\&quot;https://www.cloudflare.com/network/\&quot;&gt;&lt;u&gt;global network&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://developers.cloudflare.com/cache\&quot;&gt;&lt;u&gt;Cache&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://developers.cloudflare.com/workers/\&quot;&gt;&lt;u&gt;Workers&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://developers.cloudflare.com/r2/\&quot;&gt;&lt;u&gt;R2&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://developers.cloudflare.com/queues/\&quot;&gt;&lt;u&gt;Queues&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://developers.cloudflare.com/durable-objects\&quot;&gt;&lt;u&gt;Durable Objects&lt;/u&gt;&lt;/a&gt;, and &lt;a href=\&quot;https://blog.cloudflare.com/container-platform-preview/\&quot;&gt;&lt;u&gt;container platform&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;what-is-a-vector-database\&quot;&gt;What is a vector database?&lt;/h2&gt;\n            &lt;a href=\&quot;#what-is-a-vector-database\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;A &lt;a href=\&quot;https://www.cloudflare.com/learning/ai/what-is-vector-database/\&quot;&gt;&lt;u&gt;vector database&lt;/u&gt;&lt;/a&gt; is a queryable store of vectors. A vector is a large array of numbers called vector dimensions.&lt;/p&gt;&lt;p&gt;A vector database has a &lt;a href=\&quot;https://en.wikipedia.org/wiki/Similarity_search\&quot;&gt;&lt;u&gt;similarity search&lt;/u&gt;&lt;/a&gt; query: given an input vector, it returns the vectors that are closest according to a specified metric, potentially filtered on their metadata.&lt;/p&gt;&lt;p&gt;&lt;a href=\&quot;https://blog.cloudflare.com/vectorize-vector-database-open-beta/#why-do-i-need-a-vector-database\&quot;&gt;&lt;u&gt;Vector databases are used&lt;/u&gt;&lt;/a&gt; to power semantic search, document classification, and recommendation and anomaly detection, as well as contextualizing answers generated by LLMs (&lt;a href=\&quot;https://developers.cloudflare.com/reference-architecture/diagrams/ai/ai-rag/\&quot;&gt;&lt;u&gt;Retrieval Augmented Generation, RAG&lt;/u&gt;&lt;/a&gt;).&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;why-do-vectors-require-special-database-support\&quot;&gt;Why do vectors require special database support?&lt;/h3&gt;\n            &lt;a href=\&quot;#why-do-vectors-require-special-database-support\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Conventional data structures like &lt;a href=\&quot;https://en.wikipedia.org/wiki/B-tree\&quot;&gt;&lt;u&gt;B-trees&lt;/u&gt;&lt;/a&gt;, or &lt;a href=\&quot;https://en.wikipedia.org/wiki/Binary_search_tree\&quot;&gt;&lt;u&gt;binary search trees&lt;/u&gt;&lt;/a&gt; expect the data they index to be cheap to compare and to follow a one-dimensional linear ordering. They leverage this property of the data to organize it in a way that makes search efficient. Strings, numbers, and booleans are examples of data featuring this property.&lt;/p&gt;&lt;p&gt;Because vectors are high-dimensional, ordering them in a one-dimensional linear fashion is ineffective for similarity search, as the resulting ordering doesnât capture the proximity of vectors in the high-dimensional space. This phenomenon is often referred to as the &lt;a href=\&quot;https://en.wikipedia.org/wiki/Curse_of_dimensionality\&quot;&gt;&lt;u&gt;curse of dimensionality&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In addition to this, comparing two vectors using distance metrics useful for similarity search is a computationally expensive operation, requiring vector-specific techniques for databases to overcome.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;query-processing-architecture\&quot;&gt;Query processing architecture&lt;/h2&gt;\n            &lt;a href=\&quot;#query-processing-architecture\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Vectorize builds upon Cloudflareâs global network to bring fast vector search close to its users, and relies on many components to do so.&lt;/p&gt;&lt;p&gt;These are the Vectorize components involved in processing vector queries.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3iEISPtYCjwmggsjjQ4i14/dddac58c03a875ca258456b25f75df38/blog-2590-vectorize-01-query-read.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;829\&quot; height=\&quot;1796\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Vectorize runs in every &lt;a href=\&quot;https://www.cloudflare.com/network/\&quot;&gt;&lt;u&gt;Cloudflare data center&lt;/u&gt;&lt;/a&gt;, on the infrastructure powering Cloudflare Workers. It serves traffic coming from &lt;a href=\&quot;https://developers.cloudflare.com/workers/runtime-apis/bindings/\&quot;&gt;&lt;u&gt;Worker bindings&lt;/u&gt;&lt;/a&gt; as well as from the &lt;a href=\&quot;https://developers.cloudflare.com/api/operations/vectorize-list-vectorize-indexes\&quot;&gt;&lt;u&gt;Cloudflare REST API&lt;/u&gt;&lt;/a&gt; through our API Gateway.&lt;/p&gt;&lt;p&gt;Each query is processed on a server in the data center in which it enters, picked in a fashion that spreads the load across all servers of that data center.&lt;/p&gt;&lt;p&gt;The Vectorize DB Service (a Rust binary) running on that server processes the query by reading the data for that index on &lt;a href=\&quot;https://developers.cloudflare.com/r2\&quot;&gt;&lt;u&gt;R2&lt;/u&gt;&lt;/a&gt;, Cloudflareâs object storage. It does so by reading through &lt;a href=\&quot;https://developers.cloudflare.com/cache\&quot;&gt;&lt;u&gt;Cloudflareâs Cache&lt;/u&gt;&lt;/a&gt; to speed up I/O operations.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;searching-vectors-and-indexing-them-to-speed-things-up\&quot;&gt;Searching vectors, and indexing them to speed things up&lt;/h2&gt;\n            &lt;a href=\&quot;#searching-vectors-and-indexing-them-to-speed-things-up\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Being a vector database, Vectorize features a similarity search query: given an input vector, it returns the K vectors that are closest according to a specified metric.&lt;/p&gt;&lt;p&gt;Conceptually, this similarity search consists of 3 steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Evaluate the proximity of the query vector with every vector present in the index.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Sort the vectors based on their proximity âscoreâ.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Return the top matches.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;While this method is accurate and effective, it is computationally expensive and does not scale well to indexes containing millions of vectors (see &lt;b&gt;Why do vectors require special database support?&lt;/b&gt; above).&lt;/p&gt;&lt;p&gt;To do better, we need to prune the search space, that is, avoid scanning the entire index for every query.&lt;/p&gt;&lt;p&gt;For this to work, we need to find a way to discard vectors we know are irrelevant for a query, while focusing our efforts on those that might be relevant.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;indexing-vectors-with-ivf\&quot;&gt;Indexing vectors with IVF&lt;/h3&gt;\n            &lt;a href=\&quot;#indexing-vectors-with-ivf\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Vectorize prunes the search space for a query using an indexing technique called &lt;a href=\&quot;https://blog.dailydoseofds.com/p/approximate-nearest-neighbor-search\&quot;&gt;&lt;u&gt;IVF, Inverted File Index&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;IVF clusters the index vectors according to their relative proximity. For each cluster, it then identifies its centroid, the center of gravity of that cluster, a high-dimensional point minimizing the distance with every vector in the cluster.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1q48ixmjKRsTkBdTR6SbSR/1c0ba3c188a78150e74ef3baf849ae7e/blog-2590-vectorize-02-ivf-index.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1029\&quot; height=\&quot;2390\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Once the list of centroids is determined, each centroid is given a number. We then structure the data on storage by placing each vector in a file named like the centroid it is closest to.&lt;/p&gt;&lt;p&gt;When processing a query, we then can then focus on relevant vectors by looking only in the centroid files closest to that query vector, effectively pruning the search space.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3BjkRvCyT4fEgVqIHGkwQg/d692e167dc34fe5b09e94a5ebb29fe28/image8.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;942\&quot; height=\&quot;988\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;compressing-vectors-with-pq\&quot;&gt;Compressing vectors with PQ&lt;/h3&gt;\n            &lt;a href=\&quot;#compressing-vectors-with-pq\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Vectorize supports vectors of up to 1536 dimensions. At 4 bytes per dimension (32 bits float), this means up to 6 KB per vector. Thatâs 6 GB of uncompressed vector data per million vectors that we need to fetch from storage and put in memory.&lt;/p&gt;&lt;p&gt;To process multi-million vector indexes while limiting the CPU, memory, and I/O required to do so, Vectorize uses a &lt;a href=\&quot;https://en.wikipedia.org/wiki/Dimensionality_reduction\&quot;&gt;&lt;u&gt;dimensionality reduction&lt;/u&gt;&lt;/a&gt; technique called &lt;a href=\&quot;https://en.wikipedia.org/wiki/Vector_quantization\&quot;&gt;&lt;u&gt;PQ (Product Quantization)&lt;/u&gt;&lt;/a&gt;. PQ compresses the vectors data in a way that retains most of their specificity while greatly reducing their size â a bit like down sampling a picture to reduce the file size, while still being able to tell precisely whatâs in the picture â enabling Vectorize to efficiently perform similarity search on these lighter vectors.&lt;/p&gt;&lt;p&gt;In addition to storing the compressed vectors, their original data is retained on storage as well, and can be requested through the API; the compressed vector data is used only to speed up the search.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;approximate-nearest-neighbor-search-and-result-accuracy-refining\&quot;&gt;Approximate nearest neighbor search and result accuracy refining&lt;/h3&gt;\n            &lt;a href=\&quot;#approximate-nearest-neighbor-search-and-result-accuracy-refining\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;By pruning the search space and compressing the vector data, weâve managed to increase the efficiency of our query operation, but it is now possible to produce a set of matches that is different from the set of true closest matches. We have traded result accuracy for speed by performing an &lt;a href=\&quot;https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods\&quot;&gt;&lt;u&gt;approximate nearest neighbor search&lt;/u&gt;&lt;/a&gt;, reaching an accuracy of ~80%.&lt;/p&gt;&lt;p&gt;To boost the &lt;a href=\&quot;https://blog.cloudflare.com/workers-ai-bigger-better-faster/#how-fast-is-vectorize\&quot;&gt;&lt;u&gt;result accuracy up to over 95%&lt;/u&gt;&lt;/a&gt;, Vectorize then &lt;a href=\&quot;https://developers.cloudflare.com/vectorize/best-practices/query-vectors/#control-over-scoring-precision-and-query-accuracy\&quot;&gt;&lt;u&gt;performs a result refinement pass&lt;/u&gt;&lt;/a&gt; on the top approximate matches using uncompressed vector data, and returns the best refined matches.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;eventual-consistency-and-snapshot-versioning\&quot;&gt;Eventual consistency and snapshot versioning&lt;/h2&gt;\n            &lt;a href=\&quot;#eventual-consistency-and-snapshot-versioning\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Whenever you query your Vectorize index, you are guaranteed to receive results which are read from a consistent, immutable snapshot â even as you write to your index concurrently. Writes are applied in strict order of their arrival in our system, and they are funneled into an asynchronous process. We update the index files by reading the old version, making changes, and writing this updated version as a new object in R2. Each index file has its own version number, and can be updated independently of the others. Between two versions of the index we may update hundreds or even thousands of IVF and metadata index files, but even as we update the files, your queries will consistently use the current version until it is time to switch.&lt;/p&gt;&lt;p&gt;Each IVF and metadata index file has its own version. The list of all versioned files which make up the snapshotted version of the index is contained within a &lt;i&gt;manifest file&lt;/i&gt;. Each version of the index has its own manifest. When we write a new manifest file based on the previous version, we only need to update references to the index files which were modified; if there are files which weren&amp;#39;t modified, we simply keep the references to the previous version.&lt;/p&gt;&lt;p&gt;We use a &lt;i&gt;root manifest&lt;/i&gt; as the authority of the current version of the index. This is the pivot point for changes. The root manifest is a copy of a manifest file from a particular version, which is written to a deterministic location (the root of the R2 bucket for the index). When our async write process has finished processing vectors, and has written all new index files to R2, we &lt;i&gt;commit&lt;/i&gt; by overwriting the current root manifest with a copy of the new manifest. PUT operations in R2 are atomic, so this effectively makes our updates atomic. Once the manifest is updated, Vectorize DB Service instances running on our network will pick it up, and use it to serve reads.&lt;/p&gt;&lt;p&gt;Because we keep past versions of index and manifest files, we effectively maintain versioned snapshots of your index. This means we have a straightforward path towards building a point-in-time recovery feature (similar to &lt;a href=\&quot;https://developers.cloudflare.com/d1/reference/time-travel/\&quot;&gt;&lt;u&gt;D1&amp;#39;s Time Travel feature&lt;/u&gt;&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;You may have noticed that because our write process is asynchronous, this means Vectorize is &lt;i&gt;eventually consistent&lt;/i&gt; â that is, there is a delay between the successful completion of a request writing on the index, and finally seeing those updates reflected in queries.Â  This isn&amp;#39;t always ideal for all data storage use cases. For example, imagine two users using an online ticket reservation application for airline tickets, where both users buy the same seat â one user will successfully reserve the ticket, and the other will eventually get an error saying the seat was taken, and they need to choose again. Because a vector index is not typically used as a primary database for these transactional use cases, we decided eventual consistency was a worthy trade off in order to ensure Vectorize queries would be fast, high-throughput, and cheap even as the size of indexes grew into the millions.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;coordinating-distributed-writes-its-just-another-block-in-the-wal\&quot;&gt;Coordinating distributed writes: it&#39;s just another block in the WAL&lt;/h2&gt;\n            &lt;a href=\&quot;#coordinating-distributed-writes-its-just-another-block-in-the-wal\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;In the section above, we touched on our eventually consistent, asynchronous write process. Now we&amp;#39;ll dive deeper into our implementation.Â &lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;the-wal\&quot;&gt;The WAL&lt;/h3&gt;\n            &lt;a href=\&quot;#the-wal\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;A &lt;a href=\&quot;https://en.wikipedia.org/wiki/Write-ahead_logging\&quot;&gt;&lt;u&gt;write ahead log&lt;/u&gt;&lt;/a&gt; (WAL) is a common technique for making atomic and durable writes in a database system. Vectorizeâs WAL is implemented with &lt;a href=\&quot;https://blog.cloudflare.com/sqlite-in-durable-objects/\&quot;&gt;&lt;u&gt;SQLite in Durable Objects&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In Vectorize, the payload for each update is given an ID, written to R2, and the ID for that payload is handed to the WAL Durable Object which persists it as a &amp;quot;block.&amp;quot; Because it&amp;#39;s just a pointer to the data, the blocks are lightweight records of each mutation.&lt;/p&gt;&lt;p&gt;Durable Objects (DO) have many benefits â strong transactional guarantees, a novel combination of compute and storage, and a high degree of horizontal scale â but individual DOs are small allotments of memory and compute. However, the process of updating the index for even a single mutation is resource intensive â a single write may include thousands of vectors, which may mean reading and writing thousands of data files stored in R2, and storing a lot of data in memory. This is more than what a single DO can handle.&lt;/p&gt;&lt;p&gt;So we designed the WAL to leverage DO&amp;#39;s strengths and made it a coordinator. It controls the steps of updating the index by delegating the heavy lifting to beefier instances of compute resources (which we call &amp;quot;Executors&amp;quot;), but uses its transactional properties to ensure the steps are done with strong consistency. It safeguards the process from rogue or stalled executors, and ensures the WAL processing continues to move forward. DOs are easy to scale, so we create a new DO instance for each Vectorize index.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7l5hw2yVkyGKpU8xTMyX8f/743941bd273731bdb3dbf8110afc2526/unnamed.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1600\&quot; height=\&quot;613\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;wal-executor\&quot;&gt;WAL Executor&lt;/h3&gt;\n            &lt;a href=\&quot;#wal-executor\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;The executors run from a single pool of compute resources, shared by all WALs. We use a simple producer-consumer pattern using &lt;a href=\&quot;https://developers.cloudflare.com/queues/\&quot;&gt;&lt;u&gt;Cloudflare Queues&lt;/u&gt;&lt;/a&gt;. The WAL enqueues a request, and executors poll the queue. When they get a request, they call an API on the WAL requesting to be &lt;i&gt;assigned &lt;/i&gt;to the request.&lt;/p&gt;&lt;p&gt;The WAL ensures that one and only one executor is ever assigned to that write. As the executor writes, the index files and the updated manifest are written in R2, but they are not yet visible. The final step is for the executor to call another API on the WAL to &lt;i&gt;commit&lt;/i&gt; the change â and this is key â it passes along the updated manifest. The WAL is responsible for overwriting the root manifest with the updated manifest. The root manifest is the pivot point for atomic updates: once written, the change is made visible to Vectorizeâs database service, and the updated data will appear in queries.&lt;/p&gt;&lt;p&gt;From the start, we designed this process to account for non-deterministic errors. We focused on enumerating failure modes first, and only moving forward with possible design options after asserting they handled the possibilities for failure. For example, if an executor stalls, the WAL finds a new executor. If the first executor comes back, the coordinator will reject its attempt to commit the update. Even if that first executor is working on an old version which has already been written, and writes new index files and a new manifest to R2, they will not overwrite the files written from the committed version.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;batching-updates\&quot;&gt;Batching updates&lt;/h3&gt;\n            &lt;a href=\&quot;#batching-updates\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Now that we have discussed the general flow, we can circle back to one of our favorite features of the WAL. On the executor, the most time-intensive part of the write process is reading and writing many files from R2. Even with making our reads and writes concurrent to maximize throughput, the cost of updating even thousands of vectors within a single file is dwarfed by the total latency of the network I/O. Therefore it is more efficient to maximize the number of vectors processed in a single execution.&lt;/p&gt;&lt;p&gt;So that is what we do: we batch discrete updates. When the WAL is ready to request work from an executor, it will get a chunk of &amp;quot;blocks&amp;quot; off the WAL, starting with the next un-written block, and maintaining the sequence of blocks. It will write a new &amp;quot;batch&amp;quot; record into the SQLite table, which ties together that sequence of blocks, the version of the index, and the ID of the executor assigned to the batch.&lt;/p&gt;&lt;p&gt;Users can batch multiple vectors to update in a single insert or upsert call. Because the size of each update can vary, the WAL adaptively calculates the optimal size of its batch to increase throughput. The WAL will fit as many upserted vectors as possible into a single batch by counting the number of updates represented by each block. It will batch up to 200,000 vectors at once (a value we arrived at after our own testing) with a limit of 1,000 blocks. With this throughput, we have been able to quickly load millions of vectors into an index (with upserts of 5,000 vectors at a time). Also, the WAL does not pause itself to collect more writes to batch â instead, it begins processing a write as soon as it arrives. Because the WAL only processes one batch at a time, this creates a natural pause in its workflow to batch up writes which arrive in the meantime.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;retraining-the-index\&quot;&gt;Retraining the index&lt;/h3&gt;\n            &lt;a href=\&quot;#retraining-the-index\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;The WAL also coordinates our process for retraining the index. We occasionally re-train indexes to ensure the mapping of IVF centroids best reflects the current vectors in the index. This maintains the high accuracy of the vector search.&lt;/p&gt;&lt;p&gt;Retraining produces a completely new index. All index files are updated; vectors have been reshuffled across the index space. For this reason, all indexes have a second version stamp â which we call the &lt;i&gt;generation&lt;/i&gt; â so that we can differentiate between retrained indexes.Â &lt;/p&gt;&lt;p&gt;The WAL tracks the state of the index, and controls when the training is started. We have a second pool of processes called &amp;quot;trainers.&amp;quot; The WAL enqueues a request on a queue, then a trainer picks up the request and it begins training.&lt;/p&gt;&lt;p&gt;Training can take a few minutes to complete, but we do not pause writes on the current generation. The WAL will continue to handle writes as normal. But the training runs from a fixed snapshot of the index, and will become out-of-date as the live index gets updated in parallel. Once the trainer has completed, it signals the WAL, which will then start a multi-step process to switch to the new generation. It enters a mode where it will continue to record writes in the WAL, but will stop making those writes visible on the current index. Then it will begin catching up the retrained index with all of the updates that came in since it started. Once it has caught up to all data present in the index when the trainer signaled the WAL, it will switch over to the newly retrained index. This prevents the new index from appearing to &amp;quot;jump back in time.&amp;quot; All subsequent writes will be applied to that new index.&lt;/p&gt;&lt;p&gt;This is all modeled seamlessly with the batch record. Because it associates the index version with a range of WAL blocks, multiple batches can span the same sequence of blocks as long as they belong to different generations. We can say this another way: a single WAL block can be associated with many batches, as long as these batches are in different generations. Conceptually, the batches act as a second WAL layered over the WAL blocks.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;indexing-and-filtering-metadata\&quot;&gt;Indexing and filtering metadata&lt;/h2&gt;\n            &lt;a href=\&quot;#indexing-and-filtering-metadata\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Vectorize supports metadata filters on vector similarity queries. This allows a query to focus the vector similarity search on a subset of the index data, yielding matches that would otherwise not have been part of the top results.&lt;/p&gt;&lt;p&gt;For instance, this enables us to query for the best matching vectors for &lt;code&gt;color: âblueâ &lt;/code&gt;and &lt;code&gt;category: ârobeâ&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Conceptually, what needs to happen to process this example query is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Identify the set of vectors matching &lt;code&gt;color: âblueâ&lt;/code&gt; by scanning all metadata.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Identify the set of vectors matching &lt;code&gt;category: ârobeâ&lt;/code&gt; by scanning all metadata.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Intersect both sets (boolean AND in the filter) to identify vectors matching both the color and category filter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Score all vectors in the intersected set, and return the top matches.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While this method works, it doesnât scale well. For an index with millions of vectors, processing the query that way would be very resource intensive. Whatâs worse, it prevents us from using our IVF index to identify relevant vector data, forcing us to compute a proximity score on potentially millions of vectors if the filtered set of vectors is large.&lt;/p&gt;&lt;p&gt;To do better, we need to prune the metadata search space by indexing it like we did for the vector data, and find a way to efficiently join the vector sets produced by the metadata index with our IVF vector index.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;indexing-metadata-with-chunked-sorted-list-indexes\&quot;&gt;Indexing metadata with Chunked Sorted List Indexes&lt;/h3&gt;\n            &lt;a href=\&quot;#indexing-metadata-with-chunked-sorted-list-indexes\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Vectorize maintains one metadata index per filterable property. Each filterable metadata property is indexed using a Chunked Sorted List Index.&lt;/p&gt;&lt;p&gt;A Chunked Sorted List Index is a sorted list of all distinct values present in the data for a filterable property, with each value mapped to the set of vector IDs having that value. This enables Vectorize to &lt;a href=\&quot;https://en.wikipedia.org/wiki/Binary_search\&quot;&gt;&lt;u&gt;binary search&lt;/u&gt;&lt;/a&gt; a value in the metadata index in &lt;a href=\&quot;https://www.geeksforgeeks.org/what-is-logarithmic-time-complexity/\&quot;&gt;&lt;u&gt;O(log n)&lt;/u&gt;&lt;/a&gt; complexity, in other words about as fast as search can be on a large dataset.&lt;/p&gt;&lt;p&gt;Because it can become very large on big indexes, the sorted list is chunked in pieces matching a target weight in KB to keep index state fetches efficient.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7wRfqvPKtRx9RX5clyapxt/9630152212779ac008efc9685538f48e/blog-2590-vectorize-03-chunked-sorted-list.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1131\&quot; height=\&quot;883\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;A lightweight chunk descriptor list is maintained in the index manifest, keeping track of the list chunks and their lower/upper values. This chunk descriptor list can be binary searched to identify which chunk would contain the searched metadata value.&lt;/p&gt;&lt;p&gt;Once the candidate chunk is identified, Vectorize fetches that chunk from index data and binary searches it to take the set of vector IDs matching a metadata value if found, or an empty set if not found.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6leIbnEGLN2qRitRXxoqog/01d5cfaad6e9e537b27bbc15933c1db0/blog-2590-vectorize-04-chunked-sorted-list-2.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1519\&quot; height=\&quot;863\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;We identify the matching vector set this way for every predicate in the metadata filter of the query, then intersect the sets in memory to determine the final set of vectors matched by the filters.&lt;/p&gt;&lt;p&gt;This is just half of the query being processed. We now need to identify the vectors most similar to the query vector, within those matching the metadata filters.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;joining-the-metadata-and-vector-indexes\&quot;&gt;Joining the metadata and vector indexes&lt;/h3&gt;\n            &lt;a href=\&quot;#joining-the-metadata-and-vector-indexes\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;A vector similarity query always comes with an input vector. We can rank all centroids of our IVF vector index based on their proximity with that query vector.&lt;/p&gt;&lt;p&gt;The vector set matched by the metadata filters contains for each vector its ID and IVF centroid number.&lt;/p&gt;&lt;p&gt;From this, Vectorize derives the number of vectors matching the query filters per IVF centroid, and determines which and how many top-ranked IVF centroids need to be scanned according to the number of matches the query asks for.&lt;/p&gt;&lt;p&gt;Vectorize then performs the IVF-indexed vector search (see the section &lt;b&gt;Searching Vectors, and indexing them to speed things up&lt;/b&gt; above&lt;b&gt;)&lt;/b&gt; by considering only the vectors in the filtered metadata vector set while doing so.&lt;/p&gt;&lt;p&gt;Because weâre effectively pruning the vector search space using metadata filters, filtered queries can often be faster than their unfiltered equivalent.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;query-performance\&quot;&gt;Query performance&lt;/h2&gt;\n            &lt;a href=\&quot;#query-performance\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;The performance of a system is measured in terms of latency and throughput.&lt;/p&gt;&lt;p&gt;Latency is a measure relative to individual queries, evaluating the time it takes for a query to be processed, usually expressed in milliseconds. It is what an end user perceives as the âspeedâ of the service, so a lower latency is desirable.&lt;/p&gt;&lt;p&gt;Throughput is a measure relative to an index, evaluating the number of queries it can process concurrently over a period of time, usually expressed in requests per second or RPS. It is what enables an application to scale to thousands of simultaneous users, so a higher throughput is desirable.&lt;/p&gt;&lt;p&gt;Vectorize is designed for great index throughput and optimized for low query latency to deliver great performance for demanding applications. &lt;a href=\&quot;https://blog.cloudflare.com/workers-ai-bigger-better-faster/#how-fast-is-vectorize\&quot;&gt;&lt;u&gt;Check out our benchmarks&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;query-latency-optimization\&quot;&gt;Query latency optimization&lt;/h3&gt;\n            &lt;a href=\&quot;#query-latency-optimization\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;As a distributed database keeping its data state on blob storage, Vectorizeâs latency is primarily driven by the fetch of index data, and relies heavily on &lt;a href=\&quot;https://developers.cloudflare.com/cache\&quot;&gt;&lt;u&gt;Cloudflareâs network of caches&lt;/u&gt;&lt;/a&gt; as well as individual server RAM cache to keep latency low.&lt;/p&gt;&lt;p&gt;Because Vectorize data is snapshot versioned, (see &lt;b&gt;Eventual consistency and snapshot versioning&lt;/b&gt; above), each version of the index data is immutable and thus highly cacheable, increasing the latency benefits Vectorize gets from relying on Cloudflareâs cache infrastructure.&lt;/p&gt;&lt;p&gt;To keep the index data lean, Vectorize uses techniques to reduce its weight. In addition to Product Quantization (see &lt;b&gt;Compressing vectors with PQ&lt;/b&gt; above), index files use a space-efficient binary format optimized for runtime performance that Vectorize is able to use without parsing, once fetched.&lt;/p&gt;&lt;p&gt;Index data is fragmented in a way that minimizes the amount of data required to process a query. Auxiliary indexes into that data are maintained to limit the amount of fragments to fetch, reducing overfetch by jumping straight to the relevant piece of data on mass storage.&lt;/p&gt;&lt;p&gt;Vectorize boosts all vector proximity computations by leveraging &lt;a href=\&quot;https://en.wikipedia.org/wiki/Single_instruction,_multiple_data\&quot;&gt;&lt;u&gt;SIMD CPU instructions&lt;/u&gt;&lt;/a&gt;, and by organizing the vector search in 2 passes, effectively balancing the latency/result accuracy ratio (see &lt;b&gt;Approximate nearest neighbor search and result accuracy refining&lt;/b&gt; above).&lt;/p&gt;&lt;p&gt;When used via a Worker binding, each query is processed close to the server serving the worker request, and thus close to the end user, minimizing the network-induced latency between the end user, the Worker application, and Vectorize.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h3 id=\&quot;query-throughput\&quot;&gt;Query throughput&lt;/h3&gt;\n            &lt;a href=\&quot;#query-throughput\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n        &lt;p&gt;Vectorize runs in every Cloudflare data center, on thousands of servers across the world.&lt;/p&gt;&lt;p&gt;Thanks to the snapshot versioning of every indexâs data, every server is simultaneously able to serve the index concurrently, without contention on state.&lt;/p&gt;&lt;p&gt;This means that a Vectorize index elastically scales horizontally with its distributed traffic, providing very high throughput for the most demanding Worker applications.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;increased-index-size\&quot;&gt;Increased index size&lt;/h2&gt;\n            &lt;a href=\&quot;#increased-index-size\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;We are excited that our upgraded version of Vectorize can support a maximum of 5 million vectors, which is a 25x improvement over the limit in beta (200,000 vectors). All the improvements we discussed in this blog post contribute to this increase in vector storage. &lt;a href=\&quot;https://blog.cloudflare.com/workers-ai-bigger-better-faster/#how-fast-is-vectorize\&quot;&gt;&lt;u&gt;Improved query performance&lt;/u&gt;&lt;/a&gt; and throughput comes with this increase in storage as well.&lt;/p&gt;&lt;p&gt;However, 5 million may be constraining for some use cases. We have already heard this feedback. The limit falls out of the constraints of building a brand new globally distributed stateful service, and our desire to iterate fast and make Vectorize generally available so builders can confidently leverage it in their production apps.&lt;/p&gt;&lt;p&gt;We believe builders will be able to leverage Vectorize as their primary vector store, either with a single index or by sharding across multiple indexes. But if this limit is too constraining for you, please let us know. Tell us your use case, and let&amp;#39;s see if we can work together to make Vectorize work for you.&lt;/p&gt;\n          &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n            &lt;h2 id=\&quot;try-it-now\&quot;&gt;Try it now!&lt;/h2&gt;\n            &lt;a href=\&quot;#try-it-now\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n              &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n            &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;p&gt;Every developer on a free plan can give Vectorize a try. You can &lt;a href=\&quot;https://developers.cloudflare.com/vectorize/\&quot;&gt;&lt;u&gt;visit our developer documentation to get started&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If youâre looking for inspiration on what to build, &lt;a href=\&quot;http://developers.cloudflare.com/vectorize/get-started/embeddings/\&quot;&gt;&lt;u&gt;see the semantic search tutorial&lt;/u&gt;&lt;/a&gt; that combines &lt;a href=\&quot;https://developers.cloudflare.com/workers-ai/\&quot;&gt;&lt;u&gt;Workers AI&lt;/u&gt;&lt;/a&gt; and Vectorize for document search, running entirely on Cloudflare. Or an example of &lt;a href=\&quot;https://developers.cloudflare.com/workers-ai/tutorials/build-a-retrieval-augmented-generation-ai/\&quot;&gt;&lt;u&gt;how to combine OpenAI and Vectorize&lt;/u&gt;&lt;/a&gt; to give an LLM more context and dramatically improve the accuracy of its answers.&lt;/p&gt;&lt;p&gt;And if you have questions about how to use Vectorize for our product &amp;amp; engineering teams, or just want to bounce an idea off of other developers building on Workers AI, join the #vectorize and #workers-ai channels on our &lt;a href=\&quot;https://discord.cloudflare.com/\&quot;&gt;&lt;u&gt;Developer Discord&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2024-10-22T14:00+01:00&quot;],&quot;updated_at&quot;:[0,&quot;2024-10-25T13:00:02.635Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3fg2JTDAliIYZJ05aHMLbB/0bd84a5b46f5c83a0bf6756b43cfdf6c/image2.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;4ggKJG4JUzqG9FpAPIxwij&quot;],&quot;name&quot;:[0,&quot;Engineering&quot;],&quot;slug&quot;:[0,&quot;engineering&quot;]}],[0,{&quot;id&quot;:[0,&quot;3JAY3z7p7An94s6ScuSQPf&quot;],&quot;name&quot;:[0,&quot;Developer Platform&quot;],&quot;slug&quot;:[0,&quot;developer-platform&quot;]}],[0,{&quot;id&quot;:[0,&quot;3RrKxQpSeoUVWXO1gT9jsU&quot;],&quot;name&quot;:[0,&quot;Edge Database&quot;],&quot;slug&quot;:[0,&quot;edge-database&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;7lB8a8hOPXzjt99X5Ye9wb&quot;],&quot;name&quot;:[0,&quot;Storage&quot;],&quot;slug&quot;:[0,&quot;storage&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;JÃ©rÃ´me Schneider&quot;],&quot;slug&quot;:[0,&quot;jerome&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4ydnymjeDJjlnRryLpDQUH/71981f68cfcf3962952400cf88955a5c/jerome.png&quot;],&quot;location&quot;:[0,&quot;France&quot;],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,&quot;@jeromeschneider&quot;],&quot;facebook&quot;:[0,null]}],[0,{&quot;name&quot;:[0,&quot;Alex Graham&quot;],&quot;slug&quot;:[0,&quot;alex-graham&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7JHQi5kSLLLe5Xv3UF3Wpu/78b42f6f5628c41a83ac08c537cda62f/_tmp_mini_magick20240416-2-nemxat.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0]}]]],&quot;meta_description&quot;:[0,&quot;Vectorize was recently upgraded and made generally available, now supporting indexes of up to 5 million vectors, delivering faster responses, with lower pricing and a free tier. This post dives deep into how we built Vectorize to enable these improvements.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/building-vectorize-a-distributed-vector-database-on-cloudflare-developer-platform&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Building Vectorize, a distributed vector database, on Cloudflareâs Developer Platform&quot;],&quot;description&quot;:[0,&quot;Vectorize was recently upgraded and made generally available, now supporting indexes of up to 5 million vectors, delivering faster responses, with lower pricing and a free tier. This post dives deep into how we built Vectorize to enable these improvements.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/YO3acC0UUI0p36wireaXr/9eb8c6f35c695f72460c1f3b2e1fd656/Building_Vectorize__a_distributed_vector_database__on_Cloudflare_s_Developer_Platform-OG.png&quot;]}]}]]],&quot;locale&quot;:[0,&quot;en-us&quot;],&quot;translations&quot;:[0,{&quot;posts.by&quot;:[0,&quot;By&quot;],&quot;footer.gdpr&quot;:[0,&quot;GDPR&quot;],&quot;lang_blurb1&quot;:[0,&quot;This post is also available in {lang1}.&quot;],&quot;lang_blurb2&quot;:[0,&quot;This post is also available in {lang1} and {lang2}.&quot;],&quot;lang_blurb3&quot;:[0,&quot;This post is also available in {lang1}, {lang2} and {lang3}.&quot;],&quot;footer.press&quot;:[0,&quot;Press&quot;],&quot;header.title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;search.clear&quot;:[0,&quot;Clear&quot;],&quot;search.filter&quot;:[0,&quot;Filter&quot;],&quot;search.source&quot;:[0,&quot;Source&quot;],&quot;footer.careers&quot;:[0,&quot;Careers&quot;],&quot;footer.company&quot;:[0,&quot;Company&quot;],&quot;footer.support&quot;:[0,&quot;Support&quot;],&quot;footer.the_net&quot;:[0,&quot;theNet&quot;],&quot;search.filters&quot;:[0,&quot;Filters&quot;],&quot;footer.our_team&quot;:[0,&quot;Our team&quot;],&quot;footer.webinars&quot;:[0,&quot;Webinars&quot;],&quot;page.more_posts&quot;:[0,&quot;More posts&quot;],&quot;posts.time_read&quot;:[0,&quot;{time} min read&quot;],&quot;search.language&quot;:[0,&quot;Language&quot;],&quot;footer.community&quot;:[0,&quot;Community&quot;],&quot;footer.resources&quot;:[0,&quot;Resources&quot;],&quot;footer.solutions&quot;:[0,&quot;Solutions&quot;],&quot;footer.trademark&quot;:[0,&quot;Trademark&quot;],&quot;header.subscribe&quot;:[0,&quot;Subscribe&quot;],&quot;footer.compliance&quot;:[0,&quot;Compliance&quot;],&quot;footer.free_plans&quot;:[0,&quot;Free plans&quot;],&quot;footer.impact_ESG&quot;:[0,&quot;Impact/ESG&quot;],&quot;posts.follow_on_X&quot;:[0,&quot;Follow on X&quot;],&quot;footer.help_center&quot;:[0,&quot;Help center&quot;],&quot;footer.network_map&quot;:[0,&quot;Network Map&quot;],&quot;header.please_wait&quot;:[0,&quot;Please Wait&quot;],&quot;page.related_posts&quot;:[0,&quot;Related posts&quot;],&quot;search.result_stat&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt; for &lt;strong&gt;{search_keyword}&lt;/strong&gt;&quot;],&quot;footer.case_studies&quot;:[0,&quot;Case Studies&quot;],&quot;footer.connect_2024&quot;:[0,&quot;Connect 2024&quot;],&quot;footer.terms_of_use&quot;:[0,&quot;Terms of Use&quot;],&quot;footer.white_papers&quot;:[0,&quot;White Papers&quot;],&quot;footer.cloudflare_tv&quot;:[0,&quot;Cloudflare TV&quot;],&quot;footer.community_hub&quot;:[0,&quot;Community Hub&quot;],&quot;footer.compare_plans&quot;:[0,&quot;Compare plans&quot;],&quot;footer.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.email_address&quot;:[0,&quot;Email Address&quot;],&quot;page.error.not_found&quot;:[0,&quot;Page not found&quot;],&quot;footer.developer_docs&quot;:[0,&quot;Developer docs&quot;],&quot;footer.privacy_policy&quot;:[0,&quot;Privacy Policy&quot;],&quot;footer.request_a_demo&quot;:[0,&quot;Request a demo&quot;],&quot;page.continue_reading&quot;:[0,&quot;Continue reading&quot;],&quot;footer.analysts_report&quot;:[0,&quot;Analyst reports&quot;],&quot;footer.for_enterprises&quot;:[0,&quot;For enterprises&quot;],&quot;footer.getting_started&quot;:[0,&quot;Getting Started&quot;],&quot;footer.learning_center&quot;:[0,&quot;Learning Center&quot;],&quot;footer.project_galileo&quot;:[0,&quot;Project Galileo&quot;],&quot;pagination.newer_posts&quot;:[0,&quot;Newer Posts&quot;],&quot;pagination.older_posts&quot;:[0,&quot;Older Posts&quot;],&quot;posts.social_buttons.x&quot;:[0,&quot;Discuss on X&quot;],&quot;search.source_location&quot;:[0,&quot;Source/Location&quot;],&quot;footer.about_cloudflare&quot;:[0,&quot;About Cloudflare&quot;],&quot;footer.athenian_project&quot;:[0,&quot;Athenian Project&quot;],&quot;footer.become_a_partner&quot;:[0,&quot;Become a partner&quot;],&quot;footer.cloudflare_radar&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;footer.network_services&quot;:[0,&quot;Network services&quot;],&quot;footer.trust_and_safety&quot;:[0,&quot;Trust &amp; Safety&quot;],&quot;header.get_started_free&quot;:[0,&quot;Get Started Free&quot;],&quot;page.search.placeholder&quot;:[0,&quot;Search Cloudflare&quot;],&quot;footer.cloudflare_status&quot;:[0,&quot;Cloudflare Status&quot;],&quot;footer.cookie_preference&quot;:[0,&quot;Cookie Preferences&quot;],&quot;header.valid_email_error&quot;:[0,&quot;Must be valid email.&quot;],&quot;footer.connectivity_cloud&quot;:[0,&quot;Connectivity cloud&quot;],&quot;footer.developer_services&quot;:[0,&quot;Developer services&quot;],&quot;footer.investor_relations&quot;:[0,&quot;Investor relations&quot;],&quot;page.not_found.error_code&quot;:[0,&quot;Error Code: 404&quot;],&quot;footer.logos_and_press_kit&quot;:[0,&quot;Logos &amp; press kit&quot;],&quot;footer.application_services&quot;:[0,&quot;Application services&quot;],&quot;footer.get_a_recommendation&quot;:[0,&quot;Get a recommendation&quot;],&quot;posts.social_buttons.reddit&quot;:[0,&quot;Discuss on Reddit&quot;],&quot;footer.sse_and_sase_services&quot;:[0,&quot;SSE and SASE services&quot;],&quot;page.not_found.outdated_link&quot;:[0,&quot;You may have used an outdated link, or you may have typed the address incorrectly.&quot;],&quot;footer.report_security_issues&quot;:[0,&quot;Report Security Issues&quot;],&quot;page.error.error_message_page&quot;:[0,&quot;Sorry, we can&#39;t find the page you are looking for.&quot;],&quot;header.subscribe_notifications&quot;:[0,&quot;Subscribe to receive notifications of new posts:&quot;],&quot;footer.cloudflare_for_campaigns&quot;:[0,&quot;Cloudflare for Campaigns&quot;],&quot;header.subscription_confimation&quot;:[0,&quot;Subscription confirmed. Thank you for subscribing!&quot;],&quot;posts.social_buttons.hackernews&quot;:[0,&quot;Discuss on Hacker News&quot;],&quot;footer.diversity_equity_inclusion&quot;:[0,&quot;Diversity, equity &amp; inclusion&quot;],&quot;footer.critical_infrastructure_defense_project&quot;:[0,&quot;Critical Infrastructure Defense Project&quot;]}],&quot;localesAvailable&quot;:[1,[]],&quot;footerBlurb&quot;:[0,&quot;Cloudflare&#39;s connectivity cloud protects &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/network-services/&#39; rel=&#39;noreferrer&#39;&gt;entire corporate networks&lt;/a&gt;, helps customers build &lt;a target=&#39;_blank&#39; href=&#39;https://workers.cloudflare.com/&#39; rel=&#39;noreferrer&#39;&gt;Internet-scale applications efficiently&lt;/a&gt;, accelerates any &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/performance/accelerate-internet-applications/&#39; rel=&#39;noreferrer&#39;&gt;website or Internet application&lt;/a&gt;, &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/ddos/&#39; rel=&#39;noreferrer&#39;&gt;wards off DDoS attacks&lt;/a&gt;, keeps &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/application-security/&#39; rel=&#39;noreferrer&#39;&gt;hackers at bay&lt;/a&gt;, and can help you on &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/products/zero-trust/&#39; rel=&#39;noreferrer&#39;&gt;your journey to Zero Trust&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Visit &lt;a target=&#39;_blank&#39; href=&#39;https://one.one.one.one/&#39; rel=&#39;noreferrer&#39;&gt;1.1.1.1&lt;/a&gt; from any device to get started with our free app that makes your Internet faster and safer.&lt;br/&gt;&lt;br/&gt;To learn more about our mission to help build a better Internet, &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/learning/what-is-cloudflare/&#39; rel=&#39;noreferrer&#39;&gt;start here&lt;/a&gt;. If you&amp;apos;re looking for a new career direction, check out &lt;a target=&#39;_blank&#39; href=&#39;http://www.cloudflare.com/careers&#39; rel=&#39;noreferrer&#39;&gt;our open positions&lt;/a&gt;.&quot;]}" ssr="" client="load" opts="{&quot;name&quot;:&quot;Post&quot;,&quot;value&quot;:true}" await-children=""><main id="post" class="flex flex-row flex-wrap items-center justify-center pt2 pt4-l"><article class="post-full mw-100 ph3 ph0-l fs-20px"><h1 class="f6 f7-l fw4 gray1 pt1 pt3-l mb1">A quirk in the SUNBURST DGA algorithm</h1><p class="f3 fw5 gray5 db di-l mt2">2020-12-18</p><ul class="author-lists flex pl0 mt4"><li class="list flex items-center pr2 mb1-ns"><a href="/author/nick-blazier/" class="static-avatar pr1"><img class="author-profile-image br-100 mr2" src="https://blog.cloudflare.com/cdn-cgi/image/format=auto,dpr=3,width=64,height=64,gravity=face,fit=crop,zoom=0.5/https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6EqysfZ9O4B7fiqUFUpnuO/eb6b0dbd838f46c5275aed437b76e95f/nick-blazier.png" alt="Nick Blazier" width="62" height="62"/></a><div class="author-name-tooltip"><a href="/author/nick-blazier/" class="fw4 f3 no-underline black mr3">Nick Blazier</a></div></li><li class="list flex items-center pr2 mb1-ns"><a href="/author/jesse/" class="static-avatar pr1"><img class="author-profile-image br-100 mr2" src="https://blog.cloudflare.com/cdn-cgi/image/format=auto,dpr=3,width=64,height=64,gravity=face,fit=crop,zoom=0.5/https://cf-assets.www.cloudflare.com/zkvhlag99gkb/8yRqemLc8lLhE9Uwzd7G4/a303cca84c1840cc961831f1ea6b4213/jesse.jpg" alt="Jesse Kipp" width="62" height="62"/></a><div class="author-name-tooltip"><a href="/author/jesse/" class="fw4 f3 no-underline black mr3">Jesse Kipp</a></div></li></ul><section class="post-full-content"><div class="mb2 gray5">4 min read</div><div class="post-content lh-copy gray1">
            <figure class="kg-card kg-image-card ">
            
            <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4y3VW6SLU672JNv2ExYhPt/5dc75005a2adcc9bb306992098032dad/Sunburst.png" alt="" class="kg-image" width="1600" height="898" loading="lazy"/>
            
            </figure><p>On Wednesday, December 16, the RedDrip Team from QiAnXin Technology <a href="https://mp.weixin.qq.com/s/v-ekPFtVNZG1W7vWjcuVug">released their discoveries</a> (<a href="https://twitter.com/RedDrip7/status/1339168187619790848?s=20">tweet</a>, <a href="https://github.com/RedDrip7/SunBurst_DGA_Decode">github</a>) regarding the random subdomains associated with the SUNBURST malware which was present in the SolarWinds Orion compromise. In studying queries performed by the malware, Cloudflare has uncovered additional details about how the Domain Generation Algorithm (DGA) encodes data and exfiltrates the compromised hostname to the command and control servers.</p>
          <div class="flex anchor relative">
            <h3 id="background">Background</h3>
            <a href="#background" aria-hidden="true" class="relative sm:absolute sm:-left-5">
              <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
            </a>
          </div>
        <p>The RedDrip team discovered that the DNS queries are created by combining the previously reverse-engineered unique guid (based on hashing of hostname and MAC address) with a payload that is a custom base 32 encoding of the hostname. The article they published includes screenshots of decompiled or reimplemented C# functions that are included in the compromised DLL. This background primer summarizes their work so far (which is published in Chinese).</p><p>RedDrip discovered that the DGA subdomain portion of the query is split into three parts:</p><p><code><b>&lt;encoded_guid&gt; + &lt;byte&gt; + &lt;encoded_hostname&gt;</b></code></p><p>An example malicious domain is:</p><p><code><b>7cbtailjomqle1pjvr2d32i2voe60ce2.appsync-api.us-east-1.avsvmcloud.com</b></code></p><p>Where the domain is split into the three parts as</p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-yzei{border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-z6tn{border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}
.tg .tg-8tm3{background-color:#efefef;border-color:#343434;font-size:18px;text-align:center;vertical-align:middle}
.tg .tg-v8qi{background-color:#efefef;border-color:#343434;font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 683px">
<colgroup>
<col style="width: 265px">
<col style="width: 180px">
<col style="width: 238px">
</colgroup>
<thead>
  <tr>
    <th class="tg-8tm3"><span style="font-style:normal;text-decoration:none">Encoded guid (15 chars)</span></th>
    <th class="tg-v8qi"><span style="font-weight:bold">byte</span></th>
    <th class="tg-v8qi"><span style="font-weight:400;font-style:normal">Encoded hostname</span></th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-yzei"><span style="font-weight:700;font-style:normal;text-decoration:none">7cbtailjomqle1p</span></td>
    <td class="tg-z6tn"><span style="font-weight:700;font-style:normal;text-decoration:none">j</span></td>
    <td class="tg-z6tn"><span style="font-weight:700;font-style:normal;text-decoration:none">vr2d32i2voe60ce2</span></td>
  </tr>
</tbody>
</table><!--kg-card-end: html--><p>The work from the RedDrip Team focused on the encoded hostname portion of the string, we have made additional insights related to the encoded hostname and encoded guid portions.</p><p>At a high level the encoded hostnames take one of two encoding schemes. If all of the characters in the hostname are contained in the set of domain name-safe characters <code>&quot;0123456789abcdefghijklmnopqrstuvwxyz-_.&quot;</code> then the <code>OrionImprovementBusinessLayer.CryptoHelper.Base64Decode</code> algorithm, explained in the article, is used. If there are characters outside of that set in the hostname, then the <code>OrionImprovementBusinessLayer.CryptoHelper.Base64Encode</code> is used instead and â00â is prepended to the encoding. This allows us to simply check if the first two characters of the encoded hostname are â00â and know how the hostname is encoded.</p><p>These function names within the compromised DLL are meant to resemble the names of legitimate functions, but in fact perform the message encoding for the malware. The DLL function Base64Decode is meant to resemble the legitimate function name base64decode, but its purpose is actually to perform the encoding of the query (which is a variant of base32 encoding).</p><p>The RedDrip Team has posted Python code for encoding and decoding the queries, including identifying random characters inserted into the queries at regular character intervals.</p><p>One potential issue we encountered with their implementation is the inclusion of a check clause looking for a â0â character in the encoded hostname (line 138 of the decoding script). This line causes the decoding algorithm to ignore any encoded hostnames that do not contain a â0â. We believe this was included because â0â is the encoded value of a â0â, â.â, â-â or â_â. Since fully qualified hostnames are comprised of multiple parts separated by â.âs, e.g. âexample.comâ, it makes sense to be expecting a â.â in the unencoded hostname and therefore only consider encoded hostnames containing a â0â. However, this causes the decoder to ignore many of the recorded DGA domains.</p><p>As we explain below, we believe that long domains are split across multiple queries where the second half is much shorter and unlikely to include a â.â. For example âwww2.example.câ takes up one message, meaning that in order to transmit the entire domain âwww2.example.câ a second message containing just âomâ would also need to be sent. This second message does not contain a â.â so its encoded form does not contain a â0â and it is ignored in the RedDrip teamâs implementation.</p>
          <div class="flex anchor relative">
            <h3 id="the-quirk-hostnames-are-split-across-multiple-queries">The quirk: hostnames are split across multiple queries</h3>
            <a href="#the-quirk-hostnames-are-split-across-multiple-queries" aria-hidden="true" class="relative sm:absolute sm:-left-5">
              <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
            </a>
          </div>
        <p>A list of observed queries performed by the malware was published publicly on <a href="https://github.com/bambenek/research/blob/main/sunburst/uniq-hostnames.txt">GitHub</a>. Applying the decoding script to this set of queries, we see some queries appear to be truncated, such as <code>grupobazar.loca</code>, but also some decoded hostnames are curiously short or incomplete, such as âcomâ, â.comâ, or a single letter, such as âmâ, or âlâ.</p><p>When the hostname does not fit into the available payload section of the encoded query, it is split up across multiple queries. Queries are matched up by matching the GUID section after applying a byte-by-byte exclusive-or (xor).</p>
          <div class="flex anchor relative">
            <h3 id="analysis-of-first-15-characters">Analysis of first 15 characters</h3>
            <a href="#analysis-of-first-15-characters" aria-hidden="true" class="relative sm:absolute sm:-left-5">
              <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
            </a>
          </div>
        <p>Noticing that long domains are split across multiple requests led us to believe that the first 16 characters encoded information to associate multipart messages. This would allow the receiver on the other end to correctly re-assemble the messages and get the entire domain. The RedDrip team identified the first 15 bytes as a GUID, we focused on those bytes and will refer to them subsequently as the header.</p><p>We found the following queries that we believed to be matches without knowing yet the correct pairings between message 1 and message 2 (payload has been altered):</p><p><b>Part 1 - Both decode to âwww2.example.câ</b><code>r1q6arhpujcf6jb6qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com</code><code>r8stkst71ebqgj66qqqb0trmuhd1r0ee.appsync-api.us-west-2.avsvmcloud.com</code></p><p><b>Part 2 - Both decode to âomâ</b><code>0oni12r13ficnkqb2h.appsync-api.us-west-2.avsvmcloud.com</code><code>ulfmcf44qd58t9e82h.appsync-api.us-west-2.avsvmcloud.com</code></p><p>This gives us a final combined payload of <b>www2.example.com</b></p><p>This example gave us two sets of messages where we were confident the second part was associated with the first part, and allowed us to find the following relationship where message1 is the header of the first message and message2 is the header of the second:</p><p><code>_Base32Decode(message1) XOR KEY = Base32Decode(message2)_</code></p><p>The KEY is a single character. That character is xorâd with each byte of the Base32Decoded first header to produce the Base32Decoded second header. We do not currently know how to infer what character is used as the key, but we can still match messages together without that information. Since A XOR B = C where we know A and C but not B, we can instead use A XOR C = B. This means that in order to pair messages together we simply need to look for messages where XORâing them together results in a repeating character (the key).</p><p><code><i>Base32Decode(message1) XOR Base32Decode(message2) = KEY</i></code></p><p>Looking at the examples above this becomes</p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-wa1i"></th>
    <th class="tg-wa1i">Message 1</th>
    <th class="tg-wa1i">Message 2</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0lax"><span style="font-style:normal;text-decoration:none">Header</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">r1q6arhpujcf6jb</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">0oni12r13ficnkq</span></td>
  </tr>
  <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">Base32Decode (binary)</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">101101000100110110111111011</span><br><span style="font-weight:400;font-style:normal;text-decoration:none">010010000000011001010111111</span><br><span style="font-weight:400;font-style:normal;text-decoration:none">01111000101001110100000101</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">110110010010000011010010000</span><br><span style="font-weight:400;font-style:normal;text-decoration:none">001000110110110100111100100</span><br><span style="font-weight:400;font-style:normal;text-decoration:none">00100011111111000000000100</span></td>
  </tr>
</tbody>
</table><!--kg-card-end: html--><p>Weâve truncated the results slightly, but below shows the two binary representations and the third line shows the result of the XOR.</p><p>101101000100110110111111011010010000000011001010111111011110001010011101110110010010000011010010000001000110110110100111100100001000111111110000011011010110110101101101011011010110110101101101011011010110110101101101</p><p>We can see the XOR result is the repeating sequence â01101101âmeaning the original key was 0x6D or âmâ.</p><p>We provide the following python code as an implementation for matching paired messages (Note: the decoding functions are those provided by the RedDrip team):</p>
            <pre class="language-bash"><code class="language-bash"># string1 is the first 15 characters of the first message
# string2 is the first 15 characters of the second message
def is_match(string1, string2):
    encoded1 = Base32Decode(string1)
    encoded2 = Base32Decode(string2)
    xor_result = [chr(ord(a) ^ ord(b)) for a,b in zip(encoded1, encoded2)]
    match_char = xor_result[0]
    for character in xor_result[0:9]:
        if character != match_char:
            return False, None
    return True, &quot;0x{:02X}&quot;.format(ord(match_char))</pre></code>
            <p>The following are additional headers which based on the payload content Cloudflare is confident are pairs (the payload has been redacted because it contains hostname information that is not yet publicly available):</p><p><b>Example 1:</b></p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:18px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">vrffaikp47gnsd4a</span></th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">aob0ceh5l8cr6mco</span></td>
  </tr>
</tbody>
</table><!--kg-card-end: html--><p>xorkey: 0x4E</p><p><b>Example 2:</b></p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0lax{font-size:20px;text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">vrffaikp47gnsd4a</span></th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">aob0ceh5l8cr6mco</span></td>
  </tr>
</tbody>
</table><!--kg-card-end: html--><p>xorkey: 0x54</p><p><b>Example 3:</b></p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-60hs{font-size:20px;text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-60hs"><span style="font-weight:400;font-style:normal;text-decoration:none">vvu7884g0o86pr4a</span></th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-60hs"><span style="font-weight:400;font-style:normal;text-decoration:none">6gpt7s654cfn4h6h</span></td>
  </tr>
</tbody>
</table><!--kg-card-end: html--><p>xorkey: 0x2B</p><p>We hypothesize that the xorkey can be derived from the header bytes and/or padding byte of the two messages, though we have not yet determined the relationship.</p><hr/>
          <div class="flex anchor relative">
            <h2 id="update-12-18-2020">Update (12/18/2020):</h2>
            <a href="#update-12-18-2020" aria-hidden="true" class="relative sm:absolute sm:-left-5">
              <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
            </a>
          </div>
          <p>Erik Hjelmvik posted a blog <a href="https://www.netresec.com/?page=Blog&month=2020-12&post=Reassembling-Victim-Domain-Fragments-from-SUNBURST-DNS">explaining where the xor key is located</a>. Based on his code, we provide a python implementation for converting the header (first 16 bytes) into the decoded GUID as a string. Messages can then be paired by matching GUIDâs to reconstruct the full hostname.</p>
            <pre class="language-bash"><code class="language-bash">def decrypt_secure_string(header):
    decoded = Base32Decode(header[0:16])
    xor_key = ord(decoded[0])
    decrypted = [&quot;{0:02x}&quot;.format(ord(b) ^ xor_key) for b in decoded]
    return &#039;&#039;.join(decrypted[1:9])</pre></code>
            <p>Updated example:</p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-wa1i"></th>
    <th class="tg-wa1i">Message 1</th>
    <th class="tg-wa1i">Message 2</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0lax"><span style="font-style:normal;text-decoration:none">Header</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">r1q6arhpujcf6jb</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">0oni12r13ficnkq</span></td>
  </tr>
  <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">Base32Decode Header (hex)</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">b44dbf6900cafde29d05</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">d920d2046da7908ff004</td>
  </tr>
    <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">Base32Decode first byte (xor key)</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">0xb4</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">0xd9</td>
  </tr>
    <tr>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">XOR result (hex)
</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">00f90bddb47e495629</span></td>
    <td class="tg-0lax"><span style="font-weight:400;font-style:normal;text-decoration:none">00f90bddb47e495629</td>
  </tr>
</tbody>
</table><!--kg-card-end: html--></div></section><section class="post-full-content flex flex-row flex-wrap mw7 center mb4"><div class="post-content lh-copy w-100 gray1 bt b--gray8 pt4">Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href="https://www.cloudflare.com/careers" rel='noreferrer'>our open positions</a>.</div></section><div class="pv2 ph0-l mw7 center" id="social-buttons"><div class="mt5-l mt2 mb4 f2 flex flex-row-ns flex-column flex-wrap"><a id="social-button-hn" title="Discuss on Hacker News" href="https://news.ycombinator.com/submitlink?u=https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm" target="_blank" rel="noreferrer" class="mr2-ns mb0-l white link b pv3 ph3 mb3 " style="background-color:#0055DC"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 512 512" class="mr2"><g><path d="M31,31v450h450V31H31z M270.1,287.6v94.9h-28.1v-94.9L165,143.5h31.9L256,254.3l59.1-110.8H347
C347,143.5,270.1,287.6,270.1,287.6z"></path></g></svg><span class="v-mid">Discuss on Hacker News</span></a></div></div><iframe sandbox="allow-scripts allow-popups" title="cloudflare-tv-live-link" id="cloudflare-tv-embed" src="https://cloudflare.tv/embed/live.html" loading="lazy"></iframe><a href="/tag/cloudflare-zero-trust/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Cloudflare Zero Trust</a><a href="/tag/gateway/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Cloudflare Gateway</a><a href="/tag/deep-dive/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Deep Dive</a><a href="/tag/threat-intelligence/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Threat Intelligence</a></article></main><div class="ph3 pv3"><div class=" flex flex-row flex-wrap mw7 center"><div class="w-100 bt b--gray8"><p class="black fw5 f4 mt4">Follow on X</p></div><div class="w-100 pb2"><span>Cloudflare</span><span class="ph2">|</span><a href="https://x.com/@cloudflare" class="no-underline">@cloudflare</a></div></div></div><div data-testid="related-posts-section" class="pv4 ph3 ph0-l flex flex-row flex-wrap mw7 center"><div class="w-100 bt b--gray8"><p class="orange fw5 f4 mt4 ttu">Related posts</p></div><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2024-10-25T14:00+01:00">October 25, 2024  1:00 PM</p><a data-testid="related-posts-article-title" href="/elephants-in-tunnels-how-hyperdrive-connects-to-databases-inside-your-vpc-networks/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Elephants in tunnels: how Hyperdrive connects to databases inside your VPC networks</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">Hyperdrive (Cloudflareâs globally distributed SQL connection pooler and cache) recently added support for directing database traffic from Workers across Cloudflare Tunnels. We dive deep on what it took to add this feature.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/andrew-repp/" class="fw5 f2 black no-underline">Andrew Repp</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/emilio-assuncao/" class="fw5 f2 black no-underline">Emilio AssunÃ§Ã£o</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/abhishek-chanda/" class="fw5 f2 black no-underline">Abhishek Chanda</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/developer-platform/" class="no-underline f1 fw2 blue3 underline-hover">Developer Platform<!-- -->,</a>Â </span><span><a href="/tag/deep-dive/" class="no-underline f1 fw2 blue3 underline-hover">Deep Dive<!-- -->,</a>Â </span><span><a href="/tag/workers/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Workers<!-- -->,</a>Â </span><span><a href="/tag/hyperdrive/" class="no-underline f1 fw2 blue3 underline-hover">Hyperdrive<!-- -->,</a>Â </span><span><a href="/tag/postgres/" class="no-underline f1 fw2 blue3 underline-hover">Postgres<!-- -->,</a>Â </span><span><a href="/tag/sql/" class="no-underline f1 fw2 blue3 underline-hover">SQL<!-- -->,</a>Â </span><span><a href="/tag/rust/" class="no-underline f1 fw2 blue3 underline-hover">Rust<!-- -->,</a>Â </span><span><a href="/tag/websockets/" class="no-underline f1 fw2 blue3 underline-hover">WebSockets</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2024-10-23T14:00+01:00">October 23, 2024  1:00 PM</p><a data-testid="related-posts-article-title" href="/intro-access-for-infrastructure-ssh/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Fearless SSH: short-lived certificates bring Zero Trust to infrastructure</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">Access for Infrastructure, BastionZeroâs integration into Cloudflare One, will enable organizations to apply Zero Trust controls to their servers, databases, Kubernetes clusters, and more. Today weâre announcing short-lived SSH access as the first available feature of this integration.
<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/goldbe/" class="fw5 f2 black no-underline">Sharon Goldberg</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/ann-ming-samborski/" class="fw5 f2 black no-underline">Ann Ming Samborski</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/sebby-lipman/" class="fw5 f2 black no-underline">Sebby Lipman</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/zero-trust/" class="no-underline f1 fw2 blue3 underline-hover">Zero Trust<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-zero-trust/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Zero Trust<!-- -->,</a>Â </span><span><a href="/tag/acquisitions/" class="no-underline f1 fw2 blue3 underline-hover">Acquisitions<!-- -->,</a>Â </span><span><a href="/tag/ssh/" class="no-underline f1 fw2 blue3 underline-hover">SSH<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-access/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Access<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-one/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare One<!-- -->,</a>Â </span><span><a href="/tag/compliance/" class="no-underline f1 fw2 blue3 underline-hover">Compliance</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2024-10-23T14:00+01:00">October 23, 2024  1:00 PM</p><a data-testid="related-posts-article-title" href="/training-a-million-models-per-day-to-save-customers-of-all-sizes-from-ddos/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Training a million models per day to save customers of all sizes from DDoS attacks</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">In this post we will describe how we use anomaly detection to watch for novel DDoS attacks. Weâll provide an overview of how we build models which flag unusual traffic and keep our customers safe.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/nick-wood/" class="fw5 f2 black no-underline">Nick Wood</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/manish/" class="fw5 f2 black no-underline">Manish Arora</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/ddos/" class="no-underline f1 fw2 blue3 underline-hover">DDoS<!-- -->,</a>Â </span><span><a href="/tag/deep-dive/" class="no-underline f1 fw2 blue3 underline-hover">Deep Dive<!-- -->,</a>Â </span><span><a href="/tag/machine-learning/" class="no-underline f1 fw2 blue3 underline-hover">Machine Learning</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2024-10-22T14:00+01:00">October 22, 2024  1:00 PM</p><a data-testid="related-posts-article-title" href="/building-vectorize-a-distributed-vector-database-on-cloudflare-developer-platform/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Building Vectorize, a distributed vector database, on Cloudflareâs Developer Platform</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">Vectorize was recently upgraded and made generally available, now supporting indexes of up to 5 million vectors, delivering faster responses, with lower pricing and a free tier. This post dives deep into how we built Vectorize to enable these improvements.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/jerome/" class="fw5 f2 black no-underline">JÃ©rÃ´me Schneider</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/alex-graham/" class="fw5 f2 black no-underline">Alex Graham</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/engineering/" class="no-underline f1 fw2 blue3 underline-hover">Engineering<!-- -->,</a>Â </span><span><a href="/tag/developer-platform/" class="no-underline f1 fw2 blue3 underline-hover">Developer Platform<!-- -->,</a>Â </span><span><a href="/tag/edge-database/" class="no-underline f1 fw2 blue3 underline-hover">Edge Database<!-- -->,</a>Â </span><span><a href="/tag/deep-dive/" class="no-underline f1 fw2 blue3 underline-hover">Deep Dive<!-- -->,</a>Â </span><span><a href="/tag/storage/" class="no-underline f1 fw2 blue3 underline-hover">Storage</a>Â </span></div></article></div><!--astro:end--></astro-island><footer class="pt4 pb4 pl1 pr1 main-footer"><div class="mw8 center dn db-l ph3"><div class="flex flex-row justify-between"><div class="main-footer__menu-group"><ul id="getting-started-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="getting-started-menu">Getting Started<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/free/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="free-plans" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Free plans</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/enterprise/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="enterprise" class="f1 blue3 no-underline underline-hover" rel="noreferrer">For enterprises</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="compare-plans" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Compare plans</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/about-your-website/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="get-a-recommendation" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Get a recommendation</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/enterprise/demo/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="request-a-demo" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Request a demo</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/enterprise/contact/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="contact-sales" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Contact Sales</a></li></ul></div><div class="main-footer__menu-group"><ul id="company-menu" class="list pl0"><li class="pt1 pb1 f1" data-submenu="company-menu">Resources<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/learning/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="learning-center" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Learning Center</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/analysts/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="analysts-report" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Analyst reports</a></li><li class="pt1 pb1"><a href="https://radar.cloudflare.com/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="overview" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare Radar</a></li><li class="pt1 pb1"><a href="https://cloudflare.tv/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="tv" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare TV</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/case-studies/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="case-studies" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Case Studies</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/resource-hub/?resourcetype=Webinar" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="webinars" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Webinars</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/resource-hub/?resourcetype=Whitepaper" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="white-papers" class="f1 blue3 no-underline underline-hover" rel="noreferrer">White Papers</a></li><li class="pt1 pb1"><a href="https://developers.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="developer-docs" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Developer docs</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/the-net/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="theNet" class="f1 blue3 no-underline underline-hover" rel="noreferrer">theNet</a></li></ul></div><div class="main-footer__menu-group"><ul id="sales-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="sales-menu">Solutions<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/connectivity-cloud/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="connectivity-cloud" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Connectivity cloud</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/zero-trust/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="zero-trust" class="f1 blue3 no-underline underline-hover" rel="noreferrer">SSE and SASE services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/application-services/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="application-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Application services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/network-services/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="network-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Network services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/developer-platform/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="developer-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Developer services</a></li></ul></div><div class="main-footer__menu-group"><ul id="community-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="community-menu">Community<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://community.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="community_hub" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Community Hub</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/galileo/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="galileo" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Project Galileo</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/athenian/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="athenian" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Athenian Project</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/campaigns/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="cloudflare-for-campaigns" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare for Campaigns</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/partners/technology-partners/cidp/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="critical-infrastructure-defense-project" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Critical Infrastructure Defense Project</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/connect2024/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="connect-2024" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Connect 2024</a></li></ul></div><div class="main-footer__menu-group"><ul id="support-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="support-menu">Support<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://support.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="help-center" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Help center</a></li><li class="pt1 pb1"><a href="https://www.cloudflarestatus.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="status" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare Status</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/compliance/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="compliance" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Compliance</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/gdpr/introduction/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="gdpr" class="f1 blue3 no-underline underline-hover" rel="noreferrer">GDPR</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/trust-hub/abuse-approach/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="trust-and-safety" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Trust &amp; Safety</a></li></ul></div><div class="main-footer__menu-group"><ul id="company-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="company-menu">Company<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/about-overview/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="overview" class="f1 blue3 no-underline underline-hover" rel="noreferrer">About Cloudflare</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/people/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="our_team" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Our team</a></li><li class="pt1 pb1"><a href="https://cloudflare.net/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="investor-relations" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Investor relations</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/press/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="press" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Press</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/careers/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="careers" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Careers</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/diversity-equity-and-inclusion/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="diversity-equity-inclusion" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Diversity, equity &amp; inclusion</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/impact/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="impact-ESG" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Impact/ESG</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/network/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="network_map" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Network Map</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/press-kit/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="press-kit" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Logos &amp; press kit</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/partners/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="partners" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Become a partner</a></li></ul></div></div></div><div class="mw8 center ph3"><div class="flex flex-row flex-wrap justify-center md:justify-between items-center pt4"><div class="flex flex-row space-x-4 items-start w-25-l pb4 pb0-l"><a target="_blank" rel="noreferrer" href="https://www.facebook.com/Cloudflare/" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/facebook.svg" alt="facebook"/></a><a target=" _blank" rel="noreferrer" href="https://x.com/Cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/twitter.svg" alt="X"/></a><a target="_blank" rel="noreferrer" href="https://www.linkedin.com/company/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/linkedin.svg" alt="linkedin"/></a><a target="_blank" rel="noreferrer" href="https://www.youtube.com/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/youtube.svg" alt="youtube"/></a><a target="_blank" rel="noreferrer" href="https://www.instagram.com/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/instagram.svg" alt="instagram"/></a></div><div class="w-70-l tr-l tl-ns"><div><span class="main-footer__copyright f1">Â© <!-- -->2024<!-- --> Cloudflare, Inc.<!-- --> </span><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/privacypolicy/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Privacy Policy<!-- --> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/website-terms/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Terms of Use<!-- --> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/disclosure/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Report Security Issues<!-- --> </a><span class="main-footer__copyright f1">|</span><img class="mw2 ph1" src="/images/privacy-options.svg" alt="Privacy Options"/><a href="#cookie-settings" id="ot-sdk-btn" class="ot-sdk-show-settings main-footer__copyright f1 no-underline underline-hover"><span class="brandGray5">Cookie Preferences</span> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/trademark/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Trademark<!-- --> </a></div></div></div></div></footer></html><script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"8f3e30074cb6e2b2","version":"2024.10.5","serverTiming":{"name":{"cfExtPri":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"2bc156e5f250476cb274d269511ffb57","b":1}' crossorigin="anonymous"></script>
