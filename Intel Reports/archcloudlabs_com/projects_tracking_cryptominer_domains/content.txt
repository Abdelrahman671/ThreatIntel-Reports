<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    
    <meta name="description" content="Making things &amp; breaking things.">
    <meta name="keywords" content="blog,developer,personal">

    
  <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="Tracking Cryptocurrency Malware in The Homelab">
  <meta name="twitter:description" content="About the Project Since July of 2020, I have been running a “honeypot” of sorts made by anthok to capture all requests coming in on specific ports. By listening on ports commonly used by databases such as Elasticsearch or Redis, we’ve been able to observe a lot of bot behavior. Most of the requests resulted in trying to gain an initial foothold onto the environment to run a bash script to bring down their stage-1 malware.">

    <meta property="og:url" content="/projects/tracking_cryptominer_domains/">
  <meta property="og:site_name" content="Arch Cloud Labs">
  <meta property="og:title" content="Tracking Cryptocurrency Malware in The Homelab">
  <meta property="og:description" content="About the Project Since July of 2020, I have been running a “honeypot” of sorts made by anthok to capture all requests coming in on specific ports. By listening on ports commonly used by databases such as Elasticsearch or Redis, we’ve been able to observe a lot of bot behavior. Most of the requests resulted in trying to gain an initial foothold onto the environment to run a bash script to bring down their stage-1 malware.">
  <meta property="og:locale" content="en">
  <meta property="og:type" content="article">
    <meta property="article:section" content="projects">
    <meta property="article:published_time" content="2020-11-26T00:00:00+00:00">
    <meta property="article:modified_time" content="2020-11-26T00:00:00+00:00">


    
      <base href="/projects/tracking_cryptominer_domains/">
    
    <title>
  Tracking Cryptocurrency Malware in The Homelab · Arch Cloud Labs
</title>

    
      <link rel="canonical" href="/projects/tracking_cryptominer_domains/">
    

    <link href="https://fonts.googleapis.com/css?family=Lato:400,700%7CMerriweather:300,700%7CSource+Code+Pro:400,700" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css" integrity="sha256-l85OmPOjvil/SOvVt3HnSSjzF1TUMyT9eV0c2BzEGzU=" crossorigin="anonymous" />

    
      
      
      <link rel="stylesheet" href="/css/coder.min.56b6ad8152846f778c9b51d2963158eeee2e0c82b73677b0c065978c289f213b.css" integrity="sha256-VratgVKEb3eMm1HSljFY7u4uDIK3NnewwGWXjCifITs=" crossorigin="anonymous" media="screen" />
    

    

    

    

    
    
    <link rel="icon" type="image/png" href="/images/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/images/favicon-16x16.png" sizes="16x16">

    <meta name="generator" content="Hugo 0.128.2">
  </head>

  <body class=" ">
    <main class="wrapper">
      <nav class="navigation">
  <section class="container">
    <a class="navigation-title" href="/">
      Arch Cloud Labs
    </a>
    <input type="checkbox" id="menu-toggle" />
    <label class="menu-button float-right" for="menu-toggle"><i class="fas fa-bars"></i></label>
    <ul class="navigation-list">
      
        
          <li class="navigation-item">
            <a class="navigation-link" href="/about/welcome/">About</a>
          </li>
        
          <li class="navigation-item">
            <a class="navigation-link" href="/projects/">Projects</a>
          </li>
        
          <li class="navigation-item">
            <a class="navigation-link" href="/workshops/workshops/">Workshops</a>
          </li>
        
      
      
    </ul>
  </section>
</nav>


      <div class="content">
        
  <section class="container page">


<script async src="https://www.googletagmanager.com/gtag/js?id=G-XLGTZVHKJR"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XLGTZVHKJR');
</script>

  <article>
    <header>
      <h1>Tracking Cryptocurrency Malware in The Homelab</h1>
    </header>

    <h2 id="about-the-project">About the Project</h2>
<p>Since July of 2020, I have been running a &ldquo;honeypot&rdquo; of sorts made by <a href="https://twitter.com/the_anthok">anthok</a> to capture all requests coming in on specific ports. By listening on ports commonly used by databases such as Elasticsearch or Redis, we&rsquo;ve been able to observe a lot of bot behavior.
Most of the requests resulted in trying to gain an initial foothold onto the environment to run a bash script to bring down their stage-1 malware.
Additional domains were identified by searching for the same curl one-liner within my dataset.
Through this methodology I was able to identify additional IPs over time, that either were compromised by a particular bot or is additional infrastructure used by the malicious actors.</p>
<h2 id="logging-infrastructure">Logging Infrastructure</h2>
<p><a href="https://twitter.com/the_anthok">anthok&rsquo;s</a> <a href="https://www.anthok.com/posts/threat-intel-budget/">listening server</a> logs data in CSV format to a single directory where filebeat is leveraged to forward data to Arch Cloud Labs (ACL) Logstash. The CSV data contains a timestamp, source IP, and the raw bytes of the data observed on the wire.
This data is then shipped back to ACL&rsquo;s core Elasticsearch server and visualized. By tracking data over time we have identified multiple Cryptocurrency miners and other various malicious bots.</p>
<p>While not particularly sophisticated, it has been successful in capturing data that has lent itself to some interesting research.
The image below depicts how Arch Cloud Labs data feeds enable side-project research.
The CSV data format is defined with a Logstash filter to provide an easy to search Elastic mapping.</p>
<p><img alt="logging_infra" src="/projects/tracking_cryptominer_domains/logging_infra.png"></p>
<p>As data comes in it&rsquo;s possible to query on specific attributes such as source IP, message, or anything that contains the word &ldquo;wget&rdquo;.
Most requests captured are trying to take advantage of a known vulnerability or exposed service.
Often captured is what would appear to be a very specific request against a specific service targeting a documented CVE followed by a wget, netcat, or curl command within the body of an HTTP request.
For example, a POST request against an Elasticsearch server trying to take advantage of an old RCE vulnerability followed by a curl command that pipes the output to /bin/bash.
This example was observed and documented in a <a href="https://www.archcloudlabs.com/projects/analysis_of_a_cryptocurrency_miner/">previous blog post</a>.</p>
<p>By filtering on these command-line utilities, further investigation of potential malicious domains is made trivial.
At this point, probable malware-hosting domains can be identified allowing for remote resources to be downloaded and analyzed.
By looking at trends over time, it&rsquo;s easy to see the same one-liners from the same C2 domains.
Then by looking at what source IP address the requests are coming from it&rsquo;s possible to start
seeing either infected hosts trying to further propagate or new infrastructure being stood up by malicious actors.</p>
<p>By filtering on these command-line utilities, further investigation of potential
malicious domains is made trivial. At this point, probable malware-hosting domains
can be identified allowing for remote resources to be downloaded and analyzed.
By looking at trends over time, it&rsquo;s easy to see the same one-liners from the same C2 domains.
Then by looking at what source IP address the requests are coming from it&rsquo;s
possible to start seeing either infected hosts trying to further propagate or
new infrastructure being stood up by malicious actors.</p>
<p><img alt="logging_kibana" src="/projects/tracking_cryptominer_domains/logging_kibana.png"></p>
<p>At the start of this project, a domain called &ldquo;powerofwish&rdquo; stood out as it was connecting on the default port Redis runs on.
Most other connections at this time were either RDP brute force or Elasticsearch requests.
Analyzing the &ldquo;powerofwish&rdquo; domain over time resulted in identifying a new domain &ldquo;hearme[.]xyz&rdquo; and spurred my interest in digging into domain related data.
The image below shows IPs associated with these domains since July of 2020.
The image below shows IP addresses associated with a specific subset of domains that are hosting cryptocurrency mining malware.
Over the course of four months, I have identified ten various IPs correlated to one known malicious domain hosting cryptocurrency mining malware.</p>
<p><img alt="c2_domains_over_time.png" src="/projects/tracking_cryptominer_domains/c2_domains_over_time.png"></p>
<p>Over time it is possible to see new hosts being associated with these particular domains and other hosts falling off.
Two noticeable gaps exist in late September and mid-October of this year.
I am unable to pinpoint exactly why this may be.
Shodan searches identified most of these IP addresses exposing various databases or FTP servers.
While not proven, it is likely that some of these domains were victims of the original dropper samples and not themselves maliciously spreading the cryptocurrency miner.</p>
<h1 id="cryptocurrency-miners---skidmap">Cryptocurrency Miners - Skidmap</h1>
<p>The vast majority of malicious samples identified from the data collection approach described above happens to be cryptocurrency miners.<br>
Adversaries can quickly wrap a PoC of a CVE with an open-source cryptocurrency miner and be on their way to illicit operations.
The particularly interesting piece (to me anyway) comes in the form of <em>how</em> the end-point malware is delivered, engineered, and maintained.
The particular samples that will be discussed going forward are publicly documented by <a href="https://www.trendmicro.com/en_us/research/19/i/skidmap-linux-malware-uses-rootkit-capabilities-to-hide-cryptocurrency-mining-payload.html">Trend Micro</a> as Skidmap.
<a href="https://www.trendmicro.com/en_us/research/19/i/skidmap-linux-malware-uses-rootkit-capabilities-to-hide-cryptocurrency-mining-payload.html">This</a> Trend Micro blog goes in-depth of how some of the components work, however other components are not discussed as in-depth or have been introduced since the original blog post.
Throughout the analysis of the various Skidmap samples, I referred to the Trend Micro blog post to see what, if anything had changed.</p>
<h1 id="looking-into-initial-malware-hosting-domains">Looking into Initial Malware Hosting Domains</h1>
<p><a href="https://securitytrails.com/dns-trails">SecurityTrails&rsquo;</a> historical DNS data provided insight into the initial bash one-liner seen in our &ldquo;sensor&rdquo; infrastructure. Shared infrastructure was identified of other domains that were also used to host not only the bash dropper script but a variant of the stage-1 malware as well.</p>
<p><img alt="dnstrails_pow_subdomains" src="/projects/tracking_cryptominer_domains/dnstrails_pow_subdomains.png"></p>
<p>The subdomain of &ldquo;a&rdquo; was being used to serve the stage-1 dropper, whereas all stage-2 content came from subdomain &ldquo;d&rdquo;.
You&rsquo;ll notice that Cloudflare is being leveraged for their CDN abilities to host the initial bash script. Pivoting on the subdomain of &ldquo;d&rdquo;, I was able to further identify another domain shared with this IP, &ldquo;cpuminerpool[]com&rdquo;.</p>
<!-- raw HTML omitted -->
<p>An interesting artifact of the &ldquo;pm&rdquo; subdomain, is that the stage-1 dropper observed initially within Kibana was a pm[].sh script.
By requesting the dropper script directly from both powerofwish and cpuminerpool domains, two variants were successfully downloaded.
This leads me to believe some type of vhosting is in place.
Something else I found interesting, was that the cpuminerpool domain has recently been transitioned to multiple hosting providers as well as IP addresses within the past year.
Often not staying at a particular hosting providing for a short period.</p>
<p><img alt="pm_cpuminerpool" src="/projects/tracking_cryptominer_domains/pm_cpuminerpool.png"></p>
<p>I thought it might have been getting reported for abuse.
However, taking a gander at Virus Total for all three domains showed very low scores across the board.</p>
<p><img alt="vt_cpuminerpool" src="/projects/tracking_cryptominer_domains/vt_cpuminerpool.png"></p>
<p><img alt="vt_cpuminerpool" src="/projects/tracking_cryptominer_domains/vt_hearmexyz.png"></p>
<p><img alt="vt_cpuminerpool" src="/projects/tracking_cryptominer_domains/vt_powerofwish.png"></p>
<p>Looking into hosting providers resulted in a very cheap VPS provider with a data center out in Las Vegas as well as a Russian owned provider operating out of Moscow.
Perhaps all the moving of domains is to keep costs low or just to consistently keep changing their footprint.
Cloudflare is being used for not only its uptime but also the low likelihood (if any at all) of a CDN being outright blocked.
This way, the actors could go back and modify or update the stage-0 dropper to accommodate for infrastructure change.</p>
<p><img alt="whois_justhost" src="/projects/tracking_cryptominer_domains/whois_justhost.png">
<img alt="whois_hearmexyz" src="/projects/tracking_cryptominer_domains/whois_hearmexyz.png"></p>
<h1 id="anatomy-of-the-crypto-currency-miner">Anatomy of the Crypto Currency Miner</h1>
<h3 id="the-flow-of-execution">The Flow of Execution</h3>
<p>The flow of execution shown below shows what I observed in my analysis.
The Trend Micro analysis states that a cronjob was added to consistently execute the sample every minute.
The samples I obtained were set to execute every twenty minutes.
Additionally, the file being downloaded from the initial dropper (pm. sh) was an ELF file called &ldquo;pc&rdquo;.
Within my dataset, it was &ldquo;CC&rdquo; being downloaded. However, also observed was the hosting of &ldquo;png&rdquo;, &ldquo;px&rdquo; and &ldquo;PC&rdquo;.
Each of these files during my analysis returned the same MD5 hash.</p>
<p><img alt="flow_of_execution" src="/projects/tracking_cryptominer_domains/cc-malware-execution.png"></p>
<h3 id="stage-0---gaining-access">Stage-0 - Gaining Access</h3>
<p>Upon initial investigation, the domain &ldquo;powerofwish&rdquo;, was attempting to connect to exposed Redis instances and run commands to gain shell access.
The exact command observed can be seen below.</p>
<p><img alt="initial_access.png" src="/projects/tracking_cryptominer_domains/initial_access.png"></p>
<h3 id="stage-1-dropper">Stage-1 Dropper</h3>
<p>The bash dropper and its variants are fairly straight forward. The flow of execution breaks down as follows:</p>
<ol>
<li>Verify the hash of stage-2 executable if it exists, if not download the ELF executable.</li>
<li>Download and install <code>unhide</code> if not installed.
<ul>
<li><code>unhide</code>: a forensic tool to list TCP/UDP ports outside of netstat/ss</li>
</ul>
</li>
<li>Use unhide to list processes (hearme, cc, pc, xr) and kill them</li>
<li>perform cleanup commands</li>
<li>Download stage-2 via curl or wget if available.</li>
<li>Launch downloaded</li>
</ol>
<p>An interesting piece to note here, it appears the <a href="https://www.cyberciti.biz/tips/linux-unix-windows-find-hidden-processes-tcp-udp-ports.html">unhide</a> package is being leveraged due to modified versions of ss, netstat, and even LKMs being deployed to hide connections.
Out of the three variations of the dropper identified (across three different domains), not all had this <code>unhide</code> component.</p>
<p>The stage-2 samples across all domains were UPX packed and stripped.
However, unpacking them resulted in the original binary being full of symbols making it significantly easier for analysis.
Unless otherwise stated, assume all symbols were named by the developer and not I.</p>
<h3 id="stage-2-persistence">Stage-2 Persistence</h3>
<p>At this point a binary titled &ldquo;cc&rdquo;, &ldquo;px&rdquo;, &ldquo;pc&rdquo;, or &ldquo;png&rdquo; has been downloaded and executed.
I have broken up key functionality into separate sections, but please keep in mind <strong>this is NOT a complete analysis</strong>.</p>
<h4 id="dropping-ssh-keys">Dropping SSH Keys</h4>
<p>Each variant I analyzed of Skidmap dropped a public key to <code>/root/.ssh/authorized_keys</code>. Each sample analyzed had a different public key. After dropping the public key, the <code>chattr</code> binary is moved to <code>/usr/bin/t</code> and then the root user&rsquo;s authorized key file is given the immutable bit to prevent modifications. I also did not observe any sample checking that root login via ssh was enabled. This is why I believe they also drop a backdoored version of PAM.</p>
<p><img alt="hearme_vs_powerof_wish_ssh_keys" src="/projects/tracking_cryptominer_domains/hearme_vs_powerof_wish_ssh_keys.png"></p>
<h4 id="overwriting-pam">Overwriting PAM</h4>
<p>After SELinux is disabled on the host, an embedded SO variant of PAM is written to enable the adversary to login with a hardcoded password.</p>
<p><img alt="cc_writing_pam.png" src="/projects/tracking_cryptominer_domains/cc_writing_pam.png"></p>
<p>By referencing that <code>binarypam8</code> offset, we see the good ol&rsquo; ELF header awaiting us in the DATA section with a cross reference to the intuitively named &ldquo;<code>writepam</code>&rdquo; function.</p>
<p><img alt="binarypam8" src="/projects/tracking_cryptominer_domains/embedded_pam_so.png"></p>
<p>After writing the new PAM shared object, SELinux is re-enabled (cropped from the image below).
Extracting the embedded SO and throwing it in IDA, the hardcoded password is identified.
This is the same hardcoded password as identified in the Trend Micro blog post and it stayed the same across multiple variants downloaded from different hosting providers.</p>
<p><img alt="pam_hardcoded_password.png" src="/projects/tracking_cryptominer_domains/pam_hardcoded_password.png"></p>
<h4 id="downloading--installing-further-components">Downloading &amp; Installing Further Components</h4>
<p>If the underlying host is CentOS a special function is called which downloads a password-protected tarball entitled &ldquo;cos7.tar.gz&rdquo;.
The hardcoded command shown in IDA below decrypts the tarball and reveals a directory of init service scripts and modified binaries.</p>
<p>An interesting component here was the hardcoded decrypt command.
I could not replicate this successfully unless I was on a CentOS 6 machine.
I am assuming there is a bug with this command and newer versions of tar on CentOS7 and greater.</p>
<p><img alt="cent7_decrypt" src="/projects/tracking_cryptominer_domains/centos7_decrypt_tar_ball.png"></p>
<p>The modified versions of common Linux utilities include <code>ss</code>, <code>rm</code>, <code>wtmp</code>, <code>scp</code>, <code>ssh</code>, <code>ip6network</code>, and <code>kaudited</code>.
During my analysis, I could not find any other case where this file was downloaded unless the host was CentOS.
The tar file&rsquo;s kaudited binary contains several embedded files that end up being kernel modules.
kaudited was then executed if an MD5 matched within the CC binary, otherwise no kernel modules were installed from my observations.</p>
<p>The largest portion kaudited is responsible for besides kernel module installation was the installation and planting of other various files.
This was achieved via the bash script listed below. Note that yet again, pam is being modified.
This was a common observation throughout the analysis. When in doubt, re-backdoor pam!</p>
<p><img alt="cos7_install.png" src="/projects/tracking_cryptominer_domains/cos7_install.png"></p>
<h4 id="kernel-modules">Kernel Modules</h4>
<p>A check is made by the <code>kaudited</code> utility to verify what kernel version the host has.
After that, the appropriate embedded kernel module is written to disk, and installed via a C <code>system</code> function call to <code>insmod</code>.
The image below shows the branching statement identifying that 9 different LKMs are embedded within this particular sample.
However, when extracting binaries more were identified but not analyzed further.
It&rsquo;s possible during extraction a mistake occurred or just like for LKM installation, there are several variations for other utilities.</p>
<p><img alt="kaudit_kernel_check_pre_ko_writes.png" src="/projects/tracking_cryptominer_domains/kaudit_kernel_check_pre_ko_writes.png"></p>
<p>A quick look at the symbols within the kernel modules reveal functionality to hide outbound connections to specific destination ports as well as the hiding of files.</p>
<p><img alt="embeded_functions_of_a_ko" src="/projects/tracking_cryptominer_domains/embeded_functions_of_a_ko.png">
<img alt="embeded_tcp_or_udp_port_hiding" src="/projects/tracking_cryptominer_domains/embeded_tcp_or_udp_port_hiding.png"></p>
<h4 id="differences-between-samples">Differences Between Samples</h4>
<p>The core functionality is largely the same between all of these variations of Skidmap.
The only differences I could identify were in the cryptocurrency mining pools and public ssh
keys being dropped.</p>
<h3 id="stage-3-miner">Stage-3 Miner</h3>
<p>Hardcoded strings within the binary revealed that <a href="https://github.com/JayDDee/cpuminer-opt">cpuminer-opt</a> is the mining software being leveraged across each variant I found. Hardcoded command line arguments revealed the username name&rsquo;s sugar1qddpk0wgqtgufenz6z9zh4cjgrehk8ezu and sugar1q523af4pce0r4cfrq08eyjpjjesw943s8 being used across eight seaparate mining pools. These mining pool URLs include sugar[.]ss[.]dxpool[.]com, stratum-eu[.]rplant[.]xyz, and stratum-asia[.]rplant[.]xyz. Both variants are setup to mine on <a href="https://sugarchain.org">sugarchain</a>. However, at the time of this writing when leveraging sugarchain&rsquo;s blockchain explorer I was unable to find any transactions sucessfully completed by either username.</p>
<p>cpuminer-opt is wrapped within a binary that contains similar functionality that the stage-1 sample did.
It also contains the ability to overwrite PAM and drops an ssh public key to enable access.
In both instances, a public key was dropped into the root user&rsquo;s authorized keys file.</p>
<p>Normally, one would be concerned with cryptocurrency miners spiking CPU usage bringing unwanted attention.
I have observed other examples using the <code>renice</code> utility to lower the amount of time a process would request on CPU.
However, the developers of these particular samples have taken care of that by introducing functionality into kernel modules to hide real CPU usage.</p>
<h3 id="iocs">IoCs</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>// stage-1 droppers
</span></span><span style="display:flex;"><span>706a98254456810d3e849c3957af9d01  a-powerofwish-com-init
</span></span><span style="display:flex;"><span>706a98254456810d3e849c3957af9d01  a-powerofwish-com-pm
</span></span><span style="display:flex;"><span>1bd78e75628e240bca853ff7d03deb74  pm-cpuminterpool-pm
</span></span><span style="display:flex;"><span>2c158a431794607be9b63bccc8df22ea  d-powerofwish-com-init
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// upx samples
</span></span><span style="display:flex;"><span>8f6e5795ab79d72b2a12f3069001eb60  a-powerofwish-com-pc-upx
</span></span><span style="display:flex;"><span>8f6e5795ab79d72b2a12f3069001eb60  a-powerofwish-com-png-upx
</span></span><span style="display:flex;"><span>2c158a431794607be9b63bccc8df22ea  pm-cpuminerpool-cc-upx
</span></span><span style="display:flex;"><span>2c158a431794607be9b63bccc8df22ea  pm-cpuminerpool-com-png-upx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// un-upx samples
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  a-powerofwish-com-png
</span></span><span style="display:flex;"><span>0e7d7ac72e5dfee64d74b70a4e031183  a-powerofwish-miner2
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  cpuminerpool-cc
</span></span><span style="display:flex;"><span>1bd78e75628e240bca853ff7d03deb74  cpuminterpool-pm
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  d-powerofwish-com-png
</span></span><span style="display:flex;"><span>c5147da98446cae3648fcce55b4d26b7  hearme-xyz--miner2
</span></span><span style="display:flex;"><span>6f1496cf82f80259c68f58b06df6e22f  hearme-xyz-cc
</span></span><span style="display:flex;"><span>36d70ab88e18ea4af9a0d5db46ae3e9e  pm-hearme-xyz
</span></span><span style="display:flex;"><span>e7e2bf2df6a33e6617870e8dd78abd10  pm-power-of-wish
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  powerofwish-cc
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  powerofwish-com-pc
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  powerofwish-com-px
</span></span><span style="display:flex;"><span>9e6f454fd1ead5c0abcd4eec173d571e  powerofwish-png
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// files below are from the cos7.tar.gz
</span></span><span style="display:flex;"><span>5840dc51673196c93352b61d502cb779  ip6network
</span></span><span style="display:flex;"><span>a36f1439f54dfe41f199ce146cc46d52  kaudited
</span></span><span style="display:flex;"><span>e96d1a8be74bf00011f630444edd3574  network-7.0
</span></span><span style="display:flex;"><span>e5d05f3767a650ad5d534bdfd8ce2ffb  network-7.1
</span></span><span style="display:flex;"><span>376016032e9b50120cc60c1651b1f242  network-7.2
</span></span><span style="display:flex;"><span>376016032e9b50120cc60c1651b1f242  network-7.3
</span></span><span style="display:flex;"><span>45cde38fe5f84078712f899603c1dcba  network-7.4
</span></span><span style="display:flex;"><span>45cde38fe5f84078712f899603c1dcba  network-7.5
</span></span><span style="display:flex;"><span>d44908e9849b1841272618bd51a40182  network-7.6
</span></span><span style="display:flex;"><span>d44908e9849b1841272618bd51a40182  network-7.7
</span></span><span style="display:flex;"><span>d44908e9849b1841272618bd51a40182  network-7.8
</span></span><span style="display:flex;"><span>b5a9c7bd8fdb2b6e5c4431a90b83010f  pamdicks.org
</span></span><span style="display:flex;"><span>f3b14bcb2037a7a1baf44782f1f1811b  pam_unix.so
</span></span><span style="display:flex;"><span>e0ddd18f9d61be95955e2723c72b913d  rm
</span></span><span style="display:flex;"><span>ad29ac2ab08d9087f3b5654187b0602d  scp
</span></span><span style="display:flex;"><span>586e14bdeaa163831f24c60c970b595b  ss
</span></span><span style="display:flex;"><span>4183a06943cf29c89b46e724af5fb101  ssh
</span></span><span style="display:flex;"><span>a40ca6f5fe465d766f90c558e277aa42  wtmp
</span></span><span style="display:flex;"><span>cb1db36f2aca451200533d87007c6943  clear.sh
</span></span><span style="display:flex;"><span>8ddf91f48da357632920f51a6cecd878  install-net.sh
</span></span><span style="display:flex;"><span>9a8797fb49aa1765c4a2049980fb42bf  install.sh
</span></span><span style="display:flex;"><span>bb9d49ade493c7c0538afdb25e0a61da  install-ssh.sh
</span></span><span style="display:flex;"><span>d94c0adf178a0c540b287d2b7aad1787  last.sh
</span></span><span style="display:flex;"><span>08b38e9f77255bb2d4d5f6c21c580372  rctl.sh
</span></span><span style="display:flex;"><span>9d92a79392e2aa20d85fe53cb9b16da7  readme.txt
</span></span></code></pre></div><h2 id="beyond-the-blog">Beyond The Blog</h2>
<p>As previously said, this is not a complete analysis.
I&rsquo;ve listed the hashes of these samples in the event anyone wants to take a deeper look.</p>
<p>I really enjoy the threat intel &amp; malware analysis piece of the InfoSec industry.
If you have an open position that you&rsquo;re looking to fill - my DMs are open!
While this particular data collection approach is a bit rudimentary, I&rsquo;m  hoping this shows other home labbers how little you do need to get started and on your way to uncovering some interesting things on the internet.  Thank you all for reading!</p>
<p>Special thanks to <a href="https://twitter.com/the_anthok">the_anthok</a> and <a href="https://twitter.com/0x80O0oOverfl0w">0x80O0oOverfl0w</a> for helping along the way!</p>

  </article>
</section>


      </div>

      <footer class="footer">
  <section class="container">
    
     © 2024
    
       · 
      Powered by <a href="https://gohugo.io/">Hugo</a> & <a href="https://github.com/luizdepra/hugo-coder/">Coder</a>.
    
    
  </section>
</footer>

    </main>

    
  
    
      <script async src="https://www.googletagmanager.com/gtag/js?id=G-XLGTZVHKJR"></script>
      <script>
        var doNotTrack = false;
        if ( false ) {
          var dnt = (navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack);
          var doNotTrack = (dnt == "1" || dnt == "yes");
        }
        if (!doNotTrack) {
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'G-XLGTZVHKJR');
        }
      </script>
    
  



  </body>

</html>
