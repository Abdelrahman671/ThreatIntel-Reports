<!DOCTYPE html><html lang="en"><head><link href="/theme/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/font-awesome.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/fonts.css" rel="stylesheet" type="text/css"/><link href="/theme/css/pygment.css" rel="stylesheet" type="text/css"/><link href="/theme/css/blog.css" rel="stylesheet" type="text/css"/><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1.0" name="viewport"/><link href="/theme/images/favicon.ico" rel="icon" type="image/x-icon"/><title>Lexfo's security blog - AvosLocker Ransomware Linux Version Analysis</title></head><body><a class="float" id="float" onclick="window.scrollTo({top: 0, behavior: 'smooth'});" style="opacity: 0 !important"><i class="fas fa-arrow-up"></i></a><script>
			document.addEventListener("scroll", (event) => {
				float = document.getElementById("float")
				if (document.documentElement.scrollTop == 0) {
					float.style.opacity = 0;
				} else {
					float.style.opacity = 1;
				}
			});
		</script><nav class="navbar"><a href="https://lexfo.fr"><embed class="logo" src="/theme/images/lexfo-logo.svg"/></a><div class="nav-links"><a class="nav-link" href="/index.html">BLOG POSTS</a> <a class="nav-link" href="/categories.html">CATEGORIES</a> <a class="nav-link" href="/tags.html">TAGS</a> <a class="nav-link" href="/archives.html">ARCHIVES</a></div><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></nav><header><h1><span class="gradient">AvosLocker Ransomware Linux Version Analysis</span></h1><div class="blog-post-meta"><p><span class="mr-3">Wed 02 March 2022 by <strong>Lexfo</strong> in <a href="category/malware.html">Malware</a>.</span></p></div><div class="col-md-12 row mb-3" hidden=""><a class="tag" href="tag/avoslocker.html"><span class="fas fa-tag"></span> Avoslocker</a> <a class="tag" href="tag/avos2.html"><span class="fas fa-tag"></span> Avos2</a> <a class="tag" href="tag/avoslinux.html"><span class="fas fa-tag"></span> Avoslinux</a> <a class="tag" href="tag/ransomware.html"><span class="fas fa-tag"></span> Ransomware</a> <a class="tag" href="tag/esxi.html"><span class="fas fa-tag"></span> Esxi</a> <a class="tag" href="tag/malware.html"><span class="fas fa-tag"></span> Malware</a></div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;url=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/Avoslocker.html&amp;title=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;summary=Avoslocker%20analysis&amp;source=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;body=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></header><main class="blog-post"><div class="blog-post-content"><h1 id="introduction">Introduction</h1><p>Over the last few months, several cyber gangs (BlackCat, Hive, Revil, etc.) have built Linux versions of their ransomware, specifically targeting the VMware ESXi. The reason is that a single command could encrypt all the data contained on the virtual machines. In autumn 2021, the Avoslocker operators announced their new Linux variant of AvosLocker. The sample has been publicly available since January 2022.</p><p>This article is a detailed analysis of the Avoslinux piece of ransomware. The main objectives were to show the differences with the Windows variant, to understand the encryption mechanisms and to see if any anti-reverse engineering techniques were used.</p><h1 id="elf-analysis">ELF Analysis</h1><p>The analyzed sample was found on the public platform <a href="https://bazaar.abuse.ch/">MalwareBazaar</a> and its sha256sum is <code>10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4</code>. Based on the ELF header, it was compiled with GCC 4.4.7.</p><div class="highlight"><pre><span></span><code>$ readelf -p .comment 10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4.elf
String dump of section '.comment':
  [     0]  GCC: (GNU) 4.4.7 20120313 (Red Hat 4.4.7-23)
</code></pre></div><p>Obviously, the binary is stripped and does not contain any symbols:</p><div class="highlight"><pre><span></span><code>$ nm 10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4.elf
nm: 10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4.elf: no symbols
</code></pre></div><p>The ELF header also contains the sections <code>.ctors</code> and <code>.dtors</code>. The <code>.ctors</code> section contains a list of functions ran before the main function to initialize dynamic non-local variables.</p><div class="highlight"><pre><span></span><code>$ readelf -S ./10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4.elf
Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400200  00000200
       000000000000001c  0000000000000000   A       0     0     1
....
snip
....
  [19] .ctors            PROGBITS         0000000000757000  00157000
       00000000000000a0  0000000000000000  WA       0     0     8
  [20] .dtors            PROGBITS         00000000007570a0  001570a0
       0000000000000010  0000000000000000  WA       0     0     8
</code></pre></div><p>The last constructor function called initializes three strings, the ransom notes, the sample ID, and base64 strings:</p><figure><img src="/images/avoslinux/ransom_notes.PNG"/><figcaption>ransom_notes</figcaption></figure><p></p><p>The decoded base64 strings are 88-byte long and at first sight I couldn't figure out what it was.</p><div class="highlight"><pre><span></span><code>$echo -en "MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE9U+h7UA0Do9mVDFVJM9Gj5Qi/5zn2b/5dH9qFMApEmVngoc4zlLk49U1iWc2l+in2CtyQb+/s+JKvyPvack9gw==" | base64 -d | xxd
00000000: 3056 3010 0607 2a86 48ce 3d02 0106 052b  0V0...*.H.=....+
00000010: 8104 000a 0342 0004 f54f a1ed 4034 0e8f  .....B...O..@4..
00000020: 6654 3155 24cf 468f 9422 ff9c e7d9 bff9  fT1U$.F.."......
00000030: 747f 6a14 c029 1265 6782 8738 ce52 e4e3  t.j..).eg..8.R..
00000040: d535 8967 3697 e8a7 d82b 7241 bfbf b3e2  .5.g6....+rA....
00000050: 4abf 23ef 69c9 3d83                      J.#.i.=.
</code></pre></div><p>Then, by digging further in the binary, it appears to be an elliptic curve public key generated using the secp256k1 curve.</p><div class="highlight"><pre><span></span><code>$echo -en "MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE9U+h7UA0Do9mVDFVJM9Gj5Qi/5zn2b/5dH9qFMApEmVngoc4zlLk49U1iWc2l+in2CtyQb+/s+JKvyPvack9gw==" | base64 -d | openssl asn1parse -inform DER -dump
    0:d=0  hl=2 l=  86 cons: SEQUENCE
    2:d=1  hl=2 l=  16 cons: SEQUENCE
    4:d=2  hl=2 l=   7 prim: OBJECT            :id-ecPublicKey
   13:d=2  hl=2 l=   5 prim: OBJECT            :secp256k1
   20:d=1  hl=2 l=  66 prim: BIT STRING
      0000 - 00 04 f5 4f a1 ed 40 34-0e 8f 66 54 31 55 24 cf   ...O..@4..fT1U$.
      0010 - 46 8f 94 22 ff 9c e7 d9-bf f9 74 7f 6a 14 c0 29   F.."......t.j..)
      0020 - 12 65 67 82 87 38 ce 52-e4 e3 d5 35 89 67 36 97   .eg..8.R...5.g6.
      0030 - e8 a7 d8 2b 72 41 bf bf-b3 e2 4a bf 23 ef 69 c9   ...+rA....J.#.i.
      0040 - 3d 83                                             =.
</code></pre></div><p>Finally, three objects are initialized, two of them will hold a public and private key, and one is for the random generator. These objects come from the crypto++ library.</p><figure><img src="/images/avoslinux/ctors_object_init.PNG"/><figcaption>ctors_object_init</figcaption></figure><p></p><h1 id="main-function">Main function</h1><p>No technique has been set up to obfuscate and protect the ransomware. The ransomware is basic and accepts two parameters, the number of threads to be used and the directories to encrypt:</p><figure><img src="/images/avoslinux/program_helper.PNG"/><figcaption>program_helper</figcaption></figure><p></p><p>If one of the given paths contains the strings "esxi" or "vmfs", a global variable is set to true and the running VMs (virtual machines) are killed using the <em>esxcli</em> command line:</p><figure><img src="/images/avoslinux/killing_esxi.PNG"/><figcaption>killing_ESXi</figcaption></figure><p></p><p>Finally, it will browse the given lists of directories recursively, load the attackers' public key and build a list of files that the encryption thread routine will consume.</p><figure><img src="/images/avoslinux/main_encryption_flow.PNG"/><figcaption>main_encryption_flow</figcaption></figure><p></p><h1 id="generating-the-list-of-files-to-encrypt">Generating the list of files to encrypt</h1><p>The function that builds the list of files to encrypt is simple. First, it calls "opendir" with the directory path name to encrypt, and then, using "readdir", it iterates through the files in the directory. If it is a regular file and the name is not "README_FOR_RESTORE" or it does not end with the ".avoslinux" or ".avos2" extension, it is added to the global list. If the esxi global variable is set to true, only files that end with ".vmdk", ".vmem", ".vswp", ".vmsn" or ".log" are added to the list:</p><figure><img src="/images/avoslinux/build_file_list.PNG"/><figcaption>build_files_list_to_encrypt</figcaption></figure><p></p><p>Unlike most Windows pieces of ransomware, that only encrypt data files based on their extension name using a whitelist or a blacklist, this Linux variant may encrypt all the files, including system files.</p><h1 id="load-the-attackers-public-key">Load the attackers' public key</h1><p>Because the ransomware uses the crypto++ library, we recognize the particular concept of <em>filters</em> and <em>pipes</em> used by the library in the reversed code. Similarly to Unix, Pipes allows data flows from a source to a sink and filters them to transform them. The original function that decodes and loads the base64 attackers' public key would probably look like this:</p><div class="highlight"><pre><span></span><code>AutoSeededRandomPool prng;
string encoded = "MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE9U+h7UA0Do9mVDFVJM9Gj5Qi/5zn2b/5dH9qFMApEmVngoc4zlLk49U1iWc2l+in2CtyQb+/+JKvyPvack9gw==";
string decoded;

StringSource ss(encoded, true, new Base64Decoder( new StringSink(decoded)));

ECIES&lt;ECP&gt;::Encryptor e0;
e0.AccessPublicKey().Load(decoded);
e0.GetPublicKey().ThrowIfInvalid(prng, 3); // Validate the public key
</code></pre></div><p></p><figure><img src="/images/avoslinux/load_attackers_key.PNG"/><figcaption>load_attackers_public_elliptic_curvre_key</figcaption></figure><p></p><h1 id="encryption">Encryption</h1><p>To encrypt files on the disk, Avoslinux uses the Salsa20 stream ciphers using the 12-round variant. For each file to encrypt, it generates a 32-byte long Salsa key and an 8-byte long nonce.</p><figure><img src="/images/avoslinux/salsa_key_nonce.PNG"/><figcaption>gen_salsa_key_nonce</figcaption></figure><p></p><p>The generated key and nonce are passed to the function "ECIES_n_b64" to be encrypted using the ECIES (Elliptic Curve Integrated Encryption Scheme) crypto scheme, and then base64-encoded.</p><figure><img src="/images/avoslinux/encrypt_key_nonce.PNG"/><figcaption>ECIES_encrypt_key_and_nonce</figcaption></figure><p></p><p>The function would probably look like this:</p><div class="highlight"><pre><span></span><code>string key_nonce;
StringSource ss1 (key_nonce, true, new PK_EncryptorFilter(prng, e0, new Base64Encoder( new StringSink(b64_ecies_key_nonce))));
</code></pre></div><p>The ECIES-encrypted output is bigger than the original: 125-byte long. Based on the crypto++ ECIES documentation, "The output of the encryption function is the tuple <em>{K,C,T}</em>, where <em>K</em> is the encrypted common secret, <em>C</em> is the ciphertext, and <em>T</em> is the authentication tag."</p><p>The number of Salsa rounds is set:</p><figure><img src="/images/avoslinux/set_salsa_key.PNG"/><figcaption>set_salsa_rounds_and_key</figcaption></figure><p></p><p>The file is encrypted using the Salsa20/12 algorithm, and the key with the previously encrypted nonce (ECIES and base64) is appended to the end of the file.</p><figure><img src="/images/avoslinux/encrypt_files.PNG"/><figcaption>salsa20/12 encrypting</figcaption></figure><p></p><p>Then, the file is renamed by appending the ".avoslinux" extension to the file.</p><figure><img src="/images/avoslinux/file_renamed.PNG"/><figcaption>File renamed</figcaption></figure><p></p><p>Finally, the Salsa key and the nonce are erased from the memory:</p><figure><img src="/images/avoslinux/zeroing_key_nonce.PNG"/><figcaption>Salsa key and nonce zeroing</figcaption></figure><p></p><h1 id="conclusion">Conclusion</h1><p>The Linux variant is very simple and has no special features like network encryption or any anti-reverse techniques to obfuscate codes. The encryption process is not common for a piece of ransomware and it is different from the Windows variant, which uses the RSA and AES combination. Another thing to note is that unlike most Windows pieces of ransomware, that only encrypt data files based on their extension name using a whitelist or a blacklist, this Linux variant may encrypt all the files, including system files.</p><h1 id="iocs">IOCs</h1><p>Sample hash</p><ul><li>SHA256: 10ab76cd6d6b50d26fde5fe54e8d80fceeb744de8dbafddff470939fac6a98c4</li><li>SHA1: 9c8f5c136590a08a3103ba3e988073cfd5779519</li><li>MD5: f659d1d15d2e0f3bd87379f8e88c6b42</li></ul><p>Elliptic curve public key</p><ul><li>MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE9U+h7UA0Do9mVDFVJM9Gj5Qi/5zn2b/5dH9qFMApEmVngoc4zlLk49U1iWc2l+in2CtyQb+/s+JKvyPvack9gw==</li></ul></div><div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;url=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/Avoslocker.html&amp;title=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;summary=Avoslocker%20analysis&amp;source=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=AvosLocker%20Ransomware%20Linux%20Version%20Analysis&amp;body=https%3A//blog.lexfo.fr/Avoslocker.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></div></main><a class="banner" href="https://www.ambionics.io/blog/"><p>Visit also our blog dedicated to web security research</p><img class="logo" src="/theme/images/ambionics-logo.svg"/></a><footer><div class="footer"><div><a href="https://lexfo.fr"><img class="logo" src="/theme/images/lexfo-logo.svg"/></a><p>+33 1 40 17 91 28 <br/> 5, rue Saulnier <br/> 75009 Paris</p></div><div><p><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></p></div></div><hr/><div class="footer" style="color: #515151;"><div><p>Â© LEXFO 2024 - All rights reserved</p></div><div class="footer-networks"><a href="https://twitter.com/LexfoSecurite"><i class="fab fa-x-twitter"></i></a> <a href="https://www.linkedin.com/company/lexfo/"><i class="fab fa-linkedin"></i></a> <a href="https://github.com/lexfo"><i class="fab fa-github"></i></a></div></div></footer></body></html>