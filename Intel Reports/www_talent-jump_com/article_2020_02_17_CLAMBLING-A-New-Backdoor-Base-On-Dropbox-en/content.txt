<!DOCTYPE html><html lang="en-us"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><title>CLAMBLING - A New Backdoor Base On Dropbox (EN) | è©®ç¿ç§æ</title><meta name="description" content="In July 2019, one of our customerâs company suffering the APT attack and we start the investigation immediately. During the investigation we found a brand new backdoor sample, which implements lots of features by using Dropbox API, using Dropbox like a C&amp;C server. After the reverse engineering, we extract the Dropbox token used by the sample, dig into Dropbox folder, and reveal the whole functional structure."><meta name="generator" content="è©®ç¿ç§æ"><meta name="author" content="Talent-Jump"><meta name="keywords" content="Talent-Jump,è³å®é¡§åæå,ç³»çµ±æ´åæå,Security Service,System Integration"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1,user-scalable=0"><link rel="stylesheet" type="text/css" href="/article/styles/screen.css"><link rel="apple-touch-icon" sizes="152x152" href="/article/images/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/article/images/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/article/images/favicon-16x16.png"><link rel="manifest" href="/article/images/site.webmanifest"><link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5"><meta name="msapplication-TileColor" content="#2d89ef"><meta name="theme-color" content="#ffffff"><link rel="alternate" href="/article/rss2.xml" title="è©®ç¿ç§æ" type="application/rss+xml">
<link rel="stylesheet" href="/article/css/prism.css" type="text/css"></head><body itemscope itemtype="https://schema.org/WebPage"><header itemscope itemtype="https://schema.org/WPHeader"><div class="logo"></div><h1><a href="/article/" alt="è©®ç¿ç§æ" title="è©®ç¿ç§æ" itemprop="headline">è©®ç¿ç§æ<p class="subtitle">Talent-Jump Technologies, Inc</p></a></h1><p itemprop="description">Technical Blog</p><nav itemscope itemtype="https://schema.org/SiteNavigationElement"><ul><li itemprop="name"><a href="/article/" alt="Recent" title="Recent" itemprop="url">Recent</a></li><li itemprop="name"><a href="/article/archives" alt="Archives" title="Archives" itemprop="url">Archives</a></li><li itemprop="name"><a href="/article/rss2.xml" alt="RSS" title="RSS" itemprop="url">RSS</a></li></ul></nav><div class="space"></div></header><main itemscope itemtype="https://schema.org/Blog"><article class="full"><h1 itemprop="headline" class="post-heading">CLAMBLING - A New Backdoor Base On Dropbox (EN)</h1><br><span class="page-tags"><span class="page-tag"><a href="/article/tags/DRBControl" itemprop="url">#DRBControl
&nbsp;</a></span><span class="page-tag"><a href="/article/tags/Malware" itemprop="url">#Malware
&nbsp;</a></span><span class="page-tag"><a href="/article/tags/APT" itemprop="url">#APT
&nbsp;</a></span><span class="page-tag"><a href="/article/tags/IncidentResponse" itemprop="url">#IncidentResponse
&nbsp;</a></span></span><span class="post-meta">Post on<time itemprop="datePosted" datetime="2020-02-17T10:03:30.000Z"> Feb 17 2020</time><br>By <b>Theo Chen, Zero Chen</b></span><br><p><a href="/article/2020/02/17/CLAMBLING-A-New-Backdoor-Base-On-Dropbox">ä¸­æçæ¬</a></p>
<p>In July 2019, one of our customerâs company suffering the APT attack and we start the investigation immediately. During the investigation we found a brand new backdoor sample, which implements lots of features by using Dropbox API, using Dropbox like a C&amp;C server. After the reverse engineering, we extract the Dropbox token used by the sample, dig into Dropbox folder, and reveal the whole functional structure.</p>
<blockquote>
<p>The report is co-authored with <a href="https://www.trendmicro.com" target="_blank" rel="noopener">Trend Micro</a>.</p>
<p>Kenney Lu, Daniel Lunghi, Cedric Pernet, and Jamz Yaneza. (17 February 2020). Trend Micro. <a href="https://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/operation-drbcontrol-uncovering-a-cyberespionage-campaign-targeting-gambling-companies-in-southeast-asia" target="_blank" rel="noopener">âOperation DRBControl - Uncovering A Cyberespionage Campaign Targeting Gambling Companies In Southeast Asiaâ</a></p>
</blockquote>
<h2 id="First-Stage-Infection">First Stage Infection</h2>
<p>The threat actor uses Windows Defender Core Process <code>MsMpEng.exe</code> which has a legal digital signature to load the malicious DLL file. Load the shellcode from the payload file then release the final malicious executable to complete the first stage infection.</p>
<p>During the investigation, we found a total of 8 different loaderâs filenames <sub><a href="#Appendix">[Appendix 1]</a></sub> renamed from <code>MsMpEng.exe</code> and placed at <code>C:\ProgramData\Microsoft</code> in its separated folder. The loader is just called the function <code>ServiceCrtMain</code> imported from <code>mpsvc.dll</code>.</p>
<p>The malicious DLL file <code>mpsvc.dll</code> has two types <sub><a href="#Appendix">[Appendix 2]</a></sub>. The older type will try to read shellcode from payload file <code>English.rtf</code>, decode and decompress the content using <code>RtlDecompressBuffer</code> to release the final executable (Figure 1).<br>
<img src="clambling-01.png" alt="Figure 1. Older type of mpsvc.dll"><span class="image-caption">Figure 1. Older type of mpsvc.dll</span></p>
<p>The newer one has a different way to start the infection. There is a piece of shellcode hard-coded in the <code>mpsvc.dll</code>, after decoding the shellcode from <code>mpsvc.dll</code>, it will inject and execute to load the shellcode from <code>mpsvc.mui</code> (Figure 2), which will release the final executable and inject into the process.</p>
<p><img src="clambling-02.png" alt="Figure 2. Newer type of mpsvc.dll"><span class="image-caption">Figure 2. Newer type of mpsvc.dll</span></p>
<p>Both of these two types of <code>mpsvc.dll</code> will release a full functional backdoor, which can connect to the C&amp;C server. But the final executable released by a newer type of <code>mpsvc.dll</code> has some upgrade, including the function to interact with Dropbox API. The following article will focus on the malicious executable released by the newer type of <code>mpsvc.dll</code>.</p>
<p>The hardcoded shellcode in a newer type of <code>mpsvc.dll</code> will first allocate 0x80000 bytes of memory space. Getting the current moduleâs full path and replace the extension <code>dll</code> to <code>mui</code> and read the shellcode in this <code>mui</code> file, then jump to the base address of <code>mui</code> file plus its first byte. (Figure 3)</p>
<p><img src="clambling-03.png" alt="Figure 3. Decoded shellcode in mpsvc.dll"><span class="image-caption">Figure 3. Decoded shellcode in mpsvc.dll</span></p>
<p>In the end, the shellcode in <code>mpsvc.mui</code> has another different piece of hard-coded bytes, which will decompress by <code>RtlDecompressBuffer</code> to the final malicious executable (Figure 4).</p>
<p><img src="clambling-04.png" alt="Figure 4. The final malicious executable in buffer."><span class="image-caption">Figure 4. The final malicious executable in buffer.</span></p>
<h2 id="Sample-Analysis">Sample Analysis</h2>
<p>The final malicious executable sample we extracted has numerous features. Here is the analysis of some major functions.</p>
<h3 id="Bypass-UAC">Bypass UAC</h3>
<p>This sample can bypass UAC via .NET. It is not a new technique which was disclosed in 2017 <sub><a href="#References">[1]</a></sub>, the threat actor only changes the GUID to <code>9BA94120-7E02-46ee-ADC6-10640B04F93B</code> (Figure 5) and specify the location of DLL file which will load by the .NET application in the elevated process.<br>
<img src="clambling-05.png" alt="Figure 5. Code snippet of bypass UAC."><span class="image-caption">Figure 5. Code snippet of bypass UAC.</span></p>
<h3 id="Persistence">Persistence</h3>
<p>There are two ways to persist. Register as a startup program in <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> if it has no privileged (Figure 6). Otherwise, it will register itself as a system service (Figure 7).</p>
<p><img src="clambling-06.png" alt="Figure 6. Register as a start program."><span class="image-caption">Figure 6. Register as a start program.</span><br>
<img src="clambling-07.png" alt="Figure 7. Register as  a system service."><span class="image-caption">Figure 7. Register as  a system service.</span></p>
<h3 id="Information-Gathering">Information Gathering</h3>
<p>It will collect some basic information like IP address, hostname, username, OS version and so on. Also, it will search the registry keyâs value <code>HKEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt</code> and try to look for the wallet address if exist (Figure 8). All of this information will upload to Dropbox as <code>%Y-%m-%d %H-%M-%S.log</code>, below is a file sample:</p>
<pre><code>Lan IP: x.x.x.x
Computer: WIN-XXXXXX
UserName: Administrator
OS: Win10(X64)
Version: 8.0
Bit: Not Found !!!
Exist: NO
</code></pre>
<p><img src="clambling-08.png" alt="Figure 8. Code snippet of information gathering."><span class="image-caption">Figure 8. Code snippet of information gathering.</span></p>
<h3 id="Recording-Features">Recording Features</h3>
<p>This sample acquired three types of recording features, including key-log, clipboard log, and screen recording. The screen recording file naming format is <code>[%y-%m-%d] %H-%M-%S.avi</code>. The key-log and clipboard log will encode by different key and salt, then save as <code>&lt;hash&gt;.pas</code> for key-log and <code>&lt;hash&gt;.log</code> for clipboard log (Figure 9).</p>
<p><img src="clambling-09.png" alt="Figure 9. Code snippet of key log encoding."><span class="image-caption">Figure 9. Code snippet of key log encoding.</span></p>
<h3 id="Connect-to-C-C-Server">Connect to C&amp;C Server</h3>
<p>This sample can also connect to a specific C&amp;C server and send back data by using a fake HTTP POST request (Figure 10).</p>
<p><img src="clambling-10.png" alt="Figure 10. Code snippet of preparing for fake POST request."><span class="image-caption">Figure 10. Code snippet of preparing for fake POST request.</span></p>
<h3 id="RTTI-Information">RTTI Information</h3>
<p>The RTTI information remaining, here is the full class name list we got:</p>
<ul>
<li>CHPAvi</li>
<li>CHPCmd</li>
<li>CHPExplorer</li>
<li>CHPHttp</li>
<li>CHPKeyLog</li>
<li>CHPNet</li>
<li>CHPPipe</li>
<li>CHPPlugin</li>
<li>CHPProcess</li>
<li>CHPProxy</li>
<li>CHPRegedit</li>
<li>CHPScreen</li>
<li>CHPService</li>
<li>CHPTcp</li>
<li>CHPTelnet</li>
<li>CHPUdp</li>
</ul>
<h3 id="Interact-With-Dropbox">Interact With Dropbox</h3>
<p>During reverse engineering, we found that the Dropbox API token with 64 characters is hardcoded in stack string (Figure 11).</p>
<p><img src="clambling-11.png" alt="Figure 11. Code snippet for the first 24 characters of Dropbox API token."><span class="image-caption">Figure 11. Code snippet for the first 24 characters of Dropbox API token.</span></p>
<p>Besides connecting to the C&amp;C server, this sample can also upload &amp; download with Dropbox API. Especially when the log file is uploaded, it will try to download <code>bin.asc</code> and check the file has fake <code>GIF</code> file header or not. If everything is correct, it will continue to the custom decoding phase, which will calculate with an array of bytes hard-coded in the sample, to release the inject payload (Figure 12).</p>
<p><img src="clambling-12.png" alt="Figure 12. Code snippet of interaction with Dropbox API."><span class="image-caption">Figure 12. Code snippet of interaction with Dropbox API.</span></p>
<h2 id="Inside-of-Dropbox-Folder">Inside of Dropbox Folder</h2>
<p>After we got the Dropbox token, we can now dig into Dropbox by using official API, for example, list the account information which creates this token, list the full file and folder information.</p>
<p>In the Dropbox, the folder structure like this:</p>
<pre><code>/&lt;unique_hash&gt;/%Y-%m-%d\ %H:%M:%S.log
/&lt;unique_hash&gt;/bin.asc
/codex64bin.asc
/codex86bin.asc
/x64bin.asc
/x86bin.asc
</code></pre>
<p>Each infected victim has its folder named by unique hash <code>/[0-9A-z]/</code>, this hash is generated by machine key and some other information. <code>%Y-%m-%d\ %H:%M:%S.log</code> is the log file upload by the victim. <code>*.asc</code> is the file upload by the threat actor. For example, <code>bin.asc</code> is the payload download by the victim when the log file is upload succeeds.</p>
<p>Sort out the log file on Dropbox, we can get the full list of infected computers (Figure 13).</p>
<p><img src="clambling-13.png" alt="Figure 13. The list of infected computers."><span class="image-caption">Figure 13. The list of infected computers.</span></p>
<h2 id="Second-Stage-Infection">Second Stage Infection</h2>
<p>After the first infection stage completed, it will persistent itself as a system service or autorun program. Collecting information and establish a connection to the C&amp;C server. The most interesting part is each time when the log file is upload succeeds, it will try to download <code>bin.asc</code> from each computerâs unique folder. Most of <code>bin.asc</code> we captured is requesting the victim to download <code>x64bin.asc</code> file from Dropbox.</p>
<p>Further analysis of <code>x64bin.asc</code>, we found the second Dropbox API token, its purpose is different from the first one. Now the threat actor is ready to use Dropbox as another C&amp;C server with the full backdoor feature.</p>
<p>The second infection stageâs sample has some bonus features including the ability to interact with Dropbox, the command code mapping show as below:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Command Code</th>
<th style="text-align:left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:left">ListDrives</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">ListFiles</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:left">ExecuteFile</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">ManageFile</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">UploadFile</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:left">DownloadFile</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:left">OpenTerminal</td>
</tr>
</tbody>
</table>
<p>In these commands, there are three different files, each of these file has specific filename and purpose:</p>
<ul>
<li><code>eLHgZNBH</code>: The status file, upload to Dropbox at regular intervals.</li>
<li><code>yasHPHFJ</code>: The command file, containing command and arguments.</li>
<li><code>csaujdnc</code>: The execution result of the command.</li>
</ul>
<p>The status file <code>eLHgZNBH</code> contain the basic information about victim and timestamp, upload to Dropbox at regular intervals. Whenever status file upload succeeds, it will try to download the command file <code>yasHPHFJ</code> if it existed. Extract the command  code and arguments from <code>yasHPHFJ</code> then execute the command and upload the execution result to Dropbox as <code>csaujdnc</code> (Figure 14).</p>
<p><img src="clambling-14.png" alt="Figure 14. Flow of three files interact with Dropbox"><span class="image-caption">Figure 14. Flow of three files interact with Dropbox</span></p>
<p>By using this control flow, the threat actor can use Dropbox as a C&amp;C server to control the victimâs computer even the fixed connection between the specific C&amp;C serverâs IP address has been found and blocked. Unless we block <code>content.dropboxapi.com</code> and <code>api.dropboxapi.com</code>, otherwise we can not isolate the infected computer.</p>
<p>The Dropbox API remain the detail of each file and folder, for example this is a file information return by Dropbox API:</p>
<pre><code>{
    '.tag': 'file',
    'name': 'Secret_File.txt',
    'path_lower': '/secret_file.txt',
    'path_display': '/Secret_File.txt',
    'id': 'id:&lt;UNIQUE_FILE_ID&gt;',
    'client_modified': '2019-07-21T02:45:42Z',
    'server_modified': '2019-07-21T02:53:04Z',
    'rev': '[0-9a-f]{6,}',
    'size': 125,
    'is_downloadable': True,
    'content_hash': '&lt;SHA256_HASH&gt;'
}
</code></pre>
<p>It contains the server_modified timestamp even with history revision file id, we can use <code>rev</code> to list the full history of this file and download it. Sort out this information and the command code mapping, we can now list the full command executed on each computer and its arguments. Here is two computersâ execution list (Figure 15 &amp; 16).</p>
<p><img src="clambling-15.png" alt="Figure 15. Real command execution list from one victim."><span class="image-caption">Figure 15. Real command execution list from one victim.</span><br>
<img src="clambling-16.png" alt="Figure 16. Another real command execution list."><span class="image-caption">Figure 16. Another real command execution list.</span></p>
<p>According to these record, the threat actor follows almost the same action on every infected computer. First, download additional attack programs from Dropbox, like <code>mimikatz</code> or other UAC bypass tools. Second, search the high-value file including private source code, config file, database, and the key-log / clipboard log. Upload all of these files to Dropbox for further searching. Last but not least, infiltrate the company intranet or even the cloud service.</p>
<p>Combining all decoded <code>yasHPHFJ</code> files, we can show the threat actorâs approximate working hours (Figure 17).</p>
<p><img src="clambling-17.png" alt="Figure 17. The threat actorâs approximate working hours."><span class="image-caption">Figure 17. The threat actorâs approximate working hours.</span></p>
<h2 id="Conclusion">Conclusion</h2>
<p>We start to monitor the Dropbox for each token and parse the infected computerâs list, here we can see the infected computerâs number from July 2019 to September 2019 this two month (Figure 18 &amp; 19).</p>
<p><img src="clambling-18.png" alt="Figure 18. Dropbox A (first token): infected computerâs number."><span class="image-caption">Figure 18. Dropbox A (first token): infected computerâs number.</span><br>
<img src="clambling-19.png" alt="Figure 19. Dropbox B (second token): infected computerâs number."><span class="image-caption">Figure 19. Dropbox B (second token): infected computerâs number.</span></p>
<p>We got nearly 200 infected computers at the highest peak from Dropbox A, alone with nearly 80 computers from Dropbox B. Both of these static has a drop at August 21, 2019, the threat actor clear the Dropbox folder for some reason. Monitoring ends on September 20, 2019, all tokens we got are revoked by the threat actor.</p>
<p>During these two months, we got five different Dropbox token. Each of these tokens has its purpose. The first two tokens are the major one we discuss in this article, others are more like for testing.</p>
<p>From the first infection stage, established the connection between the C&amp;C server and Dropbox at the same time. If the IP address of the C&amp;C server been blocked, it can still have limited control from Dropbox. Once it completed the second infection stage, Dropbox is turning into a second channel C&amp;C server which has full remote control features (Figure 20). Steal the data and infiltrate the whole company. This method is not complex but very useful.</p>
<p><img src="clambling-20.png" alt="Figure 20. The whole interaction flow from infection to interact with Dropbox."><span class="image-caption">Figure 20. The whole interaction flow from infection to interact with Dropbox.</span></p>
<h2 id="Appendix">Appendix</h2>
<ol>
<li>
<p>Loader</p>
<ul>
<li><code>33bc14d231a4afaa18f06513766d5f69d8b88f1e697cd127d24fb4b72ad44c7a</code>
<ul>
<li><code>msmpeng.exe</code> (PE32)</li>
</ul>
</li>
<li><code>99042e895b6c2ea80f3ba65563a12c8eba882e3ad6a21dd8e799b0112c75ddd2</code>
<ul>
<li><code>rsoplicy.exe</code> (PE32+)</li>
<li><code>DRM.exe</code> (PE32+)</li>
<li><code>Firewall.exe</code> (PE32+)</li>
<li><code>Kaspe.exe</code> (PE32+)</li>
<li><code>RSoPProv.exe</code> (PE32+)</li>
<li><code>Video.exe</code> (PE32+)</li>
<li><code>WinDRM.exe</code> (PE32+)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>DLL &amp; Payload File</p>
<ul>
<li><code>mpsvc.dll</code>
<ul>
<li><code>a58946c10c8325040634f7cd04429b9f1e3715767d0c8aec46b7cba8975e6a69</code></li>
<li><code>e18af309ecc3bc93351b9fa13a451e8b55b71d9edcc4232bc53eb1092bdfa859</code></li>
</ul>
</li>
<li><code>English.rtf</code>
<ul>
<li><code>52c147c8eadb58d3580b39c023ce4a90dacce76ee5c30c56c56ea39939a56b52</code></li>
<li><code>b5546d4931a0316abd4018c982558ed808b4d0a60233ac18bee601fa09d95ee6</code></li>
<li><code>dd0399970d2dbb5ab8b5869e2fafb83194c992f27bbb244adce35e2fe6ef0d28</code></li>
</ul>
</li>
<li><code>mpsvc.mui</code>
<ul>
<li><code>0693713f995285e8bd99ebfca2c4f0f1a8e824dafb5a99693442a9256df06e02</code></li>
<li><code>24ebd398be23135a2d8aa7000c2b6a534448b87aa5708b8546089630a8035f7e</code></li>
<li><code>56758c25e3b00957c6f7f76fcea5d0598eff7eda98c63f50b51d1c28f267ac8f</code></li>
<li><code>96282a625a31b6bf646c6e01ad20de96fd63c345881a9c91190940121580059d</code></li>
<li><code>99663b9ba27a36ff9fc64b72213e933067ee0cde38b39d20ae4326a37185811d</code></li>
<li><code>9dd1d21e9431cfe25709a8f26ec0f605ed19cf64ca1922e97fad7b7f2d2e82ea</code></li>
<li><code>b226c8e85a7b1a6d4d29d42fc84bc7f3a32335fc7ba44b455a7716d706660873</code></li>
<li><code>e716506cf54f48d77382d8955512184b45dd7d0b58c22e32424c56d38db24360</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>Other IoCs
<ul>
<li>Drop Files
<ul>
<li><code>37286285cb0f8305bd23a693b2e7ace71538e4c0b9f13ee6ca4e9e9419657813</code></li>
<li><code>b3581e8611f5838fc205f66bc5ca5edddb0fd895e97ebf8f0c7220cb102ae14b</code></li>
<li><code>79928578cdd646a9724bc6851a1ee77820c81a3100788d62885f9d92b6814085</code></li>
<li><code>7602e2932a10f3750a5d6236f6c1662047d4475c6e1fe6c57118c6620a083cb3</code></li>
<li><code>5b5aff8869ba7f1d3f6ad7711e801b031aedeff287a0dcb8f8ae6d6e4eb468af</code></li>
<li><code>412260ab5d9b2b2aa4471b953fb67ddc1a0fe90c353e391819ca7ac1c6d3146f</code></li>
<li><code>c6064fb44733b5660557e223598d0e4d5c4448ad20b29e41bef469cb5df77da0</code></li>
<li><code>4c08bc1a2f5384c5306edc6f23e4249526517eb21a88763c8180a582438dfa31</code></li>
<li><code>a58f2fea8c74c1d25090014c7366db224102daa6c798fcdfb7168b569b7d5ca2</code></li>
<li><code>d201e726fd2a2f4b55ea5ca95f0429d74e2efb918c7c136d55ef392ceac854d6</code></li>
<li><code>5713907c01db40cf54155db19c0c44c046b2c676a492d5ba13d39118c95139bf</code></li>
<li><code>d72c3f5f2f291f7092afd5a0fcaceaf2eaae44d057c9b3b27dd53f2048ed6175</code></li>
<li><code>d62ddac7c4aa152cf6f988db6c7bd0c9dcffa2e890d354b7e9db7f3b843fd270</code></li>
<li><code>28d2637139231c78a6493cd91e8f0d10891cfeb6c5e758540515faa29f54b6b2</code></li>
<li><code>39e69ab52f073f966945fdab214f63368f71175a7ccbea199fae32d51fa6a4e7</code></li>
<li><code>260b64e287d13d04f1f38d956c10d9fdd3cfbff6ba0040a52223fa41605bb975</code></li>
<li><code>c425b73be7394032aa8e756259ebf3662c000afaa286c3d7d957891026f3cbb4</code></li>
<li><code>28d19a23d167db3e1282f1c6039bcda6556798be054994a55e60116827dd0bf1</code></li>
<li><code>c3c1fc6aabbb49d0ee281ba4fc1529d2b9832a67b18e08ce14dbf0e361e5bd85</code></li>
<li><code>fc865a720cb808354923092bac04ab6a75e20ea92db5a343af07365c0cd2b72a</code></li>
<li><code>24f501141af5bf059509145e165302dd7087b1d1c2136bc5e4403f01435f250e</code></li>
<li><code>ee5f7e6ad4a344f40b9babada1654ea22333bb5150cfd26bfc239ead28b6528c</code></li>
<li><code>ca26a34153972cc73c63d3a9aadd3b12ba35ecdc6e39025b75be56b00c20e0ae</code></li>
<li><code>1951c79f280692a43b7c7cafd45c3f5d7f4f841ae104a6cad814fab4641c79f2</code></li>
<li><code>d5129308ee83a852e6a320ca68c8e66ed6d1eb4ec584dd0c8b5f313a56c49a15</code></li>
</ul>
</li>
<li>IP
<ul>
<li><code>103.230.15.130</code></li>
<li><code>104.168.196.80</code></li>
<li><code>104.168.196.85</code></li>
<li><code>104.168.196.88</code></li>
<li><code>139.180.194.173</code></li>
<li><code>167.179.115.228</code></li>
<li><code>207.148.73.58</code></li>
<li><code>43.228.126.172</code></li>
<li><code>43.228.126.56</code></li>
<li><code>45.32.101.238</code></li>
<li><code>45.32.111.228</code></li>
<li><code>45.77.41.49</code></li>
<li><code>47.75.248.237</code></li>
<li><code>66.42.60.107</code></li>
</ul>
</li>
<li>Domains
<ul>
<li><code>fn.shopingchina.net</code></li>
<li><code>office.support.googldevice.com</code></li>
<li><code>safe.mircosofdevice.com</code></li>
<li><code>server.correomasivochile.com</code></li>
<li><code>srv2.mkt-app.com</code></li>
<li><code>store.microsoftbetastore.com</code></li>
<li><code>update.mircosotfdefender.com</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="References">References</h2>
<ol>
<li><a href="https://offsec.provadys.com/UAC-bypass-dotnet.html" target="_blank" rel="noopener">UAC bypass via elevated .NET applications</a></li>
<li><a href="https://www.dropbox.com/developers/documentation/http/overview" target="_blank" rel="noopener">Dropbox for HTTP Developers</a></li>
<li><a href="https://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/operation-drbcontrol-uncovering-a-cyberespionage-campaign-targeting-gambling-companies-in-southeast-asia" target="_blank" rel="noopener">https://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/operation-drbcontrol-uncovering-a-cyberespionage-campaign-targeting-gambling-companies-in-southeast-asia</a></li>
</ol>
</article><span class="next-post"><a href="/article/2020/02/17/CLAMBLING-A-New-Backdoor-Base-On-Dropbox/" itemprop="url">Older Post â</a></span><span class="prev-post"><a href="/article/2020/03/31/æ°-XLoader-è®ç¨®çæºæ¥æ¬é»ä¿¡ååéè¡é²è¡ç¶²è·¯é£é­/" itemprop="url">â Next Post </a></span><br><br><section id="comments"><h2>Comments<div id="disqus_thread"><noscript>Please enable JavaScript to view the <a href="//disqus.com/?ref_noscript" target="_blank" rel="noopener">comments powered by Disqus</a>.</noscript></div></h2></section><br></main><script async>(function(h,g,l,k,j,i){j=h.createElement(g),i=h.getElementsByTagName(g)[0],
j.src = '//' + l + '.disqus.com/' + k + '.js', i.parentNode.insertBefore(j, i)})
(document,'script','talentjump','embed');
</script><script async>var disqus_shortname = 'talentjump';
(function () {
var s = document.createElement('script'); s.async = true;
s.type = 'text/javascript';
s.src = '//' + disqus_shortname + '.disqus.com/count.js';
(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
}());
</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-158586530-1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-158586530-1');</script></body></html>