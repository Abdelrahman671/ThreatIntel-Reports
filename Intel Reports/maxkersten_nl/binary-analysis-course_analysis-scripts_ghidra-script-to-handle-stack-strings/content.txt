<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="profile" href="https://gmpg.org/xfn/11">
	<title>Ghidra script to handle stack strings &#8211; Max Kersten</title>
<style type="text/css">
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm .de1, .asm .de2 {}
.asm  {font-family:monospace;}
.asm .imp {font-weight: bold; color: red;}
.asm li, .asm .li1 {font-weight: normal; vertical-align:top;}
.asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm .li2 {font-weight: bold; vertical-align:top;}
.asm .kw1 {color: #00007f; font-weight: bold;}
.asm .kw2 {color: #0000ff;}
.asm .kw3 {color: #b00040;}
.asm .kw4 {color: #46aa03; font-weight: bold;}
.asm .kw5 {color: #0000ff; font-weight: bold;}
.asm .kw6 {color: #0000ff; font-weight: bold;}
.asm .co1 {color: #666666; font-style: italic;}
.asm .co2 {color: #adadad; font-style: italic;}
.asm .es0 {color: #000099; font-weight: bold;}
.asm .br0 {color: #009900; font-weight: bold;}
.asm .sy1 {color: #339933;}
.asm .sy2 {color: #0000ff; font-weight: bold;}
.asm .st0 {color: #7f007f;}
.asm .nu0 {color: #ff0000;}
.asm .ln-xtra, .asm li.ln-xtra, .asm div.ln-xtra {background-color: #ffc;}
.asm span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c .de1, .c .de2 {}
.c  {font-family:monospace;}
.c .imp {font-weight: bold; color: red;}
.c li, .c .li1 {font-weight: normal; vertical-align:top;}
.c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c .li2 {font-weight: bold; vertical-align:top;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #666666; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .es1 {color: #000099; font-weight: bold;}
.c .es2 {color: #660099; font-weight: bold;}
.c .es3 {color: #660099; font-weight: bold;}
.c .es4 {color: #660099; font-weight: bold;}
.c .es5 {color: #006699; font-weight: bold;}
.c .br0 {color: #009900;}
.c .sy0 {color: #339933;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #0000dd;}
.c .nu6 {color: #208080;}
.c .nu8 {color: #208080;}
.c .nu12 {color: #208080;}
.c .nu16 {color:#800080;}
.c .nu17 {color:#800080;}
.c .nu18 {color:#800080;}
.c .nu19 {color:#800080;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
.c .ln-xtra, .c li.ln-xtra, .c div.ln-xtra {background-color: #ffc;}
.c span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java .de1, .java .de2 {}
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java li, .java .li1 {font-weight: normal; vertical-align:top;}
.java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java .li2 {font-weight: bold; vertical-align:top;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java .ln-xtra, .java li.ln-xtra, .java div.ln-xtra {background-color: #ffc;}
.java span.xtra { display:block; }
</style>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Feed" href="https://maxkersten.nl/feed/" />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Comments Feed" href="https://maxkersten.nl/comments/feed/" />

<link rel='stylesheet' id='wp-block-library-css' href='https://maxkersten.nl/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='generate-style-grid-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/unsemantic-grid.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='generate-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/style.css?ver=1.3.46' type='text/css' media='all' />
<style id='generate-style-inline-css' type='text/css'>
body{background-color:#efefef;color:#3a3a3a;}a, a:visited{color:#1e73be;text-decoration:none;}a:hover, a:focus, a:active{color:#000000;text-decoration:none;}body .grid-container{max-width:1100px;}
body, button, input, select, textarea{font-family:"Open Sans", sans-serif;}.main-navigation .main-nav ul ul li a{font-size:14px;}@media (max-width:768px){.main-title{font-size:30px;}h1{font-size:30px;}h2{font-size:25px;}}
.site-header{background-color:#ffffff;color:#3a3a3a;}.site-header a,.site-header a:visited{color:#3a3a3a;}.main-title a,.main-title a:hover,.main-title a:visited{color:#222222;}.site-description{color:#999999;}.main-navigation,.main-navigation ul ul{background-color:#222222;}.main-navigation .main-nav ul li a,.menu-toggle{color:#ffffff;}.main-navigation .main-nav ul li > a:hover,.main-navigation .main-nav ul li > a:focus, .main-navigation .main-nav ul li.sfHover > a{color:#ffffff;background-color:#3f3f3f;}button.menu-toggle:hover,button.menu-toggle:focus,.main-navigation .mobile-bar-items a,.main-navigation .mobile-bar-items a:hover,.main-navigation .mobile-bar-items a:focus{color:#ffffff;}.main-navigation .main-nav ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation .main-nav ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation ul ul{background-color:#3f3f3f;}.main-navigation .main-nav ul ul li a{color:#ffffff;}.main-navigation .main-nav ul ul li > a:hover,.main-navigation .main-nav ul ul li > a:focus,.main-navigation .main-nav ul ul li.sfHover > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#4f4f4f;}.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .one-container .container, .separate-containers .paging-navigation, .inside-page-header{background-color:#ffffff;}.entry-meta{color:#888888;}.entry-meta a,.entry-meta a:visited{color:#666666;}.entry-meta a:hover{color:#1e73be;}.sidebar .widget{background-color:#ffffff;}.sidebar .widget .widget-title{color:#000000;}.site-info{color:#ffffff;background-color:#222222;}.site-info a,.site-info a:visited{color:#ffffff;}.site-info a:hover{color:#606060;}.footer-bar .widget_nav_menu .current-menu-item a{color:#606060;}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],textarea{color:#666666;background-color:#fafafa;border-color:#cccccc;}input[type="text"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="password"]:focus,input[type="search"]:focus,textarea:focus{color:#666666;background-color:#ffffff;border-color:#bfbfbf;}button,html input[type="button"],input[type="reset"],input[type="submit"],.button,.button:visited{color:#ffffff;background-color:#666666;}button:hover,html input[type="button"]:hover,input[type="reset"]:hover,input[type="submit"]:hover,.button:hover,button:focus,html input[type="button"]:focus,input[type="reset"]:focus,input[type="submit"]:focus,.button:focus{color:#ffffff;background-color:#3f3f3f;}
@media (max-width:768px){.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .separate-containers .paging-navigation, .one-container .site-content, .inside-page-header{padding:30px;}}.main-navigation ul ul{top:auto;}
</style>
<link rel='stylesheet' id='generate-mobile-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/mobile.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='fontawesome-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/font-awesome.min.css?ver=4.7' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='generate-ie-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/ie.min.css?ver=1.3.46' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wpgeshi-wp-geshi-highlight-css' href='https://maxkersten.nl/wp-content/plugins/wp-geshi-highlight/wp-geshi-highlight.css?ver=6.7.1' type='text/css' media='all' />
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://maxkersten.nl/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://maxkersten.nl/wp-json/wp/v2/pages/3974" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://maxkersten.nl/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-handle-stack-strings/" />
<link rel='shortlink' href='https://maxkersten.nl/?p=3974' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-handle-stack-strings%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-handle-stack-strings%2F&#038;format=xml" />
<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-32x32.png" sizes="32x32" />
<link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-180x180.png" />
<meta name="msapplication-TileImage" content="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-270x270.png" />
</head>

<body data-rsssl=1 itemtype='http://schema.org/WebPage' itemscope='itemscope' class="page-template-default page page-id-3974 page-child parent-pageid-2046  right-sidebar nav-below-header fluid-header separate-containers active-footer-widgets-0 nav-aligned-left header-aligned-left dropdown-hover">
	<a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a>
			<header itemtype="http://schema.org/WPHeader" itemscope="itemscope" id="masthead" class="site-header">
		<div class="inside-header grid-container grid-parent">
						<div class="site-branding">
				<p class="main-title" itemprop="headline">
			<a href="https://maxkersten.nl/" rel="home">
				Max Kersten
			</a>
		</p>
				<p class="site-description">
			Security through explanation
		</p>
			</div>					</div><!-- .inside-header -->
	</header><!-- #masthead -->
			<nav itemtype="http://schema.org/SiteNavigationElement" itemscope="itemscope" id="site-navigation" class="main-navigation">
		<div class="inside-navigation grid-container grid-parent">
						<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
								<span class="mobile-menu">Menu</span>
			</button>
				<div id="primary-menu" class="main-nav">
		<ul class="menu sf-menu">
			<li class="page_item page-item-31"><a href="https://maxkersten.nl/">Home</a></li>
<li class="page_item page-item-51"><a href="https://maxkersten.nl/blog/">Blog</a></li>
<li class="page_item page-item-205 menu-item-has-children current-menu-ancestor"><a href="https://maxkersten.nl/binary-analysis-course/">Binary Analysis Course<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-240 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/introduction/">Introduction<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-208"><a href="https://maxkersten.nl/binary-analysis-course/introduction/secura-grand-slam-ctf-easy-reverse/">Practical case: Secura Grand Slam CTF &#8220;Easy Reverse&#8221;</a></li>
<li class="page_item page-item-2135"><a href="https://maxkersten.nl/binary-analysis-course/introduction/the-workstation/">The workstation</a></li>
<li class="page_item page-item-263"><a href="https://maxkersten.nl/binary-analysis-course/introduction/basic-cpu-architecture/">Basic CPU architecture</a></li>
	</ul>
</li>
<li class="page_item page-item-311 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/">Assembly basics<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-313"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/conditions-and-loops/">Conditions and loops</a></li>
<li class="page_item page-item-400"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-patch-me-0x01/">Practical case: Patch Me 0x01</a></li>
<li class="page_item page-item-485"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/methods-and-macros-the-call-stack/">Methods and macros: the call stack</a></li>
<li class="page_item page-item-529"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-buffer-overflow-0x01/">Practical case: Buffer Overflow 0x01</a></li>
<li class="page_item page-item-568"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/crash-course/">Crash course</a></li>
<li class="page_item page-item-1569"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x01/">Practical case: Crack Me 0x01</a></li>
<li class="page_item page-item-1680"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x02/">Practical case: Crack Me 0x02</a></li>
<li class="page_item page-item-1971"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x03/">Practical case: Crack Me 0x03</a></li>
	</ul>
</li>
<li class="page_item page-item-1286 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/">Assembly code<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1289"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/hello-world/">Hello world</a></li>
<li class="page_item page-item-1323"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/universal-product-code-calculator/">Universal Product Code calculator</a></li>
<li class="page_item page-item-1385"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/debugging-code/">Debugging code</a></li>
	</ul>
</li>
<li class="page_item page-item-610 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/">Binary types<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-615"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/dot-net/">Dot Net</a></li>
<li class="page_item page-item-687"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/android/">Android</a></li>
<li class="page_item page-item-1541"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/browser-plug-in/">Browser plug-in</a></li>
	</ul>
</li>
<li class="page_item page-item-1435 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/">Common techniques<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1441"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/general-techniques/">General techniques</a></li>
<li class="page_item page-item-3155"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/analysing-scripts/">Analysing scripts</a></li>
<li class="page_item page-item-3439"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/debugging-dot-net-binaries/">Debugging Dot Net binaries</a></li>
	</ul>
</li>
<li class="page_item page-item-744 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/">Malware analysis<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-4305"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dot-net-rat/">Dot Net RAT</a></li>
<li class="page_item page-item-862"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/android-sms-stealer/">Android SMS Stealer</a></li>
<li class="page_item page-item-1039"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/lnk-isesteroids-powershell-dropper/">LNK &#038; ISESteroids Powershell dropper</a></li>
<li class="page_item page-item-1079"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-droppers/">Emotet droppers</a></li>
<li class="page_item page-item-1193"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/magecart/">Magecart</a></li>
<li class="page_item page-item-1785"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-ddos-bot/">Corona DDoS bot</a></li>
<li class="page_item page-item-2326"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/azorult-loader-stages/">Azorult loader stages</a></li>
<li class="page_item page-item-2472"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-javascript-downloader/">Emotet JavaScript downloader</a></li>
<li class="page_item page-item-2560"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-locker/">Corona Locker</a></li>
<li class="page_item page-item-3016"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/rezer0v4-loader/">ReZer0v4 loader</a></li>
<li class="page_item page-item-3913"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dumping-whispergates-wiper-from-an-eazfuscator-obfuscated-loader/">Dumping WhisperGate&#8217;s wiper from an Eazfuscator obfuscated loader</a></li>
	</ul>
</li>
<li class="page_item page-item-2046 menu-item-has-children current-menu-ancestor current-menu-parent"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/">Analysis scripts<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1007"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-string-formatting-deobfuscation/">PowerShell string formatting deobfuscation</a></li>
<li class="page_item page-item-2764"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/javascript-string-concatenation-deobfuscation/">JavaScript string concatenation deobfuscation</a></li>
<li class="page_item page-item-3061"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-rezer0-payload-and-configuration-extraction/">Automatic ReZer0 payload and configuration extraction</a></li>
<li class="page_item page-item-3206"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/">Ghidra script to decrypt strings in Amadey 1.09</a></li>
<li class="page_item page-item-3521"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-a-string-array-in-xor-ddos/">Ghidra script to decrypt a string array in XOR DDoS</a></li>
<li class="page_item page-item-3974 current-menu-item"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-handle-stack-strings/">Ghidra script to handle stack strings</a></li>
	</ul>
</li>
<li class="page_item page-item-3978 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/">Malware snippets<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3982"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/self-deletion/">Self Deletion</a></li>
<li class="page_item page-item-3984"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/api-hashing/">API Hashing</a></li>
	</ul>
</li>
<li class="page_item page-item-1250 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/">Obtaining samples<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1253"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/searching-samples/">Searching samples</a></li>
	</ul>
</li>
<li class="page_item page-item-2096 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/documentation/">Documentation<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-2099"><a href="https://maxkersten.nl/binary-analysis-course/documentation/article-structure/">Article structure</a></li>
	</ul>
</li>
<li class="page_item page-item-480"><a href="https://maxkersten.nl/binary-analysis-course/resources/">Resources</a></li>
<li class="page_item page-item-473"><a href="https://maxkersten.nl/binary-analysis-course/faq/">FAQ</a></li>
<li class="page_item page-item-1490 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/">Miscellaneous<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1493"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2018-2019/">A year in review: 2018-2019</a></li>
<li class="page_item page-item-2697"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2019-2020/">A year in review: 2019-2020</a></li>
<li class="page_item page-item-3467"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2020-2021/">A year in review: 2020-2021</a></li>
<li class="page_item page-item-4031"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2021-2022/">A year in review: 2021-2022</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4353"><a href="https://maxkersten.nl/libras-ghidra-library/">Libra&#8217;s Ghidra Library</a></li>
<li class="page_item page-item-161 menu-item-has-children"><a href="https://maxkersten.nl/projects/">Projects<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-793"><a href="https://maxkersten.nl/projects/androidprojectcreator/">AndroidProjectCreator</a></li>
<li class="page_item page-item-3295 menu-item-has-children"><a href="https://maxkersten.nl/projects/m3-framework/">m3 framework<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3292"><a href="https://maxkersten.nl/projects/m3-framework/extending-m3/">Extending m3</a></li>
<li class="page_item page-item-3329"><a href="https://maxkersten.nl/projects/m3-framework/anubis-and-cerberus-explained/">Anubis and Cerberus explained</a></li>
	</ul>
</li>
<li class="page_item page-item-3128 menu-item-has-children"><a href="https://maxkersten.nl/projects/api-client-libraries/">API client libraries<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3351"><a href="https://maxkersten.nl/projects/api-client-libraries/hatching-triage-java-api-client/">Hatching Triage Java API client</a></li>
<li class="page_item page-item-3353"><a href="https://maxkersten.nl/projects/api-client-libraries/malshare-java-api-client/">MalShare Java API client</a></li>
<li class="page_item page-item-3700"><a href="https://maxkersten.nl/projects/api-client-libraries/malware-bazaar-java-api-client/">Malware Bazaar Java API client</a></li>
<li class="page_item page-item-4185"><a href="https://maxkersten.nl/projects/api-client-libraries/yaraify-java-api-client/">Yaraify Java API client</a></li>
	</ul>
</li>
<li class="page_item page-item-2876"><a href="https://maxkersten.nl/projects/malwaretheflag/">MalwareTheFlag</a></li>
<li class="page_item page-item-2145"><a href="https://maxkersten.nl/projects/responsible-disclosures/">Responsible Disclosures</a></li>
<li class="page_item page-item-2430"><a href="https://maxkersten.nl/projects/malpull/">MalPull</a></li>
<li class="page_item page-item-104 menu-item-has-children"><a href="https://maxkersten.nl/projects/capricorn/">Capricorn<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-109"><a href="https://maxkersten.nl/projects/capricorn/changelog/">Changelog</a></li>
	</ul>
</li>
<li class="page_item page-item-2141 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/">Archive<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-163"><a href="https://maxkersten.nl/projects/archive/shouldersurfer/">ShoulderSurfer</a></li>
<li class="page_item page-item-167"><a href="https://maxkersten.nl/projects/archive/stringer/">Stringer</a></li>
<li class="page_item page-item-16 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/gemini/">Gemini<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
		<ul class='children'>
<li class="page_item page-item-73"><a href="https://maxkersten.nl/projects/archive/gemini/changelog/">Changelog</a></li>
		</ul>
</li>
<li class="page_item page-item-35"><a href="https://maxkersten.nl/projects/archive/whitepapers/">Whitepapers</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4 menu-item-has-children"><a href="https://maxkersten.nl/about-me/">About me<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-2436"><a href="https://maxkersten.nl/about-me/news-and-conferences/">News and conferences</a></li>
<li class="page_item page-item-198"><a href="https://maxkersten.nl/about-me/privacy-policy/">Privacy Policy</a></li>
</ul>
</li>
		</ul>
	</div><!-- .main-nav -->
			</div><!-- .inside-navigation -->
	</nav><!-- #site-navigation -->
		
	<div id="page" class="hfeed site grid-container container grid-parent">
		<div id="content" class="site-content">
			
	<div id="primary" class="content-area grid-parent mobile-grid-100 grid-75 tablet-grid-75">
		<main id="main" class="site-main">
						
				
<article id="post-3974" class="post-3974 page type-page status-publish" itemtype='http://schema.org/CreativeWork' itemscope='itemscope'>
	<div class="inside-article">
				
					<header class="entry-header">
				<h1 class="entry-title" itemprop="headline">Ghidra script to handle stack strings</h1>			</header><!-- .entry-header -->
				
				<div class="entry-content" itemprop="text">
			<p><em>This article was published on the 12th of April 2022.</em></p>
<p>The usage of stack strings within malware is frequent, especially when analysing shellcode or more advanced samples. This article will provide insight into stack strings, the endianness of values, how to handle (encrypted) stack strings, and the step-by-step creation of a Ghidra script which handles (wide) stack strings, which may or may not be encrypted. At last, the complete script is given.</p>
<p>The analysis in this article is done with a self-built version of Ghidra 10.2, based on the publicly available source code of the first of February 2022. The samples have been analysed using all analysers.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#stack-strings-explained">Stack strings explained</a></li>
<li><a href="#character-sets">Character sets</a></li>
<li><a href="#endianness">Endianness</a></li>
<li><a href="#stack-string-example-caddywiper">Stack string example: CaddyWiper</a></li>
<li><a href="#stack-string-example-plugx">Stack string example: PlugX</a></li>
<li><a href="#writing-the-ghidra-script">Writing the Ghidra script</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#complete-script">Complete script</a></li>
</ul>
<p><a name ="stack-strings-explained"></a></p>
<h2><a href="#stack-strings-explained">Stack strings explained</a></h2>
<p>In general, strings are not stored within the text segment of the binary. When a string is used in a local variable in source code, the compiler generally places the string in a different segment. A pointer to the string&#8217;s location is used to access or alter the data.</p>
<p>To obfuscate strings, one can create a string on the stack, character for character, or in small groups of characters. The concatenation of these characters lead to the existence of the complete string on the stack. When viewing the strings of a binary, the characters might not show up. </p>
<p>As an example, GNU strings only shows human readable strings with a length of 4 or longer by default, meaning that smaller groups do not show up, or might show up in parts. The <a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x03/">third crack me</a> in this course is based on this technique. Note that Mandiant&#8217;s <a href="https://github.com/mandiant/flare-floss">FLOSS</a> also aims to detect stack strings in binaries.</p>
<p>Additionally, stack strings can also be encrypted. This would make the use of tools harder, although FLOSS attempts to also decrypt stack strings if a simple encryption scheme is used.</p>
<p>Note that the character set and size of the used encoding matters. To make the script more generic, the obtained stack string bytes will be printed out using multiple encodings. The wrong encoding is likely to be displayed as garbage, making it fairly easy for an analyst to pick the string that looks correct.</p>
<p><a name ="endianness"></a></p>
<h2><a href="#endianness">Endianness</a></h2>
<p>The endianness defines where the most significant bit is, which is either the first or the last. The <a href="https://maxkersten.nl/binary-analysis-course/introduction/basic-cpu-architecture/">basic CPU architecture</a> article explains the endianness in more detail. With stack strings, it is important to understand if several characters need to be read right-to-left, or left-to-right.</p>
<p><a name ="stack-string-example-caddywiper"></a></p>
<h2><a href="#stack-string-example-caddywiper">Stack string example: CaddyWiper</a></h2>
<p>CaddyWiper is a wiper which was used by a pro-Russian actor against Ukrainian victims in March 2022, after the Russian invasion, as <a href="https://www.welivesecurity.com/2022/03/15/caddywiper-new-wiper-malware-discovered-ukraine/">reported</a> by ESET. It contains a lot of stack strings, including wide strings. The hashes of the sample are given below. The sample can be downloaded from <a href="https://bazaar.abuse.ch/sample/a294620543334a721a2ae8eaaf9680a0786f4b9a216d75b55cfd28f39e9430ea/">Malware Bazaar</a> and <a href="https://malshare.com/sample.php?action=detail&#038;hash=42e52b8daf63e6e26c3aa91e7e971492">MalShare</a>.</p>
<pre>
MD-5: 42e52b8daf63e6e26c3aa91e7e971492 

SHA-1: 98b3fb74b3e8b3f9b05a82473551c5a77b576d54 

SHA-256: a294620543334a721a2ae8eaaf9680a0786f4b9a216d75b55cfd28f39e9430ea
</pre>
<p>The excerpt below shows a wide stack string, which can be seen due to the frequent occurrence of <em>0x00</em>, and the double zero to terminate the string.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_20<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6b</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1f<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1e<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x65</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1d<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1c<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x72</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1b<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_1a<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6e</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_19<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_18<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x65</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_17<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_16<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_15<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_14<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x33</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_13<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_12<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x32</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_11<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_10<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x2e</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_f<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_e<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x64</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_d<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_c<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_b<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_a<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_9<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_8<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_7<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span></pre></div></div></div></div></div></div></div>


<p>If one were to rename and retype the first variable, originally named <em>local_20</em>, to a 26 character long array named <em>s_kernel32.dll</em>, the string&#8217;s memory lay-out becomes apparent, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6b</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x65</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x72</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6e</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x65</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">9</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">11</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">12</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x33</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">13</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">14</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x32</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">15</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">16</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x2e</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">17</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">18</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x64</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">19</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">20</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">21</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">22</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x6c</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">23</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">24</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
<span class="kw1">MOV</span>  <span class="kw6">byte</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> s_kernel32<span class="sy1">.</span>dll<span class="br0">&#91;</span><span class="nu0">25</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span></pre></div></div></div></div></div></div></div>


<p>The generic stack string handling suffices to deal with these kind of (wide) stack strings.</p>
<p><a name ="stack-string-example-plugx"></a></p>
<h2><a href="#stack-string-example-plugx">Stack string example: PlugX</a></h2>
<p>Talisman is a variant of PlugX, which is a remote access trojan which is generally used by Chinese related actors. This backdoor contains encrypted stack strings, of which the hashes are given below. The samples can be downloaded from <a href="https://bazaar.abuse.ch/sample/344fc6c3211e169593ab1345a5cfa9bcb46a4604fe61ab212c9316c0d72b0865/">Malware Bazaar</a> and <a href="https://malshare.com/sample.php?action=detail&#038;hash=c6c6162cca729c4da879879b126d27c0">MalShare</a>. Note that the referenced sample is dumped from memory, as it is initially encrypted. Details about the Talisman variant can be found in a <a href="https://www.trellix.com/en-in/about/newsroom/stories/threat-labs/plugx-a-talisman-to-behold.html">corporate blog</a> I co-authored.</p>
<pre>
MD-5: c6c6162cca729c4da879879b126d27c0

SHA-1: 80e5fd86127de526be75ef42ebc390fb0d559791

SHA-256: 344fc6c3211e169593ab1345a5cfa9bcb46a4604fe61ab212c9316c0d72b0865
</pre>
<p>One of the encrypted stack strings within the sample can be found at the offset of <em>0x100002401</em>. The assembly instructions at the given offset is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_cc<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55615596</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_c8<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x5573555e</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_c4<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55615574</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_c0<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55995571</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_bc<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55615578</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_b8<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55785582</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_b4<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x55775561</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_b0<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x5538553d</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_ac<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x551f552d</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_a8<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x558d552d</span>
<span class="kw1">MOV</span>  <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_a4<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x5555553c</span>
<span class="kw1">MOV</span>  <span class="kw6">word</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_a0<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x5555</span></pre></div></div></div></div></div></div></div>


<p>The local variable named <em>local_cc</em> is the start of the stack string, where all of the encrypted characters are placed on the stack in order. The code below, as seen in the decompiled code, decrypts the given stack string.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">do</span> <span class="br0">&#123;</span>
  bVar4 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_cc <span class="sy0">+</span> uVar2<span class="br0">&#41;</span> <span class="sy0">+</span> 0x22U <span class="sy0">^</span> <span class="nu12">0x33</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu12">0xbc</span><span class="sy0">;</span>
  param_1 <span class="sy0">=</span> param_1 <span class="sy0">&amp;</span> <span class="nu12">0xffffff00</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>bVar4<span class="sy0">;</span>
  <span class="sy0">*</span><span class="br0">&#40;</span>byte <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_cc <span class="sy0">+</span> uVar2<span class="br0">&#41;</span> <span class="sy0">=</span> bVar4<span class="sy0">;</span>
  uVar2 <span class="sy0">=</span> uVar2 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>uVar2 <span class="sy0">&lt;</span> <span class="nu12">0x2e</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The decompiled code is a bit cluttered, but can easily be cleaned up. The variable named <em>uVar2</em> is the loop&#8217;s counter, which can be renamed to <em>i</em>. The line with the reference to <em>param_1</em> can be omitted, and the local variable <em>bVar4</em> can be renamed to <em>decryptedByte</em>. Upon doing so, the code is becomes much more readable, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">do</span> <span class="br0">&#123;</span>
  decryptedByte <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_cc <span class="sy0">+</span> i<span class="br0">&#41;</span> <span class="sy0">+</span> 0x22U <span class="sy0">^</span> <span class="nu12">0x33</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu12">0xbc</span><span class="sy0">;</span>
  <span class="sy0">*</span><span class="br0">&#40;</span>byte <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_cc <span class="sy0">+</span> i<span class="br0">&#41;</span> <span class="sy0">=</span> decryptedByte<span class="sy0">;</span>
  i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>i <span class="sy0">&lt;</span> <span class="nu12">0x2e</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>There is, however, a mistake in the decompiled code. The decryption routine seems straight forward: add <em>0x22</em>, xor with <em>0x33</em>, and add <em>0xbc</em>. However, when looking at the assembly instructions, one can easily spot the difference, as can be seen in the code below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">ADD</span>  param_1<span class="sy1">,</span><span class="nu0">0x22</span>
<span class="kw1">XOR</span>  param_1<span class="sy1">,</span><span class="nu0">0x33</span>
<span class="kw1">SUB</span>  param_1<span class="sy1">,</span><span class="nu0">0x44</span></pre></div></div></div></div></div></div></div>


<p>The used variable names in the decompiler differ somewhat from the disassembly view, but the <em>param_1</em> variable in the code above, is the current byte in the loop. The last instruction subtracts <em>0x44</em>, rather than adding <em>0xbc</em>. Knowing this, the decryption routine can be re-made, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="coMULTI">/*
 * Decrypts the string based on the algorithm within the sample (SHA-256
 * 344fc6c3211e169593ab1345a5cfa9bcb46a4604fe61ab212c9316c0d72b0865, offset
 * 0x10002460)
 */</span>
<span class="kw1">private</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> decrypt<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">// Initialise the output variable</span>
    <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="co1">// Loop over the input and decrypt the given byte</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>input.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">+</span> 0x22<span class="br0">&#41;</span> <span class="sy0">^</span> 0x33<span class="br0">&#41;</span> <span class="sy0">-</span> 0x44<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="co1">// Return the decrypted output</span>
    <span class="kw1">return</span> output<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p><a name ="writing-the-ghidra-script"></a></p>
<h2><a href="#writing-the-ghidra-script">Writing the Ghidra script</a></h2>
<p>The script is based on <a href="https://twitter.com/0x6d696368">Mich</a>&#8216;s Python based <a href="https://github.com/0x6d696368/ghidra_scripts/blob/master/SimpleStackStrings.py">SimpleStackStrings</a> Ghidra script. The script in this article is written in Java, as this is Ghidra&#8217;s native way of scripting.</p>
<p>This script will use the currently selected address in Ghidra as a variable, rather than requesting input from the user to provide the address via one of the ask-related functions. The code for which is given below, where <em>currentAddress</em> is inherited from the <a href="https://ghidra.re/ghidra_docs/api/ghidra/app/script/GhidraScript.html">GhidraScript</a> class.</p>
<p>Next, the script needs to iterate over all instructions that are part of the stack string. The <em>Instruction</em> object has a function which returns the instruction that is directly below it, which is <em>getNext</em>. This function returns <em>null</em> if there is no instruction. As such, a while-loop with the condition that the instruction is not <em>null</em>. The skeleton code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">while</span><span class="br0">&#40;</span>instruction <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">//TODO: implement the logic</span>
&nbsp;
    instruction <span class="sy0">=</span> instruction.<span class="me1">getNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Instructions can contain a value, known as a scalar value. The value can be in the first or second part of the instruction. The code below provides two examples.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span> <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_var<span class="br0">&#93;</span><span class="sy1">,</span> <span class="nu0">0x41414141</span>
&nbsp;
<span class="kw1">PUSH</span> <span class="nu0">0x41414141</span></pre></div></div></div></div></div></div></div>


<p>In the first example, the value of <em>0x41414141</em> is the second scalar value, which resides at index <em>1</em>. In the second example, there is no second scalar value, meaning the value resides at index <em>0</em>.</p>
<p>As such, one can attempt to obtain the second scalar value, using the <em>getScalar(int index)</em> function within the <em>Instruction</em> class, of the current instruction. If there is no such value, <em>null</em> is returned. As such, one can always attempt to fetch the second scalar value. </p>
<p>If the returned value is <em>null</em>, an attempt needs to be made to fetch the first scalar value. If this also returns <em>null</em>, the instruction is not part of the stack string, at least not in a format that this script supports. The code below resembles the logic that is described above.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1">Scalar scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            println<span class="br0">&#40;</span><span class="st0">&quot;Stack string ended, since no suitable scalar value could be found at 0x&quot;</span>
                            <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>instruction.<span class="me1">getAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">break</span><span class="sy0">;</span>
         <span class="br0">&#125;</span>
    <span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Following on that, the scalar&#8217;s value needs to be obtained in hexadecimal format. The value then needs to be converted due to the endianness. The code is given below, where the <em>convert</em> function will be described afterwards.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw4">long</span> value <span class="sy0">=</span> scalar.<span class="me1">getValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">String</span> valueString <span class="sy0">=</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>
valueBytes.<span class="me1">addAll</span><span class="br0">&#40;</span>convert<span class="br0">&#40;</span>valueString<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The <em>convert</em> function, which is given below, takes a <em>String</em> as argument, and returns a list of boxed integers. Due to the endianness, the bytes need to be read from right-to-left. A byte is two characters from the string in size. To clarify, the value <em>0x41414141</em> consists of four bytes: <em>0x41 0x41 0x41 0x41</em>. In this case, the string does not contain the leading <em>0x</em>. To split the string up in bytes that are equal in value to their character counterpart (the value they portray, not their <em>char</em> value).</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> convert<span class="br0">&#40;</span><span class="kw3">String</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> scalarValue <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>input <span class="sy0">==</span> <span class="kw2">null</span> <span class="sy0">||</span> input.<span class="me1">isEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw4">int</span> remainder <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">%</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">if</span> <span class="br0">&#40;</span>remainder <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        input <span class="sy0">=</span> <span class="st0">&quot;0&quot;</span> <span class="sy0">+</span> input<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw4">int</span> j <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">||</span> j <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw1">break</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="kw3">String</span> b <span class="sy0">=</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>j, i<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw3">Integer</span> conversion <span class="sy0">=</span> <span class="kw3">Integer</span>.<span class="me1">parseInt</span><span class="br0">&#40;</span>b, <span class="nu0">16</span><span class="br0">&#41;</span><span class="sy0">;</span>
        scalarValue.<span class="me1">add</span><span class="br0">&#40;</span>conversion<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">return</span> scalarValue<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>If the amount of characters is not even, a leading zero needs to be added to the byte which is missing it, which is the least significant byte. The code responsible to do so is the within the if-body where the value of the <em>remainder</em> is checked.</p>
<p>The decryption function takes a list of integers as input, and returns an array of bytes. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> decrypt<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>input.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">+</span> 0x22<span class="br0">&#41;</span> <span class="sy0">^</span> 0x33<span class="br0">&#41;</span> <span class="sy0">-</span> 0x44<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">return</span> output<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>In the generic script, which does not handle string decryption, the <em>decrypt</em> function signature is the same, but the body is not. Instead, it simply converts the given list of integers into an unboxed byte array. This leaves the decryption function as a template for future use-cases in the generic script. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> decrypt<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> input.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span>.<span class="me1">byteValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">return</span> output<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>At last, the returned unboxed byte array is converted into multiple strings, all of which are based on a different character set. Since the character set is unknown to the script itself, numerous types are included. The analyst can then easily see which of the strings are garbage, and which is the correct string. The strings are then printed, together with some identifying information with regards to the character set. Additionally, the amount of bytes of the stack string is printed. This helps when changing the data type into an array of (wide) characters, where one knows the number of characters that is required for the string.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw3">String</span> usAscii <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">US_ASCII</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">String</span> isoLatin1 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">ISO_8859_1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">String</span> utf16be <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16BE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">String</span> utf16le <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16LE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">String</span> utf8 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_8</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;US-ASCII: &quot;</span> <span class="sy0">+</span> usAscii<span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;ISO-LATIN-1: &quot;</span> <span class="sy0">+</span> isoLatin1<span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16BE: &quot;</span> <span class="sy0">+</span> utf16be<span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16LE: &quot;</span> <span class="sy0">+</span> utf16le<span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;UTF-8: &quot;</span> <span class="sy0">+</span> utf8<span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;Length in bytes: &quot;</span> <span class="sy0">+</span> output.<span class="me1">length</span><span class="br0">&#41;</span><span class="sy0">;</span>
println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Do note that if the stack string consists of multiple strings before an invalid instruction is hit, all of them are shown at once. The analyst can see which string is what size, and rename and retype the variables accordingly. The following screenshots include such a case.</p>
<p>When viewing this in Ghidra&#8217;s console, it is apparent that some spaces that should be there, are not properly shown in the console. Note that this might not be the case in future Ghidra versions. </p>
<p>The images below show the output of Ghidra&#8217;s console, for one stack string from both CaddyWiper and PlugX Talisman respectively</p>
<figure id="attachment_4017" aria-describedby="caption-attachment-4017" style="width: 699px" class="wp-caption aligncenter"><img fetchpriority="high" decoding="async" src="https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string.png" alt="" width="709" height="228" class="size-full wp-image-4017" srcset="https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string.png 709w, https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string-300x96.png 300w" sizes="(max-width: 709px) 100vw, 709px" /><figcaption id="caption-attachment-4017" class="wp-caption-text">The script&#8217;s output in Ghidra&#8217;s console</figcaption></figure>
<figure id="attachment_4018" aria-describedby="caption-attachment-4018" style="width: 823px" class="wp-caption aligncenter"><img decoding="async" src="https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string_decryption.png" alt="" width="833" height="244" class="size-full wp-image-4018" srcset="https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string_decryption.png 833w, https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string_decryption-300x88.png 300w, https://maxkersten.nl/wp-content/uploads/2022/03/ghidra_output_stack_string_decryption-768x225.png 768w" sizes="(max-width: 833px) 100vw, 833px" /><figcaption id="caption-attachment-4018" class="wp-caption-text">The script&#8217;s decrypted output in Ghidra&#8217;s console</figcaption></figure>
<p>When viewing the same stack strings in Eclipse&#8217;s console, the missing spaces are clearly visible, which is a clear indication that some of the stack strings are wide strings, whereas others are not.</p>
<figure id="attachment_4015" aria-describedby="caption-attachment-4015" style="width: 868px" class="wp-caption aligncenter"><img decoding="async" src="https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string.png" alt="" width="878" height="173" class="size-full wp-image-4015" srcset="https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string.png 878w, https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string-300x59.png 300w, https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string-768x151.png 768w" sizes="(max-width: 878px) 100vw, 878px" /><figcaption id="caption-attachment-4015" class="wp-caption-text">The script&#8217;s output in Eclipse&#8217;s console</figcaption></figure>
<figure id="attachment_4016" aria-describedby="caption-attachment-4016" style="width: 850px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" src="https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string_decryption.png" alt="" width="860" height="157" class="size-full wp-image-4016" srcset="https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string_decryption.png 860w, https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string_decryption-300x55.png 300w, https://maxkersten.nl/wp-content/uploads/2022/03/eclipse_output_stack_string_decryption-768x140.png 768w" sizes="auto, (max-width: 860px) 100vw, 860px" /><figcaption id="caption-attachment-4016" class="wp-caption-text">The script&#8217;s decrypted output in Eclipse&#8217;s console</figcaption></figure>
<p><a name ="conclusion"></a></p>
<h2><a href="#conclusion">Conclusion</a></h2>
<p>To conclude, the usage of encrypted stack strings is an efficient way to evade more generic detection, but does not slow analysis down much. The automation to swiftly see what the string is by selecting the string&#8217;s start in the assembly view, whose decrypted value is then printed when the script is executed via a hotkey takes very little time.</p>
<p>Recreating the decryption routine might consume some time, but in most cases, encrypted stack strings are generally decrypted using the same routine within a single sample. As such, the time to recreate the decryption routine is likely to end up saving time overall.</p>
<p><a name ="complete-script"></a></p>
<h2><a href="#complete-script">Complete script</a></h2>
<p>The complete script to handle encrypted (wide) stack strings is given below. The generic stack strings script is given first, after which the PlugX Talisman script is given.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//A script to recreate (wide) stack strings in PlugX Talisman samples, based on Mich's SimpleStackStrings (https://github.com/0x6d696368/ghidra_scripts/blob/master/SimpleStackStrings.py)</span>
<span class="co1">//@author Max 'Libra' Kersten</span>
<span class="co1">//@category deobfuscation</span>
<span class="co1">//@keybinding</span>
<span class="co1">//@menupath</span>
<span class="co1">//@toolbar</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">java.nio.charset.StandardCharsets</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.ArrayList</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.List</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">ghidra.app.script.GhidraScript</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.listing.Instruction</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.scalar.Scalar</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> StackStrings <span class="kw1">extends</span> GhidraScript <span class="br0">&#123;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> run<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">Exception</span> <span class="br0">&#123;</span>
        <span class="co1">// Get the starting instruction</span>
        Instruction instruction <span class="sy0">=</span> getInstructionAt<span class="br0">&#40;</span>currentAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Check if there is an instruction at the current location</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>instruction <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="co1">// Print the error message</span>
            println<span class="br0">&#40;</span><span class="st0">&quot;No instruction found at 0x&quot;</span> <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>currentAddress.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Return, thus ending the execution of the script</span>
            <span class="kw1">return</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// If an instruction is found, print the starting offset</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;Stack string starting at 0x&quot;</span> <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>currentAddress.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Initialise the list to store the stack string bytes in</span>
        List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> valueBytes <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * Loop over the current instructions (and the ones thereafter) until no
         * instruction is found, or the loop is broken
         */</span>
        <span class="kw1">while</span> <span class="br0">&#40;</span>instruction <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="coMULTI">/*
             * Get the second scalar value from the instruction. When encountering
             * instructions such as &quot;MOV dword ptr [ESP + local_var], 0x41414141&quot;, the
             * second scalar value is the second value.
             */</span>
            Scalar scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// If the second scalar value is null, revert to the value of the first scalar</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                <span class="coMULTI">/*
                 * Store the first scalar value, which is present instructions such as
                 * &quot;PUSH 0x41414141&quot;
                 */</span>
                scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="coMULTI">/*
                 * If there is no scalar value, the encountered instruction is not part of the
                 * (wide) stack string
                 */</span>
                <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                    <span class="coMULTI">/*
                     * Print the error, along with the address of the instruction which contains no
                     * suitable scalar value
                     */</span>
                    println<span class="br0">&#40;</span><span class="st0">&quot;Stack string ended, since no suitable scalar value could be found at 0x&quot;</span>
                            <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>instruction.<span class="me1">getAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="co1">// Break the loop, continuing the decryption and string re-creation process</span>
                    <span class="kw1">break</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#125;</span>
&nbsp;
            <span class="co1">// Get the scalar's value</span>
            <span class="kw4">long</span> value <span class="sy0">=</span> scalar.<span class="me1">getValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Get the value in hexadecimal format</span>
            <span class="kw3">String</span> valueString <span class="sy0">=</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// Add all the bytes to the list once they are converted</span>
            valueBytes.<span class="me1">addAll</span><span class="br0">&#40;</span>convert<span class="br0">&#40;</span>valueString<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// Gets the next instruction</span>
            instruction <span class="sy0">=</span> instruction.<span class="me1">getNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="coMULTI">/*
         * Decrypt the collected bytes. If no decryption is required when re-using this
         * script, simply convert the list of bytes into an unboxed byte array, after
         * which the existing logic will handle the rest
         */</span>
        <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>valueBytes<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * Create a variety of strings, based on the given bytes. If multiple stack
         * strings are present in sequence, it is possible that the strings represent
         * more than a single stack string. This is left to the analyst's
         * interpretation.
         * 
         * To make the script more generic, the strings are recreated using a variety of
         * character sets. Some stack strings might consist of wide strings, whereas
         * others might be of a more unique format. Generally, the common formats such
         * as UTF-8 and UTF-16 will be used, as the Windows API uses those.
         */</span>
        <span class="kw3">String</span> usAscii <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">US_ASCII</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> isoLatin1 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">ISO_8859_1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf16be <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16BE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf16le <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16LE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf8 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_8</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Print all of the stack strings</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;US-ASCII: &quot;</span> <span class="sy0">+</span> usAscii<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;ISO-LATIN-1: &quot;</span> <span class="sy0">+</span> isoLatin1<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16BE: &quot;</span> <span class="sy0">+</span> utf16be<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16LE: &quot;</span> <span class="sy0">+</span> utf16le<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-8: &quot;</span> <span class="sy0">+</span> utf8<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;Length in bytes: &quot;</span> <span class="sy0">+</span> output.<span class="me1">length</span><span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="co3">/**
     * Converts the given input string to a list of bytes. The input string should
     * be equal to hexadecimal values, without the leading &quot;0x&quot;.
     * 
     * @param input a string which contains the hexadecimal values, without the
     *              leading &quot;0x&quot;
     * @return a list of bytes, read as little endian (right from left, per byte)
     */</span>
    <span class="kw1">private</span> List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> convert<span class="br0">&#40;</span><span class="kw3">String</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">// Initialise the list of bytes</span>
        List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> scalarValue <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">// If the input is null, or empty, null is returned</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>input <span class="sy0">==</span> <span class="kw2">null</span> <span class="sy0">||</span> input.<span class="me1">isEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// Check if the length input is a multitude of two</span>
        <span class="kw4">int</span> remainder <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">%</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * If the length of the string is not equal to one, add a leading zero to the
         * last character
         */</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>remainder <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw4">int</span> offset <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
            <span class="kw3">String</span> partA <span class="sy0">=</span> input.<span class="me1">substring</span><span class="br0">&#40;</span><span class="nu0">0</span>, offset<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw3">String</span> partB <span class="sy0">=</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>offset, offset <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
            input <span class="sy0">=</span> partA <span class="sy0">+</span> <span class="st0">&quot;0&quot;</span> <span class="sy0">+</span> partB<span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="coMULTI">/*
         * Iterate over the string in groups of two characters at a time, which
         * represents a single byte every time. The string is iterated over starting in
         * the end, due to the endianness
         */</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw4">int</span> j <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span>
            <span class="co1">// If i is zero or j is less than zero, the loop has to be broken</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">||</span> j <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                <span class="kw1">break</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
            <span class="co1">// Obtain the byte in string form</span>
            <span class="kw3">String</span> b <span class="sy0">=</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>j, i<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Convert the byte in string form to a boxed byte object</span>
            <span class="kw3">Integer</span> conversion <span class="sy0">=</span> <span class="kw3">Integer</span>.<span class="me1">parseInt</span><span class="br0">&#40;</span>b, <span class="nu0">16</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Add the byte to the list of bytes, in sequential order</span>
            scalarValue.<span class="me1">add</span><span class="br0">&#40;</span>conversion<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="co1">// Return the obtained bytes</span>
        <span class="kw1">return</span> scalarValue<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="coMULTI">/*
     * A function to hold the decryption routine for the given sample, if any
     */</span>
    <span class="kw1">private</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> decrypt<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">// Initialise the output variable</span>
        <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
        <span class="co1">// Loop over the input and convert the given byte</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> input.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span>.<span class="me1">byteValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="co1">// Return the converted output</span>
        <span class="kw1">return</span> output<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The PlugX Talisman stack string decryption script is given below in full.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//A script to recreate (wide) stack strings in PlugX' Talisman variant, based on Mich's SimpleStackStrings (https://github.com/0x6d696368/ghidra_scripts/blob/master/SimpleStackStrings.py)</span>
<span class="co1">//@author Max 'Libra' Kersten (@Libranalysis, https://maxkersten.nl)</span>
<span class="co1">//@category deobfuscation</span>
<span class="co1">//@keybinding</span>
<span class="co1">//@menupath</span>
<span class="co1">//@toolbar</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">java.nio.charset.StandardCharsets</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.ArrayList</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.List</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">ghidra.app.script.GhidraScript</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.listing.Instruction</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.scalar.Scalar</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> TalismanStackStringDecryption <span class="kw1">extends</span> GhidraScript <span class="br0">&#123;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> run<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">Exception</span> <span class="br0">&#123;</span>
        <span class="co1">// Get the starting instruction</span>
        Instruction instruction <span class="sy0">=</span> getInstructionAt<span class="br0">&#40;</span>currentAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Check if there is an instruction at the current location</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>instruction <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="co1">// Print the error message</span>
            println<span class="br0">&#40;</span><span class="st0">&quot;No instruction found at 0x&quot;</span> <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>currentAddress.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Return, thus ending the execution of the script</span>
            <span class="kw1">return</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// If an instruction is found, print the starting offset</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;Stack string starting at 0x&quot;</span> <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>currentAddress.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Initialise the list to store the stack string bytes in</span>
        List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> valueBytes <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * Loop over the current instructions (and the ones thereafter) until no
         * instruction is found, or the loop is broken
         */</span>
        <span class="kw1">while</span> <span class="br0">&#40;</span>instruction <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="coMULTI">/*
             * Get the second scalar value from the instruction. When encountering
             * instructions such as &quot;MOV dword ptr [ESP + local_var], 0x41414141&quot;, the
             * second scalar value is the second value.
             */</span>
            Scalar scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// If the second scalar value is null, revert to the value of the first scalar</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                <span class="coMULTI">/*
                 * Store the first scalar value, which is present instructions such as
                 * &quot;PUSH 0x41414141&quot;
                 */</span>
                scalar <span class="sy0">=</span> instruction.<span class="me1">getScalar</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="coMULTI">/*
                 * If there is no scalar value, the encountered instruction is not part of the
                 * (wide) stack string
                 */</span>
                <span class="kw1">if</span> <span class="br0">&#40;</span>scalar <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                    <span class="coMULTI">/*
                     * Print the error, along with the address of the instruction which contains no
                     * suitable scalar value
                     */</span>
                    println<span class="br0">&#40;</span><span class="st0">&quot;Stack string ended, since no suitable scalar value could be found at 0x&quot;</span>
                            <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>instruction.<span class="me1">getAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="co1">// Break the loop, continuing the decryption and string re-creation process</span>
                    <span class="kw1">break</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#125;</span>
&nbsp;
            <span class="co1">// Get the scalar's value</span>
            <span class="kw4">long</span> value <span class="sy0">=</span> scalar.<span class="me1">getValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Get the value in hexadecimal format</span>
            <span class="kw3">String</span> valueString <span class="sy0">=</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// Add all the bytes to the list once they are converted</span>
            valueBytes.<span class="me1">addAll</span><span class="br0">&#40;</span>convert<span class="br0">&#40;</span>valueString<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// Gets the next instruction</span>
            instruction <span class="sy0">=</span> instruction.<span class="me1">getNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="coMULTI">/*
         * Decrypt the collected bytes. If no decryption is required when re-using this
         * script, simply convert the list of bytes into an unboxed byte array, after
         * which the existing logic will handle the rest
         */</span>
        <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>valueBytes<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * Create a variety of strings, based on the given bytes. If multiple stack
         * strings are present in sequence, it is possible that the strings represent
         * more than a single stack string. This is left to the analyst's
         * interpretation.
         * 
         * To make the script more generic, the strings are recreated using a variety of
         * character sets. Some stack strings might consist of wide strings, whereas
         * others might be of a more unique format. Generally, the common formats such
         * as UTF-8 and UTF-16 will be used, as the Windows API uses those.
         */</span>
        <span class="kw3">String</span> usAscii <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">US_ASCII</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> isoLatin1 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">ISO_8859_1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf16be <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16BE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf16le <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_16LE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw3">String</span> utf8 <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output, StandardCharsets.<span class="me1">UTF_8</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Print all of the stack strings</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;US-ASCII: &quot;</span> <span class="sy0">+</span> usAscii<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;ISO-LATIN-1: &quot;</span> <span class="sy0">+</span> isoLatin1<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16BE: &quot;</span> <span class="sy0">+</span> utf16be<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-16LE: &quot;</span> <span class="sy0">+</span> utf16le<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;UTF-8: &quot;</span> <span class="sy0">+</span> utf8<span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;Length in bytes: &quot;</span> <span class="sy0">+</span> output.<span class="me1">length</span><span class="br0">&#41;</span><span class="sy0">;</span>
        println<span class="br0">&#40;</span><span class="st0">&quot;-------------------------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="co3">/**
     * Converts the given input string to a list of bytes. The input string should
     * be equal to hexadecimal values, without the leading &quot;0x&quot;.
     * 
     * @param input a string which contains the hexadecimal values, without the
     *              leading &quot;0x&quot;
     * @return a list of bytes, read as little endian (right from left, per byte)
     */</span>
    <span class="kw1">private</span> List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> convert<span class="br0">&#40;</span><span class="kw3">String</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">// Initialise the list of bytes</span>
        List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> scalarValue <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">// If the input is null, or empty, null is returned</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>input <span class="sy0">==</span> <span class="kw2">null</span> <span class="sy0">||</span> input.<span class="me1">isEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="co1">// Check if the length input is a multitude of two</span>
        <span class="kw4">int</span> remainder <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">%</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
        <span class="coMULTI">/*
         * If the length of the string is not equal to one, add a leading zero to the
         * last character
         */</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>remainder <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            input <span class="sy0">=</span> <span class="st0">&quot;0&quot;</span> <span class="sy0">+</span> input<span class="sy0">;</span>
        <span class="br0">&#125;</span>
&nbsp;
        <span class="coMULTI">/*
         * Iterate over the string in groups of two characters at a time, which
         * represents a single byte every time. The string is iterated over starting in
         * the end, due to the endianness
         */</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> input.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw4">int</span> j <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span>
            <span class="co1">// If i is zero or j is less than zero, the loop has to be broken</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">||</span> j <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                <span class="kw1">break</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
            <span class="co1">// Obtain the byte in string form</span>
            <span class="kw3">String</span> b <span class="sy0">=</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>j, i<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Convert the byte in string form to a boxed integer object</span>
            <span class="kw3">Integer</span> conversion <span class="sy0">=</span> <span class="kw3">Integer</span>.<span class="me1">parseInt</span><span class="br0">&#40;</span>b, <span class="nu0">16</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// Add the byte to the list of bytes, in sequential order</span>
            scalarValue.<span class="me1">add</span><span class="br0">&#40;</span>conversion<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="co1">// Return the obtained bytes</span>
        <span class="kw1">return</span> scalarValue<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="coMULTI">/*
     * Decrypts the string based on the algorithm within the sample (SHA-256
     * 344fc6c3211e169593ab1345a5cfa9bcb46a4604fe61ab212c9316c0d72b0865, offset
     * 0x10002460)
     */</span>
    <span class="kw1">private</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> decrypt<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">// Initialise the output variable</span>
        <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
        <span class="co1">// Loop over the input and decrypt the given byte</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>input.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">+</span> 0x22<span class="br0">&#41;</span> <span class="sy0">^</span> 0x33<span class="br0">&#41;</span> <span class="sy0">-</span> 0x44<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="co1">// Return the decrypted output</span>
        <span class="kw1">return</span> output<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<hr />
<p>To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], or DM me on Twitter <a href="https://twitter.com/Libranalysis">@Libranalysis</a>.</p>
					</div><!-- .entry-content -->
			</div><!-- .inside-article -->
</article><!-- #post-## -->

				
								</main><!-- #main -->
	</div><!-- #primary -->

<div id="right-sidebar" itemtype="http://schema.org/WPSideBar" itemscope="itemscope" role="complementary" class="widget-area grid-25 tablet-grid-25 grid-parent sidebar">
	<div class="inside-right-sidebar">
				
		<aside id="recent-posts-2" class="widget inner-padding widget_recent_entries">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://maxkersten.nl/2024/11/27/ghidra-tip-0x08-scripting-with-microservices/">Ghidra Tip 0x08: Scripting with microservices</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/10/31/ghidra-tip-0x07-iterating-over-all-strings-in-a-program/">Ghidra Tip 0x07: Iterating over all strings in a Program</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/09/28/ghidra-tip-0x06-domainfiles-in-projects/">Ghidra Tip 0x06: DomainFiles in Projects</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/08/18/my-impression-of-tdi-2024-blackhat-usa-2024-and-defcon-32/">My impression of TDI 2024, BlackHat USA 2024 and DEFCON 32</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/06/30/ghidra-tip-0x05-headless-execution/">Ghidra Tip 0x05: Headless execution</a>
									</li>
					</ul>

		</aside><aside id="archives-2" class="widget inner-padding widget_archive"><h4 class="widget-title">Archives</h4>
			<ul>
					<li><a href='https://maxkersten.nl/2024/11/'>November 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/10/'>October 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/09/'>September 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/08/'>August 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/06/'>June 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/05/'>May 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/04/'>April 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/03/'>March 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/02/'>February 2024</a></li>
	<li><a href='https://maxkersten.nl/2023/08/'>August 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/05/'>May 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/04/'>April 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/03/'>March 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/02/'>February 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/01/'>January 2023</a></li>
	<li><a href='https://maxkersten.nl/2022/12/'>December 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/11/'>November 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/10/'>October 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/09/'>September 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/08/'>August 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/07/'>July 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/06/'>June 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/05/'>May 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/04/'>April 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/03/'>March 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/02/'>February 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/01/'>January 2022</a></li>
	<li><a href='https://maxkersten.nl/2021/12/'>December 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/11/'>November 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/10/'>October 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/09/'>September 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/08/'>August 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/07/'>July 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/06/'>June 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/05/'>May 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/04/'>April 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/03/'>March 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/02/'>February 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/01/'>January 2021</a></li>
	<li><a href='https://maxkersten.nl/2020/12/'>December 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/11/'>November 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/10/'>October 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/09/'>September 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/08/'>August 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/07/'>July 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/06/'>June 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/05/'>May 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/04/'>April 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/03/'>March 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/02/'>February 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/01/'>January 2020</a></li>
	<li><a href='https://maxkersten.nl/2019/12/'>December 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/11/'>November 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/10/'>October 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/09/'>September 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/08/'>August 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/07/'>July 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/06/'>June 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/05/'>May 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/04/'>April 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/03/'>March 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/02/'>February 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/01/'>January 2019</a></li>
	<li><a href='https://maxkersten.nl/2018/12/'>December 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/11/'>November 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/10/'>October 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/09/'>September 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/08/'>August 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/07/'>July 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/06/'>June 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/01/'>January 2018</a></li>
	<li><a href='https://maxkersten.nl/2017/10/'>October 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/07/'>July 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/06/'>June 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/05/'>May 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/04/'>April 2017</a></li>
			</ul>

			</aside><aside id="categories-2" class="widget inner-padding widget_categories"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-10"><a href="https://maxkersten.nl/category/androidprojectcreator/">AndroidProjectCreator</a>
</li>
	<li class="cat-item cat-item-16"><a href="https://maxkersten.nl/category/api-clients/">API Clients</a>
</li>
	<li class="cat-item cat-item-9"><a href="https://maxkersten.nl/category/binary-analysis-course/">Binary Analysis Course</a>
</li>
	<li class="cat-item cat-item-4"><a href="https://maxkersten.nl/category/capricorn/">Capricorn</a>
</li>
	<li class="cat-item cat-item-18"><a href="https://maxkersten.nl/category/conferences/">Conferences</a>
</li>
	<li class="cat-item cat-item-3"><a href="https://maxkersten.nl/category/ethics/">Ethics</a>
</li>
	<li class="cat-item cat-item-2"><a href="https://maxkersten.nl/category/gemini/">Gemini</a>
</li>
	<li class="cat-item cat-item-6"><a href="https://maxkersten.nl/category/lectures/">Lectures</a>
</li>
	<li class="cat-item cat-item-19"><a href="https://maxkersten.nl/category/libras-ghidra-library/">Libra&#039;s Ghidra Library</a>
</li>
	<li class="cat-item cat-item-17"><a href="https://maxkersten.nl/category/m3/">m3</a>
</li>
	<li class="cat-item cat-item-15"><a href="https://maxkersten.nl/category/magecart/">MageCart</a>
</li>
	<li class="cat-item cat-item-13"><a href="https://maxkersten.nl/category/malpull/">MalPull</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://maxkersten.nl/category/malware-analysis/">Malware Analysis</a>
</li>
	<li class="cat-item cat-item-14"><a href="https://maxkersten.nl/category/malwaretheflag/">MalwareTheFlag</a>
</li>
	<li class="cat-item cat-item-11"><a href="https://maxkersten.nl/category/responsible-disclosure/">Responsible Disclosure</a>
</li>
	<li class="cat-item cat-item-12"><a href="https://maxkersten.nl/category/reviews/">Reviews</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://maxkersten.nl/category/uncategorized/">Uncategorized</a>
</li>
	<li class="cat-item cat-item-5"><a href="https://maxkersten.nl/category/web-hacking/">Web hacking</a>
</li>
	<li class="cat-item cat-item-7"><a href="https://maxkersten.nl/category/whitepapers/">Whitepapers</a>
</li>
			</ul>

			</aside>			</div><!-- .inside-right-sidebar -->
</div><!-- #secondary -->
	</div><!-- #content -->
</div><!-- #page -->
<div class="site-footer  ">
		<footer class="site-info" itemtype="http://schema.org/WPFooter" itemscope="itemscope">
		<div class="inside-site-info grid-container grid-parent">
						<div class="copyright-bar">
				<span class="copyright">&copy; 2024</span> &bull; <a href="https://generatepress.com" target="_blank" itemprop="url">GeneratePress</a>			</div>
		</div>
	</footer><!-- .site-info -->
	</div><!-- .site-footer -->

<a title="Scroll back to top" rel="nofollow" href="#" class="generate-back-to-top" style="opacity:0;visibility:hidden;" data-scroll-speed="400" data-start-scroll="300">
			<i class="fa fa-angle-up" aria-hidden="true"></i>
			<span class="screen-reader-text">Scroll back to top</span>
		</a><script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/navigation.min.js?ver=1.3.46" id="generate-navigation-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/dropdown.min.js?ver=1.3.46" id="generate-dropdown-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/back-to-top.min.js?ver=1.3.46" id="generate-back-to-top-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/html5shiv.min.js?ver=1.3.46" id="generate-html5-js"></script>
<![endif]-->

</body>
</html>