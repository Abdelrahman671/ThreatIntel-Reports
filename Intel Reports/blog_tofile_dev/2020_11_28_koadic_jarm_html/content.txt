<!DOCTYPE html>
<html lang="en"><head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="theme-color" content="#ffe4d7">
    <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Hunting Koadic Pt. 2 - JARM Fingerprinting | pat_h/to/file</title>
<meta name="generator" content="Jekyll v3.10.0" />
<meta property="og:title" content="Hunting Koadic Pt. 2 - JARM Fingerprinting" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Hunting Koadic Pt. 2 - JARM Fingerprinting" />
<meta property="og:description" content="Hunting Koadic Pt. 2 - JARM Fingerprinting" />
<link rel="canonical" href="https://blog.tofile.dev/2020/11/28/koadic_jarm.html" />
<meta property="og:url" content="https://blog.tofile.dev/2020/11/28/koadic_jarm.html" />
<meta property="og:site_name" content="pat_h/to/file" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2020-11-28T06:00:00-06:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Hunting Koadic Pt. 2 - JARM Fingerprinting" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2020-11-28T06:00:00-06:00","datePublished":"2020-11-28T06:00:00-06:00","description":"Hunting Koadic Pt. 2 - JARM Fingerprinting","headline":"Hunting Koadic Pt. 2 - JARM Fingerprinting","mainEntityOfPage":{"@type":"WebPage","@id":"https://blog.tofile.dev/2020/11/28/koadic_jarm.html"},"url":"https://blog.tofile.dev/2020/11/28/koadic_jarm.html"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css">
    <link rel="shortcut icon" type="image/png" href="/assets/favicon.png"><link type="application/atom+xml" rel="alternate" href="https://blog.tofile.dev/feed.xml" title="pat_h/to/file" /></head>
<body><header class="site-header" role="banner">
    <script data-goatcounter="https://stats.tofile.dev/count" async src="//stats.tofile.dev/count.js"></script>
    <div class="wrapper"><a class="site-title" rel="author" href="/">pat_h/to/file</a><nav class="site-nav">
          <input type="checkbox" id="nav-trigger" class="nav-trigger" />
          <label for="nav-trigger">
            <span class="menu-icon">
              <svg viewBox="0 0 18 15" width="18px" height="15px">
                <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
              </svg>
            </span>
          </label>
  
          <div class="trigger"><a class="page-link" href="/categories/">Categories</a><a class="page-link" href="/talks/">Talks</a><a class="page-link" href="/about/">About Me</a><a class="page-link" href="/security/">Security And Privacy</a></div>
        </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Hunting Koadic Pt. 2 - JARM Fingerprinting</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2020-11-28T06:00:00-06:00" itemprop="datePublished">Nov 28, 2020
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <p><a href="https://blog.tofile.dev/2019/12/03/koadic.html">A year ago</a>, I looked into <a href="https://github.com/zerosum0x0/koadic">Koadic C2</a>, a post-exploitation tool used by APTs and Pentesters alike.</p>

<p>At the time, I was able to fingerprint all non-fronted Koadic C2 servers across the internet, due to
mismatches in it‚Äôs 404 page, where it fails to make the server look like a benign Apache web server.</p>

<p>Koadic hasn‚Äôt had many updates in the last 12 months, but in the meantime Salesforce have released <a href="https://github.com/salesforce/jarm">JARM</a>, a method of fingerprinting TLS Servers. According to Salesforce, it works by querying the server in various ways to gather information about things such:</p>
<ul>
  <li>Operating system</li>
  <li>Operating system version</li>
  <li>Libraries used</li>
  <li>Versions of those libraries used</li>
  <li>The order in which the libraries were called</li>
  <li>Custom configuration</li>
</ul>

<p>I wanted to revisit Koadic, and see if JARM would be able to pick up the C2 server as good as or better than my 404 analysis.</p>

<h1 id="step-1-get-koadics-jarm">Step 1. Get Koadic‚Äôs JARM</h1>
<p>Koadic C2 is written in Python, so already what OS we run it on will have an impact on it‚Äôs JARM signature. But I decided to run it
on an Ubuntu server, as that was probably a common place it was deployed.</p>

<p>First I started a Koadic Server, making sure to run it over HTTPS:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First Create TLS keypair for the websever</span>
<span class="c"># enter a password and enter defaults for everything else</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>openssl git python3 python3-pip
openssl req <span class="nt">-x509</span> <span class="nt">-newkey</span> rsa:4096 <span class="nt">-days</span> 365 <span class="nt">-keyout</span> koadic-key.pem <span class="nt">-out</span> koadic-cert.pem

<span class="c"># Clone Koadic and install dependecies</span>
git clone https://github.com/zerosum0x0/koadic.git
<span class="nb">cd </span>koadic
pip3 <span class="nb">install</span> <span class="nt">-r</span> requirements.txt

<span class="c"># Start Koadic and run the server in in HTTPS mode:</span>
./koadic
<span class="nb">set </span>SRVHOST 127.0.0.1
<span class="nb">set </span>SRVPORT 8000
<span class="nb">set </span>KEYPATH ../koadic-key.pem
<span class="nb">set </span>CERTPATH ../koadic-cert.pem
run
</code></pre></div></div>

<p>Then I grabbed the JARM tools from SalesForce and calculated my server‚Äôs fingerprint:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/salesforce/jarm.git
<span class="nb">cd </span>jarm
python3 jarm.py 127.0.0.1 <span class="nt">-p</span> 8000
</code></pre></div></div>

<p>My Result:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JARM: 2ad2ad0002ad2ad00042d42d000000ad9bf51cc3f5a1e29eecb81d0c7b06eb
</code></pre></div></div>

<h1 id="step-2-search-for-jarm-fingerprint">Step 2. Search for JARM Fingerprint</h1>
<p>Shodan is currently looking to implement JARM fingerprinting, but it doesn‚Äôt do so currently.</p>

<p>Thankfully, <a href="https://twitter.com/silascutler/status/1331590681408704512">Silascutler</a> on Twitter
recently did an internet scan and generated JARM fingerprints from all hosts listening on port 443.</p>

<p>This isn‚Äôt going to see all servers, but it‚Äôs a place to start, so I grabbed their archive and looked
for our JARM signature:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First got a sample of the data to find the format</span>
zcat 202011-443_fingerprint.json.gz | <span class="nb">head</span> <span class="nt">-n</span> 10 <span class="o">&gt;</span> sample.json

<span class="c"># Format was very simple and 1 event per line, so can just use zgrep</span>
<span class="c"># Keep data gzipped in case there are lots of hits</span>
zgrep <span class="s1">'"fingerprint":"2ad2ad0002ad2ad00042d42d000000ad9bf51cc3f5a1e29eecb81d0c7b06eb"'</span> 202011-443_fingerprint.json.gz | <span class="nb">gzip</span> <span class="o">&gt;</span> koadic_filtered.json.gz

<span class="c"># Get a count of the number of entries</span>
zcat koadic_filtered.json.gz | <span class="nb">wc</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>When I ran the last line, it listed 16,268 hits of our fingerprint üòê</p>

<h1 id="so-why-didnt-this-work">So Why didn‚Äôt this work?</h1>
<p>16,000 hits is way too high a number to be all Koadic servers, so I did some investigation into why I got so many false positives.
I grapped the IP addresses from the first 10 entries in the list:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Get the first 10 entries in plain text</span>
zcat koadic_filtered.json.gz | <span class="nb">head</span> <span class="nt">-n</span> 10 <span class="o">&gt;</span> possible_koadic.json

<span class="c"># jq is a great tool to pretty-print JSON from the commandline</span>
<span class="c"># but if you don't have it you could also just use cat/vin/notepad</span>
<span class="c"># and strain your eyeballs for a bit</span>
<span class="nb">cat </span>possible_koadic.json | jq <span class="nt">-r</span> <span class="s1">'.ip'</span>
</code></pre></div></div>

<p>And then just looked up these IP addresses in Shodan. Our data might be slightly stale,
but hopefully it can give us some indication as to what went wrong.</p>

<p>The data from Shodan starts to paint a picture of what has happened: A number of the IP addresses
returned headers like the following:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Server: Python/3.8 aiohttp/3.6.2
Server: Python/3.8 aiohttp/3.7.1
Server: Python/3.8 aiohttp/3.6.1
</code></pre></div></div>

<p>We know Koadic C2 is written in Python, so it is possibly just running the default Python web server, which would
mean the fingerprint is not Koadic‚Äôs, but Python‚Äôs.</p>

<p>Sure enough, we can create a simple Python TLS Server using the inbuilt <code class="language-plaintext highlighter-rouge">http.server</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">http.server</span> <span class="kn">import</span> <span class="n">HTTPServer</span><span class="p">,</span> <span class="n">BaseHTTPRequestHandler</span>
<span class="kn">import</span> <span class="nn">ssl</span>

<span class="n">httpd</span> <span class="o">=</span> <span class="n">HTTPServer</span><span class="p">((</span><span class="s">'localhost'</span><span class="p">,</span> <span class="mi">8000</span><span class="p">),</span> <span class="n">BaseHTTPRequestHandler</span><span class="p">)</span>
<span class="n">httpd</span><span class="p">.</span><span class="n">socket</span> <span class="o">=</span> <span class="n">ssl</span><span class="p">.</span><span class="n">wrap_socket</span> <span class="p">(</span><span class="n">httpd</span><span class="p">.</span><span class="n">socket</span><span class="p">,</span> 
        <span class="n">keyfile</span><span class="o">=</span><span class="s">"koadic-key.pem"</span><span class="p">,</span> 
        <span class="n">certfile</span><span class="o">=</span><span class="s">"koadic-cert.pem"</span><span class="p">,</span> <span class="n">server_side</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Stating Server https://localhost:8000"</span><span class="p">)</span>
<span class="n">httpd</span><span class="p">.</span><span class="n">serve_forever</span><span class="p">()</span>
</code></pre></div></div>

<p>By running that code, then running JARM, we get the exact same fingerprint:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JARM: 2ad2ad0002ad2ad00042d42d000000ad9bf51cc3f5a1e29eecb81d0c7b06eb
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>
<p>JARM definitely looks to be an interesting addition to the TLS Fingerprinting suite, alongside the client
fingerprinting tool <a href="https://github.com/salesforce/ja3">JA3</a>. But it won‚Äôt pick up all malicious servers.</p>

<p>On top of this example of a known-bad server using language defaults to look benign, the more common issue will be
that a lot of C2 servers sit behind legitimate web server reverse-proxies, such as Apache HTTPd or NGinx.</p>

<p>This means the JARM fingerprints will match only the legitimate outer layer, and not the C2 server‚Äôs fingerprint that
sits behind the legitimate servers.</p>

  </div><a class="u-url" href="/2020/11/28/koadic_jarm.html" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">pat_h/to/file</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">pat_h/to/file</li><li><a class="u-email" href="mailto:path[at]tofile[dot]dev">path[at]tofile[dot]dev</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/pathtofile"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">pathtofile</span></a></li><li><a href="https://www.twitter.com/pathtofile"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#twitter"></use></svg> <span class="username">pathtofile</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>PatH&#39;s infosec blog</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
