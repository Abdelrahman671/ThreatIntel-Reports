Whitepaper Name 
Goes Here
SUBHEAD
Facebook 
Malvertising 
Epidemic
UNRAVELING A PERSISTENT THREAT: SYS01 - PART 1 
2
Facebook Malvertising Epidemic
Contents
Facebook Malvertising Epidemic‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  4
SYS01 Threat Overview‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  5
Delivery of SYS01 Infostealer‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  6
Reconnaissance‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  6
T1583.008 - Acquire Infrastructure: Malvertising ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  6
T1583 - Acquire Infrastructure‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  7
T1585.001 - Establish Accounts: Social Media Accounts‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  10
Initial Access ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  12
T1189 - Drive-by Compromise‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  12
Execution‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  14
T1204.002- User Execution: Malicious File‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  14
Defense Evasion ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  16
T1574.002 - Hijack Execution Flow: DLL Side-Loading‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  16
T1027.002 - Obfuscated Files or Information: Software Packing ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  17
T1140 - Deobfuscate/Decode Files or Information‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  18
T1027.013 - Obfuscated Files or Information: Encrypted/Encoded File‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 20
T1497 - Virtualization/Sandbox Evasion ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 22
T1562.001 - Impair Defenses: Disable or Modify Tools‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 23
T1036.003 - Masquerading: Rename System Utilities ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 24
T1564.001 - Hide Artifacts: Hidden Files and Directories‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 24
Execution‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  25
T1059.001 - Command and Scripting Interpreter: PowerShell‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 25
T1059.005 - Command and Scripting Interpreter: Visual Basic‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 28
3
Facebook Malvertising Epidemic
SYS01 Payload Staging‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 29
include.php‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 32
Persistence‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 32
T1053.005 - Scheduled Task/Job: Scheduled Task‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 32
index.php ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 35
Main Commands‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 35
Defense Evasion‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 36
T1027.013 - Obfuscated Files or Information: Encrypted/Encoded File‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 36
T1497 - Virtualization/Sandbox Evasion‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ ‧ 
37
Discovery‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 38
T1082 - System Information Discovery ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 38
T1217 - Browser Information Discovery‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 40
Credential Access ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 43
T1539 - Steal Web Session Cookie‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 43
T1555.003 - Credentials from Password Stores: Credentials from Web Browsers ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 45
Collection‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 46
T1074.001 - Data Staged: Local Data Staging‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 46
Facebook Information Stealer ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 47
rs_flag()‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 48
getckIG()‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 50
getckIP()‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  51
Exfiltration‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 54
T1041 - Exfiltration Over C2 Channel‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 54
Command and Control‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 56
T1071.001 - Application Layer Protocol: Web Protocols ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 56
T1008 - Fallback Channels‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 56
T1102.001 - Web Service: Dead Drop Resolver‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 58
Mitigations and Recommendations‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  61
Reconnaissance and Initial Access ‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  61
Execution and Defense Evasion‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  61
Credential Access and Exfiltration‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  61
Conclusion‧ ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧  ‧ 62
4
Facebook Malvertising Epidemic
Facebook Malvertising 
Epidemic
Social media has become more intertwined in our daily lives. We can 
communicate through it, share our important milestones, and stay up to date 
with current events. Along with these benefits also come risks. Threat actors 
have always been looking for ways to identify victims and are doing so through 
social media, a proven method. They have various ways of performing malicious 
activities such as social engineering, account takeovers, malvertisements, and 
many more.
In February 2024, Trustwave’s Threat Intelligence team reported on the Ov3r_Stealer malware it discovered in a threat 
hunting campaign. The report detailed how Facebook was leveraged by Vietnamese threat actors to deploy the infostealer 
malware, largely designed to steal crypto wallets and passwords. Recently, our Threat Intelligence team discovered another 
malvertisement campaign utilizing a new version of the SYS01 stealer. This stealer is designed to take over Facebook 
accounts, steal credential information from affected users’ browsers, and then leverage legitimate accounts to further the 
spread of the malware. 
Facebook has approximately 2.9 billion monthly active users, and 200 million business accounts. Leaked credentials, 
whether they are dropped on the Internet publicly or sold in the Dark Web, are often the first asset criminals are looking 
to acquire to gain initial access and establish a foothold in their victim’s network and endpoints. From there, a ransomware 
operation will deploy the latest ransomware for financial gain, or nation state threat actors may cause disruption, harm or 
exfiltrate sensitive data. 
This report breaks down the various elements of the malware infection chain as well as a complete reverse engineering 
analysis of the malware itself. The SYS01 malware campaign was observed as early as September 2023 and is still active 
today. The threat actors are continuously evolving, and this research exposes the modified tactics and campaign ads 
being used, which have changed over time to evade detection and improve targeting. For example, detection of reverse 
engingeering in virtual environments, construction of C2 domains, ad tagging, and hosting on Telegram are all novel and 
modified tactics that will be further explained. 
It’s important to note that these types of threats are very pervasive in the social media landscape and may never go away. 
Additionally, limiting user behavior on these networks is nearly impossible and the risk is heightened as our technology 
usage bleeds between corporate and personal assets. With that in mind, security controls, compromise detection, and 
effective response have become ever important. Security awareness should always be part of a security program but 
increasing the frequency of bulletins, news flashes or other risk notifications should be part of the culture and may mitigate 
some of the risk. Knowing that people will always be the first targeted in an attack, utilizing multi-factor authentication is 
paramount, and strong detection mechanisms are critical in limiting the impact of these threats. Defense in depth strategies 
are not new concepts but execution and budget constraints present complications. Weighing the risk vs the cost of 
compromise and reputational harm to the business requires careful consideration. 
Ultimately, it should be understood that while nation-state and ransomware groups make the headlines, the attack 
tactics laid out in this report lay the foundation for threat actors from any group walk to in the front door using legitimate 
credentials, disable security technology, and execute their final payload. 
5
Facebook Malvertising Epidemic
SYS01 Threat Overview
SYS01 is an infostealer malware and its name was introduced by Morphisec in their blog last 
March 2023. Since then, the threat actors have modified and evolved the malware to evade 
detection. The name SYS01 comes from the “b” value found in its configuration file. Being an 
infostealer, it focuses on exfiltrating browser data such as credentials, history, and cookies. A big 
chunk of its payload is focused on obtaining access tokens for Facebook accounts, specifically 
those with Facebook business accounts which can aid the threat actors in spreading the malware.
In a time of abundant social media platforms, the threat actors behind SYS01 have taken 
advantage of this by delivering the malware through malicious advertisements, also called 
malvertising. As seen in Figure 1, the threat actors used malvertising in platforms like Facebook, 
YouTube, and LinkedIn. The advertisements vary from Windows themes, top games, AI software, 
and many more. This effectively lures victims into clicking these ads and having their browser data 
stolen. If there is Facebook-related information in the data, there is a possibility of not only having 
their browser data stolen but also having their Facebook accounts controlled by the threat actors 
to further spread malvertisements and continue the cycle.
Given the fact that the threat actors behind this have used different platforms and with ads 
having different themes, it is evident that they are not trying to target any specific audience, 
but rather they are targeting the general population. It is also easier to prey on unsuspecting 
users, especially those who are not aware of the activities they do online. Regarding the hijacked 
Facebook business accounts, it was observed that some are already established, while some are 
relatively new. Nevertheless, it can cause disruption in their business and even financial loss.
Figure 1. Overview of SYS01 Operation
6
Facebook Malvertising Epidemic
Delivery of SYS01 
Infostealer
Reconnaissance
T1583.008 - Acquire Infrastructure: Malvertising
The current iteration offers different and multiple campaigns to lure potential victims. When the 
campaign started in September 2023, the threat actors were focusing on promoting the best 
games of 2023, which were free to download based on their ads. They eventually shifted into 
different campaigns, which now focus on Windows themes and Windows Taskbar themes. Other 
themes observed were focused on Sora AI, 3D image creator, and One Click Active.
Figure 2. Examples of Fraud Metaverse Advertisement.
7
Facebook Malvertising Epidemic
Each malvertising campaign is identified by a distinct “tag” name. Below is a summary of the 
number of Facebook advertisements associated with each known campaign:
Tag
Facebook Ads Count
blue-softs
~8,100
xtaskbar-themes
~4,300
newtaskbar-themes
~2200
awesome-themes-desktop
~1100
taskbar-themes
~95
ai-image-3d
~79
taskbar-themess
~57
softs-download
~20
sora-ai-v2
~12
In most of these advertisements, the victim will be directed to one of two hosting sites, Google 
Sites or True Hosting.
T1583 - Acquire Infrastructure
Google Sites (Sites.google.com)
Upon interacting with the deceptive Facebook advertisements, victims find themselves redirected 
to a webpage hosted on the legitimate online platform Google Sites. 
8
Facebook Malvertising Epidemic
Figure 3. Examples of Google Site used as landing pages of fraud advertisement
9
Facebook Malvertising Epidemic
True Hosting 
In addition to utilizing Google Sites, the attackers behind the malvertising campaigns have set up 
additional repositories for their malicious software hosted in the following domains:
	
ը hxxps://blue-softs[.]com
	
ը hxxps://blue-soft[.]cloud
	
ը hxxps://softs-download[.]com 
Figure 4. Example of true hosting site used as landing page of fraud advertisement
When users interact with the malicious Facebook advertisements, they trigger a redirection 
process that leads them to a malware repository hosted on a previously mentioned domain. 
Like the tactics employed using Google Sites, this redirection employs a specific URL path that 
includes the parameter “?t=” followed by a tag related to popular PC games or productivity 
applications, serving as bait to attract users based on their interests.
hxxps://{Malicious Domain}/normal_file/?t={Tag}
Below are the known active tags associated with this campaign:
	
ը Popular PC Games: mario_kart_8_deluxe_file, mario_bros_wonder_file, party_animals_file, metal_
slug_awakening_file, mortal, ride5, chicken, asphalt_9_legends_file, cyberpunkss and etc.
	
ը Multimedia Application: adobe-photoshop-2023, free-4k-movies, football-stream-pro, adobe-
photoshop-elements-2023, adobe-illustrator-2023 and etc.
	
ը Business Application: acti-win10-11, microsoft-office-2023, camscanner, adobe-reader-dc, 
pdf-xchange-editor, mozilla-thunderbird, amazon-alexa and etc.
10
Facebook Malvertising Epidemic
T1585.001 - Establish Accounts: Social Media Accounts
The majority of the accounts associated with this Facebook campaign are newly established 
business profiles. Nevertheless, it is apparent that certain Facebook accounts linked to the 
malvertising campaign may have been hijacked. These hijacked business accounts were mainly 
utilized for the distribution of fraudulent ads. Among them are accounts with a significant follower 
base, which threat actors exploit to promote fraudulent ad campaigns. Consequently, the affected 
businesses not only suffer direct consequences, but there is also a heightened risk of other 
threats emerging, such as malvertising.
Figure 5. Example of possibly hijacked Facebook pages used to distribute fraud advertisement
The threat actors assume the business identity by renaming the Facebook pages, this allows 
them to leverage the existing follower base to amplify the reach of their fraudulent advertisement 
significantly. It’s worth highlighting that each of these pages was administered by individuals 
situated in either Vietnam or the Philippines at various points in time.
Figure 6. “Page transparency” information of hijacked Facebook pages
11
Facebook Malvertising Epidemic
Moreover, the scope of this malicious activity extends beyond Facebook. Similar tactics have been 
observed on other platforms, including LinkedIn and YouTube, where malicious posts and ads 
have been identified. This cross-platform strategy not only widens the potential victim pool but 
also suggests a more sophisticated, coordinated approach by the threat actors to exploit multiple 
vectors for their malvertising campaigns.
Figure 7. Malvertisement operation on other social media platforms such as LinkedIn and YouTube
12
Facebook Malvertising Epidemic
Initial Access 
T1189 - Drive-by Compromise
Clicking the “Download” button triggers a redirection to a malware repository, hosted on 
Cloudflare. The URLs involved in this redirection include a distinct query parameter “?t=” followed 
by a specific tag value which correlates directly to the malvertising campaign tag originally 
associated with the Facebook ad. Here are examples of how the URLs are structured to direct to 
different paths while including the campaign tag:
hxxps://{Malicious Domain}/file/?t={Tag}&ns=
hxxps://{Malicious Domain}/static_file/?t={Tag}&ns=
hxxps://{Malicious Domain}/software/?t={Tag}&ns=
These URLs suggest a systematic infrastructure, designed to categorize, and manage different 
payloads or versions of malware, possibly optimizing the attack based on the victim’s profile or 
the specific campaign’s objectives. The use of “Tag” in the URL helps in tracking which campaign 
is more effective or in fine-tuning the malicious activities based on engagement metrics. Here are 
the currently active tags associated with these campaigns:
	
ը awesome
	
ը soraaiv2 
	
ը tbthemes 
	
ը 3dimg
	
ը taskbarthemes2024
These tags help differentiate the malware delivered in the attacks, making it easier to analyze the 
impact and reach of each specific campaign. For instance, an example of how these malicious 
URLs might be formatted is shown below.
Figure 8. Initial redirection to URL hosted in CloudFlare
 
13
Facebook Malvertising Epidemic
The victim is redirected to another URL which leads to the malicious zip file. These URLs are 
dynamically generated based on subdomains and paths that include randomized letters and 
numbers. Examples of such URLs include:
hxxps://[a-z]{1,2}[1-7].{Malicious Domain}/file/{Filename}.zip
hxxps://[a-z]{1,2}[1-7].{Malicious Domain}/download/{Filename}.zip
hxxps://[a-z]{1,2}[1-7].{Malicious Domain}/downloads/{Filename}.zip
These URLs follow a pattern where [a-z]{1,2}[1-7] represents a subdomain that starts with one 
or two letters followed by a digit from 1 to 7, indicating a method to distribute the hosting of 
malicious files across various subdomains.
Figure 9. Network traffic showing redirection to a malware repository
14
Facebook Malvertising Epidemic
Execution
T1204.002- User Execution: Malicious File
When victims engage with malicious advertisements, they inadvertently trigger a download of 
a ZIP file to their computers. The filenames of these malicious ZIP files typically resonate with 
popular desktop games and productivity applications, aligning with the interests indicated by 
the advertisement the victim clicked on. Below is a list of some filenames that have been used in 
these malicious campaigns. 
	
ը Mario_Kart_8_Deluxe.zip
	
ը Mortal_Kombat_1_New_2023.zip
	
ը Adobe_Photoshop_2023.zip
	
ը Taskbar_Themes_New.zip
	
ը Call_of_Duty.zip
	
ը Super_Mario_Bros_Wonder.zip
	
ը RIDE_5_The_Best_Bike_Game.zip
	
ը New_Taskbar_Themes.zip
	
ը OpenAI Sora Setup.zip
	
ը Yog_Sothoths_Yard.zip
	
ը Party_Animals_2023.zip
	
ը Chicken_Invaders_2023.zip
	
ը Sonic_Superstars.zip
	
ը EA_SPORTS_FC_24.zip
	
ը Metal_Slug_Awakening_2023.zip
	
ը Asphalt_9_Legends.zip
	
ը Sora_AI_Video.zip
	
ը Street_Fighter_6.zip
	
ը Video-Taylor-Swift-FullHD.zip
	
ը Contra_Returns_2023.zip
	
ը Cyberpunk_2077.zip
	
ը Awesome_Themes_for_Win_10_11.zip
	
ը Awesome_Themes.zip
	
ը Minecraft_2023.zip
15
Facebook Malvertising Epidemic
Figure 10. An example content of the malicious zip file. 
Label 
Filename 
Purpose 
1 
Setup] {Theme Name}.exe 
[Bluesofts] {Theme Name}.exe 
{Theme Name}.exe 
A renamed benign, legitimate executable used to side-load the 
malicious DLL. 
2 
MahApps.Metro.dll 
Internationalization.dll 
Apowersoft.CommUtilities.dll 
SimpleShare(WPF).dll 
QuickLibrary.dll 
Ash_Inet2.Interop.dll 
BBUtils.dll 
A hidden .NET assembly containing malicious code. 
3 
startvcp 
MahStatic 
MahStable 
MissionsDat 
MsvPack 
NewUtilities 
ImageAssets 
A ZIP file without filename extension that contains the SYS01 Payload. 
4 
Wpf.exe 
WdMode.exe 
msvrp.exe 
NewtonNative.exe 
SimpleWPF.exe 
Utf8Core.exe 
MsvCtrl.exe 
A renamed 7zip executable. 
5 
ZoneList 
A file containing list of target Video Controllers. 
6 
{Language Name}.txt 
{(x|e)[a-z]{3,7}.txt 
Powershell script renamed as a .txt file that contains an argument to 
execute the malicious PHP payload 
7 
Language Name}.txt 
{(x|e)[a-z]{3,7}.txt 
Powershell script renamed as a .txt file that contains an argument to 
extract files the  password-protected archive. 
16
Facebook Malvertising Epidemic
Defense Evasion
T1574.002 - Hijack Execution Flow: DLL Side-Loading
SYS01 utilizes a technique known as DLL sideloading. This method involves attackers loading and 
executing malicious code by exploiting the way legitimate digitally signed Windows applications 
load dynamic link libraries (DLLs). 
During the examination of the DLL files involved in the SYS01 campaign, it was noted that most of 
the timestamps on these files precede the year 2024. However, one of the DLL files displayed a 
timestamp that did not align with this pattern.
Figure 11. DLL Sideloading operation
After investigation, it became evident that these malicious files are modified versions of legitimate 
DLLs. The malicious DLL is obfuscated and contains a different set of resources.
Figure 12. Code comparison between legitimate and modified version of the file used in DLL 
Sideloading activity
17
Facebook Malvertising Epidemic
The DLLs used in this operation have no detection on VirusTotal, and all security vendors mark 
these files as clean.
Figure 13. The DLL is detected as clean in Virustotal
T1027.002 - Obfuscated Files or Information: 
Software Packing
The hidden .NET DLL files are obfuscated using the commercial tool known as SmartAssembly. 
The versions of SmartAssembly utilized are either (8.2.1.5246) or (8.1.0.4892).
Figure 14. DetectItEasy indicates that the file has Smart Assembly protector
18
Facebook Malvertising Epidemic
The DLL is responsible for loading a designated manifest resource, which is identified through 
a unique Global Unique Identifier (GUID). After pinpointing this resource, the DLL takes the 
encrypted data contained within it and passes it to a function designated for processing—named 
the Unzip() function. This particular function is a component of the SmartAssembly framework, 
specifically defined in the SimpleZip package.
Figure 15. Loading of the encrypted manifest resource
T1140 - Deobfuscate/Decode Files or Information
The DLL first conducts a validation check to verify whether the resource data contains header 
‘8223355’ or ‘{z}\x00’.  ‘8223355’ is used as an identifier and is the representation of an 
unsigned 32-bit integer value.
Figure 16. Initial header checking of the resource
In the initial validation phase, the DLL inspects specific headers in the resource data to determine 
its operational path, guided by a predefined switch statement. This value dictates which 
processing technique the DLL will employ:
 
Flag 
Purpose
1
Decompress Assembly Resource with Zlib.
3
Decrypts Assembly Resource using AES-CBC.
 
In this scenario, the initial resource data is encrypted using AES with the header value ‘{z}\x03’.  
Embedded within the DLL are the necessary AES encryption parameters—a hardcoded key and 
an initialization vector (IV)—which are used to decrypt the data. After the decryption process is 
complete, the resulting data stream is then passed down once more to the Unzip() function for 
further processing.
19
Facebook Malvertising Epidemic
Figure 17.  Example of hardcoded Key and Initial Vector (IV) for the symmetric AES decryption
In the updated data stream, the resource data is marked with the header value ‘{z}\x01’, which 
activates the ‘1’ case in the DLL’s switch statement. This setting initiates the decompression 
operation using Zlib on the updated data stream.
Figure 18.  Code used for FLATE decompression
20
Facebook Malvertising Epidemic
T1027.013 - Obfuscated Files or Information: 
Encrypted/Encoded File
After the decompression process is complete, the final resource data comprises multiple strings 
encoded in Base64.
Figure 19.  Final output containing Base64 encoded data
21
Facebook Malvertising Epidemic
In the latest iteration of the .NET DLL, the Unzip() function has been removed.
Figure 20. Code comparison between old and new versions of DLL
Additionally, changes have been made to the processing of the resource data; AES encryption is 
no longer applied. Instead, the resource data is directly encoded using Base64. This adjustment 
simplifies the data handling process by eliminating the decryption step.
Figure 21. The manifest resource is only Base64 encoded
22
Facebook Malvertising Epidemic
T1497 - Virtualization/Sandbox Evasion
Upon completing the deobfuscation process, the malware conducts an initial check. It searches 
for a specific folder within the %localappdata% directory to assess if the targeted machine has 
been previously compromised. This helps the malware avoid redundant operations or additional 
detection risks if the system has already been infected.
Figure 22. Checking of specific folder in %localappdata% directory
To further evade detection, the malware utilizes system inspection techniques to identify 
environmental conditions. Specifically, it employs Windows Management Instrumentation 
Command-line (WMIC) or Common Information Model (CIM) queries to inspect a particular 
hardware property. Using a PowerShell command, it silently executes (T1564.003) the following:
“powershell.exe” -WindowStyle Hidden -ExecutionPolicy Bypass -Command “(Get-
CimInstance -ClassName Win32_VideoController).Caption;”
This command checks for specific Win32_VideoController instances, to detect virtualized 
environments (T1497) often used by security researchers to analyze malware. By identifying such 
environments, the malware can alter its behavior or halt execution to avoid analysis and detection 
by security tools.
Figure 23. Identification of Win32_VideoController using CIM instance
23
Facebook Malvertising Epidemic
Following the execution of this command, the malware compares the gathered details about the 
video controllers against a predefined list of GPU manufacturers stored in a file named “Zonelist.” 
This file includes names of various notable video controller manufacturers such as Intel, 3DFX, 
AMD, ATI, Matrox, Nvidia, Sony, XGI, and Radeon. By referencing this list, the malware can 
determine if it is running in a virtual machine or a known malware analysis sandbox environment.
Figure 24. Predefined list of GPU manufacturers inside the file “ZoneList”
T1562.001 - Impair Defenses: Disable or Modify Tools
The DLL employs a defense evasion technique by manipulating antivirus configurations to 
minimize the risk of detection by security software. Specifically, the DLL includes a function 
that executes a PowerShell command to modify Windows Defender settings by adding the 
%localappdata% directory to its exclusion paths. The PowerShell command used is as follows:
“powershell.exe” -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass 
-Command Add-MpPreference -ExclusionPath “””C:\Users\IEUser\AppData\Local”””
Figure 25. Adding the %localappdata% folder to Windows Defender’s exclusion list
24
Facebook Malvertising Epidemic
T1036.003 - Masquerading: Rename System Utilities
Once the exclusion is set, the malware proceeds to stage its payload in the newly secured 
directory. It copies a renamed version of the 7z executable along with a password-protected 
archive into the %localappdata% folder, setting the stage for the extraction and execution of its 
payload.
Figure 26. Copying the ZIP file and renamed 7z binary to the new folder in the %localappdata% 
directory
T1564.001 - Hide Artifacts: Hidden Files and Directories
Concurrently, it retrieves two text files from the “lang” directory. Once these files are relocated 
to the %localappdata% folder, their extensions are altered to .ps1, transforming them into 
executable PowerShell scripts. The malware sets the attributes of these files to hidden.
Figure 27. Renaming text files as PowerShell scripts (.ps1)
25
Facebook Malvertising Epidemic
Execution
T1059.001 - Command and Scripting Interpreter: PowerShell
The transformation of text files into PowerShell scripts is important for the subsequent execution 
phases:
1st PowerShell Script
This script, now named “Japanese.ps1” or similar, is designed to execute the renamed 7zip 
executable to extract files from the password-protected archive. The script accepts four 
parameters and configures the 7zip command line to automatically extract and overwrite files:
“powershell.exe” -WindowStyle hidden -ExecutionPolicy Bypass -File Japanese.
ps1 arg1 arg2 arg3 arg4
Argument
Description
1
Filename of the renamed 7zip executable
2
EXE
3
Name of the password-protected zip file.
4
Password of the Zip file.
Figure 28. PowerShell execution for extracting contents from a password-protected ZIP file
Once the PowerShell script is executed, it will run the renamed 7zip executable using the following 
parameters:
	
ը “x”: This flag stands for “extract” and is used to extract files from an archive.
	
ը “-p”: This flag specifies the password for encrypted archives.
	
ը “-y”: This flag enables automatic answering of yes to all prompts, allowing the extraction 
process to proceed without requiring user confirmation.
	
ը “-aoa”: This flag stands for “overwrite all existing files without prompt”, ensuring that existing 
files are automatically overwritten during extraction without prompting the user.
26
Facebook Malvertising Epidemic
Figure 29. Code snippet containing the argument list used in archive content extraction
The 7zip command triggered by the script would look like this:
{Renamed 7zip}.exe  x {password-protected zip} -p “password” -y -aoa 
Figure 30. Process execution of renamed 7z file
2nd PowerShell Script
The second PowerShell script, identified as “Brazilian.ps1” or similar, is responsible in setting up 
the execution environment for a PHP payload. 
Figure 31. PowerShell execution for deploying the PHP payload
27
Facebook Malvertising Epidemic
This script accepts four parameters, each tailored to facilitate specific configurations and 
execution settings required for the PHP script. The command to initiate this script looks like this:
“powershell.exe” -WindowStyle hidden -ExecutionPolicy Bypass -File Brazilian.
ps1 php exe  include php
Argument
Description
1
PHP
2
File Extension (EXE).
3
Name of the PHP Payload.
4
File Extension (PHP).
Figure 32. Code snippet containing the argument list to run the PHP payload
PHP Execution:
Once the PowerShell script has completed its configuration and setup tasks, the final step in 
the malware’s operation is the execution of the PHP script. This is accomplished using the PHP 
command line interface:
php.exe  include.php
28
Facebook Malvertising Epidemic
T1059.005 - Command and Scripting Interpreter: Visual Basic
In addition to leveraging PowerShell scripts, some observed samples of the DLL have employed 
Visual Basic Script (VBS) as an alternative or supplementary method for handling both the 
extraction of a payload from a password-protected archive and the subsequent execution of a 
PHP payload. The VBS script, embedded within the DLL’s resource section, offers a direct and 
efficient mechanism for script execution without the need for external scripting files.
Figure 33. Code snippet of VBS loader
The VBS script is designed to accept only one parameter: the password for the 7zip archive. This 
simplicity ensures that the script’s operation is straightforward, focusing solely on utilizing the 
password to access and process the encrypted archive contents.
Figure 34. Launching a VBS file containing a single argument
29
Facebook Malvertising Epidemic
SYS01 Payload Staging
After the successful extraction of the password-protected zip file, the contents are stored in 
a specific folder within the %localappdata% directory. This designated directory serves as a 
repository for several components required for the functioning of the SYS01 malware. Below is a 
detailed breakdown of the main configuration files and their roles:
Label 
Filename 
Purpose 
1
include.php
A PHP file responsible for installing persistence of SYS01 through 
scheduled tasks.
2
index.php
The main script for SYS01 Malware.
3
php.exe
Legitimate PHP executable.
4
rhc.exe
Originally named hidec (https://github.com/tostercx/hidec), used to 
execute hidden console windows.
5
tag
A file containing a keyword associated with the product or game that 
the malware imitates.
6
version.php
A PHP file containing the current version of SYS01.
Figure 35. An example content of the password-protected zip file.
30
Facebook Malvertising Epidemic
The php.ini (SHA256: e9796c19589b948b7fdd5f300e055c0bbbafbfbabbb36b109d13e185fe­
c0e4ed) contains the configuration settings for a PHP environment. Analyzing these settings 
can provide insights into the operational environment of a PHP application, which in the context 
of malware analysis, could highlight how attackers intend to use the PHP runtime for malicious 
activities. 
Figure 36. Sample contents of PHP configuration file (php.ini)
Additionally, by examining the hash of the PHP configuration file on VirusTotal, it has been 
confirmed that the same configuration is also utilized by other types of malware, specifically the 
older versions of the SYS01 malware. This consistency in PHP settings across different malware 
iterations indicates a standardized operational framework that may facilitate the functionality of 
these malware.
31
Facebook Malvertising Epidemic
Figure 37. Various malicious archives containing the same PHP configuration file (php.ini)
The extracted ZIP file contained two primary PHP scripts, namely include.php and index.php. The 
include.php script is designed to establish persistence on the host system by creating scheduled 
tasks. On the other hand, the index.php script operates as an information stealer, targeting the 
extraction of sensitive data from the system.
32
Facebook Malvertising Epidemic
include.php
Persistence
T1053.005 - SCHEDULED TASK/JOB: SCHEDULED TASK
To maintain persistence on the compromised machine, the SYS01 malware uses scheduled 
tasks. This is achieved through precise timing and execution controls that leverage both custom 
scripting and native Windows tools. It first retrieves Date and Time of the target machine using 
two functions, getNow() and getNowM(). getNow() relies on executing a PowerShell script 
named time.ps1, while getNowM() relies on the usage of wmic command.  These retrieved Date 
and Time values are utilized in the creation of scheduled tasks.
Figure 38. Current date and time retrieval
The createTS() function creates the first scheduled task on Windows, set to repeat every 
2 minutes (PT2M), which executes “rhc.exe” with the argument “php.exe index.php”. 
33
Facebook Malvertising Epidemic
Figure 39. Scheduled Task to only run the main SYS01 PHP payload
The createLG() function creates an additional scheduled task. It defines triggers for the task, 
notably a LogonTrigger, designed to execute specified actions upon user logon. This executes 
“rhc.exe” with arguments “php.exe include.php” and “php.exe index.php”. The task configuration 
ensures that it runs hidden and starts when the system becomes accessible.
34
Facebook Malvertising Epidemic
Figure 40. Scheduled Task to run both PHP payloads
35
Facebook Malvertising Epidemic
index.php
The final component of the SYS01 campaign is a sophisticated PHP-based data stealer named 
index.php. This malicious script is used to specifically target and extract sensitive information 
from web browsers installed on the compromised system. 
Below is an in-depth exploration of its functionality and mechanisms:
Main Commands
In the latest iteration of SYS01 malware, the complexity of its command and control (C2) 
interactions has been streamlined. The malware retrieves tasks from JSON data within the “act” 
field of the C2 server’s response, specifically targeting each “task” within the main function.
Figure 41. List of Sys01 commands
Overview of Task Types:
Task
Purpose
Required Parameters
get_ck_all
Gets all cookies
•	 based_ch: List of web browser names.
•	 resource: Array of resources to parse cookies from.
dlAR
Download and run. Downloads a file from the given 
URL and executes it with the given arguments
•	 url: URL to download a file from.
•	 work: Additional work to perform after downloading the file.
•	 name: Name of the file to be saved.
•	 save_to_current_work: Indicates whether to save the file to the 
current working directory
upload
Asks for a file to be uploaded to the C2, checks 
whether the file exists, and uploads it. 
•	 f: Path to the file to be uploaded.
r
Gets a command to run, executes it, and posts the 
result back to the C2.
•	 args: Command to execute.
36
Facebook Malvertising Epidemic
Defense Evasion
T1027.013 - OBFUSCATED FILES OR INFORMATION: ENCRYPTED/ENCODED FILE
The configuration lines specifying extension_dir = “ext” and various extension entries indicate the 
directory for PHP extensions such as bz2, curl, and openssl, which are crucial for enhancing PHP’s 
functionality. Additionally, the zend_extension = php_ioncube.dll entry is significant as it loads 
the ionCube Loader, a tool used to execute PHP files encoded with ionCube. This is particularly 
useful in malware contexts for obfuscating the source code of malware. The ionCube Loader 
supports encoding for a range of PHP versions, including PHP 8.2, 8.1, 7.4, and other legacy 
versions, providing compiled bytecode protection. During our investigation, it is also confirmed 
that all variants of the SYS01 malware are obfuscated using this commercial tool.
Figure 42. Decryption routine in memory of ionCube Loader
37
Facebook Malvertising Epidemic
T1497 - VIRTUALIZATION/SANDBOX EVASION
Drawing parallels to the DLL Sideloading tactics observed earlier, this PHP script employs a 
similarly strategic approach to evade detection by retrieval of the system’s hardware configuration 
using WMIC (Windows Management Instrumentation Command-line) (T1047). Here’s a detailed 
breakdown of the script’s operations and its systematic method for assessing its operating 
environment:
The PHP script initiates its evasion tactics by searching the system’s video controller details. This 
is achieved through the following WMIC command:
wmic path win32_VideoController get name
This command helps the script identify whether the system uses a generic or virtual machine-
specific video controller. By matching the video controller name against the same list of known 
identifiers associated with GPU Manufacturers from earlier, the script can ascertain if it is 
operating in a virtualized environment.
If the video controller does not match any entry in the known recognized list, the script proceeds 
to verify the environment further by retrieving details about the system’s CPU. This is performed 
using another WMIC command:
wmic CPU get NAME
Following the successful retrieval of CPU information, the script constructs an array to store 
the details of the VideoController and CPU, along with an additional placeholder key before 
terminating execution. 
Figure 43. Identification of Win32_VideoController using WMI
38
Facebook Malvertising Epidemic
Discovery
T1082 - SYSTEM INFORMATION DISCOVERY
SYS01 creates a URL pattern to identify the victim uniquely during GET requests. This pattern 
integrates several parameters that refine the interaction with the C2 server.
Figure 44. Code used to retrieve the task and send victim identification to the C2 server
	
ը a - The “a” parameter in the SYS01 malware’s API requests plays a crucial role, acting as the 
initial tag that dictates the specific action to be executed based on the C2 server’s response:
	›
http: Used to retrieve tasks via API requests.
	›
ping: Validates the accessibility of the Command and Control (C2) Server.
	›
update: Configuration updates.
	
ը dev - set to 1.
	
ը v - Denotes the current version of the SYS01 malware. 
	
ը machine_id - SYS01 generates a unique machine ID linked to the victim and stores it in 
%localappdata%\Packages\m.txt. The machine ID is formed using the following method: uniqid() 
+ _ + rand(111111, 999999).
39
Facebook Malvertising Epidemic
Figure 45. Code to generate a unique machine ID for the victim
	
ը from - Extracts the value of “b” from the configuration, where it is identified as “SYS01”.
Figure 46. The ”b” value as seen in its configuration file
	
ը tag - Represents the keyword associated with the product or game that the malware is 
impersonating.
Figure 47. Checking the campaign tag of the file
40
Facebook Malvertising Epidemic
	
ը uname - Retrieves the username of the victim’s machine (T1082) using the php_uname() 
function, which returns information about the operating system PHP is running on.
	
ը f - Checks the status of argument parameter if not empty or null. If true, it updates the value of 
f to 1.
Figure 48. Checking the value of the f flag
T1217 - BROWSER INFORMATION DISCOVERY
When the “f” parameter is set to true and the “get_ck_all” task is activated, the PHP script within 
the SYS01 malware framework engages in comprehensive data harvesting activities aimed at 
extracting sensitive information from web browsers data including cookies, login data, and 
preferences. 
Figure 49. Example of the C2 response containing the task “get_ck_all”
Task
Required Parameters
sendD
•	 Browser cookies, login data, and preferences
getckIG
getckIP
getckIP2
•	 Facebook Cookies
•	 Useragent
rs_flag
•	 based_ch
•	 resource
The core objective of the “get_ck_all” task is to collect data pertaining to the browsers present on 
the system, particularly focusing on Chromium and Mozilla Browser:
41
Facebook Malvertising Epidemic
Figure 50. List of browsers targeted by SYS01 Stealer
For Chromium Browsers, it attempts to extract the cookies and login details from a range of 
web browsers listed in “based_ch” in the “%LOCALAPPDATA%/{Target Browser}/User Data” 
in Windows. This contains a JSON file that allows you to find the list of created profiles.  Here is 
the list of Chromium-based browsers targeted file that by the malware as observed from the C2 
server response:
	
ը CocCoc\Browser
	
ը Torch
	
ը 7Star\7Star
	
ը Kometa
	
ը Google\Chrome SxS
	
ը Microsoft\Edge
	
ը Amigo
	
ը Opera Software\Opera Stable
	
ը Yandex\YandexBrowser
	
ը CentBrowser
	
ը uCozMedia\Uran
	
ը Orbitum
	
ը Sputnik\Sputnik
	
ը Chromium
	
ը Elements Browser
	
ը Google\Chrome
	
ը Chedot
	
ը Comodo\Dragon
	
ը Vivaldi
	
ը Epic Privacy Browser
	
ը BraveSoftware\Brave-Browser
This part of the code is responsible for decrypting the key used for encrypting Chromium cookies. 
It copies the “Local State” file from the Chromium data directory to a temporary directory for 
further processing. This file is vital as it contains encryption keys along with browser settings and 
configurations.  It also constructs a user-agent string based on the operating system information 
and the last version of the browser using php_uname() function. 
42
Facebook Malvertising Epidemic
Figure 51. Code used by SYS01 to decrypt the values of browser cookies
The malware iterates through each browser profile it identifies, copying their cookies, login data, 
and preferences. 
43
Facebook Malvertising Epidemic
Credential Access
T1539 - STEAL WEB SESSION COOKIE
The SYS01 malware is also equipped with features for extracting sensitive data from web 
browsers, specifically targeting user cookies and login details stored in SQLite databases. This 
process involves connecting to the browser’s SQLite database using PHP Data Objects (PDO), a 
database access layer providing a uniform method of access to multiple databases. When cookie 
profiles are available, the malware establishes a connection to the SQLite database located at the 
path specified for the cookie file. It queries the following attributes from the cookies table:
	
ը domain = host_key
	
ը name = name
	
ը path = path
	
ը expired_time = expires_utc
	
ը secure = is_secure
	
ը httpOnly = is_httponly
	
ը sameSite = samesite
In addition to fetching these details, the script attempts to decode the value of each cookie using 
the AES-256-GCM encryption algorithm, a method commonly employed by Chrome to secure 
highly sensitive data under its local data encryption feature.
44
Facebook Malvertising Epidemic
Figure 52. Retrieval of user cookies and login details stored in SQLite databases and decrypting 
them using AES-256-GCM algorithm
45
Facebook Malvertising Epidemic
T1555.003 - CREDENTIALS FROM PASSWORD STORES: CREDENTIALS FROM WEB 
BROWSERS
Using the same encryption algorithm, SYS01 decrypts the password_value from the logins table 
within the SQLite database. It extracts detailed information such as the original URL, username, 
and the decrypted password. The script also checks for the existence of a Preferences file within 
the user’s profile, which stores individual user settings. If found, it reads and saves the values 
under the key “intl”.
Figure 53. Retrieval of user preference and decryption of password value from the stolen login 
details
46
Facebook Malvertising Epidemic
Collection
T1074.001 - DATA STAGED: LOCAL DATA STAGING
To organize the extracted data, the files are renamed with specific prefixes that denote their 
content:
	
ը Browser - CHROMIUM or MOZ
	
ը pref - preferences
	
ը ac - cookies
	
ը lg - login
Figure 51. Initial storage location for stolen browser information and categorized by purpose
47
Facebook Malvertising Epidemic
Facebook Information Stealer
The SYS01 malware is also equipped with specialized tasks designed to extract sensitive 
information from Facebook accounts accessed on the compromised machine. As mentioned 
earlier, the “get_ck_all” command contains 5 additional extended tasks. Four of these tasks are 
related to the processing of the collected cookies from Facebook domain:
	
ը getckIG
	
ը getckIP
	
ը getckIP2
	
ը rs_flag 
Figure 62. C2 response containing the list of Facebook’s Graph APIs used to extract sensitive 
information from various Facebook account types
This JSON configuration illustrates the comprehensive nature of the SYS01 malware’s capabilities 
regarding data extraction, particularly from web browsers and Facebook via API calls. The 
resource key in the JSON configuration is an array that details specific API endpoints and the data 
the malware aims to retrieve from Facebook’s Graph API. 
me
•	 Extracts personal profile information such as name, email, and birthday.
ads
•	 Fetches detailed advertising account data, including spending and payment methods.
bm
•	 Data including businesses, ad accounts, and business users, highlighting the depth of access to commercial and sensitive 
financial data.
page
•	 Details regarding Facebook pages managed by the user, including follower counts and roles.
During the collection of Browser Cookies, it also checks if the host_key contains any Facebook 
related domains. If found, it extracts the “c_user” and “xs” value on the cookie. The c_user cookie 
contains the user ID of the currently logged in user, while xs stores the session secret. These two 
cookies as a combination determine the state of user as logged in or not. 
48
Facebook Malvertising Epidemic
Figure 63. Checking of Facebook-related cooking and extracting the values of xs and c_user
RS_FLAG()
The rs_flag() function in the SYS01 malware plays a crucial role in the conditional handling of 
Facebook data. When Facebook cookies are found on the compromised system, the function first 
checks if the rs_flag is set to true. If this condition is met, it proceeds to invoke the checkResource() 
function, which receives “resource” and “based_ch” parameters from the C2 (Command and Control) 
response.
Figure 64. Loading ‘resource’ data from the C2 response
49
Facebook Malvertising Epidemic
Within the checkResource() function, the getTokenAG() method is called to obtain an API access 
token using the provided Facebook cookie and user agent. This method interacts with Facebook’s 
Graph API to acquire a specific API Access Token. Apart from the default information from the 
initial post request, the checkResource() function will sends additional collected information to its 
Command and Control (C2) server:
Tag
Task
t
•	 NULL
t_tag
•	 API Access Token.
R
•	 Array list containing the result of API request.
Figure 65. Extraction of API Access token and sending it to the C2 server
50
Facebook Malvertising Epidemic
GETCKIG()
The script also checks if getckIG() is set to 1. If so, it calls the function getCkIG and passes on the 
domain of the Facebook cookie for $strCK and the user-agent of the current browser that is being 
checked.  This function will also send the collected information to its Command and Control (C2) 
server using the tag “d”.
Figure 66. Parameter “d” in the POST request holding the results of getCkIG() and getckIP()
Inside the function getCkIG(), it first forms a request header with the user-agent and the cookie. It 
then sends a GET request to get permissions for multiple attributes in the Facebook account and 
eventually get a DTSG token through the regex:
/DTSG[^\”]+Data\”[^\”]+\”token\”:\”([^\”]+)/mi 
Figure 67. Extracting the DTSG token
The function creates an OAuth flow for authorization of the Instagram application using the client 
ID “124024574287414”. Then, another header is constructed to obtain the token with prefix 
EAAB on the response through the regex: 
/access_token=(EAAB[^\”]+)\”/mi
Figure 68. Extracting the EAAB token and array of cookies
51
Facebook Malvertising Epidemic
Another successful extraction of the token will be placed into the final POST request to obtain an 
array of cookies to be returned and sent over to the C2.
Regex used to obtain the cookies:
/^Set-Cookie:\\s*([^;]*)/mi
Lastly, the script will also check if getCkIP and getCkIP2 function is set to 1.  This script will also 
send the collected information to its Command and Control (C2) server using the tag similar from 
getCKIG function.
Figure 69. Checking of flag for getckIP() and getckIP2()
GETCKIP()
When comparing the primary routines of getckIP() and getckIP2(), both functions initiate the 
process by sending an initial request to Meta Portal’s Graph API to gather essential data. They 
utilize the identical access token associated with Meta Portal:
1348564698517390|007c0a9101b9e1c8ffab72766680
Figure 70. Facebook’s Graph API request using Access Token of Meta Portal
52
Facebook Malvertising Epidemic
After that, both functions will send a GET request to “mbasic.facebook.com” to obtain HTML 
content. Uses regular expressions to extract the fb_dtsg and jazoest values from the response.  
The getCkIP2() will only retrieve the value of fb_dtsg. 
Figure 71. GET request to ‘mbasic.facebook.com’ to retrieve the values of ‘fb_dtsg’ and ‘jazoest’
The goal of both functions is to retrieve the value of the generated “access_token” from the two 
different request. An access token is an opaque string that identifies a user, app, or Page and can 
be used by the app to make graph API calls. In getCKIP(), it extracts the access token from the 
response JSON. On the other hand, getCKIP2() will extract the access token using the following 
regular expression: 
“/\”access_token\”:\”(.*?)\”/i”
Figure 72. Comparison of HTTP request in retrieving the value of Access Token
53
Facebook Malvertising Epidemic
After confirming the availability of an access token, both functions initiate a request to the 
Facebook Graph API to establish a session for the respective application. This process involves 
utilizing the provided access token to authenticate and generate session data. It then extracts and 
processes the resulting data, including checking for an additional access token and fetching login 
approval keys. Finally, it attempts to decode and store this data in the $rData variable under the 
appropriate keys.
Figure 73. Esablishing a session for the application and extracting the results
54
Facebook Malvertising Epidemic
Exfiltration
T1041 - EXFILTRATION OVER C2 CHANNEL
Once the data extraction is complete, the malware checks if the “sendD” flag is set to true. If 
activated, it compiles the collected information into a structured format and transmits it to the C2 
server. The data sent includes:
Tag
Task
m
Machine ID
uid
user ID from Facebook configuration.
d
Array list containing victim’s cookies.
i
Browser Preferences (Chromium Browser only).
h
?
p
Array that contains the login data. It reads login information from a SQLite database file and decrypts the passwords (if they 
are encrypted) before storing the login data in the array.
f
Sys01 Version
pp
Browser Profile Name
pp
Browser Profile Location
v
Sys01 Version
b
Browser Type
bversion
Browser Version
ua
User-agent
uname
Machine username
55
Facebook Malvertising Epidemic
Figure 74. Sample of stolen browser information transmitted to the C2 server
56
Facebook Malvertising Epidemic
Command and Control
T1071.001 - APPLICATION LAYER PROTOCOL: WEB PROTOCOLS
The PHP script within the SYS01 malware framework initiates communication with the Command 
and Control (C&C) server by sending the victim’s identification data. This process involves 
transmitting specific requests that uniquely identify the compromised machine and provide 
contextual information about its status. Here’s an outline of how a sample response from the C&C 
server when the “f” parameter is set to 0:
Figure 75. Example of the request sent to the C2 server containing the victim’s identification
T1008 - FALLBACK CHANNELS
In the latest iterations of SYS01 malware, there has been a significant enhancement in how the 
malware retrieves its Command and Control (C2) server information. Initially, SYS01 sourced its C2 
details directly from its configuration. The new approach includes dynamically fetching additional 
C2 server addresses from a file named “factory.data”, enhancing the malware’s adaptability 
against countermeasures.
Figure 76. SYS01 configuration
The malware processes a list of C2 servers using the ping() function, which checks each server’s 
availability by sending an API request that includes the URL path api/rss/?a=ping. This ensures 
that the malware communicates only with active C2 servers.
57
Facebook Malvertising Epidemic
Figure 77. Code used to verify the reachability of the C2 server
If all the primary C2 servers are unreachable, SYS01 employs the seederInfo() function to obtain 
new C2 server seeds from alternative sources, including specific Google Sites and Telegram Bot 
links. This function serves as a critical backup to recover connectivity with command-and-control 
infrastructure.
Figure 78. List of URLs that containing the ‘seeds’ for constructing the backup C2 server
58
Facebook Malvertising Epidemic
T1102.001 - WEB SERVICE: DEAD DROP RESOLVER
Google Site
For Google Sites URLs identified with a “gsite” tag, the malware extracts meta description content 
using the regex pattern
“/<meta\\s+itemprop=\”description\”\\s+content=\”([^\”]+)\”/i”
Figure 79. Retrieval of the domain name of the C2 Server in metadata element of Google Site
59
Facebook Malvertising Epidemic
Telegram Bot
For Telegram links marked with a “tele” tag, the malware retrieves a JSON response and extracts 
the relevant content, which is the domain name of the C2, from the description field.
Figure 80. Retrieval of the domain name of the C2 Server in the description section of Telegram Bot
Bot URL
Command 
Passed
Output
Simplified Output
hxxps://api.telegram.org/
bot6904369325:AAEgW 
sERK453yxB2IdI1ubxyda_
MY02PD2Y/
getMe
{“ok”:true,”result”:{“id”:6904369325, 
”is_bot”:true,”first_name”:”Shover”,” 
username”:”shoveroe_bot”,”can_join_
groups”:true,”can_read_all_group_
messages”:false,”supports_inline_ 
queries”:false,”can_connect_to_ 
business”:false}}
Username: shoveroe_bot
First_Name: Shover
Id:  6904369325
hxxps://api.telegram.org/
bot6896657719:AAHKm-BQlX­
9exZ6_BM-6_cAH5Y_JetPlGU/
getMe
{“ok”:true,”result”:{“id”:6896657719, 
”is_bot”:true,”first_name”: 
”Necturs”,”username”:”nectursbot” 
,”can_join_groups”:true,”can_read_all_
group_messages”:false,”supports_ 
inline_queries”:false,”can_connect_ 
to_business”:false}}
Username: nectursbot
First_Name: Necturs
Id: 6896657719
hxxps://api.telegram.org/
bot6642799266:AAHdmiHVeTh 
T2y6I5mT8pTDJw7tvNec2Tnc/
getMe
{“ok”:true,”result”:{“id”:6642799266, 
”is_bot”:true,”first_name”: 
”Whispera”,”username”: 
”whisperaiherebot”,”can_join_
groups”:true,”can_read_all_group_
messages”:false,”supports_inline_
queries”:false,”can_connect_to_
business”:false}}
Username: whisperaiherebot
First_Name: Whispera
Id: 6642799266
60
Facebook Malvertising Epidemic
The acquired seeds are processed using the validSeeder() function, which inputs these seeds 
into parseDomain(). This function segments the seed data into an array by splitting it with “|” as 
the delimiter, then modifies each segment by substituting underscores (_) and hyphens (-) with 
“.com” and “.top”, respectively, and appending “https://” to form complete URLs (T1102.001). These 
URLs are subsequently validated again using the ping() function, which tests the availability of 
each URL by sending a GET request to /api/rss?a=ping.
Figure 81. Code used to parse the ‘seeds’ into a live C2 server
61
Facebook Malvertising Epidemic
Mitigations and 
Recommendations
Reconnaissance and Initial Access
	
ը Educate users about the risks of malvertising and how to recognize suspicious ads. Promote 
awareness about common tactics used in malvertising, such as adult-themed content click-
baits, fake productivity software or PC games, cracked installers, sensational headlines, and 
unexpected pop-ups.
	
ը Implement content filtering systems that analyze ad content for signs of malware or malicious 
intent.
	
ը Encourage users to keep their software, browsers, and plugins updated to protect against 
exploits that malvertisers might use.
Execution and Defense Evasion
	
ը Utilize host-based anti-malware tools to help identify and quarantine specific malware.
	
ը When prevention isn’t possible, audit controls are essential to detect potential compromises. 
Enable system logs on critical systems and workstations, and implement network logging 
through flow monitoring, network monitoring solutions, or IDS devices on ingress and egress 
points. 
	
ը Enforce binary and application integrity with digital signature verification to prevent untrusted 
code from executing.
Credential Access and Exfiltration
	
ը Implement multi-factor authentication (MFA) to enhance security beyond just a username and 
password. Using a physical second factor key that incorporates the target login domain as part 
of the authentication negotiation protocol will effectively prevent session cookie theft through 
proxy methods.
	
ը Configure browsers and tasks to regularly delete persistent cookies to reduce the risk of 
session cookie theft. By minimizing the duration that web cookies are viable, you reduce the 
impact of stolen cookies and increase the frequency needed for cookie theft attempts, giving 
defenders more opportunities to detect and respond to such attempts.
	
ը Continuously monitor the Dark Web for any indications of compromised credentials that could 
potentially pose a threat to your organization’s security posture.
62
Facebook Malvertising Epidemic
Conclusion
The ongoing SYS01 malvertisement campaign poses a threat to a wider audience and shows the 
importance of being aware of what users do in social media. Since it was first observed in 2022, 
the SYS01 malware has shifted its delivery method by moving away from adult-themed clickbaits 
and game-related ads to an approach which targets the general audience like Windows themes 
and AI-based software tools advertisements. Their new delivery methods such as leveraging 
Google Sites and other legitimate-sounding domains to deploy payloads underscore how evolving 
the threat landscape still is.
The emergence of a new PHP variant simply shows how easy it is for threat actors to adapt to new 
techniques and evade detections. The latest campaigns show a sophisticated attack chain which 
highlights the construction of the C2 domains, refined data extraction process, and the complexity 
in accessing Facebook accounts through tokens. Its C2 retrieval process has fallback strategies, 
which includes dynamically fetching server addresses and alternative seeding from Google Sites 
and Telegram bots. This alone underscores the evolution in the malware’s operational tactics. 
Moreover, commercial tools such as SmartAssembly and ionCubeLoader were tactically used to 
enhance the sophistication of the attack and at the same time evade detections while achieving 
persistence in the infected systems. This approach of SYS01 highlights hijacking Facebook 
business accounts shows a robust strategy to maximize its reach and impact. Its capability of 
hijacking Facebook business accounts especially those with significant reach introduces another 
level of approach in terms of finding ways to amplify its reach but also damages the integrity of 
affected businesses, which could result to tarnished reputation and financial damage.
Stay vigilant, be aware, inform your end-user community and keep hunting!
