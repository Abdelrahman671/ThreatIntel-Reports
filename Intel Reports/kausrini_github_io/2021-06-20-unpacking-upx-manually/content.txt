<!DOCTYPE html>
<html lang="en">
<!-- Beautiful Jekyll 5.0.0 | Copyright Dean Attali 2020 -->
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- Favicon Configuration -->
  
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  
  <!-- End of Favicon Configuration -->

  

  

  <title>Unpacking UPX Manually</title>

  
  <meta name="author" content="Kaushik Srinivasan">
  

  <meta name="description" content="A Primer on Unpacking UPX">

  

  
  <meta name="keywords" content="Malware,Reverse Engineering,Forensics,Security Engineering, Cybersecurity">
  

  <link rel="alternate" type="application/rss+xml" title="0x4b 0x53" href="https://kausrini.github.io/feed.xml">

  
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SKJ78SN2N9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-SKJ78SN2N9');
</script>


  
  <!-- Google Tag Manager -->
  <script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-MWF7CB6');
  </script>
  <!-- End Google Tag Manager -->


  
<!-- Google Analytics -->
<script>
  (function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
      (i[r].q = i[r].q || []).push(arguments)
    }, i[r].l = 1 * new Date(); a = s.createElement(o),
      m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
  ga('create', 'G-SKJ78SN2N9', 'auto');
  ga('send', 'pageview');
</script>
<!-- End Google Analytics -->


  


  
    
      
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">


    
      
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css">


    
      
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic">


    
      
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800">


    
  

  
    
      <link rel="stylesheet" href="/assets/css/bootstrap-social.css">
    
      <link rel="stylesheet" href="/assets/css/beautifuljekyll.css">
    
  

  

  
  
  

  

  
  <meta property="og:site_name" content="0x4b 0x53">
  <meta property="og:title" content="Unpacking UPX Manually">
  <meta property="og:description" content="A Primer on Unpacking UPX">

  
  <meta property="og:image" content="https://kausrini.github.io/assets/img/2021_06_19/Cover.JPG">
  

  
  <meta property="og:type" content="article">
  <meta property="og:article:author" content="Kaushik Srinivasan">
  <meta property="og:article:published_time" content="2021-06-20T00:00:00-04:00">
  <meta property="og:url" content="https://kausrini.github.io/2021-06-20-unpacking-upx-manually/">
  <link rel="canonical" href="https://kausrini.github.io/2021-06-20-unpacking-upx-manually/">
  

  
  <meta name="twitter:card" content="summary_large_image">
  
  <meta name="twitter:site" content="@kausrini">
  <meta name="twitter:creator" content="@kausrini">

  <meta property="twitter:title" content="Unpacking UPX Manually">
  <meta property="twitter:description" content="A Primer on Unpacking UPX">

  
  <meta name="twitter:image" content="https://kausrini.github.io/assets/img/2021_06_19/Cover.JPG">
  

  


  

  

</head>


<body>

  
  <!-- Google Tag Manager (noscript) -->
  <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MWF7CB6" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
  <!-- End Google Tag Manager (noscript) -->



  <nav class="navbar navbar-expand-xl navbar-light fixed-top navbar-custom top-nav-regular"><a class="navbar-brand" href="https://kausrini.github.io/">0x4b 0x53</a><button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#main-navbar" aria-controls="main-navbar" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="main-navbar">
    <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link" href="/aboutme">About Me</a>
          </li>
        <li class="nav-item">
          <a class="nav-link" id="nav-search-link" href="#" title="Search">
            <span id="nav-search-icon" class="fa fa-search"></span>
            <span id="nav-search-text">Search</span>
          </a>
        </li></ul>
  </div>

  

  
    <div class="avatar-container">
      <div class="avatar-img-border">
        <a href="https://kausrini.github.io/">
          <img alt="Navigation bar avatar" class="avatar-img" src="/assets/img/avatar-icon.jpg" />
        </a>
      </div>
    </div>
  

</nav>



<div id="beautifuljekyll-search-overlay">

  <div id="nav-search-exit" title="Exit search">✕</div>
  <input type="text" id="nav-search-input" placeholder="Search">
  <ul id="search-results-container"></ul>
  
  <script src="https://unpkg.com/simple-jekyll-search@latest/dest/simple-jekyll-search.min.js"></script>
  <script>
    var searchjson = '[ \
       \
        { \
          "title"    : "Buffer Security Check - Dissassembly Explained", \
          "category" : "malwareanalysisbuffer overflowstack cookie0xBB40E64E", \
          "url"      : "/2022-11-02-buffer-security-check/", \
          "date"     : "November  2, 2022" \
        }, \
       \
        { \
          "title"    : "ICICI Bank Exposes Customer Credit Reports", \
          "category" : "server configurationencrypted pdfbruteforce", \
          "url"      : "/2022-10-31-icicibank-servers-expose-credit-reports/", \
          "date"     : "October 31, 2022" \
        }, \
       \
        { \
          "title"    : "Malware Analysis Setup", \
          "category" : "malwareanalysisconfiguration", \
          "url"      : "/2022-04-09-malware-analysis-setup/", \
          "date"     : "April  9, 2022" \
        }, \
       \
        { \
          "title"    : "Malware Analysis - Dropper", \
          "category" : "malwareanalysisurelas", \
          "url"      : "/2021-07-24-malware-analysis-dropper/", \
          "date"     : "July 24, 2021" \
        }, \
       \
        { \
          "title"    : "Malicious Documents Analysis - Basics", \
          "category" : "malwareanalysismaldocvbadeobfuscationdocmpptmxlsm", \
          "url"      : "/2021-06-23-maldoc-analysis-basic/", \
          "date"     : "June 23, 2021" \
        }, \
       \
        { \
          "title"    : "Unpacking UPX Manually", \
          "category" : "malwareanalysisupxunpacking", \
          "url"      : "/2021-06-20-unpacking-upx-manually/", \
          "date"     : "June 20, 2021" \
        }, \
       \
       \
        { \
          "title"    : "About me", \
          "category" : "page", \
          "url"      : "/aboutme/", \
          "date"     : "January 1, 1970" \
        }, \
       \
        { \
          "title"    : "Malware Analysis Journey", \
          "category" : "page", \
          "url"      : "/", \
          "date"     : "January 1, 1970" \
        }, \
       \
        { \
          "title"    : "Tag Index", \
          "category" : "page", \
          "url"      : "/tags/", \
          "date"     : "January 1, 1970" \
        }, \
       \
        { \
          "title"    : "Malware Analysis Journey", \
          "category" : "page", \
          "url"      : "/page2/", \
          "date"     : "January 1, 1970" \
        } \
       \
    ]';
    searchjson = JSON.parse(searchjson);

    var sjs = SimpleJekyllSearch({
      searchInput: document.getElementById('nav-search-input'),
      resultsContainer: document.getElementById('search-results-container'),
      json: searchjson
    });
  </script>
</div>





  <!-- TODO this file has become a mess, refactor it -->






  <div id="header-big-imgs" data-num-img=1
    
    
    
      
      data-img-src-1="https://kausrini.github.io/assets/img/2021_06_19/Cover.JPG"
    
    
    
  ></div>


<header class="header-section has-img">

<div class="big-img intro-header">
  <div class="container-md">
    <div class="row">
      <div class="col-xl-8 offset-xl-2 col-lg-10 offset-lg-1">
        <div class="post-heading">
          <h1>Unpacking UPX Manually</h1>
          
            
              <h2 class="post-subheading">A Primer on Unpacking UPX</h2>
            
          

          
            <span class="post-meta">Posted on June 20, 2021</span>
            
            
          
        </div>
      </div>
    </div>
  </div>
  <span class='img-desc'></span>
</div>

<div class="intro-header no-img">
  <div class="container-md">
    <div class="row">
      <div class="col-xl-8 offset-xl-2 col-lg-10 offset-lg-1">
        <div class="post-heading">
          <h1>Unpacking UPX Manually</h1>
          
            
              <h2 class="post-subheading">A Primer on Unpacking UPX</h2>
            
          

          
            <span class="post-meta">Posted on June 20, 2021</span>
            
            
          
        </div>
      </div>
    </div>
  </div>
</div>
</header>





<div class=" container-md ">
  <div class="row">
    <div class=" col-xl-8 offset-xl-2 col-lg-10 offset-lg-1 ">

      

      

      <article role="main" class="blog-post">
        <p>UPX [1] is one of the most common packers used by malware authors to obfuscate their binaries. Obfuscated binaries are harder to analyze than the original binary. UPX is a packer, so it does have legitimate usage like compressing a binary for reduced file size. Not all UPX packed files are malicious but for this blogpost, we will be choosing something malicious.</p>

<p>UPX packed executables can be automatically unpacked by UPX tool (which available online for free). To prevent this, malware authors often tamper with the packed binary in such a way that they can’t be unpacked by UPX tool but the binary unpacks itself in memory without any issues. So, learning to unpack them manually always helps. Moreover, the general principle mentioned below can be used to unpack any custom packer or obfuscation techniques used by malware authors.</p>

<p>I took a long time to search for a sample malicious file and in the end, chose one randomly in VirusTotal (VT) by searching for “UPX Ransomware” [2]. I used Detect It Easy (DIE) [3] tool to confirm that the binary is UPX packed.</p>

<p>For the purpose of this post, I’ll be using packed and obfuscated interchangeably. I’ve renamed the downloaded binary to “sample”. Using the long hash value as the binary name makes the x32dbg debug windows look cluttered as the function names are referred to as <em>filename.memory_address</em> in the debugger.</p>

<h1 id="theory-crafting">Theory Crafting</h1>

<p>Before we proceed, we need to talk about how a packed binary is unpacked. A packed binary, when executed (starts from a point called Entry Point - EP), allocates memory space to unpack itself and then populates it with the unpacked instructions. This process of writing to the memory is unpacking.</p>

<p>Once unpacked, the packer will start executing instructions from the unpacked section (The starting address is called Original Entry Point - OEP). By debugging the packed executable, we can execute/debug until we can identify the OEP. Once we identify OEP, we can dump the instructions into a binary file and this is the unpacked code. This can be considered as the standard process for unpacking manually.</p>

<p>We already know it’s packed. If we did not know that, we can use a tool like PeID [4] or Detect It Easy to check for packers. Before we start debugging, let’s take a look at the packed binary in the tool - PeStudio. It gives us a quick look at the PeFile structure, strings and imported libraries. Each of these sections provides us with more context to focus on while analyzing the binary.</p>

<h2 id="pe-file-structure">Pe File Structure</h2>

<p><img src="/assets/img/2021_06_19/PeFileStructure.PNG" alt="PeFile Structure" class="mx-auto d-block" /></p>
<center><em>Figure 1: PE File Structure</em></center>

<p>The basic unit of code within a PE file is contained within a section [5]. There are 3 sections, <em>UPX0</em>, <em>UPX1</em> and <em>.rsrc</em> in the packed binary. Sections being named as UPX is a hint to what packer might be used.</p>

<p class="box-warning"><strong>Warning:</strong> PE File section names can be anything and is not a reliable indicator of the contents within.</p>

<p>The section UPX0 has raw size of 0 bytes but virtual size of 0x3800 bytes.  And the section UPX1 has 96.5% entropy. High entropy value indicates packed or encrypted data. In this case, the packed data in UPX1 will be unpacked into the empty space of UPX0.</p>

<p class="box-note"><strong>Note:</strong> Sections with high entropy indicate compressed or encrypted data. Sections with 0 raw size but large virtual size might be used to write instructions dynamically and execute them during runtime.</p>

<h2 id="strings">Strings</h2>

<p>It shows 3935 strings, but majority of it is unreadable/gibberish.  The small percentage of readable strings also indicates that binary might be obfuscated. There is not much more to do here, let’s move on.</p>

<h2 id="imports">Imports</h2>

<p>PeStudio shows only 15 functions imported. The small number of library imports is another indicator of packed or obfuscated content. Malicious files might often contain obfuscate module and library names (won’t show up in simple string analysis). These obfuscated libraries names, can then be deobfuscated during runtime and then loaded using LoadLibraryA api call followed by GetProcAddress to obtain the address to specific module/function within that library.</p>

<p>This binary has the following interesting imports</p>

<ul>
  <li>VirtualProtect</li>
  <li>VirtualAlloc</li>
  <li>ShellExecuteW</li>
  <li>LoadLibraryA</li>
  <li>GetProcAddress</li>
</ul>

<p>These are sufficient for the binary to unpack itself in memory and run the deobfuscated code. For the sake of this blogpost size and your time, I’ll not go into details of how they are used. We can discuss them in future posts.</p>

<h1 id="unpacking-upx-manually">Unpacking UPX Manually</h1>

<h2 id="identifying-oep">Identifying OEP</h2>

<p>Let’s load the binary into x32dbg. As soon as it is loaded, the execution is paused at the very beginning. As stated above, the next set of instructions are meant to unpack the original binary instructions and execute them. So, we are looking for an unconditional jump or a call instruction to a specific memory location.</p>

<p>You can verify that you are still in packed section of instructions by searching for the “Intermodular calls” and “String references” in the “current region”. Both these will open a new window displaying limited data. This is an indicator that you are still in packed executable region.</p>

<p><img src="/assets/img/2021_06_19/IntermodularCalls.jpg" alt="Intermodular calls" class="mx-auto d-block" /></p>
<center><em>Figure 2: Search for Intermodular Calls</em></center>

<p><img src="/assets/img/2021_06_19/PackedIntermodularCalls.JPG" alt="Packed Intermodular Calls" class="mx-auto d-block" /></p>
<center><em>Figure 3: Intermodular calls <strong>before</strong> the code is unpacked</em></center>

<p>Continue to “step over” the instructions to avoid jumping into function calls. As you continue, keep an eye on the title of the debugger. If it has ntdll.dll or some other system library, it means you are in the library code and that does not interest you (usually) as a malware analyst. You can select “Run to user code” to get back to your binary code.</p>

<p>After a few step instructions, you’ll notice that you are now at the very end of the binary. If you scroll further down, you’ll notice an unconditional jump right before a series of opcodes <strong>0000</strong> signaling the end of the binary.</p>

<p><img src="/assets/img/2021_06_19/EndOfPackedSection.JPG" alt="End Of Packed Section" class="mx-auto d-block" /></p>
<center><em>Figure 4: Likely End of the Packed Section</em></center>

<p>Set a breakpoint right before the <code class="language-plaintext highlighter-rouge">jmp sample.416520</code> instruction and check for intermodular calls again. You will still see limited number of calls indicating packed data. Now, step over this instruction, which will jump or change the instruction pointer to a new location.</p>

<p>This new location is the beginning of the the unpacked called or also called as OEP. the address location <strong>0x416520 is the OEP</strong> where the unpacked code (instructions) resides. You can (and need to) verify this by checking for intermodular calls which will show a larger number of function calls, indicating that the binary has been packed.</p>

<p><img src="/assets/img/2021_06_19/UnpackedIntermodularCalls.jpg" alt="Unpacked Intermodular Calls" class="mx-auto d-block" /></p>
<center><em>Figure 5: Truncated Image of Intermodular calls <strong>after</strong> the code is unpacked</em></center>

<p class="box-note"><strong>Note:</strong> Figure 5 has significantly greater number of function calls than Figure 3. Furthermore, the function names are indicated clearly and not obfuscated. This indicates that we have successfully unpacked the binary.</p>

<p>Before we proceed, make sure your Instruction Pointer is pointing to the OEP we have identified above.</p>

<h2 id="dump-unpacked-binary-from-memory">Dump Unpacked Binary From Memory</h2>

<p>Once we have the unpacked binary instructions and the instruction pointer is pointing to the OEP, we can use the “OllyDumpEx” plugin [6] for x32dbg to dump the process to a file. Make sure that the OEP is pointing to the very first instruction after the Jump instruction we previously identified. This makes sure that we are dumping only the unpacked code in memory to a file. This plugin takes care of building the PE file structure around the dumped file. There is no need to change any parameters in the OllyDumpEx window. Select Dump and you will have the unpacked binary.</p>

<p><img src="/assets/img/2021_06_19/OllyDumpEx.JPG" alt="OllyDumpEx" class="mx-auto d-block" /></p>
<center><em>Figure 6: OllyDumpEx Plugin</em></center>

<p>The dumped file is named as “sample_dump.exe”. Opening this file in PeStudio, will show you 15 imports with no name values. This is because the OllyDumpEx does not take care of rebuilding the imports while dumping it from memory. Imports on a file and imports in memory have different address offsets and this causes the dumped binary to be ‘incomplete’ in some ways as shown in the image below.</p>

<p><img src="/assets/img/2021_06_19/SampleDumpPeStudio.JPG" alt="Sample Dump PeStudio" class="mx-auto d-block" /></p>
<center><em>Figure 7: PeStudio Output For The Dumped File</em></center>

<p>To rebuild the import table, we will use a different plugin - Scylla x86 [7] which searches for the Import Address Table in the packed binary and obtains the imports from it. Select “IAT Autosearch” and when prompted for advanced search choose no. The plugin will return with the starting address of the IAT. Now select “Get Imports” to obtain the list of imports for the binary.</p>

<p>In this case, it will return with 247 valid APIs and missing 4 APIs as shown below. If there were large number of missing APIs, try the advanced search mentioned earlier and check if it returns better results.</p>

<p><img src="/assets/img/2021_06_19/Scyllax86.JPG" alt="Scyllax86" class="mx-auto d-block" /></p>
<center><em>Figure 8: Scyllax86 Plugin</em></center>

<p>Once Scylla returns the above response, select “Fix Dump”, and this will generate a new file called “sample_dump_scy.exe”. As shown in the image below, opening “sample_dump_scy.exe” in the PeStudio shows that the imports are now populated.</p>

<p><img src="/assets/img/2021_06_19/SampleDumpPeStudio.JPG" alt="Sample Dump PeStudio" class="mx-auto d-block" /></p>
<center><em>Figure 9: PeStudio Output For The Dumped File</em></center>

<p>Compare Figure 7 with Figure 9 to see how Scyllax86 helps with populating the imports. <strong>We have successfully extracted the UPX packed binary into a file “sample_dump_scy.exe”</strong>. We can now continue analayzing this sample for identifying its functionality and purpose. Subsequent posts will be focused on this.</p>

<h1 id="references">References</h1>
<p><a href=""></a></p>
<ol>
  <li><a href="https://upx.github.io/">https://upx.github.io/</a></li>
  <li><a href="https://www.virustotal.com/gui/file/1d2dcef824e0bfb28dc48732aa5ef8430f8f20436ab32428d6b7efe8ac715b2c">https://www.virustotal.com/gui/file/1d2dcef824e0bfb28dc48732aa5ef8430f8f20436ab32428d6b7efe8ac715b2c</a></li>
  <li><a href="https://github.com/horsicq/Detect-It-Easy">https://github.com/horsicq/Detect-It-Easy</a></li>
  <li><a href="https://github.com/wolfram77web/app-peid">https://github.com/wolfram77web/app-peid</a></li>
  <li><a href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format">https://docs.microsoft.com/en-us/windows/win32/debug/pe-format</a></li>
  <li><a href="https://low-priority.appspot.com/ollydumpex/">https://low-priority.appspot.com/ollydumpex/</a></li>
  <li><a href="https://github.com/NtQuery/Scylla">https://github.com/NtQuery/Scylla</a></li>
</ol>


      </article>

      
        <div class="blog-tags">
          <span>Tags:</span>
          
            <a href="/tags#malware">malware</a>
          
            <a href="/tags#analysis">analysis</a>
          
            <a href="/tags#upx">upx</a>
          
            <a href="/tags#unpacking">unpacking</a>
          
        </div>
      

      

      
        <!-- Check if any share-links are active -->




<section id = "social-share-section">
  <span class="sr-only">Share: </span>

  
    <a href="https://twitter.com/intent/tweet?text=Unpacking+UPX+Manually&url=https%3A%2F%2Fkausrini.github.io%2F2021-06-20-unpacking-upx-manually%2F"
      class="btn btn-social-icon btn-twitter" title="Share on Twitter">
      <span class="fab fa-fw fa-twitter" aria-hidden="true"></span>
      <span class="sr-only">Twitter</span>
    </a>
  

  

  
    <a href="https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fkausrini.github.io%2F2021-06-20-unpacking-upx-manually%2F"
      class="btn btn-social-icon btn-linkedin" title="Share on LinkedIn">
      <span class="fab fa-fw fa-linkedin" aria-hidden="true"></span>
      <span class="sr-only">LinkedIn</span>
    </a>
  

  

  

</section>



      

      <ul class="pagination blog-pager">
        
        
        <li class="page-item next">
          <a class="page-link" href="/2021-06-23-maldoc-analysis-basic/" data-toggle="tooltip" data-placement="top" title="Malicious Documents Analysis - Basics">Next Post &rarr;</a>
        </li>
        
      </ul>
      
  
  
  

  




    </div>
  </div>
</div>


  <footer>
  <div class="container-md beautiful-jekyll-footer">
    <div class="row">
      <div class="col-xl-8 offset-xl-2 col-lg-10 offset-lg-1">
      <ul class="list-inline text-center footer-links"><li class="list-inline-item">
    <a href="https://github.com/kausrini" title="GitHub">
      <span class="fa-stack fa-lg" aria-hidden="true">
        <i class="fas fa-circle fa-stack-2x"></i>
        <i class="fab fa-github fa-stack-1x fa-inverse"></i>
      </span>
      <span class="sr-only">GitHub</span>
   </a>
  </li><li class="list-inline-item">
    <a href="https://twitter.com/kausrini" title="Twitter">
      <span class="fa-stack fa-lg" aria-hidden="true">
        <i class="fas fa-circle fa-stack-2x"></i>
        <i class="fab fa-twitter fa-stack-1x fa-inverse"></i>
      </span>
      <span class="sr-only">Twitter</span>
   </a>
  </li><li class="list-inline-item">
    <a href="https://linkedin.com/in/kausrini" title="LinkedIn">
      <span class="fa-stack fa-lg" aria-hidden="true">
        <i class="fas fa-circle fa-stack-2x"></i>
        <i class="fab fa-linkedin fa-stack-1x fa-inverse"></i>
      </span>
      <span class="sr-only">LinkedIn</span>
   </a>
  </li></ul>

      
      <p class="copyright text-muted">
      
        Kaushik Srinivasan
        &nbsp;&bull;&nbsp;
      
      2022

      

      
      </p>
      <p class="theme-by text-muted">
        Powered by
        <a href="https://beautifuljekyll.com">Beautiful Jekyll</a>
      </p>
      </div>
    </div>
  </div>
</footer>


  
  
    
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=" crossorigin="anonymous"></script>


  
    
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>


  
    
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>


  



  
    <!-- doing something a bit funky here because I want to be careful not to include JQuery twice! -->
    
      <script src="/assets/js/beautifuljekyll.js"></script>
    
  









</body>
</html>
