<!doctype html>
<!--[if !IE]>
<html class="no-js non-ie" lang="en-US"> <![endif]-->
<!--[if IE 7 ]>
<html class="no-js ie7" lang="en-US"> <![endif]-->
<!--[if IE 8 ]>
<html class="no-js ie8" lang="en-US"> <![endif]-->
<!--[if IE 9 ]>
<html class="no-js ie9" lang="en-US"> <![endif]-->
<!--[if gt IE 9]><!-->
<html class="no-js" lang="en-US"> <!--<![endif]-->
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="">
<link rel="profile" href="http://gmpg.org/xfn/11">

<title>N Ways to Unpack Mobile Malware &#8211; Pentest Blog</title>
<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//www.googletagmanager.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; Feed" href="https://pentest.blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; Comments Feed" href="https://pentest.blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; N Ways to Unpack Mobile Malware Comments Feed" href="https://pentest.blog/n-ways-to-unpack-mobile-malware/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/pentest.blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.5.3"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://pentest.blog/wp-includes/css/dist/block-library/style.min.css?ver=6.5.3' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
.wp-block-navigation a:where(:not(.wp-element-button)){color: inherit;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
.wp-block-pullquote{font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='asciinema-player-css-css' href='https://pentest.blog/wp-content/plugins/asciiplayer/asciinema-player.css?ver=2.4.1' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-bootstrap-css' href='https://pentest.blog/wp-content/themes/sparkling/assets/css/bootstrap.min.css?ver=6.5.3' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-icons-css' href='https://pentest.blog/wp-content/themes/sparkling/assets/css/fontawesome-all.min.css?ver=5.1.1.' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-fonts-css' href='//fonts.googleapis.com/css?family=Open+Sans%3A400italic%2C400%2C600%2C700%7CRoboto+Slab%3A400%2C300%2C700&#038;ver=6.5.3' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-style-css' href='https://pentest.blog/wp-content/themes/sparkling/style.css?ver=2.4.2' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css' href='https://pentest.blog/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=vLiMInY5I09xi1g' type='text/css' media='all' />
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/vendor/bootstrap.min.js?ver=6.5.3" id="sparkling-bootstrapjs-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/functions.js?ver=20180503" id="sparkling-functions-js"></script>

<!-- Google Analytics snippet added by Site Kit -->
<script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=GT-MK4L4F6" id="google_gtagjs-js" async></script>
<script type="text/javascript" id="google_gtagjs-js-after">
/* <![CDATA[ */
window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}
gtag('set', 'linker', {"domains":["pentest.blog"]} );
gtag("js", new Date());
gtag("set", "developer_id.dZTNiMT", true);
gtag("config", "GT-MK4L4F6");
/* ]]> */
</script>

<!-- End Google Analytics snippet added by Site Kit -->
<link rel="https://api.w.org/" href="https://pentest.blog/wp-json/" /><link rel="alternate" type="application/json" href="https://pentest.blog/wp-json/wp/v2/posts/1502" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://pentest.blog/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.5.3" />
<link rel="canonical" href="https://pentest.blog/n-ways-to-unpack-mobile-malware/" />
<link rel='shortlink' href='https://pentest.blog/?p=1502' />
<link rel="alternate" type="application/json+oembed" href="https://pentest.blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fpentest.blog%2Fn-ways-to-unpack-mobile-malware%2F" />
<meta name="generator" content="Site Kit by Google 1.119.0" /><style type="text/css">.entry-content {font-family: Tahoma, Geneva;}.entry-content {font-size:15px}</style><style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>		<style type="text/css">
				.navbar > .container .navbar-brand {
			color: #dadada;
		}
		</style>
	<link rel="icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" sizes="32x32" />
<link rel="icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" />
<meta name="msapplication-TileImage" content="https://pentest.blog/wp-content/uploads/logo-favicon.png" />
		<style type="text/css" id="wp-custom-css">
			#secondary .widget a {
    color: #636467;
}		</style>
		
<script data-cfasync="false" nonce="15015d25-3a3d-4ded-baa1-a126ef32cbfe">try{(function(w,d){!function(df,dg,dh,di){if(df.zaraz)console.error("zaraz is loaded twice");else{df[dh]=df[dh]||{};df[dh].executed=[];df.zaraz={deferred:[],listeners:[]};df.zaraz._v="5847";df.zaraz._n="15015d25-3a3d-4ded-baa1-a126ef32cbfe";df.zaraz.q=[];df.zaraz._f=function(dj){return async function(){var dk=Array.prototype.slice.call(arguments);df.zaraz.q.push({m:dj,a:dk})}};for(const dl of["track","set","debug"])df.zaraz[dl]=df.zaraz._f(dl);df.zaraz.init=()=>{var dm=dg.getElementsByTagName(di)[0],dn=dg.createElement(di),dp=dg.getElementsByTagName("title")[0];dp&&(df[dh].t=dg.getElementsByTagName("title")[0].text);df[dh].x=Math.random();df[dh].w=df.screen.width;df[dh].h=df.screen.height;df[dh].j=df.innerHeight;df[dh].e=df.innerWidth;df[dh].l=df.location.href;df[dh].r=dg.referrer;df[dh].k=df.screen.colorDepth;df[dh].n=dg.characterSet;df[dh].o=(new Date).getTimezoneOffset();if(df.dataLayer)for(const dq of Object.entries(Object.entries(dataLayer).reduce(((dr,ds)=>({...dr[1],...ds[1]})),{})))zaraz.set(dq[0],dq[1],{scope:"page"});df[dh].q=[];for(;df.zaraz.q.length;){const dt=df.zaraz.q.shift();df[dh].q.push(dt)}dn.defer=!0;for(const du of[localStorage,sessionStorage])Object.keys(du||{}).filter((dw=>dw.startsWith("_zaraz_"))).forEach((dv=>{try{df[dh]["z_"+dv.slice(7)]=JSON.parse(du.getItem(dv))}catch{df[dh]["z_"+dv.slice(7)]=du.getItem(dv)}}));dn.referrerPolicy="origin";dn.src="/cdn-cgi/zaraz/s.js?z="+btoa(encodeURIComponent(JSON.stringify(df[dh])));dm.parentNode.insertBefore(dn,dm)};["complete","interactive"].includes(dg.readyState)?zaraz.init():df.addEventListener("DOMContentLoaded",zaraz.init)}}(w,d,"zarazData","script");window.zaraz._p=async cY=>new Promise((cZ=>{if(cY){cY.e&&cY.e.forEach((c$=>{try{const da=d.querySelector("script[nonce]"),db=da?.nonce||da?.getAttribute("nonce"),dc=d.createElement("script");db&&(dc.nonce=db);dc.innerHTML=c$;dc.onload=()=>{d.head.removeChild(dc)};d.head.appendChild(dc)}catch(dd){console.error(`Error executing script: ${c$}\n`,dd)}}));Promise.allSettled((cY.f||[]).map((de=>fetch(de[0],de[1]))))}cZ()}));zaraz._p({"e":["(function(w,d){})(window,document)"]});})(window,document)}catch(e){throw fetch("/cdn-cgi/zaraz/t"),e;};</script></head>

<body class="post-template-default single single-post postid-1502 single-format-standard group-blog">
	<a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>
<div id="page" class="hfeed site">

	<header id="masthead" class="site-header" role="banner">
		<nav class="navbar navbar-default
		" role="navigation">
			<div class="container">
				<div class="row">
					<div class="site-navigation-inner col-sm-12">
						<div class="navbar-header">


														<div id="logo">
																																<a href="https://pentest.blog/"><img src="https://pentest.blog/wp-content/uploads/pentestblog-color-e1508706802866.png"  height="67" width="280" alt="Pentest Blog"/></a>
																																</div><!-- end of #logo -->

							<button type="button" class="btn navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
								<span class="sr-only">Toggle navigation</span>
								<span class="icon-bar"></span>
								<span class="icon-bar"></span>
								<span class="icon-bar"></span>
							</button>
						</div>



						<div class="collapse navbar-collapse navbar-ex1-collapse"><ul id="menu-header-menu" class="nav navbar-nav"><li id="menu-item-1061" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-1061"><a href="https://pentest.blog/category/advisories/">Advisories</a></li>
<li id="menu-item-105" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-105"><a href="https://pentest.blog/category/operating-system/">Operating System</a></li>
<li id="menu-item-20" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-20"><a href="https://pentest.blog/category/application-security/">Application Security</a></li>
<li id="menu-item-11" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-11"><a href="https://pentest.blog/category/network/">Network</a></li>
<li id="menu-item-106" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-106"><a href="https://pentest.blog/category/tools/">Tools</a></li>
<li id="menu-item-991" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-991"><a href="https://pentest.blog/article-series/">Article Series</a></li>
<li id="menu-item-14" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14"><a href="https://pentest.blog/about-us/">About Us</a></li>
</ul></div>


					</div>
				</div>
			</div>
		</nav><!-- .site-navigation -->
	</header><!-- #masthead -->

	<div id="content" class="site-content">

		<div class="top-section">
								</div>

		<div class="container main-content-area">
						<div class="row side-pull-left">
				<div class="main-content-inner col-sm-12 col-md-8">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		<article id="post-1502" class="post-1502 post type-post status-publish format-standard has-post-thumbnail hentry category-android tag-malware tag-packer">
	<img width="750" height="410" src="https://pentest.blog/wp-content/uploads/anubis-750x410.png" class="single-featured wp-post-image" alt="" decoding="async" fetchpriority="high" />	<div class="post-inner-content">
		<header class="entry-header page-header">

			<h1 class="entry-title ">N Ways to Unpack Mobile Malware</h1>

			<div class="entry-meta">
				<span class="posted-on"><i class="fa fa-calendar-alt"></i> <a href="https://pentest.blog/n-ways-to-unpack-mobile-malware/" rel="bookmark"><time class="entry-date published" datetime="2019-03-13T10:49:20+03:00">March 13, 2019</time><time class="updated" datetime="2019-04-09T16:24:46+03:00">April 9, 2019</time></a></span><span class="byline"> <i class="fa fa-user"></i> <span class="author vcard"><a class="url fn n" href="https://pentest.blog/author/ahmet-bilal-can/">Ahmet Bilal Can</a></span></span>
								<span class="cat-links"><i class="fa fa-folder-open"></i>
				 <a href="https://pentest.blog/category/android/" rel="category tag">Android</a>				</span>
								
			</div><!-- .entry-meta -->
		</header><!-- .entry-header -->

		<div class="entry-content">
			
<p>This article will briefly explain methods behind the mobile malware unpacking. It will be focusing on Anubis since it is the latest trending malware for almost a year now. Actors use dropper applications as their primary method of distribution. Droppers find their ways to Google Play store under generic names thereby infecting devices with Anubis. An example of a such dropper may found in the references. There were at least forty cases in Google Play in the last fall targeting Turkish users. <a href="https://twitter.com/LukasStefanko/status/1084728042927341569">@LukasStefanko&#8217;s twitter thread</a> may be helpful to get an overview of such campaigns. Anubis malware already analysed by fellows from the industry in a detailed manner. Therefore readers should find it more valuable to have an article focusing on packer mechanisms of Anubis.</p>



<span id="more-1502"></span>



<p>The sample used in this article is available at the references section. I strongly recommend downloading the sample and following through the article. I will be dividing this post into three sections.</p>



<ul><li> <a href="#packer"> Packers in Android Ecosystem</a> </li><li> <a href="#catch"> Catching Packers with Frida </a> </li><li> <a href="#defeat">How To Defeat Packers </a><ul><li>Dynamically</li><li>Statically</li></ul></li></ul>



<h2 class="wp-block-heading" id="packer">Packers in Android Ecosystem</h2>



<p>Mobile malwares also make use of packers to hide their malicious payloads from researchers and AV programs. This includes reflection, obfuscation, code-flow flattening and trash codes to make unpacking process stealthy. All mechanisms mentioned are used by the Anubis packer and therefore will be explored in this article.</p>



<h4 class="wp-block-heading">Loading classes at runtime<br></h4>



<p>Android applications must define their used services, receivers, activity classes in AndroidManifest file to use them. In Anubis samples, it is clear that there are many classes not defined in the Manifest file that are simply present in the source code.</p>



<ul class="wp-block-gallery columns-1 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img decoding="async" width="766" height="572" src="https://pentest.blog/wp-content/uploads/mani.png" alt="" data-id="1590" data-link="https://pentest.blog/?attachment_id=1590" class="wp-image-1590" srcset="https://pentest.blog/wp-content/uploads/mani.png 766w, https://pentest.blog/wp-content/uploads/mani-300x224.png 300w" sizes="(max-width: 766px) 100vw, 766px" /></figure></li></ul>



<p>This means that a file with non-defined classes should be loaded into application at run-time. There are two main ways of run-time loading in Android:</p>



<p style="text-align:left"><strong>From file:</strong></p>



<ul><li>dalvik.system.DexFile.loadDex depreciated after API 26</li><li>dalvik.system.DexClassLoader</li><li>dalvik.system.PathClassLoader </li></ul>



<p><strong>From memory: </strong></p>



<ul><li>dalvik.system.InMemoryDexClassLoader (not common in malwares)</li></ul>



<p>Loading from the file requires a dex/jar file to be present in file system. Anubis unpacks the encrypted data file and then drops the decrypted version. Later on malware proceeds loading decrypted dex into the application. After loading with DexClassLoader, malware removes the decrypted dex file. Tracing the dexClassLoader should make the loading routine clear. Since dexClassLoader is a class of dalvik.system package &#8220;dalvik.system.dexClassLoader&#8221; should be in the code but it is nowhere to be found.</p>



<div class="wp-block-image"><figure class="aligncenter"><img decoding="async" width="500" height="345" src="https://pentest.blog/wp-content/uploads/mzw9z.gif" alt="" class="wp-image-1651"/></figure></div>



<h4 class="wp-block-heading">Reflection<br></h4>



<p>Another useful method when dealing with malware is reflection. Reflection is an important concept in Java which lets you to call methods/classes without knowing about them in compile time. There are several classes/methods for reflection.</p>



<ul><li>java.lang.Class.forName </li><li>java.lang.ClassLoader.loadClass </li><li>java.lang.reflect.Method </li><li>java.lang.Class.getMethods </li></ul>



<p>Example usage of forName</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">cObj = Class.forName("dalvik.system.dexClassLoader");</pre>



<p>cObj variable holds the class object of dexClassLoader. This enables program to call methods of any given class. The problem is to find where function calls are made to reflection methods.</p>



<h2 class="wp-block-heading" id="catch">Catching packers with Frida</h2>



<p><a href="https://frida.re/">frida</a> is a dynamic instrumentation toolkit supported by nearly every operating system. Frida makes it possible to inject a piece of code to manipulate target program and also to trace program calls. In this case it will be used for tracing which reflection calls are made thereby analysing the threads. When previously mentioned function calls are made, console.log will be called additionally. But before that, let&#8217;s take a quick recap on how to setup Frida on android emulator.</p>



<p>Download frida-server suitable with your emulator from:<br>(e.g Genymotion uses x86 architecture.)<br><a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">adb push frida-server /data/local/tmp
adb shell
cd /data/local/tmp
chmod +x frida-server
./frida-server &amp;</pre>



<p>Frida tools should be installed in host machine by running<br><code>pip install frida-tools</code></p>



<p>After the setup, we can write a script to hook our target methods. We will start by defining variables for classes of our methods.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var classDef = Java.use('java.lang.Class');
var classLoaderDef = Java.use('java.lang.ClassLoader');
var loadClass = classLoaderDef.loadClass.overload('java.lang.String', 'boolean');
var forName = classDef.forName.overload('java.lang.String', 'boolean', 'java.lang.ClassLoader');
var reflect = Java.use('java.lang.reflect.Method')
var member = Java.use('java.lang.reflect.Member')
var dalvik = Java.use("dalvik.system.DexFile")
var dalvik2 = Java.use("dalvik.system.DexClassLoader")
var dalvik3 = Java.use("dalvik.system.PathClassLoader")
//var dalvik4 = Java.use("dalvik.system.InMemoryDexClassLoader")
var f = Java.use("java.io.File")
var url = Java.use("java.net.URL")
var obj = Java.use("java.lang.Object")
var fo = Java.use("java.io.FileOutputStream")</pre>



<p>We will be using this code snippet to change implementation of a method.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class.targetmethod.implementation = function(){
    console.log("[+] targetmethod catched !")
    stackTrace()
    return this.targetmethod()
}</pre>



<p><code>console.log("[+] {x} function catched !")</code> will enable us to see if the function is called. If function takes any parameters such as a string, logging those may become helpful during the analysis. Then we can get more information about the thread we are in. Frida is able to call any android function including <code>getStackTrace()</code>. But that requires a reference to the current thread object. Let&#8217;s start by getting instance of the thread class:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var ThreadDef = Java.use('java.lang.Thread');
var ThreadObj = ThreadDef.$new();</pre>



<p>ThreadObj holds instance of the Thread class and <code>currentThread()</code> can be used to get thread according to <a href="https://developer.android.com/reference/java/lang/Thread.html">https://developer.android.com/reference/java/lang/Thread.html</a>. <br>We can now use <code>getStackTrace()</code>and also loop through stackElements to print the call stack.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    function stackTrace() {
        console.log("------------START STACK---------------")
        var stack = ThreadObj.currentThread().getStackTrace();
        for (var i = 0; i &lt; stack.length; i++) {
            console.log(i + " => " + stack[i].toString());
        }
        console.log("------------END STACK---------------");
    }</pre>



<p>Printing call stack helps to identify call graph of reflections and unpacking mechanisms. For example dexClassLoader might have created with reflection. But when frida hooks into dexClassLoader and prints the call stack, we can see the functions before dexClassLoader is called. Unpacking routines are called at the very beginning of the application. Therefore frida should be attached as soon as possible to catch the unpacking process. Fortunately -f option in frida enables frida to spawn target app itself. frida accepts scripts with the -l parameter.<br><code>frida -U -f appname -l dereflect.js</code><br>Then frida waits input from the user to continue. <code>%resume</code> will resume the process. Full script is available at my github repository.<br><a href="https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/dereflect.js">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/dereflect.js</a></p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="963" height="182" src="https://pentest.blog/wp-content/uploads/ppp_1.png" alt="" class="wp-image-1641" srcset="https://pentest.blog/wp-content/uploads/ppp_1.png 963w, https://pentest.blog/wp-content/uploads/ppp_1-300x57.png 300w, https://pentest.blog/wp-content/uploads/ppp_1-768x145.png 768w" sizes="(max-width: 963px) 100vw, 963px" /><figcaption>Output without the stackTrace():</figcaption></figure>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="768" height="560" src="https://pentest.blog/wp-content/uploads/ppp_2.png" alt="" class="wp-image-1642" srcset="https://pentest.blog/wp-content/uploads/ppp_2.png 768w, https://pentest.blog/wp-content/uploads/ppp_2-300x219.png 300w" sizes="(max-width: 768px) 100vw, 768px" /><figcaption>With stackTrace()</figcaption></figure>



<p><em>Voila</em>.<br>You can see the functions called before the write method. After tracing these interval functions, you can see<code>RNlkfTEUX</code> and <code>lqfRafMrGew</code>are  called right before them. And turns out they are very important functions used in decryption of the encrypted file which we will come back later on.</p>



<h2 class="wp-block-heading" id="defeat"><strong>How to Defeat Packers</strong></h2>



<p>We can divide unpacking methods into two sections. Both ways lead to the decrypted file.</p>



<h3 class="wp-block-heading">Dynamically </h3>



<ul><li>By hooking: <ul><li>Intercept file.delete (Java level)</li><li>Intercept unlink syscall (system level) </li></ul></li><li>From memory: <ul><li>Dump the memory with gameguardian</li><li>Dump the memory with custom tools </li></ul></li></ul>



<h3 class="wp-block-heading">Statically:</h3>



<ul><li>Hands on manual unpacking</li></ul>



<p><strong>Dynamically: </strong><br>Intercepting methods is the easiest way.</p>



<p><strong>By hooking : Java Level</strong><br>When I first encountered Anubis and realized it was dropping a file, my first solution was hooking into file.delete function.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">Java.perform(function() { 
   var f = Java.use("java.io.File") 
   f.delete.implementation = function(a){ 
       s = this.getAbsolutePath() 
       if(s.includes("jar")){ 
          console.log("[+] Delete catched =>" +this.getAbsolutePath()) 
       } 
       return true 
   } 
}) </pre>



<p>This piece of code always returns true to file.delete function. After intercepting we can pull the dropped jar file. ✔</p>



<ul class="wp-block-gallery columns-1 is-cropped wp-block-gallery-2 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="940" height="273" src="https://pentest.blog/wp-content/uploads/del.png" alt="" data-id="1574" data-link="https://pentest.blog/?attachment_id=1574" class="wp-image-1574" srcset="https://pentest.blog/wp-content/uploads/del.png 940w, https://pentest.blog/wp-content/uploads/del-300x87.png 300w, https://pentest.blog/wp-content/uploads/del-768x223.png 768w" sizes="(max-width: 940px) 100vw, 940px" /></figure></li></ul>



<p>In addition to this we can automate our job with python bindings of frida and go through the folder that our target files are in. There are generally thousands of apks generated from those c&amp;c servers. Since each of them can have different IP addresses embedded, an <a href="https://twitter.com/0xabc0/status/1072888987285630976">automated</a> tool could make our life easier. <br><br><br></p>



<p><strong>By Hooking : System Level</strong><br>But what if malware uses native code to delete files? We can not always hook at Java level. We need to get deeper. What syscall is responsible for deleting file from file system and in libc?</p>



<ul class="wp-block-gallery alignleft columns-1 is-cropped wp-block-gallery-3 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="405" height="154" src="https://pentest.blog/wp-content/uploads/155136004439210407.png" alt="" data-id="1589" data-link="https://pentest.blog/?attachment_id=1589" class="wp-image-1589" srcset="https://pentest.blog/wp-content/uploads/155136004439210407.png 405w, https://pentest.blog/wp-content/uploads/155136004439210407-300x114.png 300w" sizes="(max-width: 405px) 100vw, 405px" /></figure></li></ul>



<p>Unlink function takes one parameter, a pointer to filename. We can hook unlink with the help of findExportByName. Code is taken from <a href="https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html">https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html</a> but I tweaked little bit so deleted file will be printed.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var unlinkPtr = Module.findExportByName(null, 'unlink');

Interceptor.replace(unlinkPtr, new NativeCallback( function (a){
    console.log("[+] Unlink : " + Memory.readUtf8String(ptr(a)))
    }, 'int', ['pointer']));</pre>



<p>Let&#8217;s run the script.</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="832" height="296" src="https://pentest.blog/wp-content/uploads/u.png" alt="" class="wp-image-1578" srcset="https://pentest.blog/wp-content/uploads/u.png 832w, https://pentest.blog/wp-content/uploads/u-300x107.png 300w, https://pentest.blog/wp-content/uploads/u-768x273.png 768w" sizes="(max-width: 832px) 100vw, 832px" /></figure>



<p>We intercepted the unlink call, since our script just replaced code of original function with console.log() , file will not be deleted from the file system. ✔</p>



<p><strong>From Memory:</strong><br>Even when file is deleted from file system because file was loaded into process, we can get trails of the deleted file from memory of that process. Since Android inherits from Linux, we can use /proc/pid folder to give us information about memory regions of a specified process. Let&#8217;s look at our target with <code>cat /proc/pid/maps | grep dex</code> filtering the dex.</p>



<ul class="wp-block-gallery columns-1 is-cropped wp-block-gallery-4 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="1024" height="113" src="https://pentest.blog/wp-content/uploads/4-1024x113.png" alt="" data-id="1583" data-link="https://pentest.blog/?attachment_id=1583" class="wp-image-1583" srcset="https://pentest.blog/wp-content/uploads/4-1024x113.png 1024w, https://pentest.blog/wp-content/uploads/4-300x33.png 300w, https://pentest.blog/wp-content/uploads/4-768x85.png 768w, https://pentest.blog/wp-content/uploads/4.png 1090w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></li></ul>



<p>We have found the trails of dex files. Now we need to dump these sections.<br><br><strong>Dump the Memory with Gameguardian:</strong></p>



<p>First way is by &#8220;cheating&#8221; 🙂 There is a tool called GameGuardian which is used in game hacking. You can do many interesting things with GameGuardian but we will only use dump mechanism for now.</p>



<ul class="wp-block-gallery aligncenter columns-3 is-cropped wp-block-gallery-5 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="594" height="955" src="https://pentest.blog/wp-content/uploads/gg1.png" alt="" data-id="1586" data-link="https://pentest.blog/?attachment_id=1586" class="wp-image-1586" srcset="https://pentest.blog/wp-content/uploads/gg1.png 594w, https://pentest.blog/wp-content/uploads/gg1-187x300.png 187w" sizes="(max-width: 594px) 100vw, 594px" /></figure></li><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="611" height="914" src="https://pentest.blog/wp-content/uploads/gg2.png" alt="" data-id="1585" data-link="https://pentest.blog/?attachment_id=1585" class="wp-image-1585" srcset="https://pentest.blog/wp-content/uploads/gg2.png 611w, https://pentest.blog/wp-content/uploads/gg2-201x300.png 201w" sizes="(max-width: 611px) 100vw, 611px" /></figure></li><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="602" height="877" src="https://pentest.blog/wp-content/uploads/gg3.png" alt="" data-id="1584" data-link="https://pentest.blog/?attachment_id=1584" class="wp-image-1584" srcset="https://pentest.blog/wp-content/uploads/gg3.png 602w, https://pentest.blog/wp-content/uploads/gg3-206x300.png 206w" sizes="(max-width: 602px) 100vw, 602px" /></figure></li></ul>



<p>Let&#8217;s start by installing and running the APK. Then launch GameGuardian and select the app name from left upmost button. Select right upmost button and the one underneath it. Now you can see dump memory option in menu. Put the hex codes of regions or select regions by clicking arrow buttons and press save. Yay!<br>We can pull dumped regions with :<br><code>adb pull /storage/emulated/0/packer .</code> ✔<br>Then you will see 2 files in packer folder. <br><code>com.eqrxhpdv.cbunlkwsqtz-dfb5a000-e0080000.bin  com.eqrxhpdv.cbunlkwsqtz-maps.txt</code><br><br>When examined with file command it detects our dex file as a data file.<br>We need to fix it by removing parts do not belong to our file.</p>



<p><strong>Dump the Memory with Custom Tools:</strong><br>Thanks to <a href="https://twitter.com/theempire_h">@theempire_h</a> we can dump regions of memory of the target app with a C program. <br><a href="https://github.com/CyberSaxosTiGER/androidDump/">https://github.com/CyberSaxosTiGER/androidDump</a><br>Here is how to dump a region with androidDump.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">adb push androidDump /data/local/tmp
adb shell
cd /data/local/tmp
chmod +x androidDump
./androidDump appname</pre>



<p>It dumps 3 blobs of data. ✔</p>



<p>But after dumping it, <code>file</code> command still do not give us the correct type 🙁 It turns out that we should modify the file a little bit. To find magic byte of dex I wrote this script.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import binascii
import sys
filename = sys.argv[1]
with open(filename, 'rb') as f:
    content = f.read()
h = binascii.hexlify(content).split(b'6465780a')
h.pop(0)
h = b'6465780a' + b''.join(h)
dex = open(sys.argv[1][:-4]+".dex","wb")
dex.write(binascii.a2b_hex(h))
dex.close()
</pre>



<p><a href="https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/deDex.py">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/deDex.py</a><br>After running our script on the file, we open it.</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="853" height="536" src="https://pentest.blog/wp-content/uploads/tadaa_1.png" alt="" class="wp-image-1626" srcset="https://pentest.blog/wp-content/uploads/tadaa_1.png 853w, https://pentest.blog/wp-content/uploads/tadaa_1-300x189.png 300w, https://pentest.blog/wp-content/uploads/tadaa_1-768x483.png 768w" sizes="(max-width: 853px) 100vw, 853px" /></figure>



<div class="wp-block-image"><figure class="aligncenter is-resized"><img loading="lazy" decoding="async" src="https://pentest.blog/wp-content/uploads/yes.gif" alt="" class="wp-image-1653" width="339" height="458"/></figure></div>



<p>We found our lost classes 🙂 </p>



<p><strong>Statically: </strong><br>Here is a blog post explaining unpacking process from a different perspective. <a href="https://sysopfb.github.io/malware,/reverse-engineering/2018/08/30/Unpacking-Anubis-APK.html">https://sysopfb.github.io/malware,/reverse-engineering/2018/08/30/Unpacking-Anubis-APK.html</a> <br>I found rc4 key with the help of stackTrace. But apparently searching for <code>^</code> value is a very efficient way to find RC4 routines for Anubis 🙂 <br>To find rc4 key easily in JADX, here is quick tip:</p>



<ul><li>search &#8220;% length&#8221;</li><li>right click to method you are in, press find Usage</li><li>bArr2 will be used as rc4 key to decrypt.</li></ul>



<p>Here is our sample&#8217;s decryption key as bArr2 . Does it look familiar?</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="766" height="263" src="https://pentest.blog/wp-content/uploads/barr_1.png" alt="" class="wp-image-1625" srcset="https://pentest.blog/wp-content/uploads/barr_1.png 766w, https://pentest.blog/wp-content/uploads/barr_1-300x103.png 300w" sizes="(max-width: 766px) 100vw, 766px" /></figure>



<p>With bArr2, we can decrypt the encrypted file from images folder of the APK. Here is a snippet for decrypting the file with bArr2 . Script takes 2 parameters, bArr2 and the encrypted file. For our case it is mediumcrop. APK files can be simply unzipped to access the content of it. ✔<br><br><a href="https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/anubis_manual.py">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/anubis_manual.py</a></p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="693" height="273" src="https://pentest.blog/wp-content/uploads/dec.png" alt="" class="wp-image-1656" srcset="https://pentest.blog/wp-content/uploads/dec.png 693w, https://pentest.blog/wp-content/uploads/dec-300x118.png 300w" sizes="(max-width: 693px) 100vw, 693px" /></figure>



<p>After decrypting and unzipping, we get our dex.</p>



<div class="wp-block-image"><figure class="aligncenter is-resized"><img loading="lazy" decoding="async" src="https://pentest.blog/wp-content/uploads/target_1.png" alt="" class="wp-image-1624" width="417" height="362" srcset="https://pentest.blog/wp-content/uploads/target_1.png 454w, https://pentest.blog/wp-content/uploads/target_1-300x260.png 300w" sizes="(max-width: 417px) 100vw, 417px" /></figure></div>



<p>After extracting the config, there is one more step to get the address of c&amp;c server. Malware gets page source of the telegram address and changes Chinese characters with ASCII letters. It then processes the base64 string. After decoding base64, it uses <code>service</code> to decrypt data that encrypted with rc4 scheme. Here is a snippet for decrypting Chinese chars to c&amp;c addresses.</p>



<p><a href="https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/solve_chinese.py">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/solve_chinese.py</a></p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="594" height="91" src="https://pentest.blog/wp-content/uploads/solve.png" alt="" class="wp-image-1649" srcset="https://pentest.blog/wp-content/uploads/solve.png 594w, https://pentest.blog/wp-content/uploads/solve-300x46.png 300w" sizes="(max-width: 594px) 100vw, 594px" /></figure>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="400" height="400" src="https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg" alt="" class="wp-image-1674" srcset="https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg 400w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-150x150.jpg 150w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-300x300.jpg 300w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-60x60.jpg 60w" sizes="(max-width: 400px) 100vw, 400px" /></figure></div>



<p>I managed to decrypt the Anubis payload with Androguard without running the APK in an emulator! After dumping the dex file, my script will find the config class printing the c2 and the encryption key. Config class is in one of the <code>a,b or c</code> or in <code>ooooooooooooo{0,2}o</code> classes in newer versions.<br>By checking counts of &#8220;this&#8221; keywords in class source code I managed to decrypt all versions of anubis (lazy :P). Here is output of my script to get c2 and key from an Anubis sample. <a href="https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/getc2_imp.py">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/getc2_imp.py</a></p>



<ul class="wp-block-gallery columns-1 is-cropped wp-block-gallery-6 is-layout-flex wp-block-gallery-is-layout-flex"><li class="blocks-gallery-item"><figure><img loading="lazy" decoding="async" width="851" height="182" src="https://pentest.blog/wp-content/uploads/dump.png" alt="" data-id="1607" data-link="https://pentest.blog/?attachment_id=1607" class="wp-image-1607" srcset="https://pentest.blog/wp-content/uploads/dump.png 851w, https://pentest.blog/wp-content/uploads/dump-300x64.png 300w, https://pentest.blog/wp-content/uploads/dump-768x164.png 768w" sizes="(max-width: 851px) 100vw, 851px" /></figure></li></ul>



<h3 class="wp-block-heading">Conclusion</h3>



<p>There are many ways to unpack mobile malware and trace packing mechanisms. We might see <code>dalvik.system.InMemoryDexClassLoader</code> used in the future. If this is used, delete hooks will not be able to catch dropped files because everything will be done in memory 🙂 But dumping memory will catch these methods. Knowing different ways always helps. If you have any question feel free to ask in comment section or through <a href="https://twitter.com/0xabc0">@0xabc0</a><br><br>Cheers.</p>



<p>Special thanks to <a href="https://twitter.com/godelx0">@godelx0</a></p>



<h3 class="wp-block-heading">Links &amp; References</h3>



<p>Dropper sample:<br><a href="https://koodous.com/apks/3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e">3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e</a><br>Anubis sample:<br><a href="https://koodous.com/apks/e01ed0befbc50eeedcde5b5c07bf8a51ab39c5b20ee6e1f5afe04e161d072f1d">e01ed0befbc50eeedcde5b5c07bf8a51ab39c5b20ee6e1f5afe04e161d072f1d</a><br><a href="https://codeshare.frida.re/@razaina/get-a-stack-trace-in-your-hook/">https://codeshare.frida.re/@razaina/get-a-stack-trace-in-your-hook/</a><br><a href="https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html">https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html</a><br><a href="https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-part-1-741e12f5a6bd">https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-</a><br><a href="https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-part-1-741e12f5a6bd">part-1-741e12f5a6bd</a><a href="https://koodous.com/apks/3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e">3</a><br>All materials:<br><a href="https://github.com/eybisi/nwaystounpackmobilemalware">https://github.com/eybisi/nwaystounpackmobilemalware</a></p>



<p><br></p>
					</div><!-- .entry-content -->

		<footer class="entry-meta">

					  <!-- tags -->
		  <div class="tagcloud">

				<a href="https://pentest.blog/tag/malware/">malware</a> <a href="https://pentest.blog/tag/packer/">packer</a> 
		  </div>
		  <!-- end tags -->
			
		</footer><!-- .entry-meta -->
	</div>

	
</article><!-- #post-## -->

<div id="disqus_thread"></div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://pentest.blog/advisory-mailcleaner-community-edition-remote-code-execution/" rel="prev"><i class="fa fa-chevron-left"></i> <span class="post-title">Advisory | MailCleaner Community Edition Remote Code Execution CVE-2018-20323</span></a></div><div class="nav-next"><a href="https://pentest.blog/android-malware-analysis-dissecting-hydra-dropper/" rel="next"><span class="post-title">Android Malware Analysis : Dissecting Hydra Dropper <i class="fa fa-chevron-right"></i></span></a></div></div>
	</nav>
		</main><!-- #main -->
	</div><!-- #primary -->

</div><!-- close .main-content-inner -->
<div id="secondary" class="widget-area col-sm-12 col-md-4" role="complementary">
	<div class="well">
				<aside id="search-2" class="widget widget_search">
<form role="search" method="get" class="form-search" action="https://pentest.blog/">
  <div class="input-group">
	  <label class="screen-reader-text" for="s">Search for:</label>
	<input type="text" class="form-control search-query" placeholder="Search&hellip;" value="" name="s" title="Search for:" />
	<span class="input-group-btn">
	  <button type="submit" class="btn btn-default" name="submit" id="searchsubmit" value="Search"><span class="glyphicon glyphicon-search"></span></button>
	</span>
  </div>
</form>
</aside><aside id="text-3" class="widget widget_text"><h3 class="widget-title">PRODAFT Cyber Intelligence and Cyber Security Services</h3>			<div class="textwidget"><a href="https://www.invictuseurope.com/"><img src="https://pentest.blog/wp-content/uploads/Mg6EYwIk_400x400.jpg"></a></div>
		</aside>
		<aside id="recent-posts-2" class="widget widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://pentest.blog/advisory-netmodule-router-software-race-condition-leads-to-remote-code-execution/">Advisory | NetModule Router Software Race Condition Leads to Remote Code Execution</a>
									</li>
											<li>
					<a href="https://pentest.blog/advisory-roxy-wi-unauthenticated-remote-code-executions-cve-2022-31137/">Advisory | Roxy-WI Unauthenticated Remote Code Executions CVE-2022-31137</a>
									</li>
											<li>
					<a href="https://pentest.blog/advisory-glpi-service-management-software-sql-injection-remote-code-execution-and-local-file-inclusion/">Advisory | GLPI Service Management Software Multiple Vulnerabilities and Remote Code Execution</a>
									</li>
											<li>
					<a href="https://pentest.blog/liderahenk-0day-all-your-pardus-clients-belongs-to-me/">LiderAhenk 0day &#8211; All your PARDUS Clients Belongs To Me (CVE-2021-3825)</a>
									</li>
											<li>
					<a href="https://pentest.blog/pardus-21-linux-distro-remote-code-execution-0day-2021/">Pardus 21 Linux Distro &#8211; Remote Code Execution 0day 2021 CVE-2021-3806</a>
									</li>
					</ul>

		</aside><aside id="recent-comments-2" class="widget widget_recent_comments"><h3 class="widget-title">Latest Comments</h3><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href="https://github.com/EgeBalci" class="url" rel="ugc external nofollow">Ege Balci</a></span> on <a href="https://pentest.blog/art-of-anti-detection-3-shellcode-alchemy/#comment-1244">Art of Anti Detection 3 &#8211; Shellcode Alchemy</a></li><li class="recentcomments"><span class="comment-author-link">Chase Run Taylor</span> on <a href="https://pentest.blog/art-of-anti-detection-1-introduction-to-av-detection-techniques/#comment-1243">Art of Anti Detection 1 &#8211;  Introduction to AV &amp; Detection Techniques</a></li><li class="recentcomments"><span class="comment-author-link"><a href="http://www.mehmetince.net/" class="url" rel="ugc external nofollow">Mehmet İnce</a></span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1242">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li><li class="recentcomments"><span class="comment-author-link">0x00</span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1241">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li><li class="recentcomments"><span class="comment-author-link"><a href="http://www.mehmetince.net/" class="url" rel="ugc external nofollow">Mehmet İnce</a></span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1240">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li></ul></aside><aside id="tag_cloud-2" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><a href="https://pentest.blog/tag/0day/" class="tag-cloud-link tag-link-70 tag-link-position-1" style="font-size: 22pt;" aria-label="0day (16 items)">0day</a>
<a href="https://pentest.blog/tag/1day/" class="tag-cloud-link tag-link-67 tag-link-position-2" style="font-size: 10.709677419355pt;" aria-label="1day (2 items)">1day</a>
<a href="https://pentest.blog/tag/advisory/" class="tag-cloud-link tag-link-66 tag-link-position-3" style="font-size: 18.537634408602pt;" aria-label="advisory (9 items)">advisory</a>
<a href="https://pentest.blog/tag/alienvault/" class="tag-cloud-link tag-link-69 tag-link-position-4" style="font-size: 8pt;" aria-label="alienvault (1 item)">alienvault</a>
<a href="https://pentest.blog/tag/android/" class="tag-cloud-link tag-link-95 tag-link-position-5" style="font-size: 8pt;" aria-label="android (1 item)">android</a>
<a href="https://pentest.blog/tag/application/" class="tag-cloud-link tag-link-98 tag-link-position-6" style="font-size: 8pt;" aria-label="application (1 item)">application</a>
<a href="https://pentest.blog/tag/assembly/" class="tag-cloud-link tag-link-90 tag-link-position-7" style="font-size: 8pt;" aria-label="assembly (1 item)">assembly</a>
<a href="https://pentest.blog/tag/bof/" class="tag-cloud-link tag-link-86 tag-link-position-8" style="font-size: 8pt;" aria-label="bof (1 item)">bof</a>
<a href="https://pentest.blog/tag/burp/" class="tag-cloud-link tag-link-52 tag-link-position-9" style="font-size: 10.709677419355pt;" aria-label="burp (2 items)">burp</a>
<a href="https://pentest.blog/tag/bypass/" class="tag-cloud-link tag-link-78 tag-link-position-10" style="font-size: 10.709677419355pt;" aria-label="bypass (2 items)">bypass</a>
<a href="https://pentest.blog/tag/crypter/" class="tag-cloud-link tag-link-27 tag-link-position-11" style="font-size: 10.709677419355pt;" aria-label="crypter (2 items)">crypter</a>
<a href="https://pentest.blog/tag/decoder/" class="tag-cloud-link tag-link-75 tag-link-position-12" style="font-size: 8pt;" aria-label="decoder (1 item)">decoder</a>
<a href="https://pentest.blog/tag/dns/" class="tag-cloud-link tag-link-15 tag-link-position-13" style="font-size: 14.021505376344pt;" aria-label="dns (4 items)">dns</a>
<a href="https://pentest.blog/tag/emet/" class="tag-cloud-link tag-link-76 tag-link-position-14" style="font-size: 8pt;" aria-label="EMET (1 item)">EMET</a>
<a href="https://pentest.blog/tag/encoder/" class="tag-cloud-link tag-link-74 tag-link-position-15" style="font-size: 8pt;" aria-label="encoder (1 item)">encoder</a>
<a href="https://pentest.blog/tag/exploit/" class="tag-cloud-link tag-link-77 tag-link-position-16" style="font-size: 17.784946236559pt;" aria-label="exploit (8 items)">exploit</a>
<a href="https://pentest.blog/tag/hook/" class="tag-cloud-link tag-link-89 tag-link-position-17" style="font-size: 8pt;" aria-label="hook (1 item)">hook</a>
<a href="https://pentest.blog/tag/iat/" class="tag-cloud-link tag-link-88 tag-link-position-18" style="font-size: 8pt;" aria-label="iat (1 item)">iat</a>
<a href="https://pentest.blog/tag/icmp/" class="tag-cloud-link tag-link-17 tag-link-position-19" style="font-size: 10.709677419355pt;" aria-label="icmp (2 items)">icmp</a>
<a href="https://pentest.blog/tag/in-memory/" class="tag-cloud-link tag-link-84 tag-link-position-20" style="font-size: 8pt;" aria-label="in-memory (1 item)">in-memory</a>
<a href="https://pentest.blog/tag/iot/" class="tag-cloud-link tag-link-104 tag-link-position-21" style="font-size: 8pt;" aria-label="IOT (1 item)">IOT</a>
<a href="https://pentest.blog/tag/linux/" class="tag-cloud-link tag-link-8 tag-link-position-22" style="font-size: 8pt;" aria-label="linux (1 item)">linux</a>
<a href="https://pentest.blog/tag/malware/" class="tag-cloud-link tag-link-25 tag-link-position-23" style="font-size: 14.021505376344pt;" aria-label="malware (4 items)">malware</a>
<a href="https://pentest.blog/tag/metasploit/" class="tag-cloud-link tag-link-61 tag-link-position-24" style="font-size: 17.784946236559pt;" aria-label="metasploit (8 items)">metasploit</a>
<a href="https://pentest.blog/tag/multi-stage/" class="tag-cloud-link tag-link-82 tag-link-position-25" style="font-size: 8pt;" aria-label="multi-stage (1 item)">multi-stage</a>
<a href="https://pentest.blog/tag/nas/" class="tag-cloud-link tag-link-99 tag-link-position-26" style="font-size: 8pt;" aria-label="nas (1 item)">nas</a>
<a href="https://pentest.blog/tag/packer/" class="tag-cloud-link tag-link-81 tag-link-position-27" style="font-size: 10.709677419355pt;" aria-label="packer (2 items)">packer</a>
<a href="https://pentest.blog/tag/php/" class="tag-cloud-link tag-link-12 tag-link-position-28" style="font-size: 8pt;" aria-label="php (1 item)">php</a>
<a href="https://pentest.blog/tag/ransomware/" class="tag-cloud-link tag-link-80 tag-link-position-29" style="font-size: 8pt;" aria-label="ransomware (1 item)">ransomware</a>
<a href="https://pentest.blog/tag/rce/" class="tag-cloud-link tag-link-101 tag-link-position-30" style="font-size: 8pt;" aria-label="rce (1 item)">rce</a>
<a href="https://pentest.blog/tag/reflective/" class="tag-cloud-link tag-link-85 tag-link-position-31" style="font-size: 8pt;" aria-label="reflective (1 item)">reflective</a>
<a href="https://pentest.blog/tag/research/" class="tag-cloud-link tag-link-102 tag-link-position-32" style="font-size: 10.709677419355pt;" aria-label="research (2 items)">research</a>
<a href="https://pentest.blog/tag/reverse/" class="tag-cloud-link tag-link-96 tag-link-position-33" style="font-size: 8pt;" aria-label="reverse (1 item)">reverse</a>
<a href="https://pentest.blog/tag/reversing/" class="tag-cloud-link tag-link-41 tag-link-position-34" style="font-size: 8pt;" aria-label="reversing (1 item)">reversing</a>
<a href="https://pentest.blog/tag/secure-coding/" class="tag-cloud-link tag-link-97 tag-link-position-35" style="font-size: 8pt;" aria-label="secure coding (1 item)">secure coding</a>
<a href="https://pentest.blog/tag/securityonion/" class="tag-cloud-link tag-link-87 tag-link-position-36" style="font-size: 8pt;" aria-label="securityonion (1 item)">securityonion</a>
<a href="https://pentest.blog/tag/self-defence/" class="tag-cloud-link tag-link-91 tag-link-position-37" style="font-size: 8pt;" aria-label="self-defence (1 item)">self-defence</a>
<a href="https://pentest.blog/tag/shellcode/" class="tag-cloud-link tag-link-73 tag-link-position-38" style="font-size: 10.709677419355pt;" aria-label="shellcode (2 items)">shellcode</a>
<a href="https://pentest.blog/tag/siem/" class="tag-cloud-link tag-link-72 tag-link-position-39" style="font-size: 8pt;" aria-label="siem (1 item)">siem</a>
<a href="https://pentest.blog/tag/sql-injection/" class="tag-cloud-link tag-link-13 tag-link-position-40" style="font-size: 12.516129032258pt;" aria-label="sql injection (3 items)">sql injection</a>
<a href="https://pentest.blog/tag/sqlmap/" class="tag-cloud-link tag-link-62 tag-link-position-41" style="font-size: 10.709677419355pt;" aria-label="sqlmap (2 items)">sqlmap</a>
<a href="https://pentest.blog/tag/stager/" class="tag-cloud-link tag-link-83 tag-link-position-42" style="font-size: 8pt;" aria-label="stager (1 item)">stager</a>
<a href="https://pentest.blog/tag/storage/" class="tag-cloud-link tag-link-103 tag-link-position-43" style="font-size: 8pt;" aria-label="storage (1 item)">storage</a>
<a href="https://pentest.blog/tag/tunneling/" class="tag-cloud-link tag-link-14 tag-link-position-44" style="font-size: 8pt;" aria-label="tunneling (1 item)">tunneling</a>
<a href="https://pentest.blog/tag/windows/" class="tag-cloud-link tag-link-51 tag-link-position-45" style="font-size: 12.516129032258pt;" aria-label="windows (3 items)">windows</a></div>
</aside><aside id="custom_html-3" class="widget_text widget widget_custom_html"><h3 class="widget-title">Awarded Top 15 Pentest Blog</h3><div class="textwidget custom-html-widget"><a href="https://blog.feedspot.com/pentest_blogs/" title="Pentest Blogs" target="_blank" rel="noopener"><img alt="Pentest Blogs" src="/wp-content/uploads/pentest_1000px.png"/></a>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-88100923-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-88100923-1');
</script>

</div></aside>	</div>
</div><!-- #secondary -->
		</div><!-- close .row -->
	</div><!-- close .container -->
</div><!-- close .site-content -->

	<div id="footer-area">
		<div class="container footer-inner">
			<div class="row">
				
				</div>
		</div>

		<footer id="colophon" class="site-footer" role="contentinfo">
			<div class="site-info container">
				<div class="row">
										<nav role="navigation" class="col-md-6">
											</nav>
					<div class="copyright col-md-6">
						INVICTUS Cyber Security & Intelligence Services |						Theme by <a href="http://colorlib.com/" target="_blank" rel="nofollow noopener">Colorlib</a> Powered by <a href="http://wordpress.org/" target="_blank">WordPress</a>					</div>
				</div>
			</div><!-- .site-info -->
			<div class="scroll-to-top"><i class="fa fa-angle-up"></i></div><!-- .scroll-to-top -->
		</footer><!-- #colophon -->
	</div>
</div><!-- #page -->

		<script type="text/javascript">
		  jQuery(document).ready(function ($) {
			if ($(window).width() >= 767) {
			  $('.navbar-nav > li.menu-item > a').click(function () {
				if ($(this).attr('target') !== '_blank') {
				  window.location = $(this).attr('href')
				}
			  })
			}
		  })
		</script>
	<style id='core-block-supports-inline-css' type='text/css'>
.wp-block-gallery.wp-block-gallery-1{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}.wp-block-gallery.wp-block-gallery-2{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}.wp-block-gallery.wp-block-gallery-3{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}.wp-block-gallery.wp-block-gallery-4{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}.wp-block-gallery.wp-block-gallery-5{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}.wp-block-gallery.wp-block-gallery-6{--wp--style--unstable-gallery-gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );gap:var( --wp--style--gallery-gap-default, var( --gallery-block--gutter-size, var( --wp--style--block-gap, 0.5em ) ) );}
</style>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/asciiplayer/asciinema-player.js?ver=2.4.1" id="asciinema-player-js-js"></script>
<script type="text/javascript" id="disqus_count-js-extra">
/* <![CDATA[ */
var countVars = {"disqusShortname":"pentestblog"};
/* ]]> */
</script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/disqus-comment-system/public/js/comment_count.js?ver=3.1.1" id="disqus_count-js"></script>
<script type="text/javascript" id="disqus_embed-js-extra">
/* <![CDATA[ */
var embedVars = {"disqusConfig":{"integration":"wordpress 3.1.1"},"disqusIdentifier":"1502 https:\/\/pentest.blog\/?p=1502","disqusShortname":"pentestblog","disqusTitle":"N Ways to Unpack Mobile Malware","disqusUrl":"https:\/\/pentest.blog\/n-ways-to-unpack-mobile-malware\/","postId":"1502"};
/* ]]> */
</script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/disqus-comment-system/public/js/comment_embed.js?ver=3.1.1" id="disqus_embed-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/skip-link-focus-fix.min.js?ver=20140222" id="sparkling-skip-link-focus-fix-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/comment-reply.min.js?ver=6.5.3" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=vLiMInY5I09xi1g" id="enlighterjs-js"></script>
<script type="text/javascript" id="enlighterjs-js-after">
/* <![CDATA[ */
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":2,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"enlighter","language":"generic","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
/* ]]> */
</script>

</body>
</html>
