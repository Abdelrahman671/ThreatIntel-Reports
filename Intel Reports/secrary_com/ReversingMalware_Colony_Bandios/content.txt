<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="apple-mobile-web-app-capable" content="yes"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1"> <title> Reversing Bandios/Colony Malware | secrary[dot]com </title> <meta name="description" content=" secrary[dot]com::blog "> <meta name="keywords" content="reverse engineering, malware, windows, android, internals, blog"> <meta name="HandheldFriendly" content="True"> <meta name="MobileOptimized" content="320"> <!-- Social: Facebook / Open Graph --> <meta property="og:type" content="website"> <meta property="og:url" content="https://secrary.com/ReversingMalware/Colony_Bandios/"> <meta property="og:title" content=" Reversing Bandios/Colony Malware | secrary[dot]com "> <meta property="og:image" content="https://secrary.com"> <meta property="og:description" content=" secrary[dot]com::blog "> <meta property="og:site_name" content="@_qaz_qaz"> <meta property="og:locale" content="en_US"> <!-- Social: Twitter --> <meta name="twitter:card" content="summary_large_image"> <meta name="twitter:site" content="@_qaz_qaz"> <meta name="twitter:title" content=" Reversing Bandios/Colony Malware | secrary[dot]com "> <meta name="twitter:description" content=" secrary[dot]com::blog "> <meta name="twitter:image:src" content="https://secrary.com"> <!-- Social: Google+ / Schema.org --> <meta itemprop="name" content=" Reversing Bandios/Colony Malware | secrary[dot]com "> <meta itemprop="description" content=" secrary[dot]com::blog "> <meta itemprop="image" content="https://secrary.com"> <!-- Canonical link tag --> <link rel="canonical" href="https://secrary.com/ReversingMalware/Colony_Bandios/"> <link rel="alternate" type="application/rss+xml" title="secrary[dot]com" href="https://secrary.com/feed.xml"> <!-- rel prev and next --> <link rel="stylesheet" href="https://secrary.com/assets/css/main.css"> </head> <body> <main class="wrapper"> <header class="site-header"> <nav class="nav"> <div class="container"> <h1 class="logo"><a href="https://secrary.com/">secrary<span>[dot]com</span></a></h1> <ul class="navbar"> <li><a href="https://secrary.com/about">about me</a></li> <!-- <li><a href="https://secrary.com/feed.xml" target="_blank">RSS</a></li> --> </ul> </div> </nav> </header> <article class="post container" itemscope itemtype="http://schema.org/BlogPosting" > <header class="post-header"> <h1 class="post-title" itemprop="name headline">Reversing Bandios/Colony Malware</h1> </header> <div class="post-content" itemprop="articleBody"> <p>SHA256: <a href="https://www.virustotal.com/#/file/59c662a5207c6806046205348b22ee45da3f685fe022556716dbbd6643e61834">59c662a5207c6806046205348b22ee45da3f685fe022556716dbbd6643e61834</a></p> <p>I found the sample on the <a href="https://app.any.run/tasks/1aff9ff2-0b76-45b4-9e3d-b51796b637ad">ANY.RUN</a> sandbox.</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778349-ffb6eab4-40a7-11e8-86d9-50f16359ab02.PNG" alt="1" /></p> <p>On the <code class="language-plaintext highlighter-rouge">ANY.RUN</code> sandbox we see that it spawns the child process with <code class="language-plaintext highlighter-rouge">-install</code> argument, the child process creates several files under <code class="language-plaintext highlighter-rouge">%SYSTEM_DIRECTORY%</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778351-ffdd77b0-40a7-11e8-8918-94348be2875f.png" alt="2" /></p> <p>If we run the same executable on <a href="https://www.hybrid-analysis.com/sample/59c662a5207c6806046205348b22ee45da3f685fe022556716dbbd6643e61834?environmentId=100">hybrid-analysis</a> we get almost nothing, it executes recursively and never ends:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778331-fca9d084-40a7-11e8-9256-a345df66d5dc.PNG" alt="3" /></p> <p>Let’s dive in deep and see what happens.</p> <p><code class="language-plaintext highlighter-rouge">NOTE: I've renamed functions after analysis</code></p> <p>After getting the necessary privileges it checks if <code class="language-plaintext highlighter-rouge">-install</code> argument is there. if not, it executes <code class="language-plaintext highlighter-rouge">copy_tmp_with_install_arg</code> and <code class="language-plaintext highlighter-rouge">collect_encrypt_send</code>, otherwise <code class="language-plaintext highlighter-rouge">iaStorE_and_files</code> will be executed.</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778332-fcd2ec30-40a7-11e8-8d20-efd695155432.PNG" alt="4" /></p> <p>Inside <code class="language-plaintext highlighter-rouge">copy_tmp_with_install_arg</code> it copies itself to <code class="language-plaintext highlighter-rouge">%TEMP%</code> directory and executes with the <code class="language-plaintext highlighter-rouge">-install</code> argument:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778333-fd0abb1a-40a7-11e8-8b9a-771c11fa6ef2.PNG" alt="5" /></p> <p>A very interesting fact is that there are two ways to execute application using the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx"><code class="language-plaintext highlighter-rouge">CreateProcess</code></a> function:</p> <p><code class="language-plaintext highlighter-rouge">CreateProcess(exePath, nullptr, ...);</code> and <code class="language-plaintext highlighter-rouge">CreateProcess(nullptr, exePath, ...);</code>, if we run the program via the first method we get command line string with quotation marks, otherwise we get one without it:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778377-571a07be-40a8-11e8-9b9e-7338c00c0274.png" alt="create_process_diff" /></p> <p>The sample calls the second variant and at the beginning of the process it checks the arguments without quotation marks, in the normal environment it works as expected but not on the <code class="language-plaintext highlighter-rouge">hybrid-analysis</code> sandbox. Most likely, <code class="language-plaintext highlighter-rouge">hybrid-analysis</code> hooks <code class="language-plaintext highlighter-rouge">CreateProcess</code> at some level and after checking parameters it changes something and passes arguments to lower functions, so, at the end, we get a different command line string, which causes infinite recursion in case of the sample.</p> <p>We can use this simple technique to bypass <code class="language-plaintext highlighter-rouge">hybrid-analysis</code> sandbox (<code class="language-plaintext highlighter-rouge">any.run</code> is immune):</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778378-573ddf40-40a8-11e8-8c93-bc38f215cbda.png" alt="detect_hybrid_analysis" /></p> <p>That’s the reason why <code class="language-plaintext highlighter-rouge">hybrid-analysis</code> fails. Let’s back to our analysis.</p> <p><code class="language-plaintext highlighter-rouge">UPDATE 17.04.2018: The bypass on hybrid-analysis is fixed now</code></p> <p>After executing child process with <code class="language-plaintext highlighter-rouge">-install</code> parameter, it calls <code class="language-plaintext highlighter-rouge">collect_encrypt_send</code> function and starts collection information about the system:</p> <p>Windows version:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778334-fd327d80-40a7-11e8-8d9e-a900658c8be0.PNG" alt="6" /></p> <p>Installed browser:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778335-fd57b62c-40a7-11e8-8a92-d8d10ec28be5.PNG" alt="7" /></p> <p><code class="language-plaintext highlighter-rouge">NOTE: A clean version of Windows 10 contains HKEY_CURRENT_USER\Software\Google\Chrome key, even if there is no Chrome installed, so this method is not reliable</code></p> <p>Installed AV via checking <code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\\SOFTWARE\\%AV_NAME%</code> key:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778336-fd7b9448-40a7-11e8-8969-cf2e7ae15ca5.PNG" alt="8" /></p> <p>MAC address of the adapter and system language:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778337-fda3ab86-40a7-11e8-8899-72be071ffe21.PNG" alt="9" /></p> <p>It passes the collected information to the <code class="language-plaintext highlighter-rouge">machine_info_AES_base64</code> function, which encrypts the content with <code class="language-plaintext highlighter-rouge">AES</code> and encodes with <code class="language-plaintext highlighter-rouge">base64</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778338-fdd23a3c-40a7-11e8-92e3-7e53de520e0a.png" alt="10" /></p> <p>Inside <code class="language-plaintext highlighter-rouge">machine_info_AES_base64</code> it calls <code class="language-plaintext highlighter-rouge">CoCreateGuid</code> to generate 8 bytes of random data and adds another 8 bytes hardcoded value <code class="language-plaintext highlighter-rouge">1Q2a3k79</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778339-fdf7de22-40a7-11e8-9aa1-b6db2cc59390.PNG" alt="11" /></p> <p>The sample uses <code class="language-plaintext highlighter-rouge">MD5</code> functions from <code class="language-plaintext highlighter-rouge">advapi32.dll</code> to calculate the <code class="language-plaintext highlighter-rouge">md5</code> hash of the abovementioned 16 bytes string (<code class="language-plaintext highlighter-rouge">8_rand_bytes_8_hard_coded</code>)</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778340-fe21b526-40a7-11e8-93fc-0839a462d96d.PNG" alt="12" /></p> <p>After that, it uses the hash as the key to encrypt the system information using <code class="language-plaintext highlighter-rouge">AES</code> algorithm and encodes the encrypted content via <code class="language-plaintext highlighter-rouge">base64</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778341-fe4e63c8-40a7-11e8-853e-f870241c5c2a.PNG" alt="13" /></p> <p><code class="language-plaintext highlighter-rouge">NOTE</code>: <a href="https://bitbucket.org/daniel_plohmann/simplifire.idascope/"><code class="language-plaintext highlighter-rouge">IDAScope</code></a> plugin for <code class="language-plaintext highlighter-rouge">IDA Pro</code> is very useful to detect which cryptography algorithms are used in a sample.</p> <p>It sends the encrypted and encoded data to <code class="language-plaintext highlighter-rouge">iostream.system.band/dump/io/time.php</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778342-fe78fb24-40a7-11e8-8c84-8f0beb073ae7.PNG" alt="14" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/38778343-fe9d0b9a-40a7-11e8-8415-41e9ae4f0b6f.PNG" alt="15" /></p> <p>The first 8 bytes are generated by the <code class="language-plaintext highlighter-rouge">CoCreateGuid</code> call. There is simple code to decrypt the traffic content:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778344-fec5aac8-40a7-11e8-964d-164548c4449b.PNG" alt="16" /></p> <script src="https://gist.github.com/secrary/5266a746928db77a0738ccd15eb67392.js" type="5983a82bfd0bcb93f1d8c859-text/javascript"></script> <p>After sending system information, the parent process dies, but the child process continues execution with the <code class="language-plaintext highlighter-rouge">-install</code> argument, and in this case, it executes the <code class="language-plaintext highlighter-rouge">iaStorE_and_files</code> function.</p> <p>After calling the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724340(v=vs.85).aspx"><code class="language-plaintext highlighter-rouge">GetNativeSystemInfo</code></a> function, it extracts 32-bit or 64-bit executables based on the <code class="language-plaintext highlighter-rouge">SYSTEM_INFO.dwOemId</code> field</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778345-feef026a-40a7-11e8-9254-a1b30e25fbe8.PNG" alt="17" /></p> <p>After checking the system architecture it calls <code class="language-plaintext highlighter-rouge">write_spoolsr_and_MSdat</code> and there it decrypts <code class="language-plaintext highlighter-rouge">PE</code> from <code class="language-plaintext highlighter-rouge">byte_443870</code>(in case of a <code class="language-plaintext highlighter-rouge">0x64-bit</code> system) using <code class="language-plaintext highlighter-rouge">0xDD</code> as the key, generates random <code class="language-plaintext highlighter-rouge">0x40</code> bytes and appends to the decrypted file, it saves the decrypted file as <code class="language-plaintext highlighter-rouge">%SYS_DIR%\\spoolsr.exe</code> and the encrypted file as <code class="language-plaintext highlighter-rouge">%SYS_DIR%\\MS.dat</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778346-ff1c0aee-40a7-11e8-9493-b4644da8458f.png" alt="18" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/38778347-ff506104-40a7-11e8-8fbd-ac8abf87c007.png" alt="19" /></p> <p>Similarly, <code class="language-plaintext highlighter-rouge">KeyHook_usp20_n_dats</code> extract, decrypt and creates following files: <code class="language-plaintext highlighter-rouge">KeyHook64.dll</code>, <code class="language-plaintext highlighter-rouge">KH.dat</code>, <code class="language-plaintext highlighter-rouge">usp20.dll</code> and <code class="language-plaintext highlighter-rouge">UP.dat</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778348-ff8e8538-40a7-11e8-93bc-249ae8469d50.PNG" alt="20" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/38778379-576208c0-40a8-11e8-9ee9-6e3cd73d62a9.PNG" alt="21" /></p> <p><code class="language-plaintext highlighter-rouge">KeyHook64.dll</code> is decrypted <code class="language-plaintext highlighter-rouge">KH.dat</code>, <code class="language-plaintext highlighter-rouge">spoolsr.exe</code> is decrypted <code class="language-plaintext highlighter-rouge">MS.dat</code> and <code class="language-plaintext highlighter-rouge">usp20.dll</code> is decrypted <code class="language-plaintext highlighter-rouge">UP.dat</code>.</p> <p>After that, it extracts the data from resources (<code class="language-plaintext highlighter-rouge">0x110</code> in case of <code class="language-plaintext highlighter-rouge">0x64</code> system and <code class="language-plaintext highlighter-rouge">0x108</code> otherwise) of the sample and seems like it’s encrypted or compressed data:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778380-5799d926-40a8-11e8-9344-944346ff8d94.PNG" alt="22" /></p> <p>And it calls <code class="language-plaintext highlighter-rouge">decompress_</code> with extracted data and length of the data, <code class="language-plaintext highlighter-rouge">IDAscope</code> tells us that the function uses <code class="language-plaintext highlighter-rouge">ZLIB</code>-related constants:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778371-5615f83c-40a8-11e8-9eb2-62b8fee0d074.PNG" alt="23" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/38778372-563e99e0-40a8-11e8-83cc-003903cc1fd1.PNG" alt="24" /></p> <p>Seems like it’s a driver, saved under <code class="language-plaintext highlighter-rouge">C:\Windows\System32\drivers</code> as <code class="language-plaintext highlighter-rouge">iaStorE.sys</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778374-56670380-40a8-11e8-88ff-53c1467fb06f.PNG" alt="25" /></p> <p>On a <code class="language-plaintext highlighter-rouge">0x64</code> system it installs the driver as a crash dump filter by simply adding the drive name to the registry key <code class="language-plaintext highlighter-rouge">\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CrashControl\DumpFilters</code>, on the next reboot, crashdmp.sys will load the filter driver into the dump stack, for more information about <code class="language-plaintext highlighter-rouge">Dump Filer Drivers</code>, click <a href="https://crashdmp.wordpress.com/components/dump-filter-drivers/">here</a>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778375-5691c93a-40a8-11e8-8220-b31b13ac97f4.png" alt="26" /></p> <p>On a <code class="language-plaintext highlighter-rouge">0x32</code> system it installs the driver via creating a service called <code class="language-plaintext highlighter-rouge">iaStorE</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778376-56bd5e1a-40a8-11e8-9f18-b7ebd1468d2e.PNG" alt="27" /></p> <p>After extracting files and installing the driver, the sample exits.</p> <p>All files are signed, including drivers, certificates are revoked by its issuer, but that’s not a problem for Windows:</p> <p><img src="https://user-images.githubusercontent.com/16405698/38778595-7fbd270c-40ab-11e8-9cd2-97e670a24fbf.PNG" alt="sig" /></p> <p>Thank you for your time.</p> <p>Discuss on <a href="https://www.reddit.com/r/ReverseEngineering/comments/8cfjum/reversing_bandioscolony_malware_part_1/">Reddit</a></p> </div> </article> <footer class="site-footer"> <div class="container"> <small class="block" >&copy; 2022 &middot; @_qaz_qaz </small> </div> </footer> </main> <script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="5983a82bfd0bcb93f1d8c859-|49" defer></script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8f3bbf2fabd9e101',t:'MTczNDQ4OTE5My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body> </html>
