<!DOCTYPE html>
<html lang="en-US" >
<head>
		<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="profile" href="http://gmpg.org/xfn/11" />
			<link rel="pingback" href="https://blag.nullteilerfrei.de/xmlrpc.php">
		<title>Use Ghidra to decrypt strings of KpotStealer malware &#8211; nullteilerfrei</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Feed" href="https://blag.nullteilerfrei.de/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Comments Feed" href="https://blag.nullteilerfrei.de/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Use Ghidra to decrypt strings of KpotStealer malware Comments Feed" href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blag.nullteilerfrei.de\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://blag.nullteilerfrei.de/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='katex-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/bootstrap.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/font-awesome.css?ver=4.6.3' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-default-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/style.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-core-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style.css?ver=1.1.5' type='text/css' media='all' />
<style id='switty-style-core-inline-css' type='text/css'>

			.gridpostloop {
			  width: 100%;
			}
		
			@media (min-width: 768px) {
				.woocommerce ul.products li.product, .woocommerce-page ul.products li.product {
					width: 22%;
				}
			}
			
</style>
<link rel='stylesheet' id='switty-style-woo-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style-woo.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='kirki_google_fonts-css' href='https://fonts.googleapis.com/css?family=Libre+Baskerville%3Aregular%7CArvo%3Aregular%7CRajdhani%3A500%7CRoboto%3Aregular&#038;subset' type='text/css' media='all' />
<link rel='stylesheet' id='kirki-styles-switty_config-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/inc/frameworks/kirki/assets/css/kirki-styles.css' type='text/css' media='all' />
<style id='kirki-styles-switty_config-inline-css' type='text/css'>
body{font-family:"Libre Baskerville", Georgia, serif;font-weight:400;font-style:normal;text-align:inherit;color:#ffffff;}body h1, .h1{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h2, .h2{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h3, .h3{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h4, .h4{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h5, .h5{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h6, .h6{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}#maincontainer p{font-family:"Libre Baskerville", Georgia, serif;font-size:16px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}#navbar ul.navbar-nav li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;text-align:inherit;color:#ffffff;}.side-menu-menu-wrap ul li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}.widget_sidebar_main ul li, .widget_sidebar_main ol li{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer-copyright{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#BCBCBC;background-color:#111111;}body a, .woocommerce .star-rating span{color:#358247;}.widget_sidebar_main .right-widget-title-spn{border-bottom-color:#358247;}.navigation.pagination .nav-links .page-numbers, .navigation.pagination .nav-links .page-numbers:last-child{border-color:#358247;}.woocommerce .widget_price_filter .ui-slider .ui-slider-handle, .woocommerce .widget_price_filter .ui-slider .ui-slider-range{background-color:#358247;}body a:hover{color:#000000;}.spclbtn, #back-to-top{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit, .woocommerce a.button, .woocommerce button.button, .woocommerce input.button{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit:hover, .woocommerce a.button:hover, .woocommerce button.button:hover, .woocommerce input.button:hover{color:#ffffff;background-color:#000000;}.woocommerce #respond input#submit.alt, .woocommerce a.button.alt, .woocommerce button.button.alt, .woocommerce input.button.alt{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit.alt:hover, .woocommerce a.button.alt:hover, .woocommerce button.button.alt:hover, .woocommerce input.button.alt:hover{color:#ffffff;background-color:#000000;}.woocommerce-product-search input[type="submit"]{color:#ffffff;background-color:#358247;}.wpcf7-form .wpcf7-form-control.wpcf7-submit{color:#ffffff;background-color:#358247;}.spclbtn:hover, #back-to-top:hover{background-color:#000000;}.woocommerce-product-search input[type="submit"]:hover{background-color:#000000;}.wpcf7-form .wpcf7-form-control.wpcf7-submit:hover{background-color:#000000;}#navbar .navbar-brand{color:#E2E2E2;}.navbar-default .navbar-nav > li > a{color:#E2E2E2;}.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus{color:#ffffff;}.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus{color:#ffffff;}.navbar-default .navbar-nav > li.current-menu-parent > a{color:#ffffff;}#navbar{background-color:rgba(1, 9, 3, 0.50);}.afterscroolnav{background-color:rgba(1, 9, 3, 0.30)!important;}#navbar .dropdown-menu a{color:#6b6b6b;background-color:#f4f4f4;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu > .active > a:hover, #navbar .dropdown-menu > .active > a:focus{color:#000000;}#navbar .dropdown-menu a:hover{color:#000000;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu a:hover, #navbar .dropdown-menu > a:focus{background-color:#358247;}.postsloop{background-color:#ffffff;}.sticky{background-color:#d3d3d3;}#comments .comment.even{color:#000000;background-color:#f8f8f8;}#comments .pingback.even{color:#000000;background-color:#f8f8f8;}#comments .comment.odd{color:#000000;background-color:#eeeeee;}#comments .pingback.odd{color:#000000;background-color:#eeeeee;}.footer-copyright a{color:#395132;}.footer-copyright a:hover{color:#44C47E;}#logoasimg .custom-logo{width:200px;}
</style>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/en-spam/en-spam.js?ver=6.7.1" id="en-spam-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/showdown.min.js?ver=6.7.1" id="showdown-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/html5shiv.js?ver=3.7.3" id="html5shiv-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/respond.js?ver=1.1.5" id="respond-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://blag.nullteilerfrei.de/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://blag.nullteilerfrei.de/wp-json/wp/v2/posts/5146" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blag.nullteilerfrei.de/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/" />
<link rel='shortlink' href='https://blag.nullteilerfrei.de/?p=5146' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F04%2F26%2Fuse-ghidra-to-decrypt-strings-of-kpotstealer-malware%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F04%2F26%2Fuse-ghidra-to-decrypt-strings-of-kpotstealer-malware%2F&#038;format=xml" />
<style type="text/css" id="custom-background-css">
body.custom-background { background-image: url("https://blag.nullteilerfrei.de/wp-content/uploads/2017/06/bg_bw.jpg"); background-position: center center; background-size: cover; background-repeat: no-repeat; background-attachment: fixed; }
</style>
	</head>

<body class="post-template-default single single-post postid-5146 single-format-standard custom-background" >

<nav id="navbar" class="navbar navbar-default navbar-fixed-top" >
<div class="container">
	<div class="navbar-header">
		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
			<span class="sr-only">Toggle navigation</span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>
					<a class="navbar-brand" href="https://blag.nullteilerfrei.de/"> nullteilerfrei</a>
				
	</div>
						
	<div id="bs-example-navbar-collapse-1" class="collapse navbar-collapse"><ul id="primary-menu" class="nav navbar-nav navbar-right"><li id="menu-item-3880" class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880">			<form  class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880" role="search" method="get" action="https://blag.nullteilerfrei.de/">
								<div>
					<label class="screen-reader-text" for="s">Search</label>					<input type="text" value="" name="s" id="s" />
											<input type="submit" id="searchsubmit" value="search" />
									</div>
			</form>
		</li>
<li id="menu-item-272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-272"><a title="about" href="https://blag.nullteilerfrei.de/about/"><span class="glyphicon The who, the what, the why."></span>&nbsp;about</a></li>
<li id="menu-item-3858" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3858"><a title="admin" href="https://blag.nullteilerfrei.de/wp-admin/">admin</a></li>
</ul></div></div>
</nav>




<div id="maincontainer" class="container-fluid mrt50 mrb35">
	<div class="container">
		<div class="row">

<div class="col-md-12">
	<div id="post-5146" class="clearfix postsloop mrt50 post-5146 post type-post status-publish format-standard hentry category-malware category-tech">
	<div class="content-first pdb20" itemscope itemtype="http://schema.org/CreativeWork">

					
		<div class="content-second pdl20 pdr20">
			<h1 class="the-title entry-title" itemprop="headline">Use Ghidra to decrypt strings of KpotStealer malware</h1>
		</div>
					
		<div class="content-third pdl20 pdr20">
			
			
	<hr class="mrt10 mrb10" />
	
	<span class="switty-entry-meta">
		
		<span class="vcard author" itemprop="author" itemscope itemtype="http://schema.org/Person"><span class="fn"> <a class="url authorurl" rel="author" itemprop="url" href="https://blag.nullteilerfrei.de/author/born/" ><span itemprop="name">born</span></a></span></span>
						
					<span class="categoryurl"><a href="https://blag.nullteilerfrei.de/category/tech/malware/" rel="category tag">malware-analysis</a>, <a href="https://blag.nullteilerfrei.de/category/tech/" rel="category tag">technology</a></span>
								
		<a href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/" ><span class="post-date updated" itemprop="dateModified">2020-04-26</span></a>
						
	</span>
			
	<hr class="mrt10 mrb10" />

				
			<div class="entry-content" itemprop="text">
					
				<div class='showdown'>This post will explain, how to identify a function responsible for string deobfuscation in a native-PE malware sample. We will use a <i>KpotStealer</i> sample as a concrete example. KpotStealer (aka <i>Khalesi</i> or just <i>Kpot</i>) is a commodity malware family probably circulated in the shadowy parts of the internet since 2018. It got its name from a string publicly present on the Admin-Panel.

After we found the function we will understand the data structure it uses and emulate the decryption of a string with CyberChef and <a href="https://github.com/binref/refinery">Binary Refinery</a>. An interesting detail here is that Ghidra currently does not guess the function signature correctly.

Finally, we will develop a Java script (hehe) for Ghidra to automatically deobfuscate all strings given the corresponding obfuscation function.

<span id="more-5146"></span>

## Motivation

Malware authors use string obfuscation to avoid inclusion of "interesting" strings as an entry point for bottom up analysis in the binary. Some time ago, I <a href="https://blag.nullteilerfrei.de/2019/06/17/diy-string-obfuscation-for-plain-c/">blagged about string obfuscation and how one might implement it</a>. Feel free to head over there for more details and context.

The intention behind using string obfuscation is, to make assessments like "this looks like an IP, maybe it's the Command & Control (C2) server" or "<code>vssadmin.exe Delete Shadows</code> looks as if the malware deletes shadow copies" impossible. It would also hinder an analyst to find a reference to a <code>POST</code> string, which may indicate the place in the code where the networking is implemented. Obviously, an analyst wants to revert this process to be able to do exactly that. Especially if a malware family uses lots of strings or if one wants to analyze multiple samples of the same family, this process should be as automated as possible. 

## Identifying the String Deobfuscation Function

Let's first assume that there is only one function responsible for deobfuscating all strings. This is true for the KpotStealer sample we will be looking at and so it is for many other malware families. Often, malware authors do not distinguish between strings requiring protection and generic strings and just apply string obfuscation to all strings in their code. This has two interesting implications for us as reverse engineers:

* since strings are generally quite important in software development, the string deobfuscation function is called from many different locations and probably also not far from the entry point of the executable.
* all locations, the string deobfuscation function is called from, belong to malware code and are not part of any static library. And we want to avoid reverse engineering static library code as a vampire wants to avoid garlic.

The first of the two points above suggest that starting off from the entry point top-down-style and systematically going through all functions may be feasible. To further speed up the process, I use the following heuristics:

* Since strings are so common, the string deobfuscation function should be called from a lot of different places.
* The string deobfuscation function should access at least one memory region (containing the obfuscated string). This region may be represented by a global pointer reference from within the function or be passed to the function as an argument. If the first of the two is true, the string obfuscation method needs some sort of id to distinguish different strings within that global buffer.
* Similarly, the function further needs access to a second buffer if it leverages cryptography to deobfuscate the string. This _key_ may be the same for all strings or may also vary on a per-string basis. If the second is true, the function may either receive different strings every time it is called or, again, some sort of id to distinguish different strings.
* The function needs some way to know, how large the obfuscated buffer is. Common ways of doing this in C are to use a terminating character (like <code>\0</code>) or a parameter explicitly stating the length.
* Deobfuscated data needs to be returned from the function. An obvious way would be to return a newly allocated buffer. Another way is, to write to a pointer passed as an argument to the function.
* At the call locations the deobfuscated data (somehow) returned from the function is often then used shortly after.

The whole point of all these heuristics is to be fast. Deobfuscating all strings normally is a huge step forward in the analysis of a malware and gives a jump start by enabling bottom-up analysis. On a different note, it sometimes even allows extraction of indicators of compromise (IoC) like IPs or domains, if that's your heart's desire.

## Finding Nemo

This and the following section will describe how one would find the function responsible for string deobfuscation in the KpotStealer sample with a SHA256 hash of

<pre><code>67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d</code></pre>
We will set a focus on the though processes itself and rational behind the decisions made during analysis, hence this part is longer than necessary. Skip this and the following section if you are not interested in such fundamentals.

Going through all functions called in the entry point, the function at <code>0x004058fb</code> sticks out because it is quite large and because it is setting a lot of global variables. It was only then, that I checked the number of import of the binary and realized that there are almost none. This may mean that this sample uses some sort of dynamic API resolution and the function at <code>0x004058fb</code> is a prime candidate for being responsible of doing that: it is called relatively early during execution and sets a lot of global variables. Hence it is plausible (though not necessary), that it needs to reference strings containing DLL names.

Starting at <code>0x00405912</code>, the function at <code>0x0040c8f5</code> is called multiple times. This function is also called at 69 other spots in the binary, which is a good tell that this may be the string deobfuscation method (you can see this by pressing <code>X</code> if you have the <a href="https://mal.re/tmp/ghIDA.kbxml">ghIDA</a> key bindings for Ghidra configured). The weird thing is though, that Ghidra only shows

<pre><code class="c">FUN_0040c8f5();
FUN_0040c8f5();
FUN_0040c8f5();
FUN_0040c8f5();
FUN_0040c8f5();
FUN_0040c8f5();
...</code></pre>
in the decompile view. It is pretty weird that there should be multiple calls to the same function without any arguments and without somehow using the return value. And as it will turn out, Ghidra needs some help here to effectively decompile this part.

### Become the Mother of Dragons

As much as we try to avoid looking at assembly, we have to take a look at it now. Good news though: you only need to know two and a half assembly instructions to understand, what is going on here: <code>CALL</code>, <code>MOV</code> and, <code>LEA</code>.

Let's first understand what these instructions to in general: <code>CALL</code> branches off execution to a function. This is done by pushing the address immediately after the <code>CALL</code> instruction onto the stack and then set <code>EIP</code> to the address of the function to be called - but we don't need to care about this level of detail here. The other one and a half assembly instructions <code>MOV</code> and <code>LEA</code> have different intended use-cases. But in principle, they both just move data around: <code>LEA</code> copies the _referenced_ data and <code>MOV</code> the actual data. But this difference does not matter if you just ignore <code>[</code> and <code>]</code> characters.

Let's move away from the general description to the concrete usage of these instructions here. When clicking on one of the functions in the decompile view, the disassembly listing will also move to the corresponding position in memory:

<pre><code>00405907 8d bd 78 f9 ff ff                      LEA        EDI=&gt;local_68c,[EBP + 0xfffff978]
0040590d b8 a6 00 00 00                         MOV        EAX,0xa6
00405912 e8 de 6f 00 00                         CALL       FUN_0040c8f5

00405917 8d bd 84 f9 ff ff                      LEA        EDI=&gt;local_680,[EBP + 0xfffff984]
0040591d b8 a7 00 00 00                         MOV        EAX,0xa7
00405922 e8 ce 6f 00 00                         CALL       FUN_0040c8f5

00405927 8d bd cc f9 ff ff                      LEA        EDI=&gt;local_638,[EBP + 0xfffff9cc]
0040592d b8 a8 00 00 00                         MOV        EAX,0xa8
00405932 e8 be 6f 00 00                         CALL       FUN_0040c8f5

00405937 8d bd e4 f9 ff ff                      LEA        EDI=&gt;local_620,[EBP + 0xfffff9e4]
0040593d b8 a9 00 00 00                         MOV        EAX,0xa9
00405942 e8 ae 6f 00 00                         CALL       FUN_0040c8f5

00405947 8d bd 9c f9 ff ff                      LEA        EDI=&gt;local_668,[EBP + 0xfffff99c]
0040594d b8 aa 00 00 00                         MOV        EAX,0xaa
00405952 e8 9e 6f 00 00                         CALL       FUN_0040c8f5

00405957 8d bd 58 f9 ff ff                      LEA        EDI=&gt;local_6ac,[EBP + 0xfffff958]
0040595d b8 ab 00 00 00                         MOV        EAX,0xab
00405962 e8 8e 6f 00 00                         CALL       FUN_0040c8f5</code></pre>
The newlines are inserted for the sake of clearity. Each <code>CALL</code> is preceded by a <code>LEA</code> and <code>MOV</code>. All <code>LEA</code> instructions above move an address into the <code>EDI</code> register and the <code>MOV</code>s copy an immediate value into <code>EAX</code>. Before giving it any further thought, let's tell Ghidra to take <code>EAX</code> and <code>EDI</code> into account when generating decompiled code for these calls. Edit the function signature to "Use Custom Storage" and add two "Function Variables" stored in <code>EAX</code> and <code>EDI</code>. This leads to the following decompiled code:

<pre><code class="c">FUN_0040c8f5(0xa6,local_68c);
FUN_0040c8f5(0xa7,local_680);
FUN_0040c8f5(0xa8,local_638);
FUN_0040c8f5(0xa9,local_620);
FUN_0040c8f5(0xaa,local_668);
FUN_0040c8f5(0xab,local_6ac);</code></pre>
And one can easily confirm that the variables passed as a second argument are referenced in the code following the call. After checking a few other places, this function was called, I was confident, that this is indeed the string deobfuscation function. 

## Annotating the Debofuscation Function

Until this point, we never even looked into the function. Let's change that and let's further already rename and retype the arguments to <code>uint PrStringIndex</code> and <code>BYTE *RetVal</code>:

<pre><code class="c">void FUN_0040c8f5(uint PrStringIndex, BYTE *RetVal)
{
  int iVar1;
  uint uVar2;
  ushort uVar3;
  
  iVar1 = (PrStringIndex &amp; 0xffff) * 8;
  uVar3 = 0;
  if (*(short *)(&amp;DAT_0040128a + iVar1) != 0) {
    do {
      uVar2 = (uint)uVar3;
      uVar3 = uVar3 + 1;
      RetVal[uVar2] =
           (&amp;PTR_DAT_0040128c)[(PrStringIndex &amp; 0xffff) * 2][uVar2] ^ (&amp;DAT_00401288)[iVar1];
    } while (uVar3 &lt; *(ushort *)(&amp;DAT_0040128a + iVar1));
  }
  RetVal[*(ushort *)(&amp;DAT_0040128a + iVar1)] = &#039;\0&#039;;
  return;
}</code></pre>
The function contains several references to global variables. Namely <code>DAT_0040128a</code>, <code>PTR_DAT_0040128c</code> and <code>DAT_00401288</code>. Just by looking at the auto-generate names, one can tell that the distance in memory between those three is very small (i.e. 2 bytes). This is a sign that those are not actually three different variables but a structure with three fields. And we also already know the sizes of two of them (and just assume 4 bytes for the last, mainly because that's the size of a pointer in 32 bit):

<pre><code class="c">struct DeobfuContext {
    word field_0; // because 0x0040128a - 0x00401288 == 2
    word field_1; // because 0x0040128c - 0x0040128a == 2
    dword field_2; // because this is the size of a pointer in 32-bit
}</code></pre>
Let's create this structure in Ghidra (by hitting "Insert" in the "Data Type Manager" if you use the ghIDA key bindings). Let's call the struct <code>DeobfuContext</code> and don't forget to hit that other "Save" button in the "Structure Editor".

Now let's retype the variable that comes first in memory to a <code>DeobfuContext</code> struct. Double clicking <code>DAT_00401288</code> will move the Listing view to the corresponding memory location. Since our structure is 8 bytes in size, we first need to make some space by undefining <code>PTR_DAT_0040128c</code> below (hit <code>U</code> if you - you might have guessed - have the ghIDA key bindings) and change the type of <code>DAT_00401288</code> to <code>DeobfuContext</code>. This will lead Ghidra to show typecasts like <code>(&amp;DAT_00401288)[PrStringIndex].field_1</code>, which tells us again that we made a mistake: The type is not <code>DeobfuContext</code> but an array of <code>DeobfuContext</code>. Since we don't know the size, we'll just use a size of 1 for now: Retype <code>DAT_00401288</code> to <code>DeobfuContext[1]</code> and also rename it to <code>DEOBFU_CONTEXTS</code>. I also took the liberty to rename two local variables to <code>i</code> and <code>j</code> because they where used as counters in a loop: 

<pre><code class="c">void FUN_0040c8f5(uint PrStringIndex, BYTE *RetVal)
{
  uint j;
  ushort i;
  
  PrStringIndex = PrStringIndex &amp; 0xffff;
  i = 0;
  if (DEOBFU_CONTEXTS[PrStringIndex].field_1 != 0) {
    do {
      j = (uint)i;
      i = i + 1;
      RetVal[j] = *(byte *)(DEOBFU_CONTEXTS[PrStringIndex].field_2 + j) ^
                  *(byte *)&amp;DEOBFU_CONTEXTS[PrStringIndex].field_0;
    } while (i &lt; DEOBFU_CONTEXTS[PrStringIndex].field_1);
  }
  RetVal[DEOBFU_CONTEXTS[PrStringIndex].field_1] = &#039;\0&#039;;
  return;
}</code></pre>
Reading this code now enables us to rename and retype the fields of the <code>DeobfuContext</code> struct: Because <code>i</code> counts up until <code>field_1</code>, it is probably some sort of length. 
 The expression <code>*(byte *)(DEOBFU_CONTEXTS[PrStringIndex].field_2 + j)</code> suggests, that <code>field_2</code> is in fact an array, i.e. <code>BYTE *</code>, which - coincidentally - is also four bytes in size. And finally, <code>*(byte *)&amp;DEOBFU_CONTEXTS[PrStringIndex].field_0</code> effectively shortens the field <code>field_0</code> to a size of one byte instead of two. One might also realized that this <code>field_0</code> is used in an XOR expression <code>^</code> so let's be brave and guess that it's a key and change the struct accordingly:

<img decoding="async" src="https://blag.nullteilerfrei.de/wp-content/uploads/2020/04/kpot-stealer-string-obfuscation-memory-layout.png" class="aligncenter size-full" style="position:relative;border:4px solid #ddd;width:480px;height:373px;z-index:20;display:block" />
<hr style="position: relative; top:-187px; border:2px solid #ddd;z-index:0;margin-bottom:-10px">

And this finally enables Ghidra to show us the following decompiled version of the function, which I also renamed:

<pre><code class="c">void EvStringDeobfuscate(uint PrStringIndex, BYTE *RetVal)
{
  uint j;
  ushort i;
  
  PrStringIndex = PrStringIndex &amp; 0xffff;
  i = 0;
  if (DEOBFU_CONTEXTS[PrStringIndex].Length != 0) {
    do {
      j = (uint)i;
      i = i + 1;
      RetVal[j] = DEOBFU_CONTEXTS[PrStringIndex].Buffer[j] ^ DEOBFU_CONTEXTS[PrStringIndex].Key;
    } while (i &lt; DEOBFU_CONTEXTS[PrStringIndex].Length);
  }
  RetVal[DEOBFU_CONTEXTS[PrStringIndex].Length] = &#039;\0&#039;;
  return;
}</code></pre>
So after getting some help, Ghidra presents us with code that can almost be compiled as a C program. And for sure it can be easily understood!

## Understanding the Algorithm

The string obfuscation function accesses a global array of structs, each struct has three fields: one byte XOR-key, the length of the string and a pointer to the obfuscated data. The function further accepts two arguments: an index into the global array and a pointer, where the deobfuscated string will be written to. The function then iterates over the obfuscated data and XORes every byte with the key from the same struct.

To now learn how large this global array really is, one could, for example, look at all references, write down the index and use the larges one as the size of the array. We will later write a script to automatically do that, so if you want to set the size of the global struct array now, just feel free to retype it to <code>DeobfuContext[183]</code>.

But before we move on and write code to automate this, just to eventually realize that we made a mistake somewhere above, let's first confirm our understanding of the deobfuscation algorithm by emulating it. There are numerous ways of doing that and I'll just explain, how to do it in Cyberchef and then, how to do it in <a href="https://github.com/binref/refinery">Binary Refinery</a>. Binary Refinery is the best set of command line tools for binary transformation out there. You can also always write a Python script or try to compile the code with a C compiler.

Let's take the first call that comes along (at <code>0x00405912</code>): <code>EvStringDeobfuscate(0xa6, local_68c)</code>. It will access position <code>0xa6</code> (which is 166) of the global array. Double click <code>DEOBFU_CONTEXTS</code> and scroll down to position 166:

| Field  | Value
|---     |---
| Key    | <code>B4</code>
| Length | <code>0B 00</code>
| Buffer | <code>5c 2a 40 00</code>

Double clicking the global variable <code>DAT_00402a5c</code>, which corresponds to the Buffer pointer <code>5c 2a 40 00</code>, will bring you to the memory location containing the obfuscated string. We know, that it should have the size <code>0x0b</code> (which is 11). Create an Array of that size in memory there, select it and, finally "Copy Special..." (or Shift-E) it. When choosing "Byte String (No Spaces)" the following data will be in your clipboard: <code>c3dddadddad1c09ad0d8d8</code>.

Using <a href="https://cyberchef.nullteilerfrei.de/#recipe=From_Hex('Auto')XOR(%7B'option':'Hex','string':'C2'%7D,'Standard',false)&input=YzNkZGRhZGRkYWQxYzA5YWQwZDhkOA">CyberChef</a> for example, you can deobfuscate this with the "From Hex" and "Xor" operations to <code>wininet.dll</code>. Alternatively, the following <a href="https://github.com/binref/refinery">Binary Refinery</a> pipeline will yield the same result:

<pre><code class="bash">emit c3dddadddad1c09ad0d8d8| hex | xor H:B4

# alternatively, you can also read the string directly from the sample:
emit 67f8302a2fd28d15f62d6d20d748bfe350334e5353cbdef112bd1f8231b5599d | peslice 0x00402a5c -t 11 | xor H:B4</code></pre>
That's good news! We seem to have understood the memory layout as well as the obfuscation technique correctly.

## Ghidra Script

The envisioned user experience for a script is as follows: The scripts asks for a function name and will then find all calls, read the appropriate region from the global buffer, decrypt the string, print the location and the result to the console, add a comment of the decrypted string into the disassembly and the decompiled view and, add a bookmark to the location. This will enable users to list all decrypted strings as well as reduce friction during full analysis of the sample.

Let's chop this up into small steps:

1. ask user to a function name, pre-populate the input field with the currently viewed function
2. read the address of the global buffer from the disassembly of the function
3. iterate over all calls to the function
4. read the value of the first argument for each call
5. decrypt the string
6. set comments and bookmarks as well as print to the console

If you follow this blag closely, you may have noticed, that we already solved 1, 3, 4 and 6 in previous posts. So I'll just go into detail for steps 2 and 5 and put a link to the full script in the end.

<b>Step 2:</b> The following code will first call the <code>findGlobalBufferAddress</code> function, which I'll explain in a moment. If that's not successful, it will ask the user for the address instead. To be honest, there is not much to see here:

<pre><code class="java">long globalBufferPtr;
OptionalLong optionalGlobalBufferPtr = findGlobalBufferAddress(deobfuscator, 0x10);
if (optionalGlobalBufferPtr.isEmpty()) {
    try {
        globalBufferPtr = askInt(&quot;Enter Global Buffer Address&quot;,
                &quot;Cannot automatically determine global buffer address, specify it manually:&quot;);
    } catch (CancelledException X) {
        return;
    }
} else {
    globalBufferPtr = optionalGlobalBufferPtr.getAsLong();
}</code></pre>
Now to the <code>findGlobalBufferAddress</code> function, which is an example for parsing some assembly in a Ghidra script:

<pre><code class="java">public Boolean isGlobalBufferAccess(Instruction instruction) {
    return (instruction.getOperandType(0) &amp; OperandType.REGISTER) == OperandType.REGISTER
            &amp;&amp; (instruction.getOperandType(1) &amp; OperandType.ADDRESS) == OperandType.ADDRESS
            &amp;&amp; (instruction.getOperandType(1) &amp; OperandType.DYNAMIC) == OperandType.DYNAMIC;
}

public OptionalLong findGlobalBufferAddress(Function func, int searchDepth) {
    int i = 0;
    for (Instruction instruction : currentProgram.getListing().getInstructions(func.getEntryPoint(), true)) {
        if (instruction.getMnemonicString().equals(&quot;LEA&quot;)) {
            // the first operand of LEA is the target register, the second is the address
            if (isGlobalBufferAccess(instruction)) {
                // this gets the &quot;objects&quot; for the second argument which. This is an array of
                // values:
                //
                // LEA globalBufferIndex,[globalBufferIndex*0x8 + GLOBAL_BUFFER]
                // Index 0: globalBufferIndex
                // Index 1: 0x8
                // Index 2: GLOBAL_BUFFER
                String hexEncoded = instruction.getOpObjects(1)[2].toString();
                return OptionalLong.of(Long.decode(hexEncoded));
            }
        }
        i++;
        if (i &gt; searchDepth)
            break;
    }
    return OptionalLong.empty();
}</code></pre>
Iterate over all instructions from the function up until a given search depth, this function will filter out all <code>LEA</code> instructions. We guess that it is in fact the instruction accessing the global buffer if its first operand is a register and the second a calculated address. For an assembly instruction object, Ghidra exposes the "operand objects" which represent the values of the different operands of an argument to an instruction. The second argument to this <code>LEA</code> instruction is <code>[globalBufferIndex*0x8 + GLOBAL_BUFFER]</code> and there, we are interested in the third operand, the <code>GLOBAL_BUFFER</code>. Feel free to read the comment in the function for a slightly different perspective.

<b>Step 5:</b> The actual decryption of the string _should_ of course be the interesting part but as it's always, everything else already took 80% of the time. But still, here we go:

<pre><code class="java">byte structContent[] = getOriginalBytes(toAddr(globalBufferPtr + globalBufferIndex * 8), 8);
byte xorKey[] = { structContent[0] };
int dataLength = (structContent[2] &amp; 0xff) | (structContent[3] &amp; 0xff) &lt;&lt; 8;
int encryptedPtr = (structContent[4] &amp; 0xff) | ((structContent[5] &amp; 0xff) &lt;&lt; 8)
        | ((structContent[6] &amp; 0xff) &lt;&lt; 16) | ((structContent[7] &amp; 0xff) &lt;&lt; 24);

byte[] obfuscatedBuffer = getOriginalBytes(toAddr(encryptedPtr), dataLength);
byte decrypted[] = deobfuscateString(obfuscatedBuffer, xorKey);</code></pre>
This snippet uses the <code>getOriginalBytes</code> from previous blag posts and reads 8 bytes of memory from the correct location. The first byte is the <code>xorKey</code>. Bytes at location 2 and 3 are combined little endian-style into an integer <code>dataLength</code> and finally, the four following bytes are combined in the same way into a pointer to the encrypted payload <code>encryptedPtr</code>. We then use the <code>getOriginalBytes</code> function again to read the encrypted data into <code>obfuscatedBuffer</code> and pass that together with the key to the <code>deobfuscateString</code> function:

<pre><code class="java">private byte[] deobfuscateString(byte[] data, byte[] key) {
    final byte[] ret = new byte[data.length];
    for (int k = 0; k &lt; data.length; k++)
        ret[k] = (byte) (data[k] ^ key[k % key.length]);
    return ret;
}</code></pre>
The rest is just boilerplate you can copy and paste from other scripts. The <a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/KpotStealerStrings.java">ready-to-use-script is in our repository on github</a>.

## Appendix: Decrypted Strings

For google-ability and overview, here is a list of decrypted strings for the above sample:

| <code>CALL</code> Address | Offset   | Deobfuscated String
|---             |---       |---
| <code>0x0040F6FE</code>   | <code>0</code>      | <code>http[:]//bendes.co[.]uk</code>
| <code>0x0040F709</code>   | <code>1</code>      | <code>/lmpUNlwDfoybeulu</code>
| <code>0x0040FC5D</code>   | <code>2</code>      | <code>4p81GSwBwRrAhCYK</code>
| <code>0x00411D79</code>   | <code>3</code>      | <code>SQLite format 3</code>
| <code>0x00412C84</code>   | <code>4</code>      | <code>2|NordVPN||%s|%s</code>
| <code>0x0040F714</code>   | <code>19</code>     | <code>.bit</code>
| <code>0x00412A85</code>   | <code>20</code>     | <code>%08lX%04lX%lu</code>
| <code>0x0040BB31</code>   | <code>22</code>     | <code>Hostname</code>
| <code>0x00409FC0</code>   | <code>25</code>     | <code>TRUE</code>
| <code>0x00409FCB</code>   | <code>26</code>     | <code>FALSE</code>
| <code>0x00410134</code>   | <code>27</code>     | <code>quit</code>
| <code>0x0040DF67</code>   | <code>45</code>     | <code>Software</code>
| <code>0x0040DF72</code>   | <code>46</code>     | <code>Microsoft</code>
| <code>0x00412603</code>   | <code>63</code>     | <code>pstorec.dll</code>
| <code>0x0041260E</code>   | <code>86</code>     | <code>Internet Explorer</code>
| <code>0x00409FB5</code>   | <code>89</code>     | <code>%s	TRUE	%s	%s	%d	%s	%s</code>
| <code>0x0040BB25</code>   | <code>96</code>     | <code>logins</code>
| <code>0x0040BB3D</code>   | <code>97</code>     | <code>encryptedUsername</code>
| <code>0x0040BB49</code>   | <code>98</code>     | <code>encryptedPassword</code>
| <code>0x0040C5CF</code>   | <code>89</code>     | <code>%s	TRUE	%s	%s	%d	%s	%s</code>
| <code>0x0040F83F</code>   | <code>119</code>    | <code>dotbit.me</code>
| <code>0x0040F5DF</code>   | <code>122</code>    | <code>%S %s HTTP/1.1 %SContent-Length: %d</code>
| <code>0x0040FF36</code>   | <code>140</code>    | <code>%FULLDISK%</code>
| <code>0x0040FF43</code>   | <code>141</code>    | <code>%NETWORK%</code>
| <code>0x00410CCE</code>   | <code>143</code>    | <code>%02d-%02d-%02d %d:%02d:%02d</code>
| <code>0x00410A5E</code>   | <code>144</code>    | <code>MachineGuid: %S</code>
| <code>0x00410ADD</code>   | <code>145</code>    | <code>IP: %s</code>
| <code>0x00410B0A</code>   | <code>146</code>    | <code>CPU: %s (%d cores)</code>
| <code>0x00410B91</code>   | <code>147</code>    | <code>RAM: %s MB</code>
| <code>0x00410C03</code>   | <code>148</code>    | <code>Screen: %dx%d</code>
| <code>0x00410CDB</code>   | <code>150</code>    | <code>LT: %s (UTC+%d:%d)</code>
| <code>0x00410D57</code>   | <code>151</code>    | <code>GPU:</code>
| <code>0x00410E0A</code>   | <code>152</code>    | <code>Layouts:</code>
| <code>0x00410E72</code>   | <code>153</code>    | <code>Software:</code>
| <code>0x004096EA</code>   | <code>154</code>    | <code>PWD</code>
| <code>0x00409704</code>   | <code>155</code>    |  <code>CRED_DATA</code>
| <code>0x00409711</code>   | <code>156</code>    | <code>CREDIT_CARD</code>
| <code>0x0040971E</code>   | <code>157</code>    | <code>AUTOFILL_DATA</code>
| <code>0x004096F7</code>   | <code>158</code>    | <code>IMPAUTOFILL_DATA</code>
| <code>0x00410928</code>   | <code>159</code>    | <code>SYSINFORMATION</code>
| <code>0x004097F3</code>   | <code>160</code>    | <code>FFFILEE</code>
| <code>0x0040FF1C</code>   | <code>161</code>    | <code>__DELIMM__</code>
| <code>0x0040FF29</code>   | <code>162</code>    | <code>__GRABBER__</code>
| <code>0x00405912</code>   | <code>166</code>    | <code>wininet.dll</code>
| <code>0x00405922</code>   | <code>167</code>    | <code>winhttp.dll</code>
| <code>0x00405932</code>   | <code>168</code>    | <code>ws2_32.dll</code>
| <code>0x00405942</code>   | <code>169</code>    | <code>user32.dll</code>
| <code>0x00405952</code>   | <code>170</code>    | <code>shell32.dll</code>
| <code>0x00405962</code>   | <code>171</code>    | <code>advapi32.dll</code>
| <code>0x00405972</code>   | <code>172</code>    | <code>dnsapi.dll</code>
| <code>0x00405982</code>   | <code>173</code>    | <code>netapi32.dll</code>
| <code>0x00405992</code>   | <code>174</code>    | <code>gdi32.dll</code>
| <code>0x004059A2</code>   | <code>175</code>    | <code>gdiplus.dll</code>
| <code>0x004059B2</code>   | <code>176</code>    | <code>oleaut32.dll</code>
| <code>0x004059C2</code>   | <code>177</code>    | <code>ole32.dll</code>
| <code>0x004059D2</code>   | <code>178</code>    | <code>shlwapi.dll</code>
| <code>0x004059E2</code>   | <code>179</code>    | <code>userenv.dll</code>
| <code>0x004059F2</code>   | <code>180</code>    | <code>urlmon.dll</code>
| <code>0x00405A02</code>   | <code>181</code>    | <code>crypt32.dll</code>
| <code>0x00405A12</code>   | <code>182</code>    | <code>mpr.dll</code>

## Conclusion

In my experience, scripting in Ghidra is much easier when done with Java. Even though you might not like the language, the documentation and eclipse integration is awesome which really speeds up the process. Apart from previously published snippets this post also covers parsing of assembly instructions. 

The KputStealer family yields yet another good example for string obfuscation and a good exercise on how to find and reverse engineer it. This particular case also shows a situation where the decompiled failed and needs some help from the analyst.
</div>						
				<div class="clearfix pdt20"></div>
						
										
										
			</div>

			
<div id="comments" class="comments-area">

			<h2 class="comments-title">
			2 Replies to &ldquo;Use Ghidra to decrypt strings of KpotStealer malware&rdquo;		</h2>

		<ol class="comment-list">
					<li id="comment-31423" class="comment even thread-even depth-1 parent">
			<article id="div-comment-31423" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/f8a658d013064c95f6cb01600851ba32?s=42&#038;r=g' srcset='https://secure.gravatar.com/avatar/f8a658d013064c95f6cb01600851ba32?s=84&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' decoding='async'/>						<b class="fn">Roman</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/#comment-31423"><time datetime="2022-02-03T16:52:30+01:00">2022-02-03 at 4:52 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<div class='showdown'>Just brilliant. One of few papers for a long time I've read and followed along with a great interest and passion. More of these please.
</div>				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/?replytocom=31423#respond" data-commentid="31423" data-postid="5146" data-belowelement="div-comment-31423" data-respondelement="respond" data-replyto="Reply to Roman" aria-label="Reply to Roman">Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-31424" class="comment odd alt depth-2">
			<article id="div-comment-31424" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/f8a658d013064c95f6cb01600851ba32?s=42&#038;r=g' srcset='https://secure.gravatar.com/avatar/f8a658d013064c95f6cb01600851ba32?s=84&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' decoding='async'/>						<b class="fn">Roman</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/#comment-31424"><time datetime="2022-02-03T16:58:39+01:00">2022-02-03 at 4:58 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<div class='showdown'>By the way, my i dare and ask for another writeup on KPOT malware. The one from https://www.malware-traffic-analysis.net/2019/06/22/page2.html really puzzles me regarding how does it unpacks itself in the self memory space, where original .text code is located.
</div>				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/?replytocom=31424#respond" data-commentid="31424" data-postid="5146" data-belowelement="div-comment-31424" data-respondelement="respond" data-replyto="Reply to Roman" aria-label="Reply to Roman">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="clearfix"></div>
		
		
		<div class="clearfix"></div>

	
	
		<div id="respond" class="comment-respond">
		<h2 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/#respond" style="display:none;">Cancel reply</a></small></h2><form action="https://blag.nullteilerfrei.de/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><div class="form-group comment-form-comment">
		<label for="comment">Comment<span class="required"> *</span></label> 
		<textarea class="form-control" placeholder="Your comment" id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea>
		</div><div class="form-group comment-form-author"><label for="author">Name <span class="required">*</span></label> <input class="form-control" placeholder="Your name" id="author" name="author" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-email"><label for="email">Email <span class="required">*</span></label> <input class="form-control" placeholder="Your email" id="email" name="email" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-url"><label for="url">Website</label> <input class="form-control" placeholder="Your website" id="url" name="url" type="text" value="" size="30" /></div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="spclbtn" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='5146' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- .comments-area -->
				
		</div>
			
	</div>
</div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://blag.nullteilerfrei.de/2020/02/13/whack-that-slack/" rel="prev">&larr; How to loot immortal Tokens from Slack mobile</a></div><div class="nav-next"><a href="https://blag.nullteilerfrei.de/2020/05/24/zloader-string-obfuscation/" rel="next">Zloader String Obfuscation &rarr;</a></div></div>
	</nav></div>
		</div>
	</div>
</div>


<div class="container-fluid footer-copyright">
	<div class="container">
		<div class="row">

			<div class="col-md-6">
				<div class="cprtlft_ctmzr">
					Authors have copyrights. People say these things in footers.				</div>
			</div>

			<div class="col-md-6">
				<div class="cprtrgt_ctmzr fr spclfl">
					All Hail the Great Yawgmoth, Father of Machines.				</div>
			</div>

		</div>
	</div>
</div>


<link rel='stylesheet' id='hljstheme-css' href='https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/styles/default.css?ver=0.6.2' type='text/css' media='all' />
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.js?ver=6.7.1" id="katex-main-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/auto-render.min.js?ver=6.7.1" id="katex-auto-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/default.js?ver=6.7.1" id="configure-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/bootstrap.js?ver=3.3.7" id="bootstrap-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/script.js?ver=1.1.5" id="switty-script-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.common.pack.js?ver=0.6.2" id="hljs_preload-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.custom.pack.js?ver=0.6.2" id="hljs-js"></script>
    <style>pre.hljs {padding: 5px;}
pre.hljs code {}</style>
    <script type="text/javascript">
    (function($, window) {
        var init_fn_flag = false;
        var init_fn = (function() {
            if (init_fn_flag)
                return;
            init_fn_flag = true;
             hljs.configure({"tabReplace":"    "});
            $('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        });
        $(document).ready(init_fn);
        $(window).on("load", init_fn);
    })(jQuery, window);
    </script>
<img src="https://vg09.met.vgwort.de/na/457836be8b764344bc4f1ed1f321adfe" width="1" height="1" alt="" class="wpvgw-marker-image" loading="eager" data-no-lazy="1" referrerpolicy="no-referrer-when-downgrade" style="display:none;" /></body>
</html>
