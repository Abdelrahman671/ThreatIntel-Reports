<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Exploring AWS STS AssumeRoot — Elastic Security Labs</title><meta name="description" content="Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic&#x27;s SIEM and CloudTrail data."/><meta property="og:title" content="Exploring AWS STS AssumeRoot — Elastic Security Labs"/><meta property="og:description" content="Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic&#x27;s SIEM and CloudTrail data."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/exploring-aws-sts-assumeroot/Security Labs Images 20.jpg?bfe4ca3ace84cb68eba74522622b5746"/><meta property="og:image:alt" content="Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic&#x27;s SIEM and CloudTrail data."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Exploring AWS STS AssumeRoot — Elastic Security Labs"/><meta name="twitter:description" content="Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic&#x27;s SIEM and CloudTrail data."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/exploring-aws-sts-assumeroot/Security Labs Images 20.jpg?bfe4ca3ace84cb68eba74522622b5746"/><meta name="twitter:image:alt" content="Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic&#x27;s SIEM and CloudTrail data."/><link rel="canonical" href="https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-a0e7ed566823a543.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/mpSLeWdge5Uk6CRJvfMY5/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/mpSLeWdge5Uk6CRJvfMY5/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-12-09T00:00:00.000Z">9 December 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/terrance-dejesus">Terrance DeJesus</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Exploring AWS STS&nbsp;AssumeRoot</span></h1><p class="text-zinc-200 text-base md:text-xl">AssumeRoot Abuse and Detection Strategies in AWS Organizations</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>19 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Exploring AWS STS AssumeRoot" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fexploring-aws-sts-assumeroot%2FSecurity%20Labs%20Images%2020.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>Welcome to another installment of AWS detection engineering with Elastic. This article will dive into the new AWS <a href="https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html">Security Token Service</a> (STS) API operation, <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoot.html">AssumeRoot</a>, simulate some practical behavior in a sandbox AWS environment, and explore detection capabilities within Elastic’s SIEM.</p>
<p>What to expect from this article:</p>
<ul>
<li>Basic insight into AWS STS web service</li>
<li>Insight into STS’ AssumeRoot API operation</li>
<li>Threat scenario using AssumeRoot with Terraform and Python code</li>
<li>Detection and hunting opportunities for potential AssumeRoot abuse</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="understanding-aws-sts-and-the-assumeroot-api" class="absolute -top-32"></span>Understanding AWS STS and the AssumeRoot API</h2>
<p>AWS Security Token Service (STS) is a web service that enables users, accounts, and roles to request temporary, limited-privilege credentials. For IAM users, their accounts are typically registered in AWS Identity and Access Management (IAM), where either a login profile is attached for accessing the console or access keys, and secrets are created for programmatic use by services like Lambda, EC2, and others.</p>
<p>While IAM credentials are persistent, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html#sts-regionalization"><strong>STS credentials</strong></a> are temporary. These credentials - comprising an access key, secret key, and session token - are granted upon request and are valid for a specific period. Requests are typically sent to the global <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sts.amazonaws.com</code> endpoint, which responds with temporary credentials for a user or role. These credentials can then be used to access other AWS services on behalf of the specified user or role, as long as the action is explicitly allowed by the associated permission policy.</p>
<p>This process is commonly known as assuming a role, executed via the <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code></a> API. It is frequently used in AWS environments and organizations for various scenarios. For example:</p>
<ul>
<li>An EC2 instance with an attached role will automatically use <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code> to retrieve temporary credentials for API requests.</li>
<li>Similarly, Lambda functions often invoke <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code> to authenticate and perform their designated actions.</li>
</ul>
<p>Although <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code> is incredibly useful, it can pose a risk if roles are over-permissioned by the organization. Misconfigured policies with excessive permissions can allow adversaries to abuse these roles, especially in environments where the <a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_permissions_least_privileges.html">Principle of Least Privilege</a> (PoLP) is not strictly enforced. Note that the security risks associated with AssumeRole are typically attributed to misconfigurations or not following best security practices by organizations. These are not the result of AssumeRole or even AssumeRoot development decisions.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="introduction-to-assumeroot" class="absolute -top-32"></span>Introduction to AssumeRoot</h3>
<p>AWS recently introduced the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code> API operation to STS. Similar to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code>, it allows users to retrieve temporary credentials - but specifically for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html">root user</a> of a member account in an AWS organization.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="what-are-member-accounts" class="absolute -top-32"></span>What Are Member Accounts?</h3>
<p>In AWS, <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html">member accounts</a> are separate accounts within an organization that have their own IAM users, services, and roles. These accounts are distinct from the management account, but they still fall under the same organizational hierarchy. Each AWS organization is created with a unique root account tied to the email address used during its setup. Similarly, every member account requires a root user or email address at the time of its creation, effectively establishing its own root identity.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="how-does-assumeroot-work" class="absolute -top-32"></span>How Does AssumeRoot Work?</h3>
<p>When a privileged user in the management account needs root-level privileges for a member account, they can use the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code> API to retrieve temporary credentials for the member account&#x27;s root user. Unlike <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRole</code>, where the target principal is a user ARN, the target principal for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code> is the member account ID itself. Additionally, a task policy ARN must be specified, which defines the specific permissions allowed with the temporary credentials.</p>
<p>Here are the available task policy ARNs for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code>:</p>
<ul>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMAuditRootUserCredentials">IAMAuditRootUserCredentials</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMCreateRootUserPassword">IAMCreateRootUserPassword</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMDeleteRootUserCredentials">IAMDeleteRootUserCredentials</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-S3UnlockBucketPolicy">S3UnlockBucketPolicy</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-SQSUnlockQueuePolicy">SQSUnlockQueuePolicy</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="potential-abuse-of-task-policies" class="absolute -top-32"></span>Potential Abuse of Task Policies</h3>
<p>While these predefined task policies limit what can be done with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code>, their scope can still be theoretically abused in the right circumstances. For example:</p>
<ul>
<li><strong>IAMCreateRootUserPassword</strong>: This policy grants the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iam:CreateLoginProfile</code></a> permission, allowing the creation of a login profile for a user that typically doesn&#x27;t require console access. If an adversary gains access to programmatic credentials, they could create a login profile and gain console access to the account that is more persistent.</li>
<li><strong>IAMDeleteRootUserCredentials</strong>: This policy allows the deletion of root credentials, but also grants permissions like <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListAccessKeys.html"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iam:ListAccessKeys</code></a> and <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListMFADevices.html"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iam:ListMFADevices</code></a>. These permissions could help an adversary gather critical information about access credentials or MFA configurations for further exploitation.</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="assumeroot-in-action" class="absolute -top-32"></span>AssumeRoot in Action</h2>
<p>Now that we understand how AssumeRoot works at a high level, how it differs from AssumeRole, and the potential risks associated with improper security practices, let’s walk through a practical scenario to simulate its usage. It should be noted that this is one of many potential scenarios where AssumeRoot may or could be abused. As of this article&#x27;s publication, no active abuse has been reported in the wild, as expected with a newer AWS functionality.</p>
<p>Below is a simple depiction of what we will accomplish in the following sections:</p>
<p></p>
<p>Before diving in, it’s important to highlight that we’re using an admin-level IAM user configured as the default profile for our local AWS CLI. This setup enables us to properly configure the environment using <a href="https://developer.hashicorp.com/terraform">Terraform</a> and simulate potential threat scenarios in AWS for detection purposes.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="member-account-creation" class="absolute -top-32"></span>Member Account Creation</h3>
<p>The first step is to enable centralized root access for member accounts, as outlined in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts.html">AWS documentation</a>. Centralized root access allows us to group all AWS accounts into a single organization, with each member account having its own root user.</p>
<p>Next, we manually create a member account within our organization through the Accounts section in the AWS Management Console. For this scenario, the key requirement is to note the member account ID, a unique 12-digit number. For our example, we’ll assume this ID is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">000000000001</code> and name it <em>AWSAssumeRoot</em>. Centralized management of AWS accounts is a common practice for organizations that may separate different operational services into separate AWS accounts but want to maintain centralized management.</p>
<p></p>
<p>We also add the member account as the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_delegate_policies.html">delegated administrator</a> for centralized root access as well, which allows that root member account to have centralized root access for any other member accounts of the organization.</p>
<p>While we won’t cover it in depth, we have also enabled the new <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_rcps.html">Resource control policies</a> (RCPs) within Identity and Access Management (IAM), which will allow central administration over permissions granted to resources within accounts in our organization, but by default, the <em>RCPFullAWSAccess</em> policy allows all permissions to all services for all principals and is attached directly to root.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="environment-setup" class="absolute -top-32"></span>Environment Setup</h3>
<p>For our simulation, we use Terraform to create an overly permissive IAM user named compromised_user. This user is granted the predefined <a href="https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AdministratorAccess.html">AdministratorAccess</a> policy, which provides admin-level privileges. Additionally, we generated an access key for this user while intentionally omitting a login profile to reflect a typical setup where credentials are used programmatically. This is not an uncommon practice, especially in developer environments.</p>
<p>Below is the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main.tf</code> configuration used to create the resources:</p>
<pre><code>provider &quot;aws&quot; {
  region = var.region
}

data &quot;aws_region&quot; &quot;current&quot; {}

# Create an IAM user with AdministratorAccess (simulated compromised user)
resource &quot;aws_iam_user&quot; &quot;compromised_user&quot; {
  name = &quot;CompromisedUser&quot;
}

# Attach AdministratorAccess Policy to the compromised user
resource &quot;aws_iam_user_policy_attachment&quot; &quot;compromised_user_policy&quot; {
  user       = aws_iam_user.compromised_user.name
  policy_arn = &quot;arn:aws:iam::aws:policy/AdministratorAccess&quot;
}

# Create access keys for the compromised user
resource &quot;aws_iam_access_key&quot; &quot;compromised_user_key&quot; {
  user = aws_iam_user.compromised_user.name
}</code></pre>
<p>We also define an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf</code> file to capture key details about the environment, such as the region, access credentials, and the user ARN:</p>
<pre><code>output &quot;aws_region&quot; {
  description = &quot;AWS Region where the resources are deployed&quot;
  value       = var.region
}

output &quot;compromised_user_access_key&quot; {
  value       = aws_iam_access_key.compromised_user_key.id
  sensitive   = true
  description = &quot;Access key for the compromised IAM user&quot;
}

output &quot;compromised_user_secret_key&quot; {
  value       = aws_iam_access_key.compromised_user_key.secret
  sensitive   = true
  description = &quot;Secret key for the compromised IAM user&quot;
}

output &quot;compromised_user_name&quot; {
  value       = aws_iam_user.compromised_user.name
  description = &quot;Name of the compromised IAM user&quot;
}

output &quot;compromised_user_arn&quot; {
  value       = aws_iam_user.compromised_user.arn
  description = &quot;ARN of the compromised IAM user&quot;
}</code></pre>
<p>Once we run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">terraform apply</code>, the configuration creates a highly permissive IAM user (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">compromised_user</code>) with associated credentials. These credentials simulate those that an adversary might obtain for initial access or escalating privileges.</p>
<p>This is one of the first hurdles for an adversary, collecting valid credentials. In today’s threat landscape information stealer malware and phishing campaigns are more common than ever, aimed at obtaining credentials that can be sold or used for lateral movement. While this is a hurdle, the probability of compromised credentials for initial access is high - such as those with <a href="https://www.cisa.gov/sites/default/files/2023-11/aa23-320a_scattered_spider_0.pdf">SCATTERED SPIDER</a> and <a href="https://sysdig.com/blog/scarleteel-2-0/">SCARLETEEL</a>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="establish-an-sts-client-session-with-stolen-credentials" class="absolute -top-32"></span>Establish an STS Client Session with Stolen Credentials</h3>
<p>The next step is to establish an STS client session using the compromised credentials (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">compromised_user</code> access key and secret key). This session allows the adversary to make requests to AWS STS on behalf of the compromised user.</p>
<p>Here’s the Python code to establish the STS client using the <a href="https://aws.amazon.com/sdk-for-python/">AWS Boto3 SDK</a> (the AWS SDK used to create, configure, and manage AWS services, such as Amazon EC2 and Amazon S3). This Python code is used to create the STS client with stolen IAM user credentials:</p>
<pre><code> sts_client = boto3.client(
     &quot;sts&quot;,
     aws_access_key_id=compromised_access_key,
     aws_secret_access_key=compromised_secret_key,
     region_name=region,
     endpoint_url=f&#x27;https://sts.{region}.amazonaws.com&#x27;
 )</code></pre>
<p></p>
<p><strong>Note:</strong> During testing, we discovered that the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">endpoint_url</code> must explicitly point to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">https://sts.&lt;region&gt;.amazonaws.com</code>. Omitting this may result in an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InvalidOperation</code> error when attempting to invoke the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code> API.</p>
<p>This STS client session forms the foundation for simulating an adversary&#x27;s actions as we have taken compromised credentials and initiated our malicious actions.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="assume-root-for-member-account-on-behalf-of-compromised-user" class="absolute -top-32"></span>Assume Root for Member Account on Behalf of Compromised User</h3>
<p>After establishing an STS client session as the compromised user, we can proceed to call the AssumeRoot API. This request allows us to assume the root identity of a member account within an AWS Organization. For the request, the TargetPrincipal is set to the member account ID we obtained earlier, the session duration is set to 900 seconds (15 minutes), and the TaskPolicyArn is defined as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IAMCreateRootUserPassword</code>. This policy scopes the permissions to actions related to creating or managing root login credentials.</p>
<p>A notable permission included in this policy is <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateLoginProfile</code></a>, which enables the creation of a login password for the root user. This allows access to the AWS Management Console as the root user.</p>
<p>Below is the Python code to assume root of member account <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">000000000001</code>, with permissions scoped by <em>IAMCreateRootUserPassword</em>.</p>
<pre><code>response = sts_client.assume_root(
    TargetPrincipal=member_account_id,
    DurationSeconds=900,
    TaskPolicyArn={&quot;arn&quot;: &quot;arn:aws:iam::aws:policy/root-task/IAMCreateRootUserPassword&quot;},
)
root_temp_creds = response[&quot;Credentials&quot;]</code></pre>
<p>If the AssumeRoot request is successful, the response provides temporary credentials (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">root_temp_creds</code>) for the root account of the target member. These credentials include an access key, secret key, and session token, enabling temporary root-level access for the duration of the session.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="creating-a-login-profile-for-the-member-root-account" class="absolute -top-32"></span>Creating a Login Profile for the Member Root Account</h3>
<p>With temporary root credentials in hand, the next step is to establish an authenticated IAM client session as the root user of the member account. Using this session, we can call the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">create_login_profile()</code> method. This method allows us to assign a login password to the root user, enabling console access.</p>
<p>The following Python code establishes an authenticated IAM client and creates a login profile:</p>
<pre><code>iam_client = boto3.client(
    &quot;iam&quot;,
    aws_access_key_id=root_temp_creds[&quot;AccessKeyId&quot;],
    aws_secret_access_key=root_temp_creds[&quot;SecretAccessKey&quot;],
    aws_session_token=root_temp_creds[&quot;SessionToken&quot;],
)

response = iam_client.create_login_profile()</code></pre>
<p>It’s worth noting that the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">create_login_profile()</code> method requires no explicit parameters for the root user, as it acts on the credentials of the currently authenticated session. In this case, it will apply to the root user of the member account.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="reset-the-administrator-password-and-login-to-the-aws-console" class="absolute -top-32"></span>Reset the Administrator Password and Login to the AWS Console</h3>
<p>At this stage, we’re nearly complete! Let’s recap the progress so far:</p>
<ol>
<li>Using compromised IAM user credentials, we established an STS session to assume the identity of an overly permissive user.</li>
<li>Leveraging this session, we assumed the identity of the root user of a target member account, acquiring temporary credentials scoped to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IAMCreateRootUserPassword</code> task policy.</li>
<li>With these temporary root credentials, we established an IAM client session and successfully created a login profile for the root user.</li>
</ol>
<p>The final step involves resetting the root user password to gain permanent access to the AWS Management Console. To do this, visit the AWS console login page and attempt to log in as the root user. Select the “Forgot Password” option to initiate the password recovery process. This will prompt a CAPTCHA challenge, after which a password reset link is sent to the root user’s email address. This would be the third roadblock for an adversary as they would need access to the root user’s email inbox to continue with the password reset workflow. It should be acknowledged that if <em>CreateLoginProfile</em> is called, you can specify the password for the user and enforce a “password reset required”. However, this is not allowed for root accounts by default, and for good reason by AWS. Unlike the first hurdle of having valid credentials, access to a user’s inbox may prove more difficult and less likely, but again, with enough motivation and resources, it is still possible.</p>
<p></p>
<p>After selecting the password reset link, you can set a new password for the root user. This step provides lasting access to the console as the root user. Unlike the temporary credentials obtained earlier, this access is no longer limited by the session duration or scoped permissions of the IAMCreateRootUserPassword policy, granting unrestricted administrative control over the member account.</p>
<p></p>
<p><strong>Before moving on, if you followed along and tried this in your environment, we want to gently remind you to use Terraform to remove testing resources</strong> using the terraform destroy command in the same folder where you initialized and deployed the resources.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-and-hunting-opportunities" class="absolute -top-32"></span>Detection and Hunting Opportunities</h2>
<p>While exploring cloud features and APIs from an adversary&#x27;s perspective is insightful, our ultimate responsibility lies in detecting and mitigating malicious or anomalous behavior, alerting stakeholders, and responding effectively. Also, while such a scenario has not been publicly documented in the wild, we should not wait to be a victim either and be reactive, hence the reason for our whitebox scenario.</p>
<p>The following detection and hunting queries rely on AWS CloudTrail data ingested into the Elastic Stack using the <a href="https://www.elastic.co/docs/current/integrations/aws">AWS integration</a>. If your environment differs, you may need to adjust these queries for custom ingestion processes or adapt them for a different SIEM or query tool.</p>
<p><strong>Note:</strong> Ensure that AWS CloudTrail is enabled for all accounts in your organization to provide comprehensive visibility into activity across your AWS environment. You may also need to enable the specific trail used for monitoring across the entire organization so all member accounts are observed properly.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="hunting---unusual-action-for-iam-user-access-key" class="absolute -top-32"></span>Hunting - Unusual Action for IAM User Access Key</h3>
<p>This query identifies potentially compromised IAM access keys that are used to make unusual API calls. It sorts the results in ascending order to surface less frequent API calls within the last two weeks. This query can be adjusted to account for different API calls or include other CloudTrail-specific fields.</p>
<p>Hunting Query: <a href="https://github.com/elastic/detection-rules/blob/7b88b36d294407cc1ea2ab1b0acbbbf3104162a9/hunting/aws/docs/iam_unusual_access_key_usage_for_user.md">AWS IAM Unusual AWS Access Key Usage for User</a></p>
<p>MITRE ATT&amp;CK:</p>
<ul>
<li>T1078.004 - <a href="https://attack.mitre.org/techniques/T1078/004/">Valid Accounts: Cloud Accounts</a></li>
</ul>
<p>Language: ES|QL</p>
<pre><code>FROM logs-aws.cloudtrail*
| WHERE @timestamp &gt; now() - 14 day
| WHERE
    event.dataset == &quot;aws.cloudtrail&quot;
    and event.outcome == &quot;success&quot;
    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL
    and aws.cloudtrail.resources.arn IS NOT NULL
    and event.action NOT IN (&quot;GetObject&quot;)
| EVAL daily_buckets = DATE_TRUNC(1 days, @timestamp)
| STATS
    api_counts = count(*) by daily_buckets, aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.access_key_id, aws.cloudtrail.resources.arn, event.action
| WHERE api_counts &lt; 2
| SORT api_counts ASC</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection---unusual-assume-root-action-by-rare-iam-user" class="absolute -top-32"></span>Detection - Unusual Assume Root Action by Rare IAM User</h3>
<p>Detection Rule: <a href="https://github.com/elastic/detection-rules/blob/main/rules/integrations/aws/privilege_escalation_sts_assume_root_from_rare_user_and_member_account.toml">AWS STS AssumeRoot by Rare User and Member Account</a></p>
<p>This query identifies instances where the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AssumeRoot</code> API call is made by an IAM user ARN and member account that have not performed this action in the last 14 days. This anomaly-based detection uses Elastic’s <a href="https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule">New Terms</a> detection rule.</p>
<ul>
<li>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aws.cloudtrail.user_identity.arn</code> field identifies the source IAM user from the management AWS account.</li>
<li>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aws.cloudtrail.resources.account_id</code> field reflects the target member account.</li>
</ul>
<p>MITRE ATT&amp;CK:</p>
<ul>
<li>T1548.005 - <a href="https://attack.mitre.org/techniques/T1548/005/">Temporary Elevated Cloud Access</a></li>
<li>T1098.003 - <a href="https://attack.mitre.org/techniques/T1098/003/">Additional Cloud Roles</a></li>
</ul>
<p>Language: KQL</p>
<pre><code>event.dataset: &quot;aws.cloudtrail&quot;
    and event.provider: &quot;sts.amazonaws.com&quot;
    and event.action: &quot;AssumeRoot&quot;
    and event.outcome: &quot;success&quot;</code></pre>
<p>New Term Fields:<br/>
<!-- -->If any combination of these fields has not been seen executing AssumeRoot within the last 14 days, an alert is generated.</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aws.cloudtrail.user_identity.arn</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aws.cloudtrail.resources.account_id</code></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection---self-created-login-profile-for-root-member-account" class="absolute -top-32"></span>Detection - Self-Created Login Profile for Root Member Account</h3>
<p>This query detects instances where a login profile is created for a root member account by the root account itself, potentially indicating unauthorized or anomalous behavior.</p>
<p>Detection Rule: <a href="https://github.com/elastic/detection-rules/blob/4374128458d116211d5d22993b6d87f6c82a30a0/rules/integrations/aws/persistence_iam_create_login_profile_for_root.toml">AWS IAM Login Profile Added for Root</a></p>
<p>MITRE ATT&amp;CK:</p>
<ul>
<li>T1098.003 - <a href="https://attack.mitre.org/techniques/T1098/003/">Account Manipulation: Additional Cloud Roles</a></li>
<li>T1548.005 - <a href="https://attack.mitre.org/techniques/T1548/005/">Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access</a></li>
<li>T1078.004 - <a href="https://attack.mitre.org/techniques/T1078/004/">Valid Accounts: Cloud Accounts</a></li>
</ul>
<p>Language: ES|QL</p>
<pre><code>FROM logs-aws.cloudtrail* 
| WHERE
    // filter for CloudTrail logs from IAM
    event.dataset == &quot;aws.cloudtrail&quot;
    and event.provider == &quot;iam.amazonaws.com&quot;
    // filter for successful CreateLoginProfile API call
    and event.action == &quot;CreateLoginProfile&quot;
    and event.outcome == &quot;success&quot;
    // filter for Root member account
    and aws.cloudtrail.user_identity.type == &quot;Root&quot;
    // filter for an access key existing which sources from AssumeRoot
    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL
    // filter on the request parameters not including UserName which assumes self-assignment
    and NOT TO_LOWER(aws.cloudtrail.request_parameters) LIKE &quot;*username*&quot;
| keep
    @timestamp,
    aws.cloudtrail.request_parameters,
    aws.cloudtrail.response_elements,
    aws.cloudtrail.user_identity.type,
    aws.cloudtrail.user_identity.arn,
    aws.cloudtrail.user_identity.access_key_id,
    cloud.account.id,
    event.action,
    source.address
    source.geo.continent_name,
    source.geo.region_name,
    source.geo.city_name,
    user_agent.original,
    user.id</code></pre>
<p>These detections are specific to our scenario, however, are not fully inclusive regarding all potential AssumeRoot abuse. If you choose to explore and discover some additional hunting or threat detection opportunities, feel free to share in our <a href="https://github.com/elastic/detection-rules">Detection Rules</a> repository or the <a href="https://github.com/elastic/detection-rules/tree/main/hunting">Threat Hunting</a> library of ours.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="hardening-practices-for-assumeroot-use" class="absolute -top-32"></span>Hardening Practices for AssumeRoot Use</h2>
<p>AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">documentation</a> contains several important considerations for best security practices regarding IAM, STS, and many other services. However, cloud security is not a “one size fits all” workflow and security practices should be tailored to your environment, risk-tolerance, and more.</p>
<p><strong>Visibility is Key:</strong> If you can’t see it, you can’t protect it. Start by enabling CloudTrail with organization-wide trails to log activity across all accounts. Focus on capturing IAM and STS operations for insights into access and permission usage. Pair this with Security Hub for continuous monitoring and tools like Elastic or GuardDuty to hunt for unusual AssumeRoot actions.</p>
<p><strong>Lock Down AssumeRoot Permissions:</strong> Scope AssumeRoot usage to critical tasks only, like audits or recovery, by restricting task policies to essentials like IAMAuditRootUserCredentials. Assign these permissions to specific roles in the management account and keep those roles tightly controlled. Regularly review and remove unnecessary permissions to maintain the PLoP.</p>
<p><strong>MFA and Guardrails for Root Access:</strong> Enforce MFA for all users, especially those with access to AssumeRoot. Use AWS Organizations to disable root credential recovery unless absolutely needed and remove unused root credentials entirely. RCPs can help centralize and tighten permissions for tasks involving AssumeRoot or other sensitive operations.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h1>
<p>We hope this article provides valuable insight into AWS’ AssumeRoot API operation, how it can be abused by adversaries, and some threat detection and hunting guidance. Abusing AssumeRoot is one of many living-off-the-cloud (LotC) techniques that adversaries have the capability to target, but we encourage others to explore, research, and share their findings accordingly with the community and AWS.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/exploring-aws-sts-assumeroot#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/exploring-aws-sts-assumeroot#understanding-aws-sts-and-the-assumeroot-api"><span>Understanding AWS STS and the AssumeRoot&nbsp;API</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#introduction-to-assumeroot"><span>Introduction to&nbsp;AssumeRoot</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#what-are-member-accounts"><span>What Are Member&nbsp;Accounts?</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#how-does-assumeroot-work"><span>How Does AssumeRoot&nbsp;Work?</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#potential-abuse-of-task-policies"><span>Potential Abuse of Task&nbsp;Policies</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/exploring-aws-sts-assumeroot#assumeroot-in-action"><span>AssumeRoot in&nbsp;Action</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#member-account-creation"><span>Member Account&nbsp;Creation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#environment-setup"><span>Environment&nbsp;Setup</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/exploring-aws-sts-assumeroot#establish-an-sts-client-session-with-stolen-credentials"><span>Establish an STS Client Session with Stolen&nbsp;Credentials</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Exploring AWS STS AssumeRoot&amp;url=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot&amp;title=Exploring AWS STS AssumeRoot" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/exploring-aws-sts-assumeroot&amp;title=Exploring AWS STS AssumeRoot" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Exploring AWS STS AssumeRoot","slug":"exploring-aws-sts-assumeroot","date":"2024-12-09","description":"Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic's SIEM and CloudTrail data.","image":"Security Labs Images 20.jpg","subtitle":"AssumeRoot Abuse and Detection Strategies in AWS Organizations","body":{"raw":"\n## Preamble\n\nWelcome to another installment of AWS detection engineering with Elastic. This article will dive into the new AWS [Security Token Service](https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html) (STS) API operation, [AssumeRoot](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoot.html), simulate some practical behavior in a sandbox AWS environment, and explore detection capabilities within Elastic’s SIEM.\n\nWhat to expect from this article:\n\n* Basic insight into AWS STS web service  \n* Insight into STS’ AssumeRoot API operation  \n* Threat scenario using AssumeRoot with Terraform and Python code  \n* Detection and hunting opportunities for potential AssumeRoot abuse\n\n## Understanding AWS STS and the AssumeRoot API\n\nAWS Security Token Service (STS) is a web service that enables users, accounts, and roles to request temporary, limited-privilege credentials. For IAM users, their accounts are typically registered in AWS Identity and Access Management (IAM), where either a login profile is attached for accessing the console or access keys, and secrets are created for programmatic use by services like Lambda, EC2, and others.\n\nWhile IAM credentials are persistent, [**STS credentials**](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html#sts-regionalization) are temporary. These credentials \\- comprising an access key, secret key, and session token \\- are granted upon request and are valid for a specific period. Requests are typically sent to the global `sts.amazonaws.com` endpoint, which responds with temporary credentials for a user or role. These credentials can then be used to access other AWS services on behalf of the specified user or role, as long as the action is explicitly allowed by the associated permission policy.\n\nThis process is commonly known as assuming a role, executed via the [`AssumeRole`](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) API. It is frequently used in AWS environments and organizations for various scenarios. For example:\n\n* An EC2 instance with an attached role will automatically use `AssumeRole` to retrieve temporary credentials for API requests.  \n* Similarly, Lambda functions often invoke `AssumeRole` to authenticate and perform their designated actions.\n\nAlthough `AssumeRole` is incredibly useful, it can pose a risk if roles are over-permissioned by the organization. Misconfigured policies with excessive permissions can allow adversaries to abuse these roles, especially in environments where the [Principle of Least Privilege](https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_permissions_least_privileges.html) (PoLP) is not strictly enforced. Note that the security risks associated with AssumeRole are typically attributed to misconfigurations or not following best security practices by organizations. These are not the result of AssumeRole or even AssumeRoot development decisions.\n\n### Introduction to AssumeRoot\n\nAWS recently introduced the `AssumeRoot` API operation to STS. Similar to `AssumeRole`, it allows users to retrieve temporary credentials \\- but specifically for the [root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html) of a member account in an AWS organization.\n\n### What Are Member Accounts?\n\nIn AWS, [member accounts](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html) are separate accounts within an organization that have their own IAM users, services, and roles. These accounts are distinct from the management account, but they still fall under the same organizational hierarchy. Each AWS organization is created with a unique root account tied to the email address used during its setup. Similarly, every member account requires a root user or email address at the time of its creation, effectively establishing its own root identity.\n\n### How Does AssumeRoot Work?\n\nWhen a privileged user in the management account needs root-level privileges for a member account, they can use the `AssumeRoot` API to retrieve temporary credentials for the member account's root user. Unlike `AssumeRole`, where the target principal is a user ARN, the target principal for `AssumeRoot` is the member account ID itself. Additionally, a task policy ARN must be specified, which defines the specific permissions allowed with the temporary credentials.\n\nHere are the available task policy ARNs for `AssumeRoot`:\n\n* [IAMAuditRootUserCredentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMAuditRootUserCredentials)  \n* [IAMCreateRootUserPassword](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMCreateRootUserPassword)  \n* [IAMDeleteRootUserCredentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMDeleteRootUserCredentials)  \n* [S3UnlockBucketPolicy](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-S3UnlockBucketPolicy)  \n* [SQSUnlockQueuePolicy](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-SQSUnlockQueuePolicy)\n\n### Potential Abuse of Task Policies\n\nWhile these predefined task policies limit what can be done with `AssumeRoot`, their scope can still be theoretically abused in the right circumstances. For example:\n\n* **IAMCreateRootUserPassword**: This policy grants the [`iam:CreateLoginProfile`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html) permission, allowing the creation of a login profile for a user that typically doesn't require console access. If an adversary gains access to programmatic credentials, they could create a login profile and gain console access to the account that is more persistent.  \n* **IAMDeleteRootUserCredentials**: This policy allows the deletion of root credentials, but also grants permissions like [`iam:ListAccessKeys`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListAccessKeys.html) and [`iam:ListMFADevices`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListMFADevices.html). These permissions could help an adversary gather critical information about access credentials or MFA configurations for further exploitation.\n\n## AssumeRoot in Action\n\nNow that we understand how AssumeRoot works at a high level, how it differs from AssumeRole, and the potential risks associated with improper security practices, let’s walk through a practical scenario to simulate its usage. It should be noted that this is one of many potential scenarios where AssumeRoot may or could be abused. As of this article's publication, no active abuse has been reported in the wild, as expected with a newer AWS functionality.\n\nBelow is a simple depiction of what we will accomplish in the following sections:\n\n![AssumeRoot scenario workflow](/assets/images/exploring-aws-sts-assumeroot/image3.png)\n\nBefore diving in, it’s important to highlight that we’re using an admin-level IAM user configured as the default profile for our local AWS CLI. This setup enables us to properly configure the environment using [Terraform](https://developer.hashicorp.com/terraform) and simulate potential threat scenarios in AWS for detection purposes.\n\n### Member Account Creation\n\nThe first step is to enable centralized root access for member accounts, as outlined in the [AWS documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts.html). Centralized root access allows us to group all AWS accounts into a single organization, with each member account having its own root user.\n\nNext, we manually create a member account within our organization through the Accounts section in the AWS Management Console. For this scenario, the key requirement is to note the member account ID, a unique 12-digit number. For our example, we’ll assume this ID is `000000000001` and name it *AWSAssumeRoot*. Centralized management of AWS accounts is a common practice for organizations that may separate different operational services into separate AWS accounts but want to maintain centralized management.\n\n![AWS console showing management account and member account *AWSAssumeRoot*](/assets/images/exploring-aws-sts-assumeroot/image4.png)\n\nWe also add the member account as the [delegated administrator](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_delegate_policies.html) for centralized root access as well, which allows that root member account to have centralized root access for any other member accounts of the organization.\n\nWhile we won’t cover it in depth, we have also enabled the new [Resource control policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_rcps.html) (RCPs) within Identity and Access Management (IAM), which will allow central administration over permissions granted to resources within accounts in our organization, but by default, the *RCPFullAWSAccess* policy allows all permissions to all services for all principals and is attached directly to root.\n\n### Environment Setup\n\nFor our simulation, we use Terraform to create an overly permissive IAM user named compromised\\_user. This user is granted the predefined [AdministratorAccess](https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AdministratorAccess.html) policy, which provides admin-level privileges. Additionally, we generated an access key for this user while intentionally omitting a login profile to reflect a typical setup where credentials are used programmatically. This is not an uncommon practice, especially in developer environments.\n\nBelow is the `main.tf` configuration used to create the resources:\n\n```\nprovider \"aws\" {\n  region = var.region\n}\n\ndata \"aws_region\" \"current\" {}\n\n# Create an IAM user with AdministratorAccess (simulated compromised user)\nresource \"aws_iam_user\" \"compromised_user\" {\n  name = \"CompromisedUser\"\n}\n\n# Attach AdministratorAccess Policy to the compromised user\nresource \"aws_iam_user_policy_attachment\" \"compromised_user_policy\" {\n  user       = aws_iam_user.compromised_user.name\n  policy_arn = \"arn:aws:iam::aws:policy/AdministratorAccess\"\n}\n\n# Create access keys for the compromised user\nresource \"aws_iam_access_key\" \"compromised_user_key\" {\n  user = aws_iam_user.compromised_user.name\n}\n```\n\nWe also define an `outputs.tf` file to capture key details about the environment, such as the region, access credentials, and the user ARN:\n\n```\noutput \"aws_region\" {\n  description = \"AWS Region where the resources are deployed\"\n  value       = var.region\n}\n\noutput \"compromised_user_access_key\" {\n  value       = aws_iam_access_key.compromised_user_key.id\n  sensitive   = true\n  description = \"Access key for the compromised IAM user\"\n}\n\noutput \"compromised_user_secret_key\" {\n  value       = aws_iam_access_key.compromised_user_key.secret\n  sensitive   = true\n  description = \"Secret key for the compromised IAM user\"\n}\n\noutput \"compromised_user_name\" {\n  value       = aws_iam_user.compromised_user.name\n  description = \"Name of the compromised IAM user\"\n}\n\noutput \"compromised_user_arn\" {\n  value       = aws_iam_user.compromised_user.arn\n  description = \"ARN of the compromised IAM user\"\n}\n```\n\nOnce we run `terraform apply`, the configuration creates a highly permissive IAM user (`compromised_user`) with associated credentials. These credentials simulate those that an adversary might obtain for initial access or escalating privileges.\n\nThis is one of the first hurdles for an adversary, collecting valid credentials. In today’s threat landscape information stealer malware and phishing campaigns are more common than ever, aimed at obtaining credentials that can be sold or used for lateral movement. While this is a hurdle, the probability of compromised credentials for initial access is high \\- such as those with [SCATTERED SPIDER](https://www.cisa.gov/sites/default/files/2023-11/aa23-320a_scattered_spider_0.pdf) and [SCARLETEEL](https://sysdig.com/blog/scarleteel-2-0/).\n\n![](/assets/images/exploring-aws-sts-assumeroot/image1.png)\n\n### Establish an STS Client Session with Stolen Credentials\n\nThe next step is to establish an STS client session using the compromised credentials (`compromised_user` access key and secret key). This session allows the adversary to make requests to AWS STS on behalf of the compromised user.\n\nHere’s the Python code to establish the STS client using the [AWS Boto3 SDK](https://aws.amazon.com/sdk-for-python/) (the AWS SDK used to create, configure, and manage AWS services, such as Amazon EC2 and Amazon S3). This Python code is used to create the STS client with stolen IAM user credentials:\n\n```\n sts_client = boto3.client(\n     \"sts\",\n     aws_access_key_id=compromised_access_key,\n     aws_secret_access_key=compromised_secret_key,\n     region_name=region,\n     endpoint_url=f'https://sts.{region}.amazonaws.com'\n )\n ```\n\n![Terminal output when creating STS client with stolen IAM user credentials](/assets/images/exploring-aws-sts-assumeroot/image7.png)\n\n**Note:** During testing, we discovered that the `endpoint_url` must explicitly point to `https://sts.\u003cregion\u003e.amazonaws.com`. Omitting this may result in an `InvalidOperation` error when attempting to invoke the `AssumeRoot` API.\n\nThis STS client session forms the foundation for simulating an adversary's actions as we have taken compromised credentials and initiated our malicious actions.\n\n### Assume Root for Member Account on Behalf of Compromised User\n\nAfter establishing an STS client session as the compromised user, we can proceed to call the AssumeRoot API. This request allows us to assume the root identity of a member account within an AWS Organization. For the request, the TargetPrincipal is set to the member account ID we obtained earlier, the session duration is set to 900 seconds (15 minutes), and the TaskPolicyArn is defined as `IAMCreateRootUserPassword`. This policy scopes the permissions to actions related to creating or managing root login credentials.\n\nA notable permission included in this policy is [`CreateLoginProfile`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html), which enables the creation of a login password for the root user. This allows access to the AWS Management Console as the root user.\n\nBelow is the Python code to assume root of member account `000000000001`, with permissions scoped by *IAMCreateRootUserPassword*.\n\n```\nresponse = sts_client.assume_root(\n    TargetPrincipal=member_account_id,\n    DurationSeconds=900,\n    TaskPolicyArn={\"arn\": \"arn:aws:iam::aws:policy/root-task/IAMCreateRootUserPassword\"},\n)\nroot_temp_creds = response[\"Credentials\"]\n```\n\nIf the AssumeRoot request is successful, the response provides temporary credentials (`root_temp_creds`) for the root account of the target member. These credentials include an access key, secret key, and session token, enabling temporary root-level access for the duration of the session.\n\n![Terminal output showing AssumeRoot with IAMCreateRootUserPassword for AWSAssumeRoot member account\n](/assets/images/exploring-aws-sts-assumeroot/image6.png) \n\n### Creating a Login Profile for the Member Root Account\n\nWith temporary root credentials in hand, the next step is to establish an authenticated IAM client session as the root user of the member account. Using this session, we can call the `create_login_profile()` method. This method allows us to assign a login password to the root user, enabling console access.\n\nThe following Python code establishes an authenticated IAM client and creates a login profile:\n\n```\niam_client = boto3.client(\n    \"iam\",\n    aws_access_key_id=root_temp_creds[\"AccessKeyId\"],\n    aws_secret_access_key=root_temp_creds[\"SecretAccessKey\"],\n    aws_session_token=root_temp_creds[\"SessionToken\"],\n)\n\nresponse = iam_client.create_login_profile()\n```\n\nIt’s worth noting that the `create_login_profile()` method requires no explicit parameters for the root user, as it acts on the credentials of the currently authenticated session. In this case, it will apply to the root user of the member account.\n\n![Terminal output showing IAM client established as Root member account and CreateLoginProfile request](/assets/images/exploring-aws-sts-assumeroot/image5.png) \n\n\n### Reset the Administrator Password and Login to the AWS Console\n\nAt this stage, we’re nearly complete\\! Let’s recap the progress so far:\n\n1. Using compromised IAM user credentials, we established an STS session to assume the identity of an overly permissive user.  \n2. Leveraging this session, we assumed the identity of the root user of a target member account, acquiring temporary credentials scoped to the `IAMCreateRootUserPassword` task policy.  \n3. With these temporary root credentials, we established an IAM client session and successfully created a login profile for the root user.\n\nThe final step involves resetting the root user password to gain permanent access to the AWS Management Console. To do this, visit the AWS console login page and attempt to log in as the root user. Select the “Forgot Password” option to initiate the password recovery process. This will prompt a CAPTCHA challenge, after which a password reset link is sent to the root user’s email address. This would be the third roadblock for an adversary as they would need access to the root user’s email inbox to continue with the password reset workflow. It should be acknowledged that if *CreateLoginProfile* is called, you can specify the password for the user and enforce a “password reset required”. However, this is not allowed for root accounts by default, and for good reason by AWS. Unlike the first hurdle of having valid credentials, access to a user’s inbox may prove more difficult and less likely, but again, with enough motivation and resources, it is still possible.\n\n![Password recovery request from AWS sign-in for root](/assets/images/exploring-aws-sts-assumeroot/image2.png)\n\nAfter selecting the password reset link, you can set a new password for the root user. This step provides lasting access to the console as the root user. Unlike the temporary credentials obtained earlier, this access is no longer limited by the session duration or scoped permissions of the IAMCreateRootUserPassword policy, granting unrestricted administrative control over the member account.\n\n![Successful login as root for AWSAssumeRoot member account](/assets/images/exploring-aws-sts-assumeroot/image8.png)\n\n**Before moving on, if you followed along and tried this in your environment, we want to gently remind you to use Terraform to remove testing resources** using the terraform destroy command in the same folder where you initialized and deployed the resources.\n\n## Detection and Hunting Opportunities\n\nWhile exploring cloud features and APIs from an adversary's perspective is insightful, our ultimate responsibility lies in detecting and mitigating malicious or anomalous behavior, alerting stakeholders, and responding effectively. Also, while such a scenario has not been publicly documented in the wild, we should not wait to be a victim either and be reactive, hence the reason for our whitebox scenario.\n\nThe following detection and hunting queries rely on AWS CloudTrail data ingested into the Elastic Stack using the [AWS integration](https://www.elastic.co/docs/current/integrations/aws). If your environment differs, you may need to adjust these queries for custom ingestion processes or adapt them for a different SIEM or query tool.\n\n**Note:** Ensure that AWS CloudTrail is enabled for all accounts in your organization to provide comprehensive visibility into activity across your AWS environment. You may also need to enable the specific trail used for monitoring across the entire organization so all member accounts are observed properly.\n\n### Hunting \\- Unusual Action for IAM User Access Key\n\nThis query identifies potentially compromised IAM access keys that are used to make unusual API calls. It sorts the results in ascending order to surface less frequent API calls within the last two weeks. This query can be adjusted to account for different API calls or include other CloudTrail-specific fields.\n\nHunting Query: [AWS IAM Unusual AWS Access Key Usage for User](https://github.com/elastic/detection-rules/blob/7b88b36d294407cc1ea2ab1b0acbbbf3104162a9/hunting/aws/docs/iam_unusual_access_key_usage_for_user.md)\n\nMITRE ATT\\\u0026CK: \n\n* T1078.004 \\- [Valid Accounts: Cloud Accounts](https://attack.mitre.org/techniques/T1078/004/)\n\nLanguage: ES|QL\n\n```\nFROM logs-aws.cloudtrail*\n| WHERE @timestamp \u003e now() - 14 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\"\n    and event.outcome == \"success\"\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    and aws.cloudtrail.resources.arn IS NOT NULL\n    and event.action NOT IN (\"GetObject\")\n| EVAL daily_buckets = DATE_TRUNC(1 days, @timestamp)\n| STATS\n    api_counts = count(*) by daily_buckets, aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.access_key_id, aws.cloudtrail.resources.arn, event.action\n| WHERE api_counts \u003c 2\n| SORT api_counts ASC\n```\n\n### Detection \\- Unusual Assume Root Action by Rare IAM User\n\nDetection Rule: [AWS STS AssumeRoot by Rare User and Member Account](https://github.com/elastic/detection-rules/blob/main/rules/integrations/aws/privilege_escalation_sts_assume_root_from_rare_user_and_member_account.toml)\n\nThis query identifies instances where the `AssumeRoot` API call is made by an IAM user ARN and member account that have not performed this action in the last 14 days. This anomaly-based detection uses Elastic’s [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) detection rule.\n\n* The `aws.cloudtrail.user_identity.arn` field identifies the source IAM user from the management AWS account.  \n* The `aws.cloudtrail.resources.account_id` field reflects the target member account.\n\nMITRE ATT\\\u0026CK: \n\n* T1548.005 \\- [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005/)  \n* T1098.003 \\- [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003/)\n\nLanguage: KQL\n\n```\nevent.dataset: \"aws.cloudtrail\"\n    and event.provider: \"sts.amazonaws.com\"\n    and event.action: \"AssumeRoot\"\n    and event.outcome: \"success\"\n```\n\nNew Term Fields:  \nIf any combination of these fields has not been seen executing AssumeRoot within the last 14 days, an alert is generated.\n\n* `aws.cloudtrail.user_identity.arn`  \n* `aws.cloudtrail.resources.account_id`\n\n### Detection \\- Self-Created Login Profile for Root Member Account\n\nThis query detects instances where a login profile is created for a root member account by the root account itself, potentially indicating unauthorized or anomalous behavior.\n\nDetection Rule: [AWS IAM Login Profile Added for Root](https://github.com/elastic/detection-rules/blob/4374128458d116211d5d22993b6d87f6c82a30a0/rules/integrations/aws/persistence_iam_create_login_profile_for_root.toml)\n\nMITRE ATT\\\u0026CK:\n\n* T1098.003 \\- [Account Manipulation: Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003/)  \n* T1548.005 \\- [Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005/)  \n* T1078.004 \\- [Valid Accounts: Cloud Accounts](https://attack.mitre.org/techniques/T1078/004/)\n\nLanguage: ES|QL\n\n```\nFROM logs-aws.cloudtrail* \n| WHERE\n    // filter for CloudTrail logs from IAM\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    // filter for successful CreateLoginProfile API call\n    and event.action == \"CreateLoginProfile\"\n    and event.outcome == \"success\"\n    // filter for Root member account\n    and aws.cloudtrail.user_identity.type == \"Root\"\n    // filter for an access key existing which sources from AssumeRoot\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    // filter on the request parameters not including UserName which assumes self-assignment\n    and NOT TO_LOWER(aws.cloudtrail.request_parameters) LIKE \"*username*\"\n| keep\n    @timestamp,\n    aws.cloudtrail.request_parameters,\n    aws.cloudtrail.response_elements,\n    aws.cloudtrail.user_identity.type,\n    aws.cloudtrail.user_identity.arn,\n    aws.cloudtrail.user_identity.access_key_id,\n    cloud.account.id,\n    event.action,\n    source.address\n    source.geo.continent_name,\n    source.geo.region_name,\n    source.geo.city_name,\n    user_agent.original,\n    user.id\n```\n\nThese detections are specific to our scenario, however, are not fully inclusive regarding all potential AssumeRoot abuse. If you choose to explore and discover some additional hunting or threat detection opportunities, feel free to share in our [Detection Rules](https://github.com/elastic/detection-rules) repository or the [Threat Hunting](https://github.com/elastic/detection-rules/tree/main/hunting) library of ours.\n\n## Hardening Practices for AssumeRoot Use\n\nAWS [documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html) contains several important considerations for best security practices regarding IAM, STS, and many other services. However, cloud security is not a “one size fits all” workflow and security practices should be tailored to your environment, risk-tolerance, and more.\n\n**Visibility is Key:** If you can’t see it, you can’t protect it. Start by enabling CloudTrail with organization-wide trails to log activity across all accounts. Focus on capturing IAM and STS operations for insights into access and permission usage. Pair this with Security Hub for continuous monitoring and tools like Elastic or GuardDuty to hunt for unusual AssumeRoot actions.\n\n**Lock Down AssumeRoot Permissions:** Scope AssumeRoot usage to critical tasks only, like audits or recovery, by restricting task policies to essentials like IAMAuditRootUserCredentials. Assign these permissions to specific roles in the management account and keep those roles tightly controlled. Regularly review and remove unnecessary permissions to maintain the PLoP.\n\n**MFA and Guardrails for Root Access:** Enforce MFA for all users, especially those with access to AssumeRoot. Use AWS Organizations to disable root credential recovery unless absolutely needed and remove unused root credentials entirely. RCPs can help centralize and tighten permissions for tasks involving AssumeRoot or other sensitive operations.\n\n# Conclusion\n\nWe hope this article provides valuable insight into AWS’ AssumeRoot API operation, how it can be abused by adversaries, and some threat detection and hunting guidance. Abusing AssumeRoot is one of many living-off-the-cloud (LotC) techniques that adversaries have the capability to target, but we encourage others to explore, research, and share their findings accordingly with the community and AWS.","code":"var Component=(()=\u003e{var h=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(o,e)=\u003e()=\u003e(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=\u003e{for(var s in e)i(o,s,{get:e[s],enumerable:!0})},a=(o,e,s,r)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let n of m(e))!g.call(o,n)\u0026\u0026n!==s\u0026\u0026i(o,n,{get:()=\u003ee[n],enumerable:!(r=u(e,n))||r.enumerable});return o};var A=(o,e,s)=\u003e(s=o!=null?h(p(o)):{},a(e||!o||!o.__esModule?i(s,\"default\",{value:o,enumerable:!0}):s,o)),y=o=\u003ea(i({},\"__esModule\",{value:!0}),o);var l=f((I,c)=\u003e{c.exports=_jsx_runtime});var S={};w(S,{default:()=\u003ev,frontmatter:()=\u003eb});var t=A(l()),b={title:\"Exploring AWS STS AssumeRoot\",subtitle:\"AssumeRoot Abuse and Detection Strategies in AWS Organizations\",slug:\"exploring-aws-sts-assumeroot\",date:\"2024-12-09\",description:\"Explore AWS STS AssumeRoot, its risks, detection strategies, and practical scenarios to secure against privilege escalation and account compromise using Elastic's SIEM and CloudTrail data.\",author:[{slug:\"terrance-dejesus\"}],image:\"Security Labs Images 20.jpg\",category:[{slug:\"security-research\"}]};function d(o){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\",h3:\"h3\",img:\"img\",em:\"em\",pre:\"pre\",ol:\"ol\",br:\"br\",h1:\"h1\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Welcome to another installment of AWS detection engineering with Elastic. This article will dive into the new AWS \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html\",rel:\"nofollow\",children:\"Security Token Service\"}),\" (STS) API operation, \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoot.html\",rel:\"nofollow\",children:\"AssumeRoot\"}),\", simulate some practical behavior in a sandbox AWS environment, and explore detection capabilities within Elastic\\u2019s SIEM.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"What to expect from this article:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Basic insight into AWS STS web service\"}),`\n`,(0,t.jsx)(e.li,{children:\"Insight into STS\\u2019 AssumeRoot API operation\"}),`\n`,(0,t.jsx)(e.li,{children:\"Threat scenario using AssumeRoot with Terraform and Python code\"}),`\n`,(0,t.jsx)(e.li,{children:\"Detection and hunting opportunities for potential AssumeRoot abuse\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"understanding-aws-sts-and-the-assumeroot-api\",children:\"Understanding AWS STS and the AssumeRoot API\"}),`\n`,(0,t.jsx)(e.p,{children:\"AWS Security Token Service (STS) is a web service that enables users, accounts, and roles to request temporary, limited-privilege credentials. For IAM users, their accounts are typically registered in AWS Identity and Access Management (IAM), where either a login profile is attached for accessing the console or access keys, and secrets are created for programmatic use by services like Lambda, EC2, and others.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"While IAM credentials are persistent, \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html#sts-regionalization\",rel:\"nofollow\",children:(0,t.jsx)(e.strong,{children:\"STS credentials\"})}),\" are temporary. These credentials - comprising an access key, secret key, and session token - are granted upon request and are valid for a specific period. Requests are typically sent to the global \",(0,t.jsx)(e.code,{children:\"sts.amazonaws.com\"}),\" endpoint, which responds with temporary credentials for a user or role. These credentials can then be used to access other AWS services on behalf of the specified user or role, as long as the action is explicitly allowed by the associated permission policy.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This process is commonly known as assuming a role, executed via the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"AssumeRole\"})}),\" API. It is frequently used in AWS environments and organizations for various scenarios. For example:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"An EC2 instance with an attached role will automatically use \",(0,t.jsx)(e.code,{children:\"AssumeRole\"}),\" to retrieve temporary credentials for API requests.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Similarly, Lambda functions often invoke \",(0,t.jsx)(e.code,{children:\"AssumeRole\"}),\" to authenticate and perform their designated actions.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Although \",(0,t.jsx)(e.code,{children:\"AssumeRole\"}),\" is incredibly useful, it can pose a risk if roles are over-permissioned by the organization. Misconfigured policies with excessive permissions can allow adversaries to abuse these roles, especially in environments where the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_permissions_least_privileges.html\",rel:\"nofollow\",children:\"Principle of Least Privilege\"}),\" (PoLP) is not strictly enforced. Note that the security risks associated with AssumeRole are typically attributed to misconfigurations or not following best security practices by organizations. These are not the result of AssumeRole or even AssumeRoot development decisions.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"introduction-to-assumeroot\",children:\"Introduction to AssumeRoot\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"AWS recently introduced the \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\" API operation to STS. Similar to \",(0,t.jsx)(e.code,{children:\"AssumeRole\"}),\", it allows users to retrieve temporary credentials - but specifically for the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\",rel:\"nofollow\",children:\"root user\"}),\" of a member account in an AWS organization.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"what-are-member-accounts\",children:\"What Are Member Accounts?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In AWS, \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html\",rel:\"nofollow\",children:\"member accounts\"}),\" are separate accounts within an organization that have their own IAM users, services, and roles. These accounts are distinct from the management account, but they still fall under the same organizational hierarchy. Each AWS organization is created with a unique root account tied to the email address used during its setup. Similarly, every member account requires a root user or email address at the time of its creation, effectively establishing its own root identity.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"how-does-assumeroot-work\",children:\"How Does AssumeRoot Work?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"When a privileged user in the management account needs root-level privileges for a member account, they can use the \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\" API to retrieve temporary credentials for the member account's root user. Unlike \",(0,t.jsx)(e.code,{children:\"AssumeRole\"}),\", where the target principal is a user ARN, the target principal for \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\" is the member account ID itself. Additionally, a task policy ARN must be specified, which defines the specific permissions allowed with the temporary credentials.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here are the available task policy ARNs for \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\":\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMAuditRootUserCredentials\",rel:\"nofollow\",children:\"IAMAuditRootUserCredentials\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMCreateRootUserPassword\",rel:\"nofollow\",children:\"IAMCreateRootUserPassword\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-IAMDeleteRootUserCredentials\",rel:\"nofollow\",children:\"IAMDeleteRootUserCredentials\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-S3UnlockBucketPolicy\",rel:\"nofollow\",children:\"S3UnlockBucketPolicy\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/security-iam-awsmanpol.html#security-iam-awsmanpol-SQSUnlockQueuePolicy\",rel:\"nofollow\",children:\"SQSUnlockQueuePolicy\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"potential-abuse-of-task-policies\",children:\"Potential Abuse of Task Policies\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"While these predefined task policies limit what can be done with \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\", their scope can still be theoretically abused in the right circumstances. For example:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"IAMCreateRootUserPassword\"}),\": This policy grants the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"iam:CreateLoginProfile\"})}),\" permission, allowing the creation of a login profile for a user that typically doesn't require console access. If an adversary gains access to programmatic credentials, they could create a login profile and gain console access to the account that is more persistent.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"IAMDeleteRootUserCredentials\"}),\": This policy allows the deletion of root credentials, but also grants permissions like \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListAccessKeys.html\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"iam:ListAccessKeys\"})}),\" and \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/APIReference/API_ListMFADevices.html\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"iam:ListMFADevices\"})}),\". These permissions could help an adversary gather critical information about access credentials or MFA configurations for further exploitation.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"assumeroot-in-action\",children:\"AssumeRoot in Action\"}),`\n`,(0,t.jsx)(e.p,{children:\"Now that we understand how AssumeRoot works at a high level, how it differs from AssumeRole, and the potential risks associated with improper security practices, let\\u2019s walk through a practical scenario to simulate its usage. It should be noted that this is one of many potential scenarios where AssumeRoot may or could be abused. As of this article's publication, no active abuse has been reported in the wild, as expected with a newer AWS functionality.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Below is a simple depiction of what we will accomplish in the following sections:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image3.png\",alt:\"AssumeRoot scenario workflow\",width:\"1099\",height:\"726\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Before diving in, it\\u2019s important to highlight that we\\u2019re using an admin-level IAM user configured as the default profile for our local AWS CLI. This setup enables us to properly configure the environment using \",(0,t.jsx)(e.a,{href:\"https://developer.hashicorp.com/terraform\",rel:\"nofollow\",children:\"Terraform\"}),\" and simulate potential threat scenarios in AWS for detection purposes.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"member-account-creation\",children:\"Member Account Creation\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first step is to enable centralized root access for member accounts, as outlined in the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts.html\",rel:\"nofollow\",children:\"AWS documentation\"}),\". Centralized root access allows us to group all AWS accounts into a single organization, with each member account having its own root user.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Next, we manually create a member account within our organization through the Accounts section in the AWS Management Console. For this scenario, the key requirement is to note the member account ID, a unique 12-digit number. For our example, we\\u2019ll assume this ID is \",(0,t.jsx)(e.code,{children:\"000000000001\"}),\" and name it \",(0,t.jsx)(e.em,{children:\"AWSAssumeRoot\"}),\". Centralized management of AWS accounts is a common practice for organizations that may separate different operational services into separate AWS accounts but want to maintain centralized management.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image4.png\",alt:\"AWS console showing management account and member account AWSAssumeRoot\",width:\"1892\",height:\"978\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We also add the member account as the \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_delegate_policies.html\",rel:\"nofollow\",children:\"delegated administrator\"}),\" for centralized root access as well, which allows that root member account to have centralized root access for any other member accounts of the organization.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"While we won\\u2019t cover it in depth, we have also enabled the new \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_rcps.html\",rel:\"nofollow\",children:\"Resource control policies\"}),\" (RCPs) within Identity and Access Management (IAM), which will allow central administration over permissions granted to resources within accounts in our organization, but by default, the \",(0,t.jsx)(e.em,{children:\"RCPFullAWSAccess\"}),\" policy allows all permissions to all services for all principals and is attached directly to root.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"environment-setup\",children:\"Environment Setup\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For our simulation, we use Terraform to create an overly permissive IAM user named compromised_user. This user is granted the predefined \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AdministratorAccess.html\",rel:\"nofollow\",children:\"AdministratorAccess\"}),\" policy, which provides admin-level privileges. Additionally, we generated an access key for this user while intentionally omitting a login profile to reflect a typical setup where credentials are used programmatically. This is not an uncommon practice, especially in developer environments.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is the \",(0,t.jsx)(e.code,{children:\"main.tf\"}),\" configuration used to create the resources:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`provider \"aws\" {\n  region = var.region\n}\n\ndata \"aws_region\" \"current\" {}\n\n# Create an IAM user with AdministratorAccess (simulated compromised user)\nresource \"aws_iam_user\" \"compromised_user\" {\n  name = \"CompromisedUser\"\n}\n\n# Attach AdministratorAccess Policy to the compromised user\nresource \"aws_iam_user_policy_attachment\" \"compromised_user_policy\" {\n  user       = aws_iam_user.compromised_user.name\n  policy_arn = \"arn:aws:iam::aws:policy/AdministratorAccess\"\n}\n\n# Create access keys for the compromised user\nresource \"aws_iam_access_key\" \"compromised_user_key\" {\n  user = aws_iam_user.compromised_user.name\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We also define an \",(0,t.jsx)(e.code,{children:\"outputs.tf\"}),\" file to capture key details about the environment, such as the region, access credentials, and the user ARN:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`output \"aws_region\" {\n  description = \"AWS Region where the resources are deployed\"\n  value       = var.region\n}\n\noutput \"compromised_user_access_key\" {\n  value       = aws_iam_access_key.compromised_user_key.id\n  sensitive   = true\n  description = \"Access key for the compromised IAM user\"\n}\n\noutput \"compromised_user_secret_key\" {\n  value       = aws_iam_access_key.compromised_user_key.secret\n  sensitive   = true\n  description = \"Secret key for the compromised IAM user\"\n}\n\noutput \"compromised_user_name\" {\n  value       = aws_iam_user.compromised_user.name\n  description = \"Name of the compromised IAM user\"\n}\n\noutput \"compromised_user_arn\" {\n  value       = aws_iam_user.compromised_user.arn\n  description = \"ARN of the compromised IAM user\"\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Once we run \",(0,t.jsx)(e.code,{children:\"terraform apply\"}),\", the configuration creates a highly permissive IAM user (\",(0,t.jsx)(e.code,{children:\"compromised_user\"}),\") with associated credentials. These credentials simulate those that an adversary might obtain for initial access or escalating privileges.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is one of the first hurdles for an adversary, collecting valid credentials. In today\\u2019s threat landscape information stealer malware and phishing campaigns are more common than ever, aimed at obtaining credentials that can be sold or used for lateral movement. While this is a hurdle, the probability of compromised credentials for initial access is high - such as those with \",(0,t.jsx)(e.a,{href:\"https://www.cisa.gov/sites/default/files/2023-11/aa23-320a_scattered_spider_0.pdf\",rel:\"nofollow\",children:\"SCATTERED SPIDER\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://sysdig.com/blog/scarleteel-2-0/\",rel:\"nofollow\",children:\"SCARLETEEL\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image1.png\",alt:\"\",width:\"1798\",height:\"468\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"establish-an-sts-client-session-with-stolen-credentials\",children:\"Establish an STS Client Session with Stolen Credentials\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The next step is to establish an STS client session using the compromised credentials (\",(0,t.jsx)(e.code,{children:\"compromised_user\"}),\" access key and secret key). This session allows the adversary to make requests to AWS STS on behalf of the compromised user.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here\\u2019s the Python code to establish the STS client using the \",(0,t.jsx)(e.a,{href:\"https://aws.amazon.com/sdk-for-python/\",rel:\"nofollow\",children:\"AWS Boto3 SDK\"}),\" (the AWS SDK used to create, configure, and manage AWS services, such as Amazon EC2 and Amazon S3). This Python code is used to create the STS client with stolen IAM user credentials:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:` sts_client = boto3.client(\n     \"sts\",\n     aws_access_key_id=compromised_access_key,\n     aws_secret_access_key=compromised_secret_key,\n     region_name=region,\n     endpoint_url=f'https://sts.{region}.amazonaws.com'\n )\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image7.png\",alt:\"Terminal output when creating STS client with stolen IAM user credentials\",width:\"1618\",height:\"868\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" During testing, we discovered that the \",(0,t.jsx)(e.code,{children:\"endpoint_url\"}),\" must explicitly point to \",(0,t.jsx)(e.code,{children:\"https://sts.\u003cregion\u003e.amazonaws.com\"}),\". Omitting this may result in an \",(0,t.jsx)(e.code,{children:\"InvalidOperation\"}),\" error when attempting to invoke the \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\" API.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This STS client session forms the foundation for simulating an adversary's actions as we have taken compromised credentials and initiated our malicious actions.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"assume-root-for-member-account-on-behalf-of-compromised-user\",children:\"Assume Root for Member Account on Behalf of Compromised User\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"After establishing an STS client session as the compromised user, we can proceed to call the AssumeRoot API. This request allows us to assume the root identity of a member account within an AWS Organization. For the request, the TargetPrincipal is set to the member account ID we obtained earlier, the session duration is set to 900 seconds (15 minutes), and the TaskPolicyArn is defined as \",(0,t.jsx)(e.code,{children:\"IAMCreateRootUserPassword\"}),\". This policy scopes the permissions to actions related to creating or managing root login credentials.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"A notable permission included in this policy is \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateLoginProfile.html\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"CreateLoginProfile\"})}),\", which enables the creation of a login password for the root user. This allows access to the AWS Management Console as the root user.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is the Python code to assume root of member account \",(0,t.jsx)(e.code,{children:\"000000000001\"}),\", with permissions scoped by \",(0,t.jsx)(e.em,{children:\"IAMCreateRootUserPassword\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`response = sts_client.assume_root(\n    TargetPrincipal=member_account_id,\n    DurationSeconds=900,\n    TaskPolicyArn={\"arn\": \"arn:aws:iam::aws:policy/root-task/IAMCreateRootUserPassword\"},\n)\nroot_temp_creds = response[\"Credentials\"]\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"If the AssumeRoot request is successful, the response provides temporary credentials (\",(0,t.jsx)(e.code,{children:\"root_temp_creds\"}),\") for the root account of the target member. These credentials include an access key, secret key, and session token, enabling temporary root-level access for the duration of the session.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image6.png\",alt:`Terminal output showing AssumeRoot with IAMCreateRootUserPassword for AWSAssumeRoot member account\n`,width:\"1990\",height:\"828\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"creating-a-login-profile-for-the-member-root-account\",children:\"Creating a Login Profile for the Member Root Account\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With temporary root credentials in hand, the next step is to establish an authenticated IAM client session as the root user of the member account. Using this session, we can call the \",(0,t.jsx)(e.code,{children:\"create_login_profile()\"}),\" method. This method allows us to assign a login password to the root user, enabling console access.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following Python code establishes an authenticated IAM client and creates a login profile:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`iam_client = boto3.client(\n    \"iam\",\n    aws_access_key_id=root_temp_creds[\"AccessKeyId\"],\n    aws_secret_access_key=root_temp_creds[\"SecretAccessKey\"],\n    aws_session_token=root_temp_creds[\"SessionToken\"],\n)\n\nresponse = iam_client.create_login_profile()\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"It\\u2019s worth noting that the \",(0,t.jsx)(e.code,{children:\"create_login_profile()\"}),\" method requires no explicit parameters for the root user, as it acts on the credentials of the currently authenticated session. In this case, it will apply to the root user of the member account.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image5.png\",alt:\"Terminal output showing IAM client established as Root member account and CreateLoginProfile request\",width:\"1874\",height:\"856\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"reset-the-administrator-password-and-login-to-the-aws-console\",children:\"Reset the Administrator Password and Login to the AWS Console\"}),`\n`,(0,t.jsx)(e.p,{children:\"At this stage, we\\u2019re nearly complete! Let\\u2019s recap the progress so far:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Using compromised IAM user credentials, we established an STS session to assume the identity of an overly permissive user.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Leveraging this session, we assumed the identity of the root user of a target member account, acquiring temporary credentials scoped to the \",(0,t.jsx)(e.code,{children:\"IAMCreateRootUserPassword\"}),\" task policy.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"With these temporary root credentials, we established an IAM client session and successfully created a login profile for the root user.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The final step involves resetting the root user password to gain permanent access to the AWS Management Console. To do this, visit the AWS console login page and attempt to log in as the root user. Select the \\u201CForgot Password\\u201D option to initiate the password recovery process. This will prompt a CAPTCHA challenge, after which a password reset link is sent to the root user\\u2019s email address. This would be the third roadblock for an adversary as they would need access to the root user\\u2019s email inbox to continue with the password reset workflow. It should be acknowledged that if \",(0,t.jsx)(e.em,{children:\"CreateLoginProfile\"}),\" is called, you can specify the password for the user and enforce a \\u201Cpassword reset required\\u201D. However, this is not allowed for root accounts by default, and for good reason by AWS. Unlike the first hurdle of having valid credentials, access to a user\\u2019s inbox may prove more difficult and less likely, but again, with enough motivation and resources, it is still possible.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image2.png\",alt:\"Password recovery request from AWS sign-in for root\",width:\"1999\",height:\"1025\"})}),`\n`,(0,t.jsx)(e.p,{children:\"After selecting the password reset link, you can set a new password for the root user. This step provides lasting access to the console as the root user. Unlike the temporary credentials obtained earlier, this access is no longer limited by the session duration or scoped permissions of the IAMCreateRootUserPassword policy, granting unrestricted administrative control over the member account.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/exploring-aws-sts-assumeroot/image8.png\",alt:\"Successful login as root for AWSAssumeRoot member account\",width:\"1999\",height:\"711\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Before moving on, if you followed along and tried this in your environment, we want to gently remind you to use Terraform to remove testing resources\"}),\" using the terraform destroy command in the same folder where you initialized and deployed the resources.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"detection-and-hunting-opportunities\",children:\"Detection and Hunting Opportunities\"}),`\n`,(0,t.jsx)(e.p,{children:\"While exploring cloud features and APIs from an adversary's perspective is insightful, our ultimate responsibility lies in detecting and mitigating malicious or anomalous behavior, alerting stakeholders, and responding effectively. Also, while such a scenario has not been publicly documented in the wild, we should not wait to be a victim either and be reactive, hence the reason for our whitebox scenario.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following detection and hunting queries rely on AWS CloudTrail data ingested into the Elastic Stack using the \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/aws\",rel:\"nofollow\",children:\"AWS integration\"}),\". If your environment differs, you may need to adjust these queries for custom ingestion processes or adapt them for a different SIEM or query tool.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" Ensure that AWS CloudTrail is enabled for all accounts in your organization to provide comprehensive visibility into activity across your AWS environment. You may also need to enable the specific trail used for monitoring across the entire organization so all member accounts are observed properly.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"hunting---unusual-action-for-iam-user-access-key\",children:\"Hunting - Unusual Action for IAM User Access Key\"}),`\n`,(0,t.jsx)(e.p,{children:\"This query identifies potentially compromised IAM access keys that are used to make unusual API calls. It sorts the results in ascending order to surface less frequent API calls within the last two weeks. This query can be adjusted to account for different API calls or include other CloudTrail-specific fields.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Hunting Query: \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/7b88b36d294407cc1ea2ab1b0acbbbf3104162a9/hunting/aws/docs/iam_unusual_access_key_usage_for_user.md\",rel:\"nofollow\",children:\"AWS IAM Unusual AWS Access Key Usage for User\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"MITRE ATT\u0026CK:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"T1078.004 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1078/004/\",rel:\"nofollow\",children:\"Valid Accounts: Cloud Accounts\"})]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Language: ES|QL\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`FROM logs-aws.cloudtrail*\n| WHERE @timestamp \u003e now() - 14 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\"\n    and event.outcome == \"success\"\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    and aws.cloudtrail.resources.arn IS NOT NULL\n    and event.action NOT IN (\"GetObject\")\n| EVAL daily_buckets = DATE_TRUNC(1 days, @timestamp)\n| STATS\n    api_counts = count(*) by daily_buckets, aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.access_key_id, aws.cloudtrail.resources.arn, event.action\n| WHERE api_counts \u003c 2\n| SORT api_counts ASC\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"detection---unusual-assume-root-action-by-rare-iam-user\",children:\"Detection - Unusual Assume Root Action by Rare IAM User\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Detection Rule: \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/integrations/aws/privilege_escalation_sts_assume_root_from_rare_user_and_member_account.toml\",rel:\"nofollow\",children:\"AWS STS AssumeRoot by Rare User and Member Account\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This query identifies instances where the \",(0,t.jsx)(e.code,{children:\"AssumeRoot\"}),\" API call is made by an IAM user ARN and member account that have not performed this action in the last 14 days. This anomaly-based detection uses Elastic\\u2019s \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule\",rel:\"nofollow\",children:\"New Terms\"}),\" detection rule.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"aws.cloudtrail.user_identity.arn\"}),\" field identifies the source IAM user from the management AWS account.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"aws.cloudtrail.resources.account_id\"}),\" field reflects the target member account.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"MITRE ATT\u0026CK:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"T1548.005 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1548/005/\",rel:\"nofollow\",children:\"Temporary Elevated Cloud Access\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"T1098.003 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1098/003/\",rel:\"nofollow\",children:\"Additional Cloud Roles\"})]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Language: KQL\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`event.dataset: \"aws.cloudtrail\"\n    and event.provider: \"sts.amazonaws.com\"\n    and event.action: \"AssumeRoot\"\n    and event.outcome: \"success\"\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"New Term Fields:\",(0,t.jsx)(e.br,{}),`\n`,\"If any combination of these fields has not been seen executing AssumeRoot within the last 14 days, an alert is generated.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"aws.cloudtrail.user_identity.arn\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"aws.cloudtrail.resources.account_id\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"detection---self-created-login-profile-for-root-member-account\",children:\"Detection - Self-Created Login Profile for Root Member Account\"}),`\n`,(0,t.jsx)(e.p,{children:\"This query detects instances where a login profile is created for a root member account by the root account itself, potentially indicating unauthorized or anomalous behavior.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Detection Rule: \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/4374128458d116211d5d22993b6d87f6c82a30a0/rules/integrations/aws/persistence_iam_create_login_profile_for_root.toml\",rel:\"nofollow\",children:\"AWS IAM Login Profile Added for Root\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"MITRE ATT\u0026CK:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"T1098.003 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1098/003/\",rel:\"nofollow\",children:\"Account Manipulation: Additional Cloud Roles\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"T1548.005 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1548/005/\",rel:\"nofollow\",children:\"Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"T1078.004 - \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1078/004/\",rel:\"nofollow\",children:\"Valid Accounts: Cloud Accounts\"})]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Language: ES|QL\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`FROM logs-aws.cloudtrail* \n| WHERE\n    // filter for CloudTrail logs from IAM\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    // filter for successful CreateLoginProfile API call\n    and event.action == \"CreateLoginProfile\"\n    and event.outcome == \"success\"\n    // filter for Root member account\n    and aws.cloudtrail.user_identity.type == \"Root\"\n    // filter for an access key existing which sources from AssumeRoot\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    // filter on the request parameters not including UserName which assumes self-assignment\n    and NOT TO_LOWER(aws.cloudtrail.request_parameters) LIKE \"*username*\"\n| keep\n    @timestamp,\n    aws.cloudtrail.request_parameters,\n    aws.cloudtrail.response_elements,\n    aws.cloudtrail.user_identity.type,\n    aws.cloudtrail.user_identity.arn,\n    aws.cloudtrail.user_identity.access_key_id,\n    cloud.account.id,\n    event.action,\n    source.address\n    source.geo.continent_name,\n    source.geo.region_name,\n    source.geo.city_name,\n    user_agent.original,\n    user.id\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"These detections are specific to our scenario, however, are not fully inclusive regarding all potential AssumeRoot abuse. If you choose to explore and discover some additional hunting or threat detection opportunities, feel free to share in our \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules\",rel:\"nofollow\",children:\"Detection Rules\"}),\" repository or the \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/tree/main/hunting\",rel:\"nofollow\",children:\"Threat Hunting\"}),\" library of ours.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"hardening-practices-for-assumeroot-use\",children:\"Hardening Practices for AssumeRoot Use\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"AWS \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\",rel:\"nofollow\",children:\"documentation\"}),\" contains several important considerations for best security practices regarding IAM, STS, and many other services. However, cloud security is not a \\u201Cone size fits all\\u201D workflow and security practices should be tailored to your environment, risk-tolerance, and more.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Visibility is Key:\"}),\" If you can\\u2019t see it, you can\\u2019t protect it. Start by enabling CloudTrail with organization-wide trails to log activity across all accounts. Focus on capturing IAM and STS operations for insights into access and permission usage. Pair this with Security Hub for continuous monitoring and tools like Elastic or GuardDuty to hunt for unusual AssumeRoot actions.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Lock Down AssumeRoot Permissions:\"}),\" Scope AssumeRoot usage to critical tasks only, like audits or recovery, by restricting task policies to essentials like IAMAuditRootUserCredentials. Assign these permissions to specific roles in the management account and keep those roles tightly controlled. Regularly review and remove unnecessary permissions to maintain the PLoP.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"MFA and Guardrails for Root Access:\"}),\" Enforce MFA for all users, especially those with access to AssumeRoot. Use AWS Organizations to disable root credential recovery unless absolutely needed and remove unused root credentials entirely. RCPs can help centralize and tighten permissions for tasks involving AssumeRoot or other sensitive operations.\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,t.jsx)(e.p,{children:\"We hope this article provides valuable insight into AWS\\u2019 AssumeRoot API operation, how it can be abused by adversaries, and some threat detection and hunting guidance. Abusing AssumeRoot is one of many living-off-the-cloud (LotC) techniques that adversaries have the capability to target, but we encourage others to explore, research, and share their findings accordingly with the community and AWS.\"})]})}function _(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(d,o)})):d(o)}var v=_;return y(S);})();\n;return Component;"},"_id":"articles/exploring-aws-sts-assumeroot.mdx","_raw":{"sourceFilePath":"articles/exploring-aws-sts-assumeroot.mdx","sourceFileName":"exploring-aws-sts-assumeroot.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/exploring-aws-sts-assumeroot"},"type":"Article","imageUrl":"/assets/images/exploring-aws-sts-assumeroot/Security Labs Images 20.jpg","readingTime":"19 min read","series":"","url":"/exploring-aws-sts-assumeroot","headings":[{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Understanding AWS STS and the AssumeRoot API","href":"#understanding-aws-sts-and-the-assumeroot-api"},{"level":3,"title":"Introduction to AssumeRoot","href":"#introduction-to-assumeroot"},{"level":3,"title":"What Are Member Accounts?","href":"#what-are-member-accounts"},{"level":3,"title":"How Does AssumeRoot Work?","href":"#how-does-assumeroot-work"},{"level":3,"title":"Potential Abuse of Task Policies","href":"#potential-abuse-of-task-policies"},{"level":2,"title":"AssumeRoot in Action","href":"#assumeroot-in-action"},{"level":3,"title":"Member Account Creation","href":"#member-account-creation"},{"level":3,"title":"Environment Setup","href":"#environment-setup"},{"level":3,"title":"Establish an STS Client Session with Stolen Credentials","href":"#establish-an-sts-client-session-with-stolen-credentials"},{"level":3,"title":"Assume Root for Member Account on Behalf of Compromised User","href":"#assume-root-for-member-account-on-behalf-of-compromised-user"},{"level":3,"title":"Creating a Login Profile for the Member Root Account","href":"#creating-a-login-profile-for-the-member-root-account"},{"level":3,"title":"Reset the Administrator Password and Login to the AWS Console","href":"#reset-the-administrator-password-and-login-to-the-aws-console"},{"level":2,"title":"Detection and Hunting Opportunities","href":"#detection-and-hunting-opportunities"},{"level":3,"title":"Hunting \\- Unusual Action for IAM User Access Key","href":"#hunting---unusual-action-for-iam-user-access-key"},{"level":3,"title":"Detection \\- Unusual Assume Root Action by Rare IAM User","href":"#detection---unusual-assume-root-action-by-rare-iam-user"},{"level":3,"title":"Detection \\- Self-Created Login Profile for Root Member Account","href":"#detection---self-created-login-profile-for-root-member-account"},{"level":2,"title":"Hardening Practices for AssumeRoot Use","href":"#hardening-practices-for-assumeroot-use"}],"author":[{"title":"Terrance DeJesus","slug":"terrance-dejesus","description":"Senior Security Research Engineer, Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),_=(e,t)=\u003e{for(var n in t)o(e,n,{get:t[n],enumerable:!0})},c=(e,t,n,a)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let s of f(t))!j.call(e,s)\u0026\u0026s!==n\u0026\u0026o(e,s,{get:()=\u003et[s],enumerable:!(a=d(t,s))||a.enumerable});return e};var p=(e,t,n)=\u003e(n=e!=null?x(g(e)):{},c(t||!e||!e.__esModule?o(n,\"default\",{value:e,enumerable:!0}):n,e)),D=e=\u003ec(o({},\"__esModule\",{value:!0}),e);var u=l((F,i)=\u003e{i.exports=_jsx_runtime});var C={};_(C,{default:()=\u003ey,frontmatter:()=\u003eM});var r=p(u()),M={title:\"Terrance DeJesus\",description:\"Senior Security Research Engineer, Elastic\",slug:\"terrance-dejesus\"};function m(e){return(0,r.jsx)(r.Fragment,{})}function h(e={}){let{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(m,e)})):m(e)}var y=h;return D(C);})();\n;return Component;"},"_id":"authors/terrance-dejesus.mdx","_raw":{"sourceFilePath":"authors/terrance-dejesus.mdx","sourceFileName":"terrance-dejesus.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/terrance-dejesus"},"type":"Author","imageUrl":"","url":"/authors/terrance-dejesus"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"exploring-aws-sts-assumeroot"},"buildId":"mpSLeWdge5Uk6CRJvfMY5","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>