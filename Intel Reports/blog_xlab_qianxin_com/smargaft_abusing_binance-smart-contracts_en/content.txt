<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>Smargaft Harnesses EtherHiding for Stealthy C2 Hosting</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Smargaft Harnesses EtherHiding for Stealthy C2 Hosting">
    <meta property="og:description" content="Background


At XLab, we see a lot of botnets every day, mainly tweaks of old Mirai and Gafgyt codes. These are pretty common and usually don&#x27;t grab our attention. But today, we found something different. This new botnet uses some of Gafgyt&#x27;s attack styles but has been built differently from">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/02/smartgaft_feature.png">
    <meta property="article:published_time" content="2024-02-02T14:26:55.000Z">
    <meta property="article:modified_time" content="2024-06-06T01:52:00.000Z">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="BSC">
    <meta property="article:tag" content="SMART CONTRACT">
    <meta property="article:tag" content="Blockchain">
    <meta property="article:tag" content="EtherHiding">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Smargaft Harnesses EtherHiding for Stealthy C2 Hosting">
    <meta name="twitter:description" content="The Smargaft botnet hosts its C2 via Binance Smart Contracts, showcasing another instance of EtherHiding.
Various signs indicate that the new dark magic has been unleashed. Stay Vigilant, Stay Safe.">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/02/smartgaft_feature-1.png">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="DDoS, BSC, SMART CONTRACT, Blockchain, EtherHiding, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1665">
    <meta property="og:image:height" content="950">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "Smargaft Harnesses EtherHiding for Stealthy C2 Hosting",
    "url": "https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/",
    "datePublished": "2024-02-02T14:26:55.000Z",
    "dateModified": "2024-06-06T01:52:00.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/02/smartgaft_feature.png",
        "width": 1665,
        "height": 950
    },
    "keywords": "DDoS, BSC, SMART CONTRACT, Blockchain, EtherHiding, EN",
    "description": "Background\n\n\nAt XLab, we see a lot of botnets every day, mainly tweaks of old Mirai and Gafgyt codes. These are pretty common and usually don&#x27;t grab our attention. But today, we found something different. This new botnet uses some of Gafgyt&#x27;s attack styles but has been built differently from the ground up. What&#x27;s cool is that it uses the Binance Smart Chain to host commands and control server(C2), and infects shell scripts like a Virus to achieve persistence. When looking closer, we noticed that",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-ddos tag-bsc tag-smart-contract tag-blockchain tag-etherhiding tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-ddos tag-bsc tag-smart-contract tag-blockchain tag-etherhiding tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/ddos/">DDoS</a>
                </span>
        </div>

        <h1 class="article-title">Smargaft Harnesses EtherHiding for Stealthy C2 Hosting</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/acey9/">Acey9</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-02-02">2024年2月2日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 16 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/02/smartgaft_feature.png"
                    alt="Smargaft Harnesses EtherHiding for Stealthy C2 Hosting"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <h1 id="background">Background</h1>
<p>At XLab, we see a lot of botnets every day, mainly tweaks of old Mirai and Gafgyt codes. These are pretty common and usually don't grab our attention. But today, we found something different. This new botnet uses some of Gafgyt's attack styles but has been built differently from the ground up. What's cool is that it uses the Binance Smart Chain to host commands and control server(C2), and infects shell scripts like a Virus to achieve persistence. When looking closer, we noticed that some antivirus vendors flagged this botnet as Mirai, which isn't right. Because of its smart use of contracts and Gafgyt's methods, we've decided to call it Smargaft. It mainly does DDoS attacks, runs system commands, and lets users connect anonymously using socks5 proxy.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_brief.png" alt="smartgaft_brief.png" loading="lazy"></p>
<p>The biggest highlight of Smargaft is its use of smart contracts for hosting its C2 infrastructure, a technique first disclosed in October 2023 and known in the industry as <strong>EtherHiding</strong>. It fully leverages the public and immutable nature of blockchain technology, making the "on-chain" C2 irremovable, which is a highly advanced and rare form of Bullet-Proof Hosting technique. This is the first time we've seen such technology applied in the botnet field. Another advantage of using smart contracts for cloud-based C2 configuration is flexibility. Malware authors can even design monitoring code to interact with smart contracts, enabling automatic updates of C2 when specific conditions are met or adjusting attack strategies based on environmental changes. Given that once abused, contracts can quickly become powerful tools for cybercrime, significantly increasing the difficulty of monitoring and management, we decided to write this article to share our latest findings with the community, hoping to help everyone more effectively identify and prevent these new types of cyber threats.</p>
<h1 id="what-is-bsc-what-is-smart-contract">What is BSC, What is Smart Contract?</h1>
<p><a href="https://www.bnbchain.org/en/bnb-smart-chain?ref=blog.xlab.qianxin.com">Binance Smart Chain (BSC)</a> is a blockchain platform developed and maintained by Binance, launched in 2020. It's designed to support decentralized applications (DApps) and smart contracts, similar to Ethereum.</p>
<p>Smart contracts are automated protocols or programs executed on a blockchain. They consist of pre-written code designed to automatically perform actions or contractual terms under specific conditions. Smart contracts enable trustworthy transactions and interactions without intermediaries. When certain conditions are met, smart contracts can trigger various operations, such as transferring digital assets, distributing rewards, or creating tokens.</p>
<blockquote>
<p>XLab notes:</p>
<blockquote>
<p>Smart contracts are like special boxes placed on the blockchain. These boxes can store data, perform calculations, and allow people to view and utilize this data. One characteristic of the blockchain is that information is never deleted, so this box will always exist. Another feature of the blockchain is that all transactions are recorded, making operations conducted through this box traceable and immutable.</p>
</blockquote>
</blockquote>
<p>In the scenario where "Smargaft utilizes smart contracts for C2 management," it essentially means that the developers of Smargaft configure and manage the C2 infrastructure through smart contracts, with the C2-related information ultimately stored on the blockchain. Once the C2 configuration is complete, Smargaft's malicious software (bot samples) communicates with the blockchain network via JSON RPC to retrieve C2 information.</p>
<p>Specifically, the bot samples send a request to an RPC server, which includes the address of the Smargaft smart contract and the contract function to be called. Upon receiving this request, the RPC server forwards it to the blockchain network. Then, the blockchain nodes receive the request and use the Ethereum Virtual Machine (EVM) to load and execute the specified function within the smart contract. After execution, the results are sent back along the same path to the bot sample.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_rpc.png" alt="smartgaft_rpc.png" loading="lazy"></p>
<p>Considering the methods of querying data on the blockchain and the inherent characteristics of the blockchain itself, the advantages of the "smart contract-hosted C2" technology are mainly reflected in three aspects of unblockable:</p>
<ol>
<li>
<p><strong>Unblockable Access Channels</strong>: Due to the diversity of RPC nodes, including official nodes, public nodes, and privately built nodes, it's difficult to cover all possible access paths with a blacklist. Taking Smargaft as an example, even if Binance's official nodes are blocked in China, there are still multiple public nodes available for use. Smargaft's bot samples are embedded with 14 different RPC server addresses, ensuring that at least some nodes are accessible.</p>
</li>
<li>
<p><strong>Unblockable Configuration Mechanism</strong>: Malicious smart contracts deployed on the blockchain are difficult to directly ban or delete. For example, the smart contract address of Smargaft (e.g., "0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b") is not subject to direct regulation or blocking by Binance or other blockchain operators.</p>
</li>
<li>
<p><strong>Unblockable C2 Information</strong>: Once C2 information is stored on the blockchain via a smart contract, it cannot be deleted or altered. In the case of Smargaft, C2 information is permanently recorded on a specific block of the Binance Smart Chain (e.g., block number 34731229), ensuring its persistence and immutability.</p>
</li>
</ol>
<h1 id="smargaft-contracts">Smargaft Contracts</h1>
<p>For analyzing smart contracts, the platform provided by Binance, <a href="https://bscscan.com/?ref=blog.xlab.qianxin.com">BscScan</a>, can be used for exploration and analysis. The contract address used in the Smargaft sample is <strong>0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b</strong>. Based on the timeline we've compiled, it appears highly likely that the author of Smargaft is Russian, who began experimenting with the technology of smart contract-hosted C2 on September 15, 2023, completed testing by September 20, 2023, and officially deployed it on December 27, 2023.</p>
<pre><code>+ 2023-09-15:
	+ Transfer
	+ Src Wallet: 0x7Be249AA69c631c7aa5De4F3aDbFb8A9db8DfD09
	+ Dst Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Amount: 0.06094994 BNB ($17.75)
+ 2023-09-15 : 
	+ Create the first contract (unstripped)
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0xe77c6a0E10F2A469fb2afa667C99180E186233a8
	+ Init:
		+ Addr: 45.95.146.93
	+ The comment is Russian
+ 2023-09-15:
	+ Set address: 1.1.1.1
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0xe77c6a0E10F2A469fb2afa667C99180E186233a8
+ 2023-09-15:
	+ Create the second contract (same as the first one, but stripped)
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0x862fbeb2456499a37e9146f1ef6eb5a57c2fb97a
	+ InitAddr: 
+ 2023-09-15:
	+ Change the IP addresses around
		+ 45.95.146.93 -&gt; 10.202.30.40 -&gt; 45.95.146.93 -&gt; 1.22.33.44 -&gt; 45.95.146.93
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0x862fbeb2456499a37e9146f1ef6eb5a57c2fb97a
+ 2023-09-20:
	+ Create the third contract (add one variable and its set/get function, stipped)
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b
	+ Init:
		+ Addr: 45.95.146.93
		+ New Parameter: hello
+ 2023-12-27
	+ Set address: 45.95.146.93;94.103.188.167;185.132.125.193
	+ Wallet: 0x16Cc46219d062257F384D85F84c7AbC7D9e34444
	+ Contract: 0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b
</code></pre>
<p>The original contract, <strong>0xe77c6a0E10F2A469fb2afa667C99180E186233a8</strong>, has its source code available for viewing, with many comments in Russian. It mainly functions to read and write the ServerAddr on the blockchain through <strong>getServerAddr</strong> and <strong>setServerAddr</strong>.</p>
<pre><code>pragma solidity ^0.8.0;

contract ControlEbanataContract {
    string private serverAddr;
    address public admin;

    // Событие для уведомления о смене адреса сервера
    event ServerAddrChanged(string newAddr);

    constructor(string memory initialServerAddr) {
        serverAddr = initialServerAddr;
        admin = msg.sender;
    }

    // Изменить адрес сервера (только администратор)
    function setServerAddr(string memory newAddr) public {
        require(msg.sender == admin, "Only the admin can change the server address");
        serverAddr = newAddr;
        emit ServerAddrChanged(newAddr);
    }

    // Получить текущий адрес сервера
    function getServerAddr() public view returns (string memory) {
        return serverAddr;
    }

    // Изменить администратора (только текущий администратор)
    function changeAdmin(address newAdmin) public {
        require(msg.sender == admin, "Only the admin can change the admin");
        admin = newAdmin;
    }
}
</code></pre>
<p>After several tests, the final contract for Smargaft is <strong>0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b</strong>. This version of the contract is in compiled bytecode.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_bscscan.png" alt="smartgaft_bscscan.png" loading="lazy"></p>
<p>Although the source code of the Smargaft contract is not directly viewable, it can be decompiled by clicking "Decompile Bytecode".</p>
<pre><code>def storage:
  stor0 is array of struct at storage 0
  stor1 is array of struct at storage 1
  adminAddress is addr at storage 2

def unknown61695f0a(array _param1) payable：
{...}
 if _param1.length:
 	stor1[].field_0 = Array(len=_param1.length, data=_param1[all])
{...}

def unknownd7ec3ad7() payable: 
{...}
  return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1)], mem[(2 * ceil32(stor1.length.field_1)) + 192 len 2 * ceil32(stor1.length.field_1)]), 
{...}


def unknownebe759f5(array _param1) payable: 
{...}
if _param1.length:
	stor0[].field_0 = Array(len=_param1.length, data=_param1[all])
{...}
def unknownbaaeedb7() payable: 
{...}
  return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1)], mem[(2 * ceil32(stor0.length.field_1)) + 192 len 2 * ceil32(stor0.length.field_1)]), 
{...}
</code></pre>
<p>This is a straightforward contract application that uses <strong>storage</strong> to save variables <code>stor0</code>, <code>stor1</code>, and <code>adminAddress</code>. The function with identifier <code>0x61695f0a</code> saves the input <code>_param1</code> byte by byte into <code>stor1</code>, while <code>0xd7ec3ad7</code> reads the data from <code>stor1</code> and returns it as a string. The functions <code>0xebe759f5</code> and <code>0xbaaeedb7</code> operate similarly but target the variable <code>stor0</code>. Readers with programming experience will recognize these as a pair of <strong>set/get</strong> methods, allowing interaction with the contract to write or update data on the blockchain through this <strong>set/get</strong> mechanism.</p>
<p>For example, in actual operation, the author of Smargaft used the <code>0x61695f0a</code> method on <code>Dec-27-2023 09:55:26 PM +UTC</code> to write C2 data onto the blockchain.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_setc2.png" alt="smartgaft_setc2.png" loading="lazy"></p>
<p>In Smargaft's bot samples, the <strong>eth_call</strong> is used to invoke the smart contract's method <strong>0xd7ec3ad7</strong> to obtain the C2 information.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_getc2code.png" alt="smartgaft_getc2code.png" loading="lazy"></p>
<h1 id="q-what-is-ethcall">Q: What is eth_call?</h1>
<p>Attentive readers will have noticed a Transaction Fee in the "SET C2" diagram, indicating that invoking the method <strong>0x61695f0a</strong> costs money. In fact, calling functions of a smart contract usually incurs a fee. This is not an issue in the "Set C2" scenario, as it's used infrequently; however, in the "Get C2" scenario, a problem arises: "If the number of bots is extremely large, wouldn't each retrieval of C2 information cost a significant amount of money?" This would obviously be unacceptable. Fortunately, Binance's SDK provides a method called <strong>eth_call</strong>, which allows users to read data from a smart contract without generating any blockchain transactions. Since it doesn't alter the state of the blockchain, it doesn't require any fees.</p>
<blockquote>
<p>XLab notes:</p>
<blockquote>
<p><strong>eth_call</strong> was originally designed for simulating contract execution to read data or for testing purposes, without generating any actual effects; it doesn't even get recorded on the blockchain. Therefore, you can retrieve your data (malicious payload) for free, without leaving any traces, and in a robust manner, without leaving behind any evidence.</p>
</blockquote>
</blockquote>
<h1 id="ddos-attack-statistics">DDoS Attack Statistics</h1>
<p>Looking at the geographical locations of the targets, the Smargaft botnet attacks are global and not targeted at any specific region. The main areas affected include China, Poland, the USA, Germany, and France. The specific statistics are shown in the following chart.<br>
<a href="https://blog.xlab.qianxin.com/content/images/2024/01/smargaft.ddos.20240129.png"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smargaft.ddos.20240129.png"></a></p>
<p>An interesting observation is that the attack targets of Smargaft are simultaneously assaulted by several different botnets. This leads us to speculate that there is a DDoS platform that aggregates many different botnets.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_ddosmask.png" alt="smartgaft_ddosmask.png" loading="lazy"></p>
<h1 id="sample-propagation-analysis">Sample Propagation Analysis</h1>
<p>Based on our data, Smargaft spreads by exploiting known vulnerabilities to propagate a Downloader onto target devices. Once the Downloader is successfully implanted, it then downloads the Bot sample to spread further.<br>
The vulnerabilities utilized by Smargaft include:</p>
<table>
<thead>
<tr>
<th>VULNERABILITY</th>
<th>AFFECTED</th>
</tr>
</thead>
<tbody>
<tr>
<td>CVE-2013-5948</td>
<td>ASUS RT-AC68U other RT series routers</td>
</tr>
<tr>
<td>CVE-2020-8515</td>
<td>DrayTek Vigor Router</td>
</tr>
<tr>
<td><a href="https://blog.netlab.360.com/multiple-botnets-are-spreading-using-lilin-dvr-0-day/?ref=blog.xlab.qianxin.com">LILIN_DVR_RCE</a></td>
<td>LILIN DVR</td>
</tr>
<tr>
<td><a href="https://github.com/mcw0/PoC/blob/master/TVT-PoC.py?ref=blog.xlab.qianxin.com">TVT_API_RCE</a></td>
<td>TVT DVR</td>
</tr>
</tbody>
</table>
<h1 id="downloader-analysis">Downloader Analysis</h1>
<p>For our analysis, we focus on the Downloader designed for MIPS architecture. Its basic information is as follows, with the sample using a standard UPX packer for protection.</p>
<pre><code>MD5: 2cf03e7425da7244be659d53a972708c
Magic: ELF 32-bit LSB executable, MIPS, MIPS-I version 1 (SYSV), statically linked, corrupted section header size
Packer: UPX
</code></pre>
<p>The core functionalities of the Downloader are straightforward and primarily cover two aspects:</p>
<ol>
<li>
<p><strong>Download the next stage bot sample</strong>: The primary purpose of the Downloader is to fetch and run the next-stage Bot sample.</p>
</li>
<li>
<p><strong>Eliminate competitors</strong>: Additionally, the Downloader aims to remove any competing malware that may already be present on the device. This ensures that Smargaft secures its control over the device by clearing out potential threats from other malicious actors.</p>
</li>
</ol>
<h2 id="download-execute-bot">Download &amp; Execute Bot</h2>
<p>When the Downloader wants to get the Bot sample, it connects to a download server using port 82. It sends a request to this server, telling it what kind of architecture it's on (like saying, "Hey, I need a MIPS version"). The server, after getting this request, first sends back a short message, a 10-byte string, that tells how big the Bot file is going to be. After that, it starts sending over the Bot sample.</p>
<p>In a real-world exchange, you'd see the Downloader asking to download a MIPS version of the Bot, with the Bot file being 915,732 bytes big.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_loader.png" alt="smartgaft_loader.png" loading="lazy"></p>
<h2 id="eliminate-competitors">Eliminate Competitors</h2>
<p>The Downloader uses the /proc filesystem to monitor system processes and forcibly terminates specific ones to take exclusive control of the device.</p>
<ol>
<li>4 File Transfer Process</li>
</ol>
<pre><code>curl
wget
tftp
ftpget
</code></pre>
<ol start="2">
<li>112 System Process</li>
</ol>
<pre><code>init
[kthreadd]
[ksoftirqd/0]
[khelper]
...
total 112 system process name
</code></pre>
<p>The code below helps figure out if a system process is real or fake by looking at two main things: first, it checks if the process's executable file can be opened and used normally; second, it looks at when that file was last changed. By doing this, we can tell the difference between actual system processes and those that might be pretending to be real or are from competitors.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_loaderkill.png" alt="smartgaft_loaderkill.png" loading="lazy"></p>
<h1 id="bot-analysis">Bot Analysis</h1>
<p>We captured Smargaft bot samples for three different CPU architectures: ARM, MIPS, and X86/64, belonging to two distinct versions. The primary difference between these versions lies in their ability to propagate like a worm. This article focuses on analyzing an older version of the X64 sample. Its basic information is as follows, with the sample utilizing standard UPX packing.</p>
<pre><code>MD5: 7f741495f14c828c20db4de6251673fd
Magic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, corrupted section header size
Packer: UPX
Version: V0
</code></pre>
<p>Smargaft operates relatively simply. When it runs on a device that has been compromised, it first checks the current user; if it's root, it initiates additional scanning and propagation tasks. Then, it binds to a local port to ensure only one instance runs at a time and manipulates the watchdog to prevent the device from rebooting. Next, it initializes five tasks, including obtaining C2 through smart contracts, conducting DDoS attacks, and ensuring its persistence on the device.Finally, Smargaft runs in an infinite loop, cycling through these tasks at preset intervals. The following discussion will dissect the implementation of Smargaft's functionalities centered around these tasks.</p>
<ol>
<li>Propagation Task</li>
<li>GetG2 Task</li>
<li>DDoS Task</li>
<li>Forward Task</li>
<li>Persistence Task</li>
<li>Killer Task</li>
</ol>
<h2 id="propagation-task">Propagation Task</h2>
<p>Smargaft spreads by scanning for open ports on devices within the 10.0.0.0/8 IP range, targeting 22 specific ports. It counts the number of IPs checked with a variable <code>v4</code>. At <code>v4=100</code>, it tries to infect devices with open ports using the CVE_2021_41653 vulnerability. When <code>v4 reaches 500</code>, it switches to randomly scanning public IPs.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_scan.png" alt="smartgaft_scan.png" loading="lazy"></p>
<p>There's a bug in the code that prevents Smargaft from scanning public networks as intended: <code>v4</code> gets reset to 0 after reaching 100, so the code for <code>v4=500</code> never runs, losing the ability for wider network scanning. In Smargaft's newer version, this wasn't fixed; the feature was simply removed.</p>
<p>Regarding the payload constructed for CVE_2021_45653 by Smargaft:</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_payload.png" alt="smartgaft_payload.png" loading="lazy"></p>
<p>When crafting the SYN packet, Smargaft uses a source port of 55555. The actual sniffing traffic clearly shows a pattern of <strong>1 IP: 22 Port</strong>, which aligns with the analysis mentioned above.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_syn.png" alt="smartgaft_syn.png" loading="lazy"></p>
<h2 id="common-tasks">Common Tasks</h2>
<h3 id="0x00-initialization">0x00: Initialization</h3>
<p>Smargaft initializes tasks using a specific code snippet and inserts them into a task chain.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_pattern.png" alt="smartgaft_pattern.png" loading="lazy"></p>
<p>Through analysis, the structure of a Task is identified, containing information such as <strong>task method, last task start time, task interval, task type, and next task</strong>.</p>
<pre><code>struct Task
{
  _QWORD *task_proc;
  _QWORD last_time;
  _DWORD interval_time;
  _DWORD task_type;
  Task *task_next;
};
</code></pre>
<p>After redefining relevant variables in IDA as Task* type, the clarity of the task structure is significantly improved.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_getc2.png" alt="smartgaft_getc2.png" loading="lazy"></p>
<p>Smargaft supports five different tasks, each with its detailed attributes.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Task</th>
<th>Interval(second)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>GetC2</td>
<td>3000</td>
</tr>
<tr>
<td>2</td>
<td>DDoS</td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td>Ip-Forward</td>
<td>360000</td>
</tr>
<tr>
<td>4</td>
<td>Persistence</td>
<td>360000</td>
</tr>
<tr>
<td>5</td>
<td>Killer</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>After all tasks are initialized, they are cycled through in an infinite loop, ensuring each task is executed according to its scheduled interval and type.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_poll.png" alt="smartgaft_poll.png" loading="lazy"></p>
<h3 id="0x01-get-c2">0x01: Get C2</h3>
<p>This task runs every 3000 seconds and begins by constructing a JSON object using the following code snippet.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_json.png" alt="smartgaft_json.png" loading="lazy"></p>
<p>The generated JSON appears as follows:</p>
<pre><code>{
jsonrpc: "2.0",
method: "eth_call",
id: 1,
params: [
{
to: "0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b",
data: "0xd7ec3ad7"
},
"latest"
]
}
</code></pre>
<p>This JSON object is for an RPC (Remote Procedure Call) request to the Binance Smart Chain, with each field meaning:</p>
<ol>
<li>
<p><code>jsonrpc</code>: The JSON RPC protocol version, here "2.0". JSON RPC is a lightweight protocol for remote procedure calls, allowing requests with specific commands to Ethereum nodes.</p>
</li>
<li>
<p><code>method</code>: The method being called, here "eth_call". The <code>eth_call</code> method executes a function call of a smart contract without causing any state change on the blockchain.</p>
</li>
<li>
<p><code>id</code>: A unique identifier for the request, here 1. This ID distinguishes between different requests and responses, usually a number or string.</p>
</li>
<li>
<p><code>params</code>: An array containing the parameters needed for the method.</p>
<ul>
<li>The first parameter is an object with two fields:<br>
a. <code>to</code>: The address of the smart contract being called, here "0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b".<br>
b. <code>data</code>: Encoded data for the contract function call, here "0xd7ec3ad7", usually a hash of a specific function signature.</li>
<li>The second parameter specifies the block state, here "latest" is used to execute the call with the state of the latest block.</li>
</ul>
</li>
</ol>
<blockquote>
<p>XLab notes:</p>
<blockquote>
<p>"latest" always retrieves the most current state in the block, offering a convenient way for automatic C2 updates. Imagine a scenario where all C2s in the IOC database are blocked. The author only needs to update the C2 via the contract, and the Bot, without any updates and leveraging the "latest" feature, can resend the RPC request to access the new C2.</p>
</blockquote>
</blockquote>
<p>After generating the JSON, Smargaft randomly selects one from 14 hardcoded RPC nodes to send the request and parses the 'result' value from the returned JSON.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_getresult.png" alt="smartgaft_getresult.png" loading="lazy"></p>
<p>The equivalent script is shown below:</p>
<pre><code>curl -X POST URL -d '{ "jsonrpc": "2.0", "method": "eth_call", "id": 1, "params": [ { "to": "0xdf2208d4902aa1ec9a0957132ca86a4e1d40455b", "data": "0xd7ec3ad7" }, "latest" ] }' | jq.result
</code></pre>
<p>Using <code>https://rpc.ankr.com/bsc</code> as an example, replace the URL in the script mentioned above with <code>https://rpc.ankr.com/bsc</code>. Running it afterward will directly get the following <code>result</code> value.</p>
<p><code>0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002b34352e39352e3134362e39333b39342e3130332e3138382e3136373b3138352e3133322e3132352e313933000000000000000000000000000000000000000000</code></p>
<p>To read the C2 from the <code>result</code>, start at the 122nd byte and continue until hitting a non-zero digit. Then, decode the following data as a hex string, where the first byte indicates the C2 list's length and the rest is the C2 list, separated by <code>;</code>.</p>
<pre><code>00000000  2b 34 35 2e 39 35 2e 31 34 36 2e 39 33 3b 39 34  |+45.95.146.93;94|
00000010  2e 31 30 33 2e 31 38 38 2e 31 36 37 3b 31 38 35  |.103.188.167;185|
00000020  2e 31 33 32 2e 31 32 35 2e 31 39 33              |.132.125.193|
</code></pre>
<p>The Bot connects to the C2 on port 81, sends a <code>ready\x00</code> packet, and checks if the response is 0 or more bytes to confirm C2 is live. The first live C2 found is used for DDoS tasks.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_verify.png" alt="smartgaft_verify.png" loading="lazy"></p>
<h3 id="0x02-ddos-task">0x02: DDoS Task</h3>
<p>This task runs every 8 seconds. It establishes a connection with the C2 on port 81, sends a 5-byte "ready" packet, and receives commands from the C2. It supports executing system commands, conducting DDoS attacks, and providing socks5 proxy functionality.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_connect.png" alt="smartgaft_connect.png" loading="lazy"></p>
<p>By cross-referencing the variable <code>v205</code>, it's evident that the communication protocol is text-based, and a total of 15 different commands are supported.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_cmds.png" alt="smartgaft_cmds.png" loading="lazy"></p>
<p>Below are the commands and their respective functionalities：</p>
<table>
<thead>
<tr>
<th>Cmd</th>
<th>Funtion</th>
</tr>
</thead>
<tbody>
<tr>
<td>ack</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>syn</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>gre</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>tcph</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>udpg</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>udph</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>httph</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>stomp</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>spoof_vse</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>spoof_syn</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>socket</td>
<td>DDoS Vector</td>
</tr>
<tr>
<td>socks</td>
<td>socks5 proxy</td>
</tr>
<tr>
<td>kill</td>
<td>kill self</td>
</tr>
<tr>
<td>exec</td>
<td>exec system cmds</td>
</tr>
<tr>
<td>update</td>
<td>bot update</td>
</tr>
</tbody>
</table>
<p>Using a real captured attack as an example:<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_packet.png" alt="smartgaft_packet.png" loading="lazy"></p>
<p>When the Bot receives the command, it launches a DDoS attack on port 17481 of the IP 43.249.192.173 using the UDPH attack vector.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_traffic.png" alt="smartgaft_traffic.png" loading="lazy"></p>
<h3 id="0x03-ip-forward-task">0x03: IP-Forward Task</h3>
<p>This task runs every 100 hours, first enabling packet forwarding by setting <code>/proc/sys/net/ipv4/ip_forward</code> to 1.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_forward.png" alt="smartgaft_forward.png" loading="lazy"></p>
<p>Then, the Bot sends a randomly generated 256-byte UDP packet to C2's port 8083. If running with root permissions, it also constructs a UDP packet with a source address of 1.1.1.1 and sends it to C2's port 8083.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_udp.png" alt="smartgaft_udp.png" loading="lazy"></p>
<h3 id="0x04-persistence-task">0x04: Persistence Task</h3>
<p>This task runs every 100 hours with two main objectives:</p>
<ol>
<li>
<p>It uses the <code>Interfere_proc</code> function to mount one of <code>tmpfs</code>, <code>devpts</code>, <code>minix</code>, or <code>sysfs</code> onto the <code>/proc/pid</code> directory associated with the bot, preventing tools that rely on the /proc filesystem from obtaining accurate information about the bot process.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_proc.png" alt="smartgaft_proc.png" loading="lazy"><br>
Taking "netstat" as an example, the effect is that it can no longer correctly display information like the process's PID and Program Name.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_pid.png" alt="smartgaft_pid.png" loading="lazy"></p>
</li>
<li>
<p>The <code>Infect_sh</code> function implements a virus-like infection for files with the .sh suffix in a specified directory by appending \n\n\n bot absolute path &amp;\n to their end. This ensures the bot gets executed every time such a script runs. The function's first parameter is the directory, and the second is the maximum number of layers for infection.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_infect.png" alt="smartgaft_scan.png" loading="lazy"><br>
To demonstrate the infection effect, we created a "goat" directory under the /home directory.</p>
<pre><code>./goat/
├── 1.sh
└── 3layer
    ├── 2.sh
    └── 4layer
        └── 3.sh

</code></pre>
<p>In practice, the infection of the "goat" and "/etc" directories is as follows: many <code>.sh</code> files have had the execution statement <code>/home/kali/sample/main.x86.unp &amp;</code> added to their ends. The file <code>/home/goat/3layer/4layer/3.sh</code> was not infected because its directory depth exceeded 3.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_home.png" alt="smartgaft_home.png" loading="lazy"></p>
</li>
</ol>
<h3 id="0x05-killer-task">0x05: Killer Task</h3>
<p>This task runs every second, checking each process's command line via <code>/proc/[PID]/cmdline</code>. If it contains "-sh" or "tftp", the process is immediately terminated.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_killer.png" alt="smartgaft_killer.png" loading="lazy"></p>
<p>The actual effect is as follows, you can see the tftp process being terminated.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/01/smartgaft_tftp.png" alt="smartgaft_tftp.png" loading="lazy"></p>
<h1 id="summary">Summary</h1>
<p>Smargaft's use of EtherHiding for "C2 hosting" showcases significant advantages by harnessing blockchain's decentralization, transparency, and immutability. This method, immune to interventions at the blockchain level, represents an advanced "bulletproof" hosting technique. With smart contracts being relatively easy to learn, it's expected that more malware creators will turn to this technology. The new era of threats is upon us—Stay Vigilant, Stay Safe.</p>
<h1 id="contact-us">Contact Us</h1>
<p>If you're intrigued by our research, reach out to us on <a href="https://twitter.com/Xlab_qax?ref=blog.xlab.qianxin.com">Twitter</a>. Also, we have a favor to ask: our DDoS data suggests coordinated attacks by various botnets, yet we're not fully versed in the DDoS underground. If you have insights, we'd love to hear from you.</p>
<h1 id="ioc">IOC</h1>
<h2 id="sample-md5">sample md5</h2>
<pre><code>version:v0

ab794804d7ff5b60327c5051281af80d
e1967081d11debe9757b96a5bb350fa6
b9a9ce54a3b695adcafa9afa556ffac9
38f441481e8765112fb83e556fb33076
7b8c1aa92861e24c81376c6ccb620da5
78bfeff2b2303b9fa51b087c4d762687
7f741495f14c828c20db4de6251673fd

version: v1

8171c8238bd465772b70b943305279cd
323658f0151ec7b7009523e2c368963b
ae64e92bb05ab7ece41f45c79d8e3e6e
88996cbc2658d1294e55863a9fefafaf
dc9cdae709ce4fdf1ceb8b70dd108d36



</code></pre>
<h2 id="c2port81">C2(port:81)</h2>
<pre><code>45.95.146.93	The Netherlands|Noord-Holland|Amsterdam	AS49870|Alsycon B.V.
94.103.188.167	Moldova|None|None	AS200019|ALEXHOST SRL
185.132.125.193	China|Hongkong|Hongkong	AS9009|M247 Europe SRL
</code></pre>
<h2 id="downloaderport82">Downloader(port:82)</h2>
<pre><code>45.95.146.93	The Netherlands|Noord-Holland|Amsterdam	AS49870|Alsycon B.V.
94.103.188.167	Moldova|None|None	AS200019|ALEXHOST SRL
185.132.125.193	China|Hongkong|Hongkong	AS9009|M247 Europe SRL</code></pre>

    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/smargaft_abusing_binance-smart-contracts_en/";  
                this.page.identifier = "ghost-65bc7149db9b6e00016305ad"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
