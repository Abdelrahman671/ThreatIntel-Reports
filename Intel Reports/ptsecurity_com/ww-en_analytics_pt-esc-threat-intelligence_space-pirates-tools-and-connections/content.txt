<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>Space Pirates: analyzing the tools and connections of a new hacker group</title><meta name="description" content="
	At the end of 2019, Positive Technologies Expert Security Center (PT ESC) found a phishing email aimed at a Russian aerospace enterprise. It contained a link to previously unknown malware. Our experts discovered the same malware in 2020 when investigating an information security incident at a Russian government agency. During the investigation, several new malware families using a common network infrastructure were also discovered, some of which had not previously been mentioned in open sources.


	In the summer of 2021, PT ESC revealed traces of compromise of another Russian aerospace enterprise. The organization was duly informed. As a result of the investigation, we found connections to the same network infrastructure on its computers. Further research made it possible to identify at least two more organizations in Russia, both partially state-owned, that were attacked using the same malware and network infrastructure.


	We could not unambiguously link the detected malicious activity to any known hacker group, so we gave the attackers a new name—Space Pirates. The reason for the name was the P1Rat string used in the PDB paths, and the targeting of the aerospace industry. This report describes the group&#x27;s detected activity, the features of the malware it uses, as well as its connection with other APT groups.
"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="icon" href="/images/favicons/favicon.ico" sizes="any"/><link rel="icon" href="/images/favicons/icon.svg" type="image/svg+xml"/><link rel="apple-touch-icon" href="/images/favicons/apple-touch-icon.png"/><meta name="next-head-count" content="7"/><script type="text/javascript">
                   
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
  
                   ym(93900442, "init", {
                       clickmap: true,
                       trackLinks: true,
                       accurateTrackBounce: true,
                       webvisor: true
                   });
             </script><noscript><div><img src="https://mc.yandex.ru/watch/93900442" style="position:absolute;left:-9999px" alt=""/></div></noscript><script id="mindbox-init">
    mindbox = window.mindbox || function() { mindbox.queue.push(arguments); };
    mindbox.queue = mindbox.queue || [];

    mindbox('create', {
        endpointId: 'ptsec.global',
    });
</script><script async="" src="https://api.mindbox.ru/scripts/v1/tracker.js"></script><script async="" src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" data-domain-script="0191d674-840f-7931-a533-9567b38dbd10" data-document-language="true"></script><script type="text/javascript">function OptanonWrapper() { }</script><link rel="preload" href="/_next/static/css/80c4a58119cf7c0b.css" as="style"/><link rel="stylesheet" href="/_next/static/css/80c4a58119cf7c0b.css" data-n-g=""/><link rel="preload" href="/_next/static/css/5cec7a8abaf4901f.css" as="style"/><link rel="stylesheet" href="/_next/static/css/5cec7a8abaf4901f.css" data-n-p=""/><link rel="preload" href="/_next/static/css/aabb9bc1061deee8.css" as="style"/><link rel="stylesheet" href="/_next/static/css/aabb9bc1061deee8.css" data-n-p=""/><link rel="preload" href="/_next/static/css/37c177beab301399.css" as="style"/><link rel="stylesheet" href="/_next/static/css/37c177beab301399.css" data-n-p=""/><link rel="preload" href="/_next/static/css/bb426d7648eb51ac.css" as="style"/><link rel="stylesheet" href="/_next/static/css/bb426d7648eb51ac.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="/_next/static/chunks/webpack-d6441674d4b92143.js" defer=""></script><script src="/_next/static/chunks/framework-ce84985cd166733a.js" defer=""></script><script src="/_next/static/chunks/main-2aa161cc193cdf0e.js" defer=""></script><script src="/_next/static/chunks/pages/_app-9c347bd1de5ebbd3.js" defer=""></script><script src="/_next/static/chunks/4b358913-e177b648ea0062d1.js" defer=""></script><script src="/_next/static/chunks/f10e284a-c46ff7024e963ef1.js" defer=""></script><script src="/_next/static/chunks/dff27125-edb64a536e668286.js" defer=""></script><script src="/_next/static/chunks/4322cd96-db9c9cbc97931387.js" defer=""></script><script src="/_next/static/chunks/5300-5d5240edfe5088d0.js" defer=""></script><script src="/_next/static/chunks/4028-70e0d285b32e5897.js" defer=""></script><script src="/_next/static/chunks/2580-447bcccef7567d77.js" defer=""></script><script src="/_next/static/chunks/8675-7126786e5e2e65c5.js" defer=""></script><script src="/_next/static/chunks/585-0d6245c6d60804bf.js" defer=""></script><script src="/_next/static/chunks/8973-5b086d43f68f9a0f.js" defer=""></script><script src="/_next/static/chunks/9381-dd4de4005cd3d545.js" defer=""></script><script src="/_next/static/chunks/254-dde07e0bcb3d5f5a.js" defer=""></script><script src="/_next/static/chunks/3330-13425461e8bb6bd9.js" defer=""></script><script src="/_next/static/chunks/4883-6aebae388f310771.js" defer=""></script><script src="/_next/static/chunks/9852-d3e7d7c2bf949d3a.js" defer=""></script><script src="/_next/static/chunks/9943-72218bdced5389b6.js" defer=""></script><script src="/_next/static/chunks/5363-fea1d2f79e1d9971.js" defer=""></script><script src="/_next/static/chunks/pages/analytics/pt-esc-threat-intelligence/%5Bslug%5D-debebc1698dc2505.js" defer=""></script><script src="/_next/static/Ur_qlu7npVaUkYGtYD4wc/_buildManifest.js" defer=""></script><script src="/_next/static/Ur_qlu7npVaUkYGtYD4wc/_ssgManifest.js" defer=""></script></head><body><div id="__next"><div class=""><header class="Header_header__Hd6K0" id="nav-bar"></header><main id="main" class="PageLayout_main__LUbC0"><div class="ArticleHeader_banner__enm6f"><section class="PageSection_section__GxaaG ArticleHeader_section__sve5w ArticleHeader_withBottomBar__d_wKA"><div class="ArticleHeader_header___PnMn"><div class="ArticleHeader_headerInner__2bYRI"><h2 class="Heading_base__MUnbH Heading_level_2__qXMBH"><span>Space Pirates: analyzing the tools and connections of a new hacker group</span></h2></div></div><div class="ArticleHeader_bottomBar__EgyS1"><div class="ArticleHeader_leftSide__gAaId"><div class="ArticleBageLink_container__n25zS"><div class="ArticleBageLink_icon__Z9k9v"><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.312 12.1358L8 14.7438L3.688 12.1358C3.1848 11.8491 2.76468 11.4366 2.46878 10.9388C2.17288 10.441 2.01135 9.8748 2 9.29577L2 2.50377C2 2.50377 2.04 2.39977 2.16 2.35177L7.808 1.21577C7.93487 1.19175 8.06513 1.19175 8.192 1.21577L13.84 2.35177C13.96 2.35177 14 2.46377 14 2.50377L14 9.29577C13.9887 9.8748 13.8271 10.441 13.5312 10.9388C13.2353 11.4366 12.8152 11.8491 12.312 12.1358Z" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path><path d="M6.40039 7.1999L8.00039 8.7999L10.4004 6.3999" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></svg></div><a href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"><span>PT EXPERT SECURITY CENTER</span></div></a></div><div class="ArticleDate_dark__bQPEn Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"></div></div><div class="ArticleHeader_rightSide__zUGU_"><button type="button" class="ButtonShareLink_extraButton__6pf3i ArticleHeader_extraButton__zTZOf Button_button__F7Ulc Button_button_size_s___Bpb6 Button_button_theme_dark__iuu3A"><span>Share<img alt="share" loading="lazy" width="16" height="16" decoding="async" data-nimg="1" style="color:transparent" src="/_next/static/media/sharing.472b5ae7.svg"/></span></button></div></div></section></div><section class="PageSection_section__GxaaG Card_section__QzdVO"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j"><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_leftColumn___AQb_"><div class="SidebarWidgets_root__EIInZ"><div class="SidebarWidget_root__IWq9u" data-theme="light"><span class="SidebarWidget_badge__gm6Re" aria-hidden="true"></span><a href="/analytics"><h4 class="SidebarWidget_link__7lVne Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_light__level_4__u4aOM"><span>Analytics articles</span></h4></a><ul class="SidebarWidget_articles__wrBxg"><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/cyberthreats-to-industrial-iot"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Cyberthreats to industrial IoT in the manufacturing sector</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Cyberthreats evolve while forecasts signal more sophisticated risks ahead</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/trending-vulnerability-digest-november-2024"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Trending vulnerability digest November 2024</span></div></a></li></ul></div><div class="AdBanner_banner__Phuq9"><img alt="" loading="lazy" decoding="async" data-nimg="fill" class="AdBanner_image__8dCJL" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;object-fit:cover;color:transparent" src="https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png"/><div class="AdBanner_detail__tt_BJ"><h4 class="Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_dark__level_4__5RqHy"><span>What are the security threats on your network?</span></h4><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_dark__type_pM__3GUPK"><span>Check your traffic-for free</span></div><a class="AdBanner_button__9I57f Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_dark__iuu3A" href="/analytics/pt-esc-threat-intelligence/space-pirates-tools-and-connections#contacts"><span><span>Request pilot</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></a></div></div></div></div><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"><div class="HtmlContent_content__ajDaE esiArticle_bitrixContent__PCSBe"><article>
<ol>
<li>
<a href="#id1">Introduction</a>
</li>
<li>
<a href="#id2">General information</a>
</li>
<li>
<a href="#id3">Analysis of malware and tools</a>
<ol>
<li>
<a href="#id3-1">MyKLoadClient</a>
<ol>
<li>
<a href="#id3-1-1">Scheme 1</a>
</li>
<li>
<a href="#id3-1-2">Scheme 2</a>
</li>
<li>
<a href="#id3-1-3">Test sample</a>
</li>
<li>
<a href="#id3-1-4">Payload</a>
</li>
</ol>
</li>
<li>
<a href="#id3-2">Zupdax</a>
<ol>
<li>
<a href="#id3-2-1">Payload</a>
</li>
<li>
<a href="#id3-2-2">Connection with Redsip</a>
</li>
<li>
<a href="#id3-2-3">Connection with Winnti and FF-RAT</a>
</li>
<li>
<a href="#id3-2-4">Connections with Bronze Union and TA428</a>
</li>
</ol>
</li>
<li>
<a href="#id3-3">Downloaders</a>
<ol>
<li>
<a href="#id3-3-1">Downloader.Climax.A</a>
</li>
<li>
<a href="#id3-3-2">Downloader.Climax.B</a>
</li>
</ol>
</li>
<li>
<a href="#id3-4">RtlShare</a>
<ol>
<li>
<a href="#id3-4-1">Dropper rtlstat.dll</a>
</li>
<li>
<a href="#id3-4-2">Injector rtlmake.dll</a>
</li>
<li>
<a href="#id3-4-3">Payload rtlmain.dll (rtlmainx64.dll)</a>
</li>
<li>
<a href="#id3-4-4">Use of RtlShare</a>
</li>
</ol>
</li>
<li>
<a href="#id3-5">PlugX</a>
<ol>
<li>
<a href="#id3-5-1">Demo dropper</a>
</li>
</ol>
</li>
<li>
<a href="#id3-6">BH_A006</a>
<ol>
<li>
<a href="#id3-6-1">Stage 0. Loading DLL from the overlay</a>
</li>
<li>
<a href="#id3-6-2">Stage 1. DLL dropper</a>
</li>
<li>
<a href="#id3-6-3">Stage 2. .dat loader (SbieDll.dll / SbieMsg.dll)</a>
</li>
<li>
<a href="#id3-6-4">Stage 3. Shellcode .dat and DLL</a>
</li>
<li>
<a href="#id3-6-5">Stage 4. MemLoadLibrary</a>
</li>
<li>
<a href="#id3-6-6">Stage 5. Payload</a>
</li>
<li>
<a href="#id3-6-7">Connection with 9002 RAT</a>
</li>
</ol>
</li>
<li>
<a href="#id3-7">Deed RAT</a>
</li>
</ol>
</li>
<li>
<a href="#id4">Conclusion</a>
</li>
<li>
<a href="#id5">Appendices</a>
<ol>
<li>
<a href="#id5-1">MITRE</a>
</li>
<li>
<a href="#id5-2">IOCs</a>
<ol>
<li>
<a href="#id5-2-1">File indicators</a>
</li>
<li>
<a href="#id5-2-2">Network indicators</a>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="id1"> Introduction</h2>
<p>At the end of 2019, <a href="https://www.ptsecurity.com/ru-ru/services/esc/" target="_blank">Positive Technologies Expert Security Center</a> (PT ESC) found a phishing email aimed at a Russian aerospace enterprise. It contained a link to previously unknown malware. Our experts discovered the same malware in 2020 when investigating an information security incident at a Russian government agency. During the investigation, several new malware families using a common network infrastructure were also discovered, some of which had not previously been mentioned in open sources.</p>
<p>In the summer of 2021, <a href="https://www.ptsecurity.com/ru-ru/services/esc/" target="_blank">PT ESC</a> revealed traces of compromise of another Russian aerospace enterprise. The organization was duly informed. As a result of the investigation, we found connections to the same network infrastructure on its computers. Further research made it possible to identify at least two more organizations in Russia, both partially state-owned, that were attacked using the same malware and network infrastructure.</p>
<p>We could not unambiguously link the detected malicious activity to any known hacker group, so we gave the attackers a new name—Space Pirates. The reason for the name was the P1Rat string used in the PDB paths, and the targeting of the aerospace industry. This report describes the group&#x27;s detected activity, the features of the malware it uses, as well as its connection with other APT groups.</p>
<h2 id="id2">General information</h2>
<p>We assume that Space Pirates has Asian roots, as indicated by the active use of the Chinese language in resources, SFX archives, and paths to PDB files. In addition, the group&#x27;s toolkit includes the Royal Road RTF (or 8.t) builder (common among hackers of Asian origin) and the PcShare backdoor, and almost all intersections with previously known activity are associated with APT groups in the Asian region.</p>
<p>The group began its activity no later than 2017. The main targets of the criminals are espionage and theft of confidential information. Among the victims identified during the threat study are government agencies and IT departments, as well as aerospace and power enterprises in Russia, Georgia, and Mongolia. At least five organizations were attacked in Russia, one in Georgia, and the exact number of victims in Mongolia is unknown.</p>
<p>Some APT group attacks using malware were also targeted at Chinese financial companies, which suggests a monetary motivation. All potential victims were notified by the respective national CERTs.</p>
<p>At least two attacks on Russian organizations can be considered successful. In the first case, the attackers gained access to at least 20 servers on the corporate network, where they remained for about 10 months. During this time, more than 1,500 internal documents were stolen, as well as information about all employee accounts in one of the network domains. In the second case, the attackers managed to gain persistence in the company&#x27;s network and remain there for more than a year, obtain information about the computers on the network, and install malware on at least 12 corporate nodes in three different regions.</p>
<p>The Space Pirates toolkit includes unique downloaders and several backdoors which we have not previously encountered and which are presumably specific to the group: MyKLoadClient, BH_A006, and Deed RAT. The criminals also have access to the Zupdax backdoor: its modern variants use a similar MyKLoadClient execution scheme; however, the code of the backdoor itself dates back to 2010 and cannot be uniquely attributed to the group.</p>
<p>In addition, the attackers use well-known malware, such as PlugX, ShadowPad, Poison Ivy, a modified version of PcShare, and the public shell <a href="https://github.com/bitsadmin/ReVBShell" target="_blank">ReVBShell</a>. The <a href="https://github.com/vzex/dog-tunnel" target="_blank">dog-tunnel</a> utility is used to tunnel traffic.</p>
<p>The main network infrastructure of the group uses a small number of IP addresses indicated by DDNS domains. Interestingly, the attackers use not only third-level domains, but also fourth- and higher-level ones, for example, w.asd3.as.amazon-corp.wikaba.com.</p>
<p>In the process of investigating Space Pirates, we found a large number of intersections with previously identified activity, which researchers associate with the following groups: Winnti (APT41), Bronze Union (APT27), TA428, RedFoxtrot, Mustang Panda, and Night Dragon. The reason for this is probably the exchange of tools between groups, which is common practice for APT groups in the Asian region.</p>
<p>The connection between the Space Pirates and TA428 groups should be specially noted. As part of another investigation, we observed the activities of both groups on infected computers, which, however, had no intersections in the network infrastructure. During Operation StealthyTrident, <a href="https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/" target="_blank">described by ESET</a>, the attackers used Tmanger, attributed to TA428, and Zupdax, associated with Space Pirates. The connection with another TA428 malware, in particular Albaniiutas (RemShell), and Zupdax can also be traced in the network infrastructure adjacent to the one mentioned in the ESET report. All this suggests that Space Pirates and TA428 can combine their efforts and share tools, network resources, and access to infected systems.</p>
<p>The key connections between the affected organizations, malware families, and fragments of the network infrastructure, as well as public information about the attackers, can be seen in Figure 1. Later in the report, we will give more details about them.</p>
<figure>
<img alt="Figure 1. Key connections" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image1.png"/>
<figcaption>Figure 1. Key connections</figcaption>
</figure>

<h2 id="id3">Analysis of malware and tools</h2>
<h3 id="id3-1">MyKLoadClient</h3>
<p>This malware was used in attacks on Russian organizations, including government agencies and aerospace enterprises, often being distributed through targeted phishing. The email analysis shows that Chinese companies providing financial services also became victims.</p>
<p>Among the malware samples with MyKLoadClient that we found, two typical implementation schemes can be distinguished. The first (hereinafter scheme 1) is based on the use of SFX archives as droppers, implements the DLL Side-Loading technique, and uses an auxiliary launcher library AntiVirusLoader.dll. The second (hereinafter scheme 2) includes only a custom-written dropper which transfers control to the payload directly. In the second case, gaining persistence in the system is not a feature of the code.</p>
<p>Note that, according to the known data, there is a clear relationship between the attackers&#x27; goals and the choice of implementation scheme: samples using scheme 1 were targeted at Russian organizations, whereas scheme 2 was used in attacks on Chinese companies. If we rely on the dates of modification and compilation of files (which, however, could be spoofed), the same division can be traced back in time: scheme 1 was presumably used in 2018–2019, and scheme 2 in 2020. It is possible that the attackers updated the implementation chain of the previous malware to reduce the likelihood of its detection in new attacks.</p>
<h4 id="id3-1-1">Scheme 1</h4>
<p>A typical example of a sample with the first implementation scheme is a file named <em>Петербургский международный экономический форум (ПМЭФ)____2019.exe (Petersburg International Economic Forum (SPIEF)____2019.exe)</em> with SHA-256 d3a50abae9ab782b293d7e06c7cd518bbcec16df867f2bdcc106dec1e75dc80b. The file is an SFX archive that extracts the decoy document 0417.doc and another SFX archive named apple.exe. The files in the archive were modified in April 2019. The document contains a text with a true description of SPIEF.</p>
<figure>
<img alt="Figure 2. Contents of the decoy document 0417.doc" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image2.png"/>
<figcaption>Figure 2. Contents of the decoy document 0417.doc</figcaption>
</figure>

<p>The second SFX archive extracts three PE files from itself: the legitimate siteadv.exe, the launcher siteadv.dll, and the library with payload cc.tmp. Note that in the samples studied, the first implementation scheme does not always use a decoy. However, in all cases, a similar SFX archive is used, which contains files with the same names and purpose.</p>
<figure>
<img alt="Figure 3. Contents of the apple.exe archive" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image3.png"/>
<figcaption>Figure 3. Contents of the apple.exe archive</figcaption>
</figure>

<p>The executable EXE file is signed by McAfee, Inc. and is a component of the McAfee SiteAdvisor installer. At startup, it loads the siteadv.dll library, which is responsible for installing and launching the payload. The launcher resources feature a configuration encrypted with RC4 with key &quot;TDILocker&quot; and containing the necessary paths, registry key names, and flags.</p>
<figure>
<img alt="Figure 4. Siteadv.dll code fragment" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image4.png"/>
<figcaption>Figure 4. Siteadv.dll code fragment</figcaption>
</figure>

<p>The launcher provides several possible commands that are passed by way of command-line arguments and are responsible for one of the implementation stages:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>stat</td>
<td>The command to start the installation. Restarts the process in which the library is loaded (siteadv.exe) with the install_del command. Additionally passes the path to the parent process.</td>
</tr>
<tr>
<td>install_del</td>
<td>Gains persistence on the infected computer (the registry key is specified in the configuration). In this case, the path to the siteadv.exe file is used with the run or mrun argument. Deletes the file specified by the third argument (the path to the parent process). Launches the payload in the same way as the run command.</td>
</tr>
<tr>
<td>run</td>
<td>Loads a DLL with payload via LoadLibrary and executes the function exported from it (the name is specified in the configuration).</td>
</tr>
<tr>
<td>mrun</td>
<td>Not implemented.</td>
</tr>
<tr>
<td>ins</td>
<td>Not implemented.</td>
</tr>
</tbody>
</table></div>
<p>In addition to the exported function main, which is called by the legitimate siteadv.exe, in siteadv.dll there is an unused buc_uninstallinterface export that is responsible for bypassing the UAC <a href="https://3gstudent.github.io/backup-3gstudent.github.io/通过COM组件IARPUninstallStringLauncher绕过UAC/" target="_blank">using the IARPUninstallStringLauncher component</a>.</p>
<p>The launcher library has the export name AntiVirusLoader.dll. In some of its instances, you can find the PDB path:<br/>
D:\Leee\515远程文件\P1Rat_2017_07_28A\src\MyLoader_bypassKIS\snake\res\SiteAdv.pdb.</p>
<p>The cc.tmp payload is a backdoor implemented as a dynamic library with the internal name client.dll. It exports the MyKLoad function, which is the actual entry point. We will consider the functionality of the backdoor below.</p>
<h4 id="id3-1-2">Scheme 2</h4>
<p>The executable file responsible for extracting the decoy and payload acts as a dropper in the second scheme. The binary data is located in the body of the dropper and is XOR-encrypted with a single-byte key. In addition to the standard launch of the extracted payload via the CreateProcess call, the dropper also performs reflective loading and execution of the EXE file directly in the current process.</p>
<figure>
<img alt="Figure 5. Fragment of the dropper code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image5.png"/>
<figcaption>Figure 5. Fragment of the dropper code</figcaption>
</figure>

<p>In some cases, the dropper functions are additionally obfuscated using the <a href="https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening" target="_blank">control flow flattening</a> technique.</p>
<figure>
<img alt="Figure 6. Obfuscated version of the dropper" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image6.png"/>
<figcaption>Figure 6. Obfuscated version of the dropper</figcaption>
</figure>

<p>As a decoy, the investigated samples use a PDF document containing a message about a &quot;corrupt file&quot; in the Chinese language, or an application stub that displays the message &quot;正在更新浏览器插件，请稍后…&quot; (<em>The browser plugin is updating, please wait ...</em>) and &quot;更新完毕，请重启浏览器！&quot; (<em>The update is completed, restart the browser!</em>).</p>
<figure>
<img alt="Figure 7. PDF decoy with the text &quot;Corrupt or incompatible file&quot;" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image7.png"/>
<figcaption>Figure 7. PDF decoy with the text &quot;Corrupt or incompatible file&quot;</figcaption>
</figure>

<p>The payload in this case is an executable file with the internal name client.exe. Some samples also have the PDB path C:\Users\classone\Desktop\src\client\exe_debug\client.pdb.</p>
<h4 id="id3-1-3">Test sample</h4>
<p>We also managed to find a test version of the malware created no later than in 2018: b1d6ba4d995061a0011cb03cd821aaa79f0a45ba2647885171d473ca1a38c098. This application is a dropper.</p>
<p>Interestingly, it seems to have been created based on the Snake game. This is indicated by several details:</p>
<ul>
<li>When launched, the application creates a window using the string &quot;Snake&quot; as its name.</li>
<li>There is code presumably responsible for the game logic—in particular, for generating random coordinates of pieces of food on the 50×50 field and comparing them with the position of the snake.</li>
<li>The application handles presses of the spacebar and cursor keys.</li>
<li>The application features a menu with items in Chinese: Start, Pause, Restart, and Quit.</li>
</ul>
<figure>
<img alt="Figure 8. Application menu" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image8.png"/>
<figcaption>Figure 8. Application menu</figcaption>
</figure>

<p>In addition, among the dropper resources there is also an &quot;About the program&quot; window (in Chinese), the content of which indicates that this is the second version of the Snake game, which was created in 2016. The email address of the probable author is also given: mexbochen@foxmail.com.</p>
<figure>
<img alt="Figure 9. &quot;About the program&quot; window" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image9.png"/>
<figcaption>Figure 9. &quot;About the program&quot; window</figcaption>
</figure>

<p>A Google search for the address throws up the profile of the email owner—a programmer from China who specializes in image processing.</p>
<figure>
<img alt="Figure 10. Business card website with the contact address mexbochen@foxmail.com" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image10.png"/>
<figcaption>Figure 10. Business card website with the contact address mexbochen@foxmail.com</figcaption>
</figure>

<p>Despite the connection between the application and the owner of the email, it is impossible to say unequivocally that he is the author of the malware. It is possible that Snake was once an open-source project, and the attackers used it as a basis for implementing the dropper.</p>
<p>The files extracted by the dropper are contained in its resources in cleartext. Also in the resources is an encrypted configuration that contains the file names—exactly the same configuration is used in the launcher. When files are written to disk, their contents are XOR-encrypted with the 0x80 key, and then the files are reopened and decrypted. The dropper contains the same set of components as SFX archives (<a href="#id3-1-1">scheme 1</a>): a legitimate McAfee SiteAdvisor component, a DLL launcher, and a library with a payload named Client.obj.</p>
<p>After extraction, the dropper generates a command line to run the launcher with the install command (for persistence in the registry and launching the payload), but does not make further use of it. This is probably an error: there is the debug message &quot;CreateProcess success!&quot; in the code, but the CreateProcess function is not called.</p>
<p>The launcher of the test sample differs in its implementation of the mrun command: a variation of the run command responsible for launching the function exported from the DLL with payload. Unlike run, mrun predecrypts the library using the RC4 algorithm with key &quot;GoogleMailData&quot; and uses reflective loading for its execution.</p>
<p>The payload of Client.obj is similar to cc.tmp (<a href="#id3-1-1">scheme 1</a>) and has only minor differences. In particular, the entry point function exported by the library is called &quot;main&quot;, which, when run, displays a message box with the text &quot;<em>just a demo for test!!!</em>&quot; In addition, the backdoor configuration is not encrypted and contains the test C2 127.0.0.1.</p>
<h4 id="id3-1-4">Payload</h4>
<p>Options for implementing the backdoor in the form of the executable file client.exe and the library client.dll have the same functionality. However, they differ in how they initialize the structure with configuration parameters, which include the address and port of the C2, the backdoor activity flag, as well as the string IDs of the malware sent to the C2.</p>
<p>In the client.dll library, just like in the launcher (scheme 1), there is a configuration encrypted with RC4 key &quot;GoogleMailData&quot; in the payload resources. In the EXE version, the structure is filled with values fixed in the code.</p>
<p>The following table lists the backdoor samples we found and the data specified in their configuration, namely the IDs and the control server. The &quot;?&quot; sign means that the string is a random set of bytes.</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>SHA-256 of the payload</th>
<th>Scheme</th>
<th>ID1</th>
<th>ID2</th>
<th>ID3</th>
<th>C2</th>
</tr>
</thead>
<tbody>
<tr>
<td>5847c8b8f54c60db939b045d385aba0795880d92b00d28447d7d9293693f622b</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>group</td>
<td>127.0.0.1</td>
</tr>
<tr>
<td>56b9648fd3ffd1bf3cb030cb64c1d983fcd1ee047bb6bd97f32edbe692fa8570</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>207.148.121.88</td>
</tr>
<tr>
<td>d0fb0a0379248cdada356da83cd2ee364e0e58f4ed272d3369fe1d6ca8029679</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>207.148.121.88</td>
</tr>
<tr>
<td>7b7a65c314125692524d588553da7f6ab3179ceb639f677ed1cefe3f1d03f36e</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>207.148.121.88</td>
</tr>
<tr>
<td>3ccae178d691fc95f6c52264242a39daf4c44813d835eaa051e7558b191d19ee</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>207.148.121.88</td>
</tr>
<tr>
<td>69863ba336156f4e559364b63a39f16e08ac3a6e3a0fa4ce11486ea16827f772</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>micro.dns04.com</td>
</tr>
<tr>
<td>949cb5d03a7952ce24b15d6fccd44f9ed461513209ad74e6b1efae01879395b1</td>
<td>1</td>
<td>pwd</td>
<td>my vps</td>
<td>?</td>
<td>microft.dynssl.com</td>
</tr>
<tr>
<td>fa3ecd74b9f329a96b5739bba7b1872ef1ab84bb95f89101a69b6b6e780e2063</td>
<td>-</td>
<td>pwd</td>
<td>memo</td>
<td>group</td>
<td>47.108.89.169</td>
</tr>
<tr>
<td>84eb2efa324eba0c2e06c3b84395e9f5e3f28a3c9b86edd1f813807ba39d9acb</td>
<td>2</td>
<td>pwd</td>
<td>memo</td>
<td>group</td>
<td>47.108.89.169</td>
</tr>
<tr>
<td>b822a4ec46aacb3bb4c22fe5d9298210bfa442118ee05a1532c324a5f847a9e6</td>
<td>2</td>
<td>gundan</td>
<td>memo</td>
<td>group</td>
<td>120.78.127.189</td>
</tr>
<tr>
<td>944a3c8293ff068d803f8537b15e6adbad7fa1e789f3dc404ba603a8cb7c22aa</td>
<td>2</td>
<td>gundan</td>
<td>memo</td>
<td>group</td>
<td>121.89.210.144</td>
</tr>
</tbody>
</table></div>
<p>The connection to the control server is established over TCP, and the traffic is not encrypted. The messages have a header of the following structure:</p>
<pre><div class="code">struct PacketHeader{
    _DWORD Version; // 0x20170510
    _DWORD CommandId;
    _DWORD PayloadSize;
    _DWORD LastError;
};</div></pre>
<p>The 0x20170510 constant is always used as the version, probably denoting some date.</p>
<p>The malware has several classes/modules responsible for the corresponding functionality:</p>
<ul>
<li>ShellManager: remote command line</li>
<li>DiskManager: working with disks installed on the infected computer</li>
<li>FileTransferManager: file transfer</li>
<li>RS5Manager: using the infected computer as a proxy server</li>
</ul>
<p>In the ID of each command, there is a module identifier, which is obtained by applying the 0xFF000 mask. Here is a full list of supported commands:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>Module ID</th>
<th>Full ID</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>Collect information about the infected system</td>
</tr>
<tr>
<td>0</td>
<td>3</td>
<td>Terminate malware execution</td>
</tr>
<tr>
<td>0x2000 (ShellManager)</td>
<td>0x2002</td>
<td>Start the cmd.exe process and create a thread for sending its output to C2</td>
</tr>
<tr>
<td></td>
<td>0x2003</td>
<td>Send a command to the shell</td>
</tr>
<tr>
<td></td>
<td>0x2004</td>
<td>Close the shell</td>
</tr>
<tr>
<td>0x3000 (DiskManager)</td>
<td>0x3000</td>
<td>Get a list of disks available in the system and information about them</td>
</tr>
<tr>
<td></td>
<td>0x3001</td>
<td>Get directory listing</td>
</tr>
<tr>
<td>0x4000 (FileTransferManager)</td>
<td>0x4001</td>
<td>Initialize file transfer from the infected computer to C2 (opens the file for reading)</td>
</tr>
<tr>
<td></td>
<td>0x4008</td>
<td>Read a block of data from a previously opened file.</td>
</tr>
<tr>
<td></td>
<td>0x4004</td>
<td>Initialize file transfer from C2 to the infected computer (opens the file for writing)</td>
</tr>
<tr>
<td></td>
<td>0x4005</td>
<td>Write a block of data to a previously opened file</td>
</tr>
<tr>
<td></td>
<td>0x4006</td>
<td>Complete the file transfer to the infected computer and set the timestamps</td>
</tr>
<tr>
<td></td>
<td>0x4009</td>
<td>Close open file descriptors and reset internal fields</td>
</tr>
<tr>
<td></td>
<td>0x4010</td>
<td>Get a recursive directory listing</td>
</tr>
<tr>
<td>0x5000 (RS5Manager)</td>
<td>0x5000</td>
<td>Perform initialization, create threads for receiving packets from a remote node and sending them to C2</td>
</tr>
<tr>
<td></td>
<td>0x5001</td>
<td>Create a socket and connect to a remote node</td>
</tr>
<tr>
<td></td>
<td>0x5003</td>
<td>Send data to the connected socket</td>
</tr>
<tr>
<td></td>
<td>0x5004</td>
<td>Close the connected socket</td>
</tr>
</tbody>
</table></div>
<p>In the process of collecting information about the system, the backdoor creates a globally unique identifier (GUID) and writes it to the registry in one of the HKLM or HKCU hives using the Software\CLASSES\KmpiPlayer key. If the key is already in the registry, then the existing ID is used.</p>
<h3 id="id3-2">Zupdax</h3>
<p>The first public mention of this malware can be found in the <a href="https://unit42.paloaltonetworks.com/unit42-henbox-chickens-come-home-roost/" target="_blank">Unit 42</a> report on HenBox, a malicious application for Android. In the HenBox network infrastructure, researchers found traces of the use of malware of the PlugX, Zupdax, 9002 RAT, and Poison Ivy families. In 2019, Unit 42 <a href="https://unit42.paloaltonetworks.com/pkplug_chinese_cyber_espionage_group_attacking_asia/" target="_blank">combined</a> three years of observed activity related to the above-mentioned set of malware, naming the group (or groups) behind it PKPLUG.</p>
<p>In 2020, ESET <a href="https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/" target="_blank">discovered</a> traces of an attack on the Able Soft LLC supply chain. One of the attack options was to compromise the Able Desktop installer by adding malicious code to it. The researchers cite the HyperBro and Korplug (PlugX) backdoors as the payload built into the installers.</p>
<p>According to available data, we can say that the payload designated by ESET as Korplug is in fact a Zupdax backdoor. This opinion is shared by NortonLifeLock and Avira analysts, who published a <a href="https://www.nortonlifelock.com/sites/default/files/2021-10/OPERATION%20EXORCIST%20White%20Paper.pdf" target="_blank">report</a> in the fall of 2021 describing the main features of Zupdax.</p>
<p>Zupdax has been operating since 2014 at least. Our study focused on 2017–2019 samples, but some details can only be traced in earlier versions (2014–2015). We will be referring to them as &quot;old&quot;.</p>
<p>The latest versions of Zupdax use the same loading scheme as in the MyKLoadClient test sample. Although there is no Snake game code in them, the main functionality of the dropper is implemented in a similar way: in its resources are the legitimate siteadv.exe, a launcher library, a payload, and a XOR-encrypted configuration with file names and flags. The launcher uses exactly the same configuration.</p>
<p>Unlike MyKLoadClient, in almost all samples with Zupdax, the payload (which is extracted under the name ok.obj) is encrypted and launched using the mrun method. Among the launcher samples that are used in conjunction with Zupdax, you can find more functional options that support UAC bypass (in particular, using buc_uninstallinterface export) and persistence as a service.</p>
<p>In the dropper and launcher samples are the corresponding PDB paths:<br/> d:\Leee\515远程文件\P1Rat_2017_07_28A\src\MyLoaderBypassNorton\Release\loaderexe.pdb and<br/>
d:\Leee\515远程文件\P1Rat_2017_07_28A\src\MyLoader_bypassKIS\snake\res\SiteAdv.pdb.</p>
<p>Malware variants related to the attack on Able Desktop users also contain a PDB with a similar string, MyLoader_bypassKIS:<br/>
c:\Users\PC-2015\Desktop\Badger\En-v2\免杀\MyLoader_bypassKIS\bin\loaderdll.pdb.</p>
<p>Interestingly, there is at least one sample (a95dfb8a8d03e9bcb50451068773cc1f1dd4b022bb39dce3679f1b3ce70aa4f9) that is completely identical to the test version of MyKLoadClient and contains exactly the same &quot;About the program&quot; window. The payload in it is a Zupdax backdoor.</p>
<h4 id="id3-2-1">Payload</h4>
<p>For network interaction with C2, the backdoor uses the <a href="https://udt.sourceforge.io" target="_blank">UDT protocol</a>, which implements data transfer over UDP. The messages have a header with a structure similar to that used in MyKLoadClient. The only difference is the value of the first field equal to 0x12345678:</p>
<pre><div class="code">struct PacketHeader{
    _DWORD Magic; // 0x12345678
    _DWORD CommandId;
    _DWORD PayloadSize;
    _DWORD Unknown; // 0
};</div></pre>
<p>Immediately after establishing a connection with C2, the backdoor collects and sends information about the system, including the computer name, user name, OS version, information about disk volume, RAM, and CPU, as well as the IP and MAC addresses of the network adapter. The collected information is sent with the 0x1 command ID.</p>
<p>The set of commands that the backdoor can handle does not change significantly from version to version: its main features are reduced to the execution of additional code that it can get from the control server. Older versions of Zupdax contain debug messages that allow you to see the original names of operations:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x0</td>
<td>CMD_END</td>
<td>Shut down the backdoor or restart it (depending on the version)</td>
</tr>
<tr>
<td>0x17</td>
<td>CMD_SET_REM</td>
<td>Write a new control server to the file (transmitted in the message)</td>
</tr>
<tr>
<td>0x19</td>
<td>CMD_UNINSTALL_HOST</td>
<td>Perform self-removal from the system</td>
</tr>
<tr>
<td>0x28</td>
<td>CMD_TRANSMISSION_PLUGIN</td>
<td>Get the plugin name from C2 and run it (the plugin can be a shellcode or an EXE file) If the necessary plugin is not available on the disk, first get it from C2. (Present only in old versions)</td>
</tr>
<tr>
<td>0x29</td>
<td>CMD_PLUGIN_TRANSMISSION_EXECUTE</td>
<td>Get the plugin ID from C2 and launch its entry point (the plugins are stored in memory). If the plugin is not in memory, first get the PE file from the control server and reflectively load the exported function from it. (In old versions, it is the same as CMD_TRANSMISSION_PLUGIN)</td>
</tr>
<tr>
<td>0x38</td>
<td>CMD_UPDATE</td>
<td>Download the EXE file from the specified link, save it to disk, and execute it.</td>
</tr>
<tr>
<td>0x68</td>
<td></td>
<td>Run the executable file at a fixed path under the name of the current user. The path is equal to C:\ProgramData\AdobeBak\avanti.exe. (Present only in the latest versions)</td>
</tr>
<tr>
<td>0x77</td>
<td>CMD_ADD_STARTUP</td>
<td>See CMD_TRANSMISSION_PLUGIN</td>
</tr>
</tbody>
</table></div>
<p>Old Zupdax samples also have paths to PDB files:<br/>
h:\E\项目问题\UDPUDP-英文\bin\server.pdb<br/>
d:\磁盘\E\项目问题\版本\UDPUDP-英文\bin\server.pdb</p>
<p>It follows from them that the original name of the project can be translated as &quot;UDPUDP-English.&quot;</p>
<h4 id="id3-2-2">Connection with Redsip</h4>
<p>In 2011, McAfee described a series of attacks on energy companies that was named Night Dragon. Among the malware used by the attackers was a Redsip backdoor (e3165c2691dc27ddaeb21e007f2bf5aeb14ef3e12ec007938e104d6aed512f39).</p>
<p>Apparently, Zupdax is a redesigned version of Redsip. Backdoors, in particular, have an identical structure of network messages (including the magic constant 0x12345678), matching command names and identifiers (CMD_SET_REM and CMD_UNINSTALL_HOST), and similar debug messages. In both cases, the payload is implemented through external plugins.</p>
<figure>
<img alt="Figure 11. Fragment of the Redsip code (2010 sample)" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image11.png"/>
<figcaption>Figure 11. Fragment of the Redsip code (2010 sample)</figcaption>
</figure>

<figure>
<img alt="Figure 12. Zupdax code fragment (2015 sample)" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image12.png"/>
<figcaption>Figure 12. Zupdax code fragment (2015 sample)</figcaption>
</figure>

<p>Note that in 2018 Redsip was used in an attack on a Russian organization associated with the aerospace industry. The attackers used a leaked corporate document as a decoy. We could not find a direct connection between this attack and the activities of Space Pirates.</p>
<figure>
<img alt="Figure 13. Internal document used as a decoy" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image13.png"/>
<figcaption>Figure 13. Internal document used as a decoy</figcaption>
</figure>

<h4 id="id3-2-3">Connection with Winnti and FF-RAT</h4>
<p>Some Zupdax samples have valid digital signatures. In particular, sample 24b749191d64ed793cb9e540e8d4b1808d6c37c5712e737674417573778f665b (upinstall.bat) is signed with a YD Online Corp. certificate, and 84b8bfe8161da581a88c0ac362318827d4c28edb057e23402523d3c93a5b3429 (Slack.exe) is signed with a NFINITY GAMES BILISIM ANONIM SIRKET certificate.</p>
<p>Among the files signed with these certificates are components of the PipeMon malware, which is <a href="https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/" target="_blank">attributed</a> to the Winnti group. Studying the network infrastructure of the second sample, we also noted the presence of indirect connections with the old Winnti infrastructure, but they require additional confirmation.</p>
<p>However, in the case of Slack.exe, we can state the presence of reliable infrastructure connections with the FF-RAT backdoor, which was <a href="https://blogs.blackberry.com/en/2017/06/breaking-down-ff-rat-malware" target="_blank">described</a> by BlackBerry in 2017. So, both the Zupdax sample and the FF-RAT samples use playdr2.com and gamepoer7.com subdomains as C2.</p>
<h4 id="id3-2-4">Connections with Bronze Union and TA428</h4>
<p>ESET&#x27;s previously mentioned report <a href="https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/" target="_blank">Operation StealthyTrident: corporate software under attack</a> on the compromise of Able Desktop notes the presence of HyperBro and Zupdax backdoors (Korplug according to ESET), as well as Tmanger and ShadowPad as part of a single cybercriminal operation. The researchers give several possible explanations for this connection. We were able to identify several additional facts that give more information about the connections between the Bronze Union (LuckyMouse, APT27) and TA428 groups and Zupdax malware.</p>
<p><b>Code intersections</b></p>
<p>The Zupdax sample from the ESET report contains a dropper that is standard for this malware (data1.dat, 2486734ebe5a7fa6278ce6358d995d4546eb28917f8f50b01d8fdd7a1f9627a4), extracting the payload from resources. Of interest is the scheme by which it gains control: it side-loads the pcalocalresloader.dll library, which contains a shellcode that decrypts and executes another shellcode from the thumb.db file. The second shellcode contains a DLL library compressed using the LZNT1 algorithm, which it reflectively loads into memory.</p>
<figure>
<img alt="Figure 14. Fragment of the ESET report" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image14.png"/>
<figcaption>Figure 14. Fragment of the ESET report</figcaption>
</figure>

<p>Both shellcodes use an atypical hashing algorithm for the names of imported libraries and functions (see Figure 15). For example, kernel32.dll has the hash 0xD4E88, and ntdll.dll 0x1B708. However, a search for similar samples showed that similar shellcodes can be found in various malware families—for example, in <a href="https://n1ght-w0lf.github.io/malware%20analysis/smokeloader/#shellcode" target="_blank">SmokeLoader</a> or in <a href="https://unit42.paloaltonetworks.com/unit42-recent-inpage-exploits-lead-multiple-malware-families/" target="_blank">exploits for InPage</a>. It is likely that a builder available to various hacker groups was used to create the shellcodes.</p>
<figure>
<img alt="Figure 15. Hash function in auxiliary shellcodes" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image15.png"/>
<figcaption>Figure 15. Hash function in auxiliary shellcodes</figcaption>
</figure>

<p>However, the whole scheme, including the legitimate component IntgStat.exe, pcalocalresloader.dll library, and the encrypted file thumb.db, was used in this form only to download the HyperBro backdoor, as <a href="https://securelist.com/luckymouse-hits-national-data-center/86083/" target="_blank">described by Kaspersky</a>. The only difference is that in the case of Able Desktop, shikata_ga_nai obfuscation was not applied.</p>
<p>An auxiliary DLL located in thumb.db handles the simultaneous launch of the dropper (data1.dat) and the legitimate Able Desktop installer. It is distinguished by the presence of a large number of unused strings in the data section. Some of them are specific only to samples of the HyperBro backdoor:</p>
<pre><div class="code">Elevation:Administrator!new:{FCC74B77-EC3E-4dd8-A80B-008A702075A9}
SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\test
system-%d
CreateProcessAsUser error %d
\\..\\config.ini
Win2008(R2)
Win2012(R2)</div></pre>
<p>As follows from the ESET report and our research, the criminals behind the attack on Able Desktop users have access to both HyperBro and Zupdax. However, most of the code features are specific to the HyperBro backdoor, which, in turn, is attributed to the Bronze Union group.</p>
<p><b>Network intersections</b></p>
<figure>
<img alt="Figure 16. Fragment of the Zupdax network infrastructure" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image16.png"/>
<figcaption>Figure 16. Fragment of the Zupdax network infrastructure</figcaption>
</figure>

<p>One of the Zupdax samples (ffe19202300785f7e745957b48ecc1c108157a6edef6755667a9e7bebcbf750b) uses flashplayeractivex.info subdomains, such as update.flashplayeractivex.info and news.flashplayeractivex.info, as C2. For some time in August 2020, these domains resolved to the IP address 209.250.239.96. At the same time, the go.vegispaceshop.org domain was present at the same IP address.</p>
<p>The latter domain, along with the IP address, can be found in the <a href="https://insight-jp.nttsecurity.com/post/102gkfp/pandas-new-arsenal-part-2-albaniiutas" target="_blank">NTT Security report</a> on the Albaniiutas malware from the TA428 toolkit. As the <a href="https://blog.group-ib.com/task" target="_blank">detailed analysis</a> of Albaniiutas samples by our colleagues from Group-IB shows, this malware is a new version of the RemShell backdoor (BlueTraveller) <a href="https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Operation-Taskmasters-2019-eng.pdf" target="_blank">previously identified</a> by <a href="https://www.ptsecurity.com/ru-ru/services/esc/" target="_blank">PT ESC</a>.</p>
<p>Another domain appearing at the IP address 209.250.239.96 at the same time is nameserver.datacertsecure.info. The datacertsecure.info and check.datacertsecure.info domains obviously associated with it resolved to the IP address 139.180.208.225 from June to July 2020. The node simultaneously became <a href="https://twitter.com/vishnyak0v/status/1287308019336990720" target="_blank">known</a> as the HyperBro backdoor control server, and was mentioned by ESET in <a href="https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/" target="_blank">Operation StealthyTrident.</a></p>
<p>These connections further unite the attackers&#x27; goals: the compromised Able Desktop installers, as well as the above-mentioned samples of Albaniiutas and HyperBro, were used in attacks on organizations in Mongolia.</p>
<h3 id="id3-3">Downloaders</h3>
<p>In the Space Pirates network infrastructure, we found two types of downloaders containing decoys with Russian text. One of them was also found in the network of our client, who was attacked by criminals.</p>
<figure>
<img alt="Figure 17. Example of a decoy document" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image17.png"/>
<figcaption>Figure 17. Example of a decoy document</figcaption>
</figure>

<h4 id="id3-3-1">Downloader.Climax.A</h4>
<p>The first downloader differs by the use of parts of the source code of the Rovnix bootkit (it was <a href="https://securelist.com/luckymouse-hits-national-data-center/86083/" target="_blank">described in detail by Kaspersky</a>). Note that, according to our data, the network indicators listed in the report, in particular the bamo.ocry.com domain, as well as IP addresses 45.77.244.191 and 45.76.145.22, are part of the Space Pirates network infrastructure.</p>
<p>We have no information about what malware was delivered by this downloader. However, researchers from Kaspersky managed to identify likely samples based on the similarity of PDB paths and identical control servers.</p>
<figure>
<img alt="Figure 18. Fragment of the Kaspersky report" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image18.png"/>
<figcaption>Figure 18. Fragment of the Kaspersky report</figcaption>
</figure>

<p>In the screenshots of the payload presented in the report, you can notice a specific technique for storing strings: they are all in one data block and indexed by numbers with the prefix &quot;PS_&quot;. This technique is found in the code of the publicly available PcShare backdoor. The sets of strings highlighted by the researchers correspond exactly to those that can be found in the open backdoor code. A similar correspondence can be made between the commands supported by the malware. As a result, we can confidently say that this payload is based on the PcShare code.</p>
<figure>
<img alt="Figure 19. Fragment of a file of strings from the PcShare code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image19.png"/>
<figcaption>Figure 19. Fragment of a file of strings from the PcShare code</figcaption>
</figure>

<p>Next, we will consider a modified version of PcShare, which we called RtlShare. Note that during the investigation for our client, we found a RtlShare sample connecting to C2 202.182.98.74. It is also used by the sample Downloader.Climax.A with SHA-256 e9c94ed7265c04eac25bbcdb520e65fcfa31a3290b908c2c2273c29120d0617b. Given the above, we can assume that the payload delivered by the downloader is none other than RtlShare.</p>
<h4 id="id3-3-2">Downloader.Climax.B</h4>
<p>Another type of downloader can use vulnerabilities in Microsoft Equation Editor for its execution. This vulnerability, in particular, is exploited by a document named &quot;Mayor of Seoul.rtf&quot; (7079d8c92cc668f903f3a60ec04dbb2508f23840ef3c57efffb9f906d3bc05ff), created using the notorious Royal Road RTF (8.t) builder, widely used by Asian APT groups.</p>
<p>The code of this downloader is completely different from Downloader.Climax.A, but does boast some similar features. In particular, both downloaders use TCP to connect to C2, and the resulting payload is decompressed using the LZW algorithm in both cases.</p>
<p>Downloader.Climax.B gains persistence in the system via the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\GetUserConfig. Its task is to get the files named INFOP11.EXE and OINFO11.OCX from the control server and execute the EXE file. Each of the files has its own numeric identifier, which is sent to C2.</p>
<figure>
<img alt="Figure 20. Fragment of the downloader code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image20.png"/>
<figcaption>Figure 20. Fragment of the downloader code</figcaption>
</figure>

<p>After loading, the following configuration parameters in the downloader itself are written to the body of the received OCX file: the node and port of the control server, the waiting time between calls to C2, the TodaySend string, as well as the generated GUID.</p>
<h3 id="id3-4">RtlShare</h3>
<p>The payload of the RtlShare malware is based on the <a href="https://github.com/LiveMirror/pcshare" target="_blank">publicly available</a> PcShare backdoor code. The malware has a specific execution chain, the code of which is not available in open sources. It involves three DLLs, each with its own export name. We will be using these names to refer to the corresponding libraries.</p>
<p>Let&#x27;s consider RtlShare using the example of 8ac2165dc395d1e76c3d2fbd4bec429a98e3b2ec131e7951d28a10e9ca8bbc46.</p>
<p>Interestingly, the attackers used the hacked website of the Petrozavodsk mathematical conference PICCAnA (piccana.karelia.ru) to deliver it; the site is currently unavailable (<a href="https://web.archive.org/web/20200131000411/http://piccana.karelia.ru/" target="_blank">web archive</a>). As a control server, it uses the private IP address 192.168.193.165.</p>
<p>During incident investigation for our client, we encountered almost identical samples using control servers 45.76.145.22, 141.164.35.87, and 202.182.98.74.</p>
<h4 id="id3-4-1">Dropper rtlstat.dll</h4>
<p>The rtlstat.dll library acts as the initial stage of infection, exporting a single function named emBedding. Its task is to extract and run the next-stage library with the internal name rtlmake.dll.</p>
<p>To do this, the OS bitness is first checked and the necessary data block is selected, after which it is XOR-decrypted with a key in the form of one of the strings 4af233f4740c2fde7fc95ed3a834d7b1 (x64) and 3ad6faf2d7b714137de31efef137775b (x86). Then the decrypted data is decompressed using the LZ4 algorithm.</p>
<figure>
<img alt="Figure 21. Extracting the required version of rtlmake.dll" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image21.png"/>
<figcaption>Figure 21. Extracting the required version of rtlmake.dll</figcaption>
</figure>

<p>A data block containing the configuration is copied to the body of the received library (it is encrypted at this stage). The magic number 0xAADDEE99 is used as a marker indicating the place where the configuration will be copied.</p>
<p>To bypass detection based on hash sums, attackers add a random number of random bytes to the end of the library, while updating the Checksum field in the PE header of the file. This way, a new file is extracted at each new launch.</p>
<p>Then the dropper checks whether it is running under the SYSTEM user by searching for the config substring in the path to the LocalAppData folder. If the substring is present, the library is restarted under the current user via rundll32.exe.</p>
<p>Otherwise, the resulting library is saved to the file %LOCALAPPDATA%\Microsoft\Windows\WER\Security\wuaueng.hlk, and the path to it is written to the registry using the key HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32. This section is responsible for the MruPidlList COM object used in the library shell32.dll, which, in turn, loads the process explorer.exe—this is a <a href="https://3gstudent.github.io/backup-3gstudent.github.io/Use-COM-Object-hijacking-to-maintain-persistence-Hijack-explorer.exe/" target="_blank">well-known technique</a> for malware persistence in the system.</p>
<p>At the end of its operation, the dropper executes the extracted DLL using regsvr32.exe and self-removes via a BAT file.</p>
<h4 id="id3-4-2">Injector rtlmake.dll</h4>
<p>Versions of rtlmake.dll with different bitness have the same functionality, which is confined to extracting the next-stage DLL and embedding its code into the process rdpclip.exe (or into the current process).</p>
<p>At the beginning of its operation, the injector makes sure that it is running in one instance: mutexes are most often used for this purpose, but in this case named file mappings are applied. During the operation of rtlmake.dll, a mapping with the name 55fc3f9a654c500932 is created, while the mapping 7f8b6a2440e5c9e5b6 handles the payload.</p>
<p>Then, using a function similar to the previous step, the DLL with the payload and configuration is decrypted and decompressed (recall that it was previously copied to rtlmake.dll). The configuration encryption key is the string 2ae06f136eb6588508eefd4b5f6c98d8345f1104746d15141, and the payload encryption key is 1192f6c4b018c8e0f51d31d6dde22ff3.</p>
<figure>
<img alt="Figure 22. RtlShare backdoor configuration" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image22.png"/>
<figcaption>Figure 22. RtlShare backdoor configuration</figcaption>
</figure>

<p>Next, the process in which the payload will be injected is selected. If the current process is explorer.exe (which is true, if the library was loaded as a COM component), then the target process will be rdpclip.exe. If rdpclip.exe failed to start, or if the DLL was loaded into another process, the current process becomes the target one.</p>
<p>The decrypted configuration is written to the memory of the selected process, and after that the injector generates a command line of the form /v /c:0x12345678, which contains the configuration address in the address space of the process. The resulting string and payload are also written to the process memory.</p>
<figure>
<img alt="Figure 23. Generating the command line in rtlmake.dll" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image23.png"/>
<figcaption>Figure 23. Generating the command line in rtlmake.dll</figcaption>
</figure>

<p>To start execution of the payload, the injector determines the offset in the PE file where the exported Putklm function is located, and after that it gains control of the CreateRemoteThread call. In this case, the command-line address is passed to it as arguments. Note that there is no reflective loading up to this point: the Putklm function actually works as a shellcode.</p>
<h4 id="id3-4-3">Payload rtlmain.dll (rtlmainx64.dll)</h4>
<p>This DLL is fully implemented based on the code of the main backdoor module PcShare—PcMain. Here are some of its features that are typical only for the RtlShare family:</p>
<ul>
<li>A reflective loader is implemented inside the library, which is located in the Putklm function. The command-line address that it receives is passed to DllEntryPoint via the lpReserved parameter and is XOR-encrypted with the constant 0x73DE2938. Address recovery and command-line parsing occur inside the DllMain function.</li>
<li>After running rtlmain.dll, all the rdpclip.exe processes are terminated except for the current one.</li>
<li>The backdoor string storage, in addition to LZ4 compression (which is present in the open-source code), is AES-encrypted with the key 68fa504a1aee69f71df454e554c74eaf. Similarly, the messages received (key 48d426ca6d45496e7413cf435516af06) and transmitted (key 2e5140d04c7d7da454991bae10160369) are encoded.</li>
<li>Support for the connection via a proxy server has been added.</li>
<li>There is a special command that allows attackers to overwrite the configuration inside the injector rtlmake.dll (the required offset contains the magic constant 0x76EE38BB).</li>
<li>The getip command has been added to the code for implementing the remote command shell, which is done through the call nslookup myip.opendns.com resolver1.opendns.com.</li>
</ul>
<h4 id="id3-4-4">Use of RtlShare</h4>
<p>RtlShare samples can be found in other reports. For example, Recorded Future researchers <a href="https://go.recordedfuture.com/hubfs/reports/cta-2021-0616.pdf" target="_blank">found</a> PcShare samples in the network infrastructure of the RedFoxtrot group, which have significant similarities with the RtlShare family. In addition, similar samples were previously <a href="https://www.bitdefender.com/files/News/CaseStudies/study/379/Bitdefender-Whitepaper-Chinese-APT.pdf" target="_blank">detected</a> by Bitdefender when investigating the activity of an APT group with Asian roots aimed at government institutions in Southeast Asia.</p>
<p>There are no connections in the network infrastructure between the above-mentioned cases, nor between these cases and the activity that we found during incident investigation for our client. This suggests that despite the absence of RtlShare code in open sources, several different APT groups of Asian origin have access to this malware.</p>
<h3 id="id3-5">PlugX</h3>
<p>We also found several samples of the PlugX backdoor in our client&#x27;s network. The samples used micro.dns04.com, microft.dynssl.com, api.microft.dynssl.com, and www.0077.x24hr.com addresses as control servers, which are part of the group&#x27;s network infrastructure and directly intersect with MyKLoadClient C2.</p>
<p>PlugX is widely used in the cybercriminal environment; it has several versions and multiple modifications. However, the samples identified by us have a set of features that make it possible to distinguish them into a separate group.</p>
<p>As in the usual PlugX, the main payload of the backdoor is implemented in the form of a DLL library, which is reflectively loaded into memory during malware execution. A pointer to the structure is passed to its entry point as an argument; the structure contains, in particular, the signature and address of the encrypted configuration.</p>
<p>In the original PlugX, the signature is the constant 0x504C5547 (PLUG string), but in our sample group, this value was equal to 0xCF455089. The configuration size, which is 0x1924 bytes, is also nonstandard: we could not find a mention of such a configuration in open sources. Unlike many other variants that have the XV signature instead of MZ and PE, in our case, the header of the PE file with the payload remains unchanged.</p>
<p>The inlining technique is actively used in the backdoor, in particular, for API calls and string encryption.</p>
<figure>
<img alt="Figure 24. API function calls in PlugX" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image24.png"/>
<figcaption>Figure 24. API function calls in PlugX</figcaption>
</figure>

<p>To search for API functions, the backdoor uses CRC32 hashes of their names. The received pointers are cached, while the code fragments responsible for this operation are embedded in every place where access to WinAPI is required.</p>
<figure>
<img alt="Figure 25. String encryption in PlugX" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image25.png"/>
<figcaption>Figure 25. String encryption in PlugX</figcaption>
</figure>

<p>Almost all the strings in the backdoor are stack-based, most of them are encrypted using the ADD-XOR-SUB method. The decryption code is copied to all places where encrypted strings are used.</p>
<p>The malware uses a standard set of plugins <a href="https://www.lastline.com/labsblog/an-analysis-of-plugx-malware/" target="_blank">known</a> from early versions. The original PlugX, during their initialization, uses a parameter that looks like a date. For instance, the Disk plugin has the 0x20120325 parameter. In our case, for all plugins, the 2012 combination has been changed to 8102 (which may mean 2018): the same Disk plugin uses the 0x81020325 value.</p>
<p>The entire backdoor also has a numeric value indicating the version: it is transmitted to C2 along with information about the infected system and is equal to 0x20161127. The same version can be found in Backdoor.PlugX.38 from the Dr.Web <a href="https://st.drweb.com/static/new-www/news/2020/july/Study_of_the_APT_attacks_on_state_institutions_in_Kazakhstan_and_Kyrgyzstan_en.pdf" target="_blank">report</a> on attacks on state institutions in Kazakhstan and Kyrgyzstan. However, other unique values from the Space Pirates variant, such as signature and configuration size, are missing in BackDoor.PlugX.38. Both variants seem to be based on the base code of the same version of PlugX, but its modifications in each of these cases are different.</p>
<p>We found more precise intersections in other reports. Among the PlugX instances used in the <a href="https://www.nortonlifelock.com/sites/default/files/2021-10/OPERATION%20EXORCIST%20White%20Paper.pdf" target="_blank">attacks on the Vatican</a> in 2019–2020 are several samples similar to those used by the Space Pirates group. In addition, the same backdoor modifications are found in samples <a href="https://go.recordedfuture.com/hubfs/reports/cta-2021-0616.pdf" target="_blank">associated</a> with the activity of the RedFoxtrot group. However, we failed to detect connections in the network infrastructure, which again suggests the exchange of tools between groups. Given the other intersections between the malware used in the attacks (Zupdax and RtlShare), we can also assume that all this activity belongs to one or more jointly operating groups. This, however, requires additional confirmation.</p>
<h4 id="id3-5-1">Demo dropper</h4>
<p>Some samples of the PlugX variant we found are extracted into the system by an interesting dropper, whose executable file can be called demo.exe. It is implemented based on the MFC library. Its job is to create a VBS script named msiexece.vbs or cosetsvc.vbs, and perform its subsequent execution.</p>
<p>The path to the EXE dropper and the names of the files to be extracted from it are passed to the script as command-line parameters. The files are in the demo.exe overlay and can be encrypted with a 1-byte XOR (but in all samples known to us, the key is 0). The overlay offset and the length of each of the files are written in the VBS code. The script extracts the standard PlugX components: a legitimate EXE file, a DLL for side-loading, and encrypted shellcode, after which the legitimate file is executed.</p>
<figure>
<img alt="Figure 26. Writing and execution of the VBS file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image26.png"/>
<figcaption>Figure 26. Writing and execution of the VBS file</figcaption>
</figure>

<h3 id="id3-6">BH_A006</h3>
<p>As in other cases, we found this malware both on our client&#x27;s resources and when researching the group&#x27;s network infrastructure. It contains a modified Gh0st backdoor as a payload. The string BH_A006 is constantly found in PDB paths and internal names of DLL libraries associated with the backdoor, which is why it got this name.</p>
<p>BH_A006 has a nontrivial payload execution scheme, which can vary at the initial stages in different samples. Let&#x27;s consider it using the example of one of the malicious files.</p>
<h4 id="id3-6-1">Stage 0. Loading DLL from the overlay</h4>
<p>SHA-256: 1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097</p>
<p>The source sample is an executable file that uses the MFC library. It extracts the contents of the overlay, decrypts itswith XOR with the 0xA0 key, and reflectively loads the resulting DLL into memory.</p>
<h4 id="id3-6-2">Stage 1. DLL dropper</h4>
<p>SHA-256: 8bf3df654459b1b8f553ad9a0770058fd2c31262f38f2e8ba12943f813200a4d</p>
<p>extracts the following files:</p>
<ul>
<li>C:\ProgramData\resmon.resmoncfg</li>
<li>C:\ProgramData\Sandboxie\SbieIni.dat (install32.dat)</li>
<li>C:\ProgramData\Sandboxie\SbieDll.dll</li>
<li>C:\ProgramData\Sandboxie\SandboxieBITS.exe</li>
</ul>
<p>After that, there is a check for write permission to the system folder. For this, the dropper tries to create a file in it with the name format: wmkawe_%d.data. The content is the Stupid Japanese string.</p>
<p>If there is no permission, and the system is 64-bit, two additional files are extracted:</p>
<ul>
<li>C:\ProgramData\Sandboxie.dll (install64.dll)</li>
<li>C:\ProgramData\Sandboxie.dat (install64.dat)</li>
</ul>
<p>The names given in parentheses are not used, but are present in the code. Apparently, they were left there from another version of the dropper.</p>
<p>All the files are contained in the data section in packaged form; a variant of the LZMA algorithm is used for compression. This compression method is also used in further stages of the malware operation. Further in the section, unless otherwise indicated, we will refer to this algorithm.</p>
<p>Depending on the available permissions and the OS bitness, the dropper starts one of the chains to bypass the UAC:</p>
<ul>
<li>(x32) C:\ProgramData\Sandboxie\SandboxieBITS.exe ByPassUAC</li>
<li>(x64) rundll32.exe C:\ProgramData\Sandboxie\SbieMsg.dll,installsvc ByPassUAC</li>
</ul>
<p>Or it immediately proceeds to the execution of the next stage:<br/>
C:\ProgramData\Sandboxie\SandboxieBITS.exe InsertS</p>
<p>In all three cases, the file %tmp%\delself.bat is created, which contains commands for self-removal.</p>
<p>Note that it is not the first time researchers have encountered this sample. Another variant of the MFC loader (<a href="#id3-6-1">stage 0</a>) containing the same dropper was mentioned by ESET in the <a href="https://www.welivesecurity.com/2021/02/01/operation-nightscout-supply-chain-attack-online-gaming-asia/" target="_blank">Operation NightScout</a> report, and then <a href="https://blog.vincss.net/2021/02/re020-elephantrat-kunming-version-our-latest-discovered-RAT-of-Panda.html" target="_blank">studied</a> in detail by our colleagues from VinCSS.</p>
<h4 id="id3-6-3">Stage 2. .dat loader (SbieDll.dll / SbieMsg.dll)</h4>
<p>Regardless of the command run by the DLL dropper, execution jumps to one of the extracted DLL libraries. In the case of a 32-bit version, a legitimate component of the <a href="https://en.wikipedia.org/wiki/Sandboxie" target="_blank">Sandboxie</a> utility, which is vulnerable to DLL side-loading, is used for this.</p>
<figure>
<img alt="Figure 27. Loading and running the shellcode in SbieDll.dll" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image27.png"/>
<figcaption>Figure 27. Loading and running the shellcode in SbieDll.dll</figcaption>
</figure>

<p>The code in the 32-bit and 64-bit versions of the libraries is almost identical and downloads the corresponding .dat file, decrypts its contents, and executes it. For decryption, XOR is used with the byte sequence: 00, 01, 02, ... FF, 00, 01, ... Just as in the code of the previous stage, here you can see alternative paths to .dat files that are not used during operation.</p>
<h4 id="id3-6-4">Stage 3. Shellcode .dat and DLL</h4>
<p>The shellcode is a reflective DLL library loader, which is located in its body immediately after the loading function. In this case, the library functionality differs significantly in shellcode versions with different bitness.</p>
<p><b>Stage 3.1 ByPassUAC (x64)</b></p>
<p><b id="stage3-1-1">Stage 3.1.1 Intermediate DLL</b></p>
<p>The 64-bit version is only responsible for implementing the UAC bypass. To perform this task, it extracts another DLL from itself into memory and transfers control to it. Reflective loading is performed again using a shellcode, which is predecrypted with XOR using the 0x97 key. The shellcode is not autonomous: in addition to the buffer with the PE file, pointers to the necessary functions, such as GetProcAddress and LoadLibraryA, are passed to it.</p>
<figure>
<img alt="Figure 28. Decryption and execution of the shellcode for reflective loading" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image28.png"/>
<figcaption>Figure 28. Decryption and execution of the shellcode for reflective loading</figcaption>
</figure>

<p><b>Stage 3.1.2 DLL with UAC bypass implementation</b></p>
<p>The DLL contains the path to the PDB file: e:\F35-F22\昆明版本\ElephantRat\nwsapagent\Bin\ByPassUAC64.pdb.</p>
<figure>
<img alt="Figure 29. Choosing a UAC bypass method" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image29.png"/>
<figcaption>Figure 29. Choosing a UAC bypass method</figcaption>
</figure>

<p>The UAC bypass method used depends on the presence in the system of the avp.exe process (a component of Kaspersky antivirus products) and on the system version. In total, three well-known methods using <a href="http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass" target="_blank">sdclt.exe</a>, a <a href="https://offsec.almond.consulting/UAC-bypass-dotnet.html" target="_blank">.NET library</a>, and <a href="https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e" target="_blank">mocking trusted directories</a> have been implemented.</p>
<p>If the bypass is successfully implemented using any of the methods, the previously encountered command C:\ProgramData\Sandboxie\SandboxieBITS.exe InsertS is run.</p>
<p><b>Stage 3.2. ByPassUAC / InstallS (x32)</b></p>
<p><b id="stage3-2-1">Stage 3.2.1. Intermediate DLL</b></p>
<p>The 32-bit version of the DLL, which is located in the corresponding DAT file, is obfuscated using an unknown protector.</p>
<figure>
<img alt="Figure 30. The entry point in the obfuscated PE file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image30.png"/>
<figcaption>Figure 30. The entry point in the obfuscated PE file</figcaption>
</figure>

<p>In the data section of this DLL, there is a compressed shellcode that is decompressed and gains control.</p>
<p><b>Stage 3.2.2. Decompression shellcode</b></p>
<figure>
<img alt="Figure 31. Passing arguments to the function via the return address" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image31.png"/>
<figcaption>Figure 31. Passing arguments to the function via the return address</figcaption>
</figure>

<p>The shellcode starts with calling the sub_20F function, which takes three arguments: a hash on behalf of VirtualAlloc, the size of the buffer to decompress, and a pointer to the data. The arguments are written immediately after the call statement, and the called function accesses them using an offset relative to the return address.</p>
<p>The sub_20F function gets a pointer to the VirtualAlloc function, for which it finds the kernelbase.dll library in the list of loaded modules (which is always assumed to be in second place on the InInitializationOrderModuleList list) and iterates its export table using a hash to find the required function. Then a buffer of the size specified in the arguments with RWX rights is allocated, and the compressed data is unpacked into it. In this case, compression is done with the NRV family algorithm from the <a href="http://www.oberhumer.com/opensource/ucl/" target="_blank">UCL library</a> (used in the UPX packer). The data is another shellcode to which control is transferred.</p>
<p><b>Stage 3.2.3. Relocation shellcode</b></p>
<p>The main part of the next shellcode is the contents of data and code sections, apparently extracted from some PE file. To launch correctly at the beginning of its operation, the shellcode performs address correction (relocation). The parameters necessary for it are transmitted in the same way as the previous shellcode using the return address. The relocation is performed relative to the standard base address 0x401000. After its completion, control is transferred to the address of the entry point specified in the parameters (as an offset relative to the end of the relocation table).</p>
<figure>
<img alt="Figure 32. Parameters of the relocation shellcode" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image32.png"/>
<figcaption>Figure 32. Parameters of the relocation shellcode</figcaption>
</figure>

<p><b>Stage 3.2.4. Installer in shellcode format</b></p>
<p>The main function of the installer loads the WinAPI functions necessary for operation, after which it can perform the operation specified in the command line.</p>
<figure>
<img alt="Figure 33. Code fragment of the shellcode installer" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image33.png"/>
<figcaption>Figure 33. Code fragment of the shellcode installer</figcaption>
</figure>

<p>The following commands are supported:</p>
<ul>
<li>InsertS: create a service named Network Service. The name of the current module with the runsvc parameter is specified as the launch path. If there are no avp.exe processes in the list, the service is launched immediately.</li>
<li><p>Runsvc: delete all auxiliary files and folders that could be used in the UAC bypass. Decompressing the next-stage shellcode, creating an svchost.exe process, and injecting the decompressed shellcode.
Interestingly, in the code for impersonation and starting the svchost.exe process, a special check has been implemented only for the Russian language, which indicates an orientation to Russian-language OS versions.</p>
<figure>
<img alt="Figure 34. Special processing for the Russian-language version of the system" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image34.png"/>
<figcaption>Figure 34. Special processing for the Russian-language version of the system</figcaption>
</figure>

<p>In addition, a separate thread is created that checks for Global\MYKERNELDLLMAPPING06 mapping every 50 seconds. In case of its absence in the system, the creation of svchost.exe and shellcode injection are repeated.</p>
</li>
<li>ByPassUAC: works completely similar to the 64-bit version (<a href="#stage3-1-1">stage 3.1.1</a>)—it decompresses the DLL with the implementation of UAC bypass methods and transfers control to it.</li>
<li>Memload: there is a MemLoadServer debug message in the code. Decompresses the next-stage shellcode and runs it directly in the current process.</li>
</ul>
<h4 id="id3-6-5">Stage 4. MemLoadLibrary</h4>
<p>The fourth stage has a previously encountered format: the decompression shellcode extracts the relocation shellcode, which in turn executes the main code (obtained from the PE file). The main code in this case is small in volume and is responsible for decompressing and reflectively loading the DLL into memory. The reflective loader is implemented in the form of an XOR-encrypted shellcode, as in <a href="#stage3-1-1">stage 3.1.1</a>. After loading the library, control is transferred to the exported Online function.</p>
<figure>
<img alt="Figure 35. Decompressing the DLL and starting the Online export" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image35.png"/>
<figcaption>Figure 35. Decompressing the DLL and starting the Online export</figcaption>
</figure>

<p>The DLL is again just an intermediate loader and runs another shellcode.</p>
<figure>
<img alt="Figure 36. Online function code" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image36.png"/>
<figcaption>Figure 36. Online function code</figcaption>
</figure>

<p>The new shellcode is an unpacking shellcode, and stage 4 is repeated exactly, right up to calling the Online function from the latest DLL library.</p>
<h4 id="id3-6-6">Stage 5. Payload</h4>
<p>It is a backdoor partially obfuscated with the help of a previously encountered packer (<a href="#stage3-2-1">stage 3.2.1</a>), which is based on the Gh0st trojan code.</p>
<p>Interestingly, the signature of network packets (Gh0st in the original) in this version is generated and checked in a special way. In a 4-byte value, only the lowest bit of each byte carries the payload, the remaining bits are random. The lower bits must satisfy a set of logical relations involving the lower bits of the magic constant 0x31230C0. Note that a similar algorithm for checking these relations using the same constant can be found in loaders of .dat files (<a href="#id3-6-3">stage 2</a>), but the result of its operation is not used there.</p>
<figure>
<img alt="Figure 37. Generating a signature in the constructor of the CClientSocket class" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image37.png"/>
<figcaption>Figure 37. Generating a signature in the constructor of the CClientSocket class</figcaption>
</figure>

<p>The library has the export name BH_A006_SRV.dll, and in the PE file overlay, you can find the corresponding PDB path:</p>
<p>D:\005（fastapp f35 20181009）\nwsapagent\KernelTrjoan\BH_A006_SRV\BH_A006_SRV\Debug\BH_A006_SRV.pdb</p>
<p>We managed to find a sample of the malware (57d4c08ce9a45798cd9b0cf08c933e26ffa964101dcafb1640d1df19c223e738), which has a similar obfuscation and an identical algorithm for generating a network signature, and contains the name BH_A006_SRV.dll. This sample was uploaded to VirusTotal in 2015.</p>
<h4 id="id3-6-7">Connection with 9002 RAT</h4>
<p>In studying the execution chain of the BH_A006 backdoor, it turned out that the technique used for converting a PE file into an autonomous compressed shellcode is not unique. Similar decompression and relocation shellcodes, as well as the procedure for loading WinAPI functions, are present in instances of the 9002 RAT malware. For example, they can be found in the sample 52374f68d1e43f1ca6cd04e5816999ba45c4e42eb0641874be25808c9fe15005 from the <a href="https://www.trendmicro.com/en_us/research/18/h/supply-chain-attack-operation-red-signature-targets-south-korean-organizations.html" target="_blank">Trend Micro report</a> on attacks on South Korean companies—one of the last mentions of this malware.</p>
<h3 id="id3-7">Deed RAT</h3>
<p>Another type of previously unknown malware, which we found in a single instance in our client&#x27;s infrastructure, is a modular backdoor. Based on the value of the signature used in the header of its modules, we named it Deed RAT.</p>
<p>The Deed RAT control server ftp.microft.dynssl.com is directly connected to the infrastructure of the Space Pirates group. Another similarity can be found in one of the code features: the [xor 0xBB, sub 0x1] operations are used to encrypt the shellcode in the same way as in the part of PlugX samples.</p>
<p>The payload execution scheme resembles the standard method that PlugX uses: a legitimate EXE file signed by Trend Micro loads a malicious library TmDbgLog.dll, which, in turn, runs the encrypted shellcode from the file PTWD.tmp.</p>
<p>However, an interesting method of transferring control to the shellcode is used: at the time of loading, the library modifies the executable file so that after returning control to the EXE file, the FreeLibrary function is immediately called for it. Having regained control at the time of unloading, the library modifies the executable file again, writing assembly instructions for calling the shellcode to it—they will be executed immediately after returning from FreeLibrary.</p>
<p>The shellcode is the loader of the main module, which is located in compressed and encrypted form after the loading code. The module has a special structure and uses techniques borrowed from PE files. In particular, the module has three &quot;sections&quot; with different access rights and a relocation table completely similar to the one used in PE format.</p>
<p>The decrypted module consists of a header starting with the signature 0xDEED4554 and a main data block compressed with LZNT1, which contains section data and a relocation table. For each of the sections, the header indicates its actual size and the size in memory, which is aligned to the 0x1000 boundary. The header structure looks as follows:</p>
<pre><div class="code">struct SectionHeader{
    _DWORD VirtualSize;
    _DWORD SizeOfRawData;
};

struct ModuleHeader{
    _DWORD Signature; // 0xDEED4554
    _DWORD ModuleId;
    _DWORD EntryPoint;
    _DWORD OriginalBase;
    _DWORD AbsoluteOffset; // 0x1000
    SectionHeader Sections[3];
    _DWORD Unknown;
};</div></pre>
<p>During operation, the loader allocates the necessary memory area, copies each of the sections into it (taking into account its size in memory), and performs address configuration (relocation). The first of the sections contains executable code, and RX permissions are set for its memory area, the other sections have RW permissions. After loading the sections, the module entry point specified in the header gain control.</p>
<p>The main backdoor module has the identifier 0x20 and is responsible for loading and managing plugins that implement various functions. In its data section, there are eight encrypted plugins that are initialized at the beginning of operation:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Description</th>
<th>Network commands</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x30</td>
<td>Startup</td>
<td>A plugin that implements the malware startup algorithm</td>
<td></td>
</tr>
<tr>
<td>0x40</td>
<td>Config</td>
<td>A plugin that handles the configuration</td>
<td>0x40: transferring the configuration to C2<br/>
0x41: receiving a new configuration from C2</td>
</tr>
<tr>
<td>0xA0</td>
<td>Install</td>
<td>A plugin responsible for persistence on the infected computer. Persistence can be achieved through the mechanism of services and through the registry (the key is set by the configuration)</td>
<td></td>
</tr>
<tr>
<td>0xB0</td>
<td>Inject</td>
<td>A plugin that implements code injection into a given process (determined by the configuration)</td>
<td></td>
</tr>
<tr>
<td>0x60</td>
<td>Network</td>
<td>A plugin that manages network interaction</td>
<td></td>
</tr>
<tr>
<td>0x70</td>
<td>NetSocket</td>
<td>A plugin that implements various types of connectors for network interaction</td>
<td></td>
</tr>
<tr>
<td>0x50</td>
<td>Plugin</td>
<td>A plugin that implements registry monitoring for the appearance of new plugins in it and their loading</td>
<td>0x50: collecting information about plugins<br/>
0x51: adding a plugin to the registry and launching it<br/>
0x52: removing the plugin from the registry and memory</td>
</tr>
<tr>
<td>0x90</td>
<td>NetProxy</td>
<td>A plugin that manages information about available proxy servers. It has a built-in sniffer for automatic detection of proxies used by the infected computer</td>
<td></td>
</tr>
</tbody>
</table></div>
<p>Unlike the main module, an algorithm based on Salsa20 is used to encrypt plugins. Among the modifications is a custom constant for the key extension, equal to arbitraryconstat. The structure of the decrypted plugin completely copies the structure of the main module, and a similar algorithm is used to load it.</p>
<p>Each plugin implements five service operations that are implemented at its entry point:</p>
<ol>
<li>Initialization.</li>
<li>Obtaining the numeric ID of the plugin.</li>
<li>Obtaining the plugin name.</li>
<li>Obtaining a link to the structure with the plugin&#x27;s API functions.</li>
<li>Resource deallocation.</li>
</ol>
<figure>
<img alt="Figure 38. Entry point of the Config plugin" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image38.png"/>
<figcaption>Figure 38. Entry point of the Config plugin</figcaption>
</figure>

<p>The useful functionality of the plugin is available through the structure with its API functions. Among them, there may be a dispatcher function responsible for processing network commands that the plugin supports. The main module also has an API that allows you to access other plugins and implements auxiliary functions, such as encryption or access to the registry.</p>
<p>One interesting feature of the backdoor is the pseudorandom generation of various kinds of strings—registry keys, names of mutexes and pipes, and command-line arguments. A string of the required length is created on the basis of a seed, which is generated using the numeric identifier of the string and the serial number of the system volume. As a result, each of the infected computers uses its own unique set of string constants.</p>
<figure>
<img alt="Figure 39. ID generation algorithm" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/article_333388/image39.png"/>
<figcaption>Figure 39. ID generation algorithm</figcaption>
</figure>

<p>The backdoor stores all the necessary data in the registry key [HKLM|HKCU]\Software\Microsoft\. For each type of information, it creates its own subkey, the name of which is obtained using the string generator described above. To get all the keys that the backdoor can use, we implemented a script in Python that accepts the serial number of the volume and reproduces the operation of the generator.</p>

<div class="accordion">
    <div class="accordion__item accordionList">
        <div class="accordion__header grid-cr grid-cr-space-between accordionAction">
            <div class="title title_accordion">
                <h4>Registry keys generator</h4>
            </div>
            <div class="cross-box cross-box_angle"></div>
        </div>
        <div class="accordion__content accordionHideList">
            <div class="accordion__inner">
                <article>
                    <pre>
                      <div class="code">
import click


def rshift(val, n):
    s = val &amp; 0x80000000
    for i in range(0,n):
        val &gt;&gt;= 1
        val |= s
    return val


def generator(volume_number, seed, length):
    gr_seed = (volume_number + seed + 0x1000193) &amp; 0xffffffff
    r = []
    for i in range(length):
        r1 = (gr_seed * 0x2001) &amp; 0xffffffff
        r2 = rshift(r1, 7)
        r3 = r2 ^ r1
        r4 = (r3 * 9) &amp; 0xffffffff
        r5 = rshift(r4, 17)
        r6 = r4 ^ r5
        r7 = (r6 * 33) &amp; 0xffffffff
        r.append(((r7 &amp; 0xffff) % 26) + 0x41)
        gr_seed = r7 
    
    return bytes(r).decode(&#x27;utf-8&#x27;)

@click.command()
@click.argument(&quot;VOLUME_NUMBER&quot;)
def main(volume_number):
    try:
        serial_number = int(volume_number, 16)
    except ValueError:
        print(&quot;[~] Invalid Volume number&quot;)
        return 

    registry_key_1 = generator(serial_number, 0xC4DA8B2F, 6)

    registry_key_2 = generator(serial_number, 0x7BD90AA1, 10)
    registry_key_3 = generator(serial_number, 0xF7BBC23F, 10)

    registry_key_4 = generator(serial_number, 0xDF12A5B2, 8)
    registry_key_5 = generator(serial_number, 0x6EB208A4, 9)

    registry_key_6 = generator(serial_number, 0xDE8765CB, 8)
    registry_key_7 = generator(serial_number, 0x6D3C218A, 8)

    registry_key_8 = generator(serial_number, 0x78D3BC22, 8)
    registry_key_9 = generator(serial_number, 0xD53BCA90, 10)

    registry_key_11 = generator(serial_number, 0x4FD82CB4, 8)
    registry_key_13 = generator(serial_number, 0xDCBC5D23, 8)

    registry_key_10 = generator(serial_number, 0xE2C7BA56, 15)
    
    registry_key_12 = generator(serial_number, 0x8BD43C12, 8)

    print(f&quot;[+] Plugin monitor registry key: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_1}&quot;)
    print(f&quot;[+] Executable path: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_3}; ValueName: {registry_key_2}&quot;)
    print(f&quot;[+] Machine ID: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_5}; ValueName: {registry_key_4}&quot;)
    print(f&quot;[+] Shellcode for injection: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_6}; ValueName: {registry_key_7}&quot;)
    print(f&quot;[+] Proxies: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_9}; ValueName: {registry_key_8}&quot;)
    print(f&quot;[+] Config : [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_11}; ValueName: {registry_key_13}&quot;)

if __name__ == &quot;__main__&quot;:
    main()
                      </div>
                    </pre>
                </article>
            </div>
        </div>
    </div>
</div>

<p>The Network plugin is responsible for the algorithm of interaction with the control server. It extracts the C2 address as a URL string from the configuration and, depending on the scheme specified in it, selects one of the connectors available in the NetSocket plugin. All of them implement a common interface for uniformly receiving and transmitting network messages. Before sending, messages are compressed using the LZNT1 algorithm and encrypted with a modified Salsa20 using a random key.</p>
<p>To resolve the domain of the control server, the backdoor consistently uses DNS over HTTPS and the usual DNS servers specified in the configuration (public servers of Google and other providers), before resorting to the standard mechanism. This gives the malware the opportunity to hide the C2 domain from network traffic inspection tools.</p>
<p>Supported connection protocols include TCP, TLS, HTTP, HTTPS, UDP, and DNS.</p>
<p>The REUSEPORT option is available for TCP—specifying it leads to prebinding of the socket with which the connection to C2 is established. Binding is performed on the largest free port in the range of system (well-known) ports. The ports are checked starting from 1022 in descending order. Apparently, this technique is implemented to bypass security measures and disguise traffic as system network services.</p>
<p>The backdoor also provides for the possibility of obtaining a new C2 over HTTP. To do this, a web page can be used, the address of which is specified in the configuration with the URL:// scheme. After the page loads, its body is searched for the agmsy4 and ciou0 substrings, which indicate the beginning and end of the string with the control server. This string is encoded using base16 (hex) with the abcghimnostuyz0456 alphabet and is processed similarly to the address from the configuration.</p>
<p>TCP/TLS and HTTP/HTTPS connectors support connection via a proxy server, which can be obtained using the NetProxy plugin. The plugin has its own proxy storage, which is located in the registry and can be filled with values from the configuration, system proxies, and data from installed browsers (Chrome, Opera, and Firefox). In addition, the plugin has the functionality of a built-in sniffer that listens to the traffic of the infected computer using a raw socket. If the sniffer detects an attempt to connect to a proxy server (SOCKS4, SOCKS5, or HTTP) in the outgoing packet, it saves information about it in the storage.</p>
<p>Before connecting to the control server, the backdoor checks the schedule: up to four entries can be specified in its configuration, containing the days of the week and the hours during which the connection is prohibited.</p>
<p>After the connection is established, the backdoor can execute the following commands:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>ID</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x210</td>
<td>Collect information about the system</td>
</tr>
<tr>
<td>0x211</td>
<td>Creation of a separate connection to work with plugins</td>
</tr>
<tr>
<td>0x212</td>
<td>Self-removal</td>
</tr>
<tr>
<td>0x213</td>
<td>Empty command (ping)</td>
</tr>
<tr>
<td>0x214</td>
<td>Connection deactivation</td>
</tr>
<tr>
<td>0x215</td>
<td>Update of the shellcode for the injection, which is stored in the registry</td>
</tr>
<tr>
<td>0x216</td>
<td>Update of the main shellcode on the disk. All plugins stored in the registry are deleted</td>
</tr>
</tbody>
</table></div>
<p>If a command is received that is not on the list above, it is assumed that it is a network command of one of the plugins. Its ID is determined by applying the mask 0xFFF0 to the command ID. If the plugin is not available locally, it is preloaded from C2 and saved in the registry.</p>
<p>On the computer infected with Deed RAT, we were able to detect a single plugin obtained dynamically from the control server. It is called Shell, and its ID is 0x270. Shell supports two network commands (0x270 and 0x271); each of them starts the specified process and redirects its I/O to C2. In the first case, the interaction takes place in text mode via pipes. In the second case, Windows Console API operations are used, which allows attackers to fully emulate a console window on their side, taking into account information about the size of the screen buffer, cursor position, and other parameters.</p>
<p>The configuration of the sample we examined contained the following set of strings:</p>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th>String</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>%ALLUSERSPROFILE%\Test\Test.exe</td>
<td>Path to the legitimate executable file (installation path)</td>
</tr>
<tr>
<td>TmDbgLog.dll</td>
<td>Library name for DLL side-loading</td>
</tr>
<tr>
<td>PTWD.tmp</td>
<td>File name with the encrypted shellcode</td>
</tr>
<tr>
<td>Test</td>
<td>Service name</td>
</tr>
<tr>
<td>Trend Micro Platinum</td>
<td>Displayed service name</td>
</tr>
<tr>
<td>Platinum Watch Dog</td>
<td>Service description</td>
</tr>
<tr>
<td>SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</td>
<td>Key for persistence in the registry</td>
</tr>
<tr>
<td>%windir%\system32\svchost.exe</td>
<td>Process names for injecting code</td>
</tr>
<tr>
<td>%windir%\system32\taskeng.exe</td>
<td></td>
</tr>
<tr>
<td>%ProgramFiles%\Internet Explorer\iexplore.exe</td>
<td></td>
</tr>
<tr>
<td>%windir%\system32\WmiPrvSE.exe</td>
<td></td>
</tr>
<tr>
<td>hio2cF9VF2Jsdf9n</td>
<td>Identifier sent along with system information</td>
</tr>
<tr>
<td>asdRFSDabormhkmfgUIYGBDURE</td>
<td>Mutex name</td>
</tr>
<tr>
<td>https://dns.google/dns-query</td>
<td>Addresses of DNS over HTTPS servers</td>
</tr>
<tr>
<td>https://cloudflare-dns.com/dns-query</td>
<td></td>
</tr>
<tr>
<td>https://dns.adguard.com/dns-query</td>
<td></td>
</tr>
<tr>
<td>https://dns.quad9.net/dns-query</td>
<td></td>
</tr>
<tr>
<td>TCP://ftp.microft.dynssl.com:53412</td>
<td>Control server URL</td>
</tr>
</tbody>
</table></div>
<h2 id="id4">Conclusion</h2>
<p>APT groups with Asian roots continue to attack Russian companies, as evidenced by the activity of Space Pirates. Cybercriminals both develop new malware that implements non-standard techniques (such as Deed RAT) and use modifications of existing backdoors. Such modifications sometimes feature multiple layers of obfuscation to defeat security tools and complicate the analysis procedure—as in the case of BH_A006, built on the code of the popular Gh0st backdoor.</p>
<p>A separate difficulty as regards APT groups operating out of the Asian region is accurate attribution: the frequent exchange of tools and, in some cases, joint activity of groups significantly complicate this task. The core part of our research is based on the results of our investigation of an information security incident at our client&#x27;s premises and analysis of specific network infrastructure that uses DDNS domains. The data obtained allows us to state with certainty that the same attackers are behind the detected activity.</p>
<p>PT ESC will continue to monitor the threats: new facts may provide more information about the activities of Space Pirates and its relationship with other groups.</p>
<h2 id="id5">Appendices</h2>
<h3 id="id5-1">MITRE</h3>
<div class="table-container"><table class="table-article">
<thead>
<tr>
<th><b>ID</b></th>
<th><b>Name</b></th>
<th><b>Description</b></th>
</tr>
</thead>
<tbody>
<tr>
<td><b>Initial Access</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1566.001</td>
<td>Phishing: Spearphishing Attachment</td>
<td>Space Pirates uses phishing emails with malicious attachments</td>
</tr>
<tr>
<td>T1566.002</td>
<td>Phishing: Spearphishing Link</td>
<td>Space Pirates uses phishing emails with links to malware</td>
</tr>
<tr>
<td><b>Execution</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1059.003</td>
<td>Command and Scripting Interpreter: Windows Command Shell</td>
<td>Space Pirates malware features remote command shell functionality</td>
</tr>
<tr>
<td>T1059.005</td>
<td>Command and Scripting Interpreter: Visual Basic</td>
<td>Space Pirates uses VBS scripts, including ReVBShell</td>
</tr>
<tr>
<td>T1106</td>
<td>Native API</td>
<td>Space Pirates malware uses WinAPI functions to run new processes and implement shellcode</td>
</tr>
<tr>
<td>T1053.002</td>
<td>Scheduled Task/Job: At (Windows)</td>
<td>Space Pirates uses atexec.py to run commands on a remote host</td>
</tr>
<tr>
<td>T1053.005</td>
<td>Scheduled Task/Job: Scheduled Task</td>
<td>Space Pirates uses system tasks</td>
</tr>
<tr>
<td>T1569.002</td>
<td>System Services: Service Execution</td>
<td>Space Pirates creates malicious services.</td>
</tr>
<tr>
<td><b>Persistence</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1053.005</td>
<td>Scheduled Task/Job: Scheduled Task</td>
<td>Space Pirates creates system tasks for persistence on the host</td>
</tr>
<tr>
<td>T1543.003</td>
<td>Create or Modify System Process: Windows Service</td>
<td>Space Pirates creates malicious services for persistence on the host</td>
</tr>
<tr>
<td>T1546.015</td>
<td>Event Triggered Execution: Component Object Model Hijacking</td>
<td>RtlShare malware persists in the system through substitution of the MruPidlList COM object</td>
</tr>
<tr>
<td>T1547.001</td>
<td>Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder</td>
<td>For persistence on the host, Space Pirates can place a shortcut in the autorun folder and use the Run and RunOnce registry keys</td>
</tr>
<tr>
<td><b>Privilege Escalation</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1548.002</td>
<td>Abuse Elevation Control Mechanism: Bypass User Account Control</td>
<td>Space Pirates malware contains various techniques for bypassing UAC</td>
</tr>
<tr>
<td>T1068</td>
<td>Exploitation for Privilege Escalation</td>
<td>Space Pirates can exploit the CVE-2017-0213 vulnerability for privilege escalation</td>
</tr>
<tr>
<td><b>Defense Evasion</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1027.001</td>
<td>Obfuscated Files or Information: Binary Padding</td>
<td>The RtlShare dropper adds random bytes to the extracted payload</td>
</tr>
<tr>
<td>T1027.002</td>
<td>Obfuscated Files or Information: Software Packing</td>
<td>One of the stages of the BH_A006 malware is obfuscated using an unknown protector</td>
</tr>
<tr>
<td>T1036.004</td>
<td>Masquerading: Masquerade Task or Service</td>
<td>Space Pirates uses legitimate-looking names when creating services</td>
</tr>
<tr>
<td>T1036.005</td>
<td>Masquerading: Match Legitimate Name or Location</td>
<td>Space Pirates masks its malware as legitimate software</td>
</tr>
<tr>
<td>T1055</td>
<td>Process Injection</td>
<td>Space Pirates malware can inject shellcode into other processes</td>
</tr>
<tr>
<td>T1055.001</td>
<td>Process Injection: Dynamic-link Library Injection</td>
<td>Space Pirates malware can inject DLLs with payload into other processes</td>
</tr>
<tr>
<td>T1078.002</td>
<td>Valid Accounts: Domain Accounts</td>
<td>Space Pirates uses compromised privileged credentials</td>
</tr>
<tr>
<td>T1112</td>
<td>Modify Registry</td>
<td>Deed RAT stores all its data in the registry, including configuration and plugins</td>
</tr>
<tr>
<td>T1140</td>
<td>Deobfuscate/Decode Files or Information</td>
<td>Space Pirates malware uses various algorithms to encrypt configuration data and payload</td>
</tr>
<tr>
<td>T1197</td>
<td>BITS Jobs</td>
<td>Space Pirates uses BITS jobs to download malware</td>
</tr>
<tr>
<td>T1218.011</td>
<td>Signed Binary Proxy Execution: Rundll32</td>
<td>Space Pirates can use rundll32.exe to run DLLs</td>
</tr>
<tr>
<td>T1553.002</td>
<td>Subvert Trust Controls: Code Signing</td>
<td>Space Pirates uses stolen certificates to sign some Zupdax samples</td>
</tr>
<tr>
<td>T1564.001</td>
<td>Hide Artifacts: Hidden Files and Directories</td>
<td>Space Pirates can store its malware in hidden folders at C:\ProgramData</td>
</tr>
<tr>
<td>T1574.002</td>
<td>Hijack Execution Flow: DLL Side-Loading</td>
<td>Space Pirates uses legitimate applications vulnerable to DLL side-loading</td>
</tr>
<tr>
<td>T1620</td>
<td>Reflective Code Loading</td>
<td>Space Pirates malware uses reflective loading to run payloads in memory</td>
</tr>
<tr>
<td><b>Credential Access</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1555.003</td>
<td>Credentials from Password Stores: Credentials from Web Browsers</td>
<td>Space Pirates uses the Chromepass tool to retrieve passwords from Chrome browser storage</td>
</tr>
<tr>
<td>T1003.001</td>
<td>OS Credential Dumping: LSASS Memory</td>
<td>Space Pirates gets LSASS process dumps for further credential dumping</td>
</tr>
<tr>
<td>T1040</td>
<td>Network Sniffing</td>
<td>Deed RAT collects information about in-use proxies through network sniffing</td>
</tr>
<tr>
<td><b>Discovery</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1087.001</td>
<td>Account Discovery: Local Account</td>
<td>Space Pirates collects information about users through the query user command</td>
</tr>
<tr>
<td>T1087.002</td>
<td>Account Discovery: Domain Account</td>
<td>Space Pirates collects information about users in the domain through the legitimate CSVDE tool</td>
</tr>
<tr>
<td>T1082</td>
<td>System Information Discovery</td>
<td>Space Pirates malware collects system information, including OS version, CPU, memory, and disk information</td>
</tr>
<tr>
<td>T1614.001</td>
<td>System Location Discovery: System Language Discovery</td>
<td>Deed RAT gets the language code identifier (LCID) during system information collection</td>
</tr>
<tr>
<td>T1016</td>
<td>System Network Configuration Discovery</td>
<td>Space Pirates collects information about the network settings of the infected machine</td>
</tr>
<tr>
<td>T1069.002</td>
<td>Permission Groups Discovery: Domain Groups</td>
<td>Space Pirates collects information about groups in the domain through the legitimate CSVDE tool</td>
</tr>
<tr>
<td>T1083</td>
<td>File and Directory Discovery</td>
<td>Space Pirates collects information about .doc and .pdf files in the system</td>
</tr>
<tr>
<td>T1033</td>
<td>System Owner/User Discovery</td>
<td>Space Pirates collects information about users of compromised computers</td>
</tr>
<tr>
<td>T1057</td>
<td>Process Discovery</td>
<td>Space Pirates uses the tasklist.exe tool to retrieve process information</td>
</tr>
<tr>
<td><b>Lateral Movement</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1021.002</td>
<td>Remote Services: SMB/Windows Admin Shares</td>
<td>Space Pirates uses the atexec.py and psexec.rb tools to move through the network</td>
</tr>
<tr>
<td><b>Collection</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1119</td>
<td>Automated Collection</td>
<td>Space Pirates searches for and copies files with the masks *.doc and *.pdf</td>
</tr>
<tr>
<td>T1560.001</td>
<td>Archive Collected Data: Archive via Utility</td>
<td>Space Pirates zips stolen documents into password-protected archives using 7-Zip</td>
</tr>
<tr>
<td>T1056.001</td>
<td>Input Capture: Keylogging</td>
<td>Space Pirates malware can capture user input</td>
</tr>
<tr>
<td><b>Command and Control</b></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T1071.001</td>
<td>Application Layer Protocol: Web Protocols</td>
<td>Deed RAT can encapsulate its protocol in HTTP and HTTPS</td>
</tr>
<tr>
<td>T1071.004</td>
<td>Application Layer Protocol: DNS</td>
<td>Deed RAT can encapsulate its protocol in DNS</td>
</tr>
<tr>
<td>T1132.001</td>
<td>Data Encoding: Standard Encoding</td>
<td>Space Pirates malware can compress network messages using the LZNT1 and LZW algorithms</td>
</tr>
<tr>
<td>T1573.001</td>
<td>Encrypted Channel: Symmetric Cryptography</td>
<td>Space Pirates malware can encrypt network messages using symmetric algorithms</td>
</tr>
<tr>
<td>T1008</td>
<td>Fallback Channels</td>
<td>Space Pirates malware supports multiple C2s and can update the C2 list through web pages</td>
</tr>
<tr>
<td>T1095</td>
<td>Non-Application Layer Protocol</td>
<td>Space Pirates malware uses its own protocols to communicate with the C2 server</td>
</tr>
<tr>
<td>T1105</td>
<td>Ingress Tool Transfer</td>
<td>Space Pirates downloads additional utilities from the C2 server using the certutil tool</td>
</tr>
<tr>
<td>T1571</td>
<td>Non-Standard Port</td>
<td>Space Pirates uses non-standard ports, such as 8081, 5351, 63514, etc., to communicate with the C2 server</td>
</tr>
<tr>
<td>T1572</td>
<td>Protocol Tunneling</td>
<td>Space Pirates uses the dog-tunnel tool to tunnel traffic</td>
</tr>
<tr>
<td>T1090.001</td>
<td>Proxy: Internal Proxy</td>
<td>Deed RAT can detect and use a proxy to connect to C2</td>
</tr>
</tbody>
</table></div>
<h3 id="id5-2">IOCs</h3>
<h4 id="id5-2-1">File indicators</h4>
<p><b>MyKLoadClient</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>947f042bd07902100dd2f72a15c37e2397d44db4974f4aeb2af709258953636f</td>
<td>09c29c4d01d25bae31c5a8b29474258dc1e40936</td>
<td>a2f2e6cdd27c13d2d2d3a5d15e905bb4</td>
</tr>
<tr>
<td>949cb5d03a7952ce24b15d6fccd44f9ed461513209ad74e6b1efae01879395b1</td>
<td>55604a258d56931d0e1be05bcbe76f675ed69e6e</td>
<td>5cce810a04197dc25231c477e7e0b402</td>
</tr>
<tr>
<td>35e36627dbbcb2b6091cc5a75ab26d9e5b0d6f9764bc11eb2851e3ebd3fbfe6e</td>
<td>415ae82bc0aa94e425009068a239e85a78b8e837</td>
<td>f250cc6ea8b240cfe9eb7e2007656e53</td>
</tr>
<tr>
<td>730b9ee9f031c8c543664ee281c7988467a3c83eabbbde181aa280314a91ba41</td>
<td>7be81aa01715c78166b8529eb999ec52f01a6367</td>
<td>399e655f1544e6c34601d3ee1e99d088</td>
</tr>
<tr>
<td>16c2e10b2e3d74732edfae4a4fcc118600e9212162256434f34121fa41eaf108</td>
<td>7f9d53dc8247e68bfc30c2399eb227a9f1aa9dae</td>
<td>850c1355f713c6f6235863d7245221ea</td>
</tr>
<tr>
<td>b822a4ec46aacb3bb4c22fe5d9298210bfa442118ee05a1532c324a5f847a9e6</td>
<td>869bd4d2520e5f2cf1d86e7fa21d0fb9a8fae41b</td>
<td>12c83dc14e08c206725933e7b69e8e66</td>
</tr>
<tr>
<td>192499ad69ec23900f4c0971801e7688f9b5e1dc5d5365d3d77cb9bf14e5fd73</td>
<td>c3f82d46c5138ba89e3a8fe5ea80ce3b0d2467c0</td>
<td>5865679e252c0c9fcfcae4546760f7a5</td>
</tr>
<tr>
<td>56b9648fd3ffd1bf3cb030cb64c1d983fcd1ee047bb6bd97f32edbe692fa8570</td>
<td>a8d5e941b04cdd0070fe3218fa1bc04fb1bdd1b4</td>
<td>a5d85f982d6650b26cccee4741fc3f00</td>
</tr>
<tr>
<td>0bac8f569df79b5201e353e1063933e52cfb7e34cd092fc441d514d3487f7771</td>
<td>64d97ea909a9b14857490724f19b971bb95d641d</td>
<td>cb9617de5bc93949844a3e26e1360aa3</td>
</tr>
<tr>
<td>1bab80116fa1f1123553bdaf3048246f8c8a8bb3a71b2a13e87b704e68d10d2b</td>
<td>3f32c341a71a32b6421822f44d4efde30d15421b</td>
<td>e26713d8091da1946a158f168342cae9</td>
</tr>
<tr>
<td>444d376d251911810f3f4b75923313b3726050153d50ad59deff5a0b8b1ada20</td>
<td>90ff670baddb8bce0444a8a422096461e78fb287</td>
<td>bf11b368d610922ac28cd4a9f20bfe97</td>
</tr>
<tr>
<td>84eb2efa324eba0c2e06c3b84395e9f5e3f28a3c9b86edd1f813807ba39d9acb</td>
<td>82c18765ac3a1a2ecf3f258c0912beaf5aedd175</td>
<td>ddc9174f111e8aa445a71b8eeb0ad490</td>
</tr>
<tr>
<td>14b03ac41b5ef44ca31790fefb23968f2525c3aabfe11e96b9b1ccb6215eb8be</td>
<td>e5882192901c00d8ac47bd82b7d4565761847e7b</td>
<td>7b7c21eac0d9a06178a68d73fc5a18a6</td>
</tr>
<tr>
<td>b1d6ba4d995061a0011cb03cd821aaa79f0a45ba2647885171d473ca1a38c098</td>
<td>9f671e338bc9b66e2dd3b7a3c9115723911b8f65</td>
<td>135f224c2d740b1f1b6f43235e96d3f2</td>
</tr>
<tr>
<td>5847c8b8f54c60db939b045d385aba0795880d92b00d28447d7d9293693f622b</td>
<td>878b2b8543ee103841cf30af70813b1c27434d71</td>
<td>10b52c1ccaba52a52c991b05704bb12e</td>
</tr>
<tr>
<td>95811d4e3c274f4c2d8f1bf092b9ddc488aa325aabf7c87a2c4877af4ba8bfb7</td>
<td>6b0bebd54877e42f5082e674d07563f527fdd110</td>
<td>fed14e228ba25fdef9904adaf70c145f</td>
</tr>
<tr>
<td>0712456669e65b2b3e8d1305256992c79213a6dd4fd9128cf3e78ab9bae3cff6</td>
<td>ee6b0845ebaae57f88b262c198fad8cf151f6b85</td>
<td>72571ebddf49e7546f9d5fafc0664e0c</td>
</tr>
<tr>
<td>607c92088b7a3256302f69edbfad204cab12bf051a5aac3395130e18ae568dd5</td>
<td>2452567c5e28f622fa11c8e92f737cd5d8272abf</td>
<td>3562bd5a94f4e8d62250201e035e1a49</td>
</tr>
<tr>
<td>d0fb0a0379248cdada356da83cd2ee364e0e58f4ed272d3369fe1d6ca8029679</td>
<td>96bae22955bd85110c3f0b7de9a71b81c025f76a</td>
<td>8a8425a0a4988fa7e9bf98def23c1ec4</td>
</tr>
<tr>
<td>a8a16168af9dcdc4b34d8817b430a76275338dbbda32328520a4669dbe56e91b</td>
<td>57bd45e4afb8cd0d6b5360de6411ae0327812d5f</td>
<td>a2b245bbb1de4f61dd8c31f391b28605</td>
</tr>
<tr>
<td>7b7a65c314125692524d588553da7f6ab3179ceb639f677ed1cefe3f1d03f36e</td>
<td>a97b1e1e0de7f0eab5304d206f4d7131987aca6e</td>
<td>568594397a24a53ecbbb9c7766194678</td>
</tr>
<tr>
<td>f6c4c84487bbec5959068e4a8b84e515de4695c794769c3d3080bf5c2bb63d00</td>
<td>9358b341bc217dcd15599b43d88b157f8a9f4882</td>
<td>05a025736a6fd75f183a04a267cee165</td>
</tr>
<tr>
<td>467979d766b7e4a804b2247bbcdde7ef2bbaf15a4497ddb454d77ced72980580</td>
<td>ae021c91c759d087ead95319608326e0ed154cfd</td>
<td>78acab8a8d263968c46ef07d8ba98f0a</td>
</tr>
<tr>
<td>3e57ca992c235b68027cb62740d8e86a3294ac0ebcff4a2683b29bdaec016646</td>
<td>aad3241fd23372523528a99f4c18127a3ebbea59</td>
<td>a75c81a18e3965b5942e7b1669db16ca</td>
</tr>
<tr>
<td>c3415bddc506839614cbb7186bfc6643713806de4f5b1c15445e96a644b44bea</td>
<td>e29b263a89217412f45d6c7a0235b19af030755a</td>
<td>b1f907379148c1e09009cda3cbd3877b</td>
</tr>
<tr>
<td>d3a50abae9ab782b293d7e06c7cd518bbcec16df867f2bdcc106dec1e75dc80b</td>
<td>a9d64e615171b05a402422056ddfcd250febae93</td>
<td>b03192389159b15f5552c82a29c747fe</td>
</tr>
<tr>
<td>69863ba336156f4e559364b63a39f16e08ac3a6e3a0fa4ce11486ea16827f772</td>
<td>ec928047d511286c4db2580045d02ced34b639ea</td>
<td>27ea69e0233f32d521c7bb1330690731</td>
</tr>
<tr>
<td>50f035100948f72b6f03ccc02f9c6073c9060d6e9c53c563a3fdb1d0c454916e</td>
<td>d5ce13a66e8407baec0f447c7fb41d493fd8d73a</td>
<td>343a9cc37cc9843cf862dd946c7eb714</td>
</tr>
<tr>
<td>6bc77fa21232460c1b0c89000e7d45fe42e7723d075b752359c28a473d8dd1fd</td>
<td>74847db3abdb5b0fd3952bb76018f9346815035a</td>
<td>359ae18fbfc16b5b09e0f571d563d8e6</td>
</tr>
<tr>
<td>3ccae178d691fc95f6c52264242a39daf4c44813d835eaa051e7558b191d19ee</td>
<td>0e40d0424aefa672c18e0500ff940681798f2f02</td>
<td>196222b313b6c2ef728695ad5133da06</td>
</tr>
<tr>
<td>a99612370a8407f98746eb0bf60c72393b1b4a23f52e7d7a6896471f85e28834</td>
<td>757af512d07fc8fe1167750a748dbb9c700f71f1</td>
<td>6b2e4ff182bffe5a22944fa8d2a7d41d</td>
</tr>
</tbody>
</table></div>
<p><b>Zupdax</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>f2ce101698952e1c4309f8696fd43d694a79d35bb090e6a7fd4651c8f41794a3</td>
<td>9ec2f21641bd3f482b4c85cd6050432dc05e7680</td>
<td>d0cb15e5fd961e4f5b3b120fc60dbdf8</td>
</tr>
<tr>
<td>84b8bfe8161da581a88c0ac362318827d4c28edb057e23402523d3c93a5b3429</td>
<td>6f1b4ccd2ad5f4787ed78a7b0a304e927e7d9a3c</td>
<td>6e9ff09f5a7daa46cfbfb1cf5707179f</td>
</tr>
<tr>
<td>3a093f2c2cb5ba59197a4c978cfa9687d5778a53ae17c2ce2757d3577a5e7c69</td>
<td>9e0e0582eef9e2e2f38893a06c552d607f835fcc</td>
<td>b0f95350b13b65ae427075fbdf5f7230</td>
</tr>
<tr>
<td>137a3cc8b2ecd98f7d6b787d259e66ca2c1dae968c785d75c7a2fecb4cbbcaf0</td>
<td>1a7967c6357269414cfd1f9e1060a8613bc59f7b</td>
<td>869de5ac4d3520373a8a2f1a5991d365</td>
</tr>
<tr>
<td>9e010a2b43a6b588b95b5281544739833fb0250e8e990a4fe9879459f92367d0</td>
<td>24732b6b00326439dc373df56aff78c9c82d7169</td>
<td>814019ff0004d54c9b14981ac02752d4</td>
</tr>
<tr>
<td>408608c6b6f7299561c04f37ab46ca9c82834428ad0e8d42b16ca5da9b86d62e</td>
<td>9f596346c9acc09772bc5baf8c4dbc80fbdbf03b</td>
<td>3801a156c01b2d3ab42bc431a5f2fc46</td>
</tr>
<tr>
<td>6cc33a21417967a1bb3294179ea10aa3d9ee8d945a5ea0f6c44530189344a10a</td>
<td>6f43f6e8cb1474a6272f9632487fa1932dfba18c</td>
<td>6d6c3cbf2c2a3f106fcffdcbf4c70990</td>
</tr>
<tr>
<td>24b749191d64ed793cb9e540e8d4b1808d6c37c5712e737674417573778f665b</td>
<td>26062de2657bd2a3c228049af27333d2c46a041b</td>
<td>58c734474fc415905c6c9f95783d79b7</td>
</tr>
<tr>
<td>a95dfb8a8d03e9bcb50451068773cc1f1dd4b022bb39dce3679f1b3ce70aa4f9</td>
<td>1e8bf3c1a05f37857a9e8f7adb773ed9b9af1b8b</td>
<td>4ef9466b7ef300ec5fc98257e07efd40</td>
</tr>
<tr>
<td>efaa30bef6327ca8123e5443aa831dd7173de8ac9a016aaa2ae878641f85f952</td>
<td>04951144dc621f5f7ff2d66c8bcb710b77cc3d55</td>
<td>80397808492e12b83e5c9f5467740fd7</td>
</tr>
<tr>
<td>699bd1babf50a360e0a2ba6b5e0ed2379571ee8356f3f08b09ff8ce434d72696</td>
<td>3c10a0256cc1f0af3c31770314257eb8f994260c</td>
<td>09c34b06199eb1cacfbfc159e88e13e4</td>
</tr>
<tr>
<td>d6af2d1df948e2221a4bdaa3dd736dc0646c95d76f1aa1a1d314e5b20185e161</td>
<td>44858761afc0439ba361c90f04ae9719b362d315</td>
<td>9afe1f1936145a0a2ff1f6b34160c37f</td>
</tr>
<tr>
<td>0ecd7741dbdfa0707ccd8613a5ea91e62ab187313dd07d41760c87ed42649793</td>
<td>daacbe773105fd7b0834ed2e3a05ef80275e3c11</td>
<td>e8357ac87261f74c5d40e4baa273d3f0</td>
</tr>
<tr>
<td>2360fa60a1b6e9705bf6b631fcfe53616f37738cf61bc0444ea94ce09c699c7f</td>
<td>54e9de60e3a5c58fc2f3daadd18a1355350e13ec</td>
<td>e0592c56ee8f0a2149fd9a8ed3b85f6f</td>
</tr>
<tr>
<td>ffe19202300785f7e745957b48ecc1c108157a6edef6755667a9e7bebcbf750b</td>
<td>25d0321df77623c5af6629c357201941d4cd452c</td>
<td>ddf7ed52856f7ab9cb75403c30cc2c2b</td>
</tr>
<tr>
<td>d45c1ce5678259755df24bd680316a945515fc1bd916ce1d504f9d27cf9d03e4</td>
<td>0f5a74f11c270a02b0c0cc317e0b850c78261b04</td>
<td>a2972cb5228a56a530543f187e33e160</td>
</tr>
<tr>
<td>00847787ea6568cfaaa762f4ee333b44f35a34e90858c1c8899144be016510ef</td>
<td>d82bc3800396452ee519fbb35f708802fee335af</td>
<td>41f3e576216bb551a0ab1f3f18e9749d</td>
</tr>
</tbody>
</table></div>
<p><b>Downloader.Climax.A</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>fa2305975aded0fd0601fdab3013f8877969cb873fb9620b4d65ac6ff3b25522</td>
<td>003f46f74bbfc44ffd7f3ebfec67c80cf0a07bbf</td>
<td>24b90157056913bef8c90b6319164afe</td>
</tr>
<tr>
<td>0a0ce7fb610e3c037beb2c331e147c8750ba9f7ea2ece2f91f27f1a83c6839e4</td>
<td>1e0a63331814aab39ffb7806289a8ef3433553c3</td>
<td>68875f4b80fd1350af7dbea4d05a811b</td>
</tr>
<tr>
<td>898741e11fbbe6b5534fb12a489add1aaa379ee6757c0bd8d6c631473d5c66f7</td>
<td>3fa2f11e142f5f07f2dd63d89b58d01e9397ded0</td>
<td>1fe521f0ad24145704e6085b4a4859a9</td>
</tr>
<tr>
<td>59e4b8d2b65f1690139c094ee27182285febda115304c44e8d9e7329e09dc794</td>
<td>18cd249add7cfae87615ca5b32aca8503337a2d6</td>
<td>9bf855e5e8480fdb93fd12068699446d</td>
</tr>
<tr>
<td>0c64cc96a52ff9bdf6593e948fed1bc743bdf714ec1f7b392490423d927c3bb4</td>
<td>bb1c27db5f8d7e43592fa81cbfa319f1ce7c828f</td>
<td>0830581452de0c91090f8de7dbd123fb</td>
</tr>
<tr>
<td>1ca423fe0159e75718eb66524cd24002071a06b2fa68ce2cbb39d10682a154a6</td>
<td>78c8298b8357eee1a2d5d9da86f290bad798ce39</td>
<td>ff5896c0749b1e8c403203ebb679ab09</td>
</tr>
<tr>
<td>e9c94ed7265c04eac25bbcdb520e65fcfa31a3290b908c2c2273c29120d0617b</td>
<td>47edf57c5724ef9ff232dbb76f749977c767106a</td>
<td>ef8bcb5865669bc1d1776aeecd1c29de</td>
</tr>
<tr>
<td>d376164e377577fc590a780d15603d6411fde6e45ea21971670d5dff597d9def</td>
<td>d9e12317a43f233a739972723abc00f1b88f53b0</td>
<td>5faa973967fee2f35229685ceacf20b3</td>
</tr>
<tr>
<td>4301abae1a62f87b1c51acc6a6b4f2c3926a248b4aa9c04b734cef550196c030</td>
<td>cc402936b3d6fa5db14b54f0065404d975f2aeb5</td>
<td>f0f2731cabf1c1a6381d0cd265c937bd</td>
</tr>
</tbody>
</table></div>
<p><b>Downloader.Climax.B</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>7d9e1a193402b87dbbb81c2ab95632686154cff9c991324e46b275850a4b2db6</td>
<td>36a6eb414c9b8a7c2cdf12eb46e490d288e7a47a</td>
<td>98416b41f386bb45ed36c2b6bd0f55ca</td>
</tr>
<tr>
<td>dd82a7b9b5dc0ee1f9e9f19d46212f3e2a1d09a816f5c0ece96275ee221fca13</td>
<td>cf0fb4950130abddead04c21316912418562bf8a</td>
<td>a74341091f88d5980a2394be28ed0239</td>
</tr>
<tr>
<td>9f4d15ca56f87a5ded792f2a27a4c112bf59517079aedbefe49fcd0474600b69</td>
<td>bbbca10a8545b0421fbfcbd0b3b7a42527fea641</td>
<td>1bdaa370b064f90abbc2c7cecc6d3316</td>
</tr>
<tr>
<td>5872abe12a8e4c7182e4c6a894d6c27961b00d333657736bcbfd7cb1b38af2ed</td>
<td>133eca56512d8d5f8c730e102bf9042915e9bf41</td>
<td>c60df47562dba1c75e9932aa088c24bf</td>
</tr>
<tr>
<td>8dcb99e56c888800e0712faddc07d991b6dcb7a6fd4cceffe9e27fe3da83d206</td>
<td>2e76fa63adc870ca1de19fc7ea5afd6860f36e32</td>
<td>1a22342f883ad150c5a6f7e85e9ba2ae</td>
</tr>
<tr>
<td>7079d8c92cc668f903f3a60ec04dbb2508f23840ef3c57efffb9f906d3bc05ff</td>
<td>8993d0d5ec2f898eb8d1b8785cc5bb3275b43571</td>
<td>1690766e844034b3c2ab4f853bd59df7</td>
</tr>
<tr>
<td>5e8df46c9bc75450e2660d77897fa3dfa4d6c21eea10a962f7a9cf950ca9ca76</td>
<td>b0506335e332d64d6568f7830a8fab6a8a6ce1f8</td>
<td>923d60f3e63c95021f9e99f943fcfbbc</td>
</tr>
</tbody>
</table></div>
<p><b>RtlShare</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>8932c2d1ed0ae1f64d9cff4942f08699b4a7b1b30f45626d7bc46c8c51f8a420</td>
<td>8903e04d7ffae2081867337801ca2fa5f93220bd</td>
<td>9d116d94151682934dfd753485c91b88</td>
</tr>
<tr>
<td>8ac2165dc395d1e76c3d2fbd4bec429a98e3b2ec131e7951d28a10e9ca8bbc46</td>
<td>c0988a4ade711993632a03a2f82eea412616ef2a</td>
<td>ab01a4642e76df9e20a6d936d1f287fc</td>
</tr>
<tr>
<td>3f6102bd9add588b4df9b1523e40bb124af36a729037b8c3f2261563e4fa4be9</td>
<td>c865ef013018db3ed00f946b96a7a98ef2660e65</td>
<td>e8e966455a60c6f5dbfce3e82564d2c7</td>
</tr>
<tr>
<td>785ac72b10fd9cf98b5e2a40dc607e1ff735fcd8192bf71747755c963c764e2d</td>
<td>a429d9c8c67c8c8036ef05f7b4a27530ee6ae98a</td>
<td>f15c15e2b26f47b436b2a91d332ad59f</td>
</tr>
</tbody>
</table></div>
<p><b>PlugX</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>0f7556c6490c4a45a95f5b74ced21185fe48a788bcbe847017084ec1bf75d20a</td>
<td>53a17133173ee8f32261d4ac8afb956e1540f7be</td>
<td>4b6e1f5375552e09975f23fd8661e0f3</td>
</tr>
<tr>
<td>429b6c5d380589f2d654a79ea378db118db4c1fd1d399456af08e807d552e428</td>
<td>97ecc5aba4ce94a5012dcf609f2d325f293d4bea</td>
<td>3f8de0e26ee2f1f030e7d61215a227fe</td>
</tr>
<tr>
<td>0956ab263c7c112e0a8466406e68765350db654dbe6d6905e7c38e4f912a244e</td>
<td>457a592ece5e309cc8844623f29fc6be62c5be60</td>
<td>bdc734d2c049d77285fdb503aac86cd8</td>
</tr>
<tr>
<td>1c0cf69bce6fb6ec59be3044d35d3a130acddbbf9288d7bc58b7bb87c0a4fb97</td>
<td>ef3e558ecb313a74eeafca3f99b7d4e038e11516</td>
<td>b4f12a7be68d71f9645b789ccdc20561</td>
</tr>
<tr>
<td>a072133a68891a37076cd1eaf1abb1b0bf9443488d4c6b9530e490f246008dba</td>
<td>e9e8c2e720f5179ff1c0ac30ce017224ac0b2f1b</td>
<td>d5f5bb6368735f34440621b80fb8e003</td>
</tr>
<tr>
<td>1bad7e53cb4924576b221a62d2cddb4d18bd387734328b7d48e32046700e2df9</td>
<td>7539e5f25b3e66ea849ebee6bf6104d504573035</td>
<td>25db7152f66588dd8ce035f4bbd811d6</td>
</tr>
<tr>
<td>39083375012d2a854e6310411e7ce4c4e3440bd5784ae158599be25deaeabcb5</td>
<td>7ad24d1873325a02ca4644ebbebe5c5f95bb927c</td>
<td>e7a9d56297f8d0c16eca077b5f0a86bf</td>
</tr>
<tr>
<td>3c4483e1185d00b282b19910ad5e7970462122b8b7d8895860ffc132a05b3b9d</td>
<td>62d33015859f49e2ad178239891dbed78a0e2de6</td>
<td>a83b0a6b5c590aaf7528dc23ce1856f2</td>
</tr>
<tr>
<td>f8885d5caeec2627d808dc20bd1fbcd42732700686d34f1bb29d83d5d5115ee0</td>
<td>8a44433cfc2e4f116ebd59aac5f596f83c468d44</td>
<td>633eaedd4944db79d0ac68e71418c34c</td>
</tr>
<tr>
<td>07ef63b7c9554065e3a6047404d2526e8c8e450c5fe977247336626be403d790</td>
<td>a397d9d7d242bc748dc2bf5307d0f16c5144d98d</td>
<td>cfd0a7ab2c2c99dd341d844a5486599b</td>
</tr>
<tr>
<td>8d2ff35a5c941cb2f0438969be1a16116efacb51bb9820e6facc285640855682</td>
<td>702cf75a6b23a18001a909d6743a739837cc2053</td>
<td>0fe86427810229e4927b3a7091bea583</td>
</tr>
<tr>
<td>31af406fababf825eb15969970f5de1d2de9fa29a3ca609aed3174c48806492f</td>
<td>12e4407d5341836635ce54727ad4dae7712c2a4c</td>
<td>f4c9dd900488d6ad172f16a812b5e0fc</td>
</tr>
<tr>
<td>c150172ae47f9708bf4a87cf67eb19b09e6d4f5a565043f309c1da5ffc9bd656</td>
<td>eb6b2ddf1da767848ffe51f14b177298173227f5</td>
<td>7a4a791eeb0a195057a65ecceeafc8ff</td>
</tr>
<tr>
<td>5f8e8eada8ad8fcb007a1da7d2dedfdc55473cd5d65a287224c345edf9c1e964</td>
<td>a7837c8e3f789a112fbc2eea623c4e03664280ce</td>
<td>11fba00953cbd550be12a5691f79547a</td>
</tr>
<tr>
<td>fda4712cfb3007e7eb5f61b37c746640ff5428108c74106352b69a11193d79a1</td>
<td>628dc1642de5e74bf230e9b933f264196b9678bb</td>
<td>be4625cb6e797b05a5ce3f2f5d0618c2</td>
</tr>
<tr>
<td>17c4a6adca907b7cd0fc75d6008a307a3813ac3b75bfebb4f173360b5d2e7964</td>
<td>d5959009d3a2bdadd0db5385706920da21e5c8d4</td>
<td>ff7b237c3049fce0559876239e5c0ae8</td>
</tr>
<tr>
<td>b153195807d9b58168bba751517498268e396a79965c5d323fad5c16bbc9520d</td>
<td>c14b4468a33b12250b560a0c7e884e01dd986c95</td>
<td>9f4150eee0d18c7ebe6fe2881e40f1a2</td>
</tr>
<tr>
<td>7112f1033f1fafd9cef1862f6ea0a77994858bb54270deede1ed24b0f18fa7b1</td>
<td>bc0a54644b5ba7eff9ca10d8b42d73f0c69e4c53</td>
<td>824e76688a5b5bad414bc170721a29da</td>
</tr>
<tr>
<td>5ece318d3df972291896e858b76224c5ec34637d5409db44c89ec67ee0a6089d</td>
<td>b253c8ff5fc2cb1ea8933721c3a4002a42eec2f9</td>
<td>b0b6d1d000f031c2883df9f67360a338</td>
</tr>
<tr>
<td>e452ea28a9d3e37a2ac0cb8f4bca8ce41bea1a362d4c1680ab3ccaec6e5123d9</td>
<td>7f81103b574a3c26b478e9ab41abc422f979f299</td>
<td>49a5af86baf3d7bee422b841781d1bfe</td>
</tr>
<tr>
<td>195b39d40cd9d50e0b4b6b41f8b45140bb0f6e201e75b4398bd07b1e5959970b</td>
<td>5d449cad4b2a8d8a6b7489d82b110c370142acdd</td>
<td>ff58ce5d9d76502785ed1900056a4501</td>
</tr>
<tr>
<td>675abcf2bc7b1792b50fa296315f39ce5ac8e7e3f754a9be867eb0dd6bbf1799</td>
<td>103cf5647a8dc33d9d611b5b1eafc3e498d02dab</td>
<td>cb9b8cf286b84678784e7456b7d8fa85</td>
</tr>
<tr>
<td>e60757a893881559104513d75cf521c8f72e10653442b9f2510402453e48cdcb</td>
<td>b2e4179f7a2d1942fdb8e0fff632a3b65e9dce37</td>
<td>3a0536d8cd93119389d06575adc64079</td>
</tr>
<tr>
<td>a9acf75a658cb6e8aed6f638b08931fbe74f7b69a26e6b45486caff9d8e455a4</td>
<td>187541ef47985e11324be53309808e23b33c12a1</td>
<td>ef479d7cd2e77a764ffb0a4b291a70fc</td>
</tr>
<tr>
<td>ad48650c6ab73e2f94b706e28a1b17b2ff1af1864380edc79642df3a47e579bb</td>
<td>f1a8c309806c90c100e680299a037ec71cf4397c</td>
<td>1cba2ec3fc5f1451aaf3a75c9823825e</td>
</tr>
<tr>
<td>0b1ed5214dd31a241920de4b5c7cdf3f02ad5f76260bcd260328732c9bedbcec</td>
<td>9be46478e3cbeb51267b8fb88952860790051c07</td>
<td>b404e426c53c066620d440f92331a113</td>
</tr>
<tr>
<td>555fd0d7c1584f7b504ac65f34017f7070ee12ce0f4070cd0555361b3adea54c</td>
<td>1f10627b46b51a97b059395bf062117fdfae4cf0</td>
<td>895644020eba9ec62d47ca85ccf94012</td>
</tr>
<tr>
<td>fe885d1a2bef4e99dcbcacd9393c59ed52a718ff2cbbc6a15e443e150edaa662</td>
<td>9d490725443c9f426cdc0bfa75b3d900404153c0</td>
<td>13febb9240f37a69f251fd6055b8e1eb</td>
</tr>
<tr>
<td>354c3c2a7602475b72727158ebae8261f0ac9f2ce6c2ab86ee9ec38169b40f62</td>
<td>68a651026a3bae94776a9e1a45c6cca58b9609b7</td>
<td>1d866ed934518061839588565ff71edd</td>
</tr>
<tr>
<td>ab1282afced126da7d330d7be338dfe1f3623970a696710e55a67fb549118f1d</td>
<td>3ebe6bd2d44a4d54d8ba314b92c9c379398bf095</td>
<td>c063adbb4a8a41a8678c594258065fb7</td>
</tr>
<tr>
<td>e3d32b0758f98b55483a18631ae42e944c387b5a73b1fbc39f62b2c13a6ec198</td>
<td>5fe3b83b3ccdf78303b59e5f3e628a2cf80e9d13</td>
<td>923165c972c38678f6d9ab4cef36a007</td>
</tr>
<tr>
<td>a4576ca47764284bc3aa8e5dacad84163ca56258dc8af4aa4916bb3bacbd58e0</td>
<td>1166b3daa8ad2496a8b71f37656be7ac41821e03</td>
<td>a1503cec20057e367cff4db5e4a8b93c</td>
</tr>
<tr>
<td>8871bd39918868d4f4390e430e82730819182a8ae9fb3ef7096c2ce5dbafbe26</td>
<td>f1d74087627879e224303ee56e74d53f6dc67204</td>
<td>ec0a9cecb7e1b4b40ffdba19407332ea</td>
</tr>
<tr>
<td>f5e780d10780f45adb0ddc540978d7e170e8c143a251003651e12c18142cee16</td>
<td>8e5ef3c08eb584d041a7aa93473aa2e31787d111</td>
<td>f16790e4e2029367cf3ae07037169424</td>
</tr>
<tr>
<td>37b3fb9aa12277f355bbb334c82b41e4155836cf3a1b83e543ce53da9d429e2f</td>
<td>ea7595bff1cfd1d72fe72417bf263d9adc9bc59e</td>
<td>9ae8a7837c60f3f587701934ff41bd96</td>
</tr>
<tr>
<td>6cd5079a69d9a68029e37f2680f44b7ba71c2b1eecf4894c2a8b293d5f768f10</td>
<td>50064d66c9b55b6f7d22051b81914d8366fe36c8</td>
<td>d5915394a6916a00c426aa2827d97c0e</td>
</tr>
<tr>
<td>c21a3a44b46e7242c0762c8ec5e8a394ddc74b747244c5b83678620ae141e59c</td>
<td>31d67b5a5588b2d28365534c36a7b754f28e1df9</td>
<td>ecab63b6de18073453310a9c4551074b</td>
</tr>
<tr>
<td>fe18adaec076ffce63da6a2a024ce99b8a55bc40a1f06ed556e0997ba6b6d716</td>
<td>1e8dee59355e064790d05e44199443d94ab1aa02</td>
<td>219983c1a7c6c08707f4907b17a72eb9</td>
</tr>
</tbody>
</table></div>
<p><b>PlugX demo dropper</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>50f1092795c493c5275637b81fbcacfc4ca7951dfda06782a792988bbde2f5a1</td>
<td>8e0ee1ceb7ce14994a481c266eef1f67087b59b1</td>
<td>6dfabe77bf18f1424cf47e2e0794f6d5</td>
</tr>
<tr>
<td>82894e2534feb0d9edbb3dd5339c3ff0f6eb73b07e40f0f8b15e759e8a55d052</td>
<td>0b8c9bbea5614d2fec852cf2f74fd20b591edbb2</td>
<td>814e3cfdbf77e8b400dda78ab0a80e24</td>
</tr>
<tr>
<td>e5f471dcd4f5a47f0a53fc389e58c70b9ef81805c503ed6b100950d02ee7f777</td>
<td>9eb2ed9db419cda517fbea69a9204644e946913c</td>
<td>a70db29d6a7ba154eeb029be19136cb6</td>
</tr>
<tr>
<td>aeee80588212bc941e179ca95931a91bf446cbc1446111d4e520243d708f1d5b</td>
<td>dbb93c7b7e36b5eb0dd408e836f7bf305ee076bf</td>
<td>661635e774fef37e56928333d6040cac</td>
</tr>
<tr>
<td>c66dda5131c0aaa118e7cbb5de16fbc984f1f0c9194717b8981bca0fb024f170</td>
<td>58ec65e2d39e3dff7df3c85d3896ab37a04cd475</td>
<td>a96e3b2fd7c8bb7c903240e0b9b1e980</td>
</tr>
<tr>
<td>051b08ef35a6122bd9ff75609ccd50d84793e5502a9e428a57f2bf688d21d1e9</td>
<td>1b43bb893767f48bc134c1894f3390fd20dbb22d</td>
<td>d2b60af1360508ca2728f06f45a3f931</td>
</tr>
<tr>
<td>f96adc9e046ecc6f22d3ba9cfea47a4af75bcba369f454b7a9c8d7ca3d423ac4</td>
<td>cb85578a26dd90f536b9c97cf88ff93baba22107</td>
<td>4412dcf06cb428d710297a3efcf24a91</td>
</tr>
</tbody>
</table></div>
<p><b>BH_A006</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097</td>
<td>c0292c55fca5f68f4f4831fb5d2a77a78c1f1a45</td>
<td>36a8ce6f27c251a81d9deada291b2a2c</td>
</tr>
<tr>
<td>e76567a61f905a2825262d5f653416ef88728371a0a2fe75ddc53aad100e6f46</td>
<td>e45a5d9b03cfbe7eb2e90181756fdf0dd690c00c</td>
<td>06af27c0f47837fb54490a8fe8332e04</td>
</tr>
<tr>
<td>f2ab7d78377fe1898eb6406d66668c9dbbe0836e9c97af08bc57da56a78272a1</td>
<td>87ae868159d572acbb376faf7fda6593058f8518</td>
<td>c241e8486a0674f7af1b0928b59b94df</td>
</tr>
<tr>
<td>1a4cc1c66082f4bb10b917bc434ecc9e7e4f92877fd42e3fbe5e8a96154318f5</td>
<td>927f428e0de0391a6392943b3c79fda8363828d0</td>
<td>758eabd1b7b644b01a21011d6e1159e6</td>
</tr>
<tr>
<td>1b0e8f31b513ad53db7ca6d8db35c37eb24eaddf859521b6913209af934808ce</td>
<td>9df3431e26b958f671b28d1c4d34dfa5c0c653bf</td>
<td>94759ce1618ffa9e38cfa7c3ad43061a</td>
</tr>
<tr>
<td>f42f8896183d298a6ecd2c3fa78393bf7e58bc33ab7994e35346a57cbe2e2521</td>
<td>f214cbda1dcdc75b3d355affef74354a104d5b29</td>
<td>5ea6d25bb95d8643dfe2deb4afd92843</td>
</tr>
<tr>
<td>bd366f22fd0f1b5b5a041621f70b357287c45883e847bb8f31809d16ca46052f</td>
<td>c213d8d98359c32e1b320b8ab0cf168e3f369441</td>
<td>8f088b92a9f68681dd17f0fb89b1058d</td>
</tr>
<tr>
<td>77052236a7061f91ba6442568f6db1200169fe4afdf9c3c81750e0929dd4fb96</td>
<td>aa9b71858b893a131908b3236bb724226af6b1dc</td>
<td>02a7272416fefc68ff214b24214fc370</td>
</tr>
<tr>
<td>2bd9b56ddcccc0a9d33debd1c56b493bb60f8b4229f728b0c6c3bac0e556d080</td>
<td>0e2c294692cebcaecb5e2f3677d07f96a09ab610</td>
<td>c7f0ec11b70be64695d826587d8fb9f2</td>
</tr>
<tr>
<td>59fe1b5b641c140225ed12a8122da47716b9d841754f4604a2bdbb2a0dc765ad</td>
<td>7324dd736142db51c4d3887c30df810a45b46b08</td>
<td>32cb37c984fe0d00009e7566f18463eb</td>
</tr>
<tr>
<td>cb35899e21269b564ffdd4785961195af1779daf5ff3e64746e2d6368744ba2a</td>
<td>5ad5183ce68975a59d85d650e72b13a845be82e4</td>
<td>7950cf56e58e2be3fc401885e815e9b6</td>
</tr>
<tr>
<td>f97d1f7e3ed963654fb68803f2ac6cd79580abb8f86ab477c49aec76157bb184</td>
<td>cf1a335ffe672f19fa0160151c50eb9209b5e99b</td>
<td>b66203f634e48430af63a3c1503b2a4d</td>
</tr>
<tr>
<td>74af7c238935e2fc11f97e122bbcf0b813c27f5a4a3b8aa47a574c24003df533</td>
<td>ffb8da41d8a92b4cbeaf4d85a4c2732b90d178c3</td>
<td>7428f82ed54e0d75c37afc0dde45ea57</td>
</tr>
<tr>
<td>9cd487bcec62fb5192fbe654ca5c02750b846070b85016fc3d2071add8e04f39</td>
<td>b20c993e963a5540593120cfc1b596ba42aff649</td>
<td>46c4fd5ae4f5907d5ba3faa2978ffbe5</td>
</tr>
<tr>
<td>b0a58c6c859833eb6fb1c7d8cb0c5875ab42be727996bcc20b17dd8ad0058ffa</td>
<td>fcc66ea2198a03def308c53adda78d4a64ed22f7</td>
<td>823e689e34be362faeddb2bd8d32a05e</td>
</tr>
<tr>
<td>9843ceaca2b9173d3a1f9b24ba85180a40884dbf78dd7298b0c57008fa36e33d</td>
<td>6c8ab56853218f28ac11c16b050ad589ea14bafe</td>
<td>964be19e477b57d85aceb7648e2c105d</td>
</tr>
<tr>
<td>9969fc3043ed2917b76b6dbae36bd2e0846b90e9d93df4fc4f490fdf153da435</td>
<td>e102a2ff536d2df93ec9c507e52c04bba773b550</td>
<td>fff3c03e6c455eaba70ec816a4439b95</td>
</tr>
<tr>
<td>690f5bd392269d80061e8e90a9aedac4f9bb2e898db4211b76a6e27a1ed95462</td>
<td>5c1d4af865b4d514340d6a2dbb42523a142ab5d8</td>
<td>18ea3d4c9639a696b96e49f53af2b161</td>
</tr>
<tr>
<td>7bd1016b5f3a5004166de5cf7f1846024684979de413417d83321c931c1b5929</td>
<td>cebabb80844c823df4539f4db29d7bca27e1f50a</td>
<td>89de9c0ce214d2e437e2ce6d266ab100</td>
</tr>
<tr>
<td>1687af091d38108eeed634c0539b9639c6128aed9588a370f51a957bee534f39</td>
<td>53ab54c2c3ea3d6921fa2bf5fde69255dc41fbed</td>
<td>ae755e20cd3a6f2721096736c5c3aed5</td>
</tr>
<tr>
<td>16d2b4bb67147c0086c5716639e226fe1656da26f40bac86f7df970fa92a8460</td>
<td>1f89b71204ef85c00a6675f65acf4b834c0a58ce</td>
<td>68f52f72f9f3becd0f51da342dd6bd31</td>
</tr>
</tbody>
</table></div>
<p>Note: the file with SHA-256 9843ceaca2b9173d3a1f9b24ba85180a40884dbf78dd7298b0c57008fa36e33d was erroneously listed in our previous <a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/shadowpad-new-activity-from-the-winnti-group/" target="_blank">report</a> as a ShadowPad sample. In actual fact, it belongs to the BH_A006 family of backdoor samples.</p>
<p><b>Deed RAT</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>ff87ec66b89db551d6f4ce33ad150fae7286f58d465179acf2b8001d9ca9bcea</td>
<td>6c2e080407f03e507316c7bc340ecfe2fa1c248f</td>
<td>508b845dbb4d182116fe1d3a7c52a578</td>
</tr>
<tr>
<td>761557ecc63ec5fbc2e3573f61a860bd8967f04818be25893361c63409ab5af0</td>
<td>60b4af5c44d0ccdfb6003ca77d5ddda808219972</td>
<td>60c6573fe8bc47943009b71046cbf895</td>
</tr>
</tbody>
</table></div>
<p><b>ShadowPad</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>9324d7a72c436d8eb77f3df72b6f41aa4e1b85f08ef7583e26de75e17cad490c</td>
<td>c82f168cdd311078bc1a9a748a0e304d26b10d04</td>
<td>e88442798b3881f41b369b849ed6ee52</td>
</tr>
<tr>
<td>06ce5271836a6a1ee40513b1de6991ccd87bc7ff640948f194e7c12bdf779fd9</td>
<td>3e38742d05ab64d1c484f157b345d339becef404</td>
<td>927af917daaee340c2095fb3f86ecaf3</td>
</tr>
<tr>
<td>d34b6306aeaaccea3b30dde377701c4a23b861b47f9bda777ca7dc0552f2754f</td>
<td>72881125929a2c445c6cd094fa13607b9cdea95c</td>
<td>15d973bcaef5f97329f76be89ee26cdd</td>
</tr>
<tr>
<td>d011130defd8b988ab78043b30a9f7e0cada5751064b3975a19f4de92d2c0025</td>
<td>a43edb2221919ac5d52bde498f604164b3c86118</td>
<td>08b419b754122d44b44831384c520b21</td>
</tr>
<tr>
<td>459f386be186c0e23234f299f2607d0eb2745eb743e1422a95ec2dca645b0e21</td>
<td>9d05decdda370292012ded9c4e04d8d46c1d0de7</td>
<td>3b0a45da21a9244970f91df6dde5204e</td>
</tr>
</tbody>
</table></div>
<p><b>Poison Ivy</b></p>
<div class="table-container"><table class="table-article">
<tbody>
<tr>
<td>672d1ec9f27870a9ed4983038e58e8577bacc735d5168d74bcff8d6ed9aa7947</td>
<td>f5ccdd6cc4aae67c822ddd4509f33672ca5335f4</td>
<td>4e87e5af554322a2c7c754701290c52c</td>
</tr>
<tr>
<td>2e35a1599b58e76167f2235d46840cc973dc49a6f14c0c2a2e91310a2fe2c2dd</td>
<td>d80b939d9d46cdff9cf20f6234186a1bf3b963c2</td>
<td>b1aadcb19d49519f4564d6f52c3c8efa</td>
</tr>
</tbody>
</table></div>
<h4 id="id5-2-2">Network indicators</h4>
<p><b>MyKLoadClient</b></p>
<p>microft.dynssl.com</p>
<p>micro.dns04.com</p>
<p>207.148.121.88</p>
<p>47.108.89.169</p>
<p>120.78.127.189</p>
<p>121.89.210.144</p>
<p><b>Zupdax</b></p>
<p>ns2.gamepoer7.com</p>
<p>mail.playdr2.com</p>
<p>pop.playdr2.com</p>
<p>news.flashplayeractivex.info</p>
<p>update.flashplayeractivex.info</p>
<p>ns9.mcafee-update.com</p>
<p>154.211.161.161</p>
<p>192.225.226.218</p>
<p><b>Downloader.Climax.A</b></p>
<p>bamo.ocry.com</p>
<p>202.182.98.74</p>
<p><b>Downloader.Climax.B</b></p>
<p>ruclient.dns04.com</p>
<p>loge.otzo.com</p>
<p><b>RtlShare</b></p>
<p>asd.powergame.0077.x24hr.com</p>
<p>w.asd3.as.amazon-corp.wikaba.com</p>
<p>45.76.145.22</p>
<p>141.164.35.87</p>
<p>202.182.98.74</p>
<p><b>PlugX</b></p>
<p>microft.dynssl.com</p>
<p>api.microft.dynssl.com</p>
<p>micro.dns04.com</p>
<p>www.0077.x24hr.com</p>
<p>js.journal.itsaol.com</p>
<p>fgjhkergvlimdfg2.wikaba.com</p>
<p>goon.oldvideo.longmusic.com</p>
<p>as.amazon-corp.wikaba.com</p>
<p>freewula.strangled.net</p>
<p>szuunet.strangled.net</p>
<p>lib.hostareas.com</p>
<p>web.miscrosaft.com</p>
<p>eset.zzux.com</p>
<p>elienceso.kozow.com</p>
<p>lck.gigabitdate.com</p>
<p>miche.justdied.com</p>
<p>45.77.16.91</p>
<p>103.101.178.152</p>
<p>123.1.151.64</p>
<p>154.85.48.108</p>
<p>154.213.21.207</p>
<p>192.225.226.123</p>
<p>192.225.226.217</p>
<p><b>BH_A006</b></p>
<p>comein.journal.itsaol.com</p>
<p>www.omgod.org</p>
<p>findanswer123.tk</p>
<p>45.76.145.22</p>
<p>103.27.109.234</p>
<p>108.160.134.113</p>
<p><b>Deed RAT</b></p>
<p>ftp.microft.dynssl.com</p>
<p><b>ShadowPad</b></p>
<p>toogasd.www.oldvideo.longmusic.com</p>
<p>wwa1we.wbew.amazon-corp.wikaba.com</p>
<p><b>Poison Ivy</b></p>
<p>shareddocs.microft.dynssl.com</p>
<p><b>Third-level DDNS domains</b></p>
<p>microft.dynssl.com</p>
<p>reportsearch.dynamic-dns.net</p>
<p>micro.dns04.com</p>
<p>werwesf.dynamic-dns.net</p>
<p>fssprus.dns04.com</p>
<p>loge.otzo.com</p>
<p>alex.dnset.com</p>
<p>ruclient.dns04.com</p>
<p>bamo.ocry.com</p>
<p>tombstone.kozow.com</p>
<p>toon.mrbasic.com</p>
<p>fgjhkergvlimdfg2.wikaba.com</p>
<p>rt.ftp1.biz</p>
<p>apple-corp.changeip.org</p>
<p>amazon-corp.wikaba.com</p>
<p>0077.x24hr.com</p>
<p>staticd.dynamic-dns.net</p>
<p>srv.xxxy.biz</p>
<p>serviechelp.changeip.us</p>
<p>mktoon.ftp1.biz</p>
<p>noon.dns04.com</p>
<p>ybcps4.freeddns.org</p>
<p>oldvideo.longmusic.com</p>
<p>chdsjjkrazomg.dhcp.biz</p>
<p>q34ewrd.youdontcare.com</p>
<p>journal.itsaol.com</p>

</article></div></div><div class="ArticleLayout_rightColumn__c8u4z"><div class="ShareBlock_container__5nb7z"><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Share this article</span><span>:</span></div><div class="ShareBlock_icons__vIJLT"><button type="button" class="Social_icon__pVcgR"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"><path stroke="currentColor" d="M8.39 10.805a4.024 4.024 0 0 0 4.628 1.36 4.023 4.023 0 0 0 1.44-.925l2.413-2.416A4.029 4.029 0 0 0 14.012 2a4.02 4.02 0 0 0-2.83 1.13L9.8 4.507m1.81 4.688a4.024 4.024 0 0 0-4.627-1.36 4.022 4.022 0 0 0-1.44.925L3.13 11.176A4.029 4.029 0 0 0 5.988 18a4.02 4.02 0 0 0 2.83-1.13l1.375-1.377"></path></svg></button></div></div></div></div></div><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"></div></div></div></div></section><section class="PageSection_section__GxaaG Card_section__QzdVO" id="contacts"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j AnyQuestions_container__KVhzR"><div class="AnyQuestions_heading__pSibU"><h1 class="AnyQuestions_title__ScrF1 Heading_base__MUnbH Heading_level_1__oOibP Heading_theme_light__level_1__7KeY7"><span>Get in touch</span></h1><div class="Text_base__riB2c Text_type_pL__A_h0d Text_theme_light__type_pL___Cab8"><span>Fill in the form and our specialists<br> will contact you shortly</span></div></div><div class="AnyQuestions_content__rdK_e"><div class="CardsSlider_root__4cbz_ AnyQuestions_radioGroupWrapper__WrSuy"><div class="CardsSlider_scrollArea__LArfW AnyQuestions_radioGroup__DBJB4"><label style="--cards-count:3" data-testid="form-tab-feedback" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF CardRadio_checked__7uYOJ AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" checked="" value="feedback"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>General<br> questions</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>We're happy to answer any questions you may have.</span></div></label><label style="--cards-count:3" data-testid="form-tab-partnership" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="partnership"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Partnership</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Join us in making the world a safer place.</span></div></label><label style="--cards-count:3" data-testid="form-tab-pilotApplication" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="pilotApplication"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Request a pilot</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Test drive our solutions with a customized pilot program.</span></div></label></div></div><form><div class="FeedbackForm_fields__NxBGh"><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Name" type="text" autoComplete="name" maxLength="250" name="fullName" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Phone number" type="text" autoComplete="tel" maxLength="20" name="phone" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Email" type="text" autoComplete="email" maxLength="250" name="email" value=""/></label></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><div class="Autocomplete_root__of0uL Select_root__qV3jk Select_mode_light__6i67a"><div class="Select_select__Wgg4m"><div class="SearchField_container__r8UBy"><input placeholder="Country" class="Input_input__dAKAo SearchField_input__OhP5T" id="headlessui-combobox-input-:R1d8qkf6:" role="combobox" type="text" aria-expanded="false" aria-autocomplete="list" data-headlessui-state=""/><button class="SearchField_icon__n277G SearchField_icon_second__tgr0q SearchField_icon_action__K_KOk" id="headlessui-combobox-button-:R2d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""></button><button class="SearchField_icon__n277G SearchField_icon_grey__v_ngf" id="headlessui-combobox-button-:R3d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""><svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.7645 11.4123C12.0858 10.3117 12.9268 8.65406 12.9268 6.79999C12.9268 3.48628 10.2405 0.799988 6.92676 0.799988C3.61305 0.799988 0.926758 3.48628 0.926758 6.79999C0.926758 10.1137 3.61305 12.8 6.92676 12.8C8.3864 12.8 9.7243 12.2788 10.7645 11.4123ZM10.7645 11.4123L14.5522 15.2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg></button></div></div></div></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Textarea_container__HPtza Textarea_mode_light__E0Y92"><textarea id="comment" class="Textarea_textarea__MapxB" placeholder="How can we help?" maxLength="1000" name="comment"></textarea></label></div></div><div class="FeedbackForm_agrees__062n_"><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="consentsTerms" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent" target="_blank">my&nbsp;consent to&nbsp;the processing of&nbsp;my&nbsp;personal data</a> in&nbsp;accordance with the terms of&nbsp;the <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/privacy-policy" target="_blank">Privacy Notice</a></span></div></label><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="subscription" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I&nbsp;give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent-email" target="_blank">my&nbsp;consent to&nbsp;receive marketing and&nbsp;informational messages</a></span></div></label></div><div><div class="smart-captcha"></div><button type="submit" class="Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_light__W9pGX"><span><span>SEND</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></button></div></form></div></div></section><footer class="Footer_wrapper__igPy4"><div class="Footer_info__BLmy7"><div class="Footer_head__3m28S"><div class="Footer_copyright__JcWnj Text_base__riB2c Text_type_pM__mE14b"><span>Copyright <mark>©</mark> 2002–2025 Positive Technologies. All rights reserved.</span></div><h2 class="Footer_heading__mQ6QG Heading_base__MUnbH Heading_level_2__qXMBH"><span>Cybersecurity market leader</span></h2><div class="Footer_additionalLinks__KyguX"><a class="Footer_additionalLink__5ONRT" target="_blank" href="https://global.ptsecurity.com/policies/terms-of-use">Legal documents</a><a class="Footer_additionalLink__5ONRT" href="https://www.ptsecurity.com/choose-region/?return_url=/analytics/pt-esc-threat-intelligence/space-pirates-tools-and-connections">Change region</a></div></div><nav class="Footer_nav__LBYFW"><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>Products</span></div><a class="NavBlock_list_item__wGeXz" href="/products/network-attack-discovery"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT NAD</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ngfw"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT NGFW</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/sandbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Sandbox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/maxpatrol-vm"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol VM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/siem"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol SIEM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ai"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Inspector</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/blackbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT BlackBox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/isim"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ISIM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/mp-o2"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol O2</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/edr"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol EDR</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/pt-af"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Firewall</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/cs"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Container Security</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Industrial Cybersecurity Suite</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/threat-intelligence-feeds"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Threat Intelligence Feeds</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/knockin"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Knockin</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>ANALYTICS</span></div><a class="NavBlock_list_item__wGeXz" href="/analytics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Analytics articles</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/knowledge-base"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Knowledge base</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ESC threat intelligence</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/threatscape"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Threatscape</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/hacker-groups"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Hacker groups</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>COMPANY</span></div><a class="NavBlock_list_item__wGeXz" href="/about"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>About us</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/clients"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Clients</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/contacts"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Contacts</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/pt-in-the-media"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT in the Media</span></div></a><a href="https://edu.ptsecurity.com/learning-space" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Education</span></div></a><a href="https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>YouTube</span></div></a><a href="https://www.linkedin.com/company/positivetechnologies/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>LinkedIn</span></div></a><a href="https://x.com/PTsecurity_EN" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Х</span></div></a><a href="https://www.tiktok.com/@positivetechnologies" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>TikTok</span></div></a><a href="https://vacancy.global.ptsecurity.com/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Vacancy</span></div></a></div></nav></div><div><img alt="" loading="lazy" width="1200" height="100" decoding="async" data-nimg="1" class="Footer_logo__cDBuS" style="color:transparent" src="https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg"/></div></footer></main></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"seo":{"title":"Space Pirates: analyzing the tools and connections of a new hacker group","description":"\r\n\tAt the end of 2019, Positive Technologies Expert Security Center (PT ESC) found a phishing email aimed at a Russian aerospace enterprise. It contained a link to previously unknown malware. Our experts discovered the same malware in 2020 when investigating an information security incident at a Russian government agency. During the investigation, several new malware families using a common network infrastructure were also discovered, some of which had not previously been mentioned in open sources.\r\n\r\n\r\n\tIn the summer of 2021, PT ESC revealed traces of compromise of another Russian aerospace enterprise. The organization was duly informed. As a result of the investigation, we found connections to the same network infrastructure on its computers. Further research made it possible to identify at least two more organizations in Russia, both partially state-owned, that were attacked using the same malware and network infrastructure.\r\n\r\n\r\n\tWe could not unambiguously link the detected malicious activity to any known hacker group, so we gave the attackers a new name—Space Pirates. The reason for the name was the P1Rat string used in the PDB paths, and the targeting of the aerospace industry. This report describes the group's detected activity, the features of the malware it uses, as well as its connection with other APT groups.\r\n"},"headerData":{"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_header_1bd424ccc4.svg","width":249,"height":22,"alt":""},"nav":[{"type":"product-menu","data":{"title":"Products","button":{"link":"/products","text":"Jump to section","targetBlank":false},"items":[{"description":"NDR system for detecting hidden threats on the perimeter and inside the network","link":"/products/network-attack-discovery","title":"PT NAD"},{"description":"Expert in excellent performance","link":"/products/ngfw","title":"PT NGFW"},{"description":"Advanced sandbox with customizable virtual environments","link":"/products/sandbox","title":"PT Sandbox"},{"description":"Next-generation vulnerability management system","link":"/products/maxpatrol-vm","title":"MaxPatrol VM"},{"description":"Pinpoint threat detection solution for your infrastructure","link":"/products/siem","title":"MaxPatrol SIEM"},{"description":"Source-code analysis tool","link":"/products/ai","title":"PT Application Inspector"},{"description":"Dynamic application security testing tool","link":"/products/blackbox","title":"PT BlackBox"},{"description":"Cyberthreat detection and incident response in ICS","link":"/products/isim","title":"PT ISIM"},{"description":"Autopilot for result-driven cybersecurity","link":"/products/mp-o2/","title":"MaxPatrol O2"},{"description":"Protects your endpoints","link":"/products/edr","title":"MaxPatrol EDR"},{"description":"A web application firewall","link":"/products/pt-af","title":"PT Application Firewall"},{"description":"Innovative solution for the comprehensive protection","link":"/products/cs","title":"PT Container Security"},{"description":"The first comprehensive platform for cyberthreat detection and response in industrial systems","link":"/products/ics","title":"PT Industrial Cybersecurity Suite"},{"description":"Data feeds collected by Positive Technologies experts for threat detection","link":"/products/threat-intelligence-feeds","title":"PT Threat Intelligence Feeds"},{"description":"Check your email security in 2 minutes","link":"/products/knockin","title":"PT Knockin"}]}},{"type":"product-menu","data":{"title":"Services","button":{"link":"/services","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/services/esc","title":"ESC"}]}},{"type":"product-menu","data":{"title":"Education","button":null,"items":[{"description":"","link":"https://edu.ptsecurity.com/learning-space","title":"Positive Education Cybersecurity Academy"},{"description":"","link":"https://edu.ptsecurity.com/pros-programs","title":"Cybersecurity programs for Professionals"},{"description":"","link":"https://edu.ptsecurity.com/c-level-programs","title":"Cybersecurity programs for Executives"},{"description":"","link":"https://edu.ptsecurity.com/product-courses","title":"Product courses"}]}},{"type":"link","data":{"link":"/about/news/","title":"News \u0026 events"}},{"type":"product-menu","data":{"title":"Analytics","button":{"link":"/analytics","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/analytics/knowledge-base","title":"Knowledge base"},{"description":"","link":"/analytics/pt-esc-threat-intelligence","title":"PT ESC threat intelligence"},{"description":"","link":"/analytics/threatscape","title":"Threatscape"},{"description":"","link":"/analytics/hacker-groups","title":"Hacker groups"}]}},{"type":"product-menu","data":{"title":"About us","button":{"link":"/about","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/about/clients","title":"Clients"},{"description":"","link":"/about/contacts","title":"Contacts"},{"description":"","link":"/about/pt-in-the-media","title":"PT in the Media"},{"description":"","link":"https://vacancy.global.ptsecurity.com/","title":"Vacancy"}]}}],"searchInputPlaceholder":"Search on ptsecurity.com"},"articleData":{"content":[],"deprecatedDetailText":"\u003carticle\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id1\"\u003eIntroduction\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id2\"\u003eGeneral information\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3\"\u003eAnalysis of malware and tools\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-1\"\u003eMyKLoadClient\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-1-1\"\u003eScheme 1\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-1-2\"\u003eScheme 2\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-1-3\"\u003eTest sample\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-1-4\"\u003ePayload\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-2\"\u003eZupdax\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-2-1\"\u003ePayload\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-2-2\"\u003eConnection with Redsip\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-2-3\"\u003eConnection with Winnti and FF-RAT\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-2-4\"\u003eConnections with Bronze Union and TA428\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-3\"\u003eDownloaders\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-3-1\"\u003eDownloader.Climax.A\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-3-2\"\u003eDownloader.Climax.B\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-4\"\u003eRtlShare\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-4-1\"\u003eDropper rtlstat.dll\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-4-2\"\u003eInjector rtlmake.dll\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-4-3\"\u003ePayload rtlmain.dll (rtlmainx64.dll)\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-4-4\"\u003eUse of RtlShare\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-5\"\u003ePlugX\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-5-1\"\u003eDemo dropper\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6\"\u003eBH_A006\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-1\"\u003eStage 0. Loading DLL from the overlay\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-2\"\u003eStage 1. DLL dropper\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-3\"\u003eStage 2. .dat loader (SbieDll.dll / SbieMsg.dll)\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-4\"\u003eStage 3. Shellcode .dat and DLL\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-5\"\u003eStage 4. MemLoadLibrary\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-6\"\u003eStage 5. Payload\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-6-7\"\u003eConnection with 9002 RAT\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id3-7\"\u003eDeed RAT\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id4\"\u003eConclusion\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id5\"\u003eAppendices\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id5-1\"\u003eMITRE\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id5-2\"\u003eIOCs\u003c/a\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id5-2-1\"\u003eFile indicators\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003ca href=\"#id5-2-2\"\u003eNetwork indicators\u003c/a\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2 id=\"id1\"\u003e Introduction\u003c/h2\u003e\r\n\u003cp\u003eAt the end of 2019, \u003ca href=\"https://www.ptsecurity.com/ru-ru/services/esc/\" target=\"_blank\"\u003ePositive Technologies Expert Security Center\u003c/a\u003e (PT ESC) found a phishing email aimed at a Russian aerospace enterprise. It contained a link to previously unknown malware. Our experts discovered the same malware in 2020 when investigating an information security incident at a Russian government agency. During the investigation, several new malware families using a common network infrastructure were also discovered, some of which had not previously been mentioned in open sources.\u003c/p\u003e\r\n\u003cp\u003eIn the summer of 2021, \u003ca href=\"https://www.ptsecurity.com/ru-ru/services/esc/\" target=\"_blank\"\u003ePT ESC\u003c/a\u003e revealed traces of compromise of another Russian aerospace enterprise. The organization was duly informed. As a result of the investigation, we found connections to the same network infrastructure on its computers. Further research made it possible to identify at least two more organizations in Russia, both partially state-owned, that were attacked using the same malware and network infrastructure.\u003c/p\u003e\r\n\u003cp\u003eWe could not unambiguously link the detected malicious activity to any known hacker group, so we gave the attackers a new name—Space Pirates. The reason for the name was the P1Rat string used in the PDB paths, and the targeting of the aerospace industry. This report describes the group's detected activity, the features of the malware it uses, as well as its connection with other APT groups.\u003c/p\u003e\r\n\u003ch2 id=\"id2\"\u003eGeneral information\u003c/h2\u003e\r\n\u003cp\u003eWe assume that Space Pirates has Asian roots, as indicated by the active use of the Chinese language in resources, SFX archives, and paths to PDB files. In addition, the group's toolkit includes the Royal Road RTF (or 8.t) builder (common among hackers of Asian origin) and the PcShare backdoor, and almost all intersections with previously known activity are associated with APT groups in the Asian region.\u003c/p\u003e\r\n\u003cp\u003eThe group began its activity no later than 2017. The main targets of the criminals are espionage and theft of confidential information. Among the victims identified during the threat study are government agencies and IT departments, as well as aerospace and power enterprises in Russia, Georgia, and Mongolia. At least five organizations were attacked in Russia, one in Georgia, and the exact number of victims in Mongolia is unknown.\u003c/p\u003e\r\n\u003cp\u003eSome APT group attacks using malware were also targeted at Chinese financial companies, which suggests a monetary motivation. All potential victims were notified by the respective national CERTs.\u003c/p\u003e\r\n\u003cp\u003eAt least two attacks on Russian organizations can be considered successful. In the first case, the attackers gained access to at least 20 servers on the corporate network, where they remained for about 10 months. During this time, more than 1,500 internal documents were stolen, as well as information about all employee accounts in one of the network domains. In the second case, the attackers managed to gain persistence in the company's network and remain there for more than a year, obtain information about the computers on the network, and install malware on at least 12 corporate nodes in three different regions.\u003c/p\u003e\r\n\u003cp\u003eThe Space Pirates toolkit includes unique downloaders and several backdoors which we have not previously encountered and which are presumably specific to the group: MyKLoadClient, BH_A006, and Deed RAT. The criminals also have access to the Zupdax backdoor: its modern variants use a similar MyKLoadClient execution scheme; however, the code of the backdoor itself dates back to 2010 and cannot be uniquely attributed to the group.\u003c/p\u003e\r\n\u003cp\u003eIn addition, the attackers use well-known malware, such as PlugX, ShadowPad, Poison Ivy, a modified version of PcShare, and the public shell \u003ca href=\"https://github.com/bitsadmin/ReVBShell\" target=\"_blank\"\u003eReVBShell\u003c/a\u003e. The \u003ca href=\"https://github.com/vzex/dog-tunnel\" target=\"_blank\"\u003edog-tunnel\u003c/a\u003e utility is used to tunnel traffic.\u003c/p\u003e\r\n\u003cp\u003eThe main network infrastructure of the group uses a small number of IP addresses indicated by DDNS domains. Interestingly, the attackers use not only third-level domains, but also fourth- and higher-level ones, for example, w.asd3.as.amazon-corp.wikaba.com.\u003c/p\u003e\r\n\u003cp\u003eIn the process of investigating Space Pirates, we found a large number of intersections with previously identified activity, which researchers associate with the following groups: Winnti (APT41), Bronze Union (APT27), TA428, RedFoxtrot, Mustang Panda, and Night Dragon. The reason for this is probably the exchange of tools between groups, which is common practice for APT groups in the Asian region.\u003c/p\u003e\r\n\u003cp\u003eThe connection between the Space Pirates and TA428 groups should be specially noted. As part of another investigation, we observed the activities of both groups on infected computers, which, however, had no intersections in the network infrastructure. During Operation StealthyTrident, \u003ca href=\"https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/\" target=\"_blank\"\u003edescribed by ESET\u003c/a\u003e, the attackers used Tmanger, attributed to TA428, and Zupdax, associated with Space Pirates. The connection with another TA428 malware, in particular Albaniiutas (RemShell), and Zupdax can also be traced in the network infrastructure adjacent to the one mentioned in the ESET report. All this suggests that Space Pirates and TA428 can combine their efforts and share tools, network resources, and access to infected systems.\u003c/p\u003e\r\n\u003cp\u003eThe key connections between the affected organizations, malware families, and fragments of the network infrastructure, as well as public information about the attackers, can be seen in Figure 1. Later in the report, we will give more details about them.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 1. Key connections\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image1.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 1. Key connections\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id3\"\u003eAnalysis of malware and tools\u003c/h2\u003e\r\n\u003ch3 id=\"id3-1\"\u003eMyKLoadClient\u003c/h3\u003e\r\n\u003cp\u003eThis malware was used in attacks on Russian organizations, including government agencies and aerospace enterprises, often being distributed through targeted phishing. The email analysis shows that Chinese companies providing financial services also became victims.\u003c/p\u003e\r\n\u003cp\u003eAmong the malware samples with MyKLoadClient that we found, two typical implementation schemes can be distinguished. The first (hereinafter scheme 1) is based on the use of SFX archives as droppers, implements the DLL Side-Loading technique, and uses an auxiliary launcher library AntiVirusLoader.dll. The second (hereinafter scheme 2) includes only a custom-written dropper which transfers control to the payload directly. In the second case, gaining persistence in the system is not a feature of the code.\u003c/p\u003e\r\n\u003cp\u003eNote that, according to the known data, there is a clear relationship between the attackers' goals and the choice of implementation scheme: samples using scheme 1 were targeted at Russian organizations, whereas scheme 2 was used in attacks on Chinese companies. If we rely on the dates of modification and compilation of files (which, however, could be spoofed), the same division can be traced back in time: scheme 1 was presumably used in 2018–2019, and scheme 2 in 2020. It is possible that the attackers updated the implementation chain of the previous malware to reduce the likelihood of its detection in new attacks.\u003c/p\u003e\r\n\u003ch4 id=\"id3-1-1\"\u003eScheme 1\u003c/h4\u003e\r\n\u003cp\u003eA typical example of a sample with the first implementation scheme is a file named \u003cem\u003eПетербургский международный экономический форум (ПМЭФ)____2019.exe (Petersburg International Economic Forum (SPIEF)____2019.exe)\u003c/em\u003e with SHA-256 d3a50abae9ab782b293d7e06c7cd518bbcec16df867f2bdcc106dec1e75dc80b. The file is an SFX archive that extracts the decoy document 0417.doc and another SFX archive named apple.exe. The files in the archive were modified in April 2019. The document contains a text with a true description of SPIEF.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 2. Contents of the decoy document 0417.doc\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image2.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 2. Contents of the decoy document 0417.doc\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe second SFX archive extracts three PE files from itself: the legitimate siteadv.exe, the launcher siteadv.dll, and the library with payload cc.tmp. Note that in the samples studied, the first implementation scheme does not always use a decoy. However, in all cases, a similar SFX archive is used, which contains files with the same names and purpose.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 3. Contents of the apple.exe archive\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image3.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 3. Contents of the apple.exe archive\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe executable EXE file is signed by McAfee, Inc. and is a component of the McAfee SiteAdvisor installer. At startup, it loads the siteadv.dll library, which is responsible for installing and launching the payload. The launcher resources feature a configuration encrypted with RC4 with key \"TDILocker\" and containing the necessary paths, registry key names, and flags.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 4. Siteadv.dll code fragment\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image4.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 4. Siteadv.dll code fragment\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe launcher provides several possible commands that are passed by way of command-line arguments and are responsible for one of the implementation stages:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCommand\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003estat\u003c/td\u003e\r\n\u003ctd\u003eThe command to start the installation. Restarts the process in which the library is loaded (siteadv.exe) with the install_del command. Additionally passes the path to the parent process.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003einstall_del\u003c/td\u003e\r\n\u003ctd\u003eGains persistence on the infected computer (the registry key is specified in the configuration). In this case, the path to the siteadv.exe file is used with the run or mrun argument. Deletes the file specified by the third argument (the path to the parent process). Launches the payload in the same way as the run command.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003erun\u003c/td\u003e\r\n\u003ctd\u003eLoads a DLL with payload via LoadLibrary and executes the function exported from it (the name is specified in the configuration).\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003emrun\u003c/td\u003e\r\n\u003ctd\u003eNot implemented.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eins\u003c/td\u003e\r\n\u003ctd\u003eNot implemented.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eIn addition to the exported function main, which is called by the legitimate siteadv.exe, in siteadv.dll there is an unused buc_uninstallinterface export that is responsible for bypassing the UAC \u003ca href=\"https://3gstudent.github.io/backup-3gstudent.github.io/通过COM组件IARPUninstallStringLauncher绕过UAC/\" target=\"_blank\"\u003eusing the IARPUninstallStringLauncher component\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe launcher library has the export name AntiVirusLoader.dll. In some of its instances, you can find the PDB path:\u003cbr/\u003e\r\nD:\\Leee\\515远程文件\\P1Rat_2017_07_28A\\src\\MyLoader_bypassKIS\\snake\\res\\SiteAdv.pdb.\u003c/p\u003e\r\n\u003cp\u003eThe cc.tmp payload is a backdoor implemented as a dynamic library with the internal name client.dll. It exports the MyKLoad function, which is the actual entry point. We will consider the functionality of the backdoor below.\u003c/p\u003e\r\n\u003ch4 id=\"id3-1-2\"\u003eScheme 2\u003c/h4\u003e\r\n\u003cp\u003eThe executable file responsible for extracting the decoy and payload acts as a dropper in the second scheme. The binary data is located in the body of the dropper and is XOR-encrypted with a single-byte key. In addition to the standard launch of the extracted payload via the CreateProcess call, the dropper also performs reflective loading and execution of the EXE file directly in the current process.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 5. Fragment of the dropper code\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image5.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 5. Fragment of the dropper code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn some cases, the dropper functions are additionally obfuscated using the \u003ca href=\"https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening\" target=\"_blank\"\u003econtrol flow flattening\u003c/a\u003e technique.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 6. Obfuscated version of the dropper\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image6.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 6. Obfuscated version of the dropper\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eAs a decoy, the investigated samples use a PDF document containing a message about a \"corrupt file\" in the Chinese language, or an application stub that displays the message \"正在更新浏览器插件，请稍后…\" (\u003cem\u003eThe browser plugin is updating, please wait ...\u003c/em\u003e) and \"更新完毕，请重启浏览器！\" (\u003cem\u003eThe update is completed, restart the browser!\u003c/em\u003e).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt='Figure 7. PDF decoy with the text \"Corrupt or incompatible file\"' src=\"/upload/corporate/ww-en/images/esc/article_333388/image7.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 7. PDF decoy with the text \"Corrupt or incompatible file\"\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe payload in this case is an executable file with the internal name client.exe. Some samples also have the PDB path C:\\Users\\classone\\Desktop\\src\\client\\exe_debug\\client.pdb.\u003c/p\u003e\r\n\u003ch4 id=\"id3-1-3\"\u003eTest sample\u003c/h4\u003e\r\n\u003cp\u003eWe also managed to find a test version of the malware created no later than in 2018: b1d6ba4d995061a0011cb03cd821aaa79f0a45ba2647885171d473ca1a38c098. This application is a dropper.\u003c/p\u003e\r\n\u003cp\u003eInterestingly, it seems to have been created based on the Snake game. This is indicated by several details:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen launched, the application creates a window using the string \"Snake\" as its name.\u003c/li\u003e\r\n\u003cli\u003eThere is code presumably responsible for the game logic—in particular, for generating random coordinates of pieces of food on the 50×50 field and comparing them with the position of the snake.\u003c/li\u003e\r\n\u003cli\u003eThe application handles presses of the spacebar and cursor keys.\u003c/li\u003e\r\n\u003cli\u003eThe application features a menu with items in Chinese: Start, Pause, Restart, and Quit.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 8. Application menu\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image8.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 8. Application menu\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn addition, among the dropper resources there is also an \"About the program\" window (in Chinese), the content of which indicates that this is the second version of the Snake game, which was created in 2016. The email address of the probable author is also given: mexbochen@foxmail.com.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt='Figure 9. \"About the program\" window' src=\"/upload/corporate/ww-en/images/esc/article_333388/image9.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 9. \"About the program\" window\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eA Google search for the address throws up the profile of the email owner—a programmer from China who specializes in image processing.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 10. Business card website with the contact address mexbochen@foxmail.com\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image10.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 10. Business card website with the contact address mexbochen@foxmail.com\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eDespite the connection between the application and the owner of the email, it is impossible to say unequivocally that he is the author of the malware. It is possible that Snake was once an open-source project, and the attackers used it as a basis for implementing the dropper.\u003c/p\u003e\r\n\u003cp\u003eThe files extracted by the dropper are contained in its resources in cleartext. Also in the resources is an encrypted configuration that contains the file names—exactly the same configuration is used in the launcher. When files are written to disk, their contents are XOR-encrypted with the 0x80 key, and then the files are reopened and decrypted. The dropper contains the same set of components as SFX archives (\u003ca href=\"#id3-1-1\"\u003escheme 1\u003c/a\u003e): a legitimate McAfee SiteAdvisor component, a DLL launcher, and a library with a payload named Client.obj.\u003c/p\u003e\r\n\u003cp\u003eAfter extraction, the dropper generates a command line to run the launcher with the install command (for persistence in the registry and launching the payload), but does not make further use of it. This is probably an error: there is the debug message \"CreateProcess success!\" in the code, but the CreateProcess function is not called.\u003c/p\u003e\r\n\u003cp\u003eThe launcher of the test sample differs in its implementation of the mrun command: a variation of the run command responsible for launching the function exported from the DLL with payload. Unlike run, mrun predecrypts the library using the RC4 algorithm with key \"GoogleMailData\" and uses reflective loading for its execution.\u003c/p\u003e\r\n\u003cp\u003eThe payload of Client.obj is similar to cc.tmp (\u003ca href=\"#id3-1-1\"\u003escheme 1\u003c/a\u003e) and has only minor differences. In particular, the entry point function exported by the library is called \"main\", which, when run, displays a message box with the text \"\u003cem\u003ejust a demo for test!!!\u003c/em\u003e\" In addition, the backdoor configuration is not encrypted and contains the test C2 127.0.0.1.\u003c/p\u003e\r\n\u003ch4 id=\"id3-1-4\"\u003ePayload\u003c/h4\u003e\r\n\u003cp\u003eOptions for implementing the backdoor in the form of the executable file client.exe and the library client.dll have the same functionality. However, they differ in how they initialize the structure with configuration parameters, which include the address and port of the C2, the backdoor activity flag, as well as the string IDs of the malware sent to the C2.\u003c/p\u003e\r\n\u003cp\u003eIn the client.dll library, just like in the launcher (scheme 1), there is a configuration encrypted with RC4 key \"GoogleMailData\" in the payload resources. In the EXE version, the structure is filled with values fixed in the code.\u003c/p\u003e\r\n\u003cp\u003eThe following table lists the backdoor samples we found and the data specified in their configuration, namely the IDs and the control server. The \"?\" sign means that the string is a random set of bytes.\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eSHA-256 of the payload\u003c/th\u003e\r\n\u003cth\u003eScheme\u003c/th\u003e\r\n\u003cth\u003eID1\u003c/th\u003e\r\n\u003cth\u003eID2\u003c/th\u003e\r\n\u003cth\u003eID3\u003c/th\u003e\r\n\u003cth\u003eC2\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5847c8b8f54c60db939b045d385aba0795880d92b00d28447d7d9293693f622b\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003egroup\u003c/td\u003e\r\n\u003ctd\u003e127.0.0.1\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e56b9648fd3ffd1bf3cb030cb64c1d983fcd1ee047bb6bd97f32edbe692fa8570\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003e207.148.121.88\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed0fb0a0379248cdada356da83cd2ee364e0e58f4ed272d3369fe1d6ca8029679\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003e207.148.121.88\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7b7a65c314125692524d588553da7f6ab3179ceb639f677ed1cefe3f1d03f36e\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003e207.148.121.88\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3ccae178d691fc95f6c52264242a39daf4c44813d835eaa051e7558b191d19ee\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003e207.148.121.88\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e69863ba336156f4e559364b63a39f16e08ac3a6e3a0fa4ce11486ea16827f772\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003emicro.dns04.com\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e949cb5d03a7952ce24b15d6fccd44f9ed461513209ad74e6b1efae01879395b1\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003emy vps\u003c/td\u003e\r\n\u003ctd\u003e?\u003c/td\u003e\r\n\u003ctd\u003emicroft.dynssl.com\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efa3ecd74b9f329a96b5739bba7b1872ef1ab84bb95f89101a69b6b6e780e2063\u003c/td\u003e\r\n\u003ctd\u003e-\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003ememo\u003c/td\u003e\r\n\u003ctd\u003egroup\u003c/td\u003e\r\n\u003ctd\u003e47.108.89.169\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e84eb2efa324eba0c2e06c3b84395e9f5e3f28a3c9b86edd1f813807ba39d9acb\u003c/td\u003e\r\n\u003ctd\u003e2\u003c/td\u003e\r\n\u003ctd\u003epwd\u003c/td\u003e\r\n\u003ctd\u003ememo\u003c/td\u003e\r\n\u003ctd\u003egroup\u003c/td\u003e\r\n\u003ctd\u003e47.108.89.169\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb822a4ec46aacb3bb4c22fe5d9298210bfa442118ee05a1532c324a5f847a9e6\u003c/td\u003e\r\n\u003ctd\u003e2\u003c/td\u003e\r\n\u003ctd\u003egundan\u003c/td\u003e\r\n\u003ctd\u003ememo\u003c/td\u003e\r\n\u003ctd\u003egroup\u003c/td\u003e\r\n\u003ctd\u003e120.78.127.189\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e944a3c8293ff068d803f8537b15e6adbad7fa1e789f3dc404ba603a8cb7c22aa\u003c/td\u003e\r\n\u003ctd\u003e2\u003c/td\u003e\r\n\u003ctd\u003egundan\u003c/td\u003e\r\n\u003ctd\u003ememo\u003c/td\u003e\r\n\u003ctd\u003egroup\u003c/td\u003e\r\n\u003ctd\u003e121.89.210.144\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eThe connection to the control server is established over TCP, and the traffic is not encrypted. The messages have a header of the following structure:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003estruct PacketHeader{\r\n    _DWORD Version; // 0x20170510\r\n    _DWORD CommandId;\r\n    _DWORD PayloadSize;\r\n    _DWORD LastError;\r\n};\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe 0x20170510 constant is always used as the version, probably denoting some date.\u003c/p\u003e\r\n\u003cp\u003eThe malware has several classes/modules responsible for the corresponding functionality:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eShellManager: remote command line\u003c/li\u003e\r\n\u003cli\u003eDiskManager: working with disks installed on the infected computer\u003c/li\u003e\r\n\u003cli\u003eFileTransferManager: file transfer\u003c/li\u003e\r\n\u003cli\u003eRS5Manager: using the infected computer as a proxy server\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn the ID of each command, there is a module identifier, which is obtained by applying the 0xFF000 mask. Here is a full list of supported commands:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eModule ID\u003c/th\u003e\r\n\u003cth\u003eFull ID\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0\u003c/td\u003e\r\n\u003ctd\u003e1\u003c/td\u003e\r\n\u003ctd\u003eCollect information about the infected system\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0\u003c/td\u003e\r\n\u003ctd\u003e3\u003c/td\u003e\r\n\u003ctd\u003eTerminate malware execution\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x2000 (ShellManager)\u003c/td\u003e\r\n\u003ctd\u003e0x2002\u003c/td\u003e\r\n\u003ctd\u003eStart the cmd.exe process and create a thread for sending its output to C2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x2003\u003c/td\u003e\r\n\u003ctd\u003eSend a command to the shell\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x2004\u003c/td\u003e\r\n\u003ctd\u003eClose the shell\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x3000 (DiskManager)\u003c/td\u003e\r\n\u003ctd\u003e0x3000\u003c/td\u003e\r\n\u003ctd\u003eGet a list of disks available in the system and information about them\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x3001\u003c/td\u003e\r\n\u003ctd\u003eGet directory listing\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x4000 (FileTransferManager)\u003c/td\u003e\r\n\u003ctd\u003e0x4001\u003c/td\u003e\r\n\u003ctd\u003eInitialize file transfer from the infected computer to C2 (opens the file for reading)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4008\u003c/td\u003e\r\n\u003ctd\u003eRead a block of data from a previously opened file.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4004\u003c/td\u003e\r\n\u003ctd\u003eInitialize file transfer from C2 to the infected computer (opens the file for writing)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4005\u003c/td\u003e\r\n\u003ctd\u003eWrite a block of data to a previously opened file\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4006\u003c/td\u003e\r\n\u003ctd\u003eComplete the file transfer to the infected computer and set the timestamps\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4009\u003c/td\u003e\r\n\u003ctd\u003eClose open file descriptors and reset internal fields\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x4010\u003c/td\u003e\r\n\u003ctd\u003eGet a recursive directory listing\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x5000 (RS5Manager)\u003c/td\u003e\r\n\u003ctd\u003e0x5000\u003c/td\u003e\r\n\u003ctd\u003ePerform initialization, create threads for receiving packets from a remote node and sending them to C2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x5001\u003c/td\u003e\r\n\u003ctd\u003eCreate a socket and connect to a remote node\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x5003\u003c/td\u003e\r\n\u003ctd\u003eSend data to the connected socket\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e0x5004\u003c/td\u003e\r\n\u003ctd\u003eClose the connected socket\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eIn the process of collecting information about the system, the backdoor creates a globally unique identifier (GUID) and writes it to the registry in one of the HKLM or HKCU hives using the Software\\CLASSES\\KmpiPlayer key. If the key is already in the registry, then the existing ID is used.\u003c/p\u003e\r\n\u003ch3 id=\"id3-2\"\u003eZupdax\u003c/h3\u003e\r\n\u003cp\u003eThe first public mention of this malware can be found in the \u003ca href=\"https://unit42.paloaltonetworks.com/unit42-henbox-chickens-come-home-roost/\" target=\"_blank\"\u003eUnit 42\u003c/a\u003e report on HenBox, a malicious application for Android. In the HenBox network infrastructure, researchers found traces of the use of malware of the PlugX, Zupdax, 9002 RAT, and Poison Ivy families. In 2019, Unit 42 \u003ca href=\"https://unit42.paloaltonetworks.com/pkplug_chinese_cyber_espionage_group_attacking_asia/\" target=\"_blank\"\u003ecombined\u003c/a\u003e three years of observed activity related to the above-mentioned set of malware, naming the group (or groups) behind it PKPLUG.\u003c/p\u003e\r\n\u003cp\u003eIn 2020, ESET \u003ca href=\"https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/\" target=\"_blank\"\u003ediscovered\u003c/a\u003e traces of an attack on the Able Soft LLC supply chain. One of the attack options was to compromise the Able Desktop installer by adding malicious code to it. The researchers cite the HyperBro and Korplug (PlugX) backdoors as the payload built into the installers.\u003c/p\u003e\r\n\u003cp\u003eAccording to available data, we can say that the payload designated by ESET as Korplug is in fact a Zupdax backdoor. This opinion is shared by NortonLifeLock and Avira analysts, who published a \u003ca href=\"https://www.nortonlifelock.com/sites/default/files/2021-10/OPERATION%20EXORCIST%20White%20Paper.pdf\" target=\"_blank\"\u003ereport\u003c/a\u003e in the fall of 2021 describing the main features of Zupdax.\u003c/p\u003e\r\n\u003cp\u003eZupdax has been operating since 2014 at least. Our study focused on 2017–2019 samples, but some details can only be traced in earlier versions (2014–2015). We will be referring to them as \"old\".\u003c/p\u003e\r\n\u003cp\u003eThe latest versions of Zupdax use the same loading scheme as in the MyKLoadClient test sample. Although there is no Snake game code in them, the main functionality of the dropper is implemented in a similar way: in its resources are the legitimate siteadv.exe, a launcher library, a payload, and a XOR-encrypted configuration with file names and flags. The launcher uses exactly the same configuration.\u003c/p\u003e\r\n\u003cp\u003eUnlike MyKLoadClient, in almost all samples with Zupdax, the payload (which is extracted under the name ok.obj) is encrypted and launched using the mrun method. Among the launcher samples that are used in conjunction with Zupdax, you can find more functional options that support UAC bypass (in particular, using buc_uninstallinterface export) and persistence as a service.\u003c/p\u003e\r\n\u003cp\u003eIn the dropper and launcher samples are the corresponding PDB paths:\u003cbr/\u003e d:\\Leee\\515远程文件\\P1Rat_2017_07_28A\\src\\MyLoaderBypassNorton\\Release\\loaderexe.pdb and\u003cbr/\u003e\r\nd:\\Leee\\515远程文件\\P1Rat_2017_07_28A\\src\\MyLoader_bypassKIS\\snake\\res\\SiteAdv.pdb.\u003c/p\u003e\r\n\u003cp\u003eMalware variants related to the attack on Able Desktop users also contain a PDB with a similar string, MyLoader_bypassKIS:\u003cbr/\u003e\r\nc:\\Users\\PC-2015\\Desktop\\Badger\\En-v2\\免杀\\MyLoader_bypassKIS\\bin\\loaderdll.pdb.\u003c/p\u003e\r\n\u003cp\u003eInterestingly, there is at least one sample (a95dfb8a8d03e9bcb50451068773cc1f1dd4b022bb39dce3679f1b3ce70aa4f9) that is completely identical to the test version of MyKLoadClient and contains exactly the same \"About the program\" window. The payload in it is a Zupdax backdoor.\u003c/p\u003e\r\n\u003ch4 id=\"id3-2-1\"\u003ePayload\u003c/h4\u003e\r\n\u003cp\u003eFor network interaction with C2, the backdoor uses the \u003ca href=\"https://udt.sourceforge.io\" target=\"_blank\"\u003eUDT protocol\u003c/a\u003e, which implements data transfer over UDP. The messages have a header with a structure similar to that used in MyKLoadClient. The only difference is the value of the first field equal to 0x12345678:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003estruct PacketHeader{\r\n    _DWORD Magic; // 0x12345678\r\n    _DWORD CommandId;\r\n    _DWORD PayloadSize;\r\n    _DWORD Unknown; // 0\r\n};\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eImmediately after establishing a connection with C2, the backdoor collects and sends information about the system, including the computer name, user name, OS version, information about disk volume, RAM, and CPU, as well as the IP and MAC addresses of the network adapter. The collected information is sent with the 0x1 command ID.\u003c/p\u003e\r\n\u003cp\u003eThe set of commands that the backdoor can handle does not change significantly from version to version: its main features are reduced to the execution of additional code that it can get from the control server. Older versions of Zupdax contain debug messages that allow you to see the original names of operations:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eID\u003c/th\u003e\r\n\u003cth\u003eName\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x0\u003c/td\u003e\r\n\u003ctd\u003eCMD_END\u003c/td\u003e\r\n\u003ctd\u003eShut down the backdoor or restart it (depending on the version)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x17\u003c/td\u003e\r\n\u003ctd\u003eCMD_SET_REM\u003c/td\u003e\r\n\u003ctd\u003eWrite a new control server to the file (transmitted in the message)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x19\u003c/td\u003e\r\n\u003ctd\u003eCMD_UNINSTALL_HOST\u003c/td\u003e\r\n\u003ctd\u003ePerform self-removal from the system\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x28\u003c/td\u003e\r\n\u003ctd\u003eCMD_TRANSMISSION_PLUGIN\u003c/td\u003e\r\n\u003ctd\u003eGet the plugin name from C2 and run it (the plugin can be a shellcode or an EXE file) If the necessary plugin is not available on the disk, first get it from C2. (Present only in old versions)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x29\u003c/td\u003e\r\n\u003ctd\u003eCMD_PLUGIN_TRANSMISSION_EXECUTE\u003c/td\u003e\r\n\u003ctd\u003eGet the plugin ID from C2 and launch its entry point (the plugins are stored in memory). If the plugin is not in memory, first get the PE file from the control server and reflectively load the exported function from it. (In old versions, it is the same as CMD_TRANSMISSION_PLUGIN)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x38\u003c/td\u003e\r\n\u003ctd\u003eCMD_UPDATE\u003c/td\u003e\r\n\u003ctd\u003eDownload the EXE file from the specified link, save it to disk, and execute it.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x68\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003eRun the executable file at a fixed path under the name of the current user. The path is equal to C:\\ProgramData\\AdobeBak\\avanti.exe. (Present only in the latest versions)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x77\u003c/td\u003e\r\n\u003ctd\u003eCMD_ADD_STARTUP\u003c/td\u003e\r\n\u003ctd\u003eSee CMD_TRANSMISSION_PLUGIN\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eOld Zupdax samples also have paths to PDB files:\u003cbr/\u003e\r\nh:\\E\\项目问题\\UDPUDP-英文\\bin\\server.pdb\u003cbr/\u003e\r\nd:\\磁盘\\E\\项目问题\\版本\\UDPUDP-英文\\bin\\server.pdb\u003c/p\u003e\r\n\u003cp\u003eIt follows from them that the original name of the project can be translated as \"UDPUDP-English.\"\u003c/p\u003e\r\n\u003ch4 id=\"id3-2-2\"\u003eConnection with Redsip\u003c/h4\u003e\r\n\u003cp\u003eIn 2011, McAfee described a series of attacks on energy companies that was named Night Dragon. Among the malware used by the attackers was a Redsip backdoor (e3165c2691dc27ddaeb21e007f2bf5aeb14ef3e12ec007938e104d6aed512f39).\u003c/p\u003e\r\n\u003cp\u003eApparently, Zupdax is a redesigned version of Redsip. Backdoors, in particular, have an identical structure of network messages (including the magic constant 0x12345678), matching command names and identifiers (CMD_SET_REM and CMD_UNINSTALL_HOST), and similar debug messages. In both cases, the payload is implemented through external plugins.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 11. Fragment of the Redsip code (2010 sample)\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image11.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 11. Fragment of the Redsip code (2010 sample)\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 12. Zupdax code fragment (2015 sample)\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image12.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 12. Zupdax code fragment (2015 sample)\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNote that in 2018 Redsip was used in an attack on a Russian organization associated with the aerospace industry. The attackers used a leaked corporate document as a decoy. We could not find a direct connection between this attack and the activities of Space Pirates.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 13. Internal document used as a decoy\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image13.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 13. Internal document used as a decoy\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch4 id=\"id3-2-3\"\u003eConnection with Winnti and FF-RAT\u003c/h4\u003e\r\n\u003cp\u003eSome Zupdax samples have valid digital signatures. In particular, sample 24b749191d64ed793cb9e540e8d4b1808d6c37c5712e737674417573778f665b (upinstall.bat) is signed with a YD Online Corp. certificate, and 84b8bfe8161da581a88c0ac362318827d4c28edb057e23402523d3c93a5b3429 (Slack.exe) is signed with a NFINITY GAMES BILISIM ANONIM SIRKET certificate.\u003c/p\u003e\r\n\u003cp\u003eAmong the files signed with these certificates are components of the PipeMon malware, which is \u003ca href=\"https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\" target=\"_blank\"\u003eattributed\u003c/a\u003e to the Winnti group. Studying the network infrastructure of the second sample, we also noted the presence of indirect connections with the old Winnti infrastructure, but they require additional confirmation.\u003c/p\u003e\r\n\u003cp\u003eHowever, in the case of Slack.exe, we can state the presence of reliable infrastructure connections with the FF-RAT backdoor, which was \u003ca href=\"https://blogs.blackberry.com/en/2017/06/breaking-down-ff-rat-malware\" target=\"_blank\"\u003edescribed\u003c/a\u003e by BlackBerry in 2017. So, both the Zupdax sample and the FF-RAT samples use playdr2.com and gamepoer7.com subdomains as C2.\u003c/p\u003e\r\n\u003ch4 id=\"id3-2-4\"\u003eConnections with Bronze Union and TA428\u003c/h4\u003e\r\n\u003cp\u003eESET's previously mentioned report \u003ca href=\"https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/\" target=\"_blank\"\u003eOperation StealthyTrident: corporate software under attack\u003c/a\u003e on the compromise of Able Desktop notes the presence of HyperBro and Zupdax backdoors (Korplug according to ESET), as well as Tmanger and ShadowPad as part of a single cybercriminal operation. The researchers give several possible explanations for this connection. We were able to identify several additional facts that give more information about the connections between the Bronze Union (LuckyMouse, APT27) and TA428 groups and Zupdax malware.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eCode intersections\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe Zupdax sample from the ESET report contains a dropper that is standard for this malware (data1.dat, 2486734ebe5a7fa6278ce6358d995d4546eb28917f8f50b01d8fdd7a1f9627a4), extracting the payload from resources. Of interest is the scheme by which it gains control: it side-loads the pcalocalresloader.dll library, which contains a shellcode that decrypts and executes another shellcode from the thumb.db file. The second shellcode contains a DLL library compressed using the LZNT1 algorithm, which it reflectively loads into memory.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 14. Fragment of the ESET report\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image14.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 14. Fragment of the ESET report\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eBoth shellcodes use an atypical hashing algorithm for the names of imported libraries and functions (see Figure 15). For example, kernel32.dll has the hash 0xD4E88, and ntdll.dll 0x1B708. However, a search for similar samples showed that similar shellcodes can be found in various malware families—for example, in \u003ca href=\"https://n1ght-w0lf.github.io/malware%20analysis/smokeloader/#shellcode\" target=\"_blank\"\u003eSmokeLoader\u003c/a\u003e or in \u003ca href=\"https://unit42.paloaltonetworks.com/unit42-recent-inpage-exploits-lead-multiple-malware-families/\" target=\"_blank\"\u003eexploits for InPage\u003c/a\u003e. It is likely that a builder available to various hacker groups was used to create the shellcodes.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 15. Hash function in auxiliary shellcodes\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image15.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 15. Hash function in auxiliary shellcodes\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eHowever, the whole scheme, including the legitimate component IntgStat.exe, pcalocalresloader.dll library, and the encrypted file thumb.db, was used in this form only to download the HyperBro backdoor, as \u003ca href=\"https://securelist.com/luckymouse-hits-national-data-center/86083/\" target=\"_blank\"\u003edescribed by Kaspersky\u003c/a\u003e. The only difference is that in the case of Able Desktop, shikata_ga_nai obfuscation was not applied.\u003c/p\u003e\r\n\u003cp\u003eAn auxiliary DLL located in thumb.db handles the simultaneous launch of the dropper (data1.dat) and the legitimate Able Desktop installer. It is distinguished by the presence of a large number of unused strings in the data section. Some of them are specific only to samples of the HyperBro backdoor:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003eElevation:Administrator!new:{FCC74B77-EC3E-4dd8-A80B-008A702075A9}\r\nSOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\test\r\nsystem-%d\r\nCreateProcessAsUser error %d\r\n\\\\..\\\\config.ini\r\nWin2008(R2)\r\nWin2012(R2)\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs follows from the ESET report and our research, the criminals behind the attack on Able Desktop users have access to both HyperBro and Zupdax. However, most of the code features are specific to the HyperBro backdoor, which, in turn, is attributed to the Bronze Union group.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eNetwork intersections\u003c/b\u003e\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 16. Fragment of the Zupdax network infrastructure\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image16.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 16. Fragment of the Zupdax network infrastructure\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eOne of the Zupdax samples (ffe19202300785f7e745957b48ecc1c108157a6edef6755667a9e7bebcbf750b) uses flashplayeractivex.info subdomains, such as update.flashplayeractivex.info and news.flashplayeractivex.info, as C2. For some time in August 2020, these domains resolved to the IP address 209.250.239.96. At the same time, the go.vegispaceshop.org domain was present at the same IP address.\u003c/p\u003e\r\n\u003cp\u003eThe latter domain, along with the IP address, can be found in the \u003ca href=\"https://insight-jp.nttsecurity.com/post/102gkfp/pandas-new-arsenal-part-2-albaniiutas\" target=\"_blank\"\u003eNTT Security report\u003c/a\u003e on the Albaniiutas malware from the TA428 toolkit. As the \u003ca href=\"https://blog.group-ib.com/task\" target=\"_blank\"\u003edetailed analysis\u003c/a\u003e of Albaniiutas samples by our colleagues from Group-IB shows, this malware is a new version of the RemShell backdoor (BlueTraveller) \u003ca href=\"https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Operation-Taskmasters-2019-eng.pdf\" target=\"_blank\"\u003epreviously identified\u003c/a\u003e by \u003ca href=\"https://www.ptsecurity.com/ru-ru/services/esc/\" target=\"_blank\"\u003ePT ESC\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAnother domain appearing at the IP address 209.250.239.96 at the same time is nameserver.datacertsecure.info. The datacertsecure.info and check.datacertsecure.info domains obviously associated with it resolved to the IP address 139.180.208.225 from June to July 2020. The node simultaneously became \u003ca href=\"https://twitter.com/vishnyak0v/status/1287308019336990720\" target=\"_blank\"\u003eknown\u003c/a\u003e as the HyperBro backdoor control server, and was mentioned by ESET in \u003ca href=\"https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/\" target=\"_blank\"\u003eOperation StealthyTrident.\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eThese connections further unite the attackers' goals: the compromised Able Desktop installers, as well as the above-mentioned samples of Albaniiutas and HyperBro, were used in attacks on organizations in Mongolia.\u003c/p\u003e\r\n\u003ch3 id=\"id3-3\"\u003eDownloaders\u003c/h3\u003e\r\n\u003cp\u003eIn the Space Pirates network infrastructure, we found two types of downloaders containing decoys with Russian text. One of them was also found in the network of our client, who was attacked by criminals.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 17. Example of a decoy document\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image17.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 17. Example of a decoy document\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch4 id=\"id3-3-1\"\u003eDownloader.Climax.A\u003c/h4\u003e\r\n\u003cp\u003eThe first downloader differs by the use of parts of the source code of the Rovnix bootkit (it was \u003ca href=\"https://securelist.com/luckymouse-hits-national-data-center/86083/\" target=\"_blank\"\u003edescribed in detail by Kaspersky\u003c/a\u003e). Note that, according to our data, the network indicators listed in the report, in particular the bamo.ocry.com domain, as well as IP addresses 45.77.244.191 and 45.76.145.22, are part of the Space Pirates network infrastructure.\u003c/p\u003e\r\n\u003cp\u003eWe have no information about what malware was delivered by this downloader. However, researchers from Kaspersky managed to identify likely samples based on the similarity of PDB paths and identical control servers.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 18. Fragment of the Kaspersky report\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image18.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 18. Fragment of the Kaspersky report\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn the screenshots of the payload presented in the report, you can notice a specific technique for storing strings: they are all in one data block and indexed by numbers with the prefix \"PS_\". This technique is found in the code of the publicly available PcShare backdoor. The sets of strings highlighted by the researchers correspond exactly to those that can be found in the open backdoor code. A similar correspondence can be made between the commands supported by the malware. As a result, we can confidently say that this payload is based on the PcShare code.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 19. Fragment of a file of strings from the PcShare code\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image19.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 19. Fragment of a file of strings from the PcShare code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNext, we will consider a modified version of PcShare, which we called RtlShare. Note that during the investigation for our client, we found a RtlShare sample connecting to C2 202.182.98.74. It is also used by the sample Downloader.Climax.A with SHA-256 e9c94ed7265c04eac25bbcdb520e65fcfa31a3290b908c2c2273c29120d0617b. Given the above, we can assume that the payload delivered by the downloader is none other than RtlShare.\u003c/p\u003e\r\n\u003ch4 id=\"id3-3-2\"\u003eDownloader.Climax.B\u003c/h4\u003e\r\n\u003cp\u003eAnother type of downloader can use vulnerabilities in Microsoft Equation Editor for its execution. This vulnerability, in particular, is exploited by a document named \"Mayor of Seoul.rtf\" (7079d8c92cc668f903f3a60ec04dbb2508f23840ef3c57efffb9f906d3bc05ff), created using the notorious Royal Road RTF (8.t) builder, widely used by Asian APT groups.\u003c/p\u003e\r\n\u003cp\u003eThe code of this downloader is completely different from Downloader.Climax.A, but does boast some similar features. In particular, both downloaders use TCP to connect to C2, and the resulting payload is decompressed using the LZW algorithm in both cases.\u003c/p\u003e\r\n\u003cp\u003eDownloader.Climax.B gains persistence in the system via the registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\GetUserConfig. Its task is to get the files named INFOP11.EXE and OINFO11.OCX from the control server and execute the EXE file. Each of the files has its own numeric identifier, which is sent to C2.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 20. Fragment of the downloader code\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image20.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 20. Fragment of the downloader code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eAfter loading, the following configuration parameters in the downloader itself are written to the body of the received OCX file: the node and port of the control server, the waiting time between calls to C2, the TodaySend string, as well as the generated GUID.\u003c/p\u003e\r\n\u003ch3 id=\"id3-4\"\u003eRtlShare\u003c/h3\u003e\r\n\u003cp\u003eThe payload of the RtlShare malware is based on the \u003ca href=\"https://github.com/LiveMirror/pcshare\" target=\"_blank\"\u003epublicly available\u003c/a\u003e PcShare backdoor code. The malware has a specific execution chain, the code of which is not available in open sources. It involves three DLLs, each with its own export name. We will be using these names to refer to the corresponding libraries.\u003c/p\u003e\r\n\u003cp\u003eLet's consider RtlShare using the example of 8ac2165dc395d1e76c3d2fbd4bec429a98e3b2ec131e7951d28a10e9ca8bbc46.\u003c/p\u003e\r\n\u003cp\u003eInterestingly, the attackers used the hacked website of the Petrozavodsk mathematical conference PICCAnA (piccana.karelia.ru) to deliver it; the site is currently unavailable (\u003ca href=\"https://web.archive.org/web/20200131000411/http://piccana.karelia.ru/\" target=\"_blank\"\u003eweb archive\u003c/a\u003e). As a control server, it uses the private IP address 192.168.193.165.\u003c/p\u003e\r\n\u003cp\u003eDuring incident investigation for our client, we encountered almost identical samples using control servers 45.76.145.22, 141.164.35.87, and 202.182.98.74.\u003c/p\u003e\r\n\u003ch4 id=\"id3-4-1\"\u003eDropper rtlstat.dll\u003c/h4\u003e\r\n\u003cp\u003eThe rtlstat.dll library acts as the initial stage of infection, exporting a single function named emBedding. Its task is to extract and run the next-stage library with the internal name rtlmake.dll.\u003c/p\u003e\r\n\u003cp\u003eTo do this, the OS bitness is first checked and the necessary data block is selected, after which it is XOR-decrypted with a key in the form of one of the strings 4af233f4740c2fde7fc95ed3a834d7b1 (x64) and 3ad6faf2d7b714137de31efef137775b (x86). Then the decrypted data is decompressed using the LZ4 algorithm.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 21. Extracting the required version of rtlmake.dll\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image21.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 21. Extracting the required version of rtlmake.dll\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eA data block containing the configuration is copied to the body of the received library (it is encrypted at this stage). The magic number 0xAADDEE99 is used as a marker indicating the place where the configuration will be copied.\u003c/p\u003e\r\n\u003cp\u003eTo bypass detection based on hash sums, attackers add a random number of random bytes to the end of the library, while updating the Checksum field in the PE header of the file. This way, a new file is extracted at each new launch.\u003c/p\u003e\r\n\u003cp\u003eThen the dropper checks whether it is running under the SYSTEM user by searching for the config substring in the path to the LocalAppData folder. If the substring is present, the library is restarted under the current user via rundll32.exe.\u003c/p\u003e\r\n\u003cp\u003eOtherwise, the resulting library is saved to the file %LOCALAPPDATA%\\Microsoft\\Windows\\WER\\Security\\wuaueng.hlk, and the path to it is written to the registry using the key HKCU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32. This section is responsible for the MruPidlList COM object used in the library shell32.dll, which, in turn, loads the process explorer.exe—this is a \u003ca href=\"https://3gstudent.github.io/backup-3gstudent.github.io/Use-COM-Object-hijacking-to-maintain-persistence-Hijack-explorer.exe/\" target=\"_blank\"\u003ewell-known technique\u003c/a\u003e for malware persistence in the system.\u003c/p\u003e\r\n\u003cp\u003eAt the end of its operation, the dropper executes the extracted DLL using regsvr32.exe and self-removes via a BAT file.\u003c/p\u003e\r\n\u003ch4 id=\"id3-4-2\"\u003eInjector rtlmake.dll\u003c/h4\u003e\r\n\u003cp\u003eVersions of rtlmake.dll with different bitness have the same functionality, which is confined to extracting the next-stage DLL and embedding its code into the process rdpclip.exe (or into the current process).\u003c/p\u003e\r\n\u003cp\u003eAt the beginning of its operation, the injector makes sure that it is running in one instance: mutexes are most often used for this purpose, but in this case named file mappings are applied. During the operation of rtlmake.dll, a mapping with the name 55fc3f9a654c500932 is created, while the mapping 7f8b6a2440e5c9e5b6 handles the payload.\u003c/p\u003e\r\n\u003cp\u003eThen, using a function similar to the previous step, the DLL with the payload and configuration is decrypted and decompressed (recall that it was previously copied to rtlmake.dll). The configuration encryption key is the string 2ae06f136eb6588508eefd4b5f6c98d8345f1104746d15141, and the payload encryption key is 1192f6c4b018c8e0f51d31d6dde22ff3.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 22. RtlShare backdoor configuration\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image22.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 22. RtlShare backdoor configuration\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNext, the process in which the payload will be injected is selected. If the current process is explorer.exe (which is true, if the library was loaded as a COM component), then the target process will be rdpclip.exe. If rdpclip.exe failed to start, or if the DLL was loaded into another process, the current process becomes the target one.\u003c/p\u003e\r\n\u003cp\u003eThe decrypted configuration is written to the memory of the selected process, and after that the injector generates a command line of the form /v /c:0x12345678, which contains the configuration address in the address space of the process. The resulting string and payload are also written to the process memory.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 23. Generating the command line in rtlmake.dll\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image23.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 23. Generating the command line in rtlmake.dll\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eTo start execution of the payload, the injector determines the offset in the PE file where the exported Putklm function is located, and after that it gains control of the CreateRemoteThread call. In this case, the command-line address is passed to it as arguments. Note that there is no reflective loading up to this point: the Putklm function actually works as a shellcode.\u003c/p\u003e\r\n\u003ch4 id=\"id3-4-3\"\u003ePayload rtlmain.dll (rtlmainx64.dll)\u003c/h4\u003e\r\n\u003cp\u003eThis DLL is fully implemented based on the code of the main backdoor module PcShare—PcMain. Here are some of its features that are typical only for the RtlShare family:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA reflective loader is implemented inside the library, which is located in the Putklm function. The command-line address that it receives is passed to DllEntryPoint via the lpReserved parameter and is XOR-encrypted with the constant 0x73DE2938. Address recovery and command-line parsing occur inside the DllMain function.\u003c/li\u003e\r\n\u003cli\u003eAfter running rtlmain.dll, all the rdpclip.exe processes are terminated except for the current one.\u003c/li\u003e\r\n\u003cli\u003eThe backdoor string storage, in addition to LZ4 compression (which is present in the open-source code), is AES-encrypted with the key 68fa504a1aee69f71df454e554c74eaf. Similarly, the messages received (key 48d426ca6d45496e7413cf435516af06) and transmitted (key 2e5140d04c7d7da454991bae10160369) are encoded.\u003c/li\u003e\r\n\u003cli\u003eSupport for the connection via a proxy server has been added.\u003c/li\u003e\r\n\u003cli\u003eThere is a special command that allows attackers to overwrite the configuration inside the injector rtlmake.dll (the required offset contains the magic constant 0x76EE38BB).\u003c/li\u003e\r\n\u003cli\u003eThe getip command has been added to the code for implementing the remote command shell, which is done through the call nslookup myip.opendns.com resolver1.opendns.com.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4 id=\"id3-4-4\"\u003eUse of RtlShare\u003c/h4\u003e\r\n\u003cp\u003eRtlShare samples can be found in other reports. For example, Recorded Future researchers \u003ca href=\"https://go.recordedfuture.com/hubfs/reports/cta-2021-0616.pdf\" target=\"_blank\"\u003efound\u003c/a\u003e PcShare samples in the network infrastructure of the RedFoxtrot group, which have significant similarities with the RtlShare family. In addition, similar samples were previously \u003ca href=\"https://www.bitdefender.com/files/News/CaseStudies/study/379/Bitdefender-Whitepaper-Chinese-APT.pdf\" target=\"_blank\"\u003edetected\u003c/a\u003e by Bitdefender when investigating the activity of an APT group with Asian roots aimed at government institutions in Southeast Asia.\u003c/p\u003e\r\n\u003cp\u003eThere are no connections in the network infrastructure between the above-mentioned cases, nor between these cases and the activity that we found during incident investigation for our client. This suggests that despite the absence of RtlShare code in open sources, several different APT groups of Asian origin have access to this malware.\u003c/p\u003e\r\n\u003ch3 id=\"id3-5\"\u003ePlugX\u003c/h3\u003e\r\n\u003cp\u003eWe also found several samples of the PlugX backdoor in our client's network. The samples used micro.dns04.com, microft.dynssl.com, api.microft.dynssl.com, and www.0077.x24hr.com addresses as control servers, which are part of the group's network infrastructure and directly intersect with MyKLoadClient C2.\u003c/p\u003e\r\n\u003cp\u003ePlugX is widely used in the cybercriminal environment; it has several versions and multiple modifications. However, the samples identified by us have a set of features that make it possible to distinguish them into a separate group.\u003c/p\u003e\r\n\u003cp\u003eAs in the usual PlugX, the main payload of the backdoor is implemented in the form of a DLL library, which is reflectively loaded into memory during malware execution. A pointer to the structure is passed to its entry point as an argument; the structure contains, in particular, the signature and address of the encrypted configuration.\u003c/p\u003e\r\n\u003cp\u003eIn the original PlugX, the signature is the constant 0x504C5547 (PLUG string), but in our sample group, this value was equal to 0xCF455089. The configuration size, which is 0x1924 bytes, is also nonstandard: we could not find a mention of such a configuration in open sources. Unlike many other variants that have the XV signature instead of MZ and PE, in our case, the header of the PE file with the payload remains unchanged.\u003c/p\u003e\r\n\u003cp\u003eThe inlining technique is actively used in the backdoor, in particular, for API calls and string encryption.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 24. API function calls in PlugX\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image24.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 24. API function calls in PlugX\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eTo search for API functions, the backdoor uses CRC32 hashes of their names. The received pointers are cached, while the code fragments responsible for this operation are embedded in every place where access to WinAPI is required.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 25. String encryption in PlugX\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image25.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 25. String encryption in PlugX\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eAlmost all the strings in the backdoor are stack-based, most of them are encrypted using the ADD-XOR-SUB method. The decryption code is copied to all places where encrypted strings are used.\u003c/p\u003e\r\n\u003cp\u003eThe malware uses a standard set of plugins \u003ca href=\"https://www.lastline.com/labsblog/an-analysis-of-plugx-malware/\" target=\"_blank\"\u003eknown\u003c/a\u003e from early versions. The original PlugX, during their initialization, uses a parameter that looks like a date. For instance, the Disk plugin has the 0x20120325 parameter. In our case, for all plugins, the 2012 combination has been changed to 8102 (which may mean 2018): the same Disk plugin uses the 0x81020325 value.\u003c/p\u003e\r\n\u003cp\u003eThe entire backdoor also has a numeric value indicating the version: it is transmitted to C2 along with information about the infected system and is equal to 0x20161127. The same version can be found in Backdoor.PlugX.38 from the Dr.Web \u003ca href=\"https://st.drweb.com/static/new-www/news/2020/july/Study_of_the_APT_attacks_on_state_institutions_in_Kazakhstan_and_Kyrgyzstan_en.pdf\" target=\"_blank\"\u003ereport\u003c/a\u003e on attacks on state institutions in Kazakhstan and Kyrgyzstan. However, other unique values from the Space Pirates variant, such as signature and configuration size, are missing in BackDoor.PlugX.38. Both variants seem to be based on the base code of the same version of PlugX, but its modifications in each of these cases are different.\u003c/p\u003e\r\n\u003cp\u003eWe found more precise intersections in other reports. Among the PlugX instances used in the \u003ca href=\"https://www.nortonlifelock.com/sites/default/files/2021-10/OPERATION%20EXORCIST%20White%20Paper.pdf\" target=\"_blank\"\u003eattacks on the Vatican\u003c/a\u003e in 2019–2020 are several samples similar to those used by the Space Pirates group. In addition, the same backdoor modifications are found in samples \u003ca href=\"https://go.recordedfuture.com/hubfs/reports/cta-2021-0616.pdf\" target=\"_blank\"\u003eassociated\u003c/a\u003e with the activity of the RedFoxtrot group. However, we failed to detect connections in the network infrastructure, which again suggests the exchange of tools between groups. Given the other intersections between the malware used in the attacks (Zupdax and RtlShare), we can also assume that all this activity belongs to one or more jointly operating groups. This, however, requires additional confirmation.\u003c/p\u003e\r\n\u003ch4 id=\"id3-5-1\"\u003eDemo dropper\u003c/h4\u003e\r\n\u003cp\u003eSome samples of the PlugX variant we found are extracted into the system by an interesting dropper, whose executable file can be called demo.exe. It is implemented based on the MFC library. Its job is to create a VBS script named msiexece.vbs or cosetsvc.vbs, and perform its subsequent execution.\u003c/p\u003e\r\n\u003cp\u003eThe path to the EXE dropper and the names of the files to be extracted from it are passed to the script as command-line parameters. The files are in the demo.exe overlay and can be encrypted with a 1-byte XOR (but in all samples known to us, the key is 0). The overlay offset and the length of each of the files are written in the VBS code. The script extracts the standard PlugX components: a legitimate EXE file, a DLL for side-loading, and encrypted shellcode, after which the legitimate file is executed.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 26. Writing and execution of the VBS file\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image26.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 26. Writing and execution of the VBS file\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch3 id=\"id3-6\"\u003eBH_A006\u003c/h3\u003e\r\n\u003cp\u003eAs in other cases, we found this malware both on our client's resources and when researching the group's network infrastructure. It contains a modified Gh0st backdoor as a payload. The string BH_A006 is constantly found in PDB paths and internal names of DLL libraries associated with the backdoor, which is why it got this name.\u003c/p\u003e\r\n\u003cp\u003eBH_A006 has a nontrivial payload execution scheme, which can vary at the initial stages in different samples. Let's consider it using the example of one of the malicious files.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-1\"\u003eStage 0. Loading DLL from the overlay\u003c/h4\u003e\r\n\u003cp\u003eSHA-256: 1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097\u003c/p\u003e\r\n\u003cp\u003eThe source sample is an executable file that uses the MFC library. It extracts the contents of the overlay, decrypts itswith XOR with the 0xA0 key, and reflectively loads the resulting DLL into memory.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-2\"\u003eStage 1. DLL dropper\u003c/h4\u003e\r\n\u003cp\u003eSHA-256: 8bf3df654459b1b8f553ad9a0770058fd2c31262f38f2e8ba12943f813200a4d\u003c/p\u003e\r\n\u003cp\u003eextracts the following files:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eC:\\ProgramData\\resmon.resmoncfg\u003c/li\u003e\r\n\u003cli\u003eC:\\ProgramData\\Sandboxie\\SbieIni.dat (install32.dat)\u003c/li\u003e\r\n\u003cli\u003eC:\\ProgramData\\Sandboxie\\SbieDll.dll\u003c/li\u003e\r\n\u003cli\u003eC:\\ProgramData\\Sandboxie\\SandboxieBITS.exe\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAfter that, there is a check for write permission to the system folder. For this, the dropper tries to create a file in it with the name format: wmkawe_%d.data. The content is the Stupid Japanese string.\u003c/p\u003e\r\n\u003cp\u003eIf there is no permission, and the system is 64-bit, two additional files are extracted:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eC:\\ProgramData\\Sandboxie.dll (install64.dll)\u003c/li\u003e\r\n\u003cli\u003eC:\\ProgramData\\Sandboxie.dat (install64.dat)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe names given in parentheses are not used, but are present in the code. Apparently, they were left there from another version of the dropper.\u003c/p\u003e\r\n\u003cp\u003eAll the files are contained in the data section in packaged form; a variant of the LZMA algorithm is used for compression. This compression method is also used in further stages of the malware operation. Further in the section, unless otherwise indicated, we will refer to this algorithm.\u003c/p\u003e\r\n\u003cp\u003eDepending on the available permissions and the OS bitness, the dropper starts one of the chains to bypass the UAC:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e(x32) C:\\ProgramData\\Sandboxie\\SandboxieBITS.exe ByPassUAC\u003c/li\u003e\r\n\u003cli\u003e(x64) rundll32.exe C:\\ProgramData\\Sandboxie\\SbieMsg.dll,installsvc ByPassUAC\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOr it immediately proceeds to the execution of the next stage:\u003cbr/\u003e\r\nC:\\ProgramData\\Sandboxie\\SandboxieBITS.exe InsertS\u003c/p\u003e\r\n\u003cp\u003eIn all three cases, the file %tmp%\\delself.bat is created, which contains commands for self-removal.\u003c/p\u003e\r\n\u003cp\u003eNote that it is not the first time researchers have encountered this sample. Another variant of the MFC loader (\u003ca href=\"#id3-6-1\"\u003estage 0\u003c/a\u003e) containing the same dropper was mentioned by ESET in the \u003ca href=\"https://www.welivesecurity.com/2021/02/01/operation-nightscout-supply-chain-attack-online-gaming-asia/\" target=\"_blank\"\u003eOperation NightScout\u003c/a\u003e report, and then \u003ca href=\"https://blog.vincss.net/2021/02/re020-elephantrat-kunming-version-our-latest-discovered-RAT-of-Panda.html\" target=\"_blank\"\u003estudied\u003c/a\u003e in detail by our colleagues from VinCSS.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-3\"\u003eStage 2. .dat loader (SbieDll.dll / SbieMsg.dll)\u003c/h4\u003e\r\n\u003cp\u003eRegardless of the command run by the DLL dropper, execution jumps to one of the extracted DLL libraries. In the case of a 32-bit version, a legitimate component of the \u003ca href=\"https://en.wikipedia.org/wiki/Sandboxie\" target=\"_blank\"\u003eSandboxie\u003c/a\u003e utility, which is vulnerable to DLL side-loading, is used for this.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 27. Loading and running the shellcode in SbieDll.dll\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image27.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 27. Loading and running the shellcode in SbieDll.dll\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe code in the 32-bit and 64-bit versions of the libraries is almost identical and downloads the corresponding .dat file, decrypts its contents, and executes it. For decryption, XOR is used with the byte sequence: 00, 01, 02, ... FF, 00, 01, ... Just as in the code of the previous stage, here you can see alternative paths to .dat files that are not used during operation.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-4\"\u003eStage 3. Shellcode .dat and DLL\u003c/h4\u003e\r\n\u003cp\u003eThe shellcode is a reflective DLL library loader, which is located in its body immediately after the loading function. In this case, the library functionality differs significantly in shellcode versions with different bitness.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eStage 3.1 ByPassUAC (x64)\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cb id=\"stage3-1-1\"\u003eStage 3.1.1 Intermediate DLL\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe 64-bit version is only responsible for implementing the UAC bypass. To perform this task, it extracts another DLL from itself into memory and transfers control to it. Reflective loading is performed again using a shellcode, which is predecrypted with XOR using the 0x97 key. The shellcode is not autonomous: in addition to the buffer with the PE file, pointers to the necessary functions, such as GetProcAddress and LoadLibraryA, are passed to it.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 28. Decryption and execution of the shellcode for reflective loading\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image28.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 28. Decryption and execution of the shellcode for reflective loading\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eStage 3.1.2 DLL with UAC bypass implementation\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe DLL contains the path to the PDB file: e:\\F35-F22\\昆明版本\\ElephantRat\\nwsapagent\\Bin\\ByPassUAC64.pdb.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 29. Choosing a UAC bypass method\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image29.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 29. Choosing a UAC bypass method\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe UAC bypass method used depends on the presence in the system of the avp.exe process (a component of Kaspersky antivirus products) and on the system version. In total, three well-known methods using \u003ca href=\"http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass\" target=\"_blank\"\u003esdclt.exe\u003c/a\u003e, a \u003ca href=\"https://offsec.almond.consulting/UAC-bypass-dotnet.html\" target=\"_blank\"\u003e.NET library\u003c/a\u003e, and \u003ca href=\"https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e\" target=\"_blank\"\u003emocking trusted directories\u003c/a\u003e have been implemented.\u003c/p\u003e\r\n\u003cp\u003eIf the bypass is successfully implemented using any of the methods, the previously encountered command C:\\ProgramData\\Sandboxie\\SandboxieBITS.exe InsertS is run.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eStage 3.2. ByPassUAC / InstallS (x32)\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cb id=\"stage3-2-1\"\u003eStage 3.2.1. Intermediate DLL\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe 32-bit version of the DLL, which is located in the corresponding DAT file, is obfuscated using an unknown protector.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 30. The entry point in the obfuscated PE file\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image30.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 30. The entry point in the obfuscated PE file\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn the data section of this DLL, there is a compressed shellcode that is decompressed and gains control.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eStage 3.2.2. Decompression shellcode\u003c/b\u003e\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 31. Passing arguments to the function via the return address\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image31.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 31. Passing arguments to the function via the return address\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe shellcode starts with calling the sub_20F function, which takes three arguments: a hash on behalf of VirtualAlloc, the size of the buffer to decompress, and a pointer to the data. The arguments are written immediately after the call statement, and the called function accesses them using an offset relative to the return address.\u003c/p\u003e\r\n\u003cp\u003eThe sub_20F function gets a pointer to the VirtualAlloc function, for which it finds the kernelbase.dll library in the list of loaded modules (which is always assumed to be in second place on the InInitializationOrderModuleList list) and iterates its export table using a hash to find the required function. Then a buffer of the size specified in the arguments with RWX rights is allocated, and the compressed data is unpacked into it. In this case, compression is done with the NRV family algorithm from the \u003ca href=\"http://www.oberhumer.com/opensource/ucl/\" target=\"_blank\"\u003eUCL library\u003c/a\u003e (used in the UPX packer). The data is another shellcode to which control is transferred.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eStage 3.2.3. Relocation shellcode\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe main part of the next shellcode is the contents of data and code sections, apparently extracted from some PE file. To launch correctly at the beginning of its operation, the shellcode performs address correction (relocation). The parameters necessary for it are transmitted in the same way as the previous shellcode using the return address. The relocation is performed relative to the standard base address 0x401000. After its completion, control is transferred to the address of the entry point specified in the parameters (as an offset relative to the end of the relocation table).\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 32. Parameters of the relocation shellcode\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image32.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 32. Parameters of the relocation shellcode\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eStage 3.2.4. Installer in shellcode format\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eThe main function of the installer loads the WinAPI functions necessary for operation, after which it can perform the operation specified in the command line.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 33. Code fragment of the shellcode installer\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image33.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 33. Code fragment of the shellcode installer\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe following commands are supported:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInsertS: create a service named Network Service. The name of the current module with the runsvc parameter is specified as the launch path. If there are no avp.exe processes in the list, the service is launched immediately.\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eRunsvc: delete all auxiliary files and folders that could be used in the UAC bypass. Decompressing the next-stage shellcode, creating an svchost.exe process, and injecting the decompressed shellcode.\r\nInterestingly, in the code for impersonation and starting the svchost.exe process, a special check has been implemented only for the Russian language, which indicates an orientation to Russian-language OS versions.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 34. Special processing for the Russian-language version of the system\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image34.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 34. Special processing for the Russian-language version of the system\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn addition, a separate thread is created that checks for Global\\MYKERNELDLLMAPPING06 mapping every 50 seconds. In case of its absence in the system, the creation of svchost.exe and shellcode injection are repeated.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eByPassUAC: works completely similar to the 64-bit version (\u003ca href=\"#stage3-1-1\"\u003estage 3.1.1\u003c/a\u003e)—it decompresses the DLL with the implementation of UAC bypass methods and transfers control to it.\u003c/li\u003e\r\n\u003cli\u003eMemload: there is a MemLoadServer debug message in the code. Decompresses the next-stage shellcode and runs it directly in the current process.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4 id=\"id3-6-5\"\u003eStage 4. MemLoadLibrary\u003c/h4\u003e\r\n\u003cp\u003eThe fourth stage has a previously encountered format: the decompression shellcode extracts the relocation shellcode, which in turn executes the main code (obtained from the PE file). The main code in this case is small in volume and is responsible for decompressing and reflectively loading the DLL into memory. The reflective loader is implemented in the form of an XOR-encrypted shellcode, as in \u003ca href=\"#stage3-1-1\"\u003estage 3.1.1\u003c/a\u003e. After loading the library, control is transferred to the exported Online function.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 35. Decompressing the DLL and starting the Online export\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image35.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 35. Decompressing the DLL and starting the Online export\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe DLL is again just an intermediate loader and runs another shellcode.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 36. Online function code\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image36.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 36. Online function code\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe new shellcode is an unpacking shellcode, and stage 4 is repeated exactly, right up to calling the Online function from the latest DLL library.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-6\"\u003eStage 5. Payload\u003c/h4\u003e\r\n\u003cp\u003eIt is a backdoor partially obfuscated with the help of a previously encountered packer (\u003ca href=\"#stage3-2-1\"\u003estage 3.2.1\u003c/a\u003e), which is based on the Gh0st trojan code.\u003c/p\u003e\r\n\u003cp\u003eInterestingly, the signature of network packets (Gh0st in the original) in this version is generated and checked in a special way. In a 4-byte value, only the lowest bit of each byte carries the payload, the remaining bits are random. The lower bits must satisfy a set of logical relations involving the lower bits of the magic constant 0x31230C0. Note that a similar algorithm for checking these relations using the same constant can be found in loaders of .dat files (\u003ca href=\"#id3-6-3\"\u003estage 2\u003c/a\u003e), but the result of its operation is not used there.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 37. Generating a signature in the constructor of the CClientSocket class\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image37.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 37. Generating a signature in the constructor of the CClientSocket class\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe library has the export name BH_A006_SRV.dll, and in the PE file overlay, you can find the corresponding PDB path:\u003c/p\u003e\r\n\u003cp\u003eD:\\005（fastapp f35 20181009）\\nwsapagent\\KernelTrjoan\\BH_A006_SRV\\BH_A006_SRV\\Debug\\BH_A006_SRV.pdb\u003c/p\u003e\r\n\u003cp\u003eWe managed to find a sample of the malware (57d4c08ce9a45798cd9b0cf08c933e26ffa964101dcafb1640d1df19c223e738), which has a similar obfuscation and an identical algorithm for generating a network signature, and contains the name BH_A006_SRV.dll. This sample was uploaded to VirusTotal in 2015.\u003c/p\u003e\r\n\u003ch4 id=\"id3-6-7\"\u003eConnection with 9002 RAT\u003c/h4\u003e\r\n\u003cp\u003eIn studying the execution chain of the BH_A006 backdoor, it turned out that the technique used for converting a PE file into an autonomous compressed shellcode is not unique. Similar decompression and relocation shellcodes, as well as the procedure for loading WinAPI functions, are present in instances of the 9002 RAT malware. For example, they can be found in the sample 52374f68d1e43f1ca6cd04e5816999ba45c4e42eb0641874be25808c9fe15005 from the \u003ca href=\"https://www.trendmicro.com/en_us/research/18/h/supply-chain-attack-operation-red-signature-targets-south-korean-organizations.html\" target=\"_blank\"\u003eTrend Micro report\u003c/a\u003e on attacks on South Korean companies—one of the last mentions of this malware.\u003c/p\u003e\r\n\u003ch3 id=\"id3-7\"\u003eDeed RAT\u003c/h3\u003e\r\n\u003cp\u003eAnother type of previously unknown malware, which we found in a single instance in our client's infrastructure, is a modular backdoor. Based on the value of the signature used in the header of its modules, we named it Deed RAT.\u003c/p\u003e\r\n\u003cp\u003eThe Deed RAT control server ftp.microft.dynssl.com is directly connected to the infrastructure of the Space Pirates group. Another similarity can be found in one of the code features: the [xor 0xBB, sub 0x1] operations are used to encrypt the shellcode in the same way as in the part of PlugX samples.\u003c/p\u003e\r\n\u003cp\u003eThe payload execution scheme resembles the standard method that PlugX uses: a legitimate EXE file signed by Trend Micro loads a malicious library TmDbgLog.dll, which, in turn, runs the encrypted shellcode from the file PTWD.tmp.\u003c/p\u003e\r\n\u003cp\u003eHowever, an interesting method of transferring control to the shellcode is used: at the time of loading, the library modifies the executable file so that after returning control to the EXE file, the FreeLibrary function is immediately called for it. Having regained control at the time of unloading, the library modifies the executable file again, writing assembly instructions for calling the shellcode to it—they will be executed immediately after returning from FreeLibrary.\u003c/p\u003e\r\n\u003cp\u003eThe shellcode is the loader of the main module, which is located in compressed and encrypted form after the loading code. The module has a special structure and uses techniques borrowed from PE files. In particular, the module has three \"sections\" with different access rights and a relocation table completely similar to the one used in PE format.\u003c/p\u003e\r\n\u003cp\u003eThe decrypted module consists of a header starting with the signature 0xDEED4554 and a main data block compressed with LZNT1, which contains section data and a relocation table. For each of the sections, the header indicates its actual size and the size in memory, which is aligned to the 0x1000 boundary. The header structure looks as follows:\u003c/p\u003e\r\n\u003cpre\u003e\u003cdiv class=\"code\"\u003estruct SectionHeader{\r\n    _DWORD VirtualSize;\r\n    _DWORD SizeOfRawData;\r\n};\r\n\r\nstruct ModuleHeader{\r\n    _DWORD Signature; // 0xDEED4554\r\n    _DWORD ModuleId;\r\n    _DWORD EntryPoint;\r\n    _DWORD OriginalBase;\r\n    _DWORD AbsoluteOffset; // 0x1000\r\n    SectionHeader Sections[3];\r\n    _DWORD Unknown;\r\n};\u003c/div\u003e\u003c/pre\u003e\r\n\u003cp\u003eDuring operation, the loader allocates the necessary memory area, copies each of the sections into it (taking into account its size in memory), and performs address configuration (relocation). The first of the sections contains executable code, and RX permissions are set for its memory area, the other sections have RW permissions. After loading the sections, the module entry point specified in the header gain control.\u003c/p\u003e\r\n\u003cp\u003eThe main backdoor module has the identifier 0x20 and is responsible for loading and managing plugins that implement various functions. In its data section, there are eight encrypted plugins that are initialized at the beginning of operation:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eID\u003c/th\u003e\r\n\u003cth\u003eName\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003cth\u003eNetwork commands\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x30\u003c/td\u003e\r\n\u003ctd\u003eStartup\u003c/td\u003e\r\n\u003ctd\u003eA plugin that implements the malware startup algorithm\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x40\u003c/td\u003e\r\n\u003ctd\u003eConfig\u003c/td\u003e\r\n\u003ctd\u003eA plugin that handles the configuration\u003c/td\u003e\r\n\u003ctd\u003e0x40: transferring the configuration to C2\u003cbr/\u003e\r\n0x41: receiving a new configuration from C2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0xA0\u003c/td\u003e\r\n\u003ctd\u003eInstall\u003c/td\u003e\r\n\u003ctd\u003eA plugin responsible for persistence on the infected computer. Persistence can be achieved through the mechanism of services and through the registry (the key is set by the configuration)\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0xB0\u003c/td\u003e\r\n\u003ctd\u003eInject\u003c/td\u003e\r\n\u003ctd\u003eA plugin that implements code injection into a given process (determined by the configuration)\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x60\u003c/td\u003e\r\n\u003ctd\u003eNetwork\u003c/td\u003e\r\n\u003ctd\u003eA plugin that manages network interaction\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x70\u003c/td\u003e\r\n\u003ctd\u003eNetSocket\u003c/td\u003e\r\n\u003ctd\u003eA plugin that implements various types of connectors for network interaction\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x50\u003c/td\u003e\r\n\u003ctd\u003ePlugin\u003c/td\u003e\r\n\u003ctd\u003eA plugin that implements registry monitoring for the appearance of new plugins in it and their loading\u003c/td\u003e\r\n\u003ctd\u003e0x50: collecting information about plugins\u003cbr/\u003e\r\n0x51: adding a plugin to the registry and launching it\u003cbr/\u003e\r\n0x52: removing the plugin from the registry and memory\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x90\u003c/td\u003e\r\n\u003ctd\u003eNetProxy\u003c/td\u003e\r\n\u003ctd\u003eA plugin that manages information about available proxy servers. It has a built-in sniffer for automatic detection of proxies used by the infected computer\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eUnlike the main module, an algorithm based on Salsa20 is used to encrypt plugins. Among the modifications is a custom constant for the key extension, equal to arbitraryconstat. The structure of the decrypted plugin completely copies the structure of the main module, and a similar algorithm is used to load it.\u003c/p\u003e\r\n\u003cp\u003eEach plugin implements five service operations that are implemented at its entry point:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eInitialization.\u003c/li\u003e\r\n\u003cli\u003eObtaining the numeric ID of the plugin.\u003c/li\u003e\r\n\u003cli\u003eObtaining the plugin name.\u003c/li\u003e\r\n\u003cli\u003eObtaining a link to the structure with the plugin's API functions.\u003c/li\u003e\r\n\u003cli\u003eResource deallocation.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 38. Entry point of the Config plugin\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image38.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 38. Entry point of the Config plugin\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe useful functionality of the plugin is available through the structure with its API functions. Among them, there may be a dispatcher function responsible for processing network commands that the plugin supports. The main module also has an API that allows you to access other plugins and implements auxiliary functions, such as encryption or access to the registry.\u003c/p\u003e\r\n\u003cp\u003eOne interesting feature of the backdoor is the pseudorandom generation of various kinds of strings—registry keys, names of mutexes and pipes, and command-line arguments. A string of the required length is created on the basis of a seed, which is generated using the numeric identifier of the string and the serial number of the system volume. As a result, each of the infected computers uses its own unique set of string constants.\u003c/p\u003e\r\n\u003cfigure\u003e\r\n\u003cimg alt=\"Figure 39. ID generation algorithm\" src=\"/upload/corporate/ww-en/images/esc/article_333388/image39.png\"/\u003e\r\n\u003cfigcaption\u003eFigure 39. ID generation algorithm\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe backdoor stores all the necessary data in the registry key [HKLM|HKCU]\\Software\\Microsoft\\. For each type of information, it creates its own subkey, the name of which is obtained using the string generator described above. To get all the keys that the backdoor can use, we implemented a script in Python that accepts the serial number of the volume and reproduces the operation of the generator.\u003c/p\u003e\r\n\r\n\u003cdiv class=\"accordion\"\u003e\r\n    \u003cdiv class=\"accordion__item accordionList\"\u003e\r\n        \u003cdiv class=\"accordion__header grid-cr grid-cr-space-between accordionAction\"\u003e\r\n            \u003cdiv class=\"title title_accordion\"\u003e\r\n                \u003ch4\u003eRegistry keys generator\u003c/h4\u003e\r\n            \u003c/div\u003e\r\n            \u003cdiv class=\"cross-box cross-box_angle\"\u003e\u003c/div\u003e\r\n        \u003c/div\u003e\r\n        \u003cdiv class=\"accordion__content accordionHideList\"\u003e\r\n            \u003cdiv class=\"accordion__inner\"\u003e\r\n                \u003carticle\u003e\r\n                    \u003cpre\u003e\r\n                      \u003cdiv class=\"code\"\u003e\r\nimport click\r\n\r\n\r\ndef rshift(val, n):\r\n    s = val \u0026 0x80000000\r\n    for i in range(0,n):\r\n        val \u003e\u003e= 1\r\n        val |= s\r\n    return val\r\n\r\n\r\ndef generator(volume_number, seed, length):\r\n    gr_seed = (volume_number + seed + 0x1000193) \u0026 0xffffffff\r\n    r = []\r\n    for i in range(length):\r\n        r1 = (gr_seed * 0x2001) \u0026 0xffffffff\r\n        r2 = rshift(r1, 7)\r\n        r3 = r2 ^ r1\r\n        r4 = (r3 * 9) \u0026 0xffffffff\r\n        r5 = rshift(r4, 17)\r\n        r6 = r4 ^ r5\r\n        r7 = (r6 * 33) \u0026 0xffffffff\r\n        r.append(((r7 \u0026 0xffff) % 26) + 0x41)\r\n        gr_seed = r7 \r\n    \r\n    return bytes(r).decode('utf-8')\r\n\r\n@click.command()\r\n@click.argument(\"VOLUME_NUMBER\")\r\ndef main(volume_number):\r\n    try:\r\n        serial_number = int(volume_number, 16)\r\n    except ValueError:\r\n        print(\"[~] Invalid Volume number\")\r\n        return \r\n\r\n    registry_key_1 = generator(serial_number, 0xC4DA8B2F, 6)\r\n\r\n    registry_key_2 = generator(serial_number, 0x7BD90AA1, 10)\r\n    registry_key_3 = generator(serial_number, 0xF7BBC23F, 10)\r\n\r\n    registry_key_4 = generator(serial_number, 0xDF12A5B2, 8)\r\n    registry_key_5 = generator(serial_number, 0x6EB208A4, 9)\r\n\r\n    registry_key_6 = generator(serial_number, 0xDE8765CB, 8)\r\n    registry_key_7 = generator(serial_number, 0x6D3C218A, 8)\r\n\r\n    registry_key_8 = generator(serial_number, 0x78D3BC22, 8)\r\n    registry_key_9 = generator(serial_number, 0xD53BCA90, 10)\r\n\r\n    registry_key_11 = generator(serial_number, 0x4FD82CB4, 8)\r\n    registry_key_13 = generator(serial_number, 0xDCBC5D23, 8)\r\n\r\n    registry_key_10 = generator(serial_number, 0xE2C7BA56, 15)\r\n    \r\n    registry_key_12 = generator(serial_number, 0x8BD43C12, 8)\r\n\r\n    print(f\"[+] Plugin monitor registry key: [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_1}\")\r\n    print(f\"[+] Executable path: [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_3}; ValueName: {registry_key_2}\")\r\n    print(f\"[+] Machine ID: [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_5}; ValueName: {registry_key_4}\")\r\n    print(f\"[+] Shellcode for injection: [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_6}; ValueName: {registry_key_7}\")\r\n    print(f\"[+] Proxies: [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_9}; ValueName: {registry_key_8}\")\r\n    print(f\"[+] Config : [HKCU|HKLM]\\\\Software\\\\Microsoft\\\\{registry_key_11}; ValueName: {registry_key_13}\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n                      \u003c/div\u003e\r\n                    \u003c/pre\u003e\r\n                \u003c/article\u003e\r\n            \u003c/div\u003e\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003eThe Network plugin is responsible for the algorithm of interaction with the control server. It extracts the C2 address as a URL string from the configuration and, depending on the scheme specified in it, selects one of the connectors available in the NetSocket plugin. All of them implement a common interface for uniformly receiving and transmitting network messages. Before sending, messages are compressed using the LZNT1 algorithm and encrypted with a modified Salsa20 using a random key.\u003c/p\u003e\r\n\u003cp\u003eTo resolve the domain of the control server, the backdoor consistently uses DNS over HTTPS and the usual DNS servers specified in the configuration (public servers of Google and other providers), before resorting to the standard mechanism. This gives the malware the opportunity to hide the C2 domain from network traffic inspection tools.\u003c/p\u003e\r\n\u003cp\u003eSupported connection protocols include TCP, TLS, HTTP, HTTPS, UDP, and DNS.\u003c/p\u003e\r\n\u003cp\u003eThe REUSEPORT option is available for TCP—specifying it leads to prebinding of the socket with which the connection to C2 is established. Binding is performed on the largest free port in the range of system (well-known) ports. The ports are checked starting from 1022 in descending order. Apparently, this technique is implemented to bypass security measures and disguise traffic as system network services.\u003c/p\u003e\r\n\u003cp\u003eThe backdoor also provides for the possibility of obtaining a new C2 over HTTP. To do this, a web page can be used, the address of which is specified in the configuration with the URL:// scheme. After the page loads, its body is searched for the agmsy4 and ciou0 substrings, which indicate the beginning and end of the string with the control server. This string is encoded using base16 (hex) with the abcghimnostuyz0456 alphabet and is processed similarly to the address from the configuration.\u003c/p\u003e\r\n\u003cp\u003eTCP/TLS and HTTP/HTTPS connectors support connection via a proxy server, which can be obtained using the NetProxy plugin. The plugin has its own proxy storage, which is located in the registry and can be filled with values from the configuration, system proxies, and data from installed browsers (Chrome, Opera, and Firefox). In addition, the plugin has the functionality of a built-in sniffer that listens to the traffic of the infected computer using a raw socket. If the sniffer detects an attempt to connect to a proxy server (SOCKS4, SOCKS5, or HTTP) in the outgoing packet, it saves information about it in the storage.\u003c/p\u003e\r\n\u003cp\u003eBefore connecting to the control server, the backdoor checks the schedule: up to four entries can be specified in its configuration, containing the days of the week and the hours during which the connection is prohibited.\u003c/p\u003e\r\n\u003cp\u003eAfter the connection is established, the backdoor can execute the following commands:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eID\u003c/th\u003e\r\n\u003cth\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x210\u003c/td\u003e\r\n\u003ctd\u003eCollect information about the system\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x211\u003c/td\u003e\r\n\u003ctd\u003eCreation of a separate connection to work with plugins\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x212\u003c/td\u003e\r\n\u003ctd\u003eSelf-removal\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x213\u003c/td\u003e\r\n\u003ctd\u003eEmpty command (ping)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x214\u003c/td\u003e\r\n\u003ctd\u003eConnection deactivation\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x215\u003c/td\u003e\r\n\u003ctd\u003eUpdate of the shellcode for the injection, which is stored in the registry\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0x216\u003c/td\u003e\r\n\u003ctd\u003eUpdate of the main shellcode on the disk. All plugins stored in the registry are deleted\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eIf a command is received that is not on the list above, it is assumed that it is a network command of one of the plugins. Its ID is determined by applying the mask 0xFFF0 to the command ID. If the plugin is not available locally, it is preloaded from C2 and saved in the registry.\u003c/p\u003e\r\n\u003cp\u003eOn the computer infected with Deed RAT, we were able to detect a single plugin obtained dynamically from the control server. It is called Shell, and its ID is 0x270. Shell supports two network commands (0x270 and 0x271); each of them starts the specified process and redirects its I/O to C2. In the first case, the interaction takes place in text mode via pipes. In the second case, Windows Console API operations are used, which allows attackers to fully emulate a console window on their side, taking into account information about the size of the screen buffer, cursor position, and other parameters.\u003c/p\u003e\r\n\u003cp\u003eThe configuration of the sample we examined contained the following set of strings:\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eString\u003c/th\u003e\r\n\u003cth\u003ePurpose\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e%ALLUSERSPROFILE%\\Test\\Test.exe\u003c/td\u003e\r\n\u003ctd\u003ePath to the legitimate executable file (installation path)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eTmDbgLog.dll\u003c/td\u003e\r\n\u003ctd\u003eLibrary name for DLL side-loading\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ePTWD.tmp\u003c/td\u003e\r\n\u003ctd\u003eFile name with the encrypted shellcode\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eTest\u003c/td\u003e\r\n\u003ctd\u003eService name\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eTrend Micro Platinum\u003c/td\u003e\r\n\u003ctd\u003eDisplayed service name\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ePlatinum Watch Dog\u003c/td\u003e\r\n\u003ctd\u003eService description\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\u003c/td\u003e\r\n\u003ctd\u003eKey for persistence in the registry\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e%windir%\\system32\\svchost.exe\u003c/td\u003e\r\n\u003ctd\u003eProcess names for injecting code\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e%windir%\\system32\\taskeng.exe\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e%ProgramFiles%\\Internet Explorer\\iexplore.exe\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e%windir%\\system32\\WmiPrvSE.exe\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ehio2cF9VF2Jsdf9n\u003c/td\u003e\r\n\u003ctd\u003eIdentifier sent along with system information\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003easdRFSDabormhkmfgUIYGBDURE\u003c/td\u003e\r\n\u003ctd\u003eMutex name\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ehttps://dns.google/dns-query\u003c/td\u003e\r\n\u003ctd\u003eAddresses of DNS over HTTPS servers\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ehttps://cloudflare-dns.com/dns-query\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ehttps://dns.adguard.com/dns-query\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ehttps://dns.quad9.net/dns-query\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eTCP://ftp.microft.dynssl.com:53412\u003c/td\u003e\r\n\u003ctd\u003eControl server URL\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003ch2 id=\"id4\"\u003eConclusion\u003c/h2\u003e\r\n\u003cp\u003eAPT groups with Asian roots continue to attack Russian companies, as evidenced by the activity of Space Pirates. Cybercriminals both develop new malware that implements non-standard techniques (such as Deed RAT) and use modifications of existing backdoors. Such modifications sometimes feature multiple layers of obfuscation to defeat security tools and complicate the analysis procedure—as in the case of BH_A006, built on the code of the popular Gh0st backdoor.\u003c/p\u003e\r\n\u003cp\u003eA separate difficulty as regards APT groups operating out of the Asian region is accurate attribution: the frequent exchange of tools and, in some cases, joint activity of groups significantly complicate this task. The core part of our research is based on the results of our investigation of an information security incident at our client's premises and analysis of specific network infrastructure that uses DDNS domains. The data obtained allows us to state with certainty that the same attackers are behind the detected activity.\u003c/p\u003e\r\n\u003cp\u003ePT ESC will continue to monitor the threats: new facts may provide more information about the activities of Space Pirates and its relationship with other groups.\u003c/p\u003e\r\n\u003ch2 id=\"id5\"\u003eAppendices\u003c/h2\u003e\r\n\u003ch3 id=\"id5-1\"\u003eMITRE\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003e\u003cb\u003eID\u003c/b\u003e\u003c/th\u003e\r\n\u003cth\u003e\u003cb\u003eName\u003c/b\u003e\u003c/th\u003e\r\n\u003cth\u003e\u003cb\u003eDescription\u003c/b\u003e\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eInitial Access\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1566.001\u003c/td\u003e\r\n\u003ctd\u003ePhishing: Spearphishing Attachment\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses phishing emails with malicious attachments\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1566.002\u003c/td\u003e\r\n\u003ctd\u003ePhishing: Spearphishing Link\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses phishing emails with links to malware\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eExecution\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1059.003\u003c/td\u003e\r\n\u003ctd\u003eCommand and Scripting Interpreter: Windows Command Shell\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware features remote command shell functionality\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1059.005\u003c/td\u003e\r\n\u003ctd\u003eCommand and Scripting Interpreter: Visual Basic\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses VBS scripts, including ReVBShell\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1106\u003c/td\u003e\r\n\u003ctd\u003eNative API\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware uses WinAPI functions to run new processes and implement shellcode\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1053.002\u003c/td\u003e\r\n\u003ctd\u003eScheduled Task/Job: At (Windows)\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses atexec.py to run commands on a remote host\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1053.005\u003c/td\u003e\r\n\u003ctd\u003eScheduled Task/Job: Scheduled Task\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses system tasks\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1569.002\u003c/td\u003e\r\n\u003ctd\u003eSystem Services: Service Execution\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates creates malicious services.\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003ePersistence\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1053.005\u003c/td\u003e\r\n\u003ctd\u003eScheduled Task/Job: Scheduled Task\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates creates system tasks for persistence on the host\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1543.003\u003c/td\u003e\r\n\u003ctd\u003eCreate or Modify System Process: Windows Service\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates creates malicious services for persistence on the host\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1546.015\u003c/td\u003e\r\n\u003ctd\u003eEvent Triggered Execution: Component Object Model Hijacking\u003c/td\u003e\r\n\u003ctd\u003eRtlShare malware persists in the system through substitution of the MruPidlList COM object\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1547.001\u003c/td\u003e\r\n\u003ctd\u003eBoot or Logon Autostart Execution: Registry Run Keys / Startup Folder\u003c/td\u003e\r\n\u003ctd\u003eFor persistence on the host, Space Pirates can place a shortcut in the autorun folder and use the Run and RunOnce registry keys\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003ePrivilege Escalation\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1548.002\u003c/td\u003e\r\n\u003ctd\u003eAbuse Elevation Control Mechanism: Bypass User Account Control\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware contains various techniques for bypassing UAC\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1068\u003c/td\u003e\r\n\u003ctd\u003eExploitation for Privilege Escalation\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates can exploit the CVE-2017-0213 vulnerability for privilege escalation\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eDefense Evasion\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1027.001\u003c/td\u003e\r\n\u003ctd\u003eObfuscated Files or Information: Binary Padding\u003c/td\u003e\r\n\u003ctd\u003eThe RtlShare dropper adds random bytes to the extracted payload\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1027.002\u003c/td\u003e\r\n\u003ctd\u003eObfuscated Files or Information: Software Packing\u003c/td\u003e\r\n\u003ctd\u003eOne of the stages of the BH_A006 malware is obfuscated using an unknown protector\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1036.004\u003c/td\u003e\r\n\u003ctd\u003eMasquerading: Masquerade Task or Service\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses legitimate-looking names when creating services\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1036.005\u003c/td\u003e\r\n\u003ctd\u003eMasquerading: Match Legitimate Name or Location\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates masks its malware as legitimate software\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1055\u003c/td\u003e\r\n\u003ctd\u003eProcess Injection\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware can inject shellcode into other processes\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1055.001\u003c/td\u003e\r\n\u003ctd\u003eProcess Injection: Dynamic-link Library Injection\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware can inject DLLs with payload into other processes\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1078.002\u003c/td\u003e\r\n\u003ctd\u003eValid Accounts: Domain Accounts\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses compromised privileged credentials\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1112\u003c/td\u003e\r\n\u003ctd\u003eModify Registry\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT stores all its data in the registry, including configuration and plugins\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1140\u003c/td\u003e\r\n\u003ctd\u003eDeobfuscate/Decode Files or Information\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware uses various algorithms to encrypt configuration data and payload\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1197\u003c/td\u003e\r\n\u003ctd\u003eBITS Jobs\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses BITS jobs to download malware\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1218.011\u003c/td\u003e\r\n\u003ctd\u003eSigned Binary Proxy Execution: Rundll32\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates can use rundll32.exe to run DLLs\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1553.002\u003c/td\u003e\r\n\u003ctd\u003eSubvert Trust Controls: Code Signing\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses stolen certificates to sign some Zupdax samples\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1564.001\u003c/td\u003e\r\n\u003ctd\u003eHide Artifacts: Hidden Files and Directories\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates can store its malware in hidden folders at C:\\ProgramData\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1574.002\u003c/td\u003e\r\n\u003ctd\u003eHijack Execution Flow: DLL Side-Loading\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses legitimate applications vulnerable to DLL side-loading\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1620\u003c/td\u003e\r\n\u003ctd\u003eReflective Code Loading\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware uses reflective loading to run payloads in memory\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eCredential Access\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1555.003\u003c/td\u003e\r\n\u003ctd\u003eCredentials from Password Stores: Credentials from Web Browsers\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses the Chromepass tool to retrieve passwords from Chrome browser storage\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1003.001\u003c/td\u003e\r\n\u003ctd\u003eOS Credential Dumping: LSASS Memory\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates gets LSASS process dumps for further credential dumping\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1040\u003c/td\u003e\r\n\u003ctd\u003eNetwork Sniffing\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT collects information about in-use proxies through network sniffing\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eDiscovery\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1087.001\u003c/td\u003e\r\n\u003ctd\u003eAccount Discovery: Local Account\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about users through the query user command\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1087.002\u003c/td\u003e\r\n\u003ctd\u003eAccount Discovery: Domain Account\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about users in the domain through the legitimate CSVDE tool\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1082\u003c/td\u003e\r\n\u003ctd\u003eSystem Information Discovery\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware collects system information, including OS version, CPU, memory, and disk information\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1614.001\u003c/td\u003e\r\n\u003ctd\u003eSystem Location Discovery: System Language Discovery\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT gets the language code identifier (LCID) during system information collection\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1016\u003c/td\u003e\r\n\u003ctd\u003eSystem Network Configuration Discovery\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about the network settings of the infected machine\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1069.002\u003c/td\u003e\r\n\u003ctd\u003ePermission Groups Discovery: Domain Groups\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about groups in the domain through the legitimate CSVDE tool\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1083\u003c/td\u003e\r\n\u003ctd\u003eFile and Directory Discovery\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about .doc and .pdf files in the system\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1033\u003c/td\u003e\r\n\u003ctd\u003eSystem Owner/User Discovery\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates collects information about users of compromised computers\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1057\u003c/td\u003e\r\n\u003ctd\u003eProcess Discovery\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses the tasklist.exe tool to retrieve process information\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eLateral Movement\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1021.002\u003c/td\u003e\r\n\u003ctd\u003eRemote Services: SMB/Windows Admin Shares\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses the atexec.py and psexec.rb tools to move through the network\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eCollection\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1119\u003c/td\u003e\r\n\u003ctd\u003eAutomated Collection\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates searches for and copies files with the masks *.doc and *.pdf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1560.001\u003c/td\u003e\r\n\u003ctd\u003eArchive Collected Data: Archive via Utility\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates zips stolen documents into password-protected archives using 7-Zip\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1056.001\u003c/td\u003e\r\n\u003ctd\u003eInput Capture: Keylogging\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware can capture user input\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cb\u003eCommand and Control\u003c/b\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1071.001\u003c/td\u003e\r\n\u003ctd\u003eApplication Layer Protocol: Web Protocols\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT can encapsulate its protocol in HTTP and HTTPS\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1071.004\u003c/td\u003e\r\n\u003ctd\u003eApplication Layer Protocol: DNS\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT can encapsulate its protocol in DNS\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1132.001\u003c/td\u003e\r\n\u003ctd\u003eData Encoding: Standard Encoding\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware can compress network messages using the LZNT1 and LZW algorithms\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1573.001\u003c/td\u003e\r\n\u003ctd\u003eEncrypted Channel: Symmetric Cryptography\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware can encrypt network messages using symmetric algorithms\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1008\u003c/td\u003e\r\n\u003ctd\u003eFallback Channels\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware supports multiple C2s and can update the C2 list through web pages\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1095\u003c/td\u003e\r\n\u003ctd\u003eNon-Application Layer Protocol\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates malware uses its own protocols to communicate with the C2 server\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1105\u003c/td\u003e\r\n\u003ctd\u003eIngress Tool Transfer\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates downloads additional utilities from the C2 server using the certutil tool\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1571\u003c/td\u003e\r\n\u003ctd\u003eNon-Standard Port\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses non-standard ports, such as 8081, 5351, 63514, etc., to communicate with the C2 server\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1572\u003c/td\u003e\r\n\u003ctd\u003eProtocol Tunneling\u003c/td\u003e\r\n\u003ctd\u003eSpace Pirates uses the dog-tunnel tool to tunnel traffic\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eT1090.001\u003c/td\u003e\r\n\u003ctd\u003eProxy: Internal Proxy\u003c/td\u003e\r\n\u003ctd\u003eDeed RAT can detect and use a proxy to connect to C2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003ch3 id=\"id5-2\"\u003eIOCs\u003c/h3\u003e\r\n\u003ch4 id=\"id5-2-1\"\u003eFile indicators\u003c/h4\u003e\r\n\u003cp\u003e\u003cb\u003eMyKLoadClient\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e947f042bd07902100dd2f72a15c37e2397d44db4974f4aeb2af709258953636f\u003c/td\u003e\r\n\u003ctd\u003e09c29c4d01d25bae31c5a8b29474258dc1e40936\u003c/td\u003e\r\n\u003ctd\u003ea2f2e6cdd27c13d2d2d3a5d15e905bb4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e949cb5d03a7952ce24b15d6fccd44f9ed461513209ad74e6b1efae01879395b1\u003c/td\u003e\r\n\u003ctd\u003e55604a258d56931d0e1be05bcbe76f675ed69e6e\u003c/td\u003e\r\n\u003ctd\u003e5cce810a04197dc25231c477e7e0b402\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e35e36627dbbcb2b6091cc5a75ab26d9e5b0d6f9764bc11eb2851e3ebd3fbfe6e\u003c/td\u003e\r\n\u003ctd\u003e415ae82bc0aa94e425009068a239e85a78b8e837\u003c/td\u003e\r\n\u003ctd\u003ef250cc6ea8b240cfe9eb7e2007656e53\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e730b9ee9f031c8c543664ee281c7988467a3c83eabbbde181aa280314a91ba41\u003c/td\u003e\r\n\u003ctd\u003e7be81aa01715c78166b8529eb999ec52f01a6367\u003c/td\u003e\r\n\u003ctd\u003e399e655f1544e6c34601d3ee1e99d088\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e16c2e10b2e3d74732edfae4a4fcc118600e9212162256434f34121fa41eaf108\u003c/td\u003e\r\n\u003ctd\u003e7f9d53dc8247e68bfc30c2399eb227a9f1aa9dae\u003c/td\u003e\r\n\u003ctd\u003e850c1355f713c6f6235863d7245221ea\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb822a4ec46aacb3bb4c22fe5d9298210bfa442118ee05a1532c324a5f847a9e6\u003c/td\u003e\r\n\u003ctd\u003e869bd4d2520e5f2cf1d86e7fa21d0fb9a8fae41b\u003c/td\u003e\r\n\u003ctd\u003e12c83dc14e08c206725933e7b69e8e66\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e192499ad69ec23900f4c0971801e7688f9b5e1dc5d5365d3d77cb9bf14e5fd73\u003c/td\u003e\r\n\u003ctd\u003ec3f82d46c5138ba89e3a8fe5ea80ce3b0d2467c0\u003c/td\u003e\r\n\u003ctd\u003e5865679e252c0c9fcfcae4546760f7a5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e56b9648fd3ffd1bf3cb030cb64c1d983fcd1ee047bb6bd97f32edbe692fa8570\u003c/td\u003e\r\n\u003ctd\u003ea8d5e941b04cdd0070fe3218fa1bc04fb1bdd1b4\u003c/td\u003e\r\n\u003ctd\u003ea5d85f982d6650b26cccee4741fc3f00\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0bac8f569df79b5201e353e1063933e52cfb7e34cd092fc441d514d3487f7771\u003c/td\u003e\r\n\u003ctd\u003e64d97ea909a9b14857490724f19b971bb95d641d\u003c/td\u003e\r\n\u003ctd\u003ecb9617de5bc93949844a3e26e1360aa3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1bab80116fa1f1123553bdaf3048246f8c8a8bb3a71b2a13e87b704e68d10d2b\u003c/td\u003e\r\n\u003ctd\u003e3f32c341a71a32b6421822f44d4efde30d15421b\u003c/td\u003e\r\n\u003ctd\u003ee26713d8091da1946a158f168342cae9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e444d376d251911810f3f4b75923313b3726050153d50ad59deff5a0b8b1ada20\u003c/td\u003e\r\n\u003ctd\u003e90ff670baddb8bce0444a8a422096461e78fb287\u003c/td\u003e\r\n\u003ctd\u003ebf11b368d610922ac28cd4a9f20bfe97\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e84eb2efa324eba0c2e06c3b84395e9f5e3f28a3c9b86edd1f813807ba39d9acb\u003c/td\u003e\r\n\u003ctd\u003e82c18765ac3a1a2ecf3f258c0912beaf5aedd175\u003c/td\u003e\r\n\u003ctd\u003eddc9174f111e8aa445a71b8eeb0ad490\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e14b03ac41b5ef44ca31790fefb23968f2525c3aabfe11e96b9b1ccb6215eb8be\u003c/td\u003e\r\n\u003ctd\u003ee5882192901c00d8ac47bd82b7d4565761847e7b\u003c/td\u003e\r\n\u003ctd\u003e7b7c21eac0d9a06178a68d73fc5a18a6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb1d6ba4d995061a0011cb03cd821aaa79f0a45ba2647885171d473ca1a38c098\u003c/td\u003e\r\n\u003ctd\u003e9f671e338bc9b66e2dd3b7a3c9115723911b8f65\u003c/td\u003e\r\n\u003ctd\u003e135f224c2d740b1f1b6f43235e96d3f2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5847c8b8f54c60db939b045d385aba0795880d92b00d28447d7d9293693f622b\u003c/td\u003e\r\n\u003ctd\u003e878b2b8543ee103841cf30af70813b1c27434d71\u003c/td\u003e\r\n\u003ctd\u003e10b52c1ccaba52a52c991b05704bb12e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e95811d4e3c274f4c2d8f1bf092b9ddc488aa325aabf7c87a2c4877af4ba8bfb7\u003c/td\u003e\r\n\u003ctd\u003e6b0bebd54877e42f5082e674d07563f527fdd110\u003c/td\u003e\r\n\u003ctd\u003efed14e228ba25fdef9904adaf70c145f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0712456669e65b2b3e8d1305256992c79213a6dd4fd9128cf3e78ab9bae3cff6\u003c/td\u003e\r\n\u003ctd\u003eee6b0845ebaae57f88b262c198fad8cf151f6b85\u003c/td\u003e\r\n\u003ctd\u003e72571ebddf49e7546f9d5fafc0664e0c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e607c92088b7a3256302f69edbfad204cab12bf051a5aac3395130e18ae568dd5\u003c/td\u003e\r\n\u003ctd\u003e2452567c5e28f622fa11c8e92f737cd5d8272abf\u003c/td\u003e\r\n\u003ctd\u003e3562bd5a94f4e8d62250201e035e1a49\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed0fb0a0379248cdada356da83cd2ee364e0e58f4ed272d3369fe1d6ca8029679\u003c/td\u003e\r\n\u003ctd\u003e96bae22955bd85110c3f0b7de9a71b81c025f76a\u003c/td\u003e\r\n\u003ctd\u003e8a8425a0a4988fa7e9bf98def23c1ec4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea8a16168af9dcdc4b34d8817b430a76275338dbbda32328520a4669dbe56e91b\u003c/td\u003e\r\n\u003ctd\u003e57bd45e4afb8cd0d6b5360de6411ae0327812d5f\u003c/td\u003e\r\n\u003ctd\u003ea2b245bbb1de4f61dd8c31f391b28605\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7b7a65c314125692524d588553da7f6ab3179ceb639f677ed1cefe3f1d03f36e\u003c/td\u003e\r\n\u003ctd\u003ea97b1e1e0de7f0eab5304d206f4d7131987aca6e\u003c/td\u003e\r\n\u003ctd\u003e568594397a24a53ecbbb9c7766194678\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef6c4c84487bbec5959068e4a8b84e515de4695c794769c3d3080bf5c2bb63d00\u003c/td\u003e\r\n\u003ctd\u003e9358b341bc217dcd15599b43d88b157f8a9f4882\u003c/td\u003e\r\n\u003ctd\u003e05a025736a6fd75f183a04a267cee165\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e467979d766b7e4a804b2247bbcdde7ef2bbaf15a4497ddb454d77ced72980580\u003c/td\u003e\r\n\u003ctd\u003eae021c91c759d087ead95319608326e0ed154cfd\u003c/td\u003e\r\n\u003ctd\u003e78acab8a8d263968c46ef07d8ba98f0a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3e57ca992c235b68027cb62740d8e86a3294ac0ebcff4a2683b29bdaec016646\u003c/td\u003e\r\n\u003ctd\u003eaad3241fd23372523528a99f4c18127a3ebbea59\u003c/td\u003e\r\n\u003ctd\u003ea75c81a18e3965b5942e7b1669db16ca\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec3415bddc506839614cbb7186bfc6643713806de4f5b1c15445e96a644b44bea\u003c/td\u003e\r\n\u003ctd\u003ee29b263a89217412f45d6c7a0235b19af030755a\u003c/td\u003e\r\n\u003ctd\u003eb1f907379148c1e09009cda3cbd3877b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed3a50abae9ab782b293d7e06c7cd518bbcec16df867f2bdcc106dec1e75dc80b\u003c/td\u003e\r\n\u003ctd\u003ea9d64e615171b05a402422056ddfcd250febae93\u003c/td\u003e\r\n\u003ctd\u003eb03192389159b15f5552c82a29c747fe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e69863ba336156f4e559364b63a39f16e08ac3a6e3a0fa4ce11486ea16827f772\u003c/td\u003e\r\n\u003ctd\u003eec928047d511286c4db2580045d02ced34b639ea\u003c/td\u003e\r\n\u003ctd\u003e27ea69e0233f32d521c7bb1330690731\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e50f035100948f72b6f03ccc02f9c6073c9060d6e9c53c563a3fdb1d0c454916e\u003c/td\u003e\r\n\u003ctd\u003ed5ce13a66e8407baec0f447c7fb41d493fd8d73a\u003c/td\u003e\r\n\u003ctd\u003e343a9cc37cc9843cf862dd946c7eb714\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6bc77fa21232460c1b0c89000e7d45fe42e7723d075b752359c28a473d8dd1fd\u003c/td\u003e\r\n\u003ctd\u003e74847db3abdb5b0fd3952bb76018f9346815035a\u003c/td\u003e\r\n\u003ctd\u003e359ae18fbfc16b5b09e0f571d563d8e6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3ccae178d691fc95f6c52264242a39daf4c44813d835eaa051e7558b191d19ee\u003c/td\u003e\r\n\u003ctd\u003e0e40d0424aefa672c18e0500ff940681798f2f02\u003c/td\u003e\r\n\u003ctd\u003e196222b313b6c2ef728695ad5133da06\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea99612370a8407f98746eb0bf60c72393b1b4a23f52e7d7a6896471f85e28834\u003c/td\u003e\r\n\u003ctd\u003e757af512d07fc8fe1167750a748dbb9c700f71f1\u003c/td\u003e\r\n\u003ctd\u003e6b2e4ff182bffe5a22944fa8d2a7d41d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eZupdax\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef2ce101698952e1c4309f8696fd43d694a79d35bb090e6a7fd4651c8f41794a3\u003c/td\u003e\r\n\u003ctd\u003e9ec2f21641bd3f482b4c85cd6050432dc05e7680\u003c/td\u003e\r\n\u003ctd\u003ed0cb15e5fd961e4f5b3b120fc60dbdf8\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e84b8bfe8161da581a88c0ac362318827d4c28edb057e23402523d3c93a5b3429\u003c/td\u003e\r\n\u003ctd\u003e6f1b4ccd2ad5f4787ed78a7b0a304e927e7d9a3c\u003c/td\u003e\r\n\u003ctd\u003e6e9ff09f5a7daa46cfbfb1cf5707179f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3a093f2c2cb5ba59197a4c978cfa9687d5778a53ae17c2ce2757d3577a5e7c69\u003c/td\u003e\r\n\u003ctd\u003e9e0e0582eef9e2e2f38893a06c552d607f835fcc\u003c/td\u003e\r\n\u003ctd\u003eb0f95350b13b65ae427075fbdf5f7230\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e137a3cc8b2ecd98f7d6b787d259e66ca2c1dae968c785d75c7a2fecb4cbbcaf0\u003c/td\u003e\r\n\u003ctd\u003e1a7967c6357269414cfd1f9e1060a8613bc59f7b\u003c/td\u003e\r\n\u003ctd\u003e869de5ac4d3520373a8a2f1a5991d365\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9e010a2b43a6b588b95b5281544739833fb0250e8e990a4fe9879459f92367d0\u003c/td\u003e\r\n\u003ctd\u003e24732b6b00326439dc373df56aff78c9c82d7169\u003c/td\u003e\r\n\u003ctd\u003e814019ff0004d54c9b14981ac02752d4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e408608c6b6f7299561c04f37ab46ca9c82834428ad0e8d42b16ca5da9b86d62e\u003c/td\u003e\r\n\u003ctd\u003e9f596346c9acc09772bc5baf8c4dbc80fbdbf03b\u003c/td\u003e\r\n\u003ctd\u003e3801a156c01b2d3ab42bc431a5f2fc46\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6cc33a21417967a1bb3294179ea10aa3d9ee8d945a5ea0f6c44530189344a10a\u003c/td\u003e\r\n\u003ctd\u003e6f43f6e8cb1474a6272f9632487fa1932dfba18c\u003c/td\u003e\r\n\u003ctd\u003e6d6c3cbf2c2a3f106fcffdcbf4c70990\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e24b749191d64ed793cb9e540e8d4b1808d6c37c5712e737674417573778f665b\u003c/td\u003e\r\n\u003ctd\u003e26062de2657bd2a3c228049af27333d2c46a041b\u003c/td\u003e\r\n\u003ctd\u003e58c734474fc415905c6c9f95783d79b7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea95dfb8a8d03e9bcb50451068773cc1f1dd4b022bb39dce3679f1b3ce70aa4f9\u003c/td\u003e\r\n\u003ctd\u003e1e8bf3c1a05f37857a9e8f7adb773ed9b9af1b8b\u003c/td\u003e\r\n\u003ctd\u003e4ef9466b7ef300ec5fc98257e07efd40\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eefaa30bef6327ca8123e5443aa831dd7173de8ac9a016aaa2ae878641f85f952\u003c/td\u003e\r\n\u003ctd\u003e04951144dc621f5f7ff2d66c8bcb710b77cc3d55\u003c/td\u003e\r\n\u003ctd\u003e80397808492e12b83e5c9f5467740fd7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e699bd1babf50a360e0a2ba6b5e0ed2379571ee8356f3f08b09ff8ce434d72696\u003c/td\u003e\r\n\u003ctd\u003e3c10a0256cc1f0af3c31770314257eb8f994260c\u003c/td\u003e\r\n\u003ctd\u003e09c34b06199eb1cacfbfc159e88e13e4\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed6af2d1df948e2221a4bdaa3dd736dc0646c95d76f1aa1a1d314e5b20185e161\u003c/td\u003e\r\n\u003ctd\u003e44858761afc0439ba361c90f04ae9719b362d315\u003c/td\u003e\r\n\u003ctd\u003e9afe1f1936145a0a2ff1f6b34160c37f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0ecd7741dbdfa0707ccd8613a5ea91e62ab187313dd07d41760c87ed42649793\u003c/td\u003e\r\n\u003ctd\u003edaacbe773105fd7b0834ed2e3a05ef80275e3c11\u003c/td\u003e\r\n\u003ctd\u003ee8357ac87261f74c5d40e4baa273d3f0\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2360fa60a1b6e9705bf6b631fcfe53616f37738cf61bc0444ea94ce09c699c7f\u003c/td\u003e\r\n\u003ctd\u003e54e9de60e3a5c58fc2f3daadd18a1355350e13ec\u003c/td\u003e\r\n\u003ctd\u003ee0592c56ee8f0a2149fd9a8ed3b85f6f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003effe19202300785f7e745957b48ecc1c108157a6edef6755667a9e7bebcbf750b\u003c/td\u003e\r\n\u003ctd\u003e25d0321df77623c5af6629c357201941d4cd452c\u003c/td\u003e\r\n\u003ctd\u003eddf7ed52856f7ab9cb75403c30cc2c2b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed45c1ce5678259755df24bd680316a945515fc1bd916ce1d504f9d27cf9d03e4\u003c/td\u003e\r\n\u003ctd\u003e0f5a74f11c270a02b0c0cc317e0b850c78261b04\u003c/td\u003e\r\n\u003ctd\u003ea2972cb5228a56a530543f187e33e160\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e00847787ea6568cfaaa762f4ee333b44f35a34e90858c1c8899144be016510ef\u003c/td\u003e\r\n\u003ctd\u003ed82bc3800396452ee519fbb35f708802fee335af\u003c/td\u003e\r\n\u003ctd\u003e41f3e576216bb551a0ab1f3f18e9749d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eDownloader.Climax.A\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efa2305975aded0fd0601fdab3013f8877969cb873fb9620b4d65ac6ff3b25522\u003c/td\u003e\r\n\u003ctd\u003e003f46f74bbfc44ffd7f3ebfec67c80cf0a07bbf\u003c/td\u003e\r\n\u003ctd\u003e24b90157056913bef8c90b6319164afe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0a0ce7fb610e3c037beb2c331e147c8750ba9f7ea2ece2f91f27f1a83c6839e4\u003c/td\u003e\r\n\u003ctd\u003e1e0a63331814aab39ffb7806289a8ef3433553c3\u003c/td\u003e\r\n\u003ctd\u003e68875f4b80fd1350af7dbea4d05a811b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e898741e11fbbe6b5534fb12a489add1aaa379ee6757c0bd8d6c631473d5c66f7\u003c/td\u003e\r\n\u003ctd\u003e3fa2f11e142f5f07f2dd63d89b58d01e9397ded0\u003c/td\u003e\r\n\u003ctd\u003e1fe521f0ad24145704e6085b4a4859a9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e59e4b8d2b65f1690139c094ee27182285febda115304c44e8d9e7329e09dc794\u003c/td\u003e\r\n\u003ctd\u003e18cd249add7cfae87615ca5b32aca8503337a2d6\u003c/td\u003e\r\n\u003ctd\u003e9bf855e5e8480fdb93fd12068699446d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0c64cc96a52ff9bdf6593e948fed1bc743bdf714ec1f7b392490423d927c3bb4\u003c/td\u003e\r\n\u003ctd\u003ebb1c27db5f8d7e43592fa81cbfa319f1ce7c828f\u003c/td\u003e\r\n\u003ctd\u003e0830581452de0c91090f8de7dbd123fb\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1ca423fe0159e75718eb66524cd24002071a06b2fa68ce2cbb39d10682a154a6\u003c/td\u003e\r\n\u003ctd\u003e78c8298b8357eee1a2d5d9da86f290bad798ce39\u003c/td\u003e\r\n\u003ctd\u003eff5896c0749b1e8c403203ebb679ab09\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee9c94ed7265c04eac25bbcdb520e65fcfa31a3290b908c2c2273c29120d0617b\u003c/td\u003e\r\n\u003ctd\u003e47edf57c5724ef9ff232dbb76f749977c767106a\u003c/td\u003e\r\n\u003ctd\u003eef8bcb5865669bc1d1776aeecd1c29de\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed376164e377577fc590a780d15603d6411fde6e45ea21971670d5dff597d9def\u003c/td\u003e\r\n\u003ctd\u003ed9e12317a43f233a739972723abc00f1b88f53b0\u003c/td\u003e\r\n\u003ctd\u003e5faa973967fee2f35229685ceacf20b3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e4301abae1a62f87b1c51acc6a6b4f2c3926a248b4aa9c04b734cef550196c030\u003c/td\u003e\r\n\u003ctd\u003ecc402936b3d6fa5db14b54f0065404d975f2aeb5\u003c/td\u003e\r\n\u003ctd\u003ef0f2731cabf1c1a6381d0cd265c937bd\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eDownloader.Climax.B\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7d9e1a193402b87dbbb81c2ab95632686154cff9c991324e46b275850a4b2db6\u003c/td\u003e\r\n\u003ctd\u003e36a6eb414c9b8a7c2cdf12eb46e490d288e7a47a\u003c/td\u003e\r\n\u003ctd\u003e98416b41f386bb45ed36c2b6bd0f55ca\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003edd82a7b9b5dc0ee1f9e9f19d46212f3e2a1d09a816f5c0ece96275ee221fca13\u003c/td\u003e\r\n\u003ctd\u003ecf0fb4950130abddead04c21316912418562bf8a\u003c/td\u003e\r\n\u003ctd\u003ea74341091f88d5980a2394be28ed0239\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9f4d15ca56f87a5ded792f2a27a4c112bf59517079aedbefe49fcd0474600b69\u003c/td\u003e\r\n\u003ctd\u003ebbbca10a8545b0421fbfcbd0b3b7a42527fea641\u003c/td\u003e\r\n\u003ctd\u003e1bdaa370b064f90abbc2c7cecc6d3316\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5872abe12a8e4c7182e4c6a894d6c27961b00d333657736bcbfd7cb1b38af2ed\u003c/td\u003e\r\n\u003ctd\u003e133eca56512d8d5f8c730e102bf9042915e9bf41\u003c/td\u003e\r\n\u003ctd\u003ec60df47562dba1c75e9932aa088c24bf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8dcb99e56c888800e0712faddc07d991b6dcb7a6fd4cceffe9e27fe3da83d206\u003c/td\u003e\r\n\u003ctd\u003e2e76fa63adc870ca1de19fc7ea5afd6860f36e32\u003c/td\u003e\r\n\u003ctd\u003e1a22342f883ad150c5a6f7e85e9ba2ae\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7079d8c92cc668f903f3a60ec04dbb2508f23840ef3c57efffb9f906d3bc05ff\u003c/td\u003e\r\n\u003ctd\u003e8993d0d5ec2f898eb8d1b8785cc5bb3275b43571\u003c/td\u003e\r\n\u003ctd\u003e1690766e844034b3c2ab4f853bd59df7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5e8df46c9bc75450e2660d77897fa3dfa4d6c21eea10a962f7a9cf950ca9ca76\u003c/td\u003e\r\n\u003ctd\u003eb0506335e332d64d6568f7830a8fab6a8a6ce1f8\u003c/td\u003e\r\n\u003ctd\u003e923d60f3e63c95021f9e99f943fcfbbc\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eRtlShare\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8932c2d1ed0ae1f64d9cff4942f08699b4a7b1b30f45626d7bc46c8c51f8a420\u003c/td\u003e\r\n\u003ctd\u003e8903e04d7ffae2081867337801ca2fa5f93220bd\u003c/td\u003e\r\n\u003ctd\u003e9d116d94151682934dfd753485c91b88\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8ac2165dc395d1e76c3d2fbd4bec429a98e3b2ec131e7951d28a10e9ca8bbc46\u003c/td\u003e\r\n\u003ctd\u003ec0988a4ade711993632a03a2f82eea412616ef2a\u003c/td\u003e\r\n\u003ctd\u003eab01a4642e76df9e20a6d936d1f287fc\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3f6102bd9add588b4df9b1523e40bb124af36a729037b8c3f2261563e4fa4be9\u003c/td\u003e\r\n\u003ctd\u003ec865ef013018db3ed00f946b96a7a98ef2660e65\u003c/td\u003e\r\n\u003ctd\u003ee8e966455a60c6f5dbfce3e82564d2c7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e785ac72b10fd9cf98b5e2a40dc607e1ff735fcd8192bf71747755c963c764e2d\u003c/td\u003e\r\n\u003ctd\u003ea429d9c8c67c8c8036ef05f7b4a27530ee6ae98a\u003c/td\u003e\r\n\u003ctd\u003ef15c15e2b26f47b436b2a91d332ad59f\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003ePlugX\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0f7556c6490c4a45a95f5b74ced21185fe48a788bcbe847017084ec1bf75d20a\u003c/td\u003e\r\n\u003ctd\u003e53a17133173ee8f32261d4ac8afb956e1540f7be\u003c/td\u003e\r\n\u003ctd\u003e4b6e1f5375552e09975f23fd8661e0f3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e429b6c5d380589f2d654a79ea378db118db4c1fd1d399456af08e807d552e428\u003c/td\u003e\r\n\u003ctd\u003e97ecc5aba4ce94a5012dcf609f2d325f293d4bea\u003c/td\u003e\r\n\u003ctd\u003e3f8de0e26ee2f1f030e7d61215a227fe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0956ab263c7c112e0a8466406e68765350db654dbe6d6905e7c38e4f912a244e\u003c/td\u003e\r\n\u003ctd\u003e457a592ece5e309cc8844623f29fc6be62c5be60\u003c/td\u003e\r\n\u003ctd\u003ebdc734d2c049d77285fdb503aac86cd8\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1c0cf69bce6fb6ec59be3044d35d3a130acddbbf9288d7bc58b7bb87c0a4fb97\u003c/td\u003e\r\n\u003ctd\u003eef3e558ecb313a74eeafca3f99b7d4e038e11516\u003c/td\u003e\r\n\u003ctd\u003eb4f12a7be68d71f9645b789ccdc20561\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea072133a68891a37076cd1eaf1abb1b0bf9443488d4c6b9530e490f246008dba\u003c/td\u003e\r\n\u003ctd\u003ee9e8c2e720f5179ff1c0ac30ce017224ac0b2f1b\u003c/td\u003e\r\n\u003ctd\u003ed5f5bb6368735f34440621b80fb8e003\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1bad7e53cb4924576b221a62d2cddb4d18bd387734328b7d48e32046700e2df9\u003c/td\u003e\r\n\u003ctd\u003e7539e5f25b3e66ea849ebee6bf6104d504573035\u003c/td\u003e\r\n\u003ctd\u003e25db7152f66588dd8ce035f4bbd811d6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e39083375012d2a854e6310411e7ce4c4e3440bd5784ae158599be25deaeabcb5\u003c/td\u003e\r\n\u003ctd\u003e7ad24d1873325a02ca4644ebbebe5c5f95bb927c\u003c/td\u003e\r\n\u003ctd\u003ee7a9d56297f8d0c16eca077b5f0a86bf\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e3c4483e1185d00b282b19910ad5e7970462122b8b7d8895860ffc132a05b3b9d\u003c/td\u003e\r\n\u003ctd\u003e62d33015859f49e2ad178239891dbed78a0e2de6\u003c/td\u003e\r\n\u003ctd\u003ea83b0a6b5c590aaf7528dc23ce1856f2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef8885d5caeec2627d808dc20bd1fbcd42732700686d34f1bb29d83d5d5115ee0\u003c/td\u003e\r\n\u003ctd\u003e8a44433cfc2e4f116ebd59aac5f596f83c468d44\u003c/td\u003e\r\n\u003ctd\u003e633eaedd4944db79d0ac68e71418c34c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e07ef63b7c9554065e3a6047404d2526e8c8e450c5fe977247336626be403d790\u003c/td\u003e\r\n\u003ctd\u003ea397d9d7d242bc748dc2bf5307d0f16c5144d98d\u003c/td\u003e\r\n\u003ctd\u003ecfd0a7ab2c2c99dd341d844a5486599b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8d2ff35a5c941cb2f0438969be1a16116efacb51bb9820e6facc285640855682\u003c/td\u003e\r\n\u003ctd\u003e702cf75a6b23a18001a909d6743a739837cc2053\u003c/td\u003e\r\n\u003ctd\u003e0fe86427810229e4927b3a7091bea583\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e31af406fababf825eb15969970f5de1d2de9fa29a3ca609aed3174c48806492f\u003c/td\u003e\r\n\u003ctd\u003e12e4407d5341836635ce54727ad4dae7712c2a4c\u003c/td\u003e\r\n\u003ctd\u003ef4c9dd900488d6ad172f16a812b5e0fc\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec150172ae47f9708bf4a87cf67eb19b09e6d4f5a565043f309c1da5ffc9bd656\u003c/td\u003e\r\n\u003ctd\u003eeb6b2ddf1da767848ffe51f14b177298173227f5\u003c/td\u003e\r\n\u003ctd\u003e7a4a791eeb0a195057a65ecceeafc8ff\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5f8e8eada8ad8fcb007a1da7d2dedfdc55473cd5d65a287224c345edf9c1e964\u003c/td\u003e\r\n\u003ctd\u003ea7837c8e3f789a112fbc2eea623c4e03664280ce\u003c/td\u003e\r\n\u003ctd\u003e11fba00953cbd550be12a5691f79547a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efda4712cfb3007e7eb5f61b37c746640ff5428108c74106352b69a11193d79a1\u003c/td\u003e\r\n\u003ctd\u003e628dc1642de5e74bf230e9b933f264196b9678bb\u003c/td\u003e\r\n\u003ctd\u003ebe4625cb6e797b05a5ce3f2f5d0618c2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e17c4a6adca907b7cd0fc75d6008a307a3813ac3b75bfebb4f173360b5d2e7964\u003c/td\u003e\r\n\u003ctd\u003ed5959009d3a2bdadd0db5385706920da21e5c8d4\u003c/td\u003e\r\n\u003ctd\u003eff7b237c3049fce0559876239e5c0ae8\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb153195807d9b58168bba751517498268e396a79965c5d323fad5c16bbc9520d\u003c/td\u003e\r\n\u003ctd\u003ec14b4468a33b12250b560a0c7e884e01dd986c95\u003c/td\u003e\r\n\u003ctd\u003e9f4150eee0d18c7ebe6fe2881e40f1a2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7112f1033f1fafd9cef1862f6ea0a77994858bb54270deede1ed24b0f18fa7b1\u003c/td\u003e\r\n\u003ctd\u003ebc0a54644b5ba7eff9ca10d8b42d73f0c69e4c53\u003c/td\u003e\r\n\u003ctd\u003e824e76688a5b5bad414bc170721a29da\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e5ece318d3df972291896e858b76224c5ec34637d5409db44c89ec67ee0a6089d\u003c/td\u003e\r\n\u003ctd\u003eb253c8ff5fc2cb1ea8933721c3a4002a42eec2f9\u003c/td\u003e\r\n\u003ctd\u003eb0b6d1d000f031c2883df9f67360a338\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee452ea28a9d3e37a2ac0cb8f4bca8ce41bea1a362d4c1680ab3ccaec6e5123d9\u003c/td\u003e\r\n\u003ctd\u003e7f81103b574a3c26b478e9ab41abc422f979f299\u003c/td\u003e\r\n\u003ctd\u003e49a5af86baf3d7bee422b841781d1bfe\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e195b39d40cd9d50e0b4b6b41f8b45140bb0f6e201e75b4398bd07b1e5959970b\u003c/td\u003e\r\n\u003ctd\u003e5d449cad4b2a8d8a6b7489d82b110c370142acdd\u003c/td\u003e\r\n\u003ctd\u003eff58ce5d9d76502785ed1900056a4501\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e675abcf2bc7b1792b50fa296315f39ce5ac8e7e3f754a9be867eb0dd6bbf1799\u003c/td\u003e\r\n\u003ctd\u003e103cf5647a8dc33d9d611b5b1eafc3e498d02dab\u003c/td\u003e\r\n\u003ctd\u003ecb9b8cf286b84678784e7456b7d8fa85\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee60757a893881559104513d75cf521c8f72e10653442b9f2510402453e48cdcb\u003c/td\u003e\r\n\u003ctd\u003eb2e4179f7a2d1942fdb8e0fff632a3b65e9dce37\u003c/td\u003e\r\n\u003ctd\u003e3a0536d8cd93119389d06575adc64079\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea9acf75a658cb6e8aed6f638b08931fbe74f7b69a26e6b45486caff9d8e455a4\u003c/td\u003e\r\n\u003ctd\u003e187541ef47985e11324be53309808e23b33c12a1\u003c/td\u003e\r\n\u003ctd\u003eef479d7cd2e77a764ffb0a4b291a70fc\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ead48650c6ab73e2f94b706e28a1b17b2ff1af1864380edc79642df3a47e579bb\u003c/td\u003e\r\n\u003ctd\u003ef1a8c309806c90c100e680299a037ec71cf4397c\u003c/td\u003e\r\n\u003ctd\u003e1cba2ec3fc5f1451aaf3a75c9823825e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e0b1ed5214dd31a241920de4b5c7cdf3f02ad5f76260bcd260328732c9bedbcec\u003c/td\u003e\r\n\u003ctd\u003e9be46478e3cbeb51267b8fb88952860790051c07\u003c/td\u003e\r\n\u003ctd\u003eb404e426c53c066620d440f92331a113\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e555fd0d7c1584f7b504ac65f34017f7070ee12ce0f4070cd0555361b3adea54c\u003c/td\u003e\r\n\u003ctd\u003e1f10627b46b51a97b059395bf062117fdfae4cf0\u003c/td\u003e\r\n\u003ctd\u003e895644020eba9ec62d47ca85ccf94012\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efe885d1a2bef4e99dcbcacd9393c59ed52a718ff2cbbc6a15e443e150edaa662\u003c/td\u003e\r\n\u003ctd\u003e9d490725443c9f426cdc0bfa75b3d900404153c0\u003c/td\u003e\r\n\u003ctd\u003e13febb9240f37a69f251fd6055b8e1eb\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e354c3c2a7602475b72727158ebae8261f0ac9f2ce6c2ab86ee9ec38169b40f62\u003c/td\u003e\r\n\u003ctd\u003e68a651026a3bae94776a9e1a45c6cca58b9609b7\u003c/td\u003e\r\n\u003ctd\u003e1d866ed934518061839588565ff71edd\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eab1282afced126da7d330d7be338dfe1f3623970a696710e55a67fb549118f1d\u003c/td\u003e\r\n\u003ctd\u003e3ebe6bd2d44a4d54d8ba314b92c9c379398bf095\u003c/td\u003e\r\n\u003ctd\u003ec063adbb4a8a41a8678c594258065fb7\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee3d32b0758f98b55483a18631ae42e944c387b5a73b1fbc39f62b2c13a6ec198\u003c/td\u003e\r\n\u003ctd\u003e5fe3b83b3ccdf78303b59e5f3e628a2cf80e9d13\u003c/td\u003e\r\n\u003ctd\u003e923165c972c38678f6d9ab4cef36a007\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ea4576ca47764284bc3aa8e5dacad84163ca56258dc8af4aa4916bb3bacbd58e0\u003c/td\u003e\r\n\u003ctd\u003e1166b3daa8ad2496a8b71f37656be7ac41821e03\u003c/td\u003e\r\n\u003ctd\u003ea1503cec20057e367cff4db5e4a8b93c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e8871bd39918868d4f4390e430e82730819182a8ae9fb3ef7096c2ce5dbafbe26\u003c/td\u003e\r\n\u003ctd\u003ef1d74087627879e224303ee56e74d53f6dc67204\u003c/td\u003e\r\n\u003ctd\u003eec0a9cecb7e1b4b40ffdba19407332ea\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef5e780d10780f45adb0ddc540978d7e170e8c143a251003651e12c18142cee16\u003c/td\u003e\r\n\u003ctd\u003e8e5ef3c08eb584d041a7aa93473aa2e31787d111\u003c/td\u003e\r\n\u003ctd\u003ef16790e4e2029367cf3ae07037169424\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e37b3fb9aa12277f355bbb334c82b41e4155836cf3a1b83e543ce53da9d429e2f\u003c/td\u003e\r\n\u003ctd\u003eea7595bff1cfd1d72fe72417bf263d9adc9bc59e\u003c/td\u003e\r\n\u003ctd\u003e9ae8a7837c60f3f587701934ff41bd96\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e6cd5079a69d9a68029e37f2680f44b7ba71c2b1eecf4894c2a8b293d5f768f10\u003c/td\u003e\r\n\u003ctd\u003e50064d66c9b55b6f7d22051b81914d8366fe36c8\u003c/td\u003e\r\n\u003ctd\u003ed5915394a6916a00c426aa2827d97c0e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec21a3a44b46e7242c0762c8ec5e8a394ddc74b747244c5b83678620ae141e59c\u003c/td\u003e\r\n\u003ctd\u003e31d67b5a5588b2d28365534c36a7b754f28e1df9\u003c/td\u003e\r\n\u003ctd\u003eecab63b6de18073453310a9c4551074b\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003efe18adaec076ffce63da6a2a024ce99b8a55bc40a1f06ed556e0997ba6b6d716\u003c/td\u003e\r\n\u003ctd\u003e1e8dee59355e064790d05e44199443d94ab1aa02\u003c/td\u003e\r\n\u003ctd\u003e219983c1a7c6c08707f4907b17a72eb9\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003ePlugX demo dropper\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e50f1092795c493c5275637b81fbcacfc4ca7951dfda06782a792988bbde2f5a1\u003c/td\u003e\r\n\u003ctd\u003e8e0ee1ceb7ce14994a481c266eef1f67087b59b1\u003c/td\u003e\r\n\u003ctd\u003e6dfabe77bf18f1424cf47e2e0794f6d5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e82894e2534feb0d9edbb3dd5339c3ff0f6eb73b07e40f0f8b15e759e8a55d052\u003c/td\u003e\r\n\u003ctd\u003e0b8c9bbea5614d2fec852cf2f74fd20b591edbb2\u003c/td\u003e\r\n\u003ctd\u003e814e3cfdbf77e8b400dda78ab0a80e24\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee5f471dcd4f5a47f0a53fc389e58c70b9ef81805c503ed6b100950d02ee7f777\u003c/td\u003e\r\n\u003ctd\u003e9eb2ed9db419cda517fbea69a9204644e946913c\u003c/td\u003e\r\n\u003ctd\u003ea70db29d6a7ba154eeb029be19136cb6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eaeee80588212bc941e179ca95931a91bf446cbc1446111d4e520243d708f1d5b\u003c/td\u003e\r\n\u003ctd\u003edbb93c7b7e36b5eb0dd408e836f7bf305ee076bf\u003c/td\u003e\r\n\u003ctd\u003e661635e774fef37e56928333d6040cac\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ec66dda5131c0aaa118e7cbb5de16fbc984f1f0c9194717b8981bca0fb024f170\u003c/td\u003e\r\n\u003ctd\u003e58ec65e2d39e3dff7df3c85d3896ab37a04cd475\u003c/td\u003e\r\n\u003ctd\u003ea96e3b2fd7c8bb7c903240e0b9b1e980\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e051b08ef35a6122bd9ff75609ccd50d84793e5502a9e428a57f2bf688d21d1e9\u003c/td\u003e\r\n\u003ctd\u003e1b43bb893767f48bc134c1894f3390fd20dbb22d\u003c/td\u003e\r\n\u003ctd\u003ed2b60af1360508ca2728f06f45a3f931\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef96adc9e046ecc6f22d3ba9cfea47a4af75bcba369f454b7a9c8d7ca3d423ac4\u003c/td\u003e\r\n\u003ctd\u003ecb85578a26dd90f536b9c97cf88ff93baba22107\u003c/td\u003e\r\n\u003ctd\u003e4412dcf06cb428d710297a3efcf24a91\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eBH_A006\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097\u003c/td\u003e\r\n\u003ctd\u003ec0292c55fca5f68f4f4831fb5d2a77a78c1f1a45\u003c/td\u003e\r\n\u003ctd\u003e36a8ce6f27c251a81d9deada291b2a2c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ee76567a61f905a2825262d5f653416ef88728371a0a2fe75ddc53aad100e6f46\u003c/td\u003e\r\n\u003ctd\u003ee45a5d9b03cfbe7eb2e90181756fdf0dd690c00c\u003c/td\u003e\r\n\u003ctd\u003e06af27c0f47837fb54490a8fe8332e04\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef2ab7d78377fe1898eb6406d66668c9dbbe0836e9c97af08bc57da56a78272a1\u003c/td\u003e\r\n\u003ctd\u003e87ae868159d572acbb376faf7fda6593058f8518\u003c/td\u003e\r\n\u003ctd\u003ec241e8486a0674f7af1b0928b59b94df\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1a4cc1c66082f4bb10b917bc434ecc9e7e4f92877fd42e3fbe5e8a96154318f5\u003c/td\u003e\r\n\u003ctd\u003e927f428e0de0391a6392943b3c79fda8363828d0\u003c/td\u003e\r\n\u003ctd\u003e758eabd1b7b644b01a21011d6e1159e6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1b0e8f31b513ad53db7ca6d8db35c37eb24eaddf859521b6913209af934808ce\u003c/td\u003e\r\n\u003ctd\u003e9df3431e26b958f671b28d1c4d34dfa5c0c653bf\u003c/td\u003e\r\n\u003ctd\u003e94759ce1618ffa9e38cfa7c3ad43061a\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef42f8896183d298a6ecd2c3fa78393bf7e58bc33ab7994e35346a57cbe2e2521\u003c/td\u003e\r\n\u003ctd\u003ef214cbda1dcdc75b3d355affef74354a104d5b29\u003c/td\u003e\r\n\u003ctd\u003e5ea6d25bb95d8643dfe2deb4afd92843\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ebd366f22fd0f1b5b5a041621f70b357287c45883e847bb8f31809d16ca46052f\u003c/td\u003e\r\n\u003ctd\u003ec213d8d98359c32e1b320b8ab0cf168e3f369441\u003c/td\u003e\r\n\u003ctd\u003e8f088b92a9f68681dd17f0fb89b1058d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e77052236a7061f91ba6442568f6db1200169fe4afdf9c3c81750e0929dd4fb96\u003c/td\u003e\r\n\u003ctd\u003eaa9b71858b893a131908b3236bb724226af6b1dc\u003c/td\u003e\r\n\u003ctd\u003e02a7272416fefc68ff214b24214fc370\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2bd9b56ddcccc0a9d33debd1c56b493bb60f8b4229f728b0c6c3bac0e556d080\u003c/td\u003e\r\n\u003ctd\u003e0e2c294692cebcaecb5e2f3677d07f96a09ab610\u003c/td\u003e\r\n\u003ctd\u003ec7f0ec11b70be64695d826587d8fb9f2\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e59fe1b5b641c140225ed12a8122da47716b9d841754f4604a2bdbb2a0dc765ad\u003c/td\u003e\r\n\u003ctd\u003e7324dd736142db51c4d3887c30df810a45b46b08\u003c/td\u003e\r\n\u003ctd\u003e32cb37c984fe0d00009e7566f18463eb\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ecb35899e21269b564ffdd4785961195af1779daf5ff3e64746e2d6368744ba2a\u003c/td\u003e\r\n\u003ctd\u003e5ad5183ce68975a59d85d650e72b13a845be82e4\u003c/td\u003e\r\n\u003ctd\u003e7950cf56e58e2be3fc401885e815e9b6\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ef97d1f7e3ed963654fb68803f2ac6cd79580abb8f86ab477c49aec76157bb184\u003c/td\u003e\r\n\u003ctd\u003ecf1a335ffe672f19fa0160151c50eb9209b5e99b\u003c/td\u003e\r\n\u003ctd\u003eb66203f634e48430af63a3c1503b2a4d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e74af7c238935e2fc11f97e122bbcf0b813c27f5a4a3b8aa47a574c24003df533\u003c/td\u003e\r\n\u003ctd\u003effb8da41d8a92b4cbeaf4d85a4c2732b90d178c3\u003c/td\u003e\r\n\u003ctd\u003e7428f82ed54e0d75c37afc0dde45ea57\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9cd487bcec62fb5192fbe654ca5c02750b846070b85016fc3d2071add8e04f39\u003c/td\u003e\r\n\u003ctd\u003eb20c993e963a5540593120cfc1b596ba42aff649\u003c/td\u003e\r\n\u003ctd\u003e46c4fd5ae4f5907d5ba3faa2978ffbe5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eb0a58c6c859833eb6fb1c7d8cb0c5875ab42be727996bcc20b17dd8ad0058ffa\u003c/td\u003e\r\n\u003ctd\u003efcc66ea2198a03def308c53adda78d4a64ed22f7\u003c/td\u003e\r\n\u003ctd\u003e823e689e34be362faeddb2bd8d32a05e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9843ceaca2b9173d3a1f9b24ba85180a40884dbf78dd7298b0c57008fa36e33d\u003c/td\u003e\r\n\u003ctd\u003e6c8ab56853218f28ac11c16b050ad589ea14bafe\u003c/td\u003e\r\n\u003ctd\u003e964be19e477b57d85aceb7648e2c105d\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9969fc3043ed2917b76b6dbae36bd2e0846b90e9d93df4fc4f490fdf153da435\u003c/td\u003e\r\n\u003ctd\u003ee102a2ff536d2df93ec9c507e52c04bba773b550\u003c/td\u003e\r\n\u003ctd\u003efff3c03e6c455eaba70ec816a4439b95\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e690f5bd392269d80061e8e90a9aedac4f9bb2e898db4211b76a6e27a1ed95462\u003c/td\u003e\r\n\u003ctd\u003e5c1d4af865b4d514340d6a2dbb42523a142ab5d8\u003c/td\u003e\r\n\u003ctd\u003e18ea3d4c9639a696b96e49f53af2b161\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e7bd1016b5f3a5004166de5cf7f1846024684979de413417d83321c931c1b5929\u003c/td\u003e\r\n\u003ctd\u003ecebabb80844c823df4539f4db29d7bca27e1f50a\u003c/td\u003e\r\n\u003ctd\u003e89de9c0ce214d2e437e2ce6d266ab100\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e1687af091d38108eeed634c0539b9639c6128aed9588a370f51a957bee534f39\u003c/td\u003e\r\n\u003ctd\u003e53ab54c2c3ea3d6921fa2bf5fde69255dc41fbed\u003c/td\u003e\r\n\u003ctd\u003eae755e20cd3a6f2721096736c5c3aed5\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e16d2b4bb67147c0086c5716639e226fe1656da26f40bac86f7df970fa92a8460\u003c/td\u003e\r\n\u003ctd\u003e1f89b71204ef85c00a6675f65acf4b834c0a58ce\u003c/td\u003e\r\n\u003ctd\u003e68f52f72f9f3becd0f51da342dd6bd31\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003eNote: the file with SHA-256 9843ceaca2b9173d3a1f9b24ba85180a40884dbf78dd7298b0c57008fa36e33d was erroneously listed in our previous \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/shadowpad-new-activity-from-the-winnti-group/\" target=\"_blank\"\u003ereport\u003c/a\u003e as a ShadowPad sample. In actual fact, it belongs to the BH_A006 family of backdoor samples.\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eDeed RAT\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eff87ec66b89db551d6f4ce33ad150fae7286f58d465179acf2b8001d9ca9bcea\u003c/td\u003e\r\n\u003ctd\u003e6c2e080407f03e507316c7bc340ecfe2fa1c248f\u003c/td\u003e\r\n\u003ctd\u003e508b845dbb4d182116fe1d3a7c52a578\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e761557ecc63ec5fbc2e3573f61a860bd8967f04818be25893361c63409ab5af0\u003c/td\u003e\r\n\u003ctd\u003e60b4af5c44d0ccdfb6003ca77d5ddda808219972\u003c/td\u003e\r\n\u003ctd\u003e60c6573fe8bc47943009b71046cbf895\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003eShadowPad\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e9324d7a72c436d8eb77f3df72b6f41aa4e1b85f08ef7583e26de75e17cad490c\u003c/td\u003e\r\n\u003ctd\u003ec82f168cdd311078bc1a9a748a0e304d26b10d04\u003c/td\u003e\r\n\u003ctd\u003ee88442798b3881f41b369b849ed6ee52\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e06ce5271836a6a1ee40513b1de6991ccd87bc7ff640948f194e7c12bdf779fd9\u003c/td\u003e\r\n\u003ctd\u003e3e38742d05ab64d1c484f157b345d339becef404\u003c/td\u003e\r\n\u003ctd\u003e927af917daaee340c2095fb3f86ecaf3\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed34b6306aeaaccea3b30dde377701c4a23b861b47f9bda777ca7dc0552f2754f\u003c/td\u003e\r\n\u003ctd\u003e72881125929a2c445c6cd094fa13607b9cdea95c\u003c/td\u003e\r\n\u003ctd\u003e15d973bcaef5f97329f76be89ee26cdd\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ed011130defd8b988ab78043b30a9f7e0cada5751064b3975a19f4de92d2c0025\u003c/td\u003e\r\n\u003ctd\u003ea43edb2221919ac5d52bde498f604164b3c86118\u003c/td\u003e\r\n\u003ctd\u003e08b419b754122d44b44831384c520b21\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e459f386be186c0e23234f299f2607d0eb2745eb743e1422a95ec2dca645b0e21\u003c/td\u003e\r\n\u003ctd\u003e9d05decdda370292012ded9c4e04d8d46c1d0de7\u003c/td\u003e\r\n\u003ctd\u003e3b0a45da21a9244970f91df6dde5204e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cb\u003ePoison Ivy\u003c/b\u003e\u003c/p\u003e\r\n\u003cdiv class=\"table-container\"\u003e\u003ctable class=\"table-article\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e672d1ec9f27870a9ed4983038e58e8577bacc735d5168d74bcff8d6ed9aa7947\u003c/td\u003e\r\n\u003ctd\u003ef5ccdd6cc4aae67c822ddd4509f33672ca5335f4\u003c/td\u003e\r\n\u003ctd\u003e4e87e5af554322a2c7c754701290c52c\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e2e35a1599b58e76167f2235d46840cc973dc49a6f14c0c2a2e91310a2fe2c2dd\u003c/td\u003e\r\n\u003ctd\u003ed80b939d9d46cdff9cf20f6234186a1bf3b963c2\u003c/td\u003e\r\n\u003ctd\u003eb1aadcb19d49519f4564d6f52c3c8efa\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\u003c/div\u003e\r\n\u003ch4 id=\"id5-2-2\"\u003eNetwork indicators\u003c/h4\u003e\r\n\u003cp\u003e\u003cb\u003eMyKLoadClient\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003emicroft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003emicro.dns04.com\u003c/p\u003e\r\n\u003cp\u003e207.148.121.88\u003c/p\u003e\r\n\u003cp\u003e47.108.89.169\u003c/p\u003e\r\n\u003cp\u003e120.78.127.189\u003c/p\u003e\r\n\u003cp\u003e121.89.210.144\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eZupdax\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003ens2.gamepoer7.com\u003c/p\u003e\r\n\u003cp\u003email.playdr2.com\u003c/p\u003e\r\n\u003cp\u003epop.playdr2.com\u003c/p\u003e\r\n\u003cp\u003enews.flashplayeractivex.info\u003c/p\u003e\r\n\u003cp\u003eupdate.flashplayeractivex.info\u003c/p\u003e\r\n\u003cp\u003ens9.mcafee-update.com\u003c/p\u003e\r\n\u003cp\u003e154.211.161.161\u003c/p\u003e\r\n\u003cp\u003e192.225.226.218\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eDownloader.Climax.A\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003ebamo.ocry.com\u003c/p\u003e\r\n\u003cp\u003e202.182.98.74\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eDownloader.Climax.B\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eruclient.dns04.com\u003c/p\u003e\r\n\u003cp\u003eloge.otzo.com\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eRtlShare\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003easd.powergame.0077.x24hr.com\u003c/p\u003e\r\n\u003cp\u003ew.asd3.as.amazon-corp.wikaba.com\u003c/p\u003e\r\n\u003cp\u003e45.76.145.22\u003c/p\u003e\r\n\u003cp\u003e141.164.35.87\u003c/p\u003e\r\n\u003cp\u003e202.182.98.74\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003ePlugX\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003emicroft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003eapi.microft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003emicro.dns04.com\u003c/p\u003e\r\n\u003cp\u003ewww.0077.x24hr.com\u003c/p\u003e\r\n\u003cp\u003ejs.journal.itsaol.com\u003c/p\u003e\r\n\u003cp\u003efgjhkergvlimdfg2.wikaba.com\u003c/p\u003e\r\n\u003cp\u003egoon.oldvideo.longmusic.com\u003c/p\u003e\r\n\u003cp\u003eas.amazon-corp.wikaba.com\u003c/p\u003e\r\n\u003cp\u003efreewula.strangled.net\u003c/p\u003e\r\n\u003cp\u003eszuunet.strangled.net\u003c/p\u003e\r\n\u003cp\u003elib.hostareas.com\u003c/p\u003e\r\n\u003cp\u003eweb.miscrosaft.com\u003c/p\u003e\r\n\u003cp\u003eeset.zzux.com\u003c/p\u003e\r\n\u003cp\u003eelienceso.kozow.com\u003c/p\u003e\r\n\u003cp\u003elck.gigabitdate.com\u003c/p\u003e\r\n\u003cp\u003emiche.justdied.com\u003c/p\u003e\r\n\u003cp\u003e45.77.16.91\u003c/p\u003e\r\n\u003cp\u003e103.101.178.152\u003c/p\u003e\r\n\u003cp\u003e123.1.151.64\u003c/p\u003e\r\n\u003cp\u003e154.85.48.108\u003c/p\u003e\r\n\u003cp\u003e154.213.21.207\u003c/p\u003e\r\n\u003cp\u003e192.225.226.123\u003c/p\u003e\r\n\u003cp\u003e192.225.226.217\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eBH_A006\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003ecomein.journal.itsaol.com\u003c/p\u003e\r\n\u003cp\u003ewww.omgod.org\u003c/p\u003e\r\n\u003cp\u003efindanswer123.tk\u003c/p\u003e\r\n\u003cp\u003e45.76.145.22\u003c/p\u003e\r\n\u003cp\u003e103.27.109.234\u003c/p\u003e\r\n\u003cp\u003e108.160.134.113\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eDeed RAT\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eftp.microft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eShadowPad\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003etoogasd.www.oldvideo.longmusic.com\u003c/p\u003e\r\n\u003cp\u003ewwa1we.wbew.amazon-corp.wikaba.com\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003ePoison Ivy\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003eshareddocs.microft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eThird-level DDNS domains\u003c/b\u003e\u003c/p\u003e\r\n\u003cp\u003emicroft.dynssl.com\u003c/p\u003e\r\n\u003cp\u003ereportsearch.dynamic-dns.net\u003c/p\u003e\r\n\u003cp\u003emicro.dns04.com\u003c/p\u003e\r\n\u003cp\u003ewerwesf.dynamic-dns.net\u003c/p\u003e\r\n\u003cp\u003efssprus.dns04.com\u003c/p\u003e\r\n\u003cp\u003eloge.otzo.com\u003c/p\u003e\r\n\u003cp\u003ealex.dnset.com\u003c/p\u003e\r\n\u003cp\u003eruclient.dns04.com\u003c/p\u003e\r\n\u003cp\u003ebamo.ocry.com\u003c/p\u003e\r\n\u003cp\u003etombstone.kozow.com\u003c/p\u003e\r\n\u003cp\u003etoon.mrbasic.com\u003c/p\u003e\r\n\u003cp\u003efgjhkergvlimdfg2.wikaba.com\u003c/p\u003e\r\n\u003cp\u003ert.ftp1.biz\u003c/p\u003e\r\n\u003cp\u003eapple-corp.changeip.org\u003c/p\u003e\r\n\u003cp\u003eamazon-corp.wikaba.com\u003c/p\u003e\r\n\u003cp\u003e0077.x24hr.com\u003c/p\u003e\r\n\u003cp\u003estaticd.dynamic-dns.net\u003c/p\u003e\r\n\u003cp\u003esrv.xxxy.biz\u003c/p\u003e\r\n\u003cp\u003eserviechelp.changeip.us\u003c/p\u003e\r\n\u003cp\u003emktoon.ftp1.biz\u003c/p\u003e\r\n\u003cp\u003enoon.dns04.com\u003c/p\u003e\r\n\u003cp\u003eybcps4.freeddns.org\u003c/p\u003e\r\n\u003cp\u003eoldvideo.longmusic.com\u003c/p\u003e\r\n\u003cp\u003echdsjjkrazomg.dhcp.biz\u003c/p\u003e\r\n\u003cp\u003eq34ewrd.youdontcare.com\u003c/p\u003e\r\n\u003cp\u003ejournal.itsaol.com\u003c/p\u003e\r\n\r\n\u003c/article\u003e","title":"Space Pirates: analyzing the tools and connections of a new hacker group","date":"2022-05-17T00:00:00.000Z","slug":"space-pirates-tools-and-connections","file":"","titleOfHelpfulFiles":"","helpfulFiles":[]},"footerData":{"title":"Cybersecurity market leader","copyright":"Copyright \u003cmark\u003e©\u003c/mark\u003e 2002–2025 Positive Technologies. All rights reserved.","products":{"title":"Products","navItems":[{"name":"PT NAD","link":"/products/network-attack-discovery"},{"name":"PT NGFW","link":"/products/ngfw"},{"name":"PT Sandbox","link":"/products/sandbox"},{"name":"MaxPatrol VM","link":"/products/maxpatrol-vm"},{"name":"MaxPatrol SIEM","link":"/products/siem"},{"name":"PT Application Inspector","link":"/products/ai"},{"name":"PT BlackBox","link":"/products/blackbox"},{"name":"PT ISIM","link":"/products/isim"},{"name":"MaxPatrol O2","link":"/products/mp-o2"},{"name":"MaxPatrol EDR","link":"/products/edr"},{"name":"PT Application Firewall","link":"/products/pt-af"},{"name":"PT Container Security","link":"/products/cs"},{"name":"PT Industrial Cybersecurity Suite","link":"/products/ics"},{"name":"PT Threat Intelligence Feeds","link":"/products/threat-intelligence-feeds"},{"name":"PT Knockin","link":"/products/knockin"}]},"company":{"title":"ANALYTICS","navItems":[{"name":"Analytics articles","link":"/analytics"},{"name":"Knowledge base","link":"/analytics/knowledge-base"},{"name":"PT ESC threat intelligence","link":"/analytics/pt-esc-threat-intelligence"},{"name":"Threatscape","link":"/analytics/threatscape"},{"name":"Hacker groups","link":"/analytics/hacker-groups"}]},"social":{"title":"COMPANY","navItems":[{"name":"About us","link":"/about"},{"name":"Clients","link":"/about/clients"},{"name":"Contacts","link":"/about/contacts"},{"name":"PT in the Media","link":"/about/pt-in-the-media"},{"name":"Education","link":"https://edu.ptsecurity.com/learning-space"},{"name":"YouTube","link":"https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ"},{"name":"LinkedIn","link":"https://www.linkedin.com/company/positivetechnologies/"},{"name":"Х","link":"https://x.com/PTsecurity_EN"},{"name":"TikTok","link":"https://www.tiktok.com/@positivetechnologies"},{"name":"Vacancy","link":"https://vacancy.global.ptsecurity.com/"}]},"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg","width":1200,"height":100,"alt":""},"legalDocsLink":{"id":61,"text":"Legal documents","link":"https://global.ptsecurity.com/policies/terms-of-use","targetBlank":true}},"anyQuestionsData":{"selectProductOptions":[{"value":"network-attack-discovery","label":"PT NAD","crmId":"3212ea27-d047-42f9-9da3-9ef5233634bb"},{"value":"ngfw","label":"PT NGFW","crmId":"2c0baa3e-9671-4bd2-b082-1a94298bd17f"},{"value":"sandbox","label":"PT Sandbox","crmId":"5addae27-2762-4a89-8b58-e247ab1e71dc"},{"value":"maxpatrol-vm","label":"MaxPatrol VM","crmId":"e5ffe330-69bf-4344-b0b0-c228de0f6f83"},{"value":"siem","label":"MaxPatrol SIEM","crmId":"0c54a201-09a7-4dc9-b3ca-1ce61715388b"},{"value":"ai","label":"PT Application Inspector","crmId":"4c2c50e6-2b8c-4c1e-a2da-f6423ece496b"},{"value":"blackbox","label":"PT BlackBox","crmId":"081eb4e2-54c2-4ce5-b171-d7dcaecc1c1f"},{"value":"isim","label":"PT ISIM","crmId":"67a72950-2d9c-47a1-8bb8-49540356da8f"},{"value":"mp-o2","label":"MaxPatrol O2","crmId":"29563721-4ec7-4e5b-8a48-f3674ab70749"},{"value":"edr","label":"MaxPatrol EDR","crmId":"c667eb61-0b7a-457c-991c-43b83504a7ed"},{"value":"pt-af","label":"PT Application Firewall","crmId":"b6b16deb-0ceb-4318-b947-fd238d7a9935"},{"value":"cs","label":"PT Container Security","crmId":"2df38b89-5d1f-4a0d-8be4-76ea9f8d2e30"},{"value":"ics","label":"PT Industrial Cybersecurity Suite","crmId":""},{"value":"threat-intelligence-feeds","label":"PT Threat Intelligence Feeds","crmId":""},{"value":"knockin","label":"PT Knockin","crmId":"0d1bb29e-4b9e-4fa4-bed0-03fe41c09746"}],"title":"Get in touch","description":"Fill in the form and our specialists\u003cbr/\u003e will contact you shortly","feedback":{"title":"General\u003cbr/\u003e questions","description":"We're happy to answer any questions you may have.","fieldName":"Name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you soon."},"partnership":{"title":"Partnership","description":"Join us in making the world a safer place.","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldAddress":"Address","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."},"pilotApplication":{"title":"Request a pilot","description":"Test drive our solutions with a customized pilot program.","fieldProduct":"Select a product","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."}},"sidebarData":{"widgets":[{"kind":"analytics-articles","data":{"title":"Analytics articles","link":"/analytics","withFlag":true,"items":[{"text":"Cyberthreats to industrial IoT in the manufacturing sector","link":"/analytics/cyberthreats-to-industrial-iot","targetBlank":true,"publishedDate":"2025-01-28T00:00:00.000Z"},{"text":"Cyberthreats evolve while forecasts signal more sophisticated risks ahead","link":"/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead","targetBlank":true,"publishedDate":"2025-01-07T00:00:00.000Z"},{"text":"Trending vulnerability digest November 2024","link":"/analytics/trending-vulnerability-digest-november-2024","targetBlank":true,"publishedDate":"2024-12-26T00:00:00.000Z"}]}},{"kind":"ad-banner","data":{"title":"What are the security threats on your network?","subtitle":"Check your traffic-for free","backgroundColor":null,"image":{"src":"https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png","width":542,"height":822,"alt":""},"actionProps":{"label":"Request pilot","href":"#contacts","isExternal":false}}}]},"_sentryTraceData":"60e3dc10e1354dc8b80455e208f4f316-9edb6b0e35c3d0e6-1","_sentryBaggage":"sentry-environment=production,sentry-release=Ur_qlu7npVaUkYGtYD4wc,sentry-public_key=98e9d1bba200933ad4e97a71f2de0390,sentry-trace_id=60e3dc10e1354dc8b80455e208f4f316,sentry-sample_rate=1,sentry-transaction=%2Fanalytics%2Fpt-esc-threat-intelligence%2F%5Bslug%5D,sentry-sampled=true"},"__N_SSP":true},"page":"/analytics/pt-esc-threat-intelligence/[slug]","query":{"slug":"space-pirates-tools-and-connections"},"buildId":"Ur_qlu7npVaUkYGtYD4wc","isFallback":false,"gssp":true,"locale":"en","locales":["en","es","pt"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>