<!DOCTYPE html>
<html>
  <head>
    <title>A few notes on SECONDDATE's C&C protocol – Laanwj's blog – —</title>

        <meta charset="utf-8" />
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0'>

    
    <meta name="description" content="SECONDDATE is the most well-known of the spy toys in the EQGRP dump.
It is a Man-in-the-Middle attack tool that is installed on intermediate routes. It can be used to fake DNS replies as well as inject HTTP redirects.
This intercept article does a
great job of explaining the operational side.

" />
    <meta property="og:description" content="SECONDDATE is the most well-known of the spy toys in the EQGRP dump.
It is a Man-in-the-Middle attack tool that is installed on intermediate routes. It can be used to fake DNS replies as well as inject HTTP redirects.
This intercept article does a
great job of explaining the operational side.

" />
    
    <meta name="author" content="Laanwj's blog" />

    
    <meta property="og:title" content="A few notes on SECONDDATE's C&C protocol" />
    <meta property="twitter:title" content="A few notes on SECONDDATE's C&C protocol" />
    

    <!--[if lt IE 9]>
      <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link rel="stylesheet" type="text/css" href="/style.css" />
    <link rel="alternate" type="application/rss+xml" title="Laanwj's blog - —" href="/feed.xml" />

    <!-- Created with Jekyll Now - http://github.com/barryclark/jekyll-now -->
  </head>

  <body>
    <div class="wrapper-masthead">
      <div class="container">
        <header class="masthead clearfix">
          <a href="/" class="site-avatar"><img src="/atari_st_bee.png" /></a>

          <div class="site-info">
            <h1 class="site-name"><a href="/">Laanwj's blog</a></h1>
            <p class="site-description">—</p>
          </div>

          <nav>
            <a href="/">Blog</a>
            <a href="/about">About</a>
          </nav>
        </header>
      </div>
    </div>

    <div id="main" role="main" class="container">
      <article class="post">
  <h1>A few notes on SECONDDATE's C&C protocol</h1>

  <div class="entry">
    <p>SECONDDATE is the most well-known of the spy toys in the EQGRP dump.
It is a Man-in-the-Middle attack tool that is installed on intermediate routes. It can be used to fake DNS replies as well as inject HTTP redirects.
<a href="https://theintercept.com/2016/08/19/the-nsa-was-hacked-snowden-documents-confirm/">This intercept article</a> does a
great job of explaining the operational side.</p>

<p>SECONDDATE (abbreviated as <em>SD</em> from here on) is a module in all of the leaked implant frameworks:</p>

<ul>
  <li>BLATSTING</li>
  <li>BUZZDIRECTON</li>
  <li>BANANAGLEE</li>
  <li>TURBO (PANDAROCK, POLARSCORE, POLARTX)</li>
</ul>

<p>Of both the <a href="https://gist.github.com/laanwj/9e5e404266a8956beabde522f97c421b">BLATSTING</a> and <a href="/2016/09/11/buzzdirection.html">BUZZDIRECTION</a> modules it is the module with the largest code size.
This alone puts up some challenges for reverse-engineering. I have mainly looked at the BLATSTING module
as I’m furthest with analyzing that framework, but at first sight it appears that the SD
modules for all these frameworks are based on the same underlying code - much of the binary and its data matches.</p>

<p>The primary reason for its large size appears to be that it contains a copy of the open source regular expression library
<a href="http://www.pcre.org/">PCRE</a><a href="#foot1" class="footref">1</a> as well as a weighty part of a C library required to
support that, statically linked.</p>

<p><a href="https://twitter.com/orionwl/status/765849507116507136">Pretty soon</a> after examining the dump I noticed that many of the SD <a href="/2016/09/09/blatsting-lp-transcript.html">Listening
Post</a> executables still had some debugging symbols.
After <a href="https://gist.github.com/laanwj/96841340cecb5ada220af39551df2896">dumping these</a> with <a href="https://github.com/laanwj/dwarf_to_c">dwarf_to_c</a>, a tool I wrote a few years back for a
completely different reason, I surmised that the whole C&amp;C protocol was already revealed there.</p>

<p>But only recently after completing the BLATSTING simulation and experimenting with it a it I could know this for sure.</p>

<h3 id="header">Header</h3>

<p>The SD C&amp;C protocol uses encrypted UDP packets with a fixed payload size of <code class="language-plaintext highlighter-rouge">1060</code> bytes, contents defined by:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">munge</span><span class="p">;</span> <span class="cm">/* +0x0 */</span>
  <span class="kt">int</span> <span class="n">magic</span><span class="p">;</span> <span class="cm">/* +0x4 */</span>
  <span class="kt">int</span> <span class="n">checkSum</span><span class="p">;</span> <span class="cm">/* +0x8 */</span>
  <span class="cm">/* De-munging and checksum XORing starts here */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">encCounter</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="cm">/* +0xc */</span>
  <span class="cm">/* Decryption starts here */</span>
  <span class="kt">int</span> <span class="n">encMagic</span><span class="p">;</span> <span class="cm">/* +0x14 */</span>
  <span class="kt">int</span> <span class="n">sequenceNum</span><span class="p">;</span> <span class="cm">/* +0x18 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">type</span><span class="p">;</span> <span class="cm">/* +0x1c */</span>
  <span class="kt">int</span> <span class="n">errCode</span><span class="p">;</span> <span class="cm">/* +0x20 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">logTime</span><span class="p">;</span> <span class="cm">/* +0x24 */</span>
  <span class="k">union</span>
  <span class="p">{</span>
    <span class="n">RULE_TYPE</span> <span class="n">rule</span><span class="p">;</span>
    <span class="n">SD_INFO</span> <span class="n">info</span><span class="p">;</span>
    <span class="n">LOG_ENTRY</span> <span class="n">log</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span>
  <span class="p">};</span> <span class="cm">/* +0x28 */</span>
<span class="p">}</span> <span class="n">SD_PDUTYPE</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="commands">Commands</h3>

<p>Of these header fields <code class="language-plaintext highlighter-rouge">type</code> specifies the type of packet, which in turn specifies which of the union
fields should be used to access the parameters. These were not part of the debug information but fairly easy to
discover playing with the LP program:</p>

<table>
  <thead>
    <tr>
      <th>type</th>
      <th>description</th>
      <th>parameter</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x01</td>
      <td>ping</td>
      <td><em>N/A</em></td>
    </tr>
    <tr>
      <td>0x02</td>
      <td>set rule</td>
      <td>rule</td>
    </tr>
    <tr>
      <td>0x03</td>
      <td>enable rule</td>
      <td>rule</td>
    </tr>
    <tr>
      <td>0x04</td>
      <td>disable rule</td>
      <td>rule</td>
    </tr>
    <tr>
      <td>0x05</td>
      <td>get rule</td>
      <td>rule</td>
    </tr>
    <tr>
      <td>0x06</td>
      <td>get log</td>
      <td>log</td>
    </tr>
    <tr>
      <td>0x07</td>
      <td>get info</td>
      <td>info</td>
    </tr>
    <tr>
      <td>0x08</td>
      <td>uninstall</td>
      <td><em>N/A</em></td>
    </tr>
    <tr>
      <td>0x09</td>
      <td>hello</td>
      <td><em>N/A</em></td>
    </tr>
    <tr>
      <td>0x0a</td>
      <td>clear log</td>
      <td><em>N/A</em></td>
    </tr>
  </tbody>
</table>

<h3 id="rule-definitions">Rule definitions</h3>

<p>Rule definitions are the bread and butter of this software. They define what to match on (TCP or UDP packets), a regular
expression on the packet contents, and a specification of what to inject in turn. They can be set using the <code class="language-plaintext highlighter-rouge">set rule</code>
command, enabled and disabled using the <code class="language-plaintext highlighter-rouge">enable rule</code> and <code class="language-plaintext highlighter-rouge">disable rule</code> command respectively, and requested using <code class="language-plaintext highlighter-rouge">get
rule</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">enabled</span><span class="p">;</span> <span class="cm">/* +0x0 */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">checkHTTPGET</span><span class="p">;</span> <span class="cm">/* +0x1 */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">checkPattern</span><span class="p">;</span> <span class="cm">/* +0x2 */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tcpFlags</span><span class="p">;</span> <span class="cm">/* +0x3 */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">injectflag</span><span class="p">;</span> <span class="cm">/* +0x4 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">;</span> <span class="cm">/* +0x8 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">start_index</span><span class="p">;</span> <span class="cm">/* +0xc */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">stop_index</span><span class="p">;</span> <span class="cm">/* +0x10 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">tagOffset</span><span class="p">;</span> <span class="cm">/* +0x14 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">u_timestamp</span><span class="p">;</span> <span class="cm">/* +0x18 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">e_timestamp</span><span class="p">;</span> <span class="cm">/* +0x1c */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">srcAddrFilter</span><span class="p">;</span> <span class="cm">/* +0x20 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">srcAddrFilterMask</span><span class="p">;</span> <span class="cm">/* +0x24 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dstAddrFilter</span><span class="p">;</span> <span class="cm">/* +0x28 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dstAddrFilterMask</span><span class="p">;</span> <span class="cm">/* +0x2c */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">protocolFilter</span><span class="p">;</span> <span class="cm">/* +0x30 */</span>
  <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">srcPortFilter</span><span class="p">;</span> <span class="cm">/* +0x34 */</span>
  <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dstPortFilter</span><span class="p">;</span> <span class="cm">/* +0x36 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">minInterval</span><span class="p">;</span> <span class="cm">/* +0x38 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">maxInjections</span><span class="p">;</span> <span class="cm">/* +0x3c */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">injectWindow</span><span class="p">;</span> <span class="cm">/* +0x40 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">injectLen</span><span class="p">;</span> <span class="cm">/* +0x44 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">currentInjections</span><span class="p">;</span> <span class="cm">/* +0x48 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">totalInjections</span><span class="p">;</span> <span class="cm">/* +0x4c */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">totalMisses</span><span class="p">;</span> <span class="cm">/* +0x50 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nextInjectTime</span><span class="p">;</span> <span class="cm">/* +0x54 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">injectWindowEnd</span><span class="p">;</span> <span class="cm">/* +0x58 */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">pattern</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span> <span class="cm">/* +0x5c */</span>
  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">inject</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span> <span class="cm">/* +0x15c */</span>
<span class="p">}</span> <span class="n">RULE_TYPE</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="info-structure">Info structure</h3>

<p>Some basic information about the implant can be requested using the <code class="language-plaintext highlighter-rouge">get info</code> command:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">version</span><span class="p">;</span> <span class="cm">/* +0x0 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">logEntries</span><span class="p">;</span> <span class="cm">/* +0x4 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ruleCount</span><span class="p">;</span> <span class="cm">/* +0x8 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">timeStamp</span><span class="p">;</span> <span class="cm">/* +0xc */</span>
<span class="p">}</span> <span class="n">SD_INFO</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="log-structure">Log structure</h3>

<p>The implant keeps a small log of the last matches and injections that it did (likely in a circular buffer). This can be
requested using the <code class="language-plaintext highlighter-rouge">get log</code> command and wiped with the <code class="language-plaintext highlighter-rouge">clear log</code> command.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">LOG_ENTRY_</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">;</span> <span class="cm">/* +0x0 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">srcAddr</span><span class="p">;</span> <span class="cm">/* +0x4 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dstAddr</span><span class="p">;</span> <span class="cm">/* +0x8 */</span>
  <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">srcPort</span><span class="p">;</span> <span class="cm">/* +0xc */</span>
  <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dstPort</span><span class="p">;</span> <span class="cm">/* +0xe */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">timeStamp</span><span class="p">;</span> <span class="cm">/* +0x10 */</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">rule</span><span class="p">;</span> <span class="cm">/* +0x14 */</span>
  <span class="kt">char</span> <span class="n">protocol</span><span class="p">;</span> <span class="cm">/* +0x18 */</span>
  <span class="kt">char</span> <span class="n">dataBuffer</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span> <span class="cm">/* +0x19 */</span>
<span class="p">}</span> <span class="n">LOG_ENTRY</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="decryption">Decryption</h3>

<p>Received UDPv4 packets go through the following flow:</p>

<ul>
  <li>
    <p>After receiving a packet first the size is checked against <code class="language-plaintext highlighter-rouge">1060</code> (like in BLATSTING, the ports don’t matter, though the
LP always uses source port <code class="language-plaintext highlighter-rouge">32768</code> and a random destination port).</p>
  </li>
  <li>
    <p>If that matches, the first two fields read as big-endian, <code class="language-plaintext highlighter-rouge">munge</code> and <code class="language-plaintext highlighter-rouge">magic</code> are checked via <code class="language-plaintext highlighter-rouge">munge + magic -
0x61e57cc6 == 0</code>.  If these match it will proceed to the next steps.</p>
  </li>
  <li>
    <p>Then a simple checksum is computed and checked (simply XOR together all 4-byte words), and a XOR de-munging step is
done.  Munging is the term that the Equation Group uses for simple obfuscation. Anyhow a <code class="language-plaintext highlighter-rouge">xorkey = munge - 0x61e57cc6</code>
is computed and the entire packet is XORed with the 4-byte word.</p>
  </li>
  <li>
    <p>Then, the packet is decrypted using RC6 in <a href="https://en.wikipedia.org/wiki/CTR_mode">CTR (counter mode)</a><a href="#foot1" class="footref">3</a>, instead of OFB
mode as in BLATSTING C&amp;C. The counter is part of every packet, as header field <code class="language-plaintext highlighter-rouge">encCounter</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">encMagic</code> is checked to be <code class="language-plaintext highlighter-rouge">0x9e 0x1a 0x83 0x3a</code>. If this matches, the packet is dispatched for command processing.</p>
  </li>
</ul>

<p>It does not look like the packets are authenticated in any way. There is no MAC. This is usually a bad idea, but even more with
crypto modes such as CCM that use the underlying block cipher as a stream cipher. Bits can be flipped for a lot of fun
as long as you don’t forget to update the checksum.</p>

<p>Again, if you were hoping to find evidence of unworldly cryptographic magic here, you’ll be disappointed.</p>

<h3 id="hardcoded-key">Hardcoded key</h3>

<p>Curiously all the samples in the dump use a hardcoded RC6 key: <code class="language-plaintext highlighter-rouge">e2be1a91aed43cf0398acdd13f7bc3f9</code><a href="#foot1" class="footref">2</a>.
I have only verified this for sure with the BLATSTING implementation but this key can be found (in binary, not as hex
string) in all implants of SD as well as all LP executables to control it, except for BUZZDIRECTION.</p>

<p>There appears to be no way to change or override the key externally, although there is of course the possibility that
the “keying system”, which is missing from this dump for all of the frameworks, changes the key in the binary.</p>

<h3 id="conclusion">Conclusion</h3>

<p class="center"><img src="/assets/2016/09/17/seconddate-cnc/wireshark.png" alt="Wireshark dump of SECONDDATE C&amp;C packets" title="Wireshark dump of SECONDDATE C&amp;C packets" />
<em>Screenshot of a Wireshark dump of SECONDDATE C&amp;C packets. Would be nice to have a dissector… Here’s the accompanying <a href="/assets/2016/09/17/seconddate-cnc/seconddate.cap">seconddate.cap</a> file.</em></p>

<p>I hope this article gives enough information to detect SD C&amp;C usage in the wild. I may do a <a href="/2016/09/09/blatsting-lp-transcript.html">LP transcript</a> or demo of using the implant later on. Also I think
the rule structure deserves more attention.</p>

<p><em>Footnotes</em></p>

<p><span class="footdef" id="foot1">1</span>. I found at least <code class="language-plaintext highlighter-rouge">regexp_compile</code> and <code class="language-plaintext highlighter-rouge">regexp_match</code> with the same API as documented by PCRE.
It is used to look for the for the famous string <code class="language-plaintext highlighter-rouge">ace02468bdf13579</code> (see the Intercept article linked at the beginning)
match HTTP in TCP streams with <code class="language-plaintext highlighter-rouge">^GET.*(?:/ |\\.(?:htm|asp|php)).*\\r\\n</code>, as well as look for user-defined patterns.</p>

<p><span class="footdef" id="foot2">2</span>. No hosts on the internet respond to SD packets under this key. That has been checked. Also
it’s all out in the open, no one knows how long this leak has been floating around prior to publication, and I doubt
that I’m the first one to discover this. So it is safe to reveal. But it is fun (or scary) to think that once this may have been
the key to the castle for controlling a significant part of the internet.</p>

<p><span class="footdef" id="foot3">3</span>. Details: It is standard 20-round RC6, with blocksize 128 bits. <a href="https://github.com/radare/radare2/blob/master/libr/crypto/p/crypto_rc6.c">Example C
implementation</a>. Counter is
padded to input block as <code class="language-plaintext highlighter-rouge">&lt;8b counter (big endian)&gt;&lt;8b 0&gt;</code>, then encrypted to generate keystream. Initial value of
counter is in the packet, after each block the counter is increased with 1.</p>

  </div>

  <div class="date">
    Written on September 17, 2016
  </div>
  <div class="tags">
    Tags: 
    
    
      <a href="/tags/#eqgrp" class="post-tag">eqgrp</a>
    
      <a href="/tags/#malware" class="post-tag">malware</a>
    
    
  </div>
  <div class="categories">
    Filed under
    
    
      <a href="/categories/#reverse-engineering" class="post-category">Reverse-engineering</a>
    
    
  </div>

  
</article>

    </div>

    <div class="wrapper-footer">
      <div class="container">
        <footer class="footer">
          



<a href="https://github.com/laanwj/laanwj.github.io"><i class="svg-icon github"></i></a>



<a href="/feed.xml"><i class="svg-icon rss"></i></a>




        </footer>
      </div>
    </div>

    

  </body>
</html>
