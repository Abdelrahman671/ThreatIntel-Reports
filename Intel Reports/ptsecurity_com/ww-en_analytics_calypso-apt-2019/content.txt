<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>Calypso APT: new group attacking state institutions</title><meta name="description" content="The PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers&#x27; C2 servers. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey."/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="icon" href="/images/favicons/favicon.ico" sizes="any"/><link rel="icon" href="/images/favicons/icon.svg" type="image/svg+xml"/><link rel="apple-touch-icon" href="/images/favicons/apple-touch-icon.png"/><meta name="next-head-count" content="7"/><script type="text/javascript">
                   
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
  
                   ym(93900442, "init", {
                       clickmap: true,
                       trackLinks: true,
                       accurateTrackBounce: true,
                       webvisor: true
                   });
             </script><noscript><div><img src="https://mc.yandex.ru/watch/93900442" style="position:absolute;left:-9999px" alt=""/></div></noscript><script id="mindbox-init">
    mindbox = window.mindbox || function() { mindbox.queue.push(arguments); };
    mindbox.queue = mindbox.queue || [];

    mindbox('create', {
        endpointId: 'ptsec.global',
    });
</script><script async="" src="https://api.mindbox.ru/scripts/v1/tracker.js"></script><script async="" src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" data-domain-script="0191d674-840f-7931-a533-9567b38dbd10" data-document-language="true"></script><script type="text/javascript">function OptanonWrapper() { }</script><link rel="preload" href="/_next/static/css/80c4a58119cf7c0b.css" as="style"/><link rel="stylesheet" href="/_next/static/css/80c4a58119cf7c0b.css" data-n-g=""/><link rel="preload" href="/_next/static/css/5cec7a8abaf4901f.css" as="style"/><link rel="stylesheet" href="/_next/static/css/5cec7a8abaf4901f.css" data-n-p=""/><link rel="preload" href="/_next/static/css/aabb9bc1061deee8.css" as="style"/><link rel="stylesheet" href="/_next/static/css/aabb9bc1061deee8.css" data-n-p=""/><link rel="preload" href="/_next/static/css/37c177beab301399.css" as="style"/><link rel="stylesheet" href="/_next/static/css/37c177beab301399.css" data-n-p=""/><link rel="preload" href="/_next/static/css/726f242ea561e5d5.css" as="style"/><link rel="stylesheet" href="/_next/static/css/726f242ea561e5d5.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="/_next/static/chunks/webpack-d6441674d4b92143.js" defer=""></script><script src="/_next/static/chunks/framework-ce84985cd166733a.js" defer=""></script><script src="/_next/static/chunks/main-2aa161cc193cdf0e.js" defer=""></script><script src="/_next/static/chunks/pages/_app-03ac6c281b4190af.js" defer=""></script><script src="/_next/static/chunks/4b358913-e177b648ea0062d1.js" defer=""></script><script src="/_next/static/chunks/f10e284a-c46ff7024e963ef1.js" defer=""></script><script src="/_next/static/chunks/dff27125-edb64a536e668286.js" defer=""></script><script src="/_next/static/chunks/4322cd96-db9c9cbc97931387.js" defer=""></script><script src="/_next/static/chunks/5300-5d5240edfe5088d0.js" defer=""></script><script src="/_next/static/chunks/4028-70e0d285b32e5897.js" defer=""></script><script src="/_next/static/chunks/2580-447bcccef7567d77.js" defer=""></script><script src="/_next/static/chunks/585-0d6245c6d60804bf.js" defer=""></script><script src="/_next/static/chunks/8973-5b086d43f68f9a0f.js" defer=""></script><script src="/_next/static/chunks/9381-bee1ef77a768e456.js" defer=""></script><script src="/_next/static/chunks/254-dde07e0bcb3d5f5a.js" defer=""></script><script src="/_next/static/chunks/3330-13425461e8bb6bd9.js" defer=""></script><script src="/_next/static/chunks/9852-d3e7d7c2bf949d3a.js" defer=""></script><script src="/_next/static/chunks/5363-fea1d2f79e1d9971.js" defer=""></script><script src="/_next/static/chunks/pages/analytics/%5Bslug%5D-f50fe8ae7164368b.js" defer=""></script><script src="/_next/static/39FkjQp2g8LNEtWCuedET/_buildManifest.js" defer=""></script><script src="/_next/static/39FkjQp2g8LNEtWCuedET/_ssgManifest.js" defer=""></script></head><body><div id="__next"><div class=""><header class="Header_header__Hd6K0" id="nav-bar"></header><main id="main" class="PageLayout_main__LUbC0"><div class="analyticArticle_wrapper__riC1i"><div class="ArticleHeader_banner__enm6f"><section class="PageSection_section__GxaaG ArticleHeader_section__sve5w ArticleHeader_withBottomBar__d_wKA"><div class="ArticleHeader_header___PnMn"><div class="ArticleHeader_headerInner__2bYRI"><h2 class="Heading_base__MUnbH Heading_level_2__qXMBH"><span>Calypso APT: new group attacking state institutions</span></h2><div class="ArticleHeader_text__yZfkl Text_base__riB2c Text_type_pL__A_h0d"><span>The PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers' C2 servers. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey.</span></div></div></div><div class="ArticleHeader_bottomBar__EgyS1"><div class="ArticleHeader_leftSide__gAaId"></div><div class="ArticleHeader_rightSide__zUGU_"><a class="ButtonDownloadPdf_extraButton__0WDJQ ArticleHeader_extraButton__zTZOf Button_button__F7Ulc Button_button_size_s___Bpb6 Button_button_theme_dark__iuu3A" download="" target="_blank" rel="nofollow noopener" href="https://www.ptsecurity.com/upload/corporate/ww-en/analytics/calypso-apt-2019-eng.pdf"><span><span>Download pdf</span><img alt="" loading="lazy" width="16" height="16" decoding="async" data-nimg="1" style="color:transparent" src="/_next/static/media/download.b9c8f636.svg"/></span></a><button type="button" class="ButtonShareLink_extraButton__6pf3i ArticleHeader_extraButton__zTZOf Button_button__F7Ulc Button_button_size_s___Bpb6 Button_button_theme_dark__iuu3A"><span>Share<img alt="share" loading="lazy" width="16" height="16" decoding="async" data-nimg="1" style="color:transparent" src="/_next/static/media/sharing.472b5ae7.svg"/></span></button></div></div></section></div><section class="PageSection_section__GxaaG Card_section__QzdVO"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j"><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_leftColumn___AQb_ analyticArticle_dateWrap__MS_nz"><div class="ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>31 OCTOBER 2019</span></div><div class="analyticArticle_asideContainer__tXhiU"><div class="analyticArticle_aside__d6yks"></div></div></div><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"><div class="HtmlContent_content__ajDaE"><h2>Contents</h2>
<div class="article-nav">
<ul>
	<li><a class="link link_article-nav anchorLink" href="#id1">Calypso APT</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id2">Initial infection vector</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id3">Lateral movement</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id4">Attribution</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id5">Analyzing Calypso RAT malicious code</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id6">Dropper</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id7">Installation BAT script</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id8">Shellcode x86: stager</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id9">Modules</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id10">Commands</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id11">Network code</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id12">Shellcode x64: stager (base backdoor) </a></li>
	<li><a class="link link_article-nav anchorLink" href="#id13">Modules</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id14">Commands</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id15">Network code</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id16">Other options</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id17">Dropper-stager</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id18">Hussar</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id19">Initialization</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id20">Modules</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id21">FlyingDutchman</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id22">Conclusion</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id23">Indicators of compromise</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id24">Network</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id25">File indicators</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id26">Droppers and payload</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id27">Droppers with the same payload</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id28">Payload without dropper</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id29">Hussar</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id30">FlyingDutchman</a></li>
	<li><a class="link link_article-nav anchorLink" href="#id31">MITRE ATT&amp;CK</a></li>
</ul>
</div>
<h2 id="id1">Calypso APT</h2>

<p>The PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers&#x27; C2 servers.</p>

<p>Our data indicates that the group has been active since at least September 2016. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey.</p>

<p>Our data gives reason to believe that the APT group is of Asian origin<sup> 1</sup>.</p>

<h2 id="id2">Initial infection vector</h2>

<p>The attackers accessed the internal network of a compromised organization by using an ASPX web shell. They uploaded the web shell by exploiting a vulnerability or, alternately, guessing default credentials for remote access. We managed to obtain live traffic between the attackers and the web shell.</p>

<figure>
    <img alt="Figure 1. Part of the recorded traffic" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_1.jpg"/>
    <figcaption>Figure 1. Part of the recorded traffic</figcaption>
</figure>

<p>The traffic indicates the attackers connected from IP address 46.166.129.241. That host contains domain tv.teldcomtv.com, the C2 server for the group&#x27;s trojan. Therefore the hackers use C2 servers not only to control malware, but also to access hosts on compromised infrastructures.</p>

<p>The attackers used the web shell to upload utilities<sup> 2</sup> and malware,<sup> 3</sup> execute commands, and distribute malware inside the network. Examples of commands from the traffic are demonstrated in the following screenshot.</p>

<figure>
    <img alt="Figure 2. Commands sent to the web shell" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_2.jpg"/>
    <figcaption>Figure 2. Commands sent to the web shell</figcaption>
</figure>

<h2 id="id3">Lateral movement</h2>

<p>The group performed lateral movement by using the following publicly available utilities and exploits:</p>

<ul>
	<li>SysInternals</li>
	<li>Nbtscan</li>
	<li>Mimikatz</li>
	<li>ZXPortMap</li>
	<li>TCP Port Scanner</li>
	<li>Netcat</li>
	<li>QuarksPwDump</li>
	<li>WmiExec</li>
	<li>EarthWorm</li>
	<li>OS_Check_445</li>
	<li>DoublePulsar</li>
	<li>EternalBlue</li>
	<li>EternalRomance</li>
</ul>

<p>On compromised computers, the group stored malware and utilities in either C:\RECYCLER or C:\ProgramData. The first option was used only on computers with Windows XP or Windows Server 2003 with NTFS on drive C.</p>

<p>The attackers spread within the network either by exploiting vulnerability MS17-010 or by using stolen credentials. In one instance, 13 days after the attackers got inside the network, they used DCSync and Mimikatz to obtain the Kerberos ticket of the domain administrator, &quot;passing the ticket&quot; to infect more computers.</p>

<figure>
    <img alt="Figure 3. Obtaining account data via DCSync" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_3.jpg"/>
    <figcaption>Figure 3. Obtaining account data via DCSync</figcaption>
</figure>

<p>Use of such utilities is common for many APT groups. Most of those utilities are legitimate ones used by network administrators. This allows the attackers to stay undetected longer.</p>

<h2 id="id4">Attribution</h2>

<p>In one attack, the group used Calypso RAT, PlugX, and the Byeby trojan. Calypso RAT is malware unique to the group and will be analyzed in detail in the text that follows.</p>

<p>PlugX has traditionally been used by many APT groups of Asian origin. Use of PlugX in itself does not point to any particular group, but is overall consistent with an Asian origin.</p>

<p>The Byeby trojan<sup> 4</sup> was used in the SongXY malware campaign back in 2017. The version used now is modified from the original. The group involved in the original campaign is also of Asian origin. It performed targeted attacks on defense and government-related targets in Russia and the CIS countries. However, we did not find any clear-cut connection between the two campaigns.</p>

<p>When we analyzed the traffic between the attackers&#x27; server and the web shell, we found that the attackers used a non-anonymous proxy server. The X-Forwarded-For header passed the attackers&#x27; IP address (36.44.74.47). This address would seem to be genuine (more precisely, the first address in a chain of proxy servers).</p>

<figure>
    <img alt="Figure 4. Headers of requests to the web shell" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_4.jpg"/>
    <figcaption>Figure 4. Headers of requests to the web shell</figcaption>
</figure>

<p>The IP address belongs to China Telecom. We believe the attackers could have been careless and set up the proxy server incorrectly, thus disclosing their real IP address. This is the first piece of evidence supporting the Asian origins of the group.</p>

<figure>
    <img alt="Figure 5. Information on the discovered IP address" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_5.jpg"/>
    <figcaption>Figure 5. Information on the discovered IP address</figcaption>
</figure>

<p>The attackers also left behind a number of system artifacts, plus traces in utility configurations and auxiliary scripts. These are also indicative of the group&#x27;s origin.</p>

<p>For instance, one of the DoublePulsar configuration files contained external IP address 103.224.82.47, presumably for testing. But all other configuration files contained internal addresses.</p>

<figure>
    <img alt="Figure 6. IP address found in the DoublePulsar configuration" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_6.jpg"/>
    <figcaption>Figure 6. IP address found in the DoublePulsar configuration</figcaption>
</figure>

<p>This IP address belongs to a Chinese provider, like the one before, and it was most likely left there due to the attackers&#x27; carelessness. This constitutes additional evidence of the group&#x27;s Asian origins.</p>

<figure>
    <img alt="Figure 7. Information on the discovered IP address" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_7.jpg"/>
    <figcaption>Figure 7. Information on the discovered IP address</figcaption>
</figure>

<p>We also found BAT scripts that launched ZXPortMap and EarthWorm for port forwarding. Inside we found network indicators www.sultris.com and 46.105.227.110.</p>

<figure>
    <img alt="Figure 8. Network indicators found in the BAT scripts" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_8.jpg"/>
    <figcaption>Figure 8. Network indicators found in the BAT scripts</figcaption>
</figure>

<p>The domain in question was used for more than just tunneling: it also served as C2 server for the PlugX malware we found on the compromised system. As already mentioned, PlugX is traditionally used by groups of Asian origin, which constitutes yet more evidence.</p>

<p>Therefore we can say that the malware and network infrastructure used all point to the group having an Asian origin.</p>

<h2 id="id5">Analyzing Calypso RAT malicious code</h2>

<p>The structure of the malware and the process of installing it on the hosts of a compromised network look as follows:</p>

<figure>
    <img alt="Figure 9. Malware structure and installation process" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_9.jpg"/>
    <figcaption>Figure 9. Malware structure and installation process</figcaption>
</figure>

<h2 id="id6">Dropper</h2>

<p>The dropper extracts the payload as an installation BAT script and CAB archive, and saves it to disk. The payload inside the dropper has a magic header that the dropper searches for. The following figure shows an example of the payload structure.</p>

<figure>
    <img alt="Figure 10. Structure of the payload hard-coded in the dropper" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_10.jpg"/>
    <figcaption>Figure 10. Structure of the payload hard-coded in the dropper</figcaption>
</figure>

<p>The dropper encrypts and decrypts data with a self-developed algorithm that uses CRC32 as a pseudorandom number generator (PRNG). The algorithm performs arithmetic (addition and subtraction) between the generated data and the data that needs to be encrypted or decrypted.</p>

<figure>
    <img alt="Figure 11. Dropper with original encryption and decryption algorithm" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_11.jpg"/>
    <figcaption>Figure 11. Dropper with original encryption and decryption algorithm</figcaption>
</figure>

<p>Now decrypted, the payload is saved to disk at %ALLUSERSPROFILE;\TMP_%d%d, where the last two numbers are replaced by random numbers returned by the rand() function. Depending on the configuration, the CAB archive contains one of three possibilities: a DLL and encrypted shellcode, a DLL with encoded loader in the resources, or an EXE file. We were unable to detect any instances of the last variant.</p>

<h2 id="id7">Installation BAT script</h2>

<p>The BAT script is encoded by substitution from a preset dictionary of characters; this dictionary is initialized in a variable in the installation script.</p>

<figure>
    <img alt="Figure 12. Example of installation script obfuscation" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_12.jpg"/>
    <figcaption>Figure 12. Example of installation script obfuscation</figcaption>
</figure>

<p>In the decoded script, we can see comments hinting at the main functions of the script:</p>

<ul>
	<li>REM Goto temp directory &amp; extract file (go to TEMP directory and extract files there)</li>
	<li>REM Uninstall old version (uninstall the old version)</li>
	<li>REM Copy file (copy file)</li>
	<li>REM Run pre-install script (run the installation BAT script)</li>
	<li>REM Create service (create a service launching the malware at system startup)</li>
	<li>REM Create Registry Run (create value in the registry branch for autostart)</li>
</ul>

<p>At the beginning of each script we can see a set of variables. The script uses these variables to save files, modify services, and modify registry keys.</p>

<figure>
    <img alt="Figure 13. Initializing variables in deobfuscated script" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_13.jpg"/>
    <figcaption>Figure 13. Initializing variables in deobfuscated script</figcaption>
</figure>

<p>In one of the oldest samples, compiled in 2016, we found a script containing comments for how to configure each variable.</p>

<figure>
    <img alt="Figure 14. Early version of the script with comments" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_14.jpg"/>
    <figcaption>Figure 14. Early version of the script with comments</figcaption>
</figure>

<h2 id="id8">Shellcode x86: stager</h2>

<p>In most of the analyzed samples, the dropper was configured to execute shellcode. The dropper saved the DLL and encrypted shellcode to disk. The shellcode name was always identical to that of the DLL, but had the extension .dll.crt. The shellcode is encrypted with the same algorithm as the payload in the dropper. The shellcode acts as a stager providing the interface for communicating with C2 and for downloading modules. It can communicate with C2 via TCP and SSL. SSL is implemented via the mbed_tls library.</p>

<p>Initial analysis of the shellcode revealed that, in addition to dynamically searching for API functions, it runs one more operation that repeats the process of PE file address relocation. The structure of the relocation table is also identical to that found in the PE file.</p>

<figure>
    <img alt="Figure 15. Shellcode relocations" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_15.jpg"/>
    <figcaption>Figure 15. Shellcode relocations</figcaption>
</figure>

<p>Since the process of shellcode address relocation repeats that of the PE file, we can assume that initially the malware is compiled into a PE file, and then the builder turns it into shellcode. Debugging information found inside the shellcode supports that assumption.</p>

<figure>
    <img alt="Figure 16. Debugging information inside the shellcode" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_16.jpg"/>
    <figcaption>Figure 16. Debugging information inside the shellcode</figcaption>
</figure>

<p>API functions are searched for dynamically and addresses are relocated, after which the configuration hard-coded inside the shellcode is parsed. The configuration contains information about the C2 server address, protocol used, and connection type.</p>

<figure>
    <img alt="Figure 17. Example of shellcode configuration" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_17.jpg"/>
    <figcaption>Figure 17. Example of shellcode configuration</figcaption>
</figure>

<p>Next the shellcode creates a connection to C2. A random packet header is created and sent to C2. In response the malware receives a network key, saves it, and then uses it every time when communicating with C2. Then the information about the infected computer is collected and sent to C2.</p>

<p>Next three threads are launched. One is a heartbeat sending an empty packet to C2 every 54 seconds. The other processes and executes commands from C2. As for the third thread, we could not figure out its purpose, because the lines implementing its functionality were removed from the code. All we can tell is that this thread was supposed to &quot;wake up&quot; every 54 seconds, just like the first one.</p>

<h2 id="id9">Modules</h2>

<p>We have not found any modules so far. But we can understand their functionality by analyzing the code responsible for communication between the shellcode and the modules. Each module is shellcode which is given control over the zero offset of the address. Each module exists in its own separate container. The container is a process with loaded module inside. By default, the process is svchost.exe. When a container is created, it is injected with a small shellcode that causes endless sleep. This is also hard-coded in the main shellcode, and more specifically in JustWait. pdb, most likely.</p>

<p>The module is placed inside with an ordinary writeprocess and is launched either with NtCreateThreadEx or, on pre-Vista operating systems, CreateRemoteThread.</p>

<p>Two pipes are created for each module. One is for transmitting the data from the module to C2; the other for receiving data from C2. Quite likely the modules do not have their own network code and instead use the pipes to communicate with external C2 through the main shellcode.</p>

<figure>
    <img alt="Figure 18. Creating pipes for modules" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_18.jpg"/>
    <figcaption>Figure 18. Creating pipes for modules</figcaption>
</figure>

<p>Each module has a unique ID assigned by C2. Containers are launched in different ways. A container can be launched in a specific session open in the OS or in the same session as the stager. In any particular session, the container is launched by getting the handle for the session token of a logged-in user, and then launching the process as that user.</p>

<figure>
    <img alt="Figure 19. Creating container process in a different session" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_19.jpg"/>
    <figcaption>Figure 19. Creating container process in a different session</figcaption>
</figure>

<h2 id="id10">Commands</h2>

<p>The malware we studied can process 12 commands. All of them involve modules in one way or another. Here is a list of all IDs of commands found in the malware, along with those that the malware itself sends in various situations.</p>

<img alt=" " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_20.jpg"/>

<h2 id="id11">Network code</h2>

<p>Network communication is initialized after the network key is received from C2. To do that, the malware sends a random sequence of 12 bytes to C2. In response the malware also expects 12 bytes, the zero offset of which must contain the same value (_DWORD) as prior to sending. If the check is successful, four bytes at offset 8 are taken from the response and decrypted with RC4. The key is four bytes sent previously, also located at offset 8. This result is the network key. The key is saved and then used to send data.</p>

<p>All transmitted packets have the following structure.</p>

<pre>
<div class="code">
struct Packet{
    struct PacketHeader{
    _ DWORD key;
    _ WORD cmdId;
    _ WORD szPacketPayload;
    _ DWORD moduleId;
};
    _ BYTE [max 0xF000] packetPayload;
};
</div>
</pre>

<p>A random four-byte key is generated for each packet. It is later used to encrypt part of the header, starting with the cmdld field. The same key is used to encrypt the packet payload. Encryption uses the RC4 algorithm. The key itself is encrypted by XOR with the network key and saved to the corresponding field of the packet header.</p>

<h2 id="id12">Shellcode x64: stager (base backdoor)</h2>

<p>This shellcode is very similar to the previous one, but it deserves a separate description because of differences in its network code and method of launching modules. This shellcode has basic functions for file system interaction which are not available in the shellcode described earlier. Also the configuration format, network code, and network addresses used as C2 by this shellcode are similar to code from a 2018 blog post by NCC Group about a Gh0st RAT variant. However, we did not find a connection to Gh0st RAT.</p>

<p>This variant of the shellcode has only one communication channel, via SSL. The shellcode implements it with two legitimate libraries, libeay32.dll and ssleay32.dll, hard-coded in the shellcode itself.</p>

<p>First the shellcode performs a dynamic search for API functions and loads SSL libraries. The libraries are not saved to disk; they are read from the shellcode and mapped into memory. Next the malware searches the mapped image for the functions it needs to operate.</p>

<p>Then it parses the configuration string, which is also hard-coded in the shellcode. The configuration includes information on addresses of C2 servers and schedule for malware operation.</p>

<figure>
    <img alt="Figure 20. Sample of configuration string" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_22.jpg"/>
    <figcaption>Figure 20. Sample of configuration string</figcaption>
</figure>

<p>After that the malware starts its main operating cycle. It checks if the current time matches the malware operational time. If not, the malware sleeps for about 7 minutes and checks again. This happens until the current time is the operational time, and only then does the malware resume operation. Figure 20 demonstrates an example in which the malware remains active at all times on all days of the week.</p>

<p>When the operational time comes, the malware goes down the list of C2 servers specified in the configuration and tries to connect. The malware subsequently interacts with whichever of the C2 servers it is able to successfully connect to first.</p>

<p>Then the malware sends the information on the infected computer (such as computer name, current date, OS version, 32-bit vs. 64-bit OS and CPU, and IP addresses on network interfaces and their MAC addresses). After the information on the infected computer is sent, the malware expects a response from C2. If C2 returns the relevant code, sending is deemed successful and the malware proceeds. If not, the malware goes back to sequentially checking C2 addresses. Next it starts processing incoming commands from C2.</p>

<h2 id="id13">Modules</h2>

<p>Each module is a valid MZPE file mapped in the address space of the same process as the shellcode. Also the module can export the GetClassObject symbol, which receives control when run (if required).</p>

<p>Each module has its own descriptor created by a command from C2. The C2 server sends a byte array (0x15) describing the module. The array contains information on the module: whether the module needs to be launched via export, module type (in other words, whether it needs pipes for communicating with C2), module size, entry point RVA (used if there is no flag for launching via export), and module data decryption key. The key is, by and large, the data used to format the actual key.</p>

<figure>
    <img alt="Figure 21. Module decryption" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_23.jpg"/>
    <figcaption>Figure 21. Module decryption</figcaption>
</figure>

<p>We should also point out that decryption takes place only if modKey is not equal to the 7AC9h constant hard-coded in the shellcode. This check affects only the decryption process. If modKey does equal the constant, the malware will immediately start loading the module. This means the module is not encrypted.</p>

<p>Each module is launched in a separate thread created specially for that purpose. Launching with pipes looks as follows:</p>

<ul>
	<li>The malware creates a thread for the module, starts mapping the module, and gives it control inside the newly created thread.</li>
	<li>The malware creates a new connection to the current working C2.</li>
	<li>The malware creates a pipe with the name derived from the following format string: \\.\ pipe\windows@#%02XMon (%02X is replaced by a value that is received from С2 at the same time as the command for launching the module).</li>
	<li>The malware launches two threads passing data from the pipe to C2 and vice versa, using the connection created during the previous step. Two more pipes, \\.\pipe\windows@#%02Xfir and \\.\pipe\windows@#%02Xsec, are created inside the threads. The pipe ending in &quot;fir&quot; is used to pass data from the module to C2. The pipe ending in &quot;sec&quot; is used to pass data and commands from C2 to the modules.</li>
</ul>

<p>The second thread processing the commands from C2 to the modules has its own handler. This is described in more details in the Commands section. For now we can only say that one of the commands can start a local asynchronous TCP server. That server will accept data from whoever connects to it, send it to C2, and forward it back from C2. It binds to 127.0.0.1 at whichever port it finds available, starting from 5000 and trying possible ports one by one.</p>

<h2 id="id14">Commands</h2>

<p>The following is a list of IDs for commands the malware can receive, along with commands the malware itself sends in various situations.</p>

<img alt=" " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_24.jpg"/>

<h2 id="id15">Network code</h2>

<p>Each packet has the following structure:</p>

<pre>
<div class="code">
Struct Packet{
        Struct Header{
        _ DWORD rand _ k1;
    _ DWORD rand _ k2;
    _ DWORD rand    _ k3;
    _ DWORD szPaylaod;
    _ DWORD protoConst;
    _ DWORD packetId;
    _ DWORD unk1;
    _ DWORD packetKey;
};
    _ BYTE [max 0x2000] packetPayload;
};
</div>
</pre>

<p>Each packet has a unique key calculated as szPayload + GetTickCount() % hardcodedConst. This key is saved in the corresponding packetKey header field. It is used to generate another key for encrypting the packet header with RC4 (encryption will not occur without the packetKey field). RC4 key generation is demonstrated in the following figure.</p>

<figure>
    <img alt="Figure 22. Generating RC4 key for the header" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_26.jpg"/>
    <figcaption>Figure 22. Generating RC4 key for the header</figcaption>
</figure>

<p>Then yet another RC4 key is generated from the encrypted fields szPayload, packetId, protoConst, and rand_k3. This key is used to encrypt the packet payload.</p>

<figure>
    <img alt="Figure 23. Generating RC4 key for the packet payload" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_27.jpg"/>
    <figcaption>Figure 23. Generating RC4 key for the packet payload</figcaption>
</figure>

<p>Next the shellcode forms the HTTP headers and the created packet is sent to C2. In addition, each packet gets its own number, indicated in the URL. Modules may pass their ID, which is used to look up the connection established during module launch. Module ID 0 is reserved for the main connection of the stager.</p>

<figure>
    <img alt="Figure 24. Forming HTTP headers" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_28.jpg"/>
    <figcaption>Figure 24. Forming HTTP headers</figcaption>
</figure>

<h2 id="id16">Other options</h2>

<p>As we noted, the dropper may be configured to launch not just shellcode, but executable files too. We found the same dropper-stager but with different payloads: Hussar and FlyingDutchman.</p>

<h2 id="id17">Dropper-stager</h2>

<p>The main tasks of this dropper are unpacking and mapping the payload, which is encoded and stored in resources. The dropper also stores encoded configuration data and passes it as a parameter to the payload.</p>

<figure>
    <img alt="Figure 25. Unpacking the payload" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_29.jpg"/>
    <figcaption>Figure 25. Unpacking the payload</figcaption>
</figure>

<h2 id="id18">Hussar</h2>

<p>In essence Hussar is similar to the shellcodes described earlier. It allows loading modules and collecting basic information about the computer. It can also add itself to the list of authorized applications in Windows Firewall.</p>

<h2 id="id19">Initialization</h2>

<p>To start, the malware parses the configuration provided to it by the loader.</p>

<figure>
    <img alt="Figure 26. Configuration sample" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_30.jpg"/>
    <figcaption>Figure 26. Configuration sample</figcaption>
</figure>

<p>Configuration structure is as follows:</p>

<pre>
<div class="code">
Struct RawConfig{
        _ DWORD protocolId;
        _ BYTE c2Strings [0x100];
};
</div>
</pre>

<p>The protocolId field indicates the protocol to be used for communicating with C2. There are a total of three possibilities:</p>

<ul>
	<li>If protocolId equals 1, a TCP-based protocol will be used.</li>
	<li>If protocolId equals 2, the protocol will be HTTP-based.</li>
	<li>If protocolId equals 3, it will be HTTPS-based.</li>
</ul>

<p>The time stamp is calculated from the registry from the key SOFTWARE\Microsoft\Windows\ CurrentVersion\Telephony (Perf0 value). If reading the time stamp is impossible, &quot;temp&quot; is added to the computer identifier.</p>

<figure>
    <img alt="Figure 27. Generating computer ID" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_32.jpg"/>
    <figcaption>Figure 27. Generating computer ID</figcaption>
</figure>

<p>Next Hussar creates a window it will use for processing incoming messages.</p>

<figure>
    <img alt="Figure 28. Creating dispatcher window" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_33.jpg"/>
    <figcaption>Figure 28. Creating dispatcher window</figcaption>
</figure>

<p>Then the malware adds itself to the list of authorized applications in Windows Firewall, using the INetFwMgr COM interface.</p>

<p>To complete initialization, Hussar creates a thread which connects to C2 and periodically polls for commands. The function running in the thread uses the WSAAsyncSelect API to notify the window that actions can be performed with the created connection (socket is &quot;ready for reading,&quot; &quot;connected,&quot; or &quot;closed&quot;).</p>

<figure>
    <img alt="Figure 29. Communication between the open socket and the window" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_34.jpg"/>
    <figcaption>Figure 29. Communication between the open socket and the window</figcaption>
</figure>

<p>In general, for transmitting commands, the malware uses the window and Windows messaging mechanism. The window handle is passed to the modules, and the dispatcher has branches not used by the stager, so we can assume that the modules can use the window for communication with C2.</p>

<h2 id="id20">Modules</h2>

<p>Each module is an MZPE file loaded into the same address space as the stager. The module must export the GetModuleInfo function, which is called by the stager after image mapping.</p>

<img alt=" " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_35.jpg"/>

<h2 id="”21”">FlyingDutchman</h2>

<p>The payload provides remote access to the infected computer. It includes functions such as screenshot capture, remote shell, and file system operations. It also allows managing system processes and services. It consists of several modules.</p>

<img alt=" " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_36.jpg"/>

<h2 id="id22">Conclusion</h2>

<p>The group has several successful hacks to its credit, but still makes mistakes allowing us to guess its origins. All data given here suggests that the group originates from Asia and uses malware not previously described by anyone. The Byeby trojan links the group to SongXY, encountered by us previously, which was most active in 2017.</p>

<p>We keep monitoring the activities of Calypso closely and expect the group will attack again.</p>

<h2 id="id23">Indicators of compromise</h2>

<h3 id="id24">Network</h3>

<p>23.227.207.137</p>

<p>45.63.96.120</p>

<p>45.63.114.127</p>

<p>r01.etheraval.com</p>

<p>tc.streleases.com</p>

<p>tv.teldcomtv.com</p>

<p>krgod.qqm8.com</p>

<h3 id="id25">File indicators</h3>

<h3 id="id26">Droppers and payload</h3>

<p>C9C39045FA14E94618DD631044053824<br/>
	E24A62D9826869BC4817366800A8805C<br/>
	F0F5DA1A4490326AA0FC8B54C2D3912D<br/>
	CB914FC73C67B325F948DD1BF97F5733<br/>
	6347E42F49A86AFF2DEA7C8BF455A52A<br/>
	0171E3C76345FEE31B90C44570C75BAD<br/>
	17E05041730DCD0732E5B296DB16D757<br/>
	69322703B8EF9D490A20033684C28493<br/>
	22953384F3D15625D36583C524F3480A<br/>
	1E765FED294A7AD082169819C95D2C85<br/>
	C84DF4B2CD0D3E7729210F15112DA7AC<br/>
	ACAAB4AA4E1EA7CE2F5D044F198F0095</p>

<h3 id="id27">Droppers with the same payload</h3>

<p>85CE60B365EDF4BEEBBDD85CC971E84D<br/>
	1ED72C14C4AAB3B66E830E16EF90B37B<br/>
	CB914FC73C67B325F948DD1BF97F5733</p>

<h3 id="id28">Payload without dropper</h3>

<p>E3E61F30F8A39CD7AA25149D0F8AF5EF<br/>
	974298EB7E2ADFA019CAE4D1A927AB07<br/>
	AA1CF5791A60D56F7AE6DA9BB1E7F01E<br/>
	05F472A9D926F4C8A0A372E1A7193998<br/>
	0D532484193B8B098D7EB14319CEFCD3<br/>
	E1A578A069B1910A25C95E2D9450C710<br/>
	2807236C2D905A0675878E530ED8B1F8<br/>
	847B5A145330229CE149788F5E221805<br/>
	D1A1166BEC950C75B65FDC7361DCDC63<br/>
	CCE8C8EE42FEAED68E9623185C3F7FE4</p>

<h3 id="id29">Hussar</h3>

<p>43B7D48D4B2AFD7CF8D4BD0804D62E8B<br/>
	617D588ECCD942F243FFA8CB13679D9C</p>

<h3 id="id30">FlyingDutchman</h3>

<p>5199EF9D086C97732D97EDDEF56591EC<br/>
	06C1D7BF234CE99BB14639C194B3B318</p>


<h3 id="id31">MITRE ATT&amp;CK</h3>

<img alt=" " loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/analytics/article_302856/302856_42.jpg"/>


<ol>
	<li>See the section &quot;Attribution.&quot;</li>
<li>See the section &quot;Lateral movement.&quot;</li>
<li>See the section &quot;Analyzing Calypso RAT malicious code.&quot;</li>
<li><a href="http://unit42.paloaltonetworks.com/unit42-threat-actors-target-government-belarus-using-cmstar-trojan/" target="_blank">unit42.paloaltonetworks.com/unit42-threat-actors-target-government-belarus-using-cmstar-trojan/</a></li>
<li><a href="http://nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/decoding-network-data-from-a-gh0st-rat-variant/" target="_blank">nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/decoding-network-data-from-a-gh0st-rat-variant/</a></li>
</ol>
</div></div></div></div><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"></div></div></div></div></section></div><section class="PageSection_section__GxaaG Card_section__QzdVO" id="contacts"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j AnyQuestions_container__KVhzR"><div class="AnyQuestions_heading__pSibU"><h1 class="AnyQuestions_title__ScrF1 Heading_base__MUnbH Heading_level_1__oOibP Heading_theme_light__level_1__7KeY7"><span>Get in touch</span></h1><div class="Text_base__riB2c Text_type_pL__A_h0d Text_theme_light__type_pL___Cab8"><span>Fill in the form and our specialists<br> will contact you shortly</span></div></div><div class="AnyQuestions_content__rdK_e"><div class="CardsSlider_root__4cbz_ AnyQuestions_radioGroupWrapper__WrSuy"><div class="CardsSlider_scrollArea__LArfW AnyQuestions_radioGroup__DBJB4"><label style="--cards-count:3" data-testid="form-tab-feedback" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF CardRadio_checked__7uYOJ AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" checked="" value="feedback"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>General<br> questions</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>We're happy to answer any questions you may have.</span></div></label><label style="--cards-count:3" data-testid="form-tab-partnership" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="partnership"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Partnership</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Join us in making the world a safer place.</span></div></label><label style="--cards-count:3" data-testid="form-tab-pilotApplication" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="pilotApplication"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Pilot<br> application</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Test drive our solutions with a customized pilot program.</span></div></label></div></div><form><div class="FeedbackForm_fields__NxBGh"><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Name" type="text" autoComplete="name" maxLength="250" name="fullName" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Phone number" type="text" autoComplete="tel" maxLength="20" name="phone" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Email" type="text" autoComplete="email" maxLength="250" name="email" value=""/></label></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><div class="Autocomplete_root__of0uL Select_root__qV3jk Select_mode_light__6i67a"><div class="Select_select__Wgg4m"><div class="SearchField_container__r8UBy"><input placeholder="Country" class="Input_input__dAKAo SearchField_input__OhP5T" id="headlessui-combobox-input-:Rmkdaf6:" role="combobox" type="text" aria-expanded="false" aria-autocomplete="list" data-headlessui-state=""/><button class="SearchField_icon__n277G SearchField_icon_second__tgr0q SearchField_icon_action__K_KOk" id="headlessui-combobox-button-:R16kdaf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""></button><button class="SearchField_icon__n277G SearchField_icon_grey__v_ngf" id="headlessui-combobox-button-:R1mkdaf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""><svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.7645 11.4123C12.0858 10.3117 12.9268 8.65406 12.9268 6.79999C12.9268 3.48628 10.2405 0.799988 6.92676 0.799988C3.61305 0.799988 0.926758 3.48628 0.926758 6.79999C0.926758 10.1137 3.61305 12.8 6.92676 12.8C8.3864 12.8 9.7243 12.2788 10.7645 11.4123ZM10.7645 11.4123L14.5522 15.2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg></button></div></div></div></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Textarea_container__HPtza Textarea_mode_light__E0Y92"><textarea id="comment" class="Textarea_textarea__MapxB" placeholder="How can we help?" maxLength="1000" name="comment"></textarea></label></div></div><div class="FeedbackForm_agrees__062n_"><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="consentsTerms" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent" target="_blank">my&nbsp;consent to&nbsp;the processing of&nbsp;my&nbsp;personal data</a> in&nbsp;accordance with the terms of&nbsp;the <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/privacy-policy" target="_blank">Privacy Notice</a></span></div></label><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="subscription" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I&nbsp;give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent-email" target="_blank">my&nbsp;consent to&nbsp;receive marketing and&nbsp;informational messages</a></span></div></label></div><div><div class="smart-captcha"></div><button type="submit" class="Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_light__W9pGX"><span><span>SEND</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></button></div></form></div></div></section><footer class="Footer_wrapper__igPy4"><div class="Footer_info__BLmy7"><div class="Footer_head__3m28S"><div class="Footer_copyright__JcWnj Text_base__riB2c Text_type_pM__mE14b"><span>Copyright <mark>©</mark> 2002–2025 Positive Technologies. All rights reserved.</span></div><h2 class="Footer_heading__mQ6QG Heading_base__MUnbH Heading_level_2__qXMBH"><span>Cybersecurity market leader</span></h2><div class="Footer_additionalLinks__KyguX"><a class="Footer_additionalLink__5ONRT" target="_blank" href="https://global.ptsecurity.com/policies/terms-of-use">Legal documents</a><a class="Footer_additionalLink__5ONRT" href="https://www.ptsecurity.com/choose-region/?return_url=/analytics/calypso-apt-2019">Change region</a></div></div><nav class="Footer_nav__LBYFW"><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>Products</span></div><a class="NavBlock_list_item__wGeXz" href="/products/network-attack-discovery"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT NAD</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/threat-intelligence-feeds"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Threat Intelligence Feeds</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/sandbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Sandbox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/maxpatrol-vm"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol VM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/siem"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol SIEM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ai"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Inspector</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/blackbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT BlackBox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/isim"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ISIM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/mp-o2"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol O2</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/edr"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol EDR</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/pt-af"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Firewall</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/cs"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Container Security</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Industrial Cybersecurity Suite</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>ANALYTICS</span></div><a class="NavBlock_list_item__wGeXz" href="/analytics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Analytics articles</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/knowledge-base"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Knowledge base</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ESC threat intelligence</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/threatscape"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Threatscape</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/hacker-groups"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Hacker groups</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>COMPANY</span></div><a class="NavBlock_list_item__wGeXz" href="/about"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>About us</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/clients"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Clients</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/contacts"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Contacts</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/pt-in-the-media"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT in the Media</span></div></a><a href="https://edu.ptsecurity.com/learning-space" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Education</span></div></a><a href="https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>YouTube</span></div></a><a href="https://www.linkedin.com/company/positivetechnologies/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>LinkedIn</span></div></a><a href="https://x.com/PTsecurity_EN" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Х</span></div></a><a href="https://www.tiktok.com/@positivetechnologies" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>TikTok</span></div></a><a href="https://vacancy.global.ptsecurity.com/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Vacancy</span></div></a></div></nav></div><div><img alt="" loading="lazy" width="1200" height="100" decoding="async" data-nimg="1" class="Footer_logo__cDBuS" style="color:transparent" src="https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg"/></div></footer></main></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"seo":{"title":"Calypso APT: new group attacking state institutions","description":"The PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers' C2 servers. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey."},"headerData":{"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_header_1bd424ccc4.svg","width":249,"height":22,"alt":""},"nav":[{"type":"product-menu","data":{"title":"Products","button":{"link":"/products","text":"Jump to section","targetBlank":false},"items":[{"description":"NDR system for detecting hidden threats on the perimeter and inside the network","link":"/products/network-attack-discovery","title":"PT NAD"},{"description":"Advanced sandbox with customizable virtual environments","link":"/products/sandbox","title":"PT Sandbox"},{"description":"Next-generation vulnerability management system","link":"/products/maxpatrol-vm","title":"MaxPatrol VM"},{"description":"Pinpoint threat detection solution for your infrastructure","link":"/products/siem","title":"MaxPatrol SIEM"},{"description":"Source-code analysis tool","link":"/products/ai","title":"PT Application Inspector"},{"description":"Dynamic application security testing tool","link":"/products/blackbox","title":"PT BlackBox"},{"description":"Cyberthreat detection and incident response in ICS","link":"/products/isim","title":"PT ISIM"},{"description":"Autopilot for result-driven cybersecurity","link":"/products/mp-o2/","title":"MaxPatrol O2"},{"description":"Protects your endpoints","link":"/products/edr","title":"MaxPatrol EDR"},{"description":"A web application firewall","link":"/products/pt-af","title":"PT Application Firewall"},{"description":"Innovative solution for the comprehensive protection","link":"/products/cs","title":"PT Container Security"},{"description":"The first comprehensive platform for cyberthreat detection and response in industrial systems","link":"/products/ics","title":"PT Industrial Cybersecurity Suite"},{"description":"Data feeds collected by Positive Technologies experts for threat detection","link":"/products/threat-intelligence-feeds","title":"PT Threat Intelligence Feeds"}]}},{"type":"product-menu","data":{"title":"Services","button":{"link":"/services","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/services/esc","title":"ESC"}]}},{"type":"product-menu","data":{"title":"Education","button":null,"items":[{"description":"","link":"https://edu.ptsecurity.com/learning-space","title":"Positive Education Cybersecurity Academy"},{"description":"","link":"https://edu.ptsecurity.com/pros-programs","title":"Cybersecurity programs for Professionals"},{"description":"","link":"https://edu.ptsecurity.com/c-level-programs","title":"Cybersecurity programs for Executives"},{"description":"","link":"https://edu.ptsecurity.com/product-courses","title":"Product courses"}]}},{"type":"link","data":{"link":"/about/news/","title":"News \u0026 events"}},{"type":"product-menu","data":{"title":"Analytics","button":{"link":"/analytics","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/analytics/knowledge-base","title":"Knowledge base"},{"description":"","link":"/analytics/pt-esc-threat-intelligence","title":"PT ESC threat intelligence"},{"description":"","link":"/analytics/threatscape","title":"Threatscape"},{"description":"","link":"/analytics/hacker-groups","title":"Hacker groups"}]}},{"type":"product-menu","data":{"title":"About us","button":{"link":"/about","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/about/clients","title":"Clients"},{"description":"","link":"/about/contacts","title":"Contacts"},{"description":"","link":"/about/pt-in-the-media","title":"PT in the Media"},{"description":"","link":"https://vacancy.global.ptsecurity.com/","title":"Vacancy"}]}}],"searchInputPlaceholder":"Search on ptsecurity.com"},"footerData":{"title":"Cybersecurity market leader","copyright":"Copyright \u003cmark\u003e©\u003c/mark\u003e 2002–2025 Positive Technologies. All rights reserved.","products":{"title":"Products","navItems":[{"name":"PT NAD","link":"/products/network-attack-discovery"},{"name":"PT Threat Intelligence Feeds","link":"/products/threat-intelligence-feeds"},{"name":"PT Sandbox","link":"/products/sandbox"},{"name":"MaxPatrol VM","link":"/products/maxpatrol-vm"},{"name":"MaxPatrol SIEM","link":"/products/siem"},{"name":"PT Application Inspector","link":"/products/ai"},{"name":"PT BlackBox","link":"/products/blackbox"},{"name":"PT ISIM","link":"/products/isim"},{"name":"MaxPatrol O2","link":"/products/mp-o2"},{"name":"MaxPatrol EDR","link":"/products/edr"},{"name":"PT Application Firewall","link":"/products/pt-af"},{"name":"PT Container Security","link":"/products/cs"},{"name":"PT Industrial Cybersecurity Suite","link":"/products/ics"}]},"company":{"title":"ANALYTICS","navItems":[{"name":"Analytics articles","link":"/analytics"},{"name":"Knowledge base","link":"/analytics/knowledge-base"},{"name":"PT ESC threat intelligence","link":"/analytics/pt-esc-threat-intelligence"},{"name":"Threatscape","link":"/analytics/threatscape"},{"name":"Hacker groups","link":"/analytics/hacker-groups"}]},"social":{"title":"COMPANY","navItems":[{"name":"About us","link":"/about"},{"name":"Clients","link":"/about/clients"},{"name":"Contacts","link":"/about/contacts"},{"name":"PT in the Media","link":"/about/pt-in-the-media"},{"name":"Education","link":"https://edu.ptsecurity.com/learning-space"},{"name":"YouTube","link":"https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ"},{"name":"LinkedIn","link":"https://www.linkedin.com/company/positivetechnologies/"},{"name":"Х","link":"https://x.com/PTsecurity_EN"},{"name":"TikTok","link":"https://www.tiktok.com/@positivetechnologies"},{"name":"Vacancy","link":"https://vacancy.global.ptsecurity.com/"}]},"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg","width":1200,"height":100,"alt":""},"legalDocsLink":{"id":61,"text":"Legal documents","link":"https://global.ptsecurity.com/policies/terms-of-use","targetBlank":true}},"analyticArticleData":{"titleTableOfContent":"Table of contents","content":[],"slug":"calypso-apt-2019","published":"2019-10-31","title":"Calypso APT: new group attacking state institutions","topic":"The PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers' C2 servers. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey.","titleOfHelpfulFiles":"","file":"https://www.ptsecurity.com/upload/corporate/ww-en/analytics/calypso-apt-2019-eng.pdf","image":null,"deprecatedDetailText":"\u003ch2\u003eContents\u003c/h2\u003e\r\n\u003cdiv class=\"article-nav\"\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id1\"\u003eCalypso APT\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id2\"\u003eInitial infection vector\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id3\"\u003eLateral movement\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id4\"\u003eAttribution\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id5\"\u003eAnalyzing Calypso RAT malicious code\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id6\"\u003eDropper\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id7\"\u003eInstallation BAT script\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id8\"\u003eShellcode x86: stager\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id9\"\u003eModules\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id10\"\u003eCommands\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id11\"\u003eNetwork code\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id12\"\u003eShellcode x64: stager (base backdoor) \u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id13\"\u003eModules\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id14\"\u003eCommands\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id15\"\u003eNetwork code\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id16\"\u003eOther options\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id17\"\u003eDropper-stager\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id18\"\u003eHussar\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id19\"\u003eInitialization\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id20\"\u003eModules\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id21\"\u003eFlyingDutchman\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id22\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id23\"\u003eIndicators of compromise\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id24\"\u003eNetwork\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id25\"\u003eFile indicators\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id26\"\u003eDroppers and payload\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id27\"\u003eDroppers with the same payload\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id28\"\u003ePayload without dropper\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id29\"\u003eHussar\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id30\"\u003eFlyingDutchman\u003c/a\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ca class=\"link link_article-nav anchorLink\" href=\"#id31\"\u003eMITRE ATT\u0026amp;CK\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"id1\"\u003eCalypso APT\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe PT Expert Security Center first took note of Calypso in March 2019 during threat hunting. Our specialists collected multiple samples of malware used by the group. They have also identified the organizations hit by the attackers, as well as the attackers\u0026#39; C2 servers.\u003c/p\u003e\r\n\r\n\u003cp\u003eOur data indicates that the group has been active since at least September 2016. The primary goal of the group is theft of confidential data. Main targets are governmental institutions in Brazil, India, Kazakhstan, Russia, Thailand, and Turkey.\u003c/p\u003e\r\n\r\n\u003cp\u003eOur data gives reason to believe that the APT group is of Asian origin\u003csup\u003e 1\u003c/sup\u003e.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id2\"\u003eInitial infection vector\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe attackers accessed the internal network of a compromised organization by using an ASPX web shell. They uploaded the web shell by exploiting a vulnerability or, alternately, guessing default credentials for remote access. We managed to obtain live traffic between the attackers and the web shell.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_1.jpg\" alt=\"Figure 1. Part of the recorded traffic\"\u003e\r\n    \u003cfigcaption\u003eFigure 1. Part of the recorded traffic\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe traffic indicates the attackers connected from IP address 46.166.129.241. That host contains domain tv.teldcomtv.com, the C2 server for the group\u0026#39;s trojan. Therefore the hackers use C2 servers not only to control malware, but also to access hosts on compromised infrastructures.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe attackers used the web shell to upload utilities\u003csup\u003e 2\u003c/sup\u003e and malware,\u003csup\u003e 3\u003c/sup\u003e execute commands, and distribute malware inside the network. Examples of commands from the traffic are demonstrated in the following screenshot.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_2.jpg\" alt=\"Figure 2. Commands sent to the web shell\"\u003e\r\n    \u003cfigcaption\u003eFigure 2. Commands sent to the web shell\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id3\"\u003eLateral movement\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe group performed lateral movement by using the following publicly available utilities and exploits:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eSysInternals\u003c/li\u003e\r\n\t\u003cli\u003eNbtscan\u003c/li\u003e\r\n\t\u003cli\u003eMimikatz\u003c/li\u003e\r\n\t\u003cli\u003eZXPortMap\u003c/li\u003e\r\n\t\u003cli\u003eTCP Port Scanner\u003c/li\u003e\r\n\t\u003cli\u003eNetcat\u003c/li\u003e\r\n\t\u003cli\u003eQuarksPwDump\u003c/li\u003e\r\n\t\u003cli\u003eWmiExec\u003c/li\u003e\r\n\t\u003cli\u003eEarthWorm\u003c/li\u003e\r\n\t\u003cli\u003eOS_Check_445\u003c/li\u003e\r\n\t\u003cli\u003eDoublePulsar\u003c/li\u003e\r\n\t\u003cli\u003eEternalBlue\u003c/li\u003e\r\n\t\u003cli\u003eEternalRomance\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eOn compromised computers, the group stored malware and utilities in either C:\\RECYCLER or C:\\ProgramData. The first option was used only on computers with Windows XP or Windows Server 2003 with NTFS on drive C.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe attackers spread within the network either by exploiting vulnerability MS17-010 or by using stolen credentials. In one instance, 13 days after the attackers got inside the network, they used DCSync and Mimikatz to obtain the Kerberos ticket of the domain administrator, \u0026quot;passing the ticket\u0026quot; to infect more computers.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_3.jpg\" alt=\"Figure 3. Obtaining account data via DCSync\"\u003e\r\n    \u003cfigcaption\u003eFigure 3. Obtaining account data via DCSync\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eUse of such utilities is common for many APT groups. Most of those utilities are legitimate ones used by network administrators. This allows the attackers to stay undetected longer.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id4\"\u003eAttribution\u003c/h2\u003e\r\n\r\n\u003cp\u003eIn one attack, the group used Calypso RAT, PlugX, and the Byeby trojan. Calypso RAT is malware unique to the group and will be analyzed in detail in the text that follows.\u003c/p\u003e\r\n\r\n\u003cp\u003ePlugX has traditionally been used by many APT groups of Asian origin. Use of PlugX in itself does not point to any particular group, but is overall consistent with an Asian origin.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe Byeby trojan\u003csup\u003e 4\u003c/sup\u003e was used in the SongXY malware campaign back in 2017. The version used now is modified from the original. The group involved in the original campaign is also of Asian origin. It performed targeted attacks on defense and government-related targets in Russia and the CIS countries. However, we did not find any clear-cut connection between the two campaigns.\u003c/p\u003e\r\n\r\n\u003cp\u003eWhen we analyzed the traffic between the attackers\u0026#39; server and the web shell, we found that the attackers used a non-anonymous proxy server. The X-Forwarded-For header passed the attackers\u0026#39; IP address (36.44.74.47). This address would seem to be genuine (more precisely, the first address in a chain of proxy servers).\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_4.jpg\" alt=\"Figure 4. Headers of requests to the web shell\"\u003e\r\n    \u003cfigcaption\u003eFigure 4. Headers of requests to the web shell\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe IP address belongs to China Telecom. We believe the attackers could have been careless and set up the proxy server incorrectly, thus disclosing their real IP address. This is the first piece of evidence supporting the Asian origins of the group.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_5.jpg\" alt=\"Figure 5. Information on the discovered IP address\"\u003e\r\n    \u003cfigcaption\u003eFigure 5. Information on the discovered IP address\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe attackers also left behind a number of system artifacts, plus traces in utility configurations and auxiliary scripts. These are also indicative of the group\u0026#39;s origin.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor instance, one of the DoublePulsar configuration files contained external IP address 103.224.82.47, presumably for testing. But all other configuration files contained internal addresses.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_6.jpg\" alt=\"Figure 6. IP address found in the DoublePulsar configuration\"\u003e\r\n    \u003cfigcaption\u003eFigure 6. IP address found in the DoublePulsar configuration\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThis IP address belongs to a Chinese provider, like the one before, and it was most likely left there due to the attackers\u0026#39; carelessness. This constitutes additional evidence of the group\u0026#39;s Asian origins.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_7.jpg\" alt=\"Figure 7. Information on the discovered IP address\"\u003e\r\n    \u003cfigcaption\u003eFigure 7. Information on the discovered IP address\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eWe also found BAT scripts that launched ZXPortMap and EarthWorm for port forwarding. Inside we found network indicators www.sultris.com and 46.105.227.110.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_8.jpg\" alt=\"Figure 8. Network indicators found in the BAT scripts\"\u003e\r\n    \u003cfigcaption\u003eFigure 8. Network indicators found in the BAT scripts\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe domain in question was used for more than just tunneling: it also served as C2 server for the PlugX malware we found on the compromised system. As already mentioned, PlugX is traditionally used by groups of Asian origin, which constitutes yet more evidence.\u003c/p\u003e\r\n\r\n\u003cp\u003eTherefore we can say that the malware and network infrastructure used all point to the group having an Asian origin.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id5\"\u003eAnalyzing Calypso RAT malicious code\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe structure of the malware and the process of installing it on the hosts of a compromised network look as follows:\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_9.jpg\" alt=\"Figure 9. Malware structure and installation process\"\u003e\r\n    \u003cfigcaption\u003eFigure 9. Malware structure and installation process\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id6\"\u003eDropper\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe dropper extracts the payload as an installation BAT script and CAB archive, and saves it to disk. The payload inside the dropper has a magic header that the dropper searches for. The following figure shows an example of the payload structure.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_10.jpg\" alt=\"Figure 10. Structure of the payload hard-coded in the dropper\"\u003e\r\n    \u003cfigcaption\u003eFigure 10. Structure of the payload hard-coded in the dropper\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThe dropper encrypts and decrypts data with a self-developed algorithm that uses CRC32 as a pseudorandom number generator (PRNG). The algorithm performs arithmetic (addition and subtraction) between the generated data and the data that needs to be encrypted or decrypted.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_11.jpg\" alt=\"Figure 11. Dropper with original encryption and decryption algorithm\"\u003e\r\n    \u003cfigcaption\u003eFigure 11. Dropper with original encryption and decryption algorithm\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNow decrypted, the payload is saved to disk at %ALLUSERSPROFILE;\\TMP_%d%d, where the last two numbers are replaced by random numbers returned by the rand() function. Depending on the configuration, the CAB archive contains one of three possibilities: a DLL and encrypted shellcode, a DLL with encoded loader in the resources, or an EXE file. We were unable to detect any instances of the last variant.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id7\"\u003eInstallation BAT script\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe BAT script is encoded by substitution from a preset dictionary of characters; this dictionary is initialized in a variable in the installation script.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_12.jpg\" alt=\"Figure 12. Example of installation script obfuscation\"\u003e\r\n    \u003cfigcaption\u003eFigure 12. Example of installation script obfuscation\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn the decoded script, we can see comments hinting at the main functions of the script:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eREM Goto temp directory \u0026amp; extract file (go to TEMP directory and extract files there)\u003c/li\u003e\r\n\t\u003cli\u003eREM Uninstall old version (uninstall the old version)\u003c/li\u003e\r\n\t\u003cli\u003eREM Copy file (copy file)\u003c/li\u003e\r\n\t\u003cli\u003eREM Run pre-install script (run the installation BAT script)\u003c/li\u003e\r\n\t\u003cli\u003eREM Create service (create a service launching the malware at system startup)\u003c/li\u003e\r\n\t\u003cli\u003eREM Create Registry Run (create value in the registry branch for autostart)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eAt the beginning of each script we can see a set of variables. The script uses these variables to save files, modify services, and modify registry keys.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_13.jpg\" alt=\"Figure 13. Initializing variables in deobfuscated script\"\u003e\r\n    \u003cfigcaption\u003eFigure 13. Initializing variables in deobfuscated script\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn one of the oldest samples, compiled in 2016, we found a script containing comments for how to configure each variable.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_14.jpg\" alt=\"Figure 14. Early version of the script with comments\"\u003e\r\n    \u003cfigcaption\u003eFigure 14. Early version of the script with comments\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id8\"\u003eShellcode x86: stager\u003c/h2\u003e\r\n\r\n\u003cp\u003eIn most of the analyzed samples, the dropper was configured to execute shellcode. The dropper saved the DLL and encrypted shellcode to disk. The shellcode name was always identical to that of the DLL, but had the extension .dll.crt. The shellcode is encrypted with the same algorithm as the payload in the dropper. The shellcode acts as a stager providing the interface for communicating with C2 and for downloading modules. It can communicate with C2 via TCP and SSL. SSL is implemented via the mbed_tls library.\u003c/p\u003e\r\n\r\n\u003cp\u003eInitial analysis of the shellcode revealed that, in addition to dynamically searching for API functions, it runs one more operation that repeats the process of PE file address relocation. The structure of the relocation table is also identical to that found in the PE file.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_15.jpg\" alt=\"Figure 15. Shellcode relocations\"\u003e\r\n    \u003cfigcaption\u003eFigure 15. Shellcode relocations\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eSince the process of shellcode address relocation repeats that of the PE file, we can assume that initially the malware is compiled into a PE file, and then the builder turns it into shellcode. Debugging information found inside the shellcode supports that assumption.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_16.jpg\" alt=\"Figure 16. Debugging information inside the shellcode\"\u003e\r\n    \u003cfigcaption\u003eFigure 16. Debugging information inside the shellcode\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eAPI functions are searched for dynamically and addresses are relocated, after which the configuration hard-coded inside the shellcode is parsed. The configuration contains information about the C2 server address, protocol used, and connection type.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_17.jpg\" alt=\"Figure 17. Example of shellcode configuration\"\u003e\r\n    \u003cfigcaption\u003eFigure 17. Example of shellcode configuration\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNext the shellcode creates a connection to C2. A random packet header is created and sent to C2. In response the malware receives a network key, saves it, and then uses it every time when communicating with C2. Then the information about the infected computer is collected and sent to C2.\u003c/p\u003e\r\n\r\n\u003cp\u003eNext three threads are launched. One is a heartbeat sending an empty packet to C2 every 54 seconds. The other processes and executes commands from C2. As for the third thread, we could not figure out its purpose, because the lines implementing its functionality were removed from the code. All we can tell is that this thread was supposed to \u0026quot;wake up\u0026quot; every 54 seconds, just like the first one.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id9\"\u003eModules\u003c/h2\u003e\r\n\r\n\u003cp\u003eWe have not found any modules so far. But we can understand their functionality by analyzing the code responsible for communication between the shellcode and the modules. Each module is shellcode which is given control over the zero offset of the address. Each module exists in its own separate container. The container is a process with loaded module inside. By default, the process is svchost.exe. When a container is created, it is injected with a small shellcode that causes endless sleep. This is also hard-coded in the main shellcode, and more specifically in JustWait. pdb, most likely.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe module is placed inside with an ordinary writeprocess and is launched either with NtCreateThreadEx or, on pre-Vista operating systems, CreateRemoteThread.\u003c/p\u003e\r\n\r\n\u003cp\u003eTwo pipes are created for each module. One is for transmitting the data from the module to C2; the other for receiving data from C2. Quite likely the modules do not have their own network code and instead use the pipes to communicate with external C2 through the main shellcode.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_18.jpg\" alt=\"Figure 18. Creating pipes for modules\"\u003e\r\n    \u003cfigcaption\u003eFigure 18. Creating pipes for modules\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eEach module has a unique ID assigned by C2. Containers are launched in different ways. A container can be launched in a specific session open in the OS or in the same session as the stager. In any particular session, the container is launched by getting the handle for the session token of a logged-in user, and then launching the process as that user.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_19.jpg\" alt=\"Figure 19. Creating container process in a different session\"\u003e\r\n    \u003cfigcaption\u003eFigure 19. Creating container process in a different session\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id10\"\u003eCommands\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe malware we studied can process 12 commands. All of them involve modules in one way or another. Here is a list of all IDs of commands found in the malware, along with those that the malware itself sends in various situations.\u003c/p\u003e\r\n\r\n\u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_20.jpg\" alt=\" \"\u003e\r\n\r\n\u003ch2 id=\"id11\"\u003eNetwork code\u003c/h2\u003e\r\n\r\n\u003cp\u003eNetwork communication is initialized after the network key is received from C2. To do that, the malware sends a random sequence of 12 bytes to C2. In response the malware also expects 12 bytes, the zero offset of which must contain the same value (_DWORD) as prior to sending. If the check is successful, four bytes at offset 8 are taken from the response and decrypted with RC4. The key is four bytes sent previously, also located at offset 8. This result is the network key. The key is saved and then used to send data.\u003c/p\u003e\r\n\r\n\u003cp\u003eAll transmitted packets have the following structure.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cdiv class=\"code\"\u003e\r\nstruct Packet{\r\n    struct PacketHeader{\r\n    _ DWORD key;\r\n    _ WORD cmdId;\r\n    _ WORD szPacketPayload;\r\n    _ DWORD moduleId;\r\n};\r\n    _ BYTE [max 0xF000] packetPayload;\r\n};\r\n\u003c/div\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eA random four-byte key is generated for each packet. It is later used to encrypt part of the header, starting with the cmdld field. The same key is used to encrypt the packet payload. Encryption uses the RC4 algorithm. The key itself is encrypted by XOR with the network key and saved to the corresponding field of the packet header.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id12\"\u003eShellcode x64: stager (base backdoor)\u003c/h2\u003e\r\n\r\n\u003cp\u003eThis shellcode is very similar to the previous one, but it deserves a separate description because of differences in its network code and method of launching modules. This shellcode has basic functions for file system interaction which are not available in the shellcode described earlier. Also the configuration format, network code, and network addresses used as C2 by this shellcode are similar to code from a 2018 blog post by NCC Group about a Gh0st RAT variant. However, we did not find a connection to Gh0st RAT.\u003c/p\u003e\r\n\r\n\u003cp\u003eThis variant of the shellcode has only one communication channel, via SSL. The shellcode implements it with two legitimate libraries, libeay32.dll and ssleay32.dll, hard-coded in the shellcode itself.\u003c/p\u003e\r\n\r\n\u003cp\u003eFirst the shellcode performs a dynamic search for API functions and loads SSL libraries. The libraries are not saved to disk; they are read from the shellcode and mapped into memory. Next the malware searches the mapped image for the functions it needs to operate.\u003c/p\u003e\r\n\r\n\u003cp\u003eThen it parses the configuration string, which is also hard-coded in the shellcode. The configuration includes information on addresses of C2 servers and schedule for malware operation.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_22.jpg\" alt=\"Figure 20. Sample of configuration string\"\u003e\r\n    \u003cfigcaption\u003eFigure 20. Sample of configuration string\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eAfter that the malware starts its main operating cycle. It checks if the current time matches the malware operational time. If not, the malware sleeps for about 7 minutes and checks again. This happens until the current time is the operational time, and only then does the malware resume operation. Figure 20 demonstrates an example in which the malware remains active at all times on all days of the week.\u003c/p\u003e\r\n\r\n\u003cp\u003eWhen the operational time comes, the malware goes down the list of C2 servers specified in the configuration and tries to connect. The malware subsequently interacts with whichever of the C2 servers it is able to successfully connect to first.\u003c/p\u003e\r\n\r\n\u003cp\u003eThen the malware sends the information on the infected computer (such as computer name, current date, OS version, 32-bit vs. 64-bit OS and CPU, and IP addresses on network interfaces and their MAC addresses). After the information on the infected computer is sent, the malware expects a response from C2. If C2 returns the relevant code, sending is deemed successful and the malware proceeds. If not, the malware goes back to sequentially checking C2 addresses. Next it starts processing incoming commands from C2.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id13\"\u003eModules\u003c/h2\u003e\r\n\r\n\u003cp\u003eEach module is a valid MZPE file mapped in the address space of the same process as the shellcode. Also the module can export the GetClassObject symbol, which receives control when run (if required).\u003c/p\u003e\r\n\r\n\u003cp\u003eEach module has its own descriptor created by a command from C2. The C2 server sends a byte array (0x15) describing the module. The array contains information on the module: whether the module needs to be launched via export, module type (in other words, whether it needs pipes for communicating with C2), module size, entry point RVA (used if there is no flag for launching via export), and module data decryption key. The key is, by and large, the data used to format the actual key.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_23.jpg\" alt=\"Figure 21. Module decryption\"\u003e\r\n    \u003cfigcaption\u003eFigure 21. Module decryption\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eWe should also point out that decryption takes place only if modKey is not equal to the 7AC9h constant hard-coded in the shellcode. This check affects only the decryption process. If modKey does equal the constant, the malware will immediately start loading the module. This means the module is not encrypted.\u003c/p\u003e\r\n\r\n\u003cp\u003eEach module is launched in a separate thread created specially for that purpose. Launching with pipes looks as follows:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe malware creates a thread for the module, starts mapping the module, and gives it control inside the newly created thread.\u003c/li\u003e\r\n\t\u003cli\u003eThe malware creates a new connection to the current working C2.\u003c/li\u003e\r\n\t\u003cli\u003eThe malware creates a pipe with the name derived from the following format string: \\\\.\\ pipe\\windows@#%02XMon (%02X is replaced by a value that is received from С2 at the same time as the command for launching the module).\u003c/li\u003e\r\n\t\u003cli\u003eThe malware launches two threads passing data from the pipe to C2 and vice versa, using the connection created during the previous step. Two more pipes, \\\\.\\pipe\\windows@#%02Xfir and \\\\.\\pipe\\windows@#%02Xsec, are created inside the threads. The pipe ending in \u0026quot;fir\u0026quot; is used to pass data from the module to C2. The pipe ending in \u0026quot;sec\u0026quot; is used to pass data and commands from C2 to the modules.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eThe second thread processing the commands from C2 to the modules has its own handler. This is described in more details in the Commands section. For now we can only say that one of the commands can start a local asynchronous TCP server. That server will accept data from whoever connects to it, send it to C2, and forward it back from C2. It binds to 127.0.0.1 at whichever port it finds available, starting from 5000 and trying possible ports one by one.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id14\"\u003eCommands\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe following is a list of IDs for commands the malware can receive, along with commands the malware itself sends in various situations.\u003c/p\u003e\r\n\r\n\u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_24.jpg\" alt=\" \"\u003e\r\n\r\n\u003ch2 id=\"id15\"\u003eNetwork code\u003c/h2\u003e\r\n\r\n\u003cp\u003eEach packet has the following structure:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cdiv class=\"code\"\u003e\r\nStruct Packet{\r\n        Struct Header{\r\n        _ DWORD rand _ k1;\r\n    _ DWORD rand _ k2;\r\n    _ DWORD rand    _ k3;\r\n    _ DWORD szPaylaod;\r\n    _ DWORD protoConst;\r\n    _ DWORD packetId;\r\n    _ DWORD unk1;\r\n    _ DWORD packetKey;\r\n};\r\n    _ BYTE [max 0x2000] packetPayload;\r\n};\r\n\u003c/div\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eEach packet has a unique key calculated as szPayload + GetTickCount() % hardcodedConst. This key is saved in the corresponding packetKey header field. It is used to generate another key for encrypting the packet header with RC4 (encryption will not occur without the packetKey field). RC4 key generation is demonstrated in the following figure.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_26.jpg\" alt=\"Figure 22. Generating RC4 key for the header\"\u003e\r\n    \u003cfigcaption\u003eFigure 22. Generating RC4 key for the header\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThen yet another RC4 key is generated from the encrypted fields szPayload, packetId, protoConst, and rand_k3. This key is used to encrypt the packet payload.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_27.jpg\" alt=\"Figure 23. Generating RC4 key for the packet payload\"\u003e\r\n    \u003cfigcaption\u003eFigure 23. Generating RC4 key for the packet payload\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNext the shellcode forms the HTTP headers and the created packet is sent to C2. In addition, each packet gets its own number, indicated in the URL. Modules may pass their ID, which is used to look up the connection established during module launch. Module ID 0 is reserved for the main connection of the stager.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_28.jpg\" alt=\"Figure 24. Forming HTTP headers\"\u003e\r\n    \u003cfigcaption\u003eFigure 24. Forming HTTP headers\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id16\"\u003eOther options\u003c/h2\u003e\r\n\r\n\u003cp\u003eAs we noted, the dropper may be configured to launch not just shellcode, but executable files too. We found the same dropper-stager but with different payloads: Hussar and FlyingDutchman.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id17\"\u003eDropper-stager\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe main tasks of this dropper are unpacking and mapping the payload, which is encoded and stored in resources. The dropper also stores encoded configuration data and passes it as a parameter to the payload.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_29.jpg\" alt=\"Figure 25. Unpacking the payload\"\u003e\r\n    \u003cfigcaption\u003eFigure 25. Unpacking the payload\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003ch2 id=\"id18\"\u003eHussar\u003c/h2\u003e\r\n\r\n\u003cp\u003eIn essence Hussar is similar to the shellcodes described earlier. It allows loading modules and collecting basic information about the computer. It can also add itself to the list of authorized applications in Windows Firewall.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id19\"\u003eInitialization\u003c/h2\u003e\r\n\r\n\u003cp\u003eTo start, the malware parses the configuration provided to it by the loader.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_30.jpg\" alt=\"Figure 26. Configuration sample\"\u003e\r\n    \u003cfigcaption\u003eFigure 26. Configuration sample\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eConfiguration structure is as follows:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cdiv class=\"code\"\u003e\r\nStruct RawConfig{\r\n        _ DWORD protocolId;\r\n        _ BYTE c2Strings [0x100];\r\n};\r\n\u003c/div\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eThe protocolId field indicates the protocol to be used for communicating with C2. There are a total of three possibilities:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eIf protocolId equals 1, a TCP-based protocol will be used.\u003c/li\u003e\r\n\t\u003cli\u003eIf protocolId equals 2, the protocol will be HTTP-based.\u003c/li\u003e\r\n\t\u003cli\u003eIf protocolId equals 3, it will be HTTPS-based.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eThe time stamp is calculated from the registry from the key SOFTWARE\\Microsoft\\Windows\\ CurrentVersion\\Telephony (Perf0 value). If reading the time stamp is impossible, \u0026quot;temp\u0026quot; is added to the computer identifier.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_32.jpg\" alt=\"Figure 27. Generating computer ID\"\u003e\r\n    \u003cfigcaption\u003eFigure 27. Generating computer ID\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eNext Hussar creates a window it will use for processing incoming messages.\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_33.jpg\" alt=\"Figure 28. Creating dispatcher window\"\u003e\r\n    \u003cfigcaption\u003eFigure 28. Creating dispatcher window\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eThen the malware adds itself to the list of authorized applications in Windows Firewall, using the INetFwMgr COM interface.\u003c/p\u003e\r\n\r\n\u003cp\u003eTo complete initialization, Hussar creates a thread which connects to C2 and periodically polls for commands. The function running in the thread uses the WSAAsyncSelect API to notify the window that actions can be performed with the created connection (socket is \u0026quot;ready for reading,\u0026quot; \u0026quot;connected,\u0026quot; or \u0026quot;closed\u0026quot;).\u003c/p\u003e\r\n\r\n\u003cfigure\u003e\r\n    \u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_34.jpg\" alt=\"Figure 29. Communication between the open socket and the window\"\u003e\r\n    \u003cfigcaption\u003eFigure 29. Communication between the open socket and the window\u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\r\n\u003cp\u003eIn general, for transmitting commands, the malware uses the window and Windows messaging mechanism. The window handle is passed to the modules, and the dispatcher has branches not used by the stager, so we can assume that the modules can use the window for communication with C2.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id20\"\u003eModules\u003c/h2\u003e\r\n\r\n\u003cp\u003eEach module is an MZPE file loaded into the same address space as the stager. The module must export the GetModuleInfo function, which is called by the stager after image mapping.\u003c/p\u003e\r\n\r\n\u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_35.jpg\" alt=\" \"\u003e\r\n\r\n\u003ch2 id=”21”\u003eFlyingDutchman\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe payload provides remote access to the infected computer. It includes functions such as screenshot capture, remote shell, and file system operations. It also allows managing system processes and services. It consists of several modules.\u003c/p\u003e\r\n\r\n\u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_36.jpg\" alt=\" \"\u003e\r\n\r\n\u003ch2 id=\"id22\"\u003eConclusion\u003c/h2\u003e\r\n\r\n\u003cp\u003eThe group has several successful hacks to its credit, but still makes mistakes allowing us to guess its origins. All data given here suggests that the group originates from Asia and uses malware not previously described by anyone. The Byeby trojan links the group to SongXY, encountered by us previously, which was most active in 2017.\u003c/p\u003e\r\n\r\n\u003cp\u003eWe keep monitoring the activities of Calypso closely and expect the group will attack again.\u003c/p\u003e\r\n\r\n\u003ch2 id=\"id23\"\u003eIndicators of compromise\u003c/h2\u003e\r\n\r\n\u003ch3 id=\"id24\"\u003eNetwork\u003c/h3\u003e\r\n\r\n\u003cp\u003e23.227.207.137\u003c/p\u003e\r\n\r\n\u003cp\u003e45.63.96.120\u003c/p\u003e\r\n\r\n\u003cp\u003e45.63.114.127\u003c/p\u003e\r\n\r\n\u003cp\u003er01.etheraval.com\u003c/p\u003e\r\n\r\n\u003cp\u003etc.streleases.com\u003c/p\u003e\r\n\r\n\u003cp\u003etv.teldcomtv.com\u003c/p\u003e\r\n\r\n\u003cp\u003ekrgod.qqm8.com\u003c/p\u003e\r\n\r\n\u003ch3 id=\"id25\"\u003eFile indicators\u003c/h3\u003e\r\n\r\n\u003ch3 id=\"id26\"\u003eDroppers and payload\u003c/h3\u003e\r\n\r\n\u003cp\u003eC9C39045FA14E94618DD631044053824\u003cbr\u003e\r\n\tE24A62D9826869BC4817366800A8805C\u003cbr\u003e\r\n\tF0F5DA1A4490326AA0FC8B54C2D3912D\u003cbr\u003e\r\n\tCB914FC73C67B325F948DD1BF97F5733\u003cbr\u003e\r\n\t6347E42F49A86AFF2DEA7C8BF455A52A\u003cbr\u003e\r\n\t0171E3C76345FEE31B90C44570C75BAD\u003cbr\u003e\r\n\t17E05041730DCD0732E5B296DB16D757\u003cbr\u003e\r\n\t69322703B8EF9D490A20033684C28493\u003cbr\u003e\r\n\t22953384F3D15625D36583C524F3480A\u003cbr\u003e\r\n\t1E765FED294A7AD082169819C95D2C85\u003cbr\u003e\r\n\tC84DF4B2CD0D3E7729210F15112DA7AC\u003cbr\u003e\r\n\tACAAB4AA4E1EA7CE2F5D044F198F0095\u003c/p\u003e\r\n\r\n\u003ch3 id=\"id27\"\u003eDroppers with the same payload\u003c/h3\u003e\r\n\r\n\u003cp\u003e85CE60B365EDF4BEEBBDD85CC971E84D\u003cbr\u003e\r\n\t1ED72C14C4AAB3B66E830E16EF90B37B\u003cbr\u003e\r\n\tCB914FC73C67B325F948DD1BF97F5733\u003c/p\u003e\r\n\r\n\u003ch3 id=\"id28\"\u003ePayload without dropper\u003c/h3\u003e\r\n\r\n\u003cp\u003eE3E61F30F8A39CD7AA25149D0F8AF5EF\u003cbr\u003e\r\n\t974298EB7E2ADFA019CAE4D1A927AB07\u003cbr\u003e\r\n\tAA1CF5791A60D56F7AE6DA9BB1E7F01E\u003cbr\u003e\r\n\t05F472A9D926F4C8A0A372E1A7193998\u003cbr\u003e\r\n\t0D532484193B8B098D7EB14319CEFCD3\u003cbr\u003e\r\n\tE1A578A069B1910A25C95E2D9450C710\u003cbr\u003e\r\n\t2807236C2D905A0675878E530ED8B1F8\u003cbr\u003e\r\n\t847B5A145330229CE149788F5E221805\u003cbr\u003e\r\n\tD1A1166BEC950C75B65FDC7361DCDC63\u003cbr\u003e\r\n\tCCE8C8EE42FEAED68E9623185C3F7FE4\u003c/p\u003e\r\n\r\n\u003ch3 id=\"id29\"\u003eHussar\u003c/h3\u003e\r\n\r\n\u003cp\u003e43B7D48D4B2AFD7CF8D4BD0804D62E8B\u003cbr\u003e\r\n\t617D588ECCD942F243FFA8CB13679D9C\u003c/p\u003e\r\n\r\n\u003ch3 id=\"id30\"\u003eFlyingDutchman\u003c/h3\u003e\r\n\r\n\u003cp\u003e5199EF9D086C97732D97EDDEF56591EC\u003cbr\u003e\r\n\t06C1D7BF234CE99BB14639C194B3B318\u003c/p\u003e\r\n\r\n\r\n\u003ch3 id=\"id31\"\u003eMITRE ATT\u0026amp;CK\u003c/h3\u003e\r\n\r\n\u003cimg src=\"/upload/corporate/ww-en/images/analytics/article_302856/302856_42.jpg\" alt=\" \"\u003e\r\n\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eSee the section \u0026quot;Attribution.\u0026quot;\u003c/li\u003e\r\n\u003cli\u003eSee the section \u0026quot;Lateral movement.\u0026quot;\u003c/li\u003e\r\n\u003cli\u003eSee the section \u0026quot;Analyzing Calypso RAT malicious code.\u0026quot;\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://unit42.paloaltonetworks.com/unit42-threat-actors-target-government-belarus-using-cmstar-trojan/\" target=\"_blank\"\u003eunit42.paloaltonetworks.com/unit42-threat-actors-target-government-belarus-using-cmstar-trojan/\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/decoding-network-data-from-a-gh0st-rat-variant/\" target=\"_blank\"\u003enccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/decoding-network-data-from-a-gh0st-rat-variant/\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","helpfulFiles":[]},"anyQuestionsData":{"selectProductOptions":[{"value":"network-attack-discovery","label":"PT NAD","crmId":"3212ea27-d047-42f9-9da3-9ef5233634bb"},{"value":"threat-intelligence-feeds","label":"PT Threat Intelligence Feeds","crmId":""},{"value":"sandbox","label":"PT Sandbox","crmId":"5addae27-2762-4a89-8b58-e247ab1e71dc"},{"value":"maxpatrol-vm","label":"MaxPatrol VM","crmId":"e5ffe330-69bf-4344-b0b0-c228de0f6f83"},{"value":"siem","label":"MaxPatrol SIEM","crmId":"0c54a201-09a7-4dc9-b3ca-1ce61715388b"},{"value":"ai","label":"PT Application Inspector","crmId":"4c2c50e6-2b8c-4c1e-a2da-f6423ece496b"},{"value":"blackbox","label":"PT BlackBox","crmId":"081eb4e2-54c2-4ce5-b171-d7dcaecc1c1f"},{"value":"isim","label":"PT ISIM","crmId":"67a72950-2d9c-47a1-8bb8-49540356da8f"},{"value":"mp-o2","label":"MaxPatrol O2","crmId":"29563721-4ec7-4e5b-8a48-f3674ab70749"},{"value":"edr","label":"MaxPatrol EDR","crmId":"c667eb61-0b7a-457c-991c-43b83504a7ed"},{"value":"pt-af","label":"PT Application Firewall","crmId":"b6b16deb-0ceb-4318-b947-fd238d7a9935"},{"value":"cs","label":"PT Container Security","crmId":"2df38b89-5d1f-4a0d-8be4-76ea9f8d2e30"},{"value":"ics","label":"PT Industrial Cybersecurity Suite","crmId":""}],"title":"Get in touch","description":"Fill in the form and our specialists\u003cbr/\u003e will contact you shortly","feedback":{"title":"General\u003cbr/\u003e questions","description":"We're happy to answer any questions you may have.","fieldName":"Name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you soon."},"partnership":{"title":"Partnership","description":"Join us in making the world a safer place.","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldAddress":"Address","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."},"pilotApplication":{"title":"Pilot\u003cbr/\u003e application","description":"Test drive our solutions with a customized pilot program.","fieldProduct":"Select a product","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."}},"_sentryTraceData":"1ca28f0bd4ed4b8ab297625e68416b84-91c532dcb98360a7-1","_sentryBaggage":"sentry-environment=production,sentry-release=39FkjQp2g8LNEtWCuedET,sentry-public_key=98e9d1bba200933ad4e97a71f2de0390,sentry-trace_id=1ca28f0bd4ed4b8ab297625e68416b84,sentry-sample_rate=1,sentry-transaction=%2Fanalytics%2F%5Bslug%5D,sentry-sampled=true"},"__N_SSP":true},"page":"/analytics/[slug]","query":{"slug":"calypso-apt-2019"},"buildId":"39FkjQp2g8LNEtWCuedET","isFallback":false,"gssp":true,"locale":"en","locales":["en","es","pt"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>