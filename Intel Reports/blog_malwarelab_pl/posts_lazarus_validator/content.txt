<!DOCTYPE html>
<html>
<head>
    
        
<meta charset="utf-8">
<meta name="HandheldFriendly" content="True">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer-when-downgrade">

<title>In depth analysis of  Lazarus validator  - MalwareLab.pl Research Notes</title>
<meta name="description" content="">

<link rel="alternate" type="application/rss+xml" title="RSS" href="https://blog.malwarelab.pl/rss/">

<link rel="icon" type="image/x-icon" href="https://blog.malwarelab.pl/favicon.ico">
<link rel="apple-touch-icon-precomposed" href="https://blog.malwarelab.pl/favicon.png">

<link rel="stylesheet" href="https://blog.malwarelab.pl/static/css/style.css?rnd=1593086112" />

<meta property="og:title" content="In depth analysis of  Lazarus validator" />
<meta property="og:description" content="Intro Few days ago we found interesting Word document impersonating Lockheed Martin1. Some time later we realized that this sample was a part of larger and older campaign conducted probably against various military contractor conducting businesses with South Korea and that this campaign was already described, however w couldn&rsquo;t find any in depth analysis of a validator used by Lazarus so here it is.
Infection vector There is already a very good analysis done by StrangerealIntel, including an intelligence brief explaining potential reason for this campaign, so we wont into much details here." />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://blog.malwarelab.pl/posts/lazarus_validator/" />
<meta property="article:published_time" content="2020-05-15T16:17:05+02:00" />
<meta property="article:modified_time" content="2020-05-15T16:17:05+02:00" />

<meta name="twitter:card" content="summary"/>
<meta name="twitter:title" content="In depth analysis of  Lazarus validator"/>
<meta name="twitter:description" content="Intro Few days ago we found interesting Word document impersonating Lockheed Martin1. Some time later we realized that this sample was a part of larger and older campaign conducted probably against various military contractor conducting businesses with South Korea and that this campaign was already described, however w couldn&rsquo;t find any in depth analysis of a validator used by Lazarus so here it is.
Infection vector There is already a very good analysis done by StrangerealIntel, including an intelligence brief explaining potential reason for this campaign, so we wont into much details here."/>








    
</head>
<body>
    <div class="container">
        <header> 
            
                <h1 class="site-header">
    <a href="https://blog.malwarelab.pl">MalwareLab.pl Research Notes</a>
</h1>
<nav>
    
    
</nav>

            
        </header>
        <main>
            

    <article class="post">
        <header>
            <h1>In depth analysis of  Lazarus validator</h1>
        </header>
        <div class="content">
            <h1 id="intro">Intro</h1>
<p>Few days ago we found interesting Word document impersonating Lockheed Martin<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Some time later we realized that this sample was a part of larger and older campaign conducted probably against various military contractor conducting businesses with South Korea and that this campaign was already described, however w couldn&rsquo;t find any in depth analysis of a validator used by Lazarus so here it is.</p>
<h1 id="infection-vector">Infection vector</h1>
<p>There is already a very good analysis done by <a href="https://github.com/StrangerealIntel/CyberThreatIntel/blob/master/North%20Korea/APT/Lazarus/2020-05-05/Analysis.md">StrangerealIntel</a>, including an intelligence brief explaining potential reason for this campaign, so we wont into much details here. Whole infection vector can be summarized by flowing picture.</p>
<p><img src="/static/blog/img/lazar_infection.png" alt=""></p>
<p><a href="https://github.com/MalwareLab-pl/malware_scripts/blob/master/Lazarus/extract_doc.py">This</a> script can be used to extract files embedded into DOC file as well as key and dll name. It is important to notice that beside two dll&rsquo;s malicious document also contains another DOC file with a rest of a lure document so target is presented with whole document not only with a first page which can put away suspicion.</p>
<p>During our analysis we where worked with following DOC files</p>
<table>
<thead>
<tr>
<th>MD5 Hash</th>
<th>Drop name</th>
<th>Key</th>
<th>Hashes of embedded files</th>
</tr>
</thead>
<tbody>
<tr>
<td>65df11dea0c1d0f0304b376787e65ccb</td>
<td>wsuser.db</td>
<td>S-6-38-4412-76700627-315277-3247</td>
<td>PE x64:2b02465b65024336a9e15d7f34c1f5d9  DLL x86:f6d6f3580160cd29b285edf7d0c647ce  DOC:223e954fd67c6cf75c3a6f987b94784b</td>
</tr>
<tr>
<td>0071b20d27a24ae1e474145b8efc9718</td>
<td>wsuser.db</td>
<td>S-6-81-3811-75432205-060098-6872</td>
<td>PE x64:78d42cedb0c012c62ef5be620c200d43  DLL x86:14d79cd918b4f610c1a6d43cadeeff7b  DOC:59fab92d51c50467c1356080e6a5dead</td>
</tr>
<tr>
<td>1f254dd0b85edd7e11339681979e3ad6</td>
<td>wsdts.db</td>
<td>S-6-81-3811-75432205-060098-6872</td>
<td>PE x64:075fba0c098d86d9f22b8ea8c3033207  DLL x86:c0a8483b836efdbae190cc069129d5c3  DOC:074c02f7f5badd5c94d840c1e2ae9f72</td>
</tr>
<tr>
<td>2efbe6901fc3f479bc32aaf13ce8cf12</td>
<td>onenote.db</td>
<td>S-6-38-4412-76700627-315277-3247</td>
<td>PE x64:f4b55da7870e9ecd5f3f565f40490996  DLL x86:11fdc0be9d85b4ff1faf5ca33cc272ed  DOC:3aa8eddf26f5944a24dfeb57c9f49a17</td>
</tr>
<tr>
<td>265f407a157ab0ed017dd18cae0352ae</td>
<td>thumnail.db</td>
<td>S-6-38-4412-76700627-315277-3247</td>
<td>PE x64:59cb8474930ae7ea45b626443e01b66d  DLL x86:d1c652b4192857cb08907f0ba1790976  DOC:b493f37ee0fddb1d832ddacaaf417029</td>
</tr>
</tbody>
</table>
<h1 id="validator">Validator</h1>
<p>Binary is responsible of getting next stage, we found 2 variants, one will contact C2 server directly while other will act as intermediary loader extracting dll from itself and that extracted dll will contact C2 server. Both variants are used to download and load next stage malware, which we unfortunately didn&rsquo;t obtain.</p>
<h2 id="entry-point">Entry point</h2>
<p>Entrypoint function takes 3 parameters,</p>
<ul>
<li>file path of document responsible for infection  - this file will be deleted!</li>
<li>32-byte key</li>
<li>campaign id</li>
</ul>
<p>usage is clearly visible in macro embedded in documents used for infection.</p>
<pre><code>    a = sqlite3_stmt_all(orgDocPath, &quot;S-6-38-4412-76700627-315277-3247&quot;, &quot;43&quot;)
</code></pre><p>While this function can have different names in all samples looks roughly the same</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sqlite3_stmt_all</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>file_path, LPCSTR lpString, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>campain_id)
{
  _BYTE <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> cmd_line[<span style="color:#ae81ff">512</span>]; <span style="color:#75715e">// [esp+10h] [ebp-508h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Buffer[<span style="color:#ae81ff">512</span>]; <span style="color:#75715e">// [esp+210h] [ebp-308h]
</span><span style="color:#75715e"></span>  CHAR Filename[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+410h] [ebp-108h]
</span><span style="color:#75715e"></span>
  memset(<span style="color:#f92672">&amp;</span>Filename, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x104u</span>);
  memset(<span style="color:#f92672">&amp;</span>Buffer, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200</span>);
  memset(<span style="color:#f92672">&amp;</span>cmd_line, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200</span>);
  <span style="color:#66d9ef">if</span> ( lstrlenA(lpString) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">32</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  v4 <span style="color:#f92672">=</span> LocalAlloc(<span style="color:#ae81ff">0x40u</span>, <span style="color:#ae81ff">0x104u</span>);
  strcpy(v4, (<span style="color:#66d9ef">int</span>)file_path);
  CreateThread(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, remove_file, v4, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  GetModuleFileNameA((HMODULE)<span style="color:#ae81ff">0x10000000</span>, Filename, <span style="color:#ae81ff">0x104u</span>);
  sprintf(
    Buffer,
    <span style="color:#ae81ff">512</span>,
    <span style="color:#e6db74">&#34;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Windows</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">System32</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">rundll32.exe </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">, sqlite3_steps %s 0 0 %s 1&#34;</span>,
    Filename,
    lpString,
    campain_id);
  run_cmd(Buffer);
  sprintf(cmd_line, <span style="color:#ae81ff">512</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">, sqlite3_steps %s 0 0 %s 1&#34;</span>, Filename, lpString, campain_id);
  drop_link(v5, cmd_line);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>This function boil downs to:</p>
<ul>
<li>check length of second argument which later will be used as the key to decrypt next stage payload or configuration details - depending on variant.</li>
<li>remove file, in new thread, pointed by path passed as first parameter, usually remote template fetch by by document send to victim</li>
<li>run function from itself, using <code>rundll32.exe</code>, responsible for further actions</li>
<li>persists itself on computer by dropping a <code>LNK</code> file into autostart mimicking Microsoft utilities such as <code>preview</code> or <code>onedrive</code></li>
</ul>
<h2 id="intermediary-loader">Intermediary loader</h2>
<p>In some cases we found samples that will decode and load intermediary dll before call to C2. Inner dll is encoded by two rounds of xor, first one looks like well known <code>visual_decrypt</code> from zeus with a little twist of first byte being xored with the last one.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// g_Data - 10096348h
</span><span style="color:#75715e">// g_Key - 10096347h
</span><span style="color:#75715e"></span>g_Data[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">^=</span> g_Key[g_Size];
<span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> g_Size <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span>; <span style="color:#f92672">--</span>i )
    g_Data[i] <span style="color:#f92672">^=</span> g_Key[i];

</code></pre></div><p>Second round of xoring is done against key passed in parameter. This double xor gives us potential to extract payload key due to amount of null bytes in PE file</p>
<p><img src="/static/blog/img/lazar_drop_extr_key.png" alt=""></p>
<h2 id="heart-of-validator">Heart of validator</h2>
<p>Upon reaching this state malware tries to decrypt it config, this is pretty straightforward and can be done with <a href="https://github.com/MalwareLab-pl/malware_scripts/blob/master/Lazarus/validator_get_cfg.py">following script</a>. Config is encrypted with AES and key is derived by applying md5 hash to a value provided in command line. Config contains following fields</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>c2_domain</td>
<td><code>https://www.astedams.it/include/inc-elenco-offerter.asp</code></td>
<td>Address of C2</td>
</tr>
<tr>
<td>comm_key_1</td>
<td>7f39a52fc6a51b5dd3830064c63f9d4900000000000000000000000000000000</td>
<td>AES key used to encrypt data send to C2</td>
</tr>
<tr>
<td>comm_key_2</td>
<td>7b5089c2bea3ec4aa98c5cdf69dac21500000000000000000000000000000000</td>
<td>AES key used to encrypt data received from C2</td>
</tr>
<tr>
<td>sample_id</td>
<td>9370</td>
<td>ID of sample, used when doing request to C2</td>
</tr>
<tr>
<td>param_name_cid</td>
<td>ned</td>
<td>Name of HTTP Param containing campaign id</td>
</tr>
<tr>
<td>param_name_size</td>
<td>gl</td>
<td>Name of HTTP Param containing  size of data send to C2</td>
</tr>
<tr>
<td>param_name_zero</td>
<td>hl</td>
<td>Name of HTTP Param always containing zero</td>
</tr>
</tbody>
</table>
<h2 id="fingerprinting-machine">Fingerprinting machine</h2>
<p>Malware collects following informations</p>
<ul>
<li>Computer name</li>
<li>User name</li>
<li>List of attached drives with their type and capacity and free space</li>
<li>List of running processes</li>
</ul>
<h2 id="c2-communication">C2 Communication</h2>
<p>After collecting all the information, data is packed into a binary blob described below and encoded with base64 and send to C2 using a wrapper class calls <code>CWininet_Protocol</code>.
Malware tries to obtain value of default <code>User-Agent</code>, if it fails constant string <code>Mozilla</code> is used. Communication happens in loop using one socket, until any response is received.
If response is received and it has a specific hardcoded length, decoding begins. Decoding is mirror process to encoding C2 request, response is encoded with both base64 and packed into binary format.
After successful decoding received PE file is being loaded into memory and run finishing work of a validator.</p>
<h2 id="binary-format">Binary Format</h2>
<p>All binary blobs have a following header</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> blob_hdr { 

	DWORD random;
	DWORD is_compressed;
	DWORD size;
	DWORD size2; <span style="color:#75715e">// size == size2
</span><span style="color:#75715e"></span>	DWORD padded_size;
	DWORD decoded_hash[<span style="color:#ae81ff">4</span>] <span style="color:#75715e">// md5 hash of fully decoded blob, without header
</span><span style="color:#75715e"></span>	DWORD unk_1[<span style="color:#ae81ff">4</span>];
	DWORD data_hash[<span style="color:#ae81ff">4</span>] <span style="color:#75715e">// md5 hash of encoded data, without header
</span><span style="color:#75715e"></span>	DWORD unk_2[<span style="color:#ae81ff">4</span>]
}

</code></pre></div><p>While data in configuration is only encrypted, all data exchanged between C2 server is additionally compressed, algorithm used here is lz4</p>
<h2 id="pe-loading">PE Loading</h2>
<p>Next stage binary is loaded into memory and run, code responsible for it is borrowed <a href="https://github.com/fancycode/MemoryModule/blob/master/MemoryModule.c">MemoryLoadLibraryEx</a></p>
<h1 id="attribution">Attribution</h1>
<p>Attribution to Lazarus is done based on a blog by <a href="https://blog.telsy.com/lazarus-gate/">Telsy</a>. They mention the same scheme of infections as well the same dll however in older version<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h1 id="yara">Yara</h1>
<pre><code class="language-yara" data-lang="yara">rule apt_NK_Lazarus_DllImplat_cmd_line {

	meta:
		reference = &quot;https://blog.malwarelab.pl/posts/lazarus_validator/&quot;
		hash = &quot;141931bf718c5c4d3931f64b04e2112b65a6bcd46c0092300ff6824b573f8b36&quot;
		hash = &quot;b76b6bbda8703fa801898f843692ec1968e4b0c90dfae9764404c1a54abf650b&quot;
		hash = &quot;37a3c01bb5eaf7ecbcfbfde1aab848956d782bb84445384c961edebe8d0e9969&quot;
		hash = &quot;bff4d04caeaf8472283906765df34421d657bd631f5562c902e82a3a0177d114&quot;
		hash = &quot;a8647a04563b746b1d8d4cdd67616cb646a3f6766d9c2d447541b9dc26452d8b&quot;
		hash = &quot;bff4d04caeaf8472283906765df34421d657bd631f5562c902e82a3a0177d114&quot;
		hash = &quot;48b8486979973656a15ca902b7bb973ee5cde9a59e2f3da53c86102d48d7dad8&quot;
		hash = &quot;21515fd6e6eb994defb589b4d0d9d956f7b4cb07823aaec501134ab063d883e9&quot;
		hash = &quot;26a2fa7b45a455c311fd57875d8231c853ea4399be7b9344f2136030b2edc4aa&quot;
		author = &quot;Maciej Kotowicz, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fe939f95be939f92899f8c9b929f9cd08e92">[email&#160;protected]</a>&quot;
		copyright = &quot;MalwareLab.pl&quot;
		date = &quot;2020-05-18&quot;

	strings:
		$s0 = &quot; %s 0 0 %s 1&quot;
		$s1 = / %s 0 0 [0-9]+ 1/

	condition:
		any of them and filesize &lt;2MB
}

import &quot;pe&quot;

rule apt_NK_Lazarus_DllImplat_cfg_decoder {

	meta:
		reference = &quot;https://blog.malwarelab.pl/posts/lazarus_validator/&quot;
		hash = &quot;bff4d04caeaf8472283906765df34421d657bd631f5562c902e82a3a0177d114&quot;
		hash = &quot;26a2fa7b45a455c311fd57875d8231c853ea4399be7b9344f2136030b2edc4aa&quot;
		author = &quot;Maciej Kotowicz, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="375a565c775a565b405645525b565519475b">[email&#160;protected]</a>&quot;
		copyright = &quot;MalwareLab.pl&quot;
		date = &quot;2020-05-18&quot;

	strings:
		$c0 = { 6A 15 59 8B F2 8D 7C 24 ?? F3 A5 8B ?? 24 ?? 83 E? 0F 6A 10 58 2B C? F7 D? 1B ?? 23 ?? 03 }
		$c1 = { B9 15 00 00 00 8B F2 8D 7C 24 ?? F3 A5 8B ?? 24 ?? [2] 83 E? 0F }

	condition:
		uint16(0) == 0x5a4d and any of them
}

</code></pre><h1 id="analysis-artifacts">Analysis Artifacts</h1>
<ul>
<li>Hashes</li>
</ul>
<pre><code>cf44576adcfc51a062457398797f99e85b504a70208938180639c2e0cde7ca95  074c02f7f5badd5c94d840c1e2ae9f72
805183c19f4bffca871fb344247bd5d31357480c536c052c8b7c4109f507f3ef  075fba0c098d86d9f22b8ea8c3033207
37a3c01bb5eaf7ecbcfbfde1aab848956d782bb84445384c961edebe8d0e9969  11fdc0be9d85b4ff1faf5ca33cc272ed
23d73fc8f10588944d8dc2073ce6af6d159943f11ac0c140c9b2e67fb0ad8b89  14d79cd918b4f610c1a6d43cadeeff7b
2627b7c827404ee49271bfc6bb152e52cf28e35c4bef1ad256018c5c08daea21  1bd0ca304cdecfa3bd4342b261285a72
f3e4947e32c6b1d0303b342a74426d4de0ad2de8d2bfb83f0003a1ebc650b7a7  223e954fd67c6cf75c3a6f987b94784b
26a2fa7b45a455c311fd57875d8231c853ea4399be7b9344f2136030b2edc4aa  25b37c971fd7e9e50e45691aa86e5f0a
48b8486979973656a15ca902b7bb973ee5cde9a59e2f3da53c86102d48d7dad8  2b02465b65024336a9e15d7f34c1f5d9
d79bfa19e4d32692030d15c2767beb8cd88dc552d51245c88f42edd5129326f0  3aa8eddf26f5944a24dfeb57c9f49a17
7fdfc719935d938651f45aafef3cd2ecc0020e9b77ac0780edb3ba585c16c9e2  59cb8474930ae7ea45b626443e01b66d
69e50a20ea6be94e4336ba8cea3c438e8ce7c4aab66ce1baf26bc3a77200fb27  59fab92d51c50467c1356080e6a5dead
805183c19f4bffca871fb344247bd5d31357480c536c052c8b7c4109f507f3ef  7228705813d5bc6c6a62fc53ac019344
454734dca530d54c4e8f543bdd33b5eb4b50f3039a953b54281dc67a09af4ca6  78d42cedb0c012c62ef5be620c200d43
a8647a04563b746b1d8d4cdd67616cb646a3f6766d9c2d447541b9dc26452d8b  8fc7b0764541225e5505fa93a7376df4
21515fd6e6eb994defb589b4d0d9d956f7b4cb07823aaec501134ab063d883e9  92657b98c2b4ee4e8fa1b83921003c74
a769b39d0c80d1a035dd51efa28b09221cbb6c912def95a57c8910455e333756  b493f37ee0fddb1d832ddacaaf417029
3c5c1a7e7efe4eee3b7650167c664f730f40923a38c3e6640cbb2a4bfe9f64c6  c0a8483b836efdbae190cc069129d5c3
6590f66d6afe155b1109e81e2c36ece73236223ab17ae1a1c77a027be9f7d400  cd5357d1045948ba62710ad8128ae282
ec254c40abff00b104a949f07b7b64235fc395ecb9311eb4020c1c4da0e6b5c4  d1c652b4192857cb08907f0ba1790976
b76b6bbda8703fa801898f843692ec1968e4b0c90dfae9764404c1a54abf650b  f4b55da7870e9ecd5f3f565f40490996
bff4d04caeaf8472283906765df34421d657bd631f5562c902e82a3a0177d114  f6d6f3580160cd29b285edf7d0c647ce
1b0c82e71a53300c969da61b085c8ce623202722cf3fa2d79160dac16642303f  65df11dea0c1d0f0304b376787e65ccb
d7ef8935437d61c975feb2bd826d018373df099047c33ad7305585774a272625  0071b20d27a24ae1e474145b8efc9718
66e5371c3da7dc9a80fb4c0fabfa23a30d82650c434eec86a95b6e239eccab88  1f254dd0b85edd7e11339681979e3ad6
1076b25d5fa5cccdddcaf3f788789ae3c4ea9b034066693b6a0560af129ceda6  2efbe6901fc3f479bc32aaf13ce8cf12
</code></pre><ul>
<li>URLs</li>
</ul>
<pre><code>https://www.curiofirenze.com/newsl/include/inc-map.asp
http://www.elite4print.com/admin/order/batchPdfs.asp 
http://www.astedams.it/include/inc-elenco-offerter.asp
https://www.astedams.it/uploads/frame/61.dotm
https://www.astedams.it/uploads/template/17.dotm
https://www.sanlorenzoyacht.com/newsl/uploads/docs/43.dotm
https://www.sanlorenzoyacht.com/newsl/uploads/docs/1.dotm
</code></pre><ul>
<li>File Names</li>
</ul>
<pre><code>wsuser.db
wsdts.db
onenote.db
thumnail.db
</code></pre><ul>
<li>Communication keys:</li>
</ul>
<pre><code>0f0b242fb5d73d08b856bc43432b350000000000000000000000000000000000
cb38822697af45210d2759889c2eb2bf00000000000000000000000000000000
7f39a52fc6a51b5dd3830064c63f9d4900000000000000000000000000000000
7b5089c2bea3ec4aa98c5cdf69dac21500000000000000000000000000000000
</code></pre><ul>
<li>Paths</li>
</ul>
<pre><code>\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\OneDrive.lnk
\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\onenote.lnk
\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\preview.lnk
\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\thumbnail.lnk
</code></pre><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><code>9724ee7a6baf421ac5a2a3c93d32e796e2a33d7d75bbfc02239fc9f4e3a41e0</code> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Different size of config and hardcoded campaign id <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

        </div>
        <div class="article-info">
    
        <div class="article-date">2020-05-15</div>
    
    <div class="article-taxonomies">
        
            
                <ul class="article-tags">
                    
                        <li><a href="https://blog.malwarelab.pl/tags/lazarus">#Lazarus</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/apt38">#APT38</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/apt">#APT</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/malware-analysis">#Malware Analysis</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/threat-inteligence">#Threat Inteligence</a></li>
                    
                </ul>
        
    </div>
</div>
    </article>
    


        </main>
        <footer>
            
                <p>Â© 2020<br>
Powered by <a target="_blank" href="https://gohugo.io/">Hugo</a>, theme <a target="_blank" href="https://github.com/mitrichius/hugo-theme-anubis">Anubis</a>.
</p>
            
        </footer>
    </div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></body>
</html>
