<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.6.1 -->
<title>Golang wrapper on an old obscene malware | Random RE</title>
<meta name="generator" content="Jekyll v3.8.5" />
<meta property="og:title" content="Golang wrapper on an old obscene malware" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="The malware in this report has been blogged about before by a Russian researcher1, he referred to is as “Obscene Trojan” so that’s what I will also call it and we will go over it’s functionality in depth later in this blog but the more interesting part to me is the initial layer around the malware, it’s in Golang! This layer serves both as a wrapper layer that you would normally expect to see with crypters but also a dropper as it drops the decoded malware to detonate it instead of loading it into memory but the concept of a golang crypter is interesting nonetheless and after going through all the layers I stepped back and checked what the detection ratings were and was incredibly surprised to find that these wrapper layers took a 12 year old malware from completely detected to almost FUD." />
<meta property="og:description" content="The malware in this report has been blogged about before by a Russian researcher1, he referred to is as “Obscene Trojan” so that’s what I will also call it and we will go over it’s functionality in depth later in this blog but the more interesting part to me is the initial layer around the malware, it’s in Golang! This layer serves both as a wrapper layer that you would normally expect to see with crypters but also a dropper as it drops the decoded malware to detonate it instead of loading it into memory but the concept of a golang crypter is interesting nonetheless and after going through all the layers I stepped back and checked what the detection ratings were and was incredibly surprised to find that these wrapper layers took a 12 year old malware from completely detected to almost FUD." />
<link rel="canonical" href="/malware/2020/02/28/Golang-Wrapper-on-an-old-malware.html" />
<meta property="og:url" content="/malware/2020/02/28/Golang-Wrapper-on-an-old-malware.html" />
<meta property="og:site_name" content="Random RE" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2020-02-28T16:31:12+00:00" />
<script type="application/ld+json">
{"@type":"BlogPosting","headline":"Golang wrapper on an old obscene malware","dateModified":"2020-02-28T16:31:12+00:00","datePublished":"2020-02-28T16:31:12+00:00","url":"/malware/2020/02/28/Golang-Wrapper-on-an-old-malware.html","mainEntityOfPage":{"@type":"WebPage","@id":"/malware/2020/02/28/Golang-Wrapper-on-an-old-malware.html"},"description":"The malware in this report has been blogged about before by a Russian researcher1, he referred to is as “Obscene Trojan” so that’s what I will also call it and we will go over it’s functionality in depth later in this blog but the more interesting part to me is the initial layer around the malware, it’s in Golang! This layer serves both as a wrapper layer that you would normally expect to see with crypters but also a dropper as it drops the decoded malware to detonate it instead of loading it into memory but the concept of a golang crypter is interesting nonetheless and after going through all the layers I stepped back and checked what the detection ratings were and was incredibly surprised to find that these wrapper layers took a 12 year old malware from completely detected to almost FUD.","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="/feed.xml" title="Random RE" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">Random RE</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Golang wrapper on an old obscene malware</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2020-02-28T16:31:12+00:00" itemprop="datePublished">Feb 28, 2020
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <p>The malware in this report has been blogged about before by a Russian researcher<a href="https://habr.com/ru/post/27040/">1</a>, he referred to is as “Obscene Trojan” so that’s what I will also call it and we will go over it’s functionality in depth later in this blog but the more interesting part to me is the initial layer around the malware, it’s in Golang! This layer serves both as a wrapper layer that you would normally expect to see with crypters but also a dropper as it drops the decoded malware to detonate it instead of loading it into memory but the concept of a golang crypter is interesting nonetheless and after going through all the layers I stepped back and checked what the detection ratings were and was incredibly surprised to find that these wrapper layers took a 12 year old malware from completely detected to almost FUD.</p>

<p>Initial sample:
769d1396b0cef006bcaafd2de850fc97bf51fd14813948ef2bc3f8200bcb5eab</p>

<p>This Golang wrapper is designed to ZLIB decompress and RC4 decrypt the next file hidden inside itself.</p>

<p><img src="/assets/golang_wrapped_trojan/769_packer_copy_data_load_key.png" alt="Copy Data and load key" title="Copy Data and load key" /></p>

<p><img src="/assets/golang_wrapped_trojan/769_decompress_decrypt.png" alt="Decompress and Decrypt" title="Decompress and Decrypt" /></p>

<p>Dumping the data blog out we can verify this manually.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.zz'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">zobj</span> <span class="o">=</span> <span class="n">zlib</span><span class="o">.</span><span class="n">decompressobj</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">zobj</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t2</span><span class="p">[:</span><span class="mi">100</span><span class="p">]</span>
<span class="s">'</span><span class="se">\x9e\xd6\x02\x1e\x19</span><span class="s">n</span><span class="se">\xa0</span><span class="s">^</span><span class="se">\xd0\x83</span><span class="s">Ga</span><span class="se">\xcf</span><span class="s">q</span><span class="se">\xd6\x08\x94</span><span class="s">3</span><span class="se">\x00\x7f\xf4</span><span class="s">n</span><span class="se">\x96\x05\xe5\xf7\x8a</span><span class="s">M8</span><span class="se">\x17\x8a\xfb\xe3\\</span><span class="s">]}</span><span class="se">\x1c</span><span class="s">5</span><span class="se">\x07\x8d</span><span class="s">j</span><span class="se">\xce</span><span class="s">I</span><span class="se">\xd2\xae\xfa\x12\xc0\xd6\xd1\xef</span><span class="s">&amp;N</span><span class="se">\x8c</span><span class="s">G[8L</span><span class="se">\xf3\xb9\x01\xcb</span><span class="s">d</span><span class="se">\xab\x8a\x9b\xd5</span><span class="s">N</span><span class="si">%</span><span class="se">\x80</span><span class="s">Q</span><span class="se">\x8f</span><span class="s">:`</span><span class="se">\xce\xc1</span><span class="s">P</span><span class="se">\xb3\x07\xa0</span><span class="s">+</span><span class="se">\x1c\x1e</span><span class="s">Z</span><span class="se">\x0c</span><span class="s">[;W</span><span class="se">\xbf\xb5</span><span class="s">`</span><span class="se">\xdb\x9f</span><span class="s">n</span><span class="se">\xf0</span><span class="s">-</span><span class="se">\xc4</span><span class="s">&lt;R</span><span class="se">\xf5</span><span class="s">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">'vckxjm'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t3</span> <span class="o">=</span> <span class="n">rc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t3</span><span class="p">[:</span><span class="mi">100</span><span class="p">]</span>
<span class="s">'MZ</span><span class="se">\x90\x00\x03\x00\x04\x00\x00\x00\x00\x00\xff\xff\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00</span><span class="s">@</span><span class="se">\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x0e\x1f\xba\x0e\x00\xb4\t\xcd</span><span class="s">!</span><span class="se">\xb8\x01</span><span class="s">L</span><span class="se">\xcd</span><span class="s">!This program cannot be'</span>

</code></pre></div></div>
<p>Next layer:
0015001917bc98a899536c6d72fcf0774e5b14ab66f07ccbdc4cc205d70475dd</p>

<p>After decoding the next exe file out we are left with another golang wrapped file that does the same thing as the previous layer but it has a differen’t RC4 key.</p>

<p><img src="/assets/golang_wrapped_trojan/unpacked1_same_packer.png" alt="Same golang packer" title="Same golang packer" /></p>

<p>Next unpacked file:
de2688f007dac98b579d5ed364febc8bb07bc3dc26e4b548d659ecb1974d9f46</p>

<p>This file appears to be a SFX RAR exe but at the end of the day it is also just another layer and is designed to drop an EXE file to disk and detonate it.</p>

<p>Dropped binary:
afa085105a16b1284a811da11db2457778c4a267f2fa8a551dec3b8a665c11f9</p>

<p>This file looks like a compiled lua binary but we don’t really need to decompile it as we can see a large base64 blob inside it and a similar looking 6 byte string below it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;snip&gt;
dIMAASIwzdmExocRQqzw0ytzQGCfKbvWFXldCcNuyFmZY0eOxzmzJtMrzn1VV6VBF8hH6CZpopOVvkCx
QpeoBQy3fp/3XNCVyDc90aYiPtcwqjfbX3jSEDbspcg8AT08aUmJqm+RU53bFB8u3vL+HQzNNv17YHeX
kHA5yz6ttQuwpZ0rzTHvh11DBxVFQwWLaVi1Y718ORqmrc5DcWTMCvEjagiP4qeJWUmP2N0XwQ08fXU1
buFfXfD6xBg8ugXKanSFFTsGuIJIC+QPePPjvTWoeJueb4y5IvPVJUT688HgNTo18eufF2CCyjMs/Zem
Xb+7K1DeYNbF/mPbJrcqtovOdd7X4HSwcbh+0MwwWNnWak4kCT/JRumZBztD1iBMuVIJZv0V/48+rBq9
nHigHzW0fv6XFFZhzThqkHx0GEr9i/MMromlXCHSm7A=
rc4_key
yovzgz
        tmp_file
getenv
TEMP
tmpname
.exe
</code></pre></div></div>

<p>Base64 decoding and then RC4 decrypting this blob gives us our next binary:
1ca71bba30fb17e83fea05ef5e2d467f86bff27b6087b574fa51f94f0f725441</p>

<p>This binary is the unpacked trojan that a blog from 2008 calls “Obscene Trojan”[<a href="https://habr.com/ru/post/27040/">1</a>], coincidentally it also has a compilation timestamp of 2008 so I’m unsure if it was just recently uploaded or if someone is testing the crypter layers for detection.</p>

<p>Has some anti debugging by using obscure opcodes that some debuggers can have problems with.</p>

<p><img src="/assets/golang_wrapped_trojan/ylb_unpacked_anti_opcode.png" alt="Anti-Debugging opcode" title="Anti-Debugging opcode" /></p>

<p>Also a VM check[<a href="https://www.aldeid.com/wiki/VMXh-Magic-Value">3</a>].</p>

<p><img src="/assets/golang_wrapped_trojan/ylb_unpacked_vm_check.png" alt="VM Check" title="VM Check" /></p>

<p>The malware has most of its important strings encoded using a single byte XOR.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Python</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">addr</span> <span class="ow">in</span> <span class="n">XrefsTo</span><span class="p">(</span><span class="mh">0x40f09e</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
	<span class="n">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">.</span><span class="n">frm</span>
	<span class="k">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">addr</span><span class="p">)),</span>
	<span class="n">addr</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">PrevHead</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
	<span class="n">offset</span> <span class="o">=</span> <span class="n">GetOperandValue</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">t</span> <span class="o">=</span> <span class="n">GetString</span><span class="p">(</span><span class="n">offset</span><span class="p">)</span>
	<span class="n">t</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)):</span>
		<span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="mi">2</span>
	<span class="k">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="n">Python</span><span class="o">&gt;</span>
<span class="mh">0x40f22e</span><span class="n">L</span> <span class="n">advapi32</span><span class="o">.</span><span class="n">dll</span>
<span class="mh">0x40f256</span><span class="n">L</span> <span class="n">kernel32</span><span class="o">.</span><span class="n">dll</span>
<span class="mh">0x40f27e</span><span class="n">L</span> <span class="n">GetProcAddress</span>
<span class="mh">0x40f2ac</span><span class="n">L</span> <span class="n">GetEnvironmentVariableA</span>
<span class="mh">0x40f2da</span><span class="n">L</span> <span class="n">WinExec</span>
<span class="mh">0x40f308</span><span class="n">L</span> <span class="n">CopyFileA</span>
<span class="mh">0x40f336</span><span class="n">L</span> <span class="n">SetFileAttributesA</span>
<span class="mh">0x40f364</span><span class="n">L</span> <span class="n">RegSetValueExA</span>
<span class="mh">0x40f392</span><span class="n">L</span> <span class="n">RegOpenKeyA</span>
<span class="mh">0x40f3c0</span><span class="n">L</span> <span class="n">RegCloseKey</span>
<span class="mh">0x40f3ee</span><span class="n">L</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">fewfwe</span><span class="o">.</span><span class="n">com</span><span class="o">/</span>
<span class="mh">0x40f400</span><span class="n">L</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">fewfwe</span><span class="o">.</span><span class="n">net</span><span class="o">/</span>
<span class="mh">0x40f421</span><span class="n">L</span> <span class="n">cftmon</span><span class="o">.</span><span class="n">exe</span>
<span class="mh">0x40f442</span><span class="n">L</span> <span class="n">spools</span><span class="o">.</span><span class="n">exe</span>
<span class="mh">0x40f463</span><span class="n">L</span> <span class="n">ftpdll</span><span class="o">.</span><span class="n">dll</span>
<span class="mh">0x40f541</span><span class="n">L</span> <span class="n">Software</span>\<span class="n">Microsoft</span>\<span class="n">Windows</span>\<span class="n">CurrentVersion</span>\<span class="n">Run</span>\
<span class="mh">0x40f5d8</span><span class="n">L</span> <span class="n">SYSTEM</span>\<span class="n">CurrentControlSet</span>\<span class="n">Services</span>\<span class="n">Schedule</span>
<span class="mh">0x40f68b</span><span class="n">L</span> <span class="n">SystemDrive</span>
<span class="mh">0x40f8c2</span><span class="n">L</span> <span class="n">windir</span>
<span class="mh">0x40f8de</span><span class="n">L</span> <span class="n">COMRUTERNAME</span>
<span class="mh">0x40f8f0</span><span class="n">L</span> \<span class="n">system32</span>
<span class="mh">0x40f911</span><span class="n">L</span> <span class="n">USERPROFILE</span>
<span class="mh">0x40f938</span><span class="n">L</span> \<span class="n">Local</span> <span class="n">Settings</span>\<span class="n">Application</span> <span class="n">Data</span>
<span class="mh">0x40f97f</span><span class="n">L</span> \<span class="n">drivers</span>\
<span class="mh">0x40f9b7</span><span class="n">L</span> \<span class="n">Local</span> <span class="n">Settings</span>\<span class="n">Application</span> <span class="n">Data</span>\
<span class="mh">0x40f9ef</span><span class="n">L</span> \<span class="n">update</span><span class="o">.</span><span class="n">dat</span>
<span class="mh">0x40fa16</span><span class="n">L</span> \<span class="n">drivers</span>\
<span class="mh">0x40fa2d</span><span class="n">L</span> <span class="n">sysproc</span><span class="o">.</span><span class="n">sys</span>
<span class="mh">0x40fa54</span><span class="n">L</span> \<span class="n">mpr</span><span class="o">.</span><span class="n">dat</span>
<span class="mh">0x40fa7b</span><span class="n">L</span> \<span class="n">mpr2</span><span class="o">.</span><span class="n">dat</span>
<span class="mh">0x40faa2</span><span class="n">L</span> \<span class="n">mpr32</span><span class="o">.</span><span class="n">dat</span>
<span class="mh">0x40fb61</span><span class="n">L</span> \<span class="n">mpz</span><span class="o">.</span><span class="n">tmp</span>
<span class="mh">0x40fb88</span><span class="n">L</span> \<span class="n">r43q34</span><span class="o">.</span><span class="n">tmp</span>
<span class="mh">0x40fda5</span><span class="n">L</span> <span class="n">wininet</span><span class="o">.</span><span class="n">dll</span>
<span class="mh">0x40fdcb</span><span class="n">L</span> <span class="n">InternetOpenA</span>
<span class="mh">0x40fdf7</span><span class="n">L</span> <span class="n">InternetOpenUrlA</span>
<span class="mh">0x40fe23</span><span class="n">L</span> <span class="n">InternetReadFile</span>
<span class="mh">0x410007</span><span class="n">L</span> <span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">www</span><span class="o">-</span><span class="n">form</span><span class="o">-</span><span class="n">urlencoded</span>
<span class="mh">0x410304</span><span class="n">L</span> <span class="n">c</span><span class="p">:</span>\<span class="n">stop</span>
</code></pre></div></div>

<p>There is also an encoded file stored inside of it which was also blogged about in 2008 but was discussed as being downloaded by the previous trojan instead of being dropped directly[<a href="https://habr.com/ru/post/27053/">2</a>]:
f198e63cc1ba3153e27905881bcb8a81fa404f659b846b972b1c8f228e4185d4</p>

<p>The trojan sets the filename that it will have.</p>

<p><img src="/assets/golang_wrapped_trojan/filename_for_dll.png" alt="Filename is decoded" title="Filename is decoded" /></p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_decoded.png" alt="DLL decoded" title="DLL decoded" /></p>

<p>This DLL will hook send, WSASend, recv and WSARecv; primarily for harvesting data from traffic over ports 110, 80, 25 and 21. The harvested data is written to files while the main trojan piece will read the files and ship the data off.</p>

<p>Receiving function hooks:</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_recv_hook.png" alt="Receiving function hooks" title="Receiving function hooks" /></p>

<p>Sending function hooks:</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_send_hook.png" alt="Sending function hooks" title="Sending function hooks" /></p>

<p>The receiving hook checks which port is being used before harvesting data.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_recvhook_overlay.png" alt="Receiving hook overlay" title="Receiving hook overlay" /></p>

<p>The data being harvested looks like email data which will be written to one of the files.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_recvhook_emails_to_file.png" alt="Write emails to file" title="Write emails to file" /></p>

<p>The send hook function performs similar harvesting but it also has different code for port 21 and 80 traffic. For port 21 it will check for ‘USER’ and ‘PASS’ such as with FTP traffic.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_sendhook_port21_user.png" alt="Look for USER" title="Look for USER" /></p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_sendhook_port21_pass.png" alt="Look for USER" title="Look for PASS" /></p>

<p>The data will then be harvested.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_sendhook_port21_harvest_ftp.png" alt="ftpdll_sendhook_writeftp_to_file" title="Harvest FTP data" /></p>

<p>The data will be written to a different file.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_sendhook_writeftp_to_file.png" alt="Write FTP info to file" title="Write FTP info to file" /></p>

<p>The send hook code will also look for ‘gzip,’ in outbound over port 80 and overwrite it, probably to prevent an Accept-Encoding header from including gzip.</p>

<p><img src="/assets/golang_wrapped_trojan/ftpdll_sendhook_overwrite_gzip.png" alt="Overwrite gzip on outbound port 80 traffic" title="Overwrite gzip on outbound port 80 traffic" /></p>

<p>As I mentioned at the beginning of the blog the most interesting aspect of this to me personally is the ability of a few simple wrappers and a golang crypter taking an old malware to almost FUD.</p>

<p><img src="/assets/golang_wrapped_trojan/VT_detections.png" alt="VT Detections of files" title="VT Detections of files" /></p>

<p>References:</p>
<ol>
  <li>https://habr.com/ru/post/27040/</li>
  <li>https://habr.com/ru/post/27053/</li>
  <li>https://www.aldeid.com/wiki/VMXh-Magic-Value</li>
</ol>


  </div><a class="u-url" href="/malware/2020/02/28/Golang-Wrapper-on-an-old-malware.html" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">Random RE</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">Random RE</li><li><a class="u-email" href="mailto:sysopfb@gmail.com">sysopfb@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/sysopfb"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">sysopfb</span></a></li><li><a href="https://www.twitter.com/sysopfb"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#twitter"></use></svg> <span class="username">sysopfb</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Place for me to dump random RE posts mostly revolving around Malware.</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
