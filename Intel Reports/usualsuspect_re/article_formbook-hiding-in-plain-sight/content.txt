<!DOCTYPE html>
<html lang="en">
    <head>
    
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@jaydinbas" />
    <meta name="twitter:title" content="FormBook - Hiding in plain sight" />
    <meta name="twitter:description" content="<p>Short post about how the FormBook malware hides its encrypted strings in plain sight</p>" />
        <title>FormBook - Hiding in plain sight</title>
        <meta charset='utf8' />
        <link rel='stylesheet' type='text/css' href='/theme/css/style.css' />
    </head>
    <body>
        <div id='center'>
            <nav id='nav'>
                <ul>
                        <li><a href='/archives'>Articles</a></li>

                    <li><a href='https://www.usualsuspect.re/page/about'>About</a></li>
                    <li><a href='https://www.usualsuspect.re/page/legal-notice'>Legal Notice</a></li>
                </ul>
            </nav>
            <div id='content'>
    <header>
        <h1>FormBook - Hiding in plain sight</h1>
        <div class='back-link'><a href='/archives'>&lt;&lt; back to Articles</a></div>
        <p>published 2019-05-02</p>
    </header>
    <h2>Intro</h2>
<p>Today I came across the FormBook malware and had a quick look. As is tradition for malware, it uses encrypted strings to make it harder to detect. The way FormBook stores its encrypted strings however is new to me.</p>
<p>FormBook itself is not new and the decryption has been documented before and decryption scripts for its encrypted strings exist.</p>
<p>Arbor for example has an article <a href="https://www.netscout.com/blog/asert/formidable-formbook-form-grabber">here</a>, and the decryption script which is basically a Python conversion of the code in FormBook itself can be found <a href="https://github.com/tildedennis/malware/blob/master/formbook/formbook_decryption.py">here</a>.</p>
<h3>Under the hood</h3>
<p>So what does it look like in the binary?</p>
<p><img alt="An encrypted string" src="/images/encstring.png"></p>
<p>What you see here is an encrypted string blob. The lower part starting with <code>push ebp</code> is the actual string, while the top part is used to fetch its address.</p>
<p>Any string FormBook uses is stored in gibberish code blocks like above.</p>
<p>I've analyzed the function processing those code blocks but couldn't identify it at first. I expected some decompression/decryption but it looked like nothing I've seen before and it also seemed rather simple (just copying memory around basically). The existing script is also just a 1:1 translation of the malware's code into Python, so that doesn't solve the riddle either.</p>
<p>Then I had an idea - could it be that the processing code is actually a small disassembly engine? Turns out the answer is yes!</p>
<p>What FormBook <em>actually</em> is doing is disassembling these gibberish code blocks and extracts operands, which make up the "hidden" encrypted blob. So the weird transformation functions are part of the disassembly engine.</p>
<p>To confirm that, I ripped the above blob into a file and ran it through Arbor's script and printed the data before it is being decrypted using RC4, and the output was:</p>
<div class="highlight"><pre><span></span><code><span class="mf">1065</span><span class="n">ba6b366a83cf14f7aa2bcab6059271710738</span>
</code></pre></div>

<p>That is, these bytes are what are hidden in the code blob. And if you look closely, you can see the bytes in the above disassembly as operands but reversed (little-endian of DWORDs):</p>
<div class="highlight"><pre><span></span><code><span class="mf">1065</span><span class="n">ba6b</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mf">0</span><span class="n">x6BBA6510</span>
<span class="mf">366</span><span class="n">a83cf</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mf">0</span><span class="n">xCF836A36</span>
<span class="mf">14</span><span class="n">f7aa2b</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mf">0</span><span class="n">x2BAAF714</span>
<span class="n">cab60592</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mf">0</span><span class="n">x9205B6CA</span>
<span class="mf">71710738</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mf">0</span><span class="n">x38077171</span>
</code></pre></div>

<p>So FormBook is literally hiding the encrypted strings in plain sight - as operands for nonsense code blobs and uses a small disassembly engine to retrieve them. Haven't seen this one before, that's a rather creative approach.</p>
<p>(I couldn't find anyone else noticing what's actually going on, so if I missed it, apologies, let me know)</p>
            </div>
        </div>
    </body>
</html>