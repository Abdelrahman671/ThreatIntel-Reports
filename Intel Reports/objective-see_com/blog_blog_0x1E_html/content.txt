<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">

<head>
<title>Objective-See</title>

<meta property="og:title" content="OSX/MacRansom: analyzing the latest ransomware to target macs" />
<meta property="og:type" content="website" />
<meta property="og:image" content="https://objective-see.com/images/blog/blog_0x1E/rwAlert.png" />

<link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />


<link href="https://objective-see.com/rss.xml" rel="alternate" type="application/rss+xml" title="Objective-See's Blog Feed" />

<script src="../js/analytics.js"></script>

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

</head>

<body>
<nav role="main">
<ul>
	<li><a href="../index.html" class="menubutton logo">Objective See</a></li>
	<li><a href="../about.html" class="menubutton about">about</a></li>
	<li><a href="../blog.html" class="menubutton blog visited">blog</a></li>
	<li><a href="../malware.html" class="menubutton malware">malware</a></li>
	<li><a href="../products.html" class="menubutton products">products</a></li>
</ul>
</nav>

<div class="pageContent">
	<hr class="gradient">
	<br>
	<section class="blogContent">
		<div class="blogTitle">OSX/MacRansom</div>
		<div class="blogSubTitle">&rsaquo; analyzing the latest ransomware to target macs</div>
		<div class="blogDate">6/12/2017</div>
		
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
		<br><br>
		<span>
		<a class="inlineLink" href="https://www.patreon.com/objective_see">
			<img src="../images/blog/blog_0x1D/patreon.png" width="700" style="display:block; margin:auto;"/>
		</a>
		</span>
		<br>
		</span>
		</div>
		<br>
		<div style="border: 1px solid red; padding: 10px; margin-top:15px;">
		Want to play along? I've shared both the malware's binary executable ('<span class="n3rdFont">macRansom</span>'), which can be downloaded <a class="inlineLink" href="https://objective-see.com/downloads/malware/macRansom.zip">here</a> (password: <span class="n3rdFont">infect3d</span>). 
		<br>
		<br>
		Please don't infect yourself!
		</div>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Background</span><br>
		Happy Monday! Today we've got some new macOS ransomware to blog about :) 
		<br>
		<br>
		Discovered by Fortinet researchers, the malware was originally discussed a posting titled <a class="inlineLink" href="https://blog.fortinet.com/2017/06/09/macransom-offered-as-ransomware-as-a-service">"MacRansom: Offered as Ransomware as a Service"</a> (by Rommel Joven (<a class="inlineLink" href="https://twitter.com/rommeljoven17">@rommeljoven17</a>), and Wayne Chin Yick Low (<a class="inlineLink" href="https://twitter.com/x9090">@x9090</a>). Go read their great report first...then come back here! 
		<br>
		<br>
		Now, as I'm supposed to be working on the white paper for my <a class="inlineLink" href="https://www.virusbulletin.com/conference/vb2017/abstracts/offensive-malware-analysis-dissecting-osxfruitfly-custom-cc-server/">VirusBulletin 2017 talk</a> let's cut to the chase and jump right in, as time is of the essence. 
		<br>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Analysis</span><br>
		OSX/MacRansom is rather lame piece of ransomware. It's not particularly advanced from a technical point of view. However, what makes it interesting is that it targets macOS and that it's offered 'as a service.' Honestly I'm not 100% sure what the latter means - but Fortinet mentions a TOR-based web portal and contacting the author (via email) in order to customize the malware. I guess that's the service the malware author provides?
		<br>
		<br>
		Anyways, on to the technical details! When the malware runs (as noted in the Fortinet writeup) the malware performs various anti-debugging and anti-VM checks. All are basic and trivial to pass:
		<ul style="list-style-type: square;">
		<li>
		The anti-debugging check occurs at address <span class="n3rdFont">0000000100001075</span>. This is a done via call to <span class="n3rdFont">ptrace</span> with the '<span class="n3rdFont">PT_DENY_ATTACH</span>' flag.
		<br>
		<br>
		This anti-debugging logic is well-known (we discussed it our last <a class="inlineLink" href="https://objective-see.com/blog/blog_0x1F.html">blog</a>), and it's even documented in Apple's man page for <span class="n3rdFont">ptrace</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 13px;">
		<span class="n3rdFont">
		man ptrace<br>
		<br>
		PTRACE(2)<br>
		NAME<br>
     	ptrace -- process tracing and debugging<br>
     	<br>
     	...
     	<br>
     	<br>
		<br>PT_DENY_ATTACH<br>
                   &nbsp;This request is the other operation used by the traced process; it allows a process that<br>
                   &nbsp;is not currently being traced to deny future traces by its parent.  All other arguments<br>
                   &nbsp;are ignored.  If the process is currently being traced, it will exit with the exit status<br>
                   &nbsp;of ENOTSUP; otherwise, it sets a flag that denies future traces.  An attempt by the parent<br>
                   &nbsp;to trace a process which has set this flag will result in a segmentation violation in<br>
                   &nbsp;the parent.<br>
        <br>
		</span>
		</div>
		<br>
		In short, <span class="n3rdFont">PT_DENY_ATTACH</span> (<span class="n3rdFont">0x1F</span>), once executed prevents a user-mode debugger from attaching to the process. However, since <span class="n3rdFont">lldb</span> is already attached to the process (thanks to the <span class="n3rdFont">--waitfor</span> argument),we can neatly sidestep this. How? Set a breakpoint on <span class="n3rdFont">pthread</span> then simply execute a <span class="n3rdFont">'thread return'</span> command. 
		<br>
		<br>
		This tells the debugger to stop executing the code within the function and execute a return command to 'exit' to the caller. Neat!
		<br>
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">
		* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1<br>
    	frame #0: 0x00007fffad499d80 libsystem_kernel.dylib`__ptrace<br>
		<br>
		<br>
		(lldb) thread return<br>
		<br>
		</span>
		</div>
		<br>
		With the anti-debugging logic out of the way, we can debug to our heart's content!
		<br>
		<br>
		</li>
		<br>
		<li>
		The first anti-VM check occurs at <span class="n3rdFont">0x00000001000010BB</span>.
		<br>
		<br>
		After decoding a string (string decoding routine at: <span class="n3rdFont">0x0000000100001F30</span>), the code invokes <span class="n3rdFont">system</span> to execute it, and exits if it returns a non-zero value. Specifically it executes '<span class="n3rdFont">sysctl hw.model|grep Mac > /dev/null</span>':
		<br>
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">		
		(lldb) x/s $rdi<br>
		0x100200060: "sysctl hw.model|grep Mac > /dev/null"<br>
		<br>
		(lldb) n<br>
		Process 7148 stopped<br>
		* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over<br>
		<br>
    	frame #0: 0x00000001000010bb macRansom`___lldb_unnamed_symbol1$$macRansom<br>
		&nbsp;&nbsp;->  0x1000010bb <+203>: callq  0x1000028fe               ; symbol stub for: system<br>
    	&nbsp;&nbsp;0x1000010c0 <+208>: testl  %eax, %eax<br>
    	&nbsp;&nbsp;0x1000010c2 <+210>: jne    0x100001b05               ; <+2837><br>
    	&nbsp;&nbsp;0x1000010c8 <+216>: movaps 0x19f1(%rip), %xmm0<br>
    <br>
		</span>
		</div> 
		<br>In a virtual machine (VM) will return a non-zero value, as the value for <span class="n3rdFont">hw.model</span> will be something like '<span class="n3rdFont">VMware7,1</span>':
		<br>
		<br>
		On native hardware: 
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">		
		$ sysctl hw.model<br>
		hw.model: MacBookAir7,2<br>
		</span>
		</div>
		<br>
		On virtualized hardware (i.e. in a VM): 
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">		
		$ sysctl hw.model<br>
		hw.model: VMware7,1<br>
		</span>
		</div>
		<br>
		To bypass this (in a debugger), step over the call to <span class="n3rdFont">system</span>, then just set <span class="n3rdFont">RAX</span> to zero:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">		
		(lldb) reg write $rax 0<br>
		<br>
		(lldb) reg read<br>
		General Purpose Registers:<br>
        &nbsp;&nbsp;rax = 0x0000000000000000<br>
        &nbsp;&nbsp;rbx = 0xfffffffffffffffe<br>
        &nbsp;&nbsp;rcx = 0x0000010000000100<br>
		</span>
		</div>
		<br>
		This will trick the malware so it continues to execute, as opposed to exiting.
		</li>
		<br>
		<li>
		The next anti-VM check occurs at <span class="n3rdFont">0x0000000100001126</span>. Again, the malware decodes a string, executes it via <span class="n3rdFont">system</span> and exits if the return value is no-zero. This check executes: '<span class="n3rdFont">echo $((`sysctl -n hw.logicalcpu`/`sysctl -n hw.physicalcpu`))|grep 2 > /dev/null</span>' to check the number of CPUs. On a VM, it appears this value is not two, so the malware will just exit to 'avoid' analysis.
		On native hardware: 
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">		
		$ sysctl -n hw.logicalcpu<br>
		4<br>
		$ sysctl -n hw.physicalcpu<br>
		2<br>
		</span>
		</div>
		<br>
		On virtualized hardware (i.e. in a VM): 
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">		
		$ sysctl -n hw.logicalcpu<br>
		2<br>
		$ sysctl -n hw.physicalcpu<br>
		2<br>
		</span>
		</div>
		<br>
		Again, if the system that the malware is executing on does not have two CPUs (which a default VM likely will not) the malware will exit. To bypass (in a debugger), again step over the call to <span class="n3rdFont">system</span>, then just set <span class="n3rdFont">RAX</span> to zero.
		</li>
		</ul>	
		Ok that takes care of the anti-analysis checks. Though we bypassed them dynamically in a debugger, they can also trivially permanently patched out. For example, one can simple patch out the <span class="n3rdFont">JNZ</span> instruction (that checks the return value of anti-VM checks with NOPs). 
		<br>
		<br>
		Assumining all the anti-analysis checks pass, or have been thwarted, the malware then persists itself as a launch agent. It does this by:
		<ol>
		<li>
		Copying itself to <span class="n3rdFont">~/Library/.FS_Store</span>	
		</li><br>
		<li>
		Decoding an embedded plist and writing it out to <span class="n3rdFont">~/Library/LaunchAgents/com.apple.finder.plist</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">	
		cat ~/Library/LaunchAgents/com.apple.finder.plist<br> 
		<br>
    	&lt;plist version=&quot;1.0&quot;&gt;<br>
    	&lt;dict&gt;<br>
    	&nbsp;&nbsp;&lt;key&gt;Label&lt;/key&gt;<br>
    	&nbsp;&nbsp;&lt;string&gt;com.apple.finder&lt;/string&gt;<br>
    	&nbsp;&nbsp;&lt;key&gt;StartInterval&lt;/key&gt;<br>
    	&nbsp;&nbsp;&lt;integer&gt;120&lt;/integer&gt;<br>
    	&nbsp;&nbsp;&lt;key&gt;RunAtLoad&lt;/key&gt;<br>
    	&nbsp;&nbsp;&lt;true/&gt;<br>
    	&nbsp;&nbsp;&lt;key&gt;ProgramArguments&lt;/key&gt;<br>
    	&nbsp;&nbsp;&lt;array&gt;<br>
    	&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;bash&lt;/string&gt;<br>
    	&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;-c&lt;/string&gt;<br>
    	&nbsp;&nbsp;&nbsp;&nbsp;&lt;string&gt;! pgrep -x .FS_Store &amp;&amp; ~/Library/.FS_Store&lt;/string&gt;<br>
    	&nbsp;&nbsp;&lt;/array&gt;<br>
    	&lt;/dict&gt;<br>
    	&lt;/plist&gt;<br>
		</span>
		</div>
		</li>
		</ol>
		As the '<span class="n3rdFont">RunAtLoad</span>'' key is set to '<span class="n3rdFont">true</span>' the malware will be automatically started whenever the user logs in. Specifically the OS will execute the value of the '<span class="n3rdFont">ProgramArguments'</span> key: <span class="n3rdFont">bash -c ! pgrep -x .FS_Store &amp;&amp; ~/Library/.FS_Store</span>. This command will first check to make sure the malware isn't already running, then will start the malware (<span class="n3rdFont">~/Library/.FS_Store</span>).
		<br>
		<br>
		Lucky for Objective-See users, <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> will alert you about this persistent attempt:
		<br><br>
		<span><img src="../images/blog/blog_0x1E/bbAlert.png" width="800" style="display:block; margin:auto;"/></span>
		<br>
		As the malware first attempts to persist before encrypting any files, clicking 'Block' on the BlockBlock alert will stop the malware before it's done any damage :)
		<br>
		<br>
		For the sake of analysis, if we allow the malware to persist itself, it will launch the copy of itself that it has just persisted (<span class="n3rdFont">~/Library/.FS_Store</span>) via:<br>
		 <span class="n3rdFont">launchctl load ~/Library/LaunchAgents/com.apple.finder.plist</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">	
		Process 7148 stopped<br>
		* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over<br>
		<br>
    	frame #0: 0x0000000100001ec6 macRansom`___lldb_unnamed_symbol1$$macRansom + 3798<br>
		&nbsp;&nbsp;->  0x100001ec6 <+3798>: callq  0x1000028fe               ; symbol stub for: system<br>
    	&nbsp;&nbsp;0x100001ecb <+3803>: movb   $0x25, -0x4733(%rbp)<br>
    	&nbsp;&nbsp;0x100001ed2 <+3810>: movb   $0x73, -0x4732(%rbp)<br>
    	&nbsp;&nbsp;0x100001ed9 <+3817>: movb   $0x0, -0x4731(%rbp)<br>
    	<br>
		(lldb) x/s $rdi<br>
		0x7fff5fbfb960: "launchctl load /Users/user/Library/LaunchAgents/com.apple.finder.plist"<br>
		</span>
		</div>
		<br>
		The orignal instance of the malware then exits, as the persistent copy is now off an running. 
		<br>
		<br>
		To continue analysis by debugging the persistent copy of the malware, execute the following in a secondary debugger window, before the original instance of the malware has launched the persistent copy (<span class="n3rdFont">~/Library/.FS_Store</span>):
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">	
		$ sudo lldb
		(lldb) process attach --name .FS_Store --waitfor<br>
		</span>
		</div>
		<br>
		This will cause the debugger to automatically attach to the persistent copy of the malware once its launched:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;">
		<span class="n3rdFont">	
		$ sudo lldb
		(lldb) process attach --name .FS_Store --waitfor<br>
		<br>
		Process 7280 stopped<br>
		* thread #1, stop reason = signal SIGSTOP<br>
		<br>
    	frame #0: 0x000000011140e000 dyld`_dyld_start<br>
		&nbsp;&nbsp;->  0x11140e000 <+0>: popq   %rdi<br>
    	&nbsp;&nbsp;0x11140e001 <+1>: pushq  $0x0<br>
    	&nbsp;&nbsp;0x11140e003 <+3>: movq   %rsp, %rbp<br>
    	&nbsp;&nbsp;0x11140e006 <+6>: andq   $-0x10, %rsp<br>
    	<br>
		Executable module set to "/Users/user/Library/.FS_Store".<br>
		Architecture set to: x86_64h-apple-macosx.<br>
		</span>
		</div>
		<br>
		As the persistent copy of the malware is, well, a copy, it executes the same anti-debugging and anti-VM logic. Then since it running in persistent state, it checks to see if it's hit a 'trigger' date. That is, it checks if the current time is past a hard-coded value. According to the Fortinet report, this is set by the malware author (part of the 'ransomware as a service'). If the current time is before this date, the malware will not encrypt (ransom) any files, and instead will exit:
		<br><br>
		<span><img src="../images/blog/blog_0x1E/timeCheck.png" width="600" style="display:block; margin:auto;"/></span>
		<br>		
		However, if the trigger date has been hit, ransoming commences! Specifically at address <span class="n3rdFont">0x000000010b4eb5f5</span>, the malware executes the following, via <span class="n3rdFont">system</span> to begin encrypting the user's files:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime; font-size: 14px;"">
		<span class="n3rdFont">
		(lldb)<br>  
		Process 7280 stopped<br>
		* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over<br>
		<br>
    frame #0: 0x000000010b4eb5f5 .FS_Store`___lldb_unnamed_symbol1$$.FS_Store + 1541<br>
	&nbsp;&nbsp;->  0x10b4eb5f5 <+1541>: callq  0x10b4ec8fe               ; symbol stub for: system<br>
    &nbsp;&nbsp;0x10b4eb5fa <+1546>: movaps 0x151f(%rip), %xmm0<br>
    &nbsp;&nbsp;0x10b4eb601 <+1553>: movaps %xmm0, -0x850(%rbp)<br>
    &nbsp;&nbsp;0x10b4eb608 <+1560>: movb   $0x0, -0x840(%rbp)<br>
    <br>
	(lldb) x/s $rdi<br>
	0x7fff547123e0: "find /Volumes ~ ! -path "/Users/user/Library/.FS_Store"  -type f -size +8c -user `whoami` -perm -u=r -exec "/Users/user/Library/.FS_Store"  {}  +"
		</span>
		</div>
		<br>
		What does this command do?
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 14px;">
		<span class="n3rdFont">	
		find /Volumes ~ ! -path "/Users/user/Library/.FS_Store"  -type f -size +8c -user `whoami` -perm -u=r -exec "/Users/user/Library/.FS_Store"  {}  +
		<br>
		</span>
		</div>
		<br>
		First, returns a list of user files that are readable and bigger than 8 bytes. Then these files will be passed (to a new instance) of the malware, in order to be encrypted! We can observe this encryption via a utility such as <span class="n3rdFont">fs_usage</span>:
		<div style="padding: 10px; margin-top:10px; background-color:black; color:lime;">
		<span class="n3rdFont">	
		access  (_W__)    /Users/user/Desktop/pleaseDontEncryptMe.txt<br>
		open    F=50      (RW____)  /Users/user/Desktop/pleaseDontEncryptMe.txt<br>
		WrData[AT1]  D=0x018906a8  /Users/user/Desktop/pleaseDontEncryptMe.txt<br>
		</span>
		</div>
		<br>
		The actual encryption routine of the malware begins at <span class="n3rdFont">0x0000000100002160</span>. This function is invoked indirectly via a call to '<span class="n3rdFont">pthread_create()</span>':
		<br><br>
		<span><img src="../images/blog/blog_0x1E/ptrace.png" width="600" style="display:block; margin:auto;"/></span>
		<br> 
		As noted by Fortinet, the encryption is not some RSA-based scheme, but rather uses a symmetric cryptographic algorithm. Unfortunately (for users) though there is a static key (<span class="n3rdFont">0x39A622DDB50B49E9</span>), Joven and Chin Yick Low state that for each file the key is "permuted with a random generated number." Moreover, this random permutation is not saved nor conveyed to the attacker. Thus it appears that once encrypted, the files are pretty much gone for good (save for a perhaps a brute force decryption attack).
		<br>
		<br>
		Good news, <a class="inlineLink" href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> can generically detect at block this attack:
		<br><br>
		<span><img src="../images/blog/blog_0x1E/rwAlert.png" width="433" style="display:block; margin:auto;"/></span>
		<br> 
		Astute readers might wonder why the alert displays '<span class="n3rdFont">find</span>' as the process responsible for the encryption (vs. the malware's <span class="n3rdFont">.FS_Store</span>). The reason is, '<span class="n3rdFont">find</span>' invokes <span class="n3rdFont">fork()</span>' then '<span class="n3rdFont">execvp()</span>' to execute the command that is specified via '<span class="n3rdFont">-exec</span>' option. RansomWhere? uses the OpenBSM auditing capabilities of macOS to track process creations - and while such auditing generates process events for <span class="n3rdFont">fork()</span>, <span class="n3rdFont">exec()</span> and <span class="n3rdFont">execve()</span>, it does not (AFAIK) support <span class="n3rdFont">execvp()</span>. As such, while the <span class="n3rdFont">fork()</span> process event it detected (and the path set to <span class="n3rdFont">/usr/bin/find</span>), the subsequent <span class="n3rdFont">execvp()</span> call is not audited. Thus the path stays as <span class="n3rdFont">/usr/bin/find</span> :/ 
		<br>
		<br>
		One work around would be for RansomWhere? to re-query the OS later, say whenever it detects the creation of an encrypted file. At this point, the process (i.e '<span class="n3rdFont">find</span>') will have <span class="n3rdFont">execvp()</span>'d and thus the 'correct' path should be returned. Or Apple could just fix the auditing subsystem :P ... I mean, this is kinda an auditing bypass?! I'll file a radar, ...then pray. 
		<br>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Conclusions</span><br>
		Luckily for users macOS malware is still rather rare. However, from a technical point of view there's no reason for this. Macs are 'easy' to infect and writing a piece of code that encrypts user files is trivial. 
		<br>
		Though unlikely, to check if you're infected, look for the following: 
		<ul style="list-style-type: square;">
		<li>a process named <span class="n3rdFont">'.FS_Store'</span> (that's running out of (<span class="n3rdFont">~/Library</span>)
		</li><br>
		<li>a plist file: <span class="n3rdFont">'~/Library/LaunchAgents/com.apple.finder.plist</span></li><br>
		</li>
		</ul>
		In this short blog post, we tore apart <span class="n3rdFont">OSX/MacRansom</span> - a basic piece of macOS new ransomware. Luckily tools such as BlockBlock and RansomWhere? did their job - generally detecting the ransomware's persistence and encryption. Kinda neat, huh? <3
		<br>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
		<br>
		</span>
		</div>
		<br>
		<br>
		</span>
		</div>
	</section>	
</div>	

<!-- footer, copyright notice and social media icons -->
<nav role="footer">
<ul>
	<li class="copyright">&copy; 2017 objective-see llc</li>
	<li><a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon ss-social">&#x2709;</span></a></li>
	<li><a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon ss-social">&#xF611;</span></a></li>
	<li><a href="../rss.xml" class="menubutton icon"><span class="ss-icon">&#xE310;</span></a></li>
	<li>
        <a href="https://www.patreon.com/bePatron?u=4857001" class="menubutton icon donate" style="font-size: 18px; padding-top: 14px;">donate!</a>
    </li>
</ul>
</nav>

</body>
</html>
