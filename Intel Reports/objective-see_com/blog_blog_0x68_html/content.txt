<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x68/timeline.png />
<meta name="twitter:title" content=Made&#32;In&#32;America:&#32;Green&#32;Lambert&#32;for&#32;OS&#32;X />
<meta name="twitter:description" content= />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Made&#32;In&#32;America:&#32;Green&#32;Lambert&#32;for&#32;OS&#32;X />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x68/timeline.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Made In America: Green Lambert for OS X</div>
  <div class="blogSubTitle"></div>
  <div class="blogDate" style="padding-top:10px;">by: Runa Sandvik / October 1, 2021</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
    <div class="download-link" style="padding: 10px; margin-left: 20px; ">
        <a href="https://1password.com/?utm_medium=parnter&utm_source=Objective-See&utm_campaign=gp&utm_content=sponsorship" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/1Password.png" height="50px">
            <div class="logo-title" style="text-align: center;">...the world’s most-loved password manager.</div>
        </a>
    </div>
    <div class="download-link" style="padding: 10px; margin-left: 15px; ">
        <a href="http://kandji.io/" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/kandji.png" height="50px">
            <div class="logo-title" style="text-align: center;">...next-generation apple enterprise management.</div>
        </a>
    </div>
    <br>
    <br>
    <div class="download-link" style="padding: 10px;">
        <a href="https://mosyle.com" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/mosyle.png" height="55px">
        <div class="logo-title" style="text-align: center;">...modern apple mdm & security for enterprise &amp; education.</div>
        </a>
    </div>
    <div class="download-link" style="padding: 10px;">
        <a href="https://www.jamf.com?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/jamf.png" height="55px">
        <div class="logo-title" style="text-align: center;">...the standard in apple enterprise management.</div>
        </a>
    </div>
    <br>
    <br>
    <div class="download-link" style="padding: 10px;">
        <a href="https://macpaw.com/cleanmymac" style="border: 0px;">
            <img src="https://objective-see.com/images/friends/cleanmymac.png" height="55px">
        <div class="logo-title" style="text-align: center;">...an all-in-one package to awesomize your Mac.</div>
        </a>
    </div>
    </center>
      <br>
      <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
</div>
<br>
<br>
<br>
<div class="note">
This guest blog post, was written by <a class="inlineLink" href="https://twitter.com/runasand">Runa Sandvik</a>, a noted security researcher who works on digital security for journalists and other high-risk people.
<br>
<br>
<center>Mahalo for sharing Runa! 🤩</center>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve uploaded an <a href="https://objective-see.com/downloads/malware/GreenLambert.zip">OSX.GreenLambert sample</a> (password: infect3d).</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...please don’t infect yourself! 
</div>
</div>
<br>
<h3 id="background">Background</h3>
<p>In March 2017, WikiLeaks began publishing thousands of files detailing the CIA&rsquo;s spying operations and hacking tools. The leak, known as <a href="https://wikileaks.org/ciav7p1/cms/index.html">Vault 7</a>, was the largest disclosure of classified information in the agency&rsquo;s history. In April, Symantec <a href="https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=7ca2e331-2209-46a8-9e60-4cb83f9602de&amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;tab=librarydocuments">publicly linked</a> Vault 7  to an advanced threat actor named Longhorn. Kaspersky then announced it tracks the same actor as <a href="https://securelist.com/unraveling-the-lamberts-toolkit/77990/">The Lamberts</a>, and revealed the existence of an OS X implant called <em>Green Lambert</em>.</p>
<p>Kaspersky&rsquo;s research showed that <a href="https://securelist.com/unraveling-the-lamberts-toolkit/77990/">The Lamberts’ toolkit</a> includes “network-driven backdoors, several generations of modular backdoors, harvesting tools, and wipers.” A <a href="https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2017/04/07180034/Lamberts.png">timeline of actvitiy</a> for tools used by The Lamberts shows that &ldquo;Green Lambert is the oldest and longest-running in the family.&rdquo; Green Lambert is described as an “active implant” and &ldquo;the only one where non-Windows variants have been found.&rdquo;</p>
<p>This blog post, along with the [Made in America](<a href="https://objectivebythesea.com/v4/talks.html#Made">https://objectivebythesea.com/v4/talks.html#Made</a> In America) talk at <a href="https://objectivebythesea.com/v4/index.html">Objective By The Sea v.4.0</a>, provides a comprehensive analysis of Green Lambert for OS X. I&rsquo;ll share how I approached the research, the tools I used, the things I figured out, and the things I didn&rsquo;t. I&rsquo;ll also look at whether the developers followed the agency&rsquo;s guidelines for <a href="https://twitter.com/runasand/status/1424759611157057544">development tradecraft</a>. Some might ask why I&rsquo;d look at an implant this old? Doing so helps us better understand the capabilities of its sophisticated creator, past and present. And, if we&rsquo;re being honest: I could, so I did.</p>
<h3 id="victimology">Victimology</h3>
<p>We don&rsquo;t know how this implant makes it into a target system; the type of system it&rsquo;s used on; or the geographical location of a typical target. <a href="https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=7ca2e331-2209-46a8-9e60-4cb83f9602de&amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;tab=librarydocuments">Symantec</a> said that the actor has infiltrated governments, “in addition to targets in the financial, telecoms, energy, aerospace, information technology, education, and natural resources sectors.” <a href="https://ti.qianxin.com/blog/articles/network-weapons-of-cia/">QI-ANXIN</a> said the actor has previously “targeted personnel and institutions in China.”</p>
<p>A version of Green Lambert for OS X was first uploaded to <a href="https://www.virustotal.com/gui/file/af7c395426649c57e44eac0bb6c6a109ac649763065ff5b2b23db71839bac655/detection">VirusTotal</a>, from Russia, in September 2014. Kaspersky <a href="https://www.virustotal.com/gui/file/af7c395426649c57e44eac0bb6c6a109ac649763065ff5b2b23db71839bac655/detection/f-af7c395426649c57e44eac0bb6c6a109ac649763065ff5b2b23db71839bac655-1477597496">marked it</a> as malicious in October 2016. AegisLab, a security firm based in Taiwan, <a href="https://www.virustotal.com/gui/file/af7c395426649c57e44eac0bb6c6a109ac649763065ff5b2b23db71839bac655/detection/f-af7c395426649c57e44eac0bb6c6a109ac649763065ff5b2b23db71839bac655-1478101948">followed</a> a couple of weeks later. VirusTotal identified that the implant calls itself <em>GrowlHelper</em>, possibly referencing the popular <a href="https://growl.github.io/growl/">Growl</a> notification system for OS X from 2004.</p>
<h3 id="triage">Triage</h3>
<p>Using static analysis methods, we can triage the implant without running it. For example, we can determine that <code>GrowlHelper</code> is a small, unsigned Mach-O executable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file GrowlHelper
</span></span><span style="display:flex;"><span>GrowlHelper: Mach-O executable i386
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ codesign -dvv GrowlHelper
</span></span><span style="display:flex;"><span>GrowlHelper: code object is not signed at all
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ du -h GrowlHelper
</span></span><span style="display:flex;"><span>208K
</span></span></code></pre></div><p>We can use <code>otool -L</code> to print a list of linked libraries. This can sometimes provide insight into the capabilities of the malware, but doesn&rsquo;t appear to be particularly helpful here. Note the few dependencies in the list below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ otool -L GrowlHelper
</span></span><span style="display:flex;"><span>/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 
</span></span><span style="display:flex;"><span>/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices
</span></span><span style="display:flex;"><span>/System/Library/Frameworks/Security.framework/Versions/A/Security 
</span></span><span style="display:flex;"><span>/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration
</span></span><span style="display:flex;"><span>/usr/lib/libSystem.B.dylib
</span></span><span style="display:flex;"><span>/usr/lib/libgcc_s.1.dylib
</span></span></code></pre></div><p>What&rsquo;s more interesting is the output of <code>strings -</code>. This tool can also provide insight into the capabilities of the malware.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strings - GrowlHelper
</span></span><span style="display:flex;"><span>LoginItem
</span></span><span style="display:flex;"><span>LaunchAgent
</span></span><span style="display:flex;"><span>/Library/LaunchDaemons
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>www.google.com
</span></span><span style="display:flex;"><span>Error from libevent when adding event <span style="color:#66d9ef">for</span> DNS server
</span></span><span style="display:flex;"><span>1.3a
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>_SecKeychainFindInternetPassword
</span></span><span style="display:flex;"><span>_SecKeychainItemCopyAttributesAndData
</span></span><span style="display:flex;"><span>_kSCPropNetProxiesHTTPProxy
</span></span><span style="display:flex;"><span>_kSCPropNetProxiesProxyAutoConfigEnable
</span></span><span style="display:flex;"><span>_kSCPropNetProxiesProxyAutoConfigURLString
</span></span></code></pre></div><p>The references to <code>LoginItem</code>, <code>LaunchAgent</code> and <code>LaunchDaemons</code> suggest this implant has different options for gaining persistence on a system. In other words: how the implant ensures it&rsquo;s executed again if the system is rebooted. Check out <a href="https://www.sentinelone.com/blog/how-malware-persists-on-macos/">this post</a> by <a href="https://twitter.com/philofishal">Phil Stokes</a> at SentinelOne for an overview of malware persistence techniques seen in the wild.</p>
<p>The following three lines appear to be related to <a href="https://libevent.org/">libevent</a>, the same event notification library that is used by <a href="https://www.torproject.org/">Tor</a>. The open-source library is very popular now, but was perhaps less known back when this implant was created. The reference to <code>1.3a</code> may shed some light on the development timeline for this implant: version 1.3a of libevent <a href="https://libevent.org/old-releases.html">was released</a> in February 2007.</p>
<p>The references to <code>Keychain</code>, <code>Proxies</code> and <code>AutoConfig</code> suggest this implant determines proxy settings on the target system. According to <a href="https://blog.adium.im/2006/01/having-trouble-building/">this post</a>, <code>kSCPropNetProxiesProxyAutoConfigEnable</code> and <code>kSCPropNetProxiesProxyAutoConfigURLString</code> were added in Xcode version 2.2. This version <a href="https://www.macworld.com/article/177734/xcode-6.html">was released</a> in November 2005. Could be another clue about the development timeline.</p>
<h3 id="os-x-version">OS X Version</h3>
<p>The static analysis methods we used were helpful, but we&rsquo;re going to want to see how the implant behaves on a system. For that, we&rsquo;ll turn to dynamic analysis in a virtual machine. But which version of OS X does the implant need? We know that it&rsquo;s a 32-bit executable, and the latest macOS is 64-bit only. We can narrow this down further by looking at symbols using <code>nm</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ nm GrowlHelper
</span></span><span style="display:flex;"><span>         U _CFArrayAppendValue
</span></span><span style="display:flex;"><span>         U _CFArrayCreateMutable
</span></span><span style="display:flex;"><span>         U _CFArrayCreateMutableCopy
</span></span><span style="display:flex;"><span>         U _CFArrayGetCount
</span></span><span style="display:flex;"><span>         U _CFArrayGetValueAtIndex
</span></span><span style="display:flex;"><span>         U _CFArrayRemoveValueAtIndex
</span></span><span style="display:flex;"><span>         U _CFDictionaryCreate
</span></span><span style="display:flex;"><span>         U _CFDictionaryGetValue
</span></span><span style="display:flex;"><span>         U _CFGetTypeID
</span></span><span style="display:flex;"><span>         U _CFNumberGetTypeID
</span></span><span style="display:flex;"><span>         ...
</span></span></code></pre></div><p>The next step is a bit tedious, but does provide helpful information. To better understand what these symbols represent, we can look them up in Apple’s <a href="https://developer.apple.com/">Developer Documentation</a>. Not only will we be able to learn how and where a given symbol is used, but we can also see when it was deprecated. With that information, we can determine which version of OS X the implant will run on.</p>
<ul>
<li>FSGetCatalogInfo is <a href="https://developer.apple.com/documentation/coreservices/1565356-fsgetcataloginfo/">available</a> in macOS 10.0 - 10.8</li>
<li>FSPathMakeRef is <a href="https://developer.apple.com/documentation/coreservices/1565195-fspathmakeref/">available</a> in macOS 10.0 - 10.8</li>
<li>FSSetCatalogInfo is <a href="https://developer.apple.com/documentation/coreservices/1566580-fssetcataloginfo/">available</a> in macOS 10.0 - 10.8</li>
<li>SecKeychainSearchCopyNext is <a href="https://developer.apple.com/documentation/security/1515362-seckeychainsearchcopynext/">available</a> in macOS 10.0 - 10.7</li>
<li>SecKeychainSearchCreateFromAttributes is <a href="https://developer.apple.com/documentation/security/1515366-seckeychainsearchcreatefromattri/">available</a> in macOS 10.0 - 10.7</li>
<li>SecKeychainSetUserInteractionAllowed is <a href="https://developer.apple.com/documentation/security/1396453-seckeychainsetuserinteractionall">available</a> in macOS 10.2 - 12.0</li>
</ul>
<p>This means that the implant will run on (at least) 10.7: OS X Lion.</p>
<p><em>Note: I confirmed the implant runs on 10.8. It probably runs on any OS X that supports 32-bit executables.</em></p>
<h3 id="development--use-timeline">Development / Use Timeline</h3>
<p>Let&rsquo;s look at a potential timeline for the development and use of this implant.</p>
<img src="../images/blog/blog_0x68/timeline.png" width="100%" />
<p>Growl was released in 2004 and retired in 2020. Xcode version 2.2 was released in November 2005, while libevent 1.3a was released in February 2007. OS X 10.7 was released in 2011, and 10.8 in 2012. The implant first appeared on VirusTotal in late 2014. Court records <a href="https://www.justice.gov/usao-sdny/pr/joshua-adam-schulte-charged-unauthorized-disclosure-classified-information-and-other">show</a> Vault 7 was stolen sometime in early 2016 and published by WikiLeaks a year later. Based on these datapoints, it&rsquo;s likely the implant was created and used between 2007 and (at least) 2013.</p>
<h3 id="setting-up-a-virtual-machine">Setting Up a Virtual Machine</h3>
<p>As of June 2021, OS X 10.7 is <a href="https://support.apple.com/kb/DL2077?locale=en_US">available</a> for free from Apple. You can also do what I did: buy an old MacBook on eBay for $95.</p>
<p>You may have to unpack the <code>.dmg</code> you get from Apple to get a file that&rsquo;ll work with your virtual machine software. If so, try:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ hdiutil attach InstallMacOSX.dmg
</span></span></code></pre></div><p>Click on <em>Install Mac OS X</em> on the Desktop and use <a href="https://theunarchiver.com/">The Unarchiver</a> (or another tool) to extract <code>InstallMacOSX.pkg</code> to a temporary folder. Go into this folder, click on the new copy of <code>InstallMacOSX.pkg</code> and select <em>Show Package Contents</em>. Copy  <code>InstallESD.dmg</code> to where you keep your virtual machine images, and use that instead.</p>
<p>We&rsquo;re going to use <a href="https://lldb.llvm.org/">lldb</a>, the default debugger, to execute the implant, modify registers, and examine memory contents. OS X 10.7 doesn&rsquo;t include Xcode by default, but a quick Google search suggests we need version 4.6.3 and can get it from Apple’s <a href="https://developer.apple.com/download/">Developer Downloads</a> page. After installing Xcode and confirming that <code>lldb</code> is working, we isolate the machine and create a clean snapshot.</p>
<h3 id="persistence">Persistence</h3>
<p>Phil Stokes at SentinelOne <a href="https://www.sentinelone.com/blog/how-malware-persists-on-macos/">wrote</a> that “the most common way malware persists on macOS is via a LaunchAgent. Each user on a Mac can have a <code>LaunchAgents</code> folder in their own Library folder to specify code that should be run every time that user logs in.” We can confirm this is the case with Green Lambert by running the implant, then checking the user&rsquo;s <code>LaunchAgents</code> folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls ~/Library/LaunchAgents
</span></span><span style="display:flex;"><span>com.apple.GrowlHelper.plist
</span></span></code></pre></div><p>Once installed, it&rsquo;ll delete the original <code>GrowlHelper</code> file from the system. This is where our VM snapshot comes in handy.</p>
<p>From Phil&rsquo;s post, we know that &ldquo;LaunchAgents take the form of property list files, which can either specify a file to execute or can contain their own commands to execute directly.”  We can confirm this by looking at <code>com.apple.GrowlHelper.plist</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat ~/Library/LaunchAgents/com.apple.GrowlHelper.plist
</span></span><span style="display:flex;"><span>&lt;?xml version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.0&#34;</span> encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>?&gt;
</span></span><span style="display:flex;"><span>&lt;!DOCTYPE plist PUBLIC <span style="color:#e6db74">&#34;-//Apple Computer//DTD PLIST 1.0//EN&#34;</span> <span style="color:#e6db74">&#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;plist version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.0&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;dict&gt;
</span></span><span style="display:flex;"><span>	&lt;key&gt;Label&lt;/key&gt;
</span></span><span style="display:flex;"><span>	&lt;string&gt;com.apple.GrowlHelper&lt;/string&gt;
</span></span><span style="display:flex;"><span>	&lt;key&gt;ProgramArguments&lt;/key&gt;
</span></span><span style="display:flex;"><span>	&lt;array&gt;
</span></span><span style="display:flex;"><span>		&lt;string&gt;/Users/user/Library/Caches/com.apple.Growl.GrowlHelper/5d0d/GrowlHelper&lt;/string&gt;
</span></span><span style="display:flex;"><span>		&lt;string&gt;-f&lt;/string&gt;
</span></span><span style="display:flex;"><span>	&lt;/array&gt;
</span></span><span style="display:flex;"><span>	&lt;key&gt;RunAtLoad&lt;/key&gt;
</span></span><span style="display:flex;"><span>	&lt;true/&gt;
</span></span><span style="display:flex;"><span>	&lt;key&gt;OnDemand&lt;/key&gt;
</span></span><span style="display:flex;"><span>	&lt;false/&gt;
</span></span><span style="display:flex;"><span>&lt;/dict&gt;
</span></span><span style="display:flex;"><span>&lt;/plist&gt;
</span></span></code></pre></div><p>The <code>ProgramArguments</code> tell us where <code>GrowlHelper</code> is installed and that it takes at least one command line argument (<code>-f</code>). The <code>RunAtLoad</code> key confirms the implant will run every time the user logs in. To get an overview of the installation process, we can monitor file system activity for <code>GrowlHelper</code> events.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo fs_usage -w -f filesys &gt; filesys.out
</span></span><span style="display:flex;"><span>$ sudo grep GrowlHelper filesys.out
</span></span><span style="display:flex;"><span>execve      /Users/user/GrowlHelper     0.015273 W bash.2848
</span></span><span style="display:flex;"><span>execve      /Users/user/GrowlHelper     0.000383   GrowlHelper.2851
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>open        /Users/user/.profile        0.000018   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.bash_profile   0.000015   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.bash_login     0.000015   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.bashrc         0.000014   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.cshrc          0.000014   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.login          0.000014   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.tcshrc         0.000014   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.xsession       0.000007   GrowlHelper.2851
</span></span><span style="display:flex;"><span>open        /Users/user/.xinitrc        0.000006   GrowlHelper.2851
</span></span></code></pre></div><p>We see that <code>GrowlHelper</code> has a handful of options for maintaining persistence, in case the LaunchAgent is removed. In one case, the implant uses a <code>.profile</code> file to ensure it&rsquo;s launched whenever the user opens the Terminal. (Path to <code>GrowlHelper</code> was lightly edited due to space constraints.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat ~/.profile
</span></span><span style="display:flex;"><span>GrowlHelper<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>/path/to/com.apple.Growl.GrowlHelper/5d0d/GrowlHelper 2&gt;&amp;1<span style="color:#e6db74">`</span> <span style="color:#75715e"># Automatic GrowlHelper. Do not remove</span>
</span></span></code></pre></div><h3 id="self-update">Self-Update</h3>
<p>We can compare how <code>GrowlHelper</code> behaves when the system is offline v. online. Here are the files it created in an isolated VM.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file /Users/offline/Library/Caches/com.apple.Growl.GrowlHelper/5d0d/*
</span></span><span style="display:flex;"><span>GrowlHelper:	Mach-O executable i386
</span></span><span style="display:flex;"><span>db:						Berkeley DB 1.85 <span style="color:#f92672">(</span>Hash, version 2, native byte-order<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>fifo:					socket
</span></span><span style="display:flex;"><span>queue:				directory
</span></span></code></pre></div><p>And here are the files <code>GrowlHelper</code> created on that old MacBook I got from eBay.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file /Users/online/Library/Caches/com.apple.Growl.GrowlHelper/5d0d/*
</span></span><span style="display:flex;"><span>GrowlHelper:						Mach-O executable i386 
</span></span><span style="display:flex;"><span>Software Update Check: 	Mach-O executable i386
</span></span><span style="display:flex;"><span>db:											Berkeley DB 1.85 <span style="color:#f92672">(</span>Hash, version 2, native byte-order<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>fifo:										socket
</span></span><span style="display:flex;"><span>queue:									directory
</span></span></code></pre></div><p>It looks like <code>GrowlHelper</code> creates an executable named <code>Software Update Check</code> when it thinks it&rsquo;s online. I was pretty excited when I first found this, but quickly realized it just drops a copy of itself with a different name.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>3fcdbd3c5fa34fb8e8d58038fa1d1f13d37e8a4b GrowlHelper
</span></span><span style="display:flex;"><span>3fcdbd3c5fa34fb8e8d58038fa1d1f13d37e8a4b Software Update Check
</span></span></code></pre></div><p>It&rsquo;s possible that <code>Software Update Check</code> is used to update <code>GrowlHelper</code>.</p>
<h3 id="command-line-arguments">Command Line Arguments</h3>
<p>We know where <code>GrowlHelper</code> is installed and that it takes at least one command line argument (<code>-f</code>). With this information, we can identify other arguments by manually looping through options a - z and A - Z on the command line. The output below is the result of doing this try/fail experiment in a VM.</p>
<table>
<thead>
<tr>
<th>Args</th>
<th>Meaning</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>??</td>
<td>Prints: ** Commands will be processed immediately **</td>
</tr>
<tr>
<td>d</td>
<td>??</td>
<td>If GrowlHelper is installed, drops Software Update Check</td>
</tr>
<tr>
<td>f</td>
<td>Default</td>
<td>Persists as LaunchAgent, creates: GrowlHelper, db, fifo, queue</td>
</tr>
<tr>
<td>p:</td>
<td>??</td>
<td>Prints: GrowlHelper: option requires an argument &ndash; p</td>
</tr>
<tr>
<td>s</td>
<td>??</td>
<td>Runs without persisting, creates: db, fifo, queue</td>
</tr>
<tr>
<td>L</td>
<td>??</td>
<td>Runs without persisting, does not create files</td>
</tr>
<tr>
<td>N</td>
<td>??</td>
<td>Persists as LaunchAgent, creates: GrowlHelper, Software Update Check, db</td>
</tr>
</tbody>
</table>
<p><a href="https://www.hopperapp.com/">Hopper Disassembler</a> is a tool that helps you disassemble, decompile and debug malware. There&rsquo;s a free version, and you can get a personal license for $99. Using Hopper, we can confirm the arguments we found by looking for <code>argc</code>, <code>argv</code>, and <code>getopt</code>.</p>
<img src="../images/blog/blog_0x68/hopper_cmd_args.png" width="100%" />
<p>By using Hopper&rsquo;s pseudo-code mode, we can see the full set of possible command line arguments.</p>
<img src="../images/blog/blog_0x68/hopper_pseudo_cmd_args.png" width="100%" />
<h3 id="entry-points">Entry Points</h3>
<p>When you open <code>GrowlHelper</code> in Hopper, you&rsquo;ll see that it has multiple entry points: <code>EntryPoint_1</code> through <code>EntryPoint_21</code>. These entry points are called when <code>GrowlHelper</code> starts executing, before the main entry point at 0x2cd8. <code>GrowlHelper</code> will use these entry points to initialize certain functionality. QI-ANXIN detailed these entry points in <a href="https://ti.qianxin.com/blog/articles/network-weapons-of-cia/">this</a> post / this screenshot below.</p>
<img src="../images/blog/blog_0x68/ida_entry_points.png" width="100%" />
<p>It appears <code>GrowlHelper</code> has a preflight checklist of sorts: it initializes functionality, figures out what it needs, deletes the rest.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo grep GrowlHelper filesys.out
</span></span><span style="display:flex;"><span>mkdir       /Users/user/.DS_Info       											0.000083   GrowlHelper.2851
</span></span><span style="display:flex;"><span>mkdir				/Users/user/.DS_Info/5d0d												0.000044   GrowlHelper.2851
</span></span><span style="display:flex;"><span>mkdir				/Users/User/Library/Caches/com.apple.advanced		0.000066   GrowlHelper.2851
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rmdir				/Users/user/.DS_Info/5d0d												0.000109 W GrowlHelper.2851
</span></span><span style="display:flex;"><span>rmdir				/Users/user/.DS_Info 														0.000240 W GrowlHelper.2851
</span></span><span style="display:flex;"><span>rmdir				/Users/User/Library/Caches/com.apple.advanced		0.000068   GrowlHelper.2851
</span></span></code></pre></div><h3 id="decrypting-a-string">Decrypting a String</h3>
<p>Given the author, it&rsquo;s no surprise that most strings in this implant are encrypted. The implant appears to handle encrypted strings in a bunch of different ways, which makes it challenging to automate decryption. Hopper has done some of the analysis work for us, allowing us to at least manually decrypt strings with <code>lldb</code>. Here&rsquo;s one example.</p>
<img src="../images/blog/blog_0x68/hopper_decrypt.png" width="100%" />
<p>In the screenshot above, we have:</p>
<ul>
<li>The address for the program counter / call to the decryption routine (0x1549b)</li>
<li>The values for ecx (0x01), edx (0x31e80), eax (0x2d487)</li>
<li>The address after the decryption routine, which we&rsquo;ll use as a breakpoint for <code>lldb</code> (0x154a0)</li>
</ul>
<p>We load the implant into the debugger using <code>lldb GrowlHelper</code>, and decrypt the string:</p>
<img src="../images/blog/blog_0x68/lldb_decrypt.png" width="100%" />
<h3 id="decrypting-more-strings">Decrypting More Strings</h3>
<p>Manually decrypting strings turned into a rabbit hole for me, but that&rsquo;s OK. I&rsquo;m sure there are ways to do this faster, but I have to admit I really enjoyed the process of learning to do this manually. Here are the strings I&rsquo;ve decrypted so far, minus duplicates.</p>
<table>
<thead>
<tr>
<th>pc</th>
<th>String</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xe8a0</td>
<td>/tmp</td>
</tr>
<tr>
<td>0xe9ba</td>
<td>upload_dir</td>
</tr>
<tr>
<td>0xe9e2</td>
<td>upload_key</td>
</tr>
<tr>
<td>0xea23</td>
<td>upload_header</td>
</tr>
<tr>
<td>0xed50</td>
<td>52</td>
</tr>
<tr>
<td>0x185ef</td>
<td>download</td>
</tr>
<tr>
<td>0x187d7</td>
<td>?</td>
</tr>
<tr>
<td>0x18eae</td>
<td>InternetOpen</td>
</tr>
<tr>
<td>0x19121</td>
<td>** Commands will be processed immediately **</td>
</tr>
<tr>
<td>0x191f6</td>
<td>login.php</td>
</tr>
<tr>
<td>0x19216</td>
<td>getconf.php</td>
</tr>
<tr>
<td>0x19236</td>
<td>s|%s|%s|%s upload.gethostname</td>
</tr>
<tr>
<td>0x195be</td>
<td>show.php</td>
</tr>
<tr>
<td>0xa2f6</td>
<td>ConfigInitdFile</td>
</tr>
<tr>
<td>0x2ce6f</td>
<td>/etc/init.d</td>
</tr>
<tr>
<td>0xa762</td>
<td>/etc/rc.d.File</td>
</tr>
<tr>
<td>0xaccc</td>
<td>.xinitrc</td>
</tr>
<tr>
<td>0xae0b</td>
<td>ConfigPersistXsessionFile</td>
</tr>
<tr>
<td>0xae23</td>
<td>ConfigPersistXSession</td>
</tr>
<tr>
<td>0xaec9</td>
<td>.xsession</td>
</tr>
<tr>
<td>0xaf39</td>
<td>ConfigPersistXinitRCFile</td>
</tr>
<tr>
<td>0xaf51</td>
<td>ConfigPersistXInitRC</td>
</tr>
<tr>
<td>0xc8f0</td>
<td>proxy_type</td>
</tr>
<tr>
<td>0xc916</td>
<td>proxy_url</td>
</tr>
<tr>
<td>0xc948</td>
<td>Could not set proxy</td>
</tr>
<tr>
<td>0xca62</td>
<td><a href="http://www.google.com/">http://www.google.com</a></td>
</tr>
<tr>
<td>0xce05</td>
<td>no proxy_url</td>
</tr>
<tr>
<td>0x11309</td>
<td>index.html</td>
</tr>
<tr>
<td>0x11816</td>
<td>hps.txt</td>
</tr>
<tr>
<td>0x11d35</td>
<td>NODELETE</td>
</tr>
<tr>
<td>0x11d64</td>
<td>DELETE</td>
</tr>
<tr>
<td>0x11d93</td>
<td>SECDELETE</td>
</tr>
<tr>
<td>0x1218d</td>
<td>NOWAIT</td>
</tr>
<tr>
<td>0x121c0</td>
<td>WAIT</td>
</tr>
<tr>
<td>0x121f1</td>
<td>WAIT_FOREVER</td>
</tr>
<tr>
<td>0x1225a</td>
<td>/bin/sh -c</td>
</tr>
<tr>
<td>0x132b1</td>
<td>Version</td>
</tr>
<tr>
<td>0x13c1e</td>
<td>Service</td>
</tr>
<tr>
<td>0x147f8</td>
<td>Proxy</td>
</tr>
<tr>
<td>0x14b1e</td>
<td>ProxyUser</td>
</tr>
<tr>
<td>0x1549b</td>
<td>hversion.txt</td>
</tr>
<tr>
<td>0x15c12</td>
<td>HHLogEntry</td>
</tr>
<tr>
<td>0x15c5b</td>
<td>HHLogHead</td>
</tr>
<tr>
<td>0x15e2d</td>
<td>HHLogTail</td>
</tr>
<tr>
<td>0x1a427</td>
<td>hh_last_attempt</td>
</tr>
<tr>
<td>0x1a530</td>
<td>localhost_sock_create(pipe)</td>
</tr>
<tr>
<td>0x1a8ab</td>
<td>hh_last_attempt</td>
</tr>
<tr>
<td>0x649e</td>
<td>No LP configured</td>
</tr>
<tr>
<td>0x6a66</td>
<td>16</td>
</tr>
</tbody>
</table>
<h3 id="listening-post">Listening Post</h3>
<p>One of the decrypted strings is <code>No LP configured</code>. LP likely stands for <em>Listening Post</em>, a military term used in the context of signals intelligence and reconnaissance. Where other types of malware would likely use the terms <em>C2</em> or <em>Command &amp; Control</em>, the CIA and the NSA use LP. One Vault 7 document is titled <a href="https://wikileaks.org/ciav7p1/cms/page_17760568.html">Listening Post (LP) Creation</a>, and another details <a href="https://wikileaks.org/ciav7p1/cms/page_3375129.html">requirements</a> for a Listening Post.</p>
<h3 id="configuration-files">Configuration Files</h3>
<p>Some of the decrypted strings refer to <code>.html</code>, <code>.php</code>, and <code>.txt</code> files, but I&rsquo;m unable to access them. But we know that Kaspersky found &ldquo;a hostname and an IP address&rdquo; hardcoded in the implant. And researchers at QI-ANXIN determined the implant talks to the Listening Post through <code>login.php</code> and <code>getconf.php</code>, and downloads follow-up code through <code>getfile.php</code>.</p>
<h3 id="configuration-survey">Configuration? Survey?</h3>
<p>If you dig around in Hopper and use pseudo-code mode from time to time, you&rsquo;ll likely find some interesting bits of information. When I stumbled upon the string <code>Version=1.2.0</code>, I decided to see where else <code>=</code> was referenced. To do that, highlight 0x132b8 as shown below and hit <code>x</code>.</p>
<img src="../images/blog/blog_0x68/hopper_equals.png" width="100%" />
<p>The list of references looks like this, with the current one selected.</p>
<img src="../images/blog/blog_0x68/hopper_references.png" width="100%" />
<p>We can then go through all these references, decrypt the strings, and get an output that looks like this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>uname<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>Time<span style="color:#f92672">=</span>%Y<span style="color:#ae81ff">\%</span>m<span style="color:#ae81ff">\%</span>d %H:%M:%S Z
</span></span><span style="display:flex;"><span>Uptime<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>Version<span style="color:#f92672">=</span>1.2.0
</span></span><span style="display:flex;"><span>PID<span style="color:#f92672">=</span>
</span></span></code></pre></div><p>The output lists information from the target system (e.g. <code>uname</code>) and information from the implant (e.g. <code>Version</code>). This could be a combination of a configuration file and system survey.</p>
<h3 id="network-traffic">Network Traffic</h3>
<p>We can monitor the network traffic on our OS X 10.7 system using <code>tcpdump</code> and then view the output in Wireshark.</p>
<p>This gives us the hardcoded hostname <code>notify[.]growlupdate[.]com</code>. Very clever given the name of the executable.</p>
<img src="../images/blog/blog_0x68/net_hostname.png" width="100%" />
<p>And the hardcoded IP address: <code>94[.]242[.]252[.]68</code>.</p>
<img src="../images/blog/blog_0x68/net_ip.png" width="100%" />
<h3 id="hostname">Hostname</h3>
<p><a href="https://www.google.com/search?q=notify.growlupdate.com">Google</a> and the <a href="https://waybackmachine.com/">Wayback Machine</a> don&rsquo;t have any results for the domain name. If we look it up on <a href="https://www.virustotal.com/gui/domain/notify.growlupdate.com/relations">VirusTotal</a>, we see that it was first submitted in October 2016. But if we look up the domain on <a href="https://crt.sh/">crt.sh</a>, we see that an SSL certificate was created on October 29, 2013. The domain may have been purchased earlier, but this at least suggests the domain was active in late 2013. This matches the timeline we created earlier, as well as <a href="https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2017/04/07180034/Lamberts.png">Kaspersky&rsquo;s timeline</a> of activity by The Lamberts.</p>
<img src="../images/blog/blog_0x68/ssl.png" width="100%" />
<p>Note: Kaspersky sinkholed the domain to <code>95[.]211[.]172[.]143</code> between October 1, 2016 and October 2, 2017.</p>
<h3 id="development-tradecraft-dos-and-donts">Development Tradecraft DOs and DON&rsquo;Ts</h3>
<p>As part of Vault 7, WikiLeaks published 52 revisions of the CIA&rsquo;s <a href="https://wikileaks.org/ciav7p1/cms/page_14587109.html">development tradecraft</a> guidelines. I mapped the revisions in a <a href="https://docs.google.com/spreadsheets/d/1cw9wAWxlenq8Mg6wXh4vD6eNmwJCq-QNo8XeXXX0he4/edit#gid=0">public spreadsheet</a> to see how the guidance changed over time. Studying the development choices made by sophisticated actors may help us track them over time. For example, when Kaspersky identified a code overlap between <a href="https://securelist.com/sunburst-backdoor-kazuar/99981/">Sunburst and Kazuar</a>, it was because of &ldquo;unusual, shared features&rdquo; such as the UID generation algorithm, the sleeping algorithm, and use of the FNV-1a hash.</p>
<p>As Costin Raiu of Kaspersky <a href="https://twitter.com/craiu/status/1424976647300780032">pointed out</a> on Twitter, &ldquo;C2 jitter, secure erase / uninstall, SSL/TLS+extra crypto, size below 150K, encrypt logs and local collection, decrypt strings on the fly in mem&hellip; simply following these guidelines immediately makes the malware (&ldquo;tools&rdquo;) more interesting and, recognizable by a skilled analyst.&rdquo; While most of these are true here as well, there are a few things that stand out.</p>
<ul>
<li>
<p>File size is a bit over the &ldquo;ideal binary file size&rdquo; for a fully featured tool (208K v. 150K)</p>
</li>
<li>
<p>The references to <em>Listening Post / LP</em> may be CIA and USG specific terminology</p>
</li>
<li>
<p>Use of English abbreviations for days of the week (mtwhfsu / MTWHFSU)</p>
</li>
<li>
<p>Use of the libevent library back when it was perhaps less well-known</p>
</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>I&rsquo;ve really enjoyed working on this project and certainly learned a lot along the way. I&rsquo;m confident there&rsquo;s more to find here, and I&rsquo;d love to collaborate with anyone interested in taking a closer look. As for The Lamberts? Malware from this actor keeps turning up, along with new insights. In fact, Kaspersky&rsquo;s <a href="https://securelist.com/apt-trends-report-q1-2021/101967/">APT trends report for Q1 2021</a> mentions Purple Lambert, a malware &ldquo;capable of providing an attacker with basic information about the infected system and executing a received payload.&rdquo;</p>
<h3 id="indicators-of-compromise">Indicators of Compromise</h3>
<ul>
<li>notify[.]growlupdate[.]com</li>
<li>94[.]242[.]252[.]68</li>
<li>3fcdbd3c5fa34fb8e8d58038fa1d1f13d37e8a4b</li>
</ul>
<h3 id="references">References</h3>
<p>Patrick&rsquo;s free and open-source book on Mac malware analysis was incredibly helpful during this project. If you haven&rsquo;t already done so, I highly recommend checking out <a href="https://taomm.org/">The Art of Mac Malware</a>.</p>

</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>