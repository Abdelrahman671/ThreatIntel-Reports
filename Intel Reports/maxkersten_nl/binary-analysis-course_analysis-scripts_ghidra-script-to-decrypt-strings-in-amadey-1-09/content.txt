<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="profile" href="https://gmpg.org/xfn/11">
	<title>Ghidra script to decrypt strings in Amadey 1.09 &#8211; Max Kersten</title>
<style type="text/css">
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c .de1, .c .de2 {}
.c  {font-family:monospace;}
.c .imp {font-weight: bold; color: red;}
.c li, .c .li1 {font-weight: normal; vertical-align:top;}
.c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c .li2 {font-weight: bold; vertical-align:top;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #666666; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .es1 {color: #000099; font-weight: bold;}
.c .es2 {color: #660099; font-weight: bold;}
.c .es3 {color: #660099; font-weight: bold;}
.c .es4 {color: #660099; font-weight: bold;}
.c .es5 {color: #006699; font-weight: bold;}
.c .br0 {color: #009900;}
.c .sy0 {color: #339933;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #0000dd;}
.c .nu6 {color: #208080;}
.c .nu8 {color: #208080;}
.c .nu12 {color: #208080;}
.c .nu16 {color:#800080;}
.c .nu17 {color:#800080;}
.c .nu18 {color:#800080;}
.c .nu19 {color:#800080;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
.c .ln-xtra, .c li.ln-xtra, .c div.ln-xtra {background-color: #ffc;}
.c span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java .de1, .java .de2 {}
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java li, .java .li1 {font-weight: normal; vertical-align:top;}
.java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java .li2 {font-weight: bold; vertical-align:top;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java .ln-xtra, .java li.ln-xtra, .java div.ln-xtra {background-color: #ffc;}
.java span.xtra { display:block; }
</style>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Feed" href="https://maxkersten.nl/feed/" />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Comments Feed" href="https://maxkersten.nl/comments/feed/" />

<link rel='stylesheet' id='wp-block-library-css' href='https://maxkersten.nl/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='generate-style-grid-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/unsemantic-grid.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='generate-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/style.css?ver=1.3.46' type='text/css' media='all' />
<style id='generate-style-inline-css' type='text/css'>
body{background-color:#efefef;color:#3a3a3a;}a, a:visited{color:#1e73be;text-decoration:none;}a:hover, a:focus, a:active{color:#000000;text-decoration:none;}body .grid-container{max-width:1100px;}
body, button, input, select, textarea{font-family:"Open Sans", sans-serif;}.main-navigation .main-nav ul ul li a{font-size:14px;}@media (max-width:768px){.main-title{font-size:30px;}h1{font-size:30px;}h2{font-size:25px;}}
.site-header{background-color:#ffffff;color:#3a3a3a;}.site-header a,.site-header a:visited{color:#3a3a3a;}.main-title a,.main-title a:hover,.main-title a:visited{color:#222222;}.site-description{color:#999999;}.main-navigation,.main-navigation ul ul{background-color:#222222;}.main-navigation .main-nav ul li a,.menu-toggle{color:#ffffff;}.main-navigation .main-nav ul li > a:hover,.main-navigation .main-nav ul li > a:focus, .main-navigation .main-nav ul li.sfHover > a{color:#ffffff;background-color:#3f3f3f;}button.menu-toggle:hover,button.menu-toggle:focus,.main-navigation .mobile-bar-items a,.main-navigation .mobile-bar-items a:hover,.main-navigation .mobile-bar-items a:focus{color:#ffffff;}.main-navigation .main-nav ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation .main-nav ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation ul ul{background-color:#3f3f3f;}.main-navigation .main-nav ul ul li a{color:#ffffff;}.main-navigation .main-nav ul ul li > a:hover,.main-navigation .main-nav ul ul li > a:focus,.main-navigation .main-nav ul ul li.sfHover > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#4f4f4f;}.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .one-container .container, .separate-containers .paging-navigation, .inside-page-header{background-color:#ffffff;}.entry-meta{color:#888888;}.entry-meta a,.entry-meta a:visited{color:#666666;}.entry-meta a:hover{color:#1e73be;}.sidebar .widget{background-color:#ffffff;}.sidebar .widget .widget-title{color:#000000;}.site-info{color:#ffffff;background-color:#222222;}.site-info a,.site-info a:visited{color:#ffffff;}.site-info a:hover{color:#606060;}.footer-bar .widget_nav_menu .current-menu-item a{color:#606060;}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],textarea{color:#666666;background-color:#fafafa;border-color:#cccccc;}input[type="text"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="password"]:focus,input[type="search"]:focus,textarea:focus{color:#666666;background-color:#ffffff;border-color:#bfbfbf;}button,html input[type="button"],input[type="reset"],input[type="submit"],.button,.button:visited{color:#ffffff;background-color:#666666;}button:hover,html input[type="button"]:hover,input[type="reset"]:hover,input[type="submit"]:hover,.button:hover,button:focus,html input[type="button"]:focus,input[type="reset"]:focus,input[type="submit"]:focus,.button:focus{color:#ffffff;background-color:#3f3f3f;}
@media (max-width:768px){.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .separate-containers .paging-navigation, .one-container .site-content, .inside-page-header{padding:30px;}}.main-navigation ul ul{top:auto;}
</style>
<link rel='stylesheet' id='generate-mobile-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/mobile.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='fontawesome-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/font-awesome.min.css?ver=4.7' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='generate-ie-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/ie.min.css?ver=1.3.46' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wpgeshi-wp-geshi-highlight-css' href='https://maxkersten.nl/wp-content/plugins/wp-geshi-highlight/wp-geshi-highlight.css?ver=6.7.1' type='text/css' media='all' />
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://maxkersten.nl/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://maxkersten.nl/wp-json/wp/v2/pages/3206" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://maxkersten.nl/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/" />
<link rel='shortlink' href='https://maxkersten.nl/?p=3206' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-decrypt-strings-in-amadey-1-09%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-decrypt-strings-in-amadey-1-09%2F&#038;format=xml" />
<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-32x32.png" sizes="32x32" />
<link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-180x180.png" />
<meta name="msapplication-TileImage" content="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-270x270.png" />
</head>

<body data-rsssl=1 itemtype='http://schema.org/WebPage' itemscope='itemscope' class="page-template-default page page-id-3206 page-child parent-pageid-2046  right-sidebar nav-below-header fluid-header separate-containers active-footer-widgets-0 nav-aligned-left header-aligned-left dropdown-hover">
	<a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a>
			<header itemtype="http://schema.org/WPHeader" itemscope="itemscope" id="masthead" class="site-header">
		<div class="inside-header grid-container grid-parent">
						<div class="site-branding">
				<p class="main-title" itemprop="headline">
			<a href="https://maxkersten.nl/" rel="home">
				Max Kersten
			</a>
		</p>
				<p class="site-description">
			Security through explanation
		</p>
			</div>					</div><!-- .inside-header -->
	</header><!-- #masthead -->
			<nav itemtype="http://schema.org/SiteNavigationElement" itemscope="itemscope" id="site-navigation" class="main-navigation">
		<div class="inside-navigation grid-container grid-parent">
						<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
								<span class="mobile-menu">Menu</span>
			</button>
				<div id="primary-menu" class="main-nav">
		<ul class="menu sf-menu">
			<li class="page_item page-item-31"><a href="https://maxkersten.nl/">Home</a></li>
<li class="page_item page-item-51"><a href="https://maxkersten.nl/blog/">Blog</a></li>
<li class="page_item page-item-205 menu-item-has-children current-menu-ancestor"><a href="https://maxkersten.nl/binary-analysis-course/">Binary Analysis Course<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-240 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/introduction/">Introduction<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-208"><a href="https://maxkersten.nl/binary-analysis-course/introduction/secura-grand-slam-ctf-easy-reverse/">Practical case: Secura Grand Slam CTF &#8220;Easy Reverse&#8221;</a></li>
<li class="page_item page-item-2135"><a href="https://maxkersten.nl/binary-analysis-course/introduction/the-workstation/">The workstation</a></li>
<li class="page_item page-item-263"><a href="https://maxkersten.nl/binary-analysis-course/introduction/basic-cpu-architecture/">Basic CPU architecture</a></li>
	</ul>
</li>
<li class="page_item page-item-311 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/">Assembly basics<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-313"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/conditions-and-loops/">Conditions and loops</a></li>
<li class="page_item page-item-400"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-patch-me-0x01/">Practical case: Patch Me 0x01</a></li>
<li class="page_item page-item-485"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/methods-and-macros-the-call-stack/">Methods and macros: the call stack</a></li>
<li class="page_item page-item-529"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-buffer-overflow-0x01/">Practical case: Buffer Overflow 0x01</a></li>
<li class="page_item page-item-568"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/crash-course/">Crash course</a></li>
<li class="page_item page-item-1569"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x01/">Practical case: Crack Me 0x01</a></li>
<li class="page_item page-item-1680"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x02/">Practical case: Crack Me 0x02</a></li>
<li class="page_item page-item-1971"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x03/">Practical case: Crack Me 0x03</a></li>
	</ul>
</li>
<li class="page_item page-item-1286 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/">Assembly code<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1289"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/hello-world/">Hello world</a></li>
<li class="page_item page-item-1323"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/universal-product-code-calculator/">Universal Product Code calculator</a></li>
<li class="page_item page-item-1385"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/debugging-code/">Debugging code</a></li>
	</ul>
</li>
<li class="page_item page-item-610 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/">Binary types<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-615"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/dot-net/">Dot Net</a></li>
<li class="page_item page-item-687"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/android/">Android</a></li>
<li class="page_item page-item-1541"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/browser-plug-in/">Browser plug-in</a></li>
	</ul>
</li>
<li class="page_item page-item-1435 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/">Common techniques<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1441"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/general-techniques/">General techniques</a></li>
<li class="page_item page-item-3155"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/analysing-scripts/">Analysing scripts</a></li>
<li class="page_item page-item-3439"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/debugging-dot-net-binaries/">Debugging Dot Net binaries</a></li>
	</ul>
</li>
<li class="page_item page-item-744 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/">Malware analysis<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-4305"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dot-net-rat/">Dot Net RAT</a></li>
<li class="page_item page-item-862"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/android-sms-stealer/">Android SMS Stealer</a></li>
<li class="page_item page-item-1039"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/lnk-isesteroids-powershell-dropper/">LNK &#038; ISESteroids Powershell dropper</a></li>
<li class="page_item page-item-1079"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-droppers/">Emotet droppers</a></li>
<li class="page_item page-item-1193"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/magecart/">Magecart</a></li>
<li class="page_item page-item-1785"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-ddos-bot/">Corona DDoS bot</a></li>
<li class="page_item page-item-2326"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/azorult-loader-stages/">Azorult loader stages</a></li>
<li class="page_item page-item-2472"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-javascript-downloader/">Emotet JavaScript downloader</a></li>
<li class="page_item page-item-2560"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-locker/">Corona Locker</a></li>
<li class="page_item page-item-3016"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/rezer0v4-loader/">ReZer0v4 loader</a></li>
<li class="page_item page-item-3913"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dumping-whispergates-wiper-from-an-eazfuscator-obfuscated-loader/">Dumping WhisperGate&#8217;s wiper from an Eazfuscator obfuscated loader</a></li>
	</ul>
</li>
<li class="page_item page-item-2046 menu-item-has-children current-menu-ancestor current-menu-parent"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/">Analysis scripts<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1007"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-string-formatting-deobfuscation/">PowerShell string formatting deobfuscation</a></li>
<li class="page_item page-item-2764"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/javascript-string-concatenation-deobfuscation/">JavaScript string concatenation deobfuscation</a></li>
<li class="page_item page-item-3061"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-rezer0-payload-and-configuration-extraction/">Automatic ReZer0 payload and configuration extraction</a></li>
<li class="page_item page-item-3206 current-menu-item"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/">Ghidra script to decrypt strings in Amadey 1.09</a></li>
<li class="page_item page-item-3521"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-a-string-array-in-xor-ddos/">Ghidra script to decrypt a string array in XOR DDoS</a></li>
<li class="page_item page-item-3974"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-handle-stack-strings/">Ghidra script to handle stack strings</a></li>
	</ul>
</li>
<li class="page_item page-item-3978 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/">Malware snippets<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3982"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/self-deletion/">Self Deletion</a></li>
<li class="page_item page-item-3984"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/api-hashing/">API Hashing</a></li>
	</ul>
</li>
<li class="page_item page-item-1250 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/">Obtaining samples<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1253"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/searching-samples/">Searching samples</a></li>
	</ul>
</li>
<li class="page_item page-item-2096 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/documentation/">Documentation<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-2099"><a href="https://maxkersten.nl/binary-analysis-course/documentation/article-structure/">Article structure</a></li>
	</ul>
</li>
<li class="page_item page-item-480"><a href="https://maxkersten.nl/binary-analysis-course/resources/">Resources</a></li>
<li class="page_item page-item-473"><a href="https://maxkersten.nl/binary-analysis-course/faq/">FAQ</a></li>
<li class="page_item page-item-1490 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/">Miscellaneous<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1493"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2018-2019/">A year in review: 2018-2019</a></li>
<li class="page_item page-item-2697"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2019-2020/">A year in review: 2019-2020</a></li>
<li class="page_item page-item-3467"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2020-2021/">A year in review: 2020-2021</a></li>
<li class="page_item page-item-4031"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2021-2022/">A year in review: 2021-2022</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4353"><a href="https://maxkersten.nl/libras-ghidra-library/">Libra&#8217;s Ghidra Library</a></li>
<li class="page_item page-item-161 menu-item-has-children"><a href="https://maxkersten.nl/projects/">Projects<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-793"><a href="https://maxkersten.nl/projects/androidprojectcreator/">AndroidProjectCreator</a></li>
<li class="page_item page-item-3295 menu-item-has-children"><a href="https://maxkersten.nl/projects/m3-framework/">m3 framework<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3292"><a href="https://maxkersten.nl/projects/m3-framework/extending-m3/">Extending m3</a></li>
<li class="page_item page-item-3329"><a href="https://maxkersten.nl/projects/m3-framework/anubis-and-cerberus-explained/">Anubis and Cerberus explained</a></li>
	</ul>
</li>
<li class="page_item page-item-3128 menu-item-has-children"><a href="https://maxkersten.nl/projects/api-client-libraries/">API client libraries<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3351"><a href="https://maxkersten.nl/projects/api-client-libraries/hatching-triage-java-api-client/">Hatching Triage Java API client</a></li>
<li class="page_item page-item-3353"><a href="https://maxkersten.nl/projects/api-client-libraries/malshare-java-api-client/">MalShare Java API client</a></li>
<li class="page_item page-item-3700"><a href="https://maxkersten.nl/projects/api-client-libraries/malware-bazaar-java-api-client/">Malware Bazaar Java API client</a></li>
<li class="page_item page-item-4185"><a href="https://maxkersten.nl/projects/api-client-libraries/yaraify-java-api-client/">Yaraify Java API client</a></li>
	</ul>
</li>
<li class="page_item page-item-2876"><a href="https://maxkersten.nl/projects/malwaretheflag/">MalwareTheFlag</a></li>
<li class="page_item page-item-2145"><a href="https://maxkersten.nl/projects/responsible-disclosures/">Responsible Disclosures</a></li>
<li class="page_item page-item-2430"><a href="https://maxkersten.nl/projects/malpull/">MalPull</a></li>
<li class="page_item page-item-104 menu-item-has-children"><a href="https://maxkersten.nl/projects/capricorn/">Capricorn<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-109"><a href="https://maxkersten.nl/projects/capricorn/changelog/">Changelog</a></li>
	</ul>
</li>
<li class="page_item page-item-2141 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/">Archive<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-163"><a href="https://maxkersten.nl/projects/archive/shouldersurfer/">ShoulderSurfer</a></li>
<li class="page_item page-item-167"><a href="https://maxkersten.nl/projects/archive/stringer/">Stringer</a></li>
<li class="page_item page-item-16 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/gemini/">Gemini<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
		<ul class='children'>
<li class="page_item page-item-73"><a href="https://maxkersten.nl/projects/archive/gemini/changelog/">Changelog</a></li>
		</ul>
</li>
<li class="page_item page-item-35"><a href="https://maxkersten.nl/projects/archive/whitepapers/">Whitepapers</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4 menu-item-has-children"><a href="https://maxkersten.nl/about-me/">About me<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-2436"><a href="https://maxkersten.nl/about-me/news-and-conferences/">News and conferences</a></li>
<li class="page_item page-item-198"><a href="https://maxkersten.nl/about-me/privacy-policy/">Privacy Policy</a></li>
</ul>
</li>
		</ul>
	</div><!-- .main-nav -->
			</div><!-- .inside-navigation -->
	</nav><!-- #site-navigation -->
		
	<div id="page" class="hfeed site grid-container container grid-parent">
		<div id="content" class="site-content">
			
	<div id="primary" class="content-area grid-parent mobile-grid-100 grid-75 tablet-grid-75">
		<main id="main" class="site-main">
						
				
<article id="post-3206" class="post-3206 page type-page status-publish" itemtype='http://schema.org/CreativeWork' itemscope='itemscope'>
	<div class="inside-article">
				
					<header class="entry-header">
				<h1 class="entry-title" itemprop="headline">Ghidra script to decrypt strings in Amadey 1.09</h1>			</header><!-- .entry-header -->
				
				<div class="entry-content" itemprop="text">
			<p><em>This article was published on the 9th of February 2021. This article was updated on the 8th of December 2021.</em></p>
<p>On the 21st of March 2019, the American National Security Agency (NSA) released <a href="https://ghidra-sre.org/">Ghidra</a>: a free and open-source reverse engineering tool. The tool can disassemble and decompile code for a variety of architectures. Additionally, users can create scripts in Python and Java using the exposed API. This article will cover the the string encryption in Amadey 1.09, and will provide a step-by-step guide to create an automatic string decryption script in Java.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#the-sample">The sample</a></li>
<li><a href="#scripting-basics">Scripting basics</a></li>
<li><a href="#outline">Outline</a></li>
<li><a href="#finding-the-decryption-routine">Finding the decryption routine</a></li>
<li><a href="#remaking-the-decryption-routine">Remaking the decryption routine</a></li>
<li><a href="#getting-user-input">Getting user-input</a></li>
<li><a href="#getting-all-cross-references-for-the-decryption-function">Getting all cross references for the decryption function</a></li>
<li><a href="#iterating-all-decryption-calls">Iterating all decryption calls</a></li>
<li><a href="#caching-the-decrypted-results">Caching the decrypted results</a></li>
<li><a href="#adding-comments-and-bookmarks">Adding comments and bookmarks</a></li>
<li><a href="#putting-it-all-together">Putting it all together</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#the-complete-script">The complete script</a></li>
</ul>
<p><a name ="the-sample"></a></p>
<h2><a href="#the-sample">The sample</a></h2>
<p>This sample is taken from <a href="https://krabsonsecurity.com/2019/02/13/analyzing-amadey-a-simple-native-malware/">KrabsOnSecurity</a>&#8216;s blog from Feburary 2019. The specific sample is the unpacked stage, as is described in the blog. The sample can be downloaded from <a href="https://virusbay.io/sample/browse/dbaaa2699c639f652117e9176fd27fdf">VirusBay</a>, <a href="https://bazaar.abuse.ch/sample/654b53b4ef5b98b574f7478ad11192275178ca651d9e8496070651cd6f72656a/">Malware Bazaar</a>, or <a href="https://malshare.com/sample.php?action=detail&#038;hash=dbaaa2699c639f652117e9176fd27fdf">MalShare</a>. The hashes are given below.</p>
<pre>
MD5: dbaaa2699c639f652117e9176fd27fdf
SHA-1: 3e4cd703deef2cfd1726095987766e2f062e9c57
SHA-256: 654b53b4ef5b98b574f7478ad11192275178ca651d9e8496070651cd6f72656a
Size: 51396 bytes
</pre>
<p>Additionally, snippets from this <a href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/">blog</a> by <a href="https://www.wallenborn.net/">Lars A. Wallenborn</a> and <a href="https://huettenhain.net/">Jesko H. Hüttenhain</a> about a Ghidra script to automatically decrypt strings in REvil samples are used. Within the code, credit to Lars&#8217; and Jesko&#8217;s work and websites is given whenever it is used.</p>
<p><a name ="scripting-basics"></a></p>
<h2><a href="#scripting-basics">Scripting basics</a></h2>
<p>Scripting in Ghidra can be done using Python and Java. Python scripts are executed with the help of <a href="https://www.jython.org/">Jython</a>. As such, the <em>native</em> way of scripting in Ghidra, is with Java. Therefore, this is also what will be used in this article.</p>
<p>In the official repository&#8217;s <a href="https://github.com/NationalSecurityAgency/ghidra/blob/master/DevGuide.md">DevGuide</a>, guidance is given with regards to configuring Ghidra with Eclipse. This is useful to develop Java based scripts in a proper IDE, with the option to debug the script.</p>
<p>Once the environment is set-up, one will see that every script extends the <em>GhidraScript</em> class. This class forces the script to implement the <em>run</em> method, which is the starting point of the script&#8217;s code. Due to the inheritance of the <a href="https://ghidra.re/ghidra_docs/api/ghidra/app/script/GhidraScript.html">GhidraScript</a> class, the user has access to the <a href="https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html">FlatProgramAPI</a>. Functions might be added to this class, but never removed. Or, as the NSA explains in the accompanied JavaDoc:</p>
<pre>
This class is a flattened version of the Program API.

NOTE:

    1. NO METHODS SHOULD EVER BE REMOVED FROM THIS CLASS.
    2. NO METHOD SIGNATURES SHOULD EVER BE CHANGED IN THIS CLASS. 

This class is used by GhidraScript.

Changing this class will break user scripts.

That is bad. Don't do that. 
</pre>
<p>Using Eclipse&#8217;s built-in auto-completion and JavaDoc viewer, its easy to view all functions that are directly accessible from the <a href="https://ghidra.re/ghidra_docs/api/ghidra/app/script/GhidraScript.html">GhidraScript</a> class. Alternatively, or additionally, one can read the publicly available JavaDoc on the NSA&#8217;s <a href="https://ghidra.re/ghidra_docs/api/">website</a>.</p>
<p>As is specified in the <a href="https://ghidra.re/ghidra_docs/api/ghidra/app/script/GhidraScript.html">GhidraScript</a> class, there are several variables that one can access within a script, without the need to initialise them. An excerpt of the Ghidra documentation is given below.</p>
<pre>
All scripts, when run, will be handed the current state in the form of class instance variable. These variables are:

currentProgram: the active program
currentAddress: the address of the current cursor location in the tool
currentLocation: the program location of the current cursor location in the tool, or null if no program location exists
currentSelection: the current selection in the tool, or null if no selection exists
currentHighlight: the current highlight in the tool, or null if no highlight exists
</pre>
<p>Knowing the basics of scripting before starting to write code will result in a more efficient use of your time, as well as cleaner code.</p>
<p><a name ="outline"></a></p>
<h2><a href="#outline">Outline</a></h2>
<p>The goal of the script is to automatically decrypt the encrypted strings that are present within the binary. As such, it is essential to be able to decrypt the strings. For this reason, it is the first step in this article. After that, it is important to get the required information from the user. What that is precisely, will follow logically from the decryption routine. </p>
<p>Knowing how to decrypt the strings is only part of the job, as one will also need to find all references to the decryption function call and its argument(s). Knowing the arguments for each call, and the decryption routine itself, will allow the script to decrypt all strings. Knowing how to add comments to the disassembly and decompiler view will show the result in an organised fashion to the analyst.</p>
<p>Before putting all the pieces are put together, a method to cache decrypted strings will be introduced. This will reduce the time the script needs to run if the same string is encountered multiple times.</p>
<p>In this article, a Ghidra build from the 21st of December 2020 (which has a few more commits than Ghidra 9.2.1) is used. Due to the usage of the <a href="https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html">FlatProgramAPI</a>, it should run on future versions, and is likely to run on older versions.</p>
<p><a name ="finding-the-decryption-routine"></a></p>
<h2><a href="#finding-the-decryption-routine">Finding the decryption routine</a></h2>
<p>After loading this sample in Ghidra and running the default analysers, it becomes apparent that the sample&#8217;s symbols were not stripped during the compilation. As such, it becomes easy to find the main function, as is given below. Note that the function is called <em>_main</em>.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">int</span> __cdecl _main<span class="br0">&#40;</span><span class="kw4">int</span> _Argc<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">**</span>_Argv<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">**</span>_Env<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar1<span class="sy0">;</span>
  <span class="kw4">size_t</span> in_stack_fffffff0<span class="sy0">;</span>
&nbsp;
  __alloca<span class="br0">&#40;</span>in_stack_fffffff0<span class="br0">&#41;</span><span class="sy0">;</span>
  ___main<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  __Z10aBypassUACv<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  pcVar1 <span class="sy0">=</span> __Z12aGetSelfPathv<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  __Z13aDropToSystemPc<span class="br0">&#40;</span>pcVar1<span class="br0">&#41;</span><span class="sy0">;</span>
  pcVar1 <span class="sy0">=</span> __Z19aGetSelfDestinationi<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  __Z11aAutoRunSetPc<span class="br0">&#40;</span>pcVar1<span class="br0">&#41;</span><span class="sy0">;</span>
  __Z6aBasici<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The mangled names provide insight into what the functions do. These symbols can be misleading, and should not always be trusted as-is, but the symbols in this sample are representative for the functionality that is within the functions. The <em>___main</em> function, note the triple underscore, does not contain code that was made by the author.</p>
<p>Searching for encrypted strings can be done in a variety of ways. One can use the <em>Defined Strings</em> view (as found in the <em>Window</em> toolstrip menu), browse through the function tree to look for a name that is likely to handle encrypted strings (which is <em> __Z8aDecryptPc</em>), or click through the functions until one encounters a function call that seems to decrypt a string (as can be seen in <em>__Z6aBasici</em>).</p>
<p>The decryption routine is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">undefined <span class="sy0">*</span> __cdecl __Z8aDecryptPc<span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>param_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">size_t</span> sVar1<span class="sy0">;</span>
  uint local_10<span class="sy0">;</span>
&nbsp;
  _memset<span class="br0">&#40;</span><span class="sy0">&amp;</span>_ZZ8aDecryptPcE14aDecryptResult<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_10 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
    sVar1 <span class="sy0">=</span> _strlen<span class="br0">&#40;</span>param_1<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>sVar1 <span class="sy0">&lt;=</span> local_10<span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    sVar1 <span class="sy0">=</span> _strlen<span class="br0">&#40;</span>s_1ee76e11929a07445c5abd744aa407db_00405000<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#40;</span><span class="sy0">&amp;</span>_ZZ8aDecryptPcE14aDecryptResult<span class="br0">&#41;</span><span class="br0">&#91;</span>local_10<span class="br0">&#93;</span> <span class="sy0">=</span>
         param_1<span class="br0">&#91;</span>local_10<span class="br0">&#93;</span> <span class="sy0">-</span> s_1ee76e11929a07445c5abd744aa407db_00405000<span class="br0">&#91;</span>local_10 <span class="sy0">%</span> sVar1<span class="br0">&#93;</span><span class="sy0">;</span>
    local_10 <span class="sy0">=</span> local_10 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="sy0">&amp;</span>_ZZ8aDecryptPcE14aDecryptResult<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>At first, two variables are declared, after which the memory buffer for the output is set. The variable <em>local_10</em> is incremented with one at the end of every iteration in the while loop. Only when the length of the input is equal or bigger than the amount of iterations that have taken place, the endless loop breaks. At last, the result is returned. The decryption itself is based on the used key, together with the iterative value. Refactoring the method with more readable names, the function becomes easily readable.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">undefined <span class="sy0">*</span> __cdecl __Z8aDecryptPc<span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>input<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">size_t</span> inputLength<span class="sy0">;</span>
  uint i<span class="sy0">;</span>
&nbsp;
  _memset<span class="br0">&#40;</span><span class="sy0">&amp;</span>result<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
    inputLength <span class="sy0">=</span> _strlen<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>inputLength <span class="sy0">&lt;=</span> i<span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    inputLength <span class="sy0">=</span> _strlen<span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#40;</span><span class="sy0">&amp;</span>result<span class="br0">&#41;</span><span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">-</span> key<span class="br0">&#91;</span>i <span class="sy0">%</span> inputLength<span class="br0">&#93;</span><span class="sy0">;</span>
    i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="sy0">&amp;</span>result<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>In conclusion, this function requires one argument, which is decrypted using a hardcoded key, after which the decrypted value is returned.</p>
<p><a name ="remaking-the-decryption-routine"></a></p>
<h2><a href="#remaking-the-decryption-routine">Remaking the decryption routine</a></h2>
<p>As the Ghidra script is to be written in Java, the decryption routine is also to be written in Java. The ported function will take two arguments, rather than one. The first one is the input, which is the string to decrypt. As memory is read from the sample, the type of this variable is a byte array. The second argument is the decryption key, which is represented as a string. The ported function is more readable than the decompiled code, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw3">String</span> decrypt<span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input, <span class="kw3">String</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> keyArray <span class="sy0">=</span> key.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw4">int</span> keyLength <span class="sy0">=</span> keyArray.<span class="me1">length</span><span class="sy0">;</span>
	<span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">-</span> keyArray<span class="br0">&#91;</span>i <span class="sy0">%</span> keyLength<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="kw1">return</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p><a name ="getting-user-input"></a></p>
<h2><a href="#getting-user-input">Getting user-input</a></h2>
<p>Getting information from the user is a useful way to make a script more generic. If a specific malware family uses the same decryption routine with a different key per sample, one can request the key from the user, without the need to alter the decryption script. </p>
<p>In Ghidra, one can request values from the user using the <em>ask*</em> functions, where the asterisk should be read as a wildcard, as there are many functions present to help. Aside from the added convenience of not having to write such a function, it is important to note that a user cannot provide an empty string to this dialog. The requested string cannot be <em>null</em> either, as closing the dialog will lead to the termination of the script, which is clearly shown to the user in Ghidra&#8217;s console. </p>
<p>To print data to the console, one can use the built-in <em>println</em> and <em>print</em> functions. The difference is that the latter does not print the script name into the console.</p>
<p>In this case, the <em>askString</em> function is used to request a string from the user. Within the script, two values will be required: the name of the decryption function and the key that is used to decrypt the encrypted input.</p>
<p><a name ="getting-all-cross-references-for-the-decryption-function"></a></p>
<h2><a href="#getting-all-cross-references-for-the-decryption-function">Getting all cross references for the decryption function</a></h2>
<p>The decryption function&#8217;s name is obtained earlier on in the script, as the user provides the name. Based on that, one can get a list of functions that use this name. As symbol names do not have to be unique in Ghidra, it is possible that there are more functions with the same name. The code to obtain such a list is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1">List<span class="sy0">&lt;</span>Function<span class="sy0">&gt;</span> functions <span class="sy0">=</span> getGlobalFunctions<span class="br0">&#40;</span>functionName<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Basic sanity checks to see if there are more functions with the given name can be implemented. The <em>ReferenceIterator</em> class is present in the <em>currentProgram</em> variable, which is already initialised. Using the <em>getReferencesTo</em> function, one can use an <em>Address</em> object to get all references to that address. To convert a raw address, which is represented as a <em>Long</em>, to an <em>Address</em> object, one can use the <em>toAddr</em> function. This function is accessible via the extended <em>GhidraScript</em> class.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1">ReferenceIterator references <span class="sy0">=</span> currentProgram.<span class="me1">getReferenceManager</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getReferencesTo</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>decryptionFunctionAddress<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>To iterate over all references, one can use a simple for-loop, as is shown below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw3">Reference</span> reference <span class="sy0">:</span> references<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    Address address <span class="sy0">=</span> reference.<span class="me1">getFromAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">//...</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>This for-loop is the basis for the following steps, as these have to be done per reference. Obtaining the address for the reference is the first action that has to be completed.</p>
<p><a name ="iterating-all-decryption-calls"></a></p>
<h2><a href="#iterating-all-decryption-calls">Iterating all decryption calls</a></h2>
<p>This part of the script is based upon two steps. The first one is being able to decrypt a given string, which is possible due to the decryption method that was written in an earlier step. The second step is to obtain the encrypted string for each function call. To do so, one can use code from the earlier mentioned <a href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/">blog</a> by Lars A. Wallenborn and Jesko H. Hüttenhain.</p>
<p>The function named <em>getConstantCallArgument</em> is used. This function requires two arguments, the first being an <em>Address</em> object, and the second is an integer array. The <em>Address</em> object is the address of the function call. The integer array is used to obtain one or more arguments of the given function&#8217;s call. The indices of the arguments in this array correspond with the arguments for the function call, where the first index is <em>1</em>, unlike the usual <em>0</em> in an array. The function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//Code by Lars A. Wallenborn and Jesko H. Hüttenhain (see https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/) with a slight change in the exception handling by Max 'Libra' Kersten</span>
<span class="kw1">private</span> OptionalLong<span class="br0">&#91;</span><span class="br0">&#93;</span> getConstantCallArgument<span class="br0">&#40;</span>Address addr, <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> argumentIndices<span class="br0">&#41;</span>
		<span class="kw1">throws</span> <span class="kw3">IllegalStateException</span>, <span class="kw3">IllegalArgumentException</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span> argumentPos <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	OptionalLong argumentValues<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> OptionalLong<span class="br0">&#91;</span>argumentIndices.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
	Function caller <span class="sy0">=</span> getFunctionBefore<span class="br0">&#40;</span>addr<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>caller <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span>
		<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalStateException</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	DecompInterface decompInterface <span class="sy0">=</span> <span class="kw1">new</span> DecompInterface<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	decompInterface.<span class="me1">openProgram</span><span class="br0">&#40;</span>currentProgram<span class="br0">&#41;</span><span class="sy0">;</span>
	DecompileResults decompileResults <span class="sy0">=</span> decompInterface.<span class="me1">decompileFunction</span><span class="br0">&#40;</span>caller, <span class="nu0">120</span>, monitor<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>decompileResults.<span class="me1">decompileCompleted</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
		<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalStateException</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	HighFunction highFunction <span class="sy0">=</span> decompileResults.<span class="me1">getHighFunction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	Iterator<span class="sy0">&lt;</span>PcodeOpAST<span class="sy0">&gt;</span> pCodes <span class="sy0">=</span> highFunction.<span class="me1">getPcodeOps</span><span class="br0">&#40;</span>addr<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">while</span> <span class="br0">&#40;</span>pCodes.<span class="me1">hasNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		PcodeOpAST instruction <span class="sy0">=</span> pCodes.<span class="me1">next</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>instruction.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> PcodeOp.<span class="me1">CALL</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> index <span class="sy0">:</span> argumentIndices<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				argumentValues<span class="br0">&#91;</span>argumentPos<span class="br0">&#93;</span> <span class="sy0">=</span> traceVarnodeValue<span class="br0">&#40;</span>instruction.<span class="me1">getInput</span><span class="br0">&#40;</span>index<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
				argumentPos<span class="sy0">++;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> argumentValues<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>This function returns an array of <em>OptionalLong</em> objects. Such an object can contain a <em>Long</em>, although it might not. In some cases, there might occur an error whilst retrieving the address, meaning that the object itself is actually set to <em>null</em>. To avoid returning <em>null</em>, the <em>OptionalLong</em> object is used.</p>
<p>Within the function, the decompiler interface is used to get access to the PCode values. For each call, the <em>Varnode</em>&#8216;s value is traced using <em>traceVarnodeValue</em>, which is also written by Lars A. Wallenborn and Jesko H. Hüttenhain. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//Code by Lars A. Wallenborn and Jesko H. Hüttenhain (see https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/) with a slight change in the exception handling by Max 'Libra' Kersten</span>
<span class="kw1">private</span> OptionalLong traceVarnodeValue<span class="br0">&#40;</span>Varnode argument<span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">IllegalArgumentException</span> <span class="br0">&#123;</span>
	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">!</span>argument.<span class="me1">isConstant</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		PcodeOp ins <span class="sy0">=</span> argument.<span class="me1">getDef</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>ins <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span>
			<span class="kw1">break</span><span class="sy0">;</span>
		<span class="kw1">switch</span> <span class="br0">&#40;</span>ins.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">CAST</span><span class="sy0">:</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">COPY</span><span class="sy0">:</span>
			argument <span class="sy0">=</span> ins.<span class="me1">getInput</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">break</span><span class="sy0">;</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">PTRSUB</span><span class="sy0">:</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">PTRADD</span><span class="sy0">:</span>
			argument <span class="sy0">=</span> ins.<span class="me1">getInput</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">break</span><span class="sy0">;</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">INT_MULT</span><span class="sy0">:</span>
		<span class="kw1">case</span> PcodeOp.<span class="me1">MULTIEQUAL</span><span class="sy0">:</span>
			<span class="kw1">return</span> OptionalLong.<span class="me1">empty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">default</span><span class="sy0">:</span>
			<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalArgumentException</span><span class="br0">&#40;</span><span class="kw3">String</span>.<span class="me1">format</span><span class="br0">&#40;</span><span class="st0">&quot;Unknown opcode %s for variable copy at %08X&quot;</span>,
					ins.<span class="me1">getMnemonic</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, argument.<span class="me1">getAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> OptionalLong.<span class="me1">of</span><span class="br0">&#40;</span>argument.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Within the decryption routine in Amadey 1.09, only a single argument is used. This argument points to an encrypted value of a string. As such, the index one wants to retrieve is the only equal to one, meaning an integer array with the value <em>1</em> at index <em>0</em> is required as input. The address for the function is the address of each referenced function call of the decryption routine. The integer array is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> argumentIndices <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>One can get the <em>Long</em> value from the <em>OptionalLong</em> object by using the <em>getAsLong</em> function, as can be seen in the code below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw3">Long</span> argument <span class="sy0">=</span> arguments<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">getAsLong</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Right now, all information to decrypt a string has been obtained, as the address of the encrypted string, the decryption key, and the decryption routine have been collected. The <em>getDecryptedArgument</em> function contains all code to decrypt an argument, which is then returned as a string. It requires an address as a <em>Long</em>, and the decryption string as a <em>String</em>. The code for the function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw3">String</span> getDecryptedArgument<span class="br0">&#40;</span><span class="kw3">Long</span> argument, <span class="kw3">String</span> key<span class="br0">&#41;</span> <span class="kw1">throws</span> MemoryAccessException <span class="br0">&#123;</span>
	MemoryBlock block <span class="sy0">=</span> getMemoryBlock<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw4">int</span> size <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">Long</span><span class="br0">&#41;</span> block.<span class="me1">getSize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">intValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input <span class="sy0">=</span> getBytes<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span>, size<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">String</span> decryptedValue <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>input, key<span class="br0">&#41;</span><span class="sy0">;</span>
	decryptedValue <span class="sy0">=</span> decryptedValue.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\n</span>&quot;</span>, <span class="st0">&quot;<span class="es0">\\</span>n&quot;</span><span class="br0">&#41;</span>.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\r</span>&quot;</span>, <span class="st0">&quot;<span class="es0">\\</span>r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">return</span> getFirstReadableString<span class="br0">&#40;</span>decryptedValue<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>At first, a memory block is read, based on the address of the given argument. The <em>getMemoryBlock</em> function is accessible via the <em>GhidraScript</em> class. The size of the block is stored in a different variable to increase the readability of the code. The <em>getBytes</em> function, also accessible via the <em>GhidraScript</em> class, gets the bytes from the given argument&#8217;s location until the location plus the given size. </p>
<p>The <em>decryptedValue</em> string contains the decrypted string. If any newline and carriage return values are present in that string, they are escaped using the chained <em>replace</em> function calls. The input that was provided to the decryption function is much bigger than the actual string. As such, the first human readable string has to be recovered, which is done using the <em>getFirstReadableString</em> method.</p>
<p>This method, as can be seen below,  requires a string as input, and will return the first human readable string.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw3">String</span> getFirstReadableString<span class="br0">&#40;</span><span class="kw3">String</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span> beginIndex <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
	<span class="kw4">int</span> endIndex <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
	<span class="kw4">int</span> asciiLow <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="kw4">int</span> asciiHigh <span class="sy0">=</span> <span class="nu0">255</span><span class="sy0">;</span>
&nbsp;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw4">char</span> currentChar <span class="sy0">=</span> input.<span class="me1">charAt</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>currentChar <span class="sy0">&lt;</span> asciiHigh <span class="sy0">||</span> currentChar <span class="sy0">&gt;</span> asciiLow<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			beginIndex <span class="sy0">=</span> i<span class="sy0">;</span>
			<span class="kw1">break</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw4">char</span> currentChar <span class="sy0">=</span> input.<span class="me1">charAt</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>currentChar <span class="sy0">&gt;</span> asciiHigh <span class="sy0">||</span> currentChar <span class="sy0">&lt;</span> asciiLow<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			endIndex <span class="sy0">=</span> i<span class="sy0">;</span>
			<span class="kw1">break</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="kw1">if</span> <span class="br0">&#40;</span>beginIndex <span class="sy0">&gt;=</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> endIndex <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">return</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>beginIndex, endIndex<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="kw1">return</span> <span class="st0">&quot;NO_ASCII_STRING_FOUND&quot;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>This function declares four local integers, named <em>beginIndex</em>, <em>endIndex</em>, <em>asciiLow</em>, and <em>asciiHigh</em>. The first two are set to <em>-1</em>, whereas the last two are set to <em>0</em> and <em>255</em> respectively. The <em>beginIndex</em> and <em>endIndex</em> are used to store the beginning and ending indices of the first human readable string, whereas the latter two variables are hardcoded to define the beginning and ending of the human readable range of ASCII characters. Wide strings are out of scope for this function, as they are not used within this sample.</p>
<p>The given string is iterated over twice: once for the first character, and once for the last character. Whilst this can be done in a single loop, this would decrease the code&#8217;s readability. As this function is rather rudimentary at best, the code&#8217;s optimisation has not been included in this article.</p>
<p>The return value of this function is a substring of the provided input. If none of the characters are readable, then a default value is returned. This default value is never returned in the used sample.</p>
<p><a name ="caching-the-decrypted-results"></a></p>
<h2><a href="#caching-the-decrypted-results">Caching the decrypted results</a></h2>
<p>Even though some optimisation steps were left out in the previous step, this step is purely meant as an optimisation. Caching results is a useful way to easily decrease the time that the script takes, without adding a needless complex layer of logic into the code.</p>
<p>At first, a mapping is created. Mappings are often known as dictionaries in other languages. In this case, the mapping will use addresses (as a <em>Long</em>) as a key, where the value at a given key is a <em>String</em>. The mapping&#8217;s keys are the locations of the encrypted variables, whereas the mapping&#8217;s values are decrypted strings. The creation of the mapping is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1">Map<span class="sy0">&lt;</span><span class="kw3">Long</span>, String<span class="sy0">&gt;</span> handled <span class="sy0">=</span> <span class="kw1">new</span> HashMap<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>When iterating over the argument locations, the following if-statement is required to implement the caching of decrypted values.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span>handled.<span class="me1">containsKey</span><span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">//...</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
    <span class="co1">//...</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>As such, it checks if the given address already present in the mapping. If it is, the value for the given key should be used. Otherwise, it can go through the normal decryption process, and add the outcome to the given mapping. The lookup in the mapping is much quicker than the decryption routine, thereby saving several seconds in a small sample such as this. In testing on my local machine, the script&#8217;s runtime went down from 22 seconds to 16 seconds. Slower computers might benefit more of the caching, whereas faster computers might benefit less.</p>
<p><a name ="adding-comments-and-bookmarks"></a></p>
<h2><a href="#adding-comments-and-bookmarks">Adding comments and bookmarks</a></h2>
<p>Once the decrypted values have been obtained, they need to be handed back to the user. This is done in multiple ways. One can add comments (both to the disassembly and decompiler views), bookmarks, and print the results in the output window. In the code below, both comment methods, as well as the bookmark creation, have been listed. Do note that existing bookmarks for a specific address will be overwritten with the <em>createBookmark</em> function.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//Decompiler comment</span>
currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PLATE_COMMENT</span>, comment<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Disassembly comment</span>
currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PRE_COMMENT</span>, comment<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Bookmark creation</span>
createBookmark<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span>, <span class="st0">&quot;Decrypted string&quot;</span>, <span class="st0">&quot;The variable named &quot;</span> <span class="sy0">+</span> getSymbolAt<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; is equal to <span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> decryptedValue <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p><a name ="putting-it-all-together"></a></p>
<h2><a href="#putting-it-all-together">Putting it all together</a></h2>
<p>The <a href="#the-complete-script">complete script</a> is given below. It contains a few more sanity checks, the most notable being the user feedback when providing details, and the check if there is only a single function with the provided name. When running the script, the following output is observed at the end, aside from the list of decrypted values in Ghidra&#8217;s console:</p>
<pre>
Decrypted 47 strings (using 11 cached strings), placed 210 comments, and 
created 47 bookmarks in 16 seconds!
</pre>
<p>To show the difference in the decompiled code, two excerpts are given. The first excerpt is the decompiler output in Ghidra prior to running the string decryption script, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV00<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="sy0">;</span>
&nbsp;
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV01<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV02<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV03<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV04<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
  <span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The second one contains the comments that have been added by the script.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">                    <span class="coMULTI">/* Decrypted value: &quot;AVAST Software&quot; */</span>
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV00<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="sy0">;</span>
                    <span class="coMULTI">/* Decrypted value: &quot;Avira&quot; */</span>
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV01<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
                    <span class="coMULTI">/* Decrypted value: &quot;Kaspersky Lab&quot; */</span>
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV02<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
                    <span class="coMULTI">/* Decrypted value: &quot;ESET&quot; */</span>
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV03<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
                    <span class="coMULTI">/* Decrypted value: &quot;Panda Security&quot; */</span>
  pcVar2 <span class="sy0">=</span> __Z8aDecryptPc<span class="br0">&#40;</span><span class="sy0">&amp;</span>_aAV04<span class="br0">&#41;</span><span class="sy0">;</span>
  bVar1 <span class="sy0">=</span> __Z7aPathAVPc<span class="br0">&#40;</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>bVar1 <span class="sy0">!=</span> <span class="kw2">false</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
  <span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The decompiled code becomes easily readable, especially with the included symbols. This allows the analyst to quickly analyse the malware&#8217;s functionality.</p>
<p><a name ="conclusion"></a></p>
<h2><a href="#conclusion">Conclusion</a></h2>
<p>Scripting will greatly reduce the amount of time that an analyst needs to spend when looking at a repetitive task. Understanding the basics of Ghidra&#8217;s architecture will greatly reduce the amount of time an analyst needs to write such a script. By creating a heavily documented script, it becomes reusable for similar tasks in other samples. As such, each new script will make future work easier.</p>
<p>Note that not all parts of the script in this article are required, more specifically the caching part. Even though it does save some time in this script, the overhead that it requires to write the code is longer than the time that is saved with it. When looking at a sample that has a really heavy decryption routine, and/or a lot of encrypted strings, the overhead might be worth it. </p>
<p>This trade-off is up to the analyst to decide, and is also depending on the goal of analyst. Learning how to write such a script might involve more work that is not necessarily the most efficient for a given sample, but has a positive influence on the analyst&#8217;s future scripting abilities. </p>
<hr />
<p>To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], or DM me on Twitter <a href="https://twitter.com/Libranalysis">@Libranalysis</a>.</p>
<hr />
<p><a name ="the-complete-script"></a></p>
<h2><a href="#the-complete-script">The complete script</a></h2>
<p>The complete script is given below. It can be added as a file to any working <em>ghidra_script</em> directory, or one can use the simple editor within Ghidra to create a new script and paste this script in it.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//This script is used to annotate function calls to decrypt strings with the decrypted string. The decryption routine and key are taken from an Amadey sample (MD5: dbaaa2699c639f652117e9176fd27fdf). One can easily modify the code to make it suitable for other families or decryption routines.</span>
<span class="co1">//@author Max 'Libra' Kersten</span>
<span class="co1">//@category String decryption</span>
<span class="co1">//@keybinding </span>
<span class="co1">//@menupath </span>
<span class="co1">//@toolbar </span>
&nbsp;
<span class="kw1">import</span> <span class="co2">java.time.Duration</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.time.Instant</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.HashMap</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.Iterator</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.List</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.Map</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.OptionalLong</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">ghidra.app.decompiler.DecompInterface</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.app.decompiler.DecompileResults</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.app.script.GhidraScript</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.address.Address</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.listing.CodeUnit</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.listing.Function</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.mem.MemoryAccessException</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.mem.MemoryBlock</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.pcode.HighFunction</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.pcode.PcodeOp</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.pcode.PcodeOpAST</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.pcode.Varnode</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.symbol.Reference</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.symbol.ReferenceIterator</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> Amadey <span class="kw1">extends</span> GhidraScript <span class="br0">&#123;</span>
&nbsp;
	<span class="co3">/**
	 * Global variable that is used to keep track of the amount of decrypted strings
	 */</span>
	<span class="kw1">private</span> <span class="kw4">int</span> decryptionCount<span class="sy0">;</span>
&nbsp;
	<span class="co3">/**
	 * Global variable that is used to keep track of the amount of comments that
	 * have been set
	 */</span>
	<span class="kw1">private</span> <span class="kw4">int</span> commentCount<span class="sy0">;</span>
&nbsp;
	<span class="co3">/**
	 * Global variable that is used to keep track of the amount of bookmarks that
	 * have been set
	 */</span>
	<span class="kw1">private</span> <span class="kw4">int</span> bookmarkCount<span class="sy0">;</span>
&nbsp;
	<span class="co3">/**
	 * Global variable that is used to keep track of the amount of variables that
	 * have been cached
	 */</span>
	<span class="kw1">private</span> <span class="kw4">int</span> cacheCount<span class="sy0">;</span>
&nbsp;
	<span class="co3">/**
	 * This function is the first that is called by Ghidra when running the script.
	 * In here, variables need to be initialised first. This script uses this
	 * function to obtain information from the user, and to verify this information.
	 * After the verification and other sanity checks, the &quot;handle&quot; function is
	 * called. In there, the decryption logic starts.
	 */</span>
	<span class="kw1">public</span> <span class="kw4">void</span> run<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">Exception</span> <span class="br0">&#123;</span>
		<span class="co1">// Initialisation of the three counters, starting at zero</span>
		decryptionCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		commentCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		bookmarkCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		cacheCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
		<span class="coMULTI">/*
		 * Requesting the function name in a pop-up dialog. The result is provided as
		 * the return value, which is stored into the variable
		 */</span>
		<span class="kw3">String</span> functionName <span class="sy0">=</span> askString<span class="br0">&#40;</span><span class="st0">&quot;Function name required&quot;</span>,
				<span class="st0">&quot;Please provide the name of the function that decrypts the strings:&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// Provide feedback to the user regarding the provided function name</span>
		println<span class="br0">&#40;</span><span class="st0">&quot;Received function name: &quot;</span> <span class="sy0">+</span> functionName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
		<span class="coMULTI">/*
		 * Request the decryption key in a pop-up dialog. The result is provided as the
		 * return value, which is stored into the variable
		 */</span>
		<span class="kw3">String</span> key <span class="sy0">=</span> askString<span class="br0">&#40;</span><span class="st0">&quot;Decryption key required&quot;</span>,
				<span class="st0">&quot;Please provide the name of the function that is used during the string decryption:&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// Provide feedback to the user regarding the provided decryption key</span>
		println<span class="br0">&#40;</span><span class="st0">&quot;Received decryption key: &quot;</span> <span class="sy0">+</span> key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
		<span class="coMULTI">/*
		 * The lack of checks for null values or empty strings are omitted, as the
		 * pop-up dialog does not accept empty strings. Closing the dialog will result
		 * in the cancellation of the whole script, which is out of scope to handle
		 * here.
		 */</span>
&nbsp;
		<span class="coMULTI">/*
		 * Get all the functions for the given name. Symbol names do not need to be
		 * unique in Ghidra, hence the fact that a list is returned
		 */</span>
		List<span class="sy0">&lt;</span>Function<span class="sy0">&gt;</span> functions <span class="sy0">=</span> getGlobalFunctions<span class="br0">&#40;</span>functionName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
		<span class="co1">// If there is only one function with that name, it is safe to continue</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>functions.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="co1">// The first, and only, function resides at index 0</span>
			Function function <span class="sy0">=</span> functions.<span class="me1">get</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="coMULTI">/*
			 * The function address is the first address of the function, which is the
			 * minimum.
			 */</span>
			<span class="kw4">long</span> decryptionFunctionAddress <span class="sy0">=</span> function.<span class="me1">getBody</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getMinAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// Provide feedback to the user about the decryption function details</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;Decryption function (&quot;</span> <span class="sy0">+</span> function.<span class="me1">getName</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; found at 0x&quot;</span>
					<span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>decryptionFunctionAddress<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// A divider is printed as the decryption process is about to start</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;-----------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
			<span class="co1">// To keep track of the time, the start time is saved</span>
			Instant begin <span class="sy0">=</span> Instant.<span class="me1">now</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// The &quot;handle&quot; function deals with the decryption logic</span>
			handle<span class="br0">&#40;</span>decryptionFunctionAddress, key<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// After the function returns, the end time is saved</span>
			Instant end <span class="sy0">=</span> Instant.<span class="me1">now</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// The difference between the two is calculated</span>
			Duration duration <span class="sy0">=</span> Duration.<span class="me1">between</span><span class="br0">&#40;</span>begin, end<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// As the decryption routine has finished, a new divided is printed</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;-----------------------------------------------------------------&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
			<span class="co1">// The collected statistics, as well as the time the script took, are then</span>
			<span class="co1">// printed</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;Decrypted &quot;</span> <span class="sy0">+</span> decryptionCount <span class="sy0">+</span> <span class="st0">&quot; strings (using &quot;</span> <span class="sy0">+</span> cacheCount <span class="sy0">+</span> <span class="st0">&quot; cached strings), placed &quot;</span>
					<span class="sy0">+</span> commentCount <span class="sy0">+</span> <span class="st0">&quot; comments, and created &quot;</span> <span class="sy0">+</span> bookmarkCount <span class="sy0">+</span> <span class="st0">&quot; bookmarks in &quot;</span> <span class="sy0">+</span> duration.<span class="me1">toSeconds</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
					<span class="sy0">+</span> <span class="st0">&quot; seconds!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">// Provide more information about the script to the user</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;If you have any questions or suggestions, feel free to ping me on Twitter: @Libranalysis&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>functions.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/*
			 * If no function is found, the user is notified and the script returns
			 */</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;No functions were found for the given name, please make sure the name is correct and try again.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>functions.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&gt;=</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/*
			 * If multiple functions are using the same name, the user should pick a unique
			 * name for the decryption function and try again
			 */</span>
			println<span class="br0">&#40;</span><span class="st0">&quot;More than one function with this name has been found. Ensure that the name is unique and try again.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * This function handles the string decryption logic. It caches the decrypted
	 * strings, meaning strings that are decrypted more than once, do not need to be
	 * decrypted, as the mapping already exists. The decrypted variables and
	 * cross-references are commented in both the disassembly view, as well as the
	 * decompiler. Additionally, bookmarks are added for each decrypted string.
	 * 
	 * @param decryptionFunctionAddress the address of the decryption function
	 *                                  within the sample
	 * @param key                       the decryption key
	 */</span>
	<span class="kw1">private</span> <span class="kw4">void</span> handle<span class="br0">&#40;</span><span class="kw4">long</span> decryptionFunctionAddress, <span class="kw3">String</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="coMULTI">/*
		 * Create a mapping for handled strings and the address of the variable the
		 * encrypted content resides at
		 */</span>
		Map<span class="sy0">&lt;</span><span class="kw3">Long</span>, String<span class="sy0">&gt;</span> handled <span class="sy0">=</span> <span class="kw1">new</span> HashMap<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="coMULTI">/*
		 * The reference iterator is not limited to a reference amount limit, whereas
		 * some other methods are
		 */</span>
		ReferenceIterator references <span class="sy0">=</span> currentProgram.<span class="me1">getReferenceManager</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
				.<span class="me1">getReferencesTo</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>decryptionFunctionAddress<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
		<span class="co1">// Iterate over all references</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw3">Reference</span> reference <span class="sy0">:</span> references<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/*
			 * Get the address of the location that calls the string decryption function
			 */</span>
			Address address <span class="sy0">=</span> reference.<span class="me1">getFromAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
			<span class="coMULTI">/*
			 * Get the index of the argument that is to be decrypted. Note that the index
			 * count for this starts at 1 (unlike the usual starting point of 0).
			 */</span>
			<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> argumentIndices <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="co1">// The decryption routine has only one argument</span>
&nbsp;
			<span class="kw1">try</span> <span class="br0">&#123;</span>
				<span class="co1">// Get an array with the addresses of the given indices, in this case only 1</span>
				OptionalLong<span class="br0">&#91;</span><span class="br0">&#93;</span> arguments <span class="sy0">=</span> getConstantCallArgument<span class="br0">&#40;</span>address, argumentIndices<span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="co1">// Get the address from the array as a long</span>
				<span class="kw3">Long</span> argument <span class="sy0">=</span> arguments<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">getAsLong</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
				<span class="co1">// Initialise the variables to ensure there are no compiler errors</span>
				<span class="kw3">String</span> decryptedValue <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
				<span class="kw3">String</span> comment <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
				<span class="coMULTI">/*
				 * If the mapping already contains the address of the encrypted variable, it has
				 * already been encountered (and thus decrypted) before. Simply obtaining the
				 * value in the mapping for the given key (the variable's address) yields the
				 * correct result and decreases the time the script needs to run
				 */</span>
				<span class="kw1">if</span> <span class="br0">&#40;</span>handled.<span class="me1">containsKey</span><span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
					decryptedValue <span class="sy0">=</span> handled.<span class="me1">get</span><span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="sy0">;</span>
					comment <span class="sy0">=</span> <span class="st0">&quot;Decrypted value (from cache): <span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> decryptedValue <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
					<span class="co1">//Increase the cache count with one</span>
					cacheCount<span class="sy0">++;</span>
				<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
					<span class="co3">/**
					 * If the address of the encrypted variable is not present, it has not been
					 * encountered before. As such, it needs to be decrypted.
					 */</span>
					decryptedValue <span class="sy0">=</span> getDecryptedArgument<span class="br0">&#40;</span>argument, key<span class="br0">&#41;</span><span class="sy0">;</span>
					comment <span class="sy0">=</span> <span class="st0">&quot;Decrypted value: <span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> decryptedValue <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp;
					<span class="coMULTI">/*
					 * Set comments at the variable itself in the disassembly and decompiler views
					 * respectively
					 */</span>
					currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PLATE_COMMENT</span>,
							comment<span class="br0">&#41;</span><span class="sy0">;</span>
					currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PRE_COMMENT</span>,
							comment<span class="br0">&#41;</span><span class="sy0">;</span>
					<span class="co1">// Increase the comment count with two, based on the above added comments</span>
					commentCount <span class="sy0">+=</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
					<span class="co1">// Create a bookmark at the encrypted variable's address</span>
					createBookmark<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span>, <span class="st0">&quot;Decrypted string&quot;</span>, <span class="st0">&quot;The variable named &quot;</span>
							<span class="sy0">+</span> getSymbolAt<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; is equal to <span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> decryptedValue <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
					<span class="co1">// Increase the bookmark count, based on the above added bookmark</span>
					bookmarkCount<span class="sy0">++;</span>
					<span class="co1">// Add this address (and the decrypted value) to the mapping</span>
					handled.<span class="me1">put</span><span class="br0">&#40;</span>argument, decryptedValue<span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="br0">&#125;</span>
&nbsp;
				<span class="coMULTI">/*
				 * Regardless how the data was obtained, the user is provided with feedback
				 * related to decryption of the string. The argument is also printed, as it
				 * becomes clickable in the console in Ghidra, allowing the user to navigate to
				 * it by double clicking.
				 */</span>
				println<span class="br0">&#40;</span>comment <span class="sy0">+</span> <span class="st0">&quot; (located at 0x&quot;</span> <span class="sy0">+</span> <span class="kw3">Long</span>.<span class="me1">toHexString</span><span class="br0">&#40;</span>argument<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; )&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
				<span class="coMULTI">/*
				 * Set comments at the reference in the disassembly and decompiler views
				 * respectively
				 */</span>
				currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>reference.<span class="me1">getFromAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PLATE_COMMENT</span>,
						comment<span class="br0">&#41;</span><span class="sy0">;</span>
				currentProgram.<span class="me1">getListing</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getCodeUnitAt</span><span class="br0">&#40;</span>reference.<span class="me1">getFromAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setComment</span><span class="br0">&#40;</span>CodeUnit.<span class="me1">PRE_COMMENT</span>,
						comment<span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="co1">// Increase the comment count with two, based on the above added comments</span>
				commentCount <span class="sy0">+=</span> <span class="nu0">2</span><span class="sy0">;</span>
			<span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><span class="kw3">Exception</span> ex<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				println<span class="br0">&#40;</span>ex.<span class="me1">getMessage</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
&nbsp;
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * Gets the decrypted argument from the given address, which is decrypted using
	 * the given key
	 * 
	 * @param argument the address of the argument
	 * @param key      the key that is used to decrypted the value at the argument
	 * @return the decrypted string
	 * @throws MemoryAccessException if an error occurs when obtaining the bytes at
	 *                               the given address
	 */</span>
	<span class="kw1">private</span> <span class="kw3">String</span> getDecryptedArgument<span class="br0">&#40;</span><span class="kw3">Long</span> argument, <span class="kw3">String</span> key<span class="br0">&#41;</span> <span class="kw1">throws</span> MemoryAccessException <span class="br0">&#123;</span>
		<span class="co1">// Gets the memory block at the argument's address</span>
		MemoryBlock block <span class="sy0">=</span> getMemoryBlock<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// The size of the memory block</span>
		<span class="kw4">int</span> size <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw3">Long</span><span class="br0">&#41;</span> block.<span class="me1">getSize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">intValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// Get the bytes at the given address for the given size</span>
		<span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input <span class="sy0">=</span> getBytes<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>argument<span class="br0">&#41;</span>, size<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// Get the raw string from the decryption routine</span>
		<span class="kw3">String</span> decryptedValue <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>input, key<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="coMULTI">/*
		 * Replace values that are lower than 32 in the ASCII table with escaped ones,
		 * only those which are used in this sample are visible here
		 */</span>
		decryptedValue <span class="sy0">=</span> decryptedValue.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\n</span>&quot;</span>, <span class="st0">&quot;<span class="es0">\\</span>n&quot;</span><span class="br0">&#41;</span>.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\r</span>&quot;</span>, <span class="st0">&quot;<span class="es0">\\</span>r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// Get the first readable string from the block of memory and return that value</span>
		<span class="kw1">return</span> getFirstReadableString<span class="br0">&#40;</span>decryptedValue<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * Gets the first readable ASCII string from a given input. If no such value can
	 * be found, the function will return &quot;NO_ASCII_STRING_FOUND&quot;.
	 * 
	 * @param input the string to obtain the first readable ASCII string from
	 * @return the first readable ASCII string
	 */</span>
	<span class="kw1">private</span> <span class="kw3">String</span> getFirstReadableString<span class="br0">&#40;</span><span class="kw3">String</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="co1">// The begin index of the human readable ASCII string</span>
		<span class="kw4">int</span> beginIndex <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
		<span class="co1">// The end index of the human readable ASCII string</span>
		<span class="kw4">int</span> endIndex <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
		<span class="co1">// The lowest human readable ASCII value</span>
		<span class="kw4">int</span> asciiLow <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		<span class="co1">// The highest human readable ASCII value</span>
		<span class="kw4">int</span> asciiHigh <span class="sy0">=</span> <span class="nu0">255</span><span class="sy0">;</span>
&nbsp;
		<span class="coMULTI">/*
		 * This loop iterates over the given string to find the first human readable
		 * ASCII character. When it does, the beginIndex variable is set to that value
		 * and the loop is broken.
		 */</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw4">char</span> currentChar <span class="sy0">=</span> input.<span class="me1">charAt</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>currentChar <span class="sy0">&lt;</span> asciiHigh <span class="sy0">||</span> currentChar <span class="sy0">&gt;</span> asciiLow<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				beginIndex <span class="sy0">=</span> i<span class="sy0">;</span>
				<span class="kw1">break</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="coMULTI">/*
		 * This loop iterates over the given string to find the last human readable
		 * ASCII character. When it does, the endIndex variable is set to that value and
		 * the loop is broken.
		 */</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw4">char</span> currentChar <span class="sy0">=</span> input.<span class="me1">charAt</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>currentChar <span class="sy0">&gt;</span> asciiHigh <span class="sy0">||</span> currentChar <span class="sy0">&lt;</span> asciiLow<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				endIndex <span class="sy0">=</span> i<span class="sy0">;</span>
				<span class="kw1">break</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="coMULTI">/*
		 * If the beginIndex and endIndex are equal to zero or more, both values have
		 * been found in the two loops. As such, the human readable substring can be
		 * returned as a substring from the input at the given two indices.
		 */</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>beginIndex <span class="sy0">&gt;=</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> endIndex <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">return</span> input.<span class="me1">substring</span><span class="br0">&#40;</span>beginIndex, endIndex<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="coMULTI">/*
		 * If either (or both) of the indices could not be found, the default value is
		 * returned
		 */</span>
		<span class="kw1">return</span> <span class="st0">&quot;NO_ASCII_STRING_FOUND&quot;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * The decryption routine that is present in this specific sample
	 * 
	 * @param input the encrypted data
	 * @param key   the decryption key
	 * @return the decrypted string
	 */</span>
	<span class="kw1">private</span> <span class="kw3">String</span> decrypt<span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input, <span class="kw3">String</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="co1">// The key from the sample</span>
		<span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> keyArray <span class="sy0">=</span> key.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="co1">// The length of the key in the sample</span>
		<span class="kw4">int</span> keyLength <span class="sy0">=</span> keyArray.<span class="me1">length</span><span class="sy0">;</span>
		<span class="co1">// The encrypted data is stored in input</span>
		<span class="co1">// The decrypted data</span>
		<span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
		<span class="co1">// Loop through the input</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="co1">// Decrypt the character</span>
			output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">-</span> keyArray<span class="br0">&#91;</span>i <span class="sy0">%</span> keyLength<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&nbsp;
		<span class="co1">// Increase the decryption count</span>
		decryptionCount<span class="sy0">++;</span>
		<span class="co1">// Return the decrypted string</span>
		<span class="kw1">return</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * This function returns an array of optional longs. The size of this array is
	 * equal to the size of the argument indices' size. The indices of the functoin
	 * at the given address starts at 1, unlike the usual 0.
	 * 
	 * @author Lars A. Wallenborn and Jesko H. Hüttenhain(see
	 *         https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/)
	 *         with a slight change in the exception handling by Max 'Libra' Kersten
	 * 
	 * @param addr            the address of the function
	 * @param argumentIndices the indices of the arguments of said function,
	 *                        starting at 1
	 * @return an array of optional longs, with the addresses of the variables
	 * @throws IllegalStateException if the previously defined function is null or
	 *                               if the decompiler fails to complete
	 * @throws UnknownVariableCopy   if the variable's varnode type is unknown
	 */</span>
	<span class="kw1">private</span> OptionalLong<span class="br0">&#91;</span><span class="br0">&#93;</span> getConstantCallArgument<span class="br0">&#40;</span>Address addr, <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> argumentIndices<span class="br0">&#41;</span>
			<span class="kw1">throws</span> <span class="kw3">IllegalStateException</span>, <span class="kw3">IllegalArgumentException</span> <span class="br0">&#123;</span>
		<span class="kw4">int</span> argumentPos <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		OptionalLong argumentValues<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> OptionalLong<span class="br0">&#91;</span>argumentIndices.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
		Function caller <span class="sy0">=</span> getFunctionBefore<span class="br0">&#40;</span>addr<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>caller <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span>
			<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalStateException</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		DecompInterface decompInterface <span class="sy0">=</span> <span class="kw1">new</span> DecompInterface<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		decompInterface.<span class="me1">openProgram</span><span class="br0">&#40;</span>currentProgram<span class="br0">&#41;</span><span class="sy0">;</span>
		DecompileResults decompileResults <span class="sy0">=</span> decompInterface.<span class="me1">decompileFunction</span><span class="br0">&#40;</span>caller, <span class="nu0">120</span>, monitor<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>decompileResults.<span class="me1">decompileCompleted</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
			<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalStateException</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		HighFunction highFunction <span class="sy0">=</span> decompileResults.<span class="me1">getHighFunction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		Iterator<span class="sy0">&lt;</span>PcodeOpAST<span class="sy0">&gt;</span> pCodes <span class="sy0">=</span> highFunction.<span class="me1">getPcodeOps</span><span class="br0">&#40;</span>addr<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">while</span> <span class="br0">&#40;</span>pCodes.<span class="me1">hasNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			PcodeOpAST instruction <span class="sy0">=</span> pCodes.<span class="me1">next</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>instruction.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> PcodeOp.<span class="me1">CALL</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> index <span class="sy0">:</span> argumentIndices<span class="br0">&#41;</span> <span class="br0">&#123;</span>
					argumentValues<span class="br0">&#91;</span>argumentPos<span class="br0">&#93;</span> <span class="sy0">=</span> traceVarnodeValue<span class="br0">&#40;</span>instruction.<span class="me1">getInput</span><span class="br0">&#40;</span>index<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
					argumentPos<span class="sy0">++;</span>
				<span class="br0">&#125;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">return</span> argumentValues<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
	<span class="co3">/**
	 * This function returns an optional long for the given argument's value.
	 * 
	 * @author Lars A. Wallenborn and Jesko H. Hüttenhain (see
	 *         https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/),
	 *         with a slight change in the exception handling by Max 'Libra' Kersten
	 * 
	 * @param argument the instruction at the given index as a Varnode object
	 * @return the address of the argument's value
	 * @throws UnknownVariableCopy if the variable is unknown
	 */</span>
	<span class="kw1">private</span> OptionalLong traceVarnodeValue<span class="br0">&#40;</span>Varnode argument<span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">IllegalArgumentException</span> <span class="br0">&#123;</span>
		<span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">!</span>argument.<span class="me1">isConstant</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			PcodeOp ins <span class="sy0">=</span> argument.<span class="me1">getDef</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>ins <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span>
				<span class="kw1">break</span><span class="sy0">;</span>
			<span class="kw1">switch</span> <span class="br0">&#40;</span>ins.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">CAST</span><span class="sy0">:</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">COPY</span><span class="sy0">:</span>
				argument <span class="sy0">=</span> ins.<span class="me1">getInput</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="kw1">break</span><span class="sy0">;</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">PTRSUB</span><span class="sy0">:</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">PTRADD</span><span class="sy0">:</span>
				argument <span class="sy0">=</span> ins.<span class="me1">getInput</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="kw1">break</span><span class="sy0">;</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">INT_MULT</span><span class="sy0">:</span>
			<span class="kw1">case</span> PcodeOp.<span class="me1">MULTIEQUAL</span><span class="sy0">:</span>
				<span class="kw1">return</span> OptionalLong.<span class="me1">empty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">default</span><span class="sy0">:</span>
				<span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">IllegalArgumentException</span><span class="br0">&#40;</span><span class="kw3">String</span>.<span class="me1">format</span><span class="br0">&#40;</span><span class="st0">&quot;Unknown opcode %s for variable copy at %08X&quot;</span>,
						ins.<span class="me1">getMnemonic</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, argument.<span class="me1">getAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">return</span> OptionalLong.<span class="me1">of</span><span class="br0">&#40;</span>argument.<span class="me1">getOffset</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


					</div><!-- .entry-content -->
			</div><!-- .inside-article -->
</article><!-- #post-## -->

				
								</main><!-- #main -->
	</div><!-- #primary -->

<div id="right-sidebar" itemtype="http://schema.org/WPSideBar" itemscope="itemscope" role="complementary" class="widget-area grid-25 tablet-grid-25 grid-parent sidebar">
	<div class="inside-right-sidebar">
				
		<aside id="recent-posts-2" class="widget inner-padding widget_recent_entries">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://maxkersten.nl/2024/11/27/ghidra-tip-0x08-scripting-with-microservices/">Ghidra Tip 0x08: Scripting with microservices</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/10/31/ghidra-tip-0x07-iterating-over-all-strings-in-a-program/">Ghidra Tip 0x07: Iterating over all strings in a Program</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/09/28/ghidra-tip-0x06-domainfiles-in-projects/">Ghidra Tip 0x06: DomainFiles in Projects</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/08/18/my-impression-of-tdi-2024-blackhat-usa-2024-and-defcon-32/">My impression of TDI 2024, BlackHat USA 2024 and DEFCON 32</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/06/30/ghidra-tip-0x05-headless-execution/">Ghidra Tip 0x05: Headless execution</a>
									</li>
					</ul>

		</aside><aside id="archives-2" class="widget inner-padding widget_archive"><h4 class="widget-title">Archives</h4>
			<ul>
					<li><a href='https://maxkersten.nl/2024/11/'>November 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/10/'>October 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/09/'>September 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/08/'>August 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/06/'>June 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/05/'>May 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/04/'>April 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/03/'>March 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/02/'>February 2024</a></li>
	<li><a href='https://maxkersten.nl/2023/08/'>August 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/05/'>May 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/04/'>April 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/03/'>March 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/02/'>February 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/01/'>January 2023</a></li>
	<li><a href='https://maxkersten.nl/2022/12/'>December 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/11/'>November 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/10/'>October 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/09/'>September 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/08/'>August 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/07/'>July 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/06/'>June 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/05/'>May 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/04/'>April 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/03/'>March 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/02/'>February 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/01/'>January 2022</a></li>
	<li><a href='https://maxkersten.nl/2021/12/'>December 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/11/'>November 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/10/'>October 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/09/'>September 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/08/'>August 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/07/'>July 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/06/'>June 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/05/'>May 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/04/'>April 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/03/'>March 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/02/'>February 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/01/'>January 2021</a></li>
	<li><a href='https://maxkersten.nl/2020/12/'>December 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/11/'>November 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/10/'>October 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/09/'>September 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/08/'>August 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/07/'>July 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/06/'>June 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/05/'>May 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/04/'>April 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/03/'>March 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/02/'>February 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/01/'>January 2020</a></li>
	<li><a href='https://maxkersten.nl/2019/12/'>December 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/11/'>November 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/10/'>October 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/09/'>September 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/08/'>August 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/07/'>July 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/06/'>June 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/05/'>May 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/04/'>April 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/03/'>March 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/02/'>February 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/01/'>January 2019</a></li>
	<li><a href='https://maxkersten.nl/2018/12/'>December 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/11/'>November 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/10/'>October 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/09/'>September 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/08/'>August 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/07/'>July 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/06/'>June 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/01/'>January 2018</a></li>
	<li><a href='https://maxkersten.nl/2017/10/'>October 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/07/'>July 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/06/'>June 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/05/'>May 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/04/'>April 2017</a></li>
			</ul>

			</aside><aside id="categories-2" class="widget inner-padding widget_categories"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-10"><a href="https://maxkersten.nl/category/androidprojectcreator/">AndroidProjectCreator</a>
</li>
	<li class="cat-item cat-item-16"><a href="https://maxkersten.nl/category/api-clients/">API Clients</a>
</li>
	<li class="cat-item cat-item-9"><a href="https://maxkersten.nl/category/binary-analysis-course/">Binary Analysis Course</a>
</li>
	<li class="cat-item cat-item-4"><a href="https://maxkersten.nl/category/capricorn/">Capricorn</a>
</li>
	<li class="cat-item cat-item-18"><a href="https://maxkersten.nl/category/conferences/">Conferences</a>
</li>
	<li class="cat-item cat-item-3"><a href="https://maxkersten.nl/category/ethics/">Ethics</a>
</li>
	<li class="cat-item cat-item-2"><a href="https://maxkersten.nl/category/gemini/">Gemini</a>
</li>
	<li class="cat-item cat-item-6"><a href="https://maxkersten.nl/category/lectures/">Lectures</a>
</li>
	<li class="cat-item cat-item-19"><a href="https://maxkersten.nl/category/libras-ghidra-library/">Libra&#039;s Ghidra Library</a>
</li>
	<li class="cat-item cat-item-17"><a href="https://maxkersten.nl/category/m3/">m3</a>
</li>
	<li class="cat-item cat-item-15"><a href="https://maxkersten.nl/category/magecart/">MageCart</a>
</li>
	<li class="cat-item cat-item-13"><a href="https://maxkersten.nl/category/malpull/">MalPull</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://maxkersten.nl/category/malware-analysis/">Malware Analysis</a>
</li>
	<li class="cat-item cat-item-14"><a href="https://maxkersten.nl/category/malwaretheflag/">MalwareTheFlag</a>
</li>
	<li class="cat-item cat-item-11"><a href="https://maxkersten.nl/category/responsible-disclosure/">Responsible Disclosure</a>
</li>
	<li class="cat-item cat-item-12"><a href="https://maxkersten.nl/category/reviews/">Reviews</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://maxkersten.nl/category/uncategorized/">Uncategorized</a>
</li>
	<li class="cat-item cat-item-5"><a href="https://maxkersten.nl/category/web-hacking/">Web hacking</a>
</li>
	<li class="cat-item cat-item-7"><a href="https://maxkersten.nl/category/whitepapers/">Whitepapers</a>
</li>
			</ul>

			</aside>			</div><!-- .inside-right-sidebar -->
</div><!-- #secondary -->
	</div><!-- #content -->
</div><!-- #page -->
<div class="site-footer  ">
		<footer class="site-info" itemtype="http://schema.org/WPFooter" itemscope="itemscope">
		<div class="inside-site-info grid-container grid-parent">
						<div class="copyright-bar">
				<span class="copyright">&copy; 2024</span> &bull; <a href="https://generatepress.com" target="_blank" itemprop="url">GeneratePress</a>			</div>
		</div>
	</footer><!-- .site-info -->
	</div><!-- .site-footer -->

<a title="Scroll back to top" rel="nofollow" href="#" class="generate-back-to-top" style="opacity:0;visibility:hidden;" data-scroll-speed="400" data-start-scroll="300">
			<i class="fa fa-angle-up" aria-hidden="true"></i>
			<span class="screen-reader-text">Scroll back to top</span>
		</a><script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/navigation.min.js?ver=1.3.46" id="generate-navigation-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/dropdown.min.js?ver=1.3.46" id="generate-dropdown-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/back-to-top.min.js?ver=1.3.46" id="generate-back-to-top-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/html5shiv.min.js?ver=1.3.46" id="generate-html5-js"></script>
<![endif]-->

</body>
</html>