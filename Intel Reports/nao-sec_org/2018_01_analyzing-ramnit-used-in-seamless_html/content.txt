<!DOCTYPE html>
<title>Analyzing Ramnit used in Seamless campaign | @nao_sec</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta content="nao-sec.org" property="og:title" />
<meta content="article" property="og:type" />
<meta content="https://nao-sec.org/2018/01/analyzing-ramnit-used-in-seamless.html" property="og:url" />
<meta content="nao-sec.org" property="og:site_name" />
<meta content="Analyzing Ramnit used in Seamless campaign - @nao_sec" property="og:description" />
<meta content="https://nao-sec.org/assets/icon.png" name="twitter:image:src" />
<meta content="@nao_sec" name="twitter:site" />
<meta content="summary" name="twitter:card" />
<meta content="nao-sec.org" name="twitter:title" />
<meta content="https://nao-sec.org/assets/icon.png" property="og:image" />
<meta name="description" content="FirstSeamless campaign which is a Drive-by Download attack campaign uses Ramnit banking trojan. Many articles about Seamless campaign are published. For exam...">
<meta name="author" content="友利奈緒">
<meta name="generator" content="Jekyll v3.10.0">
<link rel="canonical" href="https://nao-sec.org/2018/01/analyzing-ramnit-used-in-seamless.html">
<link rel="stylesheet" href="/assets/css/index.css">
<link rel="stylesheet" href="/assets/css/classes.css">
<link rel="stylesheet" href="/assets/css/default.css">
<link rel="alternate" type="application/atom+xml" href="/feed.xml" title="nao_sec" />




<body class="light">

<header>
  <div id="head-wrap">
    <div id="head-row">
      <h1><a href="/" class="brand"><img src="/assets/logo.png" class="logo" />nao_sec</a></h1>
    </div>
    <div id="head-row">
      <nav><a href="/">Home</a><a href="/archive">Archive</a><a href="/about">About</a></nav>
      <nav><a class="icon" href="/cdn-cgi/l/email-protection#eb82858d84ab858a84c6988e88c584998c"><svg><use xlink:href="/assets/fontawesome/icons.svg#envelope"></use></svg></a><a class="icon" href="https://twitter.com/nao_sec"><svg><use xlink:href="/assets/fontawesome/icons.svg#twitter"></use></svg></a><a class="icon" href="https://infosec.exchange/@nao_sec"><svg><use xlink:href="/assets/fontawesome/icons.svg#mastodon"></use></svg></a><a class="icon" href="https://github.com/nao-sec"><svg><use xlink:href="/assets/fontawesome/icons.svg#github"></use></svg></a><a class="icon" href="/feed.xml"><svg><use xlink:href="/assets/fontawesome/icons.svg#rss"></use></svg></a></nav>    
    </div>
  </div>
</header>

<article>
  <header><h1><a href="/2018/01/analyzing-ramnit-used-in-seamless.html">Analyzing Ramnit used in Seamless campaign</a></h1>
    <time datetime="2018-01-01T15:00:00+00:00">2018-01-01</time>
  </header>
<h3>First</h3>Seamless campaign which is a Drive-by Download attack campaign uses Ramnit banking trojan. Many articles about Seamless campaign are published. For example, <a href="https://umbrella.cisco.com/blog/2017/03/29/seamless-campaign-delivers-ramnit-via-rig-ek/" target="_blank">Cisco Umbrella</a>, <a href="http://malware-traffic-analysis.net/2017/12/28/index.html" target="_blank">Malware-Traffic-Analysis</a> and <a href="https://traffic.moe/2017/12/25/index.html">traffic.moe</a>. Seamless has been using Ramnit since it began to be observed. Once run, Ramnit injects code into the web page to steal information such as credit cards. Ramnit is a previously reported banking trojan, but since I didn't know much about it, so I investigated about it.<br /><br /><h3>Seamless Campaign Traffic</h3>First, about Seamless campaign. Seamless campaign consists of the following traffic.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-YO5T97aCQJo/Wko3HEjprdI/AAAAAAAAAFI/_rAFg1Lk8DEFlw0OufDtwQKgE6Xi9N8ugCLcBGAs/s1600/0.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="220" data-original-width="818" height="86" src="https://3.bp.blogspot.com/-YO5T97aCQJo/Wko3HEjprdI/AAAAAAAAAFI/_rAFg1Lk8DEFlw0OufDtwQKgE6Xi9N8ugCLcBGAs/s320/0.png" width="320" /></a></div><br />When reaching Seamless's Pre-Gate from the ad network, Pre-Gate gets the user's time zone information and sends it to the server. If the user belongs to the target time zone, Pre-Gate redirects the user to Gate via several redirectors. The user reads the landing page of the RIG Exploit Kit at Gate, which attacks and sends Ramnit.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-2w0qA1wz3mE/Wko3MaXGqNI/AAAAAAAAAFM/P2bPDZomfh0Qw-WkD1HrmTnTw1ovvaGtACLcBGAs/s1600/1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="402" data-original-width="1018" height="126" src="https://3.bp.blogspot.com/-2w0qA1wz3mE/Wko3MaXGqNI/AAAAAAAAAFM/P2bPDZomfh0Qw-WkD1HrmTnTw1ovvaGtACLcBGAs/s320/1.png" width="320" /></a></div><br />Seamless is sensitive to the user's geolocation. Pre-Gate exists for each target country. For example, Pre-Gate for USA redirect to Gate for USA and Ramnit for USA is sent.<br /><br /><h3>Ramnit Traffic</h3>Ramnit uses the original protocol when communicating with C2. Following this protocol, I try to extract the configs and modules from the traffic of Ramnit and C2.<br /><br />This protocol uses port 443. But, not https. A simple mechanism is on tcp. Packet consists of multiple commands and data. The structure is as follows.<br /><br /><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="https://gist.github.com/koike/bf685baec371490844ff17c8fee2b655.js"></script><br /><br />magic number is a fixed value. Packets start with this bytes. length is the length of command and data. In other words, strlen(command + data). command is 1 byte. There are various kinds of this.<br /><br /><script src="https://gist.github.com/koike/7c67c59dd74f77e004f84ef9aaf8282d.js"></script><br /><br />Data has three structures.<br /><br /><script src="https://gist.github.com/koike/9f0f628ae9510dfb531bde96d77061e2.js"></script><br /><br />The encryption key of RC4 seems to be stable. In my environment `fenquyidh` is the key.<br /><br />Let's look at the data using actual traffic. If you have Ramnit traffic, use it. If you do not have it, look for Ramnit and move it, or look for pcap etc. For example, if you look at the #Ramnit tag on Twitter, you will find many Tweets. You will surely get Ramnit or its traffic.<br /><br />Ramnit is banking trojan. It depends on the target country/region. For example, Ramnit used in attack campaign targeting Japan doesn't work with IP addresses of countries other than Japan. The configs and modules that Ramnit acquires from C2 also change. This time, let's see the traffic of Ramnit for Japan. If you are not able to get the traffic of Ramnit for Japan, please refer to this link. It seems that someone kindly released pcap ;)<br /><br /><a href="https://gist.github.com/anonymous/2d7eef0c0ffba19338afd74823d7a8c9" target="_blank">https://gist.github.com/anonymous/2d7eef0c0ffba19338afd74823d7a8c9</a><br /><br />Let's open pcap and look at the first packet.<br /><br /><script src="https://gist.github.com/koike/0f24a8c9811e2ec45b3ba865129f5bd0.js"></script><br /><br />When parsing this according to the protocol, it becomes as follows.<br /><br /><script src="https://gist.github.com/koike/7c30cde24b7f9b101adb1c7e797f6037.js"></script><br /><br />This data is encoded with RC4. So I decode it. RC 4 is a simple algorithm, write the code.<br /><br /><script src="https://gist.github.com/koike/a0dea5c6b5b00049d39e004ecfebc39a.js"></script><br /><br />The results are as follows. Ramnit is sending two MD5 values to C2. Registration is done to bot by this.<br /><br />string(32) "d5ad437b032fd239616c1d0d97a6b6eb"<br />string(32) "e4b7a6323fab5960363d771a124b6079"<br /><br />This is what automates these processes.<br /><br /><a href="https://github.com/nao-sec/ramnit_traffic_parser" target="_blank">https://github.com/nao-sec/ramnit_traffic_parser</a><br /><br />This script uses tshark. If not installed, please install and set environment variables. Now, let's run the script.<br /><br /><script src="https://gist.github.com/koike/3d2d1b7c111eb5fbdc6d2154f820d668.js"></script><br /><br />Files are created in the output directory. Let's look at `064_21.bin`.<br /><br />This file says "Antivirus Trusted Module v2.0 (AVG, Avast, Nod32, Norton, Bitdefender)". You can see that there is MZ header below 0x120 and it is a PE file. Cutting out 0x120 or later result in the following.<br /><br /><script src="https://gist.github.com/koike/a4c824c0f494ad0f0da6c11d8d60b26f.js"></script><br /><br />It is unpacked because packed by UPX.<br /><br /><script src="https://gist.github.com/koike/100cad27991f1f6a0e74274b4ddfe0b2.js"></script><br /><br />Looking at this DLL with IDA, you can see that it is a program that interferes with Anti-Virus software.<br /><br />Several DLL modules (067_21.bin, 070_21.bin, 073_21.bin) are downloaded like this.<br /><br />Next, let's see 106_15.bin. This file seems to be zip. Looking inside it was IE's cookies. There was a DLL module that zipped the cookie, so it might be related.<br /><br /><script src="https://gist.github.com/koike/d8b9b35498dbd0b1c384969202abe0be.js"></script><br /><br />Finally, look at 139_13.bin. This is the config of the injecting code for the web page.<br /><br /><script src="https://gist.github.com/koike/6111ab8240572e9d4e86e171f5173cbf.js"></script><br /><br />Looking at this configuration, URLs of many credit card companies and related companies exist. It was localized for Japan.<br /><br /><h3>Ramnit Modules</h3>I analyzed the modules that Ramnit downloads. All modules had data added at the beginning of the PE format.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://i.imgur.com/QPwhiNh.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="511" data-original-width="611" height="267" src="https://i.imgur.com/QPwhiNh.png" width="320" /></a></div><br />Also, its PE file is a DLL, packed with UPX.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://i.imgur.com/oinMUSG.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="231" data-original-width="691" height="106" src="https://i.imgur.com/oinMUSG.png" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><a href="https://i.imgur.com/GH4gUiQ.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="123" data-original-width="620" height="63" src="https://i.imgur.com/GH4gUiQ.png" width="320" /></a></div><br />At the beginning of the module there is a comment like a description of the role. Most of them are similar to the information already analyzed by analysts.<br /><br /><br /><ul><li><a href="https://www.cert.pl/en/news/single/ramnit-in-depth-analysis/" target="_blank">https://www.cert.pl/en/news/single/ramnit-in-depth-analysis/</a></li><li><a href="http://www.vkremez.com/2017/08/8-10-2017-rig-exploit-kit-leads-to.html" target="_blank">http://www.vkremez.com/2017/08/8-10-2017-rig-exploit-kit-leads-to.html</a></li><li><a href="https://www.s21sec.com/en/blog/2017/07/ramnit-and-its-pony-module/" target="_blank">https://www.s21sec.com/en/blog/2017/07/ramnit-and-its-pony-module/</a></li></ul><br /><br /><h3>For Japan</h3>[module 1]<br /><br /><ul><li>AvTrust</li><li>Antivirus Trusted Module v2.0 (AVG, Avast, Nod32, Norton, Bitdefender)</li></ul><br /><br />Add to antivirus software exception list<br /><br />[module 2]<br /><br /><ul><li>CookieGrabber</li><li>Cookie Grabber v0.2 (no mask)</li></ul><br /><br />Compress and send cookies of browsers (firefox, chorome, opera, IE) to zip.<br /><br />[module 3]<br /><br /><ul><li>Hooker</li><li>IE &amp; Chrome &amp; FF injector</li></ul><br /><br />[module 4]<br />Browser communication hook<br /><br /><br /><ul><li>VNC IFSB</li><li>VNC IFSB x64-x86</li></ul><br /><br />I think it is similar to this code.<br /><a href="https://github.com/gbrindisi/malware/blob/master/windows/gozi-isfb/AcDll/activdll.c" target="_blank">https://github.com/gbrindisi/malware/blob/master/windows/gozi-isfb/AcDll/activdll.c</a><br /><br />[module 5]<br /><br /><ul><li>FFCH</li><li>FF&amp;Chrome reinstall x64-x86 [silent]</li></ul><br /><br /><h3>For USA</h3>module 1~4 is the same. module5 had the following functions instead.<br /><br /><br /><ul><li>FtpGrabber2</li><li>Ftp Grabber v2.0</li></ul><br /><br />And In US IP, AZORult has been downloaded.<br /><br /><a href="https://www.hybrid-analysis.com/sample/37b66f9117a2140fa11badad967c09142860d04af9a3564bfe58527d7d7e9270" target="_blank">https://www.hybrid-analysis.com/sample/37b66f9117a2140fa11badad967c09142860d04af9a3564bfe58527d7d7e9270</a><br /><br /><h3>IOCs</h3><a href="https://github.com/nao-sec/ioc/blob/master/nao_sec/5a34bc94-1eb8-4213-9ab8-34dbc0a8010a.json" target="_blank">https://github.com/nao-sec/ioc/blob/master/nao_sec/5a34bc94-1eb8-4213-9ab8-34dbc0a8010a.json</a><br /><br /><h3>Finally</h3>The Ramnit has not changed very much for a long time. It was consistent with Symantec's contents published in 2014.<br /><br /><a href="https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/w32-ramnit-analysis-15-en.pdf" target="_blank">https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/w32-ramnit-analysis-15-en.pdf</a><br /><br />The configuration changes depending on the IP address, but the same module was downloaded.<br /><br />Ramnit traffic is interesting ;)
  
  
</article>


<footer>
  <a class="gray" href="/2018/02/analyzing-grandsoft-exploit-kit.html">« Analyzing GrandSoft Exploit Kit</a>
  <a class="gray" href="/2017/12/survey-of-ngay-campaign.html">Survey of "ngay campaign" »</a>
</footer>



</body>