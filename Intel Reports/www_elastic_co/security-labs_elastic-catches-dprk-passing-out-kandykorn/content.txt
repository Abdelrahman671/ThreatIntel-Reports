<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Elastic catches DPRK passing out KANDYKORN — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware."/><meta property="og:title" content="Elastic catches DPRK passing out KANDYKORN — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/elastic-catches-dprk-passing-out-kandykorn/photo-edited-01@2x.jpg?eafd3be6bdc1714d705c4128097b7749"/><meta property="og:image:alt" content="Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Elastic catches DPRK passing out KANDYKORN — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/elastic-catches-dprk-passing-out-kandykorn/photo-edited-01@2x.jpg?eafd3be6bdc1714d705c4128097b7749"/><meta name="twitter:image:alt" content="Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware."/><link rel="canonical" href="https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2023-11-01T00:00:00.000Z">1 November 2023</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/colson-wilhoit">Colson Wilhoit</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/ricardo-ungureanu">Ricardo Ungureanu</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/andrew-pease">Andrew Pease</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Elastic catches DPRK passing out&nbsp;KANDYKORN</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>30 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a>, </span><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/attack-pattern">Attack pattern</a>, </span><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/activity-group">Activity group</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Elastic catches DPRK passing out KANDYKORN" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Felastic-catches-dprk-passing-out-kandykorn%2Fphoto-edited-01%402x.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>Elastic Security Labs is disclosing a novel intrusion targeting blockchain engineers of a crypto exchange platform. The intrusion leveraged a combination of custom and open source capabilities for initial access and post-exploitation.</p>
<p>We discovered this intrusion when analyzing attempts to reflectively load a binary into memory on a macOS endpoint. The intrusion was traced to a Python application posing as a cryptocurrency arbitrage bot delivered via a direct message on a public Discord server.</p>
<p>We attribute this activity to DPRK and recognize overlaps with the Lazarus Group based on our analysis of the techniques, network infrastructure, code-signing certificates, and custom Lazarus Group detection rules; we track this intrusion set as REF7001.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>Threat actors lured blockchain engineers with a Python application to gain initial access to the environment</li>
<li>This intrusion involved multiple complex stages that each employed deliberate defense evasion techniques</li>
<li>The intrusion set was observed on a macOS system where an adversary attempted to load binaries into memory, which is atypical of macOS intrusions</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="execution-flow" class="absolute -top-32"></span>Execution flow</h2>
<p></p>
<p>Attackers impersonated blockchain engineering community members on a public Discord frequented by members of this community. The attacker social-engineered their initial victim, convincing them to download and decompress a ZIP archive containing malicious code. The victim believed they were installing an <a href="https://wundertrading.com/en/crypto-arbitrage-bot">arbitrage bot</a>, a software tool capable of profiting from cryptocurrency rate differences between platforms.</p>
<p>This execution kicked off the primary malware execution flow of the REF7001 intrusion, culminating in KANDYKORN:</p>
<ul>
<li>Stage 0 (Initial Compromise) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code></li>
<li>Stage 1 (Dropper) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code></li>
<li>Stage 2 (Payload) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> - SUGARLOADER</li>
<li>Stage 3 (Loader)- Discord (fake) - HLOADER</li>
<li>Stage 4 (Payload) - KANDYKORN</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stage-0-initial-compromise-watcherpy" class="absolute -top-32"></span>Stage 0 Initial compromise: Watcher.py</h2>
<p>The initial breach was orchestrated via a camouflaged Python application designed and advertised as an arbitrage bot targeted at blockchain engineers. This application was distributed as a .zip file titled <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Cross-Platform Bridges.zip</code>. Decompressing it reveals a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Main.py</code> script accompanied by a folder named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">order_book_recorder</code>, housing 13 Python scripts.</p>
<p></p>
<p>The victim manually ran the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Main.py</code> script via their PyCharm IDE Python interpreter.</p>
<p>Initially, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Main.py</code> script appears benign. It imports the accompanying Python scripts as modules and seems to execute some mundane functions.</p>
<p>While analyzing the modules housed in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">order_book_recorder</code> folder, one file -- <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> -- clearly stood out and we will see why.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Main.py</code> acts as the initial trigger, importing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> as a module that indirectly executes the script. The Python interpreter runs every top-level statement in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> sequentially.</p>
<p>The script starts off by establishing local directory paths and subsequently attempts to generate a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_log</code> folder at the specified location. If the folder already exists, the script remains passive.</p>
<p></p>
<p>The script pre-defines a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> file path (destined for the just created <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_log</code> folder) and assigns it to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">output</code> variable. The function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">import_networklib</code> is then defined. Within it, a Google Drive URL is initialized.</p>
<p>Utilizing the Python <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">urllib</code> library, the script fetches content from this URL and stashes it in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">s_args</code> variable. In case of retrieval errors, it defaults to returning the operating system&#x27;s name. Subsequently, the content from Google Drive (now in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">s_args</code>) is written into the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> file.</p>
<p></p>
<p></p>
<p></p>
<p>The next function, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">get_modules_base_version</code>, probes the Python version and invokes the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">import_networklib</code> function if it detects version 3. This call sets the entire sequence in motion.</p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> imports <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> as a module, executing the contents of the script.</p>
<p></p>
<p>Concluding its operation, the malicious script tidies up, deleting the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> file immediately after its one-time execution.</p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stage-1-droppers-testspeedpy-and-findertools" class="absolute -top-32"></span>Stage 1 droppers testSpeed.py and FinderTools</h2>
<p>When executed, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> establishes an outbound network connection and fetches another Python file from a Google Drive URL, named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code>. This new file is saved to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Users/Shared/</code> directory, with the method of retrieval mirroring the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> script.</p>
<p></p>
<p></p>
<p>After download, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> launches <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code>, providing a URL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC</code>) as an argument which initiates an outbound network connection.</p>
<p></p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code> is yet another dropper, downloading and executing a hidden second stage payload <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> also written to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Users/Shared/</code> directory.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stage-2-payload-sld-and-log-sugarloader" class="absolute -top-32"></span>Stage 2 payload .sld and .log: SUGARLOADER</h2>
<p>Stage 2 involves the execution of an obfuscated binary we have named SUGARLOADER, which is utilized twice under two separate names (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code>).</p>
<p>SUGARLOADER is first observed at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Users/shared/.sld</code>. The second instance of SUGARLOADER, renamed to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code>, is used in the persistence mechanism REF7001 implements with Discord.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="obfuscation" class="absolute -top-32"></span>Obfuscation</h3>
<p>SUGARLOADER is used for initial access on the machine, and initializing the environment for the final stage. This binary is obfuscated using a binary packer, limiting what can be seen with static analysis.</p>
<p>The start function of this binary consists of a jump (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JMP</code>) to an undefined address. This is common for binary packers.</p>
<pre><code>HEADER:00000001000042D6 start:
HEADER:00000001000042D6                 jmp     0x10000681E</code></pre>
<p>Executing the macOS file object tool <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">otool -l ./log</code> lists all the sections that will be loaded at runtime.</p>
<pre><code>Section
  sectname __mod_init_func
   segname lko2
      addr 0x00000001006983f0
      size 0x0000000000000008
    offset 4572144
     align 2^3 (8)
    reloff 0
    nreloc 0
     flags 0x00000009
 reserved1 0
 reserved2 0</code></pre>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">__mod_init_func</code> contains initialization functions. The C++ compiler places static constructors here. This is the code used to unpack the binary in memory.</p>
<p>A successful method of reverse engineering such files is to place a breakpoint right after the execution of initialization functions and then take a snapshot of the process&#x27;s virtual memory. When the breakpoint is hit, the code will already be decrypted in memory and can be analyzed using traditional methods.</p>
<p>Adversaries commonly use obfuscation techniques such as this to bypass traditional static signature-based antimalware capabilities. As of this publication, VirusTotal <a href="https://www.virustotal.com/gui/file/3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940">shows 0 detections of this file</a>, which suggests these defense evasions continue to be cost-effective.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="execution" class="absolute -top-32"></span>Execution</h3>
<p>The primary purpose of SUGARLOADER is to connect to a Command and Control server (C2), in order to download a final stage payload we refer to as KANDYKORN, and execute it directly in memory.</p>
<p>SUGARLOADER checks for the existence of a configuration file at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Library/Caches/com.apple.safari.ck</code>. If the configuration file is missing, it will be downloaded and created via a default C2 address provided as a command line argument to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> binary. In our sample, the C2 address was <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">23.254.226[.]90</code> over TCP port <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">443</code>. We provide additional information about the C2 in the Network Infrastructure section below.</p>
<p></p>
<p></p>
<p>The configuration file is encrypted using RC4 and the encryption key (in the Observations section) is hardcoded within SUGARLOADER itself. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">com.apple.safari.ck</code> file is utilized by both SUGARLOADER and KANDYKORN for establishing secure network communications.</p>
<pre><code>struct MalwareConfig
{
  char computerId[8];
  _BYTE gap0[12];
  Url c2_urls[2];
  Hostname c2_ip_address[2];
  _BYTE proxy[200];
  int sleepInterval;
};</code></pre>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">computerId</code> is a randomly generated string identifying the victim’s computer.</p>
<p>A C2 server can either be identified with a fully qualified URL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c2_urls</code>) or with an IP address and port (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c2_ip_ddress</code>). It supports two C2 servers, one as the main server, and the second one as a fallback. The specification or hardcoding of multiple servers like this is commonly used by malicious actors to ensure their connection with the victim is persistent should the original C2 be taken down or blocked. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sleepInterval</code> is the default sleeping interval for the malware between separate actions.</p>
<p>Once the configuration file is read into memory and decrypted, the next step is to initialize a connection to the remote server. All the communication between the victim’s computer and the C2 server is detailed in the Network Protocol section.</p>
<p>The last step taken by SUGARLOADER is to download a final stage payload from the C2 server and execute it. REF7001 takes advantage of a technique known as <a href="https://attack.mitre.org/techniques/T1620/">reflective binary loading</a> (allocation followed by the execution of payloads directly within the memory of the process) to execute the final stage, leveraging APIs such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NSCreateObjectFileImageFromMemory</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NSLinkModule</code>. Reflective loading is a powerful technique. If you&#x27;d like to learn more about how it works, check out this research by <a href="https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f">slyd0g</a> and <a href="https://hackd.net/posts/macos-reflective-code-loading-analysis/">hackd</a>.</p>
<p>This technique can be utilized to execute a payload from an in-memory buffer. Fileless execution such as this <a href="https://objective-see.org/blog/blog_0x51.html">has been observed previously</a> in attacks conducted by the Lazarus Group.</p>
<p>SUGARLOADER reflectively loads a binary (KANDYKORN) and then creates a new file initially named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">appname</code> which we refer to as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HLOADER</code> which we took directly from the process code signature’s signing identifier.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stage-3-loader-discord-hloader" class="absolute -top-32"></span>Stage 3 loader Discord: HLOADER</h2>
<p>HLOADER (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1</code>) is a payload that attempts to masquerade as the legitimate Discord application. As of this writing, <a href="https://www.virustotal.com/gui/file/2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1">it has 0 detections on VirusTotal</a>.</p>
<p></p>
<p>HLOADER was identified through the use of a macOS binary code-signing technique that has been <a href="https://objective-see.org/blog/blog_0x73.html">previously linked</a> to the <a href="https://www.eset.com/int/about/newsroom/press-releases/research/eset-research-discovers-new-lazarus-dreamjob-campaign-and-links-it-to-phone-provider-3cx-supply-chai/">DPRK’s Lazarus Group 3CX intrusion</a>. In addition to other published research, Elastic Security Labs has also used the presence of this technique as an indicator of DPRK campaigns, as seen in our June 2023 research publication on <a href="https://www.elastic.co/security-labs/inital-research-of-jokerspy#the-xcc-binary">JOKERSPY</a>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="persistence" class="absolute -top-32"></span>Persistence</h3>
<p>We observed the threat actor adopting a technique we have not previously seen them use to achieve persistence on macOS, known as <a href="https://attack.mitre.org/techniques/T1574/">execution flow hijacking</a>. The target of this attack was the widely used application Discord. The Discord application is often configured by users as a login item and launched when the system boots, making it an attractive target for takeover. HLOADER is a self-signed binary written in Swift. The purpose of this loader is to execute both the legitimate Discord bundle and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> payload, the latter of which is used to execute Mach-O binary files from memory without writing them to disk.</p>
<p>The legitimate binary <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Applications/Discord.app/Contents/MacOS/Discord</code> was renamed to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.lock</code>, and replaced by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HLOADER</code>.</p>
<p></p>
<p>Below is the code signature information for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HLOADER</code>, which has a self-signed identifier structure consistent with other Lazarus Group samples.</p>
<pre><code>Executable=Applications/Discord.app/Contents/MacOS/Discord
Identifier=HLOADER-5555494485b460f1e2343dffaef9b94d01136320
Format=bundle with Mach-O universal (x86_64 arm64)
CodeDirectory flags=0x2(adhoc) hashes=12+7 location=embedded</code></pre>
<p>When executed, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HLOADER</code> performs the following operations:</p>
<ul>
<li>Renames itself from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Discord</code> to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MacOS.tmp</code></li>
<li>Renames the legitimate Discord binary from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.lock</code> to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Discord</code></li>
<li>Executes both Discord and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NSTask.launchAndReturnError</code></li>
<li>Renames both files back to their initial names</li>
</ul>
<p></p>
<p></p>
<p>The following process tree also visually depicts how persistence is obtained. The root node <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Discord</code> is actually HLOADER disguised as the legitimate app. As presented above, it first runs .lock, which is in fact Discord, and, alongside, spawns SUGARLOADER as a process named .log.</p>
<p></p>
<p>As seen in stage 2, SUGARLOADER reads the configuration file, connects to the C2 server, and waits for a payload to be received. Another alert is generated when the new payload (KANDYKORN) is loaded into memory.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stage-4-payload-kandykorn" class="absolute -top-32"></span>Stage 4 Payload: KANDYKORN</h2>
<p>KANDYKORN is the final stage of this execution chain and possesses a full-featured set of capabilities to access and exfiltrate data from the victim’s computer. Elastic Security Labs was able to retrieve this payload from one C2 server which hadn’t been deactivated yet.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="execution-1" class="absolute -top-32"></span>Execution</h3>
<p>KANDYCORN processes are forked and run in the background as daemons before loading their configuration file from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Library/Caches/com.apple.safari.ck</code>. The configuration file is read into memory then decrypted using the same RC4 key, and parsed for C2 settings. The communication protocol is similar to prior stages using the victim ID value for authentication.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="command-and-control" class="absolute -top-32"></span>Command and control</h3>
<p>Once communication is established, KANDYKORN awaits commands from the server. This is an interesting characteristic in that the malware waits for commands instead of polling for commands. This would reduce the number of endpoint and network artifacts generated and provide a way to limit potential discovery.</p>
<p>Each command is represented by an integer being transmitted, followed by the data that is specific to each action. Below is a list of the available commands KANDYKORN provides.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd1" class="absolute -top-32"></span>Command 0xD1</h4>
<p>Action: Exit command where the program gracefully exists.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd2" class="absolute -top-32"></span>Command 0xD2</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_basicinfo</code>
Action: Gathers information about the system such as hostname, uid, osinfo, and image path of the current process, and reports back to the server.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd3" class="absolute -top-32"></span>Command 0xD3</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_dir</code>
Action: Lists content of a directory and format the output similar to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ls -al</code>, including type, name, permissions, size, acl, path, and access time.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd4" class="absolute -top-32"></span>Command 0xD4</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_prop</code></p>
<p>Action: Recursively read a directory and count the number of files, number of subdirectories, and total size.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd5" class="absolute -top-32"></span>Command 0xD5</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_upload</code></p>
<p>Action: Used by the adversary to upload a file from their C2 server to the victim’s computer. This command specifies a path, creates it, and then proceeds to download the file content and write it to the victim’s computer.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd6" class="absolute -top-32"></span>Command 0xD6</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_down</code></p>
<p>Action: Used by the adversary to transfer a file from the victim’s computer to their infrastructure.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd7" class="absolute -top-32"></span>Command 0xD7</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_zipdown</code></p>
<p>Action: Archive a directory and exfiltrate it to the C2 server. The newly created archive’s name has the following pattern<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/tempXXXXXXX</code>.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd8" class="absolute -top-32"></span>Command 0xD8</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_file_wipe</code>
Action: Overwrites file content to zero and deletes the file. This is a common technique used to impede recovering the file through digital forensics on the filesystem.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xd9" class="absolute -top-32"></span>Command 0xD9</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_proc_list</code></p>
<p>Action: Lists all running processes on the system along with their PID, UID and other information.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xda" class="absolute -top-32"></span>Command 0xDA</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_proc_kill</code></p>
<p>Action: Kills a process by specified PID.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xdb" class="absolute -top-32"></span>Command 0xDB</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cmd_send</code></p>
<p>Action: Executes a command on the system by using a pseudoterminal.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xdc" class="absolute -top-32"></span>Command 0xDC</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cmd_recv</code></p>
<p>Action: Reads the command output from the previous command <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cmd_send</code>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xdd" class="absolute -top-32"></span>Command 0xDD</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cmd_create</code></p>
<p>Action: Spawns a shell on the system and communicates with it via a pseudoterminal. Once the shell process is executed, commands are read and written through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/dev/pts</code> device.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xde" class="absolute -top-32"></span>Command 0xDE</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cfg_get</code></p>
<p>Action: Sends the current configuration to the C2 from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/Library/Caches/com.apple.safari.ck</code>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xdf" class="absolute -top-32"></span>Command 0xDF</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_cfg_set</code></p>
<p>Action: Download a new configuration file to the victim’s machine. This is used by the adversary to update the C2 hostname that should be used to retrieve commands from.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-0xe0" class="absolute -top-32"></span>Command 0xE0</h4>
<p>Name: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resp_sleep</code></p>
<p>Action: Sleeps for a number of seconds.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="summary" class="absolute -top-32"></span>Summary</h3>
<p>KANDYKORN is an advanced implant with a variety of capabilities to monitor, interact with, and avoid detection. It utilizes reflective loading, a direct-memory form of execution that may bypass detections.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="network-protocol" class="absolute -top-32"></span>Network protocol</h2>
<p>All the executables that communicate with the C2 (both stage 3 and stage 4) are using the same protocol. All the data is encrypted with RC4 and uses the same key previously referenced in the configuration file.</p>
<p>Both samples implement wrappers around the send-and-receive system calls. It can be observed in the following pseudocode that during the send routine, the buffer is first encrypted and then sent to the socket, whereas when data is received it is first decrypted and then processed.</p>
<p></p>
<p></p>
<p>When the malware first connects to the C2 during the initialization phase, there is a handshake that needs to be validated in order to proceed. Should the handshake fail, the attack would stop and no other commands would be processed.</p>
<p>On the client side, a random number is generated and sent to the C2, which replies with a nonce variable. The client then computes a challenge with the random number and the received nonce and sends the result back to the server. If the challenge is successful and the server accepts the connection, it replies with a constant such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x41C3372</code> which appears in the analyzed sample.</p>
<p></p>
<p>Once the connection is established, the client sends its ID and awaits commands from the server. Any subsequent data sent or received from here is serialized following a common schema used to serialize binary objects. First, the length of the content is sent, then the payload, followed by a return code which indicates if any error occurred.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="network-infrastructure" class="absolute -top-32"></span>Network infrastructure</h2>
<p>During REF7001, the adversary was observed communicating with network infrastructure to collect various payloads and loaders for different stages of the intrusion.</p>
<p>As detailed in the Stage 1 section above, the link to the initial malware archive, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Cross-Platform Bridges.zip</code>, was provided in a direct message on a popular blockchain Discord server. This archive was hosted on a Google Drive (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">https://drive.google[.]com/file/d1KW5nQ8MZccug6Mp4QtKyWLT3HIZzHNIL2</code>), but this was removed shortly after the archive was downloaded.</p>
<p>Throughout the analysis of the REF7001 intrusion, there were two C2 servers observed.</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">23.254.226[.]90</code></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tp-globaxyz" class="absolute -top-32"></span>tp-globa[.]xyz</h3>
<p>The C2 domain <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz</code> is used by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code> to download SUGARLOADER and is likely an attempt at <a href="https://en.wikipedia.org/wiki/Typosquatting">typosquatting</a> a legitimate foreign exchange market broker. We do not have any information to indicate that the legitimate company is involved in this intrusion. This typosquatted domain was likely chosen in an attempt to appear more legitimate to the victims of the intrusion.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz</code>, as of this writing, resolves to an IP address (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">192.119.64[.]43</code>) that has been observed distributing malware attributed to the DPRK’s Lazarus Group (<a href="https://twitter.com/TLP_R3D/status/1677617586349981696">1</a>, <a href="https://twitter.com/_reboot_xxxx/status/1679054436289880065">2</a>, <a href="https://twitter.com/KSeznec/status/1678319191110082560">3</a>).</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="2325422690" class="absolute -top-32"></span>23.254.226[.]90</h3>
<p>23.254.226[.]90 is the C2 IP used for the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> file (SUGARLOADER malware). How this IP is used for C2 is highlighted in the stage 2 section above.</p>
<p>On October 14, 2023, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">23.254.226[.]90</code> was used to register the subdomain, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">pesnam.publicvm[.]com</code>. While we did not observe this domain in our intrusion, it is <a href="https://www.virustotal.com/gui/domain/publicvm.com/detection">documented</a> as hosting other malicious software.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="campaign-intersections" class="absolute -top-32"></span>Campaign intersections</h2>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz</code>, has a TLS certificate with a Subject CN of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bitscrunnch.linkpc[.]net</code>. The domain <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bitscrunnch.linkpc[.]net</code> has been <a href="https://twitter.com/tiresearch1/status/1708141542261809360?s=20">attributed</a> to other Lazarus Group intrusions.</p>
<p>As noted above, this is likely an attempt to typosquat a legitimate domain for a decentralized NFT data platform. We do not have any information to indicate that the legitimate company is involved in this intrusion.</p>
<pre><code>…
Issuer: C = US, O = Let&#x27;s Encrypt, CN = R3
Validity
Not Before: Sep 20 12:55:37 2023 GMT
Not After : Dec 19 12:55:36 2023 GMT
Subject: CN = bitscrunnch[.]linkpc[.]net
…</code></pre>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bitscrunnch.linkpc[.]net</code>’s TLS certificate is also used for <a href="https://www.virustotal.com/gui/search/entity%253Adomain%2520ssl_subject%253Abitscrunnch.linkpc.net/domains">other additional domains</a>, all of which are registered to the same IP address reported above in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz</code> section above, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">192.119.64[.]43</code>.</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jobintro.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jobdescription.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">docsenddata.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">docsendinfo.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">datasend.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">exodus.linkpc[.]net</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bitscrunnch.run[.]place</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">coupang-networks[.]pics</code></li>
</ul>
<p>While LinkPC is a legitimate second-level domain and dynamic DNS service provider, it is <a href="https://www.virustotal.com/gui/domain/linkpc.net/community">well-documented</a> that this specific service is used by threat actors for C2. In our <a href="https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket">published research into RUSTBUCKET</a>, which is also attributed to the DPRK, we observed LinkPC being used for C2.</p>
<p>All registered domains, 48 as of this writing, for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">192.119.64[.]43</code> are included in the observables bundle.</p>
<p>Finally, in late July 2023, there were reports on the Subreddits <a href="https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/">r/hacking</a>, <a href="https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/">r/Malware</a>, and <a href="https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/">r/pihole</a> with URLs that matched the structure of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC</code>. The user on Reddit reported that a recruiter contacted them to solve a Python coding challenge as part of a job offer. The code challenge was to analyze Python code purported to be for an internet speed test. This aligns with the REF7001 victim’s reporting on being offered a Python coding challenge and the script name <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> detailed earlier in this research.</p>
<p>The domain reported on Reddit was <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">group.pro-tokyo[.]top//OcRLY4xsFlN/vMZrXIWONw/6OyCZl89HS/fP7savDX6c/bfC</code> which follows the same structure as the REF7001 URL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC</code>):</p>
<ul>
<li>Two <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">//</code>’s after the TLD</li>
<li>5 subdirectories using an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">//11-characters/10-characters/10-characters/</code> structure</li>
<li>The last 2 subdirectories were <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/fP7savDX6c/bfC</code></li>
</ul>
<p>While we did not observe GitHub in our intrusion, the Redditors who reported this did observe GitHub profiles being used. They have all been deactivated.</p>
<p>Those accounts were:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">https://github[.]com/Prtof</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">https://github[.]com/wokurks</code></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="summary-1" class="absolute -top-32"></span>Summary</h2>
<p>The DPRK, via units like the LAZARUS GROUP, continues to target crypto-industry businesses with the goal of stealing cryptocurrency in order to circumvent international sanctions that hinder the growth of their economy and ambitions. In this intrusion, they targeted blockchain engineers active on a public chat server with a lure designed to speak to their skills and interests, with the underlying promise of financial gain.</p>
<p>The infection required interactivity from the victim that would still be expected had the lure been legitimate. Once executed, via a Python interpreter, the REF7001 execution flow went through 5 stages:</p>
<ul>
<li>Stage 0 (staging) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Main.py</code> executes <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Watcher.py</code> as an imported module. This script checks the Python version, prepares the local system directories, then downloads, executes, and cleans up the next stage.</li>
<li>Stage 1 (generic droppers) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">testSpeed.py</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FinderTools</code> are intermediate dropper Python scripts that download and execute SUGARLOADER.</li>
<li>Stage 2 (SUGARLOADER) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sld</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> are Mach-O executable payloads that establish C2, write the configuration file and reflectively load KANDYKORN.</li>
<li>Stage 3 (HLOADER) - <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HLOADER</code>/<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Discord</code>(fake) is a simple loader used as a persistence mechanism masquerading as the legitimate Discord app for the loading of SUGARLOADER.</li>
<li>Stage 4 (KANDYKORN) - The final reflectively loaded payload. KANDYKORN is a full-featured memory resident RAT with built-in capabilities to:<!-- -->
<ul>
<li>Conduct encrypted command and control</li>
<li>Conduct system enumeration</li>
<li>Upload and execute additional payloads</li>
<li>Compress and exfil data</li>
<li>Kill processes</li>
<li>Run arbitrary system commands through an interactive pseudoterminal</li>
</ul>
</li>
</ul>
<p>Elastic traced this campaign to April 2023 through the RC4 key used to encrypt the SUGARLOADER and KANDYKORN C2. This threat is still active and the tools and techniques are being continuously developed.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="the-diamond-model" class="absolute -top-32"></span>The Diamond Model</h2>
<p>Elastic Security utilizes the Diamond Model to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for an, although cluttered, single diamond.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>[Malware] and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that advanced persistent threats used against enterprise networks.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h4>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0002">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0003">Persistence</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0009">Collection</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0011">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010">Exfiltration</a></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h4>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1204/002/">User Execution: Malicious File</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/006/">Command and Scripting Interpreter: Python</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/004/">Command and Scripting Interpreter: Unix Shell</a></li>
<li><a href="https://attack.mitre.org/techniques/T1574/">Hijack Execution Flow</a></li>
<li><a href="https://attack.mitre.org/techniques/T1140/">Deobfuscate/Decode Files or Information</a></li>
<li><a href="https://attack.mitre.org/techniques/T1564/001/">Hide Artifacts: Hidden Files and Directories</a></li>
<li><a href="https://attack.mitre.org/techniques/T1070/004/">Indicator Removal: File Deletion</a></li>
<li><a href="https://attack.mitre.org/techniques/T1036/005/">Masquerading: Match Legitimate Name or Location</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027/002/">Obfuscated Files or Information: Software Packing</a></li>
<li><a href="https://attack.mitre.org/techniques/T1620/">Reflective Code Loading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1083/">File and Directory Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1057/">Process Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1082/">System Information Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1560/003/">Archive Collected Data: Archive via Custom Method</a></li>
<li><a href="https://attack.mitre.org/techniques/T1074/001/">Local Data Staging</a></li>
<li><a href="https://attack.mitre.org/techniques/T1071/001/">Application Layer Protocol: Web Protocols</a></li>
<li><a href="https://attack.mitre.org/techniques/T1008/">Fallback Channels</a></li>
<li><a href="https://attack.mitre.org/techniques/T1105/">Ingress Tool Transfer</a></li>
<li><a href="https://attack.mitre.org/techniques/T1041/">Exfiltration Over C2 Channel</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-prevention-capabilities" class="absolute -top-32"></span>Malware prevention capabilities</h2>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar">MacOS.Trojan.SUGARLOADER</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar">MacOS.Trojan.HLOADER</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar">MacOS.Trojan.KANDYKORN</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-detection-capabilities" class="absolute -top-32"></span>Malware detection capabilities</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="hunting-queries" class="absolute -top-32"></span>Hunting queries</h3>
<p>The events for EQL are provided with the Elastic Agent using the Elastic Defend integration. Hunting queries could return high signals or false positives. These queries are used to identify potentially suspicious behavior, but an investigation is required to validate the findings.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="eql-queries" class="absolute -top-32"></span>EQL queries</h4>
<p>Using the Timeline section of the Security Solution in Kibana under the “Correlation” tab, you can use the below EQL queries to hunt for similar behaviors.</p>
<p>The following EQL query can be used to identify when a hidden executable creates and then immediately deletes a file within a temporary directory:</p>
<pre><code>sequence by process.entity_id, file.path with maxspan=30s
  [file where event.action == &quot;modification&quot; and process.name : &quot;.*&quot; and 
   file.path : (&quot;/private/tmp/*&quot;, &quot;/tmp/*&quot;, &quot;/var/tmp/*&quot;)]
  [file where event.action == &quot;deletion&quot; and process.name : &quot;.*&quot; and 
   file.path : (&quot;/private/tmp/*&quot;, &quot;/tmp/*&quot;, &quot;/var/tmp/*&quot;)]</code></pre>
<p>The following EQL query can be used to identify when a hidden file makes an outbound network connection followed by the immediate download of an executable file:</p>
<pre><code>sequence by process.entity_id with maxspan=30s
[network where event.type == &quot;start&quot; and process.name : &quot;.*&quot;]
[file where event.action != &quot;deletion&quot; and file.Ext.header_bytes : (&quot;cffaedfe*&quot;, &quot;cafebabe*&quot;)]</code></pre>
<p>The following EQL query can be used to identify when a macOS application binary gets renamed to a hidden file name within the same directory:</p>
<pre><code>file where event.action == &quot;rename&quot; and file.name : &quot;.*&quot; and 
 file.path : &quot;/Applications/*/Contents/MacOS/*&quot; and 
 file.Ext.original.path : &quot;/Applications/*/Contents/MacOS/*&quot; and 
 not startswith~(file.Ext.original.path,Effective_process.executable)</code></pre>
<p>The following EQL query can be used to identify when an IP address is supplied as an argument to a hidden executable:</p>
<pre><code>sequence by process.entity_id with maxspan=30s
[process where event.type == &quot;start&quot; and event.action == &quot;exec&quot; and process.name : &quot;.*&quot; and process.args regex~ &quot;[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}&quot;]
[network where event.type == &quot;start&quot;]</code></pre>
<p>The following EQL query can be used to identify the rename or modification of a hidden executable file within the /Users/Shared directory or the execution of a hidden unsigned or untrusted process in the /Users/Shared directory:</p>
<pre><code>any where 
 (
  (event.category : &quot;file&quot; and event.action != &quot;deletion&quot; and file.Ext.header_bytes : (&quot;cffaedfe*&quot;, &quot;cafebabe*&quot;) and 
   file.path : &quot;/Users/Shared/*&quot; and file.name : &quot;.*&quot; ) or 
  (event.category : &quot;process&quot; and event.action == &quot;exec&quot; and process.executable : &quot;/Users/Shared/*&quot; and 
   (process.code_signature.trusted == false or process.code_signature.exists == false) and process.name : &quot;.*&quot;)
 )</code></pre>
<p>The following EQL query can be used to identify when a URL is supplied as an argument to a python script via the command line:</p>
<pre><code>sequence by process.entity_id with maxspan=30s
[process where event.type == &quot;start&quot; and event.action == &quot;exec&quot; and 
 process.args : &quot;python*&quot; and process.args : (&quot;/Users/*&quot;, &quot;/tmp/*&quot;, &quot;/var/tmp/*&quot;, &quot;/private/tmp/*&quot;) and process.args : &quot;http*&quot; and 
 process.args_count &amp;lt;= 3 and 
 not process.name : (&quot;curl&quot;, &quot;wget&quot;)]
[network where event.type == &quot;start&quot;]</code></pre>
<p>The following EQL query can be used to identify the attempt of in memory Mach-O loading specifically by looking for the predictable temporary file creation of &quot;NSCreateObjectFileImageFromMemory-*&quot;:</p>
<pre><code>file where event.type != &quot;deletion&quot; and 
file.name : &quot;NSCreateObjectFileImageFromMemory-*&quot;</code></pre>
<p>The following EQL query can be used to identify the attempt of in memory Mach-O loading by looking for the load of the &quot;NSCreateObjectFileImageFromMemory-*&quot; file or a load with no dylib name provided:</p>
<pre><code>any where ((event.action == &quot;load&quot; and not dll.path : &quot;?*&quot;) or 
  (event.action == &quot;load&quot; and dll.name : &quot;NSCreateObjectFileImageFromMemory*&quot;))</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the payloads:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar">MacOS.Trojan.SUGARLOADER</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar">MacOS.Trojan.HLOADER</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar">MacOS.Trojan.KANDYKORN</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/ref7001">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940</code></td><td>SHA-256</td><td>.log, .sld</td><td>SUGARLOADER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1</code></td><td>SHA-256</td><td>Discord (fake)</td><td>HLOADER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">927b3564c1cf884d2a05e1d7bd24362ce8563a1e9b85be776190ab7f8af192f6</code></td><td>SHA-256</td><td></td><td>KANDYKORN</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">http://tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC</code></td><td>url</td><td></td><td>FinderTools C2 URL</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tp-globa[.]xyz</code></td><td>domain-name</td><td></td><td>FinderTools C2 domain</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">192.119.64[.]43</code></td><td>ipv4-addr</td><td>tp-globa IP address</td><td>FinderTools C2 IP</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">23.254.226[.]90</code></td><td>ipv4-addr</td><td></td><td>SUGARLOADER C2 IP</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">D9F936CE628C3E5D9B3695694D1CDE79E470E938064D98FBF4EF980A5558D1C90C7E650C2362A21B914ABD173ABA5C0E5837C47B89F74C5B23A7294CC1CFD11B</code></td><td>64 byte key</td><td>RC4 key</td><td>SUGARLOADER, KANDYKORN</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket">The DPRK strikes using a new variant of RUSTBUCKET — Elastic Security Labs</a></li>
<li><a href="https://x.com/tiresearch1/status/1708141542261809360">https://x.com/tiresearch1/status/1708141542261809360</a></li>
<li><a href="https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/">https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/</a></li>
<li><a href="https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/">Looks like a try to steel some data : r/Malware</a></li>
<li><a href="https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/">https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/</a></li>
<li><a href="https://objective-see.org/blog/blog_0x51.html">Lazarus Group Goes &#x27;Fileless&#x27;</a></li>
<li><a href="https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f">Understanding and Defending Against Reflective Code Loading on macOS | by Justin Bui</a></li>
<li><a href="https://hackd.net/posts/macos-reflective-code-loading-analysis/">macOS reflective code loading analysis · hackd</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#execution-flow"><span>Execution&nbsp;flow</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#stage-0-initial-compromise-watcherpy"><span>Stage 0 Initial compromise:&nbsp;Watcher.py</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#stage-1-droppers-testspeedpy-and-findertools"><span>Stage 1 droppers testSpeed.py and&nbsp;FinderTools</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#stage-2-payload-sld-and-log-sugarloader"><span>Stage 2 payload .sld and .log:&nbsp;SUGARLOADER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#obfuscation"><span>Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#execution"><span>Execution</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#stage-3-loader-discord-hloader"><span>Stage 3 loader Discord:&nbsp;HLOADER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/elastic-catches-dprk-passing-out-kandykorn#persistence"><span>Persistence</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Elastic catches DPRK passing out KANDYKORN&amp;url=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn&amp;title=Elastic catches DPRK passing out KANDYKORN" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn&amp;title=Elastic catches DPRK passing out KANDYKORN" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Elastic catches DPRK passing out KANDYKORN","slug":"elastic-catches-dprk-passing-out-kandykorn","date":"2023-11-01","description":"Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware.","image":"photo-edited-01@2x.jpg","tags":["ref7001","KANDYKORN","SUGARLOADER","HLOADER","DPRK","Lazarus Group","Crypto","Financial Motivation"],"body":{"raw":"\n## Preamble\n\nElastic Security Labs is disclosing a novel intrusion targeting blockchain engineers of a crypto exchange platform. The intrusion leveraged a combination of custom and open source capabilities for initial access and post-exploitation.\n\nWe discovered this intrusion when analyzing attempts to reflectively load a binary into memory on a macOS endpoint. The intrusion was traced to a Python application posing as a cryptocurrency arbitrage bot delivered via a direct message on a public Discord server.\n\nWe attribute this activity to DPRK and recognize overlaps with the Lazarus Group based on our analysis of the techniques, network infrastructure, code-signing certificates, and custom Lazarus Group detection rules; we track this intrusion set as REF7001.\n\n### Key takeaways\n* Threat actors lured blockchain engineers with a Python application to gain initial access to the environment\n* This intrusion involved multiple complex stages that each employed deliberate defense evasion techniques\n* The intrusion set was observed on a macOS system where an adversary attempted to load binaries into memory, which is atypical of macOS intrusions\n\n## Execution flow\n![_REF7001 Execution Flow_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image31.jpg)\n\n\nAttackers impersonated blockchain engineering community members on a public Discord frequented by members of this community. The attacker social-engineered their initial victim, convincing them to download and decompress a ZIP archive containing malicious code. The victim believed they were installing an [arbitrage bot](https://wundertrading.com/en/crypto-arbitrage-bot), a software tool capable of profiting from cryptocurrency rate differences between platforms.\n\nThis execution kicked off the primary malware execution flow of the REF7001 intrusion, culminating in KANDYKORN:\n* Stage 0 (Initial Compromise) - `Watcher.py`\n* Stage 1 (Dropper) - `testSpeed.py` and `FinderTools`\n* Stage 2 (Payload) - `.sld` and `.log` - SUGARLOADER\n* Stage 3 (Loader)- Discord (fake) - HLOADER\n* Stage 4 (Payload) - KANDYKORN\n\n## Stage 0 Initial compromise: Watcher.py\n\nThe initial breach was orchestrated via a camouflaged Python application designed and advertised as an arbitrage bot targeted at blockchain engineers. This application was distributed as a .zip file titled `Cross-Platform Bridges.zip`. Decompressing it reveals a `Main.py` script accompanied by a folder named `order_book_recorder`, housing 13 Python scripts.\n\n![_Cross-Platform Bridges.zip folder structure_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image21.png)\n\n\nThe victim manually ran the `Main.py` script via their PyCharm IDE Python interpreter.\n\nInitially, the `Main.py` script appears benign. It imports the accompanying Python scripts as modules and seems to execute some mundane functions. \n\nWhile analyzing the modules housed in the `order_book_recorder` folder, one file -- `Watcher.py` -- clearly stood out and we will see why.\n\n`Main.py` acts as the initial trigger, importing `Watcher.py` as a module that indirectly executes the script. The Python interpreter runs every top-level statement in `Watcher.py` sequentially.\n\nThe script starts off by establishing local directory paths and subsequently attempts to generate a `_log` folder at the specified location. If the folder already exists, the script remains passive.\n\n![*Creating a folder within the Python application directory structure and name it _log*](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image17.png)\n\n\nThe script pre-defines a `testSpeed.py` file path (destined for the just created `_log` folder) and assigns it to the `output` variable. The function `import_networklib` is then defined. Within it, a Google Drive URL is initialized. \n\nUtilizing the Python `urllib` library, the script fetches content from this URL and stashes it in the `s_args` variable. In case of retrieval errors, it defaults to returning the operating system's name. Subsequently, the content from Google Drive (now in `s_args`) is written into the `testSpeed.py` file.\n\n![_Malicious downloader function import_networklib_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image25.png)\n\n\n![_Connect to Google Drive url and download data saved to a variable s_args_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image24.png)\n\n\n![*Write data from s_args to testSpeed.py file in newly created _log directory*](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image1.png)\n\n\nThe next function, `get_modules_base_version`, probes the Python version and invokes the `import_networklib` function if it detects version 3. This call sets the entire sequence in motion.\n\n![_Check if Python version 3, calls the import_networklib function_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image14.png)\n\n\n`Watcher.py` imports `testSpeed.py` as a module, executing the contents of the script.\n\n![_Import testSpeed.py to execute it_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image7.png)\n\n\nConcluding its operation, the malicious script tidies up, deleting the `testSpeed.py` file immediately after its one-time execution.\n\n![_Delete the downloaded testSpeed.py file following its import and execution_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image8.png)\n\n\n![_Watcher.py deletes the testSpeed.py immediately following its execution_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image35.png)\n\n\n## Stage 1 droppers testSpeed.py and FinderTools\n\nWhen executed, `testSpeed.py` establishes an outbound network connection and fetches another Python file from a Google Drive URL, named `FinderTools`. This new file is saved to the `/Users/Shared/` directory, with the method of retrieval mirroring the `Watcher.py` script.\n\n![_testSpeed.py network connection_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image9.png)\n\n\n![_FinderTools file creation _](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image2.png)\n\n\nAfter download, `testSpeed.py` launches `FinderTools`, providing a URL (`tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC`) as an argument which initiates an outbound network connection. \n\n![_FinderTools execution_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image3.png)\n\n\n![_FinderTools network connections_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image13.png)\n\n\n`FinderTools` is yet another dropper, downloading and executing a hidden second stage payload `.sld` also written to the `/Users/Shared/` directory.\n\n![_FinderTools executes .sld_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image5.png)\n\n\n## Stage 2 payload .sld and .log: SUGARLOADER\n\nStage 2 involves the execution of an obfuscated binary we have named SUGARLOADER, which is utilized twice under two separate names (`.sld` and `.log`).\n\nSUGARLOADER is first observed at `/Users/shared/.sld`. The second instance of SUGARLOADER, renamed to `.log`, is used in the persistence mechanism REF7001 implements with Discord. \n\n### Obfuscation\n\nSUGARLOADER is used for initial access on the machine, and initializing the environment for the final stage. This binary is obfuscated using a binary packer, limiting what can be seen with static analysis.\n\nThe start function of this binary consists of a jump (`JMP`) to an undefined address. This is common for binary packers.\n\n```\nHEADER:00000001000042D6 start:\nHEADER:00000001000042D6                 jmp     0x10000681E\n```\n\nExecuting the macOS file object tool `otool -l ./log` lists all the sections that will be loaded at runtime.\n\n```\nSection\n  sectname __mod_init_func\n   segname lko2\n      addr 0x00000001006983f0\n      size 0x0000000000000008\n    offset 4572144\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000009\n reserved1 0\n reserved2 0\n```\n\n`__mod_init_func` contains initialization functions. The C++ compiler places static constructors here. This is the code used to unpack the binary in memory.\n\nA successful method of reverse engineering such files is to place a breakpoint right after the execution of initialization functions and then take a snapshot of the process's virtual memory. When the breakpoint is hit, the code will already be decrypted in memory and can be analyzed using traditional methods.\n\nAdversaries commonly use obfuscation techniques such as this to bypass traditional static signature-based antimalware capabilities. As of this publication, VirusTotal [shows 0 detections of this file](https://www.virustotal.com/gui/file/3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940), which suggests these defense evasions continue to be cost-effective.\n\n![_SUGARLOADER VirusTotal Detections_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image11.png)\n\n\n### Execution\n\nThe primary purpose of SUGARLOADER is to connect to a Command and Control server (C2), in order to download a final stage payload we refer to as KANDYKORN, and execute it directly in memory. \n\nSUGARLOADER checks for the existence of a configuration file at `/Library/Caches/com.apple.safari.ck`. If the configuration file is missing, it will be downloaded and created via a default C2 address provided as a command line argument to the `.sld` binary. In our sample, the C2 address was `23.254.226[.]90` over TCP port `443`. We provide additional information about the C2 in the Network Infrastructure section below.\n\n![_SUGARLOADER C2 established and configuration file download_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image4.png)\n\n\n![_SUGARLOADER writing configuration file_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image40.png)\n\n\nThe configuration file is encrypted using RC4 and the encryption key (in the Observations section) is hardcoded within SUGARLOADER itself. The `com.apple.safari.ck` file is utilized by both SUGARLOADER and KANDYKORN for establishing secure network communications.\n```\nstruct MalwareConfig\n{\n  char computerId[8];\n  _BYTE gap0[12];\n  Url c2_urls[2];\n  Hostname c2_ip_address[2];\n  _BYTE proxy[200];\n  int sleepInterval;\n};\n```\n\n`computerId` is a randomly generated string identifying the victim’s computer.\n\nA C2 server can either be identified with a fully qualified URL (`c2_urls`) or with an IP address and port (`c2_ip_ddress`). It supports two C2 servers, one as the main server, and the second one as a fallback. The specification or hardcoding of multiple servers like this is commonly used by malicious actors to ensure their connection with the victim is persistent should the original C2 be taken down or blocked. `sleepInterval` is the default sleeping interval for the malware between separate actions.\n\nOnce the configuration file is read into memory and decrypted, the next step is to initialize a connection to the remote server. All the communication between the victim’s computer and the C2 server is detailed in the Network Protocol section.\n\nThe last step taken by SUGARLOADER is to download a final stage payload from the C2 server and execute it. REF7001 takes advantage of a technique known as [reflective binary loading](https://attack.mitre.org/techniques/T1620/) (allocation followed by the execution of payloads directly within the memory of the process) to execute the final stage, leveraging APIs such as `NSCreateObjectFileImageFromMemory` or `NSLinkModule`. Reflective loading is a powerful technique. If you'd like to learn more about how it works, check out this research by [slyd0g](https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f) and [hackd](https://hackd.net/posts/macos-reflective-code-loading-analysis/).\n\nThis technique can be utilized to execute a payload from an in-memory buffer. Fileless execution such as this [has been observed previously](https://objective-see.org/blog/blog_0x51.html) in attacks conducted by the Lazarus Group.\n\nSUGARLOADER reflectively loads a binary (KANDYKORN) and then creates a new file initially named `appname` which we refer to as `HLOADER` which we took directly from the process code signature’s signing identifier.\n\n![_SUGARLOADER reflective binary load alert_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image12.png)\n\n\n![_SUGARLOADER creates HLOADER_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image36.png)\n\n\n![_HLOADER code signature identifier_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image10.png)\n\n\n![_Pseudocode for SUGARLOADER (stage2)_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image34.png)\n\n\n## Stage 3 loader Discord: HLOADER\n\nHLOADER (`2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1`) is a payload that attempts to masquerade as the legitimate Discord application. As of this writing, [it has 0 detections on VirusTotal](https://www.virustotal.com/gui/file/2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1).\n\n![_HLOADER VirusTotal Detections_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image15.png)\n\n\nHLOADER was identified through the use of a macOS binary code-signing technique that has been [previously linked](https://objective-see.org/blog/blog_0x73.html) to the [DPRK’s Lazarus Group 3CX intrusion](https://www.eset.com/int/about/newsroom/press-releases/research/eset-research-discovers-new-lazarus-dreamjob-campaign-and-links-it-to-phone-provider-3cx-supply-chai/). In addition to other published research, Elastic Security Labs has also used the presence of this technique as an indicator of DPRK campaigns, as seen in our June 2023 research publication on [JOKERSPY](https://www.elastic.co/security-labs/inital-research-of-jokerspy#the-xcc-binary).\n\n### Persistence\n\nWe observed the threat actor adopting a technique we have not previously seen them use to achieve persistence on macOS, known as [execution flow hijacking](https://attack.mitre.org/techniques/T1574/). The target of this attack was the widely used application Discord. The Discord application is often configured by users as a login item and launched when the system boots, making it an attractive target for takeover. HLOADER is a self-signed binary written in Swift. The purpose of this loader is to execute both the legitimate Discord bundle and `.log` payload, the latter of which is used to execute Mach-O binary files from memory without writing them to disk.\n\nThe legitimate binary `/Applications/Discord.app/Contents/MacOS/Discord` was renamed to `.lock`, and replaced by `HLOADER`. \n\n![_Discord replaced by HLOADER_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image18.png)\n\n\nBelow is the code signature information for `HLOADER`, which has a self-signed identifier structure consistent with other Lazarus Group samples.\n```\nExecutable=Applications/Discord.app/Contents/MacOS/Discord\nIdentifier=HLOADER-5555494485b460f1e2343dffaef9b94d01136320\nFormat=bundle with Mach-O universal (x86_64 arm64)\nCodeDirectory flags=0x2(adhoc) hashes=12+7 location=embedded\n```\n\nWhen executed, `HLOADER` performs the following operations:\n* Renames itself from `Discord` to `MacOS.tmp`\n* Renames the legitimate Discord binary from `.lock` to `Discord`\n* Executes both Discord and `.log` using `NSTask.launchAndReturnError`\n* Renames both files back to their initial names\n\n![_HLOADER execution event chain_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image37.png)\n\n\n![_HLOADER Discord Application Hijack_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image33.png)\n\n\nThe following process tree also visually depicts how persistence is obtained. The root node `Discord` is actually HLOADER disguised as the legitimate app. As presented above, it first runs .lock, which is in fact Discord, and, alongside, spawns SUGARLOADER as a process named .log.\n\n![_Process Tree Analyzer_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image23.png)\n\n\nAs seen in stage 2, SUGARLOADER reads the configuration file, connects to the C2 server, and waits for a payload to be received. Another alert is generated when the new payload (KANDYKORN) is loaded into memory. \n\n![_Reflective Dylib Load Alert for KANDYKORN_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image27.png)\n\n\n## Stage 4 Payload: KANDYKORN\n\nKANDYKORN is the final stage of this execution chain and possesses a full-featured set of capabilities to access and exfiltrate data from the victim’s computer. Elastic Security Labs was able to retrieve this payload from one C2 server which hadn’t been deactivated yet.\n\n### Execution\n\nKANDYCORN processes are forked and run in the background as daemons before loading their configuration file from `/Library/Caches/com.apple.safari.ck`. The configuration file is read into memory then decrypted using the same RC4 key, and parsed for C2 settings. The communication protocol is similar to prior stages using the victim ID value for authentication.\n\n### Command and control\n\nOnce communication is established, KANDYKORN awaits commands from the server. This is an interesting characteristic in that the malware waits for commands instead of polling for commands. This would reduce the number of endpoint and network artifacts generated and provide a way to limit potential discovery.\n\nEach command is represented by an integer being transmitted, followed by the data that is specific to each action. Below is a list of the available commands KANDYKORN provides.\n\n#### Command 0xD1\n\nAction: Exit command where the program gracefully exists.\n\n#### Command 0xD2\n\nName: `resp_basicinfo`\nAction: Gathers information about the system such as hostname, uid, osinfo, and image path of the current process, and reports back to the server.\n\n![_resp_basicinfo routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image16.png)\n\n\n#### Command 0xD3\n\nName: `resp_file_dir`\nAction: Lists content of a directory and format the output similar to `ls -al`, including type, name, permissions, size, acl, path, and access time.\n\n![_resp_file_dir routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image20.png)\n\n\n#### Command 0xD4\n\nName: `resp_file_prop`\n\nAction: Recursively read a directory and count the number of files, number of subdirectories, and total size.\n\n![_resp_file_prop routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image26.png)\n\n\n#### Command 0xD5\n\nName: `resp_file_upload`\n\nAction: Used by the adversary to upload a file from their C2 server to the victim’s computer. This command specifies a path, creates it, and then proceeds to download the file content and write it to the victim’s computer.\n\n#### Command 0xD6\n\nName: `resp_file_down`\n\nAction: Used by the adversary to transfer a file from the victim’s computer to their infrastructure.\n\n#### Command 0xD7\n\nName: `resp_file_zipdown`\n\nAction: Archive a directory and exfiltrate it to the C2 server. The newly created archive’s name has the following pattern`/tmp/tempXXXXXXX`.\n\n![_resp_file_zipdown routine _](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image29.png)\n\n\n#### Command 0xD8\n\nName: `resp_file_wipe`\nAction: Overwrites file content to zero and deletes the file. This is a common technique used to impede recovering the file through digital forensics on the filesystem.\n\n![_resp_file_wipe routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image28.png)\n\n\n#### Command 0xD9\n\nName: `resp_proc_list`\n\nAction: Lists all running processes on the system along with their PID, UID and other information.\n\n#### Command 0xDA\n\nName: `resp_proc_kill`\n\nAction: Kills a process by specified PID.\n\n![_resp_proc_kill routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image19.png)\n\n\n#### Command 0xDB\n\nName: `resp_cmd_send`\n\nAction: Executes a command on the system by using a pseudoterminal.\n\n#### Command 0xDC\n\nName: `resp_cmd_recv`\n\nAction: Reads the command output from the previous command `resp_cmd_send`.\n\n#### Command 0xDD\n\nName: `resp_cmd_create`\n\nAction: Spawns a shell on the system and communicates with it via a pseudoterminal. Once the shell process is executed, commands are read and written through the `/dev/pts` device.\n\n![_resp_cmd_create routine (interactive shell)_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image38.png)\n\n\n#### Command 0xDE\n\nName: `resp_cfg_get`\n\nAction: Sends the current configuration to the C2 from `/Library/Caches/com.apple.safari.ck`.\n\n#### Command 0xDF\n\nName: `resp_cfg_set`\n\nAction: Download a new configuration file to the victim’s machine. This is used by the adversary to update the C2 hostname that should be used to retrieve commands from.\n\n#### Command 0xE0\n\nName: `resp_sleep`\n\nAction: Sleeps for a number of seconds.\n\n### Summary\n\nKANDYKORN is an advanced implant with a variety of capabilities to monitor, interact with, and avoid detection. It utilizes reflective loading, a direct-memory form of execution that may bypass detections.\n\n## Network protocol\n\nAll the executables that communicate with the C2 (both stage 3 and stage 4) are using the same protocol. All the data is encrypted with RC4 and uses the same key previously referenced in the configuration file.\n\nBoth samples implement wrappers around the send-and-receive system calls. It can be observed in the following pseudocode that during the send routine, the buffer is first encrypted and then sent to the socket, whereas when data is received it is first decrypted and then processed.\n\n![_send routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image22.png)\n\n\n![_recv routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image32.png)\n\n\nWhen the malware first connects to the C2 during the initialization phase, there is a handshake that needs to be validated in order to proceed. Should the handshake fail, the attack would stop and no other commands would be processed.\n\nOn the client side, a random number is generated and sent to the C2, which replies with a nonce variable. The client then computes a challenge with the random number and the received nonce and sends the result back to the server. If the challenge is successful and the server accepts the connection, it replies with a constant such as `0x41C3372` which appears in the analyzed sample.\n\n![_Handshake routine_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image39.png)\n\n\nOnce the connection is established, the client sends its ID and awaits commands from the server. Any subsequent data sent or received from here is serialized following a common schema used to serialize binary objects. First, the length of the content is sent, then the payload, followed by a return code which indicates if any error occurred.\n\n![_Overview of communication protocol_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image6.png)\n\n\n## Network infrastructure\n\nDuring REF7001, the adversary was observed communicating with network infrastructure to collect various payloads and loaders for different stages of the intrusion.\n\nAs detailed in the Stage 1 section above, the link to the initial malware archive, `Cross-Platform Bridges.zip`, was provided in a direct message on a popular blockchain Discord server. This archive was hosted on a Google Drive (`https://drive.google[.]com/file/d1KW5nQ8MZccug6Mp4QtKyWLT3HIZzHNIL2`), but this was removed shortly after the archive was downloaded.\n\nThroughout the analysis of the REF7001 intrusion, there were two C2 servers observed.\n* `tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC`\n* `23.254.226[.]90`\n\n### tp-globa[.]xyz\n\nThe C2 domain `tp-globa[.]xyz` is used by `FinderTools` to download SUGARLOADER and is likely an attempt at [typosquatting](https://en.wikipedia.org/wiki/Typosquatting) a legitimate foreign exchange market broker. We do not have any information to indicate that the legitimate company is involved in this intrusion. This typosquatted domain was likely chosen in an attempt to appear more legitimate to the victims of the intrusion.\n\n`tp-globa[.]xyz`, as of this writing, resolves to an IP address (`192.119.64[.]43`) that has been observed distributing malware attributed to the DPRK’s Lazarus Group ([1](https://twitter.com/TLP_R3D/status/1677617586349981696), [2](https://twitter.com/_reboot_xxxx/status/1679054436289880065), [3](https://twitter.com/KSeznec/status/1678319191110082560)).\n\n### 23.254.226[.]90\n\n23.254.226[.]90 is the C2 IP used for the `.sld` file (SUGARLOADER malware). How this IP is used for C2 is highlighted in the stage 2 section above. \n\nOn October 14, 2023, `23.254.226[.]90` was used to register the subdomain, `pesnam.publicvm[.]com`. While we did not observe this domain in our intrusion, it is [documented](https://www.virustotal.com/gui/domain/publicvm.com/detection) as hosting other malicious software.\n\n## Campaign intersections\n\n`tp-globa[.]xyz`, has a TLS certificate with a Subject CN of `bitscrunnch.linkpc[.]net`. The domain `bitscrunnch.linkpc[.]net` has been [attributed](https://twitter.com/tiresearch1/status/1708141542261809360?s=20) to other Lazarus Group intrusions.\n\nAs noted above, this is likely an attempt to typosquat a legitimate domain for a decentralized NFT data platform. We do not have any information to indicate that the legitimate company is involved in this intrusion.\n```\n…\nIssuer: C = US, O = Let's Encrypt, CN = R3\nValidity\nNot Before: Sep 20 12:55:37 2023 GMT\nNot After : Dec 19 12:55:36 2023 GMT\nSubject: CN = bitscrunnch[.]linkpc[.]net\n…\n```\n\nThe `bitscrunnch.linkpc[.]net`’s TLS certificate is also used for [other additional domains](https://www.virustotal.com/gui/search/entity%253Adomain%2520ssl_subject%253Abitscrunnch.linkpc.net/domains), all of which are registered to the same IP address reported above in the `tp-globa[.]xyz` section above, `192.119.64[.]43`.\n* `jobintro.linkpc[.]net`\n* `jobdescription.linkpc[.]net`\n* `docsenddata.linkpc[.]net`\n* `docsendinfo.linkpc[.]net`\n* `datasend.linkpc[.]net`\n* `exodus.linkpc[.]net`\n* `bitscrunnch.run[.]place`\n* `coupang-networks[.]pics`\n\nWhile LinkPC is a legitimate second-level domain and dynamic DNS service provider, it is [well-documented](https://www.virustotal.com/gui/domain/linkpc.net/community) that this specific service is used by threat actors for C2. In our [published research into RUSTBUCKET](https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket), which is also attributed to the DPRK, we observed LinkPC being used for C2.\n\nAll registered domains, 48 as of this writing, for `192.119.64[.]43` are included in the observables bundle.\n\nFinally, in late July 2023, there were reports on the Subreddits [r/hacking](https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/), [r/Malware](https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/), and [r/pihole](https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/) with URLs that matched the structure of `tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC`. The user on Reddit reported that a recruiter contacted them to solve a Python coding challenge as part of a job offer. The code challenge was to analyze Python code purported to be for an internet speed test. This aligns with the REF7001 victim’s reporting on being offered a Python coding challenge and the script name `testSpeed.py` detailed earlier in this research.\n\nThe domain reported on Reddit was `group.pro-tokyo[.]top//OcRLY4xsFlN/vMZrXIWONw/6OyCZl89HS/fP7savDX6c/bfC` which follows the same structure as the REF7001 URL (`tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC`):\n\n* Two `//`’s after the TLD\n* 5 subdirectories using an `//11-characters/10-characters/10-characters/` structure\n* The last 2 subdirectories were `/fP7savDX6c/bfC`\n\nWhile we did not observe GitHub in our intrusion, the Redditors who reported this did observe GitHub profiles being used. They have all been deactivated.\n\nThose accounts were:\n* `https://github[.]com/Prtof`\n* `https://github[.]com/wokurks`\n\n## Summary\n\nThe DPRK, via units like the LAZARUS GROUP, continues to target crypto-industry businesses with the goal of stealing cryptocurrency in order to circumvent international sanctions that hinder the growth of their economy and ambitions. In this intrusion, they targeted blockchain engineers active on a public chat server with a lure designed to speak to their skills and interests, with the underlying promise of financial gain.\n\nThe infection required interactivity from the victim that would still be expected had the lure been legitimate. Once executed, via a Python interpreter, the REF7001 execution flow went through 5 stages:\n* Stage 0 (staging) - `Main.py` executes `Watcher.py` as an imported module. This script checks the Python version, prepares the local system directories, then downloads, executes, and cleans up the next stage.\n* Stage 1 (generic droppers) - `testSpeed.py` and `FinderTools` are intermediate dropper Python scripts that download and execute SUGARLOADER.\n* Stage 2 (SUGARLOADER) - `.sld` and `.log` are Mach-O executable payloads that establish C2, write the configuration file and reflectively load KANDYKORN.\n* Stage 3 (HLOADER) - `HLOADER`/`Discord`(fake) is a simple loader used as a persistence mechanism masquerading as the legitimate Discord app for the loading of SUGARLOADER.\n* Stage 4 (KANDYKORN) - The final reflectively loaded payload. KANDYKORN is a full-featured memory resident RAT with built-in capabilities to:\n    * Conduct encrypted command and control\n    * Conduct system enumeration\n    * Upload and execute additional payloads\n    * Compress and exfil data\n    * Kill processes\n    * Run arbitrary system commands through an interactive pseudoterminal\n\nElastic traced this campaign to April 2023 through the RC4 key used to encrypt the SUGARLOADER and KANDYKORN C2. This threat is still active and the tools and techniques are being continuously developed.\n\n## The Diamond Model\n\nElastic Security utilizes the Diamond Model to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for an, although cluttered, single diamond.\n\n![_REF7001 Diamond Model_](/assets/images/elastic-catches-dprk-passing-out-kandykorn/image30.jpg)\n\n\n## [Malware] and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that advanced persistent threats used against enterprise networks.\n\n#### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n* [Execution](https://attack.mitre.org/tactics/TA0002)\n* [Persistence](https://attack.mitre.org/tactics/TA0003)\n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005)\n* [Discovery](https://attack.mitre.org/tactics/TA0007)\n* [Collection](https://attack.mitre.org/tactics/TA0009)\n* [Command and Control](https://attack.mitre.org/tactics/TA0011)\n* [Exfiltration](https://attack.mitre.org/tactics/TA0010)\n\n#### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n* [User Execution: Malicious File](https://attack.mitre.org/techniques/T1204/002/)\n* [Command and Scripting Interpreter: Python](https://attack.mitre.org/techniques/T1059/006/)\n* [Command and Scripting Interpreter: Unix Shell](https://attack.mitre.org/techniques/T1059/004/)\n* [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574/)\n* [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140/)\n* [Hide Artifacts: Hidden Files and Directories](https://attack.mitre.org/techniques/T1564/001/)\n* [Indicator Removal: File Deletion](https://attack.mitre.org/techniques/T1070/004/)\n* [Masquerading: Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005/)\n* [Obfuscated Files or Information: Software Packing](https://attack.mitre.org/techniques/T1027/002/)\n* [Reflective Code Loading](https://attack.mitre.org/techniques/T1620/)\n* [File and Directory Discovery](https://attack.mitre.org/techniques/T1083/)\n* [Process Discovery](https://attack.mitre.org/techniques/T1057/)\n* [System Information Discovery](https://attack.mitre.org/techniques/T1082/)\n* [Archive Collected Data: Archive via Custom Method](https://attack.mitre.org/techniques/T1560/003/)\n* [Local Data Staging](https://attack.mitre.org/techniques/T1074/001/)\n* [Application Layer Protocol: Web Protocols](https://attack.mitre.org/techniques/T1071/001/)\n* [Fallback Channels](https://attack.mitre.org/techniques/T1008/)\n* [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105/)\n* [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041/)\n\n## Malware prevention capabilities\n* [MacOS.Trojan.SUGARLOADER](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar)\n* [MacOS.Trojan.HLOADER](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar)\n* [MacOS.Trojan.KANDYKORN](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar)\n\n## Malware detection capabilities\n\n### Hunting queries\n\nThe events for EQL are provided with the Elastic Agent using the Elastic Defend integration. Hunting queries could return high signals or false positives. These queries are used to identify potentially suspicious behavior, but an investigation is required to validate the findings.\n\n#### EQL queries\n\nUsing the Timeline section of the Security Solution in Kibana under the “Correlation” tab, you can use the below EQL queries to hunt for similar behaviors.\n\nThe following EQL query can be used to identify when a hidden executable creates and then immediately deletes a file within a temporary directory:\n\n```\nsequence by process.entity_id, file.path with maxspan=30s\n  [file where event.action == \"modification\" and process.name : \".*\" and \n   file.path : (\"/private/tmp/*\", \"/tmp/*\", \"/var/tmp/*\")]\n  [file where event.action == \"deletion\" and process.name : \".*\" and \n   file.path : (\"/private/tmp/*\", \"/tmp/*\", \"/var/tmp/*\")]\n```\n\nThe following EQL query can be used to identify when a hidden file makes an outbound network connection followed by the immediate download of an executable file:\n\n```\nsequence by process.entity_id with maxspan=30s\n[network where event.type == \"start\" and process.name : \".*\"]\n[file where event.action != \"deletion\" and file.Ext.header_bytes : (\"cffaedfe*\", \"cafebabe*\")]\n```\n\nThe following EQL query can be used to identify when a macOS application binary gets renamed to a hidden file name within the same directory:\n\n```\nfile where event.action == \"rename\" and file.name : \".*\" and \n file.path : \"/Applications/*/Contents/MacOS/*\" and \n file.Ext.original.path : \"/Applications/*/Contents/MacOS/*\" and \n not startswith~(file.Ext.original.path,Effective_process.executable)\n ```\n\nThe following EQL query can be used to identify when an IP address is supplied as an argument to a hidden executable:\n\n```\nsequence by process.entity_id with maxspan=30s\n[process where event.type == \"start\" and event.action == \"exec\" and process.name : \".*\" and process.args regex~ \"[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}\"]\n[network where event.type == \"start\"]\n```\n\nThe following EQL query can be used to identify the rename or modification of a hidden executable file within the /Users/Shared directory or the execution of a hidden unsigned or untrusted process in the /Users/Shared directory:\n\n```\nany where \n (\n  (event.category : \"file\" and event.action != \"deletion\" and file.Ext.header_bytes : (\"cffaedfe*\", \"cafebabe*\") and \n   file.path : \"/Users/Shared/*\" and file.name : \".*\" ) or \n  (event.category : \"process\" and event.action == \"exec\" and process.executable : \"/Users/Shared/*\" and \n   (process.code_signature.trusted == false or process.code_signature.exists == false) and process.name : \".*\")\n )\n```\n\nThe following EQL query can be used to identify when a URL is supplied as an argument to a python script via the command line:\n\n```\nsequence by process.entity_id with maxspan=30s\n[process where event.type == \"start\" and event.action == \"exec\" and \n process.args : \"python*\" and process.args : (\"/Users/*\", \"/tmp/*\", \"/var/tmp/*\", \"/private/tmp/*\") and process.args : \"http*\" and \n process.args_count \u0026lt;= 3 and \n not process.name : (\"curl\", \"wget\")]\n[network where event.type == \"start\"]\n```\n\nThe following EQL query can be used to identify the attempt of in memory Mach-O loading specifically by looking for the predictable temporary file creation of \"NSCreateObjectFileImageFromMemory-*\":\n\n```\nfile where event.type != \"deletion\" and \nfile.name : \"NSCreateObjectFileImageFromMemory-*\"\n```\n\nThe following EQL query can be used to identify the attempt of in memory Mach-O loading by looking for the load of the \"NSCreateObjectFileImageFromMemory-*\" file or a load with no dylib name provided:\n\n```\nany where ((event.action == \"load\" and not dll.path : \"?*\") or \n  (event.action == \"load\" and dll.name : \"NSCreateObjectFileImageFromMemory*\"))\n```\n\n### YARA\n\nElastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the payloads:\n* [MacOS.Trojan.SUGARLOADER](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar)\n* [MacOS.Trojan.HLOADER](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar)\n* [MacOS.Trojan.KANDYKORN](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar)\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/ref7001) in both ECS and STIX format. \n\nThe following observables were discussed in this research.\n\n| Observable                                                                                                                       | Type         | Name                | Reference               |\n|----------------------------------------------------------------------------------------------------------------------------------|--------------|---------------------|-------------------------|\n| `3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940`                                                                 | SHA-256      | .log, .sld          | SUGARLOADER             |\n| `2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1`                                                                | SHA-256      | Discord (fake)      | HLOADER                 |\n| `927b3564c1cf884d2a05e1d7bd24362ce8563a1e9b85be776190ab7f8af192f6`                                                                 | SHA-256      |                     | KANDYKORN               |\n| `http://tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC`                                                          | url          |                     | FinderTools C2 URL      |\n| `tp-globa[.]xyz`                                                                                                                   | domain-name  |                     | FinderTools C2 domain   |\n| `192.119.64[.]43`                                                                                                                  | ipv4-addr    | tp-globa IP address | FinderTools C2 IP       |\n| `23.254.226[.]90`                                                                                                                  | ipv4-addr    |                     | SUGARLOADER C2 IP       |\n| `D9F936CE628C3E5D9B3695694D1CDE79E470E938064D98FBF4EF980A5558D1C90C7E650C2362A21B914ABD173ABA5C0E5837C47B89F74C5B23A7294CC1CFD11B` | 64 byte key  | RC4 key             | SUGARLOADER, KANDYKORN  |\n\n## References\n\nThe following were referenced throughout the above research:\n* [The DPRK strikes using a new variant of RUSTBUCKET — Elastic Security Labs](https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket) \n* [https://x.com/tiresearch1/status/1708141542261809360](https://x.com/tiresearch1/status/1708141542261809360) \n* [https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/](https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/) \n* [Looks like a try to steel some data : r/Malware](https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/) \n* [https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/](https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/) \n* [Lazarus Group Goes 'Fileless'](https://objective-see.org/blog/blog_0x51.html)\n* [Understanding and Defending Against Reflective Code Loading on macOS | by Justin Bui](https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f)\n* [macOS reflective code loading analysis · hackd](https://hackd.net/posts/macos-reflective-code-loading-analysis/)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=\u003e{for(var t in e)a(n,t,{get:e[t],enumerable:!0})},c=(n,e,t,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!g.call(n,r)\u0026\u0026r!==t\u0026\u0026a(n,r,{get:()=\u003ee[r],enumerable:!(o=p(e,r))||o.enumerable});return n};var w=(n,e,t)=\u003e(t=n!=null?h(u(n)):{},c(e||!n||!n.__esModule?a(t,\"default\",{value:n,enumerable:!0}):t,n)),b=n=\u003ec(a({},\"__esModule\",{value:!0}),n);var d=f((T,s)=\u003e{s.exports=_jsx_runtime});var D={};y(D,{default:()=\u003eA,frontmatter:()=\u003ek});var i=w(d()),k={title:\"Elastic catches DPRK passing out KANDYKORN\",slug:\"elastic-catches-dprk-passing-out-kandykorn\",date:\"2023-11-01\",description:\"Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware.\",author:[{slug:\"colson-wilhoit\"},{slug:\"ricardo-ungureanu\"},{slug:\"seth-goodwin\"},{slug:\"andrew-pease\"}],image:\"photo-edited-01@2x.jpg\",category:[{slug:\"malware-analysis\"},{slug:\"attack-pattern\"},{slug:\"activity-group\"}],tags:[\"ref7001\",\"KANDYKORN\",\"SUGARLOADER\",\"HLOADER\",\"DPRK\",\"Lazarus Group\",\"Crypto\",\"Financial Motivation\"]};function l(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",img:\"img\",a:\"a\",code:\"code\",pre:\"pre\",h4:\"h4\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs is disclosing a novel intrusion targeting blockchain engineers of a crypto exchange platform. The intrusion leveraged a combination of custom and open source capabilities for initial access and post-exploitation.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We discovered this intrusion when analyzing attempts to reflectively load a binary into memory on a macOS endpoint. The intrusion was traced to a Python application posing as a cryptocurrency arbitrage bot delivered via a direct message on a public Discord server.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We attribute this activity to DPRK and recognize overlaps with the Lazarus Group based on our analysis of the techniques, network infrastructure, code-signing certificates, and custom Lazarus Group detection rules; we track this intrusion set as REF7001.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Threat actors lured blockchain engineers with a Python application to gain initial access to the environment\"}),`\n`,(0,i.jsx)(e.li,{children:\"This intrusion involved multiple complex stages that each employed deliberate defense evasion techniques\"}),`\n`,(0,i.jsx)(e.li,{children:\"The intrusion set was observed on a macOS system where an adversary attempted to load binaries into memory, which is atypical of macOS intrusions\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"execution-flow\",children:\"Execution flow\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image31.jpg\",alt:\"REF7001 Execution Flow\",width:\"1440\",height:\"829\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Attackers impersonated blockchain engineering community members on a public Discord frequented by members of this community. The attacker social-engineered their initial victim, convincing them to download and decompress a ZIP archive containing malicious code. The victim believed they were installing an \",(0,i.jsx)(e.a,{href:\"https://wundertrading.com/en/crypto-arbitrage-bot\",rel:\"nofollow\",children:\"arbitrage bot\"}),\", a software tool capable of profiting from cryptocurrency rate differences between platforms.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"This execution kicked off the primary malware execution flow of the REF7001 intrusion, culminating in KANDYKORN:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 0 (Initial Compromise) - \",(0,i.jsx)(e.code,{children:\"Watcher.py\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 1 (Dropper) - \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" and \",(0,i.jsx)(e.code,{children:\"FinderTools\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 2 (Payload) - \",(0,i.jsx)(e.code,{children:\".sld\"}),\" and \",(0,i.jsx)(e.code,{children:\".log\"}),\" - SUGARLOADER\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Stage 3 (Loader)- Discord (fake) - HLOADER\"}),`\n`,(0,i.jsx)(e.li,{children:\"Stage 4 (Payload) - KANDYKORN\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"stage-0-initial-compromise-watcherpy\",children:\"Stage 0 Initial compromise: Watcher.py\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The initial breach was orchestrated via a camouflaged Python application designed and advertised as an arbitrage bot targeted at blockchain engineers. This application was distributed as a .zip file titled \",(0,i.jsx)(e.code,{children:\"Cross-Platform Bridges.zip\"}),\". Decompressing it reveals a \",(0,i.jsx)(e.code,{children:\"Main.py\"}),\" script accompanied by a folder named \",(0,i.jsx)(e.code,{children:\"order_book_recorder\"}),\", housing 13 Python scripts.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image21.png\",alt:\"Cross-Platform Bridges.zip folder structure\",width:\"380\",height:\"640\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The victim manually ran the \",(0,i.jsx)(e.code,{children:\"Main.py\"}),\" script via their PyCharm IDE Python interpreter.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Initially, the \",(0,i.jsx)(e.code,{children:\"Main.py\"}),\" script appears benign. It imports the accompanying Python scripts as modules and seems to execute some mundane functions.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"While analyzing the modules housed in the \",(0,i.jsx)(e.code,{children:\"order_book_recorder\"}),\" folder, one file -- \",(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" -- clearly stood out and we will see why.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"Main.py\"}),\" acts as the initial trigger, importing \",(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" as a module that indirectly executes the script. The Python interpreter runs every top-level statement in \",(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" sequentially.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The script starts off by establishing local directory paths and subsequently attempts to generate a \",(0,i.jsx)(e.code,{children:\"_log\"}),\" folder at the specified location. If the folder already exists, the script remains passive.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image17.png\",alt:\"Creating a folder within the Python application directory structure and name it _log\",width:\"884\",height:\"308\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The script pre-defines a \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" file path (destined for the just created \",(0,i.jsx)(e.code,{children:\"_log\"}),\" folder) and assigns it to the \",(0,i.jsx)(e.code,{children:\"output\"}),\" variable. The function \",(0,i.jsx)(e.code,{children:\"import_networklib\"}),\" is then defined. Within it, a Google Drive URL is initialized.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Utilizing the Python \",(0,i.jsx)(e.code,{children:\"urllib\"}),\" library, the script fetches content from this URL and stashes it in the \",(0,i.jsx)(e.code,{children:\"s_args\"}),\" variable. In case of retrieval errors, it defaults to returning the operating system's name. Subsequently, the content from Google Drive (now in \",(0,i.jsx)(e.code,{children:\"s_args\"}),\") is written into the \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" file.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image25.png\",alt:\"Malicious downloader function import_networklib\",width:\"1256\",height:\"600\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image24.png\",alt:\"Connect to Google Drive url and download data saved to a variable s_args\",width:\"1440\",height:\"156\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image1.png\",alt:\"Write data from s_args to testSpeed.py file in newly created _log directory\",width:\"989\",height:\"176\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The next function, \",(0,i.jsx)(e.code,{children:\"get_modules_base_version\"}),\", probes the Python version and invokes the \",(0,i.jsx)(e.code,{children:\"import_networklib\"}),\" function if it detects version 3. This call sets the entire sequence in motion.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image14.png\",alt:\"Check if Python version 3, calls the import_networklib function\",width:\"748\",height:\"210\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" imports \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" as a module, executing the contents of the script.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image7.png\",alt:\"Import testSpeed.py to execute it\",width:\"672\",height:\"148\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Concluding its operation, the malicious script tidies up, deleting the \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" file immediately after its one-time execution.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image8.png\",alt:\"Delete the downloaded testSpeed.py file following its import and execution\",width:\"364\",height:\"150\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image35.png\",alt:\"Watcher.py deletes the testSpeed.py immediately following its execution\",width:\"961\",height:\"184\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"stage-1-droppers-testspeedpy-and-findertools\",children:\"Stage 1 droppers testSpeed.py and FinderTools\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"When executed, \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" establishes an outbound network connection and fetches another Python file from a Google Drive URL, named \",(0,i.jsx)(e.code,{children:\"FinderTools\"}),\". This new file is saved to the \",(0,i.jsx)(e.code,{children:\"/Users/Shared/\"}),\" directory, with the method of retrieval mirroring the \",(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" script.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image9.png\",alt:\"testSpeed.py network connection\",width:\"1440\",height:\"162\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image2.png\",alt:\"_FinderTools file creation _\",width:\"1300\",height:\"182\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After download, \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" launches \",(0,i.jsx)(e.code,{children:\"FinderTools\"}),\", providing a URL (\",(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC\"}),\") as an argument which initiates an outbound network connection.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image3.png\",alt:\"FinderTools execution\",width:\"1440\",height:\"121\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image13.png\",alt:\"FinderTools network connections\",width:\"1440\",height:\"212\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"FinderTools\"}),\" is yet another dropper, downloading and executing a hidden second stage payload \",(0,i.jsx)(e.code,{children:\".sld\"}),\" also written to the \",(0,i.jsx)(e.code,{children:\"/Users/Shared/\"}),\" directory.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image5.png\",alt:\"FinderTools executes .sld\",width:\"1298\",height:\"178\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"stage-2-payload-sld-and-log-sugarloader\",children:\"Stage 2 payload .sld and .log: SUGARLOADER\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Stage 2 involves the execution of an obfuscated binary we have named SUGARLOADER, which is utilized twice under two separate names (\",(0,i.jsx)(e.code,{children:\".sld\"}),\" and \",(0,i.jsx)(e.code,{children:\".log\"}),\").\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"SUGARLOADER is first observed at \",(0,i.jsx)(e.code,{children:\"/Users/shared/.sld\"}),\". The second instance of SUGARLOADER, renamed to \",(0,i.jsx)(e.code,{children:\".log\"}),\", is used in the persistence mechanism REF7001 implements with Discord.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"obfuscation\",children:\"Obfuscation\"}),`\n`,(0,i.jsx)(e.p,{children:\"SUGARLOADER is used for initial access on the machine, and initializing the environment for the final stage. This binary is obfuscated using a binary packer, limiting what can be seen with static analysis.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The start function of this binary consists of a jump (\",(0,i.jsx)(e.code,{children:\"JMP\"}),\") to an undefined address. This is common for binary packers.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`HEADER:00000001000042D6 start:\nHEADER:00000001000042D6                 jmp     0x10000681E\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Executing the macOS file object tool \",(0,i.jsx)(e.code,{children:\"otool -l ./log\"}),\" lists all the sections that will be loaded at runtime.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`Section\n  sectname __mod_init_func\n   segname lko2\n      addr 0x00000001006983f0\n      size 0x0000000000000008\n    offset 4572144\n     align 2^3 (8)\n    reloff 0\n    nreloc 0\n     flags 0x00000009\n reserved1 0\n reserved2 0\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"__mod_init_func\"}),\" contains initialization functions. The C++ compiler places static constructors here. This is the code used to unpack the binary in memory.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"A successful method of reverse engineering such files is to place a breakpoint right after the execution of initialization functions and then take a snapshot of the process's virtual memory. When the breakpoint is hit, the code will already be decrypted in memory and can be analyzed using traditional methods.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Adversaries commonly use obfuscation techniques such as this to bypass traditional static signature-based antimalware capabilities. As of this publication, VirusTotal \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940\",rel:\"nofollow\",children:\"shows 0 detections of this file\"}),\", which suggests these defense evasions continue to be cost-effective.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image11.png\",alt:\"SUGARLOADER VirusTotal Detections\",width:\"1440\",height:\"419\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"execution\",children:\"Execution\"}),`\n`,(0,i.jsx)(e.p,{children:\"The primary purpose of SUGARLOADER is to connect to a Command and Control server (C2), in order to download a final stage payload we refer to as KANDYKORN, and execute it directly in memory.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SUGARLOADER checks for the existence of a configuration file at \",(0,i.jsx)(e.code,{children:\"/Library/Caches/com.apple.safari.ck\"}),\". If the configuration file is missing, it will be downloaded and created via a default C2 address provided as a command line argument to the \",(0,i.jsx)(e.code,{children:\".sld\"}),\" binary. In our sample, the C2 address was \",(0,i.jsx)(e.code,{children:\"23.254.226[.]90\"}),\" over TCP port \",(0,i.jsx)(e.code,{children:\"443\"}),\". We provide additional information about the C2 in the Network Infrastructure section below.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image4.png\",alt:\"SUGARLOADER C2 established and configuration file download\",width:\"940\",height:\"184\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image40.png\",alt:\"SUGARLOADER writing configuration file\",width:\"1440\",height:\"182\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The configuration file is encrypted using RC4 and the encryption key (in the Observations section) is hardcoded within SUGARLOADER itself. The \",(0,i.jsx)(e.code,{children:\"com.apple.safari.ck\"}),\" file is utilized by both SUGARLOADER and KANDYKORN for establishing secure network communications.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`struct MalwareConfig\n{\n  char computerId[8];\n  _BYTE gap0[12];\n  Url c2_urls[2];\n  Hostname c2_ip_address[2];\n  _BYTE proxy[200];\n  int sleepInterval;\n};\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"computerId\"}),\" is a randomly generated string identifying the victim\\u2019s computer.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"A C2 server can either be identified with a fully qualified URL (\",(0,i.jsx)(e.code,{children:\"c2_urls\"}),\") or with an IP address and port (\",(0,i.jsx)(e.code,{children:\"c2_ip_ddress\"}),\"). It supports two C2 servers, one as the main server, and the second one as a fallback. The specification or hardcoding of multiple servers like this is commonly used by malicious actors to ensure their connection with the victim is persistent should the original C2 be taken down or blocked. \",(0,i.jsx)(e.code,{children:\"sleepInterval\"}),\" is the default sleeping interval for the malware between separate actions.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Once the configuration file is read into memory and decrypted, the next step is to initialize a connection to the remote server. All the communication between the victim\\u2019s computer and the C2 server is detailed in the Network Protocol section.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The last step taken by SUGARLOADER is to download a final stage payload from the C2 server and execute it. REF7001 takes advantage of a technique known as \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1620/\",rel:\"nofollow\",children:\"reflective binary loading\"}),\" (allocation followed by the execution of payloads directly within the memory of the process) to execute the final stage, leveraging APIs such as \",(0,i.jsx)(e.code,{children:\"NSCreateObjectFileImageFromMemory\"}),\" or \",(0,i.jsx)(e.code,{children:\"NSLinkModule\"}),\". Reflective loading is a powerful technique. If you'd like to learn more about how it works, check out this research by \",(0,i.jsx)(e.a,{href:\"https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f\",rel:\"nofollow\",children:\"slyd0g\"}),\" and \",(0,i.jsx)(e.a,{href:\"https://hackd.net/posts/macos-reflective-code-loading-analysis/\",rel:\"nofollow\",children:\"hackd\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This technique can be utilized to execute a payload from an in-memory buffer. Fileless execution such as this \",(0,i.jsx)(e.a,{href:\"https://objective-see.org/blog/blog_0x51.html\",rel:\"nofollow\",children:\"has been observed previously\"}),\" in attacks conducted by the Lazarus Group.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"SUGARLOADER reflectively loads a binary (KANDYKORN) and then creates a new file initially named \",(0,i.jsx)(e.code,{children:\"appname\"}),\" which we refer to as \",(0,i.jsx)(e.code,{children:\"HLOADER\"}),\" which we took directly from the process code signature\\u2019s signing identifier.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image12.png\",alt:\"SUGARLOADER reflective binary load alert\",width:\"1360\",height:\"180\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image36.png\",alt:\"SUGARLOADER creates HLOADER\",width:\"1240\",height:\"182\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image10.png\",alt:\"HLOADER code signature identifier\",width:\"706\",height:\"180\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image34.png\",alt:\"Pseudocode for SUGARLOADER (stage2)\",width:\"696\",height:\"257\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"stage-3-loader-discord-hloader\",children:\"Stage 3 loader Discord: HLOADER\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"HLOADER (\",(0,i.jsx)(e.code,{children:\"2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1\"}),\") is a payload that attempts to masquerade as the legitimate Discord application. As of this writing, \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1\",rel:\"nofollow\",children:\"it has 0 detections on VirusTotal\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image15.png\",alt:\"HLOADER VirusTotal Detections\",width:\"1440\",height:\"212\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"HLOADER was identified through the use of a macOS binary code-signing technique that has been \",(0,i.jsx)(e.a,{href:\"https://objective-see.org/blog/blog_0x73.html\",rel:\"nofollow\",children:\"previously linked\"}),\" to the \",(0,i.jsx)(e.a,{href:\"https://www.eset.com/int/about/newsroom/press-releases/research/eset-research-discovers-new-lazarus-dreamjob-campaign-and-links-it-to-phone-provider-3cx-supply-chai/\",rel:\"nofollow\",children:\"DPRK\\u2019s Lazarus Group 3CX intrusion\"}),\". In addition to other published research, Elastic Security Labs has also used the presence of this technique as an indicator of DPRK campaigns, as seen in our June 2023 research publication on \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/inital-research-of-jokerspy#the-xcc-binary\",rel:\"nofollow\",children:\"JOKERSPY\"}),\".\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"persistence\",children:\"Persistence\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"We observed the threat actor adopting a technique we have not previously seen them use to achieve persistence on macOS, known as \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1574/\",rel:\"nofollow\",children:\"execution flow hijacking\"}),\". The target of this attack was the widely used application Discord. The Discord application is often configured by users as a login item and launched when the system boots, making it an attractive target for takeover. HLOADER is a self-signed binary written in Swift. The purpose of this loader is to execute both the legitimate Discord bundle and \",(0,i.jsx)(e.code,{children:\".log\"}),\" payload, the latter of which is used to execute Mach-O binary files from memory without writing them to disk.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The legitimate binary \",(0,i.jsx)(e.code,{children:\"/Applications/Discord.app/Contents/MacOS/Discord\"}),\" was renamed to \",(0,i.jsx)(e.code,{children:\".lock\"}),\", and replaced by \",(0,i.jsx)(e.code,{children:\"HLOADER\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image18.png\",alt:\"Discord replaced by HLOADER\",width:\"1440\",height:\"186\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is the code signature information for \",(0,i.jsx)(e.code,{children:\"HLOADER\"}),\", which has a self-signed identifier structure consistent with other Lazarus Group samples.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`Executable=Applications/Discord.app/Contents/MacOS/Discord\nIdentifier=HLOADER-5555494485b460f1e2343dffaef9b94d01136320\nFormat=bundle with Mach-O universal (x86_64 arm64)\nCodeDirectory flags=0x2(adhoc) hashes=12+7 location=embedded\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"When executed, \",(0,i.jsx)(e.code,{children:\"HLOADER\"}),\" performs the following operations:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Renames itself from \",(0,i.jsx)(e.code,{children:\"Discord\"}),\" to \",(0,i.jsx)(e.code,{children:\"MacOS.tmp\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Renames the legitimate Discord binary from \",(0,i.jsx)(e.code,{children:\".lock\"}),\" to \",(0,i.jsx)(e.code,{children:\"Discord\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Executes both Discord and \",(0,i.jsx)(e.code,{children:\".log\"}),\" using \",(0,i.jsx)(e.code,{children:\"NSTask.launchAndReturnError\"})]}),`\n`,(0,i.jsx)(e.li,{children:\"Renames both files back to their initial names\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image37.png\",alt:\"HLOADER execution event chain\",width:\"1440\",height:\"337\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image33.png\",alt:\"HLOADER Discord Application Hijack\",width:\"1440\",height:\"747\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following process tree also visually depicts how persistence is obtained. The root node \",(0,i.jsx)(e.code,{children:\"Discord\"}),\" is actually HLOADER disguised as the legitimate app. As presented above, it first runs .lock, which is in fact Discord, and, alongside, spawns SUGARLOADER as a process named .log.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image23.png\",alt:\"Process Tree Analyzer\",width:\"1440\",height:\"583\"})}),`\n`,(0,i.jsx)(e.p,{children:\"As seen in stage 2, SUGARLOADER reads the configuration file, connects to the C2 server, and waits for a payload to be received. Another alert is generated when the new payload (KANDYKORN) is loaded into memory.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image27.png\",alt:\"Reflective Dylib Load Alert for KANDYKORN\",width:\"1440\",height:\"155\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"stage-4-payload-kandykorn\",children:\"Stage 4 Payload: KANDYKORN\"}),`\n`,(0,i.jsx)(e.p,{children:\"KANDYKORN is the final stage of this execution chain and possesses a full-featured set of capabilities to access and exfiltrate data from the victim\\u2019s computer. Elastic Security Labs was able to retrieve this payload from one C2 server which hadn\\u2019t been deactivated yet.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"execution-1\",children:\"Execution\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"KANDYCORN processes are forked and run in the background as daemons before loading their configuration file from \",(0,i.jsx)(e.code,{children:\"/Library/Caches/com.apple.safari.ck\"}),\". The configuration file is read into memory then decrypted using the same RC4 key, and parsed for C2 settings. The communication protocol is similar to prior stages using the victim ID value for authentication.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"command-and-control\",children:\"Command and control\"}),`\n`,(0,i.jsx)(e.p,{children:\"Once communication is established, KANDYKORN awaits commands from the server. This is an interesting characteristic in that the malware waits for commands instead of polling for commands. This would reduce the number of endpoint and network artifacts generated and provide a way to limit potential discovery.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Each command is represented by an integer being transmitted, followed by the data that is specific to each action. Below is a list of the available commands KANDYKORN provides.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd1\",children:\"Command 0xD1\"}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Exit command where the program gracefully exists.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd2\",children:\"Command 0xD2\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_basicinfo\"}),`\nAction: Gathers information about the system such as hostname, uid, osinfo, and image path of the current process, and reports back to the server.`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image16.png\",alt:\"resp_basicinfo routine\",width:\"318\",height:\"260\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd3\",children:\"Command 0xD3\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_dir\"}),`\nAction: Lists content of a directory and format the output similar to `,(0,i.jsx)(e.code,{children:\"ls -al\"}),\", including type, name, permissions, size, acl, path, and access time.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image20.png\",alt:\"resp_file_dir routine\",width:\"445\",height:\"337\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd4\",children:\"Command 0xD4\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_prop\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Recursively read a directory and count the number of files, number of subdirectories, and total size.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image26.png\",alt:\"resp_file_prop routine\",width:\"722\",height:\"367\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd5\",children:\"Command 0xD5\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_upload\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Used by the adversary to upload a file from their C2 server to the victim\\u2019s computer. This command specifies a path, creates it, and then proceeds to download the file content and write it to the victim\\u2019s computer.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd6\",children:\"Command 0xD6\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_down\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Used by the adversary to transfer a file from the victim\\u2019s computer to their infrastructure.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd7\",children:\"Command 0xD7\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_zipdown\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Action: Archive a directory and exfiltrate it to the C2 server. The newly created archive\\u2019s name has the following pattern\",(0,i.jsx)(e.code,{children:\"/tmp/tempXXXXXXX\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image29.png\",alt:\"_resp_file_zipdown routine _\",width:\"500\",height:\"423\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd8\",children:\"Command 0xD8\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_file_wipe\"}),`\nAction: Overwrites file content to zero and deletes the file. This is a common technique used to impede recovering the file through digital forensics on the filesystem.`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image28.png\",alt:\"resp_file_wipe routine\",width:\"513\",height:\"147\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xd9\",children:\"Command 0xD9\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_proc_list\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Lists all running processes on the system along with their PID, UID and other information.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xda\",children:\"Command 0xDA\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_proc_kill\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Kills a process by specified PID.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image19.png\",alt:\"resp_proc_kill routine\",width:\"471\",height:\"80\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xdb\",children:\"Command 0xDB\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_cmd_send\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Executes a command on the system by using a pseudoterminal.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xdc\",children:\"Command 0xDC\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_cmd_recv\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Action: Reads the command output from the previous command \",(0,i.jsx)(e.code,{children:\"resp_cmd_send\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xdd\",children:\"Command 0xDD\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_cmd_create\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Action: Spawns a shell on the system and communicates with it via a pseudoterminal. Once the shell process is executed, commands are read and written through the \",(0,i.jsx)(e.code,{children:\"/dev/pts\"}),\" device.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image38.png\",alt:\"resp_cmd_create routine (interactive shell)\",width:\"591\",height:\"828\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xde\",children:\"Command 0xDE\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_cfg_get\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Action: Sends the current configuration to the C2 from \",(0,i.jsx)(e.code,{children:\"/Library/Caches/com.apple.safari.ck\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xdf\",children:\"Command 0xDF\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_cfg_set\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Download a new configuration file to the victim\\u2019s machine. This is used by the adversary to update the C2 hostname that should be used to retrieve commands from.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"command-0xe0\",children:\"Command 0xE0\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Name: \",(0,i.jsx)(e.code,{children:\"resp_sleep\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Action: Sleeps for a number of seconds.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"summary\",children:\"Summary\"}),`\n`,(0,i.jsx)(e.p,{children:\"KANDYKORN is an advanced implant with a variety of capabilities to monitor, interact with, and avoid detection. It utilizes reflective loading, a direct-memory form of execution that may bypass detections.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"network-protocol\",children:\"Network protocol\"}),`\n`,(0,i.jsx)(e.p,{children:\"All the executables that communicate with the C2 (both stage 3 and stage 4) are using the same protocol. All the data is encrypted with RC4 and uses the same key previously referenced in the configuration file.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Both samples implement wrappers around the send-and-receive system calls. It can be observed in the following pseudocode that during the send routine, the buffer is first encrypted and then sent to the socket, whereas when data is received it is first decrypted and then processed.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image22.png\",alt:\"send routine\",width:\"458\",height:\"80\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image32.png\",alt:\"recv routine\",width:\"490\",height:\"249\"})}),`\n`,(0,i.jsx)(e.p,{children:\"When the malware first connects to the C2 during the initialization phase, there is a handshake that needs to be validated in order to proceed. Should the handshake fail, the attack would stop and no other commands would be processed.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"On the client side, a random number is generated and sent to the C2, which replies with a nonce variable. The client then computes a challenge with the random number and the received nonce and sends the result back to the server. If the challenge is successful and the server accepts the connection, it replies with a constant such as \",(0,i.jsx)(e.code,{children:\"0x41C3372\"}),\" which appears in the analyzed sample.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image39.png\",alt:\"Handshake routine\",width:\"770\",height:\"223\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Once the connection is established, the client sends its ID and awaits commands from the server. Any subsequent data sent or received from here is serialized following a common schema used to serialize binary objects. First, the length of the content is sent, then the payload, followed by a return code which indicates if any error occurred.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image6.png\",alt:\"Overview of communication protocol\",width:\"1440\",height:\"431\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"network-infrastructure\",children:\"Network infrastructure\"}),`\n`,(0,i.jsx)(e.p,{children:\"During REF7001, the adversary was observed communicating with network infrastructure to collect various payloads and loaders for different stages of the intrusion.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As detailed in the Stage 1 section above, the link to the initial malware archive, \",(0,i.jsx)(e.code,{children:\"Cross-Platform Bridges.zip\"}),\", was provided in a direct message on a popular blockchain Discord server. This archive was hosted on a Google Drive (\",(0,i.jsx)(e.code,{children:\"https://drive.google[.]com/file/d1KW5nQ8MZccug6Mp4QtKyWLT3HIZzHNIL2\"}),\"), but this was removed shortly after the archive was downloaded.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Throughout the analysis of the REF7001 intrusion, there were two C2 servers observed.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"23.254.226[.]90\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"tp-globaxyz\",children:\"tp-globa[.]xyz\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The C2 domain \",(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz\"}),\" is used by \",(0,i.jsx)(e.code,{children:\"FinderTools\"}),\" to download SUGARLOADER and is likely an attempt at \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Typosquatting\",rel:\"nofollow\",children:\"typosquatting\"}),\" a legitimate foreign exchange market broker. We do not have any information to indicate that the legitimate company is involved in this intrusion. This typosquatted domain was likely chosen in an attempt to appear more legitimate to the victims of the intrusion.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz\"}),\", as of this writing, resolves to an IP address (\",(0,i.jsx)(e.code,{children:\"192.119.64[.]43\"}),\") that has been observed distributing malware attributed to the DPRK\\u2019s Lazarus Group (\",(0,i.jsx)(e.a,{href:\"https://twitter.com/TLP_R3D/status/1677617586349981696\",rel:\"nofollow\",children:\"1\"}),\", \",(0,i.jsx)(e.a,{href:\"https://twitter.com/_reboot_xxxx/status/1679054436289880065\",rel:\"nofollow\",children:\"2\"}),\", \",(0,i.jsx)(e.a,{href:\"https://twitter.com/KSeznec/status/1678319191110082560\",rel:\"nofollow\",children:\"3\"}),\").\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"2325422690\",children:\"23.254.226[.]90\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"23.254.226[.]90 is the C2 IP used for the \",(0,i.jsx)(e.code,{children:\".sld\"}),\" file (SUGARLOADER malware). How this IP is used for C2 is highlighted in the stage 2 section above.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"On October 14, 2023, \",(0,i.jsx)(e.code,{children:\"23.254.226[.]90\"}),\" was used to register the subdomain, \",(0,i.jsx)(e.code,{children:\"pesnam.publicvm[.]com\"}),\". While we did not observe this domain in our intrusion, it is \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/domain/publicvm.com/detection\",rel:\"nofollow\",children:\"documented\"}),\" as hosting other malicious software.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"campaign-intersections\",children:\"Campaign intersections\"}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz\"}),\", has a TLS certificate with a Subject CN of \",(0,i.jsx)(e.code,{children:\"bitscrunnch.linkpc[.]net\"}),\". The domain \",(0,i.jsx)(e.code,{children:\"bitscrunnch.linkpc[.]net\"}),\" has been \",(0,i.jsx)(e.a,{href:\"https://twitter.com/tiresearch1/status/1708141542261809360?s=20\",rel:\"nofollow\",children:\"attributed\"}),\" to other Lazarus Group intrusions.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"As noted above, this is likely an attempt to typosquat a legitimate domain for a decentralized NFT data platform. We do not have any information to indicate that the legitimate company is involved in this intrusion.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`\\u2026\nIssuer: C = US, O = Let's Encrypt, CN = R3\nValidity\nNot Before: Sep 20 12:55:37 2023 GMT\nNot After : Dec 19 12:55:36 2023 GMT\nSubject: CN = bitscrunnch[.]linkpc[.]net\n\\u2026\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"bitscrunnch.linkpc[.]net\"}),\"\\u2019s TLS certificate is also used for \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/search/entity%253Adomain%2520ssl_subject%253Abitscrunnch.linkpc.net/domains\",rel:\"nofollow\",children:\"other additional domains\"}),\", all of which are registered to the same IP address reported above in the \",(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz\"}),\" section above, \",(0,i.jsx)(e.code,{children:\"192.119.64[.]43\"}),\".\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"jobintro.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"jobdescription.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"docsenddata.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"docsendinfo.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"datasend.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"exodus.linkpc[.]net\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"bitscrunnch.run[.]place\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"coupang-networks[.]pics\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"While LinkPC is a legitimate second-level domain and dynamic DNS service provider, it is \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/domain/linkpc.net/community\",rel:\"nofollow\",children:\"well-documented\"}),\" that this specific service is used by threat actors for C2. In our \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket\",rel:\"nofollow\",children:\"published research into RUSTBUCKET\"}),\", which is also attributed to the DPRK, we observed LinkPC being used for C2.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"All registered domains, 48 as of this writing, for \",(0,i.jsx)(e.code,{children:\"192.119.64[.]43\"}),\" are included in the observables bundle.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, in late July 2023, there were reports on the Subreddits \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/\",rel:\"nofollow\",children:\"r/hacking\"}),\", \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/\",rel:\"nofollow\",children:\"r/Malware\"}),\", and \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/\",rel:\"nofollow\",children:\"r/pihole\"}),\" with URLs that matched the structure of \",(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC\"}),\". The user on Reddit reported that a recruiter contacted them to solve a Python coding challenge as part of a job offer. The code challenge was to analyze Python code purported to be for an internet speed test. This aligns with the REF7001 victim\\u2019s reporting on being offered a Python coding challenge and the script name \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" detailed earlier in this research.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The domain reported on Reddit was \",(0,i.jsx)(e.code,{children:\"group.pro-tokyo[.]top//OcRLY4xsFlN/vMZrXIWONw/6OyCZl89HS/fP7savDX6c/bfC\"}),\" which follows the same structure as the REF7001 URL (\",(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC\"}),\"):\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Two \",(0,i.jsx)(e.code,{children:\"//\"}),\"\\u2019s after the TLD\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"5 subdirectories using an \",(0,i.jsx)(e.code,{children:\"//11-characters/10-characters/10-characters/\"}),\" structure\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"The last 2 subdirectories were \",(0,i.jsx)(e.code,{children:\"/fP7savDX6c/bfC\"})]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"While we did not observe GitHub in our intrusion, the Redditors who reported this did observe GitHub profiles being used. They have all been deactivated.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Those accounts were:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"https://github[.]com/Prtof\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"https://github[.]com/wokurks\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"summary-1\",children:\"Summary\"}),`\n`,(0,i.jsx)(e.p,{children:\"The DPRK, via units like the LAZARUS GROUP, continues to target crypto-industry businesses with the goal of stealing cryptocurrency in order to circumvent international sanctions that hinder the growth of their economy and ambitions. In this intrusion, they targeted blockchain engineers active on a public chat server with a lure designed to speak to their skills and interests, with the underlying promise of financial gain.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The infection required interactivity from the victim that would still be expected had the lure been legitimate. Once executed, via a Python interpreter, the REF7001 execution flow went through 5 stages:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 0 (staging) - \",(0,i.jsx)(e.code,{children:\"Main.py\"}),\" executes \",(0,i.jsx)(e.code,{children:\"Watcher.py\"}),\" as an imported module. This script checks the Python version, prepares the local system directories, then downloads, executes, and cleans up the next stage.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 1 (generic droppers) - \",(0,i.jsx)(e.code,{children:\"testSpeed.py\"}),\" and \",(0,i.jsx)(e.code,{children:\"FinderTools\"}),\" are intermediate dropper Python scripts that download and execute SUGARLOADER.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 2 (SUGARLOADER) - \",(0,i.jsx)(e.code,{children:\".sld\"}),\" and \",(0,i.jsx)(e.code,{children:\".log\"}),\" are Mach-O executable payloads that establish C2, write the configuration file and reflectively load KANDYKORN.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 3 (HLOADER) - \",(0,i.jsx)(e.code,{children:\"HLOADER\"}),\"/\",(0,i.jsx)(e.code,{children:\"Discord\"}),\"(fake) is a simple loader used as a persistence mechanism masquerading as the legitimate Discord app for the loading of SUGARLOADER.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Stage 4 (KANDYKORN) - The final reflectively loaded payload. KANDYKORN is a full-featured memory resident RAT with built-in capabilities to:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Conduct encrypted command and control\"}),`\n`,(0,i.jsx)(e.li,{children:\"Conduct system enumeration\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upload and execute additional payloads\"}),`\n`,(0,i.jsx)(e.li,{children:\"Compress and exfil data\"}),`\n`,(0,i.jsx)(e.li,{children:\"Kill processes\"}),`\n`,(0,i.jsx)(e.li,{children:\"Run arbitrary system commands through an interactive pseudoterminal\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic traced this campaign to April 2023 through the RC4 key used to encrypt the SUGARLOADER and KANDYKORN C2. This threat is still active and the tools and techniques are being continuously developed.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"the-diamond-model\",children:\"The Diamond Model\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security utilizes the Diamond Model to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for an, although cluttered, single diamond.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/elastic-catches-dprk-passing-out-kandykorn/image30.jpg\",alt:\"REF7001 Diamond Model\",width:\"1440\",height:\"871\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-and-mitre-attck\",children:\"[Malware] and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that advanced persistent threats used against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0003\",rel:\"nofollow\",children:\"Persistence\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009\",rel:\"nofollow\",children:\"Collection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1204/002/\",rel:\"nofollow\",children:\"User Execution: Malicious File\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/006/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter: Python\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/004/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter: Unix Shell\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1574/\",rel:\"nofollow\",children:\"Hijack Execution Flow\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1140/\",rel:\"nofollow\",children:\"Deobfuscate/Decode Files or Information\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1564/001/\",rel:\"nofollow\",children:\"Hide Artifacts: Hidden Files and Directories\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1070/004/\",rel:\"nofollow\",children:\"Indicator Removal: File Deletion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1036/005/\",rel:\"nofollow\",children:\"Masquerading: Match Legitimate Name or Location\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027/002/\",rel:\"nofollow\",children:\"Obfuscated Files or Information: Software Packing\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1620/\",rel:\"nofollow\",children:\"Reflective Code Loading\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1083/\",rel:\"nofollow\",children:\"File and Directory Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1057/\",rel:\"nofollow\",children:\"Process Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1082/\",rel:\"nofollow\",children:\"System Information Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1560/003/\",rel:\"nofollow\",children:\"Archive Collected Data: Archive via Custom Method\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1074/001/\",rel:\"nofollow\",children:\"Local Data Staging\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1071/001/\",rel:\"nofollow\",children:\"Application Layer Protocol: Web Protocols\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1008/\",rel:\"nofollow\",children:\"Fallback Channels\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1105/\",rel:\"nofollow\",children:\"Ingress Tool Transfer\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1041/\",rel:\"nofollow\",children:\"Exfiltration Over C2 Channel\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-prevention-capabilities\",children:\"Malware prevention capabilities\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.SUGARLOADER\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.HLOADER\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.KANDYKORN\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-detection-capabilities\",children:\"Malware detection capabilities\"}),`\n`,(0,i.jsx)(e.h3,{id:\"hunting-queries\",children:\"Hunting queries\"}),`\n`,(0,i.jsx)(e.p,{children:\"The events for EQL are provided with the Elastic Agent using the Elastic Defend integration. Hunting queries could return high signals or false positives. These queries are used to identify potentially suspicious behavior, but an investigation is required to validate the findings.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"eql-queries\",children:\"EQL queries\"}),`\n`,(0,i.jsx)(e.p,{children:\"Using the Timeline section of the Security Solution in Kibana under the \\u201CCorrelation\\u201D tab, you can use the below EQL queries to hunt for similar behaviors.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify when a hidden executable creates and then immediately deletes a file within a temporary directory:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id, file.path with maxspan=30s\n  [file where event.action == \"modification\" and process.name : \".*\" and \n   file.path : (\"/private/tmp/*\", \"/tmp/*\", \"/var/tmp/*\")]\n  [file where event.action == \"deletion\" and process.name : \".*\" and \n   file.path : (\"/private/tmp/*\", \"/tmp/*\", \"/var/tmp/*\")]\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify when a hidden file makes an outbound network connection followed by the immediate download of an executable file:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id with maxspan=30s\n[network where event.type == \"start\" and process.name : \".*\"]\n[file where event.action != \"deletion\" and file.Ext.header_bytes : (\"cffaedfe*\", \"cafebabe*\")]\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify when a macOS application binary gets renamed to a hidden file name within the same directory:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`file where event.action == \"rename\" and file.name : \".*\" and \n file.path : \"/Applications/*/Contents/MacOS/*\" and \n file.Ext.original.path : \"/Applications/*/Contents/MacOS/*\" and \n not startswith~(file.Ext.original.path,Effective_process.executable)\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify when an IP address is supplied as an argument to a hidden executable:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id with maxspan=30s\n[process where event.type == \"start\" and event.action == \"exec\" and process.name : \".*\" and process.args regex~ \"[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}\"]\n[network where event.type == \"start\"]\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify the rename or modification of a hidden executable file within the /Users/Shared directory or the execution of a hidden unsigned or untrusted process in the /Users/Shared directory:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`any where \n (\n  (event.category : \"file\" and event.action != \"deletion\" and file.Ext.header_bytes : (\"cffaedfe*\", \"cafebabe*\") and \n   file.path : \"/Users/Shared/*\" and file.name : \".*\" ) or \n  (event.category : \"process\" and event.action == \"exec\" and process.executable : \"/Users/Shared/*\" and \n   (process.code_signature.trusted == false or process.code_signature.exists == false) and process.name : \".*\")\n )\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL query can be used to identify when a URL is supplied as an argument to a python script via the command line:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id with maxspan=30s\n[process where event.type == \"start\" and event.action == \"exec\" and \n process.args : \"python*\" and process.args : (\"/Users/*\", \"/tmp/*\", \"/var/tmp/*\", \"/private/tmp/*\") and process.args : \"http*\" and \n process.args_count \u0026lt;= 3 and \n not process.name : (\"curl\", \"wget\")]\n[network where event.type == \"start\"]\n`})}),`\n`,(0,i.jsx)(e.p,{children:'The following EQL query can be used to identify the attempt of in memory Mach-O loading specifically by looking for the predictable temporary file creation of \"NSCreateObjectFileImageFromMemory-*\":'}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`file where event.type != \"deletion\" and \nfile.name : \"NSCreateObjectFileImageFromMemory-*\"\n`})}),`\n`,(0,i.jsx)(e.p,{children:'The following EQL query can be used to identify the attempt of in memory Mach-O loading by looking for the load of the \"NSCreateObjectFileImageFromMemory-*\" file or a load with no dylib name provided:'}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`any where ((event.action == \"load\" and not dll.path : \"?*\") or \n  (event.action == \"load\" and dll.name : \"NSCreateObjectFileImageFromMemory*\"))\n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the payloads:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_SugarLoader.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.SUGARLOADER\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_HLoader.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.HLOADER\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Trojan_KandyKorn.yar\",rel:\"nofollow\",children:\"MacOS.Trojan.KANDYKORN\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also available for \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/ref7001\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:\".log, .sld\"}),(0,i.jsx)(e.td,{children:\"SUGARLOADER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:\"Discord (fake)\"}),(0,i.jsx)(e.td,{children:\"HLOADER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"927b3564c1cf884d2a05e1d7bd24362ce8563a1e9b85be776190ab7f8af192f6\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"KANDYKORN\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"http://tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC\"})}),(0,i.jsx)(e.td,{children:\"url\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"FinderTools C2 URL\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"tp-globa[.]xyz\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"FinderTools C2 domain\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"192.119.64[.]43\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{children:\"tp-globa IP address\"}),(0,i.jsx)(e.td,{children:\"FinderTools C2 IP\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"23.254.226[.]90\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"SUGARLOADER C2 IP\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"D9F936CE628C3E5D9B3695694D1CDE79E470E938064D98FBF4EF980A5558D1C90C7E650C2362A21B914ABD173ABA5C0E5837C47B89F74C5B23A7294CC1CFD11B\"})}),(0,i.jsx)(e.td,{children:\"64 byte key\"}),(0,i.jsx)(e.td,{children:\"RC4 key\"}),(0,i.jsx)(e.td,{children:\"SUGARLOADER, KANDYKORN\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/DPRK-strikes-using-a-new-variant-of-rustbucket\",rel:\"nofollow\",children:\"The DPRK strikes using a new variant of RUSTBUCKET \\u2014 Elastic Security Labs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://x.com/tiresearch1/status/1708141542261809360\",rel:\"nofollow\",children:\"https://x.com/tiresearch1/status/1708141542261809360\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/\",rel:\"nofollow\",children:\"https://www.reddit.com/r/hacking/comments/15b4uti/comment/jtprebt/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/Malware/comments/15b595e/looks_like_a_try_to_steel_some_data/\",rel:\"nofollow\",children:\"Looks like a try to steel some data : r/Malware\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/\",rel:\"nofollow\",children:\"https://www.reddit.com/r/pihole/comments/15d11do/malware_project_mimics_pihole/jtzmpqh/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://objective-see.org/blog/blog_0x51.html\",rel:\"nofollow\",children:\"Lazarus Group Goes 'Fileless'\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://slyd0g.medium.com/understanding-and-defending-against-reflective-code-loading-on-macos-e2e83211e48f\",rel:\"nofollow\",children:\"Understanding and Defending Against Reflective Code Loading on macOS | by Justin Bui\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://hackd.net/posts/macos-reflective-code-loading-analysis/\",rel:\"nofollow\",children:\"macOS reflective code loading analysis \\xB7 hackd\"})}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(l,n)})):l(n)}var A=v;return b(D);})();\n;return Component;"},"_id":"articles/elastic-catches-dprk-passing-out-kandykorn.mdx","_raw":{"sourceFilePath":"articles/elastic-catches-dprk-passing-out-kandykorn.mdx","sourceFileName":"elastic-catches-dprk-passing-out-kandykorn.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/elastic-catches-dprk-passing-out-kandykorn"},"type":"Article","imageUrl":"/assets/images/elastic-catches-dprk-passing-out-kandykorn/photo-edited-01@2x.jpg","readingTime":"30 min read","series":"","url":"/elastic-catches-dprk-passing-out-kandykorn","headings":[{"level":2,"title":"Preamble","href":"#preamble"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Execution flow","href":"#execution-flow"},{"level":2,"title":"Stage 0 Initial compromise: Watcher.py","href":"#stage-0-initial-compromise-watcherpy"},{"level":2,"title":"Stage 1 droppers testSpeed.py and FinderTools","href":"#stage-1-droppers-testspeedpy-and-findertools"},{"level":2,"title":"Stage 2 payload .sld and .log: SUGARLOADER","href":"#stage-2-payload-sld-and-log-sugarloader"},{"level":3,"title":"Obfuscation","href":"#obfuscation"},{"level":3,"title":"Execution","href":"#execution"},{"level":2,"title":"Stage 3 loader Discord: HLOADER","href":"#stage-3-loader-discord-hloader"},{"level":3,"title":"Persistence","href":"#persistence"},{"level":2,"title":"Stage 4 Payload: KANDYKORN","href":"#stage-4-payload-kandykorn"},{"level":3,"title":"Execution","href":"#execution-1"},{"level":3,"title":"Command and control","href":"#command-and-control"},{"level":4,"title":"Command 0xD1","href":"#command-0xd1"},{"level":4,"title":"Command 0xD2","href":"#command-0xd2"},{"level":4,"title":"Command 0xD3","href":"#command-0xd3"},{"level":4,"title":"Command 0xD4","href":"#command-0xd4"},{"level":4,"title":"Command 0xD5","href":"#command-0xd5"},{"level":4,"title":"Command 0xD6","href":"#command-0xd6"},{"level":4,"title":"Command 0xD7","href":"#command-0xd7"},{"level":4,"title":"Command 0xD8","href":"#command-0xd8"},{"level":4,"title":"Command 0xD9","href":"#command-0xd9"},{"level":4,"title":"Command 0xDA","href":"#command-0xda"},{"level":4,"title":"Command 0xDB","href":"#command-0xdb"},{"level":4,"title":"Command 0xDC","href":"#command-0xdc"},{"level":4,"title":"Command 0xDD","href":"#command-0xdd"},{"level":4,"title":"Command 0xDE","href":"#command-0xde"},{"level":4,"title":"Command 0xDF","href":"#command-0xdf"},{"level":4,"title":"Command 0xE0","href":"#command-0xe0"},{"level":3,"title":"Summary","href":"#summary"},{"level":2,"title":"Network protocol","href":"#network-protocol"},{"level":2,"title":"Network infrastructure","href":"#network-infrastructure"},{"level":3,"title":"tp-globa[.]xyz","href":"#tp-globaxyz"},{"level":3,"title":"23.254.226[.]90","href":"#2325422690"},{"level":2,"title":"Campaign intersections","href":"#campaign-intersections"},{"level":2,"title":"Summary","href":"#summary-1"},{"level":2,"title":"The Diamond Model","href":"#the-diamond-model"},{"level":2,"title":"[Malware] and MITRE ATT\u0026CK","href":"#malware-and-mitre-attck"},{"level":4,"title":"Tactics","href":"#tactics"},{"level":4,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Malware prevention capabilities","href":"#malware-prevention-capabilities"},{"level":2,"title":"Malware detection capabilities","href":"#malware-detection-capabilities"},{"level":3,"title":"Hunting queries","href":"#hunting-queries"},{"level":4,"title":"EQL queries","href":"#eql-queries"},{"level":3,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Colson Wilhoit","slug":"colson-wilhoit","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},a=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!d.call(t,r)\u0026\u0026r!==e\u0026\u0026i(t,r,{get:()=\u003en[r],enumerable:!(s=x(n,r))||s.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?m(_(t)):{},a(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var l=g((X,c)=\u003e{c.exports=_jsx_runtime});var D={};j(D,{default:()=\u003ew,frontmatter:()=\u003eC});var o=p(l()),C={title:\"Colson Wilhoit\",description:\"Elastic\",slug:\"colson-wilhoit\"};function u(t){return(0,o.jsx)(o.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var w=M;return h(D);})();\n;return Component;"},"_id":"authors/colson-wilhoit.mdx","_raw":{"sourceFilePath":"authors/colson-wilhoit.mdx","sourceFileName":"colson-wilhoit.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/colson-wilhoit"},"type":"Author","imageUrl":"","url":"/authors/colson-wilhoit"},{"title":"Ricardo Ungureanu","slug":"ricardo-ungureanu","description":"Principal Security Engineer, Elastic","image":"ricardo-ungureanu.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(n,t)=\u003e()=\u003e(t||n((t={exports:{}}).exports,t),t.exports),j=(n,t)=\u003e{for(var r in t)i(n,r,{get:t[r],enumerable:!0})},u=(n,t,r,o)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of x(t))!p.call(n,a)\u0026\u0026a!==r\u0026\u0026i(n,a,{get:()=\u003et[a],enumerable:!(o=d(t,a))||o.enumerable});return n};var _=(n,t,r)=\u003e(r=n!=null?m(l(n)):{},u(t||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),M=n=\u003eu(i({},\"__esModule\",{value:!0}),n);var s=f((X,c)=\u003e{c.exports=_jsx_runtime});var E={};j(E,{default:()=\u003eD,frontmatter:()=\u003ey});var e=_(s()),y={title:\"Ricardo Ungureanu\",description:\"Principal Security Engineer, Elastic\",slug:\"ricardo-ungureanu\",image:\"ricardo-ungureanu.jpg\"};function g(n){return(0,e.jsx)(e.Fragment,{})}function C(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(g,n)})):g(n)}var D=C;return M(E);})();\n;return Component;"},"_id":"authors/ricardo-ungureanu.mdx","_raw":{"sourceFilePath":"authors/ricardo-ungureanu.mdx","sourceFileName":"ricardo-ungureanu.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/ricardo-ungureanu"},"type":"Author","imageUrl":"/assets/images/authors/ricardo-ungureanu.jpg","url":"/authors/ricardo-ungureanu"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},a=(t,n,e,i)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!l.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(i=d(n,r))||i.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?x(g(t)):{},a(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=\u003ea(s({},\"__esModule\",{value:!0}),t);var u=_((X,c)=\u003e{c.exports=_jsx_runtime});var D={};j(D,{default:()=\u003eC,frontmatter:()=\u003ew});var o=p(u()),w={title:\"Seth Goodwin\",description:\"Elastic\",slug:\"seth-goodwin\"};function m(t){return(0,o.jsx)(o.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(m,t)})):m(t)}var C=M;return h(D);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Andrew Pease","slug":"andrew-pease","description":"Elastic Security Labs Technical Lead, Elastic","image":"andrew-pease.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var s=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},i=(e,t,n,c)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let r of p(t))!g.call(e,r)\u0026\u0026r!==n\u0026\u0026s(e,r,{get:()=\u003et[r],enumerable:!(c=l(t,r))||c.enumerable});return e};var _=(e,t,n)=\u003e(n=e!=null?m(x(e)):{},i(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),w=e=\u003ei(s({},\"__esModule\",{value:!0}),e);var u=f((C,o)=\u003e{o.exports=_jsx_runtime});var h={};j(h,{default:()=\u003eb,frontmatter:()=\u003eL});var a=_(u()),L={title:\"Andrew Pease\",description:\"Elastic Security Labs Technical Lead, Elastic\",slug:\"andrew-pease\",image:\"andrew-pease.jpg\"};function d(e){return(0,a.jsx)(a.Fragment,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(d,e)})):d(e)}var b=M;return w(h);})();\n;return Component;"},"_id":"authors/andrew-pease.mdx","_raw":{"sourceFilePath":"authors/andrew-pease.mdx","sourceFileName":"andrew-pease.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/andrew-pease"},"type":"Author","imageUrl":"/assets/images/authors/andrew-pease.jpg","url":"/authors/andrew-pease"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"},{"title":"Attack pattern","slug":"attack-pattern","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,c)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(c=f(n,a))||c.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(_(t)):{},s(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(o({},\"__esModule\",{value:!0}),t);var i=j((b,u)=\u003e{u.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003ek});var r=d(i()),k={title:\"Attack pattern\",slug:\"attack-pattern\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"categories/attack-pattern.mdx","_raw":{"sourceFilePath":"categories/attack-pattern.mdx","sourceFileName":"attack-pattern.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/attack-pattern"},"type":"Category","url":"/categories/attack-pattern"},{"title":"Activity group","slug":"activity-group","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},c=(t,n,e,i)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let o of f(n))!_.call(t,o)\u0026\u0026o!==e\u0026\u0026a(t,o,{get:()=\u003en[o],enumerable:!(i=g(n,o))||i.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(p(t)):{},c(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),y=t=\u003ec(a({},\"__esModule\",{value:!0}),t);var u=j((X,s)=\u003e{s.exports=_jsx_runtime});var D={};l(D,{default:()=\u003eC,frontmatter:()=\u003eM});var r=d(u()),M={title:\"Activity group\",slug:\"activity-group\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function v(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var C=v;return y(D);})();\n;return Component;"},"_id":"categories/activity-group.mdx","_raw":{"sourceFilePath":"categories/activity-group.mdx","sourceFileName":"activity-group.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/activity-group"},"type":"Category","url":"/categories/activity-group"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"elastic-catches-dprk-passing-out-kandykorn"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>