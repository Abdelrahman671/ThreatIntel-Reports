<!DOCTYPE HTML>
<html lang="en">
    <head>
	<meta charset="UTF-8"/>

	
	









    <!-- OneTrust Cookies Consent Notice Start -->






    <script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" charset="UTF-8" data-domain-script="6373c986-7725-4c54-9731-2a91bdd43107"></script>


<script type="text/javascript">
    function OptanonWrapper() { }
</script>

<!-- OneTrust Cookies Consent Notice End -->


















	<title>Strong ARMing with MacOS: Adventures in Cross-Platform Emulation</title>

	<script type="application/ld+json">
	{"@context":"https://schema.org","@type":"NewsArticle","mainEntityOfPage":{"@type":"WebPage","@id":"https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation"},"headline":"Strong ARMing with MacOS: Adventures in Cross-Platform Emulation","image":["/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-350x350-ibb.png","/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-875x530-ibb.png"],"datePublished":"2021-05-18T08:01:00.000-07:00","author":{"@type":"Person","name":"The BlackBerry Research and Intelligence Team"},"publisher":{"@type":"Organization","name":"BlackBerry","logo":{"@type":"ImageObject","url":"https://blogs.blackberry.com/content/dam/blackberry-com/Images/logos/BlackBerry_Logo_Black_150.png"}}}
</script>


	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<meta name="description" content="BlackBerry is following up its release of the PE Tree Tool in 2020 by sharing this methodology report to inform security researchers and pen-testers on how to successfully emulate a MacOS ARM64 kernel under QEMU."/>
	<meta name="keywords" content="Cybersecurity"/>
	

	<meta name="author" content="blogs.blackberry.com"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>

	<link rel="icon" href="/etc.clientlibs/bbcom/clientlibs/clientlib-etc-legacy/resources/bbcom-aem-project/images/favicon.ico"/>
	<link rel="canonical" href="https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation"/>

	<meta property="og:url" content="https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation"/>
	<meta property="og:title" content="Strong ARMing with MacOS: Adventures in Cross-Platform Emulation"/>
	<meta property="og:description" content="BlackBerry is following up its release of the PE Tree Tool in 2020 by sharing this methodology report to inform security researchers and pen-testers on how to successfully emulate a MacOS ARM64 kernel under QEMU."/>
	<meta property="og:type" content="article"/>
	<meta property="og:image" content="https://blogs.blackberry.com/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-875x530-ibb.png"/>

	<meta name="twitter:card" content="summary_large_image"/>
	<meta name="twitter:site" content="@BlackBerry"/>
	<meta name="twitter:title" content="Strong ARMing with MacOS: Adventures in Cross-Platform Emulation"/>
	<meta name="twitter:description" content="BlackBerry is following up its release of the PE Tree Tool in 2020 by sharing this methodology report to inform security researchers and pen-testers on how to successfully emulate a MacOS ARM64 kernel under QEMU."/>
	<meta name="twitter:image" content="https://blogs.blackberry.com/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-875x530-ibb.png"/>

	

	
	
    
<link rel="stylesheet" href="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-site.min.54dd5587820b16101b4a5bc26ae87194.css" type="text/css">



	
    










	
		
<script>
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-TXGFP23');
</script>



<script async src="https://www.googletagmanager.com/gtag/js?id=AW-944900006"></script>

<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date()); gtag('config', 'AW-944900006');
</script>


		
	

	




<script src="https://kit.fontawesome.com/3c243f8233.js" crossorigin="anonymous"></script>


	
    
    

    
    
    
    


	
</head>
    <body class="page basicpage" data-enable-history="true">
        



	
		
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TXGFP23" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>


		
	

	


        
        
            



            

  
<!--
<sly data-sly-use.templatedContainer="com.day.cq.wcm.foundation.TemplatedContainer"
   data-sly-repeat.child=""
   data-sly-resource=""/>
-->

<header>
    




    
    
    
<!-- BEGIN DO NOT INDEX -->

    

<!-- skip to content: START -->
<a href='#' class='skipNav' tabindex="0">Skip Navigation</a>
<!-- skip to content: END-->
<!-- BEGIN DO NOT INDEX -->

  <nav class="blogs-navigationv2 bb-blogs-navbar navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="https://blogs.blackberry.com">
        <svg width="175px" height="30px" viewBox="0 0 175 30" version="1.1">
          <title>BlackBerry Logo</title>
          <g id="Creative" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
              <g id="21-product-page-Protect-02.15.22" transform="translate(-91.000000, -10.000000)" fill="#FFFFFF" fillRule="nonzero">
                  <g id="BB_White" transform="translate(91.000000, 10.000000)">
                      <path d="M9.18042011,2.14285967 C9.18042011,1.19318021 8.5959918,-1.17624431e-15 6.16086942,-1.17624431e-15 C5.16247216,-1.17624431e-15 2.4107723,-1.17624431e-15 2.4107723,-1.17624431e-15 L1.33931598,4.94318021 C1.33931598,4.94318021 3.36046941,4.94318021 5.25986363,4.94318021 C8.32813214,4.91883014 9.18042011,3.48214033 9.18042011,2.14285967 Z" id="Shape"></path>
                      <path d="M19.2861873,2.14285967 C19.2861873,1.19318021 18.701759,-1.17624431e-15 16.2666366,-1.17624431e-15 C15.2682393,-1.17624431e-15 12.5165395,-1.17624431e-15 12.5165395,-1.17624431e-15 L11.4450831,4.94318021 C11.4450831,4.94318021 13.4662366,4.94318021 15.3412807,4.94318021 C18.4338993,4.91883014 19.2861873,3.48214033 19.2861873,2.14285967 Z" id="Shape_1_"></path>
                      <path d="M7.84110413,9.54545936 C7.84110413,8.59578874 7.25667582,7.4025997 4.82155344,7.4025997 C3.82315617,7.4025997 1.07145632,7.4025997 1.07145632,7.4025997 L5.68518084e-15,12.3457799 C5.68518084e-15,12.3457799 2.02115343,12.3457799 3.89619757,12.3457799 C6.96445725,12.3457799 7.84110413,10.88474 7.84110413,9.54545936 Z" id="Shape_2_"></path>
                      <path d="M17.9468713,9.54545936 C17.9468713,8.59578874 17.362443,7.4025997 14.9273206,7.4025997 C13.9289233,7.4025997 11.1772235,7.4025997 11.1772235,7.4025997 L10.1057671,12.3457799 C10.1057671,12.3457799 12.1269206,12.3457799 14.0263148,12.3457799 C17.0702244,12.3457799 17.9468713,10.88474 17.9468713,9.54545936 Z" id="Shape_3_"></path>
                      <path d="M28.5153164,6.55032938 C28.5153164,5.60064992 27.930888,4.40746971 25.4957657,4.40746971 C24.4973684,4.40746971 21.7456774,4.40746971 21.7456774,4.40746971 L20.6742211,9.35064992 C20.6742211,9.35064992 22.6953745,9.35064992 24.5704186,9.35064992 C27.6386695,9.32629985 28.5153164,7.88961005 28.5153164,6.55032938 Z" id="Shape_4_"></path>
                      <path d="M27.0542412,14.2694801 C27.0542412,13.3198006 26.4698129,12.1266204 24.0346816,12.1266204 C23.0362844,12.1266204 20.2845934,12.1266204 20.2845934,12.1266204 L19.213137,17.0698006 C19.213137,17.0698006 21.2342905,17.0698006 23.1093346,17.0698006 C26.1775943,17.0698006 27.0542412,15.6087696 27.0542412,14.2694801 Z" id="Shape_5_"></path>
                      <path d="M16.4857961,17.2889601 C16.4857961,16.3392807 15.9013678,15.1461005 13.4662366,15.1461005 C12.4678393,15.1461005 9.71614827,15.1461005 9.71614827,15.1461005 L8.64469195,20.0892807 C8.64469195,20.0892807 10.6658454,20.0892807 12.5408895,20.0892807 C15.6091492,20.0649306 16.4857961,18.6282496 16.4857961,17.2889601 Z" id="Shape_6_"></path>
                      <path d="M83.7683052,18.75 C83.5978459,19.11526 82.7455491,20.7711005 80.6026453,20.7711005 C78.1188139,20.7711005 77.1447667,18.701291 77.1447667,17.191551 C77.1447667,14.6590813 78.8493515,12.3944712 81.3575329,12.3944712 C84.0605238,12.3944712 84.6936523,14.4155717 84.7667113,14.7808317 L88.7359591,14.7808317 C88.9794775,13.2954417 87.786262,8.74187154 81.5036422,8.74187154 C76.9012483,8.74187154 73.2242102,12.4188213 73.2242102,17.3133014 C73.2242102,21.331161 75.7323917,24.4236913 80.3834769,24.4236913 C86.1790775,24.4236913 87.7375619,19.8701212 87.9323713,18.7499912 L83.7683052,18.7499912 L83.7683052,18.75 Z" id="Shape_7_"></path>
                      <path d="M53.2805356,19.8457799 C53.2805356,19.6022703 53.3535858,19.1639601 53.5483953,18.2629897 C53.7432047,17.3376603 56.5435959,4.40746971 56.5435959,4.40746971 L52.8178577,4.40746971 L49.7252479,18.6769498 C49.6034887,19.2857193 49.5304385,19.87013 49.5304385,20.3814904 C49.5304385,23.4983708 51.9412108,24.4237002 53.889314,24.4237002 C54.5711514,24.4237002 55.22863,24.3019498 55.3747393,24.2775909 C55.4477895,23.961031 56.0322266,21.2824609 56.0565767,21.1607105 C55.9835265,21.1607105 55.5695487,21.2094107 55.0825295,21.2094107 C53.6945045,21.2094107 53.2805356,20.625 53.2805356,19.8457799 Z" id="Shape_8_"></path>
                      <polygon id="Shape_9_" points="106.220152 8.76623044 101.033339 8.76623044 94.3367415 14.7808405 96.6014133 4.38311963 92.8269661 4.38311963 88.5654909 24.1071403 92.3155881 24.1071403 93.3626943 19.3100606 95.6760575 17.4837696 98.8660763 24.1071403 103.054492 24.1071403 98.5251576 15.2435096"></polygon>
                      <path d="M32.7767827,18.0194801 C33.0933514,16.6071403 35.7232832,4.38311963 35.7232832,4.38311963 C35.7232832,4.38311963 40.2769681,4.38311963 42.8338497,4.38311963 C47.9963131,4.38311963 49.2625788,7.25649924 49.2625788,8.98538995 C49.2625788,12.8327903 45.6342409,13.8555199 45.1959219,13.9772703 C45.6098908,14.1233708 47.971963,15.0487002 47.971963,18.0681802 C47.971963,21.3555199 44.9524035,24.107459 40.2526181,24.107459 C40.2526181,24.107459 38.5723834,24.107459 38.1097143,24.107459 C34.1404576,24.1314904 32.0218951,21.4042201 32.7767827,18.0194801 Z M43.905306,17.7759705 C43.905306,16.8506411 43.2965277,15.681811 40.666587,15.681811 L37.2330585,15.681811 L36.2103112,20.4545406 L40.1065088,20.4545406 C42.5903401,20.4545406 43.905306,19.3100606 43.905306,17.7759705 Z M45.1715718,9.8133102 C45.1715718,8.86363075 44.4410342,8.0357105 42.6633904,8.0357105 L38.8645931,8.0357105 L38.0122963,12.0292201 L41.9815529,12.0292201 C44.0757654,12.0292201 45.1715718,10.9821403 45.1715718,9.8133102 Z" id="Shape_10_"></path>
                      <path d="M104.515568,18.0194801 C104.832136,16.6071403 107.462068,4.38311963 107.462068,4.38311963 C107.462068,4.38311963 112.015753,4.38311963 114.572626,4.38311963 C119.735089,4.38311963 121.001364,7.25649924 121.001364,8.98538995 C121.001364,12.8327903 117.373026,13.8555199 116.934707,13.9772703 C117.348667,14.1233708 119.710748,15.0487002 119.710748,18.0681802 C119.710748,21.3555199 116.666847,24.107459 111.991394,24.107459 C111.991394,24.107459 110.311159,24.107459 109.84849,24.107459 C105.879234,24.1314904 103.76068,21.4042201 104.515568,18.0194801 Z M115.644091,17.7759705 C115.644091,16.8506411 115.035304,15.681811 112.405372,15.681811 L108.947493,15.681811 L107.924737,20.4545406 L111.820935,20.4545406 C114.329125,20.4545406 115.644091,19.3100606 115.644091,17.7759705 Z M116.910348,9.8133102 C116.910348,8.86363075 116.17981,8.0357105 114.377825,8.0357105 L110.603378,8.0357105 L109.751081,12.0292201 L113.720347,12.0292201 C115.81455,12.0292201 116.910348,10.9821403 116.910348,9.8133102 Z" id="Shape_11_"></path>
                      <path d="M146.789339,8.76623044 C142.820083,8.76623044 140.092742,11.1282408 139.191745,15.5357105 C138.802126,17.4350606 137.365401,24.1071403 137.365401,24.1071403 L141.091139,24.1071403 C141.091139,24.1071403 142.454814,17.7516204 142.893133,15.75487 C143.45322,13.1493501 144.841236,12.2483796 146.69193,12.2483796 C147.300717,12.2483796 147.665986,12.3214298 147.860795,12.3457799 C147.958196,11.8100694 148.493915,9.44805023 148.615674,8.88798965 C148.226055,8.86363957 147.592918,8.76623044 146.789339,8.76623044 Z" id="Shape_12_"></path>
                      <path d="M159.451988,30 L171.968527,8.76623044 L167.950571,8.76623044 L162.20367,18.75 L160.864354,8.74188037 C160.864354,8.74188037 158.818851,8.74188037 156.554179,8.74188037 C151.610875,8.74188037 149.054002,11.0064904 148.153005,15.316551 C147.690327,17.4594107 146.253602,24.1071315 146.253602,24.1071315 L149.97934,24.1071315 C149.97934,24.1071315 151.343015,17.8003117 151.903085,15.2678508 C152.438822,12.8084314 154.265166,12.0535613 156.23761,12.4675303 L157.016848,8.83928067 C157.601285,12.2727209 159.378911,23.2792113 159.378911,23.2792113 L155.482714,30 L159.451988,30 L159.451988,30 Z" id="Shape_13_"></path>
                      <path d="M64.0437813,17.5811699 C64.871728,17.4594195 67.2581502,17.0941595 67.599069,17.0454594 C67.5260099,17.313319 67.4529597,17.7029291 67.3799095,18.0194889 C66.9415816,19.8701388 65.0665375,21.063319 62.972325,21.063319 C61.633009,21.063319 60.8537712,20.3571492 60.8537712,19.5048788 C60.8294212,18.7987002 61.4869085,17.9464298 64.0437813,17.5811699 Z M62.6314151,13.5876603 C62.7288242,13.4415598 63.6785213,11.9561699 66.0649435,11.9561699 C67.5503688,11.9561699 68.3052565,12.4918804 68.3052565,13.1493501 C68.3052565,14.0746706 66.8198312,14.3181802 64.2142406,14.6834402 C59.7579648,15.3165598 56.9332236,16.7045406 56.9332236,19.9188301 C56.9332236,22.2077903 58.8326178,24.4237002 62.193096,24.4237002 C64.9934872,24.4237002 66.4545624,22.7435096 66.5763216,22.5974003 C66.6006717,23.0113604 66.6493719,23.62013 66.6737308,24.1071403 C66.9902906,24.1071403 69.5715222,24.1071403 70.5212282,24.1071403 C70.399469,23.4496706 70.1072504,22.1590901 70.5699283,20.1136307 C70.8134379,19.0422009 71.4952754,15.9496706 71.8361941,14.24513 C72.4936815,11.0064904 70.7160376,8.74188037 66.1867116,8.74188037 C60.3424108,8.74188037 58.6621673,12.9301906 58.3943076,13.5876603 L62.6314151,13.5876603 Z" id="Shape_14_"></path>
                      <path d="M131.862019,19.5292201 C131.715918,19.8214298 130.814921,21.0876603 128.793759,21.0876603 C125.871617,21.0876603 125.214139,18.6038995 125.28718,17.9464298 C126.845665,17.9464298 135.831275,17.9464298 136.659213,17.9464298 C136.732272,17.6785702 136.975791,16.6558493 136.975791,15.6087696 C136.975791,12.00487 134.540668,8.71753912 129.621714,8.71753912 C125.11673,8.71753912 121.512742,12.4918892 121.512742,16.9967592 C121.512742,21.3311787 124.118324,24.423709 128.745059,24.423709 C134.443259,24.423709 135.977393,19.9675391 136.123494,19.5292289 C135.100738,19.5292201 131.862019,19.5292201 131.862019,19.5292201 Z M129.670406,12.1266204 C132.178587,12.1266204 133.128284,13.6607105 133.030884,14.8782408 C131.594159,14.8782408 127.308342,14.8782408 125.84725,14.8782408 C126.042068,14.0990295 127.235283,12.1266204 129.670406,12.1266204 Z" id="Shape_15_"></path>
                      <path d="M171.979978,19.5027334 C173.12535,19.5027334 174.087452,20.4108465 174.087452,21.6216668 C174.087452,22.8557689 173.10243,23.7406002 171.979978,23.7406002 C170.834615,23.7406002 169.849603,22.8324871 169.849603,21.6216668 C169.849603,20.4108465 170.834615,19.5027334 171.979978,19.5027334 Z M171.979978,19.8520043 C171.017877,19.8520043 170.26193,20.620409 170.26193,21.6216668 C170.26193,22.6462064 171.017877,23.4146111 171.979978,23.4146111 C172.942098,23.4146111 173.675125,22.6694882 173.675125,21.6216668 C173.675125,20.620409 172.919178,19.8520043 171.979978,19.8520043 Z M171.52183,22.8557689 L171.155316,22.8557689 L171.155316,20.4108465 L172.071613,20.4108465 C172.644299,20.4108465 172.919178,20.620409 172.919178,21.109397 C172.919178,21.5518126 172.644299,21.7380934 172.277768,21.7846569 L172.964991,22.8557689 L172.552655,22.8557689 L171.911246,21.7846569 L171.49891,21.7846569 L171.49891,22.8557689 L171.52183,22.8557689 Z M171.521821,21.4819585 L171.957076,21.4819585 C172.415225,21.4819585 172.552664,21.3422501 172.552664,21.0861152 C172.552664,20.8532621 172.438127,20.7135538 172.025792,20.7135538 L171.521821,20.7135538 L171.521821,21.4819585 L171.521821,21.4819585 Z" id="Shape_16_"></path>
                  </g>
              </g>
          </g>
      </svg>
      </a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/cybersecurity">Cybersecurity</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/automotive">Automotive & IOT</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/critical-event-management">Critical Communications</a>
          </li>
        </ul>


        <ul class="navbar-nav ml-auto">
          <li class="nav-item">

            <a class="nav-link open-search-btn" role="button">
              <svg aria-hidden="true" data-prefix="fa" data-icon="search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg="">
                <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z">
                </path>
              </svg>
            </a>
            <div id="searchOverlay" class="search-overlay">
              <span class="close-search-btn" title="Close Search">×</span>
              <div class="overlay-content">
                <form id="search-form">
                  <input id="search-form--input" description="Search" data-search-url="https://blogs.blackberry.com/en/search" type="text" placeholder="Search" name="search"/>
                  <button type="submit">
                    <svg aria-hidden="true" data-prefix="fa" data-icon="search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg="">
                      <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z">
                      </path>
                    </svg>
                  </button>
                </form>
              </div>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>



<!-- END DO NOT INDEX -->




<!-- END DO NOT INDEX -->

    
    
    <div class="hero">

      <div class="jumbotron mastheadDefault">
        <div class="hero-container narrower" style="background-image: url( \2f content\2f dam\2f blackberry-com\2fImages\2fsupport\2f bgs\2f bnr-blue-gradient-crop.jpg)">
          
          <div class="mask  "></div>

          <div class="container headings  l-align">
            <div class="col-lg-12">
          		




    
    
    <div class="blog-name-title">

  <div class="cmp-title ">
  
  
   <!-- <span class="highlighted-text-title blogs">INSIDE</span>
   <span class="normal-text-title">BlackBerry Blog</span> -->
   <span class="normal-text-title">BlackBerry Blog</span>
  
  
  
</div>
</div>



          	</div>
          </div>
      </div>
    </div>
</div>



</header><main>
    




    
    
    <div class="section">
  <section class="section     ">
    
    <div class="container">
        




    
    
    
<ol class="breadcrumb">
    <li class="breadcrumb-item ">
        <a href="/en.html">BlackBerry Blog</a>
    </li>

    <li class="breadcrumb-item active">
        Strong ARMing with MacOS: Adventures in Cross-Platform Emulation
    </li>
</ol>

    


      
    </div>
  </section>
    

</div>


    
    
    <div class="blogsection">
    <section class="section     ">
      
      <div class="container sectionPadding py-0">
           
      <div class="col-md-9 col-lg-9 col-sm-12">
          




    
    
    <div class="cmp cmp-title blog-title row">
  

<div class="col-md-12 col-lg-12 col-sm-12">
<h1>Strong ARMing with MacOS: Adventures in Cross-Platform Emulation</h1>
</div>



    
</div>


    
    
    <div class="categorydateauthor"><!--Pulling author bio from author page-->
<div class="categorydateauthor">
<span><a title="RESEARCH &amp; INTELLIGENCE" href="/en/category/research-and-intelligence">RESEARCH &amp; INTELLIGENCE</a> / </span><span class='publish-date'></span>05.18.21 / </span>

    <span class="author"><a href="/en/author/the-blackberry-research-and-intelligence-team">The BlackBerry Research and Intelligence Team</a></span>

</div></div>


    
    
    <div class="socialsharing">

<div class="socialSharing row">
	<ul class="socialSharing-icons">
		<li>
			<a href="https://x.com/intent/tweet?url=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation&text=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&via=BlackBerry" title="Share on X" target="_blank" class="x-share">
				<span class="sr-only sr-only-focusable">Share on X</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--tw" aria-hidden="true">
					<svg viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z"></path></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation" title="Share on Facebook" target="_blank" class="facebook-share">
				<span class="sr-only sr-only-focusable">Share on Facebook</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--fb" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264 512"><path d="M76.7 512V283H0v-91h76.7v-71.7C76.7 42.4 124.3 0 193.8 0c33.3 0 61.9 2.5 70.2 3.6V85h-48.2c-37.8 0-45.1 18-45.1 44.3V192H256l-11.7 91h-73.6v229"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.linkedin.com/shareArticle?mini=true&url=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation&title=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&summary=&source=blogs.blackberry.com" title="Share on LinkedIn" target="_blank" class="linkedin-share">
				<span class="sr-only sr-only-focusable">Share on LinkedIn</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--li" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448.1 512"><path d="M100.3 448H7.4V148.9h92.9V448zM53.8 108.1C24.1 108.1 0 83.5 0 53.8S24.1 0 53.8 0s53.8 24.1 53.8 53.8-24.1 54.3-53.8 54.3zM448 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448h-.1z"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="mailto:?subject=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&body=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation" title="Email" class="email-share">
				<span class="sr-only sr-only-focusable">Email</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--email" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"/></svg>
				</span>
			</a>
		</li>
	</ul>
</div>
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image.coreimg{.width}.png/1621338248366/emulating-macos-875x530-ibb.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-875x530-ibb.png" data-asset-id="01efcec0-ac0c-43fa-8f24-670d43956178" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/05/emulating-macos-875x530-ibb.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <h3><b>Summary:</b><br>
</h3>
<p>In a world where adversaries are becoming more sophisticated by the day, it is important that threat hunters can keep a competitive advantage and remain one step ahead of threat actors. Recent developments in Apple® hardware have made it even more difficult for security researchers to keep up, and the demand for ARM-targeted testing environments is increasing.</p>
<p>BlackBerry recognizes the importance of supporting the cybersecurity community in the fight against cyberthreats, and is therefore following up its release of the <a href="https://blogs.blackberry.com/en/2020/08/blackberry-open-source-pe-tree-tool-for-malware-reverse-engineers" target="_blank">PE Tree Tool</a> in 2020 by sharing this methodology report to inform security researchers and pen-testers on how to successfully emulate a MacOS ARM64 kernel under QEMU.</p>
<p>Pen-testers and researchers can use the virtualized environment of a stripped-down MacOS kernel for debugging and vulnerability discovery, and this illustrates the extent to which one can use emulation to manipulate and control the kernel to their desired ends, whether it be to find a critical bug or to patch an area of the kernel.</p>
<p>More importantly, this project was a successful experiment in cross-platform emulation that has the potential for future development.</p>
<h3><b>Introduction</b></h3>
<p>Demand for ARM-targeted testing environments is increasing. The first Apple silicon processors are appearing in the market in conjunction with the growing extent of ARM64 support on the most popular operating systems. This project was inspired by a series of recent developments in emulation software and Apple hardware as well as a race to be the first to coalesce them. iOS® kernel emulation on a MacOS host had already been attempted, accomplished, and published. Cross-platform virtualization like this is nothing new: ARM-based systems have been virtualizable on Intel-based host systems as early as 2009.</p>
<p>QEMU, the versatile and dynamic emulator responsible for bringing this practice into practicality, is popular among developers and pen-testers for cross-platform emulation. Even the Android™ emulator is based on QEMU. It was only a matter of time before XNU, Apple’s own Unix-derived kernel, joined the party.</p>
<h3><b>Background</b></h3>
<p>When emulating a kernel image, the first phase of the kernel boot stage is typically referred to as the 'bootstrap' phase. This is normally when the earliest kernel output appears and is the first visible output during an emulation session of the MacOS® ARM64e kernel. The MacOS 11.1 ARM64e kernel bootstrap process is shown below:</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell atom-one-dark-reasonable">
</br>Darwin Kernel Version 20.2.0: Wed Dec  2 20:40:22 PST 2020; root:xnu-7195.60.75~1/RELEASE_ARM64_T8020
pmap_startup() init/release time: 106420 microsec
pmap_startup() delayed init/release of 0 pages
vm_page_bootstrap: 383584 free pages, 115105 wired pages, (up to 0 of which are delayed free)
&quot;vm_compressor_mode&quot; is 4
oslog_init completed, 16 chunks, 8 io pages
standard timeslicing quantum is 10000 us
standard background quantum is 2500 us
WQ[wql_init]: init linktable with max:262144 elements (8388608 bytes)
WQ[wqp_init]: init prepost table with max:262144 elements (8388608 bytes)
mig_table_max_displ = 53 mach_kobj_count = 365
debug_log_init: Error!! gPanicBase is still not initialized
debug_log_init: Error!! gPanicBase is still not initialized
kdp_core zlib memory 0x8000
Serial requested, consistent debug disabled or debug boot arg not present, configuring debugging over serial
iBoot version:
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Fifty seconds, 5086 lines, and 113 kexts later:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# ls
.fseventsd      dev             mnt2            mnt5            mnt8            sbin
System          etc             mnt3            mnt6            mnt9            usr
bin             mnt1            mnt4            mnt7            private         var
bash-3.2# ps -ef
  UID   PID  PPID   C STIME   TTY           TIME CMD
    0     1     0   0 12:02AM ??         0:10.31 /sbin/launchd
    0     3     1   0 12:02AM ??         0:08.71 /bin/bash
    0     5     3   0 12:05AM ??         0:03.41 ps -ef
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>All of this is virtualized in a QEMU session, on a Linux® host, running an Intel® Core™ i5-7500 CPU @ 3.40GHz. You can see the full output on our GitHub page:</p>
<p><a href="https://github.com/cylance/macos-arm64-emulation/blob/main/macos-qemu.log" target="_blank">https://github.com/cylance/macos-arm64-emulation/blob/main/macos-qemu.log</a></p>
<h3><b>Getting the Files</b></h3>
<p>In June 2020, Apple announced the first beta releases of MacOS 11 (Big Sur) along with universal binary support for both x86-64 and ARM64. Does that mean we can expect to find both the x86-64 and ARM64 kernels in this release?</p>
<p>Yes!</p>
<p>The <a href="https://github.com/kholia/OSX-KVM" target="_blank">OSX-KVM</a> project provides a script to download the Big Sur installer package. From there, it was simply a matter of extracting one nested archive after the other to find the kernel image. This script does not have a good track record when it comes to reading Apple’s software update catalogs. Therefore, we’ve provided a link to the kernelcache, ramdisk, and device tree files below:</p>
<p><a href="https://mega.nz/file/GZwzGYKb#HscZIOg_K5JdUIvbLwwwW7_Ntc1z9c7QPOcEQRKwp8c" target="_blank">https://mega.nz/file/GZwzGYKb#HscZIOg_K5JdUIvbLwwwW7_Ntc1z9c7QPOcEQRKwp8c</a></p>
<p>Note that the next few steps are only necessary if these files are extracted from the installer package referenced below, instead of from the link above. Skip ahead to the Modifying QEMU section, or continue below if you are extracting the files from the installer package:</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br># Download Big Sur installer and extract the HFS file system
$ wget http://swcdn.apple.com/content/downloads/00/55/001-86606-A_9SF1TL01U7/5duug9lar1gypwunjfl96dza0upa854qgg/InstallAssistant.pkg
$ xar -xf InstallAssistant.pkg SharedSupport.dmg
$ 7z e SharedSupport.dmg 5.hfs
  </code></pre>


</div>


    
    
    <div class="text">    
    
    An archive inside the SFR software update directory with a hash-style name contains the files we need. We must also extract the Mac® software update archive that contains the APFS file system. This file system contains many ARM64e binaries that are not present on the ramdisk, including bash and ls:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br># Find and extract the SFR and Mac software update archives
$ 7z l -ba 5.hfs | grep &quot;.zip&quot;
2020-12-08 01:49:10 .....      1982210      1982464  Shared Support/UpdateBrain.zip
2020-12-08 01:52:41 .....    927135894    927137792  Shared Support/SFR/com_apple_MobileAsset_SFRSoftwareUpdate/aabc1798a59cc185ea5a87bfd4dec012f4b7feb1.zip
2020-12-08 01:52:27 .....  11256421743   2666487808  Shared Support/com_apple_MobileAsset_MacSoftwareUpdate/6c799f422b6d995ccc7f3fb669fe3246fd9f61aa.zip
$ 7z e -so 5.hfs &quot;Shared Support/SFR/com_apple_MobileAsset_SFRSoftwareUpdate/aabc1798a59cc185ea5a87bfd4dec012f4b7feb1.zip&quot; &gt; sfr.zip
$ 7z e -so 5.hfs &quot;Shared Support/com_apple_MobileAsset_MacSoftwareUpdate/6c799f422b6d995ccc7f3fb669fe3246fd9f61aa.zip&quot; &gt; mac.zip
  </code></pre>


</div>


    
    
    <div class="text">    
    
    It’s important to note that the long, hash-style archive file names will vary from version to version. The ramdisk, device tree and kernel files can be easily extracted the SFR archive:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br># Extract the ramdisk, device tree, and kernel from the SFR archive
$ 7z e sfr.zip AssetData/usr/standalone/update/ramdisk/arm64eSURamDisk.dmg
$ 7z e sfr.zip AssetData/boot/Firmware/all_flash/DeviceTree.j273aap.im4p
$ 7z e sfr.zip AssetData/boot/kernelcache.release.j273 
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>The ramdisk file functions as the operating system. The device tree file identifies the devices for loading the relevant drivers. The kernel, begetter of all running processes, boots the system.</p>
<h3><b>Decoding and Decompressing</b></h3>
<p>Now we’ve discovered the kernel image, ramdisk image, and device tree binary and can gather the requisite files into a single directory. Next, we move ahead to decode each of the three ASN1-encoded files with these scripts:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ SCRIPTS=~/source/xnu-qemu-arm64-tools/bootstrap_scripts
$ python $SCRIPTS/asn1kerneldecode.py kernelcache.release.j273 kernelcache.release.j273.asn1decoded
$ python $SCRIPTS/asn1rdskdecode.py arm64eSURamDisk.dmg arm64eSURamDisk.dmg.asn1decoded
$ python $SCRIPTS/asn1dtredecode.py DeviceTree.j273aap.im4p DeviceTree.j273aap.im4p.asn1decoded
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The decoded device tree file and kernel image were LZFSE compressed, unlike the LZSS-compressed iOS kernel. LZFSE features a -decode option for such files:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ lzfse -decode -i kernelcache.release.j273.asn1decoded -o kernelcache.release.j273.out
$ lzfse -decode -i DeviceTree.j273aap.im4p.asn1decoded -o DeviceTree.j273aap.im4p.out
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <h3><b>Getting Bash and Other Binaries</b></h3>
<p>The root file system on the ramdisk was missing many common command line tools, including a shell client binary. Even the ls program was completely absent. This brings us to the mac.zip archive extracted earlier. Below are the contents of the AssetData/Restore directory in this archive:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ 7z l -ba mac.zip | grep &quot;AssetData/Restore&quot;
2020-12-07 23:17:30 D....            0            0  AssetData/Restore
2020-12-07 23:17:30 .....      2871122      2841290  AssetData/Restore/AppleDiagnostics.dmg
2020-12-07 23:17:30 .....          328          328  AssetData/Restore/AppleDiagnostics.chunklist
2020-12-07 23:17:30 .....         2416         2325  AssetData/Restore/BaseSystem.chunklist
2020-12-07 23:16:50 .....    908228542    658466440  AssetData/Restore/022-10310-098.dmg
2020-12-07 23:17:32 .....    610378184    605691452  AssetData/Restore/BaseSystem.dmg
2020-12-07 23:15:22 .....         3424         3261  AssetData/Restore/022-10310-098.chunklist

  </code></pre>


</div>


    
    
    <div class="text">    
    
    BaseSystem.dmg is for x86_64 installations only. 022-10310-098.dmg is for ARM64e installations only. After extracting the ARM64e installer and examining the contents:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ 7z e mac.zip AssetData/Restore/022-10310-098.dmg
$ 7z l -ba 022-10310-098.dmg
                    .....          512          512  0 - MBR
                    .....          512          512  1 - Primary GPT Header
                    .....        16384        16384  2 - Primary GPT Table
                    .....    926695424    908185600  3 - Apple_APFS
                    .....        16384        16384  4 - Backup GPT Table
                    .....          512          512  5 - Backup GPT Header
3 - Apple_APFS is the file system and contains the arm64e Mach-O binaries we need. We extracted and mounted with apfs-fuse:
$ 7z e 022-10310-098.dmg &quot;3 - Apple_APFS&quot;
$ mkdir apfs
$ apfs-fuse -o allow_other &quot;3 - Apple_APFS&quot; apfs
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Discovering a bash file within, we check the file type:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ find apfs -type f -name bash
apfs/root/bin/bash
$ file apfs/root/bin/bash
apfs/root/bin/bash: Mach-O 64-bit arm64 executable, flags: &lt; NOUNDEFS|DYLDLINK|TWOLEVEL|PIE &gt;
  </code></pre>


</div>


    
    
    <div class="text">    
    
    It turns out all of the Mach-O binaries in this directory were purely ARM64e executables, as well as those in the /sbin, /usr/bin, and /usr/sbin directories. To fit these binaries into the original ramdisk file, the ramdisk had to be resized. Hdiutil is the only tool for the job, but no port of hdiutil existed outside of MacOS. This means the ramdisk needed to be resized in a MacOS system:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br># cp arm64eSURamDisk.dmg.asn1decoded arm64eSURamDisk.dmg.out
# hdiutil resize -size 1.5G -imagekey diskimage-class=CRawDiskImage arm64eSURamDisk.dmg.out
  </code></pre>


</div>


    
    
    <div class="text">    
    
    This was the only time throughout the entire project that access to a MacOS system was required. Fortunately, this can be done in a MacOS virtual machine (VM) that can be created with OSX-KVM. We mounted the ramdisk, cleared out its /System/Library/LaunchDaemons directory and transferred the binaries into the ramdisk file system:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ mkdir ramdisk
$ sudo mount -t hfsplus -o force,rw arm64eSURamDisk.dmg.out ramdisk
$ sudo rm -rf ramdisk/System/Library/LaunchDaemons/*
$ sudo cp apfs/root/bin/* ramdisk/bin/
$ sudo cp apfs/root/sbin/* ramdisk/sbin/
$ sudo cp apfs/root/usr/bin/* ramdisk/usr/bin/
$ sudo cp apfs/root/usr/sbin/* ramdisk/usr/sbin/
  </code></pre>


</div>


    
    
    <div class="text">    
    
    We then created a new file at ramdisk/System/Library/LaunchDaemons/com.apple.bash.plist:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ sudo touch ramdisk/System/Library/LaunchDaemons/com.apple.bash.plist
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <span style="font-size: 12.0pt; line-height: 107.0%;">Afterwards we copied the following code into it:</span><br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>&lt; ?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;? &gt;
&lt; !DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;https://www.apple.com/DTDs/PropertyList-1.0.dtd&quot; &gt;
&lt; plist version=&quot;1.0&quot; &gt;
&lt; dict &gt;
        &lt; key &gt;Label&lt; /key &gt;
        &lt; string &gt;com.apple.bash&lt; /string &gt;
        &lt; key &gt;Umask&lt; /key &gt;
        &lt; integer &gt;0&lt; /integer &gt;
        &lt; key &gt;RunAtLoad&lt; /key &gt;
        &lt; true/ &gt;
        &lt; key &gt;ProgramArguments&lt; /key &gt;
        &lt; array &gt;
                &lt; string &gt;/bin/bash&lt; /string &gt;
        &lt; /array &gt;
        &lt; key &gt;StandardInPath&lt; /key &gt;
        &lt; string &gt;/dev/console&lt; /string &gt;
        &lt; key &gt;StandardOutPath&lt; /key &gt;
        &lt; string &gt;/dev/console&lt; /string &gt;
        &lt; key &gt;StandardErrorPath&lt; /key &gt;
        &lt; string &gt;/dev/console&lt; /string &gt;
        &lt; key &gt;POSIXSpawnType&lt; /key &gt;
        &lt; string &gt;Interactive&lt; /string &gt;
        &lt; key &gt;EnablePressuredExit&lt; /key &gt;
        &lt; false/ &gt;
        &lt; key &gt;UserName&lt; /key &gt;
        &lt; string &gt;root&lt; /string &gt;
&lt; /dict &gt;
&lt; /plis t&gt;
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Finally, we unmounted the file system and ramdisk:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ sudo umount apfs ramdisk

  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Then it was time to begin testing.</p>
<h3><b>Modifying QEMU</b></h3>
<p>Since the kernelcache binary already contained all the necessary kexts, it was not necessary to create a kext collection. Thanks to the folks at <a href="https://alephsecurity.com/2019/06/17/xnu-qemu-arm64-1/" target="_blank">Aleph Research</a> for providing a modified version of QEMU that supports Apple’s XNU kernel. With access to this source, we managed to add support for MacOS on top of the iOS support already implemented.</p>
<h3><b>Building QEMU</b></h3>
<p>We skimmed through the source files in xnu-qemu-arm64 and found two files that specifically targeted the iOS kernel used by the iPhone® 6s Plus:<b> include/hw/arm/n66_iphone6plus.h</b> and<b> hw/arm/n66_iphone6splus.c.</b> These files target a very specific iOS kernel: N66, build 16B92. The definitions and configurations in these files would likely be incompatible with the kernel we were using (J273, build 20C69), let alone any macOS kernel. To add additional support for the MacOS kernel, we:</p>
<ul>
<li>Copied these files;</li>
<li>Renamed the variables, functions, and preprocessor directives to match the names of the MacOS kernel (J273), kernel version (20C69), and chipset (A21Z); and<br>
</li>
<li>Updated the filenames in the QEMU command line:<br>
<br>
</li>
</ul>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>cp hw/arm/n66_iphone6splus.c hw/arm/j273_macos11.c
cp include/hw/arm/n66_iphone6splus.h include/hw/arm/j273_macos11.h
sed -i 's/N66/J273/g' hw/arm/j273_macos11.c include/hw/arm/j273_macos11.h
sed -i 's/n66/j273/g' hw/arm/j273_macos11.c include/hw/arm/j273_macos11.h
sed -i 's/16B92/20C69/g' hw/arm/j273_macos11.c include/hw/arm/j273_macos11.h
sed -i 's/S8000/A12Z/g' hw/arm/j273_macos11.c include/hw/arm/j273_macos11.h

  </code></pre>


</div>


    
    
    <div class="text">    
    
    As in the original xnu-qemu-arm64, we included the generated object files in hw/arm/Makefile.objs:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>sed -i &quot;s/obj-y += boot.o/obj-y += boot.o \
xnu_fb_cfg.o \
xnu_trampoline_hook.o \
xnu_pagetable.o xnu_cpacr.o \
xnu_dtb.o \
xnu_file_mmio_dev.o \
xnu_mem.o \
xnu.o \
n66_iphone6splus.o \
j273_macos11.o \
guest-services.o \
guest-socket.o \
guest-fds.o \
guest-file.o/g&quot; hw/arm/Makefile.objs
  </code></pre>


</div>


    
    
    <div class="text">    
    
    After this, we began the QEMU build. Unfortunately, and unsurprisingly, the compiler produced an error:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ make -j6
... (truncated output)
scsi/qemu-pr-helper.c: In function ‘multipath_pr_out’:
scsi/qemu-pr-helper.c:523:32: error: array subscript  is outside array bounds of ‘struct transportid *[]’ [-Werror=array-bounds]
  523 |             paramp.trnptid_list[paramp.num_transportid++] = id;
      |             ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
... (truncated output)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    But what if the linker doesn’t even need this qemu-pr-helper.c module or any other potentially unbuildable modules? Let’s run make again with the -k flag and CFLAGS=&quot;-Wno-error&quot;:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ make -j6 -k CFLAGS=&quot;-Wno-error&quot;
... (snip)
$ ls ./aarch64-softmmu/qemu-system-aarch64
./aarch64-softmmu/qemu-system-aarch64
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>This appears to have succeeded. However, we are not out of the woods yet.</p>
<h3><b>Switch to QEMU 5.1.0</b></h3>
<p>QEMU 5.1.0 supports the LDAPR instruction. QEMU 4.2.0 does not. The official ARM documentation states the following about this instruction:</p>
<p><i>This instruction is supported in architectures ARMv8.3-A and later. It is optionally supported in ARMv8.2-A with the RCpc extension</i>.</p>
<p>Xnu-qemu-arm64 is based on 4.2.0. QEMU 4.2.0 has very limited support of ARMv8.3 and no support for the LDAPR instruction. The immediate task ahead was to move all the xnu-related source files over to a freshly downloaded source of QEMU 5.1.0. Below is a Git diff showing the files added to the official QEMU 5.1.0 source from xnu-qemu-arm64:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ git diff --no-index --name-only --diff-filter=A qemu-5.1.0 xnu-qemu-arm64-5.1.0
xnu-qemu-arm64-5.1.0/hw/arm/guest-fds.c
xnu-qemu-arm64-5.1.0/hw/arm/guest-file.c
xnu-qemu-arm64-5.1.0/hw/arm/guest-services.c
xnu-qemu-arm64-5.1.0/hw/arm/guest-socket.c
xnu-qemu-arm64-5.1.0/hw/arm/j273_macos11.c
xnu-qemu-arm64-5.1.0/hw/arm/n66_iphone6splus.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_cpacr.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_dtb.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_fb_cfg.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_file_mmio_dev.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_mem.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_pagetable.c
xnu-qemu-arm64-5.1.0/hw/arm/xnu_trampoline_hook.c
xnu-qemu-arm64-5.1.0/hw/display/xnu_ramfb.c
xnu-qemu-arm64-5.1.0/include/hw/arm/guest-services/fds.h
xnu-qemu-arm64-5.1.0/include/hw/arm/guest-services/file.h
xnu-qemu-arm64-5.1.0/include/hw/arm/guest-services/general.h
xnu-qemu-arm64-5.1.0/include/hw/arm/guest-services/socket.h
xnu-qemu-arm64-5.1.0/include/hw/arm/j273_macos11.h
xnu-qemu-arm64-5.1.0/include/hw/arm/n66_iphone6splus.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_cpacr.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_dtb.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_fb_cfg.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_file_mmio_dev.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_mem.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_pagetable.h
xnu-qemu-arm64-5.1.0/include/hw/arm/xnu_trampoline_hook.h
xnu-qemu-arm64-5.1.0/include/hw/display/xnu_ramfb.h
  </code></pre>


</div>


    
    
    <div class="text">    
    
    In addition to the following modified files in the official source:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ git diff --no-index --name-only --diff-filter=M qemu-5.1.0 xnu-qemu-arm64-5.1.0
xnu-qemu-arm64-5.1.0/hw/arm/Makefile.objs
xnu-qemu-arm64-5.1.0/target/arm/helper.c

  </code></pre>


</div>


    
    
    <div class="text">    
    
    One particular function proved problematic:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>void allocate_ram(MemoryRegion *top, const char *name, hwaddr addr,
                  hwaddr size)
{
        MemoryRegion *sec = g_new(MemoryRegion, 1);
        memory_region_init_ram(sec, NULL, name, size, &amp;error_fatal);
        memory_region_add_subregion(top, addr, sec);
}
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Due to changes in the source from QEMU 4.2.0 to 5.1.0, <b>memory_region_allocate_system_memory</b> had to be changed to <b>memory_region_init_ram</b>. It takes the same arguments in the same order plus one extra (&amp;error_fatal). The full Git diff file can be downloaded below:</p>
<p><a href="https://github.com/cylance/macos-arm64-emulation/blob/main/xnu-qemu-arm64-5.1.0.diff" target="_blank">https://github.com/cylance/macos-arm64-emulation/blob/main/xnu-qemu-arm64-5.1.0.diff</a></p>
<p>To apply the diff and build the modified QEMU source:</p>
<ul>
<li>Download the source for QEMU 5.1.0 to the same directory as the Git diff file</li>
<li>Extract it</li>
<li>Rename it to xnu-qemu-arm64-5.1.0</li>
<li>Apply the Git diff:</li>
</ul>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ wget https://download.qemu.org/qemu-5.1.0.tar.xz
$ tar xf qemu-5.1.0.tar.xz
$ mv qemu-5.1.0.tar.xz xnu-qemu-arm64-5.1.0
$ git apply xnu-qemu-arm64-5.1.0.diff
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Configure the source and build it per the instructions provided by Aleph Research:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ cd xnu-qemu-arm64-5.1.0
$ ./configure --target-list=aarch64-softmmu --disable-capstone --disable-pie --disable-slirp
$ make -j6
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>No bypasses or build flags are necessary.</p>
<h3><b>QEMU Dry Run</b></h3>
<p>The next thing to determine is: will it run? The run.sh script below has the updated QEMU command line, where we enabled remote kernel debugging with the -S -s option:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ cat run.sh
~/source/xnu-qemu-arm64-5.1.0/aarch64-softmmu/qemu-system-aarch64 \
-M macos11-j273-a12z,\
kernel-filename=kernelcache.release.j273.out,\
dtb-filename=Firmware/all_flash/DeviceTree.j273aap.im4p.out,\
ramdisk-filename=arm64eSURamDisk.dmg.out,\
kern-cmd-args=&quot;kextlog=0xfff cpus=1 rd=md0 serial=2 -noprogress&quot;,\
xnu-ramfb=off \
-cpu max \
-m 6G \
-serial mon:stdio \
-nographic \
-S -s
$ ./run.sh
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Attaching the remote debugger on the same host:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ aarch64-linux-gnu-gdb -q -ex &quot;target remote:1234&quot;
Remote debugging using :1234
warning: No executable has been specified and target does not support
determining executable automatically.  Try using the &quot;file&quot; command.
0x0000000047ac4580 in ?? ()
(gdb)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    0x47ac4580 is the entry point to our MacOS 11 Big Sur ARM64e kernel image. On entry, addresses seen in QEMU will be physical addresses. Since this is an initial dry run, we let it loose:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>$ ./run.sh
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Or, in this case, we let it spin around endlessly on the same three instructions:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>0x479f4388      mrs     x0, s3_4_c15_c0_4 ; APCTL_EL1
│
0x479f438c      and     x1, x0, #0x2 
│
0x479f4390      cbz     x1, 0x479f4388 ; infinite loop
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Bit 1 (#0x2) is never set in the system coprocessor register s3_4_c15_c0_4, so it never breaks the loop. This is an Apple-specific hardware register. Apple registers are unrecognized by the official QEMU branch, but xnu-qemu-arm64 added several Apple registers to boot the iOS kernel, including s3_4_c15_c0_4. This register is also known as APCTL_EL1/MIGSTS.</p>
<h3><b>Patching the Kernel</b></h3>
<p>That dry run barely got us on our feet. Not easily discouraged, we began skimming the QEMU source files for clues. After looking at the patching function we disabled, we could find nothing directly addressing the elusive “APCTL_EL1” register. The infinite loop above does show up in the XNU source in xnu-6153.141.1/osfmk/arm64/start.s:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>#ifdef HAS_APPLE_PAC
#ifdef __APSTS_SUPPORTED__
... (snip)
#else
mrs		x0, ARM64_REG_APCTL_EL1
and		x1, x0, #(APCTL_EL1_MKEYVld)
cbz		x1, 1b 				// Poll APCTL_EL1.MKEYVld
... (snip)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>It is polling a flag by the name of MKEYVld.</p>
<h3><b>MKEYVld</b></h3>
<p>What is the MKEYVld flag? Not many clues are in the XNU source. Perhaps a flag indicating some kind of validation status (MKEYVld = MAC key validated?). Most likely the kernel is waiting for it to be set by some other piece of hardware. We can force set this flag ourselves by adding to the following patch already provided by Aleph Research in our copied hw/arm/j273_macos11.c:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>static uint32_t g_set_cpacr_and_branch_inst[] = {
    //  91400c21       add x1, x1, 3, lsl 12    # x1 = x1 + 0x3000
    //  d378dc21       lsl x1, x1, 8            # x1 = x1 * 0x100 (x1 = 0x300000)
    //  d5181041       msr cpacr_el1, x1        # cpacr_el1 = x1 (enable FP)
    //  d2800041       mov x1, #2               # MKEYVld
    //  d51cf081       mov apctl_el1, x1
    //  aa1f03e1       mov x1, xzr              # x1 = 0
    //  14000eb5       b 0x1fc0                 # branch to regular start
    0x91400c21, 0xd378dc21, 0xd5181041,
    0xd2800041, 0xd51cf081, 0xaa1f03e1,
    0x14000eb5
};
  </code></pre>


</div>


    
    
    <div class="text">    
    
    We introduced two more instructions that set the MKEYVld flag (bit 1) in APCTL_EL1:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>    //  d2800041       mov x1, #2               # MKEYVld
    //  d51cf081       mov apctl_el1, x1
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The presence of several fixed offsets in xnu-qemu-arm64/hw/arm/n66_iphone6splus.c shows that there were 11 places in the iOS kernel that required patching:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>#define INITIAL_BRANCH_VADDR_16B92 (0xfffffff0070a5098)
#define BZERO_COND_BRANCH_VADDR_16B92 (0xfffffff0070996d8)
#define SMC_INST_VADDR_16B92 (0xfffffff0070a7d3c)
#define SLIDE_SET_INST_VADDR_16B92 (0xfffffff00748ef30)
#define NOTIFY_KERNEL_TASK_PTR_16B92 (0xfffffff0070f4d90)
#define CORE_TRUST_CHECK_16B92 (0xfffffff0061e136c)
#define TFP0_TASK_FOR_PID_16B92 (0xfffffff0074a27bc)
#define TFP0_CNVRT_PORT_TO_TASK_16B92 (0xfffffff0070d7cb8)
#define TFP0_PORT_NAME_TO_TASK_16B92 (0xfffffff0070d82d8)
#define TFP0_KERNEL_TASK_CMP_1_16B92 (0xfffffff0070d7b04)
#define TFP0_KERNEL_TASK_CMP_2_16B92 (0xfffffff0070d810c)

  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>There was no way these hard-coded offsets would be compatible with the MacOS kernel image. This is when we realized we would need to tear the MacOS kernel apart in a disassembler to find the offsets.</p>
<h3><b>IDA</b></h3>
<p>Completing this project would have been impossible without a disassembler. IDA 7.5 was the primary candidate, chiefly because of its support for ARM64e binaries and the latest A64 instruction set. For instance, earlier versions of IDA (namely 7.0) do not recognize the pointer authentication code for instruction key B (PACIBSP) instruction, which appears at the start of nearly every function in the MacOS ARM64e kernel:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_1282251390.coreimg{.width}.png/1621338248544/emulating-macos-fig1.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig1.png" data-asset-id="15d5764b-02e6-443f-a38c-af71e426c039" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig1.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 1.</i></p>
<p>Moreover, the kernel image used in this project contained no symbols. Functions had to be manually named, one by one, throughout the two-month testing and research period. ASCII strings offered the most reliable clues. The open-source XNU kernel was crucial in the struggle to identify the culprit of a crash or freeze. A total of 122645 functions have been defined in the IDA project so far. On initial analysis, however, IDA failed to define nearly every single function in the kernel binary. A script was needed to rectify this:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>import idc
import struct
import idautils
pacibsp = &quot;7F 23 03 D5&quot; # PACIBSP
matches = []
ea = idc.find_binary(0, 1, pacibsp)
while ea != idc.BADADDR:
    matches.append(ea)
    ea = idc.find_binary(ea + 4, 1, pacibsp)
# Move backwards to avoid nesting functions
for matchea in reversed(matches):
    if not idc.get_func_name(matchea):
        idc.add_func(matchea)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The kernel image, kernelcache.release.j273.out, is ~83MB. While the script only took around 10 minutes to execute, the resulting mass of new functions and cross-references took over an hour to finish generating. After weeks of research and testing, all patches were written, and offsets defined:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>#define INITIAL_BRANCH_VADDR_20C69 (0xfffffe0007ac4580)
#define BZERO_COND_BRANCH_VADDR_20C69 (0xfffffe0007ab8a3c)
#define SLIDE_SET_INST_VADDR_20C69 (0xfffffe000806b438)
#define CORE_TRUST_CHECK_20C69 (0xfffffe0008cb6538)
#define DISABLE_IMGPF_NOJOP_20C69 (0xfffffe000806b234)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <h3><b>MSR Instructions</b></h3>
<p>QEMU is not equipped to emulate ARM-based Apple systems. Over 110 of Apple’s model-specific hardware registers (MSR), in addition to hundreds of others, are currently unrecognized by QEMU. The Aleph Research team added support for 12 Apple-specific registers required for the iOS kernel to boot. To reach the goal of fully booting the MacOS ARM64 kernel, 24 more hardware registers needed support. But which registers would we need to add?</p>
<h3><b>Finding the Necessary Registers</b></h3>
<p>Getting to that bash prompt after two grueling months of research and testing was anything but a straightforward process. Unsupported MSR registers tended to pop up intermittently as we diagnosed and fixed one crash after another. We typically followed a “panic, crash and patch” strategy, adding register support for individual MSR’s on an ad hoc basis. The list of definitions below from hw/arm/j273_macos11.c are the result:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>    J273_CPREG_DEF(ARM64_REG_EHID1, 3, 0, 15, 3, 1, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_EHID10, 3, 0, 15, 10, 1, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_EHID4, 3, 0, 15, 4, 1, PL1_RW),
    // EL2 registers
    J273_CPREG_DEF(ARM64_REG_MIGSTS_EL1, 3, 4, 15, 0, 4, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_KERNELKEYLO_EL1, 3, 4, 15, 1, 0, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_KERNELKEYHI_EL1, 3, 4, 15, 1, 1, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_VMSA_LOCK_EL1, 3, 4, 15, 1, 2, PL1_RW),
    J273_CPREG_DEF(APRR_EL0, 3, 4, 15, 2, 0, PL1_RW),
    J273_CPREG_DEF(APRR_EL1, 3, 4, 15, 2, 1, PL1_RW),
    J273_CPREG_DEF(CTRR_LOCK, 3, 4, 15, 2, 2, PL1_RW),
    J273_CPREG_DEF(CTRR_A_LWR_EL1, 3, 4, 15, 2, 3, PL1_RW),
    J273_CPREG_DEF(CTRR_A_UPR_EL1, 3, 4, 15, 2, 4, PL1_RW),
    J273_CPREG_DEF(CTRR_CTL_EL1, 3, 4, 15, 2, 5, PL1_RW),
    J273_CPREG_DEF(APRR_MASK_EN_EL1, 3, 4, 15, 2, 6, PL1_RW),
    J273_CPREG_DEF(APRR_MASK_EL0, 3, 4, 15, 2, 7, PL1_RW),
    J273_CPREG_DEF(ACC_CTRR_A_LWR_EL2, 3, 4, 15, 11, 0, PL1_RW),
    J273_CPREG_DEF(ACC_CTRR_A_UPR_EL2, 3, 4, 15, 11, 1, PL1_RW),
    J273_CPREG_DEF(ACC_CTRR_CTL_EL2, 3, 4, 15, 11, 4, PL1_RW),
    J273_CPREG_DEF(ACC_CTRR_LOCK_EL2, 3, 4, 15, 11, 5, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_CYC_CFG, 3, 5, 15, 4, 0, PL1_RW),
    J273_CPREG_DEF(ARM64_REG_CYC_OVRD, 3, 5, 15, 5, 0, PL1_RW),
    J273_CPREG_DEF(IPI_SR, 3, 5, 15, 1, 1, PL1_RW),
    J273_CPREG_DEF(UPMCR0, 3, 7, 15, 0, 4, PL1_RW),
    J273_CPREG_DEF(UPMPCM, 3, 7, 15, 5, 4, PL1_RW),
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Unrecognized system registers typically appear as s#_#_c#_c#_# in various debuggers, where # corresponds to the arguments in each of the definitions above. For example, ARM64_REG_EHID1 or APRR_EL0 are parsed as s3_0_c15_c3_1 and s3_4_c15_c2_0, respectively. The last argument PL1_RW means “exception level 1 read/write”, which specifies the privilege level of the given registers. This indicates that the register is accessible in exception level 1 (EL1). Yet the level 2 (EL2) registers are marked with PL1_RW. This is because the following line in the function j273_cpu_setup prohibits EL2 registers:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>object_property_set_bool(cpuobj, &quot;has_el2&quot;, false, NULL);
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Setting this to true proved problematic, as QEMU then became unable to switch from physical to virtual addressing early in the boot process. The fix involved forcing QEMU to treat these registers as EL1 registers in define_one_arm_cp_reg_with_opaque (target/arm/helper.c):<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>        case 4:
        case 5:
            /* min_EL EL2 */
            mask = PL1_RW; // changed from mask = PL2_RW
            break;
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>We were initially apprehensive of this fix, as modifying any official QEMU source files to bypass errors may prove to be a dangerous endeavor. Fortunately, no calamities arose, and eventually all MSR registers were accounted for.</p>
<h3><b>Device Tree</b></h3>
<p>The device tree (DeviceTree.j273aap.im4p.out) was responsible for over half of the panics during testing. Several properties and devices were either absent from the tree entirely, usually causing a crash, or needed to be manually adjusted to prevent later issues. We have written a program that can apply the necessary changes to a device tree file using a diff-style file:</p>
<p><a href="https://github.com/cylance/macos-arm64-emulation/tree/main/dtetool" target="_blank">https://github.com/cylance/macos-arm64-emulation/tree/main/dtetool</a></p>
<p>To create a compatible device tree, back up the device tree file and apply the changes specified in dtediff_20C69 with the dtetool program:</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="apache androidstudio">
</br>cp DeviceTree.j273aap.im4p.out DeviceTree.j273aap.im4p.out.backup
./dtetool DeviceTree.j273aap.im4p.out.backup -d dtediff_20C69 -o DeviceTree.j273aap.im4p.out

  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>The following section provides a more detailed description of each modification.</p>
<h3><b>Device Tree Modifications</b></h3>
<p>The following property is changed to “running” to avoid an infinite loop in pe_identify_machine:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>device-tree/cpus/cpu0/state                                 8  running
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The first element in arm-io/ranges is changed to 0x100000000:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>device-tree/arm-io/ranges                                   8  0x100000000
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The following node is removed to ignore dockchannel-uart in order to use the default uart0 in serial_init:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>device-tree/dockchannel-uart
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The following properties are added to the “chosen” node to avoid the panics at the end of arm_init:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>device-tree/chosen/dram-base                                8  0
device-tree/chosen/dram-size                                8  0
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The following properties are added to the lock-regs node to avoid the panic in subroutine 0xfffffe0007b2af00:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>device-tree/chosen/lock-regs/amcc/aperture-count 4 0 d
device-tree/chosen/lock-regs/amcc/aperture-size 4 0 d
device-tree/chosen/lock-regs/amcc/plane-count 4 0 d
device-tree/chosen/lock-regs/amcc/plane-stride 4 0 d
device-tree/chosen/lock-regs/amcc/aperture-phys-addr 0
device-tree/chosen/lock-regs/amcc/cache-status 4 0 d
device-tree/chosen/lock-regs/amcc/cache-status-reg-offset 4 0 d
device-tree/chosen/lock-regs/amcc/cache-status-reg-mask 4 0 d
device-tree/chosen/lock-regs/amcc/cache-status-reg-value 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/page-size-shift 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lower-limit 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lower-limit-reg-offset 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lower-limit-reg-mask 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/upper-limit 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/upper-limit-reg-offset 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/upper-limit-reg-mask 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lock 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lock-reg-offset 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lock-reg-mask 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/lock-reg-value 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/enable 4 0 d
device-tree/chosen/lock-regs/amcc/amcc-ctrr-a/write-disable 4 0 d
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>One final device tree property is modified: the nvram.</p>
<h3><b>NVRAM</b></h3>
<p>No external NVRAM file is necessary, as the device tree file can house all NVRAM data in a property called nvram-proxy-data. By default, this property is completely empty, which led to several problems later (i.e. panics), which were related to null pointers. Crafting and configuring the NVRAM to the kernel’s liking was a time-consuming task, albeit with a fairly simple outcome. Several issues cropped up in succession, and additional changes had to be made.</p>
<h3><b>Null Pointers</b></h3>
<p>The first of the NVRAM-related issues happened in IODTNVRAM::init, where a null pointer reference to a lock variable caused a panic. This lock variable was supposed to have been initialized in IODTNVRAM::initNVRAMImage, but this function was never called. We discovered that the device-tree/chosen/nvram-total-size property in the device tree file was zero. Another panic occurred due to a null pointer reference in the IODTNVRAM::initOFVariables function. Apparently the nvram partition dictionary was not being set due to missing partition information in the device tree’s nvram data.</p>
<h3><b>Nvram-Proxy-Data</b></h3>
<p>The solution to this problem was to tailor the device-tree/chosen/nvram-proxy-data and device-tree/chosen/nvram-total-size properties to the kernel’s needs. Clues as to what format this data must be in were given in IODTNVRAM::initNVRAMImage:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>void
IODTNVRAM::initNVRAMImage(void)
{
// ... (snip)
// Look through the partitions to find the OF, MacOS partitions.
while (currentOffset &lt; kIODTNVRAMImageSize) {
currentLength = ((UInt16 *)(_nvramImage + currentOffset))[1] * 16;
if (currentLength &lt; 16) {
break;
}
partitionOffset = currentOffset + 16;
partitionLength = currentLength - 16;
if ((partitionOffset + partitionLength) &gt; kIODTNVRAMImageSize) {
break;
}
if (strncmp((const char *)_nvramImage + currentOffset + 4,
    kIODTNVRAMOFPartitionName, 12) == 0) {
_ofPartitionOffset = partitionOffset;
_ofPartitionSize = partitionLength;
}
// ... (snip)
initOFVariables();
}
  </code></pre>


</div>


    
    
    <div class="text">    
    
    When initialized, the NVRAM must be a valid, non-zero size no greater than 65536. This is specified in the nvram-total-size property. In addition to a valid size the nvram must have at least one valid partition with a size of at least 32 bytes. Valid partition names include “common” (defined as kIODTNVRAMOFPartitionName) or “system” (not in the most recent XNU source). Below is the updated device tree data for nvram-proxy-data:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>...
00000f60: 73 79 73 63 66 67 2f 42 47 4d 74 00 6e 76 72 61  syscfg/BGMt.nvra
00000f70: 6d 2d 70 72 6f 78 79 2d 64 61 74 61 00 00 00 00  m-proxy-data....
00000f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00  ................
00000f90: 00 00 02 00 63 6f 6d 6f 6e 00 00 00 00 00 00  ....common......
00000fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
...
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Actual data starts at offset 0xf90 in our modified device tree file. The partition’s size is calculated by multiplying the 16-bit integer at offset 0xf92 by 16. In this case, 2 * 16 = 32 bytes. This includes the first 16 bytes containing the partition’s name and the remaining 16 null bytes. Now that the kernel is satisfied with our empty partition, the mystery of the missing NVRAM is solved.</p>
<h3><b>Forcing JOP</b></h3>
<p>All the required MSR registers had been added to QEMU. The device tree was properly tailored to the kernel’s requirements. The following launchd greeting in a GDB session gave a small boost of optimism:</p>
<p>Thu Jan&nbsp; 1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt;Notice&gt;: hello</p>
<p>The holy grail of a shell prompt is still beyond our grasp at this point. Something was spinning in the kernel, impeding progress once again:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>... (snip)
load_init_program: attempting to load /sbin/launchd
getExceptionList: failed to open /System/Library/Security/HardeningExceptions.plist
dyld: setting comm page to 0x800000000
000120.870479 wlan0.A[3] initWithProvider@120:amfm not matched
000120.913992 wlan0.A[4] deferredStart@1726: Lowered adjustBusy(-1), getBusyState() -&gt; 4
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: hello
Darwin Bootstrapper Version 7.0.0: Tue Aug 25 21:19:12 PDT 2020; root:libxpc_executables-2038.40.23.161.1~1/launchd/RELEASE_arm64e
boot-args = debug=0x8 kextlog=0xfff cpus=1 rd=md0 serial=2
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Restore environment starting.
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: System Integrity Protection is engaged.
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: entering ondemand mode
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: fsck
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: mount-phase-1
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: data-protection
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: check-migration-mode
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: unlock-data-volume
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Doing boot task: commit-boot-mode
Thu Jan  1 00:02:10 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: boot-mode committed: (null)
... (spinning)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    In an infinite loop at 0xfffffe00079ebcbc:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>(gdb) c
Continuing.
^C
Program received signal SIGINT, Interrupt.
0xfffffe00079ebcbc in ?? ()
(gdb)
  </code></pre>


</div>


    
    
    <div class="text">    
    
    In Ldisable_jop:<br>
<br>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_1950562321.coreimg{.width}.png/1621338248642/emulating-macos-fig2.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig2.png" data-asset-id="92ae907d-f8e6-4ffb-bf08-c84a0a16cecc" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig2.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 2.</i></p>
<p>Notice the infinitely looping B.NE instruction. How did it get here? We looked a bit further up in the disassembly:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_155187903.coreimg{.width}.png/1621338248648/emulating-macos-fig3.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig3.png" data-asset-id="81636db1-a43a-4310-82b4-0c92ade98b93" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig3.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 3.</i></p>
<p>XNU kernel threads have a member called TH_DISABLE_USER_JOP. If set to a non-zero value, Ldisable_jop is invoked. SCTLR_EL1 (system control register) is then validated against a constant (0x7454599d) and freezes execution if the values do not match. Where is this thread property being set, and how can we prevent it in the most orthodox manner possible? Setting a write watchpoint in gdb for the address of the blocking thread’s TH_DISABLE_USER_JOP property leads to this location in posix_spawn:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_1414431980.coreimg{.width}.png/1621338248653/emulating-macos-fig4.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig4.png" data-asset-id="97958156-724b-44b7-99da-fee68a1c4b5f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig4.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 4.</i></p>
<p>In posix_spawn (xnu-6153.141.1/bsd/kern/kern_exec.c):<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>error = exec_activate_image(imgp);
#if defined(HAS_APPLE_PAC)
ml_task_set_disable_user_jop(new_task, imgp-&gt;ip_flags &amp; IMGPF_NOJOP ? TRUE : FALSE);
ml_thread_set_disable_user_jop(imgp-&gt;ip_new_thread, imgp-&gt;ip_flags &amp; IMGPF_NOJOP ? TRUE : FALSE);
#endif
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>In the case of the blocking thread, imgp-&gt;ip_flags is set to 0x80000000, which indicates the IMGPF_NOJOP flag is enabled. The enabled status of this flag is written to the thread’s TH_DISABLE_USER_JOP property. So where is imgp-&gt;ip_flags set?</p>
<h3><b>Load_machfile</b></h3>
<p>IMGPF_NOJOP is enabled in load_machfile near the end of the function:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_583741248.coreimg{.width}.png/1621338248664/emulating-macos-fig5.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig5.png" data-asset-id="7773e49e-fc1d-43f2-aef5-20bceed8b740" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig5.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 5.</i></p>
<p>Load_machfile compares the Mach-O executable’s identifier against several strings and enables IMGPF_NOJOP if any are a match:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>com.apple.security.cs.disable-library-validation
com.apple.private.cs.automator-plugins
com.apple.private.security.clear-library-validation
com.apple.perl5
com.apple.perl
org.python.python
com.apple.expect
com.tcltk.wish
com.tcltk.tclsh
com.apple.ruby
com.apple.bash
com.apple.zsh
com.apple.ksh
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>The bash identifier is among them. This flag may be a security mechanism to prevent certain executables from loading at boot time, as they may be used to compromise the system. Among them are several shell clients and script interpreters. The kernel blocks the executing thread if the Mach-O file’s identifier matches any of the above strings.</p>
<h3><b>Solution</b></h3>
<p>NOP over the ORR W8, W8 #0x80000000 instruction to keep IMGPF_NOJOP disabled. This gave the go-ahead to the kernel to allow launchd to execute bash (via xpcproxy):<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: auto-pivot-root
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: allow-non-platform-code
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Doing boot task: restore-datapartition
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: restore-datapartition: optional boot task not present
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: mount-phase-2
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: enable-swap
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: sandbox-enable-root-translation
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Doing boot task: init-with-data-volume
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: deferred_install
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: fips
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: cache-start
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: bootroot
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: init_featureflags
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: EndpointSecurity
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: rc.server
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: tzinit
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: dirhelper
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: rootless-init
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: finish-demo-restore
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: systemstats
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: prng_seedctl
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Warning &gt;: Unable to load cache
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: launchd UUID: 438960C9-7E3C-3D4A-9EA8-643FF64ACDF2
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Early boot complete. Continuing system boot.
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: entering bootstrap mode
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Error &gt;: Failed to bootstrap path: path = /Library/Apple/System/Library/LaunchDaemons, error = 2: No such file or directory
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Critical &gt;: No task-access server configured! The system will not get very far.
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: exiting bootstrap mode
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Skipping boot-task: cache-tag
Thu Jan  1 00:01:58 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: exiting ondemand mode
The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
bash-3.2#
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>A prompt appeared at last. Yet stdin is not working and there is no keyboard input.</p>
<h3><b>Serial Keyboard and FIQ</b></h3>
<p>A fully functioning bash prompt is useless without keyboard input. Keyboard input is read in a separate thread in a function called serial_keyboard_poll. The serial_keyboard_poll:</p>
<ul>
<li>Reads all pending characters from the stdin buffer</li>
<li>Sets the 16-millisecond deadline by calling assert_wait_deadline</li>
<li>Blocks execution in thread_block until the deadline has passed</li>
</ul>
<p>serial_keyboard_poll is then re-invoked by thread_invoke, and this sequence of events repeats indefinitely for as long as bash is open.<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_126421781.coreimg{.width}.jpeg/1621338248681/macos-fig-2-new.jpeg" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/05/macos-fig-2-new.jpg" data-asset-id="90d0ce39-89af-4d2c-aa3a-83f2089ede36" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/05/macos-fig-2-new.jpg" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 6.</i></p>
<p>Yet this wasn’t happening. Thread_block was called only once, the thread stalled, and serial_keyboard_poll was never invoked again.</p>
<p>We thought: maybe the deadline wasn’t being reached? Wait deadlines are specified in the assert_wait_deadline function. This function creates a waitq object for the current keyboard-polling thread with an optional deadline, in nanoseconds. When thread_block is called shortly afterwards, the thread hangs until the thread_clear_waitq_state kernel function clears the thread’s waitq object:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>static inline void
thread_clear_waitq_state(thread_t thread)
{
    thread-&gt;waitq = NULL;
    thread-&gt;wait_event = NO_EVENT64;
    thread-&gt;at_safe_point = FALSE;
}
  </code></pre>


</div>


    
    
    <div class="text">    
    
    But this function never got called, and the deadline was never reached. What does the thread do? It switches context to the system idle thread and blocks indefinitely, never invoking a continuation of serial_keyboard_poll to continue polling for stdin. Surely something somewhere is called that may lead to thread_clear_waitq_state? By back tracing the sequence of function calls in the XNU source, we discovered the origin of interrupt timers:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>thread_clear_waitq_state
waitq_pull_thread_locked
clear_wait_internal
thread_timer_expire
timer_queue_expire_with_options
timer_intr
rtclock_intr
sleh_fiq
_fleh_fiq
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>After analyzing this call flow, we were inching ever closer to the source of the problem. Analyzing the interoperability of threads, timers, clocks, and interrupts in the XNU kernel was slowly paying dividends.</p>
<h3><b>Fast Interrupt Requests (FIQ)</b></h3>
<p>Further investigation revealed that not even fleh_fiq (first-level exception handler for Fast Interrupt Request) was being called. Something was seriously wrong, as fleh_fiq is integral to a working interrupt timer. Peripheral devices like keyboards and mice typically communicate with the kernel using Fast Interrupt Requests (FIQ) in the ARM architecture. We confirmed that FIQs were not firing in the emulator after looking at QEMU’s source. We discovered that arm_cpu_exec_interrupt, which is called for a fast interrupt request, never got called. No amount of keyboard-spamming would trigger this or any of the kernel functions listed above.</p>
<h3><b>Hardware Timers</b></h3>
<p>Perhaps another possibility for a non-operational FIQ handler was timer-related? Threads often rely on hardware timers to notify the thread of a passed deadline. If no timer exists, no countdowns can be performed and idle threads waiting for a deadline will stall the system. Without a hardware timer to poll for FIQs, MacOS will ignore them. This is significant, as it would have affected not only standard keyboard input, but other areas of the kernel as well. Wait deadlines would never be reached, threads would hang, and services would never start simply because no hardware timer was present.</p>
<h3><b>Enable_timebase_event_stream</b></h3>
<p>We did a comparison between the iOS and MacOS kernel for the enable_timebase_event_stream function. Why this function? Because this function modifies three timer-related system registers and could provide the answer to our timer dilemma. Below is from the MacOS kernel:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_1772100137.coreimg{.width}.png/1621338248697/emulating-macos-fig7.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig7.png" data-asset-id="80884691-467d-4cef-8903-9b9c2d1c1692" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig7.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <div style="text-align: left;"><i>Figure 7.<br>
 <br>
</i></div>
<div style="text-align: left;"><i>Contrast the above with the corresponding iOS kernel disassembly: <br>
 <br>
 </i></div>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation/_jcr_content/main/par/sectionblog/par/image_646176552.coreimg{.width}.png/1621338248703/emulating-macos-fig8.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig8.png" data-asset-id="b4551ce7-2f47-4b12-ade5-a4e4c5a2a44b" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/04/emulating-macos-fig8.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <div style="text-align: left;"><i>Figure 8.<br>
<br>
</i></div>

    
    
</div>


    
    
    <div class="text">    
    
    We immediately noticed the presence of an extra register in the MacOS kernel: CNTV_CTL_EL0. With the help of a comprehensive list of iOS ARM64 system registers, we began to make the connection between these registers and the timer issues. The iOS kernel appeared to be enabling the physical timer by writing 1 to it, while the MacOS kernel was enabling the virtual timer by writing 1 to it. Then we noticed the line in the xnu-qemu-ARM64 source:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>    qdev_connect_gpio_out(cpudev, GTIMER_PHYS,
                          qdev_get_gpio_in(cpudev, ARM_CPU_FIQ));
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The GTIMER_VIRT constant gave it away almost instantly. QEMU’s official source lists five different global timer types in target/arm/cpu.h:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>#define GTIMER_PHYS     0
#define GTIMER_VIRT     1
#define GTIMER_HYP      2
#define GTIMER_SEC      3
#define GTIMER_HYPVIRT  4
  </code></pre>


</div>


    
    
    <div class="text">    
    
    The solution was incredibly simple: MacOS uses a virtual timer. iOS uses a physical timer. Therefore, QEMU must specify a virtual timer with GTIMER_VIRT instead of GTIMER_PHYS when linking the timer to FIQ. Switching to GTIMER_VIRT:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>    qdev_connect_gpio_out(cpudev, GTIMER_VIRT,
                          qdev_get_gpio_in(cpudev, ARM_CPU_FIQ));
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Followed by booting up the MacOS kernel, waiting for the bash prompt, then:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# asdfasdfasdf
bash-3.2# ls
.fseventsd      dev             mnt3            mnt7            sbin
Library         etc             mnt4            mnt8            usr
System          mnt1            mnt5            mnt9            var
bin             mnt2            mnt6            private
bash-3.2#
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Such a simple answer to a cryptic problem. This final fix marks the end of the final phase of a fully bootable MacOS 11 ARM64e kernel.</p>
<h3><b>Achieving a Functioning Emulator</b></h3>
<p>This chronicling of discoveries, fixes and accomplishments would not be complete without long-term failures and ineffective bypasses. Below are several examples that involved multiple days of research and testing and created quite a bit of frustration throughout.</p>
<h3><b>IORTC</b></h3>
<p>Before we discovered, diagnosed, and mitigated the timer dilemma, something related to the initialization of the RTC (real-time clock) had been blocking the bsd_init thread. IOKitInitializeTime was waiting for a matching IORTC service. The wait was initiated by IOService::waitForMatchingService, which relies on assert_wait or assert_wait_deadline to begin blocking the thread until a condition is met. assert_wait_deadline is non-functional without a working hardware timer. The kernel had no working hardware timer. We tried adding the no-rtc property to the device tree root and a child node (with the name rtc) to the arm-io node. This would invoke the bootstrap to immediately publish the IORTC service and skip the wait. After the real source of the problem was determined and fixed, these device tree nodes were removed.</p>
<h3><b>Task-access Server and SIP</b></h3>
<p>The following message from the launchd output was a bit disconcerting:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>&lt; Critical &gt;: No task-access server configured! The system will not get very far.
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>It was originally attributed to code-signing, then attributed to SIP, and finally ignored once a functioning bash prompt was operational. This message caused several unneeded headaches. A task-access server is related to communication between tasks over the task-access port (defined as constant TASK_ACCESS_PORT with a value of 9). Assuming this only affected TCP connections, which this emulation project currently does not support, we ignored the error.</p>
<h3><b>iOS Binary Incompatibility</b></h3>
<p>RootlessJB provides common Mach-O ARM64e binaries, including bash, that are runnable in the iOS kernel. These are iOS binaries for an iOS kernel. This explains why one is likely to see the following message when attempting to run said binaries on a MacOS system and never see a bash prompt:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>Using iOS Platform policy
port is not ready for callouts
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>The necessary command line tools are part of the base ARM64 system, archived deep within the MacOS Big Sur installer package. This is simply a warning to those attempting execution of the aforementioned iOS binaries in a MacOS environment: it probably won’t work.</p>
<h3><b>Conclusion</b></h3>
<p>This project was a successful experiment in cross-platform emulation that has potential for future development. Hard disk and TCP tunneling (which xnu-qemu-arm64 already supports for iOS) still await implementation. Multi-core and KVM support would dramatically reduce the boot time, perhaps to mere seconds, and eliminate massive overhead. Full graphical support is a mere prospect (even less so in a cross-platform environment). But graphical support is low priority, so long as a functioning shell client is present. If it works, that is enough of a motivation to make it work well.</p>
<h3><b>Example Commands</b></h3>
<p>To complement the article, we have decided to provide examples of command output from an emulated MacOS 11 ARM64e guest. For example, the following shows output from the lsof program:<br>
<br>
</p>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# lsof -c launchd
COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
launchd   1 root  cwd    DIR    2,0      748    2 /
launchd   1 root  txt    REG    2,0   418976  940 /sbin/launchd
launchd   1 root  txt    REG    2,0   821120  958 /usr/lib/dyld
launchd   1 root  txt    REG    2,0    60880  977 /usr/lib/libSystem.B.dylib
launchd   1 root  txt    REG    2,0   443120 1024 /usr/lib/libobjc.A.dylib
launchd   1 root  txt    REG    2,0    79072  985 /usr/lib/libauditd.0.dylib
launchd   1 root  txt    REG    2,0   161504  989 /usr/lib/libbsm.0.dylib
launchd   1 root  txt    REG    2,0    77424 1044 /usr/lib/system/libcache.dylib
launchd   1 root  txt    REG    2,0   163856 1045 /usr/lib/system/libcommonCrypto.dylib
launchd   1 root  txt    REG    2,0    64304 1046 /usr/lib/system/libcompiler_rt.dylib
launchd   1 root  txt    REG    2,0   101696 1047 /usr/lib/system/libcopyfile.dylib
launchd   1 root  txt    REG    2,0   656832 1048 /usr/lib/system/libcorecrypto.dylib
launchd   1 root  txt    REG    2,0   557520 1051 /usr/lib/system/libdispatch.dylib
launchd   1 root  txt    REG    2,0   501456 1052 /usr/lib/system/libdyld.dylib
launchd   1 root  txt    REG    2,0    57616 1053 /usr/lib/system/libkeymgr.dylib
launchd   1 root  txt    REG    2,0    35296 1055 /usr/lib/system/liblaunch.dylib
launchd   1 root  txt    REG    2,0    80192 1056 /usr/lib/system/libmacho.dylib
launchd   1 root  txt    REG    2,0    64432 1059 /usr/lib/system/libquarantine.dylib
launchd   1 root  txt    REG    2,0    59168 1060 /usr/lib/system/libremovefile.dylib
launchd   1 root  txt    REG    2,0   197136 1061 /usr/lib/system/libsystem_asl.dylib
launchd   1 root  txt    REG    2,0   110560 1062 /usr/lib/system/libsystem_blocks.dylib
launchd   1 root  txt    REG    2,0   758912 1063 /usr/lib/system/libsystem_c.dylib
launchd   1 root  txt    REG    2,0    53456 1064 /usr/lib/system/libsystem_collections.dylib
launchd   1 root  txt    REG    2,0   100864 1065 /usr/lib/system/libsystem_configuration.dylib
launchd   1 root  txt    REG    2,0   176752 1066 /usr/lib/system/libsystem_containermanager.dylib
launchd   1 root  txt    REG    2,0    99584 1067 /usr/lib/system/libsystem_coreservices.dylib
launchd   1 root  txt    REG    2,0   144048 1068 /usr/lib/system/libsystem_darwin.dylib
launchd   1 root  txt    REG    2,0   132912 1069 /usr/lib/system/libsystem_dnssd.dylib
launchd   1 root  txt    REG    2,0    75376 1070 /usr/lib/system/libsystem_featureflags.dylib
launchd   1 root  txt    REG    2,0   451008 1071 /usr/lib/system/libsystem_info.dylib
launchd   1 root  txt    REG    2,0   244320 1073 /usr/lib/system/libsystem_m.dylib
launchd   1 root  txt    REG    2,0   317408 1074 /usr/lib/system/libsystem_malloc.dylib
launchd   1 root  txt    REG    2,0   166784 1075 /usr/lib/system/libsystem_networkextension.dylib
launchd   1 root  txt    REG    2,0   115616 1076 /usr/lib/system/libsystem_notify.dylib
launchd   1 root  txt    REG    2,0    21952 1078 /usr/lib/system/libsystem_product_info_filter.dylib
launchd   1 root  txt    REG    2,0   103232 1080 /usr/lib/system/libsystem_sandbox.dylib
launchd   1 root  txt    REG    2,0    80112 1081 /usr/lib/system/libsystem_secinit.dylib
launchd   1 root  txt    REG    2,0   373952 1072 /usr/lib/system/libsystem_kernel.dylib
launchd   1 root  txt    REG    2,0   105232 1077 /usr/lib/system/libsystem_platform.dylib
launchd   1 root  txt    REG    2,0   149616 1079 /usr/lib/system/libsystem_pthread.dylib
launchd   1 root  txt    REG    2,0   101552 1082 /usr/lib/system/libsystem_symptoms.dylib
launchd   1 root  txt    REG    2,0   242032 1083 /usr/lib/system/libsystem_trace.dylib
launchd   1 root  txt    REG    2,0   114304 1085 /usr/lib/system/libunwind.dylib
launchd   1 root  txt    REG    2,0   467728 1086 /usr/lib/system/libxpc.dylib
launchd   1 root  txt    REG    2,0   268336  993 /usr/lib/libc++abi.dylib
launchd   1 root  txt    REG    2,0    80128 1022 /usr/lib/liboah.dylib
launchd   1 root  txt    REG    2,0   787520  991 /usr/lib/libc++.1.dylib
launchd   1 root    0w   CHR    0,0   0t4982  291 /dev/console
launchd   1 root    1w   CHR    0,0   0t4982  291 /dev/console

  </code></pre>


</div>


    
    
    <div class="text">    
    
    The df command lists active file systems, such as the root device where launchd, bash, and all other userland programs are located:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# df -h
Filesystem    Size   Used  Avail Capacity iused      ifree %iused  Mounted on
root_device  1.5Gi  130Mi  1.4Gi     9%    1668 4294965611    0%   /
devfs        168Ki     0Bi   100%     580          0  100%   /dev
  </code></pre>


</div>


    
    
    <div class="text">    
    
    View network interfaces with ifconfig:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# ifconfig
ALF, old data swfs_pid_entry , updaterules_msg &lt; ptr &gt;, updaterules_state &lt; ptr &gt;lo0: flags=8049&lt; UP,LOOPBACK,RUNNING,MULTICAST &gt; mtu 16384
        options=1203&lt; RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP &gt;
        inet 127.0.0.1 netmask 0xff000000
        inet6 ::1 prefixlen 128
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1
        nd6 options=201&lt; PERFORMNUD,DAD &gt;
gif0: flags=8010&lt; POINTOPOINT,MULTICAST &gt; mtu 1280
stf0: flags=0&lt;&gt; mtu 1280
  </code></pre>


</div>


    
    
    <div class="text">    
    
    Finally, the full output of a shutdown command:<br>
<br>

    
    
</div>


    
    
    <div class="embedcode">

<pre><code class="shell androidstudio">
</br>bash-3.2# shutdown -h now
Shutdown NOW!
System shutdown time has arrived
Thu Jan  1 00:06:11 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) : System shutdown initiated by: shutdown.10&lt;-bash.3&lt;-launchd.1
Thu Jan  1 00:06:11 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: committing to system shutdown
Kext loading now disabled.
Kext unloading now disabled.
Kext autounloading now disabled.
Kernel requests now disabled.
System shutdown; requesting immediate kernelmanagerd exit.
ASP: System is shutting down, preventing further ASP upcalls
ASP: ASP: shutting down, drained
bash-3.2# Thu Jan  1 00:06:41 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) : shutdown UNINITIALIZED -&gt; COMMITTED
Thu Jan  1 00:06:41 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: shutdown already committed
Thu Jan  1 00:06:41 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: shutdown COMMITTED -&gt; COMMITTED
Thu Jan  1 00:06:41 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt; Notice &gt;: shutdown COMMITTED -&gt; WAITING_ON_SERVICES
ASP: System is shutting down, (SIP is ENABLED) allowing process at path: /usr/sbin/spindump
Thu Jan  1 00:06:43 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Generating report...
dyld: dyld cache load error: shared cache file open() failed
dyld: Library not loaded: /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication
  Referenced from: /usr/sbin/spindump
  Reason: image not found
AMFI: Denying core dump for pid 11 (spindump)Thu Jan  1 00:06:44 1970 localhost com.apple.xpc.launchd[1] &lt; Warning &gt;: shutdown-stall: non-boot task exited with status 6
Thu Jan  1 00:06:44 1970 localhost com.apple.xpc.launchd[1] &lt; Notice &gt;: Report generated in 0 seconds.
Thu Jan  1 00:06:44 1970 localhost com.apple.xpc.launchd[1] &lt; Error &gt;: Host-level exception raised: pid = 11, thread = 0x50f, exception type = 0xd, codes = { 25769803777 }, states = { 0 }
syncing disks... Killing all processes
continuing
hfs: unmount initiated on GoldenGateC20C69.arm64eSURamDisk on device b(2, 0)
done
CPU halted
ASP: ASP: shutting down
panic(cpu 0 caller 0xfffffe0008289f38): &quot;Halt/Restart Timed Out&quot;
  </code></pre>


</div>


    
    
    <div class="text">    
    
    <p>Yes, that is a panic at the end. Add “fatal shutdown” to the list of issues awaiting a fix.</p>
<h3><b>Resources</b></h3>
<p><b>Setup Guide</b></p>
<p><a href="https://github.com/cylance/macos-arm64-emulation" target="_blank">https://github.com/cylance/macos-arm64-emulation</a></p>
<p><b>Aleph Research</b></p>
<p><a href="https://alephsecurity.com/2019/06/17/xnu-qemu-arm64-1/" target="_blank">Running iOS in QEMU to an interactive bash shell (1): tutorial</a></p>
<p><a href="https://github.com/alephsecurity/xnu-qemu-arm64" target="_blank">https://github.com/alephsecurity/xnu-qemu-arm64</a></p>
<p><a href="https://github.com/alephsecurity/xnu-qemu-arm64-tools" target="_blank">https://github.com/alephsecurity/xnu-qemu-arm64-tools</a></p>
<p><b>XNU</b></p>
<p>XNU source tarballs - <a href="https://opensource.apple.com/tarballs/xnu/" target="_blank">https://opensource.apple.com/tarballs/xnu/</a></p>
<p>XNU source - <a href="https://github.com/apple-opensource/xnu" target="_blank">https://github.com/apple-opensource/xnu</a></p>
<p><b>Tools</b></p>
<p>QEMU 5.1.0 - <a href="https://www.qemu.org/download/%23source" target="_blank">https://www.qemu.org/download/#source</a></p>
<p>OSX-KVM - <a href="https://github.com/kholia/OSX-KVM" target="_blank">https://github.com/kholia/OSX-KVM</a></p>
<p>xar - <a href="https://github.com/mackyle/xar" target="_blank">https://github.com/mackyle/xar</a></p>
<p>apfs-fuse - <a href="https://github.com/sgan81/apfs-fuse" target="_blank">https://github.com/sgan81/apfs-fuse</a></p>
<p><b>Links</b></p>
<p><a href="https://landley.net/aboriginal/presentation.html" target="_blank">https://landley.net/aboriginal/presentation.html</a></p>
<p><a href="https://developer.android.com/studio/run/emulator-commandline" target="_blank">https://developer.android.com/studio/run/emulator-commandline</a></p>
<p><a href="https://developer.arm.com/documentation/dui0801/g/A64-Data-Transfer-Instructions/LDAPR" target="_blank">https://developer.arm.com/documentation/dui0801/g/A64-Data-Transfer-Instructions/LDAPR</a></p>
<p><a href="https://developer.arm.com/architectures/instruction-sets/base-isas/a64" target="_blank">https://developer.arm.com/architectures/instruction-sets/base-isas/a64</a></p>
<p><a href="https://worthdoingbadly.com/xnuqemu3/" target="_blank">https://worthdoingbadly.com/xnuqemu3/<br>
<br>
</a></p>

    
    
</div>


    
    
    <div class="authorblog"><!--Pulling author bio from author page-->

    
    
        
  



<div class="author-info" data-author-name="The BlackBerry Research and Intelligence Team" data-author-path="https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation">
  <div class="author-avatar">
    
    <img src="/content/dam/blogs-blackberry-com/images/authors/blackberry-logo-square.jpg" class="author-avatar" alt="The BlackBerry Research and Intelligence Team"/>				
    
  </div><!-- .author-avatar -->
  <div class="author-description">
      
    
    <h2>About The BlackBerry Research and Intelligence Team</h2>
    <p>The <a href="https://blogs.blackberry.com/en/author/the-blackberry-research-and-intelligence-team" target="_blank">BlackBerry Research and Intelligence team</a> is a highly experienced threat research group specializing in a wide range of cybersecurity disciplines, conducting continuous threat hunting to provide comprehensive insights into emerging threats. We analyze and address various attack vectors, leveraging our deep expertise in the cyberthreat landscape to develop proactive strategies that safeguard against adversaries.</p>
<p>Whether it's identifying new vulnerabilities or staying ahead of sophisticated attack tactics, we are dedicated to securing your digital assets with cutting-edge research and innovative solutions.</p>

  </div><!-- .author-description	-->
</div>
<hr class="author-hr"/>
    
</div>


    
    
    <div class="socialsharing">

<div class="socialSharing row">
	<ul class="socialSharing-icons">
		<li>
			<a href="https://x.com/intent/tweet?url=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation&text=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&via=BlackBerry" title="Share on X" target="_blank" class="x-share">
				<span class="sr-only sr-only-focusable">Share on X</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--tw" aria-hidden="true">
					<svg viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z"></path></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation" title="Share on Facebook" target="_blank" class="facebook-share">
				<span class="sr-only sr-only-focusable">Share on Facebook</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--fb" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264 512"><path d="M76.7 512V283H0v-91h76.7v-71.7C76.7 42.4 124.3 0 193.8 0c33.3 0 61.9 2.5 70.2 3.6V85h-48.2c-37.8 0-45.1 18-45.1 44.3V192H256l-11.7 91h-73.6v229"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.linkedin.com/shareArticle?mini=true&url=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation&title=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&summary=&source=blogs.blackberry.com" title="Share on LinkedIn" target="_blank" class="linkedin-share">
				<span class="sr-only sr-only-focusable">Share on LinkedIn</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--li" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448.1 512"><path d="M100.3 448H7.4V148.9h92.9V448zM53.8 108.1C24.1 108.1 0 83.5 0 53.8S24.1 0 53.8 0s53.8 24.1 53.8 53.8-24.1 54.3-53.8 54.3zM448 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448h-.1z"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="mailto:?subject=Strong%20ARMing%20with%20MacOS:%20Adventures%20in%20Cross-Platform%20Emulation&body=https://blogs.blackberry.com/en/2021/05/strong-arming-with-macos-adventures-in-cross-platform-emulation" title="Email" class="email-share">
				<span class="sr-only sr-only-focusable">Email</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--email" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"/></svg>
				</span>
			</a>
		</li>
	</ul>
</div>
</div>


    
    
    <div class="backbutton">
<a href="javascript:history.back()" class="cta cta-primary btn-back-button">Back</a></div>



      </div>
      
          
      </div>
    </section>
      
  
  
</div>


    
    
    <div class="image">
  

    
</div>


    
    
    <div class="blogsection">
    <section class="section     ">
      
      <div class="container sectionPadding ">
           
      <div class="col-md-9 col-lg-9 col-sm-12">
          





      </div>
      
          
      </div>
    </section>
      
  
  
</div>



</main><footer data-no-snippet>
	<div class="container pt-2">
		<nav id="footerNav">
			<div>
				<div class="row my-4">
					<div class="socialLinks col-lg-4 col-md-4 col-sm-12 pb-3">
						<a href="https://www.facebook.com/BlackBerry/" class="socialLink" target="_blank" rel="noopener" style="padding-left: 0 !important;">
							<span class="sr-only" aria-label="BlackBerry Facebook Account">Facebook</span>
							<span class="svgIcon-social" aria-hidden="true">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M448 56.7v398.5c0 13.7-11.1 24.7-24.7 24.7H309.1V306.5h58.2l8.7-67.6h-67v-43.2c0-19.6 5.4-32.9 33.5-32.9h35.8v-60.5c-6.2-.8-27.4-2.7-52.2-2.7-51.6 0-87 31.5-87 89.4v49.9h-58.4v67.6h58.4V480H24.7C11.1 480 0 468.9 0 455.3V56.7C0 43.1 11.1 32 24.7 32h398.5c13.7 0 24.8 11.1 24.8 24.7z"/></svg>
							</span>
						</a>
						<a href="https://x.com/blackberry" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry X Account">X</span>
							<span class="svgIcon-social">
								<svg width="28" height="28" viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" fill="#000"></path></svg>
							</span>
						</a>
						<a href="https://www.youtube.com/user/BlackBerry" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry YouTube Account">YouTube</span>
							<span class="svgIcon-social">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z"/></svg>
							</span>
						</a>
						<a href="https://www.instagram.com/blackberry/" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry Instagram Account">Instagram</span>
							<span class="svgIcon-social">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/></svg>
							</span>
						</a>
					</div>
					
				</div>
				<hr/>
				<div class="row mt-5">
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse21" aria-expanded="false" aria-controls="collapse21">
								<h3>
									Corporate
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div id="collapse21" class="collapse in">
									<ul>
										<li>
											
											<a href="https://www.blackberry.com/us/en/company" rel="noopener" target="_blank">Company</a>
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/newsroom" target="_blank">Newsroom</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/investors" target="_blank">Investors</a>
											
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/company/careers" rel="noopener" target="_blank">Careers</a>
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/leadership" target="_blank">Leadership</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/corporate-responsibility-at-blackberry" target="_blank">Corporate Responsibility</a>
											
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/company/certifications" rel="noopener" target="_blank">Certifications</a>
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/success-stories" rel="noopener" target="_blank">Customer Success</a>
										</li>
									</ul>
								</div>
							
						
					</div>
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse31" aria-expanded="false" aria-controls="collapse31">
								<h3>
									Developers
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div class="collapse in" id="collapse31">
									<ul>
										<li>
											
											<a href="https://developers.blackberry.com/" rel="noopener" target="_blank">Enterprise Platform &amp; Apps</a>
										</li>
									
										<li>
											
											<a href="https://www.qnx.com/account/login.html?returnaddress=%2Fdownload%2Fgroup.html%3Fprogramid%3D29178" rel="noopener" target="_blank">BlackBerry QNX Developer Network</a>
										</li>
									</ul>
								</div>
							
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse32" aria-expanded="false" aria-controls="collapse32">
								<h3>
									Blogs
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div class="collapse in" id="collapse32">
									<ul>
										<li>
											
											<a href="https://blogs.blackberry.com/" rel="noopener">BlackBerry ThreatVector Blog</a>
										</li>
									
										<li>
											
											<a href="https://devblog.blackberry.com/" rel="noopener" target="_blank">Developers Blog</a>
										</li>
									
										<li>
											
											<a href="https://helpblog.blackberry.com/" rel="noopener" target="_blank">Help Blog</a>
										</li>
									</ul>
								</div>
							
						
					</div>
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse41" aria-expanded="false" aria-controls="collapse41">
								<h3>
									Legal
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div id="collapse41" class="collapse in">
									<ul>
										<li>
											<a href="https://www.blackberry.com/us/en/legal" target="_blank">Overview</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/accessibility" target="_blank">Accessibility</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/blackberry-virtual-patent-marking" target="_blank">Patents</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/trademarks" target="_blank">Trademarks</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/privacy-policy" target="_blank">Privacy Policy</a>
											
										</li>
									</ul>
								</div>
							
						
					</div>
				</div>
			</div>
			<div class="container">
				<div class="row tm10" style="padding-top: 50px;">
					<div class="col-xs-12 col-md-6 copyright">
						<p>© 2024 BlackBerry Limited. All rights reserved.</p>
					</div>
				</div>
			</div>
		</nav>
	</div>
</footer>

            
    
    
    
    
<script src="/etc.clientlibs/shared/clientlibs/jquery.min.96704cdeb2f89f0504fd10b631047e4f.js"></script>
<script src="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-dependencies.min.d41d8cd98f00b204e9800998ecf8427e.js"></script>





    
    
<script src="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-site.min.70a468767a2e0665e8f087baab63f77b.js"></script>




    

    

    
    
    

            

        
    </body>
</html>
