<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="generator" content="Bludit">

<!-- Dynamic title tag -->
<title>Colibri Loader - Back to basics | fr3d.hk</title>

<!-- Dynamic description tag -->
<meta name="description" content="Colibri Loader makes use of common malware techniques but presents a new entry into the malware as a service market with some interesting functions. ">

<!-- Include Favicon -->
<link rel="icon" href="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png" type="image/png">

<!-- Include Bootstrap CSS file bootstrap.css -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-kernel/css/bootstrap.min.css?version=3.12.0">

<!-- Include CSS Styles from this theme -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-themes/blogx/css/style.css?version=3.12.0">

<!-- Load Bludit Plugins: Site head -->
<link rel="canonical" href="https://fr3d.hk/blog/colibri-loader-back-to-basics"/>

<!-- Open Graph -->
<meta property="og:locale" content="en, en_US, en_AU, en_CA, en_GB, en_IE, en_NZ">
<meta property="og:type" content="article">
<meta property="og:title" content="Colibri Loader - Back to basics">
<meta property="og:description" content="Colibri Loader makes use of common malware techniques but presents a new entry into the malware as a service market with some interesting functions. ">
<meta property="og:url" content="https://fr3d.hk/blog/colibri-loader-back-to-basics">
<meta property="og:site_name" content="fr3d.hk">
<meta property="og:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/b774cda4-5b2e-40a6-a0bd-d049cd6f27a8.png">

<!-- Robots plugin -->
<link rel="alternate" type="application/rss+xml" href="https://fr3d.hk/blog/rss.xml" title="RSS Feed">

<!-- Twitter Cards -->
<meta property="twitter:card" content="summary">
<meta property="twitter:site" content="">
<meta property="twitter:title" content="Colibri Loader - Back to basics">
<meta property="twitter:description" content="Colibri Loader makes use of common malware techniques but presents a new entry into the malware as a service market with some interesting functions. ">
<meta property="twitter:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/b774cda4-5b2e-40a6-a0bd-d049cd6f27a8.png">
<link href="/blog/bl-plugins/viewerjs/css/viewer.css" rel="stylesheet"></head>
<body>

	<!-- Load Bludit Plugins: Site Body Begin -->
	
	<!-- Navbar -->
	<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark text-uppercase">
	<div class="container">
		<a class="navbar-brand" href="https://fr3d.hk/blog/">
			<span class="text-white">fr3d.hk</span>
		</a>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarResponsive">
			<ul class="navbar-nav ml-auto">

				<!-- Static pages -->
				
				<!-- Social Networks -->
								<li class="nav-item">
					<a class="nav-link" href="https://twitter.com/fr3dhk" target="_blank">
						<img class="d-none d-sm-block nav-svg-icon" src="https://fr3d.hk/blog/bl-themes/blogx/img/twitter.svg" alt="Twitter" />
						<span class="d-inline d-sm-none">Twitter</span>
					</a>
				</li>
				
			</ul>
		</div>
	</div>
</nav>

	<!-- Content -->
	<div class="container">
		<div class="row">

			<!-- Blog Posts -->
			<div class="col-md-9">
			<!-- Post -->
<div class="card my-5 border-0">

	<!-- Load Bludit Plugins: Page Begin -->
	<style>.seo-breadcrumbs {margin:0; padding:0.4rem 0;} .seo-breadcrumbs li {display:inline;padding:0.2rem 0 0.2rem 0.2rem ; font-size:14px; list-style:none; } .seo-breadcrumbs li a {} .seo-breadcrumbs li+li:before {padding: 0 4px 0 0; color: black; content: "\000BB";}</style><nav aria-label="breadcrumb"><ol itemscope itemtype="http://schema.org/BreadcrumbList" class="seo-breadcrumbs"><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">You are here: <a href="https://fr3d.hk/blog/" itemprop="item" ><span itemprop="name">fr3d.hk</span></a>
    <meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><a href="https://fr3d.hk/blog/category/malware">Malware</a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><span itemprop="name"><a href="https://fr3d.hk/blog/colibri-loader-back-to-basics" itemprop="item">Colibri Loader - Back to basics</a></span><meta itemprop="position" content="3" /></li></ol></nav>
	<!-- Cover image -->
	
	<div class="card-body p-0">
		<!-- Title -->
		<a class="text-dark" href="https://fr3d.hk/blog/colibri-loader-back-to-basics">
			<h1 class="title">Colibri Loader - Back to basics</h1>
		</a>

				<!-- Creation date -->
		<h6 class="card-subtitle mb-3 text-muted">February 13, 2022 - Reading time: 23 minutes</h6>
		
		<!-- Full content -->
		<p>Colibri Loader makes use of common malware techniques but presents a new entry into the malware as a service market with some interesting functions. </p>
<p><!-- pagebreak --></p>
<h2>Foreword</h2>
<div id="page_content"><hr>
<p>It has been close to a year since my last blog post, many things have happened in my personal life since then and have kept me quite occupied. Due to this I have worked with the incredible <a href="https://twitter.com/casperinous">Casperinous </a>to produce this post. <a href="https://twitter.com/casperinous">Casperinous </a>researched the malware and passed a report to me that I then edited a uploaded to create this post!<a href="https://twitter.com/casperinous"> </a></p>
<h2>Overview</h2>
<div id="page_content"><hr>
<p style="text-align: center;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/b774cda4-5b2e-40a6-a0bd-d049cd6f27a8.png" alt=""></p>
<p>Colibri Loader is a malware as a service that offers a residential loader along with a control panel written in PHP to give ease of use to the purchasers. The malware author claims to have written the malware in C/ASM and prices their creation at $150/week or $400/month. The malware offers the following functionality:</p>
<ul>
<li>Run .exe as user or admin (runas+cmd), launch arguments support</li>
<li>Running x86 .exe/.dll in memory via LoadPE</li>
<li>Running x86 .dll via rundll32</li>
<li>Running x86 .dll via LoadLibrary</li>
<li>Running x86 .dll via regsrv32</li>
<li>Executing cmd commands</li>
<li>Update the bot with a fresh crypt or a new version</li>
<li>Removing a bot from an infected device.</li>
</ul>
<p style="text-align: left;">The malware was put up for sale on 27/08/2021. It has numerous positive reviews.</p>
</div>
<h2>String Decryption &amp; Imports</h2>
<div id="page_content"><hr>
<p>When beginning to analyze Colibri we see a lot of issues within the disassembly, such as unrecognized functions and invalid call opcodes. To fix the opcodes a potential solution may be to undefine then redefine but we can take this one step further and use the Create function option. This function in IDA can define the function and set the functions' stack and variables. Unfortunately Colibri is using in-proper opcodes (0xb8) which casues errors during function definition. Our solution to this is to NOP (null opcode) the in-proper opcodes and then use the create function tool within IDA.</p>
</div>
</div>
<p>This clears up the analysis significantly and reveals the entry point of the loader. The malware begins by loading DLLs and resolving functions. To load DLLs Colibri uses <em>LoadLibraryW </em>and makes use of hardcoded arrays which contain the name of the DLL. Once the exports of the chosen DLL have been located the malware will use a custom hashing algorithm to create a hash of the export name. (See figure 2)</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image10.png" alt="" width="583" height="645" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p style="text-align: center;">Figure 2: Hashing function</p>
<p>Colibri's important strings are XOR encrypted within the binary and when retrieved to be used by Colibri will be decrypted. Sometimes the string is unencrypted and will be stored within the key part of the encrypted strings structure. If the string is unencrypted then Colibri will return the key instead of proceeding with the decryption process.</p>
<h2>Checks</h2>
<div id="page_content"><hr></div>
<p>Before carrying out important functions Colibri makes sure that it hasn't been cracked by checking the hardcoded C2 with a hash. This is to make sure that someone hasn't changed the C2 in an attempt to reuse/repurpose the malware. If the check fails then the malware will exit.  </p>
<p>Before continuing with the program flow, Colibri checks the language of the host system to determine whether they are within the CIS which it attempts to avoid. The malware acomplishes this by calling pGetUserDefaultLangID and then comparning the results to the following. If Colibri finds a match it will exit.</p>
<table border="1" height="104" style="border-collapse: collapse; width: 39.1354%; height: 162px; margin-left: auto; margin-right: auto;">
<tbody>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;"><strong>Language</strong></td>
<td style="width: 50%; height: 18px;"><strong>Code</strong></td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Russian</td>
<td style="width: 50%; height: 18px;">1049</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Belarusian</td>
<td style="width: 50%; height: 18px;">1059</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Georgian</td>
<td style="width: 50%; height: 18px;">1079</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Kazakh</td>
<td style="width: 50%; height: 18px;">1087</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Tajik</td>
<td style="width: 50%; height: 18px;">1064</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Uzbek</td>
<td style="width: 50%; height: 18px;">2115</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Ukranian</td>
<td style="width: 50%; height: 18px;">1058</td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; height: 18px;">Unknown</td>
<td style="width: 50%; height: 18px;">106</td>
</tr>
</tbody>
</table>
<h2>Check in</h2>
<div id="page_content"><hr>
<p>After the language checks have been passed Colibri will attempt to reach the C2 and check that it is alive. Before reaching out to the C2, Colibri generates a unique identifier for the C2 that is calculated based on the serial number of the infected workstation. Once the UUID is generated the malware will send a request to the C2 gate with a "check" command, if the check fails and the C2 doesn't reply or does not reply correctly the malware will exit.</p>
</div>
<p>The general network communication of Colibri can be described as the following: </p>
<ul>
<li>The malware decrypts a variety of strings, depending on the type of the request (GET vs POST). Among those strings, there are: 
<ul>
<li>The type/command of each request in string format(check|update|ping). <span style="white-space: pre;"> </span></li>
<li>RC4 keys used to encrypt the content (in case of a POST request and decrypt) and also decrypt the response of the server. </li>
<li>Information about the version of the loader, but also the current campaign ID. </li>
</ul>
</li>
<li>If there is a POST request, the loader encrypts the content of the POST request with one of the decrypted RC4 keys. </li>
<li>The loader received a response from the server. The response is BASE64 encoded. </li>
<li>After decoding the response properly, it is decrypted with one of the RC4 keys. </li>
<li>The response is checked against a set of hardcoded strings that indicate if the response is valid or not.  </li>
</ul>
<p>Colibri has 3 type of commands that are sent within its HTTP requests: </p>
<table border="1" style="border-collapse: collapse; width: 100%; height: 91px;">
<tbody>
<tr style="height: 18px;">
<td style="width: 15.017%; height: 18px;"><strong>Command</strong></td>
<td style="width: 51.6496%; height: 18px;"><strong>Description</strong></td>
<td style="width: 33.3333%; height: 18px;"><strong>Response</strong></td>
</tr>
<tr style="height: 37px;">
<td style="width: 15.017%; height: 37px;">check</td>
<td style="width: 51.6496%; height: 37px;">Checks the availability of the C2 server but also whether the workstation has been infected in the past.</td>
<td style="width: 33.3333%; height: 37px;">The loader accepts the string “SUCCESS” as a valid response.</td>
</tr>
<tr style="height: 18px;">
<td style="width: 15.017%; height: 18px;">update</td>
<td style="width: 51.6496%; height: 18px;">Sends information about the infected system.</td>
<td style="width: 33.3333%; height: 18px;">Colibri doesn't validate the response</td>
</tr>
<tr style="height: 18px;">
<td style="width: 15.017%; height: 18px;">ping</td>
<td style="width: 51.6496%; height: 18px;">Requests a task from the C2.</td>
<td style="width: 33.3333%; height: 18px;">If there is a task within the C2 it will respond with it.</td>
</tr>
</tbody>
</table>
<p>When Colibri checks that the C2 is alive it will use the check command. Once the request is sent and a response is received the malware will decode the response using base64 and then use RC4 to decrypt the response. Once the response has been decrypted it will be compared to "SUCCESS". If the string and response do not match then the malware will exit.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image19.png" alt="" width="773" height="343" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p style="text-align: center;">Figure 3: Handling C2 response</p>
<h2>Persistence</h2>
<div id="page_content" style="font-size: 16px; font-weight: 400;"><hr>
<p>To maintain a presence on the infected system Colibri will move itself to a different filepath depending on the Windows version. Colibri checks if it is already in the destination and if not it will move to the following paths depending on the Windows version.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image20.png" alt="" width="409" height="214" style="display: block; margin-left: auto; margin-right: auto;"></p>
</div>
<p style="font-size: 16px; font-weight: 400; text-align: center;">Figure 5: Determine persistence path</p>
<p style="font-size: 16px; font-weight: 400; text-align: left;">Depending on the Windows version Colibri will use the following paths:</p>
<ul>
<li style="font-size: 16px; font-weight: 400;">Windows 10 or above will use C:\Users\\{username}\\AppData\Local\Microsoft\WindowsApps\Get-Variable.exe </li>
<li style="font-size: 16px; font-weight: 400;">Else for another edition will use C:\Users\{username}\Documents\WindowsPowerShell\dllhost.exe </li>
</ul>
<p style="font-size: 16px; font-weight: 400;">Once moved Colibri will schedule a task with the following command and then exit.</p>
<ul>
<li style="font-size: 16px; font-weight: 400;">/create /tn COMSurrogate /st 00:00 /du 9999:59 /sc once /ri 1 /f /tr {path of the loader} </li>
</ul>
<h2>C2 Communications &amp; Commands</h2>
<div id="page_content"><hr>After the scheduled task has executed Colibri again it will proceed to send a check in to the malware C2 and register the infection. Colibri has campaign IDs that allow the operator to label their malware. The malware will send the campaign id, malware version and information to the C2 using the update command.</div>
<div></div>
<div><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image22.png" alt="" width="704" height="274" style="display: block; margin-left: auto; margin-right: auto;"></div>
<p style="text-align: center;">Figure 6: Getting system information</p>
<p>Colibri encrypts the data with RC4 and then base64 encodes it. Then the encrypted information is POSTed to the C2.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image23.png" alt="" width="788" height="157" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p style="text-align: center;">Figure 7: Encryption of system information</p>
<p>Now that the infected system is registered to the C2 Colibri will send "ping" commands to the C2 to check for new commands and tell the C2 that the infected system is online. When a "ping" command is sent the C2 can return the response of "NUPD" which stands for NEED UPDATE, the C2 will respond this when it needs the malware to re-register the infected system. If the malware receives this response it will re-send the check in information to the C2.</p>
<p>If the malware does not get a response of "NUPD" then it will proceed to parse the response and determine what command it has received. The command is made up of four arguments that are separated by the '|' character. The command has the following structure.</p>
<table border="1" style="border-collapse: collapse; width: 100%; height: 109px;">
<tbody>
<tr style="height: 18px;">
<td style="width: 8.07733%; height: 18px;"><strong>ID</strong></td>
<td style="width: 22.1842%; height: 18px;"><strong>Name</strong></td>
<td style="width: 69.7384%; height: 18px;"><strong>Description</strong></td>
</tr>
<tr style="height: 18px;">
<td style="width: 8.07733%; height: 18px;">1</td>
<td style="width: 22.1842%; height: 18px;">Command ID</td>
<td style="width: 69.7384%; height: 18px;">The ID determines how the command is handled and what data to use.</td>
</tr>
<tr style="height: 18px;">
<td style="width: 8.07733%; height: 18px;">2</td>
<td style="width: 22.1842%; height: 18px;">Payload URL</td>
<td style="width: 69.7384%; height: 18px;">The URL of the fie that Colibri will attempt to download and execute.</td>
</tr>
<tr style="height: 37px;">
<td style="width: 8.07733%; height: 37px;">3</td>
<td style="width: 22.1842%; height: 37px;">Payload Arguments</td>
<td style="width: 69.7384%; height: 37px;">The arguments that will accompany the payload. Usually this is used when the payload is a DLL and Colibri needs to know what export to use.</td>
</tr>
<tr style="height: 18px;">
<td style="width: 8.07733%; height: 18px;">4</td>
<td style="width: 22.1842%; height: 18px;">Use admin privileges</td>
<td style="width: 69.7384%; height: 18px;">Determines if the payload is to be ran with elevated privileges</td>
</tr>
</tbody>
</table>
<p>Examples of commands found from public sandboxes: </p>
<ul>
<li>0|http://80.92.205.102/SpotifySetup1.exe| </li>
<li>0|https://bitbucket.org/tradercrypto/releases/downloads/lol.exe| </li>
</ul>
<p>Colibri determines what function to call based on the first argument and will dispatch what command to use depending on what number it is.</p>
<table border="1" style="border-collapse: collapse; width: 100%; height: 200px;">
<tbody>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;"><strong>Command ID</strong></td>
<td style="width: 45.3672%; height: 18px;"><strong>Description</strong></td>
<td style="width: 33.3333%; height: 18px;"><strong>Parameters</strong></td>
</tr>
<tr style="height: 56px;">
<td style="width: 21.2994%; height: 56px;">1</td>
<td style="width: 45.3672%; height: 56px;">Download the payload and delete the file zone identifier. Then execute the payload with rundll32.</td>
<td style="width: 33.3333%; height: 56px;">Payload URL + Args</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">2</td>
<td style="width: 45.3672%; height: 18px;">Download the payload and delete the file zone identifier. Then execute the payload with regsrv32.</td>
<td style="width: 33.3333%; height: 18px;">Payload URL + Args</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">3</td>
<td style="width: 45.3672%; height: 18px;">Download the payload and delete the file zone identifier. Then load the payload with <em>LoadLibraryW</em></td>
<td style="width: 33.3333%; height: 18px;">Payload URL</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">4</td>
<td style="width: 45.3672%; height: 18px;">Creates a thread the injects the payload into it</td>
<td style="width: 33.3333%; height: 18px;">Payload URL</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">5</td>
<td style="width: 45.3672%; height: 18px;">Executes a command with <em>cmd open</em></td>
<td style="width: 33.3333%; height: 18px;">Args + Command</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">6</td>
<td style="width: 45.3672%; height: 18px;">Cleanup infection by deleting persistence and removing itself. Also executes command.</td>
<td style="width: 33.3333%; height: 18px;">File Path</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">7</td>
<td style="width: 45.3672%; height: 18px;">Same as 6th but doesn't execute command</td>
<td style="width: 33.3333%; height: 18px;">None</td>
</tr>
<tr style="height: 18px;">
<td style="width: 21.2994%; height: 18px;">0</td>
<td style="width: 45.3672%; height: 18px;">Download the payload and delete the file zone identifier. Then execute the payload.</td>
<td style="width: 33.3333%; height: 18px;">Payload URL + Args + Admin Rights Flag</td>
</tr>
</tbody>
</table>
<p>Commands 0 to 3 are all related to downloading and executing a payload. The malware retrieves the payload with the User-Agent "GoogleBot". After downloading the payload, Colibri deletes its file zone identifier and then based on the id, the payload is executed. </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image29.png" alt=""></p>
<p style="text-align: center;">Figure 8: Call command depending on ID</p>
<p>The command id 7 is forcing the loader to delete its persistence mechanism, the scheduled task but also remove itself from the system. The removal is being achieved by using ShellExecuteW to execute the following command: </p>
<ul>
<li>cmd /c chcp 65001 &amp;&amp; ping 127.0.0.1 &amp;&amp; DEL /F /S /Q /A {path of file} </li>
</ul>
<p>Command id 5 executes the third element in of the ping response arguments by using the ShellExecuteW API and calls "cmd open".</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image30.png" alt="" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p style="text-align: center;">Figure 9: Commands 7 &amp; 5</p>
<p>The command id 6 borrows elements from the command id 7, but before deleting itself, Colibri executes a file with “CreateProcessW” API. </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/Image31.png" alt="" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p style="text-align: center;">Figure 10: Delete itself</p>
<p>Lastly the command id 4 is responsible to download the payload and inject it to the current memory space. The injection is simple; The malware allocates space, then copies the executable and is setting the correct memory permissions on each section, rebuilds the import directory, rebase the code based on the new image base and then transfers the execution to its OEP. </p>
<h2>C2 Panel</h2>
<div id="page_content"><hr>The C2 panel provided is written in PHP and obfuscated, it contains code that will check a license key along with the expiry date of the malware so that the user can not use the malware past their purchase date.</div>
<div><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/panel1.png" alt=""></div>
<div style="text-align: center;">Figure 11: Main Page</div>
<div style="text-align: center;"></div>
<div style="text-align: center;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/panel2.png" alt=""></div>
<div style="text-align: center;">Figure 12: Bots Page</div>
<div style="text-align: center;"></div>
<div style="text-align: center;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/panel3.png" alt=""></div>
<div style="text-align: center;">Figure 14: Tasks Page</div>
<div style="text-align: center;"></div>
<div style="text-align: center;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/d79794c0480196a33be44bd0243bf7bd/panel4.png" alt=""></div>
<div style="text-align: center;">Figure 15: Tasks Page Extended</div>
<h2>Epilogue</h2>
<div id="page_content"><hr>
<p>The malware does not demonstrate innovation but certainly shows that sticking to the basics will create an effective piece of malware. Colibri is not a common malware seen in the wild and does not seem to be holding up its competition with the likes of Smoke Loader and Amadey. The malware is not without its flaws but the developer also indicates that they are willing to continually update their creation. I'd like to extend another thank you to the amazing <a href="https://twitter.com/casperinous">Casperinous</a> without him this blog post could not have been made, please check him out. Thank you for reading and see you in the next blog post!</p>
<p>Tools used to analyze Colibri: https://github.com/Casperinous/colibri_loader</p>
</div>
	</div>

	<!-- Load Bludit Plugins: Page End -->
	
</div>
			</div>

			<!-- Right Sidebar -->
			<div class="col-md-3">
			<div class="plugin plugin-categories"><h2 class="plugin-label">Categories</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/category/general">General (2)</a></li><li><a href="https://fr3d.hk/blog/category/malware">Malware (9)</a></li><li><a href="https://fr3d.hk/blog/category/phishing">Phishing (1)</a></li></ul></div></div><div class="plugin plugin-pages"><h2 class="plugin-label">Links</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/rss.xml">RSS Feed</a></li></ul></div></div>			</div>

		</div>
	</div>

	<!-- Footer -->
	<footer class="footer bg-dark">
	<div class="container">
		<p class="m-0 text-center text-white text-uppercase">Copyright © 2021<span class="ml-5 text-warning">Powered by<img class="mini-logo" src="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png"/><a target="_blank" class="text-white" href="https://www.bludit.com">Bludit</a></span></p>
	</div>
</footer>
	<!-- Javascript -->
	<script src="https://fr3d.hk/blog/bl-kernel/js/jquery.min.js?version=3.12.0"></script>
<script src="https://fr3d.hk/blog/bl-kernel/js/bootstrap.bundle.min.js?version=3.12.0"></script>

	<!-- Load Bludit Plugins: Site Body End -->
	<script>var links = document.querySelectorAll( 'a' );  for (var i = 0, length = links.length; i < length; i++) {if (links[i].hostname != window.location.hostname) {links[i].target = '_blank';}}</script>

<script src="/blog/bl-plugins/viewerjs/js/viewer.js"></script>

</body>
</html>