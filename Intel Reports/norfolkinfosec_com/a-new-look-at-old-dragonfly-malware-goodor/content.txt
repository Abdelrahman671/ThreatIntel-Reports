<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://norfolkinfosec.com/xmlrpc.php">


<title>A New Look at Old Dragonfly Malware (Goodor) &#8211; One Night in Norfolk</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; Feed" href="https://norfolkinfosec.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; Comments Feed" href="https://norfolkinfosec.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; A New Look at Old Dragonfly Malware (Goodor) Comments Feed" href="https://norfolkinfosec.com/a-new-look-at-old-dragonfly-malware-goodor/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/norfolkinfosec.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://norfolkinfosec.com/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='coral-dark-style-css' href='https://norfolkinfosec.com/wp-content/themes/coral-dark/style.css?ver=6.7.1' type='text/css' media='all' />
<style id='coral-dark-style-inline-css' type='text/css'>
h1.site-title, h3.site-title { font-family: Arial, Helvetica, sans-serif;}
		
		body, button, input, select, textarea {	font-size: 12px;}
		h1.site-title, h3.site-title {
			margin-top: 25px; 
			font-size: 30px; 
		}
		h1.site-title a,
		h1.site-title a:visited,
		h1.site-title a:hover,
		h1.site-title a:active,
		h1.site-title a:focus,
		h3.site-title a,
		h3.site-title a:visited,
		h3.site-title a:hover,
		h3.site-title a:active,
		h3.site-title a:focus {
			color: #eeeeee !important;
		}
		
		h2.site-description, h4.site-description {
			margin-top: 5px;
			font-size: 14px;
			color: #999999;
		}
		.custom-logo {max-height: 100px;}
		@media screen and (min-width: 768px) {
			.main-navigation {margin-top: 15px;}
			#search1 {margin-top: 42px;}
			#social1 {margin-top: 47px;}
		}
	
</style>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/jquery.nivo.slider.pack.js?ver=3.2" id="nivo-slider-js"></script>
<link rel="https://api.w.org/" href="https://norfolkinfosec.com/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://norfolkinfosec.com/wp-json/wp/v2/posts/332" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://norfolkinfosec.com/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://norfolkinfosec.com/a-new-look-at-old-dragonfly-malware-goodor/" />
<link rel='shortlink' href='https://norfolkinfosec.com/?p=332' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://norfolkinfosec.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnorfolkinfosec.com%2Fa-new-look-at-old-dragonfly-malware-goodor%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://norfolkinfosec.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnorfolkinfosec.com%2Fa-new-look-at-old-dragonfly-malware-goodor%2F&#038;format=xml" />
		<style type="text/css" id="wp-custom-css">
			.wp-block-table td { font-size: 12pt; }		</style>
		</head>

<body class="post-template-default single single-post postid-332 single-format-standard wp-embed-responsive">
<div id="page" class="hfeed site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header grid-container" role="banner">
		<div class="site-branding egrid  grid-35 tablet-grid-35 mobile-grid-100">
												<h3 class="site-title"><a href="https://norfolkinfosec.com/" rel="home">One Night in Norfolk</a></h3>
					<h4 class="site-description">Reverse Engineering and Malware Analysis</h4>
					
							
		</div><!-- .site-branding -->
		<div id="headerright" class="grid-parent egrid  grid-65 tablet-grid-65 mobile-grid-100">
			
			<div id="social1" class="egrid  grid-60 tablet-grid-60 mobile-grid-100">
							</div>
			
			<div id="search1" class="search  grid-40 tablet-grid-40 mobile-grid-100">
				<div class="search-container">
<form role="search" method="get" class="search-form" action="https://norfolkinfosec.com/">
	<fieldset>
		<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:" />
		<input type="submit" class="search-submit" value="" />
	</fieldset>
</form>
</div>			</div>
		</div>

		<nav id="site-navigation" class="main-navigation egrid grid-100 tablet-grid-100 mobile-grid-100" role="navigation">
			<i id="menu-button" class="fa fa-bars collapsed"><span>  Menu</span></i>
			<div class="menu-primary-menu-container"><ul id="main-menu" class="sm sm-clean collapsed"><li id="menu-item-15" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-15"><a href="https://norfolkinfosec.com">Home</a></li>
<li id="menu-item-69" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-69"><a href="https://norfolkinfosec.com/contact/">Contact Me</a></li>
<li id="menu-item-266" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-266"><a href="https://norfolkinfosec.com/pretzels/">Pretzels</a></li>
<li id="menu-item-373" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-373"><a href="https://norfolkinfosec.com/presentations/">Presentations</a></li>
</ul></div>		</nav><!-- #site-navigation -->
	</header><!-- #masthead -->

		
<!-- breadcrumbs from Yoast or NavXT plugins -->
		
	<div id="content" class="site-content grid-container">

	<div id="primary" class="content-area egrid  grid-85 tablet-grid-85 mobile-grid-100 push-15 tablet-push-15">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-332" class="post-332 post type-post status-publish format-standard hentry category-uncategorized tag-dragonfly tag-dymalloy tag-goodor">
	<header class="entry-header">
		<h1 class="entry-title">A New Look at Old Dragonfly Malware (Goodor)</h1>
		<div class="entry-meta">
			<span class="posted-on"><a href="https://norfolkinfosec.com/a-new-look-at-old-dragonfly-malware-goodor/" rel="bookmark"><time class="entry-date published" datetime="2020-03-30T03:45:08+00:00">March 30, 2020</time><time class="updated" datetime="2020-03-30T03:45:09+00:00">March 30, 2020</time></a></span><span class="byline"> <span class="author vcard"><a class="url fn n" href="https://norfolkinfosec.com/author/norfolkadmin/">norfolk</a></span></span>		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content">
		
		
<p style="font-size:12px" class="has-text-align-left">From time to time, new tools emerge that make it significantly easier to examine older malware. In 2017, Symantec&#8217;s threat intelligence team <a href="https://symantec-blogs.broadcom.com/blogs/threat-intelligence/dragonfly-energy-sector-cyber-attacks">published research</a> regarding the Dragonfly group, an adversary with an apparent interest in performing reconnaissance against energy sector companies. One of the reported malware families, &#8220;Backdoor.Goodor,&#8221; is written in Golang and the blog post states that it &#8220;provides the attackers with remote access to the victim’s machine.&#8221; <br><br>In recent years, several free options have become available to help reverse engineer these types of Golang binaries, replacing premium (<a href="https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/">but extremely well documented</a>) methods and making this type of analysis particularly more accessible. <br><br>This post walks through the reverse engineering of a Goodor file, examining its capabilities and discussing key principles of these types of files. </p>



<span id="more-332"></span>



<p style="font-size:12px" class="has-text-align-left"><strong><span style="text-decoration: underline;">Key Concepts</span><br></strong><br>This blog notes that there are a few key concepts relevant to understanding Golang binaries:<br><br>&#8211; When first disassembled, Golang binaries will have a nearly unreadable number of unlabeled functions<br>&#8211; Golang binaries contain a section referred to as &#8220;gopclntab&#8221; that stores function information.<br>&#8211; For Linux/Unix binaries, this is an actual named section. For Windows binaries, it is not.<br>&#8211; This section has the same &#8220;magic bytes&#8221; in both types of binaries and follows a uniform structure.<br><br>In particular, this blog recommends that those interested in a deeper understand of the subject start by watching Joakim Kennedy&#8217;s <a href="https://www.youtube.com/watch?v=KFitDf_XPYE">two </a><a href="https://www.youtube.com/watch?v=Nq2fiw8LeIo">presentations </a>which provide significant detail regarding the structure of Golang binaries. Mr. Kennedy&#8217;s tool, <a href="https://github.com/goretk/redress">Redress</a>, is a key part of current Golang reverse engineering and is used in this analysis.<br><br>Finally, this analysis uses <a href="https://github.com/radareorg/cutter">Cutter</a>, a GUI-based implementation of the Radare2 framework. When a Golang Linux binary is opened in Radare2 or Cutter, both tools automatically identify the gopclntab section, parse function names from this section, and relabel the assembly as needed. However, this blog noted that they did not behave this way for Windows binaries, where this section is not explicitly created. Redress provides a workaround for this issue. <br><br>This post relies on a Linux VM for Cutter, Radare2, and Redress, as the Windows version of Cutter didn&#8217;t allow for the execution of Redress in the command line and the Windows version of Radare2 functioned poorly with #!pipe commands. The debugging itself takes place in a Windows VM. <br><br><br><strong><span style="text-decoration: underline;">Technical Analysis &#8211; Initial File</span><br></strong><br>File: ntdll_installer.exe<br>MD5: f2edff3d0e5a909c8d05b04905642105<br>SHA1: c8c8329449c18445330903dd6a59d0b4098d9670<br>SHA256: 5a7ace894461c2432fe9b52254cbc5c3f5bbce0c91a416154511a554dba6f913<br><br>This blog revisits an older malware family with newer tools to obtain a better understanding of the file. One place to start is Symantec&#8217;s <a href="https://web.archive.org/web/20190410115532/https://www.symantec.com/security-center/writeup/2017-071207-0015-99">original write-up</a>, which stated:<br><br>1. &#8220;Backdoor.Goodor&#8230; opens a backdoor on the compromised computer&#8221;<br>2. &#8220;When the Trojan is executed, it copies itself to the following location&#8230;&#8221;<br>3.  It &#8220;creates the following registry entry&#8230;&#8221;<br>         %AppData%\NT\ntdll.exe ddd-073d7bac5d624bb40adbb25f55eb693d <br><br>This blog notes that the current Google-indexed page for this malware leads to a Broadcom page that states, &#8220;You have arrived at this page either because you have been alerted by your Symantec product about a risk, or you are concerned that your computer has been affected by a risk.&#8221; As neither statement is true, this blog has linked to the archived version instead. <br><br>As this analysis will show, Symantec&#8217;s write-up is a close approximation that&#8217;s not <em>quite</em> forensically accurate. The &#8220;copied&#8221; file is actually a dropped embedded file, and the registry entry changes slightly from device to device.<br><br><span style="text-decoration: underline;"><em>Identify Function Names</em><br></span><br>The first step for this analysis is to use the Redress tool with the -src switch to identify function names. When run against this file, the tool produces the following output:<br><br>Package main: C:\Users\User\go\src\i<br> File: i_main.go    <br>     main Lines: 15 to 19 (4)    <br>     TryDoMain Lines: 19 to 29 (10)  <br>     TryDoMainfunc1 Lines: 20 to 24 (4)  <br>     DoMain Lines: 29 to 61 (32) <br>     GetFn Lines: 61 to 76 (15)  <br>     CreateBat Lines: 76 to 110 (34) <br>     StartA Lines: 110 to 113 (3)    <br> File: r.go.template.impl.go    <br>     init Lines: 6 to 6 (0)  <br> Package e: C:\Users\User\go\src\e<br> File: e.go    <br>     Decode Lines: 53 to 93 (40) <br>     Decodefunc1 Lines: 70 to 155 (85)   <br>     FromB64 Lines: 93 to 121 (28)   <br>     Decrypt Lines: 121 to 144 (23)  <br>     HashStr Lines: 144 to 150 (6)   <br>     RandomHashString Lines: 150 to 153 (3)  <br>     init Lines: 155 to 155 (0)<br><br>This output represents the author-added functions to a Golang binary. Golang binaries are large as they also incorporate dozens (or hundreds) of additional library functions, and so this output separates the most important sections. <br><br>The output also provides some hints: we can postulate that the malware likely performs some sort of Base64 decoding and decryption (FromB64, Decode, Decrypt) and may also create a .bat file (CreateBat). Notably, we <em>don&#8217;t</em> see anything indicative of command-and-control (C2) traffic. <br><br><em><span style="text-decoration: underline;">Create a Function Map</span><br></em><br>With the primary functions identified, we can map them out. Open the binary in Cutter with the slider for analysis all the way to the left, indicating <em>no</em> analysis. Using #!pipe, run the Redress tool. Finally, run &#8220;aaaa&#8221; to perform analysis and go to View-> Refresh Contents. </p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img fetchpriority="high" decoding="async" width="486" height="270" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/redress_example.png" alt="" class="wp-image-352" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/redress_example.png 486w, https://norfolkinfosec.com/wp-content/uploads/2020/03/redress_example-300x167.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/redress_example-210x117.png 210w" sizes="(max-width: 486px) 100vw, 486px" /><figcaption><strong>#!pipe command used within the Cutter console to launch Redress. Note that some error messages were cropped for readability. These can be ignored.</strong></figcaption></figure></div>



<p style="font-size:12px">With the function names populated, we can begin mapping out a smaller call-tree. As with other disassemblers, we can select each function name in graph mode or use the cross-referencing features to identify function relationships. For example, DoMain makes several additional calls in the following order: <br><br>&#8211; Decode <br>&#8211; GetFn <br>&#8211; RandomHashString <br>&#8211; StartA<br>&#8211; CreateBat<br><br>Decode, in turn, calls &#8220;FromB64&#8221; and &#8220;Decrypt.&#8221; Using this information, we can construct a simple call map.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" width="911" height="641" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/blog_1-1.png" alt="" class="wp-image-334" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/blog_1-1.png 911w, https://norfolkinfosec.com/wp-content/uploads/2020/03/blog_1-1-300x211.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/blog_1-1-768x540.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/blog_1-1-210x148.png 210w" sizes="(max-width: 911px) 100vw, 911px" /><figcaption><strong>DoMain calling StartA</strong></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" width="1024" height="390" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1-1024x390.png" alt="" class="wp-image-336" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1-1024x390.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1-300x114.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1-768x292.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1-210x80.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/Godoor_simplified-1.png 1111w" sizes="(max-width: 980px) 100vw, 980px" /><figcaption> <strong>Simplified function map. Calls are ordered from left-to-right and top-to-bottom.</strong> </figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">This particular sample only uses each of these functions one time, providing an easy-to-understand workflow. This is of course not necessarily typical for all malware. The graph above may also be <em>too</em> simple, as it omits several important native Golang calls that could provide a broader understanding of some of these functions. <br><br>Consider the GetFN function: within this function are calls such as &#8220;GetEnv,&#8221; &#8220;TempDir,&#8221; and &#8220;MkdirAll&#8221; that strongly suggest that a file and/or folder is being written to a specific path. Without this information, one might have assumed &#8220;GetFN&#8221; was simply obtaining the name of a file (or the file running). With that in mind, we can create a more complete graph, with boxes differentiating the native calls.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="529" height="1024" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/complex_graph_reason-529x1024.png" alt="" class="wp-image-337" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/complex_graph_reason-529x1024.png 529w, https://norfolkinfosec.com/wp-content/uploads/2020/03/complex_graph_reason-155x300.png 155w, https://norfolkinfosec.com/wp-content/uploads/2020/03/complex_graph_reason-108x210.png 108w, https://norfolkinfosec.com/wp-content/uploads/2020/03/complex_graph_reason.png 560w" sizes="auto, (max-width: 529px) 100vw, 529px" /><figcaption><strong>GetFN function with native calls</strong></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="538" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph-1024x538.png" alt="" class="wp-image-338" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph-1024x538.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph-300x157.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph-768x403.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph-210x110.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/go_complex_graph.png 1141w" sizes="auto, (max-width: 980px) 100vw, 980px" /><figcaption><strong>Function call graph with native calls added in as rectangles.</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">With these functions mapped out, we can hypothesize a workflow such as:<br><br>1. The malware Base64 decodes and then decrypts <em>something</em>.<br>2. The malware creates a filename and/or directory <em>somewhere</em>, possibly in the Temp directory.<br>3. The malware writes <em>something</em> to the disk.<br>4. The malware calls StartA, which executes <em>something</em>. <br>5. The malware creates and runs a .bat file. <br><br>It&#8217;s time to begin debugging to test these hypotheses. <br> <br><span style="text-decoration: underline;"><em>Debugging</em></span><br><br>I prefer the x96 suite for debugging. The most important thing to do before actually running the debugger is to rename the key functions we&#8217;ve identified. These include the author-added Golang functions plus any other interesting ones, such as those within the GetFN call. There are a few options here; in this case, I opted to do this manually, but you can also use Radare/Cutter + Redress + the &#8220;aaaa&#8221; and &#8220;afl&#8221; commands to get an address-function pair list (copying it to a file), and then <a href="https://isc.sans.edu/diary/Enriching+Radare2+and+x64dbg+malware+analysis+with+statically+decoded+strings/24146">create a comment or label script for x96dbg</a>. For a larger file, that might be the most practical approach.  <br><br>The first order of business is to examine the decoding hypothesis. The malware contains a large block of Base64-encoded data, visible in the strings via Process Hacker. As the string is several thousand characters long, it is easy to stop in a single memory section. After stepping over the Decode function (which in turn triggers the FromB64 and Decrypt calls), this section will populate with the decoded and then decrypted data:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="419" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode-1024x419.png" alt="" class="wp-image-340" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode-1024x419.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode-300x123.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode-768x314.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode-210x86.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/GoDoor_Decode.png 1326w" sizes="auto, (max-width: 980px) 100vw, 980px" /><figcaption><strong>Decoding and Decrypting</strong></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="271" height="294" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/UPX2.png" alt="" class="wp-image-341" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/UPX2.png 271w, https://norfolkinfosec.com/wp-content/uploads/2020/03/UPX2-194x210.png 194w" sizes="auto, (max-width: 271px) 100vw, 271px" /><figcaption><strong>Executable decrypted in memory</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">Next, is the GetFN function call. Earlier, we hypothesized that this should create a file path or directory in the user&#8217;s Temp folder. Stepping through this function, we can see it creates a directory at AppData\Roaming\NT\</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="947" height="425" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/directory_create.png" alt="" class="wp-image-342" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/directory_create.png 947w, https://norfolkinfosec.com/wp-content/uploads/2020/03/directory_create-300x135.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/directory_create-768x345.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/directory_create-210x94.png 210w" sizes="auto, (max-width: 947px) 100vw, 947px" /><figcaption><strong>Directory creation within GetFN function.</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">The malware will also create a filename, ntdll.exe, and append it to this path. When the function exits, it uses the WriteFile call to write the decoded executable to this location. The StartA function then issues a system command to run this. For the purposes of this analysis, I copied the executable to the desktop and replaced it with a renamed FakeNet Mini executable to examine the CreateBat function. <br><br>From a static perspective, CreateBat demonstrates a string load. The program identifies the address and length (in this case, 25 characters) of a string containing a ping command. The rest of the function also performs a string replacement for a registry key value to be added. The end result is a .bat file written to disk:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="54" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/bat-1024x54.png" alt="" class="wp-image-343" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/bat-1024x54.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/bat-300x16.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/bat-768x40.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/bat-210x11.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/bat.png 1387w" sizes="auto, (max-width: 980px) 100vw, 980px" /><figcaption><strong>.bat file written to disk</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">This file creates an HKCU runkey that will cause the dropped payload to execute any time the user logs in. It will also silently delete the initial dropper and delete itself. Following the execution of this batch file, the program terminates itself. At this point, we can look at the dropped payload.</p>



<p style="font-size:12px" class="has-text-align-left"><strong><span style="text-decoration: underline;">Technical Analysis &#8211; Dropped Payload</span></strong><br><br>The dropped payload is a UPX-packed Windows executable.<br><br>Filename: ntdll.exe<br>MD5 (packed): 8943E71A8C73B5E343AA9D2E19002373<br>MD5 (unpacked): ca818c14f69bef7695c0e2ff127e6d9b<br>SHA1 (unpacked): 115d12e0fb73445a788ebe7bdf3cab552b3cb9af<br>SHA256 (unpacked): b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46<br><br>Following the same steps as above, we can identify the author-created functions.<br><br>Package e: C:\Users\User\go\src\e<br> File: e.go    <br>     Decode Lines: 53 to 93 (40) <br>     Decodefunc1 Lines: 70 to 155 (85)   <br>     FromB64 Lines: 93 to 121 (28)   <br>     Decrypt Lines: 121 to 144 (23)  <br>     HashStr Lines: 144 to 150 (6)   <br>     RandomHashString Lines: 150 to 153 (3)  <br>     init Lines: 155 to 155 (0)  <br> Package main: C:\Users\User\go\src\m<br> File: m_main.go    <br>     main Lines: 17 to 21 (4)    <br>     TryDoMain Lines: 21 to 31 (10)  <br>     TryDoMainfunc1 Lines: 22 to 44 (22) <br>     DoMain Lines: 31 to 43 (12) <br>     TryDoIter Lines: 43 to 57 (14)  <br>     TryDoIterfunc1 Lines: 44 to 166 (122)   <br>     DoIter Lines: 57 to 100 (43)    <br>     GetU Lines: 100 to 117 (17) <br>     OnData Lines: 117 to 146 (29)   <br>     Execute Lines: 146 to 151 (5)   <br>     GetHttp Lines: 151 to 160 (9)   <br>     CreateTempFileName Lines: 160 to 164 (4)    <br>     init Lines: 166 to 166 (0)  <br><br>A few things should stand out. First, the &#8220;e&#8221; package appears to be reused, alongside all of the decoding and decryption functions. However, this is clearly <em>not</em> a &#8220;copy&#8221; of the initial dropper. The primary package has new functions, such as GetHttp, OnData, CreateTempFileName, and execute. Using the same strategy as before, we can map some key functions out. </p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="274" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-1024x274.png" alt="" class="wp-image-344" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-1024x274.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-300x80.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-768x205.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-1536x411.png 1536w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph-210x56.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondgraph.png 1586w" sizes="auto, (max-width: 980px) 100vw, 980px" /><figcaption><strong>Function tree for dropped Goodor payload</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">As with the previous graph, the code structure (for this particular example &#8211; again, most samples are less linear)  is such that we can read left-to-right and top-to-bottom. We might expect that:<br><br>1. The malware runs GetU. Perhaps this obtains the username (it does not, but that was my initial guess).<br>2. The malware establishes an HTTP connection.<br>3. The malware checks to see if it gets a response, and if so, Base64 decodes and then decrypts that response.<br>4. The malware creates a filename for a target in the Temp directory.<br>5. The malware writes the decoded data to this file.<br>6. The malware executes this file.<br><br>For this example, I opted to use radare2 + redress, followed by piping the output of the &#8220;afl&#8221; function to a file. With some Notepad++ regex, I used the function addresses to make a basic x96dbg script to re-label all of the addresses. See here for an <a href="https://isc.sans.edu/diary/Enriching+Radare2+and+x64dbg+malware+analysis+with+statically+decoded+strings/24146">example </a>from another analyst (replacing cmt with <a href="https://help.x64dbg.com/en/latest/commands/user-database/labelset.html">lbl</a>). I mainly did this for performance reasons, and to demonstrate an additional option readers.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="733" height="319" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/secondoption-1.png" alt="" class="wp-image-347" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/secondoption-1.png 733w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondoption-1-300x131.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/secondoption-1-210x91.png 210w" sizes="auto, (max-width: 733px) 100vw, 733px" /><figcaption><strong>Redress and dumping a function list</strong></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="662" height="513" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/label_Script.png" alt="" class="wp-image-348" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/label_Script.png 662w, https://norfolkinfosec.com/wp-content/uploads/2020/03/label_Script-300x232.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/label_Script-210x163.png 210w" sizes="auto, (max-width: 662px) 100vw, 662px" /><figcaption><strong>Example of a labeling script for x96dbg</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">Debugging the malware, we can get through the GetU function before we start to run into some obstacles that will hinder a full analysis. Recall that we hypothesized that GetU could return the username. It actually creates the string for the GET request sent to the C2 server:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="542" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/C2-1024x542.png" alt="" class="wp-image-350" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/C2-1024x542.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2020/03/C2-300x159.png 300w, https://norfolkinfosec.com/wp-content/uploads/2020/03/C2-768x406.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/C2-210x111.png 210w, https://norfolkinfosec.com/wp-content/uploads/2020/03/C2.png 1393w" sizes="auto, (max-width: 980px) 100vw, 980px" /><figcaption><strong>C2 string building function</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">Right click and open in a new tab to zoom in a bit. The GetU function pulls one of five hardcoded C2 servers and appends an identifier string to it:<br><br>hxxp: // 176.53.11[.]130/aspnet_client/system_web/4_0_30319/update/DefaultForm.txt<br>hxxp: // 82.222.188[.]18/aspnet_client/system_web/4_0_30319/update/DefaultForm.txt<br>hxxp: // 130.25.10[.]158/aspnet_client/system_web/4_0_30319/update/DefaultForm.aspx<br>hxxp: // 41.205.61[.]221/aspnet_client/system_web/4_0_30319/update/DefaultForm.aspx<br>hxxp: // 5.150.143[.]107/aspnet_client/system_web/4_0_30319/update/DefaultForm.aspx<br><br>One of these values, boxed in red above, remained consistent through different runs of the malware. This value, 881456fc, also appears in <a href="https://www.virustotal.com/gui/file/b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46/behavior/VirusTotal%20Cuckoofork">VirusTotal runs</a> of the malware in the behavior tab. If the file is run with a command line argument (as the runkey would cause), this value is appended with that argument. If not, the value is appended with &#8220;no&#8221; instead. One possibility is that this serves as a campaign ID and a device identifier.<br><br>At this stage, the analysis ran into some hurdles that could not be overcome. The malware didn&#8217;t appear to call out to the C2 server during the GetHTTP call, limiting confirmation of the remainder of the suspected functionality. Still, we can make some pretty strong inferences from the final call of the workflow, OnData:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="963" height="1024" src="https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata-963x1024.png" alt="" class="wp-image-351" srcset="https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata-963x1024.png 963w, https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata-282x300.png 282w, https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata-768x817.png 768w, https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata-197x210.png 197w, https://norfolkinfosec.com/wp-content/uploads/2020/03/ondata.png 979w" sizes="auto, (max-width: 963px) 100vw, 963px" /><figcaption><strong>OnData workflow</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">The workflow strongly suggests that something is Base64 decoded and decrypted, written to disk at a generated location, and then executed. Symantec&#8217;s original report suggested that several other backdoors were deployed against victims. It is therefore possible that Goodor was used to deliver a tool such as a screen grabber, the Karagany backdoor, or one of several other payloads. <br><br><strong><span style="text-decoration: underline;">Concluding Thoughts</span></strong><br><br>A few simple contemporary tools make analyzing Golang malware significantly easier than it was in the past, particularly for those lacking access to premium tools such as IdaPro. Radare2, Cutter, and Redress can combine to create a workflow where the user can rename Golang functions, navigate a graph, and debug malware significantly easier than in the past. <br><br>During this research, I ran a retrohunt to try to identify additional samples that contained the same encoding functions or matched other function names from the dropper and payload. Unfortunately, while I found other hashes, none were &#8220;new.&#8221; This may have been a one-time use tool from the threat actor, or the function names may have been renamed in different versions. </p>



<p style="font-size:12px" class="has-text-align-left"><br><br></p>
			</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="update">Updated: <a href="https://norfolkinfosec.com/a-new-look-at-old-dragonfly-malware-goodor/" rel="bookmark"><time class="published updated" datetime="2020-03-30T03:45:09+00:00">March 30, 2020</time></a></span><br><span class="tags-links">Tags: <a href="https://norfolkinfosec.com/tag/dragonfly/" rel="tag">Dragonfly</a>, <a href="https://norfolkinfosec.com/tag/dymalloy/" rel="tag">Dymalloy</a>, <a href="https://norfolkinfosec.com/tag/goodor/" rel="tag">Goodor</a></span>	</footer><!-- .entry-footer -->
</article><!-- #post-## -->
						
	<nav class="navigation post-navigation" aria-label="Post navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://norfolkinfosec.com/fuel-pumps-ii-poslurp-b/" rel="prev">Previous post</a></div><div class="nav-next"><a href="https://norfolkinfosec.com/looking-back-at-liteduke/" rel="next">Next post</a></div></div>
	</nav>
			
		
		</main><!-- #main -->
	</div><!-- #primary -->


<div id="secondary" class="widget-area egrid  grid-15 tablet-grid-15 mobile-grid-100 pull-85 tablet-pull-85" role="complementary">
</div><!-- #secondary -->

	</div><!-- #content -->

	<footer id="colophon" class="site-footer grid-container" role="contentinfo">
		<div class="grid-100 tablet-grid-100 mobile-grid-100"><div class="sepline2"></div></div>
		<div class="egrid  grid-70 tablet-grid-70 mobile-grid-100" id="footer-widget-copyright">
					</div>
		<div class=" grid-30 tablet-grid-30 mobile-grid-100">
			<a id="designer" class="alignright" href="https://www.coralthemes.com/product/coral-dark-wordpress-theme/">Free dark wordpress theme</a>
		</div>
		
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/jquery.smartmenus.min.js?ver=0.9.7" id="smartmenus-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/skip-link-focus-fix.js?ver=20130115" id="coral-dark-skip-link-focus-fix-js"></script>
<script type="text/javascript" id="coral-dark-script-js-extra">
/* <![CDATA[ */
var nivoSliderParams = {"effect":"fade","animspeed":"500","pausetime":"5000"};
/* ]]> */
</script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/functions.js?ver=20160427" id="coral-dark-script-js"></script>

</body>
</html>
