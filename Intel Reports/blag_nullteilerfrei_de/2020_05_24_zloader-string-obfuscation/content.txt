<!DOCTYPE html>
<html lang="en-US" >
<head>
		<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="profile" href="http://gmpg.org/xfn/11" />
			<link rel="pingback" href="https://blag.nullteilerfrei.de/xmlrpc.php">
		<title>Zloader String Obfuscation &#8211; nullteilerfrei</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Feed" href="https://blag.nullteilerfrei.de/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Comments Feed" href="https://blag.nullteilerfrei.de/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Zloader String Obfuscation Comments Feed" href="https://blag.nullteilerfrei.de/2020/05/24/zloader-string-obfuscation/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blag.nullteilerfrei.de\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://blag.nullteilerfrei.de/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='katex-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/bootstrap.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/font-awesome.css?ver=4.6.3' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-default-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/style.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-core-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style.css?ver=1.1.5' type='text/css' media='all' />
<style id='switty-style-core-inline-css' type='text/css'>

			.gridpostloop {
			  width: 100%;
			}
		
			@media (min-width: 768px) {
				.woocommerce ul.products li.product, .woocommerce-page ul.products li.product {
					width: 22%;
				}
			}
			
</style>
<link rel='stylesheet' id='switty-style-woo-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style-woo.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='kirki_google_fonts-css' href='https://fonts.googleapis.com/css?family=Libre+Baskerville%3Aregular%7CArvo%3Aregular%7CRajdhani%3A500%7CRoboto%3Aregular&#038;subset' type='text/css' media='all' />
<link rel='stylesheet' id='kirki-styles-switty_config-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/inc/frameworks/kirki/assets/css/kirki-styles.css' type='text/css' media='all' />
<style id='kirki-styles-switty_config-inline-css' type='text/css'>
body{font-family:"Libre Baskerville", Georgia, serif;font-weight:400;font-style:normal;text-align:inherit;color:#ffffff;}body h1, .h1{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h2, .h2{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h3, .h3{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h4, .h4{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h5, .h5{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h6, .h6{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}#maincontainer p{font-family:"Libre Baskerville", Georgia, serif;font-size:16px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}#navbar ul.navbar-nav li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;text-align:inherit;color:#ffffff;}.side-menu-menu-wrap ul li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}.widget_sidebar_main ul li, .widget_sidebar_main ol li{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer-copyright{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#BCBCBC;background-color:#111111;}body a, .woocommerce .star-rating span{color:#358247;}.widget_sidebar_main .right-widget-title-spn{border-bottom-color:#358247;}.navigation.pagination .nav-links .page-numbers, .navigation.pagination .nav-links .page-numbers:last-child{border-color:#358247;}.woocommerce .widget_price_filter .ui-slider .ui-slider-handle, .woocommerce .widget_price_filter .ui-slider .ui-slider-range{background-color:#358247;}body a:hover{color:#000000;}.spclbtn, #back-to-top{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit, .woocommerce a.button, .woocommerce button.button, .woocommerce input.button{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit:hover, .woocommerce a.button:hover, .woocommerce button.button:hover, .woocommerce input.button:hover{color:#ffffff;background-color:#000000;}.woocommerce #respond input#submit.alt, .woocommerce a.button.alt, .woocommerce button.button.alt, .woocommerce input.button.alt{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit.alt:hover, .woocommerce a.button.alt:hover, .woocommerce button.button.alt:hover, .woocommerce input.button.alt:hover{color:#ffffff;background-color:#000000;}.woocommerce-product-search input[type="submit"]{color:#ffffff;background-color:#358247;}.wpcf7-form .wpcf7-form-control.wpcf7-submit{color:#ffffff;background-color:#358247;}.spclbtn:hover, #back-to-top:hover{background-color:#000000;}.woocommerce-product-search input[type="submit"]:hover{background-color:#000000;}.wpcf7-form .wpcf7-form-control.wpcf7-submit:hover{background-color:#000000;}#navbar .navbar-brand{color:#E2E2E2;}.navbar-default .navbar-nav > li > a{color:#E2E2E2;}.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus{color:#ffffff;}.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus{color:#ffffff;}.navbar-default .navbar-nav > li.current-menu-parent > a{color:#ffffff;}#navbar{background-color:rgba(1, 9, 3, 0.50);}.afterscroolnav{background-color:rgba(1, 9, 3, 0.30)!important;}#navbar .dropdown-menu a{color:#6b6b6b;background-color:#f4f4f4;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu > .active > a:hover, #navbar .dropdown-menu > .active > a:focus{color:#000000;}#navbar .dropdown-menu a:hover{color:#000000;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu a:hover, #navbar .dropdown-menu > a:focus{background-color:#358247;}.postsloop{background-color:#ffffff;}.sticky{background-color:#d3d3d3;}#comments .comment.even{color:#000000;background-color:#f8f8f8;}#comments .pingback.even{color:#000000;background-color:#f8f8f8;}#comments .comment.odd{color:#000000;background-color:#eeeeee;}#comments .pingback.odd{color:#000000;background-color:#eeeeee;}.footer-copyright a{color:#395132;}.footer-copyright a:hover{color:#44C47E;}#logoasimg .custom-logo{width:200px;}
</style>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/en-spam/en-spam.js?ver=6.7.1" id="en-spam-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/showdown.min.js?ver=6.7.1" id="showdown-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/html5shiv.js?ver=3.7.3" id="html5shiv-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/respond.js?ver=1.1.5" id="respond-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://blag.nullteilerfrei.de/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://blag.nullteilerfrei.de/wp-json/wp/v2/posts/5258" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blag.nullteilerfrei.de/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://blag.nullteilerfrei.de/2020/05/24/zloader-string-obfuscation/" />
<link rel='shortlink' href='https://blag.nullteilerfrei.de/?p=5258' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F05%2F24%2Fzloader-string-obfuscation%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F05%2F24%2Fzloader-string-obfuscation%2F&#038;format=xml" />
<style type="text/css" id="custom-background-css">
body.custom-background { background-image: url("https://blag.nullteilerfrei.de/wp-content/uploads/2017/06/bg_bw.jpg"); background-position: center center; background-size: cover; background-repeat: no-repeat; background-attachment: fixed; }
</style>
	</head>

<body class="post-template-default single single-post postid-5258 single-format-standard custom-background" >

<nav id="navbar" class="navbar navbar-default navbar-fixed-top" >
<div class="container">
	<div class="navbar-header">
		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
			<span class="sr-only">Toggle navigation</span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>
					<a class="navbar-brand" href="https://blag.nullteilerfrei.de/"> nullteilerfrei</a>
				
	</div>
						
	<div id="bs-example-navbar-collapse-1" class="collapse navbar-collapse"><ul id="primary-menu" class="nav navbar-nav navbar-right"><li id="menu-item-3880" class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880">			<form  class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880" role="search" method="get" action="https://blag.nullteilerfrei.de/">
								<div>
					<label class="screen-reader-text" for="s">Search</label>					<input type="text" value="" name="s" id="s" />
											<input type="submit" id="searchsubmit" value="search" />
									</div>
			</form>
		</li>
<li id="menu-item-272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-272"><a title="about" href="https://blag.nullteilerfrei.de/about/"><span class="glyphicon The who, the what, the why."></span>&nbsp;about</a></li>
<li id="menu-item-3858" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3858"><a title="admin" href="https://blag.nullteilerfrei.de/wp-admin/">admin</a></li>
</ul></div></div>
</nav>




<div id="maincontainer" class="container-fluid mrt50 mrb35">
	<div class="container">
		<div class="row">

<div class="col-md-12">
	<div id="post-5258" class="clearfix postsloop mrt50 post-5258 post type-post status-publish format-standard hentry category-malware category-tech tag-ghidra tag-malware tag-string-deobfuscation tag-zloader">
	<div class="content-first pdb20" itemscope itemtype="http://schema.org/CreativeWork">

					
		<div class="content-second pdl20 pdr20">
			<h1 class="the-title entry-title" itemprop="headline">Zloader String Obfuscation</h1>
		</div>
					
		<div class="content-third pdl20 pdr20">
			
			
	<hr class="mrt10 mrb10" />
	
	<span class="switty-entry-meta">
		
		<span class="vcard author" itemprop="author" itemscope itemtype="http://schema.org/Person"><span class="fn"> <a class="url authorurl" rel="author" itemprop="url" href="https://blag.nullteilerfrei.de/author/born/" ><span itemprop="name">born</span></a></span></span>
						
					<span class="categoryurl"><a href="https://blag.nullteilerfrei.de/category/tech/malware/" rel="category tag">malware-analysis</a>, <a href="https://blag.nullteilerfrei.de/category/tech/" rel="category tag">technology</a></span>
								
		<a href="https://blag.nullteilerfrei.de/2020/05/24/zloader-string-obfuscation/" ><span class="post-date updated" itemprop="dateModified">2020-05-24</span></a>
						
	</span>
			
	<hr class="mrt10 mrb10" />

				
			<div class="entry-content" itemprop="text">
					
				<div class='showdown'>This blag post describes my though-process during identification of the string deobfuscation method in a sample belonging to the <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.zloader">Zloader</a> malware family. Specifically, I wanted to identify the function or functions responsible for string deobfuscation only using static analysis and Ghidra, understand the algorithm, emulate it in Java and implement a Ghidra script to deobfuscate all strings in a binary of this family. 

The target audience of this post are people that have some experience with static reverse engineering and Ghidra but who always asked themselves how the f those reversing wizards identify specific functionality within a binary without wasting hours, days and weeks.

<span id="more-5258"></span>

## Target Sample

We will be looking at the sample with SHA256 hash <code>4029f9fcba1c53d86f2c59f07d5657930bd5ee64cca4c5929cbd3142484e815a</code>, probably created on 2020-04-08 18:19:58. According to people on the internet, this sample leverages string obfuscation, API hashing, a Domain Generation Algorithm (DGA) and, code-level obfuscation techniques like constant unfolding, dead code insertion or arithmetic substitutions to hinder analysis. Right now, we only care about the string obfuscation and try to avoid looking at anything else.

<a href="https://www.fortinet.com/blog/threat-research/the-curious-case-of-an-unknown-trojan-targeting-german-speaking-users.html">The malware family was first mentioned publicly by Fortinet in mid 2016</a>: Their blog calls it _DELoader_ based on suspected targeting of Germany which in turn is based on geo-information of IPs in log files exposed by the operators in an open directory ("DE" is Germany's country code). The post also draws a connection to a handle _Aleksandr_ and usage of the banking Trojan _Zeus_, which seems to motivate the later name _Zloader_.

## Identify the Deobfuscation function

Following the list of heuristics from <a href="/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/">a previous blag post</a>, we start at the entry point and while trying to avoid code that's too complicated, find a function that is called in a lot of other places too and, which adheres to certain requirements on data flowing into and out of it. Without even traversing into any of the functions called after the entry point, we click every function and list its references (use <code>X</code> if you <a href="https://mal.re/tmp/ghIDA.kbxml">have the best Ghidra Keybindings available on the free market</a>). Here is a table of called functions together with their number of references (that is, not only calls at the entry point but in the whole binary):

| Function       | Xrefs |
|---             |---    |
| <code>FUN_030a3170</code> | 190   |
| <code>FUN_030ba440</code> | 55    |
| <code>FUN_030a3340</code> | 33    |
| <code>FUN_030ba030</code> | 30    |
| <code>FUN_030b8710</code> | 29    |
| <code>FUN_030b1760</code> | 19    |
| <code>FUN_030a3400</code> | 14    |
| <code>FUN_030ba300</code> | 10    |
| <code>FUN_030ba9d0</code> | 7     |
| ...            | ...   |

The list is sorted by the number of references and we will work our way down from the highest number of cross references (<a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/ListCallsWithXrefs.java">is a handy script to generate such a list of functions together with their number of cross-references</a>).

## First Things First

The first candidate is <code>FUN_030a3170</code>. It seems to receive two arguments, both of which are used in conjunction with arithmetic operators like <code>%</code> and <code>&lt;</code>. This makes it plausible that Ghidra correctly guessed their types to be numbers. So if this is indeed a string deobfuscation function, it needs to access some sort of global variable containing the obfuscated variant of the string. In order for this function to be able to deobfuscate more than one string, at least one of the two arguments should determine the concrete string within that global variable. But before we dive into that, let us double check that the data types of the arguments are correct by listing a few calls of the function:

<pre><code class="c">pcVar1 = (code *)FUN_030a3170(0,0x6aa0e84);
iVar2 = (*pcVar1)(2,0);
[...]
pcVar1 = (code *)FUN_030a3170(0,uVar3);
uVar3 = (*pcVar1)(iVar2,local_23c);
[...]
pcVar1 = (code *)FUN_030a3170(0,0xfed02a7);
iVar4 = (*pcVar1)(iVar2,local_23c);</code></pre>
So the first argument seems to be a small number and the second one a large one. What is more interesting though is, that the return value of this function is not used as a string but is _called_ directly after. This suggests that the function we are looking at is not responsible for string deobfuscation but merely to resolve some API functions, potentially with the help of API hashing (see <a href="/2019/11/09/api-hashing-why-and-how/">a post on API hashing if you want to learn about this technique in general</a>). Let's rename the function to <code>pr_ResolveApi</code> and not investigate it any further, we are here for string deobfuscation!

## First Try, Second Attempt

<code>FUN_030ba440</code> is a very short function that just calls <code>FUN_03091c50</code> if it didn't receive the <code>NULL</code> pointer as an argument. This function in turn calls two other functions, one of which is our <code>pr_ResolveApi</code>. The other called function seems to be junk code but overall I'm confident that this aren't the droids, we are looking for.

## Third Time's a Charm

Let's take a look at <code>FUN_030a3340</code>: Ghidra determined that the function receives two pointer arguments. Looking at a few calls to this function, the first argument always seems to be a global variable while the second argument is a local array variable. So if this is a string deobfuscation function, the first argument could be the obfuscated data while the second is a pointer where the result is written to. Following data flow within <code>FUN_030a3340</code> corroborates the second part of this hypothesis: the content of <code>param_2</code> is copied to a local variable which is later returned.

If the hypothesis is correct _and_ the malware sample uses an encryption scheme that needs a key, <code>FUN_030a3340</code> would need to access some global variable to be used as a key - because there is no parameter left for the key: according to our hypothesis, the first parameter is the obfuscated string while the second is an output parameter. The only global variable (shown in purple in Ghidra) within the function is <code>PTR_DAT_030be000</code>. This variable is used in two lines within <code>FUN_030a3340</code>:

<pre><code class="c">uVar4 = (short)(char)*PTR_DAT_030be000 ^ *param_1;
[...]
uVar1 = FUN_030aba90((uint)*(ushort *)((int)param_1 + iVar5), (short)(char)PTR_DAT_030be000[uVar6 % 0x11]);</code></pre>
Hence this variable probably contains a pointer to an array. This array is indexed with <code>uVar6 % 0x11</code> suggesting a length of 17:

<pre><code>00000000  59 49 2c 72 54 66 79 23  46 33 4d 61 71 31 33 69  |YI,rTfy#F3Maq13i|
00000010  66                                                |f|</code></pre>
At this point, instead of reverse engineering the whole function in detail, let's take a leap: In the first of the two code lines above, <code>PTR_DAT_030be000</code> is Xor-ed with the first element of the <code>param_1</code> array. Hence it may point to an Xor-key of length 17. Let's look up one of the passed arguments and Xor it with the above key: <code>puVar1 = FUN_030a3340((ushort *)ARRAY_030bc900,local_52);</code> references <code>ARRAY_030bc900</code> which contains the following data:

<pre><code>00000000  0a 00 26 00 4a 00 06 00  23 00 07 00 0b 00 46 00  |..&amp;.J...#.....F.|
00000010  1a 00 7e 00 24 00 02 00  03 00 5e 00 40 00 06 00  |..~.$.....^.@...|
00000020  00 00 2d 00 49 00                                 |..-.I.|</code></pre>
sadly, Xoring results in:

<pre><code>00000000  53 49 0a 72 1e 66 7f 23  65 33 4a 61 7a 31 75 69  |SI.r.f.#e3Jaz1ui|
00000010  7c 59 37 2c 56 54 64 79  20 46 6d 4d 21 71 37 33  ||Y7,VTdy FmM!q73|
00000020  69 66 74 49 65 72                                 |iftIer|</code></pre>
But you might have noticed that every second byte in the alleged obfuscated data is a zero-byte. This suggest that the data is in fact a wide string with all upper bytes set to zero. After removing the zero-bytes, Xoring results in the following:

<pre><code>00000000  53 6f 66 74 77 61 72 65  5c 4d 69 63 72 6f 73 6f  |Software\Microso|
00000010  66 74 00                                          |ft.|</code></pre>
We have found a string deobfuscation function! And we could also already determine that it uses Xor-encryption with a hard-coded key of length 17. Don't forget to rename <code>FUN_030a3340</code> to something like <code>ev_WideStringDeobfuscate</code>.

It is also plausible, and can be confirmed by reversing <code>ev_WideStringDeobfuscate</code> a bit more, that the obfuscated data is null-terminated. So instead of passing the length of the obfuscated data as an argument, the length is simply determined by the first occurrence of the <code>\0</code>-character.

## Due Diligence

Now that we know that the global array pointed to by <code>PTR_DAT_030be000</code> contains an Xor-Key, let's check for other references. As it turns out, the only other function referencing it, is <code>FUN_030a3400</code>. This function is also on our list above (with 14 references) and we just do the same leap of faith, we did above: look up a reference to it and Xor the data passed as the argument

<pre><code>00000000  32 2c 5e 1c 31 0a 4a 11  68 57 21 0d 71           |2,^.1.J.hW!.q|</code></pre>
with the hard-coded key:

<pre><code>00000000  6b 65 72 6e 65 6c 33 32  2e 64 6c 6c 00           |kernel32.dll.|</code></pre>
There are no zero bytes in the obfuscated data, so maybe this is the non-wide-string variant of <code>ev_WideStringDeobfuscate</code>. So let's rename <code>FUN_030a3400</code> to <code>ev_StringDeobfuscate</code>.

## Automation

As always, let us automate the process of finding all function references and deobfuscate the passed buffers. Roughly, we will follow this plan:

* ask the user for name of deobfuscation function and parse its assembly to determine the Xor-Key
* find all calls to the deobfuscation function and determine the first argument passed to the function
* deobfuscate the data and enrich the different Ghidra views (namely, assembly listing, decompiled code and the bookmarks list)

Let's first look at the only part that wasn't handled in other blag posts: parsing assembly and determining the Xor-Key. Both deobfuscation functions use special <code>MOV</code> instructions - namely, <code>MOVZX</code> (Move with Zero-Extend) and <code>MOVSX</code> (Move with Sign-Extension) - to read the Xor-Key from memory. Both instructions accept two operands, a source and a destionation, and copy the contents of the source operand to the destination operand (while extending the value in some way that we don't care about). Below, are the two instructions in question from the <code>ev_StringDeobfuscate</code> and <code>ev_WideStringDeobfuscate</code> functions respectively:

<pre><code class="asm">030a3435  0F B6 30  ..0  movzx esi, byte ptr [eax]
[...]
030a3363  0F BE 19  ...  movsx ebx, byte ptr [ecx]</code></pre>
The first one copies the value referenced by the register <code>eax</code> to <code>esi</code> while the second one does the same for <code>ecx</code> and <code>ebx</code>. 
Since there is only one of those move instruction in both functions, our goal is to search for it and try to determine the value that was moved.

This situation also already demonstrates that compilers may use different registers in very similar situation. It also means, that we need to do some extra work if we want to automate discovery of the Xor key: We cannot simply use the value from a fixed register but are merely going to iterate over all instructions within the function while tracking register values.

For tracking register values let us use the following simple Java helper class:

<pre><code class="java">private class InvalidRegisterNameException extends Exception {
    public InvalidRegisterNameException(String registerName) {
        super(String.format(&quot;Invalid register name: %s&quot;, registerName));
    }
}

private class RegisterValues {
    private int[] values;
    public boolean debug;

    public RegisterValues() {
        values = new int[8];
        debug = false;
    }

    private int nameToIndex(String registerName) throws InvalidRegisterNameException {
        if (registerName.equals(&quot;EAX&quot;) || registerName.equals(&quot;AL&quot;) || registerName.equals(&quot;AH&quot;)) {
            return 0;
        } else if (registerName.equals(&quot;EBX&quot;) || registerName.equals(&quot;BL&quot;) || registerName.equals(&quot;BH&quot;)) {
            return 1;
        } else if (registerName.equals(&quot;ECX&quot;) || registerName.equals(&quot;CL&quot;) || registerName.equals(&quot;CH&quot;)) {
            return 2;
        } else if (registerName.equals(&quot;EDX&quot;) || registerName.equals(&quot;DL&quot;) || registerName.equals(&quot;DH&quot;)) {
            return 3;
        } else if (registerName.equals(&quot;EBP&quot;) || registerName.equals(&quot;BL&quot;) || registerName.equals(&quot;BH&quot;)) {
            return 4;
        } else if (registerName.equals(&quot;ESI&quot;)) {
            return 5;
        } else if (registerName.equals(&quot;EDI&quot;)) {
            return 6;
        } else if (registerName.equals(&quot;ESP&quot;)) {
            return 7;
        } else {
            throw new InvalidRegisterNameException(registerName);
        }
    }

    public void set(String registerName, int value, Address address) throws InvalidRegisterNameException {
        if (debug) {
            println(String.format(&quot;0x%x writing 0x%x to %s&quot;, address.getOffset(), value, registerName));
        }
        values[nameToIndex(registerName)] = value;
    }

    public int get(String registerName, Address address) throws InvalidRegisterNameException {
        int registerValue = values[nameToIndex(registerName)];
        if (debug) {
            println(String.format(&quot;0x%x reading %s as 0x%x&quot;, address.getOffset(), registerName, registerValue));
        }
        return registerValue;
    }
}</code></pre>
And now, we can use this class to implement the actual algorithm to search for the Xor-Key:

<pre><code class="java">public byte[] readXorKey(Function func, int searchDepth) throws MemoryAccessException {
    int i = 0;
    RegisterValues currentValues = new RegisterValues();
    for (Instruction instruction : currentProgram.getListing().getInstructions(func.getEntryPoint(), true)) {
        try {
            if (instruction.getMnemonicString().equals(&quot;MOVZX&quot;)) {
                // MOVSX EBX,byte ptr [ECX]=&gt;BYTE_ARRAY_030bc4f0 =
                // Index 0: EBX
                // Index 1: ECX
                String registerName = instruction.getOpObjects(1)[0].toString();
                int registerValue = currentValues.get(registerName, instruction.getAddress());

                byte[] dataPtr = getOriginalBytes(toAddr(registerValue), 0x4);
                if (dataPtr != null) {
                    byte[] data = getOriginalBytes(unpackAddressLE(dataPtr), 0x11);
                    if (data != null &amp;&amp; data.length == 0x11) {
                        return data;
                    }
                }
            } else if (instruction.getMnemonicString().equals(&quot;MOV&quot;)) {
                // MOV ECX,dword ptr [030be000 == OBFU_PTR]
                // Index 0: ECX
                // Index 1: 030be000
                String registerName = instruction.getOpObjects(0)[0].toString();
                int copiedValue = instruction.getInt(1);
                currentValues.set(registerName, copiedValue, instruction.getAddress());
            } else if (instruction.getMnemonicString().equals(&quot;RET&quot;)) {
                break;
            }
        } catch (InvalidRegisterNameException e) {
            println(String.format(&quot;Exception: %s&quot;, e.toString()));
        }
        i++;
        if (i &gt; searchDepth)
            break;
    }

    byte[] defaultKey = { 0x59, 0x49, 0x2c, 0x72, 0x54, 0x66, 0x79, 0x23, 0x46, 0x33, 0x4d, 0x61, 0x71, 0x31, 0x33,
            0x69, 0x66 };
    return defaultKey;
}</code></pre>
The function just returns a default key if identifying the value is not successful. 

<a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/DownRageStrings.java#L115">Asking the user for a function</a>, <a href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/">finding all references</a> as well as <a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/DownRageStrings.java#L46">tracking argument values</a> of those calls has been covered thoroughly in previous blag posts. So the only thing left is the obfuscation itself, which is a simple Xor with a multi-byte key:

<pre><code class="java">private byte[] cryptXor(byte[] data, byte[] key) {
    final byte[] ret = new byte[data.length];
    for (int k = 0; k &lt; data.length; k++)
        ret[k] = (byte) (data[k] ^ key[k % key.length]);
    return ret;
}</code></pre>
As always, you can find the <a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/ZLoaderStrings.java">fully working script to deobfuscate all strings in Zloader on github</a>.

## Summary

The string obfuscation used in Zloader is quite generic: the analysed sample contains two different functions that use the same global hard-coded Xor-key to decrypt zero-terminated obfuscated data. It was possible to identify these functions without actual reverse engineering a lot of code in detail by starting at the entry point and looking at all calls sorted by number of other references of the called function.

## Deobfuscated Strings:

For google-ability:

| Address      | Deobfuscated String
|---           |---
| <code>0x0309111C</code> | <code>kernel32.dll</code>
| <code>0x0309133F</code> | <code>Software\Microsoft</code> (wide)
| <code>0x03091AFF</code> | <code>Software\Microsoft</code> (wide)
| <code>0x03091CE0</code> | <code>BOT-INFO</code>
| <code>0x03091CF3</code> | <code>It&#039;s a debug version.</code>
| <code>0x03091D0F</code> | <code>Proxifier.exe</code> (wide)
| <code>0x03091D4A</code> | <code>BOT-INFO</code>
| <code>0x03091D60</code> | <code>Proxifier is a conflict program, form-grabber and web-injects will not works. Terminate proxifier for solve this problem.</code>
| <code>0x0309218F</code> | <code>SeSecurityPrivilege</code> (wide)
| <code>0x030923E5</code> | <code>Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36</code>
| <code>0x030928F9</code> | <code>Software\Microsoft</code> (wide)
| <code>0x0309559F</code> | <code>/post.php</code>
| <code>0x030955F4</code> | <code>https://</code>
| <code>0x03095D99</code> | <code>C:\Windows\SystemApps\*</code> (wide)
| <code>0x03095E1D</code> | <code>Microsoft.MicrosoftEdge</code> (wide)
| <code>0x03095E57</code> | <code>6.3</code>
| <code>0x030962E4</code> | <code>HideClass</code> (wide)
| <code>0x03096332</code> | <code>HideWindow</code> (wide)
| <code>0x03096348</code> | <code>HideClass</code> (wide)
| <code>0x03096E37</code> | <code>.exe</code> (wide)
| <code>0x03096E5B</code> | <code>.dll</code> (wide)
| <code>0x03096E7A</code> | <code>.dll</code> (wide)
| <code>0x03096EAB</code> | <code>.exe</code> (wide)
| <code>0x03096F5F</code> | <code>.exe</code>
| <code>0x03096FC8</code> | <code>&gt;&gt;</code> (wide)
| <code>0x03097022</code> | <code>.dll</code>
| <code>0x030972E1</code> | <code>Software\Microsoft\</code> (wide)
| <code>0x0309741D</code> | <code>UNKNOWN</code> (wide)
| <code>0x03097492</code> | <code>Software\Microsoft\Windows NT\CurrentVersion</code> (wide)
| <code>0x030974A5</code> | <code>InstallDate</code> (wide)
| <code>0x030974CB</code> | <code>DigitalProductId</code> (wide)
| <code>0x030974F1</code> | <code>%s_%08X%08X</code> (wide)
| <code>0x0309754F</code> | <code>INVALID_BOT_ID</code> (wide)
| <code>0x03097790</code> | <code>rundll32.exe %s,DllRegisterServer</code> (wide)
| <code>0x030977C5</code> | <code>Software\Microsoft\Windows\CurrentVersion\Run</code> (wide)
| <code>0x030977F9</code> | <code>Software\Microsoft\Windows\CurrentVersion\Run</code> (wide)
| <code>0x03097CF2</code> | <code>Software\Microsoft\</code> (wide)
| <code>0x03098065</code> | <code>Software\Microsoft\Windows\CurrentVersion\Run</code> (wide)
| <code>0x0309809E</code> | <code>.dll</code> (wide)
| <code>0x03098174</code> | <code>S:(ML;;NRNWNX;;;LW)</code> (wide)
| <code>0x030986F1</code> | <code>Software\Microsoft\</code> (wide)
| <code>0x0309BD3F</code> | <code>.com</code>
</div>						
				<div class="clearfix pdt20"></div>
						
										
									<div class="singletags">
						<p>
							<span class="fa fa-tag"></span>
							Tags: 							<a href="https://blag.nullteilerfrei.de/tag/ghidra/" rel="tag">ghidra</a> - <a href="https://blag.nullteilerfrei.de/tag/malware/" rel="tag">malware</a> - <a href="https://blag.nullteilerfrei.de/tag/string-deobfuscation/" rel="tag">string-deobfuscation</a> - <a href="https://blag.nullteilerfrei.de/tag/zloader/" rel="tag">zloader</a>						</p>
					</div>
										
			</div>

			
<div id="comments" class="comments-area">

	
	
		<div id="respond" class="comment-respond">
		<h2 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2020/05/24/zloader-string-obfuscation/#respond" style="display:none;">Cancel reply</a></small></h2><form action="https://blag.nullteilerfrei.de/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><div class="form-group comment-form-comment">
		<label for="comment">Comment<span class="required"> *</span></label> 
		<textarea class="form-control" placeholder="Your comment" id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea>
		</div><div class="form-group comment-form-author"><label for="author">Name <span class="required">*</span></label> <input class="form-control" placeholder="Your name" id="author" name="author" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-email"><label for="email">Email <span class="required">*</span></label> <input class="form-control" placeholder="Your email" id="email" name="email" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-url"><label for="url">Website</label> <input class="form-control" placeholder="Your website" id="url" name="url" type="text" value="" size="30" /></div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="spclbtn" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='5258' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- .comments-area -->
				
		</div>
			
	</div>
</div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://blag.nullteilerfrei.de/2020/04/26/use-ghidra-to-decrypt-strings-of-kpotstealer-malware/" rel="prev">&larr; Use Ghidra to decrypt strings of KpotStealer malware</a></div><div class="nav-next"><a href="https://blag.nullteilerfrei.de/2020/05/31/string-obfuscation-in-the-hamweq-irc-bot/" rel="next">String Obfuscation in the Hamweq IRC-bot &rarr;</a></div></div>
	</nav></div>
		</div>
	</div>
</div>


<div class="container-fluid footer-copyright">
	<div class="container">
		<div class="row">

			<div class="col-md-6">
				<div class="cprtlft_ctmzr">
					Authors have copyrights. People say these things in footers.				</div>
			</div>

			<div class="col-md-6">
				<div class="cprtrgt_ctmzr fr spclfl">
					All Hail the Great Yawgmoth, Father of Machines.				</div>
			</div>

		</div>
	</div>
</div>


<link rel='stylesheet' id='hljstheme-css' href='https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/styles/default.css?ver=0.6.2' type='text/css' media='all' />
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.js?ver=6.7.1" id="katex-main-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/auto-render.min.js?ver=6.7.1" id="katex-auto-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/default.js?ver=6.7.1" id="configure-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/bootstrap.js?ver=3.3.7" id="bootstrap-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/script.js?ver=1.1.5" id="switty-script-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.common.pack.js?ver=0.6.2" id="hljs_preload-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.custom.pack.js?ver=0.6.2" id="hljs-js"></script>
    <style>pre.hljs {padding: 5px;}
pre.hljs code {}</style>
    <script type="text/javascript">
    (function($, window) {
        var init_fn_flag = false;
        var init_fn = (function() {
            if (init_fn_flag)
                return;
            init_fn_flag = true;
             hljs.configure({"tabReplace":"    "});
            $('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        });
        $(document).ready(init_fn);
        $(window).on("load", init_fn);
    })(jQuery, window);
    </script>
<img src="https://vg09.met.vgwort.de/na/aabd164a6b38480a8d485810f567529e" width="1" height="1" alt="" class="wpvgw-marker-image" loading="eager" data-no-lazy="1" referrerpolicy="no-referrer-when-downgrade" style="display:none;" /></body>
</html>
