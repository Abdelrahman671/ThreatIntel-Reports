<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="apple-mobile-web-app-capable" content="yes"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1"> <title> Upatre - Trojan Downloader | secrary[dot]com </title> <meta name="description" content=" secrary[dot]com::blog "> <meta name="keywords" content="reverse engineering, malware, windows, android, internals, blog"> <meta name="HandheldFriendly" content="True"> <meta name="MobileOptimized" content="320"> <!-- Social: Facebook / Open Graph --> <meta property="og:type" content="website"> <meta property="og:url" content="https://secrary.com/ReversingMalware/Upatre/"> <meta property="og:title" content=" Upatre - Trojan Downloader | secrary[dot]com "> <meta property="og:image" content="https://secrary.com"> <meta property="og:description" content=" secrary[dot]com::blog "> <meta property="og:site_name" content="@_qaz_qaz"> <meta property="og:locale" content="en_US"> <!-- Social: Twitter --> <meta name="twitter:card" content="summary_large_image"> <meta name="twitter:site" content="@_qaz_qaz"> <meta name="twitter:title" content=" Upatre - Trojan Downloader | secrary[dot]com "> <meta name="twitter:description" content=" secrary[dot]com::blog "> <meta name="twitter:image:src" content="https://secrary.com"> <!-- Social: Google+ / Schema.org --> <meta itemprop="name" content=" Upatre - Trojan Downloader | secrary[dot]com "> <meta itemprop="description" content=" secrary[dot]com::blog "> <meta itemprop="image" content="https://secrary.com"> <!-- Canonical link tag --> <link rel="canonical" href="https://secrary.com/ReversingMalware/Upatre/"> <link rel="alternate" type="application/rss+xml" title="secrary[dot]com" href="https://secrary.com/feed.xml"> <!-- rel prev and next --> <link rel="stylesheet" href="https://secrary.com/assets/css/main.css"> </head> <body> <main class="wrapper"> <header class="site-header"> <nav class="nav"> <div class="container"> <h1 class="logo"><a href="https://secrary.com/">secrary<span>[dot]com</span></a></h1> <ul class="navbar"> <li><a href="https://secrary.com/about">about me</a></li> <!-- <li><a href="https://secrary.com/feed.xml" target="_blank">RSS</a></li> --> </ul> </div> </nav> </header> <article class="post container" itemscope itemtype="http://schema.org/BlogPosting" > <header class="post-header"> <h1 class="post-title" itemprop="name headline">Upatre - Trojan Downloader</h1> </header> <div class="post-content" itemprop="articleBody"> <p>You can get the sample from <a href="https://github.com/ytisf/theZoo/tree/master/malwares/Binaries/Waski.Upatre" title="theZoo">theZoo</a></p> <p>SHA-256: <code class="language-plaintext highlighter-rouge">1b893ca3b782679b1e5d1afecb75be7bcc145b5da21a30f6c18dbddc9c6de4e7</code></p> <p>We can use behavior analysis from <a href="https://www.hybrid-analysis.com/sample/1b893ca3b782679b1e5d1afecb75be7bcc145b5da21a30f6c18dbddc9c6de4e7?environmentId=100" title="hybrid-analysis">hybrid-analysis</a>.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28003882-dd077efc-6551-11e7-9263-0bdcfa479332.png" alt="image" /> Seems like there is no known protection mechanism.</p> <p>In the strings, there is nothing important other than this base64 encoded string:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28003935-380ff982-6552-11e7-84c7-194e39ba38ca.png" alt="image" /></p> <p>…and imports is not eloquent but there is our friend <code class="language-plaintext highlighter-rouge">GetProcAddress</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004002-bf3eed78-6552-11e7-8728-9b051a6f0045.png" alt="image" /></p> <p>Let’s open in <code class="language-plaintext highlighter-rouge">IDA</code>:</p> <p><code class="language-plaintext highlighter-rouge">sub_403760</code> is used to get necessary Win API functions:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004118-64ba89c4-6553-11e7-8306-d38636988974.png" alt="image" /></p> <p>Inside <code class="language-plaintext highlighter-rouge">sub_403760</code>, malware decrytes strings and uses <code class="language-plaintext highlighter-rouge">GetProcAddress</code> to get addresses of functions:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004182-e8f3afc2-6553-11e7-870a-5c52216c0259.png" alt="image" /></p> <p>To decrypt strings before call <code class="language-plaintext highlighter-rouge">GetProcAddress</code>, <code class="language-plaintext highlighter-rouge">Upatre</code> uses following decryption routine:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004205-1f24273e-6554-11e7-9e1f-74c43cf653ce.png" alt="image" /></p> <p>Inside <code class="language-plaintext highlighter-rouge">sub_402F30</code> malware uses this teqnique to get addresses for following Win API functions:</p> <p><code class="language-plaintext highlighter-rouge">NtAllocateVirtualMemory</code>, <code class="language-plaintext highlighter-rouge">NtUnmapViewOfSection</code>, <code class="language-plaintext highlighter-rouge">CreateThread</code>, <code class="language-plaintext highlighter-rouge">WaitForSingleObject</code>, <code class="language-plaintext highlighter-rouge">LoadLibraryA</code>, <code class="language-plaintext highlighter-rouge">HeapAlloc</code>, <code class="language-plaintext highlighter-rouge">RtlAllocateHeap</code>, <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code>, <code class="language-plaintext highlighter-rouge">FlushInstructionCache</code>, <code class="language-plaintext highlighter-rouge">NtGetContextThread</code>.</p> <p>The decryption routine is used heavily by malware in different places to get plain text.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004382-4ef316a4-6555-11e7-9a37-c46a29b85c6a.png" alt="image" /></p> <p>At <code class="language-plaintext highlighter-rouge">00403572</code>, <code class="language-plaintext highlighter-rouge">Upatre</code> decodes base64 encoded string and saves at <code class="language-plaintext highlighter-rouge">004051B0</code>(I renamed variable as <code class="language-plaintext highlighter-rouge">decrypted_bin</code>):</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004575-9926f50a-6556-11e7-839e-45b3655c65a8.png" alt="image" /></p> <p>At <code class="language-plaintext highlighter-rouge">0040386D</code> it creates a new thread:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004654-246a74e8-6557-11e7-908c-be29d9d5129b.png" alt="image" /></p> <p>Main work starts inside the thread at <code class="language-plaintext highlighter-rouge">00403900</code>, Where it decryptes and gets addresses for several Win API functions: <code class="language-plaintext highlighter-rouge">CreateProcessW</code>, <code class="language-plaintext highlighter-rouge">ExitProcess</code>, <code class="language-plaintext highlighter-rouge">NtWriteVirtualMemory</code>, <code class="language-plaintext highlighter-rouge">NtSetContextThread</code>, etc.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28004717-8bbb2dae-6557-11e7-9925-a62dc7a63e7d.png" alt="image" /></p> <p>Creates itself as a new process in suspended mode and saves <code class="language-plaintext highlighter-rouge">Context</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28005178-47a1b7ca-655a-11e7-994c-0c5829586085.png" alt="image" /></p> <h1 id="anti-debug">Anti-Debug:</h1> <p>There is one interesting anti-debug trick, at the start, it saves <code class="language-plaintext highlighter-rouge">PEB</code> and uses <code class="language-plaintext highlighter-rouge">BeingDebug</code> value <code class="language-plaintext highlighter-rouge">[PEB+2]</code> in XOR decryption routine, outside of a debugger this value is <code class="language-plaintext highlighter-rouge">0</code> and adding <code class="language-plaintext highlighter-rouge">0</code> don’t cause any error, but if we try to add <code class="language-plaintext highlighter-rouge">1</code> (which is the value of <code class="language-plaintext highlighter-rouge">[PEB+2]</code> if the executable is inside a debugger) it may cause error. In this case <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code> returns <code class="language-plaintext highlighter-rouge">0xC0000242</code>(STATUS_BAD_COMPRESSION_BUFFER) error.</p> <p>The reason of this error is that before calling <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code>, malware decrypts(with XOR) decoded strings using <code class="language-plaintext highlighter-rouge">0x4C+[PEB+2]</code> which is <code class="language-plaintext highlighter-rouge">0x4D</code> inside a debugger instead of <code class="language-plaintext highlighter-rouge">0x4C</code>, because of this result is corrupted output.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28057051-eaf6c660-662f-11e7-875a-99813c3e6ea4.png" alt="image" /></p> <p><code class="language-plaintext highlighter-rouge">[eax+2]</code> is the value of <code class="language-plaintext highlighter-rouge">BeingDebug</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28005497-fd8d25dc-655b-11e7-9bb7-3179ddb921b5.png" alt="image" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/28005910-02430f4a-655e-11e7-85c5-fd3bf333eca7.png" alt="image" /></p> <p>We can use <code class="language-plaintext highlighter-rouge">ScyllaHide</code> plugin for <code class="language-plaintext highlighter-rouge">IDA</code> to defeat this anti-debug method.</p> <p>Decompresses decoded and decrypted base64 string using <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code> (format <code class="language-plaintext highlighter-rouge">COMPRESSION_FORMAT_LZNT1</code>):</p> <p><img src="https://user-images.githubusercontent.com/16405698/28005361-2f29f9e0-655b-11e7-8102-15dd9c4d2307.png" alt="image" /></p> <p>…and writes into suspened process:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28005388-514f8a12-655b-11e7-9863-875e1e20d955.png" alt="image" /></p> <p>After decompress it calls <code class="language-plaintext highlighter-rouge">NtSetContextThread</code>, value of <code class="language-plaintext highlighter-rouge">EIP</code> is <code class="language-plaintext highlighter-rouge">401265</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006134-0c2c1816-655f-11e7-84f8-84d759da86f5.png" alt="image" /></p> <p>Resumes thread and exits:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006172-396b3d98-655f-11e7-9322-a1cf004fbae2.png" alt="image" /></p> <p>Before <code class="language-plaintext highlighter-rouge">NtResumeProcess</code> call attach <code class="language-plaintext highlighter-rouge">x32dbg</code> to child process and set <code class="language-plaintext highlighter-rouge">EIP</code> to <code class="language-plaintext highlighter-rouge">401265</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006517-a777c7b0-6560-11e7-9d63-cd0a6f2ac16e.png" alt="image" /></p> <p>Close <code class="language-plaintext highlighter-rouge">IDA</code> and start analyzing of the child process.</p> <p>Tries to read <code class="language-plaintext highlighter-rouge">uttE047.tmp</code> file from <code class="language-plaintext highlighter-rouge">%TEMP%</code> directory without success:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006707-8b7ab8e6-6561-11e7-8134-c1ecca363958.png" alt="image" /></p> <p>Creates one and writes location of the executable:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006819-fd86d17c-6561-11e7-9594-db76da1d0a59.png" alt="image" /></p> <p>Inside of <code class="language-plaintext highlighter-rouge">uttE047.tmp</code> file:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006882-41fa9ed8-6562-11e7-9c15-408d31f49f5e.png" alt="image" /></p> <p>Copies executale to <code class="language-plaintext highlighter-rouge">%TEMP%</code> directory as <code class="language-plaintext highlighter-rouge">utilview.exe</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28006956-9c961eb2-6562-11e7-9836-244b4ee04f1f.png" alt="image" /></p> <p>…and creates as new process:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28007066-0b8b84d8-6563-11e7-9194-ff629eadb705.png" alt="image" /></p> <p>This process is exactly same as the first process, creates a new process and injects decoded and decompressed code.</p> <p>Let’s reverse last part (injected code) a little bit higher level.</p> <p>Now we are here: sample.exe -&gt; sample.exe -&gt; utilview.exe -&gt; <strong>utilview.exe</strong></p> <p>The injected code is also same as before it checks <code class="language-plaintext highlighter-rouge">uttE047.tmp</code> file, but this time there is <code class="language-plaintext highlighter-rouge">uttE047.tmp</code> in <code class="language-plaintext highlighter-rouge">%TEMP%</code> directory and malware goes a different direction, reads the content of <code class="language-plaintext highlighter-rouge">uttE047.tmp</code>, which is the location of the executable and removes that executable:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28007540-e4499d22-6564-11e7-8b27-2529079b70b6.png" alt="image" /></p> <p>After this it gets IP of the victim using <code class="language-plaintext highlighter-rouge">checkip.dyndns.com</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28007931-73451370-6566-11e7-939c-9a0db7894f79.png" alt="image" /></p> <p>Also, there is a typo in user-agent string:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28008836-23189c6a-656a-11e7-83f8-c348d81c160e.png" alt="image" /></p> <p>and parses IP from returned file:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28007705-80a32a4e-6565-11e7-94a5-3e33f23231ba.png" alt="image" /></p> <p>It tries to download <code class="language-plaintext highlighter-rouge">questd.pdf</code> from <code class="language-plaintext highlighter-rouge">http://penangstreetfood.net/wp-content/uploads/questd.pdf</code> and <code class="language-plaintext highlighter-rouge">http://yumproject.com/wp-content/uploads/2014/11/questd.pdf</code> without success.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28008078-09db2734-6567-11e7-9218-318f0b81ef55.png" alt="image" /></p> <p>Sends <code class="language-plaintext highlighter-rouge">GET</code> requests to <code class="language-plaintext highlighter-rouge">95.181.46.38</code> with client related information, last string derives from victim’s IP address, <code class="language-plaintext highlighter-rouge">B</code> is instead of <code class="language-plaintext highlighter-rouge">.</code> <img src="https://user-images.githubusercontent.com/16405698/28013604-a412617e-657a-11e7-96fc-b4f2a1b8486d.png" alt="image" /></p> <p>That’s all… <code class="language-plaintext highlighter-rouge">Upatre</code>’s main function is to download malicious files.</p> <h1 id="note">Note</h1> <p>If you prefer you can use my script to extract payload instead of doing it manually: <script src="https://gist.github.com/secrary/98c563688fa6cea1fd517170f97988ab.js" type="724f13a3651d174a65c3d1c6-text/javascript"></script></p> <p>I know, I overlook many things related to <code class="language-plaintext highlighter-rouge">Upatre</code>, due to my limited knowledge, if you find something interesting please contact me.</p> <p>I’m new to reversing malware and any kind of feedback is helpful for me.</p> <p>Twitter: <a href="https://twitter.com/_qaz_qaz">@_qaz_qaz</a></p> </div> </article> <footer class="site-footer"> <div class="container"> <small class="block" >&copy; 2022 &middot; @_qaz_qaz </small> </div> </footer> </main> <script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="724f13a3651d174a65c3d1c6-|49" defer></script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8f3d959b6a6c647f',t:'MTczNDUwODQ2MS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body> </html>
