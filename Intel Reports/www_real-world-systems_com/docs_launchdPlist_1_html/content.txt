<!doctype html>
<html>
<head> 
<title> launchd keywords for plists</title>
<meta name=author content="Dennis German">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<meta http-equiv="content-language" content="en">
<meta name=description content="tersefied man page for launchd keywords">
<meta name=keywords content="OS X launchd plist keywords">
<meta name=robots content="index,follow">
<meta name=distribution content=Global>

<link rel=stylesheet  href="style.css" type="text/css"> 
</head>
<body>

<h1 align=center>     launchd.plist </h1><h2 align=center> System wide and per-user daemon/agent configuration files</h2> 
EXPECTATIONS

<ul> A daemon or agent in the process directly launched by launchd MUST NOT : 
          <li>  Call <code>daemon</code>(3).
          <li>  Call <code>fork</code>(2) and have the parent process exit(3) or _exit(2), the equivelent of  <code>daemon</code>(3) 
</ul>
<p>
<ul> A daemon or agent, as a part of initialization, SHOULD NOT : 
          <li>  Set the user ID or group ID.
          <li>  Set the working directory.
          <li>  chroot
          <li>  setsid
          <li>  Close "stray" file descriptors.
          <li>  Change stdio to <code>/dev/null</code>.
          <li>  Set resource limits with setrusage
          <li>  Set priority with setpriority
          <li>  Ignore SIGTERM
<li style=list-style:none>There are keywords for the plist for these functions.</ul>
</ul>
<p>
<ul> A daemon or agent SHOULD: 
          <li>  Launch on demand given criteria specified in the plist.  
          <li>  Catch the SIGTERM signal.
</ul><p>
There does not appear to be a <code>RestartSec</code> (delay restart in seconds) as in linux <code>systemctl.</code>

<p>
<table cellpadding=0 cellspacing=0 border=1>

<tr><td><code> Label <var>string</var><td> required key uniquely identifies the job 
<tr><td><code>Program <var>string</var><td>
     first argument of <code>execvp</code>.  Default: <code>ProgramArguments[0]</code>  .<br>
  Required in the absence of <code>ProgramArguments</code> .

<tr><td><nobr><code>ProgramArguments <var>array_of_strings</var></nobr><td>
     second argument of <code>execvp</code>.<br>
 Required in the absence of <code> Program </code>.  Read execvp(3) carefully 

<tr><td><code>EnableGlobbing <var>bool</var><td> use the glob(3) mechanism to update the program arguments before invocation.

<tr style=color:silver><td><code>Disabled <var>bool</var><td><span style=color:black>see <code>/private/var/db/launchd/com.apple.xpc.launchd/disabled.plist </code> </span>deprecated: 
     a hint to launchctl(1) that it should not submit this job to launchd when loading a job or jobs. <br>
Does NOT reflect the current state of the job on the running system. <br> 
     Query launchd for the presence of the job using the launchctl(1) <code>list</code> or use the ServiceManagement
     framework's SMJobCopyDictionary() method.<p> 
     Conveys a default value, which maybe changed with
     <code>-w</code> of launchctl load and unload subcommands which do not modify the configuration file, <br>
     Only use this key if the provided on-demand and <code>KeepAlive</code> criteria are insufficient to describe the conditions under which job needs to run. The cost to have a job loaded in launchd is negligible, so there is no harm in loading a job which only runs once or rarely.

     <tr><td><code>UserName <var>string</var><td> &nbsp; 
     <tr><td><code>GroupName <var>string</var><td> If UserName is set and GroupName is not, the the group will be set to the default group of the user.

     <tr><td><code>inetdCompatibility <var>dictionary</var><td> expect to run as if it were launched from inetd.

           <tr><td><code>Wait <var>bool</var><td> corresponds to the "wait" or "nowait" option of inetd. <br>
<code>true</code>: the listening socket is passed via the standard in/out/error file descriptors. <br>
<code>false</code>: accept(2) is called on behalf of the job, and the result is passed via the standard in/out/error descriptors.

<tr><td><code>LimitLoadToHardware<td>
<tr><td><code>LimitLoadFromHardware<td> 

     <tr><td><code>LimitLoadToHosts <var>array of strings</var><td>
     applies to the hosts listed with this key. set kern.hostname in sysctl.conf(5) 

     <tr><td><code>LimitLoadFromHosts <var>array of strings</var><td>
     applies to hosts NOT listed with this key. set kern.hostname in sysctl.conf(5) 

     <tr><td><code>LimitLoadToSessionType <var>string</var><td>
Applies to sessions of the type specified (example<br>
<pre class=samp><i>&lt;key></i>LimitLoadToSessionType<i>&lt;/key>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;array></i>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>&lt;string></i>Aqua<i>&lt;/string> &nbsp;&lt;string></i>Background<i>&lt;/string> </i>
    &nbsp;<i>&lt;string></i>LoginWindow&<i>lt;/string>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/array></i></pre>
Used with <code>-S</code> to launchctl.


     <tr><td><code>EnableTransactions <var>bool</var><td>
Uses 
<a href=https://developer.apple.com/documentation/xpc/1505586-xpc_transaction_begin target=apple><code>vproc_transaction_begin</code></a>
 and <code>n_end</code> to track
     transactions that need to be reconciled before the process can safely terminate. <br>
If there are outstanding transactions launchd should avoid sending <code>kill</code>

<tr style=color:silver><td><code><span style=color:silver>OnDemand <var>bool</var><td>
     was used in Mac OS X 10.4 to control whether a job was kept alive or not. The default was true.  
     been deprecated and replaced in 10.5 <code>KeepAlive</code> .</span>

     <tr><td><code>KeepAlive <var>bool </var></code>or <br>&nbsp;<code><var>dictionary of stuff</var><td>
<code>true</code>: &nbsp; unconditionally keep the job alive. implies <code>RunAtLoad</code><br>
<code>false</code>: only demand will start the job. <br>
Default : <code>false</code> 
<p>
Dictionary of conditions to control if the job is keep alive(restarted),  Multiple keys are ORed. 
If launchd finds no reason to restart the job, it falls back on demand based invocation.  <br>
Jobs that exit quickly and frequently when configured to be kept alive will be throttled to converve system resources.<br>
<tt>"Service only ran for 0 seconds. Pushing respawn out by 10 seconds."</tt>

<table>
<tr><td><code>SuccessfulExit <var>bool</var><td>
<code>true</code>: &nbsp;job will be restarted if program exits with a status of zero. <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.e. job succeded last time, run it again, if failed don't start it again <br>
<p>
<code>false</code>: job will be restarted &hellip; status not zero. <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.e. job failed; run it again maybe inputs or conditions have changed and it will work this time.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
job was sucessful(finally(?)) don't start it again. <p>
Implies <code>RunAtLoad</code> since the job needs to run at least once to can get an exit status.

<tr><td><code>PathState <nobr><var>dictionary of bool</var></nobr><td> keep alive if:
           keys are file-system paths. <br>
true: &nbsp;job will be kept alive as long as the path exists.  <br>
false: job will be kept alive if the path does NOT exist. <br>
Used so jobs may create semaphores in the file-system.

<tr><td><code>OtherJobEnabled <var>dictionary of bools</var><td>
           keys are the label of another job. <br>
true: &nbsp;job is kept alive as long as the other job is enabled. <br>
false: job is kept alive as long as the other job is disabled.  <br>
Not to be used instead of IPC.
<tr><td><code>Crashed</code><td>Job will be restarted if exited due to <code>sigILL</code>, <code>sigSEGV</code> *&hellip; +CAUTION+
<tr style=color:silver><td><code>NetworkState <var>bool</var><td>
true: &nbsp;will be kept alive as long as the network is up, <br>
i.e. at least one non-loopback interface being up and having IPv4 or IPv6 addresses .  <br>
false: will be kept alive as long as the network is down.

</table>


<tr><td><code>RunAtLoad <var>bool</var><td> job is launched once at the time the job is loaded. default false.

<tr><td><code>RootDirectory <var>string</var><td> a directory to chroot(2) to before running 
<tr><td><code>WorkingDirectory <var>string</var><td> chdir(2) to before running .

     <tr><td><code>EnvironmentVariables <br> &nbsp; <var>dictionary of strings</var><td> additional environmental variables set before running .
     <tr><td><code>UserEnvironmentVariables <br> &nbsp; <var>dictionary of strings</var><td>
                                additional environmental variables set before running .

     <tr><td><code>Umask <var>decimalInteger</var> </code><small style=font-family:sans-serif>hugh? ed</small><td> passed to umask(2) before running . 

     <tr style=color:gray><td><code>TimeOut <var>seconds</var><td> idle time out. default will be supplied by launchd for use by the job at check in time. (deprecated)
     <tr><td><code>ExitTimeOut <var>seconds</var><td>
     Time after sending <code> sigTERM</code> before sending  <code>sigKILL</code> allowing for cleanup. <br>
Default: 20 seconds, zero is (poorly) interpreted don't issue <code>sigKILL</code> .

     <tr><td><code>ThrottleInterval <var>seconds</var><td> minimun before respawn.  Default: 10 seconds.  <br>
Processes that last less than <code><var>seconds</var></code> generate message:<br><tt>
        Service only ran for <var>n</var> seconds. Pushing respawn out by <var>n</var> seconds.</tt> 
Notice: newsyslog, locationmenu,    These sholud have a smaller <code>ThrottleInterval</code>in their plist   DGG <p>
The principle behind this is that jobs should linger around in memory in case they are needed in the near future, reduceng the latency of responses, encourages developers to amortize the cost of program invocation.

     <tr><td><code>InitGroups <var>bool</var><td> whether <code>initgroups(3)</code> should be called before running .  Default: true .  <code>UserName</code> must be set. 

     <tr><td id=watchpaths><code>WatchPaths <var>array of strings</var><td> start if any one of the listed paths are modified.  <br>
mac os as of 11/20/20
<pre>
/System/Library/LaunchDaemon
/Library/Extensions                             kernelmanagerd 
/AppleInternal/Library/Extensions               kernelmanagerd
/etc/postfix/aliases                            newaliases
/Library/Preferences/com.apple.symptoms.plist   symptomsd 
/etc/nfs.conf                                   nfsconf
/System/Library/LaunchAgents
/Applications/                                  helpd
/Applications/Utilities/                        helpd 
/Library/Apple/Library/Bundles/TCC_Compatibility.bundle/Contents/Resources/AllowApplicationsList tccd
/System/Library/Sandbox/TCC_Compatibility.bundle/Contents/Resources/AllowApplicationsList        tccd
/Library/Application Support/com.apple.TCC/MDMOverrides                                          tccd
/private/etc/com.apple.screensharing.agent.launchd              screensharing.agent
~/Library/Application Support/Steam/Steam.AppBundle/Steam ~/Library/LaunchAgents/valvesoftware.steamclean
</pre> 
     <tr><td id=queuedirectories><code>QueueDirectories <var>array of strings</var><td> like <code>WatchPaths</code>  watchs for modifications, if the path is a directory and not empty.

     <tr><td id=startonmount><code>StartOnMount <var>bool</var><td> start when a  filesystem is mounted.  
     <tr><td id=startinterval><code>StartInterval <var>seconds</var><td> start every <code><var> seconds</var></code>.  <br>
If the system was asleep, when the job should have run, it will be started <b>once</b> the next time the system wakes .  <br>

     <tr><td id=startcalendarinterval><code>StartCalendarInterval <var>dictionary of integers or 
    <nobr>array of dictionary of integers</var></nobr><td>
The semantics are similar to <code>crontab(5).</code>  If  the system was asleep when the job should have run, it will be started  <b>once</b>, the next time the system wakes. 

<nobr><code>&lt;key>Minute&lt;/key>&lt;integer><var>mm</var>&lt;/integer></nobr> &hellip; Hour <var>hh</var> Day <var>dd</var> Month <var>mm</var> Weekday <var>w</var> 0 and 7 </code>are Sunday.
Missing arguments are wildcard (i.e. <b>every</b>). <br>

     <tr><td style=border-style:none><code>StandardInPath <var>string</var><td style=border-style:none> 
     <tr><td  style=border-style:none><code>StandardOutPath <var>string</var><td style=border-style:none> 
<!-- <code>
&lt;key>StandardOutPath&lt;/key> &nbsp;&lt;string>/var/log/<var>label</var>.out&lt;/string> -->

 </code> 
     <tr ><td style=border-style:none><code>StandardErrorPath <var>string</var><td  style=border-style:none>

Example: <code>&lt;key>StandardErrorPath&lt;/key>&lt;string>/var/log/<var>label</var>.err&lt;/string>

     <tr><td><code>Debug <var>bool</var><td> log mask temporarily set to <coder>LOG_DEBUG</code> 
     <tr><td><code>WaitForDebugger <var>bool</var><td>
     instructs kernel to have the job wait for a debugger to attach before job is started.

     <tr><td style=border-bottom-style:none> <code>SoftResourceLimits <td rowspan=2 style=border-style:none> 
     Resource limits. 
<ul> 
   <li>      <code>  CPU <var>seconds</var></code> maximum cpu time 

   <li>  <code>      FileSize <var>bytes</var> </code>largest size file created.  
   <li>   <code>     NumberOfFiles <var>integer</var> </code>maximum number of open files .<br>
  Setting this in a system wide daemon sets  <code>sysctl kern.maxfiles</code> (<code>SoftResourceLimits</code>) or <code>kern.maxfilesperproc (HardResourceLimits</code>) in addition.

   <li>   <code>     NumberOfProcesses <var>integer</var> </code> 
   maximum simultaneous processes for this user id.  Setting in a system wide daemon will set
           <code>sysctl kern.maxproc (SoftResourceLimits) </code>or <code>kern.maxprocperuid (HardResourceLimits)</code>  in addition 


   <li>   <code>     MemoryLock <var>bytes</var> </code>maximum lock into memory using <code>mlock</code>(2) 

   <li>    <code>    Data <var>bytes</var></code> maximum size of the data segment, defines how far a program may extend its break
           with <code> sbrk</code>(2)
   <li>   <code>     ResidentSetSize <var>bytes</var></code>
           maximum a process's resident set size may grow.  This imposes a limit on the amount of
           physical memory to be given to a process; if memory is tight, the system will prefer to take memory from processes
           that are exceeding their declared resident set size.

      <li>    <code> Stack <var>bytes</var></code>
           maximum of stack segment ; this defines how far a program's stack segment may
           be extended.  Stack extension is performed automatically by the system.

</ul>


<pre class=samp> &lt;key>SoftResourceLimits&lt;/key> &lt;dict> &lt;key>NumberOfFiles&lt;/key> &lt;integer>58&lt;/integer> &lt;/dict> </pre>
     <tr><td  style=border-top-style:none><code>HardResourceLimits <br>
&lt;dict> &lt;key> <var>key  &hellip; integer</var> &hellip;</nobr>



     <tr><td><code>ProcessType <var>string</var><td>
Intended purpose of the job for applying  resource limits. <br>
    Default: light<small>(sic)</small> resource limits to the job, throttling its CPU usage and I/O bandwidth. 
<ul>
      <li>    <code> Standard</code> equivalent to no <code>ProcessType</code> being set.  
   <li>      <code>  Background</code> does work not directly requested by the user. The resource limits applied are intended to prevent them from disrupting the user experience. <nobr><code>&lt;!-- slow down --></code> </nobr>
         <li> <code> Adaptive</code> move between the Background and Interactive classifications based on activity over XPC connections.
           See <code>xpc_transaction_begin</code>
         <li>  <code>Interactive</code> Critical to maintaining a responsive user experience, run with the same resource limitations as apps, i.e.  none. <br>
Use if an app's ability to be responsive depends on it, and cannot be made <code>Adaptive</code>.
</ul> 
 



     <tr><td><code>LegacyTimers <var>bool</var><td>
     Default: timers created by launchd jobs are coalesced, batching the firing of timers with similar deadlines. <br>
If <code>true</code>, timers will not be coalesced with others

     <tr><td><code>AbandonProcessGroup <var>bool</var><td> true: do NOT kill processes with the same process group if this job dies.<br> 
Default: when  a job dies, launchd kills any remaining processes with the same process group ID as the job.  

     <tr><td><code>Nice <var>integer</var><td> 
<code>&lt;key&gt;Nice&lt;/key&gt; &lt;integer&gt;10&lt;/integer&gt; &lt;!-- slow down --&gt;
     <tr><td><code>LowPriorityIO <var>bool</var><td>

<code>&lt;key&gt;LowPriorityIO&lt;/key&gt; &lt;true/&gt; &lt;!-- slow down --&gt;

     <tr><td><code>LaunchOnlyOnce <var>bool</var><td>
     Job can only be run once,  i.e. the job cannot be safely respawned without a reboot.

     <tr><td><code>MachServices <var>dictionary of bools or a dictionary of dictionaries</var><td>
     to be registered with the Mach bootstrap sub-system.  <br>
Keys are the names of services to be advertised.  The value must be <code>&lt;true/></code>.<br>

<pre class=samp><key>MachServices</key>
    &lt;dict>
        &lt;key>com.apple.libquitd&lt;/key> &lt;true/>
        &lt;key>com.apple.spinreporterd&lt;/key> &lt;true/>
        &lt;key>com.apple.spindump&lt;/key> &lt;true/>
    &lt;/dict></pre>








<tr><td><code>MachServiceLookupPolicies</code><td> 
<ul><li><code>ResetAtClose </code><br>
           If <code>false</code>, the port is recycled, thus leaving clients to remain oblivious to the demand nature of job.<br>
         If <code>true</code>, clients receive port death notifications when the job lets go of the receive right.
           Not all clients are able to handle this behavior. <br>
<br>
 The port will be recreated atomically with respect to bootstrap_look_up() calls, so that clients can trust
           that after receiving a port death notification, the new port will have already been recreated. <br>
default: <code>false</code>.

           <li><code>HideUntilCheckIn <var>bool</var></code>
           Reserve the name in the namespace, but cause bootstrap_look_up() to fail until the job has checked in with launchd.<br>

     Finally, for the job itself, the values will be replaced with Mach ports at the time of check-in with launchd.

     <tr><td><code>Sockets <var>dictionary of dictionaries... OR dictionary of array of dictionaries...</var><td>
     demand sockets that can be used to let launchd know when to run the job.<br>
     The job must check-in to get a copy of the file descriptors using APIs outlined in <code>launch</code>.  <br>
The keys of the top level Sockets dictionary can be anything. for the application developer to use to differentiate which descriptors correspond to which application level protocols (e.g. http vs. ftp vs. DNS...).  At check-in time, the value of each key will be an array of descriptors. <br>
Daemon/Agent writers should consider all descriptors of a given
     key to be to be effectively equivalent, even though each file descriptor likely represents a different networking protocol which conforms to the criteria specified in the job configuration file.

     <ul>inputs to call <code>getaddrinfo</code> :

        <li><code>SockType <var>string</var></code> default <code>stream</code> other valid values: <code>dgram</code> and <code>seqpacket</code> .

           <li><code>SockPassive <var>bool</var></code> whether listen(2) or connect(2) should be called on the created file descriptor. <br>Default: true ("to listen").  
           <li><code>SockNodeName <var>string</var></code> node to connect(2) or bind(2) to.  
           <li><code>SockServiceName <var>string</var> </code>service on the node to connect(2) or bind(2) to.  
           <li><code>SockFamily <var>string</var> </code>request that "IPv4" or "IPv6" socket(s) be created.  
           <li><code>SockProtocol <var>string</var></code> protocol to be passed to socket(2). <code>TCP</code> 
           <li><code>SockPathName <var>string</var></code> set to <code>Unix</code>, specifies the path to connect(2) or bind(2) to.  
           <li><code>SecureSocketWithKey <var>string</var></code> variant of SockPathName. <br>
Instead of binding to a known path, a securely generated socket is
           created and the path is assigned to the environment variable that is inherited by all jobs spawned by launchd.  
           <li><code>SockPathMode <var>DECIMALinteger</var></code> mode of the socket.  
           <li><code>Bonjour <var>bool or string or array of strings</var></code> request the service be registered with mDNSResponder(8).  <br>
If the value is bool, the service name is inferred from <code>SockServiceName</code>.

           <li><code>MulticastGroup <var>string</var></code> request that the datagram socket join a multicast group.  <br>
If hostname, getaddrinfo(3) will be used to join the correct multicast address for a given socket family.  <br>
If an explicit IPv4 or IPv6 address is given, <code>SockFamily</code> family must be set
</ul>
</table>
</table>

<h2>Dependencies</H2>
     No explicit dependency model.  Interdependencies are expected to be solved
     through the use of IPC.  It is therefore in the best interest of a job developer who expects dependents to define all of
     the sockets in the configuration file. Making it possible to start the job based on demand instead.

<h3>Example XML property list</H3>
     Keep <code>"exampled"</code> running continuously:

<pre>      &lt;?xml version="1.0" encoding="UTF-8"?&gt;
           &lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;
           &lt;plist version="1.0"&gt;
           &lt;var&gt;dict&gt;
                &lt;key&gt;Label&lt;/key&gt; &lt;var&gt;string&lt;/var&gt;com.example.exampled&lt;/string&gt;
                &lt;key&gt;ProgramArguments&lt;/key&gt;
                &lt;array&gt;
                     &lt;var&gt;string&lt;/var&gt;exampled&lt;/string&gt;
                &lt;/array&gt;
                &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt;
           &lt;/dict&gt;
           &lt;/plist&gt;</pre>

<pre>
  <i>&lt;key></i>Label<i>&lt;key></i> <i>&lt;string></i>com.apple.powerd.swd<i>&lt;string></i>
    <i>&lt;key></i>ProgramArguments<i>&lt;key></i> <array></i> <i>&lt;string></i>/System/Library/CoreServices/powerd.bundle/swd<i>&lt;string></i> </array></i>
    <i>&lt;key></i>ProcessType<i>&lt;key></i> <i>&lt;string></i>Background<i>&lt;string></i>
    <i>&lt;key></i>ThrottleInterval<i>&lt;key></i> <i>&lt;integer></i>30<i>&lt;/integer></i>
    <i>&lt;key></i>KeepAlive<i>&lt;key></i>
    <dict></i>
        <i>&lt;key></i>PathState<i>&lt;key></i>
        <dict></i>
            <i>&lt;key></i>/var/log/OSWatchdogFailureString.txt<i>&lt;key></i> <true/></i>
            <i>&lt;key></i>/var/log/OSXWatchdogStacks.gz<i>&lt;key></i> <true/></i>
            <i>&lt;key></i>/var/log/SleepWakeFailureString.txt<i>&lt;key></i> <true/></i>
            <i>&lt;key></i>/var/log/SleepWakeStacks.gz<i>&lt;key></i>

</pre>

<h3>FILES</h3>
Files are named <code><var>Label</var>.plist</code> and may be in:
<table>
     <tr><td><code>~/Library/LaunchAgents         <td>Per-user agents provided by the user.
     <tr><td><code>/Library/LaunchAgents          <td>Per-user agents provided by the administrator.
     <tr><td><code>/Library/LaunchDaemons         <td>System-wide daemons provided by the administrator.
     <tr><td><code>/System/Library/LaunchAgents   <td>Per-user agents provided by Mac OS 
     <tr><td><code>/System/Library/LaunchDaemons  <td>System-wide daemons provided by Mac OS 
</table>

<a href=https://github.com/st3fan/osx-10.9/blob/master/launchd-842.1.4/liblaunch/launch.h>git hub</a> looks authoritatice.<p>
<script src=endodoc.js></script>
</body>
</html>
