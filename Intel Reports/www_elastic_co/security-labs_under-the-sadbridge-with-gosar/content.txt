<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims."/><meta property="og:title" content="Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/under-the-sadbridge-with-gosar/Security Labs Images 21.jpg?d9f18e5358d25aaf4ab169e067c80e47"/><meta property="og:image:alt" content="Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/under-the-sadbridge-with-gosar/Security Labs Images 21.jpg?d9f18e5358d25aaf4ab169e067c80e47"/><meta name="twitter:image:alt" content="Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims."/><link rel="canonical" href="https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-934cf22cec419964.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/Lrmm91TBTcYvApwofX639/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/Lrmm91TBTcYvApwofX639/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-12-13T00:00:00.000Z">13 December 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang&nbsp;Rewrite</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>30 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Funder-the-sadbridge-with-gosar%2FSecurity%20Labs%20Images%2021.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="introduction" class="absolute -top-32"></span>Introduction</h2>
<p>Elastic Security Labs recently observed a new intrusion set targeting Chinese-speaking regions, tracked as REF3864. These organized campaigns target victims by masquerading as legitimate software such as web browsers or social media messaging services. The threat group behind these campaigns shows a moderate degree of versatility in delivering malware across multiple platforms such as Linux, Windows, and Android. During this investigation, our team discovered a unique Windows infection chain with a custom loader we call SADBRIDGE. This loader deploys a Golang-based reimplementation of QUASAR, which we refer to as GOSAR. This is our team’s first time observing a rewrite of QUASAR in the Golang programming language.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>Ongoing campaigns targeting Chinese language speakers with malicious installers masquerading as legitimate software like Telegram and the Opera web browser</li>
<li>Infection chains employ injection and DLL side-loading using a custom loader (SADBRIDGE)</li>
<li>SADBRIDGE deploys a newly-discovered variant of the QUASAR backdoor written in Golang (GOSAR)</li>
<li>GOSAR is a multi-functional backdoor under active development with incomplete features and iterations of improved features observed over time</li>
<li>Elastic Security provides comprehensive prevention and detection capabilities against this attack chain</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ref3864-campaign-overview" class="absolute -top-32"></span>REF3864 Campaign Overview</h2>
<p>In November, the Elastic Security Labs team observed a unique infection chain when detonating several different samples uploaded to VirusTotal. These different samples were hosted via landing pages masquerading as legitimate software such as Telegram or the Opera GX browser.</p>
<p></p>
<p>During this investigation, we uncovered multiple infection chains involving similar techniques:</p>
<ul>
<li>Trojanized MSI installers with low detections</li>
<li>Masquerading using legitimate software bundled with malicious DLLs</li>
<li>Custom SADBRIDGE loader deployed</li>
<li>Final stage GOSAR loaded</li>
</ul>
<p>We believe these campaigns have flown under the radar due to multiple levels of abstraction. Typically, the first phase involves opening an archive file (ZIP) that includes an MSI installer. Legitimate software like the Windows <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64dbg.exe</code> debugging application is used behind-the-scenes to load a malicious, patched DLL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64bridge.dll</code>). This DLL kicks off a new legitimate program (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MonitoringHost.exe</code>) where it side-loads another malicious DLL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code>), ultimately performing injection and loading the GOSAR implant in memory via injection.</p>
<p>Malware researchers extracted SADBRIDGE configurations that reveal adversary-designated campaign dates, and indicate operations with similar TTP’s have been ongoing since at least December 2023. The command-and-control (C2) infrastructure for GOSAR often masquerades under trusted services or software to appear benign and conform to victim expectations for software installers. Throughout the execution chain, there is a focus centered around enumerating Chinese AV products such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">360tray.exe</code>, along with firewall rule names and descriptions in Chinese. Due to these customizations we believe this threat is geared towards targeting Chinese language speakers. Additionally, extensive usage of Chinese language logging indicates the attackers are also Chinese language speakers.</p>
<p>QUASAR has previously been used in state-sponsored espionage, non-state hacktivism, and criminal financially motivated attacks since 2017 (Qualys, <a href="https://www.qualys.com/docs/whitepapers/qualys-wp-stealthy-quasar-evolving-to-lead-the-rat-race-v220727.pdf?_ga=2.196384556.1458236792.1733495919-74841447.1733495919">Evolution of Quasar RAT</a>), including by China-linked <a href="https://www.fbi.gov/wanted/cyber/apt-10-group">APT10</a>. A rewrite in Golang might capitalize on institutional knowledge gained over this period, allowing for additional capabilities without extensive retraining of previously effective TTPs.</p>
<p>GOSAR extends QUASAR with additional information-gathering capabilities, multi-OS support, and improved evasion against anti-virus products and malware classifiers. However, the generic lure websites, and lack of additional targeting information, or actions on the objective, leave us with insufficient evidence to identify attacker motivation(s).</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="sadbridge-introduction" class="absolute -top-32"></span>SADBRIDGE Introduction</h2>
<p>The SADBRIDGE malware loader is packaged as an MSI executable for delivery and uses DLL side-loading with various injection techniques to execute malicious payloads. SADBRIDGE abuses legitimate applications such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64dbg.exe</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MonitoringHost.exe</code> to load malicious DLLs like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64bridge.dll</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code>, which leads to subsequent stages and shellcodes.</p>
<p>Persistence is achieved through service creation and registry modifications. Privilege escalation to Administrator occurs silently using a <a href="https://github.com/0xlane/BypassUAC">UAC bypass technique</a> that abuses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ICMLuaUtil</code> COM interface. In addition, SADBRIDGE incorporates a <a href="https://github.com/zcgonvh/TaskSchedulerMisc">privilege escalation bypass</a> through Windows Task Scheduler to execute its main payload with SYSTEM level privileges.</p>
<p>The SADBRIDGE configuration is encrypted using a simple subtraction of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1</code> on each byte of the configuration string. The encrypted stages are all appended with a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> extension, and decrypted during runtime using XOR and the LZNT1 decompression algorithm.</p>
<p>SADBRIDGE employs <a href="https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/">PoolParty</a>, APC queues, and token manipulation techniques for process injection. To avoid sandbox analysis, it uses long <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Sleep</code> API calls. Another defense evasion technique involves API patching to disable Windows security mechanisms such as the Antimalware Scan Interface (AMSI) and Event Tracing for Windows (ETW).</p>
<p>The following deep dive is structured to explore the execution chain, providing a step-by-step walkthrough of the capabilities and functionalities of significant files and stages, based on the configuration of the analyzed sample. The analysis aims to highlight the interaction between each component and their roles in reaching the final payload.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="sadbridge-code-analysis" class="absolute -top-32"></span>SADBRIDGE Code Analysis</h2>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="msi-analysis" class="absolute -top-32"></span>MSI Analysis</h4>
<p>The initial files are packaged in an MSI using <a href="https://www.advancedinstaller.com/">Advanced Installer</a>, the main files of interest are <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64dbg.exe</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64bridge.dll</code>.</p>
<p></p>
<p>By using MSI tooling (<a href="https://github.com/activescott/lessmsi">lessmsi</a>), we can see the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LaunchApp</code> entrypoint in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aicustact.dll</code> is configured to execute the file path specified in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AI_APP_FILE</code> property.</p>
<p></p>
<p>If we navigate to this <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AI_APP_FILE</code> property, we can see the file tied to this configuration is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64dbg.exe</code>. This represents the file that will be executed after the installation is completed, the legitimate <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NetFxRepairTool.exe</code> is never executed.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="x64bridgedll-side-loading" class="absolute -top-32"></span>x64bridge.dll Side-loading</h4>
<p>When <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64dbg.exe</code> gets executed, it calls the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BridgeInit</code> export from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64bridge.dll</code>. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BridgeInit</code> is a wrapper for the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BridgeStart</code> function.</p>
<p></p>
<p>Similar to techniques observed with <a href="https://www.elastic.co/security-labs/blister-loader">BLISTER</a>, SADBRIDGE patches the export of a legitimate DLL.</p>
<p></p>
<p>During the malware initialization routine, SADBRIDGE begins with generating a hash using the hostname and a magic seed <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x4E67C6A7</code>. This hash is used as a directory name for storing the encrypted configuration file. The encrypted configuration is written to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Users\Public\Documents\&lt;hostname_hash&gt;\edbtmp.log</code>. This file contains the attributes FILE_ATTRIBUTE_SYSTEM, FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_HIDDEN  to hide itself from an ordinary directory listing.</p>
<p></p>
<p>Decrypting the configuration is straightforward, the encrypted chunks are separated with null bytes. For each byte within the encrypted chunks, we can increment them by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1</code>.</p>
<p>The configuration consists of:</p>
<ul>
<li>Possible campaign date</li>
<li>Strings to be used for creating services</li>
<li>New name for MonitoringHost.exe (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code>)</li>
<li>DLL name for the DLL to be sideloaded by MonitoringHost.exe (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code>)</li>
<li>Absolute paths for additional stages (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> files)</li>
<li>The primary injection target for hosting GOSAR (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">svchost.exe</code>)</li>
</ul>
<p></p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker</code> directory (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Microsoft\DeviceSync\Device\Stage\Data\DevQueryBroker\</code>) contains all of the encrypted stages (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> files) that are decrypted at runtime. The file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code>) is a renamed copy of Microsoft legitimate application (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MonitoringHost.exe</code>).</p>
<p></p>
<p>Finally, it creates a process to run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code> which side-loads the malicious <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code> in the same folder.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="healthserviceruntimedll" class="absolute -top-32"></span>HealthServiceRuntime.dll</h4>
<p>This module drops both an encrypted and partially decrypted shellcode in the User’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%TEMP%</code> directory. The file name for the shellcode follows the format: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">log&lt;random_string&gt;.tmp</code>. Each byte of the partially decrypted shellcode is then decremented by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x10</code> to fully decrypt. The shellcode is executed in a new thread of the same process.</p>
<p></p>
<p>The malware leverages API hashing using the same algorithm in <a href="https://www.sonicwall.com/blog/project-androm-backdoor-trojan">research</a> published by SonicWall, the hashing algorithm is listed in the Appendix <a href="/security-labs/under-the-sadbridge-with-gosar#appendix">section</a>. The shellcode decrypts <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.log</code> into a PE file then performs a simple XOR operation with a single byte (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x42)</code> in the first third of the file where then it decompresses the result using the LZNT1 algorithm.</p>
<p></p>
<p>The shellcode then unmaps any existing mappings at the PE file&#x27;s preferred base address using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtUnmapViewOfSection</code>, ensuring that a call to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VirtualAlloc</code> will allocate memory starting at the preferred base address. Finally, it maps the decrypted PE file to this allocated memory and transfers execution to its entry point. All shellcodes identified and executed by SADBRIDGE share an identical code structure, differing only in the specific <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> files they reference for decryption and execution.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="devquerybrokerlog" class="absolute -top-32"></span>DevQueryBroker.log</h4>
<p>The malware dynamically loads <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">amsi.dll</code> to disable critical security mechanisms in Windows. It patches <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiScanBuffer</code> in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">amsi.dll</code> by inserting instructions to modify the return value to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x80070057</code>, the standardized Microsoft error code <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">E_INVALIDARG</code> indicating invalid arguments, and returning prematurely, to effectively bypass the scanning logic. Similarly, it patches <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiOpenSession</code> to always return the same error code <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">E_INVALIDARG</code>. Additionally, it patches <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwEventWrite</code> in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code>, replacing the first instruction with a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ret</code> instruction to disable Event Tracing for Windows (ETW), suppressing any logging of malicious activity.</p>
<p></p>
<p>Following the patching, an encrypted shellcode is written to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">temp.ini</code> at path (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Microsoft\DeviceSync\Device\Stage\Data\DevQueryBroker\temp.ini</code>).<br/>
<!-- -->The malware checks the current process token’s group membership to determine its privilege level. It verifies if the process belongs to the LocalSystem account by initializing a SID with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SECURITY_LOCAL_SYSTEM_RID</code> and calling <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CheckTokenMembership</code>. If not, it attempts to check for membership in the Administrators group by creating a SID using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SECURITY_BUILTIN_DOMAIN_RID</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DOMAIN_ALIAS_RID_ADMINS</code> and performing a similar token membership check.</p>
<p>If the current process does not have LocalSystem or Administrator privileges, privileges are first elevated to Administrator through a <a href="https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512">UAC bypass mechanism</a> by leveraging the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ICMLuaUtil</code> COM interface. It crafts a moniker string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&quot;Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}&quot;</code> to create an instance of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CMSTPLUA</code> object with Administrator privileges. Once the object is created and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ICMLuaUtil</code> interface is obtained, the malware uses the exposed <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ShellExec</code> method of the interface to run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code>.</p>
<p></p>
<p>If a task or a service is not created to run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code> routinely, the malware checks if the Anti-Virus process <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">360tray.exe</code> is running. If it is not running, a service is created for privilege escalation to SYSTEM, with the following properties:</p>
<ul>
<li>Service name: <strong>DevQueryBrokerService</strong><br/>
<!-- -->Binary path name: <strong>“C:\ProgramData\Microsoft\DeviceSync\Device\Stage\Data\DevQueryBroker\DevQueryBroker.exe -svc”</strong>.</li>
<li>Display name: <strong>DevQuery Background Discovery Broker Service</strong></li>
<li>Description: <strong>Enables apps to discover devices with a background task.</strong></li>
<li>Start type: <strong>Automatically at system boot</strong></li>
<li>Privileges: <strong>LocalSystem</strong></li>
</ul>
<p>If <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">360tray.exe</code> is detected running, the malware writes an encrypted PE file to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerService.log</code>, then maps a next-stage PE file (Stage 1) into the current process memory, transferring execution to it.</p>
<p>Once <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code> is re-triggered with SYSTEM level privileges and reaches this part of the chain, the malware checks the Windows version. For systems running Vista or later (excluding Windows 7), it maps another next-stage (Stage 2) into memory and transfers execution there.</p>
<p>On Windows 7, however, it executes a shellcode, which decrypts and runs the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerPre.log</code> file.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-1-injection-explorerexe" class="absolute -top-32"></span>Stage 1 Injection (explorer.exe)</h3>
<p>SADBRIDGE utilizes <a href="https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/">PoolParty Variant 7</a> to inject shellcode into <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">explorer.exe</code> by targeting its thread pool’s I/O completion queue. It first duplicates a handle to the target process&#x27;s I/O completion queue. It then allocates memory within <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">explorer.exe</code> to store the shellcode. Additional memory is allocated to store a crafted <a href="https://github.com/SafeBreach-Labs/PoolParty/blob/77e968b35f4bad74add33ea8a2b0b5ed9543276c/PoolParty/ThreadPool.hpp#L42"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TP_DIRECT</code></a> structure, which includes the base address of the shellcode as the callback address. Finally, it calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwSetIoCompletion</code>, passing a pointer to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TP_DIRECT</code> structure to queue a packet to the I/O completion queue of the target process&#x27;s worker factory (worker threads manager), effectively triggering the execution of the injected shellcode.</p>
<p></p>
<p>This shellcode decrypts the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerService.log</code> file, unmaps any memory regions occupying its preferred base address, maps the PE file to that address, and then executes its entry point. This behavior mirrors the previously observed shellcode.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-2-injection-spoolsvexelsassexe" class="absolute -top-32"></span>Stage 2 Injection (spoolsv.exe/lsass.exe)</h3>
<p>For Stage 2, SADBRIDGE injects shellcode into <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">spoolsv.exe</code>, or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">lsass.exe</code> if <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">spoolsv.exe</code> is unavailable, using the same injection technique as in Stage 1. The shellcode exhibits similar behavior to the earlier stages: it decrypts <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerPre.log</code> into a PE file, unmaps any regions occupying its preferred base address, maps the PE file, and then transfers execution to its entry point.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="devquerybrokerservicelog" class="absolute -top-32"></span>DevQueryBrokerService.log</h4>
<p>The shellcode decrypted from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerService.log</code> as mentioned in the previous section leverages a privilege escalation technique using the Windows Task Scheduler. SADBRIDGE integrates a public UAC <a href="https://github.com/zcgonvh/TaskSchedulerMisc">bypass technique</a> using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IElevatedFactorySever</code> COM object to indirectly create the scheduled task. This task is configured to run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code> on a daily basis with SYSTEM level privileges using the task name <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerService</code>.</p>
<p></p>
<p>In order to cover its tracks, the malware spoofs the image path and command-line by modifying the Process Environment Block (PEB) directly, likely in an attempt to disguise the COM service as coming from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">explorer.exe</code>.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="devquerybrokerprelog" class="absolute -top-32"></span>DevQueryBrokerPre.log</h4>
<p>SADBRIDGE creates a service named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerServiceSvc</code> under the registry subkey <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM\CurrentControlSet\Services\DevQueryBrokerServiceSvc</code> with the following attributes:</p>
<ul>
<li><strong>Description</strong>: Enables apps to discover devices with a background task.</li>
<li><strong>DisplayName</strong>: DevQuery Background Discovery Broker Service</li>
<li><strong>ErrorControl</strong>: 1</li>
<li><strong>ImagePath</strong>: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%systemRoot%\system32\svchost.exe -k netsvcs</code></li>
<li><strong>ObjectName</strong>: LocalSystem</li>
<li><strong>Start</strong>: 2 (auto-start)</li>
<li><strong>Type</strong>: 16.</li>
<li><strong>Failure Actions</strong>:<!-- -->
<ul>
<li>Resets failure count every 24 hours.</li>
<li>Executes three restart attempts: a 20ms delay for the first, and a 1-minute delay for the second and third.</li>
</ul>
</li>
</ul>
<p>The service parameters specify the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ServiceDll</code> located at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Program Files (x86)\Common Files\Microsoft Shared\Stationery\&lt;hostname_hash&gt;\DevQueryBrokerService.dll</code>. If the DLL file does not exist, it will be dropped to disk right after.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerService.dll</code> has a similar code structure as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code>, which is seen in the earlier stages of the execution chain. It is responsible for decrypting <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.log</code> and running it. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ServiceDll</code> will be loaded and executed by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">svchost.exe</code> when the service starts.</p>
<p></p>
<p>Additionally, it modifies the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost\netsvcs</code> key to include an entry for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerServiceSvc</code> to integrate the newly created service into the group of services managed by the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">netsvcs</code> service host group.</p>
<p></p>
<p>SADBRIDGE then deletes the scheduled task and service created previously by removing the registry subkeys <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\DevQueryBrokerService</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM\\CurrentControlSet\\Services\\DevQueryBrokerService</code>.</p>
<p>Finally, it removes the files <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBroker.exe</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HealthServiceRuntime.dll</code> in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Microsoft\DeviceSync\Device\Stage\Data\DevQueryBroker</code> folder, as the new persistence mechanism is in place.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="gosar-injection" class="absolute -top-32"></span>GOSAR Injection</h2>
<p>In the latter half of the code, SADBRIDGE enumerates all active sessions on the local machine using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSEnumerateSessionsA</code> API.</p>
<p>If sessions are found, it iterates through each session:</p>
<ul>
<li>For each session, it attempts to retrieve the username (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSUserName</code>) using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSQuerySessionInformationA</code>. If the query fails, it moves to the next session.</li>
<li>If <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSUserName</code> is not empty, the code targets <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">svchost.exe</code>, passing its path, the session ID, and the content of the loader configuration to a subroutine that injects the final stage.</li>
<li>If <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSUserName</code> is empty but the session&#x27;s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WinStationName</code> is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&quot;Services&quot;</code> (indicating a service session), it targets <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dllhost.exe</code> instead, passing the same parameters to the final stage injection subroutine.</li>
</ul>
<p>If no sessions are found, it enters an infinite loop to repeatedly enumerate sessions and invoke the subroutine for injecting the final stage, while performing checks to avoid redundant injections.</p>
<p>Logged-in sessions target <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">svchost.exe</code>, while service sessions or sessions without a logged-in user target <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dllhost.exe</code>.</p>
<p></p>
<p>If a session ID is available, the code attempts to duplicate the user token for that session and elevate the duplicated token&#x27;s integrity level to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">S-1-16-12288</code> (System integrity). It then uses the elevated token to create a child process (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">svchost.exe</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dllhost.exe</code>) via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateProcessAsUserA</code>.</p>
<p></p>
<p>If token manipulation fails or no session ID is available (system processes can have a session ID of 0), it falls back to creating a process without a token using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateProcessA</code>.</p>
<p>The encrypted shellcode <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Microsoft\DeviceSync\Device\Stage\Data\DevQueryBroker\temp.ini</code> is decrypted using the same XOR and LZNT1 decompression technique seen previously to decrypt <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.log</code> files, and APC injection is used to queue the shellcode for execution in the newly created process’s thread.</p>
<p></p>
<p>Finally, the injected shellcode decrypts <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DevQueryBrokerCore.log</code> to GOSAR and runs it in the newly created process’s memory.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="gosar-introduction" class="absolute -top-32"></span>GOSAR Introduction</h2>
<p>GOSAR is a multi-functional remote access trojan found targeting Windows and Linux systems. This backdoor includes capabilities such as retrieving system information, taking screenshots, executing commands, keylogging, and much more. The GOSAR backdoor retains much of QUASAR&#x27;s core functionality and behavior, while incorporating several modifications that differentiate it from the original version.</p>
<p>By rewriting malware in modern languages like Go, this can offer reduced detection rates as many antivirus solutions and malware classifiers struggle to identify malicious strings/characteristics under these new programming constructs. Below is a good example of an unpacked GOSAR receiving only 5 detections upon upload.</p>
<p></p>
<p>Notably, this variant supports multiple platforms, including ELF binaries for Linux systems and traditional PE files for Windows. This cross-platform capability aligns with the adaptability of Go, making it more versatile than the original .NET-based QUASAR. Within the following section, we will focus on highlighting GOSAR’s code structure, new features and additions compared to the open-source version (QUASAR).</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="gosar-code-analysis-overview" class="absolute -top-32"></span>GOSAR Code Analysis Overview</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="code-structure-of-gosar" class="absolute -top-32"></span>Code structure of GOSAR</h3>
<p>As the binary retained all its symbols, we were able to reconstruct the source code structure, which was extracted from a sample of version <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0.12.01</code></p>
<p></p>
<ul>
<li><strong>vibrant/config</strong>: Contains the configuration files for the malware.</li>
<li><strong>vibrant/proto</strong>: Houses all the Google Protocol Buffers (proto) declarations.</li>
<li><strong>vibrant/network</strong>: Includes functions related to networking, such as the main connection loop, proxy handling and also thread to configure the firewall and setting up a listener</li>
<li><strong>vibrant/msgs/resolvers</strong>: Defines the commands handled by the malware. These commands are assigned to an object within the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_msgs_init*</code> functions.</li>
<li><strong>vibrant/msgs/services</strong>: Introduces new functionality, such as running services like keyloggers, clipboard logger, these services are started in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_network._ptr_Connection.Start</code> function.</li>
<li><strong>vibrant/logs</strong>: Responsible for logging the malware’s execution. The logs are encrypted with an AES key stored in the configuration. The malware decrypts the logs in chunks using AES.</li>
<li><strong>vibrant/pkg/helpers</strong>: Contains helper functions used across various malware commands and services.</li>
<li><strong>vibrant/pkg/screenshot</strong>: Handles the screenshot capture functionality on the infected system.</li>
<li><strong>vibrant/pkg/utils</strong>: Includes utility functions, such as generating random values.</li>
<li><strong>vibrant/pkg/native</strong>: Provides functions for calling Windows API (WINAPI) functions.</li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="new-additions-to-gosar" class="absolute -top-32"></span>New Additions to GOSAR</h3>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="communication-and-information-gathering" class="absolute -top-32"></span>Communication and information gathering</h4>
<p>This new variant continues to use the same communication method as the original, based on <strong>TCP TLS</strong>. Upon connection, it first sends system information to the C2, with 4 new fields added:</p>
<ul>
<li>IPAddress</li>
<li>AntiVirus</li>
<li>ClipboardSettings</li>
<li>Wallets</li>
</ul>
<p>The list of AntiViruses and digital wallets are initialized in the function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_pkg_helpers_init</code> and can be found at the bottom of this document.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="services" class="absolute -top-32"></span>Services</h4>
<p>The malware handles 3 services that are started during the initial connection of the client to the C2:</p>
<ul>
<li>vibrant_services_KeyLogger</li>
<li>vibrant_services_ClipboardLogger</li>
<li>vibrant_services_TickWriteFile</li>
</ul>
<p></p>
<h5 class="eyebrow relative"><span id="keylogger" class="absolute -top-32"></span>KeyLogger</h5>
<p>The keylogging functionality in GOSAR is implemented in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_services_KeyLogger</code> function. This feature relies on Windows APIs to intercept and record keystrokes on the infected system by setting a global Windows hook with <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetWindowsHookEx</code></a> with the parameter <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WH_KEYBOARD_LL</code> to monitor low-level keyboard events. The hook function is named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_services_KeyLogger_func1</code>.</p>
<p></p>
<h5 class="eyebrow relative"><span id="clipboardlogger" class="absolute -top-32"></span>ClipboardLogger</h5>
<p>The clipboard logging functionality is straightforward and relies on Windows APIs. It first checks for the availability of clipboard data using <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isclipboardformatavailable"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IsClipboardFormatAvailable</code></a> then retrieves it using <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetClipboardData</code></a> API.</p>
<p></p>
<h5 class="eyebrow relative"><span id="tickwritefile" class="absolute -top-32"></span>TickWriteFile</h5>
<p>Both <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ClipboardLogger</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KeyLogger</code> services collect data that is written by the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TickWriteFile</code> periodically to directory (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\diagnostics</code>) under a file of the current date, example <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2024-11-27</code>.<br/>
<!-- -->It can be decrypted by first subtracting the value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1f</code> then xoring it with the value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x18</code> as shown in the CyberChef recipe.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="networking-setup" class="absolute -top-32"></span>Networking setup</h4>
<p>After initializing its services, the malware spawns <strong>three threads</strong> dedicated to its networking setup.</p>
<ul>
<li>vibrant_network_ConfigFirewallRule</li>
<li>vibrant_network_ConfigHosts</li>
<li>vibrant_network_ConfigAutoListener</li>
</ul>
<p><a href="/security-labs/assets/images/under-the-sadbridge-with-gosar/image15.png">Threads handling networking setup</a></p>
<h5 class="eyebrow relative"><span id="configfirewallrule" class="absolute -top-32"></span>ConfigFirewallRule</h5>
<p>The malware creates an inbound firewall rule for the ports range <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">51756-51776</code> under a Chinese name that is translated to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Distributed Transaction Coordinator (LAN)</code> it allows all programs and IP addresses inbound the description is set to :<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Inbound rules for the core transaction manager of the Distributed Transaction Coordinator service are managed remotely through RPC/TCP.</code></p>
<p></p>
<h5 class="eyebrow relative"><span id="confighosts" class="absolute -top-32"></span>ConfigHosts</h5>
<p>This function adds an entry to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c:\Windows\System32\Drivers\etc\hosts</code> the following <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">127.0.0.1 micrornetworks.com</code>. The reason for adding this entry is unclear, but it is likely due to missing functionalities or incomplete features in the malware&#x27;s current development stage.</p>
<h5 class="eyebrow relative"><span id="configautolistener" class="absolute -top-32"></span>ConfigAutoListener</h5>
<p>This functionality of the malware runs an HTTP server listener on the first available port within the range <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">51756-51776</code>, which was previously allowed by a firewall rule. Interestingly, the server does not handle any commands, which proves that the malware is still under development. The current version we have only processes a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GET</code> request to the URI <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/security.js</code>, responding with the string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">callback();</code>, any other request returns a 404 error code. This minimal response could indicate that the server is a placeholder or part of an early development stage, with the potential for more complex functionalities to be added later</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="logs" class="absolute -top-32"></span>Logs</h4>
<p>The malware saves its runtime logs in the directory: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%APPDATA%\Roaming\Microsoft\Logs</code> under the filename formatted as: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">windows-update-log-&lt;YearMonthDay&gt;.log</code>.<br/>
<!-- -->Each log entry is encrypted with HMAC-AES algorithm; the key is hardcoded in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vibrant_config</code> function, the following is an example:</p>
<p></p>
<p>The attacker can remotely retrieve the malware&#x27;s runtime logs by issuing the command <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ResolveGetRunLogs</code>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="plugins" class="absolute -top-32"></span>Plugins</h4>
<p>The malware has the capability to execute plugins, which are PE files downloaded from the C2 and stored on disk encrypted with an XOR algorithm. These plugins are saved at the path: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\policy-err.log</code>. To execute a plugin, the command <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ResolveDoExecutePlugin</code> is called, it first checks if a plugin is available.</p>
<p></p>
<p>It then loads a native DLL reflectively that is stored in base64 format in the binary named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">plugins.dll</code> and executes its export function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ExecPlugin</code>.</p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ExecPlugin</code> creates a suspended process of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\System32\msiexec.exe</code> with the arguments <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/package</code> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/quiet</code>. It then queues <a href="https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls">Asynchronous Procedure Calls</a> (APC) to the process&#x27;s 	main thread. When the thread is resumed, the queued shellcode is executed.</p>
<p></p>
<p>The shellcode reads the encrypted plugin stored at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\policy-err.log</code>, decrypts it using a hardcoded 1-byte XOR key, and reflectively loads and executes it.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="hvnc" class="absolute -top-32"></span>HVNC</h4>
<p>The malware supports hidden VNC(HVNC) through the existing socket, it exposes 5 commands</p>
<ul>
<li>ResolveHVNCCommand</li>
<li>ResolveGetHVNCScreen</li>
<li>ResolveStopHVNC</li>
<li>ResolveDoHVNCKeyboardEvent</li>
<li>ResolveDoHVNCMouseEvent</li>
</ul>
<p>The first command that is executed is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ResolveGetHVNCScreen</code> which will first initialise it and set up a view, it uses an embedded native DLL <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HiddenDesktop.dll</code> in base64 format, the DLL is reflectively loaded into memory and executed.</p>
<p>The DLL is responsible for executing low level APIs to setup the HVNC, with a total of 7 exported functions:</p>
<ul>
<li>ExcuteCommand</li>
<li>DoMouseScroll</li>
<li>DoMouseRightClick</li>
<li>DoMouseMove</li>
<li>DoMouseLeftClick</li>
<li>DoKeyPress</li>
<li>CaptureScreen</li>
</ul>
<p>The first export function called is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Initialise</code> to initialise a desktop with <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopa"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateDesktopA</code></a> API. This HVNC implementation handles 17 commands in total that can be found in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ExcuteCommand</code> export, as noted it does have a typo in the name, the command ID is forwarded from the malware’s command <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ResolveHVNCCommand</code> that will call <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ExcuteCommand</code>.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Command ID</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">0x401</td><td align="left">The function first disables taskbar button grouping by setting the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TaskbarGlomLevel</code> registry key to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2</code> under <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code>. Next, it ensures the taskbar is always visible and on top by using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SHAppBarMessage</code> with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ABM_SETSTATE</code> command, setting the state to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ABS_ALWAYSONTOP</code>.</td></tr><tr><td align="left">0x402</td><td align="left">Spawns a RUN dialog box by executing the 61th export function of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">shell32.dll</code>.<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\system32\rundll32.exe shell32.dll,#61</code></td></tr><tr><td align="left">0x403</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">powershell.exe</code></td></tr><tr><td align="left">0x404</td><td align="left">Executes a PE file stored in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\\ProgramData\\shell.log</code></td></tr><tr><td align="left">0x405</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.exe</code></td></tr><tr><td align="left">0x406</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">msedge.exe</code></td></tr><tr><td align="left">0x407</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">firefox.exe</code></td></tr><tr><td align="left">0x408</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iexplore.exe</code></td></tr><tr><td align="left">0x409</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">360se.exe</code></td></tr><tr><td align="left">0x40A</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">360ChromeX.exe</code>.</td></tr><tr><td align="left">0x40B</td><td align="left">Runs an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SogouExplorer.exe</code></td></tr><tr><td align="left">0x40C</td><td align="left">Close current window</td></tr><tr><td align="left">0x40D</td><td align="left">Minimizes the specified window</td></tr><tr><td align="left">0x40E</td><td align="left">Activates the window and displays it as a maximized window</td></tr><tr><td align="left">0x40F</td><td align="left">Kills the process of a window</td></tr><tr><td align="left">0x410</td><td align="left">Sets the clipboard</td></tr><tr><td align="left">0x411</td><td align="left">Clears the Clipboard</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="screenshot" class="absolute -top-32"></span>Screenshot</h4>
<p>The malware loads reflectively the third and last PE DLL embedded in base64 format named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Capture.dll</code>, it has 5 export functions:</p>
<ul>
<li>CaptureFirstScreen</li>
<li>CaptureNextScreen</li>
<li>GetBitmapInfo</li>
<li>GetBitmapInfoSize</li>
<li>SetQuality</li>
</ul>
<p>The library is first initialized by calling <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resolvers_ResolveGetBitmapInfo</code> that reflectively loads and executes its <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DllEntryPoint</code> which will setup the screen capture structures using common Windows APIs like <a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateCompatibleDC</code></a>, <a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateCompatibleBitmap</code></a> and <a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createdibsection"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateDIBSection</code></a>. The 2 export functions <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CaptureFirstScreen</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CaptureNextScreen</code> are used to capture a screenshot of the victim&#x27;s desktop as a JPEG image.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="observation" class="absolute -top-32"></span>Observation</h3>
<p>Interestingly, the original .NET QUASAR server can still be used to receive beaconing from GOSAR samples, as they have retained the same communication protocol. However, operational use of it would require significant modifications to support GOSAR functionalities.</p>
<p>It is unclear whether the authors updated or extended the open source .NET QUASAR server, or developed a completely new one. It is worth mentioning that they have retained the default listening port, 1080, consistent with the original implementation.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="new-functionality" class="absolute -top-32"></span>New functionality</h3>
<p>The following table provides a description of all the newly added commands:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">New commands</th><th align="left"></th></tr></thead><tbody><tr><td align="left">ResolveDoRoboCopy</td><td align="left">Executes <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RoboCopy</code></a> command to copy files</td></tr><tr><td align="left">ResolveDoCompressFiles</td><td align="left">Compress files in a zip format</td></tr><tr><td align="left">ResolveDoExtractFile</td><td align="left">Extract a zip file</td></tr><tr><td align="left">ResolveDoCopyFiles</td><td align="left">Copies a directory or file in the infected machine</td></tr><tr><td align="left">ResolveGetRunLogs</td><td align="left">Get available logs</td></tr><tr><td align="left">ResolveHVNCCommand</td><td align="left">Execute a HVNC command</td></tr><tr><td align="left">ResolveGetHVNCScreen</td><td align="left">Initiate HVNC</td></tr><tr><td align="left">ResolveStopHVNC</td><td align="left">Stop the HVNC session</td></tr><tr><td align="left">ResolveDoHVNCKeyboardEvent</td><td align="left">Send keyboard event to the HVNC</td></tr><tr><td align="left">ResolveDoHVNCMouseEvent</td><td align="left">Send mouse event to the HVNC</td></tr><tr><td align="left">ResolveDoExecutePlugin</td><td align="left">Execute a plugin</td></tr><tr><td align="left">ResolveGetProcesses</td><td align="left">Get a list of running processes</td></tr><tr><td align="left">ResolveDoProcessStart</td><td align="left">Start a process</td></tr><tr><td align="left">ResolveDoProcessEnd</td><td align="left">Kill a process</td></tr><tr><td align="left">ResolveGetBitmapInfo</td><td align="left">Retrieve the <a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapinfo"><strong>BITMAPINFO</strong></a> structure for the current screen&#x27;s display settings</td></tr><tr><td align="left">ResolveGetMonitors</td><td align="left">Enumerate victim’s display monitors with <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EnumDisplayMonitors</code></a> API</td></tr><tr><td align="left">ResolveGetDesktop</td><td align="left">Start screen capture functionality</td></tr><tr><td align="left">ResolveStopGetDesktop</td><td align="left">Stop the screen capture functionality</td></tr><tr><td align="left">ResolveNewShellExecute</td><td align="left">Opens pipes to a spawned cmd.exe process and send commands to it</td></tr><tr><td align="left">ResolveGetSchTasks</td><td align="left">Get scheduled tasks by running the command <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">schtasks /query /fo list /v</code></td></tr><tr><td align="left">ResolveGetScreenshot</td><td align="left">Capture a screenshot of the victim’s desktop</td></tr><tr><td align="left">ResolveGetServices</td><td align="left">Get the list of services with a <strong>WMI</strong> query: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">select * from Win32_Service</code></td></tr><tr><td align="left">ResolveDoServiceOperation</td><td align="left">Start or stop a service</td></tr><tr><td align="left">ResolveDoDisableMultiLogon</td><td align="left">Disable multiple session by user by setting the value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">fSingleSessionPerUser</code> to 1 under the key <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TerminalServer</code></td></tr><tr><td align="left">ResolveDoRestoreNLA</td><td align="left">Restores the security settings for Remote Desktop Protocol (RDP), enabling <strong>Network Level Authentication</strong> (NLA) and enforcing <strong>SSL/TLS</strong> encryption for secure communication.</td></tr><tr><td align="left">ResolveGetRemoteClientInformation</td><td align="left">Get a list of all local users that are enabled, the <strong>RDP por</strong>t and <strong>LAN IP</strong> and <strong>OS specific information</strong>: <strong>DisplayVersion</strong>, <strong>SystemRoot</strong> and <strong>CurrentBuildNumber</strong> extracted from the registry key <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion</code></td></tr><tr><td align="left">ResolveDoInstallWrapper</td><td align="left">Setup a Hidden Remote Desktop Protocol (<strong>HRDP</strong>)</td></tr><tr><td align="left">ResolveDoUninstallWrapper</td><td align="left">Uninstall <strong>HRDP</strong></td></tr><tr><td align="left">ResolveDoRecoverPrivileges</td><td align="left">Restores the original <strong><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKEY_LOCAL_MACHINE\\SAM\\SAM</code></strong> registry before changes were made during the installation of the <strong>HRDP</strong></td></tr><tr><td align="left">ResolveGetRemoteSessions</td><td align="left">Retrieve information about the RDP sessions on the machine.</td></tr><tr><td align="left">ResolveDoLogoffSession</td><td align="left">Logoff RDP session with <a href="https://learn.microsoft.com/en-us/windows/win32/api/wtsapi32/nf-wtsapi32-wtslogoffsession">**<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WTSLogoffSession</code></a>** API</td></tr><tr><td align="left">ResolveGetSystemInfo</td><td align="left">Get system information</td></tr><tr><td align="left">ResolveGetConnections</td><td align="left">Get all the connections in the machine</td></tr><tr><td align="left">ResolveDoCloseConnection</td><td align="left">Not implemented</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>Malware and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0009/">Collection</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0011/">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010/">Exfiltration</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0003/">Persistence</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0004/">Privilege Escalation</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1574/002/">Hijack Execution Flow: DLL Side-Loading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1056/001/">Input Capture: Keylogging</a></li>
<li><a href="https://attack.mitre.org/techniques/T1055/004/">Process Injection: Asynchronous Procedure Call</a></li>
<li><a href="https://attack.mitre.org/techniques/T1057/">Process Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1564/003/">Hide Artifacts: Hidden Window</a></li>
<li><a href="https://attack.mitre.org/techniques/T1543/003/">Create or Modify System Process: Windows Service</a></li>
<li><a href="https://attack.mitre.org/techniques/T1571/">Non-Standard Port</a></li>
<li><a href="https://attack.mitre.org/techniques/T1548/002/">Abuse Elevation Control Mechanism: Bypass User Account Control</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027">Obfuscated Files or Information</a></li>
<li><a href="https://attack.mitre.org/techniques/T1562/001/">Impair Defenses: Disable or Modify Tools</a></li>
<li><a href="https://attack.mitre.org/techniques/T1497/003/">Virtualization/Sandbox Evasion: Time Based Evasion</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="mitigating-ref3864" class="absolute -top-32"></span>Mitigating REF3864</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection" class="absolute -top-32"></span>Detection</h3>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_amsi_bypass_powershell.toml">Potential Antimalware Scan Interface Bypass via PowerShell</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_printspooler_childprocess.toml">Unusual Print Spooler Child Process</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/execution_from_unusual_path_cmdline.toml">Execution from Unusual Directory - Command Line</a></li>
<li><a href="https://www.elastic.co/guide/en/security/current/external-ip-lookup-from-non-browser-process.html">External IP Lookup from Non-Browser Process</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_parentchild_relationship.toml">Unusual Parent-Child Relationship</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_unusual_network_connection_via_dllhost.toml">Unusual Network Connection via DllHost</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_services_registry.toml">Unusual Persistence via Services Registry</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_parent_process_pid_spoofing.toml">Parent Process PID Spoofing</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="prevention" class="absolute -top-32"></span>Prevention</h3>
<ul>
<li><a href="https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_masquerading_process_with_unusual_args_and_netcon.toml">Network Connection via Process with Unusual Arguments</a></li>
<li><a href="https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_unusual_svchost.toml">Potential Masquerading as SVCHOST</a></li>
<li><a href="https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_netcon_dll_suspicious_callstack.toml">Network Module Loaded from Suspicious Unbacked Memory</a></li>
<li><a href="https://github.com/elastic/endpoint-rules/blob/95b23ae32ce1445a8a2f333dab973de313b14016/rules/windows/privilege_escalation_uac_bypass_com_interface_icmluautil.toml">UAC Bypass via ICMLuaUtil Elevated COM Interface</a></li>
<li><a href="https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_susp_imageload_timestomp.toml">Potential Image Load with a Spoofed Creation Time</a></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h4>
<p>Elastic Security has created YARA rules to identify this activity.</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_Gosar.yar">Multi.Trojan.Gosar</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_SadBridge.yar">Windows.Trojan.SadBridge</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Observable</th><th align="left">Type</th><th align="left">Name</th><th align="left">Reference</th></tr></thead><tbody><tr><td align="left">opera-x[.]net</td><td align="left">domain-name</td><td align="left"></td><td align="left">Landing page</td></tr><tr><td align="left">teledown-cn[.]com</td><td align="left">domain-name</td><td align="left"></td><td align="left">Landing page</td></tr><tr><td align="left">15af8c34e25268b79022d3434aa4b823ad9d34f3efc6a8124ecf0276700ecc39</td><td align="left">SHA-256</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NetFxRepairTools.msi</code></td><td align="left">MSI</td></tr><tr><td align="left">accd651f58dd3f7eaaa06df051e4c09d2edac67bb046a2dcb262aa6db4291de7</td><td align="left">SHA-256</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">x64bridge.dll</code></td><td align="left">SADBRIDGE</td></tr><tr><td align="left">7964a9f1732911e9e9b9e05cd7e997b0e4e2e14709490a1b657673011bc54210</td><td align="left">SHA-256</td><td align="left"></td><td align="left">GOSAR</td></tr><tr><td align="left">ferp.googledns[.]io</td><td align="left">domain-name</td><td align="left"></td><td align="left">GOSAR C2 Server</td></tr><tr><td align="left">hk-dns.secssl[.]com</td><td align="left">domain-name</td><td align="left"></td><td align="left">GOSAR C2 Server</td></tr><tr><td align="left">hk-dns.winsiked[.]com</td><td align="left">domain-name</td><td align="left"></td><td align="left">GOSAR C2 Server</td></tr><tr><td align="left">hk-dns.wkossclsaleklddeff[.]is</td><td align="left">domain-name</td><td align="left"></td><td align="left">GOSAR C2 Server</td></tr><tr><td align="left">hk-dns.wkossclsaleklddeff[.]io</td><td align="left">domain-name</td><td align="left"></td><td align="left">GOSAR C2 Server</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://zcgonvh.com/post/Advanced_Windows_Task_Scheduler_Playbook-Part.2_from_COM_to_UAC_bypass_and_get_SYSTEM_dirtectly.html">https://zcgonvh.com/post/Advanced_Windows_Task_Scheduler_Playbook-Part.2_from_COM_to_UAC_bypass_and_get_SYSTEM_dirtectly.html</a></li>
<li><a href="https://www.sonicwall.com/blog/project-androm-backdoor-trojan">https://www.sonicwall.com/blog/project-androm-backdoor-trojan</a></li>
<li><a href="https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/">https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/</a></li>
<li><a href="https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512">https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="appendix" class="absolute -top-32"></span>Appendix</h2>
<p>Hashing algorithm (SADBRIDGE)</p>
<pre><code>def ror(x, n, max_bits=32) -&gt; int:
    &quot;&quot;&quot;Rotate right within a max bit limit, default 32-bit.&quot;&quot;&quot;
    n %= max_bits
    return ((x &gt;&gt; n) | (x &lt;&lt; (max_bits - n))) &amp; (2**max_bits - 1)

def ror_13(data) -&gt; int:
    data = data.encode(&#x27;ascii&#x27;)
    hash_value = 0

    for byte in data:
        hash_value = ror(hash_value, 13)
        
        if byte &gt;= 0x61:
            byte -= 32  # Convert to uppercase
        hash_value = (hash_value + byte) &amp; 0xFFFFFFFF

    return hash_value


def generate_hash(data, dll) -&gt; int:
    dll_hash = ror_13(dll)
    result = (dll_hash + ror_13(data)) &amp; 0xFFFFFFFF
    
    return hex(result)</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="av-products-checked-in-gosar" class="absolute -top-32"></span>AV products checked in GOSAR</h3>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="center">360sd.exe</th><th align="center">kswebshield.exe</th></tr></thead><tbody><tr><td align="center">360tray.exe</td><td align="center">kvmonxp.exe</td></tr><tr><td align="center">a2guard.exe</td><td align="center">kxetray.exe</td></tr><tr><td align="center">ad-watch.exe</td><td align="center">mcshield.exe</td></tr><tr><td align="center">arcatasksservice.exe</td><td align="center">mcshield.exe</td></tr><tr><td align="center">ashdisp.exe</td><td align="center">miner.exe</td></tr><tr><td align="center">avcenter.exe</td><td align="center">mongoosagui.exe</td></tr><tr><td align="center">avg.exe</td><td align="center">mpmon.exe</td></tr><tr><td align="center">avgaurd.exe</td><td align="center">msmpeng.exe</td></tr><tr><td align="center">avgwdsvc.exe</td><td align="center">mssecess.exe</td></tr><tr><td align="center">avk.exe</td><td align="center">nspupsvc.exe</td></tr><tr><td align="center">avp.exe</td><td align="center">ntrtscan.exe</td></tr><tr><td align="center">avp.exe</td><td align="center">patray.exe</td></tr><tr><td align="center">avwatchservice.exe</td><td align="center">pccntmon.exe</td></tr><tr><td align="center">ayagent.aye</td><td align="center">psafesystray.exe</td></tr><tr><td align="center">baidusdsvc.exe</td><td align="center">qqpcrtp.exe</td></tr><tr><td align="center">bkavservice.exe</td><td align="center">quhlpsvc.EXE</td></tr><tr><td align="center">ccapp.exe</td><td align="center">ravmond.exe</td></tr><tr><td align="center">ccSetMgr.exe</td><td align="center">remupd.exe</td></tr><tr><td align="center">ccsvchst.exe</td><td align="center">rfwmain.exe</td></tr><tr><td align="center">cksoftshiedantivirus4.exe</td><td align="center">rtvscan.exe</td></tr><tr><td align="center">cleaner8.exe</td><td align="center">safedog.exe</td></tr><tr><td align="center">cmctrayicon.exe</td><td align="center">savprogress.exe</td></tr><tr><td align="center">coranticontrolcenter32.exe</td><td align="center">sbamsvc.exe</td></tr><tr><td align="center">cpf.exe</td><td align="center">spidernt.exe</td></tr><tr><td align="center">egui.exe</td><td align="center">spywareterminatorshield.exe</td></tr><tr><td align="center">f-prot.EXE</td><td align="center">tmbmsrv.exe</td></tr><tr><td align="center">f-prot.exe</td><td align="center">unthreat.exe</td></tr><tr><td align="center">f-secure.exe</td><td align="center">usysdiag.exe</td></tr><tr><td align="center">fortitray.exe</td><td align="center">v3svc.exe</td></tr><tr><td align="center">hipstray.exe</td><td align="center">vba32lder.exe</td></tr><tr><td align="center">iptray.exe</td><td align="center">vsmon.exe</td></tr><tr><td align="center">k7tsecurity.exe</td><td align="center">vsserv.exe</td></tr><tr><td align="center">knsdtray.exe</td><td align="center">wsctrl.exe</td></tr><tr><td align="center">kpfwtray.exe</td><td align="center">yunsuo_agent_daemon.exe</td></tr><tr><td align="center">ksafe.exe</td><td align="center">yunsuo_agent_service.exe</td></tr></tbody></table></div></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/under-the-sadbridge-with-gosar#introduction"><span>Introduction</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/under-the-sadbridge-with-gosar#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/under-the-sadbridge-with-gosar#ref3864-campaign-overview"><span>REF3864 Campaign&nbsp;Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/under-the-sadbridge-with-gosar#sadbridge-introduction"><span>SADBRIDGE&nbsp;Introduction</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/under-the-sadbridge-with-gosar#sadbridge-code-analysis"><span>SADBRIDGE Code&nbsp;Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/under-the-sadbridge-with-gosar#msi-analysis"><span>MSI&nbsp;Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/under-the-sadbridge-with-gosar#x64bridgedll-side-loading"><span>x64bridge.dll&nbsp;Side-&nbsp;loading</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/under-the-sadbridge-with-gosar#healthserviceruntimedll"><span>HealthServiceRuntime.dll</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/under-the-sadbridge-with-gosar#devquerybrokerlog"><span>DevQueryBroker.log</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/under-the-sadbridge-with-gosar#stage-1-injection-explorerexe"><span>Stage 1 Injection&nbsp;(explorer.exe)</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite&amp;url=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar&amp;title=Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/under-the-sadbridge-with-gosar&amp;title=Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite","slug":"under-the-sadbridge-with-gosar","date":"2024-12-13","description":"Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims.","image":"Security Labs Images 21.jpg","body":{"raw":"\n## Introduction\n\nElastic Security Labs recently observed a new intrusion set targeting Chinese-speaking regions, tracked as REF3864. These organized campaigns target victims by masquerading as legitimate software such as web browsers or social media messaging services. The threat group behind these campaigns shows a moderate degree of versatility in delivering malware across multiple platforms such as Linux, Windows, and Android. During this investigation, our team discovered a unique Windows infection chain with a custom loader we call SADBRIDGE. This loader deploys a Golang-based reimplementation of QUASAR, which we refer to as GOSAR. This is our team’s first time observing a rewrite of QUASAR in the Golang programming language.\n\n### Key takeaways\n\n- Ongoing campaigns targeting Chinese language speakers with malicious installers masquerading as legitimate software like Telegram and the Opera web browser  \n- Infection chains employ injection and DLL side-loading using a custom loader (SADBRIDGE)   \n- SADBRIDGE deploys a newly-discovered variant of the QUASAR backdoor written in Golang (GOSAR)  \n- GOSAR is a multi-functional backdoor under active development with incomplete features and iterations of improved features observed over time  \n- Elastic Security provides comprehensive prevention and detection capabilities against this attack chain\n\n## REF3864 Campaign Overview\n\nIn November, the Elastic Security Labs team observed a unique infection chain when detonating several different samples uploaded to VirusTotal. These different samples were hosted via landing pages masquerading as legitimate software such as Telegram or the Opera GX browser.\n\n![Fake Telegram landing page](/assets/images/under-the-sadbridge-with-gosar/image32.png)\n\nDuring this investigation, we uncovered multiple infection chains involving similar techniques:\n\n- Trojanized MSI installers with low detections  \n- Masquerading using legitimate software bundled with malicious DLLs   \n- Custom SADBRIDGE loader deployed  \n- Final stage GOSAR loaded\n\nWe believe these campaigns have flown under the radar due to multiple levels of abstraction. Typically, the first phase involves opening an archive file (ZIP) that includes an MSI installer. Legitimate software like the Windows `x64dbg.exe` debugging application is used behind-the-scenes to load a malicious, patched DLL (`x64bridge.dll`). This DLL kicks off a new legitimate program (`MonitoringHost.exe`) where it side-loads another malicious DLL (`HealthServiceRuntime.dll`), ultimately performing injection and loading the GOSAR implant in memory via injection.\n\nMalware researchers extracted SADBRIDGE configurations that reveal adversary-designated campaign dates, and indicate operations with similar TTP’s have been ongoing since at least December 2023\\. The command-and-control (C2) infrastructure for GOSAR often masquerades under trusted services or software to appear benign and conform to victim expectations for software installers. Throughout the execution chain, there is a focus centered around enumerating Chinese AV products such as `360tray.exe`, along with firewall rule names and descriptions in Chinese. Due to these customizations we believe this threat is geared towards targeting Chinese language speakers. Additionally, extensive usage of Chinese language logging indicates the attackers are also Chinese language speakers.\n\nQUASAR has previously been used in state-sponsored espionage, non-state hacktivism, and criminal financially motivated attacks since 2017 (Qualys, [Evolution of Quasar RAT](https://www.qualys.com/docs/whitepapers/qualys-wp-stealthy-quasar-evolving-to-lead-the-rat-race-v220727.pdf?_ga=2.196384556.1458236792.1733495919-74841447.1733495919)), including by China-linked [APT10](https://www.fbi.gov/wanted/cyber/apt-10-group). A rewrite in Golang might capitalize on institutional knowledge gained over this period, allowing for additional capabilities without extensive retraining of previously effective TTPs.\n\nGOSAR extends QUASAR with additional information-gathering capabilities, multi-OS support, and improved evasion against anti-virus products and malware classifiers. However, the generic lure websites, and lack of additional targeting information, or actions on the objective, leave us with insufficient evidence to identify attacker motivation(s).\n\n![SADBRIDGE Execution Chain resulting in GOSAR infection](/assets/images/under-the-sadbridge-with-gosar/image14.png)\n\n## SADBRIDGE Introduction\n\nThe SADBRIDGE malware loader is packaged as an MSI executable for delivery and uses DLL side-loading with various injection techniques to execute malicious payloads. SADBRIDGE abuses legitimate applications such as `x64dbg.exe` and `MonitoringHost.exe` to load malicious DLLs like `x64bridge.dll` and `HealthServiceRuntime.dll`, which leads to subsequent stages and shellcodes. \n\nPersistence is achieved through service creation and registry modifications. Privilege escalation to Administrator occurs silently using a [UAC bypass technique](https://github.com/0xlane/BypassUAC) that abuses the `ICMLuaUtil` COM interface. In addition, SADBRIDGE incorporates a [privilege escalation bypass](https://github.com/zcgonvh/TaskSchedulerMisc) through Windows Task Scheduler to execute its main payload with SYSTEM level privileges.\n\nThe SADBRIDGE configuration is encrypted using a simple subtraction of `0x1` on each byte of the configuration string. The encrypted stages are all appended with a `.log` extension, and decrypted during runtime using XOR and the LZNT1 decompression algorithm.\n\nSADBRIDGE employs [PoolParty](https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/), APC queues, and token manipulation techniques for process injection. To avoid sandbox analysis, it uses long `Sleep` API calls. Another defense evasion technique involves API patching to disable Windows security mechanisms such as the Antimalware Scan Interface (AMSI) and Event Tracing for Windows (ETW). \n\nThe following deep dive is structured to explore the execution chain, providing a step-by-step walkthrough of the capabilities and functionalities of significant files and stages, based on the configuration of the analyzed sample. The analysis aims to highlight the interaction between each component and their roles in reaching the final payload.\n\n## SADBRIDGE Code Analysis\n\n#### MSI Analysis\n\nThe initial files are packaged in an MSI using [Advanced Installer](https://www.advancedinstaller.com/), the main files of interest are `x64dbg.exe` and `x64bridge.dll`.\n\n![Significant files inside the MSI installer](/assets/images/under-the-sadbridge-with-gosar/image20.png)\n\nBy using MSI tooling ([lessmsi](https://github.com/activescott/lessmsi)), we can see the `LaunchApp` entrypoint in `aicustact.dll` is configured to execute the file path specified in the `AI_APP_FILE` property. \n\n![Custom actions configured using Advanced Installer](/assets/images/under-the-sadbridge-with-gosar/image1.png)\n\nIf we navigate to this `AI_APP_FILE` property, we can see the file tied to this configuration is `x64dbg.exe`. This represents the file that will be executed after the installation is completed, the legitimate `NetFxRepairTool.exe` is never executed.\n\n![AI\\_APP\\_FILE property configured to launch x64dbg.exe](/assets/images/under-the-sadbridge-with-gosar/image31.png)\n\n#### x64bridge.dll Side-loading\n\nWhen `x64dbg.exe` gets executed, it calls the `BridgeInit` export from `x64bridge.dll`. `BridgeInit` is a wrapper for the `BridgeStart` function.\n\n![Control flow diagram showing call to BridgeStart](/assets/images/under-the-sadbridge-with-gosar/image30.png)\n\n\nSimilar to techniques observed with [BLISTER](https://www.elastic.co/security-labs/blister-loader), SADBRIDGE patches the export of a legitimate DLL.\n\n![Comparison of BridgeStart export from x64bridge.dll](/assets/images/under-the-sadbridge-with-gosar/image7.png)\n\nDuring the malware initialization routine, SADBRIDGE begins with generating a hash using the hostname and a magic seed `0x4E67C6A7`. This hash is used as a directory name for storing the encrypted configuration file. The encrypted configuration is written to `C:\\Users\\Public\\Documents\\\u003chostname_hash\u003e\\edbtmp.log`. This file contains the attributes FILE\\_ATTRIBUTE\\_SYSTEM, FILE\\_ATTRIBUTE\\_READONLY, FILE\\_ATTRIBUTE\\_HIDDEN  to hide itself from an ordinary directory listing. \n\n![Configuration file hidden from users](/assets/images/under-the-sadbridge-with-gosar/image8.png)\n\nDecrypting the configuration is straightforward, the encrypted chunks are separated with null bytes. For each byte within the encrypted chunks, we can increment them by `0x1`. \n\nThe configuration consists of: \n\n* Possible campaign date  \n* Strings to be used for creating services  \n* New name for MonitoringHost.exe (`DevQueryBroker.exe`)  \n* DLL name for the DLL to be sideloaded by MonitoringHost.exe (`HealthServiceRuntime.dll`)  \n* Absolute paths for additional stages (`.log` files)  \n* The primary injection target for hosting GOSAR (`svchost.exe`)\n\n![SADBRIDGE configuration](/assets/images/under-the-sadbridge-with-gosar/image27.png)\n\nThe `DevQueryBroker` directory (`C:\\ProgramData\\Microsoft\\DeviceSync\\Device\\Stage\\Data\\DevQueryBroker\\`) contains all of the encrypted stages (`.log` files) that are decrypted at runtime. The file (`DevQueryBroker.exe`) is a renamed copy of Microsoft legitimate application (`MonitoringHost.exe`).\n\n![File listing of the DevQueryBroker folder](/assets/images/under-the-sadbridge-with-gosar/image18.png)\n\nFinally, it creates a process to run `DevQueryBroker.exe` which side-loads the malicious `HealthServiceRuntime.dll` in the same folder.\n\n#### HealthServiceRuntime.dll\n\nThis module drops both an encrypted and partially decrypted shellcode in the User’s `%TEMP%` directory. The file name for the shellcode follows the format: `log\u003crandom_string\u003e.tmp`. Each byte of the partially decrypted shellcode is then decremented by `0x10` to fully decrypt. The shellcode is executed in a new thread of the same process.\n\n![Decryption of a shellcode in HealthServiceRuntime.dll](/assets/images/under-the-sadbridge-with-gosar/image10.png)\n\nThe malware leverages API hashing using the same algorithm in [research](https://www.sonicwall.com/blog/project-androm-backdoor-trojan) published by SonicWall, the hashing algorithm is listed in the Appendix [section](#appendix). The shellcode decrypts `DevQueryBroker.log` into a PE file then performs a simple XOR operation with a single byte (`0x42)` in the first third of the file where then it decompresses the result using the LZNT1 algorithm. \n\n![Shellcode decrypting DevQueryBroker.log file](/assets/images/under-the-sadbridge-with-gosar/image3.png)\n\nThe shellcode then unmaps any existing mappings at the PE file's preferred base address using `NtUnmapViewOfSection`, ensuring that a call to `VirtualAlloc` will allocate memory starting at the preferred base address. Finally, it maps the decrypted PE file to this allocated memory and transfers execution to its entry point. All shellcodes identified and executed by SADBRIDGE share an identical code structure, differing only in the specific `.log` files they reference for decryption and execution.\n\n#### DevQueryBroker.log\n\nThe malware dynamically loads `amsi.dll` to disable critical security mechanisms in Windows. It patches `AmsiScanBuffer` in `amsi.dll` by inserting instructions to modify the return value to `0x80070057`, the standardized Microsoft error code `E_INVALIDARG` indicating invalid arguments, and returning prematurely, to effectively bypass the scanning logic. Similarly, it patches `AmsiOpenSession` to always return the same error code `E_INVALIDARG`. Additionally, it patches `EtwEventWrite` in `ntdll.dll`, replacing the first instruction with a `ret` instruction to disable Event Tracing for Windows (ETW), suppressing any logging of malicious activity.\n\n![Patching AmsiScanBuffer, AmsiOpenSession and EtwEventWrite APIs](/assets/images/under-the-sadbridge-with-gosar/image17.png)\n\nFollowing the patching, an encrypted shellcode is written to `temp.ini` at path (`C:\\ProgramData\\Microsoft\\DeviceSync\\Device\\Stage\\Data\\DevQueryBroker\\temp.ini`).  \nThe malware checks the current process token’s group membership to determine its privilege level. It verifies if the process belongs to the LocalSystem account by initializing a SID with the `SECURITY_LOCAL_SYSTEM_RID` and calling `CheckTokenMembership`. If not, it attempts to check for membership in the Administrators group by creating a SID using `SECURITY_BUILTIN_DOMAIN_RID` and `DOMAIN_ALIAS_RID_ADMINS` and performing a similar token membership check.\n\nIf the current process does not have LocalSystem or Administrator privileges, privileges are first elevated to Administrator through a [UAC bypass mechanism](https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512) by leveraging the `ICMLuaUtil` COM interface. It crafts a moniker string `\"Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}\"` to create an instance of the `CMSTPLUA` object with Administrator privileges. Once the object is created and the `ICMLuaUtil` interface is obtained, the malware uses the exposed `ShellExec` method of the interface to run `DevQueryBroker.exe`.\n\n![Privilege Escalation via ICMLuaUtil COM interface](/assets/images/under-the-sadbridge-with-gosar/image11.png)\n\nIf a task or a service is not created to run `DevQueryBroker.exe` routinely, the malware checks if the Anti-Virus process `360tray.exe` is running. If it is not running, a service is created for privilege escalation to SYSTEM, with the following properties:\n\n* Service name: **DevQueryBrokerService**  \n  Binary path name: **“C:\\ProgramData\\Microsoft\\DeviceSync\\Device\\Stage\\Data\\DevQueryBroker\\DevQueryBroker.exe -svc”**.  \n* Display name: **DevQuery Background Discovery Broker Service**  \n* Description: **Enables apps to discover devices with a background task.**  \n* Start type: **Automatically at system boot**  \n* Privileges: **LocalSystem**\n\nIf `360tray.exe` is detected running, the malware writes an encrypted PE file to `DevQueryBrokerService.log`, then maps a next-stage PE file (Stage 1) into the current process memory, transferring execution to it. \n\nOnce `DevQueryBroker.exe` is re-triggered with SYSTEM level privileges and reaches this part of the chain, the malware checks the Windows version. For systems running Vista or later (excluding Windows 7), it maps another next-stage (Stage 2) into memory and transfers execution there. \n\nOn Windows 7, however, it executes a shellcode, which decrypts and runs the `DevQueryBrokerPre.log` file.\n\n### Stage 1 Injection (explorer.exe)\n\nSADBRIDGE utilizes [PoolParty Variant 7](https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/) to inject shellcode into `explorer.exe` by targeting its thread pool’s I/O completion queue. It first duplicates a handle to the target process's I/O completion queue. It then allocates memory within `explorer.exe` to store the shellcode. Additional memory is allocated to store a crafted [`TP_DIRECT`](https://github.com/SafeBreach-Labs/PoolParty/blob/77e968b35f4bad74add33ea8a2b0b5ed9543276c/PoolParty/ThreadPool.hpp#L42) structure, which includes the base address of the shellcode as the callback address. Finally, it calls `ZwSetIoCompletion`, passing a pointer to the `TP_DIRECT` structure to queue a packet to the I/O completion queue of the target process's worker factory (worker threads manager), effectively triggering the execution of the injected shellcode.\n\n![I/O Completion Port Shellcode Injection](/assets/images/under-the-sadbridge-with-gosar/image21.png)\n\nThis shellcode decrypts the `DevQueryBrokerService.log` file, unmaps any memory regions occupying its preferred base address, maps the PE file to that address, and then executes its entry point. This behavior mirrors the previously observed shellcode. \n\n### Stage 2 Injection (spoolsv.exe/lsass.exe)\n\nFor Stage 2, SADBRIDGE injects shellcode into `spoolsv.exe`, or `lsass.exe` if `spoolsv.exe` is unavailable, using the same injection technique as in Stage 1. The shellcode exhibits similar behavior to the earlier stages: it decrypts `DevQueryBrokerPre.log` into a PE file, unmaps any regions occupying its preferred base address, maps the PE file, and then transfers execution to its entry point.\n\n#### DevQueryBrokerService.log\n\nThe shellcode decrypted from `DevQueryBrokerService.log` as mentioned in the previous section leverages a privilege escalation technique using the Windows Task Scheduler. SADBRIDGE integrates a public UAC [bypass technique](https://github.com/zcgonvh/TaskSchedulerMisc) using the `IElevatedFactorySever` COM object to indirectly create the scheduled task. This task is configured to run `DevQueryBroker.exe` on a daily basis with SYSTEM level privileges using the task name `DevQueryBrokerService`.\n\n![GUID in Scheduled Task Creation (Virtual Factory for MaintenanceUI)](/assets/images/under-the-sadbridge-with-gosar/image9.png)  \n\nIn order to cover its tracks, the malware spoofs the image path and command-line by modifying the Process Environment Block (PEB) directly, likely in an attempt to disguise the COM service as coming from `explorer.exe`. \n\n![DevQueryBrokerService.log Spoofed Image Command-Line](/assets/images/under-the-sadbridge-with-gosar/image13.png)\n\n#### DevQueryBrokerPre.log\n\nSADBRIDGE creates a service named `DevQueryBrokerServiceSvc` under the registry subkey `SYSTEM\\CurrentControlSet\\Services\\DevQueryBrokerServiceSvc` with the following attributes:\n\n* **Description**: Enables apps to discover devices with a background task.  \n* **DisplayName**: DevQuery Background Discovery Broker Service  \n* **ErrorControl**: 1  \n* **ImagePath**: `%systemRoot%\\system32\\svchost.exe -k netsvcs`  \n* **ObjectName**: LocalSystem  \n* **Start**: 2 (auto-start)  \n* **Type**: 16\\.  \n* **Failure Actions**:  \n  * Resets failure count every 24 hours.  \n  * Executes three restart attempts: a 20ms delay for the first, and a 1-minute delay for the second and third.\n\nThe service parameters specify the `ServiceDll` located at `C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Stationery\\\u003chostname_hash\u003e\\DevQueryBrokerService.dll`. If the DLL file does not exist, it will be dropped to disk right after.\n\n`DevQueryBrokerService.dll` has a similar code structure as `HealthServiceRuntime.dll`, which is seen in the earlier stages of the execution chain. It is responsible for decrypting `DevQueryBroker.log` and running it. The `ServiceDll` will be loaded and executed by `svchost.exe` when the service starts.\n\n![svchost.exe’s malicious ServiceDLL parameter](/assets/images/under-the-sadbridge-with-gosar/image12.png)\n\nAdditionally, it modifies the `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\\netsvcs` key to include an entry for `DevQueryBrokerServiceSvc` to integrate the newly created service into the group of services managed by the `netsvcs` service host group.\n\n![Modifies the netsvc registry key to add DevQueryBrokerServiceSvc](/assets/images/under-the-sadbridge-with-gosar/image19.png)  \n\nSADBRIDGE then deletes the scheduled task and service created previously by removing the registry subkeys `SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\DevQueryBrokerService` and `SYSTEM\\\\CurrentControlSet\\\\Services\\\\DevQueryBrokerService`. \n\nFinally, it removes the files `DevQueryBroker.exe` and `HealthServiceRuntime.dll` in the `C:\\ProgramData\\Microsoft\\DeviceSync\\Device\\Stage\\Data\\DevQueryBroker` folder, as the new persistence mechanism is in place.\n\n## GOSAR Injection\n\nIn the latter half of the code, SADBRIDGE enumerates all active sessions on the local machine using the `WTSEnumerateSessionsA` API. \n\nIf sessions are found, it iterates through each session:\n\n* For each session, it attempts to retrieve the username (`WTSUserName`) using `WTSQuerySessionInformationA`. If the query fails, it moves to the next session.  \n* If `WTSUserName` is not empty, the code targets `svchost.exe`, passing its path, the session ID, and the content of the loader configuration to a subroutine that injects the final stage.  \n* If `WTSUserName` is empty but the session's `WinStationName` is `\"Services\"` (indicating a service session), it targets `dllhost.exe` instead, passing the same parameters to the final stage injection subroutine.\n\nIf no sessions are found, it enters an infinite loop to repeatedly enumerate sessions and invoke the subroutine for injecting the final stage, while performing checks to avoid redundant injections.\n\nLogged-in sessions target `svchost.exe`, while service sessions or sessions without a logged-in user target `dllhost.exe`.\n\n![Enumeration of active sessions](/assets/images/under-the-sadbridge-with-gosar/image6.png)\n\nIf a session ID is available, the code attempts to duplicate the user token for that session and elevate the duplicated token's integrity level to `S-1-16-12288` (System integrity). It then uses the elevated token to create a child process (`svchost.exe` or `dllhost.exe`) via `CreateProcessAsUserA`.\n\n![Duplication of user token and elevating token privileges](/assets/images/under-the-sadbridge-with-gosar/image4.png)\n\nIf token manipulation fails or no session ID is available (system processes can have a session ID of 0), it falls back to creating a process without a token using `CreateProcessA`.\n\nThe encrypted shellcode `C:\\ProgramData\\Microsoft\\DeviceSync\\Device\\Stage\\Data\\DevQueryBroker\\temp.ini` is decrypted using the same XOR and LZNT1 decompression technique seen previously to decrypt `.log` files, and APC injection is used to queue the shellcode for execution in the newly created process’s thread.  \n\n![APC injection to run GOSAR](/assets/images/under-the-sadbridge-with-gosar/image2.png)  \n\nFinally, the injected shellcode decrypts `DevQueryBrokerCore.log` to GOSAR and runs it in the newly created process’s memory.\n\n![GOSAR injected into dllhost.exe and svchost.exe](/assets/images/under-the-sadbridge-with-gosar/image33.png)\n\n## GOSAR Introduction\n\nGOSAR is a multi-functional remote access trojan found targeting Windows and Linux systems. This backdoor includes capabilities such as retrieving system information, taking screenshots, executing commands, keylogging, and much more. The GOSAR backdoor retains much of QUASAR's core functionality and behavior, while incorporating several modifications that differentiate it from the original version. \n\nBy rewriting malware in modern languages like Go, this can offer reduced detection rates as many antivirus solutions and malware classifiers struggle to identify malicious strings/characteristics under these new programming constructs. Below is a good example of an unpacked GOSAR receiving only 5 detections upon upload. \n\n![Low detection rate on GOSAR VT upload](/assets/images/under-the-sadbridge-with-gosar/image29.png)\n\nNotably, this variant supports multiple platforms, including ELF binaries for Linux systems and traditional PE files for Windows. This cross-platform capability aligns with the adaptability of Go, making it more versatile than the original .NET-based QUASAR. Within the following section, we will focus on highlighting GOSAR’s code structure, new features and additions compared to the open-source version (QUASAR).\n\n## GOSAR Code Analysis Overview\n\n### Code structure of GOSAR\n\nAs the binary retained all its symbols, we were able to reconstruct the source code structure, which was extracted from a sample of version `0.12.01`\n\n![GOSAR code structure](/assets/images/under-the-sadbridge-with-gosar/image26.png)\n\n* **vibrant/config**: Contains the configuration files for the malware.  \n* **vibrant/proto**: Houses all the Google Protocol Buffers (proto) declarations.  \n* **vibrant/network**: Includes functions related to networking, such as the main connection loop, proxy handling and also thread to configure the firewall and setting up a listener  \n* **vibrant/msgs/resolvers**: Defines the commands handled by the malware. These commands are assigned to an object within the `vibrant_msgs_init*` functions.  \n* **vibrant/msgs/services**: Introduces new functionality, such as running services like keyloggers, clipboard logger, these services are started in the `vibrant_network._ptr_Connection.Start` function.  \n* **vibrant/logs**: Responsible for logging the malware’s execution. The logs are encrypted with an AES key stored in the configuration. The malware decrypts the logs in chunks using AES.  \n* **vibrant/pkg/helpers**: Contains helper functions used across various malware commands and services.  \n* **vibrant/pkg/screenshot**: Handles the screenshot capture functionality on the infected system.  \n* **vibrant/pkg/utils**: Includes utility functions, such as generating random values.  \n* **vibrant/pkg/native**: Provides functions for calling Windows API (WINAPI) functions.\n\n### New Additions to GOSAR\n\n#### Communication and information gathering\n\nThis new variant continues to use the same communication method as the original, based on **TCP TLS**. Upon connection, it first sends system information to the C2, with 4 new fields added:\n\n* IPAddress  \n* AntiVirus  \n* ClipboardSettings  \n* Wallets\n\nThe list of AntiViruses and digital wallets are initialized in the function `vibrant_pkg_helpers_init` and can be found at the bottom of this document.\n\n#### Services\n\nThe malware handles 3 services that are started during the initial connection of the client to the C2:\n\n- vibrant\\_services\\_KeyLogger  \n- vibrant\\_services\\_ClipboardLogger  \n- vibrant\\_services\\_TickWriteFile  \n    \n![GOSAR services](/assets/images/under-the-sadbridge-with-gosar/image22.png)\n\n##### KeyLogger\n\nThe keylogging functionality in GOSAR is implemented in the `vibrant_services_KeyLogger` function. This feature relies on Windows APIs to intercept and record keystrokes on the infected system by setting a global Windows hook with [`SetWindowsHookEx`](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa) with the parameter `WH_KEYBOARD_LL` to monitor low-level keyboard events. The hook function is named `vibrant_services_KeyLogger_func1`.\n\n![GOSAR setting the keylogger](/assets/images/under-the-sadbridge-with-gosar/image28.png)\n\n##### ClipboardLogger\n\nThe clipboard logging functionality is straightforward and relies on Windows APIs. It first checks for the availability of clipboard data using [`IsClipboardFormatAvailable`](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isclipboardformatavailable) then retrieves it using [`GetClipboardData`](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata) API.\n\n![GOSAR clipboard logging](/assets/images/under-the-sadbridge-with-gosar/image34.png)\n\n##### TickWriteFile\n\nBoth `ClipboardLogger` and `KeyLogger` services collect data that is written by the `TickWriteFile` periodically to directory (`C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\diagnostics`) under a file of the current date, example `2024-11-27`.  \nIt can be decrypted by first subtracting the value `0x1f` then xoring it with the value `0x18` as shown in the CyberChef recipe.\n\n![CyberChef recipe used to decrypt keylogger logs](/assets/images/under-the-sadbridge-with-gosar/image24.png)\n\n#### Networking setup\n\nAfter initializing its services, the malware spawns **three threads** dedicated to its networking setup.\n\n- vibrant\\_network\\_ConfigFirewallRule  \n- vibrant\\_network\\_ConfigHosts  \n- vibrant\\_network\\_ConfigAutoListener\n\n[Threads handling networking setup](/assets/images/under-the-sadbridge-with-gosar/image15.png)\n\n##### ConfigFirewallRule\n\nThe malware creates an inbound firewall rule for the ports range `51756-51776` under a Chinese name that is translated to `Distributed Transaction Coordinator (LAN)` it allows all programs and IP addresses inbound the description is set to :`Inbound rules for the core transaction manager of the Distributed Transaction Coordinator service are managed remotely through RPC/TCP.`\n\n![Added firewall rule](/assets/images/under-the-sadbridge-with-gosar/image23.png)\n\n##### ConfigHosts\n\nThis function adds an entry to `c:\\Windows\\System32\\Drivers\\etc\\hosts` the following `127.0.0.1 micrornetworks.com`. The reason for adding this entry is unclear, but it is likely due to missing functionalities or incomplete features in the malware's current development stage.\n\n##### ConfigAutoListener\n\nThis functionality of the malware runs an HTTP server listener on the first available port within the range `51756-51776`, which was previously allowed by a firewall rule. Interestingly, the server does not handle any commands, which proves that the malware is still under development. The current version we have only processes a `GET` request to the URI `/security.js`, responding with the string `callback();`, any other request returns a 404 error code. This minimal response could indicate that the server is a placeholder or part of an early development stage, with the potential for more complex functionalities to be added later\n\n![Callback handled by GOSAR](/assets/images/under-the-sadbridge-with-gosar/image5.png)\n\n#### Logs\n\nThe malware saves its runtime logs in the directory: `%APPDATA%\\Roaming\\Microsoft\\Logs` under the filename formatted as: `windows-update-log-\u003cYearMonthDay\u003e.log`.  \nEach log entry is encrypted with HMAC-AES algorithm; the key is hardcoded in the `vibrant_config` function, the following is an example:\n\n![Logs example generated by GOSAR](/assets/images/under-the-sadbridge-with-gosar/image16.png)\n\nThe attacker can remotely retrieve the malware's runtime logs by issuing the command `ResolveGetRunLogs`.\n\n#### Plugins\n\nThe malware has the capability to execute plugins, which are PE files downloaded from the C2 and stored on disk encrypted with an XOR algorithm. These plugins are saved at the path: `C:\\ProgramData\\policy-err.log`. To execute a plugin, the command `ResolveDoExecutePlugin` is called, it first checks if a plugin is available.\n\n![GOSAR checking for existence of a plugin to execute](/assets/images/under-the-sadbridge-with-gosar/image35.png)\n\nIt then loads a native DLL reflectively that is stored in base64 format in the binary named `plugins.dll` and executes its export function `ExecPlugin`.\n\n![GOSAR loading plugins.dlll and calling ExecPlugin](/assets/images/under-the-sadbridge-with-gosar/image25.png)\n\n`ExecPlugin` creates a suspended process of `C:\\Windows\\System32\\msiexec.exe` with the arguments `/package` `/quiet`. It then queues [Asynchronous Procedure Calls](https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls) (APC) to the process's \tmain thread. When the thread is resumed, the queued shellcode is executed.\n\n![GOSAR plugin module injecting a PE in msiexec.exe](/assets/images/under-the-sadbridge-with-gosar/image36.png)\n\nThe shellcode reads the encrypted plugin stored at `C:\\ProgramData\\policy-err.log`, decrypts it using a hardcoded 1-byte XOR key, and reflectively loads and executes it.\n\n#### HVNC\n\nThe malware supports hidden VNC(HVNC) through the existing socket, it exposes 5 commands\n\n* ResolveHVNCCommand  \n* ResolveGetHVNCScreen  \n* ResolveStopHVNC  \n* ResolveDoHVNCKeyboardEvent  \n* ResolveDoHVNCMouseEvent\n\nThe first command that is executed is `ResolveGetHVNCScreen` which will first initialise it and set up a view, it uses an embedded native DLL `HiddenDesktop.dll` in base64 format, the DLL is reflectively loaded into memory and executed.\n\nThe DLL is responsible for executing low level APIs to setup the HVNC, with a total of 7 exported functions:\n\n* ExcuteCommand  \n* DoMouseScroll  \n* DoMouseRightClick  \n* DoMouseMove  \n* DoMouseLeftClick  \n* DoKeyPress  \n* CaptureScreen\n\nThe first export function called is `Initialise` to initialise a desktop with [`CreateDesktopA`](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopa) API. This HVNC implementation handles 17 commands in total that can be found in `ExcuteCommand` export, as noted it does have a typo in the name, the command ID is forwarded from the malware’s command `ResolveHVNCCommand` that will call `ExcuteCommand`.\n\n| Command ID | Description |\n| :---- | :---- |\n| 0x401 | The function first disables taskbar button grouping by setting the `TaskbarGlomLevel` registry key to `2` under `Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced`. Next, it ensures the taskbar is always visible and on top by using `SHAppBarMessage` with the `ABM_SETSTATE` command, setting the state to `ABS_ALWAYSONTOP`. |\n| 0x402 | Spawns a RUN dialog box by executing the 61th export function of `shell32.dll`.\u000b`C:\\Windows\\system32\\rundll32.exe shell32.dll,#61` |\n| 0x403 | Runs an instance of `powershell.exe` |\n| 0x404 | Executes a PE file stored in `C:\\\\ProgramData\\\\shell.log` |\n| 0x405 | Runs an instance of `chrome.exe` |\n| 0x406 | Runs an instance of `msedge.exe` |\n| 0x407 | Runs an instance of `firefox.exe` |\n| 0x408 | Runs an instance of `iexplore.exe` |\n| 0x409 | Runs an instance of `360se.exe` |\n| 0x40A | Runs an instance of `360ChromeX.exe`. |\n| 0x40B | Runs an instance of `SogouExplorer.exe` |\n| 0x40C | Close current window |\n| 0x40D | Minimizes the specified window |\n| 0x40E | Activates the window and displays it as a maximized window |\n| 0x40F | Kills the process of a window |\n| 0x410 | Sets the clipboard |\n| 0x411 | Clears the Clipboard |\n\n#### Screenshot\n\nThe malware loads reflectively the third and last PE DLL embedded in base64 format named `Capture.dll`, it has 5 export functions:\n\n- CaptureFirstScreen  \n- CaptureNextScreen  \n- GetBitmapInfo  \n- GetBitmapInfoSize  \n- SetQuality\n\nThe library is first initialized by calling `resolvers_ResolveGetBitmapInfo` that reflectively loads and executes its `DllEntryPoint` which will setup the screen capture structures using common Windows APIs like [`CreateCompatibleDC`](https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc), [`CreateCompatibleBitmap`](https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap) and [`CreateDIBSection`](https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createdibsection). The 2 export functions `CaptureFirstScreen` and `CaptureNextScreen` are used to capture a screenshot of the victim's desktop as a JPEG image.\n\n### Observation\n\nInterestingly, the original .NET QUASAR server can still be used to receive beaconing from GOSAR samples, as they have retained the same communication protocol. However, operational use of it would require significant modifications to support GOSAR functionalities.\n\nIt is unclear whether the authors updated or extended the open source .NET QUASAR server, or developed a completely new one. It is worth mentioning that they have retained the default listening port, 1080, consistent with the original implementation.\n\n### New functionality\n\nThe following table provides a description of all the newly added commands:\n\n| New commands |  |\n| :---- | :---- |\n| ResolveDoRoboCopy | Executes [`RoboCopy`](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy) command to copy files   |\n| ResolveDoCompressFiles | Compress files in a zip format |\n| ResolveDoExtractFile | Extract a zip file |\n| ResolveDoCopyFiles | Copies a directory or file in the infected machine |\n| ResolveGetRunLogs | Get available logs |\n| ResolveHVNCCommand | Execute a HVNC command |\n| ResolveGetHVNCScreen | Initiate HVNC |\n| ResolveStopHVNC | Stop the HVNC session |\n| ResolveDoHVNCKeyboardEvent | Send keyboard event to the HVNC |\n| ResolveDoHVNCMouseEvent | Send mouse event to the HVNC |\n| ResolveDoExecutePlugin | Execute a plugin |\n| ResolveGetProcesses | Get a list of running processes |\n| ResolveDoProcessStart | Start a process |\n| ResolveDoProcessEnd | Kill a process |\n| ResolveGetBitmapInfo | Retrieve the [**BITMAPINFO**](https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapinfo) structure for the current screen's display settings |\n| ResolveGetMonitors | Enumerate victim’s display monitors with [`EnumDisplayMonitors`](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors) API |\n| ResolveGetDesktop | Start screen capture functionality |\n| ResolveStopGetDesktop | Stop the screen capture functionality |\n| ResolveNewShellExecute | Opens pipes to a spawned cmd.exe process and send commands to it |\n| ResolveGetSchTasks | Get scheduled tasks by running the command `schtasks /query /fo list /v` |\n| ResolveGetScreenshot | Capture a screenshot of the victim’s desktop |\n| ResolveGetServices | Get the list of services with a **WMI** query: `select * from Win32_Service` |\n| ResolveDoServiceOperation | Start or stop a service |\n| ResolveDoDisableMultiLogon | Disable multiple session by user by setting the value `fSingleSessionPerUser` to 1 under the key `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TerminalServer` |\n| ResolveDoRestoreNLA | Restores the security settings for Remote Desktop Protocol (RDP), enabling **Network Level Authentication** (NLA) and enforcing **SSL/TLS** encryption for secure communication. |\n| ResolveGetRemoteClientInformation | Get a list of all local users that are enabled, the **RDP por**t and **LAN IP** and **OS specific information**: **DisplayVersion**, **SystemRoot** and **CurrentBuildNumber** extracted from the registry key `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion` |\n| ResolveDoInstallWrapper | Setup a Hidden Remote Desktop Protocol (**HRDP**) |\n| ResolveDoUninstallWrapper | Uninstall **HRDP** |\n| ResolveDoRecoverPrivileges | Restores the original **`HKEY_LOCAL_MACHINE\\\\SAM\\\\SAM`** registry before changes were made during the installation of the **HRDP** |\n| ResolveGetRemoteSessions | Retrieve information about the RDP sessions on the machine. |\n| ResolveDoLogoffSession | Logoff RDP session with [**`WTSLogoffSession`](https://learn.microsoft.com/en-us/windows/win32/api/wtsapi32/nf-wtsapi32-wtslogoffsession)** API  |\n| ResolveGetSystemInfo | Get system information |\n| ResolveGetConnections | Get all the connections in the machine |\n| ResolveDoCloseConnection | Not implemented |\n\n## Malware and MITRE ATT\\\u0026CK\n\nElastic uses the [MITRE ATT\\\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n* [Collection](https://attack.mitre.org/tactics/TA0009/)  \n* [Command and Control](https://attack.mitre.org/tactics/TA0011/)  \n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)  \n* [Discovery](https://attack.mitre.org/tactics/TA0007/)  \n* [Execution](https://attack.mitre.org/tactics/TA0002/)  \n* [Exfiltration](https://attack.mitre.org/tactics/TA0010/)  \n* [Persistence](https://attack.mitre.org/tactics/TA0003/)  \n* [Privilege Escalation](https://attack.mitre.org/tactics/TA0004/)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Hijack Execution Flow: DLL Side-Loading](https://attack.mitre.org/techniques/T1574/002/)  \n* [Input Capture: Keylogging](https://attack.mitre.org/techniques/T1056/001/)  \n* [Process Injection: Asynchronous Procedure Call](https://attack.mitre.org/techniques/T1055/004/)  \n* [Process Discovery](https://attack.mitre.org/techniques/T1057/)  \n* [Hide Artifacts: Hidden Window](https://attack.mitre.org/techniques/T1564/003/)  \n* [Create or Modify System Process: Windows Service](https://attack.mitre.org/techniques/T1543/003/)  \n* [Non-Standard Port](https://attack.mitre.org/techniques/T1571/)  \n* [Abuse Elevation Control Mechanism: Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002/)  \n* [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)  \n* [Impair Defenses: Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001/)  \n* [Virtualization/Sandbox Evasion: Time Based Evasion](https://attack.mitre.org/techniques/T1497/003/)\n\n## Mitigating REF3864\n\n### Detection\n\n- [Potential Antimalware Scan Interface Bypass via PowerShell](https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_amsi_bypass_powershell.toml)  \n- [Unusual Print Spooler Child Process](https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_printspooler_childprocess.toml)  \n- [Execution from Unusual Directory - Command Line](https://github.com/elastic/detection-rules/blob/main/rules/windows/execution_from_unusual_path_cmdline.toml)  \n- [External IP Lookup from Non-Browser Process](https://www.elastic.co/guide/en/security/current/external-ip-lookup-from-non-browser-process.html)  \n- [Unusual Parent-Child Relationship](https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_parentchild_relationship.toml)  \n- [Unusual Network Connection via DllHost](https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_unusual_network_connection_via_dllhost.toml)  \n- [Unusual Persistence via Services Registry](https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_services_registry.toml)  \n- [Parent Process PID Spoofing](https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_parent_process_pid_spoofing.toml)\n\n### Prevention\n\n- [Network Connection via Process with Unusual Arguments](https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_masquerading_process_with_unusual_args_and_netcon.toml)  \n- [Potential Masquerading as SVCHOST](https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_unusual_svchost.toml)  \n- [Network Module Loaded from Suspicious Unbacked Memory](https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_netcon_dll_suspicious_callstack.toml)  \n- [UAC Bypass via ICMLuaUtil Elevated COM Interface](https://github.com/elastic/endpoint-rules/blob/95b23ae32ce1445a8a2f333dab973de313b14016/rules/windows/privilege_escalation_uac_bypass_com_interface_icmluautil.toml)  \n- [Potential Image Load with a Spoofed Creation Time](https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_susp_imageload_timestomp.toml)\n\n#### YARA\n\nElastic Security has created YARA rules to identify this activity. \n\n- [Multi.Trojan.Gosar](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_Gosar.yar)  \n- [Windows.Trojan.SadBridge](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_SadBridge.yar)\n\n## Observations\n\nThe following observables were discussed in this research:\n\n| Observable | Type | Name | Reference |\n| :---- | :---- | :---- | :---- |\n| opera-x[.]net | domain-name |  | Landing page |\n| teledown-cn[.]com | domain-name |  | Landing page |\n| 15af8c34e25268b79022d3434aa4b823ad9d34f3efc6a8124ecf0276700ecc39 | SHA-256 | `NetFxRepairTools.msi` | MSI |\n| accd651f58dd3f7eaaa06df051e4c09d2edac67bb046a2dcb262aa6db4291de7 | SHA-256 | `x64bridge.dll` | SADBRIDGE |\n| 7964a9f1732911e9e9b9e05cd7e997b0e4e2e14709490a1b657673011bc54210 | SHA-256 |  | GOSAR |\n| ferp.googledns[.]io | domain-name |  | GOSAR C2 Server |\n| hk-dns.secssl[.]com | domain-name |  | GOSAR C2 Server |\n| hk-dns.winsiked[.]com | domain-name |  | GOSAR C2 Server |\n| hk-dns.wkossclsaleklddeff[.]is | domain-name |  | GOSAR C2 Server |\n| hk-dns.wkossclsaleklddeff[.]io | domain-name |  | GOSAR C2 Server |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://zcgonvh.com/post/Advanced\\_Windows\\_Task\\_Scheduler\\_Playbook-Part.2\\_from\\_COM\\_to\\_UAC\\_bypass\\_and\\_get\\_SYSTEM\\_dirtectly.html](https://zcgonvh.com/post/Advanced_Windows_Task_Scheduler_Playbook-Part.2_from_COM_to_UAC_bypass_and_get_SYSTEM_dirtectly.html)  \n* [https://www.sonicwall.com/blog/project-androm-backdoor-trojan](https://www.sonicwall.com/blog/project-androm-backdoor-trojan)  \n* [https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/](https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/)  \n* [https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512](https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512) \n\n## Appendix\n\nHashing algorithm (SADBRIDGE)\n\n```py\ndef ror(x, n, max_bits=32) -\u003e int:\n    \"\"\"Rotate right within a max bit limit, default 32-bit.\"\"\"\n    n %= max_bits\n    return ((x \u003e\u003e n) | (x \u003c\u003c (max_bits - n))) \u0026 (2**max_bits - 1)\n\ndef ror_13(data) -\u003e int:\n    data = data.encode('ascii')\n    hash_value = 0\n\n    for byte in data:\n        hash_value = ror(hash_value, 13)\n        \n        if byte \u003e= 0x61:\n            byte -= 32  # Convert to uppercase\n        hash_value = (hash_value + byte) \u0026 0xFFFFFFFF\n\n    return hash_value\n\n\ndef generate_hash(data, dll) -\u003e int:\n    dll_hash = ror_13(dll)\n    result = (dll_hash + ror_13(data)) \u0026 0xFFFFFFFF\n    \n    return hex(result)\n```\n\n### AV products checked in GOSAR \n\n| 360sd.exe | kswebshield.exe |\n| :---: | :---: |\n| 360tray.exe | kvmonxp.exe |\n| a2guard.exe | kxetray.exe |\n| ad-watch.exe | mcshield.exe |\n| arcatasksservice.exe | mcshield.exe |\n| ashdisp.exe | miner.exe |\n| avcenter.exe | mongoosagui.exe |\n| avg.exe | mpmon.exe |\n| avgaurd.exe | msmpeng.exe |\n| avgwdsvc.exe | mssecess.exe |\n| avk.exe | nspupsvc.exe |\n| avp.exe | ntrtscan.exe |\n| avp.exe | patray.exe |\n| avwatchservice.exe | pccntmon.exe |\n| ayagent.aye | psafesystray.exe |\n| baidusdsvc.exe | qqpcrtp.exe |\n| bkavservice.exe | quhlpsvc.EXE |\n| ccapp.exe | ravmond.exe |\n| ccSetMgr.exe | remupd.exe |\n| ccsvchst.exe | rfwmain.exe |\n| cksoftshiedantivirus4.exe | rtvscan.exe |\n| cleaner8.exe | safedog.exe |\n| cmctrayicon.exe | savprogress.exe |\n| coranticontrolcenter32.exe | sbamsvc.exe |\n| cpf.exe | spidernt.exe |\n| egui.exe | spywareterminatorshield.exe |\n| f-prot.EXE | tmbmsrv.exe |\n| f-prot.exe | unthreat.exe |\n| f-secure.exe | usysdiag.exe |\n| fortitray.exe | v3svc.exe |\n| hipstray.exe | vba32lder.exe |\n| iptray.exe | vsmon.exe |\n| k7tsecurity.exe | vsserv.exe |\n| knsdtray.exe | wsctrl.exe |\n| kpfwtray.exe | yunsuo\\_agent\\_daemon.exe |\n| ksafe.exe | yunsuo\\_agent\\_service.exe |\n","code":"var Component=(()=\u003e{var h=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var t in e)l(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!m.call(n,r)\u0026\u0026r!==t\u0026\u0026l(n,r,{get:()=\u003ee[r],enumerable:!(a=g(e,r))||a.enumerable});return n};var v=(n,e,t)=\u003e(t=n!=null?h(p(n)):{},o(e||!n||!n.__esModule?l(t,\"default\",{value:n,enumerable:!0}):t,n)),b=n=\u003eo(l({},\"__esModule\",{value:!0}),n);var s=f((D,d)=\u003e{d.exports=_jsx_runtime});var k={};w(k,{default:()=\u003ex,frontmatter:()=\u003ey});var i=v(s()),y={title:\"Under the SADBRIDGE with GOSAR: QUASAR Gets a Golang Rewrite\",slug:\"under-the-sadbridge-with-gosar\",date:\"2024-12-13\",description:\"Elastic Security Labs share details about the SADBRIDGE loader and GOSAR backdoor, malware used in campaigns targeting Chinese-speaking victims.\",author:[{slug:\"jia-yu-chan\"},{slug:\"salim-bitam\"},{slug:\"daniel-stepanic\"},{slug:\"seth-goodwin\"}],image:\"Security Labs Images 21.jpg\",category:[{slug:\"malware-analysis\"}]};function c(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",img:\"img\",code:\"code\",a:\"a\",h4:\"h4\",br:\"br\",strong:\"strong\",h5:\"h5\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",pre:\"pre\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs recently observed a new intrusion set targeting Chinese-speaking regions, tracked as REF3864. These organized campaigns target victims by masquerading as legitimate software such as web browsers or social media messaging services. The threat group behind these campaigns shows a moderate degree of versatility in delivering malware across multiple platforms such as Linux, Windows, and Android. During this investigation, our team discovered a unique Windows infection chain with a custom loader we call SADBRIDGE. This loader deploys a Golang-based reimplementation of QUASAR, which we refer to as GOSAR. This is our team\\u2019s first time observing a rewrite of QUASAR in the Golang programming language.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Ongoing campaigns targeting Chinese language speakers with malicious installers masquerading as legitimate software like Telegram and the Opera web browser\"}),`\n`,(0,i.jsx)(e.li,{children:\"Infection chains employ injection and DLL side-loading using a custom loader (SADBRIDGE)\"}),`\n`,(0,i.jsx)(e.li,{children:\"SADBRIDGE deploys a newly-discovered variant of the QUASAR backdoor written in Golang (GOSAR)\"}),`\n`,(0,i.jsx)(e.li,{children:\"GOSAR is a multi-functional backdoor under active development with incomplete features and iterations of improved features observed over time\"}),`\n`,(0,i.jsx)(e.li,{children:\"Elastic Security provides comprehensive prevention and detection capabilities against this attack chain\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"ref3864-campaign-overview\",children:\"REF3864 Campaign Overview\"}),`\n`,(0,i.jsx)(e.p,{children:\"In November, the Elastic Security Labs team observed a unique infection chain when detonating several different samples uploaded to VirusTotal. These different samples were hosted via landing pages masquerading as legitimate software such as Telegram or the Opera GX browser.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image32.png\",alt:\"Fake Telegram landing page\",width:\"1379\",height:\"968\"})}),`\n`,(0,i.jsx)(e.p,{children:\"During this investigation, we uncovered multiple infection chains involving similar techniques:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Trojanized MSI installers with low detections\"}),`\n`,(0,i.jsx)(e.li,{children:\"Masquerading using legitimate software bundled with malicious DLLs\"}),`\n`,(0,i.jsx)(e.li,{children:\"Custom SADBRIDGE loader deployed\"}),`\n`,(0,i.jsx)(e.li,{children:\"Final stage GOSAR loaded\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"We believe these campaigns have flown under the radar due to multiple levels of abstraction. Typically, the first phase involves opening an archive file (ZIP) that includes an MSI installer. Legitimate software like the Windows \",(0,i.jsx)(e.code,{children:\"x64dbg.exe\"}),\" debugging application is used behind-the-scenes to load a malicious, patched DLL (\",(0,i.jsx)(e.code,{children:\"x64bridge.dll\"}),\"). This DLL kicks off a new legitimate program (\",(0,i.jsx)(e.code,{children:\"MonitoringHost.exe\"}),\") where it side-loads another malicious DLL (\",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\"), ultimately performing injection and loading the GOSAR implant in memory via injection.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Malware researchers extracted SADBRIDGE configurations that reveal adversary-designated campaign dates, and indicate operations with similar TTP\\u2019s have been ongoing since at least December 2023. The command-and-control (C2) infrastructure for GOSAR often masquerades under trusted services or software to appear benign and conform to victim expectations for software installers. Throughout the execution chain, there is a focus centered around enumerating Chinese AV products such as \",(0,i.jsx)(e.code,{children:\"360tray.exe\"}),\", along with firewall rule names and descriptions in Chinese. Due to these customizations we believe this threat is geared towards targeting Chinese language speakers. Additionally, extensive usage of Chinese language logging indicates the attackers are also Chinese language speakers.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"QUASAR has previously been used in state-sponsored espionage, non-state hacktivism, and criminal financially motivated attacks since 2017 (Qualys, \",(0,i.jsx)(e.a,{href:\"https://www.qualys.com/docs/whitepapers/qualys-wp-stealthy-quasar-evolving-to-lead-the-rat-race-v220727.pdf?_ga=2.196384556.1458236792.1733495919-74841447.1733495919\",rel:\"nofollow\",children:\"Evolution of Quasar RAT\"}),\"), including by China-linked \",(0,i.jsx)(e.a,{href:\"https://www.fbi.gov/wanted/cyber/apt-10-group\",rel:\"nofollow\",children:\"APT10\"}),\". A rewrite in Golang might capitalize on institutional knowledge gained over this period, allowing for additional capabilities without extensive retraining of previously effective TTPs.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"GOSAR extends QUASAR with additional information-gathering capabilities, multi-OS support, and improved evasion against anti-virus products and malware classifiers. However, the generic lure websites, and lack of additional targeting information, or actions on the objective, leave us with insufficient evidence to identify attacker motivation(s).\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image14.png\",alt:\"SADBRIDGE Execution Chain resulting in GOSAR infection\",width:\"2521\",height:\"1413\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"sadbridge-introduction\",children:\"SADBRIDGE Introduction\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The SADBRIDGE malware loader is packaged as an MSI executable for delivery and uses DLL side-loading with various injection techniques to execute malicious payloads. SADBRIDGE abuses legitimate applications such as \",(0,i.jsx)(e.code,{children:\"x64dbg.exe\"}),\" and \",(0,i.jsx)(e.code,{children:\"MonitoringHost.exe\"}),\" to load malicious DLLs like \",(0,i.jsx)(e.code,{children:\"x64bridge.dll\"}),\" and \",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\", which leads to subsequent stages and shellcodes.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Persistence is achieved through service creation and registry modifications. Privilege escalation to Administrator occurs silently using a \",(0,i.jsx)(e.a,{href:\"https://github.com/0xlane/BypassUAC\",rel:\"nofollow\",children:\"UAC bypass technique\"}),\" that abuses the \",(0,i.jsx)(e.code,{children:\"ICMLuaUtil\"}),\" COM interface. In addition, SADBRIDGE incorporates a \",(0,i.jsx)(e.a,{href:\"https://github.com/zcgonvh/TaskSchedulerMisc\",rel:\"nofollow\",children:\"privilege escalation bypass\"}),\" through Windows Task Scheduler to execute its main payload with SYSTEM level privileges.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The SADBRIDGE configuration is encrypted using a simple subtraction of \",(0,i.jsx)(e.code,{children:\"0x1\"}),\" on each byte of the configuration string. The encrypted stages are all appended with a \",(0,i.jsx)(e.code,{children:\".log\"}),\" extension, and decrypted during runtime using XOR and the LZNT1 decompression algorithm.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"SADBRIDGE employs \",(0,i.jsx)(e.a,{href:\"https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/\",rel:\"nofollow\",children:\"PoolParty\"}),\", APC queues, and token manipulation techniques for process injection. To avoid sandbox analysis, it uses long \",(0,i.jsx)(e.code,{children:\"Sleep\"}),\" API calls. Another defense evasion technique involves API patching to disable Windows security mechanisms such as the Antimalware Scan Interface (AMSI) and Event Tracing for Windows (ETW).\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following deep dive is structured to explore the execution chain, providing a step-by-step walkthrough of the capabilities and functionalities of significant files and stages, based on the configuration of the analyzed sample. The analysis aims to highlight the interaction between each component and their roles in reaching the final payload.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"sadbridge-code-analysis\",children:\"SADBRIDGE Code Analysis\"}),`\n`,(0,i.jsx)(e.h4,{id:\"msi-analysis\",children:\"MSI Analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The initial files are packaged in an MSI using \",(0,i.jsx)(e.a,{href:\"https://www.advancedinstaller.com/\",rel:\"nofollow\",children:\"Advanced Installer\"}),\", the main files of interest are \",(0,i.jsx)(e.code,{children:\"x64dbg.exe\"}),\" and \",(0,i.jsx)(e.code,{children:\"x64bridge.dll\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image20.png\",alt:\"Significant files inside the MSI installer\",width:\"828\",height:\"166\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"By using MSI tooling (\",(0,i.jsx)(e.a,{href:\"https://github.com/activescott/lessmsi\",rel:\"nofollow\",children:\"lessmsi\"}),\"), we can see the \",(0,i.jsx)(e.code,{children:\"LaunchApp\"}),\" entrypoint in \",(0,i.jsx)(e.code,{children:\"aicustact.dll\"}),\" is configured to execute the file path specified in the \",(0,i.jsx)(e.code,{children:\"AI_APP_FILE\"}),\" property.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image1.png\",alt:\"Custom actions configured using Advanced Installer\",width:\"765\",height:\"402\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If we navigate to this \",(0,i.jsx)(e.code,{children:\"AI_APP_FILE\"}),\" property, we can see the file tied to this configuration is \",(0,i.jsx)(e.code,{children:\"x64dbg.exe\"}),\". This represents the file that will be executed after the installation is completed, the legitimate \",(0,i.jsx)(e.code,{children:\"NetFxRepairTool.exe\"}),\" is never executed.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image31.png\",alt:\"AI_APP_FILE property configured to launch x64dbg.exe\",width:\"603\",height:\"157\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"x64bridgedll-side-loading\",children:\"x64bridge.dll Side-loading\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"When \",(0,i.jsx)(e.code,{children:\"x64dbg.exe\"}),\" gets executed, it calls the \",(0,i.jsx)(e.code,{children:\"BridgeInit\"}),\" export from \",(0,i.jsx)(e.code,{children:\"x64bridge.dll\"}),\". \",(0,i.jsx)(e.code,{children:\"BridgeInit\"}),\" is a wrapper for the \",(0,i.jsx)(e.code,{children:\"BridgeStart\"}),\" function.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image30.png\",alt:\"Control flow diagram showing call to BridgeStart\",width:\"736\",height:\"505\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Similar to techniques observed with \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/blister-loader\",rel:\"nofollow\",children:\"BLISTER\"}),\", SADBRIDGE patches the export of a legitimate DLL.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image7.png\",alt:\"Comparison of BridgeStart export from x64bridge.dll\",width:\"1623\",height:\"388\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"During the malware initialization routine, SADBRIDGE begins with generating a hash using the hostname and a magic seed \",(0,i.jsx)(e.code,{children:\"0x4E67C6A7\"}),\". This hash is used as a directory name for storing the encrypted configuration file. The encrypted configuration is written to \",(0,i.jsx)(e.code,{children:\"C:\\\\Users\\\\Public\\\\Documents\\\\\u003chostname_hash\u003e\\\\edbtmp.log\"}),\". This file contains the attributes FILE_ATTRIBUTE_SYSTEM, FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_HIDDEN  to hide itself from an ordinary directory listing.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image8.png\",alt:\"Configuration file hidden from users\",width:\"817\",height:\"302\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Decrypting the configuration is straightforward, the encrypted chunks are separated with null bytes. For each byte within the encrypted chunks, we can increment them by \",(0,i.jsx)(e.code,{children:\"0x1\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The configuration consists of:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Possible campaign date\"}),`\n`,(0,i.jsx)(e.li,{children:\"Strings to be used for creating services\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"New name for MonitoringHost.exe (\",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"DLL name for the DLL to be sideloaded by MonitoringHost.exe (\",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Absolute paths for additional stages (\",(0,i.jsx)(e.code,{children:\".log\"}),\" files)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"The primary injection target for hosting GOSAR (\",(0,i.jsx)(e.code,{children:\"svchost.exe\"}),\")\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image27.png\",alt:\"SADBRIDGE configuration\",width:\"1526\",height:\"484\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"DevQueryBroker\"}),\" directory (\",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Microsoft\\\\DeviceSync\\\\Device\\\\Stage\\\\Data\\\\DevQueryBroker\\\\\"}),\") contains all of the encrypted stages (\",(0,i.jsx)(e.code,{children:\".log\"}),\" files) that are decrypted at runtime. The file (\",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\") is a renamed copy of Microsoft legitimate application (\",(0,i.jsx)(e.code,{children:\"MonitoringHost.exe\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image18.png\",alt:\"File listing of the DevQueryBroker folder\",width:\"844\",height:\"276\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, it creates a process to run \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\" which side-loads the malicious \",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\" in the same folder.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"healthserviceruntimedll\",children:\"HealthServiceRuntime.dll\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This module drops both an encrypted and partially decrypted shellcode in the User\\u2019s \",(0,i.jsx)(e.code,{children:\"%TEMP%\"}),\" directory. The file name for the shellcode follows the format: \",(0,i.jsx)(e.code,{children:\"log\u003crandom_string\u003e.tmp\"}),\". Each byte of the partially decrypted shellcode is then decremented by \",(0,i.jsx)(e.code,{children:\"0x10\"}),\" to fully decrypt. The shellcode is executed in a new thread of the same process.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image10.png\",alt:\"Decryption of a shellcode in HealthServiceRuntime.dll\",width:\"1132\",height:\"588\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware leverages API hashing using the same algorithm in \",(0,i.jsx)(e.a,{href:\"https://www.sonicwall.com/blog/project-androm-backdoor-trojan\",rel:\"nofollow\",children:\"research\"}),\" published by SonicWall, the hashing algorithm is listed in the Appendix \",(0,i.jsx)(e.a,{href:\"#appendix\",children:\"section\"}),\". The shellcode decrypts \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.log\"}),\" into a PE file then performs a simple XOR operation with a single byte (\",(0,i.jsx)(e.code,{children:\"0x42)\"}),\" in the first third of the file where then it decompresses the result using the LZNT1 algorithm.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image3.png\",alt:\"Shellcode decrypting DevQueryBroker.log file\",width:\"1066\",height:\"527\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The shellcode then unmaps any existing mappings at the PE file's preferred base address using \",(0,i.jsx)(e.code,{children:\"NtUnmapViewOfSection\"}),\", ensuring that a call to \",(0,i.jsx)(e.code,{children:\"VirtualAlloc\"}),\" will allocate memory starting at the preferred base address. Finally, it maps the decrypted PE file to this allocated memory and transfers execution to its entry point. All shellcodes identified and executed by SADBRIDGE share an identical code structure, differing only in the specific \",(0,i.jsx)(e.code,{children:\".log\"}),\" files they reference for decryption and execution.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"devquerybrokerlog\",children:\"DevQueryBroker.log\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware dynamically loads \",(0,i.jsx)(e.code,{children:\"amsi.dll\"}),\" to disable critical security mechanisms in Windows. It patches \",(0,i.jsx)(e.code,{children:\"AmsiScanBuffer\"}),\" in \",(0,i.jsx)(e.code,{children:\"amsi.dll\"}),\" by inserting instructions to modify the return value to \",(0,i.jsx)(e.code,{children:\"0x80070057\"}),\", the standardized Microsoft error code \",(0,i.jsx)(e.code,{children:\"E_INVALIDARG\"}),\" indicating invalid arguments, and returning prematurely, to effectively bypass the scanning logic. Similarly, it patches \",(0,i.jsx)(e.code,{children:\"AmsiOpenSession\"}),\" to always return the same error code \",(0,i.jsx)(e.code,{children:\"E_INVALIDARG\"}),\". Additionally, it patches \",(0,i.jsx)(e.code,{children:\"EtwEventWrite\"}),\" in \",(0,i.jsx)(e.code,{children:\"ntdll.dll\"}),\", replacing the first instruction with a \",(0,i.jsx)(e.code,{children:\"ret\"}),\" instruction to disable Event Tracing for Windows (ETW), suppressing any logging of malicious activity.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image17.png\",alt:\"Patching AmsiScanBuffer, AmsiOpenSession and EtwEventWrite APIs\",width:\"1162\",height:\"741\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Following the patching, an encrypted shellcode is written to \",(0,i.jsx)(e.code,{children:\"temp.ini\"}),\" at path (\",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Microsoft\\\\DeviceSync\\\\Device\\\\Stage\\\\Data\\\\DevQueryBroker\\\\temp.ini\"}),\").\",(0,i.jsx)(e.br,{}),`\n`,\"The malware checks the current process token\\u2019s group membership to determine its privilege level. It verifies if the process belongs to the LocalSystem account by initializing a SID with the \",(0,i.jsx)(e.code,{children:\"SECURITY_LOCAL_SYSTEM_RID\"}),\" and calling \",(0,i.jsx)(e.code,{children:\"CheckTokenMembership\"}),\". If not, it attempts to check for membership in the Administrators group by creating a SID using \",(0,i.jsx)(e.code,{children:\"SECURITY_BUILTIN_DOMAIN_RID\"}),\" and \",(0,i.jsx)(e.code,{children:\"DOMAIN_ALIAS_RID_ADMINS\"}),\" and performing a similar token membership check.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"If the current process does not have LocalSystem or Administrator privileges, privileges are first elevated to Administrator through a \",(0,i.jsx)(e.a,{href:\"https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512\",rel:\"nofollow\",children:\"UAC bypass mechanism\"}),\" by leveraging the \",(0,i.jsx)(e.code,{children:\"ICMLuaUtil\"}),\" COM interface. It crafts a moniker string \",(0,i.jsx)(e.code,{children:'\"Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}\"'}),\" to create an instance of the \",(0,i.jsx)(e.code,{children:\"CMSTPLUA\"}),\" object with Administrator privileges. Once the object is created and the \",(0,i.jsx)(e.code,{children:\"ICMLuaUtil\"}),\" interface is obtained, the malware uses the exposed \",(0,i.jsx)(e.code,{children:\"ShellExec\"}),\" method of the interface to run \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image11.png\",alt:\"Privilege Escalation via ICMLuaUtil COM interface\",width:\"1743\",height:\"1341\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If a task or a service is not created to run \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\" routinely, the malware checks if the Anti-Virus process \",(0,i.jsx)(e.code,{children:\"360tray.exe\"}),\" is running. If it is not running, a service is created for privilege escalation to SYSTEM, with the following properties:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Service name: \",(0,i.jsx)(e.strong,{children:\"DevQueryBrokerService\"}),(0,i.jsx)(e.br,{}),`\n`,\"Binary path name: \",(0,i.jsx)(e.strong,{children:\"\\u201CC:\\\\ProgramData\\\\Microsoft\\\\DeviceSync\\\\Device\\\\Stage\\\\Data\\\\DevQueryBroker\\\\DevQueryBroker.exe -svc\\u201D\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Display name: \",(0,i.jsx)(e.strong,{children:\"DevQuery Background Discovery Broker Service\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Description: \",(0,i.jsx)(e.strong,{children:\"Enables apps to discover devices with a background task.\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Start type: \",(0,i.jsx)(e.strong,{children:\"Automatically at system boot\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Privileges: \",(0,i.jsx)(e.strong,{children:\"LocalSystem\"})]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"If \",(0,i.jsx)(e.code,{children:\"360tray.exe\"}),\" is detected running, the malware writes an encrypted PE file to \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerService.log\"}),\", then maps a next-stage PE file (Stage 1) into the current process memory, transferring execution to it.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\" is re-triggered with SYSTEM level privileges and reaches this part of the chain, the malware checks the Windows version. For systems running Vista or later (excluding Windows 7), it maps another next-stage (Stage 2) into memory and transfers execution there.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"On Windows 7, however, it executes a shellcode, which decrypts and runs the \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerPre.log\"}),\" file.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"stage-1-injection-explorerexe\",children:\"Stage 1 Injection (explorer.exe)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SADBRIDGE utilizes \",(0,i.jsx)(e.a,{href:\"https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/\",rel:\"nofollow\",children:\"PoolParty Variant 7\"}),\" to inject shellcode into \",(0,i.jsx)(e.code,{children:\"explorer.exe\"}),\" by targeting its thread pool\\u2019s I/O completion queue. It first duplicates a handle to the target process's I/O completion queue. It then allocates memory within \",(0,i.jsx)(e.code,{children:\"explorer.exe\"}),\" to store the shellcode. Additional memory is allocated to store a crafted \",(0,i.jsx)(e.a,{href:\"https://github.com/SafeBreach-Labs/PoolParty/blob/77e968b35f4bad74add33ea8a2b0b5ed9543276c/PoolParty/ThreadPool.hpp#L42\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"TP_DIRECT\"})}),\" structure, which includes the base address of the shellcode as the callback address. Finally, it calls \",(0,i.jsx)(e.code,{children:\"ZwSetIoCompletion\"}),\", passing a pointer to the \",(0,i.jsx)(e.code,{children:\"TP_DIRECT\"}),\" structure to queue a packet to the I/O completion queue of the target process's worker factory (worker threads manager), effectively triggering the execution of the injected shellcode.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image21.png\",alt:\"I/O Completion Port Shellcode Injection\",width:\"1635\",height:\"595\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This shellcode decrypts the \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerService.log\"}),\" file, unmaps any memory regions occupying its preferred base address, maps the PE file to that address, and then executes its entry point. This behavior mirrors the previously observed shellcode.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"stage-2-injection-spoolsvexelsassexe\",children:\"Stage 2 Injection (spoolsv.exe/lsass.exe)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"For Stage 2, SADBRIDGE injects shellcode into \",(0,i.jsx)(e.code,{children:\"spoolsv.exe\"}),\", or \",(0,i.jsx)(e.code,{children:\"lsass.exe\"}),\" if \",(0,i.jsx)(e.code,{children:\"spoolsv.exe\"}),\" is unavailable, using the same injection technique as in Stage 1. The shellcode exhibits similar behavior to the earlier stages: it decrypts \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerPre.log\"}),\" into a PE file, unmaps any regions occupying its preferred base address, maps the PE file, and then transfers execution to its entry point.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"devquerybrokerservicelog\",children:\"DevQueryBrokerService.log\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The shellcode decrypted from \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerService.log\"}),\" as mentioned in the previous section leverages a privilege escalation technique using the Windows Task Scheduler. SADBRIDGE integrates a public UAC \",(0,i.jsx)(e.a,{href:\"https://github.com/zcgonvh/TaskSchedulerMisc\",rel:\"nofollow\",children:\"bypass technique\"}),\" using the \",(0,i.jsx)(e.code,{children:\"IElevatedFactorySever\"}),\" COM object to indirectly create the scheduled task. This task is configured to run \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\" on a daily basis with SYSTEM level privileges using the task name \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerService\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image9.png\",alt:\"GUID in Scheduled Task Creation (Virtual Factory for MaintenanceUI)\",width:\"1132\",height:\"222\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In order to cover its tracks, the malware spoofs the image path and command-line by modifying the Process Environment Block (PEB) directly, likely in an attempt to disguise the COM service as coming from \",(0,i.jsx)(e.code,{children:\"explorer.exe\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image13.png\",alt:\"DevQueryBrokerService.log Spoofed Image Command-Line\",width:\"480\",height:\"357\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"devquerybrokerprelog\",children:\"DevQueryBrokerPre.log\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SADBRIDGE creates a service named \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerServiceSvc\"}),\" under the registry subkey \",(0,i.jsx)(e.code,{children:\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\DevQueryBrokerServiceSvc\"}),\" with the following attributes:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Description\"}),\": Enables apps to discover devices with a background task.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"DisplayName\"}),\": DevQuery Background Discovery Broker Service\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"ErrorControl\"}),\": 1\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"ImagePath\"}),\": \",(0,i.jsx)(e.code,{children:\"%systemRoot%\\\\system32\\\\svchost.exe -k netsvcs\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"ObjectName\"}),\": LocalSystem\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Start\"}),\": 2 (auto-start)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Type\"}),\": 16.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Failure Actions\"}),\":\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Resets failure count every 24 hours.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Executes three restart attempts: a 20ms delay for the first, and a 1-minute delay for the second and third.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The service parameters specify the \",(0,i.jsx)(e.code,{children:\"ServiceDll\"}),\" located at \",(0,i.jsx)(e.code,{children:\"C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\Stationery\\\\\u003chostname_hash\u003e\\\\DevQueryBrokerService.dll\"}),\". If the DLL file does not exist, it will be dropped to disk right after.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"DevQueryBrokerService.dll\"}),\" has a similar code structure as \",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\", which is seen in the earlier stages of the execution chain. It is responsible for decrypting \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.log\"}),\" and running it. The \",(0,i.jsx)(e.code,{children:\"ServiceDll\"}),\" will be loaded and executed by \",(0,i.jsx)(e.code,{children:\"svchost.exe\"}),\" when the service starts.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image12.png\",alt:\"svchost.exe\\u2019s malicious ServiceDLL parameter\",width:\"1293\",height:\"98\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Additionally, it modifies the \",(0,i.jsx)(e.code,{children:\"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Svchost\\\\netsvcs\"}),\" key to include an entry for \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerServiceSvc\"}),\" to integrate the newly created service into the group of services managed by the \",(0,i.jsx)(e.code,{children:\"netsvcs\"}),\" service host group.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image19.png\",alt:\"Modifies the netsvc registry key to add DevQueryBrokerServiceSvc\",width:\"1192\",height:\"669\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"SADBRIDGE then deletes the scheduled task and service created previously by removing the registry subkeys \",(0,i.jsx)(e.code,{children:\"SOFTWARE\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\CurrentVersion\\\\\\\\Schedule\\\\\\\\TaskCache\\\\\\\\Tree\\\\\\\\DevQueryBrokerService\"}),\" and \",(0,i.jsx)(e.code,{children:\"SYSTEM\\\\\\\\CurrentControlSet\\\\\\\\Services\\\\\\\\DevQueryBrokerService\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, it removes the files \",(0,i.jsx)(e.code,{children:\"DevQueryBroker.exe\"}),\" and \",(0,i.jsx)(e.code,{children:\"HealthServiceRuntime.dll\"}),\" in the \",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Microsoft\\\\DeviceSync\\\\Device\\\\Stage\\\\Data\\\\DevQueryBroker\"}),\" folder, as the new persistence mechanism is in place.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"gosar-injection\",children:\"GOSAR Injection\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"In the latter half of the code, SADBRIDGE enumerates all active sessions on the local machine using the \",(0,i.jsx)(e.code,{children:\"WTSEnumerateSessionsA\"}),\" API.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"If sessions are found, it iterates through each session:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"For each session, it attempts to retrieve the username (\",(0,i.jsx)(e.code,{children:\"WTSUserName\"}),\") using \",(0,i.jsx)(e.code,{children:\"WTSQuerySessionInformationA\"}),\". If the query fails, it moves to the next session.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"If \",(0,i.jsx)(e.code,{children:\"WTSUserName\"}),\" is not empty, the code targets \",(0,i.jsx)(e.code,{children:\"svchost.exe\"}),\", passing its path, the session ID, and the content of the loader configuration to a subroutine that injects the final stage.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"If \",(0,i.jsx)(e.code,{children:\"WTSUserName\"}),\" is empty but the session's \",(0,i.jsx)(e.code,{children:\"WinStationName\"}),\" is \",(0,i.jsx)(e.code,{children:'\"Services\"'}),\" (indicating a service session), it targets \",(0,i.jsx)(e.code,{children:\"dllhost.exe\"}),\" instead, passing the same parameters to the final stage injection subroutine.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"If no sessions are found, it enters an infinite loop to repeatedly enumerate sessions and invoke the subroutine for injecting the final stage, while performing checks to avoid redundant injections.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Logged-in sessions target \",(0,i.jsx)(e.code,{children:\"svchost.exe\"}),\", while service sessions or sessions without a logged-in user target \",(0,i.jsx)(e.code,{children:\"dllhost.exe\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image6.png\",alt:\"Enumeration of active sessions\",width:\"1920\",height:\"1613\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If a session ID is available, the code attempts to duplicate the user token for that session and elevate the duplicated token's integrity level to \",(0,i.jsx)(e.code,{children:\"S-1-16-12288\"}),\" (System integrity). It then uses the elevated token to create a child process (\",(0,i.jsx)(e.code,{children:\"svchost.exe\"}),\" or \",(0,i.jsx)(e.code,{children:\"dllhost.exe\"}),\") via \",(0,i.jsx)(e.code,{children:\"CreateProcessAsUserA\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image4.png\",alt:\"Duplication of user token and elevating token privileges\",width:\"1748\",height:\"1116\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If token manipulation fails or no session ID is available (system processes can have a session ID of 0), it falls back to creating a process without a token using \",(0,i.jsx)(e.code,{children:\"CreateProcessA\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The encrypted shellcode \",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Microsoft\\\\DeviceSync\\\\Device\\\\Stage\\\\Data\\\\DevQueryBroker\\\\temp.ini\"}),\" is decrypted using the same XOR and LZNT1 decompression technique seen previously to decrypt \",(0,i.jsx)(e.code,{children:\".log\"}),\" files, and APC injection is used to queue the shellcode for execution in the newly created process\\u2019s thread.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image2.png\",alt:\"APC injection to run GOSAR\",width:\"1614\",height:\"807\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, the injected shellcode decrypts \",(0,i.jsx)(e.code,{children:\"DevQueryBrokerCore.log\"}),\" to GOSAR and runs it in the newly created process\\u2019s memory.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image33.png\",alt:\"GOSAR injected into dllhost.exe and svchost.exe\",width:\"1094\",height:\"62\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"gosar-introduction\",children:\"GOSAR Introduction\"}),`\n`,(0,i.jsx)(e.p,{children:\"GOSAR is a multi-functional remote access trojan found targeting Windows and Linux systems. This backdoor includes capabilities such as retrieving system information, taking screenshots, executing commands, keylogging, and much more. The GOSAR backdoor retains much of QUASAR's core functionality and behavior, while incorporating several modifications that differentiate it from the original version.\"}),`\n`,(0,i.jsx)(e.p,{children:\"By rewriting malware in modern languages like Go, this can offer reduced detection rates as many antivirus solutions and malware classifiers struggle to identify malicious strings/characteristics under these new programming constructs. Below is a good example of an unpacked GOSAR receiving only 5 detections upon upload.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image29.png\",alt:\"Low detection rate on GOSAR VT upload\",width:\"1662\",height:\"630\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Notably, this variant supports multiple platforms, including ELF binaries for Linux systems and traditional PE files for Windows. This cross-platform capability aligns with the adaptability of Go, making it more versatile than the original .NET-based QUASAR. Within the following section, we will focus on highlighting GOSAR\\u2019s code structure, new features and additions compared to the open-source version (QUASAR).\"}),`\n`,(0,i.jsx)(e.h2,{id:\"gosar-code-analysis-overview\",children:\"GOSAR Code Analysis Overview\"}),`\n`,(0,i.jsx)(e.h3,{id:\"code-structure-of-gosar\",children:\"Code structure of GOSAR\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As the binary retained all its symbols, we were able to reconstruct the source code structure, which was extracted from a sample of version \",(0,i.jsx)(e.code,{children:\"0.12.01\"})]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image26.png\",alt:\"GOSAR code structure\",width:\"836\",height:\"1072\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/config\"}),\": Contains the configuration files for the malware.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/proto\"}),\": Houses all the Google Protocol Buffers (proto) declarations.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/network\"}),\": Includes functions related to networking, such as the main connection loop, proxy handling and also thread to configure the firewall and setting up a listener\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/msgs/resolvers\"}),\": Defines the commands handled by the malware. These commands are assigned to an object within the \",(0,i.jsx)(e.code,{children:\"vibrant_msgs_init*\"}),\" functions.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/msgs/services\"}),\": Introduces new functionality, such as running services like keyloggers, clipboard logger, these services are started in the \",(0,i.jsx)(e.code,{children:\"vibrant_network._ptr_Connection.Start\"}),\" function.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/logs\"}),\": Responsible for logging the malware\\u2019s execution. The logs are encrypted with an AES key stored in the configuration. The malware decrypts the logs in chunks using AES.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/pkg/helpers\"}),\": Contains helper functions used across various malware commands and services.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/pkg/screenshot\"}),\": Handles the screenshot capture functionality on the infected system.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/pkg/utils\"}),\": Includes utility functions, such as generating random values.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"vibrant/pkg/native\"}),\": Provides functions for calling Windows API (WINAPI) functions.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"new-additions-to-gosar\",children:\"New Additions to GOSAR\"}),`\n`,(0,i.jsx)(e.h4,{id:\"communication-and-information-gathering\",children:\"Communication and information gathering\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This new variant continues to use the same communication method as the original, based on \",(0,i.jsx)(e.strong,{children:\"TCP TLS\"}),\". Upon connection, it first sends system information to the C2, with 4 new fields added:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"IPAddress\"}),`\n`,(0,i.jsx)(e.li,{children:\"AntiVirus\"}),`\n`,(0,i.jsx)(e.li,{children:\"ClipboardSettings\"}),`\n`,(0,i.jsx)(e.li,{children:\"Wallets\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The list of AntiViruses and digital wallets are initialized in the function \",(0,i.jsx)(e.code,{children:\"vibrant_pkg_helpers_init\"}),\" and can be found at the bottom of this document.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"services\",children:\"Services\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware handles 3 services that are started during the initial connection of the client to the C2:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"vibrant_services_KeyLogger\"}),`\n`,(0,i.jsx)(e.li,{children:\"vibrant_services_ClipboardLogger\"}),`\n`,(0,i.jsx)(e.li,{children:\"vibrant_services_TickWriteFile\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image22.png\",alt:\"GOSAR services\",width:\"1045\",height:\"119\"})}),`\n`,(0,i.jsx)(e.h5,{id:\"keylogger\",children:\"KeyLogger\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The keylogging functionality in GOSAR is implemented in the \",(0,i.jsx)(e.code,{children:\"vibrant_services_KeyLogger\"}),\" function. This feature relies on Windows APIs to intercept and record keystrokes on the infected system by setting a global Windows hook with \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"SetWindowsHookEx\"})}),\" with the parameter \",(0,i.jsx)(e.code,{children:\"WH_KEYBOARD_LL\"}),\" to monitor low-level keyboard events. The hook function is named \",(0,i.jsx)(e.code,{children:\"vibrant_services_KeyLogger_func1\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image28.png\",alt:\"GOSAR setting the keylogger\",width:\"1757\",height:\"296\"})}),`\n`,(0,i.jsx)(e.h5,{id:\"clipboardlogger\",children:\"ClipboardLogger\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The clipboard logging functionality is straightforward and relies on Windows APIs. It first checks for the availability of clipboard data using \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isclipboardformatavailable\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"IsClipboardFormatAvailable\"})}),\" then retrieves it using \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"GetClipboardData\"})}),\" API.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image34.png\",alt:\"GOSAR clipboard logging\",width:\"1283\",height:\"395\"})}),`\n`,(0,i.jsx)(e.h5,{id:\"tickwritefile\",children:\"TickWriteFile\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Both \",(0,i.jsx)(e.code,{children:\"ClipboardLogger\"}),\" and \",(0,i.jsx)(e.code,{children:\"KeyLogger\"}),\" services collect data that is written by the \",(0,i.jsx)(e.code,{children:\"TickWriteFile\"}),\" periodically to directory (\",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\diagnostics\"}),\") under a file of the current date, example \",(0,i.jsx)(e.code,{children:\"2024-11-27\"}),\".\",(0,i.jsx)(e.br,{}),`\n`,\"It can be decrypted by first subtracting the value \",(0,i.jsx)(e.code,{children:\"0x1f\"}),\" then xoring it with the value \",(0,i.jsx)(e.code,{children:\"0x18\"}),\" as shown in the CyberChef recipe.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image24.png\",alt:\"CyberChef recipe used to decrypt keylogger logs\",width:\"1999\",height:\"798\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"networking-setup\",children:\"Networking setup\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After initializing its services, the malware spawns \",(0,i.jsx)(e.strong,{children:\"three threads\"}),\" dedicated to its networking setup.\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"vibrant_network_ConfigFirewallRule\"}),`\n`,(0,i.jsx)(e.li,{children:\"vibrant_network_ConfigHosts\"}),`\n`,(0,i.jsx)(e.li,{children:\"vibrant_network_ConfigAutoListener\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:\"/assets/images/under-the-sadbridge-with-gosar/image15.png\",children:\"Threads handling networking setup\"})}),`\n`,(0,i.jsx)(e.h5,{id:\"configfirewallrule\",children:\"ConfigFirewallRule\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware creates an inbound firewall rule for the ports range \",(0,i.jsx)(e.code,{children:\"51756-51776\"}),\" under a Chinese name that is translated to \",(0,i.jsx)(e.code,{children:\"Distributed Transaction Coordinator (LAN)\"}),\" it allows all programs and IP addresses inbound the description is set to :\",(0,i.jsx)(e.code,{children:\"Inbound rules for the core transaction manager of the Distributed Transaction Coordinator service are managed remotely through RPC/TCP.\"})]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image23.png\",alt:\"Added firewall rule\",width:\"1274\",height:\"867\"})}),`\n`,(0,i.jsx)(e.h5,{id:\"confighosts\",children:\"ConfigHosts\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This function adds an entry to \",(0,i.jsx)(e.code,{children:\"c:\\\\Windows\\\\System32\\\\Drivers\\\\etc\\\\hosts\"}),\" the following \",(0,i.jsx)(e.code,{children:\"127.0.0.1 micrornetworks.com\"}),\". The reason for adding this entry is unclear, but it is likely due to missing functionalities or incomplete features in the malware's current development stage.\"]}),`\n`,(0,i.jsx)(e.h5,{id:\"configautolistener\",children:\"ConfigAutoListener\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This functionality of the malware runs an HTTP server listener on the first available port within the range \",(0,i.jsx)(e.code,{children:\"51756-51776\"}),\", which was previously allowed by a firewall rule. Interestingly, the server does not handle any commands, which proves that the malware is still under development. The current version we have only processes a \",(0,i.jsx)(e.code,{children:\"GET\"}),\" request to the URI \",(0,i.jsx)(e.code,{children:\"/security.js\"}),\", responding with the string \",(0,i.jsx)(e.code,{children:\"callback();\"}),\", any other request returns a 404 error code. This minimal response could indicate that the server is a placeholder or part of an early development stage, with the potential for more complex functionalities to be added later\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image5.png\",alt:\"Callback handled by GOSAR\",width:\"445\",height:\"145\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"logs\",children:\"Logs\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware saves its runtime logs in the directory: \",(0,i.jsx)(e.code,{children:\"%APPDATA%\\\\Roaming\\\\Microsoft\\\\Logs\"}),\" under the filename formatted as: \",(0,i.jsx)(e.code,{children:\"windows-update-log-\u003cYearMonthDay\u003e.log\"}),\".\",(0,i.jsx)(e.br,{}),`\n`,\"Each log entry is encrypted with HMAC-AES algorithm; the key is hardcoded in the \",(0,i.jsx)(e.code,{children:\"vibrant_config\"}),\" function, the following is an example:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image16.png\",alt:\"Logs example generated by GOSAR\",width:\"1752\",height:\"279\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The attacker can remotely retrieve the malware's runtime logs by issuing the command \",(0,i.jsx)(e.code,{children:\"ResolveGetRunLogs\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"plugins\",children:\"Plugins\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware has the capability to execute plugins, which are PE files downloaded from the C2 and stored on disk encrypted with an XOR algorithm. These plugins are saved at the path: \",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\policy-err.log\"}),\". To execute a plugin, the command \",(0,i.jsx)(e.code,{children:\"ResolveDoExecutePlugin\"}),\" is called, it first checks if a plugin is available.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image35.png\",alt:\"GOSAR checking for existence of a plugin to execute\",width:\"898\",height:\"76\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"It then loads a native DLL reflectively that is stored in base64 format in the binary named \",(0,i.jsx)(e.code,{children:\"plugins.dll\"}),\" and executes its export function \",(0,i.jsx)(e.code,{children:\"ExecPlugin\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image25.png\",alt:\"GOSAR loading plugins.dlll and calling ExecPlugin\",width:\"1265\",height:\"230\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"ExecPlugin\"}),\" creates a suspended process of \",(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\System32\\\\msiexec.exe\"}),\" with the arguments \",(0,i.jsx)(e.code,{children:\"/package\"}),\" \",(0,i.jsx)(e.code,{children:\"/quiet\"}),\". It then queues \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls\",rel:\"nofollow\",children:\"Asynchronous Procedure Calls\"}),\" (APC) to the process's \tmain thread. When the thread is resumed, the queued shellcode is executed.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/under-the-sadbridge-with-gosar/image36.png\",alt:\"GOSAR plugin module injecting a PE in msiexec.exe\",width:\"938\",height:\"470\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The shellcode reads the encrypted plugin stored at \",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\policy-err.log\"}),\", decrypts it using a hardcoded 1-byte XOR key, and reflectively loads and executes it.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"hvnc\",children:\"HVNC\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware supports hidden VNC(HVNC) through the existing socket, it exposes 5 commands\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"ResolveHVNCCommand\"}),`\n`,(0,i.jsx)(e.li,{children:\"ResolveGetHVNCScreen\"}),`\n`,(0,i.jsx)(e.li,{children:\"ResolveStopHVNC\"}),`\n`,(0,i.jsx)(e.li,{children:\"ResolveDoHVNCKeyboardEvent\"}),`\n`,(0,i.jsx)(e.li,{children:\"ResolveDoHVNCMouseEvent\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first command that is executed is \",(0,i.jsx)(e.code,{children:\"ResolveGetHVNCScreen\"}),\" which will first initialise it and set up a view, it uses an embedded native DLL \",(0,i.jsx)(e.code,{children:\"HiddenDesktop.dll\"}),\" in base64 format, the DLL is reflectively loaded into memory and executed.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The DLL is responsible for executing low level APIs to setup the HVNC, with a total of 7 exported functions:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"ExcuteCommand\"}),`\n`,(0,i.jsx)(e.li,{children:\"DoMouseScroll\"}),`\n`,(0,i.jsx)(e.li,{children:\"DoMouseRightClick\"}),`\n`,(0,i.jsx)(e.li,{children:\"DoMouseMove\"}),`\n`,(0,i.jsx)(e.li,{children:\"DoMouseLeftClick\"}),`\n`,(0,i.jsx)(e.li,{children:\"DoKeyPress\"}),`\n`,(0,i.jsx)(e.li,{children:\"CaptureScreen\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first export function called is \",(0,i.jsx)(e.code,{children:\"Initialise\"}),\" to initialise a desktop with \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopa\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"CreateDesktopA\"})}),\" API. This HVNC implementation handles 17 commands in total that can be found in \",(0,i.jsx)(e.code,{children:\"ExcuteCommand\"}),\" export, as noted it does have a typo in the name, the command ID is forwarded from the malware\\u2019s command \",(0,i.jsx)(e.code,{children:\"ResolveHVNCCommand\"}),\" that will call \",(0,i.jsx)(e.code,{children:\"ExcuteCommand\"}),\".\"]}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Command ID\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x401\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"The function first disables taskbar button grouping by setting the \",(0,i.jsx)(e.code,{children:\"TaskbarGlomLevel\"}),\" registry key to \",(0,i.jsx)(e.code,{children:\"2\"}),\" under \",(0,i.jsx)(e.code,{children:\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\"}),\". Next, it ensures the taskbar is always visible and on top by using \",(0,i.jsx)(e.code,{children:\"SHAppBarMessage\"}),\" with the \",(0,i.jsx)(e.code,{children:\"ABM_SETSTATE\"}),\" command, setting the state to \",(0,i.jsx)(e.code,{children:\"ABS_ALWAYSONTOP\"}),\".\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x402\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Spawns a RUN dialog box by executing the 61th export function of \",(0,i.jsx)(e.code,{children:\"shell32.dll\"}),\".\\v\",(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\system32\\\\rundll32.exe shell32.dll,#61\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x403\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"powershell.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x404\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Executes a PE file stored in \",(0,i.jsx)(e.code,{children:\"C:\\\\\\\\ProgramData\\\\\\\\shell.log\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x405\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"chrome.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x406\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"msedge.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x407\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"firefox.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x408\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"iexplore.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x409\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"360se.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40A\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"360ChromeX.exe\"}),\".\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40B\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Runs an instance of \",(0,i.jsx)(e.code,{children:\"SogouExplorer.exe\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40C\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Close current window\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40D\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Minimizes the specified window\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40E\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Activates the window and displays it as a maximized window\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x40F\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Kills the process of a window\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x410\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Sets the clipboard\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0x411\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Clears the Clipboard\"})]})]})]})}),`\n`,(0,i.jsx)(e.h4,{id:\"screenshot\",children:\"Screenshot\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware loads reflectively the third and last PE DLL embedded in base64 format named \",(0,i.jsx)(e.code,{children:\"Capture.dll\"}),\", it has 5 export functions:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"CaptureFirstScreen\"}),`\n`,(0,i.jsx)(e.li,{children:\"CaptureNextScreen\"}),`\n`,(0,i.jsx)(e.li,{children:\"GetBitmapInfo\"}),`\n`,(0,i.jsx)(e.li,{children:\"GetBitmapInfoSize\"}),`\n`,(0,i.jsx)(e.li,{children:\"SetQuality\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The library is first initialized by calling \",(0,i.jsx)(e.code,{children:\"resolvers_ResolveGetBitmapInfo\"}),\" that reflectively loads and executes its \",(0,i.jsx)(e.code,{children:\"DllEntryPoint\"}),\" which will setup the screen capture structures using common Windows APIs like \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"CreateCompatibleDC\"})}),\", \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"CreateCompatibleBitmap\"})}),\" and \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createdibsection\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"CreateDIBSection\"})}),\". The 2 export functions \",(0,i.jsx)(e.code,{children:\"CaptureFirstScreen\"}),\" and \",(0,i.jsx)(e.code,{children:\"CaptureNextScreen\"}),\" are used to capture a screenshot of the victim's desktop as a JPEG image.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"observation\",children:\"Observation\"}),`\n`,(0,i.jsx)(e.p,{children:\"Interestingly, the original .NET QUASAR server can still be used to receive beaconing from GOSAR samples, as they have retained the same communication protocol. However, operational use of it would require significant modifications to support GOSAR functionalities.\"}),`\n`,(0,i.jsx)(e.p,{children:\"It is unclear whether the authors updated or extended the open source .NET QUASAR server, or developed a completely new one. It is worth mentioning that they have retained the default listening port, 1080, consistent with the original implementation.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"new-functionality\",children:\"New functionality\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following table provides a description of all the newly added commands:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"New commands\"}),(0,i.jsx)(e.th,{align:\"left\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoRoboCopy\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Executes \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"RoboCopy\"})}),\" command to copy files\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoCompressFiles\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Compress files in a zip format\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoExtractFile\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Extract a zip file\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoCopyFiles\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Copies a directory or file in the infected machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetRunLogs\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Get available logs\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveHVNCCommand\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Execute a HVNC command\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetHVNCScreen\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Initiate HVNC\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveStopHVNC\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Stop the HVNC session\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoHVNCKeyboardEvent\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Send keyboard event to the HVNC\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoHVNCMouseEvent\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Send mouse event to the HVNC\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoExecutePlugin\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Execute a plugin\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetProcesses\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Get a list of running processes\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoProcessStart\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Start a process\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoProcessEnd\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Kill a process\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetBitmapInfo\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Retrieve the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapinfo\",rel:\"nofollow\",children:(0,i.jsx)(e.strong,{children:\"BITMAPINFO\"})}),\" structure for the current screen's display settings\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetMonitors\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Enumerate victim\\u2019s display monitors with \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"EnumDisplayMonitors\"})}),\" API\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetDesktop\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Start screen capture functionality\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveStopGetDesktop\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Stop the screen capture functionality\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveNewShellExecute\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Opens pipes to a spawned cmd.exe process and send commands to it\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetSchTasks\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Get scheduled tasks by running the command \",(0,i.jsx)(e.code,{children:\"schtasks /query /fo list /v\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetScreenshot\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Capture a screenshot of the victim\\u2019s desktop\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetServices\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Get the list of services with a \",(0,i.jsx)(e.strong,{children:\"WMI\"}),\" query: \",(0,i.jsx)(e.code,{children:\"select * from Win32_Service\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoServiceOperation\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Start or stop a service\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoDisableMultiLogon\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Disable multiple session by user by setting the value \",(0,i.jsx)(e.code,{children:\"fSingleSessionPerUser\"}),\" to 1 under the key \",(0,i.jsx)(e.code,{children:\"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\TerminalServer\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoRestoreNLA\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Restores the security settings for Remote Desktop Protocol (RDP), enabling \",(0,i.jsx)(e.strong,{children:\"Network Level Authentication\"}),\" (NLA) and enforcing \",(0,i.jsx)(e.strong,{children:\"SSL/TLS\"}),\" encryption for secure communication.\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetRemoteClientInformation\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Get a list of all local users that are enabled, the \",(0,i.jsx)(e.strong,{children:\"RDP por\"}),\"t and \",(0,i.jsx)(e.strong,{children:\"LAN IP\"}),\" and \",(0,i.jsx)(e.strong,{children:\"OS specific information\"}),\": \",(0,i.jsx)(e.strong,{children:\"DisplayVersion\"}),\", \",(0,i.jsx)(e.strong,{children:\"SystemRoot\"}),\" and \",(0,i.jsx)(e.strong,{children:\"CurrentBuildNumber\"}),\" extracted from the registry key \",(0,i.jsx)(e.code,{children:\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoInstallWrapper\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Setup a Hidden Remote Desktop Protocol (\",(0,i.jsx)(e.strong,{children:\"HRDP\"}),\")\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoUninstallWrapper\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Uninstall \",(0,i.jsx)(e.strong,{children:\"HRDP\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoRecoverPrivileges\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Restores the original \",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:\"HKEY_LOCAL_MACHINE\\\\\\\\SAM\\\\\\\\SAM\"})}),\" registry before changes were made during the installation of the \",(0,i.jsx)(e.strong,{children:\"HRDP\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetRemoteSessions\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Retrieve information about the RDP sessions on the machine.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoLogoffSession\"}),(0,i.jsxs)(e.td,{align:\"left\",children:[\"Logoff RDP session with \",(0,i.jsxs)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/wtsapi32/nf-wtsapi32-wtslogoffsession\",rel:\"nofollow\",children:[\"**\",(0,i.jsx)(e.code,{children:\"WTSLogoffSession\"})]}),\"** API\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetSystemInfo\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Get system information\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveGetConnections\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Get all the connections in the machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ResolveDoCloseConnection\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Not implemented\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-and-mitre-attck\",children:\"Malware and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009/\",rel:\"nofollow\",children:\"Collection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011/\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010/\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0003/\",rel:\"nofollow\",children:\"Persistence\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0004/\",rel:\"nofollow\",children:\"Privilege Escalation\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1574/002/\",rel:\"nofollow\",children:\"Hijack Execution Flow: DLL Side-Loading\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1056/001/\",rel:\"nofollow\",children:\"Input Capture: Keylogging\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1055/004/\",rel:\"nofollow\",children:\"Process Injection: Asynchronous Procedure Call\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1057/\",rel:\"nofollow\",children:\"Process Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1564/003/\",rel:\"nofollow\",children:\"Hide Artifacts: Hidden Window\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1543/003/\",rel:\"nofollow\",children:\"Create or Modify System Process: Windows Service\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1571/\",rel:\"nofollow\",children:\"Non-Standard Port\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1548/002/\",rel:\"nofollow\",children:\"Abuse Elevation Control Mechanism: Bypass User Account Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027\",rel:\"nofollow\",children:\"Obfuscated Files or Information\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1562/001/\",rel:\"nofollow\",children:\"Impair Defenses: Disable or Modify Tools\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1497/003/\",rel:\"nofollow\",children:\"Virtualization/Sandbox Evasion: Time Based Evasion\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"mitigating-ref3864\",children:\"Mitigating REF3864\"}),`\n`,(0,i.jsx)(e.h3,{id:\"detection\",children:\"Detection\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_amsi_bypass_powershell.toml\",rel:\"nofollow\",children:\"Potential Antimalware Scan Interface Bypass via PowerShell\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_printspooler_childprocess.toml\",rel:\"nofollow\",children:\"Unusual Print Spooler Child Process\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/execution_from_unusual_path_cmdline.toml\",rel:\"nofollow\",children:\"Execution from Unusual Directory - Command Line\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/external-ip-lookup-from-non-browser-process.html\",rel:\"nofollow\",children:\"External IP Lookup from Non-Browser Process\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/privilege_escalation_unusual_parentchild_relationship.toml\",rel:\"nofollow\",children:\"Unusual Parent-Child Relationship\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_unusual_network_connection_via_dllhost.toml\",rel:\"nofollow\",children:\"Unusual Network Connection via DllHost\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_services_registry.toml\",rel:\"nofollow\",children:\"Unusual Persistence via Services Registry\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/defense_evasion_parent_process_pid_spoofing.toml\",rel:\"nofollow\",children:\"Parent Process PID Spoofing\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"prevention\",children:\"Prevention\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_masquerading_process_with_unusual_args_and_netcon.toml\",rel:\"nofollow\",children:\"Network Connection via Process with Unusual Arguments\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_unusual_svchost.toml\",rel:\"nofollow\",children:\"Potential Masquerading as SVCHOST\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_netcon_dll_suspicious_callstack.toml\",rel:\"nofollow\",children:\"Network Module Loaded from Suspicious Unbacked Memory\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/95b23ae32ce1445a8a2f333dab973de313b14016/rules/windows/privilege_escalation_uac_bypass_com_interface_icmluautil.toml\",rel:\"nofollow\",children:\"UAC Bypass via ICMLuaUtil Elevated COM Interface\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/main/rules/windows/defense_evasion_susp_imageload_timestomp.toml\",rel:\"nofollow\",children:\"Potential Image Load with a Spoofed Creation Time\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_Gosar.yar\",rel:\"nofollow\",children:\"Multi.Trojan.Gosar\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_SadBridge.yar\",rel:\"nofollow\",children:\"Windows.Trojan.SadBridge\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Observable\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Type\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Name\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"opera-x[.]net\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Landing page\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"teledown-cn[.]com\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Landing page\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"15af8c34e25268b79022d3434aa4b823ad9d34f3efc6a8124ecf0276700ecc39\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"NetFxRepairTools.msi\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"MSI\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"accd651f58dd3f7eaaa06df051e4c09d2edac67bb046a2dcb262aa6db4291de7\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"x64bridge.dll\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SADBRIDGE\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"7964a9f1732911e9e9b9e05cd7e997b0e4e2e14709490a1b657673011bc54210\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"ferp.googledns[.]io\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR C2 Server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"hk-dns.secssl[.]com\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR C2 Server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"hk-dns.winsiked[.]com\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR C2 Server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"hk-dns.wkossclsaleklddeff[.]is\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR C2 Server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"hk-dns.wkossclsaleklddeff[.]io\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain-name\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GOSAR C2 Server\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://zcgonvh.com/post/Advanced_Windows_Task_Scheduler_Playbook-Part.2_from_COM_to_UAC_bypass_and_get_SYSTEM_dirtectly.html\",rel:\"nofollow\",children:\"https://zcgonvh.com/post/Advanced_Windows_Task_Scheduler_Playbook-Part.2_from_COM_to_UAC_bypass_and_get_SYSTEM_dirtectly.html\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.sonicwall.com/blog/project-androm-backdoor-trojan\",rel:\"nofollow\",children:\"https://www.sonicwall.com/blog/project-androm-backdoor-trojan\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/\",rel:\"nofollow\",children:\"https://www.safebreach.com/blog/process-injection-using-windows-thread-pools/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512\",rel:\"nofollow\",children:\"https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"appendix\",children:\"Appendix\"}),`\n`,(0,i.jsx)(e.p,{children:\"Hashing algorithm (SADBRIDGE)\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-py\",children:`def ror(x, n, max_bits=32) -\u003e int:\n    \"\"\"Rotate right within a max bit limit, default 32-bit.\"\"\"\n    n %= max_bits\n    return ((x \u003e\u003e n) | (x \u003c\u003c (max_bits - n))) \u0026 (2**max_bits - 1)\n\ndef ror_13(data) -\u003e int:\n    data = data.encode('ascii')\n    hash_value = 0\n\n    for byte in data:\n        hash_value = ror(hash_value, 13)\n        \n        if byte \u003e= 0x61:\n            byte -= 32  # Convert to uppercase\n        hash_value = (hash_value + byte) \u0026 0xFFFFFFFF\n\n    return hash_value\n\n\ndef generate_hash(data, dll) -\u003e int:\n    dll_hash = ror_13(dll)\n    result = (dll_hash + ror_13(data)) \u0026 0xFFFFFFFF\n    \n    return hex(result)\n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"av-products-checked-in-gosar\",children:\"AV products checked in GOSAR\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"center\",children:\"360sd.exe\"}),(0,i.jsx)(e.th,{align:\"center\",children:\"kswebshield.exe\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"360tray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"kvmonxp.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"a2guard.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"kxetray.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ad-watch.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"mcshield.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"arcatasksservice.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"mcshield.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ashdisp.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"miner.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avcenter.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"mongoosagui.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avg.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"mpmon.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avgaurd.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"msmpeng.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avgwdsvc.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"mssecess.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avk.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"nspupsvc.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avp.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"ntrtscan.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avp.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"patray.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"avwatchservice.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"pccntmon.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ayagent.aye\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"psafesystray.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"baidusdsvc.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"qqpcrtp.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"bkavservice.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"quhlpsvc.EXE\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ccapp.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"ravmond.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ccSetMgr.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"remupd.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ccsvchst.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"rfwmain.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"cksoftshiedantivirus4.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"rtvscan.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"cleaner8.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"safedog.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"cmctrayicon.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"savprogress.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"coranticontrolcenter32.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"sbamsvc.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"cpf.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"spidernt.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"egui.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"spywareterminatorshield.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"f-prot.EXE\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"tmbmsrv.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"f-prot.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"unthreat.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"f-secure.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"usysdiag.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"fortitray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"v3svc.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"hipstray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"vba32lder.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"iptray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"vsmon.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"k7tsecurity.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"vsserv.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"knsdtray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"wsctrl.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"kpfwtray.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"yunsuo_agent_daemon.exe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"center\",children:\"ksafe.exe\"}),(0,i.jsx)(e.td,{align:\"center\",children:\"yunsuo_agent_service.exe\"})]})]})]})})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(c,n)})):c(n)}var x=S;return b(k);})();\n;return Component;"},"_id":"articles/under-the-sadbridge-with-gosar.mdx","_raw":{"sourceFilePath":"articles/under-the-sadbridge-with-gosar.mdx","sourceFileName":"under-the-sadbridge-with-gosar.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/under-the-sadbridge-with-gosar"},"type":"Article","imageUrl":"/assets/images/under-the-sadbridge-with-gosar/Security Labs Images 21.jpg","readingTime":"30 min read","series":"","url":"/under-the-sadbridge-with-gosar","headings":[{"level":2,"title":"Introduction","href":"#introduction"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"REF3864 Campaign Overview","href":"#ref3864-campaign-overview"},{"level":2,"title":"SADBRIDGE Introduction","href":"#sadbridge-introduction"},{"level":2,"title":"SADBRIDGE Code Analysis","href":"#sadbridge-code-analysis"},{"level":4,"title":"MSI Analysis","href":"#msi-analysis"},{"level":4,"title":"x64bridge.dll Side-loading","href":"#x64bridgedll-side-loading"},{"level":4,"title":"HealthServiceRuntime.dll","href":"#healthserviceruntimedll"},{"level":4,"title":"DevQueryBroker.log","href":"#devquerybrokerlog"},{"level":3,"title":"Stage 1 Injection (explorer.exe)","href":"#stage-1-injection-explorerexe"},{"level":3,"title":"Stage 2 Injection (spoolsv.exe/lsass.exe)","href":"#stage-2-injection-spoolsvexelsassexe"},{"level":4,"title":"DevQueryBrokerService.log","href":"#devquerybrokerservicelog"},{"level":4,"title":"DevQueryBrokerPre.log","href":"#devquerybrokerprelog"},{"level":2,"title":"GOSAR Injection","href":"#gosar-injection"},{"level":2,"title":"GOSAR Introduction","href":"#gosar-introduction"},{"level":2,"title":"GOSAR Code Analysis Overview","href":"#gosar-code-analysis-overview"},{"level":3,"title":"Code structure of GOSAR","href":"#code-structure-of-gosar"},{"level":3,"title":"New Additions to GOSAR","href":"#new-additions-to-gosar"},{"level":4,"title":"Communication and information gathering","href":"#communication-and-information-gathering"},{"level":4,"title":"Services","href":"#services"},{"level":5,"title":"KeyLogger","href":"#keylogger"},{"level":5,"title":"ClipboardLogger","href":"#clipboardlogger"},{"level":5,"title":"TickWriteFile","href":"#tickwritefile"},{"level":4,"title":"Networking setup","href":"#networking-setup"},{"level":5,"title":"ConfigFirewallRule","href":"#configfirewallrule"},{"level":5,"title":"ConfigHosts","href":"#confighosts"},{"level":5,"title":"ConfigAutoListener","href":"#configautolistener"},{"level":4,"title":"Logs","href":"#logs"},{"level":4,"title":"Plugins","href":"#plugins"},{"level":4,"title":"HVNC","href":"#hvnc"},{"level":4,"title":"Screenshot","href":"#screenshot"},{"level":3,"title":"Observation","href":"#observation"},{"level":3,"title":"New functionality","href":"#new-functionality"},{"level":2,"title":"Malware and MITRE ATT\\\u0026CK","href":"#malware-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Mitigating REF3864","href":"#mitigating-ref3864"},{"level":3,"title":"Detection","href":"#detection"},{"level":3,"title":"Prevention","href":"#prevention"},{"level":4,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"},{"level":2,"title":"Appendix","href":"#appendix"},{"level":3,"title":"AV products checked in GOSAR ","href":"#av-products-checked-in-gosar-"}],"author":[{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(c=j(e,r))||c.enumerable});return t};var _=(t,e,n)=\u003e(n=t!=null?g(l(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),d=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=h((D,s)=\u003e{s.exports=_jsx_runtime});var b={};p(b,{default:()=\u003eC,frontmatter:()=\u003ey});var a=_(u()),y={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=M;return d(b);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"},{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic Security Labs Team Research Engineer II, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(s=x(e,a))||s.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?l(g(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var m=d((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003ew,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Salim Bitam\",description:\"Elastic Security Labs Team Research Engineer II, Malware\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var w=h;return M(y);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),h=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(s=l(e,o))||s.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?g(d(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var u=_((C,c)=\u003e{c.exports=_jsx_runtime});var b={};h(b,{default:()=\u003eS,frontmatter:()=\u003ew});var r=j(u()),w={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var S=M;return p(b);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"under-the-sadbridge-with-gosar"},"buildId":"Lrmm91TBTcYvApwofX639","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>