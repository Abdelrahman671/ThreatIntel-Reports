<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://arielkoren.com/blog/xmlrpc.php">


<title>Ursnif Malware: Deep Technical Dive &#8211; Ariel Koren&#039;s blog</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//www.googletagmanager.com' />
<link rel='dns-prefetch' href='//stats.wp.com' />
<link rel='dns-prefetch' href='//use.fontawesome.com' />
<link rel='dns-prefetch' href='//i0.wp.com' />
<link rel='dns-prefetch' href='//pagead2.googlesyndication.com' />
<link rel="alternate" type="application/rss+xml" title="Ariel Koren&#039;s blog &raquo; Feed" href="https://arielkoren.com/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Ariel Koren&#039;s blog &raquo; Comments Feed" href="https://arielkoren.com/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Ariel Koren&#039;s blog &raquo; Ursnif Malware: Deep Technical Dive Comments Feed" href="https://arielkoren.com/blog/2016/11/01/ursnif-malware-deep-technical-dive/feed/" />
		<!-- This site uses the Google Analytics by MonsterInsights plugin v9.2.4 - Using Analytics tracking - https://www.monsterinsights.com/ -->
		<!-- Note: MonsterInsights is not currently configured on this site. The site owner needs to authenticate with Google Analytics in the MonsterInsights settings panel. -->
					<!-- No tracking code set -->
				<!-- / Google Analytics by MonsterInsights -->
		<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/arielkoren.com\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://arielkoren.com/blog/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css' href='https://arielkoren.com/blog/wp-includes/js/mediaelement/mediaelementplayer-legacy.min.css?ver=4.2.17' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css' href='https://arielkoren.com/blog/wp-includes/js/mediaelement/wp-mediaelement.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='jetpack-sharing-buttons-style-inline-css' type='text/css'>
.jetpack-sharing-buttons__services-list{display:flex;flex-direction:row;flex-wrap:wrap;gap:0;list-style-type:none;margin:5px;padding:0}.jetpack-sharing-buttons__services-list.has-small-icon-size{font-size:12px}.jetpack-sharing-buttons__services-list.has-normal-icon-size{font-size:16px}.jetpack-sharing-buttons__services-list.has-large-icon-size{font-size:24px}.jetpack-sharing-buttons__services-list.has-huge-icon-size{font-size:36px}@media print{.jetpack-sharing-buttons__services-list{display:none!important}}.editor-styles-wrapper .wp-block-jetpack-sharing-buttons{gap:0;padding-inline-start:0}ul.jetpack-sharing-buttons__services-list.has-background{padding:1.25em 2.375em}
</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='coral-dark-style-css' href='https://arielkoren.com/blog/wp-content/themes/coral-dark/style.css?ver=6.7.1' type='text/css' media='all' />
<style id='coral-dark-style-inline-css' type='text/css'>

		body, button, input, select, textarea {	font-size: 14px;}
		h1.site-title, h3.site-title {
			margin-top: 25px; 
			font-size: 36px; 
		}
		h1.site-title a,
		h1.site-title a:visited,
		h1.site-title a:hover,
		h1.site-title a:active,
		h1.site-title a:focus,
		h3.site-title a,
		h3.site-title a:visited,
		h3.site-title a:hover,
		h3.site-title a:active,
		h3.site-title a:focus {
			color: #ffffff !important;
		}
		
		h2.site-description, h4.site-description {
			margin-top: -5px;
			font-size: 14px;
			color: #999999;
		}
		.custom-logo {max-height: 100px;}
		@media screen and (min-width: 768px) {
			.main-navigation {margin-top: 15px;}
			#search1 {margin-top: 42px;}
			#social1 {margin-top: 47px;}
		}
	
</style>
<link rel='stylesheet' id='tablepress-default-css' href='https://arielkoren.com/blog/wp-content/tablepress-combined.min.css?ver=14' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-official-css' href='https://use.fontawesome.com/releases/v5.15.3/css/all.css' type='text/css' media='all' integrity="sha384-SZXxX4whJ79/gErwcOYf+zWLeJdY/qpuqC4cAa9rOGUstPomtqpuNWT9wdPEn2fk" crossorigin="anonymous" />
<link rel='stylesheet' id='font-awesome-official-v4shim-css' href='https://use.fontawesome.com/releases/v5.15.3/css/v4-shims.css' type='text/css' media='all' integrity="sha384-C2B+KlPW+WkR0Ld9loR1x3cXp7asA0iGVodhCoJ4hwrWm/d9qKS59BGisq+2Y0/D" crossorigin="anonymous" />
<style id='font-awesome-official-v4shim-inline-css' type='text/css'>
@font-face {
font-family: "FontAwesome";
font-display: block;
src: url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.eot"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.eot?#iefix") format("embedded-opentype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.woff2") format("woff2"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.woff") format("woff"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.ttf") format("truetype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-brands-400.svg#fontawesome") format("svg");
}

@font-face {
font-family: "FontAwesome";
font-display: block;
src: url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.eot"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.eot?#iefix") format("embedded-opentype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.woff2") format("woff2"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.woff") format("woff"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.ttf") format("truetype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-solid-900.svg#fontawesome") format("svg");
}

@font-face {
font-family: "FontAwesome";
font-display: block;
src: url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.eot"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.eot?#iefix") format("embedded-opentype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.woff2") format("woff2"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.woff") format("woff"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.ttf") format("truetype"),
		url("https://use.fontawesome.com/releases/v5.15.3/webfonts/fa-regular-400.svg#fontawesome") format("svg");
unicode-range: U+F004-F005,U+F007,U+F017,U+F022,U+F024,U+F02E,U+F03E,U+F044,U+F057-F059,U+F06E,U+F070,U+F075,U+F07B-F07C,U+F080,U+F086,U+F089,U+F094,U+F09D,U+F0A0,U+F0A4-F0A7,U+F0C5,U+F0C7-F0C8,U+F0E0,U+F0EB,U+F0F3,U+F0F8,U+F0FE,U+F111,U+F118-F11A,U+F11C,U+F133,U+F144,U+F146,U+F14A,U+F14D-F14E,U+F150-F152,U+F15B-F15C,U+F164-F165,U+F185-F186,U+F191-F192,U+F1AD,U+F1C1-F1C9,U+F1CD,U+F1D8,U+F1E3,U+F1EA,U+F1F6,U+F1F9,U+F20A,U+F247-F249,U+F24D,U+F254-F25B,U+F25D,U+F267,U+F271-F274,U+F279,U+F28B,U+F28D,U+F2B5-F2B6,U+F2B9,U+F2BB,U+F2BD,U+F2C1-F2C2,U+F2D0,U+F2D2,U+F2DC,U+F2ED,U+F328,U+F358-F35B,U+F3A5,U+F3D1,U+F410,U+F4AD;
}
</style>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-content/themes/coral-dark/js/jquery.nivo.slider.pack.js?ver=3.2" id="nivo-slider-js"></script>

<!-- Google Analytics snippet added by Site Kit -->
<script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=GT-55BNBFK" id="google_gtagjs-js" async></script>
<script type="text/javascript" id="google_gtagjs-js-after">
/* <![CDATA[ */
window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}
gtag('set', 'linker', {"domains":["arielkoren.com"]} );
gtag("js", new Date());
gtag("set", "developer_id.dZTNiMT", true);
gtag("config", "GT-55BNBFK");
/* ]]> */
</script>

<!-- End Google Analytics snippet added by Site Kit -->
<link rel="https://api.w.org/" href="https://arielkoren.com/blog/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://arielkoren.com/blog/wp-json/wp/v2/posts/39" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://arielkoren.com/blog/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://arielkoren.com/blog/2016/11/01/ursnif-malware-deep-technical-dive/" />
<link rel='shortlink' href='https://wp.me/p849zO-D' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://arielkoren.com/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Farielkoren.com%2Fblog%2F2016%2F11%2F01%2Fursnif-malware-deep-technical-dive%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://arielkoren.com/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Farielkoren.com%2Fblog%2F2016%2F11%2F01%2Fursnif-malware-deep-technical-dive%2F&#038;format=xml" />
<meta name="generator" content="Site Kit by Google 1.104.0" />	<style>img#wpstats{display:none}</style>
		<meta name="google-site-verification" content="1UBTLgulAKDGZjR45KMDgwHyWT0F52P1Cxsl1YpGf-4">
<!-- Google AdSense snippet added by Site Kit -->
<meta name="google-adsense-platform-account" content="ca-host-pub-2644536267352236">
<meta name="google-adsense-platform-domain" content="sitekit.withgoogle.com">
<!-- End Google AdSense snippet added by Site Kit -->
<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #0a0a0a; }
</style>
	
<!-- Google AdSense snippet added by Site Kit -->
<script type="text/javascript" async="async" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2272195239805835&amp;host=ca-host-pub-2644536267352236" crossorigin="anonymous"></script>

<!-- End Google AdSense snippet added by Site Kit -->
<link rel="icon" href="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/10/cropped-ICON.jpg?fit=32%2C32&#038;ssl=1" sizes="32x32" />
<link rel="icon" href="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/10/cropped-ICON.jpg?fit=192%2C192&#038;ssl=1" sizes="192x192" />
<link rel="apple-touch-icon" href="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/10/cropped-ICON.jpg?fit=180%2C180&#038;ssl=1" />
<meta name="msapplication-TileImage" content="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/10/cropped-ICON.jpg?fit=270%2C270&#038;ssl=1" />
</head>

<body class="post-template-default single single-post postid-39 single-format-standard custom-background wp-embed-responsive">
<div id="page" class="hfeed site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header grid-container" role="banner">
		<div class="site-branding egrid  grid-35 tablet-grid-35 mobile-grid-100">
												<h3 class="site-title"><a href="https://arielkoren.com/blog/" rel="home">Ariel Koren&#039;s blog</a></h3>
					<h4 class="site-description">Security &amp; Reverse engineering</h4>
					
							
		</div><!-- .site-branding -->
		<div id="headerright" class="grid-parent egrid  grid-65 tablet-grid-65 mobile-grid-100">
			
			<div id="social1" class="egrid  grid-70 tablet-grid-70 mobile-grid-100">
									<nav class="social-navigation" role="navigation" aria-label="Footer Social Links Menu">
						<div class="menu-social-container"><ul id="menu-social" class="social-links-menu"><li id="menu-item-339" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-339"><a href="https://discord.gg/zXxwtfmqUr"><span class="screen-reader-text">Discord</span><i class="fab fa-discord"></i></a></li>
<li id="menu-item-181" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-181"><a target="_blank" href="https://twitter.com/0xArielK"><span class="screen-reader-text">Twitter</span><i class="fa fa-twitter"></i></a></li>
<li id="menu-item-27" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-27"><a target="_blank" href="https://www.linkedin.com/in/ariel-koren-4588b098"><span class="screen-reader-text">Linkedin</span><i class="fa fa-linkedin"></i></a></li>
<li id="menu-item-205" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-205"><a target="_blank" href="https://github.com/arielkoren"><span class="screen-reader-text">github</span><i class="fa fa-github"></i></a></li>
</ul></div>					</nav><!-- .social-navigation -->
							</div>
			
			<div id="search1" class="search  grid-30 tablet-grid-30 mobile-grid-100">
				<div class="search-container">
<form role="search" method="get" class="search-form" action="https://arielkoren.com/blog/">
	<fieldset>
		<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:" />
		<input type="submit" class="search-submit" value="" />
	</fieldset>
</form>
</div>			</div>
		</div>

		<nav id="site-navigation" class="main-navigation egrid grid-100 tablet-grid-100 mobile-grid-100" role="navigation">
			<i id="menu-button" class="fa fa-bars collapsed"><span>  Menu</span></i>
			<div class="menu-pages-container"><ul id="main-menu" class="sm sm-clean collapsed"><li id="menu-item-25" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-25"><a href="http://arielkoren.com/blog/">Home</a></li>
<li id="menu-item-23" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23"><a href="https://arielkoren.com/blog/contact/" title="me">Contact Me</a></li>
</ul></div>		</nav><!-- #site-navigation -->
	</header><!-- #masthead -->

		
<!-- breadcrumbs from Yoast or NavXT plugins -->
		
	<div id="content" class="site-content grid-container">

	<div id="primary" class="content-area egrid  grid-70 tablet-grid-70 mobile-grid-100 push-30 tablet-push-30">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-39" class="post-39 post type-post status-publish format-standard has-post-thumbnail hentry category-malware tag-dga tag-malware tag-reverse-engineering tag-ursnif">
	<header class="entry-header">
		<h1 class="entry-title">Ursnif Malware: Deep Technical Dive</h1>
		<div class="entry-meta">
			<span class="posted-on"><a href="https://arielkoren.com/blog/2016/11/01/ursnif-malware-deep-technical-dive/" rel="bookmark"><time class="entry-date published" datetime="2016-11-01T08:55:50+00:00">November 1, 2016</time><time class="updated" datetime="2020-12-26T22:00:09+00:00">December 26, 2020</time></a></span><span class="byline"> <span class="author vcard"><a class="url fn n" href="https://arielkoren.com/blog/author/ak/">AK</a></span></span>		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content">
		
		
	<div class="post-thumbnail">
		<img width="980" height="345" src="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/0_URSNIF-e1609020096626.jpg?fit=980%2C345&amp;ssl=1" class="attachment-large size-large wp-post-image" alt="" decoding="async" fetchpriority="high" />	</div><!-- .post-thumbnail -->

	<p>In this blog I explain some of the core methods an attack tool named Ursnif uses, as well as mention some, probably unintentional, pieces of code that were left behind in the production version of the malware.</p>
<p><span id="more-39"></span></p>
<p>Ursnif is a data stealer and a downloader with a lot of abilities to steal data from installed browsers and other applications (such as Microsoft Outlook).</p>
<p>In addition to stealing data, Ursnif also has the ability to download additional malicious components from the attacker’s Command &amp; Control (C&amp;C) servers and load them dynamically into memory. In this version of Ursnif I have also encountered an internal peer-to-peer communication which could possibly add the ability for the sample to communicate with other Ursnif peers over the same network. We will discuss the peer-to-peer part in a future blog post.</p>
<h2>It All Begins With An Executable</h2>
<p>When the Ursnif executable is first loaded, it will unpack the real payload. The real payload is packed by the attackers, because it helps keeping it undetected by security solutions which are based on a file signature.</p>
<p>After the real payload is unpacked, it will run in a hollowed process, and even at that stage of unpacking, the&nbsp;<a href="https://en.wikipedia.org/wiki/Data_segment">.BSS section</a> is still obfuscated and will be de-xored on runtime before the malware will continue with the execution.</p>
<figure id="attachment_40" aria-describedby="caption-attachment-40" style="width: 840px" class="wp-caption aligncenter"><a href="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg"><img decoding="async" class="wp-image-40 size-large" src="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?resize=840%2C167" alt="Before and after decryption" width="840" height="167" srcset="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?resize=1024%2C204&amp;ssl=1 1024w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?resize=300%2C60&amp;ssl=1 300w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?resize=768%2C153&amp;ssl=1 768w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?resize=1200%2C239&amp;ssl=1 1200w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/bssdecryption.jpg?w=1722&amp;ssl=1 1722w" sizes="(max-width: 840px) 100vw, 840px" data-recalc-dims="1" /></a><figcaption id="caption-attachment-40" class="wp-caption-text">The bss section before and after dexoring it</figcaption></figure>
<p>Afterward, there is a simple check the malware authors left behind. If the file C:\321.txt exists, the checks for a virtualized environment are ignored. This was most probably developed in order to allow the attackers to test their tool on their own virtualized machines. Even though it is quite funny that the attackers left this piece of code in a production compilation, it might show how careless they are. Basically, if anyone else would like to test Ursnif on a virtual machine, they can just create a file with that name at that location and the malware will work properly with no need to change the virtual machine&#8217;s configurations.<br />
Next, the malware will make sure that all of the users on the machine are infected, by enumerating the registry root key HKU and for each user key, it will put an appropriate startup value, as well as the payload on each AppData folder of each user. Registry Keys used:</p>
<ul>
<li>HKU\&lt;SID&gt;\Software\Microsoft\Windows\CurrentVersion\Run</li>
<li>HKU\&lt;SID&gt;\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\<strong>AppData</strong>
<ul>
<li>(Value equals the folder to be used for the malware, for example:<br />
C:\Users\Administrator\Appdata\Roaming\&#8221;)</li>
</ul>
</li>
</ul>
<p>After this procedure, we move on to the injection method.</p>
<h2>And It Continues With Another Executable To Be Injected</h2>
<p>In the second part, the malware will look for a legitimate process to run in its context. Running in a different process context allows the malware to bypass firewall rules which let some processes through without alerting or blocking them.</p>
<p>Internally, the malware calculates a unique checksum for each process name it finds, in order to obfuscate the processes into which it will try to inject itself. Instead of injecting to explorer.exe for example, a checksum will be calculated, resulting in something like 0x17F9B5AA. Then, it will check if that value matches a value from an internal list of checksums, and only if it exists in that list, it will begin the injection method on that process.</p>
<p>Let&#8217;s examine a <strong>pseudo code</strong> (as simple as possible) of how the first part of the injection looks:</p>
<pre class="lang:c decode:true ">/* Obtain the process pid to inject to */
dwPID = GetInjectProcess()

hProcess = OpenProcess(dwPID, ...)
pAddress = GetProcAddress("ntdll.dll", "RtlExitUserThread")

/* Create remote thread in suspended mode */
hThread = CreateRemoteThread(hProcess, 			/* Remote process handle */
                            CREATE_SUSPENDED,	/* creation flags */
                            pAddress,			/* thread function address */
                            ...)

/* Read remote procedure first four bytes */
dwBackupData = ZwReadVirtualMemory(hProcess,	/* Remote process handle */
								pAddress,		/* Address to read */
                                4,				/* number of bytes to read */
                                ...)

/* Change address protection to `writable` */
VirtualProtectEx(hProcess,			/* Remote process handle */
				READ_WRITE_EXECUTE,	/* New protection flags */
				pAddress,			/* Address to change protection on */
				4,					/* Size of address */
				...)


ZwWriteVirtualMemory(hProcess,	/* Remote process handle */
					pAddress,	/* Address to overwrite */
					0xCCCCFEEB,	/* Data to write */
					4,			/* Size of data */
					...)</pre>
<ul>
<li>Open a handle to the desired process.</li>
<li>Get the address of <code>ntdll!RtlExitUserThread</code> function.</li>
<li>Create a remote suspended thread with the appropriate function.</li>
<li>Obtain the first four bytes of the function as a backup (because in the upcoming steps, they will be overwritten).</li>
<li>Before we overwrite the bytes, we must change the protection flags of the memory so it will be writable.</li>
<li>Write four bytes <code>(DWORD)(0xCCCCFEEB)</code>. This is the interesting part, changing the original function prologue this way, will result in an infinite loop.</li>
</ul>
<p>Let&#8217;s examine the function before and after the changes:<br />

<table id="tablepress-1" class="tablepress tablepress-id-1">
<thead>
<tr class="row-1 odd">
	<th class="column-1"><strong>Before</strong></th><th class="column-2">After</th>
</tr>
</thead>
<tbody class="row-hover">
<tr class="row-2 even">
	<td class="column-1"><code>ntdll!RtlExitUserThread:<br />
77dc1000 <strong>8bff</strong>            mov     edi,edi<br />
77dc1002 <strong>55</strong>              push    ebp<br />
77dc1003 <strong>8b</strong>ec            mov     ebp,esp<br />
77dc1005 83e4f8          and     esp,0FFFFFFF8h<br />
77dc1008 81ecbc000000    sub     esp,0BCh</code></td><td class="column-2"><code>ntdll!RtlExitUserThread:<br />
77dc1000 <strong>ebfe</strong>           jmp     ntdll!RtlExitUserThread (77dc1000)<br />
77dc1002 <strong>cc</strong>              int     3<br />
77dc1003 <strong>cc</strong>              int     3<br />
77dc1004 ec              in      al,dx<br />
77dc1005 83e4f8          and     esp,0FFFFFFF8h<br />
77dc1008 81ecbc000000    sub     esp,0BCh</code></td>
</tr>
</tbody>
</table>
<!-- #tablepress-1 from cache --></p>
<p>After the change, the new values assigned to the function prologue are translated to <code>JMP &lt;Short&gt;</code>, which is a two byte opcode. The first byte (<code>0xEB</code>) is what translated the processor to recognize it as a <code>JMP</code> opcode, and it will also expect the second byte to be the value of where to jump to (Relatively from the EIP at the end of the opcode). The second byte we have in this scenario is <code>0xFE</code>, which translates to (-2). Jumping relatively from the end of the opcode (<code>address 0x77dc1002</code>) -2 bytes, will make the EIP get back to address <code>0x77dc1000</code>, which is the same opcode again. This will result an infinite loop of one opcode. as you can see WinDBG translates it beautifully:<br />
<code>77dc1000 ebfe &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jmp &nbsp; &nbsp; ntdll!RtlExitUserThread (77dc1000)</code></p>
<p>After this change, the thread is resumed until its EIP of the newly created thread reach the <code>ntdll!RtlExitUserThread</code> address, then the thread is set to suspended mode again. The reason all this procedure is happening is because when a thread is created, it doesn’t immediately start at the function given, it requires some initialization functions to be called first, so the original code is waiting for the initialization to complete and then it have a post initialized thread which it can take control of its EIP without worrying.</p>
<p>Thereafter the thread is suspended again, the function original 4 bytes are restored. The new PE itself is injected with <code>NtCreateSection</code> and <code>NtMapViewOfSection</code>, for mapping the new PE to the malware&#8217;s memory ending with <code>SetThreadContext</code> which with that we are able to change the registers value, specifically EIP &#8211; to the new created entry point of the remote process following <code>ResumeThread</code>.</p>
<p>As we&#8217;ve seen before, attackers are building techniques into their tools in order to evade detection by security solutions. One of the techniques exploits sandbox weaknesses by using different sleeping mechanisms. Sandboxing solutions usually run malware samples only for about 2-3 minutes before they move on to the next sample they have in queue. The reason is simply because those kind of solutions are required to keep up with analyzing hundreds of thousands of samples every day. Therefore, for a sandbox time is a very precious resource. Basically, this means that if a malware can stay dormant for this period of time, the sandbox will not recognize its behavior as malicious and will move to the next sample in queue.</p>
<p>Ursnif has recently evolved and changed the sleeping mechanism, trying to evade detection through a unique sleeping API. Earlier versions used <code>Sleep</code>\<code>WaitForSingleObject</code>\<code>WaitForMultipleObjects</code> or similar APIs. Nowadays, a different method coming in hand, Relative sleeping using windows timers. Here is a code example of how to use the Timers API:</p>
<pre class="lang:c decode:true " title="Windows Timers sleep example">#include &lt;windows.h&gt;
#include &lt;tchar.h&gt;
/* Definitions */
#define SLEEP_TIME (5) /* In seconds */
/* Macros */
#define NANOSECONDS(nanos) \
(((signed __int64)(nanos)) / 100L)
#define MICROSECONDS(micros) \
(((signed __int64)(micros)) * NANOSECONDS(1000L))
#define MILLISECONDS(milli) \
(((signed __int64)(milli)) * MICROSECONDS(1000L))
#define SECONDS(seconds) \
(((signed __int64)(seconds)) * MILLISECONDS(1000L)) 
/* Enumerations */
typedef enum _E_CODE
{
        E_FAILURE = -1,
        E_SUCCESS = 0,
        E_TIMER_CREATION,
        E_SET_TIMER,
        E_WAIT_EVENT,
} E_CODE;
E_CODE SleepingMechanism(DWORD dwSleepTime)
{
        /* Initializations */
        HANDLE hTimer = NULL;
        E_CODE tRetVal = E_FAILURE;
        FILETIME ftSystemTime = { 0 };
        LARGE_INTEGER liSystemTime = { 0 };
        DWORD dwWaitResult = 0;
        /* Create unnamed timer */
        hTimer = CreateWaitableTimer(NULL, FALSE, NULL);
        if (NULL == hTimer)
        {
                _tprintf(TEXT("CreateWaitableTimer failure: [%d]\n"), GetLastError());
                tRetVal = E_TIMER_CREATION;
                goto lblCleanUp;
        }
        /* Get system time */
        GetSystemTimeAsFileTime(&amp;ftSystemTime);
        /* Add relative time from current time to sleep */
        liSystemTime.HighPart = ftSystemTime.dwHighDateTime;
        liSystemTime.LowPart = ftSystemTime.dwLowDateTime;
        liSystemTime.QuadPart += SECONDS(dwSleepTime);
        /* Set timer with an absolute time to sleep */
        if (!SetWaitableTimer(hTimer, &amp;liSystemTime, 0, NULL, NULL, FALSE))
        {
                _tprintf(TEXT("Failed creating waitable timer: [%d]"), GetLastError());
                tRetVal = E_SET_TIMER;
                goto lblCleanUp;
        }
        /* Waiting for the timer event*/
        _tprintf(TEXT("Sleeping for [%d] seconds\n"), dwSleepTime);
        dwWaitResult = WaitForSingleObject(hTimer, INFINITE);
        if (WAIT_OBJECT_0 != dwWaitResult)
        {
                _tprintf(TEXT("WaitForSingleObject failed: [%d]"), dwWaitResult);
                tRetVal = E_WAIT_EVENT;
        }
        /* Success */
        tRetVal = E_SUCCSES;
lblCleanUp:
        if (NULL != hTimer)
        {
                CloseHandle(hTimer);
                hTimer = NULL;
        }
return tRetVal;
}
INT _tmain(DWORD dwArgc, LPTSTR *lpszArgv)
{
        E_CODE tRetVal = E_FAILURE;

        tRetVal = SleepingMechanism(SLEEP_TIME);
        if (E_SUCCSES != tRetVal)
                _tprintf(TEXT("Failure: [%d]"), (DWORD)tRetVal);
        else
                _tprintf(TEXT("Success\n"));

        return 0;
}
</pre>
<h2>The Additional Evasive Techniques and the DGA Flaw<u></u><strong><u><br />
</u></strong></h2>
<p>Once the attacker tool is able to evade the sandbox, it will try to evade network security solutions which are based on communication pattern signatures. Let&#8217;s examine two such evasive techniques:</p>
<h6>Obfuscating the outbound traffic</h6>
<p>The first data sent from the infected machine would start with the following string format:<br />
<code>soft=1&amp;version=%u&amp;user=%08x%08x%08x%08x&amp;server=%u&amp;id=%u&amp;crc=%x</code><br />
After adding the values which represent the machine (will not be discussed in this blog post) to the format string, the malware will xor the original value and move on to base64 encoding. Thereafter removing the &#8220;=&#8221; padding.<br />
<code>W+WIpnoUOvyD3ExoGOYmmDu0bmT8a0IQc2p7qTZymZCHt8eu27PEunoWst7LOJNxEVYBinB9iwNBQ6dP+msKM1eHuJg8mb5vu2siAOn72yyGQxwIDyVrNC1VsGTgKilQ5n64xxRm4NMqJxQP8Mw<br />
</code><br />
Then adding &#8220;/&#8221; at random offsets of the string, following with changing every unique letter (which doesn’t match [a-zA-Z0-9]) to its hexadecimal format starting with &#8220;_&#8221;. For example the letter &#8220;+&#8221; hex representation is 2B, and the letter &#8220;/&#8221; hex representation is 2F, so the output will end up looking like:<br />
<code>WWIpnoUOvyD3ExoGOYmmDu0bmT8a0IQc2p7qTZymZCHt8eu27PEunoWst7LOJNxEVYBinB9iwN<span style="color: #ff0000;"><strong>_2FB</strong></span>Q6dP<span style="color: #ff0000;"><strong>_2B</strong></span>msKM1eHuJg<span style="color: #ff0000;"><strong>_2F</strong></span>8mb5vu2siAOn72yyGQxwIDyVrNC1VsGTgKilQ5n64xxRm4NMqJxQP8Mw</code><br />
Finally, there is a second call to the function, adding the &#8220;/&#8221; slash character at random offsets and then the string is complete.<br />
<code>W_2BWIpn_2FoUOvyD3ExoGO<span style="color: #ff0000;"><strong>/</strong></span>YmmDu0bmT8<span style="color: #ff0000;"><strong>/</strong></span>a0IQc2p7qTZymZCHt<span style="color: #ff0000;"><strong>/</strong></span>8eu27PEunoWs<span style="color: #ff0000;"><strong>/</strong></span>t7LOJNxEVYB<span style="color: #ff0000;"><strong>/</strong></span>inB9iwN_2FBQ6d<span style="color: #ff0000;"><strong>/</strong></span>P_2BmsKM1eHuJg_2F8mb5<span style="color: #ff0000;"><strong>/</strong></span>vu2siAOn72yyGQxw<span style="color: #ff0000;"><strong>/</strong></span>IDyVrNC1VsGTgKilQ5n64xxRm4NMqJxQP<span style="color: #ff0000;"><strong>/</strong></span>8Mw</code></p>
<p>This is sent to the C&amp;C server with the following format:<br />
&#8220;<code>&lt;Domain&gt;/images/&lt;CraftedBase64Url&gt;.gif</code>&#8221;<br />
where the <code>&lt;Domain&gt;</code> will be chosen by the DGA algorithm, and the <code>&lt;CraftedBase64Url&gt;</code> is what was&nbsp;just created.</p>
<p><code><strong><span style="color: #ff0000;">http://thiscrevmscllevelfak[.]club</span></strong>/images/W_2BWIpn_2FoUOvyD3ExoGO/YmmDu0bmT8/a0IQc2p7qTZymZCHt/8eu27PEunoWs/t7LOJNxEVYB/inB9iwN_2FBQ6d/P_2BmsKM1eHuJg_2F8mb5vu2siAOn72yyGQxw/IDyVrNC1VsGTgKi/lQ5n64xxRm4NMqJxQP/8Mw<span style="color: #ff0000;"><strong>.gif</strong></span></code></p>
<h6>Domain Generation Algorithm (DGA)<u><br />
</u></h6>
<p>When I first reverse engineered the DGA and tried to recreate it using Python, for some reason my code didn’t work as expected and I got different results compared to the actual domains used by the attackers. When I reversed everything slowly and made sure my code does exactly what it is supposed to – I found out that they have some logical flaw in the code. Whether this was intentional or not, I will let you be the judge. But I am pretty sure it was unintentional. Let&#8217;s see what exactly is going on in there step by step:</p>
<ol>
<li style="list-style-type: none;">
<ol>
<li>Download a predefined wordlist from an online text file.<br />
In python that would be as easy as using <code>urllib2.urlopen</code>.</li>
<li>Obtain all the words that are at least 3 letters long. In python that would be:<code>re.findall("[a-zA-Z]{3,}", data)</code></li>
<li>Add a null termination (<code>0x00</code>) after every word that matched, in the original buffer.</li>
<li>Override the original data with the matching words, after every word add space bar.<br />
<span style="color: #999999;">(<strong>Author comments</strong>: This is necessarily shorter than the original buffer so it should work, however in general this is very bad code practice.)</span></li>
<li>Create the domain using the strings in the buffer list of Step Three.</li>
</ol>
</li>
</ol>
<div class="mceTemp"></div>
<figure id="attachment_43" aria-describedby="caption-attachment-43" style="width: 846px" class="wp-caption alignnone"><a href="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/stepthree.jpg"><img decoding="async" class="wp-image-43 size-full" src="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/stepthree.jpg?resize=846%2C715" alt="" width="846" height="715" srcset="https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/stepthree.jpg?w=846&amp;ssl=1 846w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/stepthree.jpg?resize=300%2C254&amp;ssl=1 300w, https://i0.wp.com/arielkoren.com/blog/wp-content/uploads/2016/11/stepthree.jpg?resize=768%2C649&amp;ssl=1 768w" sizes="(max-width: 846px) 100vw, 846px" data-recalc-dims="1" /></a><figcaption id="caption-attachment-43" class="wp-caption-text">The &#8216;bug&#8217; in action</figcaption></figure>
<p>Now, the problem exists at Step Four, let&#8217;s take a look at the assembly:</p>
<p>&nbsp;</p>
<p>To understand the problem better, let&#8217;s have a dummy buffer to demonstrate the issue.</p>
<p><code>Match-Another se cu DEADBEEF le rt</code></p>
<p>Applying the regex from Step Two would result in the following word list:</p>
<p><code>["Match", "Another", "DEADBEEF"]</code></p>
<p>Adding the null termination on the original string will make it look like:</p>
<p><code>Match\x00Another\x00se cu DEADBEEF\x00le rt</code></p>
<p>After that, we are going to copy each of those strings, override the original buffer with them, and add a space bar right after. This should result the matching strings being one after another ordered in that buffer. However, the first copy is the reason for the problem. We are first of all copying the original word over itself using &#8216;lstrcpy&#8217;, resulting in the same buffer.</p>
<p><code>Match\x00Another\x00se cu DEADBEEF\x00le rt</code></p>
<p>But after that, we are using &#8216;lstrcat&#8217; to add a space after the word. The MSDN documentation of `lstrcat` states:</p>
<blockquote><p><strong>“lpString1 must be large enough to add lpString2 and the closing &#8216;\0&#8217;</strong>,”</p></blockquote>
<p>which means that there are going to be two more bytes added! One of them is the space, and the other one is the null termination coming right after, resulting in the following problem:</p>
<p><code>Match \x00nother\x00se cu DEADBEEF\x00le rt</code></p>
<p>As you can see, it overwrote some of the next word, which will eventually make it “lose” one of the words in the list making the whole wordlist short by one essentially affecting all of the DGA.</p>
<p><span style="color: #999999;">(<strong>Author Comments</strong>: I believe the malware authors have no idea they have such a bug in their code because they are probably using the exact same piece of code to know which domains they should buy.)</span></p>
<p>After I successfully reversed the DGA algorithm and could recreate it myself, we sinkholed one of the generated domains for the next domains cycle, and managed to find pretty interesting statistics about this family over a period of 5 days:</p>

<table id="tablepress-2" class="tablepress tablepress-id-2">
<thead>
<tr class="row-1 odd">
	<th colspan="2" class="column-1">DGA Characteristics</th>
</tr>
</thead>
<tbody class="row-hover">
<tr class="row-2 even">
	<td class="column-1">Type</td><td class="column-2">Dictionary based</td>
</tr>
<tr class="row-3 odd">
	<td class="column-1">Seed</td><td class="column-2">Current date</td>
</tr>
<tr class="row-4 even">
	<td class="column-1">Change frequency	</td><td class="column-2">5 days period</td>
</tr>
<tr class="row-5 odd">
	<td class="column-1">Domains Per Cycle</td><td class="column-2">15</td>
</tr>
<tr class="row-6 even">
	<td class="column-1">Top level domains	</td><td class="column-2">.ru, .xyz, .club</td>
</tr>
<tr class="row-7 odd">
	<td class="column-1">Total infected machines	</td><td class="column-2">6,893</td>
</tr>
</tbody>
</table>
<!-- #tablepress-2 from cache -->
<p>&nbsp;</p>
<p>On the analyzed sample, the DGA&#8217;s dictionary (word list) is generated from this url:<br />
<a href="http://opensource.apple.com/source/Security/Security-29/SecureTransport/LICENSE.txt">http://opensource.apple.com/source/Security/Security-29/SecureTransport/LICENSE.txt</a></p>
<p>The interesting part of this DGA is the fact it can change the file from which the wordlist is generated, thus making it very easy to create different versions of the DGA for different purposes.</p>
<p>An example of actual domains generated from the dictionary:</p>
<ul>
<li>thiscrevmscllevelfak.club</li>
<li>levelignorethenind.ru</li>
<li>mtabaddresslocked.xyz</li>
<li>consseriflistyleleft.club</li>
<li>aresymbolparamspan.ru</li>
<li>respondslemsonmsonum.club</li>
<li>senddatalistenpython.xyz</li>
<li>numfalseandyspan.ru</li>
<li>maxsemihiddenmsosymbol.club</li>
<li>cllockedlevelnbsple.club</li>
<li>nbspserliststthelist.xyz</li>
<li>symbolcontacttype.ru</li>
<li>intoaddedprio.ru</li>
<li>stylesendnblisprestval.xyz</li>
<li>indentlspthatmcan.ru</li>
</ul>
<p>Analyzed Samples:</p>
<ul>
<li>9b38f10fd425b37115c81ad07598d930</li>
<li>b60c97d22f0ae301e916d61f79162b78</li>
<li>f50bd1585f601d41244c7e525b8bd96a</li>
</ul>
			</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="update">Updated: <a href="https://arielkoren.com/blog/2016/11/01/ursnif-malware-deep-technical-dive/" rel="bookmark"><time class="published updated" datetime="2020-12-26T22:00:09+00:00">December 26, 2020</time></a></span><br><span class="cat-links">Categories: <a href="https://arielkoren.com/blog/category/malware/" rel="category tag">Malware</a></span><span class="tags-links">Tags: <a href="https://arielkoren.com/blog/tag/dga/" rel="tag">DGA</a>, <a href="https://arielkoren.com/blog/tag/malware/" rel="tag">Malware</a>, <a href="https://arielkoren.com/blog/tag/reverse-engineering/" rel="tag">Reverse Engineering</a>, <a href="https://arielkoren.com/blog/tag/ursnif/" rel="tag">Ursnif</a></span>	</footer><!-- .entry-footer -->
</article><!-- #post-## -->
						
	<nav class="navigation post-navigation" aria-label="Post navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-next"><a href="https://arielkoren.com/blog/2016/11/02/nymaim-deep-technical-dive-adventures-in-evasive-malware/" rel="next">Next post</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2016/11/01/ursnif-malware-deep-technical-dive/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://arielkoren.com/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><p class="comment-form-comment"><label for="comment">Comment <span class="required">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" autocomplete="name" required /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" autocomplete="email" required /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" autocomplete="url" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='39' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->


<div id="secondary" class="widget-area egrid  grid-30 tablet-grid-30 mobile-grid-100 pull-70 tablet-pull-70" role="complementary">
<aside id="search-2" class="widget widget_search"><div class="search-container">
<form role="search" method="get" class="search-form" action="https://arielkoren.com/blog/">
	<fieldset>
		<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:" />
		<input type="submit" class="search-submit" value="" />
	</fieldset>
</form>
</div></aside>
		<aside id="recent-posts-2" class="widget widget_recent_entries">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://arielkoren.com/blog/2020/12/24/forging-malicious-doc/">Protected: Forging malicious DOC, undetected by all VirusTotal static engines</a>
											<span class="post-date">December 24, 2020</span>
									</li>
											<li>
					<a href="https://arielkoren.com/blog/2017/11/14/fusion-level-06-solution/">Fusion &#8211; Level 06 solution</a>
											<span class="post-date">November 14, 2017</span>
									</li>
											<li>
					<a href="https://arielkoren.com/blog/2017/06/14/fusion-level05-solution/">Fusion &#8211; Level 05 solution</a>
											<span class="post-date">June 14, 2017</span>
									</li>
											<li>
					<a href="https://arielkoren.com/blog/2016/11/02/nymaim-deep-technical-dive-adventures-in-evasive-malware/">Nymaim Malware: Deep Technical Dive &#8211; Adventures in Evasive Malware</a>
											<span class="post-date">November 2, 2016</span>
									</li>
											<li>
					<a href="https://arielkoren.com/blog/2016/11/01/ursnif-malware-deep-technical-dive/" aria-current="page">Ursnif Malware: Deep Technical Dive</a>
											<span class="post-date">November 1, 2016</span>
									</li>
					</ul>

		</aside><aside id="custom_html-3" class="widget_text widget widget_custom_html"><h4 class="widget-title">Twitter</h4><div class="textwidget custom-html-widget"><a class="twitter-timeline" data-width="250" data-dnt="true" data-theme="dark" href="https://twitter.com/0xArielK?ref_src=twsrc%5Etfw" data-tweet-limit="3">Tweets by 0xArielK</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div></aside><aside id="block-3" class="widget widget_block"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2272195239805835" 
crossorigin="anonymous"></script></aside><aside id="block-4" class="widget widget_block"></aside></div><!-- #secondary -->

	</div><!-- #content -->

	<footer id="colophon" class="site-footer grid-container" role="contentinfo">
		<div class="grid-100 tablet-grid-100 mobile-grid-100"><div class="sepline2"></div></div>
		<div class="egrid  grid-70 tablet-grid-70 mobile-grid-100" id="footer-widget-copyright">
					</div>
		<div class=" grid-30 tablet-grid-30 mobile-grid-100">
			<a id="designer" class="alignright" href="https://www.coralthemes.com/product/coral-dark-wordpress-theme/">Free dark wordpress theme</a>
		</div>
		
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type="text/javascript" src="https://arielkoren.com/blog/wp-content/themes/coral-dark/js/jquery.smartmenus.min.js?ver=0.9.7" id="smartmenus-js"></script>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-content/themes/coral-dark/js/skip-link-focus-fix.js?ver=20130115" id="coral-dark-skip-link-focus-fix-js"></script>
<script type="text/javascript" id="coral-dark-script-js-extra">
/* <![CDATA[ */
var nivoSliderParams = {"effect":"fade","animspeed":"500","pausetime":"5000"};
/* ]]> */
</script>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-content/themes/coral-dark/js/functions.js?ver=20160427" id="coral-dark-script-js"></script>
<script type="text/javascript" src="https://arielkoren.com/blog/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://stats.wp.com/e-202451.js" id="jetpack-stats-js" data-wp-strategy="defer"></script>
<script type="text/javascript" id="jetpack-stats-js-after">
/* <![CDATA[ */
_stq = window._stq || [];
_stq.push([ "view", JSON.parse("{\"v\":\"ext\",\"blog\":\"119200816\",\"post\":\"39\",\"tz\":\"0\",\"srv\":\"arielkoren.com\",\"j\":\"1:13.7.1\"}") ]);
_stq.push([ "clickTrackerInit", "119200816", "39" ]);
/* ]]> */
</script>

</body>
</html>
