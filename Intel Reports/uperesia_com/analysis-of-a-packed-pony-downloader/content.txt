Error: INSERT INTO `STATS_uperesia` ( `ID` , `ip` , `useragent` , `hostname` , `country`, `referer`, `time`, `pagename`, `visitorID`) VALUES ('', '***.***.***.***', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36', '200-149-184-120.user3p.veloxzone.com.br' , 'BR', 'none', '1734490450', 'pony', '4mTSu4StITG6Sf8j43rRpQ7SigOOBpy2iAvHIPbhCFT32IupGCi7vQXKtWvhPPqHeXEIsJiBVnyDfcLRrXOl7UU6MgnbmeQZii3ntPw8ZLIZCXEMslJOOgC9')<br><strong>Error:</strong>INSERT command denied to user 'uperesiadsdb'@'10.23.20.89' for table 'STATS_uperesia'<html>
    <head>
        <title>analysis of a packed pony downloader</title>
        <meta charset="utf-8">
        <meta name="description" property="og:description" content="Malware reverse engineering tutorial which explains how self-defending malware making use of packers can be dissected.">
        <meta name="keywords" content="malware, reverse engineering, packers, pony"/>
        <meta name="author" content="Felix Weyne" />
        <meta name="title" property="og:title" content="analysis of a packed pony downloader" />
        <meta property="og:image" content="https://www.uperesia.com/img/previews/pony_prvw.png" />
        <link rel="shortcut icon" href="favicon.ico" />
        <link rel="stylesheet" href="lightbox/css/lightbox.css" type="text/css" media="screen">
        <link rel="stylesheet" href="css/style.css" type="text/css" media="screen">
         
		<link href="css/video-js.css" rel="stylesheet">
       
        
        <style type="text/css">
            p.uitlijnen {
                text-align: justify;
            }
        </style>
    </head>
    <body>
        <!-- WRAPPER -->
        <div id="wrapper">
            <!-- SIDEBAR -->
            <div id="sidebar">
                <!-- logo -->
                <a href="index.php"><img src="img/template/logo.png" alt="" id="logo"></a>
                <!-- Navigation -->
                <ul id="nav" class="sf-menu sf-vertical">
                                        <li><a href="/">HOME</a></li><li><a href="https://sourceforge.net/projects/khoorio/" target="_blank">KHOORIO</a></li><li><a href="https://github.com/felixweyne/imaginaryC2/" target="_blank">IMAGINARY C2</a></li><li><a href="https://github.com/felixweyne/ProcessSpawnControl" target="_blank">PROCESS SPAWN CONTROL</a></li><li><a href="contact">CONTACT</a></li></ul><div style='padding-left: 22px;'><h6>Blogs:</h6></div><ul id='nav' class='sf-menu sf-vertical'><li><a href="hancitor-packer-demystified">HANCITOR'S PACKER</a></li><li><a href="how-trickbot-tricks-its-victims">TRICKBOT'S WEBINJECTS</a></li><li><a href="malicious-dropper-as-an-attack-vector">ATTACK VECTORS</a></li><li><a href="booby-trapped-shortcut">BOOBY TRAPPED SHORTCUT <img width="12" src="img/mini-icon/hot.png"></a></li><li><a href="inside-the-necurs-botnet">INSIDE THE NECURS BOTNET</a></li><li><a href="buffer-overflow-explained">BUFFER OVERFLOW 101</a></li><li><a href="analyzing-rig-exploit-kit">RIG EK ANALYSIS</a></li><li><a href="threat-hunting">THREAT HUNTING</a> </li><li><a href="analyzing-malicious-office-documents">MALDOC ANALYSIS <img width="12" src="img/mini-icon/hot.png"></a></a></li><li class="current-menu-item"><a href="analysis-of-a-packed-pony-downloader">PACKED PONY ANALYSIS</a></li><li><a href="deobfuscating-a-locky-dropper">LOCKY DROPPER ANALYSIS</a></li><li><a href="angler-wordpress-backdoor">ANGLER EK ANALYSIS (2)</a></li><li><a href="a-closer-look-to-fileless-click-fraud-malware-poweliks">POWELIKS ANALYSIS</a></li><li><a href="reverse-engineering-tinder">REV. ENGINEERING TINDER <img width="12" src="img/mini-icon/hot.png"></a></a></li><li><a href="jrat-inside-a-honeypot">JRAT ANALYSIS</a></li><li><a href="dridex-a-modern-bank-robber">DRIDEX ANALYSIS</a></li><li><a href="angler-top-three-facts">ANGLER EK ANALYSIS (1)</a></li><li><a href="pgp-explained">PGP EXPLAINED</a></li>                </ul>
                <!-- Navigation -->
            </div>
            <!-- ENDS SIDEBAR -->
            <!-- MAIN -->
            <div id="main">
                
                <!-- CONTENT -->
                <div id="content">
                    <!-- PAGE CONTENT -->
                    <div id="page-content">
						<br>
						<p>
						<img width="600" src="img/articles/pony/pony_header.png">	
						<img width="14" src="img/mini-icon/time.png"> Posted by Felix Weyne, August 2016. 
						<br><img width="14" src="img/mini-icon/world.png"> Author contact: <a target='_blank' href='referer.php?id=twitter'>Twitter</a> | <a target='_blank' href='referer.php?id=linkedin'>LinkedIn 						<br><img width="14" src="img/mini-icon/tag.png"> Tags: <a href ="#">pony</a>, <a href ="#">dropper</a>, <a href ="#">password stealer</a>, <a href ="#">reverse engineering</a>, <a href ="#">malware</a>, <a href ="#">packers</a>, <a href ="#">process hollowing</a>, <a href ="#">.NET reflection</a>
						</p>
						
						<p class="uitlijnen">
						This Spring I attended the <a target="_blank" href='https://www.sans.org/course/reverse-engineering-malware-malware-analysis-tools-techniques'>SANS reverse-engineering malware course</a>. I strongly recommend this course to anyone who is active in IT security. The course not only teaches you how to dissect malware, it also gives you a good insight on how malware is spread and a better understanding on the techniques malware authors use to bypass defense systems. 
						Whether you work in a security operations center or whether you are responsible for designing and implementing an IT security strategy, sooner or later you will be confronted by the challenges that advanced malware pose. In this blog, I will discuss a few of those challenges by analyzing a real malware sample. During the analysis, I will discuss
						three challenges that the malware sample poses: the capability (and threat) of the malware, the tricks that the malware uses to hide itself and the defence mechanism embedded in the malware to slow down/sabbotage analysis.

                        </p>
						
						<p class="uitlijnen">
						The sample I'll be using in this blog belongs to the <strong>Pony password stealer/downloader malware family</strong>. The main function of the malware is to drop (download) other malware and to steal passwords (e.g. mail/FTP credentials, stored passwords in browser, ...) and virtual currencies (e.g. bitcoin). The sample is double packed in order to thwart antivirus and other defense systems. 
						<strong>A packed malware sample can be compared to matryoshka dolls: the smallest doll (the actual malware) is nested in other dolls (the packers) and if you only inspect the outer layer (the packed sample), you will not see the smallest, innermost doll (in our case: the Pony malware)</strong>. Only when you open the dolls (dissect the packed malware), you realize that nothing is what it seems.
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_packed.png" data-lightbox="ponyImages" data-title="Image 1: Graphical representation of packed Pony malware">
						<img src="img/articles/pony/pony_packed.png"  width="600" style="border:3px solid black"></a><br> Image 1: Graphical representation of packed Pony malware
						</p>
						
						<p class="uitlijnen">
						There is a known saying about (packed) malware: malware can hide but it must run. This means that the innermost doll (the Pony malware) may hide itself by surrounding itself by other dolls (packers), but if it wants to be of use (execute), it must reveal itself: it needs to unpack itself. There are two methods to unpack packed malware. Both methods can be compared to the security controls
						in the power plant of Springfield (yes, this is a Simpsons reference <img width="16" src="img/smiley/smiley-fun.png">). You can either pass each security control (i.e.: statically inspect and simulate the code that is responsible for unpacking the malware), or if you're lucky you can find and use a backdoor that allows you to bypass all the security features (i.e. running the packed malware, let it unpack itself and dump it from memory) <img width="16" src="img/smiley/smiley-fun.png">.
                        </p>
						
						<p>
						  <video id="my-video" class="video-js" controls preload="auto" width="600"  poster="img/articles/pony/pony_simpsons.jpg" data-setup="{}">
							<source src="vid/simpsons_security_fail.mp4" type='video/mp4'>
						  </video>

						  <script src="js/video.js"></script>
                        </p>
						
						<p class="uitlijnen">
	
                        </p>
						
                        <h6>Stage one dropper</h6>
						<br>
						<p class="uitlijnen">
						The sample I'll be analyzing can be found <a href='resources/packed_pony.zip'>here</a> (password=infected). This Pony sample is protected by two packers. The sample (to which I will refer as <u>stage 1 dropper</u>) unpacks itself in memory, this results into another packed sample (to which I will refer as <u>stage 2 dropper</u>). The second packed sample uses resources from the first packed sample to finally create the Pony malware (to which I will refer as the <u>stage 3 payload</u>). 
						The stage one sample is a .NET binary, so we can inspect the sample in a .NET disassembler such as <strong>ILSpy</strong>. Looking at the sample, we immediately notice a few strange things. The code contains a lot of strange symbols (that represent class and function names) and does not call any API functions that you would expect to see in a normal program. The .NET binary also contains an image with seemingly random pixels, called "jucausa". 
                        </p>
											

						<p>
						<a href="img/articles/pony/pony_stage1_ilspy.png" data-lightbox="ponyImages" data-title="Image 2: Inspecting the stage one dropper in ILSpy. Notice the strange samples and the resource image.">
						<img src="img/articles/pony/pony_stage1_ilspy.png"  width="600" style="border:3px solid black"></a><br> Image 2: Inspecting the stage one dropper in ILSpy. Notice the strange samples and the resource image.
						</p>
						
						
						<p class="uitlijnen">
						These findings indicate that the sample is a packer. <strong>Further analysis will show that the malware (stage 3 payload) hides itself inside the image, so when an antivirus statically examines the stage one dropper, it will only see the unpacking code, not the embedded Pony malware.</strong> Packing malware is a well known used 'trick' by malware authors to evade antivirus signatures. This technique helps malware authors to transform a malware sample which is recognized by tons of antiviruses into a malware sample for which there is not yet a detection signature.
						In the next analysis step, we will run the stage one dropper in a sandbox environment. We'll let the dropper unpack its payload (the stage two dropper) in memory. Once the payload is unpacked in memory, we will dump it from the memory so we can further inspect the stage two dropper.
                        </p>
						
						
						<p class="uitlijnen">
                        </p>
						
						
						
					    <h6>Stage two dropper</h6>
						<br>
						<p class="uitlijnen">
						When we run the stage one dropper in a sandbox environment, we see that the sample creates a child process, in which it unpacks itself. Shortly after creating the childproces, the childproces is terminated and a new process 'RegAsm' is started. RegAsm is a legitimate process in which the stage three payload (the Pony malware) is injected. 
						In this paragraph we will focus on dumping and analyzing the dropper residing in the child process (second stage dropper). In the next paragraph we will focus on dumping the Pony malware (third stage payload) that is injected in RegAsm.
                        </p>
						
						
						<p class="uitlijnen">
						In order to dump the second stage process, we need to suspend it before it terminates itself. I'm using <strong>Process Hacker</strong> and my ninja reflexes to quickly suspend the childproces <img width="16" src="img/smiley/smiley-cool.png">. By suspending the child process, the unpacking routines are also frozen, so I have all the time in the world to figure out how to dump the unpacked malware. Because the first stage dropper was a .NET binary, 
						I made the assumption that the second stage dropper may also be a .NET binary. With the help of <strong>MegaDumper</strong> I tried to dump the contents of the childproces. This approach worked, dumping the contents resulted in <a href='resources/packed_pony.zip'>a few executables and DLL's</a>.
						</p>
						
						<p>
						<a href="img/articles/pony/pony_stage2_dump.png" data-lightbox="ponyImages" data-title="Image 3: dumping the second stage dropper from memory">
						<img src="img/articles/pony/pony_stage2_dump.png"  width="600" style="border:3px solid black"></a><br> Image 3: dumping the second stage dropper from memory.
						</p>
						
						<p class="uitlijnen">
						When we open the dumped 'mydllclass.dll' in <strong>ILSpy</strong>, we can spot some interesting code. <strong>The codes purpose is to slow down/sabbotage analysis by checking if the sample is running in a sandbox environment. 
						It checks for environments like Vmware or Sandboxie. </strong>
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_stage2_protection.png" data-lightbox="ponyImages" data-title="Image 4: second stage dropper contains analysis environment detection code">
						<img src="img/articles/pony/pony_stage2_protection.png"  width="600" style="border:3px solid black"></a><br> Image 4: second stage dropper contains analysis environment detection code
						</p>
						
						<p class="uitlijnen">
						When we dive a bit further into the code, we can spot a routine that loads the "jucausa" resource. We can also spot a routine that decrypts and decompresses this resource.
						Finally, we can also spot a routine that uses a process hollowing technique. If you don't know what process hollowing is, you can read about it in <a href='a-closer-look-to-fileless-click-fraud-malware-poweliks'>this blog</a>.
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_stage2_process_hollowing.png" data-lightbox="ponyImages" data-title="Image 5: second stage dropper decrypts payload and injects it using a process hollowing technique">
						<img src="img/articles/pony/pony_stage2_process_hollowing.png"  width="600" style="border:3px solid black"></a><br> Image 5: second stage dropper decrypts payload and injects it using a process hollowing technique
						</p>
						
						<p class="uitlijnen">
						These pieces of code really illustrate well the capabilities of the malware: <strong>The image in the first stage dropper is used by the second stage dropper. The second stage dropper extracts the payload from the image, and injects it into RegAsm using a process hollowing technique.</strong>
						In the following paragraph, we will extract that payload.
                        </p>
						
						<h6>Stage two payload (alternative method)</h6>
						<br>
						<p class="uitlijnen">
                
						The previous paragraph explained how to extract the stage two dropper by dumping it from memory. This paragraph is a brief intermezzo which shows an alternative method to dump the second stage dropper.
						<strong>Packers written in .NET often load their payload by making use of a .NET functionality called 'Reflection'</strong>. This functionality enables a programmer to load objects (e.g. executables) directly into memory, without writing it to disk first. 
						With the help of a .NET debugger, such as <strong>dnSpy</strong>, one can also easily dump the second stage dropper. The easiest approach that worked on this packed Pony sample was searching for references to 'Assembly.Load' (a functionality in the Reflection class).
						When setting a debugger breakpoint on that line of code, it is very easy to run the executable and to dump (save) the argument passed to the 'Assembly.load' function, as shown on image six. This argument is the executable that is loaded into memory.
						</p>	
						
						<p>
						<a href="img/articles/pony/pony_stage2_dnspy.png" data-lightbox="ponyImages" data-title="Image 6: using .NET debugger dnSpy to dump the second stage payload">
						<img src="img/articles/pony/pony_stage2_dnspy.png"  width="600" style="border:3px solid black"></a><br> Image 6: using .NET debugger dnSpy to dump the second stage payload
						</p>
						
						<h6>Stage three payload</h6>
						<br>
						<p class="uitlijnen">
                
						The stage three payload that's injected in RegAsm, cannot be dumped with <strong>MegaDumper</strong> because the executable isn't a .NET executable. However, we can dump the executable using a debugger like <strong>OllyDbg</strong>.
						We use <strong>Process Hacker</strong> to suspend the RegAsm process (no ninja reflexes needed this time, the RegAsm process doesn't kill itself quickly because the final payload is running in there). Once the process has been suspended, we attach <strong>OlleDbg</strong> to it (image seven).
						In the memory space of RegAsm we search for the executable magic number "MZ" (image eight). When looking for "MZ", we can spot in RegASMs memory what seems to be an executable (notice <i>'This program cannot be run in DOS mode'</i>). This executable can be dumped from memory using the <strong>OllyDumpEx</strong> plugin (image eight).
						 </p>						
						<p>
						<a href="img/articles/pony/pony_stage3_attach.png" data-lightbox="ponyImages" data-title="Image 7: extracting Pony from the hollowed RegAsm process using OllyDbg">
						<img src="img/articles/pony/pony_stage3_attach.png"  width="600" style="border:3px solid black"></a><br> Image 7: extracting Pony from the hollowed RegAsm process using OllyDbg
						</p>
						
						<p class="uitlijnen">
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_stage3_find_mz.png" data-lightbox="ponyImages" data-title="Image 8: searching for the injected Pony executable in RegAsms memory">
						<img src="img/articles/pony/pony_stage3_find_mz.png"  width="600" style="border:3px solid black"></a><br> Image 8: searching for the injected Pony executable in RegAsms memory
						</p>
						
						<p class="uitlijnen">
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_stage3_dump_exe.png" data-lightbox="ponyImages" data-title="Image 9: dumping the injected payload from RegAsms memory with OllyDumpEx">
						<img src="img/articles/pony/pony_stage3_dump_exe.png"  width="600" style="border:3px solid black"></a><br> Image 9: dumping the injected payload from RegAsms memory with OllyDumpEx
						</p>
						
						
						<p class="uitlijnen">
						When searching for strings in the dumped executable, one can spot some interesting strings. We see URL's that contain the 'Panel/gate.php' structure. This structure refers to the default Pony server side path setup. The server side component receives and stores the stolen credentials.
						The strings found in the dumped executable also suggest that configurations and databases of software like Filezilla, Firefox or Google Chrome are queried. It also interesting to see that the malware contains a list of what seems to be a set of default passwords (who uses jesus as a password <img width="16" src="img/smiley/smiley-humor-amazed.png">?!). This behaviour is also typical for the Pony malware. In the last paragraph, we'll shortly discuss the Pony malware.
                        </p>
						
						
						<p>
						<a href="img/articles/pony/pony_unpacked_strings.PNG" data-lightbox="ponyImages" data-title="Image 10: Quick inspection of the dumped payload.">
						<img src="img/articles/pony/pony_unpacked_strings.PNG"  width="600" style="border:3px solid black"></a><br> Image 10: Quick inspection of the dumped payload.
						</p>
						
						<h6>Pony password stealer/dropper</h6>
						<br>
						<p class="uitlijnen">
						<strong>Nowadays, malware is modular</strong>: there are crimeware kits helping to <strong>set up your</strong> own <strong>C&C</strong> (Command and Control server) and prepare the <strong>payload</strong>. This is also the case for the Pony malware: the payload can be build via a nice graphical user interfaces, because the threat actors who are using the malware aren't necessarily as technical savy as the group who coded the malware. Additionally to the C&C setup and the payload itself,
						<strong>crypters</strong> are used to pack the payload, and e.g. <strong>Exploit Kits (browser exploit, PDF exploit, Office exploit, ...)</strong> are used to deliver it.
                        </p>
						
						<p class="uitlijnen">
						Below an example of a pony builder can be found. The builder gives you the option to load (drop) additional files, to configure the location of the command and control server and to select from which applications the stored credentials need to be stolen. 
						By default, the Pony builder executable contains an icon of a Pony (d'uh). If you use Google reverse image search on the Pony icon, you'll notice that the malware authors have stolen that icon from the popular <a href='https://en.wikipedia.org/wiki/FarmVille' target='_blank'>FarmVille game</a>. 
						Stealing credentials and passwords is one thing, but stealing from FarmVille, really <img width="16" src="img/smiley/smiley-rofl.png">? 
                        </p>
						<p>
						<a href="img/articles/pony/pony_builder.png" data-lightbox="ponyImages" data-title="Image 11: Pony builder pannel.">
						<img src="img/articles/pony/pony_builder.png"  width="600" style="border:3px solid black"></a><br> Image 11: Pony builder pannel.
						</p>
						
						<p class="uitlijnen">
                        </p>
						
						<p>
						<a href="img/articles/pony/pony_icon.png" data-lightbox="ponyImages" data-title="Image 12: The origin of Pony's icon: farmville">
						<img src="img/articles/pony/pony_icon.png"  width="600" style="border:3px solid black"></a><br> Image 12: The origin of Pony's icon: farmville
						</p>
						
						<p class="uitlijnen">
                        </p>
						
						
						<p class="uitlijnen">
                        </p>
						
					</div>
                    <!-- ENDS PAGE-CONTENT -->
                </div>
                <!-- ENDS CONTENT -->
            </div>
            <!-- ENDS MAIN -->
        </div>
        <!-- ENDS WRAPPER -->
        <!-- FOOTER -->
                <div id="footer">
            <!-- FOOTER-WRAPPER -->
            <div id="footer-wrapper">
                 Website created by Felix Weyne, 2024 | Website Template By Luiszuno 
            </div>
            <!-- ENDS FOOTER-WRAPPER -->
        </div>
        <!-- ENDS FOOTER -->
	<script src="lightbox/js/lightbox.js"></script>
	</body>
</html>