<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>New Threat: A Deep Dive Into the Zergeca Botnet</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="New Threat: A Deep Dive Into the Zergeca Botnet">
    <meta property="og:description" content="Background


On May 20, 2024, while everyone was happily celebrating the holiday, the tireless XLab CTIA(Cyber Threat Insight Analysis) system captured a suspicious ELF file around 2 PM, located at /usr/bin/geomi. This file was packed with a modified UPX, had a magic number of 0x30219101, and was">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/06/zergeca-1.webp">
    <meta property="article:published_time" content="2024-06-19T12:45:08.000Z">
    <meta property="article:modified_time" content="2024-06-19T12:45:49.000Z">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="DoH">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="New Threat: A Deep Dive Into the Zergeca Botnet">
    <meta name="twitter:description" content="Background


On May 20, 2024, while everyone was happily celebrating the holiday, the tireless XLab CTIA(Cyber Threat Insight Analysis) system captured a suspicious ELF file around 2 PM, located at /usr/bin/geomi. This file was packed with a modified UPX, had a magic number of 0x30219101, and was">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/06/zergeca-1.webp">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="DDoS, Botnet, DoH, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1792">
    <meta property="og:image:height" content="1024">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "New Threat: A Deep Dive Into the Zergeca Botnet",
    "url": "https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/",
    "datePublished": "2024-06-19T12:45:08.000Z",
    "dateModified": "2024-06-19T12:45:49.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/06/zergeca-1.webp",
        "width": 1792,
        "height": 1024
    },
    "keywords": "DDoS, Botnet, DoH, EN",
    "description": "Background\n\n\nOn May 20, 2024, while everyone was happily celebrating the holiday, the tireless XLab CTIA(Cyber Threat Insight Analysis) system captured a suspicious ELF file around 2 PM, located at /usr/bin/geomi. This file was packed with a modified UPX, had a magic number of 0x30219101, and was uploaded from Russia to VirusTotal, where it was not detected as malicious by any antivirus engine.\n\n\nLater that evening at 10 PM, another geomi file using the same UPX magic was uploaded to VT from Ger",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-ddos tag-botnet tag-doh tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-ddos tag-botnet tag-doh tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/ddos/">DDoS</a>
                </span>
        </div>

        <h1 class="article-title">New Threat: A Deep Dive Into the Zergeca Botnet</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/acey9/">Acey9</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-06-19">2024年6月19日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 13 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/06/zergeca-1.webp"
                    alt="New Threat: A Deep Dive Into the Zergeca Botnet"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <h1 id="background">Background</h1>
<p>On May 20, 2024, while everyone was happily celebrating the holiday, the tireless <code>XLab CTIA(Cyber Threat Insight Analysis) system</code> captured a suspicious ELF file around 2 PM, located at <code>/usr/bin/geomi</code>. This file was packed with a modified UPX, had a magic number of 0x30219101, and was uploaded from Russia to VirusTotal, where it was not detected as malicious by any antivirus engine.</p>
<p>Later that evening at 10 PM, another geomi file using the same UPX magic was uploaded to VT from Germany. <strong>The suspicious file path, modified UPX, and multi-country uploads</strong> caught our attention. After analysis, we confirmed that this is a <strong>botnet</strong> implemented in Golang. Given that its C2 used the string "ootheca," reminiscent of the swarming Zerg in StarCraft, we named it <code>Zergeca</code>.</p>
<p>Functionally, Zergeca is not just a typical DDoS botnet; besides supporting six different attack methods, it also has capabilities for proxying, scanning, self-upgrading, persistence, file transfer, reverse shell, and collecting sensitive device information. From a network communication perspective, Zergeca also has the following unique features:</p>
<ul>
<li>Supports multiple DNS resolution methods, <strong>prioritizing DOH</strong> for C2 resolution.</li>
<li>Uses the uncommon Smux library for C2 communication protocol, encrypted via XOR.</li>
</ul>
<p>During the investigation of Zergeca's infrastructure, we found that its C2 IP address, <strong>84.54.51.82</strong>, has been serving at least two Mirai botnets since September 2023. We speculate that the author behind Zergeca accumulated experience operating the Mirai botnets before creating Zergeca.</p>
<p>On June 10, <code>XLab command tracking system</code> captured a vector 7 DDoS command that the current samples did not support, indicating that Zergeca's author is actively developing and updating, with new samples yet to be discovered. Our persistence paid off when we captured a new sample on the 19th that supports the vector 7. Currently, the detection rates for Zergeca samples and C2 are very low. Considering Zergeca's potential threat in DDoS attacks, we have decided to release this article to share our findings with the community.</p>
<h1 id="sample-c2-detection">Sample &amp; C2 Detection</h1>
<p><strong>From the sample perspective</strong>, we captured a total of 5 Zergeca samples. While their functions are nearly identical, there is a significant discrepancy in their detection rates. How can this anomaly be explained? Most antivirus vendors have categorized the sample <code>23ca4ab1518ff76f5037ea12f367a469</code> as <strong>Generic Malware</strong>. We speculate that the detection of Zergeca by antivirus software is based on file hash. Therefore, as long as the hash changes, the detection effectiveness diminishes.</p>
<table>
<thead>
<tr>
<th>MD5</th>
<th>Detection</th>
<th>First Seen</th>
<th>Telemetry</th>
</tr>
</thead>
<tbody>
<tr>
<td>23ca4ab1518ff76f5037ea12f367a469</td>
<td>28/64</td>
<td>2024.05.20</td>
<td>Russian</td>
</tr>
<tr>
<td>9d96646d4fa35b6f7c19a3b5d3846777</td>
<td>0/67</td>
<td>2024.05.20</td>
<td>Germany</td>
</tr>
<tr>
<td>d78d1c57fb6e818eb1b52417e262ce59</td>
<td>1/67</td>
<td>2024.05.22</td>
<td>China</td>
</tr>
<tr>
<td>604397198f291fa5eb2c363f7c93c9bf</td>
<td>1/66</td>
<td>2024.06.11</td>
<td>France</td>
</tr>
<tr>
<td>60f23acebf0ddb51a3176d0750055cf8</td>
<td>0/67</td>
<td>2024.06.18</td>
<td>France</td>
</tr>
</tbody>
</table>
<p>To verify our hypothesis, we appended the 4-byte string "Xlab" to the end of the file 23ca4ab1518ff76f5037ea12f367a469 and re-uploaded it to VirusTotal. The detection rate changed to 9/67, partially confirming our speculation.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_patch.png" alt="geomi_patch.png" loading="lazy"></p>
<p>Additionally, the current detection is based on the packed samples, after unpacking, the detection rate drops to 0.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_unpack.png" alt="geomi_unpack.png" loading="lazy"></p>
<p><strong>From the Domain Perspective</strong>, the four samples share two C2 domains that were created on the same day. The samples prioritize using DOH (DNS over HTTPS) for C2 resolution, which obscures the relationship between the samples and the C2 domains to some extent. Because of this, <code>VirusTotal couldn't even associate the C2 domains with the samples</code>, resulting in a naturally low detection rate.</p>
<table>
<thead>
<tr>
<th>Domain</th>
<th>Detection</th>
<th>Create date</th>
</tr>
</thead>
<tbody>
<tr>
<td>ootheca.pw</td>
<td>1/93</td>
<td>2024.04.28</td>
</tr>
<tr>
<td>ootheca.top</td>
<td>1/93</td>
<td>2024.04.28</td>
</tr>
</tbody>
</table>
<h1 id="profile-of-84545182">Profile of 84.54.51.82</h1>
<p>The two C2 servers of Zergeca point to the same IP address, 84.54.51.82. According to our data, this IP has been in use since September 2023, serving a variety of roles. During this period, it has acted as a Scanner, Downloader, Mirai botnet C2, and Zergeca botnet C2.</p>
<h2 id="scanner">Scanner</h2>
<p>Starting from September 18, 2023, scanning activities commenced, primarily targeting protocols such as Telnet, HTTP, and socks4. The main ports scanned include<code>23, 8080, 3128, 80, and 8888</code>.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/Snip20240616_53.png" alt="geomi_scan.png" loading="lazy"></p>
<h2 id="mirai-downloaderc2">Mirai Downloader&amp;C2</h2>
<p>From September and October 2023 to April 2024, 84.54.51.82 was primarily used as the Loader IP and Downloader IP for the Mirai botnet.</p>
<ul>
<li>
<p>2023.09 - 2023.10, it was used as the Loader and Downloader IP to implant the following related samples.</p>
<pre><code> #Downloader

http://84.54[.51.82/jaws
http://84.54[.51.82/bin
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.x86
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.spc
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.sh4
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.ppc
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.mpsl
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.mips
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.m68k
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.i686
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.arm7
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.arm6
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.arm5
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.arm
http://84.54[.51.82/596a96cc7bf9108cd896f33c44aedc8a/db0fa4b8db0333367e9bda3ab68b8042.arc

#CC

mirai://bot.hamsterrace.space:59666
</code></pre>
</li>
<li>
<p>2024.04, it was used as the Loader IP to implant the following related samples.</p>
<pre><code>#Downloader
http://145.239[.108.150/Fantazy.sh
http://145.239[.108.150/Fantazy/Fantazy.arm5
http://145.239[.108.150/Fantazy/Fantazy.arm6
http://145.239[.108.150/Fantazy/Fantazy.mpsl
http://145.239[.108.150/Fantazy/Fantazy.sh4
http://145.239[.108.150/Please-Subscribe-To-My-YT-Channel-VegaSec/1isequal9.x86
http://145.239[.108.150/cache

# CC

mirai://145.239.108.150:63645
</code></pre>
</li>
</ul>
<h2 id="zergeca-c2">Zergeca C2</h2>
<p>Starting from April 29, 2024, 84.54.51.82 began being used as the C2 server for Zergeca. The relevant C2 domains and their resolution records are as follows:</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/Snip20240616_54.png" alt="Zergeca.rdata.png" loading="lazy"></p>
<h2 id="exploits">Exploits</h2>
<p>In our observation, the primary methods used by 84.54.51.82 to propagate samples are Telnet weak passwords and certain known vulnerabilities. The relevant vulnerability identifiers are as follows:</p>
<pre><code>Telnet Weak Password
CVE-2022-35733
CVE-2018-10562
CVE-2018-10561
CVE-2017-17215
CVE-2016-20016
</code></pre>
<h2 id="ddos-statistics">DDoS Statistics</h2>
<p>From early to mid-June 2024, the Zergeca botnet primarily targeted regions such as <strong>Canada, the United States, and Germany</strong>. The main type of attack was ackFlood (atk_4), with victims distributed across multiple countries and different ASNs.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/Snip20240616_57.png" alt="Zergeca.ddos.png" loading="lazy"></p>
<h1 id="reverse-analysis">Reverse Analysis</h1>
<p>The four Zergeca samples in our observation are all designed for the x86-64 CPU architecture and target the Linux platform. The presence of strings like "android," "darwin," and "windows" in the samples, along with Golang's inherent cross-platform capabilities, suggests that the author may eventually aim for full platform support.</p>
<p>This article focuses on the earliest captured sample for detailed analysis. The sample is packed with UPX and has a magic number of 0x30219101. For this type of  modified UPX packer, simply changing the magic back to the standard "UPX!" allows for unpacking with the command <code>upx -d</code>.</p>
<pre><code>MD5:23ca4ab1518ff76f5037ea12f367a469
Mgaic:ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, corrupted section header size
Packer: UPX
Version:0.0.01c
</code></pre>
<p>After unpacking, it becomes evident that Zergeca is a botnet implemented in Go language. The symbols are not obfuscated, making reverse analysis relatively straightforward.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_main-1.png" alt="geomi_main.png" loading="lazy"></p>
<p>The figure above shows a code snippet of the main_main function. Functionally, it can be broken down into four distinct modules. The persistence and proxy modules are self-explanatory, with the former ensuring persistence and the latter handling proxying. The silivaccine module is used to remove competing malware, ensuring exclusive control over the device. The most crucial module is zombie, which implements the full botnet functionality. It reports sensitive information from the compromised device to the C2 and awaits commands from the C2, supporting six types of DDoS attacks, scanning, reverse shell, and other functions.</p>
<h2 id="0x00-string-decryption">0x00: String Decryption</h2>
<p>Zergeca uses XOR encryption for many sensitive strings. Using IDA, we found that the XOR key is referenced 240 times across various functions. Each decryption involves two uses of the XOR key: <code>one for initialization and one for decryption</code>. So there are 120 decryption operations needed.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_xorref-1.png" alt="geomi_xorref.png" loading="lazy"></p>
<p>The XOR key is initially set to <code>EC 22 2B A9 F3 DD DF 1C CD 46 AC 1E</code>, but only the first six bytes (<code>EC 22 2B A9 F3 DD</code>) are used.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_xor-1.png" alt="geomi_xor.png" loading="lazy"></p>
<p>Manually decrypting 120 times is impractical. Although the decryption process isn't confined to a single function, CFG analysis revealed a specific pattern in most decryption-related code blocks:</p>
<ol>
<li>The XOR block has one predecessor and one successor.</li>
<li>The predecessor block's first instruction is <code>mov</code>, with the first operand being an address pointing to the original length of the XOR key.</li>
<li>The successor block's first instruction is <code>cmp</code>, with the first operand being a number indicating the ciphertext's length.</li>
<li>The predecessor block's predecessor's first instruction is <code>lea</code>, with the first operand being an address pointing to the ciphertext's starting address.</li>
</ol>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_blocks-1.png" alt="geomi_blocks.png" loading="lazy"></p>
<p>By identifying these patterns, we can automate the decryption process and restore all encrypted strings efficiently.We implemented IdaPython decryption script in the Appendix with the following results: 111 successful decryptions and 9 mismatches.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_example.png" alt="geomi_example.png" loading="lazy"></p>
<p>The 9 mismatched codes are distributed across six functions. Among them, the <code>packets__Cursor</code> Read/WriteString functions handle network packet encryption/decryption and can be ignored.</p>
<pre><code>gomi_bot_zombie__Zombie_Connect
geomi_common_utils_init_0_func1, 
geomi_bot_discovery_Run, 
geomi_common_packets__Cursor_WriteString,
geomi_common_packets__Cursor_ReadString, 
geomi_common_utils_RandomUserAgent
</code></pre>
<p>For the remaining four functions, the issue was that the ciphertexts were arrays rather than single entries, causing the pattern match to fail. For example, in the <code>RandomUserAgent</code> function, the <code>user_agent_list</code> contains 1000 encrypted user agents.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_agent.png" alt="geomi_agent.png" loading="lazy"></p>
<p>For such cases, we can use the <code>manual_decode</code> function, where the first parameter is the starting address of the ciphertext array and the second parameter is the number of array elements.</p>
<pre><code>ey=b"\xEC\x22\x2B\xA9\xF3\xDD"

def manual_decode(base,cnt):
    for i in range(cnt):
        start=idc.get_qword(base)
        addr=idc.get_qword(start+i*16)
        size=idc.get_qword(start+8+i*16)
        buff=idc.get_bytes(addr,size)
        out=bytearray()
        for k,v in enumerate(buff):
            out.append(v ^ key[k%6])
        print(out.decode())

manual_decode(0x000000000C56FA0,1000)  #user agent
manual_decode(0x0000000000C56F80,0xc)  #opennic dns
manual_decode(0x000000000C56C40,2) # c2
</code></pre>
<p>Decrypted examples include various user agents, OpenNIC DNS server, and C2s.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_manual.png" alt="geomi_manual.png" loading="lazy"></p>
<p>With all strings successfully decrypted, we can now begin reverse-engineering Zergeca's various functionalities.</p>
<h2 id="0x01-persistence-module">0x01: Persistence Module</h2>
<p>Zergeca achieves persistence on compromised devices by adding a system service <code>geomi.service</code>. This service ensures that the Zergeca sample automatically generates a new <code>geomi</code> process if the device restarts or the process is terminated.</p>
<pre><code>[Unit]
Description=
Requires=network.target
After=network.target
[Service]
PIDFile=/run/geomi.pid
ExecStartPre=/bin/rm -f /run/geomi.pid
ExecStart=/usr/bin/geomi
Restart=always
[Install]
WantedBy=multi-user.target
</code></pre>
<h3 id="experiment-a"><strong>Experiment A</strong></h3>
<p>When running the Zergeca sample on a virtual machine and restarting the device, <code>geomi.service</code> automatically launches the Zergeca sample. The resulting process named <code>geomi</code> had a PID of 897. Terminating this process with <code>kill -9 897</code> immediately spawned a new <code>geomi</code> process with PID 8460.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_kill-1.png" alt="geomi_kill.png" loading="lazy"></p>
<p>When network administrators discover a <code>geomi</code> process and suspicious traffic on a device, they can attempt the following cleanup steps:</p>
<ol>
<li>Delete <code>/etc/systemd/system/geomi.service</code></li>
<li>Delete the sample file referenced by the <code>ExecStart</code> parameter</li>
<li>Terminate the <code>geomi</code> process</li>
</ol>
<h2 id="0x2-silivaccine-module">0x2: Silivaccine Module</h2>
<p>To monopolize the device, Zergeca includes a list of competitor threats, covering miners, backdoor trojans, botnets, and more. Some familiar names on the list include mozi, kinsing, and various mining pools. Zergeca continuously monitors the system and terminates any process whose name or runtime parameters match those on the list, deleting the corresponding binary files.</p>
<table>
<thead>
<tr>
<th>Mozi.a</th>
<th>com.ufo.miner</th>
<th>kinsing</th>
<th>kthreaddi</th>
</tr>
</thead>
<tbody>
<tr>
<td>kaiten</td>
<td>srv00</td>
<td>meminitsrv</td>
<td>.javae</td>
</tr>
<tr>
<td>solr.sh</td>
<td>monerohash</td>
<td>minexmr</td>
<td>c3pool</td>
</tr>
<tr>
<td>crypto-pool.fr</td>
<td>f2pool.com</td>
<td>xmrpool.eu</td>
<td>.........</td>
</tr>
</tbody>
</table>
<h3 id="experiment-b"><strong>Experiment B</strong></h3>
<p>We renamed the system program <code>/bin/sleep</code> to <code>Mozi.a</code> and ran it. The <code>Mozi.a</code> process was killed, and the corresponding binary file was deleted.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_remove-1.png" alt="geomi_remove.png" loading="lazy"></p>
<h2 id="0x3-zombie-module">0x3: <strong>Zombie Module</strong></h2>
<p>Zergeca resolves the C2 IP address using the <code>geomi_common_utils_Resolve</code> function, which supports four resolvers: Public DNS, Local DNS, DoH (DNS over HTTPS), and OpenNIC.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_resolve-1.png" alt="geomi_resolve.png" loading="lazy"></p>
<p>Zergeca prioritizes two DoH resolvers, masking C2 domain resolution in DNS traffic.</p>
<pre><code>https://cloudflare-dns.com/dns-query
https://dns.google/resolve
</code></pre>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_dns.png" alt="geomi_dns.png" loading="lazy"></p>
<p>After obtaining the C2 IP, the bot reports device sensitive information encapsulated in a <code>DeviceInfo</code> structure, including details like "country, public IP, OS, user groups, runtime directory, and reachability".</p>
<pre><code>struct DeviceInfo
{
Country string
PlucAddress byte[]
MAC string
OS string
ARCH string
Name string
MachineId string
Numcpu uint32
CPUMODEL string
username string
uid string
gid string
Users []string
Uptime time.Duration
PID	uitn32
Path string
checksum []uint8
version string
Reachable bool
}
</code></pre>
<p>The bot then awaits commands from the C2, processing them with different handlers.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_func-1.png" alt="geomi_func.png" loading="lazy"></p>
<p>The supported functions are as follows:</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Task</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x01</td>
<td>Proxy</td>
</tr>
<tr>
<td>0x02</td>
<td>Reverse Shell</td>
</tr>
<tr>
<td>0x03</td>
<td>FileTransfer</td>
</tr>
<tr>
<td>0x05</td>
<td>Self-update</td>
</tr>
<tr>
<td>0xa0</td>
<td>DDoS</td>
</tr>
<tr>
<td>0xb0</td>
<td>Stop Discovery</td>
</tr>
<tr>
<td>0xb1</td>
<td>Start Discovery</td>
</tr>
</tbody>
</table>
<p>The DDoS functionality supports the following seven attack vectors:</p>
<table>
<thead>
<tr>
<th>Sub-ID</th>
<th>Attack Vector</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>minecraft</td>
</tr>
<tr>
<td>2</td>
<td>httpPPS</td>
</tr>
<tr>
<td>3</td>
<td>synFlood</td>
</tr>
<tr>
<td>4</td>
<td>ackFlood</td>
</tr>
<tr>
<td>5</td>
<td>pushFlood</td>
</tr>
<tr>
<td>6</td>
<td>rstFlood</td>
</tr>
<tr>
<td>7</td>
<td>pushOVHFlood</td>
</tr>
</tbody>
</table>
<h3 id="communication-protocol"><strong>Communication Protocol</strong></h3>
<p>Zergeca uses smux for Bot-C2 communication. <a href="https://github.com/xtaci/smux?ref=blog.xlab.qianxin.com">Smux(Simple MUltipleXing)</a> is a Golang multiplexing library that relies on underlying connections like TCP or KCP for reliability and ordering, providing stream-oriented multiplexing. Smux packets feature an 8-byte header: <code>VERSION(1B) | CMD(1B) | LENGTH(2B) | STREAMID(4B) | DATA(LENGTH)</code>.</p>
<p>From an analysis perspective, only the <code>LENGTH</code> and <code>DATA</code> fields are of primary concern. The captured traffic includes various messages such as online status, device information reporting, command 0xb0, and heartbeat messages.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_packet-1.png" alt="geomi_packet.png" loading="lazy"></p>
<p><strong>Online Message:</strong></p>
<ul>
<li>Length: 0x04 bytes</li>
<li>Content: Hardcoded <code>13 3a 12 79</code></li>
</ul>
<p><strong>Device Info Report:</strong></p>
<ul>
<li>Length: 0xd5 bytes (varies by device)</li>
<li>Content (excluding IP): XOR encrypted with key <code>EC 22 2B A9 F3 DD</code></li>
<li>Decrypted DeviceInfo as follows<pre><code>pos: 0x4 len: 0x2 &lt;----&gt; b'JP'
pos 0x7 len: 4 &lt;----&gt; 45.14.XX.XX
pos: 0xc len: 0x11 &lt;----&gt; b'72:ba:29:e9:b8:08'
pos: 0x1f len: 0x5 &lt;----&gt; b'linux'
pos: 0x26 len: 0x5 &lt;----&gt; b'amd64'
pos: 0x2d len: 0x6 &lt;----&gt; b's22262'
pos: 0x35 len: 0x20 &lt;----&gt; b'b19642a3c672d4f20cbdb5b1569bf98f'
pos: 0x5b len: 0x29 &lt;----&gt; b'Intel(R) Xeon(R) CPU E5-2678 v3 @ 2.50GHz'
pos: 0x86 len: 0x4 &lt;----&gt; b'root'
pos: 0x86 len: 0x4 &lt;----&gt; b'root'
pos: 0xa2 len: 0x2 &lt;----&gt; b'\x92\xf1'
pos: 0xa6 len: 0xe &lt;----&gt; b'/usr/bin/geomi'
pos: 0xb6 len: 0x14 &lt;----&gt; b'r\xbd&gt;\xcfY\x15[\xd9]\xa4\xe7m\x86\x9f\xbf\x895\xaa\x19\xe8'
pos: 0xcc len: 0x7 &lt;----&gt; b'0.0.01c'
</code></pre>
</li>
</ul>
<p><strong>Command 0xb0 Message:</strong></p>
<ul>
<li>Length: 0x08 bytes</li>
<li>Function: Stop scanning</li>
</ul>
<p><strong>Heartbeat Message:</strong></p>
<ul>
<li>Length: 0x03 bytes</li>
<li>Content: <code>ff 00 00</code></li>
</ul>
<p>Let's take a look at the DDoS-related packets. The format is <code>cmd (1 byte) + length (2 bytes) + sub_cmd (1 byte) + target_info (length-1)</code>, where <code>cmd</code> is <code>0xa0</code>, indicating a DDoS command, and <code>sub_cmd</code> is <code>0x4</code>, indicating an ACK flood attack. The <code>target_info</code> field focuses on the first 4 bytes, which represent the target IP. For example, <code>1f 06 10 21</code> corresponds to the IP address 31.6.16.33.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_ddos-1.png" alt="geomi_ddos.png" loading="lazy"></p>
<p>When the Bot receives the aforementioned command, the resulting attack traffic aligns perfectly with our analysis.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_ack-1.png" alt="geomi_ack.png" loading="lazy"></p>
<h3 id="experiment-c"><strong>Experiment C</strong></h3>
<p>Based on our network protocol analysis, we implemented a fake C2 to control the Bot and observe its behavior upon receiving different commands. In this experiment, we sent the Bot a <code>0xb1</code> command, which is to "start scanning."</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_fakec2-1.png" alt="geomi_fakec2.png" loading="lazy"></p>
<p>Upon receiving this command, the Bot immediately began scanning 16 ports on randomly generated IP addresses.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/06/geomi_syn-1.png" alt="geomi_syn.png" loading="lazy"></p>
<h1 id="summary"><strong>Summary</strong></h1>
<p>Through reverse analysis, we gained initial insights into Zergeca's author. The built-in competitor list shows familiarity with common Linux threats. Techniques like modified UPX packing, XOR encryption for sensitive strings, and using DoH to hide C2 resolution demonstrate a strong understanding of evasion tactics. Implementing the network protocol with Smux showcases their development skills. Given this combination of operational knowledge, evasion tactics, and development expertise, encountering more of their work in the future would not be surprising.</p>
<p>This is our basic intelligence of Zergeca. We welcome unique insights from other companies, such as Init Access. And readers can contact us on <a href="https://twitter.com/Xlab_qax?ref=blog.xlab.qianxin.com">Twitter</a> for more details.</p>
<h1 id="ioc">IOC</h1>
<h2 id="sample">Sample</h2>
<pre><code>23ca4ab1518ff76f5037ea12f367a469
9d96646d4fa35b6f7c19a3b5d3846777
d78d1c57fb6e818eb1b52417e262ce59
604397198f291fa5eb2c363f7c93c9bf

f68139904e127b95249ffd40dfeedd21
d7b5d45628aa22726fd09d452a9e5717
6ac8958d3f542274596bd5206ae8fa96

pathced with "xlab" at the end of file
980cad4be8bf20fea5c34c5195013200

sample captured on 2024.06.19, support ddos vector 7
60f23acebf0ddb51a3176d0750055cf8

</code></pre>
<h2 id="domain">Domain</h2>
<pre><code>ootheca.pw
ootheca.top
bot.hamsterrace.space
</code></pre>
<h2 id="ip">IP</h2>
<pre><code>84.54.51.82	The Netherlands|None|None	AS202685|Aggros Operations Ltd.
</code></pre>
<h1 id="appendix">Appendix</h1>
<h2 id="idapython-script">IdaPython Script</h2>
<pre><code># Test script, only for 23ca4ab1518ff76f5037ea12f367a469
# Modidy keyaddr,sizeaddr in your case

def decode(buf):
    key=b"\xEC\x22\x2B\xA9\xF3\xDD"
    out=bytearray()
    for i in range(len(buf)):
        out.append(buf[i]^key[i%6])
    return out
    
count=0
notcount=0
failedfunc=[]
successedfunc=[]

keyaddr=0x0000000000C56FC0
sizeaddr=0x0000000000C56FC8

refs=XrefsTo(keyaddr, flags=0)
for ref in refs:
    f_blocks = idaapi.FlowChart(idaapi.get_func(ref.frm), flags=idaapi.FC_PREDS)
    for blk in f_blocks:
        if blk.start_ea!=ref.frm:
            continue
        if len(list(blk.preds()))!=1 and len(list(blk.succs()))!=1:
            continue
        predblk=list(blk.preds())[0]
        succsblk=list(blk.succs())[0]
        
        if idc.get_operand_value(predblk.start_ea,1)!=sizeaddr:
            
            continue
        if idc.get_operand_type(succsblk.start_ea,1)!=0x5:
            print(idc.get_func_name(ref.frm),hex(ref.frm),"not matched")
            notcount+=1
            failedfunc.append(idc.get_func_name(ref.frm))
            continue
        ppredblk=list(predblk.preds())
        if len(ppredblk)!=1:
            continue
        addr=idc.get_operand_value(ppredblk[0].start_ea,1)
        size=idc.get_operand_value(succsblk.start_ea,1)
        buf=idc.get_bytes(addr,size)
        out=decode(buf)
        count+=1
        print(idc.get_func_name(ref.frm),hex(ppredblk[0].start_ea),"matched, ciphertext at", hex(addr), "&lt;----&gt;",bytes(out))
        successedfunc.append(idc.get_func_name(ref.frm))

print("\n--------------------Statistic--------------------")
print(f'Success:{count},Failed:{notcount}\n')
print("---------Success Function---------")
print(set(successedfunc),'\n')
print("---------Failed Function---------")
print(set(failedfunc),'\n')

</code></pre>

    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/a-deep-dive-into-the-zergeca-botnet/";  
                this.page.identifier = "ghost-667262d1fd1b1b000108467e"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
