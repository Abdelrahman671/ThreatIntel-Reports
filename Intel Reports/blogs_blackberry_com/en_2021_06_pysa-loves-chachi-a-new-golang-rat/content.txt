<!DOCTYPE HTML>
<html lang="en">
    <head>
	<meta charset="UTF-8"/>

	
	









    <!-- OneTrust Cookies Consent Notice Start -->






    <script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" charset="UTF-8" data-domain-script="6373c986-7725-4c54-9731-2a91bdd43107"></script>


<script type="text/javascript">
    function OptanonWrapper() { }
</script>

<!-- OneTrust Cookies Consent Notice End -->


















	<title>PYSA Loves ChaChi: a New GoLang RAT</title>

	<script type="application/ld+json">
	{"@context":"https://schema.org","@type":"NewsArticle","mainEntityOfPage":{"@type":"WebPage","@id":"https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat"},"headline":"PYSA Loves ChaChi: a New GoLang RAT","image":["/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-350x350-ibb.png","/content/dam/blogs-blackberry-com/images/blogs/2021/06/Chachi-875x530-ibb.png"],"datePublished":"2021-06-23T09:00:00.000-07:00","author":{"@type":"Person","name":"The BlackBerry Research and Intelligence Team"},"publisher":{"@type":"Organization","name":"BlackBerry","logo":{"@type":"ImageObject","url":"https://blogs.blackberry.com/content/dam/blackberry-com/Images/logos/BlackBerry_Logo_Black_150.png"}}}
</script>


	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<meta name="description" content="The BlackBerry Threat Research and Intelligence SPEAR Team have been tracking a previously unnamed Golang RAT targeting Windows® systems. We’ve dubbed this RAT ChaChi, due to its two key components, Chashell and Chisel. "/>
	<meta name="keywords" content="Cybersecurity"/>
	

	<meta name="author" content="blogs.blackberry.com"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>

	<link rel="icon" href="/etc.clientlibs/bbcom/clientlibs/clientlib-etc-legacy/resources/bbcom-aem-project/images/favicon.ico"/>
	<link rel="canonical" href="https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat"/>

	<meta property="og:url" content="https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat"/>
	<meta property="og:title" content="PYSA Loves ChaChi: a New GoLang RAT"/>
	<meta property="og:description" content="The BlackBerry Threat Research and Intelligence SPEAR Team have been tracking a previously unnamed Golang RAT targeting Windows® systems. We’ve dubbed this RAT ChaChi, due to its two key components, Chashell and Chisel. "/>
	<meta property="og:type" content="article"/>
	<meta property="og:image" content="https://blogs.blackberry.com/content/dam/blogs-blackberry-com/images/blogs/2021/06/Chachi-875x530-ibb.png"/>

	<meta name="twitter:card" content="summary_large_image"/>
	<meta name="twitter:site" content="@BlackBerry"/>
	<meta name="twitter:title" content="PYSA Loves ChaChi: a New GoLang RAT"/>
	<meta name="twitter:description" content="The BlackBerry Threat Research and Intelligence SPEAR Team have been tracking a previously unnamed Golang RAT targeting Windows® systems. We’ve dubbed this RAT ChaChi, due to its two key components, Chashell and Chisel. "/>
	<meta name="twitter:image" content="https://blogs.blackberry.com/content/dam/blogs-blackberry-com/images/blogs/2021/06/Chachi-875x530-ibb.png"/>

	

	
	
    
<link rel="stylesheet" href="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-site.min.54dd5587820b16101b4a5bc26ae87194.css" type="text/css">



	
    










	
		
<script>
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-TXGFP23');
</script>



<script async src="https://www.googletagmanager.com/gtag/js?id=AW-944900006"></script>

<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date()); gtag('config', 'AW-944900006');
</script>


		
	

	




<script src="https://kit.fontawesome.com/3c243f8233.js" crossorigin="anonymous"></script>


	
    
    

    
    
    
    


	
</head>
    <body class="page basicpage" data-enable-history="true">
        



	
		
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TXGFP23" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>


		
	

	


        
        
            



            

  
<!--
<sly data-sly-use.templatedContainer="com.day.cq.wcm.foundation.TemplatedContainer"
   data-sly-repeat.child=""
   data-sly-resource=""/>
-->

<header>
    




    
    
    
<!-- BEGIN DO NOT INDEX -->

    

<!-- skip to content: START -->
<a href='#' class='skipNav' tabindex="0">Skip Navigation</a>
<!-- skip to content: END-->
<!-- BEGIN DO NOT INDEX -->

  <nav class="blogs-navigationv2 bb-blogs-navbar navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="https://blogs.blackberry.com">
        <svg width="175px" height="30px" viewBox="0 0 175 30" version="1.1">
          <title>BlackBerry Logo</title>
          <g id="Creative" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
              <g id="21-product-page-Protect-02.15.22" transform="translate(-91.000000, -10.000000)" fill="#FFFFFF" fillRule="nonzero">
                  <g id="BB_White" transform="translate(91.000000, 10.000000)">
                      <path d="M9.18042011,2.14285967 C9.18042011,1.19318021 8.5959918,-1.17624431e-15 6.16086942,-1.17624431e-15 C5.16247216,-1.17624431e-15 2.4107723,-1.17624431e-15 2.4107723,-1.17624431e-15 L1.33931598,4.94318021 C1.33931598,4.94318021 3.36046941,4.94318021 5.25986363,4.94318021 C8.32813214,4.91883014 9.18042011,3.48214033 9.18042011,2.14285967 Z" id="Shape"></path>
                      <path d="M19.2861873,2.14285967 C19.2861873,1.19318021 18.701759,-1.17624431e-15 16.2666366,-1.17624431e-15 C15.2682393,-1.17624431e-15 12.5165395,-1.17624431e-15 12.5165395,-1.17624431e-15 L11.4450831,4.94318021 C11.4450831,4.94318021 13.4662366,4.94318021 15.3412807,4.94318021 C18.4338993,4.91883014 19.2861873,3.48214033 19.2861873,2.14285967 Z" id="Shape_1_"></path>
                      <path d="M7.84110413,9.54545936 C7.84110413,8.59578874 7.25667582,7.4025997 4.82155344,7.4025997 C3.82315617,7.4025997 1.07145632,7.4025997 1.07145632,7.4025997 L5.68518084e-15,12.3457799 C5.68518084e-15,12.3457799 2.02115343,12.3457799 3.89619757,12.3457799 C6.96445725,12.3457799 7.84110413,10.88474 7.84110413,9.54545936 Z" id="Shape_2_"></path>
                      <path d="M17.9468713,9.54545936 C17.9468713,8.59578874 17.362443,7.4025997 14.9273206,7.4025997 C13.9289233,7.4025997 11.1772235,7.4025997 11.1772235,7.4025997 L10.1057671,12.3457799 C10.1057671,12.3457799 12.1269206,12.3457799 14.0263148,12.3457799 C17.0702244,12.3457799 17.9468713,10.88474 17.9468713,9.54545936 Z" id="Shape_3_"></path>
                      <path d="M28.5153164,6.55032938 C28.5153164,5.60064992 27.930888,4.40746971 25.4957657,4.40746971 C24.4973684,4.40746971 21.7456774,4.40746971 21.7456774,4.40746971 L20.6742211,9.35064992 C20.6742211,9.35064992 22.6953745,9.35064992 24.5704186,9.35064992 C27.6386695,9.32629985 28.5153164,7.88961005 28.5153164,6.55032938 Z" id="Shape_4_"></path>
                      <path d="M27.0542412,14.2694801 C27.0542412,13.3198006 26.4698129,12.1266204 24.0346816,12.1266204 C23.0362844,12.1266204 20.2845934,12.1266204 20.2845934,12.1266204 L19.213137,17.0698006 C19.213137,17.0698006 21.2342905,17.0698006 23.1093346,17.0698006 C26.1775943,17.0698006 27.0542412,15.6087696 27.0542412,14.2694801 Z" id="Shape_5_"></path>
                      <path d="M16.4857961,17.2889601 C16.4857961,16.3392807 15.9013678,15.1461005 13.4662366,15.1461005 C12.4678393,15.1461005 9.71614827,15.1461005 9.71614827,15.1461005 L8.64469195,20.0892807 C8.64469195,20.0892807 10.6658454,20.0892807 12.5408895,20.0892807 C15.6091492,20.0649306 16.4857961,18.6282496 16.4857961,17.2889601 Z" id="Shape_6_"></path>
                      <path d="M83.7683052,18.75 C83.5978459,19.11526 82.7455491,20.7711005 80.6026453,20.7711005 C78.1188139,20.7711005 77.1447667,18.701291 77.1447667,17.191551 C77.1447667,14.6590813 78.8493515,12.3944712 81.3575329,12.3944712 C84.0605238,12.3944712 84.6936523,14.4155717 84.7667113,14.7808317 L88.7359591,14.7808317 C88.9794775,13.2954417 87.786262,8.74187154 81.5036422,8.74187154 C76.9012483,8.74187154 73.2242102,12.4188213 73.2242102,17.3133014 C73.2242102,21.331161 75.7323917,24.4236913 80.3834769,24.4236913 C86.1790775,24.4236913 87.7375619,19.8701212 87.9323713,18.7499912 L83.7683052,18.7499912 L83.7683052,18.75 Z" id="Shape_7_"></path>
                      <path d="M53.2805356,19.8457799 C53.2805356,19.6022703 53.3535858,19.1639601 53.5483953,18.2629897 C53.7432047,17.3376603 56.5435959,4.40746971 56.5435959,4.40746971 L52.8178577,4.40746971 L49.7252479,18.6769498 C49.6034887,19.2857193 49.5304385,19.87013 49.5304385,20.3814904 C49.5304385,23.4983708 51.9412108,24.4237002 53.889314,24.4237002 C54.5711514,24.4237002 55.22863,24.3019498 55.3747393,24.2775909 C55.4477895,23.961031 56.0322266,21.2824609 56.0565767,21.1607105 C55.9835265,21.1607105 55.5695487,21.2094107 55.0825295,21.2094107 C53.6945045,21.2094107 53.2805356,20.625 53.2805356,19.8457799 Z" id="Shape_8_"></path>
                      <polygon id="Shape_9_" points="106.220152 8.76623044 101.033339 8.76623044 94.3367415 14.7808405 96.6014133 4.38311963 92.8269661 4.38311963 88.5654909 24.1071403 92.3155881 24.1071403 93.3626943 19.3100606 95.6760575 17.4837696 98.8660763 24.1071403 103.054492 24.1071403 98.5251576 15.2435096"></polygon>
                      <path d="M32.7767827,18.0194801 C33.0933514,16.6071403 35.7232832,4.38311963 35.7232832,4.38311963 C35.7232832,4.38311963 40.2769681,4.38311963 42.8338497,4.38311963 C47.9963131,4.38311963 49.2625788,7.25649924 49.2625788,8.98538995 C49.2625788,12.8327903 45.6342409,13.8555199 45.1959219,13.9772703 C45.6098908,14.1233708 47.971963,15.0487002 47.971963,18.0681802 C47.971963,21.3555199 44.9524035,24.107459 40.2526181,24.107459 C40.2526181,24.107459 38.5723834,24.107459 38.1097143,24.107459 C34.1404576,24.1314904 32.0218951,21.4042201 32.7767827,18.0194801 Z M43.905306,17.7759705 C43.905306,16.8506411 43.2965277,15.681811 40.666587,15.681811 L37.2330585,15.681811 L36.2103112,20.4545406 L40.1065088,20.4545406 C42.5903401,20.4545406 43.905306,19.3100606 43.905306,17.7759705 Z M45.1715718,9.8133102 C45.1715718,8.86363075 44.4410342,8.0357105 42.6633904,8.0357105 L38.8645931,8.0357105 L38.0122963,12.0292201 L41.9815529,12.0292201 C44.0757654,12.0292201 45.1715718,10.9821403 45.1715718,9.8133102 Z" id="Shape_10_"></path>
                      <path d="M104.515568,18.0194801 C104.832136,16.6071403 107.462068,4.38311963 107.462068,4.38311963 C107.462068,4.38311963 112.015753,4.38311963 114.572626,4.38311963 C119.735089,4.38311963 121.001364,7.25649924 121.001364,8.98538995 C121.001364,12.8327903 117.373026,13.8555199 116.934707,13.9772703 C117.348667,14.1233708 119.710748,15.0487002 119.710748,18.0681802 C119.710748,21.3555199 116.666847,24.107459 111.991394,24.107459 C111.991394,24.107459 110.311159,24.107459 109.84849,24.107459 C105.879234,24.1314904 103.76068,21.4042201 104.515568,18.0194801 Z M115.644091,17.7759705 C115.644091,16.8506411 115.035304,15.681811 112.405372,15.681811 L108.947493,15.681811 L107.924737,20.4545406 L111.820935,20.4545406 C114.329125,20.4545406 115.644091,19.3100606 115.644091,17.7759705 Z M116.910348,9.8133102 C116.910348,8.86363075 116.17981,8.0357105 114.377825,8.0357105 L110.603378,8.0357105 L109.751081,12.0292201 L113.720347,12.0292201 C115.81455,12.0292201 116.910348,10.9821403 116.910348,9.8133102 Z" id="Shape_11_"></path>
                      <path d="M146.789339,8.76623044 C142.820083,8.76623044 140.092742,11.1282408 139.191745,15.5357105 C138.802126,17.4350606 137.365401,24.1071403 137.365401,24.1071403 L141.091139,24.1071403 C141.091139,24.1071403 142.454814,17.7516204 142.893133,15.75487 C143.45322,13.1493501 144.841236,12.2483796 146.69193,12.2483796 C147.300717,12.2483796 147.665986,12.3214298 147.860795,12.3457799 C147.958196,11.8100694 148.493915,9.44805023 148.615674,8.88798965 C148.226055,8.86363957 147.592918,8.76623044 146.789339,8.76623044 Z" id="Shape_12_"></path>
                      <path d="M159.451988,30 L171.968527,8.76623044 L167.950571,8.76623044 L162.20367,18.75 L160.864354,8.74188037 C160.864354,8.74188037 158.818851,8.74188037 156.554179,8.74188037 C151.610875,8.74188037 149.054002,11.0064904 148.153005,15.316551 C147.690327,17.4594107 146.253602,24.1071315 146.253602,24.1071315 L149.97934,24.1071315 C149.97934,24.1071315 151.343015,17.8003117 151.903085,15.2678508 C152.438822,12.8084314 154.265166,12.0535613 156.23761,12.4675303 L157.016848,8.83928067 C157.601285,12.2727209 159.378911,23.2792113 159.378911,23.2792113 L155.482714,30 L159.451988,30 L159.451988,30 Z" id="Shape_13_"></path>
                      <path d="M64.0437813,17.5811699 C64.871728,17.4594195 67.2581502,17.0941595 67.599069,17.0454594 C67.5260099,17.313319 67.4529597,17.7029291 67.3799095,18.0194889 C66.9415816,19.8701388 65.0665375,21.063319 62.972325,21.063319 C61.633009,21.063319 60.8537712,20.3571492 60.8537712,19.5048788 C60.8294212,18.7987002 61.4869085,17.9464298 64.0437813,17.5811699 Z M62.6314151,13.5876603 C62.7288242,13.4415598 63.6785213,11.9561699 66.0649435,11.9561699 C67.5503688,11.9561699 68.3052565,12.4918804 68.3052565,13.1493501 C68.3052565,14.0746706 66.8198312,14.3181802 64.2142406,14.6834402 C59.7579648,15.3165598 56.9332236,16.7045406 56.9332236,19.9188301 C56.9332236,22.2077903 58.8326178,24.4237002 62.193096,24.4237002 C64.9934872,24.4237002 66.4545624,22.7435096 66.5763216,22.5974003 C66.6006717,23.0113604 66.6493719,23.62013 66.6737308,24.1071403 C66.9902906,24.1071403 69.5715222,24.1071403 70.5212282,24.1071403 C70.399469,23.4496706 70.1072504,22.1590901 70.5699283,20.1136307 C70.8134379,19.0422009 71.4952754,15.9496706 71.8361941,14.24513 C72.4936815,11.0064904 70.7160376,8.74188037 66.1867116,8.74188037 C60.3424108,8.74188037 58.6621673,12.9301906 58.3943076,13.5876603 L62.6314151,13.5876603 Z" id="Shape_14_"></path>
                      <path d="M131.862019,19.5292201 C131.715918,19.8214298 130.814921,21.0876603 128.793759,21.0876603 C125.871617,21.0876603 125.214139,18.6038995 125.28718,17.9464298 C126.845665,17.9464298 135.831275,17.9464298 136.659213,17.9464298 C136.732272,17.6785702 136.975791,16.6558493 136.975791,15.6087696 C136.975791,12.00487 134.540668,8.71753912 129.621714,8.71753912 C125.11673,8.71753912 121.512742,12.4918892 121.512742,16.9967592 C121.512742,21.3311787 124.118324,24.423709 128.745059,24.423709 C134.443259,24.423709 135.977393,19.9675391 136.123494,19.5292289 C135.100738,19.5292201 131.862019,19.5292201 131.862019,19.5292201 Z M129.670406,12.1266204 C132.178587,12.1266204 133.128284,13.6607105 133.030884,14.8782408 C131.594159,14.8782408 127.308342,14.8782408 125.84725,14.8782408 C126.042068,14.0990295 127.235283,12.1266204 129.670406,12.1266204 Z" id="Shape_15_"></path>
                      <path d="M171.979978,19.5027334 C173.12535,19.5027334 174.087452,20.4108465 174.087452,21.6216668 C174.087452,22.8557689 173.10243,23.7406002 171.979978,23.7406002 C170.834615,23.7406002 169.849603,22.8324871 169.849603,21.6216668 C169.849603,20.4108465 170.834615,19.5027334 171.979978,19.5027334 Z M171.979978,19.8520043 C171.017877,19.8520043 170.26193,20.620409 170.26193,21.6216668 C170.26193,22.6462064 171.017877,23.4146111 171.979978,23.4146111 C172.942098,23.4146111 173.675125,22.6694882 173.675125,21.6216668 C173.675125,20.620409 172.919178,19.8520043 171.979978,19.8520043 Z M171.52183,22.8557689 L171.155316,22.8557689 L171.155316,20.4108465 L172.071613,20.4108465 C172.644299,20.4108465 172.919178,20.620409 172.919178,21.109397 C172.919178,21.5518126 172.644299,21.7380934 172.277768,21.7846569 L172.964991,22.8557689 L172.552655,22.8557689 L171.911246,21.7846569 L171.49891,21.7846569 L171.49891,22.8557689 L171.52183,22.8557689 Z M171.521821,21.4819585 L171.957076,21.4819585 C172.415225,21.4819585 172.552664,21.3422501 172.552664,21.0861152 C172.552664,20.8532621 172.438127,20.7135538 172.025792,20.7135538 L171.521821,20.7135538 L171.521821,21.4819585 L171.521821,21.4819585 Z" id="Shape_16_"></path>
                  </g>
              </g>
          </g>
      </svg>
      </a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/cybersecurity">Cybersecurity</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/automotive">Automotive & IOT</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://blogs.blackberry.com/en/category/critical-event-management">Critical Communications</a>
          </li>
        </ul>


        <ul class="navbar-nav ml-auto">
          <li class="nav-item">

            <a class="nav-link open-search-btn" role="button">
              <svg aria-hidden="true" data-prefix="fa" data-icon="search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg="">
                <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z">
                </path>
              </svg>
            </a>
            <div id="searchOverlay" class="search-overlay">
              <span class="close-search-btn" title="Close Search">×</span>
              <div class="overlay-content">
                <form id="search-form">
                  <input id="search-form--input" description="Search" data-search-url="https://blogs.blackberry.com/en/search" type="text" placeholder="Search" name="search"/>
                  <button type="submit">
                    <svg aria-hidden="true" data-prefix="fa" data-icon="search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg="">
                      <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z">
                      </path>
                    </svg>
                  </button>
                </form>
              </div>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>



<!-- END DO NOT INDEX -->




<!-- END DO NOT INDEX -->

    
    
    <div class="hero">

      <div class="jumbotron mastheadDefault">
        <div class="hero-container narrower" style="background-image: url( \2f content\2f dam\2f blackberry-com\2fImages\2fsupport\2f bgs\2f bnr-blue-gradient-crop.jpg)">
          
          <div class="mask  "></div>

          <div class="container headings  l-align">
            <div class="col-lg-12">
          		




    
    
    <div class="blog-name-title">

  <div class="cmp-title ">
  
  
   <!-- <span class="highlighted-text-title blogs">INSIDE</span>
   <span class="normal-text-title">BlackBerry Blog</span> -->
   <span class="normal-text-title">BlackBerry Blog</span>
  
  
  
</div>
</div>



          	</div>
          </div>
      </div>
    </div>
</div>



</header><main>
    




    
    
    <div class="section">
  <section class="section     ">
    
    <div class="container">
        




    
    
    
<ol class="breadcrumb">
    <li class="breadcrumb-item ">
        <a href="/en.html">BlackBerry Blog</a>
    </li>

    <li class="breadcrumb-item active">
        PYSA Loves ChaChi: a New GoLang RAT
    </li>
</ol>

    


      
    </div>
  </section>
    

</div>


    
    
    <div class="blogsection">
    <section class="section     ">
      
      <div class="container sectionPadding py-0">
           
      <div class="col-md-9 col-lg-9 col-sm-12">
          




    
    
    <div class="cmp cmp-title blog-title row">
  

<div class="col-md-12 col-lg-12 col-sm-12">
<h1>PYSA Loves ChaChi: a New GoLang RAT</h1>
</div>



    
</div>


    
    
    <div class="categorydateauthor"><!--Pulling author bio from author page-->
<div class="categorydateauthor">
<span><a title="RESEARCH &amp; INTELLIGENCE" href="/en/category/research-and-intelligence">RESEARCH &amp; INTELLIGENCE</a> / </span><span class='publish-date'></span>06.23.21 / </span>

    <span class="author"><a href="/en/author/the-blackberry-research-and-intelligence-team">The BlackBerry Research and Intelligence Team</a></span>

</div></div>


    
    
    <div class="socialsharing">

<div class="socialSharing row">
	<ul class="socialSharing-icons">
		<li>
			<a href="https://x.com/intent/tweet?url=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat&text=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&via=BlackBerry" title="Share on X" target="_blank" class="x-share">
				<span class="sr-only sr-only-focusable">Share on X</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--tw" aria-hidden="true">
					<svg viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z"></path></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat" title="Share on Facebook" target="_blank" class="facebook-share">
				<span class="sr-only sr-only-focusable">Share on Facebook</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--fb" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264 512"><path d="M76.7 512V283H0v-91h76.7v-71.7C76.7 42.4 124.3 0 193.8 0c33.3 0 61.9 2.5 70.2 3.6V85h-48.2c-37.8 0-45.1 18-45.1 44.3V192H256l-11.7 91h-73.6v229"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.linkedin.com/shareArticle?mini=true&url=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat&title=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&summary=&source=blogs.blackberry.com" title="Share on LinkedIn" target="_blank" class="linkedin-share">
				<span class="sr-only sr-only-focusable">Share on LinkedIn</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--li" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448.1 512"><path d="M100.3 448H7.4V148.9h92.9V448zM53.8 108.1C24.1 108.1 0 83.5 0 53.8S24.1 0 53.8 0s53.8 24.1 53.8 53.8-24.1 54.3-53.8 54.3zM448 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448h-.1z"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="mailto:?subject=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&body=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat" title="Email" class="email-share">
				<span class="sr-only sr-only-focusable">Email</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--email" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"/></svg>
				</span>
			</a>
		</li>
	</ul>
</div>
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_2146582912.coreimg{.width}.png/1690330506500/chachi-875x530-ibb.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/Chachi-875x530-ibb.png" data-asset-id="52f12e67-5f46-47b6-b57f-301bb0ead3a8" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/Chachi-875x530-ibb.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <h3><b>Executive Summary</b></h3>
<p>The <a href="https://blogs.blackberry.com/en/author/the-blackberry-research-and-intelligence-team" target="_blank">BlackBerry Threat Research and Intelligence SPEAR® Team</a> have been tracking a previously unnamed Golang <a title="Remote Access Trojan" href="https://www.blackberry.com/us/en/solutions/endpoint-security/ransomware-protection/remote-access-trojan">remote access Trojan (RAT)</a> targeting Windows® systems. We’ve dubbed this RAT ChaChi. This Trojan has been used by operators of the PYSA (aka <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.mespinoza" target="_blank">Mespinoza</a>) ransomware as part of their toolset to attack victims globally, but most recently targeting education organizations.</p>
<p>ChaChi is another entry in the expanding list of malicious software written in Go, also known as Golang, which is a relatively young programming language. As this is such a new phenomenon, many core tools to the analysis process are still catching up. This can make Go a more challenging language to analyze.</p>
<p>ChaChi has been observed in the wild since at least the first half of 2020 without receiving much attention from the cybersecurity industry. The first known variant of ChaChi was used in <a href="https://www.zdnet.com/article/france-warns-of-new-ransomware-gang-targeting-local-governments/" target="_blank">attacks</a> on the networks of local government authorities in France, and was listed as an indicator of compromise (IoC) in a <a href="https://www.cert.ssi.gouv.fr/uploads/CERTFR-2020-CTI-003.pdf" target="_blank">publication</a> by CERT France at the time of the attacks.</p>
<p>That first variant of ChaChi was very clearly a new tool in the PYSA operator’s arsenal as it lacked the obfuscation, port-forwarding and DNS tunnelling capabilities that were employed in the vast majority of observed variants, since those attacks indicated some time was invested to rapidly develop ChaChi into the tool it is today.</p>
<p>Since then, BlackBerry analysts have observed the later, more refined versions of ChaChi being deployed by the PYSA Ransomware operators in a campaign that has shifted its focus to targeting educational institutions across the U.S., which has seen a recent increase in activity as reported by the <a href="https://www.ic3.gov/Media/News/2021/210316.pdf" target="_blank">FBI</a>.</p>
<p>BlackBerry has conducted many investigations and responded to incidents involving PYSA ransomware in which ChaChi was also identified on hosts in the victim environment.</p>
<p>Key highlights of the PYSA campaign include:</p>
<ul>
<li><b>Defense Evasion:</b> PowerShell scripts to uninstall/stop/disable antivirus and other essential services.</li>
<li><b>Credential Access:</b> Dumping credentials from LSASS without Mimikatz (comsvcs.dll).</li>
<li><b>Discovery: </b>Internal network enumeration using Advanced Port Scanner.</li>
<li><b>Persistence: </b>ChaChi installed as a Service.</li>
<li><b>Lateral Movement: </b>RDP and PsExec.</li>
<li><b>Exfiltration:</b> Likely over ChaChi tunnel (not observed).</li>
<li><b>Command and Control (C2)</b>: ChaChi RAT.</li>
</ul>
<h3><b>Introduction</b></h3>
<p>The name <i>ChaChi</i> comes from two key components of the RAT, <b>Cha</b>shell and <b>Chi</b>sel. These are tools used by the malware operators to perform their intended actions, rather than creating bespoke tools to accomplish this functionality.</p>
<p>The first versions of PYSA have been floating around since late 2018. This threat’s name comes from the file extension (.PYSA) used by early variants to rename encrypted files, and from its ransom note that warned victims to “<i>Protect Your System Amigo</i>.”</p>
<p>This threat is also sometimes referred to as Mespinoza, so named because of the email address used in the dropped ransom notes. The actors behind the PYSA/Mespinoza ransomware campaigns have not been publicly attributed at the time of writing.</p>
<p>The PYSA campaigns are some of the latest in a relatively new breed of malware. Rather than depending on automated propagation to find new victim machines by searching for exploits and vulnerabilities, PYSA campaigns follow the style of “big game hunting” or human-orchestrated and controlled attacks on a given target.</p>
<p>This is a notable change in operation from earlier notable ransomware campaigns such as <a href="https://blogs.blackberry.com/en/2017/07/threat-spotlight-petya-like-ransomware-is-nasty-wiper" target="_blank">NotPetya</a> or <a href="https://blogs.blackberry.com/en/2017/05/threat-spotlight-wannacry-ransomware" target="_blank">WannaCry</a>. These actors are utilizing advanced knowledge of enterprise networking and security misconfigurations to achieve lateral movement and gain access to the victim’s environments. These newer types of attacks frequently exfiltrate data, steal credentials, and use other commodity malware in addition to bespoke malware such as ChaChi during campaigns.</p>
<h3><b>PYSA Attacks Change Targets</b></h3>
<p>The earliest&nbsp;variant of ChaChi was used in <a href="https://www.zdnet.com/article/france-warns-of-new-ransomware-gang-targeting-local-governments/" target="_blank">attacks</a>&nbsp;on the networks&nbsp;of local government authorities in France in March of 2020. Since then, PYSA, and therefore ChaChi, have been observed in attacks across a variety of industries. This includes healthcare organizations, private companies, and most notably, a recent surge in attacks against educational institutions as reported by the FBI earlier this year. In these recent attacks, PYSA ransomware has been found across 12 U.S. states and in the UK, in data breaches targeting higher education and K-12 schools.</p>
<p>These targeted business verticals have been a focal point for attackers and are continuing to be compromised at an alarming rate. This may be due in part to healthcare and educational organizations being more susceptible to cyberattacks as they are less likely to have established security infrastructures or may lack the resources to prioritize security.</p>
<p>Healthcare and education organizations also host large volumes of sensitive data, making them more valuable targets. It is not uncommon for schools and hospitals to have legacy systems, poor email filtering, no data backups, or unpatched systems in their environments. This leaves their networks more vulnerable to exploits and ransomware attacks.</p>
<p>It is particularly concerning that attackers are focusing so heavily on education organizations, as they are especially vulnerable. Higher education environments tend to function like miniature cities, with a heavy cultural emphasis on information-sharing. Not only do they host significant quantities of business data; schools also host traffic from students living on campus.</p>
<p>These students often have little security awareness training, and they might fall victim to suspicious emails, fail to recognize questionable websites, or download malicious programs onto their personal devices while connected. These factors contribute to these industries being easy but valuable targets to threat actors and may explain the sudden increase in PYSA actors attacking educational institutions.</p>
<h3><b>Evolution</b></h3>
<p>It is possible to map out an approximate timeline for the evolution of ChaChi by taking a number of factors into account such as:<br>
</p>
<ul>
<li>First documented sightings of ChaChi variants in the wild.</li>
<li>First seen dates of C2 Domains extracted from samples of ChaChi.</li>
<li>First occurrences of specific functionality in ChaChi variants.<br>
</li>
</ul>
<p>Correlation of each of these data points allow us to give an approximation for the code development timeline for ChaChi:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_646373372.coreimg{.width}.png/1690330506506/chachi-fig01.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig01.png" data-asset-id="a4862036-ef0e-4516-b9a5-5a6528cc296a" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig01.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 1 - Approximate ChaChi Evolution Timeline.</i></p>
<p>We estimate that ChaChi was first developed no earlier than mid-2019. The actual development time was more likely to be the beginning of 2020.</p>
<p>After initial sightings in attacks during the first quarter of 2020, ChaChi’s code was altered to include obfuscation and persistence in late March or early April. Very soon after that, we started seeing ChaChi variants with the added DNS tunnelling and Port-Forwarding/Proxy functionality. There have been few noteworthy changes after that point.</p>
<h3><b>Obfuscation</b></h3>
<p>Golang malware has been around for a number of years, but obfuscation of Go malware is still relatively uncommon. The Ekans ransomware appeared to be <a href="https://www.dragos.com/blog/industry-news/ekans-ransomware-and-ics-operations/" target="_blank">leveraging</a> a new Go obfuscation technique in December 2019, although the technique was not explicitly named at the time.</p>
<p>At the end of 2020, researchers <a href="https://threatpost.com/blackrota-golang-backdoor-obfuscation/161544/" target="_blank">reported</a> the discovery of “BlackRota”, an ELF backdoor written in Go. They declared it “<i>the most obfuscated Go-written malware in ELF format that we have found to date</i>”.</p>
<p>The obfuscation used in Ekans, BlackRota and subsequently ChaChi, was “gobfuscate”, a Golang obfuscation tool publicly available on <a href="https://github.com/unixpickle/gobfuscate" target="_blank">GitHub</a>. BlackBerry analysts observed samples of ChaChi actively using gobfuscate shortly after the release of Ekans, but several months prior to the discovery of BlackRota.</p>
<p>Gobfuscate attempts to make a lot of information that would normally be easily available to the researcher very difficult to recover. It obfuscates the runtime symbol table and type information, such as package names, function names etc., by replacing them with randomly generated names, and obfuscating strings by replacing them with functions:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_283920764.coreimg{.width}.png/1690330506512/chachi-fig02.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig02.png" data-asset-id="2a07423f-15eb-4f6f-b0db-6d169fb71773" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig02.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <i>Figure 2 - Gobfuscated Function Names.<br>
<br>
</i>
    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1054286819.coreimg{.width}.png/1690330506518/chachi-fig03.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig03.png" data-asset-id="7089c82d-5664-4778-8e53-3206348c85c8" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig03.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 3 - Gobfuscated String, which is now a function.</i></p>
<p>This obfuscation was designed with the purpose of avoiding information leakage relating to the Go source code, such as strings, package paths and field names. It has since been adopted by malware authors as a means of hindering analysis and reverse engineering efforts.</p>
<p>Since its discovery as a tool for defence evasion, there have been a number of quite successful attempts and blog postings dedicated to automating string de-obfuscation using plugins for both <a href="https://www.kryptoslogic.com/blog/2020/12/automated-string-de-gobfuscation/" target="_blank">Binary Ninja</a> and <a href="https://www.goggleheadedhacker.com/blog/post/22" target="_blank">Cutter</a>. However, at the time of writing, there is no such plugin or script in existence for IDA.</p>
<p>BlackBerry analysts have developed an internal tool – a IDAPython script – to handle string “de-gobfuscation” and subsequently reduce the time required to analyse gobfuscated binaries. Once the de-gobfuscation script is run across the ChaChi binary when loaded into IDA, it will locate all string decoding functions, extract the encoded bytes, and then perform the necessary XOR operation to recover the original strings. These strings are then used to rename all the decoding functions within, where an encoded string was found, and additionally add comments to the disassembly code view where necessary:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1167460656.coreimg{.width}.png/1690330506524/chachi-fig04.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig04.png" data-asset-id="a5880269-34cd-4063-bd64-3d8a3b88022a" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig04.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 4 - De-Gobfuscated String Function.</i></p>
<p>With the string gobfuscation defeated, there was still the problem of the randomly named packages, etc. On the surface, the obfuscation of the names appeared to be an effective deterrent to analysis. However, when it was investigated more deeply, this was not overly difficult to overcome.</p>
<p>Package names are renamed in a consistent and uniform manner such that components of the same package, function etc. share the same random name. When you combine this knowledge with the fact that the function method names remain largely unaffected by the obfuscation, then once the usage of a particular package was discovered, all entries that used the same random name could also be renamed via a simple IDAPython helper script:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1538130084.coreimg{.width}.png/1690330506530/chachi-fig05.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig05.png" data-asset-id="f12202d3-8994-4f48-9cfe-2afc8ad91f93" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig05.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <i>Figure 5 - Gobfuscated Function Names.<br>
<br>
</i>
    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_925226801.coreimg{.width}.png/1690330506536/chachi-fig06.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig06.png" data-asset-id="303b8f86-10b7-423c-8a8d-93b2b744605b" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig06.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 6 – De-gobfuscated Function Names.</i></p>
<p>With the obfuscation defeated, efforts could be refocused on analysing ChaChi’s functionality and intent.<br>
</p>
<h3><b>Persistence</b></h3>
<p>Shortly after its initial execution ChaChi decodes a service name and service description:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1650864298.coreimg{.width}.png/1690330506542/chachi-fig07.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig07.png" data-asset-id="381c53b6-8ffa-4673-a5f5-8a35dc1ce751" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig07.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 7 - Decode Service Name and Description.</i></p>
<p>Using the decoded service name, ChaChi enumerates all installed services to check if a service with the same name already exists. In this case, it is named “JavaJDBC”. If a service with the specified name is found, then ChaChi will randomly select another service name from a hardcoded, albeit gobfuscated, list of service name strings:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_105002288.coreimg{.width}.png/1690330506548/chachi-fig08.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig08.png" data-asset-id="e2ff67e4-b8a6-4155-b5a7-d1e409eb019c" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig08.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <i>Figure 8 - Check if Service Name Exists.</i><br>
<br>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_594670744.coreimg{.width}.png/1690330506554/chachi-fig09.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig09.png" data-asset-id="47b09cd2-5ff2-4be3-a92f-b25e1c91b270" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig09.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 9 - Decoding Alternate Service Names.</i></p>
<p>After determining an appropriate name to use for service installation, ChaChi then checks to see if it has sufficient administrator privileges to carry out the service creation operation:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_831584127.coreimg{.width}.png/1690330506560/chachi-fig10.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig10.png" data-asset-id="87e39539-da79-4aa2-843b-ae4b7348f210" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig10.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 10 - Checking if running with Administrative Privileges.</i></p>
<p>If ChaChi is not running with administrative privileges, it bypasses its persistence code and begins to initialize command-and-control (C2) communications. If the backdoor is running with administrative privileges, it will install itself as a new service that is configured to auto-start, before manually starting the service:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1931619727.coreimg{.width}.png/1690330506566/chachi-fig11.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig11.png" data-asset-id="65ede0cc-60a0-47b9-b71e-8af601667647" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig11.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 11 - Install as Service and Start the Service.</i></p>
<h3><b>C2 Communications</b></h3>
<p>ChaChi utilizes two protocols for C2 communications: DNS and HTTP. The primary, preferred method of C2 communication is DNS tunnelling using TXT queries.</p>
<p>TXT or “text” records were originally intended to allow domain admins to associate arbitrary text with a domain, such as domain ownership information or network and server information. Threat actors have taken advantage of this for their own nefarious needs by encoding data in these TXT queries, which is a form of DNS tunnelling.</p>
<p>DNS tunnelling allows malware authors to communicate in a covert channel that can bypass most firewalls. DNS traffic is widely used, and often blindly trusted with little to no monitoring. DNS requests can also get proxied via internal DNS resolvers, making it more difficult to track infected endpoints:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1533005919.coreimg{.width}.png/1690330506572/chachi-fig12.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig12.png" data-asset-id="c900aeb8-d839-4397-8553-58d67d6b5fe2" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig12.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 12 - DNS traffic generated by ChaChi.<br>
 <br>
 </i>Should the DNS communications fail for whatever reason, ChaChi also contains a failover mechanism where it uses HTTP in the form of encoded POST requests to communicate with its C2 servers. HTTP POST requests are generally used to send data to a server to create or update a resource on that server. ChaChi uses these requests for C2 communications instead. Before it can attempt to establish C2 communications, it must first decode its embedded C2 server domains and IP addresses.</p>
<h3><b>Decoding C2 IPs and Domains</b></h3>
<p>ChaChi is preconfigured with a list of C2 domains for DNS tunnelling, as well as IP addresses for HTTP C2 failover. The domains are encoded just like any other string in a gobfuscated binary, using a dedicated function that carries out the XOR decode process:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1531709496.coreimg{.width}.png/1690330506578/chachi-fig13.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig13.png" data-asset-id="64441cb1-8ebf-49d0-a620-9bf4f4160a2b" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig13.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 13 - C2 Domains are Decoded from Gobfuscated functions.</i></p>
<p>The domain that will be used is chosen at random through the use of “Intn” from the “rand” package, which is seeded by the value returned from an earlier call to “time.Now”:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1020314191.coreimg{.width}.png/1690330506584/chachi-fig14.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig14.png" data-asset-id="9c35ae22-fe29-462e-9973-9dfdd9914122" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig14.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 14 - Randomizing C2 Domain Selection.</i></p>
<p>The decoding of the C2 IP addresses is a little more complicated, although not overly so. As with the C2 domains, the inevitable selection of a C2 IP address is also randomized through calls to “time.Now”, “rand.Seed” and “rand.Shuffle”. The C2 IP decoding function takes several arguments: a pointer to the encoded C2 IP array, an integer value indicating the number of encoded IP addresses, and a hex number used in the decoding of each octet of each IP address. The decoding of the C2 IP addresses works as follows:</p>
<ul>
<li>Read a word (2 bytes) at the initial offset into the C2 IP array determined by the earlier shuffle.</li>
<li>Subtract the hex number (0xA in all observed cases) from the retrieved value.</li>
<li>Convert the result to its base 10 equivalent (thereby creating a single octet of an IP).</li>
<li>Repeat 4 times per encoded IP.</li>
<li>Join the decoded octets with a &quot;.&quot; (thus fully decoding a stored C2 IP address).</li>
</ul>
<p>These steps are repeated until all IP addresses have been decoded</p>
<p>The equivalent Python code for the decoding operation can been seen below, or an example CyberChef recipe operating on one encoded IP address can be found <a href="https://gchq.github.io/CyberChef/#recipe=Swap_endianness('Hex',2,true)From_Hex('Auto')Remove_null_bytes()SUB(%7B'option':'Hex','string':'A'%7D)To_Decimal('Space',false)Find_/_Replace(%7B'option':'Regex','string':'%20'%7D,'.',true,false,true,false)&amp;input=QUEwMDFFMDA5RDAwQzIwMA" target="_blank">here</a>.<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_701683394.coreimg{.width}.png/1690330506590/chachi-fig15.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig15.png" data-asset-id="30bdde55-732b-4d7a-a51f-00d37ec6f708" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig15.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 15 - Python Code for C2 Decode.</i></p>
<p>With the C2 addresses decoded, ChaChi can now initiate a connection to its C2 infrastructure.<br>
</p>
<h3><b>Modified Chashell</b></h3>
<p>Rather than implement an entirely bespoke means of DNS tunnelling, the developers opted to leverage an off-the-shelf solution (or at least components of that solution). They used a package called <a href="https://github.com/sysdream/chashell" target="_blank">Chashell</a> that provides a reverse shell over DNS.</p>
<p>Chashell operates by taking data from a shell or terminal that it serializes into <a href="https://developers.google.com/protocol-buffers/" target="_blank">Protocol Buffers</a> before encrypting it using symmetric encryption in the form of XSalsa20 + Poly1305. This encrypted data is then hex encoded and packed into a TXT query. The response to the TXT query is also subject to the same protocol buffer serialization, encryption, and hex encoding:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_944952804.coreimg{.width}.png/1690330506596/chachi-fig16.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig16.png" data-asset-id="c7fb4cac-22f6-44d9-8073-a34ac56201ae" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig16.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 16 - Chashell DNS tunnelling Query and Response.</i></p>
<p>The default Chashell client takes a target domain and symmetric encryption key at build time, both of which are hardcoded. These are then used to establish the encrypted DNS tunnel to the Chashell server. Once a connection is established, it redirects the standard input/output/error from “cmd.exe” or “/bin/sh” – depending on the operating system target – into the DNS tunnel, thereby creating a reverse shell:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_845585128.coreimg{.width}.png/1690330506602/chachi-fig17.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig17.png" data-asset-id="afbcc459-431e-4021-ab89-f7e3c118a56a" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig17.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 17 - Standard Chashell Client Code.</i></p>
<p>The ChaChi operators borrowed the DNS tunnelling transport mechanism from Chashell, but it is no longer operating as a simple reverse shell. They instead opted to make several modifications, including the removal of the default action of spawning a reverse shell, and the addition of an extra layer of encoding on some of the data passing through the DNS stream.</p>
<p>In effect, Chashell is just a cog in the machine that is ChaChi, so it can achieve covert C2 communications. As mentioned, not all data traversing the DNS tunnel is subjected to this additional encoding, which is reserved for a specific proto-buffer field, of which there are five in use by Chashell:<br />
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_862033939.coreimg{.width}.png/1690330506608/chachi-fig18.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig18.png" data-asset-id="01a17557-036e-4b68-bfa7-164835eed567" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig18.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 18 - Chashell Protocol Buffer Message.</i></p>
<ul>
<li><b>ClientGUID: </b>This field is an ID that uniquely identifies messages from a specific client so they can be correctly processed by the server. ClientGUID fields are present in all messages.</li>
<li><b>ChunkStart</b>: This message is used to identify messages that belong to the same “chunk”.</li>
<li><b>ChunkData: </b>This is the message which transports the core data that will traverse the tunnel. In the case of a standard Chashell, this would contain the output of the standard streams. These messages contain data that needs to be reconstructed based on the information provided by a “ChunkStart” message.</li>
<li><b>PollQuery: </b>These messages are like heartbeat messages from the client to the server to query if there are commands/data waiting to be transmitted.</li>
<li><b>Infopacket:</b>These messages are used to transport the hostname of the client to the server as a means of more easily identifying active Chashell sessions. Only the “ChunkData” messages, in particular the “packet” field of that message, are subjected to the additional custom encoding that is not present in the standard Chashell client source code:<br>
</li>
</ul>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_141849546.coreimg{.width}.png/1690330506614/chachi-fig19.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig19.png" data-asset-id="98e19b58-613d-44ee-b108-5981fdb6f464" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig19.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 19 - ChunkData message structure.</i></p>
<p>The encoding in “ChunkData” messages happens immediately prior to serializing the data into a protocol buffer, and it is performed in two steps. Step one involves Base64-encoding the data, which is then passed to another function that performs XOR encoding using a hardcoded string:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1085760170.coreimg{.width}.png/1690330506620/chachi-fig20.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig20.png" data-asset-id="df6cdf90-a39e-4378-a2d1-e1c31b08f85d" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig20.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 20 - Base64 and XOR encoding prior to Serialization.</i></p>
<p>Now that we understand how data is encoded, serialized, and encrypted, and we can recover both the XOR key and symmetric encryption key through de-Gobfuscation, it is possible to decrypt ChaChi traffic. We will discuss the decryption process in more depth later. In all samples found and analyzed, the XOR key used was “d*ck” (replace * with an i) and the encryption key was “37c3cb07b37d43721b3a8171959d2dff11ff904b048a334012239be9c7b87f63”. This leaves little doubt that it is a singular threat actor or group behind all attacks where a ChaChi binary was found.<br>
</p>
<h3><b>Alternative/Failover C2</b></h3>
<p>As already mentioned, ChaChi will initially attempt to establish C2 communications over DNS via Chashells DNS Streams. Should those initial attempts fail, it will failover to HTTP:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_397602154.coreimg{.width}.png/1690330506626/chachi-fig21.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig21.png" data-asset-id="4163a208-eeb9-4e0e-a805-cd63872b4f1f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig21.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 21 - C2 Communications Failover.</i></p>
<p>This failover method is not ideal for the ChaChi operators. It does not offer the encryption afforded to the DNS tunnelling, and it is nowhere near as covert.</p>
<p>The HTTP C2 communications are performed using POST requests to one of the randomly selected C2 IPs decoded earlier. The content of the HTTP POST is encoded using Base64 and XOR encoding to offer some level of data protection, in the same way as the data was encoded prior to being serialized into the “ChunkData” messages in the case of DNS tunnelling.</p>
<p>Should the C2 check-in fail, it will rotate through the other decoded C2 IPs in an attempt to create a connection. If a connection is established, ChaChi will encode and send POST requests to the C2 and process its responses:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_726343885.coreimg{.width}.png/1690330506632/chachi-fig22.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig22.png" data-asset-id="b2e42c53-3aa1-4b04-9f69-c994500e63aa" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig22.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 22 - HTTP POST Request and Response Processing.</i></p>
<h3><b>Decrypting C2 Traffic</b></h3>
<p>As the use of HTTP for C2 communications is less complicated and involves less steps when compared to DNS tunnelling, this section will focus on decryption of DNS traffic.</p>
<p>Decryption of both HTTP and DNS C2 traffic is possible because, once we obtain both the XOR and encryption keys, we can reverse the process that has taken plaintext data and converted it to an encrypted form. Each phase in the encoding and encryption process is reversible:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_346798471.coreimg{.width}.png/1690330506638/chachi-fig23.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig23.png" data-asset-id="48a7d6a4-8c9d-4562-ab34-2dc5ceeb1f51" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig23.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 23 - Encoding and Encryption Process to generate TXT Query.</i></p>
<p>To do this, we perform the following steps:<br>
</p>
<ul>
<li>Retrieve DNS TXT queries from packet captures or DNS logs.</li>
<li>Strip the domain name and “.” separators.</li>
<li>Decode the string from hex back to bytes.</li>
<li>Run the decoded content along with the recovered encryption key through a XSalsa20+Poly1305 decryption process.</li>
<li>De-serialize the decrypted data in order to access the packet field of the “ChunkData” messages – other message types are fully decrypted at this point.</li>
<li>Apply XOR decoding using the recovered XOR key to the packet field of each “ChunkData” message.</li>
<li>Base64-decode the result of the XOR operation.</li>
</ul>
<p>The result of the above process yields decrypted and de-serialized protocol buffers as well as the original data that was encoded and packed into “ChunkData” packets. Given our knowledge of the Chashell protocol buffer message structure, we just need to search through the proto-buffer messages for “ChunkStart” messages. These will inform us about both the number of chunks that make up the original data, and also the exact “ChunkData” messages containing that data:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_468513242.coreimg{.width}.png/1690330506644/chachi-fig24.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig24.png" data-asset-id="9e0094a5-845e-4466-8d99-5507a61e712c" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig24.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 24 - ChunkStart Message Structure.</i></p>
<p>If we do this successfully (and apply some formatting), we are able to decrypt the C2 traffic that is exchanged between the ChaChi server and client. If the ChaChi operators were leveraging a standard Chashell build, we would see something like the content below in the decrypted traffic, where it is evident that a reverse shell has been established:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1585577755.coreimg{.width}.png/1690330506650/chachi-fig25.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig25.png" data-asset-id="875c7aa9-69b6-47af-926e-0d37d053d23f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig25.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 25 - Traffic decrypted and Rebuilt from Standard Chashell.</i></p>
<h3><b>C2 Check-In and Commands</b></h3>
<p>The initial check-in data that is sent to the C2 server takes the following form:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1912361089.coreimg{.width}.png/1690330506656/chachi-fig26.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig26.png" data-asset-id="6ff9703d-f1d9-4a5e-8df0-ae12297c7376" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig26.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 26 - C2 Check-in Structure.</i></p>
<p>The “ID” is a hardcoded string value that varies between samples, but generally starts with a 1, 2 or 9, followed by 3 digits (e.g., “1018”). The last three digits are decoded from a gobfuscated string, and the first digit is prepended to the check-in string shortly before check-in.</p>
<p>The MD5 hash is the result of hashing a randomly generated integer value that changes every time ChaChi is executed.</p>
<p>The computer name and username are obtained through the execution of two PowerShell commands that retrieve the values stored in the relevant environment variables:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1540214277.coreimg{.width}.png/1690330506662/chachi-fig27.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig27.png" data-asset-id="6f67f2f6-004a-4f8e-9080-88e06af3fd0f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig27.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 27 - Obtaining Computer and Username using PowerShell.</i></p>
<p>There is a second check-in which occurs that contains just an ID, this time with 2 prepended instead of 1, and the same MD5 from the first check-in. No computer or username is used in the second check-in. Both check-in strings are encoded and encrypted using the method discussed earlier, but it is the responses to each of these individual check-ins that decides what happens next.</p>
<p>Below we can see the two C2 check-ins, and the responses from the server:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1349029853.coreimg{.width}.png/1690330506668/chachi-fig28.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig28.png" data-asset-id="728dc38e-a304-4201-b5e7-c7825fb2340f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig28.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 28 - Decrypted C2 Check-ins and Responses.</i></p>
<p>In the screenshot above, we can see the first check-in string. The response from the server to this first check-in is a string that contains the generated MD5 hash that was passed in the check-in, but with “-zig” appended to it.</p>
<p>The first character of this response (the “9”, in this case) is XOR’d with the first character of the XOR key that is also used in the C2 encoding process (“d” in the sample that generated the above traffic). The result of this XOR operation is further XOR’d with the first, and in this case only, character returned as a response to the second C2 check-in (the letter “m”). The result of these two XOR operations is the number “0”.</p>
<p>This resultant integer, which is not always zero, is the command ID component of a larger string that is passed to a function that will decide the next action that ChaChi has been instructed to take. The expected argument for the command selection function takes the form shown in the image below. The number of arguments expected varies depending on the command ID supplied to ChaChi, but no more than two arguments are expected to follow the command ID. Each element is delimited by triple forward slashes, “///”:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1081474429.coreimg{.width}.png/1690330506674/chachi-fig29.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig29.png" data-asset-id="04a6ab1b-ba99-40b9-b61a-1cca9f0dde4f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig29.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 29 - Command selection and Argument Structure.</i></p>
<p>The possible command ID options and their corresponding action on the host is documented in the table below. Invalid command IDs will not be processed:<br>
<br>
</p>
<table cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="300" valign="top"><p><b>Command ID</b></p>
</td>
<td width="300" valign="top"><p><b>Action</b></p>
</td>
</tr><tr><td width="300" valign="top"><p><b>1</b></p>
</td>
<td width="300" valign="top"><p>Decode Base64 encoded arguments and execute them as a command on the host</p>
</td>
</tr><tr><td width="300" valign="top"><p><b>2</b></p>
</td>
<td width="300" valign="top"><p>Start reverse SOCKS5 proxy server by connecting to provided client address:port</p>
</td>
</tr><tr><td width="300" valign="top"><p><b>3</b></p>
</td>
<td width="300" valign="top"><p>Start reverse SOCKS5 proxy server by connecting to provided client address:port</p>
</td>
</tr><tr><td width="300" valign="top"><p><b>4</b></p>
</td>
<td width="300" valign="top"><p>Restart C2 session</p>
</td>
</tr><tr><td width="300" valign="top"><p><b>7</b></p>
</td>
<td width="300" valign="top"><p>Start Chisel client</p>
</td>
</tr><tr><td width="300" valign="top"><p><b>9</b></p>
</td>
<td width="300" valign="top"><p>Uninstall backdoor – delete service and binary</p>
</td>
</tr></tbody></table>
<p><i>Table 1 - ChaChi Command ID to Operation Mapping.</i></p>
<h3><b>Command Execution</b></h3>
<p>Should the ChaChi operators want to execute a command or run a program on the infected host, the expected command structure would look like the example below. The command to be executed (including any arguments and switches) is encoded into a single Base64 string. ChaChi will handle the decoding and parsing of the string into a command line array, splitting the decoded string on every space encountered:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1009461552.coreimg{.width}.png/1690330506680/chachi-fig30.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig30.png" data-asset-id="0c20d0a5-28cf-451b-8775-b6b844c62576" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig30.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 30 - ChaChi Command Execution Structure.</i></p>
<p>If an attacker wanted to execute something as simple as “whoami”, the command received by ChaChi would look like the string below, where “whoami” is in Base64 encoded form:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1407715482.coreimg{.width}.png/1690330506687/chachi-fig31.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig31.png" data-asset-id="9ecf2d98-da5b-40cd-b8fe-7f7ba664bb37" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig31.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 31 - Format of &quot;whoami&quot; command.</i></p>
<p>ChaChi will parse this string, identify it as a command, decode it from Base64, and reconstruct the command line string:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_12954616.coreimg{.width}.png/1690330506693/chachi-fig32.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig32.png" data-asset-id="e43853aa-dc90-415e-bcbd-86825c533abc" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig32.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 32 - Base64 Decoding of command argument - &quot;whoami&quot;.</i></p>
<p>If the program name itself contains no path separators (as is the case in this example), the underlying Go function “os.exec.Command” will resolve the complete path name where possible. Otherwise, it uses the name directly as the path before executing the command:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_993560184.coreimg{.width}.png/1690330506699/chachi-fig33.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig33.png" data-asset-id="db1f1f34-c2d4-4a99-bb9a-2e425a47e033" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig33.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 33 - Executing Command.</i></p>
<h3><b>Reverse SOCKS5 Proxy</b></h3>
<p>SOCKS proxies are a much-used tool by Red Teams and threat actors, as they offer a level of anonymity by making traffic appear as if it is originating from one machine when it is in fact coming from a different machine. SOCKS proxies and in particular reverse SOCKS proxies, can also provide attackers with a means of persistent access into an otherwise inaccessible private network from a machine on the Internet.</p>
<p>The developers of ChaChi again opted to avoid reinventing the wheel when they decided to add SOCKS proxy functionality into ChaChi. They have borrowed yet more code, this time from what appears to be <a href="https://github.com/brimstone/rsocks" target="_blank">rsocks</a>.</p>
<p>“Rsocks” is a reverse SOCKS5 client and server, but only the server-side code has been integrated into ChaChi. A default rsocks build does not offer any form of encryption of the traffic traversing the proxy, so the ChaChi authors decided to add that functionality to their version of the code. They did this by swapping out the standard call to “net.Dial” with the more secure alternative “crypto[.]tls[.]DialWithDialer”, which encrypts the proxied traffic using TLS:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_577294809.coreimg{.width}.png/1690330506705/chachi-fig34.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig34.png" data-asset-id="22e693eb-fc92-4e9e-baef-f6ed5fddf39a" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig34.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <i>Figure 34 - Original rsocks source code with &quot;net.Dial&quot;.<br>
<br>
</i>
    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_821118759.coreimg{.width}.png/1690330506711/chachi-fig35.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig35.png" data-asset-id="c1f02aa0-9d36-4335-8983-9fd71ea6ca77" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig35.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 35 - Modified &quot;rsocks&quot; with added TLS encryption.</i></p>
<p>When the ChaChi operators wish to start the proxy server on the infected host, the expected command structure would look like the example in the picture below. In the case of the reverse SOCKS5 proxy, a command ID of 2 or 3 is accepted, because both have the exact same effect:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_708443049.coreimg{.width}.png/1690330506717/chachi-fig36.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig36.png" data-asset-id="52e5c73c-e554-4df8-93d5-ef441b47ad48" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig36.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 36 - Reverse SOCKS5 Proxy Command Structure.</i></p>
<p>The client address can take the form of an IP or domain. The example in the image below is trying to connect to a client listening on the same machine (i.e., 127.0.0.1) and port 8080. This is the equivalent of running “<i>rsocks -connect 127.0.0.1:8080</i>”. In the case of the ChaChi operators, the “127.0.0.1” could also be replaced by one of their public C2 IPs or domains:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1535746869.coreimg{.width}.png/1690330506727/chachi-fig37.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig37.png" data-asset-id="6cba221d-c255-4069-ad4f-4c4551e0d7da" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig37.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 37 - Reverse SOCKS5 proxy command example.</i></p>
<p>Base64 encoding is not a requirement for the reverse socks proxy. ChaChi simply parses out the client address and port, joins them with a colon, and passes that new string to the reverse SOCKS5 proxy setup code that sets up the proxy session:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_2135977399.coreimg{.width}.png/1690330506733/chachi-fig38.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig38.png" data-asset-id="4dc2e2e6-ca80-4f1c-836f-4afac032cf20" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig38.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 38 - Passing parsed “client:port” string to reverse socks Go routine.</i></p>
<p>With a SOCKS5 proxy session established, the ChaChi operators can now run tools such as nmap through the proxy in order to scan the compromised internal network. As this is a reverse proxy, it is the server component that initiates the connection to the client. This is obviously the better option for the operators of ChaChi, because they will be operating from behind enemy lines, so to speak.</p>
<p>It is notable that the string “Starting server” from rsocks is not present in ChaChi. Instead, it is replaced with “Starting client”, which appears in other Golang-base SOCKS proxy code such as the <a href="https://github.com/llkat/rsockstun/blob/master/rclient.go" target="_blank">rclient</a> component of <a href="https://github.com/llkat/rsockstun" target="_blank">rsockstun</a>. It is possible that this is a remnant of experimentation during the development process, as the first iteration of ChaChi was confirmed by BlackBerry analysts as using <a href="https://github.com/armon/go-socks5" target="_blank">go-socks5</a>, which is yet another Golang based SOCKS5 server. This indicates that ChaChi developers seem take what they require and leave what they don’t:</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_788349601.coreimg{.width}.png/1690330506739/chachi-fig39.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig39.png" data-asset-id="6b8bc46b-5103-420a-8dff-351105386d2b" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig39.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <i>Figure 39 - Default &quot;Starting server&quot; string.<br>
<br>
</i>
    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_781513959.coreimg{.width}.png/1690330506745/chachi-fig40.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig40.png" data-asset-id="31a0a3d2-d35a-4b64-9eda-a9cab3229f82" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig40.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 40 - Modified &quot;Starting client&quot; string.</i></p>
<h3><b>New C2 Session</b></h3>
<p>Command ID 4 triggers a new C2 session. No other arguments are expected or even parsed if they should be provided. This option would be useful in the event of a session timeout or if the session has become unresponsive and the attackers wanted to establish a fresh session. The other choice that is made is whether to connect over DNS or HTTP, but this is automatically determined by which connection protocol was successful in earlier attempts, rather than through any external action:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_208905929.coreimg{.width}.png/1690330506751/chachi-fig41.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig41.png" data-asset-id="346392f2-735c-4738-9a7b-5311c503c164" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig41.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 41 - Command ID 4 triggers a new C2 Connection over DNS or HTTP.</i></p>
<h3><b>Chisel Client</b></h3>
<p>Chisel is an application that simplifies port-forwarding and is useful in scenarios where an attacker might not have access to an SSH client or server, as SSH is normally the tool of choice for port-forwarding when it’s available. However, the majority of Windows operating systems either do not have it installed, or it is disabled by default.</p>
<p>Port-forwarding also has some other benefits that would prove useful to the authors of ChaChi, which is potentially why they decided to include the Chisel client in their backdoor.</p>
<p>As described by its README on GitHub, “<a href="https://github.com/jpillora/chisel" target="_blank"><i>Chisel</i></a><i> is a fast TCP/UDP tunnel, transported over HTTP, secured via SSH … Chisel is mainly useful for passing through firewalls, though it can also be used to provide a secure endpoint into your network.”.</i></p>
<p>The Chisel client is activated using command ID 7. It expects to receive the IP or a domain name of the Chisel server and a port. As we will see later, this is exposed on the Chisel Server (which is the attacker’s box) that will be forwarded to the local SOCKS port, which is 1080:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_322139541.coreimg{.width}.png/1690330506757/chachi-fig42.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig42.png" data-asset-id="7b7157d7-9d1e-479f-b1e6-290872363cb8" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig42.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 42 - Chisel command example structure.</i></p>
<p>ChaChi will parse the address of the Chisel server and prepend it with http://, then append it with “:443”:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1726144451.coreimg{.width}.png/1690330506763/chachi-fig43.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig43.png" data-asset-id="c292ffc2-aae7-4a02-bbc5-30f6505296ee" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig43.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 43 - Constructing the Chisel Server Address.</i></p>
<p>The provided port is concatenated with two other decoded strings to form a string that takes the form “<i>R:0.0.0.0:&lt;port&gt;:socks</i>”:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_2113501049.coreimg{.width}.png/1690330506769/chachi-fig44.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig44.png" data-asset-id="c974cb8d-002f-43af-a5ca-169e39cb5473" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig44.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 44 - Construction Chisel Port Forwarding String.</i></p>
<p>The constructed components are passed to a function that generates a new Chisel client, which – if it were run with a standalone Chisel binary – would look something like this:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1073795515.coreimg{.width}.png/1690330506775/chachi-fig45.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig45.png" data-asset-id="697ef12c-f709-4a39-bdd7-bd9b64d1d012" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig45.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 45 - Equivalent Chisel Command.</i></p>
<p>In effect, this will establish a reverse port forwarding connection to the Chisel server located at evildomain[.]xyz and listening on port 443. It will forward any connections made to the server port 1337 to the local socks port, 1080, on the compromised host.</p>
<p>Because address “0.0.0.0” is specified as the local address on the server side, this would allow access to port 1337 from any interface on the server rather than just localhost. This should therefore allow the attackers to connect from anywhere on the Internet via evildomain[.]xyz:1337 directly into the compromised network and have their traffic emerge on port 1080.</p>
<p>Should they wish to, they could even have the rsocks server connect out via the Chisel tunnel. An interesting point here is that the ChaChi operators have hard coded some of the strings used in this Chisel command string, namely the use of “HTTP” and port “443”. This would cause HTTP traffic to traverse the network on a non-standard port (i.e., 443) which might be a red flag to an observant network analyst.<br>
</p>
<h3><b>Uninstalling the Backdoor</b></h3>
<p>As with command ID 4, command ID 9 does not expect any further arguments to be supplied. When the ChaChi operators execute command 9, it undertakes the process of uninstalling itself from the infected host machine. This is done in two stages. The first step involves deletion of the previous installed service using the Windows utility “sc”:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1171927895.coreimg{.width}.png/1690330506781/chachi-fig46.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig46.png" data-asset-id="5a7bde95-305d-4cf7-9eca-49aa17f25b7f" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig46.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 46 - Use &quot;sc&quot; to delete service then get temp path.</i></p>
<p>As can be seen above, immediately following the service deletion, ChaChi retrieves the path to the %TEMP% directory using PowerShell. This is done because ChaChi will create and write a batch file, “del.bat”, to the temp directory that will carry out the task of deleting the ChaChi binary from its location on disk:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_790968443.coreimg{.width}.png/1690330506787/chachi-fig47.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig47.png" data-asset-id="a19fd8b4-0f63-4ab7-9d00-1a0cd33b8557" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig47.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 47 - Contents of &quot;del.bat&quot; used to delete ChaChi binary.</i></p>
<p>This command is of particular use to the ChaChi operators because, once they have completed their objectives within the compromised environment, they want to cover their tracks.</p>
<h3><b>Network Infrastructure</b></h3>
<p>Analysis of extracted networking indicators of compromise (IOCs) can yield some information that can be used as TTPs, and which hint at past (and potentially even current) targets. By mapping out a timeline of first-seen dates for domains extracted from ChaChi binaries, we can observe a period of time from late 2019 up to the first quarter of 2021 where the PYSA operators were most active.</p>
<p>A total of 19 new domains were created in that period, which acted as the C2 for ChaChi. From our data, ChaChi domains can and have been created several months prior to an actual attack taking place. The same ChaChi binaries, and therefore domains, were even used in multiple attacks:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_2111710476.coreimg{.width}.png/1690330506793/chachi-fig48.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig48.png" data-asset-id="0965ee83-d384-4fad-a11b-091657b9ec8c" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig48.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 48 - Timeline of Domains by first-seen dates.</i></p>
<p>When we dig only a little deeper into these domains, we see what could be used as a TTP for the PYSA operators; their overwhelming preference for using the domain name registrar <i>Namecheap</i>:<br>
<br>
</p>
<table cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="300" valign="top"><p><b>Domain</b></p>
</td>
<td width="300" valign="top"><p><b>Registrar</b></p>
</td>
</tr><tr><td width="300" valign="top"><p>starhouse[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>dowax[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>ntservicepack[.]com</p>
</td>
<td width="300" valign="top"><p>OVH Hosting</p>
</td>
</tr><tr><td width="300" valign="top"><p>reportservicefuture[.]website</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>spm[.]best</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>blitz[.]best</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>accounting-consult[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>statistics-update[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>sbvjhs[.]club</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>sbvjhs[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>wiki-text[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>visual-translator[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>firefox-search[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>serchtext[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>englishdict[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>englishdialoge[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>english-breakfast[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>pump-online[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>cvar99[.]xyz</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>productoccup[.]tech</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr><tr><td width="300" valign="top"><p>transnet[.]wiki</p>
</td>
<td width="300" valign="top"><p>Namecheap Inc.</p>
</td>
</tr></tbody></table>
<p><i>Table 2 - Mapping of Domains to Registrars.</i></p>
<p>Taking the IP Addresses from ChaChi binaries and mapping them to their respective ASNs and Regions, we can see IP addresses based in either Romania or Germany account for over 50% of the total. Approximately 60% of the IP addresses are sourced from just two ASNs:</p>
<table width="447" cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="135" valign="top"><p><b>IP ADDRESS</b></p>
</td>
<td width="225" valign="top"><p><b>ASN</b></p>
</td>
<td width="87" valign="top"><p><b>Region</b></p>
</td>
</tr><tr><td width="135" valign="top"><p>23.83.133[.]136</p>
</td>
<td width="225" valign="top"><p>AS19148 - LEASEWEB-USA</p>
</td>
<td width="87" valign="top"><p>U.S.</p>
</td>
</tr><tr><td width="135" valign="top"><p>172.96.189[.]167</p>
</td>
<td width="225" valign="top"><p>AS20068 - HAWKHOST</p>
</td>
<td width="87" valign="top"><p>CA</p>
</td>
</tr><tr><td width="135" valign="top"><p>172.96.189[.]22</p>
</td>
<td width="225" valign="top"><p>AS20068 - HAWKHOST</p>
</td>
<td width="87" valign="top"><p>CA</p>
</td>
</tr><tr><td width="135" valign="top"><p>172.96.189[.]246</p>
</td>
<td width="225" valign="top"><p>AS20068 - HAWKHOST</p>
</td>
<td width="87" valign="top"><p>CA</p>
</td>
</tr><tr><td width="135" valign="top"><p>198.252.100[.]37</p>
</td>
<td width="225" valign="top"><p>AS20068 - HAWKHOST</p>
</td>
<td width="87" valign="top"><p>CA</p>
</td>
</tr><tr><td width="135" valign="top"><p>185.185.27[.]3</p>
</td>
<td width="225" valign="top"><p>AS201206 - LINEVAST</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>160.20.147[.]184</p>
</td>
<td width="225" valign="top"><p>AS30823 - COMBAHTON</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>45.147.228[.]49</p>
</td>
<td width="225" valign="top"><p>AS30823 - COMBAHTON</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>45.147.229[.]29</p>
</td>
<td width="225" valign="top"><p>AS30823 - COMBAHTON</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>45.147.230[.]162</p>
</td>
<td width="225" valign="top"><p>AS30823 - COMBAHTON</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>45.147.230[.]212</p>
</td>
<td width="225" valign="top"><p>AS30823 - COMBAHTON</p>
</td>
<td width="87" valign="top"><p>DE</p>
</td>
</tr><tr><td width="135" valign="top"><p>185.186.245[.]85</p>
</td>
<td width="225" valign="top"><p>AS40824 - WZCOM-US</p>
</td>
<td width="87" valign="top"><p>U.S.</p>
</td>
</tr><tr><td width="135" valign="top"><p>185.183.96[.]147</p>
</td>
<td width="225" valign="top"><p>AS60117 - HS</p>
</td>
<td width="87" valign="top"><p>NL</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.249[.]137</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.249[.]138</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.249[.]139</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.249[.]18</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.249[.]180</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.250[.]151</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.250[.]162</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.5.250[.]216</p>
</td>
<td width="225" valign="top"><p>AS64398 - NXTHOST</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>193.239.84[.]205</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>GB</p>
</td>
</tr><tr><td width="135" valign="top"><p>193.239.85[.]55</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>37.120.140[.]184</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>37.120.140[.]247</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>RO</p>
</td>
</tr><tr><td width="135" valign="top"><p>37.120.145[.]208</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>DK</p>
</td>
</tr><tr><td width="135" valign="top"><p>86.106.20[.]144</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>NL</p>
</td>
</tr><tr><td width="135" valign="top"><p>89.38.225[.]208</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>SG</p>
</td>
</tr><tr><td width="135" valign="top"><p>89.41.26[.]173</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>U.S.</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.187.249[.]102</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>FR</p>
</td>
</tr><tr><td width="135" valign="top"><p>194.187.249[.]138</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>FR</p>
</td>
</tr><tr><td width="135" valign="top"><p>37.221.113[.]66</p>
</td>
<td width="225" valign="top"><p>AS9009</p>
</td>
<td width="87" valign="top"><p>GB</p>
</td>
</tr></tbody></table>
<p><i>Table 3 - IP to ASN and Region Mapping.</i></p>
<p>BlackBerry researchers continuously track and monitor C2 servers by using a variety of fingerprinting and discovery techniques, storing all discovered C2 infrastructure in our internal Threat Intelligence systems.</p>
<p>One of the above IP addresses happened to appear in one of our intelligence platforms in early December of 2020 and was active for a period of just over 24 hours. The IP (45.147.230[.]212) is hosted by AS30823 Combahton in Germany. It triggered one of our sensors for PowerShell Empire, artifacts of which have been observed on systems following a PYSA ransomware <a href="https://www.cert.ssi.gouv.fr/uploads/CERTFR-2020-CTI-003.pdf" target="_blank">incident</a>:<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image_1356637893.coreimg{.width}.png/1690330506799/chachi-fig49.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig49.png" data-asset-id="f71b02e9-c3ff-4924-8a60-889f81018e59" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig49.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 49 - Alert for PowerShell Empire on Public Facing Server.</i></p>
<p>Checking the domain resolutions on the extracted IP addresses can also provide some interesting results and intelligence. The IP address 194.187.249[.]102 was extracted from a sample of ChaChi along with a domain used as a C2 server. This domain was sbvjhs[.]xyz. Unsurprisingly, the name servers, “ns1” and “ns2” for that domain also resolve to the same IP address. But what is interesting is that the other domain that also resolves to that same IP is login.bancocchile[.]com.<br>
</p>

    
    
</div>


    
    
    <div class="image">
  <div data-cmp-is="image" data-cmp-src="/en/2021/06/pysa-loves-chachi-a-new-golang-rat/_jcr_content/main/par/sectionblog/par/image.coreimg{.width}.png/1690330506805/chachi-fig50.png" data-asset="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig50.png" data-asset-id="936247ce-c43e-4133-b6e5-425e743ed995" class="cmp-image" itemscope itemtype="http://schema.org/ImageObject">
 
     
         
         
          
         <img src="/content/dam/blogs-blackberry-com/images/blogs/2021/06/chachi-fig50.png" class="cmp-image__image" itemprop="contentUrl" data-cmp-hook-image="image" alt/>
         
         <figcaption class="figure-caption" styles="display:table-caption;caption-side:bottom;"></figcaption>
          
     
 
 
 
</div>

    
</div>


    
    
    <div class="text">    
    
    <p><i>Figure 50 - ChaChi IP resolving to fake Banco Chile Domain.</i></p>
<p>The legitimate domain for Banco Chile is hosted on a “.cl” Top Level Domain (TLD) and does not have the extra “c” between the words “Banco” and “Chile”. This is a domain that was potentially intended for one of two purposes:<br>
</p>
<ul>
<li>A phishing domain that is targeting either employees or customers of Banco Chile</li>
<li>A domain used to stage and deliver a copy of ChaChi to unsuspecting clickers of a malicious link</li>
</ul>
<p>Either one or even both options are possible, considering these domains were active simultaneously and for several months; their last-seen dates were as recent as June 1, 2021. Coincidentally, both nameserver domains and the fake Banco Chile domain were all active before, during, and after the reported Breach at another Chilean bank (Banco Estado), which was reported in September 2020 and attributed to REvil <a href="https://www.zdnet.com/article/chilean-bank-shuts-down-all-branches-following-ransomware-attack/" target="_blank">ransomware</a>.</p>
<h3><b>Conclusion</b></h3>
<p>ChaChi is a custom RAT developed using the relatively new programming language Go (aka Golang). By using Go to develop ChaChi, PYSA ransomware operators can frustrate detection and prevention efforts by analysts and tools unfamiliar with the language. The earliest version of ChaChi lacked several features of more mature malware, but its rapid evolution and recent deployment against national governments, healthcare organizations, and educational institutions indicates this malware is being actively developed and improved.</p>
<p>ChaChi is a powerful tool in the hands of malicious actors who are targeting industries notoriously susceptible to cyberattacks. It has demonstrated itself as a capable threat, and its use by PYSA ransomware operatives is a cause for concern, especially at a time when ransomware is experiencing alarming success through a string of high-profile attacks including campaigns conducted by <a href="https://blogs.blackberry.com/en/2021/06/blackberry-prevents-revil-ransomware">REvil</a>, <a href="https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat">Avaddon</a> and <a href="https://blogs.blackberry.com/en/2021/05/threat-thursday-delving-into-the-darkside">DarkSide</a>. Organizations ignoring this threat do so at their own risk, in a year of one-after-another cybersecurity disasters.</p>
<h3>Appendix<br>
<br>
Yara Rule</h3>
<p>The following Yara rule was authored by the BlackBerry Threat Research Team to catch the threat described in this document:</p>
<table cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="601" valign="top"><p>rule Mal_Backdoor_ChaChi_RAT<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meta:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = &quot;ChaChi RAT used in PYSA Ransomware Campaigns&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = &quot;BlackBerry Threat Research &amp; Intelligence&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;Go build ID:&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $go = { 47 6F 20 62 75 69 6C 64 20 49 44 3A }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // dnsStream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $dnsStream = { 64 6E 73 53 74 72 65 61 6D }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SOCKS5<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $socks5 = { 53 4F 43 4B 53 35 }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // chisel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $chisel = { 63 68 69 73 65 6C }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // MZ signature at offset 0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint16(0) == 0x5A4D and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // PE signature at offset stored in MZ header at 0x3C<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32(uint32(0x3C)) == 0x00004550 and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ChaChi Strings<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; all of them<br>
}</p>
</td>
</tr></tbody></table>
<p>&nbsp;</p>
<h3><b>Indicators of Compromise (IoCs)</b></h3>
<p>At BlackBerry, we take a <a href="https://blogs.blackberry.com/en/2021/01/from-aspiration-to-realization-the-evolution-of-the-prevention-first-approach-to-security" target="_blank">prevention-first</a> and AI-driven approach to cybersecurity. Putting prevention first neutralizes malware before the exploitation stage of the kill-chain.</p>
<p>By stopping malware at this stage, BlackBerry solutions help organizations increase their resilience. It also helps reduce infrastructure complexity and streamline security management to ensure business, people, and endpoints are secure.</p>
<table width="651" cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="396" valign="top"><p><b>Indicator</b></p>
</td>
<td width="104" valign="top"><p><b>Type</b></p>
</td>
<td width="151" valign="top"><p><b>Description</b></p>
</td>
</tr><tr><td width="396" valign="top"><p>12b927235ab1a5eb87222ef34e88d4aababe23804ae12dc0807ca6b256c7281c</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>8a9205709c6a1e5923c66b63addc1f833461df2c7e26d9176993f14de2a39d5b</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>37c3cb07b37d43721b3a8171959d2dff11ff904b048a334012239be9c7b87f63</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>0bcbc1faec0c44d157d5c8170be4764f290d34078516da5dcd8b5039ef54f5ca</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>6eb0455b0ab3073c88fcba0cad92f73cc53459f94008e57100dc741c23cf41a3</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>89b9ba56ebe73362ef83e7197f85f6480c1e85384ad0bc2a76505ba97a681010</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>701791cd5ed3e3b137dd121a0458977099bb194a4580f364802914483c72b3ce</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>c9bed25ab291953872c90126ce5283ce1ad5269ff8c1bca74a42468db7417045</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>e47a632bfd08e72d15517170b06c2de140f5f237b2f370e12fbb3ad4ff75f649</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>0fd13ece461511fbc129f6584d45fea920200116f41d6097e4dffeb965b19ef4</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>3a6ddc4022f6abe7bdb95a3ba491aaf7f9713bcb6db1fbaa299f7c68ab04d4f4</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>5d8459c2170c296288e2c0dd9a77f5d973b22213af8fa0d276a8794ffe8dc159</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>6d1fde9a5963a672f5e4b35cc7b8eaa8520d830eb30c67fadf8ab82aeb28b81a</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>8b5cdbd315da292bbbeb9ff4e933c98f0e3de37b5b813e87a6b9796e10fbe9e8</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>2697bbe0e96c801ff615a97c2258ac27eec015077df5222d52f3fbbcdca901f5</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>85c8ccf45cdb84e99cce74c376ce73fdf08fdd6d0a7809702e317c18a016b388</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>7b5027bd231d8c62f70141fa4f50098d056009b46fa2fac16183d1321be04768</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>9986b6881fc1df8f119a6ed693a7858c606aed291b0b2f2b3d9ed866337bdbde</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>a30e605fa404e3fcbfc50cb94482618add30f8d4dbd9b38ed595764760eb2e80</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>aa2faf0f41cc1710caf736f9c966bf82528a97631e94c7a5d23eadcbe0a2b586</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>af97b35d9e30db252034129b7b3e4e6584d1268d00cde9654024ce460526f61e</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>045510eb6c86fc2d966aded8722f4c0e73690b5078771944ec1a842e50af4410</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>b0629dcb1b95b7d7d65e1dad7549057c11b06600c319db494548c88ec690551e</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>ccfa2c14159a535ff1e5a42c5dcfb2a759a1f4b6a410028fd8b4640b4f7983c1</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>d591f43fc34163c9adbcc98f51bb2771223cc78081e98839ca419e6efd711820</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>ef31b968c71b0e21d9b0674e3200f5a6eb1ebf6700756d4515da7800c2ee6a0f</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>f5cb94aa3e1a4a8b6d107d12081e0770e95f08a96f0fc4d5214e8226d71e7eb7</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>f8a5065eb53b1e3ac81748176f43dce1f9e06ea8db1ecfa38c146e8ea89fcc0b</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>ChaChi</p>
</td>
</tr><tr><td width="396" valign="top"><p>44af9d898f417506b5a1f9387f3ce27b9dfa572aae799295ca95eb0c54403cff</p>
</td>
<td width="104" valign="top"><p>SHA256</p>
</td>
<td width="151" valign="top"><p>Bat file used to delete backdoor binary</p>
</td>
</tr><tr><td width="396" valign="top"><p>PowerShell $env:ComputerName</p>
</td>
<td width="104" valign="top"><p>Command-line</p>
</td>
<td width="151" valign="top"><p>PowerShell used to obtain Computer Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>PowerShell $env:Username</p>
</td>
<td width="104" valign="top"><p>Command-line</p>
</td>
<td width="151" valign="top"><p>PowerShell used to obtain Username</p>
</td>
</tr><tr><td width="396" valign="top"><p>PowerShell $env:tmp</p>
</td>
<td width="104" valign="top"><p>Command-line</p>
</td>
<td width="151" valign="top"><p>PowerShell used to obtain %TEMP% path</p>
</td>
</tr><tr><td width="396" valign="top"><p>JavaJDBC</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Azure Agent Controller</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Azure Safe controller</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>AzureAgentController</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>CorpNativeHostDebugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Corp Native Host Debugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Defender Security Agents</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>DefenderSecurityAgent</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Get Service Controller</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>GetServiceController</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Service agent security control</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Windows service controller</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>MicrosoftSecurityManager</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Microsoft Security Manager</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>WindowsSoftwareManagerDebugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>MicrosoftTeamConnectDebugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>MicrosoftTriangleConnectDebugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Microsoft Triangle Connect Debugger</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>WindowsProtectionSystem</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Windows Protection System</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>WindowsHealthSubSystem</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>MsStudioAgentUpdateService</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>VisualIdeIndexer</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Visual studio indexer</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>Visual Ide Indexer</p>
</td>
<td width="104" valign="top"><p>Service name</p>
</td>
<td width="151" valign="top"><p>Installation Service Name</p>
</td>
</tr><tr><td width="396" valign="top"><p>del.bat</p>
</td>
<td width="104" valign="top"><p>Filename</p>
</td>
<td width="151" valign="top"><p>Bat file used to delete backdoor binary</p>
</td>
</tr><tr><td width="396" valign="top"><p>Englishdialoge[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>starhouse[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>accounting-consult[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>blitzz[.]best</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>ccenter[.]tech</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>cvar99[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>dowax[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>englishdict[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>english-breakfast[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>firefox-search[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>ntservicepack[.]com</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>productoccup[.]tech</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>pump-online[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>reportservicefuture[.]website</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>sbvjhs[.]club</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>sbvjhs[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>serchtext[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>spm[.]best</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>statistics-update[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>transnet[.]wiki</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>visual-translator[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>wiki-text[.]xyz</p>
</td>
<td width="104" valign="top"><p>Domain</p>
</td>
<td width="151" valign="top"><p>ChaChi C2</p>
</td>
</tr><tr><td width="396" valign="top"><p>﻿160.20.147[.]184</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>﻿172.96.189[.]167</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>﻿193.239.84[.]205</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>﻿89.41.26[.]173</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>172.96.189[.]22</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>172.96.189[.]246</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>185.183.96[.]147</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>185.185.27[.]3</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>185.186.245[.]85</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>193.239.85[.]55</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.187.249[.]102</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.187.249[.]138</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.249[.]137</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.249[.]138</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.249[.]139</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.249[.]18</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.249.[]180</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.250[.]151</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.250[.]162</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>194.5.250[.]216</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>198.252.100[.]37</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>23.83.133[.]136</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>37.120.140[.]184</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>37.120.140[.]247</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>37.120.145[.]208</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>37.221.113[.]66</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>45.147.228[.]49</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>45.147.229[.]29</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>45.147.230[.]162</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>45.147.230[.]212</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>86.106.20[.]144</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr><tr><td width="396" valign="top"><p>89.38.225[.]208</p>
</td>
<td width="104" valign="top"><p>IP</p>
</td>
<td width="151" valign="top"><p>ChaChi C2 IP</p>
</td>
</tr></tbody></table>
<p>&nbsp;</p>
<h3>MITRE ATT&amp;CK</h3>
<table width="651" cellspacing="0" cellpadding="0" border="1">
<tbody><tr><td width="118" valign="top"><p><b>Tactic</b></p>
</td>
<td width="78" valign="top"><p><b>ID</b></p>
</td>
<td width="211" valign="top"><p><b>Name</b></p>
</td>
<td colspan="2" width="246" valign="top"><p><b>Description</b></p>
</td>
</tr><tr><td rowspan="3" width="118"><p><b>Execution</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1059/001/" target="_blank">T1059/001</a></p>
</td>
<td width="211" valign="top"><p>Command and Scripting Interpreter: PowerShell</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi - enumerate system and execute commands - C2 Command</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1059/003/" target="_blank">T1059/003</a></p>
</td>
<td width="211" valign="top"><p>Command and Scripting Interpreter: Windows Command Shell</p>
</td>
<td colspan="2" width="246"><p>Reverse shell and service deletion</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1569/002/" target="_blank">T1569/002</a></p>
</td>
<td width="211" valign="top"><p>System Services: Service Execution</p>
</td>
<td colspan="2" width="246" valign="top"><p>Used to execute ChaChi once installed</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td width="118"><p><b>Persistence</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1543/003/" target="_blank">T1543/003</a></p>
</td>
<td width="211" valign="top"><p>Create or Modify System Process: Windows Service</p>
</td>
<td colspan="2" width="246"><p>ChaChi Installation as a Service</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td width="118"><p><b>Defence Evasion</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1027/" target="_blank">T1027</a></p>
</td>
<td width="211" valign="top"><p>Obfuscated Files or Information</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi - Gobfuscated Functions and Strings</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td rowspan="2" width="118"><p><b>Discovery</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1057/" target="_blank">T1057</a></p>
</td>
<td width="211" valign="top"><p>Process Discovery</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi - Process Enumeration</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1082/" target="_blank">T1082</a></p>
</td>
<td width="211" valign="top"><p>System Information Discovery</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi - Computer Name and Username</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td rowspan="6" width="118"><p><b>C2</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1572/" target="_blank">T1572</a></p>
</td>
<td width="211" valign="top"><p>Protocol Tunnelling</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi - DNS tunnelling for C2</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1071/001/" target="_blank">T1071/001</a></p>
</td>
<td width="211" valign="top"><p>Application Layer Protocol: Web Protocols</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi – HTTP for C2</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1090/002/" target="_blank">T1090/002</a></p>
</td>
<td width="211" valign="top"><p>Proxy: External Proxy</p>
</td>
<td width="246" valign="top"><p>ChaChi – SOCKS5 proxy</p>
</td>
<td width="51"><p>&nbsp;</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1001/" target="_blank">T1001</a></p>
</td>
<td width="211" valign="top"><p>Data Obfuscation</p>
</td>
<td width="246" valign="top"><p>ChaChi – Custom C2 encoding</p>
</td>
<td width="51"><p>&nbsp;</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1008/" target="_blank">T1008</a></p>
</td>
<td width="211" valign="top"><p>Fallback Channels</p>
</td>
<td width="246" valign="top"><p>ChaChi – DNS primary, HTTP fallback</p>
</td>
<td width="51"><p>&nbsp;</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1573/001/" target="_blank">T1573/001</a></p>
</td>
<td width="211" valign="top"><p>Encrypted Channel: Symmetric Cryptography</p>
</td>
<td colspan="2" width="246" valign="top"><p>ChaChi – XSalsa20+Poly1305 for C2 encryption</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td width="118"><p><b>Exfiltration</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1041/" target="_blank">T1041</a></p>
</td>
<td width="211" valign="top"><p>Exfiltration Over C2 Channel</p>
</td>
<td colspan="2" width="246"><p>ChaChi</p>
</td>
</tr><tr><td colspan="5" width="651" valign="top"><p>&nbsp;</p>
</td>
</tr><tr><td rowspan="2" width="118"><p><b>Resource Development</b></p>
</td>
<td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1587/001/" target="_blank">T1587/001</a></p>
</td>
<td width="211" valign="top"><p>Develop Capabilities: Malware</p>
</td>
<td colspan="2" width="246"><p>ChaChi Backdoor</p>
</td>
</tr><tr><td width="78" valign="top"><p><a href="https://attack.mitre.org/techniques/T1583/001/" target="_blank">T1583/001</a></p>
</td>
<td width="211" valign="top"><p>Acquire Infrastructure: Domains</p>
</td>
<td colspan="2" width="246"><p>ChaChi Domain registration</p>
</td>
</tr></tbody></table>
<p><br>
<b>BlackBerry Assistance</b></p>
<p>If you’re battling ChaChi GoLang RAT or a similar threat, you’ve come to the right place, regardless of your existing BlackBerry relationship.</p>
<p><a href="https://www.blackberry.com/us/en/services/incident-response" target="_blank">The BlackBerry Incident Response team</a> is made up of world-class consultants dedicated to handling response and containment services for a wide range of incidents, including ransomware and Advanced Persistent Threat (APT) cases.</p>
<p>We have a global consulting team standing by to assist you providing around-the-clock support, where required, as well as local assistance. Please contact us here: <a href="https://www.blackberry.com/us/en/forms/cylance/handraiser/emergency-incident-response-containment" target="_blank">https://www.blackberry.com/us/en/forms/cylance/handraiser/emergency-incident-response-containment</a>.<br>
<br>
</p>

    
    
</div>


    
    
    <div class="image">
  

    
</div>


    
    
    <div class="text">    
    
    
    
    
</div>


    
    
    <div class="authorblog"><!--Pulling author bio from author page-->

    
    
        
  



<div class="author-info" data-author-name="The BlackBerry Research and Intelligence Team" data-author-path="https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat">
  <div class="author-avatar">
    
    <img src="/content/dam/blogs-blackberry-com/images/authors/blackberry-logo-square.jpg" class="author-avatar" alt="The BlackBerry Research and Intelligence Team"/>				
    
  </div><!-- .author-avatar -->
  <div class="author-description">
      
    
    <h2>About The BlackBerry Research and Intelligence Team</h2>
    <p>The <a href="https://blogs.blackberry.com/en/author/the-blackberry-research-and-intelligence-team" target="_blank">BlackBerry Research and Intelligence team</a> is a highly experienced threat research group specializing in a wide range of cybersecurity disciplines, conducting continuous threat hunting to provide comprehensive insights into emerging threats. We analyze and address various attack vectors, leveraging our deep expertise in the cyberthreat landscape to develop proactive strategies that safeguard against adversaries.</p>
<p>Whether it's identifying new vulnerabilities or staying ahead of sophisticated attack tactics, we are dedicated to securing your digital assets with cutting-edge research and innovative solutions.</p>

  </div><!-- .author-description	-->
</div>
<hr class="author-hr"/>
    
</div>


    
    
    <div class="socialsharing">

<div class="socialSharing row">
	<ul class="socialSharing-icons">
		<li>
			<a href="https://x.com/intent/tweet?url=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat&text=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&via=BlackBerry" title="Share on X" target="_blank" class="x-share">
				<span class="sr-only sr-only-focusable">Share on X</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--tw" aria-hidden="true">
					<svg viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z"></path></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat" title="Share on Facebook" target="_blank" class="facebook-share">
				<span class="sr-only sr-only-focusable">Share on Facebook</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--fb" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264 512"><path d="M76.7 512V283H0v-91h76.7v-71.7C76.7 42.4 124.3 0 193.8 0c33.3 0 61.9 2.5 70.2 3.6V85h-48.2c-37.8 0-45.1 18-45.1 44.3V192H256l-11.7 91h-73.6v229"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="https://www.linkedin.com/shareArticle?mini=true&url=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat&title=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&summary=&source=blogs.blackberry.com" title="Share on LinkedIn" target="_blank" class="linkedin-share">
				<span class="sr-only sr-only-focusable">Share on LinkedIn</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--li" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448.1 512"><path d="M100.3 448H7.4V148.9h92.9V448zM53.8 108.1C24.1 108.1 0 83.5 0 53.8S24.1 0 53.8 0s53.8 24.1 53.8 53.8-24.1 54.3-53.8 54.3zM448 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448h-.1z"/></svg>
				</span>
			</a>
		</li>
		<li>
			<a href="mailto:?subject=PYSA%20Loves%20ChaChi:%20a%20New%20GoLang%20RAT&body=https://blogs.blackberry.com/en/2021/06/pysa-loves-chachi-a-new-golang-rat" title="Email" class="email-share">
				<span class="sr-only sr-only-focusable">Email</span>
				<span class="svgIcon-socialSharing svgIcon-socialSharing--email" aria-hidden="true">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"/></svg>
				</span>
			</a>
		</li>
	</ul>
</div>
</div>


    
    
    <div class="backbutton">
<a href="javascript:history.back()" class="cta cta-primary btn-back-button">Back</a></div>



      </div>
      
          
      </div>
    </section>
      
  
  
</div>



</main><footer data-no-snippet>
	<div class="container pt-2">
		<nav id="footerNav">
			<div>
				<div class="row my-4">
					<div class="socialLinks col-lg-4 col-md-4 col-sm-12 pb-3">
						<a href="https://www.facebook.com/BlackBerry/" class="socialLink" target="_blank" rel="noopener" style="padding-left: 0 !important;">
							<span class="sr-only" aria-label="BlackBerry Facebook Account">Facebook</span>
							<span class="svgIcon-social" aria-hidden="true">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M448 56.7v398.5c0 13.7-11.1 24.7-24.7 24.7H309.1V306.5h58.2l8.7-67.6h-67v-43.2c0-19.6 5.4-32.9 33.5-32.9h35.8v-60.5c-6.2-.8-27.4-2.7-52.2-2.7-51.6 0-87 31.5-87 89.4v49.9h-58.4v67.6h58.4V480H24.7C11.1 480 0 468.9 0 455.3V56.7C0 43.1 11.1 32 24.7 32h398.5c13.7 0 24.8 11.1 24.8 24.7z"/></svg>
							</span>
						</a>
						<a href="https://x.com/blackberry" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry X Account">X</span>
							<span class="svgIcon-social">
								<svg width="28" height="28" viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" fill="#000"></path></svg>
							</span>
						</a>
						<a href="https://www.youtube.com/user/BlackBerry" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry YouTube Account">YouTube</span>
							<span class="svgIcon-social">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z"/></svg>
							</span>
						</a>
						<a href="https://www.instagram.com/blackberry/" target="_blank" class="socialLink" rel="noopener">
							<span class="sr-only" aria-label="BlackBerry Instagram Account">Instagram</span>
							<span class="svgIcon-social">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/></svg>
							</span>
						</a>
					</div>
					
				</div>
				<hr/>
				<div class="row mt-5">
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse21" aria-expanded="false" aria-controls="collapse21">
								<h3>
									Corporate
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div id="collapse21" class="collapse in">
									<ul>
										<li>
											
											<a href="https://www.blackberry.com/us/en/company" rel="noopener" target="_blank">Company</a>
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/newsroom" target="_blank">Newsroom</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/investors" target="_blank">Investors</a>
											
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/company/careers" rel="noopener" target="_blank">Careers</a>
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/leadership" target="_blank">Leadership</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/company/corporate-responsibility-at-blackberry" target="_blank">Corporate Responsibility</a>
											
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/company/certifications" rel="noopener" target="_blank">Certifications</a>
										</li>
									
										<li>
											
											<a href="https://www.blackberry.com/us/en/success-stories" rel="noopener" target="_blank">Customer Success</a>
										</li>
									</ul>
								</div>
							
						
					</div>
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse31" aria-expanded="false" aria-controls="collapse31">
								<h3>
									Developers
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div class="collapse in" id="collapse31">
									<ul>
										<li>
											
											<a href="https://developers.blackberry.com/" rel="noopener" target="_blank">Enterprise Platform &amp; Apps</a>
										</li>
									
										<li>
											
											<a href="https://www.qnx.com/account/login.html?returnaddress=%2Fdownload%2Fgroup.html%3Fprogramid%3D29178" rel="noopener" target="_blank">BlackBerry QNX Developer Network</a>
										</li>
									</ul>
								</div>
							
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse32" aria-expanded="false" aria-controls="collapse32">
								<h3>
									Blogs
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div class="collapse in" id="collapse32">
									<ul>
										<li>
											
											<a href="https://blogs.blackberry.com/" rel="noopener">BlackBerry ThreatVector Blog</a>
										</li>
									
										<li>
											
											<a href="https://devblog.blackberry.com/" rel="noopener" target="_blank">Developers Blog</a>
										</li>
									
										<li>
											
											<a href="https://helpblog.blackberry.com/" rel="noopener" target="_blank">Help Blog</a>
										</li>
									</ul>
								</div>
							
						
					</div>
					<div class="col-xs-12 col-md-4">
						
							<a class="footerCollapse" role="button" data-toggle="collapse" href="#collapse41" aria-expanded="false" aria-controls="collapse41">
								<h3>
									Legal
									<span class="open">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"/></svg>
									</span>
									<span class="closed">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"/></svg>
									</span>
								</h3>
							</a>
							
								<div id="collapse41" class="collapse in">
									<ul>
										<li>
											<a href="https://www.blackberry.com/us/en/legal" target="_blank">Overview</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/accessibility" target="_blank">Accessibility</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/blackberry-virtual-patent-marking" target="_blank">Patents</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/trademarks" target="_blank">Trademarks</a>
											
										</li>
									
										<li>
											<a href="https://www.blackberry.com/us/en/legal/privacy-policy" target="_blank">Privacy Policy</a>
											
										</li>
									</ul>
								</div>
							
						
					</div>
				</div>
			</div>
			<div class="container">
				<div class="row tm10" style="padding-top: 50px;">
					<div class="col-xs-12 col-md-6 copyright">
						<p>© 2024 BlackBerry Limited. All rights reserved.</p>
					</div>
				</div>
			</div>
		</nav>
	</div>
</footer>

            
    
    
    
    
<script src="/etc.clientlibs/shared/clientlibs/jquery.min.96704cdeb2f89f0504fd10b631047e4f.js"></script>
<script src="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-dependencies.min.d41d8cd98f00b204e9800998ecf8427e.js"></script>





    
    
<script src="/etc.clientlibs/blogs-bbcom/clientlibs/clientlib-site.min.70a468767a2e0665e8f087baab63f77b.js"></script>




    

    

    
    
    

            

        
    </body>
</html>
