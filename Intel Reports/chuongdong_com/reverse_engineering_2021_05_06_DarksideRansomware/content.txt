<!DOCTYPE html>
<html lang="en-GB">

  <head>
    <!-- General meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    

    
      <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Darkside Ransomware | Chuong Dong</title>
<meta name="generator" content="Jekyll v3.9.5" />
<meta property="og:title" content="Darkside Ransomware" />
<meta name="author" content="Chuong Dong" />
<meta property="og:locale" content="en_GB" />
<meta name="description" content="Malware Analysis Report - Darkside Ransomware" />
<meta property="og:description" content="Malware Analysis Report - Darkside Ransomware" />
<link rel="canonical" href="https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/" />
<meta property="og:url" content="https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/" />
<meta property="og:site_name" content="Chuong Dong" />
<meta property="og:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-05-06T00:00:00-04:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="twitter:title" content="Darkside Ransomware" />
<meta name="twitter:site" content="@cPeterr" />
<meta name="twitter:creator" content="@Chuong Dong" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Chuong Dong"},"dateModified":"2021-05-06T00:00:00-04:00","datePublished":"2021-05-06T00:00:00-04:00","description":"Malware Analysis Report - Darkside Ransomware","headline":"Darkside Ransomware","image":"https://cdong1012.github.io//assets/logos/kunal-logo.png","mainEntityOfPage":{"@type":"WebPage","@id":"https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/"},"publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://cdong1012.github.io//assets/logos/logo-cdong.gif"},"name":"Chuong Dong"},"url":"https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/"}</script>
<!-- End Jekyll SEO tag -->

    

    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#242e2b"/>

    
      
<style>/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */@import url("https://fonts.googleapis.com/css?family=Karla:700,700");@import url("https://fonts.googleapis.com/css?family=Space Mono:400,700");html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}*{box-sizing:border-box}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html,body{height:100%}a img{border:none}blockquote{quotes:none}blockquote:before,blockquote:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}caption,th,td{text-align:left;font-weight:normal;vertical-align:middle}html{font-size:75%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}@media screen and (min-width: 40em){html{font-size:87.5%}}@media screen and (min-width: 50em){html{font-size:93.75%}}@media screen and (min-width: 64em){html{font-size:106.25%}}@media screen and (min-width: 100em){html{font-size:118.75%}}body{font-size:1.3333333333rem;font-family:Space Mono, monospace;font-style:normal;font-weight:400;line-height:2rem}@media screen and (min-width: 40em){body{font-size:1.2142857143rem}}@media screen and (min-width: 50em){body{font-size:1.2rem}}@media screen and (min-width: 64em){body{font-size:1.1764705882rem}}@media screen and (min-width: 100em){body{font-size:1.1578947368rem}}a{color:#45a29e;text-decoration:none;transition:color .1s, background-color .1s}a:hover,a:active,a:focus{color:#66fcf1;text-decoration:none}.typeset p a,.typeset li a{background-image:linear-gradient(to bottom, transparent 50%, #45a29e 50%);background-position:0 93%;background-repeat:repeat-x;background-size:100% 0.15rem;text-shadow:0.1rem 0 #161820,0.15rem 0 #161820,-0.1rem 0 #161820,-0.15rem 0 #161820}.typeset p a:hover,.typeset p a:active,.typeset p a:focus,.typeset li a:hover,.typeset li a:active,.typeset li a:focus{background-image:linear-gradient(to bottom, transparent 50%, #66fcf1 50%)}.typeset p{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem;font-feature-settings:'kern', 'onum', 'liga'}@media screen and (min-width: 40em){.typeset p{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset p{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset p{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset p{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset h1,.typeset h2,.typeset h3,.typeset h4,.typeset h5,.typeset h6{color:#66fcf1;font-family:"Karla", monospace;font-feature-settings:'dlig', 'liga', 'lnum', 'kern';font-style:normal;font-weight:700}.typeset h1,.typeset .alpha{line-height:3rem;font-size:2.3333333333rem;margin-bottom:.37499rem;padding-top:.62501rem}@media screen and (min-width: 40em){.typeset h1,.typeset .alpha{font-size:2.1428571429rem;margin-bottom:.3035614286rem;padding-top:.6964385714rem}}@media screen and (min-width: 50em){.typeset h1,.typeset .alpha{font-size:2.1333333333rem;margin-bottom:.29999rem;padding-top:.70001rem}}@media screen and (min-width: 64em){.typeset h1,.typeset .alpha{font-size:2.3529411765rem;margin-bottom:.3823429412rem;padding-top:.6176570588rem}}@media screen and (min-width: 100em){.typeset h1,.typeset .alpha{font-size:2.6315789474rem;margin-bottom:.4868321053rem;padding-top:.5131678947rem}}.typeset h2,.typeset .beta{line-height:3rem;font-size:2.0833333333rem;margin-bottom:.28124rem;padding-top:.71876rem}@media screen and (min-width: 40em){.typeset h2,.typeset .beta{font-size:1.9rem;margin-bottom:.21249rem;padding-top:.78751rem}}@media screen and (min-width: 50em){.typeset h2,.typeset .beta{font-size:1.8733333333rem;margin-bottom:.20249rem;padding-top:.79751rem}}@media screen and (min-width: 64em){.typeset h2,.typeset .beta{font-size:2.0882352941rem;margin-bottom:.2830782353rem;padding-top:.7169217647rem}}@media screen and (min-width: 100em){.typeset h2,.typeset .beta{font-size:2.3105263158rem;margin-bottom:.3664373684rem;padding-top:.6335626316rem}}.typeset h3,.typeset .gamma{line-height:3rem;font-size:1.8666666667rem;margin-bottom:.19999rem;padding-top:.80001rem}@media screen and (min-width: 40em){.typeset h3,.typeset .gamma{font-size:1.7142857143rem;margin-bottom:.1428471429rem;padding-top:.8571528571rem}}@media screen and (min-width: 50em){.typeset h3,.typeset .gamma{font-size:1.7066666667rem;margin-bottom:.13999rem;padding-top:.86001rem}}@media screen and (min-width: 64em){.typeset h3,.typeset .gamma{font-size:1.7647058824rem;margin-bottom:.1617547059rem;padding-top:.8382452941rem}}@media screen and (min-width: 100em){.typeset h3,.typeset .gamma{font-size:1.8578947368rem;margin-bottom:.1967005263rem;padding-top:.8032994737rem}}.typeset h4,.typeset .delta{line-height:2rem;font-size:1.6666666667rem;margin-bottom:-.37501rem;padding-top:.37501rem}@media screen and (min-width: 40em){.typeset h4,.typeset .delta{font-size:1.5214285714rem;margin-bottom:-.4294742857rem;padding-top:.4294742857rem}}@media screen and (min-width: 50em){.typeset h4,.typeset .delta{font-size:1.5rem;margin-bottom:-.43751rem;padding-top:.43751rem}}@media screen and (min-width: 64em){.typeset h4,.typeset .delta{font-size:1.5705882353rem;margin-bottom:-.4110394118rem;padding-top:.4110394118rem}}@media screen and (min-width: 100em){.typeset h4,.typeset .delta{font-size:1.6368421053rem;margin-bottom:-.3861942105rem;padding-top:.3861942105rem}}.typeset h5,.typeset .epsilon{line-height:2rem;font-size:1.4916666667rem;margin-bottom:-.440635rem;padding-top:.440635rem}@media screen and (min-width: 40em){.typeset h5,.typeset .epsilon{font-size:1.3714285714rem;margin-bottom:-.4857242857rem;padding-top:.4857242857rem}}@media screen and (min-width: 50em){.typeset h5,.typeset .epsilon{font-size:1.3666666667rem;margin-bottom:-.48751rem;padding-top:.48751rem}}@media screen and (min-width: 64em){.typeset h5,.typeset .epsilon{font-size:1.3235294118rem;margin-bottom:-.5036864706rem;padding-top:.5036864706rem}}@media screen and (min-width: 100em){.typeset h5,.typeset .epsilon{font-size:1.3157894737rem;margin-bottom:-.5065889474rem;padding-top:.5065889474rem}}.typeset h6,.typeset .zeta{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset h6,.typeset .zeta{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset h6,.typeset .zeta{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset h6,.typeset .zeta{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset h6,.typeset .zeta{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset ul,.typeset ol{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset ul,.typeset ol{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset ul,.typeset ol{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset ul,.typeset ol{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset ul,.typeset ol{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset ul li,.typeset ol li{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset ul li,.typeset ol li{margin-left:0}}.typeset ul li ol,.typeset ul li ul,.typeset ol li ol,.typeset ol li ul{padding-top:1rem;margin-bottom:1rem;margin-left:2rem}.typeset ol{list-style-type:none}.typeset ol li{counter-increment:top-level}.typeset ol li:before{content:counter(top-level) ".";font-feature-settings:'lnum', 'tnum';margin-left:-3rem;position:absolute;text-align:right;width:2em}.typeset ol li ul li:before{content:''}.typeset ol li ul li ol li{counter-increment:alt-level}.typeset ol li ul li ol li:before{content:counter(alt-level) "."}.typeset ol li ol li{counter-increment:sub-level}.typeset ol li ol li:before{content:counter(top-level) "." counter(sub-level)}.typeset ol li ol li ul li:before{content:''}.typeset ol li ol li ol li{counter-increment:sub-sub-level}.typeset ol li ol li ol li:before{content:counter(top-level) "." counter(sub-level) "." counter(sub-sub-level)}.typeset dl{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset dl{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset dl{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset dl{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset dl{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset dl dt,.typeset dl dd{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset dl dt,.typeset dl dd{margin-left:0}}.typeset dl dt{font-weight:700}.typeset dl dd+dt{padding-top:1rem}.typeset table{line-height:2rem;font-size:1.1916666667rem;margin-bottom:-.553135rem;padding-top:.553135rem;font-family:"Karla", monospace;font-feature-settings:'liga', 'lnum', 'tnum', 'kern';font-style:normal;font-weight:400;width:100%}@media screen and (min-width: 40em){.typeset table{font-size:1.0928571429rem;margin-bottom:-.5901885714rem;padding-top:.5901885714rem}}@media screen and (min-width: 50em){.typeset table{font-size:1.0866666667rem;margin-bottom:-.59251rem;padding-top:.59251rem}}@media screen and (min-width: 64em){.typeset table{font-size:.9941176471rem;margin-bottom:-.6272158824rem;padding-top:.6272158824rem}}@media screen and (min-width: 100em){.typeset table{font-size:.9263157895rem;margin-bottom:-.6526415789rem;padding-top:.6526415789rem}}.typeset table thead th{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem;padding-bottom:1px}@media screen and (min-width: 40em){.typeset table thead th{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset table thead th{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset table thead th{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset table thead th{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset b,.typeset strong,.typeset .bold{font-weight:700}.typeset em,.typeset i,.typeset .italic{font-style:italic}.typeset small,.typeset .caption{font-size:1.0666666667rem;font-family:"Karla", monospace;font-style:normal;font-weight:400}@media screen and (min-width: 40em){.typeset small,.typeset .caption{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset small,.typeset .caption{font-size:.96rem}}@media screen and (min-width: 64em){.typeset small,.typeset .caption{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset small,.typeset .caption{font-size:.8210526316rem}}.typeset small{line-height:1rem}.typeset .caption{line-height:2rem;margin-bottom:1.39999rem;padding-top:.60001rem;color:#529e99}@media screen and (min-width: 40em){.typeset .caption{margin-bottom:1.3642757143rem;padding-top:.6357242857rem}}@media screen and (min-width: 50em){.typeset .caption{margin-bottom:1.35999rem;padding-top:.64001rem}}@media screen and (min-width: 64em){.typeset .caption{margin-bottom:1.3308723529rem;padding-top:.6691276471rem}}@media screen and (min-width: 100em){.typeset .caption{margin-bottom:1.3078847368rem;padding-top:.6921152632rem}}.typeset h1+.caption,.typeset .alpha+.caption,.typeset h2+.caption,.typeset .beta+.caption,.typeset h3+.caption,.typeset .gamma+.caption{margin-top:-1rem}.typeset .delta+.caption,.typeset .epsilon+.caption,.typeset .zeta+.caption{margin-top:0rem}.typeset blockquote p{border-left:0.15rem solid #45a29e;font-style:italic;padding-left:1rem;margin-bottom:1.99999rem;padding-bottom:.50001rem}@media screen and (min-width: 40em){.typeset blockquote p{margin-bottom:1.9107042857rem;padding-bottom:.5446528571rem}}@media screen and (min-width: 50em){.typeset blockquote p{margin-bottom:1.89999rem;padding-bottom:.55001rem}}@media screen and (min-width: 64em){.typeset blockquote p{margin-bottom:1.8823429412rem;padding-bottom:.5588335294rem}}@media screen and (min-width: 100em){.typeset blockquote p{margin-bottom:1.8684110526rem;padding-bottom:.5657994737rem}}@media screen and (min-width: 40em){.typeset blockquote{margin-left:-1rem}}.typeset hr{background-image:linear-gradient(to bottom, transparent 50%, #529e99 50%);background-position:0 50%;background-repeat:repeat-x;background-size:100% 0.15rem;border:0;margin:0;padding-bottom:3rem;padding-top:0.5rem}.typeset code,.typeset pre{background-color:#1f2833;font-family:Menlo, monospace}.typeset pre{display:block;margin-bottom:2rem;padding:1rem;white-space:pre;white-space:pre-wrap;word-break:break-all;word-wrap:break-word}.typeset code{font-size:1.0666666667rem;line-height:1rem}@media screen and (min-width: 40em){.typeset code{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset code{font-size:.96rem}}@media screen and (min-width: 64em){.typeset code{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset code{font-size:.8210526316rem}}.typeset .upper{font-kerning:normal;letter-spacing:0.1rem;text-transform:uppercase}.typeset .small-caps{font-feature-settings:'smcp', 'kern';font-kerning:normal;letter-spacing:0.1rem}.typeset .lining-numerals{font-feature-settings:'lnum', 'kern'}.typeset .oldstyle-numerals{font-feature-settings:'onum', 'kern'}.hll{background-color:#c510bc}.c{color:#54dbf3;font-style:italic}.err{color:#a61717;background-color:#e3d2d2}.k{color:#c59659;font-weight:bold}.o{color:#c59659;font-weight:bold}.cm{color:#999988;font-style:italic}.cp{color:#999999;font-weight:bold;font-style:italic}.c1{color:#999988;font-style:italic}.cs{color:#999999;font-weight:bold;font-style:italic}.gd{color:#000000;background-color:#fdd}.ge{color:#000000;font-style:italic}.gr{color:#a00}.gh{color:#999}.gi{color:#000000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gs{font-weight:bold}.gu{color:#aaa}.gt{color:#a00}.kc{color:#000000;font-weight:bold}.kd{color:#000000;font-weight:bold}.kn{color:#000000;font-weight:bold}.kp{color:#000000;font-weight:bold}.kr{color:#000000;font-weight:bold}.kt{color:#445588;font-weight:bold}.m{color:#099}.s{color:#fce773}.na{color:teal}.nb{color:#0086B3}.nc{color:#445588;font-weight:bold}.no{color:teal}.nd{color:#3c5d5d;font-weight:bold}.ni{color:purple}.ne{color:#99b898;font-weight:bold}.nf{color:#99b898;font-weight:bold}.nl{color:#99b898;font-weight:bold}.nn{color:#555}.nt{color:#ff847c}.nv{color:teal}.ow{color:#000000;font-weight:bold}.w{color:#bbb}.mf{color:#099}.mh{color:#099}.mi{color:#099}.mo{color:#099}.sb{color:#fce773}.sc{color:#fce773}.sd{color:#fce773}.s2{color:#fce773}.se{color:#fce773}.sh{color:#fce773}.si{color:#773f00}.sx{color:#fce773}.sr{color:#009926}.s1{color:#ff847c}.ss{color:#990073}.bp{color:#999}.vc{color:#2e878a}.vg{color:#2e878a}.vi{color:#2e878a}.il{color:#099}body{background:#161820;color:#efeff0;height:100%;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;overflow-x:hidden}.container{width:90%;max-width:1200px;margin:0 auto}.header .nav,.footer .nav{text-align:right}.header .logo,.footer .logo{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}.header .container,.footer .container{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;padding:1rem 0}@media screen and (min-width: 40em){.header .container,.footer .container{-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}}.header .nav{display:flex;flex-direction:column-reverse;align-items:flex-end;justify-content:flex-end;overflow:hidden}.feature{padding-bottom:.4rem;margin-bottom:1.6rem;text-align:center;background:#c5c6c7;background-size:cover;background-position:center}.feature .container{min-height:40vh;max-width:60%;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center}.logo{display:inline-block;line-height:0;max-height:7rem;display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}.logo img{max-height:7rem}.nav a{padding:.2rem}.nav--social a{display:inline-block;line-height:1}.small{padding-top:.8rem;color:#529e99;display:inline-block}.footer{background:#161820;color:#529e99}.footer a{color:#529e99}.footer a:hover{color:#161820}.footer .container{-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.footer .small{padding-top:0}.nav--paginator{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;color:#529e99;text-align:center}.pagination{min-width:20%}.main{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;justify-content:flex-start;margin-bottom:1.6rem}@media screen and (min-width: 40em){.main{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}}.header,.feature,.footer{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}@media screen and (min-width: 40em){.content{width:85%}}.share .button{margin-right:.3rem}@media screen and (min-width: 40em){.aside{max-width:20%;margin-left:5%;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;opacity:0.7;transition:opacity .1s}.aside .section{position:sticky;top:0}.aside--left{margin-left:0;margin-right:5%;order:-1}.aside:hover{opacity:1}}.section{margin:0}.list{list-style:none}.list--nav{overflow:hidden;margin-bottom:var(--listHeight, 0)}.list .item--post,.list .item--result,.list .item--category{margin-left:0}@media screen and (min-width: 40em){.item--nav{margin-left:.4rem;display:inline-block}}.item--nav:first-of-type{margin-left:0}.item--current a{color:#529e99}a .icon{transition:fill .1s}a .icon:hover{fill:currentColor}.icon{vertical-align:middle;width:1.1em;height:1.1em;fill:CurrentColor}img{max-width:100%;height:auto}.figure{line-height:0}.figure--left{float:left;padding-right:.8rem}.figure--right{float:right;text-align:right;padding-left:.8rem}.figure--center{text-align:center;clear:both}.video,.map{position:relative;padding-bottom:56.25%;height:0}.video iframe,.map iframe{position:absolute;top:0;left:0;width:100%;height:100%}.map{padding-bottom:70%}.figure,.video,.map,.form{margin-bottom:.8rem}audio,video{width:100%}.form{position:relative}.form__legend{font-style:italic;color:#529e99;position:absolute;overflow:hidden;right:0;clip:rect(0 0 0 0)}button,.button,input[type="text"],input[type="email"],input[type="search"],input[type="submit"],input[type="color"],textarea,select{padding:.6rem 1.2rem;margin-bottom:.6rem;transition:color .1s, background-color .1s, border .1s;line-height:inherit;border:none;box-shadow:none;border-radius:0;-webkit-appearance:none}button .icon,.button .icon,input[type="text"] .icon,input[type="email"] .icon,input[type="search"] .icon,input[type="submit"] .icon,input[type="color"] .icon,textarea .icon,select .icon{margin:0 0 .35rem}input[type="submit"],button,.button{cursor:pointer;display:inline-block;color:#161820;background:#45a29e;transition:box-shadow .1s;will-change:box-shadow;box-shadow:inset 0 0 0 2rem transparent}input[type="submit"]:hover,button:hover,.button:hover{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}input[type="submit"]:active,input[type="submit"]:focus,button:active,button:focus,.button:active,.button:focus{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}.button--nav{background:none;color:#45a29e;margin-bottom:0;min-height:4rem;min-width:4rem}@media screen and (min-width: 40em){.button--nav{display:none}}.button--nav:hover,.button--nav:focus{box-shadow:none;color:#66fcf1}a:focus,a:hover:focus,button:focus,button:hover:focus,.button:focus,.button:hover:focus,input:focus,input:hover:focus,textarea:focus,textarea:hover:focus,select:focus,select:hover:focus{outline:solid 0.12rem #45a29e;outline-offset:-.12rem}a:hover:focus{outline:none}input[type="text"],input[type="email"],input[type="search"],input[type="color"],textarea,select{width:100%;border:1px solid #529e99}input[type="text"]:hover,input[type="email"]:hover,input[type="search"]:hover,input[type="color"]:hover,textarea:hover,select:hover{border-color:#efeff0}select{background:#1f2833}textarea{resize:vertical}label{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){label{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){label{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){label{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){label{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}code{padding:.12rem .2rem;color:#66fcf1}pre code{padding:0}.required{color:#fff}::-webkit-input-placeholder{opacity:0.5}::-moz-placeholder{opacity:0.5}:-ms-input-placeholder{opacity:0.5}:-moz-placeholder{opacity:0.5}::selection{background:#66fcf1;color:#161820;text-shadow:none}.typeset a>code{text-shadow:none}.typeset .button,.typeset button{background-image:none;text-shadow:none;color:#161820}.typeset .button:hover,.typeset .button:active,.typeset .button:focus,.typeset button:hover,.typeset button:active,.typeset button:focus{background-image:none;color:#161820}.typeset hr{width:100%}.typeset li>p{padding:0;margin:0}.typeset .nav a{padding-left:0;padding-right:0;margin-left:.2rem;margin-right:.2rem}.typeset pre{white-space:pre;overflow-x:scroll}</style>


    

    
  
    <link rel="icon" type="image/png" href="/assets/logos/16x.png" sizes="16x16">
    <link rel="apple-touch-icon" sizes="16x16" href="/assets/logos/16x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/32x.png" sizes="32x32">
    <link rel="apple-touch-icon" sizes="32x32" href="/assets/logos/32x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/96x.png" sizes="96x96">
    <link rel="apple-touch-icon" sizes="96x96" href="/assets/logos/96x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/120.png" sizes="120x120">
    <link rel="apple-touch-icon" sizes="120x120" href="/assets/logos/120.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/144.png" sizes="144x144">
    <link rel="apple-touch-icon" sizes="144x144" href="/assets/logos/144.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/180.png" sizes="180x180">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/logos/180.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/512.png" sizes="512x512">
    <link rel="apple-touch-icon" sizes="512x512" href="/assets/logos/512.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/1024.png" sizes="1024x1024">
    <link rel="apple-touch-icon" sizes="1024x1024" href="/assets/logos/1024.png">
  

<link rel="shortcut icon" href="/assets/logos/logo-cdong.gif">


    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-168923617-1');
  gtag('config', 'UA-168923617-1', {
    'anonymize_ip': true
  });
</script>


    <!-- Overwrite this file with code you want before the closing head tag -->

    <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA" />
  </head>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-168923617-1');
  </script>


  <body class="layout-post  darkside-ransomware">
    <svg xmlns="http://www.w3.org/2000/svg" style="height: 0; position: absolute" xmlns:xlink="http://www.w3.org/1999/xlink">
  <symbol id="codepen" viewbox="0 0 16 16"><path d="M15.988 5.443c-.004-.02-.007-.04-.012-.058l-.01-.033c-.006-.017-.012-.034-.02-.05-.003-.012-.01-.023-.014-.034l-.023-.045-.02-.032-.03-.04-.024-.03c-.01-.013-.022-.026-.034-.038l-.027-.027-.04-.032-.03-.024-.012-.01L8.38.117c-.23-.155-.53-.155-.76 0L.305 4.99.296 5c-.012.007-.022.015-.032.023-.014.01-.027.02-.04.032l-.027.027-.034.037-.024.03-.03.04c-.006.012-.013.022-.02.033l-.023.045-.015.034c-.007.016-.012.033-.018.05l-.01.032c-.005.02-.01.038-.012.058l-.006.03C.002 5.5 0 5.53 0 5.56v4.875c0 .03.002.06.006.09l.007.03c.003.02.006.04.013.058l.01.033c.006.018.01.035.018.05l.015.033c.006.016.014.03.023.047l.02.03c.008.016.018.03.03.042.007.01.014.02.023.03.01.012.02.025.034.036.01.01.018.02.028.026l.04.033.03.023.01.01 7.31 4.876c.116.078.248.117.382.116.134 0 .266-.04.38-.116l7.314-4.875.01-.01c.012-.007.022-.015.032-.023.014-.01.027-.02.04-.032l.027-.027.034-.037.024-.03.03-.04.02-.032.023-.046.015-.033.018-.052.01-.033c.005-.02.01-.038.013-.058 0-.01.003-.02.004-.03.004-.03.006-.06.006-.09V5.564c0-.03-.002-.06-.006-.09l-.007-.03zM8 9.626L5.568 8 8 6.374 10.432 8 8 9.626zM7.312 5.18l-2.98 1.993-2.406-1.61 5.386-3.59v3.206zM3.095 8l-1.72 1.15v-2.3L3.095 8zm1.237.828l2.98 1.993v3.208l-5.386-3.59 2.406-1.61zm4.355 1.993l2.98-1.993 2.407 1.61-5.387 3.59v-3.206zM12.905 8l1.72-1.15v2.3L12.905 8zm-1.237-.827L8.688 5.18V1.97l5.386 3.59-2.406 1.61z" fill-rule="nonzero"></path></symbol>
  <symbol id="dribbble" viewbox="0 0 16 16"><path d="M8 16c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm6.747-6.905c-.234-.074-2.115-.635-4.257-.292.894 2.456 1.258 4.456 1.328 4.872 1.533-1.037 2.624-2.68 2.93-4.58zM10.67 14.3c-.102-.6-.5-2.688-1.46-5.18l-.044.014C5.312 10.477 3.93 13.15 3.806 13.4c1.158.905 2.614 1.444 4.194 1.444.947 0 1.85-.194 2.67-.543zm-7.747-1.72c.155-.266 2.03-3.37 5.555-4.51.09-.03.18-.056.27-.08-.173-.39-.36-.778-.555-1.16C4.78 7.85 1.47 7.807 1.17 7.8l-.003.208c0 1.755.665 3.358 1.756 4.57zM1.31 6.61c.307.005 3.122.017 6.318-.832-1.132-2.012-2.353-3.705-2.533-3.952-1.912.902-3.34 2.664-3.784 4.785zM6.4 1.368c.188.253 1.43 1.943 2.548 4 2.43-.91 3.46-2.293 3.582-2.468C11.323 1.827 9.736 1.176 8 1.176c-.55 0-1.087.066-1.6.19zm6.89 2.322c-.145.194-1.29 1.662-3.816 2.694.16.325.31.656.453.99.05.117.1.235.147.352 2.274-.286 4.533.172 4.758.22-.015-1.613-.59-3.094-1.543-4.257z"></path></symbol>
  <symbol id="designernews" viewbox="0 0 16 16"><path d="M7.514 7.988c0-2.555-1.57-4.287-4.56-4.287H0v8.6h3.016c2.903 0 4.498-1.75 4.498-4.31zM5.37 8c0 1.844-.946 2.642-2.467 2.642H2.13V5.358h.773C4.36 5.358 5.37 6.193 5.37 8zM16 12.3V3.7h-1.98v4.81L10.853 3.7h-2.07v8.6h1.982V7.152l3.39 5.146H16z"></path></symbol>
  <symbol id="facebook" viewbox="0 0 16 16"><path d="M15.117 0H.883C.395 0 0 .395 0 .883v14.234c0 .488.395.883.883.883h7.663V9.804H6.46V7.39h2.086V5.607c0-2.066 1.262-3.19 3.106-3.19.883 0 1.642.064 1.863.094v2.16h-1.28c-1 0-1.195.476-1.195 1.176v1.54h2.39l-.31 2.416h-2.08V16h4.077c.488 0 .883-.395.883-.883V.883C16 .395 15.605 0 15.117 0" fill-rule="nonzero"></path></symbol>
  <symbol id="flickr" viewbox="0 0 16 16"><path d="M0 8c0 2.05 1.662 3.71 3.71 3.71 2.05 0 3.713-1.66 3.713-3.71S5.76 4.29 3.71 4.29C1.663 4.29 0 5.95 0 8zm8.577 0c0 2.05 1.662 3.71 3.712 3.71C14.337 11.71 16 10.05 16 8s-1.662-3.71-3.71-3.71c-2.05 0-3.713 1.66-3.713 3.71z"></path></symbol>
  <symbol id="github" viewbox="0 0 16 16"><path d="M8 0C3.58 0 0 3.582 0 8c0 3.535 2.292 6.533 5.47 7.59.4.075.547-.172.547-.385 0-.19-.007-.693-.01-1.36-2.226.483-2.695-1.073-2.695-1.073-.364-.924-.89-1.17-.89-1.17-.725-.496.056-.486.056-.486.803.056 1.225.824 1.225.824.714 1.223 1.873.87 2.33.665.072-.517.278-.87.507-1.07-1.777-.2-3.644-.888-3.644-3.953 0-.873.31-1.587.823-2.147-.083-.202-.358-1.015.077-2.117 0 0 .672-.215 2.2.82.638-.178 1.323-.266 2.003-.27.68.004 1.364.092 2.003.27 1.527-1.035 2.198-.82 2.198-.82.437 1.102.163 1.915.08 2.117.513.56.823 1.274.823 2.147 0 3.073-1.87 3.75-3.653 3.947.287.246.543.735.543 1.48 0 1.07-.01 1.933-.01 2.195 0 .215.144.463.55.385C13.71 14.53 16 11.534 16 8c0-4.418-3.582-8-8-8"></path></symbol>
  <symbol id="hackernews" viewbox="0 0 16 16"><path d="M0 0v16h16V0H0zm8.92 8.96v3H7.25v-3l-2.75-5h1.96l1.66 3.48L9.7 3.96h1.88l-2.66 5z"></path></symbol>
  <symbol id="instagram" viewbox="0 0 16 16"><path d="M8 0C5.827 0 5.555.01 4.702.048 3.85.088 3.27.222 2.76.42c-.526.204-.973.478-1.417.923-.445.444-.72.89-.923 1.417-.198.51-.333 1.09-.372 1.942C.008 5.555 0 5.827 0 8s.01 2.445.048 3.298c.04.852.174 1.433.372 1.942.204.526.478.973.923 1.417.444.445.89.72 1.417.923.51.198 1.09.333 1.942.372.853.04 1.125.048 3.298.048s2.445-.01 3.298-.048c.852-.04 1.433-.174 1.942-.372.526-.204.973-.478 1.417-.923.445-.444.72-.89.923-1.417.198-.51.333-1.09.372-1.942.04-.853.048-1.125.048-3.298s-.01-2.445-.048-3.298c-.04-.852-.174-1.433-.372-1.942-.204-.526-.478-.973-.923-1.417-.444-.445-.89-.72-1.417-.923-.51-.198-1.09-.333-1.942-.372C10.445.008 10.173 0 8 0zm0 1.44c2.136 0 2.39.01 3.233.048.78.036 1.203.166 1.485.276.374.145.64.318.92.598.28.28.453.546.598.92.11.282.24.705.276 1.485.038.844.047 1.097.047 3.233s-.01 2.39-.048 3.233c-.036.78-.166 1.203-.276 1.485-.145.374-.318.64-.598.92-.28.28-.546.453-.92.598-.282.11-.705.24-1.485.276-.844.038-1.097.047-3.233.047s-2.39-.01-3.233-.048c-.78-.036-1.203-.166-1.485-.276-.374-.145-.64-.318-.92-.598-.28-.28-.453-.546-.598-.92-.11-.282-.24-.705-.276-1.485C1.45 10.39 1.44 10.136 1.44 8s.01-2.39.048-3.233c.036-.78.166-1.203.276-1.485.145-.374.318-.64.598-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276C5.61 1.45 5.864 1.44 8 1.44zm0 2.452c-2.27 0-4.108 1.84-4.108 4.108 0 2.27 1.84 4.108 4.108 4.108 2.27 0 4.108-1.84 4.108-4.108 0-2.27-1.84-4.108-4.108-4.108zm0 6.775c-1.473 0-2.667-1.194-2.667-2.667 0-1.473 1.194-2.667 2.667-2.667 1.473 0 2.667 1.194 2.667 2.667 0 1.473-1.194 2.667-2.667 2.667zm5.23-6.937c0 .53-.43.96-.96.96s-.96-.43-.96-.96.43-.96.96-.96.96.43.96.96z"></path></symbol>
  <symbol id="linkedin" viewbox="0 0 16 16"><path d="M13.632 13.635h-2.37V9.922c0-.886-.018-2.025-1.234-2.025-1.235 0-1.424.964-1.424 1.96v3.778h-2.37V6H8.51V7.04h.03c.318-.6 1.092-1.233 2.247-1.233 2.4 0 2.845 1.58 2.845 3.637v4.188zM3.558 4.955c-.762 0-1.376-.617-1.376-1.377 0-.758.614-1.375 1.376-1.375.76 0 1.376.617 1.376 1.375 0 .76-.617 1.377-1.376 1.377zm1.188 8.68H2.37V6h2.376v7.635zM14.816 0H1.18C.528 0 0 .516 0 1.153v13.694C0 15.484.528 16 1.18 16h13.635c.652 0 1.185-.516 1.185-1.153V1.153C16 .516 15.467 0 14.815 0z" fill-rule="nonzero"></path></symbol>
  <symbol id="medium" viewbox="0 0 16 16"><path d="M11.824 12.628l-.276.45.798.398 2.744 1.372c.15.076.294.11.418.11.278 0 .467-.177.467-.492V5.883l-4.15 6.745zm4.096-8.67c-.004-.003 0-.01-.003-.012l-4.825-2.412c-.06-.03-.123-.038-.187-.044-.016 0-.03-.01-.047-.01-.184 0-.368.092-.467.254l-.24.39-.5.814-1.89 3.08 1.89 3.076.5.813.5.812.59.95 4.71-7.64c.02-.03.01-.06-.02-.08zm-6.27 7.045L7.17 6.97l-.295-.477-.294-.477-.25-.416v4.867l3.32 1.663.5.25.5.25-.5-.813-.5-.813zM.737 1.68L.59 1.608c-.085-.042-.166-.062-.24-.062-.206 0-.35.16-.35.427v10.162c0 .272.2.594.442.716l4.145 2.08c.107.06.208.08.3.08.257 0 .438-.2.438-.53V4.01c0-.02-.012-.04-.03-.047L.738 1.68z"></path></symbol>
  <symbol id="pinterest" viewbox="0 0 16 16"><path d="M8 0C3.582 0 0 3.582 0 8c0 3.39 2.108 6.285 5.084 7.45-.07-.633-.133-1.604.028-2.295.146-.625.938-3.977.938-3.977s-.24-.48-.24-1.188c0-1.11.646-1.943 1.448-1.943.683 0 1.012.513 1.012 1.127 0 .687-.436 1.713-.662 2.664-.19.797.4 1.445 1.185 1.445 1.42 0 2.514-1.498 2.514-3.662 0-1.915-1.376-3.254-3.342-3.254-2.276 0-3.61 1.707-3.61 3.472 0 .687.263 1.424.593 1.825.066.08.075.15.057.23-.06.252-.196.796-.223.907-.035.146-.115.178-.268.107-.998-.465-1.624-1.926-1.624-3.1 0-2.524 1.834-4.84 5.287-4.84 2.774 0 4.932 1.977 4.932 4.62 0 2.757-1.74 4.977-4.153 4.977-.81 0-1.572-.422-1.833-.92l-.5 1.902c-.18.695-.667 1.566-.994 2.097.75.232 1.545.357 2.37.357 4.417 0 8-3.582 8-8s-3.583-8-8-8z" fill-rule="nonzero"></path></symbol>
  <symbol id="rss" viewbox="0 0 16 16"><path d="M12.8 16C12.8 8.978 7.022 3.2 0 3.2V0c8.777 0 16 7.223 16 16h-3.2zM2.194 11.61c1.21 0 2.195.985 2.195 2.196 0 1.21-.985 2.194-2.196 2.194C.984 16 0 15.017 0 13.806c0-1.21.983-2.195 2.194-2.195zM10.606 16h-3.11c0-4.113-3.383-7.497-7.496-7.497v-3.11c5.818 0 10.606 4.79 10.606 10.607z"></path></symbol>
  <symbol id="reddit" viewbox="0 0 16 16"><path d="M1.473 9.368c-.04.185-.06.374-.06.566 0 2.3 2.94 4.173 6.554 4.173 3.613 0 6.553-1.872 6.553-4.173 0-.183-.02-.364-.055-.54l-.01-.022c-.013-.036-.02-.073-.02-.11-.2-.784-.745-1.497-1.533-2.072-.03-.01-.058-.026-.084-.047-.017-.013-.03-.028-.044-.043-1.198-.824-2.91-1.34-4.807-1.34-1.88 0-3.576.506-4.772 1.315-.01.012-.02.023-.033.033-.026.022-.056.04-.087.05-.805.576-1.364 1.293-1.572 2.086 0 .038-.01.077-.025.114l-.005.01zM8 13.003c-1.198 0-2.042-.26-2.58-.8-.116-.116-.116-.305 0-.422.117-.11.307-.11.424 0 .42.42 1.125.63 2.155.63 1.03 0 1.73-.2 2.15-.62.11-.11.3-.11.42 0 .11.12.11.31 0 .43-.54.54-1.38.8-2.58.8zM5.592 7.945c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zm4.83 0c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zM13.46 6.88c.693.556 1.202 1.216 1.462 1.94.3-.225.48-.578.48-.968 0-.67-.545-1.214-1.214-1.214-.267 0-.52.087-.728.243zM1.812 6.64c-.67 0-1.214.545-1.214 1.214 0 .363.16.7.43.927.268-.72.782-1.37 1.478-1.92-.202-.14-.443-.22-.694-.22zm6.155 8.067c-3.944 0-7.152-2.14-7.152-4.77 0-.183.016-.363.046-.54-.53-.33-.86-.91-.86-1.545 0-1 .82-1.812 1.82-1.812.45 0 .87.164 1.2.455 1.24-.796 2.91-1.297 4.75-1.33l1.21-3.69.27.063s.01 0 .01.002l2.82.663c.23-.533.76-.908 1.38-.908.82 0 1.49.67 1.49 1.492 0 .823-.67 1.492-1.49 1.492s-1.49-.67-1.49-1.49L9.4 2.18l-.98 2.99c1.77.07 3.37.57 4.57 1.35.33-.31.764-.48 1.225-.48 1 0 1.814.81 1.814 1.81 0 .66-.36 1.26-.92 1.58.02.17.04.33.04.5-.01 2.63-3.21 4.77-7.16 4.77zM13.43 1.893c-.494 0-.895.4-.895.894 0 .493.4.894.894.894.49 0 .89-.4.89-.89s-.4-.89-.9-.89z"></path></symbol>
  <symbol id="skype" viewbox="0 0 16 16"><path d="M8.035 12.6c-2.685 0-3.885-1.322-3.885-2.313 0-.51.374-.865.89-.865 1.15 0 .85 1.653 2.995 1.653 1.096 0 1.703-.597 1.703-1.208 0-.368-.18-.775-.904-.954l-2.387-.597C4.524 7.833 4.175 6.79 4.175 5.812c0-2.034 1.91-2.798 3.704-2.798 1.65 0 3.6.916 3.6 2.136 0 .523-.452.827-.97.827-.98 0-.798-1.36-2.773-1.36-.98 0-1.523.444-1.523 1.08 0 .636.774.84 1.446.993l1.767.392c1.936.433 2.427 1.566 2.427 2.633 0 1.652-1.266 2.886-3.82 2.886m7.4-3.264l-.014.084-.028-.16c.015.024.028.05.042.076.082-.45.125-.912.125-1.373 0-1.023-.2-2.014-.595-2.948-.38-.902-.925-1.712-1.62-2.407-.692-.696-1.5-1.242-2.4-1.623C10.015.59 9.025.39 8.005.39c-.48 0-.963.045-1.43.135H6.57l.08.04-.16-.023.08-.016C5.927.183 5.205 0 4.472 0 3.278 0 2.155.466 1.31 1.313.465 2.16 0 3.286 0 4.483c0 .763.195 1.512.563 2.175l.013-.083.028.16c-.015-.026-.027-.052-.04-.077-.076.43-.115.867-.115 1.305 0 1.022.2 2.014.593 2.948.38.903.925 1.713 1.62 2.408.693.695 1.5 1.242 2.4 1.623.932.397 1.92.597 2.94.597.445 0 .89-.04 1.325-.118l-.077-.043.162.028-.084.014c.67.378 1.426.58 2.2.58 1.194 0 2.317-.466 3.162-1.313.845-.846 1.31-1.972 1.31-3.17 0-.765-.197-1.517-.566-2.18" fill-rule="nonzero"></path></symbol>
  <symbol id="tumblr" viewbox="0 0 16 16"><path d="M9.708 16c-3.396 0-4.687-2.504-4.687-4.274V6.498H3.403V4.432C5.83 3.557 6.412 1.368 6.55.12c.01-.086.077-.12.115-.12H9.01v4.076h3.2v2.422H8.997v4.98c.01.667.25 1.58 1.472 1.58h.067c.424-.012.994-.136 1.29-.278l.77 2.283c-.288.424-1.594.916-2.77.936h-.12z" fill-rule="nonzero"></path></symbol>
  <symbol id="twitch" viewbox="0 0 16 16"><g fill-rule="nonzero"><path d="M1.393 0L.35 2.783v11.13h3.824V16h2.088l2.085-2.088h3.13L15.65 9.74V0H1.394zm1.39 1.39H14.26v7.653l-2.435 2.435H8l-2.085 2.085v-2.085H2.783V1.39z"></path><path d="M6.61 8.348H8V4.175H6.61v4.173zm3.824 0h1.39V4.175h-1.39v4.173z"></path></g></symbol>
  <symbol id="twitter" viewbox="0 0 16 16"><path d="M16 3.038c-.59.26-1.22.437-1.885.517.677-.407 1.198-1.05 1.443-1.816-.634.375-1.337.648-2.085.795-.598-.638-1.45-1.036-2.396-1.036-1.812 0-3.282 1.468-3.282 3.28 0 .258.03.51.085.75C5.152 5.39 2.733 4.084 1.114 2.1.83 2.583.67 3.147.67 3.75c0 1.14.58 2.143 1.46 2.732-.538-.017-1.045-.165-1.487-.41v.04c0 1.59 1.13 2.918 2.633 3.22-.276.074-.566.114-.865.114-.21 0-.416-.02-.617-.058.418 1.304 1.63 2.253 3.067 2.28-1.124.88-2.54 1.404-4.077 1.404-.265 0-.526-.015-.783-.045 1.453.93 3.178 1.474 5.032 1.474 6.038 0 9.34-5 9.34-9.338 0-.143-.004-.284-.01-.425.64-.463 1.198-1.04 1.638-1.7z" fill-rule="nonzero"></path></symbol>
  <symbol id="vimeo" viewbox="0 0 16 16"><path d="M15.992 4.275c-.07 1.56-1.16 3.697-3.263 6.41-2.176 2.832-4.017 4.248-5.522 4.248-.933 0-1.722-.862-2.367-2.588L3.55 7.6c-.48-1.724-.993-2.587-1.542-2.587-.12 0-.538.252-1.255.755L0 4.796C.79 4.1 1.568 3.406 2.335 2.71c1.053-.912 1.844-1.39 2.37-1.44 1.246-.12 2.012.733 2.3 2.56.31 1.97.526 3.194.647 3.673.36 1.634.754 2.45 1.185 2.45.335 0 .838-.53 1.51-1.59.67-1.06 1.028-1.866 1.076-2.42.096-.915-.263-1.374-1.077-1.374-.383 0-.778.087-1.185.262.788-2.58 2.29-3.834 4.508-3.762 1.644.048 2.42 1.116 2.324 3.205z" fill-rule="nonzero"></path></symbol>
  <symbol id="youtube" viewbox="0 0 16 16"><path d="M0 7.345c0-1.294.16-2.59.16-2.59s.156-1.1.636-1.587c.608-.637 1.408-.617 1.764-.684C3.84 2.36 8 2.324 8 2.324s3.362.004 5.6.166c.314.038.996.04 1.604.678.48.486.636 1.588.636 1.588S16 6.05 16 7.346v1.258c0 1.296-.16 2.59-.16 2.59s-.156 1.102-.636 1.588c-.608.638-1.29.64-1.604.678-2.238.162-5.6.166-5.6.166s-4.16-.037-5.44-.16c-.356-.067-1.156-.047-1.764-.684-.48-.487-.636-1.587-.636-1.587S0 9.9 0 8.605v-1.26zm6.348 2.73V5.58l4.323 2.255-4.32 2.24h-.002z"></path></symbol>
  <symbol id="link" viewbox="0 0 16 16"><path d="M5.86 12.7l-.81.8c-.7.7-1.84.7-2.54 0a1.75 1.75 0 0 1 0-2.5l2.98-2.96c.61-.61 1.77-1.52 2.62-.68a1 1 0 1 0 1.4-1.4c-1.44-1.43-3.57-1.17-5.42.67L1.1 9.6a3.72 3.72 0 0 0 0 5.32 3.78 3.78 0 0 0 5.34 0l.8-.8a1 1 0 1 0-1.39-1.42zm9.03-11.5c-1.55-1.53-3.7-1.6-5.14-.19l-1 1a1 1 0 1 0 1.39 1.41l1-1c.75-.74 1.72-.43 2.35.2a1.75 1.75 0 0 1 0 2.5l-3.17 3.15c-1.46 1.45-2.14.77-2.43.48a1 1 0 0 0-1.4 1.4c.67.67 1.43 1 2.23 1 .98 0 2.01-.5 3-1.47l3.17-3.15a3.72 3.72 0 0 0 0-5.32z"></path></symbol>
  <symbol id="email" viewbox="0 0 16 11"><path fill-rule="evenodd" d="M1.33 0h13.34L8 5 1.33 0zM16 0v11H0V0l8 6 8-6z"></path></symbol>
  <symbol id="nav" viewbox="0 0 16 11"><path d="M0 12h16v-2H0v2zm0-5h16V5H0v2zm0-7v2h16V0H0z"></path></symbol>
</svg>


    <header class="header">
  <div class="container">
    <a class="logo" href="/">
  <img src="/assets/logos/logo-cdong.gif" alt="">
</a>


    
<nav class="nav  nav--header">
  <ul class="list  list--nav">
    

      

      <li class="item  item--nav">
        <a href="/">Home</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/about/">About</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/blog/">Blog</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/search/">Search</a>
      </li>
    
  </ul>
  <button class="button  button--nav" aria-label="Menu toggle">
    <svg width="16" height="16" class="icon  icon--nav" role="img" alt="Menu"><title>Menu</title>
<use xlink:href="#nav" fill="CurrentColor"></use></svg>

  </button>
</nav>


<script type="text/javascript">
  // Get list and button
  const navList = document.querySelector('.header .list--nav')
  const button  = document.querySelector('.header .button--nav')

  // Hide nav and apply toggle
  const collapseNav = () => {
    if (document.body.clientWidth < 640) {
      navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
    } else {
      navList.removeAttribute('style')
    }

    button.onclick = () => {
      navList.style.setProperty('transition', `margin .1s`)
      if (navList.style.getPropertyValue('--listHeight')) {
        navList.style.removeProperty('--listHeight')
      } else {
        navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
      }
    }
  }

  collapseNav()

  // Check on resize if to collapse nav
  window.addEventListener('resize', () => {
    collapseNav()
  })
</script>

  </div>

  





  <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA">
</header>


<main class="main  container">

  <article class="article  article--post  content  typeset">

    

<small class="small  post-meta">
  
  
    
      <span class="label  label--category"><a href="/categories/#reverse%20engineering">Reverse Engineering</a></span>
    
   · <time datetime="2021-05-06T00:00:00-04:00" class="time">06 May 2021</time>
</small>

    
    <h1 id="darkside-ransomware">Darkside Ransomware</h1>

<h2 id="overview">Overview</h2>

<p>This is my report for one of the latest Windows samples of <strong>Darkside Ransomware v1.8.6.2</strong>!</p>

<p>Since there is not a lot of in-depth analysis on <strong>Darkside</strong> out there, I decided to just write one myself.</p>

<p><strong>Darkside</strong> uses <strong>aPLib</strong> algorithm to compress its configuration and a hybrid-cryptography scheme of custom <strong>RSA-1024</strong> and <strong>Salsa20</strong> to encrypt files and protect its keys.</p>

<p>Despite using code obfuscation and sophisticated techniques for privilege escalation and encryption, the ransomware is slower in encryption speed compared to others such as <strong>Babuk</strong> or <strong>Conti</strong> due to its recursive file traversal.</p>

<p><img src="/uploads/Darkside2.PNG" alt="alt text"></p>

<p><em>Figure 1: Darkside Ransomware leak site.</em></p>

<h2 id="iocs">IOCS</h2>

<p>This particular sample that I used for my analysis is a 32-bit .exe file.</p>

<p>There are a Linux version that is more enjoyable to analyze but I’m too lazy to cover both…</p>

<p><strong>MD5</strong>: 9d418ecc0f3bf45029263b0944236884</p>

<p><strong>SHA256</strong>: 151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5</p>

<p><strong>Sample</strong>: https://bazaar.abuse.ch/sample/151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5/</p>

<p><img src="/uploads/Darkside1.PNG" alt="alt text"></p>

<p><em>Figure 2: VirusTotal information.</em></p>

<h2 id="ransom-note">Ransom Note</h2>

<p>The ransom note is encrypted and stored inside the aPLib-compressed configuration.</p>

<p>The GUID checksum is generated and appended to the end of each ransom note file name.</p>

<p><img src="/uploads/Darkside3.PNG" alt="alt text"></p>

<p><em>Figure 3: Darkside ransom note.</em></p>

<h2 id="static-code-analysis">Static Code Analysis</h2>

<h3 id="generate-key_buffer">Generate KEY_BUFFER</h3>

<p>Upon execution, Darkside generates a global 256-byte buffer. This buffer is significant since it is used to resolve APIs and decrypt encrypted strings/buffers in memory.</p>

<p>Let us call this buffer <strong>KEY_BUFFER</strong>. This buffer is generated using two hard-coded 16-byte keys in memory.</p>

<p><img src="/uploads/Darkside4.PNG" alt="alt text"></p>

<p><em>Figure 4: 16-byte keys used to generate <strong>KEY_BUFFER</strong></em></p>

<p>Here is the function to generate <strong>KEY_BUFFER</strong>.</p>

<p>It first has a loop to write the 4 DWORDs from <strong>key1</strong> into <strong>KEY_BUFFER</strong> and subtract 0x10101010 from each DWORD each time. Then, it has another loop to add bytes in <strong>key2</strong> to <strong>bytes</strong> in <strong>KEY_BUFFER</strong> and swap them around.</p>

<p><img src="/uploads/Darkside5.PNG" alt="alt text"></p>

<p><em>Figure 5: <strong>KEY_BUFFER</strong> generation algorithm.</em></p>

<p>I didn’t bother to understand this fully because it’s just a simple algorithm to generate a buffer. You can find my IDAPython implementation to automatically generate it <a href="https://github.com/cdong1012/IDAPython-Malware-Scripts/blob/master/Darkside/darkside_parser.py">here</a>.</p>

<h3 id="buffer-decryption-algorithm">Buffer Decryption Algorithm.</h3>

<p>All strings and data buffers are encrypted in memory throughout the malware. Before using them, Darkside will allocate a heap buffer, decrypt the target data, and write it in before using it.</p>

<p>The decryption consists of a simple loop with byte swappings and a single XOR operation, which uses the data from the generated <strong>KEY_BUFFER</strong>.</p>

<p><img src="/uploads/Darkside6.PNG" alt="alt text"></p>

<p><em>Figure 6: Darkside’s data decryption algorithm.</em></p>

<p>This function, however, is only designed to decrypt at most 255 bytes because the size of the length parameter is just 1 byte.</p>

<p>To support bigger buffers, Darkside dedicates a wrapper function that calls <strong>decrypt_buff()</strong> for <em>buffer_length / 255</em> times with the length parameter of 255.</p>

<p>In case where the buffer length is not evenly divided by 255, the malware performs a modulus operation of <em>buffer_length % 255</em> and uses it as the length parameter for <strong>decrypt_buff()</strong> to decrypt the rest of the bytes.</p>

<p><img src="/uploads/Darkside7.PNG" alt="alt text"></p>

<p><em>Figure 7: Darkside’s large data decryption algorithm.</em></p>

<h3 id="dynamic-api-resolve">Dynamic API Resolve</h3>

<p>The dynamic API resolve function repeats the following operations.</p>

<p>First, it uses the <strong>decrypt_large_buffer()</strong> function to decrypt a library table in memory.</p>

<p>This table is divided into blobs with different sizes. The size of each blob is the 4-byte value that comes before it.</p>

<p><img src="/uploads/Darkside8.PNG" alt="alt text"></p>

<p><em>Figure 8: Encrypted blob layout for all encrypted buffer in memory.</em></p>

<p>In this table, each blob’s data is the encrypted version of a string, and this string can either be a DLL name or an API name.</p>

<p>The table is laid out in such a way that a blob with a DLL name comes first, and blobs with API names exported from that particular DLL come after.</p>

<p>If we perform the decryption on the entire table and eliminate the bytes representing the blobs’ size, we will get this.</p>

<p><img src="/uploads/Darkside9.PNG" alt="alt text"></p>

<p><em>Figure 9: Decrypted library table layout</em></p>

<p>After decrypting a DLL name, it then calls <strong>LoadLibraryA</strong> to load that library and begin importing the address into an API array in memory. The malware also wipes each decrypted string from memory whenever it finishes using it.</p>

<p>This operation is repeated until it has gone through all libraries in the table.</p>

<p><img src="/uploads/Darkside10.PNG" alt="alt text"></p>

<p><em>Figure 10: Dynamically importing APIs from the table.</em></p>

<p>The function to import the APIs for each library executes a loop that decrypts an API’s name, calls <strong>GetProcAddress</strong>, and writes each API’s address into the array every time.</p>

<p><img src="/uploads/Darkside11.PNG" alt="alt text"></p>

<p><em>Figure 11: Function to import APIs from a library.</em></p>

<p>As we can see, the API array is built in a sequential order from the first to the last API blob, and it is simple to write a script to decrypt all APIs names and write to the API array accordingly to automatically resolve all APIs.</p>

<p>You can view my IDAPython script to automatically import them into IDA <a href="https://github.com/cdong1012/IDAPython-Malware-Scripts/blob/master/Darkside/darkside_parser.py">here.</a></p>

<p>After running the script, the table will look like this, which makes static analysis much simpler.</p>

<p><img src="/uploads/Darkside12.PNG" alt="alt text"></p>

<p><em>Figure 12: Before and after importing APIs.</em></p>

<h3 id="configuration-resolve">Configuration Resolve</h3>

<p>The encrypted configuration is stored in memory and ends with the DWORD <strong><em>0xDEADBEEF</em></strong>. Because calling <strong>decrypt_large_buffer()</strong> requires knowing the encryped buffer size, this DWORD is necessary to iteratively find the configuration size.</p>

<p><img src="/uploads/Darkside13.PNG" alt="alt text"></p>

<p><em>Figure 13: Configuration decryption.</em></p>

<p>After calling <strong>decrypt_large_buffer()</strong>, the decrypted configuration has this specific layout.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Offset 0x0 - 0x7F: RSA-1024 exponent
- Offset 0x80 - 0x103: RSA-1024 modulus
- The rest: aPLib-compressed configuration.
</code></pre></div></div>

<p>Using the constants in comparison operations throughout the algorithm, it is quite simple to spot that <strong>Darkside</strong> decompresses using the <strong>aPLib</strong> algorithm.</p>

<p><img src="/uploads/Darkside14.PNG" alt="alt text"></p>

<p><em>Figure 14: <strong>aPLib</strong> decompress constants.</em></p>

<p>Since <strong>aPLib</strong> libraries are wildly available, I just grabbed a Python implementation on Github to decompress and parse the configuration into a JSON file. You can get my script to generate this JSON file <a href="https://github.com/cdong1012/IDAPython-Malware-Scripts/blob/master/Darkside/darkside_config_extractor.py">here.</a></p>

<p>Below is the full configuration of this sample in JSON format.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"VICTIM_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"[0x30, 0x36, 0x30, 0x31, 0x30, 0x38, 0x65, 0x66, 0x62, 0x35, 0x31, 0x30, 0x63, 0x39, 0x38, 0x0, 0xdb, 0x85, 0x9b, 0xad, 0x0, 0x38, 0xe0, 0xc4, 0xf0, 0x92, 0x9, 0xa2, 0xa3, 0xc6, 0x14, 0xa4]"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ENCRYPTION_MODE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Full"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"AVOID_PROCESS_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ENCRYPT_ALL_DRIVES_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ENCRYPT_NET_SHARED_RESOURCE_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"CHECK_RUSSIAN_COMP_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DELETE_SHADOW_COPIES_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"WIPE_RECYCLE_BIN_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SELF_DELETE_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"UAC_ELEVATION_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"AdjustTokenPrivileges_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"LOGGING_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DIRECTORY_TO_AVOID_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FILE_TO_AVOID_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FILE_EXTENSION_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DIR_TO_REMOVE_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SQL_SQL_LITE_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PROCESS_TO_KILL_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SERVICE_TO_KILL_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"THREAT_WALLPAPER_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"RANSOM_NOTE_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"CHANGE_ICON_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"BUILD_MUTEX_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"THREAD_OBJECT_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"C2_URL_FLAG"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DIRECTORY_TO_AVOID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$recycle.bin, config.msi, $windows.~bt, $windows.~ws, windows, appdata, application data, boot, google, mozilla, program files, program files (x86), programdata, system volume information, tor browser, windows.old, intel, msocache, perflogs, x64dbg, public, all users, default"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FILE_TO_AVOID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"autorun.inf, boot.ini, bootfont.bin, bootsect.bak, desktop.ini, iconcache.db, ntldr, ntuser.dat, ntuser.dat.log, ntuser.ini, thumbs.db"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FILE_EXTENSION_TO_AVOID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"386, adv, ani, bat, bin, cab, cmd, com, cpl, cur, deskthemepack, diagcab, diagcfg, diagpkg, dll, drv, exe, hlp, icl, icns, ico, ics, idx, ldf, lnk, mod, mpa, msc, msp, msstyles, msu, nls, nomedia, ocx, prf, ps1, rom, rtp, scr, shs, spl, sys, theme, themepack, wpx, lock, key, hta, msi, pdb"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"DIR_TO_REMOVE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"backup"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SQL_STRING"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sql, sqlite"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PROCESS_TO_AVOID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vmcompute.exe, vmms.exe, vmwp.exe, svchost.exe, TeamViewer.exe, explorer.exe"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PROCESS_TO_KILL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sql, oracle, ocssd, dbsnmp, synctime, agntsvc, isqlplussvc, xfssvccon, mydesktopservice, ocautoupds, encsvc, firefox, tbirdconfig, mydesktopqos, ocomm, dbeng50, sqbcoreservice, excel, infopath, msaccess, mspub, onenote, outlook, powerpnt, steam, thebat, thunderbird, visio, winword, wordpad, notepad"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SERVICE_TO_KILL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vss, sql, svc$, memtas, mepocs, sophos, veeam, backup, GxVss, GxBlr, GxFWD, GxCVD, GxCIMgr"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"C2_URL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"securebestapp20.com, temisleyes.com"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"THREAT_STRING"</span><span class="p">:</span><span class="w"> </span><span class="s2">"All of your files are encrypted! </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> Find %s and Follow Instructions!"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"RANSOM_NOTE"</span><span class="p">:</span><span class="w"> </span><span class="s2">"----------- [ Welcome to DarkSide ] -------------&gt; </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> What happend? </span><span class="se">\r\n</span><span class="s2"> ---------------------------------------------- </span><span class="se">\r\n</span><span class="s2"> Your computers and servers are encrypted, backups are deleted. We use strong encryption algorithms, so you cannot decrypt your data. </span><span class="se">\r\n</span><span class="s2"> But you can restore everything by purchasing a special program from us - universal decryptor. This program will restore all your network. </span><span class="se">\r\n</span><span class="s2"> Follow our instructions below and you will recover all your data. </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> What guarantees? </span><span class="se">\r\n</span><span class="s2"> ---------------------------------------------- </span><span class="se">\r\n</span><span class="s2"> We value our reputation. If we do not do our work and liabilities, nobody will pay us. This is not in our interests. </span><span class="se">\r\n</span><span class="s2"> All our decryption software is perfectly tested and will decrypt your data. We will also provide support in case of problems. </span><span class="se">\r\n</span><span class="s2"> We guarantee to decrypt one file for free. Go to the site and contact us. </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> How to get access on website?  </span><span class="se">\r\n</span><span class="s2"> ---------------------------------------------- </span><span class="se">\r\n</span><span class="s2"> Using a TOR browser: </span><span class="se">\r\n</span><span class="s2"> 1) Download and install TOR browser from this site: https://torproject.org/ </span><span class="se">\r\n</span><span class="s2"> 2) Open our website: http://darksidfqzcuhtk2.onion/CZEX8E0GR0AO4ASUCJE1K824OKJA1G24B8B3G0P84LJTTE7W8EC86JBE7NBXLMRT </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> When you open our website, put the following data in the input form: </span><span class="se">\r\n</span><span class="s2"> Key: </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> 0kZdK3HQhsAkUtvRl41QkOdpJvzcWnCrBjjgg5U4zfuWeTnZR5Ssjd3QLHpmbjxjo7uWzKbt8qPVuYN38TsDPI3bemd5I40ksemIzuI5OhIHZsi9cn3Wpd7OUT72FP9MyAUzR586yMsI2Ygri9in0Bf4EkG0pmBOLyRG1T788foGJQW1WxS1Qd2sMVvX0jKlbGG1zLp7g0u6buDCzSMyTjWjuVzJYufBBv7S2XvciEVvboiTNbZA4UUU6PttKERQSb018aILd6xO3ulk6fbEgZDO5tZSGn2zRevn5YXnHtg6vt1ToLe3izQOgYbs8Ja1fkfJBUYVux1ITyWBjpn0xPayKfwln8SqgMkbqiDyxEDEtFhqiffLcONMhi4TmW50loZIC6mWSaOjThWp6XSJUWPtY8Mkzs8Cs0qjPahx58iAEVIRGUVpLkMs7xPN7ydZ6wMWaOcRC1AD1JEUVTjLikXXyckgYaS6FnEv0UNEsv6QbTLSpDomIg3rEYZBib6ozrwH5n0M5wrKo8NciUBmfJWDP4XKkjznpsa05rEpuAklM0dMmZsYGVR </span><span class="se">\r\n</span><span class="s2">  </span><span class="se">\r\n</span><span class="s2"> !!! DANGER !!! </span><span class="se">\r\n</span><span class="s2"> DO NOT MODIFY or try to RECOVER any files yourself. We WILL NOT be able to RESTORE them.  </span><span class="se">\r\n</span><span class="s2"> !!! DANGER !!!"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="privilege-escalation">Privilege Escalation</h3>

<p>After exporting the configuration, the malware then checks if it has admin privileges by calling <strong>IsUserAnAdmin</strong>. If the user is not an admin, it performs a check on the user’s token information to verify if their token has the first subauthority value of <em>SECURITY_BUILTIN_DOMAIN_RID</em> and the second subauthority value of <em>DOMAIN_ALIAS_RID_ADMINS</em>.</p>

<p><img src="/uploads/Darkside15.PNG" alt="alt text"></p>

<p><em>Figure 15: Function to check token’s privileges.</em></p>

<p>This check is necessary for the next step, where <strong>Darkside</strong> performs UAC elevation to relaunch itself with higher privileges. This is an old elevation trick to perform UAC bypass via <strong>ICMLuaUtil</strong> Elevated COM Interface. Microsoft has great documentation for this <a href="https://docs.microsoft.com/en-us/windows/win32/com/the-com-elevation-moniker">here</a>.</p>

<p>The bypass is only performed if the <strong>UAC_ELEVATION_FLAG</strong> in the configuration is set to 1.</p>

<p><img src="/uploads/Darkside16.PNG" alt="alt text"></p>

<p><em>Figure 16: CoCreateInstanceAsAdmin implementation.</em></p>

<p>This function executes <strong>CoGetObject</strong> with the object name being <strong>Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}</strong>.</p>

<p>By checking with <strong>Registry Editor</strong>, we can see that this CLSID belongs to <strong>cmstplua.dll</strong> in system32, and <strong>CoGetObject</strong> will retrieve an <strong>ICMLuaUtil</strong> interface with an administrator’s credentials.</p>

<p><img src="/uploads/Darkside18.PNG" alt="alt text"></p>

<p><em>Figure 17: Registry Editor result for {3E5FC7F9-9A51-4367-9063-A120244FBEC7}.</em></p>

<p>Using this interface, <strong>Darkside</strong> calls the interface’s <strong>ShellExec</strong> function to execute the malware again with the updated privileges.</p>

<p><img src="/uploads/Darkside17.PNG" alt="alt text"></p>

<p><em>Figure 18: Elevated <strong>ShellExec</strong> call to relaunch the ransomware.</em></p>

<h3 id="adjust-token-privileges">Adjust Token Privileges</h3>

<p>If the <strong>AdjustTokenPrivileges_FLAG</strong> is set to 1 in the configuration, <strong>Darkside</strong> will get the current process’s token through <strong>OpenProcessToken</strong> and change the privilege to <strong>SE_PRIVILEGE_ENABLED</strong> to enable the token’s privilege.</p>

<p><img src="/uploads/Darkside19.PNG" alt="alt text"></p>

<p><em>Figure 19: Adjust Token Privileges function.</em></p>

<h3 id="security-context-impersonation">Security Context Impersonation</h3>

<p>If possible, <strong>Darkside</strong> tries to have its process impersonate the security context of a logged-on user on the system.</p>

<p>First, it checks if the logged-on user has an account with the referenced domain name of <em>NT AUTHORITY</em>, <em>AUTORITE NT</em>, or <em>NT-AUTORITÄT</em>. This is done by calling <strong>GetTokenInformation</strong> to retrieve the user’s SID and then <strong>LookupAccountSidW</strong> to look up the referenced domain name.</p>

<p><img src="/uploads/Darkside20.PNG" alt="alt text"></p>

<p><em>Figure 20: Function to check if the user’s token has NT AUTHORITY.</em></p>

<p>If the user’s token has <em>NT AUTHORITY</em>, Darkside then retrieves the user’s token by calling <strong>WTSGetActiveConsoleSessionId</strong> and <strong>WTSQueryUserToken</strong>.</p>

<p><img src="/uploads/Darkside21.PNG" alt="alt text"></p>

<p><em>Figure 21: Function to retrieve user’s token.</em></p>

<p>Darkside stores this token in memory and calls <strong>ImpersonateLoggedOnUser</strong> upon file encryption.</p>

<h3 id="guid-checksum">GUID Checksum</h3>

<p><strong>Darkside</strong> first has a function to perform CRC32 hashing and XOR operations. This function uses <strong>0xDEADBEEF</strong> as the first CRC32 value and performs XOR operations with the data blob in between.</p>

<p><img src="/uploads/Darkside22.PNG" alt="alt text"></p>

<p><em>Figure 22: Function to generate CRC32 checksum.</em></p>

<p>To generate the victim’s checksum using their GUID, <strong>Darkside</strong> goes through 4 rounds of this CRC32 checksum function on the victim’s machine GUID. It also has a function to convert the final checksum from bytes into hex string form.</p>

<p><img src="/uploads/Darkside23.PNG" alt="alt text"></p>

<p><em>Figure 23: Function to generate GUID checksum.</em></p>

<h3 id="file-logging">File Logging</h3>

<p>If the <strong>LOGGING_FLAG</strong> in the configuration is set to 1, the ransomware will begin logging every operation into a log file.</p>

<p>First, it generates the log file name by formatting the GUID checksum into <em>LOG%s.TXT</em>.</p>

<p><img src="/uploads/Darkside24.PNG" alt="alt text"></p>

<p><em>Figure 24: Function to generate log file name.</em></p>

<p>Next, <strong>Darkside</strong> creates the log file in the same folder as the malware executable using <strong>GetModuleFileNameW</strong> and <strong>CreateFileW</strong>.</p>

<p><img src="/uploads/Darkside25.PNG" alt="alt text"></p>

<p><em>Figure 25: Function to create log file in current directory.</em></p>

<h3 id="ransom-note-readme-file">Ransom Note Readme File</h3>

<p>If the <strong>RANSOM_NOTE_FLAG</strong> in the configuration is set to 1, the ransomware will generate a README file name. This file with the ransom note inside will be dropped on every directory that it encrypts.</p>

<p>The README file name is generated by formatting the GUID checksum into <em>README%s.TXT</em>.</p>

<p><img src="/uploads/Darkside26.PNG" alt="alt text"></p>

<p><em>Figure 26: Function to generate README file name.</em></p>

<h3 id="command-line-parameters">Command Line Parameters</h3>

<p><strong>Darkside</strong> can take command line parameters of <em>-path</em> and a directory name. This can be uses to specifically encrypt the chosen directory using normal encryption.</p>

<p><img src="/uploads/Darkside27.PNG" alt="alt text"></p>

<p><em>Figure 27: Darkside checking for -path parameter.</em></p>

<p>If <em>-path</em> is not provided but instead the parameter is a file name, the malware only encrypts that specific file.</p>

<p><img src="/uploads/Darkside28.PNG" alt="alt text"></p>

<p><em>Figure 28: Darkside checking for file parameter.</em></p>

<p>In the case where the folder/file path in the parameter is a link (.lnk), <strong>Darkside</strong> calls a function to find the full path to the folder/file from that link.</p>

<p>This function uses <strong>CoCreateInstance</strong> with the CLSID of <em>{00021401-0000-0000-C000-000000000046}</em> to query an interface from <strong>windows.storage.dll</strong>.</p>

<p>It probably uses <strong>IStorageFolderHandleAccess</strong> and <strong>IStorageFileHandleAccess</strong> interfaces to extract the full path from the link, but I’m not too sure about this.</p>

<p>I’m kind of terrible at COM objects, so if anyone understands how this works, please hit me up!</p>

<p><img src="/uploads/Darkside30.PNG" alt="alt text"></p>

<p><em>Figure 29: Function to query interfaces from windows.storage.dll to process .link files.</em></p>

<h3 id="run-once-mutex">Run-once Mutex</h3>

<p>If the <strong>BUILD_MUTEX_FLAG</strong> in the configuration is set to 1, the ransomware will build a run-once mutex string. By calling <strong>OpenMutex</strong> on the mutex, it can check to make sure that there is only one <strong>Darkside</strong> instance running at any point in time.</p>

<p>The function to generate this mutex first retrieves the current malware file path and reads the file’s content into a heap buffer using <strong>GetModuleFileNameW</strong>, <strong>CreateFileW</strong>, <strong>GetFileSize</strong>, and <strong>ReadFile</strong>.</p>

<p>The file buffer checksum is then calculated by going through one round of <strong>CRC32_checksum_generator</strong> function.</p>

<p>The mutex string is decrypted by <strong>decrypt_large_buffer</strong> and added into the string <em>Global\XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</em>. All the <em>“X”s</em> in the string is then replaced with the hex string of the file buffer checksum.</p>

<p>The <strong>Global</strong> part means that the mutex is visible in all terminal server sessions.</p>

<p><img src="/uploads/Darkside28.PNG" alt="alt text"></p>

<p><em>Figure 31: Function to build mutex string.</em></p>

<h3 id="single-filefolder-encryption">Single File/Folder Encryption</h3>

<p>Because the function to encrypt a single file/folder is only used when parameters are given, it is most likely for testing purposes only. Therefore, this function is not too complex.</p>

<p>First, it checks if <strong>CHECK_RUSSIAN_COMP_FLAG</strong> is set to 1 in the configuration. If it is, then it proceeds to check if the victim’s computer’s language is Russian by parsing the outputs of <strong>GetUserDefaultLangID</strong> and <strong>GetSystemDefaultUILanguage</strong>.</p>

<p>If the computer’s language is Russian, it exits immediately. I don’t think I need to go into details about <a href="https://twitter.com/campuscodi/status/1387953199680741376">why this code block is here ;)</a>.</p>

<p><img src="/uploads/Darkside31.PNG" alt="alt text"></p>

<p><em>Figure 31: Exiting immediately if computer’s language is Russian.</em></p>

<h4 id="i-encrypt-unc-server-path">I. Encrypt UNC Server Path</h4>

<p>Next, it checks if the file path is a path to a UNC server by calling <strong>PathIsUNCServerW</strong>. If it is, the UNC encryption function is called. In this function, <strong>Darkside</strong> enumerates through all network shared using <strong>NetShareEnum</strong>, builds a valid UNC network path for each, and calls the <strong>main_encryption</strong> function to encrypt them.</p>

<p><img src="/uploads/Darkside32.PNG" alt="alt text"></p>

<p><em>Figure 32: UNC server enumeration and encryption function.</em></p>

<h4 id="ii-encrypt-normal-path">II. Encrypt Normal Path</h4>

<p>If a path does not lead to a UNC server, <strong>Darkside</strong> will build the valid path accordingly by checking if the path is a network path, a path to a mounted network drive, or just a normal path on the system.</p>

<p><img src="/uploads/Darkside33.PNG" alt="alt text"></p>

<p><em>Figure 33: Building final file/folder path.</em></p>

<p>Here is what goes into the log file if <strong>LOGGING_FLAG</strong> is 1.</p>

<p><img src="/uploads/Darkside34.PNG" alt="alt text"></p>

<p><em>Figure 34: Encryption stats logging.</em></p>

<p>Before calling the <strong>main_encryption</strong> function to encrypt this final path, Darkside will try calling <strong>ImpersonateLoggedOnUser(USER_TOKEN)</strong> if it has NT AUTHORITY to impersonate the user while performing file encryption.</p>

<h3 id="full-encryption">Full Encryption</h3>

<p>When command line parameters are not provided, <strong>Darkside</strong> will perform a full encryption on the victim’s machine, which includes many other operations such as contacting the C2 server, deleting shadow copies, terminating processes and services, …</p>

<p>This function also has the same code block to check for Russian language on the victim computer.</p>

<h4 id="i-connecting-to-c2--sending-victim-information">I. Connecting To C2 &amp; Sending Victim Information</h4>

<p>If <strong>CONFIG_C2_URL_FLAG</strong> is set to 1 and the C2 URL is provided in the configuration, it will send the victim’s OS information to the C2 server.</p>

<p>The function to extract user’s OS information uses functions such as <strong>GetUserNameW</strong>, <strong>GetComputerNameW</strong>, <strong>MachinePreferredUILanguage</strong> to find these informations.</p>

<p><img src="/uploads/Darkside35.PNG" alt="alt text"></p>

<p><em>Figure 35: Extracting OS information.</em></p>

<p>After having extracted everything, it will write all the datas into a string format into this JSON form.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"os"</span><span class="p">:{</span><span class="w">
  </span><span class="nl">"lang"</span><span class="p">:</span><span class="s2">"en-US"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"cdong49"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"hostname"</span><span class="p">:</span><span class="s2">"DESKTOP-739L404"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"domain"</span><span class="p">:</span><span class="s2">"WORKGROUP"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"os_type"</span><span class="p">:</span><span class="s2">"windows"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"os_version"</span><span class="p">:</span><span class="s2">"Windows 10 Education N"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"os_arch"</span><span class="p">:</span><span class="s2">"x64"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"disks"</span><span class="p">:</span><span class="s2">"C:69/99"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"c46289476b8ceea97117"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Next, it will build a wrapper string to include the malware version and the victim’s UID with this OS information.</p>

<p><img src="/uploads/Darkside36.PNG" alt="alt text"></p>

<p><em>Figure 36: Building full string for user’s information.</em></p>

<p>The final string will be in this JSON form.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bot"</span><span class="p">:{</span><span class="w">
    </span><span class="nl">"ver"</span><span class="p">:</span><span class="s2">"1.8.6.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"uid"</span><span class="p">:</span><span class="s2">"060108efb510c98"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"os"</span><span class="p">:{</span><span class="w">
    </span><span class="nl">"lang"</span><span class="p">:</span><span class="s2">"en-US"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"cdong49"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"hostname"</span><span class="p">:</span><span class="s2">"DESKTOP-739L404"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"domain"</span><span class="p">:</span><span class="s2">"WORKGROUP"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"os_type"</span><span class="p">:</span><span class="s2">"windows"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"os_version"</span><span class="p">:</span><span class="s2">"Windows 10 Education N"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"os_arch"</span><span class="p">:</span><span class="s2">"x64"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"disks"</span><span class="p">:</span><span class="w">
    </span><span class="s2">"C:69/99"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"c46289476b8ceea97117"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This string will be hashed by a manual hashing function. Again, I didn’t bother to understand this because it’s just a hashing function and does not contribute anything to my understanding of the malware. It’s just here to make sure the information is not sent in plaintext.</p>

<p><img src="/uploads/Darkside37.PNG" alt="alt text"></p>

<p><em>Figure 37: Network data hashing function.</em></p>

<p>The hashed information string and the victim UID are then written into this format string, which is later used as the network packet’s content to be sent to C2.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">random_num1</span><span class="o">=</span><span class="nb">hash</span><span class="p">(</span><span class="n">information_string</span><span class="p">)</span><span class="o">&amp;</span><span class="n">random_num2</span><span class="o">=</span><span class="n">victim_UID</span>
</code></pre></div></div>

<p><img src="/uploads/Darkside38.PNG" alt="alt text"></p>

<p><em>Figure 38: Building network packet’s content.</em></p>

<p>At this point, <strong>Darkside</strong> uses <strong>InternetOpenW</strong> and <strong>InternetConnectW</strong> to open a handle to an Firefox/80.0 Internet application and connect to the C2 server at port 443.</p>

<p><img src="/uploads/Darkside39.PNG" alt="alt text"></p>

<p><em>Figure 39: Connecting to C2.</em></p>

<p>After a connection is established, it sends a <strong>POST</strong> request to the C2 using <strong>HttpOpenRequestW</strong>, decrypts the HTTP header, sets internet options using <strong>InternetSetOptionW</strong>, and finally sends the packet with the generated content buffer above.</p>

<p><img src="/uploads/Darkside40.PNG" alt="alt text"></p>

<p><em>Figure 40: Sending victim’s information to C2.</em></p>

<p>Finally, Darkside calls <strong>HttpQueryInfoW</strong> to query the status code and check to see if the packet is sent successfully.</p>

<h4 id="ii-wiping-recycle-bin">II. Wiping Recycle Bin</h4>

<p>If the <strong>WIPE_RECYCLE_BIN_FLAG</strong> in the configuration is set to 1 and the current process is ran as an ADMIN, <strong>Darkside</strong> will try to wipe all recycle bin folders that it can find in the machine’s drives.</p>

<p>First, to find a recycle bin folder in a given drive path, the function iteratively calls <strong>FindFirstFileExW</strong> and <strong>FindNextFileW</strong> to find a folder that contains <em>”*recycle*”</em> in its name.</p>

<p><img src="/uploads/Darkside41.PNG" alt="alt text"></p>

<p><em>Figure 41: Function to find the recycle bin folder in a drive.</em></p>

<p>After finding the path to the recycle bin, <strong>Darkside</strong> loops through each directory inside and calls a recursive function to completely empty it.</p>

<p><img src="/uploads/Darkside42.PNG" alt="alt text"></p>

<p><em>Figure 42: Function to wipe the recycle bin folder.</em></p>

<p>The recursive function is pretty simple. It uses <strong>FindFirstFileExW</strong> and <strong>FindNextFileW</strong> to find files and folders inside. If it finds a file, it will call <strong>DeleteFileW</strong> to delete it. If it finds a folder, it will recursively call itself again to delete the folder’s contents and call <strong>RemoveDirectoryW</strong> to delete it.</p>

<p><img src="/uploads/Darkside43.PNG" alt="alt text"></p>

<p><em>Figure 43: Recursive function to empty a given folder.</em></p>

<h4 id="iii-deleting-shadow-copies">III. Deleting Shadow Copies</h4>

<p>If the <strong>DELETE_SHADOW_COPIES_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will try to delete all shadow copies on the system. There are two different functions to handle this task based on the machine’s system architecture.</p>

<p>If the machine is an 64-bit Windows machine, it decrypts a CMD command and execute it using <strong>CreateProcessW</strong>.</p>

<p><img src="/uploads/Darkside44.PNG" alt="alt text"></p>

<p><em>Figure 44: Executing a Powershell script to delete shadow copies.</em></p>

<p>Below is the decrypted CMD command.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell</span><span class="w"> </span><span class="nt">-ep</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="s2">"(0..61)|%{</span><span class="nv">$s</span><span class="s2">+=[char][byte]('0x'+'4765742D576D694F626A6563742057696E33325F536861646F77636F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20'.Substring(2*</span><span class="bp">$_</span><span class="s2">,2))};iex </span><span class="nv">$s</span><span class="s2">"</span><span class="w">
</span></code></pre></div></div>

<p>This command loops 61 times, extracts 2 characters at a time, converts it into a byte, and converts that byte into an ASCII character.</p>

<p>Decoding this string will produce this Powershell command, which gets each <strong>Win32_Shadowcopy</strong> object on the system and delete it.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-WmiObject</span><span class="w"> </span><span class="nx">Win32_Shadowcopy</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">Delete</span><span class="p">();}</span><span class="w">
</span></code></pre></div></div>

<p>If the machine is an 32-bit Windows machine, things are a bit fancier.</p>

<p>Darkside will call <strong>CoInitializeEx</strong>, <strong>CoInitializeSecurity</strong>, and <strong>CoCreateInstance</strong> to create a single object of the class <strong>IWbemLocator</strong> with the specified CLSID <em>{4590F811-1D3A-11D0-891F-00AA004B2E24}</em> to query from <strong>wbemprox.dll</strong>.</p>

<p>Using the object <strong>IWbemLocator</strong>, it calls the <strong>ConnectServer</strong> function to connect to the local <em>“root/cimv2”</em> namespace and obtains a pointer to the <strong>IWbemServices</strong> object.</p>

<p><img src="/uploads/Darkside45.PNG" alt="alt text"></p>

<p><em>Figure 45: Using COM object to connect to ROOT/CIMV2.</em></p>

<p>With this <strong>IWbemServices</strong> object, <strong>Darkside</strong> executes the SQL query <code class="language-plaintext highlighter-rouge">SELECT * FROM Win32_ShadowCopy</code> to retrieve an enumerator of all the shadow copies in the local server.</p>

<p>It then loops through each of the shadow copy objects, gets its ID, and calls the object’s <strong>DeleteInstance</strong> function to delete itself.</p>

<p>This will eventually deletes all the shadow copy storage areas in the computer.</p>

<p><img src="/uploads/Darkside46.PNG" alt="alt text"></p>

<p><em>Figure 46: Extracting and deleting all shadow copies.</em></p>

<h4 id="iv-killing-target-services">IV. Killing Target Services</h4>

<p>If the <strong>SERVICE_TO_KILL_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will traverse through all services on the machine and kill any service that is in the configuration’s <strong>SERVICE_TO_KILL</strong> list.</p>

<p>This is done by calling <strong>OpenSCManagerW</strong> to open the service control manager and <strong>EnumServicesStatusExW</strong> to enumerate all services with <strong>SERVICE_WIN32</strong> status.</p>

<p><img src="/uploads/Darkside47.PNG" alt="alt text"></p>

<p><em>Figure 47: Opening service control manager.</em></p>

<p>Darkside iteratively loops through these services and checks if each exists in the <strong>SERVICE_TO_KILL</strong> list. If it is, then the service is stopped and deleted with the <strong>ControlService</strong> and <strong>DeleteService</strong> calls.</p>

<p><img src="/uploads/Darkside48.PNG" alt="alt text"></p>

<p><em>Figure 48: Looping and killing services.</em></p>

<h4 id="iv-killing-target-processes">IV. Killing Target Processes</h4>

<p>If the <strong>PROCESS_TO_KILL_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will traverse through all processes on the machine and terminate any process that is in the configuration’s <strong>PROCESS_TO_KILL</strong> list.</p>

<p>This is done by calling <strong>NtQuerySystemInformation</strong> to query an array of <strong>SYSTEM_PROCESS_INFORMATION</strong> structs with each containing a process name.</p>

<p>Darkside iteratively loops through these processes and checks if each exist in the <strong>PROCESS_TO_KILL</strong>. If it is, then the process is terminated using <strong>TerminateProcess</strong>.</p>

<p><img src="/uploads/Darkside49.PNG" alt="alt text"></p>

<p><em>Figure 49: Looping and terminating services.</em></p>

<h4 id="v-encrypting-all-local-drives">V. Encrypting All Local Drives</h4>

<p>If the <strong>ENCRYPT_ALL_DRIVES_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will loop through all drives with the drive type of <em>DRIVE_FIXED</em>, <em>DRIVE_REMOVABLE</em>, or <em>DRIVE_REMOTE</em> on the system. It then builds the appropriate folder path for each drive and call <strong>main_encryption</strong>.</p>

<p><img src="/uploads/Darkside50.PNG" alt="alt text"></p>

<p><em>Figure 50: Encrypting all fixed, removable, and remote drives on the system is initiated.</em></p>

<h4 id="vi-encrypting-shared-folders">VI. Encrypting Shared Folders</h4>

<p>If the <strong>ENCRYPT_NET_SHARED_RESOURCE_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will attempt to get all paths to shared folders on the network and encrypt them using <strong>main_encryption</strong>.</p>

<p>First, it calls a function to extract all network host addresses with two sub-functions.</p>

<p>The first sub-function calls <strong>GetAdaptersInfo</strong> and <strong>inet_addr</strong> to extract the addresses of other hosts on the network. It then calls the second sub-function and provide these addresses as the parameter.</p>

<p><img src="/uploads/Darkside52.PNG" alt="alt text"></p>

<p><em>Figure 51: Sub-function to find host address and call second sub-function.</em></p>

<p>The second sub-function launches threads using <strong>CreateThread</strong> to call <strong>SendARP</strong> and <strong>gethostbyaddr</strong> to find other hosts’ name on the network through their addresses.</p>

<p><img src="/uploads/Darkside51.PNG" alt="alt text"></p>

<p><em>Figure 52: Second sub-function to find host name.</em></p>

<p>After finding all host names and putting them into a global array, <strong>Darkside</strong> calls <strong>NetShareEnum</strong> to enumerate through all network shared folders, builds the appropriate network paths, and calls <strong>main_encryption</strong> to encrypt them.</p>

<p><img src="/uploads/Darkside53.PNG" alt="alt text"></p>

<p><em>Figure 53: Shared folders enumeration and encryption.</em></p>

<h4 id="vii-sending-c2-server-encryption-stats">VII. Sending C2 Server Encryption Stats</h4>

<p>After the encryption is finished and if the <strong>CONFIG_C2_URL_FLAG</strong> is set to 1 in the configuration, <strong>Darkside</strong> will send the C2 server the final encryption stats.</p>

<p>First, it decrypts the format string for this packet and starts writing the victim ID, UID, encrypted file count, encryption size, skipped file count, and elapsed time into this format string.</p>

<p>It then uses this formatted string as the buffer to call the function documented <a href="#i-connecting-to-c2--sending-victim-information">here.</a></p>

<p><img src="/uploads/Darkside54.PNG" alt="alt text"></p>

<p><em>Figure 54: Function to send encryption stats to C2 server.</em></p>

<h3 id="main-encryption">Main Encryption</h3>

<p>We finally come to the juiciest part of the ransomware, the main encryption function! This function is fairly complex, so I’ll divide my analysis into parts again.</p>

<h4 id="i-initial-operations">I. Initial Operations</h4>

<p>Before the encryption takes place, the malware checks if the system has at least 0x6400000 bytes or 100 MBs of free space. This space is necessary for dropping a ransom note in every directory and because the encryption also increases each file by a set ammount.</p>

<p><img src="/uploads/Darkside55.PNG" alt="alt text"></p>

<p><em>Figure 55: Checking if the system has enough space prior to encryption.</em></p>

<p>If the <strong>CONFIG_C2_URL_FLAG</strong> in the configuration is set to 1, Darkside also starts recording the time that it begins encryption by calling <strong>GetTickCount</strong>.</p>

<p><img src="/uploads/Darkside56.PNG" alt="alt text"></p>

<p><em>Figure 56: Starting time count.</em></p>

<h4 id="ii-creating-worker-threads">II. Creating Worker Threads</h4>

<p><strong>Darkside</strong> uses multithreading with I/O completion port to communicate between the main thread and the worker threads and speed up encryption. This can potentially be really good, but there is unfortunately one design flaw that slows the entire process down.</p>

<p>First, <strong>Darkside</strong> creates 2 I/O completion ports by calling <strong>CreateIoCompletionPort</strong>, which are used by the main thread to send file data to be encrypted to worker threads.</p>

<p>Next, it spawns a set number of threads based on the processor count of the system. It will spawn 2 threads for each processor count, but this maxes out at 64 threads even if there are more than 32 processors.</p>

<p><img src="/uploads/Darkside58.PNG" alt="alt text"></p>

<p><em>Figure 57: I/O ports and worker threads creation.</em></p>

<p>It’s best to have one thread per processor, but because the multithreading design of <strong>Darkside</strong> does not maximize the system’s processing power, it doesn’t matter that much.</p>

<p>Each of these threads is added to a global thread array to make cleaning up more organized by calling <strong>WaitForMultipleObjects</strong> with the array as its parameter.</p>

<h4 id="iii-recursive-directory-traversal">III. Recursive Directory Traversal</h4>

<p>The only mistake in this ransomware is that its main thread uses a depth-first search algorithm of recursive traversal, which slows down the encryption speed significantly despite the good multithreading setup.</p>

<p>First, in the recursive function, the main thread calls <strong>SetEntriesInAclW</strong> and <strong>SetNamedSecurityInfoW</strong> to access/audit control and security information of the directory that is being processed. Below is the hard-coded <strong>EXPLICIT_ACCESS_W</strong> struct with the new security and access information.</p>

<p><img src="/uploads/Darkside59.PNG" alt="alt text"></p>

<p><em>Figure 59: the <strong>EXPLICIT_ACCESS_W</strong> struct to set access/audit control information for directories.</em></p>

<p>Next, if the <strong>RANSOM_NOTE_FLAG</strong> in the configuration is set to 1, <strong>Darkside</strong> will drop a ransom note in the processed directory using this function.</p>

<p><img src="/uploads/Darkside60.PNG" alt="alt text"></p>

<p><em>Figure 60: Function to drop ransom note in encrypted directories.</em></p>

<p>The file/directory checks come after this. First, to begin calling <strong>FindFirstFileExW</strong> on the current directory, it must add the characters <em>”\\*”</em> to the end of the directory name. As it loops through the folder to find sub-directories and files using <strong>FindNextFileW</strong>, it first checks to avoid the two directory names <em>”.”</em> and *..”, which link to the current directory and parent directory. These two can cause the program to go into an infinite recursion if the malware does not avoid them.</p>

<p>It also checks the file attribute to avoid the sub-directories/files that have the attribute <strong>FILE_ATTRIBUTE_ENCRYPTED</strong>.</p>

<p>After these checks, if the current path points to a directory and the <strong>DIRECTORY_TO_AVOID_FLAG</strong> is set to 1, then another check is performed to make sure that the sub-folder’s name is not in the <strong>DIRECTORY_TO_AVOID</strong> list.</p>

<p>Once all the checks are completed, its sub-directory path is passed as the parameter to the recursive function.</p>

<p>The recursive function is called upon encountering a folder to traverse through all of its sub-folders.</p>

<p><img src="/uploads/Darkside61.PNG" alt="alt text"></p>

<p><em>Figure 61: Checking for directories and call recursive function.</em></p>

<p>If the current path points to a file, <strong>Darkside</strong> checks the following:</p>

<ul>
  <li>If the file name is not a <strong>README</strong> file.</li>
  <li>If its extension is not <strong>.TXT</strong>.</li>
  <li>If its content is not the the ransom note (through compare CRC32 file hashes).</li>
  <li>If <strong>FILE_TO_AVOID_FLAG</strong> is 1 and the file name is not in <strong>CONFIG_FILE_TO_AVOID</strong>.</li>
  <li>If <strong>FILE_EXTENSION_TO_AVOID_FLAG</strong> is 1 and the file extension is not in <strong>FILE_EXTENSION_TO_AVOID</strong>.</li>
</ul>

<p>If all of these are true, <strong>Darkside</strong> proceeds with processing the file.</p>

<p>If <strong>SQL_SQL_LITE_FLAG</strong> is 1 and the filename is in <strong>SQL_STRING</strong>, it sets the <strong>ENCRYPTION_MODE</strong> to Full Encryption.</p>

<p><img src="/uploads/Darkside62.PNG" alt="alt text"></p>

<p><em>Figure 62: File checks.</em></p>

<p>After the file checks, <strong>Darkside’s</strong> main thread starts processing and sends the file data to the worker threads.</p>

<h4 id="iv-check-if-file-is-encrypted">IV. Check If File Is Encrypted</h4>

<p>First, the file path is properly fixed, and a sub-function is called to check if the file has been encrypted or not. This check is done by reading the last 0x90 bytes into a heap buffer and generate a checksum for the first 0x80 bytes using <strong>CRC32_checksum_generator</strong>. This checksum is compared against the last 0x10 bytes of the buffer, and if they match, it means the file is encrypted.</p>

<p>This also gives us a hint that after the encryption, a blob with the encrypted Salsa matrix as the first 0x80 bytes and the key’s checksum as the last 0x10 bytes is appended at the end of each file.</p>

<p><img src="/uploads/Darkside63.PNG" alt="alt text"></p>

<p><em>Figure 63: Function to check if a file is encrypted or not.</em></p>

<h4 id="v-terminate-process-that-uses-file">V. Terminate Process That Uses File</h4>

<p>If <strong>PROCESS_TO_AVOID_FLAG</strong> is set to 1 in the configuration, <strong>Darkside</strong> calls a function to find and close another process that currently uses the file.</p>

<p>This function has an while loop to continuously check all processes by calling <strong>OpenProcess</strong> to get a process handle, spawn a thread to call <strong>NtQueryInformationFile</strong> to get the file owned by this process, and compare that filename with the to-be-encrypted filename.</p>

<p><img src="/uploads/Darkside64.PNG" alt="alt text"></p>

<p><em>Figure 64: Finding a process that is using the to-be-encrypted file.</em></p>

<p>If that process is accessing the to-be-encrypted filename, Darkside will iteratively check to make sure that the process is not in the <strong>PROCESS_TO_AVOID</strong> list and terminate it once the check is done.</p>

<p><img src="/uploads/Darkside65.PNG" alt="alt text"></p>

<p><em>Figure 65: Terminating the process that is accessing the to-be-encrypted file.</em></p>

<h4 id="vi-generate-encrypted-file-name">VI. Generate Encrypted File Name</h4>

<p>The filename is copied into a new buffer, and the GUID checksum is appended to the end of the filename. This buffer is later used as the encrypted filename, so <strong>Darkside</strong> again tries to terminate any process that uses this file.</p>

<p><img src="/uploads/Darkside66.PNG" alt="alt text"></p>

<p><em>Figure 66: Generating the encrypted file name.</em></p>

<h4 id="vii-send-file-data-to-worker-threads">VII. Send File Data To Worker Threads</h4>

<p><strong>Darkside</strong> makes 2 calls to <strong>CreateIoCompletionPort</strong> to create I/O completion ports associated with the encrypted file handle.</p>

<p><img src="/uploads/Darkside67.PNG" alt="alt text"></p>

<p><em>Figure 67: Creating I/0 completion ports associated with the file handle.</em></p>

<p>It then creates a buffer to add necessary data to send to the worker threads using these I/O completion ports.</p>

<p>Important data includes file-related information such as <strong>ENCRYPTION_MODE</strong>, file handle, and file size.</p>

<p>The buffer also includes the Salsa20 matrix, its RSA-1024 encrypted version, and the checksum of the encrypted key.</p>

<p>Once this I/O buffer is ready, it is sent to the worker threads using calls to <strong>PostQueuedCompletionStatus</strong>.</p>

<p><img src="/uploads/Darkside68.PNG" alt="alt text"></p>

<p><em>Figure 68: Generating I/0 buffer and send it to worker threads.</em></p>

<h4 id="viii-salsa20--matrix-generation">VIII. Salsa20 &amp; Matrix Generation</h4>

<p><strong>Darkside</strong> makes multiple calls to <strong>RtlRandomEx</strong> to generate a 64-byte buffer.</p>

<p><img src="/uploads/Darkside69.PNG" alt="alt text"></p>

<p><em>Figure 69: Randomly generating Salsa20 matrix.</em></p>

<p>The reason why this buffer is not a <strong>Salsa20</strong> key is because it is way too long (typically Salsa20 key is at most 32-byte long) and because <strong>Darkside</strong> actually modifies its <strong>Salsa20</strong> implementation to not use any key.</p>

<p>Typically, a pair of key-nonce is required to generate this Salsa20 initial state matrix.</p>

<p><img src="/uploads/Darkside70.PNG" alt="alt text"></p>

<p><em>Figure 70: Randomly generating Salsa20 matrix.</em></p>

<p>However, <strong>Darkside</strong> skips this step completely and uses the randomly generated buffer as its Salsa20 matrix.</p>

<p>This does not impact the cryptography result of Salsa20 since it’s ultimately a XOR-cipher. To decrypt the file, they just need to have access to this random buffer and use it as the Salsa20 matrix.</p>

<h4 id="ix-rsa-1024-encryption">IX. RSA-1024 Encryption</h4>

<p><strong>Darkside’s</strong> custom RSA-1024 implementation is used to encrypt the <strong>Salsa20</strong> matrix before appending it to the end of the encrypted file.</p>

<p>The RSA-1024 public key is embedded in <strong>Darkside</strong> encrypted configurations, and it’s divided into two blobs.</p>

<p>The first is the RSA-1024 exponent in little endian, which I’m not sure why. Since the author hand-coded this RSA-1024 implementation, I guess it makes things easier for them?</p>

<p>The second is the RSA-1024 modulus.</p>

<p><img src="/uploads/Darkside71.PNG" alt="alt text"></p>

<p><em>Figure 71: Randomly generating Salsa20 matrix.</em></p>

<p>Below is a part of the RSA-1024 encryption function.</p>

<p><img src="/uploads/Darkside72.PNG" alt="alt text"></p>

<p><em>Figure 72: RSA-1024 encryption to produce cipher tex by calculating (data^exponent)%modulus.</em></p>

<p>It is quick to recognize that this is RSA-1024 encryption with the mathematic functions. Note that the RSA-1024 exponent is being read from front to back with the AND operation, which tells us that it is in little endian.</p>

<p>The mathematical operations modulus of big numbers are also confusing because they perform raw modulus calculation using addition and subtraction.</p>

<p><img src="/uploads/Darkside73.PNG" alt="alt text"></p>

<p><em>Figure 73: Function to calculate (A*B)%N.</em></p>

<p>For multiplication, it rotates B to the left by 1 every time and add A to the result when there is no carry after the rotation.</p>

<p>For modulus, it keeps subtracting N from the result until it gets a carry (subtraction results in a negative number), which it then adds N back into the result.</p>

<p>The functions to add/subtract big numbers also tell us that the result of RSA-1024 encryption is also in little endian since operations are performed from the lowest index to the highest one on each number.</p>

<p><img src="/uploads/Darkside74.PNG" alt="alt text"></p>

<p><em>Figure 74: Result buffer is calculated in little endian format.</em></p>

<h4 id="x-io-worker-threads">X. I/O Worker Threads</h4>

<p>The worker threads share the same functionality, each of which loops infinitely until the main thread signals to close them using <strong>CloseHandle</strong>.</p>

<p>The threads constantly call <strong>GetQueuedCompletionStatus</strong> on their own I/O completion port until they receive a blob containing information about a file from the main thread.</p>

<p><img src="/uploads/Darkside75.PNG" alt="alt text"></p>

<p><em>Figure 75: Worker thread calling <strong>GetQueuedCompletionStatus</strong> to receive data blob.</em></p>

<p>Here is some important offset in the data blob.</p>

<ul>
  <li>0x5: current file offset low</li>
  <li>0x6: current file offset high</li>
  <li>0x7: number of bytes to jump to next block depending on ENCRYPTION_MODE (0x80000 for FULL, -1 for FAST, and dynamically changed based on file size for AUTO)</li>
  <li>0x9: number of times to begin encrypting 0x80000 bytes</li>
  <li>0xB: File handle</li>
  <li>0xC: Encryption state</li>
  <li>0x2d: File size</li>
  <li>0xD: Random Salsa20 Matrix</li>
  <li>0x1D: RSA_1024(Salsa20_matrix)</li>
  <li>0x3d: CRC32_checksum_generator(RSA_1024(Salsa20_matrix))</li>
  <li>0x41: File buffer</li>
</ul>

<p>Upon receiving this, they check the byte at offet 0xC of the blob to determine between 4 encrypting states.</p>

<p>The pre-encryption state occurs when <strong>blob[0xc]</strong> is 0, and the thread just calls <strong>ReadFile</strong> to read <strong>0x80000</strong> bytes from the current file offset into the file buffer. It then sets <strong>blob[0xc]</strong> to 1 to transition into the encryption state. If it reaches the EOF and the last error number is ERROR_HANDLE_EOF, the thread skips to post-encryption state.</p>

<p><img src="/uploads/Darkside76.PNG" alt="alt text"></p>

<p><em>Figure 76: Pre-encryption code block.</em></p>

<p>The encryption state occurs when <strong>blob[0xc]</strong> is 1, and the thread will encrypt the file buffer normally using Salsa20. <strong>Darkside</strong> encrypts one 0x80000-byte block at a time and jumps to the next block right after. If <strong>blob[0x7]</strong> is not -1, it will jump to the next blob by appending <strong>blob[0x7]</strong> to the current file offset. This is to skip the encrypting portions of the file when it is too large. If blob[0x7] is -1, the encryption state is changed to the post-encryption state. The encrypted file buffer is then written back into the file using <strong>WriteFile</strong> and the thread goes back to the pre-encryption state with the updated file offset.</p>

<p><img src="/uploads/Darkside77.PNG" alt="alt text"></p>

<p><em>Figure 77: Encryption code block.</em></p>

<p>The post-encryption state occurs when <strong>blob[0xc]</strong> is 2. In this state, the encrypted Salsa20 matrix and its checksum are written into the end of the file using <strong>WriteFile</strong>. After this operation, the thread enters the cleaning up state.</p>

<p><img src="/uploads/Darkside78.PNG" alt="alt text"></p>

<p><em>Figure 78: Post-encryption code block.</em></p>

<p>The cleaning up state occurs when <strong>blob[0xc]</strong> is 4. The thread just closes the file handle and go back to calling <strong>GetQueuedCompletionStatus</strong> to receive a new file blob.</p>

<p><img src="/uploads/Darkside79.PNG" alt="alt text"></p>

<p><em>Figure 79: Cleaning up code block.</em></p>

<h3 id="self-deletion">Self Deletion</h3>

<p>At the end of the program, if <strong>SELF_DELETE_FLAG</strong> is set to 1 in the configuration, <strong>Darkside</strong> will execute a command to delete itself.</p>

<p>First, it gets the short path of the current malware executable by calling <strong>GetModuleFileNameW</strong> and <strong>GetShortPathNameW</strong>.</p>

<p>It decrypts the environment variable name <em>“ComSpec”</em> and uses it to get the path to <strong>CMD.EXE</strong>.</p>

<p>Finally, it calls <strong>ShellExecuteW</strong> to execute this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CMD.EXE /C DEL /F /Q short_malware_path &gt;&gt; NUL
</code></pre></div></div>

<p>This <strong>CMD.EXE</strong> command executes the <strong>DEL</strong> command. The <em>/F</em> flag is enabling auto-completion of path names entered, which is necessary to extend the short path into a full path. The <em>/Q</em> just turns echo off for stealth!</p>

<p><img src="/uploads/Darkside80.PNG" alt="alt text"></p>

<p><em>Figure 80: Cleaning up code block.</em></p>

<h3 id="darkside-encryption-speed-discussion">Darkside Encryption Speed Discussion</h3>

<p><strong>Darkside</strong> uses a unique combination of multithreading and recursive file traversal to find and encrypt files.</p>

<p>However, its speed is not that impressive due to the use of recursion.</p>

<p><img src="/uploads/Darkside81.PNG" alt="alt text"></p>

<p><em>Figure 81: CPU comparison between Babuk and Darkside.</em></p>

<p>We can clearly see that <strong>Darkside</strong> encryption speed is clearly lacking since it does not abuse 100% of the victim’s CPU.</p>

<p>This is because <strong>Darkside</strong> suffers from thread starvation. Each worker thread can execute the encryption code block relatively fast, but some of them are starved by the main thread and never gets a chance to do work.</p>

<p>By design, the main thread’s job is to recursively traverse through folders in a depth-first search manner, so the worker threads can only encrypt what the main thread sends them.</p>

<p>Starvation arises when the main thread can’t traverse and send files fast enough while the receiving threads already finish their work. Therefore, unless the main thread has a constant throughput of 32 files being sent to I/O completion ports at any given point in time, some thread will definitely be starved, and the CPU will not be fully utitlized.</p>

<p>Beside the fact that this throughput is almost impossible to obtain by a single thread, the total encryption time is still skewed toward the time it takes for the main thread to finish traversing the system.</p>

<p>This design ultimately defeats the purpose of using multithreading and I/O completion port.</p>

<h2 id="yara-rule">YARA rule</h2>

<pre><code class="language-yara">rule DarksideRansomware1_8_6_2 {
  meta:
    description = "YARA rule for Darkside v1.8.6.2"
    reference = "http://chuongdong.com/reverse%20engineering/2021/05/06/DarksideRansomware/"
    author = "@cPeterr"
    tlp = "white"
  strings:
    $hash_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    $gen_key_buff = {89 54 0E 0C 89 44 0E 08 89 5C 0E 04 89 3C 0E 81 EA 10 10 10 10 2D 10 10 10 10 81 EB  10 10 10 10 81 EF 10 10 10 10 83 E9 10 79 D5}
    $dyn_api_resolve = {FF 76 FC 56 E8 91 FE FF FF 56 E8 ?? 69 00 00 8B D8 FF 76 FC 56 E8 85 FB FF FF 8B 46 FC 8D 34 06 B9 23 00 00 00 E8 5E 02 00 00 AD}
    $get_config_len = {81 3C 18 DE AD BE EF 75 02 EB 03 40 EB F2}
    $RSA_1024_add_big_num = {8B 06 8B 5E 04 8B 4E  08 8B 56 0C 11 07 11 5F 04 11 4F 08 11 57 0C}
    $CRC32_checksum = {FF 75 0C FF 75 08 68 EF BE AD DE FF 15 ?? ?? ?? 00 FF 75 0C FF 75 08 50 FF 15 ?? ?? ?? 00 31 07 FF 75 0C FF 75 08 50 FF 15 ?? ?? ?? 00 }
  condition:
    all of them
}
</code></pre>

<h2 id="samples">Samples</h2>

<p>I got my sample from <a href="https://bazaar.abuse.ch/sample/151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5/">MalwareBazaar!</a></p>

<p>Huge shoutout to <a href="https://twitter.com/JAMESWT_MHT">@JAMESWT_MHT</a> for uploading the sample!</p>

<h2 id="special-thanks">Special Thanks</h2>

<p>A special thanks to <a href="https://twitter.com/demonslay335">Michael Gillespie</a> for assisting me during the analysis and sharing his resources!</p>

<h2 id="references">References</h2>

<p>https://zawadidone.nl/2020/10/05/darkside-ransomware-analysis.html</p>

<p>https://ghoulsec.medium.com/mal-series-13-darkside-ransomware-c13d893c36a6</p>

<p>https://pastebin.com/mnvEUNaP</p>

<p>https://raw.githubusercontent.com/k-vitali/Malware-Misc-RE/master/2020-12-01-darkside-ransom-1.3-vk-cfg.raw</p>

<p>https://github.com/snemes/aplib</p>



    <div class="share">
  
    
      
      
      
      

      

      <a class="button" href="https://twitter.com/intent/tweet/?url=https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/&amp;text=Darkside%20Ransomware&amp;via=cPeterr" style="background: #0d94e7">Twitter  <svg width="16" height="16" class="icon  icon--twitter" role="img" alt="twitter"><title>twitter</title>
<use xlink:href="#twitter" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="https://facebook.com/sharer/sharer.php?u=https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/" style="background: #3B5998">Facebook  <svg width="16" height="16" class="icon  icon--facebook" role="img" alt="facebook"><title>facebook</title>
<use xlink:href="#facebook" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="mailto:?subject=Darkside%20Ransomware&amp;body=Hey,%20check%20out%20this:%20https://cdong1012.github.io//reverse%20engineering/2021/05/06/DarksideRansomware/" style="background: true">Email  <svg width="16" height="16" class="icon  icon--email" role="img" alt="email"><title>email</title>
<use xlink:href="#email" fill="CurrentColor"></use></svg>
</a>

    
  
</div>


    


  </article>

  

</main>

<footer class="footer">
  <div class="container">
    <div class="copyright  typeset">
      <small class="small">© Chuong Dong 2024</small>
    </div>

    
<nav class="nav  nav--footer">
  <ul class="list list--nav">
    

      

      <li class="item  item--nav">
        <a href="https://cdong1012.github.io">Chuong's Security Blog</a>
      </li>
    
  </ul>
</nav>


  </div>
</footer>


    <script type="text/javascript">
(() => {
  const registerServiceWorker = () => {
    if (!navigator.serviceWorker) {
      return;
    }

    navigator.serviceWorker
      .register("/sw.js")
      .then(registration => {
        console.log("Service Worker: registered");
      })
      .catch(err => {
        console.log("Service Worker: registration failed ", err);
      });
  };

  registerServiceWorker();
})();
</script>


    <!-- Overwrite this file with code you want before the closing body tag -->

  </body>

</html>
