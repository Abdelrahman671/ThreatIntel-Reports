<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="generator" content="Bludit">

<!-- Dynamic title tag -->
<title>DiamondFox - Bank Robbers will be replaced | fr3d.hk</title>

<!-- Dynamic description tag -->
<meta name="description" content="DiamondFox Kettu is the newest addition to the DiamondFox family. In this post, I will be analysing and discussing how it functions, its encryption, and how it achieves its modularity.">

<!-- Include Favicon -->
<link rel="icon" href="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png" type="image/png">

<!-- Include Bootstrap CSS file bootstrap.css -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-kernel/css/bootstrap.min.css?version=3.12.0">

<!-- Include CSS Styles from this theme -->
<link rel="stylesheet" type="text/css" href="https://fr3d.hk/blog/bl-themes/blogx/css/style.css?version=3.12.0">

<!-- Load Bludit Plugins: Site head -->
<link rel="canonical" href="https://fr3d.hk/blog/diamondfox-bank-robbers-will-be-replaced"/>

<!-- Open Graph -->
<meta property="og:locale" content="en, en_US, en_AU, en_CA, en_GB, en_IE, en_NZ">
<meta property="og:type" content="article">
<meta property="og:title" content="DiamondFox - Bank Robbers will be replaced">
<meta property="og:description" content="DiamondFox Kettu is the newest addition to the DiamondFox family. In this post, I will be analysing and discussing how it functions, its encryption, and how it achieves its modularity.">
<meta property="og:url" content="https://fr3d.hk/blog/diamondfox-bank-robbers-will-be-replaced">
<meta property="og:site_name" content="fr3d.hk">
<meta property="og:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/banner9.png">

<!-- Robots plugin -->
<link rel="alternate" type="application/rss+xml" href="https://fr3d.hk/blog/rss.xml" title="RSS Feed">

<!-- Twitter Cards -->
<meta property="twitter:card" content="summary">
<meta property="twitter:site" content="">
<meta property="twitter:title" content="DiamondFox - Bank Robbers will be replaced">
<meta property="twitter:description" content="DiamondFox Kettu is the newest addition to the DiamondFox family. In this post, I will be analysing and discussing how it functions, its encryption, and how it achieves its modularity.">
<meta property="twitter:image" content="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/banner9.png">
<link href="/blog/bl-plugins/viewerjs/css/viewer.css" rel="stylesheet"></head>
<body>

	<!-- Load Bludit Plugins: Site Body Begin -->
	
	<!-- Navbar -->
	<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark text-uppercase">
	<div class="container">
		<a class="navbar-brand" href="https://fr3d.hk/blog/">
			<span class="text-white">fr3d.hk</span>
		</a>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarResponsive">
			<ul class="navbar-nav ml-auto">

				<!-- Static pages -->
				
				<!-- Social Networks -->
								<li class="nav-item">
					<a class="nav-link" href="https://twitter.com/fr3dhk" target="_blank">
						<img class="d-none d-sm-block nav-svg-icon" src="https://fr3d.hk/blog/bl-themes/blogx/img/twitter.svg" alt="Twitter" />
						<span class="d-inline d-sm-none">Twitter</span>
					</a>
				</li>
				
			</ul>
		</div>
	</div>
</nav>

	<!-- Content -->
	<div class="container">
		<div class="row">

			<!-- Blog Posts -->
			<div class="col-md-9">
			<!-- Post -->
<div class="card my-5 border-0">

	<!-- Load Bludit Plugins: Page Begin -->
	<style>.seo-breadcrumbs {margin:0; padding:0.4rem 0;} .seo-breadcrumbs li {display:inline;padding:0.2rem 0 0.2rem 0.2rem ; font-size:14px; list-style:none; } .seo-breadcrumbs li a {} .seo-breadcrumbs li+li:before {padding: 0 4px 0 0; color: black; content: "\000BB";}</style><nav aria-label="breadcrumb"><ol itemscope itemtype="http://schema.org/BreadcrumbList" class="seo-breadcrumbs"><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">You are here: <a href="https://fr3d.hk/blog/" itemprop="item" ><span itemprop="name">fr3d.hk</span></a>
    <meta itemprop="position" content="1" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><a href="https://fr3d.hk/blog/category/malware">Malware</a><meta itemprop="position" content="2" /></li><li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><span itemprop="name"><a href="https://fr3d.hk/blog/diamondfox-bank-robbers-will-be-replaced" itemprop="item">DiamondFox - Bank Robbers will be replaced</a></span><meta itemprop="position" content="3" /></li></ol></nav>
	<!-- Cover image -->
	
	<div class="card-body p-0">
		<!-- Title -->
		<a class="text-dark" href="https://fr3d.hk/blog/diamondfox-bank-robbers-will-be-replaced">
			<h1 class="title">DiamondFox - Bank Robbers will be replaced</h1>
		</a>

				<!-- Creation date -->
		<h6 class="card-subtitle mb-3 text-muted">August 10, 2020 - Reading time: 43 minutes</h6>
		
		<!-- Full content -->
		<p>DiamondFox Kettu is the newest addition to the DiamondFox family. In this post, I will be analysing and discussing how it functions, its encryption, and how it achieves its modularity.</p>
<p><!-- pagebreak --></p>
<div id="page_content">
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Foreword</h2>
<hr>
<p>First, I would like to give a huge thank you to <a href="https://twitter.com/Casperinous">Casperinous</a> for his amazing help with the config decryption, and to <a href="https://twitter.com/steved3">Steve Ragan </a>for editing and reviewing this analysis. This post has taken some time to write due to my desire to create an in-depth look at this piece of malware. For updates and information about my work follow me on twitter <a href="https://twitter.com/fr3dhk">@fr3dhk</a>.</p>
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Overview</h2>
<hr>
<p>DiamondFox is a well known family within the commodity malware market. The creator has been working on it for a while, and has iterated through quite a few different names and versions. The previous version had the codename "Renard" which is French for fox, this version's codename is "Kettu".</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/banner9.png" alt="" width="443" height="300" style="display: block; margin-left: auto; margin-right: auto;"></p>
<p>DiamondFox is sold in many blackhat communities by a user named <strong>edbitss</strong>, along with his other piece of malware, GlitchPOS. A large selling point of DiamondFox is that it's a modular piece of malware. It has been developed so it supports the ability for the user to add plugins into the panel, which will then be executed by the malware. Because of this modularity, the seller has decided to sell different parts of his malware for different prices.Â </p>
<p>Prices:</p>
<ul>
<li>Botkiller - 100$</li>
<li>Jabber notifier - 50$</li>
<li>Cookies grabber - 100$</li>
<li>UAC bypasser - 100$</li>
<li>Hidden ammyy admin - 150$</li>
<li>File stealer - 150$</li>
<li>Stealers (browsers, IM, FTP, RDP and web history) - 100$</li>
<li>Persistence - 100$</li>
<li>Keylogger - 100$</li>
<li>Remote console - 100$</li>
<li>Crypto hijacker - 100$</li>
<li>Bolt - 200$</li>
<li>USB spread - 100$</li>
<li>Bot - 600$</li>
<li>Video recorder - 200$</li>
<li>Wallet stealer - 100$</li>
</ul>
<p>As you can see, this is a somewhat pricey piece of code. It is also a very capable piece of malware with lots of different plugins. The malware is controlled through an HTTP command and control server (C2) which is written in PHP, I'll be discussing the C2 at the end of this post. DiamondFox is written in VB6 and the main part of the malware provides some commonly found features, here are some of them.</p>
<ul>
<li>Encrypted C2 communications &amp; namecoin support</li>
<li>Unicode</li>
<li>Screenshots</li>
<li>Small binary size around 90kb</li>
<li>Anti-analysis</li>
<li>Native binary</li>
<li>Persistence &amp; self-destruction</li>
</ul>
<p>DiamondFox bases its initial functionality on a config that is set during the building of the binary. This is encrypted so we will need to decrypt it before we proceed with the rest of this analysis.</p>
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Configuration &amp; Decryption</h2>
<hr>
<p>Due to the malware being written in VB6, we can use certain tools to decompile the malware into p-code, and then within the same tool, export a pseudo representation of the control flow of the malware. Because the tool does not support analysis functions such as being able to rename functions, and variables, I have had to export the entire pseudo code representation into a text file and then open it in my favourite text editor. In the following screenshots you will see the code that I have analysed and renamed, please take some function names with a grain of salt as I may have given them a generic name.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/EncryptedConfig.png" alt="">Encrypted Config</p>
<p>In the above image you will see the function namedÂ <em>EncryptedConfig.</em> This function contains 8 encrypted strings that it proceeds to combine into one long string which is then returned. We can determine that this is the encrypted config as it's one of the first functions called within main.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/DecryptConfig.png" alt="">Decrypt Config</p>
<p>In main we see the first first use of theÂ <em>EncryptedConfig</em> function. Before the malware decrypts the configuration it will first use a different decryption method to decrypt a string. This string encryption is used throughout the malware to evade analysis. Looking at the <em>DecryptString</em> function we see the following.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/DecryptStringVB.png" alt="">Decrypt String VB</p>
<p>I have rewritten this function in python (<a href="https://pastebin.com/raw/0vEEaSae">link</a>) so that I can decrypt the rest of the strings within the malware. Now I can go back and decrypt the string before the config decryption. We can presume that the newly decrypted string is our cipher key for the config decryption as it is passed as a paramater to the decryption function.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/AESDecrypt.png" alt="">Decrypt Function</p>
<p>After going through the malware I realised that the malware base64 decodes the config and then uses AES to decrypt the config. Knowing this I then started looking for an IV which made me come across the source code (<a href="http://read.pudn.com/downloads148/sourcecode/crypt/639967/aes_vb/AES%20128/Rijndael.cls__.htm">link</a>) for the class the malware author has used. This source code made it clear that the AES method is ECB and that the malware author also uses encoding to inflate and deflate the configuration. I used the previously decrypted cipher key and plugged it into a recipe (<a href="https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)AES_Decrypt(%7B'option':'UTF8','string':'REPLACEME'%7D,%7B'option':'Hex','string':''%7D,'ECB','Raw','Raw',%7B'option':'Hex','string':''%7D)Raw_Inflate(0,0,'Adaptive',false,false)&amp;input=%5Bobject%20Object%5D,%5Bobject%20Object%5D,%5Bobject%20Object%5D">link</a>) I have cooked up in CyberChef (<a href="https://gchq.github.io/CyberChef/">link</a>) to recreate the config decryption process.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/CyberChef.png" alt="">CyberChef</p>
<p>The config will determine the following.Â </p>
<ul>
<li>C2 URLs</li>
<li>User Agents</li>
<li>C2 Encryption keys</li>
<li>Timers</li>
<li>Antis</li>
<li>Installation</li>
<li>Startup</li>
</ul>
<p>The key for the decryption of the config will be different per build along with other parts of the configuration. Once the configuration is decrypted different globals will be set so that the malware can determine its functionality.</p>
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Installation &amp; Evasion</h2>
<hr>
<p>Before the malware begins with its persistence and evasion mechanisms it will first begin by checking if the anti-analysis options are enabled within the malwares config. If it is enabled then there are a bunch of different if statements that will call some anti-analysis methods. The important methods we see employed by the malware is the checking of DLLs.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/DLLCheck.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/DLLCheck.png" alt="">Anti-Analysis method</p>
<p>The malware will attempt to load a few different libraries that are commonly found within VM installations. Along with this check the malware attempts to turn off windows defender if the user is an admin.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/AntiWindowsDefender.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/AntiWindowsDefender.png" alt="">Anti Windows Defender</p>
<p>If these checks pass and the malware determines that it isn't running within a virtual machine it will then proceed with the installation and persistence of the malware. Persistence begins with DiamondFox determining its installation path from its configuration. Once this directory has been determined the malware will check the location of where it is currently running and compare it with this install location. If they do not match DiamondFox will create the installation directory and then use the following commands in powershell to copy itself to the installation directory.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/DropAndStart.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/DropAndStart.png" alt="">Drop &amp; Start</p>
<p>Once the malware has copied itself using powershell and the newly copied malware has been started then it will proceed to 'melt' which is a term for deleting itself. This is again done with powershellÂ </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/DeleteSelf2.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/DeleteSelf2.png" alt="">Melt</p>
<p>The malware exits once this command has been executed and we move our analysis to the newly started malware in the installation location. To achieve startup persistence the malware will first check if this functionality is enabled within its configuration. If it is then DiamondFox will again make use of powershell to create a shortcut file and place it within the startup folder for the user.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/StartUp.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/StartUp.png" alt="">Create Startup</p>
<h2 style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; font-size: 2rem; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; background-color: #ffffff;">Command &amp; Control Communications</h2>
<hr>
<p>DiamondFox's command and control communications are done over HTTP where they are encrypted and sent from the malware to a web server running PHP. Before the malware can begin communications it must first resolve the C2s domain. A feature that sets DiamondFox apart from competing malware is the ability to use namecoin domains. To achieve this the malware makes use of the following (<a href="https://github.com/B-DNS/Resolver/">link</a>) to be able to easily query namecoin domains. Once the C2 domain has been resolved the malware can then make its first connection to the C2. The malware then checks each of the gates within the config to be able to find the correct one.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/CheckGates.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/CheckGates.png" alt="">Check Gates</p>
<p>The malware iterates through each gate and then requests it with a unique user-agent that has been specified in the configuration. Along with this the malware has a decryption key that will be verified with the C2. Once a C2 has been verified it will then be set into a global and be used as the main gate. Now that the malware has the correct gate to use, it will then begin by collecting some system information through WMI.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/InfoSent.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/InfoSent.png" alt="">PC Info</p>
<p>Along with this information we also see the malware collecting running processes and installed programs. On top of DiamondFox collecting basic information about the infected computer it also includes some windows environment information.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/MoreInfo.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/MoreInfo.png" alt="">More Info</p>
<p>DiamondFox communications are encrypted with 128-bit AES, this time the first 16 bytes of the connection key is used as the AES cipher key. The malware determines a field to use within the POST request which is determined by the following logic to create a unique field.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/GateCheckIn.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/GateCheckIn.png" alt="">Gate Check-In</p>
<p>Now that DiamondFox has the correct gate to use and has collected all of the relevant information about the infected computer it will send a POST to the gate with the information encrypted within the uniquely generated field. Our encryption key for this piece of malware is 'aadd2492be4f9f28' and the generated field is 'a98' which you can see below.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/FirstPost.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/FirstPost.png" alt="">Gate Post</p>
<p>The C2 will receive this post and handle it. Then if the user of the malware has created a task to download and execute malware the POST request will be replied to by the C2 with the file that needs to be downloaded and executed. Retrieving the payload is done in two ways, if the malware is being hosted on the C2 then the malware will request the gate with the <em>gf</em> URL parameter containing the files name. This stands for get file and will return the file requested. If the file is a remote file then the malware will request the gate with the <em>grf</em> (get remote file) URL parameter and the C2 will then proceed to use CURL to proxy the file to the malware. Once the malware has dealt with the download and execute task it'll then proceed to report this to the C2.</p>
<p>DiamondFox is also able to exfiltrate different files, the first file that is uploaded is a screenshot of the infected host. Once the screenshot has been taken the malware will send a POST request to the C2 with the screenshot in the POST body. The gate also uses another uniquely generated URL parameter named <em>slots.</em> This parameter is generated from the first 3 characters in the communications' encryption key. Because our encryption key is 'aadd2492be4f9f28' then the slots URL parameter will be 'aad' as seen below.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/UploadToGate.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/UploadToGate.png" alt="">Screenshot Upload</p>
<p>The C2 determines what the uploaded file is by its extension. Here is the list of the extensions and their meaning.</p>
<ul>
<li>jpg - Screenshot</li>
<li>log - Keylogger logs</li>
<li>hst - Web history</li>
<li>pw - Stealer logs</li>
<li>ftp - FTP logs</li>
<li>ins - Software instances</li>
<li>ml - Email logs</li>
<li>rdp - RDP logs</li>
<li>cc - RAM scraper logs</li>
<li>wallet - Wallet stealer logs</li>
</ul>
<p>DiamondFox will also ban IPs that seem to be attempting malicious things. These include trying to enumerate information through the C2 and connecting to the gate with the incorrect user-agent.Â </p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">Plugin System</span></h2>
<hr>
<p>DiamondFox has an extensive plugin system which is one of its main selling points. These plugins are distributed by the seller in the form of an encrypted DLL with the extension .pack and a codename. The pack files can then be uploaded to the C2 and their functionality can be changed accordingly within the control panel. DiamondFox handles plugins by first requesting the C2 gate with the URL parameter 'pl=1' which stands for plugin list. The C2 responds with a comma separated list of all the plugin ids that are enabled.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/PluginList2.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/PluginList2.png" alt="">Decrypted Plugin List</p>
<p>The malware will receive this text and split it into an array of plugin ids. For the first 6 possible plugins the malware will iterate through the array and check if any of the first 6 plugins are enabled. If a plugin is enabled within these first 6 then it will be retrieved using the URL parameter of 'p' which is equal to the plugin id.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/PluginLoop.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/PluginLoop.png" alt="">Retrieve First 6 Plugins</p>
<p>Each plugin is uniquely encrypted with its own AES 128-bit cipher key. Once DiamondFox has retrieved the plugin with the 'p' URL parameter it will then proceed to get the plugin password using the 'gpp' URL parameter which will return an encrypted cipher key. This cipher key is then used to decrypt the retrieved plugin. Here is a list of all the plugins along with their codenames, decryption keys and other important information.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/PluginMYSQL.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/PluginMYSQL.png" alt="">Plugin List</p>
<p>Within this MySQL table we see a column named 'install', this refers to whether the plugin should be constantly run or just run once. The first 6 plugins are not installed and are all credential stealers, hence why they are done seperately. Each of these first 6 plugins will write their stolen credentials to a log file in the malware install path with the name scheme of their id + '.log'. The malware will execute the DLL and wait until this log file is available to be sent to the C2. This upload is again done with the slots parameter which in our case is 'aad'.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/UploadStolenPasswords2.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/UploadStolenPasswords2.png" alt="">Upload Stolen Credentials</p>
<p>Once the malware has handled the first 6 plugins it then continues onto a different system where it requests the C2 with a URL parameter of 'lp' which will return a list of a comma separated array of all the plugin ids that are enabled and have install enabled. These can be seen in the table above.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/GetInstallPlugins.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/GetInstallPlugins.png" alt="">Get Install Plugins</p>
<p>The malware will then iterate through each of the plugins returned by the C2 and call theÂ <em>HandleInstallPlugin</em> function so that each of these plugins can be ran.Â </p>
<p>All installed plugins are kept in a directory named 'modules' within the installation directory. If this directory does not exist then it will be created. Plugins are written to this directory with the name scheme of their id + '.dll'. When theÂ <em>HandleInstallPlugin</em> is called on a plugin then it is first checked to see whether it already exists within the 'modules' directory. If it doesn't then the malware will retrieve it from the C2 and decrypt it. The plugin is retrieved with the URL parameter 'gpb' which is assigned to the plugin ID.</p>
<p>Most of the installed plugins have a configuration that also needs to be retrieved. The configuration file name is retrieved with the 'pcn' URL parameter which is set to the id of the plugin (pcn standing for plugin config name). The C2 will then respond with the filename of the plugin config to be written to within the install folder.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/FileSearchConfigName.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/FileSearchConfigName.png" alt="">File Stealer Config Name</p>
<p>If the C2 returns a config filename for the plugin then the malware will proceed to request the config from the C2 with URL parameter 'lpc' (load plugin config) which is equal to the plugin's id. This is then written into the plugin's configuration file. Here's an example of the configuration returned for the file stealer plugin.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/FileStealerConf.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/FileStealerConf.png" alt="">File Stealer Configuration</p>
<p>The configuration for each malware will vary but parameters are always split by pipes. The plugin's password is then retrieved from the C2 with the already seen URL parameter of 'gpp'. The malware then loads the decrypted DLL and runs it. The output of the dll is then written to a log file and the log file is uploaded to the C2. I'll now concentrate on some interesting plugins but there are too many to cover in one post so I'll just be giving an overview of some of the interesting ones. Here's a table summarising.</p>
<table border="1" style="border-collapse: collapse; width: 100%; height: 264px;">
<tbody>
<tr style="height: 48px;">
<td style="width: 16.3341%; height: 48px;"><strong>URL Parameter</strong></td>
<td style="width: 26.3683%; height: 48px;"><strong>URL Example</strong></td>
<td style="width: 28.6489%; height: 48px;"><strong>Description</strong></td>
<td style="width: 28.6487%; height: 48px;"><strong>Example Decrypted Response</strong></td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">pl</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?pl=1</td>
<td style="width: 28.6489%; height: 24px;">Enabled plugin list</td>
<td style="width: 28.6487%; height: 24px;">1,2,3,4,5,6</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">p</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?p=2</td>
<td style="width: 28.6489%; height: 24px;">Retrieve encrypted plugin DLL</td>
<td style="width: 28.6487%; height: 24px;">Plugin DLL</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">gpp</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?gpp=2</td>
<td style="width: 28.6489%; height: 24px;">Get plugin password</td>
<td style="width: 28.6487%; height: 24px;">a4d54e4e6a1e87c4</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">lp</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?lp=1</td>
<td style="width: 28.6489%; height: 24px;">Install plugin list</td>
<td style="width: 28.6487%; height: 24px;">9,10,11,12,13</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">gpb</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?gpb=9</td>
<td style="width: 28.6489%; height: 24px;">Retrieve encrypted plugin DLL</td>
<td style="width: 28.6487%; height: 24px;">Plugin DLL</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">pcn</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?pcn=9</td>
<td style="width: 28.6489%; height: 24px;">Retrieve plugin config filename</td>
<td style="width: 28.6487%; height: 24px;">search.conf</td>
</tr>
<tr style="height: 24px;">
<td style="width: 16.3341%; height: 24px;">lpc</td>
<td style="width: 26.3683%; height: 24px;">http://c2.com/gate.php?lpc=9</td>
<td style="width: 28.6489%; height: 24px;">Get plugin config</td>
<td style="width: 28.6487%; height: 24px;">*.wallet|ALL|100|200</td>
</tr>
</tbody>
</table>
<p>And here is what the install folder looks like after these plugins have been ran.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/InstallFolderPlugins.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/InstallFolder.png" alt="">Install Folder After Plugins</p>
<p>In the above image you can see the configuration files for different plugins and the folder that will contain videos for the screen recorder plugin. Here's the contents of the modules folder.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/InstallFolderDLLs.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/InstallFolderDLLs.png" alt="">Modules</p>
<p>Above is the encrypted DLL modules.</p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">Hidden RDP</span></h2>
<hr>
<p>DiamondFox offers a hidden remote control of an infected computer as one of its many plugins. Although this is named as hidden RDP it does not make use of the windows RDP service and instead will utilise the remote access tool called Ammyy Admin (<a href="http://www.ammyy.com/en/">link</a>). Ammyy Admin is commonly used in tech support scams and is also the base for the FlawedAmmyy malware (<a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.flawedammyy">link</a>). Unlike other plugins DiamondFox will only trigger this plugin if the user has created a task for an infected computer to start the hidden RDP process. When opening Ammyy Admin you will be greeted with the following.Â </p>
<p><img src="https://lh4.googleusercontent.com/ouovswOtGhXwORlRf6xkXJIzHK7-UZvnX-ZaPgTp0NY85_AAwRjNRRq3yV-QXl1VNu11bU_cPF-3-QGCOb5u4aoRzX5-wcZnkQzerRkNB94uZB-_LiwSXzI28wx9oWTYno67WJOp" width="540" height="326" style="font-family: Arial; font-size: 11pt; white-space: pre-wrap; margin-left: auto; margin-top: 0px; display: block; margin-right: auto;"></p>
<p>Ammyy Admin works by creating a unique ID and password for your computer that you can share with someone else who will then proceed to be able to connect to your computer using these credentials. But this would create issues for DiamondFox as it must run Ammyy Admin without notifying the user whilst also being able to pass the client ID and password back to the C2 for malicious users to exploit. So to combat these issues DiamondFox uses the following exploit (<a href="https://www.exploit-db.com/exploits/31182">link</a>) to hide the GUI, set a specified password and also know the location of the infected user's ID in memory. Here's main where we can see the plugin making use of this exploit (I have renamed functions for clarity).</p>
<p style="text-align: left;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/HRDPMain.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/HRDPMain.png" alt="">HRDP Main</p>
<p style="text-align: left;">We initially see a mutex being created so that the plugin isn't running twice. Then the malware will make sure that the 'ID.txt' file does not exist in APPDATA as this is where it'll write the infected user's Ammyy Admin client ID. The malware will then create a directory in the 'ProgramData' directory named 'AMMYY'. Once this directory has been created then the malware will write the authentication bypass files to this folder. The malware will then proceed with process injection into Windows Media Player.</p>
<p style="text-align: left;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/InjectRDP.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/InjectRDP.png" alt="">Inject Ammyy Admin</p>
<p style="text-align: left;">The process injection is done by first locating where the Windows Media Player binary is located and then loading the Ammyy Admin binary from resources. The Ammyy Admin binary is then injected into a newly started Windows Media Player process. The process injection will also make use of theÂ <em>-nogui</em> exploit within the injected process so that Ammyy Admin does not display anything to the user. The malware will then proceed with another process injection.</p>
<p style="text-align: left;"><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/StartLoader.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/StartLoader.png" alt="">Start Loader</p>
<p style="text-align: left;">The malware loads another binary from resources which is responsible for reading the client ID from memory and then writing it to the 'ID.txt' file in APPDATA. The ID.txt file contents is then uploaded to the C2 for the user to then be able to connect to the infected computer.</p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">Remote Console</span></h2>
<hr>
<p>If the user wants to start a remote shell for their infected computer then they can do it through the remote console plugin. This plugin allows the user to be able to command a remote command-line instance on the infected computer. Like the hidden RDP plugin this plugin is only triggered upon user trigger. Here's what this looks like for the user.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/RemoteShell.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/RemoteShell.png" alt="">DiamondFox Remote Console</p>
<p>When the plugin is triggered we see the same process of DLL loading. Once the DLL is loaded the plugin begins by creating a mutex and then proceeding with checking in with the C2. This is done by setting a URL parameter of 'cmd' which is equal to a base64 encoded string of the infected computers HWID + '|Connected'. Let's take a look at the plugins main.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/ShellMain.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/ShellMain.png" alt="">Shell Main</p>
<p>We see the main loop which will request the C2 looking for commands. If it gets a run command then a file will be dropped to the disk and then run using powershell. Other commands will be ran through a hidden command-line with width and height set to 0. Standard input output will be used to enter and retrieve commands from this hidden CMD process and the output will then be sent back to the C2 to be displayed by the user.</p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">Persistence</span></h2>
<hr>
<p>To keep the infected user from being able to kill the DiamondFox process the developer has created a plugin to watch the DiamondFox process and restart it if it has been stopped. The plugin begins by determining if the infected computer is using a 32bit or 64bit architecture. If the victim is using 32bit then the malware will get the x86 program files directory or if the host is 64bit then it'll get the program files directory. Once it has a directory to use it will iterate through the sub directories and find the first directory that contains an executable. When an executable has been found the malware will load another binary from resources and inject it into the chosen executable.</p>
<p>The injected executable will proceed to copy the main DiamondFox binary and watch the process of the malware. If the process stops then the malware will use powershell to restart the process. If the file is deleted then the plugin will drop the copied binary and start the process.</p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">UAC Bypass</span></h2>
<hr>
<p>To give the malware a stronger hold on the infected computer DiamondFox makes use of User Access Control (UAC) bypasses to be able to gain higher privileges. When the plugin is loaded it begins by querying two registry keys.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/UACChecks.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/UACChecks.png" alt="">UAC Checks</p>
<p>These checks will query the registry keys that determine if any attempts at elevation of privileges will create a visual prompt for the administrator of the infected computer. If the attempts will create visual prompts then the plugin will exit. If not then the UAC bypass plugin will then query the windows product name and if the version of windows is not supported then the plugin will exit.</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/UACChecks2.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/UACChecks2.png" alt="">UAC Product Name Checks</p>
<p>I'm not going to reiterate all the different bypasses DiamondFox uses as they have been described in more depth elsewhere. Here are the bypasses it uses as of writing this analysis.</p>
<ul>
<li>wsreset.exe (<a href="https://lolbas-project.github.io/lolbas/Binaries/Wsreset/">link</a>)</li>
<li>sdclt.exe (<a href="https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/">link</a>)</li>
<li>fodhelper.exe (<a href="https://pentestlab.blog/2017/06/07/uac-bypass-fodhelper/">link</a>)</li>
<li>eventvwr.exe (<a href="https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/">link</a>)</li>
</ul>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">C2 &amp; Panel</span></h2>
<hr>
<p>Here are some screenshots of the inside of the panel.Â </p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/login.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/login.png" alt="">Login</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/dashboard.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/dashboard.png" alt="">Dashboard</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/clients.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/clients.png" alt="">Clients</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/clientinfo.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/clientinfo.png" alt="">Client</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/statustucs.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/statustucs.png" alt="">Statistics</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/reports.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/reports.png" alt="">Reports</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/settings1.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/settings1.png" alt="">Settings</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/plugins.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/plugins.png" alt="">Plugins</p>
<p><img src="https://fr3d.hk/blog/bl-content/uploads/pages/6c2833800c7f1446387e701e1f9c4afc/taskmanager.png" alt=""><img src="https://fr3d.hk/blog/bl-content/uploads/pages/0947ecab4776b8f2ef7f9f87b726c09f/taskmanager.png" alt="">Task Manager</p>
<h2><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;">Epilogue</span></h2>
<hr>
<p><span style="color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 32px; font-weight: 500; background-color: #ffffff;"></span>DiamondFox is a very capable piece of malware with many features and plugins. Although some plugins seem to be very basic the malware comes together as a very dangerous piece of kit. This analysis took longer than I had planned so I have left out a few of the plugins. I may come back to write about these if I see it as necessary. I hope that this was a beneficial analysis and until the next time, goodbye &amp; thanks for reading!</p>
<p>IOC</p>
<ul>
<li>4440d9bb248b6ecb966eef7af0ec276c</li>
<li><a href="https://tria.ge/200812-vc8ftkz17s/static1">https://tria.ge/200812-vc8ftkz17s/</a></li>
<li>timesync.live</li>
</ul>
<p></p>
<p></p>
</div>
	</div>

	<!-- Load Bludit Plugins: Page End -->
	
</div>
			</div>

			<!-- Right Sidebar -->
			<div class="col-md-3">
			<div class="plugin plugin-categories"><h2 class="plugin-label">Categories</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/category/general">General (2)</a></li><li><a href="https://fr3d.hk/blog/category/malware">Malware (9)</a></li><li><a href="https://fr3d.hk/blog/category/phishing">Phishing (1)</a></li></ul></div></div><div class="plugin plugin-pages"><h2 class="plugin-label">Links</h2><div class="plugin-content"><ul><li><a href="https://fr3d.hk/blog/rss.xml">RSS Feed</a></li></ul></div></div>			</div>

		</div>
	</div>

	<!-- Footer -->
	<footer class="footer bg-dark">
	<div class="container">
		<p class="m-0 text-center text-white text-uppercase">Copyright Â© 2021<span class="ml-5 text-warning">Powered by<img class="mini-logo" src="https://fr3d.hk/blog/bl-themes/blogx/img/favicon.png"/><a target="_blank" class="text-white" href="https://www.bludit.com">Bludit</a></span></p>
	</div>
</footer>
	<!-- Javascript -->
	<script src="https://fr3d.hk/blog/bl-kernel/js/jquery.min.js?version=3.12.0"></script>
<script src="https://fr3d.hk/blog/bl-kernel/js/bootstrap.bundle.min.js?version=3.12.0"></script>

	<!-- Load Bludit Plugins: Site Body End -->
	<script>var links = document.querySelectorAll( 'a' );  for (var i = 0, length = links.length; i < length; i++) {if (links[i].hostname != window.location.hostname) {links[i].target = '_blank';}}</script>

<script src="/blog/bl-plugins/viewerjs/js/viewer.js"></script>

</body>
</html>