<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8">  <title>Analysis of Uroburos, using WinDbg</title> <meta http-equiv="x-ua-compatible" content="IE=edge" /> <meta name="generator" content="TYPO3 CMS" /> <meta name="viewport" content="width=device-width, initial-scale=1" /> <meta name="application-name" content="G DATA | Trust in German Sicherheit" /> <meta name="keywords" content="Uroburos, analysis, hack, malware, microsoft windows, targattacks, update" /> <meta http-equiv="content-language" content="en" /> <meta name="twitter:card" content="summary" /> <meta name="apple-mobile-web-app-capable" content="yes" /> <meta name="msapplication-navbutton-color" content="#1e1e1e" /> <meta name="yandex-verification" content="4cf0234eb3af74fb" /> <meta name="dc.title" content="Analysis of Uroburos, using WinDbg" /> <meta name="date" content="2017-06-19T13:56:48" /> <meta name="dc.date" content="2017-06-19T13:56:48" /> <meta name="copyright" content="G DATA CyberDefense AG, 2024. All rights reserved." /> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/basic-styles.css?1721250357" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/font/gcon.css?1721250357" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/font/source-sans-pro.css?1721250357" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/assets/prism.css?1721250357" media="all"> <link href="/typo3conf/ext/gd_sites/Resources/Public/Styles/elements/menu-2019.css?1721250357" rel="stylesheet" > <link href="/typo3conf/ext/gd_sites/Resources/Public/Styles/assets/blogpage.css?1721250357" rel="stylesheet" > <script>
    function setOffline(e,o) {o.dontshow = 1;}
    if (window.location.href.indexOf('gd-ncb=2') !== -1 || window.sessionStorage.getItem('gd_no-tracking') === 'true') {
        __cmp("addEventListener",["init",setOffline,false],null);
        __cmp("addEventListener",["settings",setOffline,false],null);
        window.sessionStorage.setItem('gd_no-tracking', 'true');
    }
  </script> <link rel="apple-touch-icon" href="/apple-touch-icon.png"/><link rel="alternate" type="application/atom+xml" title="G DATA SecurityBlog (deutsch)" href="https://feeds.feedblitz.com/GDataSecurityBlog-DE&x=1" /> <link rel="alternate" type="application/atom+xml" title="G DATA SecurityBlog (english)" href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&x=1" /><meta name="author" content="MN"><meta name="DC.author" content="MN"> <link rel="dns-prefetch" href="//file.gdatasoftware.com"> <link rel="dns-prefetch" href="//static.gdatasoftware.com"> <link rel="dns-prefetch" href="//www.google-analytics.com"> <link rel="dns-prefetch" href="//www.googletagmanager.com"> <link rel="canonical" href="https://www.gdatasoftware.com/blog/2014/06/23953-analysis-of-uroburos-using-windbg"/>  <script type="application/ld+json">[{"@context":"https:\/\/www.schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"item":{"@id":"https:\/\/www.gdatasoftware.com\/","name":"Home"}},{"@type":"ListItem","position":2,"item":{"@id":"https:\/\/www.gdatasoftware.com\/blog","name":"Blog (EN)"}},{"@type":"ListItem","position":3,"item":{"@id":"https:\/\/www.gdatasoftware.com\/blog\/2014\/06\/23953-analysis-of-uroburos-using-windbg","name":"Analysis of Uroburos, using WinDbg"}}]}]</script> </head> <body id="page-23953" class="fe-0 be-18"> <div id="outer-wrap"> <header id="site-header" class="height-auto"> <div class="menu-overlay" data-menu-close></div> <div id="mobile-head" data-menu-website="blog" class="clearfix hide-for-large"> <a href="/blog" id="mobile-logo"> <div class="logo"> <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-dark.svg" alt="G DATA Logo" height="40""/> </div> </a> <a id="service-nav-trigger"><span>MENU</span> <div id="hamburger" class="hamburger-icon-container"> <span class="hamburger-icon"></span> </div> </a> </div> <div id="main-navi" data-menu-website="blog" class="logged-in main-navi-before"> <div class="level-1 flex-container"> <div class="logo show-for-large"> <a href="/blog" > <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-dark.svg" alt="G DATA Logo" height="40"/> </a> </div> <nav role="navigation"> <ul class="menu"> <li> <a class="effect-underline" href="/blog/awareness">Awareness</a> </li> <li> <a class="effect-underline" href="/blog/g-data-campues">G DATA Campus</a> </li> <li> <a class="effect-underline" href="/blog/smb-secuerity">SMB Security</a> </li> <li> <a class="effect-underline" href="/blog/tips-and-tricks">Tips and tricks</a> </li> <li> <a class="effect-underline" href="/blog/techblog">Techblog</a> </li> <li class="ar pop-up choose-language"> <a href="https://www.gdata.de/blog"> <img src="/typo3conf/ext/gd_sites/Resources/Public/Images/Flags/DE.svg" style="height:20px" alt="Switch to german version" /> </a> </li> <li class="ar pop-up rss"> <a href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&amp;x=1" target="_blank" rel="noreferrer"> <i class="icon-rss"></i><span class="title"></span> </a> </li> </ul> </nav> <div class="blog-subwrap"> <ul class="blog-subnavi"> <li> <a class="nav-link" href="/blog/ransomware">Ransomware</a> </li> <li> <a class="nav-link" href="/blog/warning">Warning</a> </li> <li> <a class="nav-link" href="/blog/malware">Malware</a> </li> <li> <a class="nav-link" href="/blog/cybercrime">CyberCrime</a> </li> <li> <a class="nav-link" href="/blog/exploits">Exploits</a> </li> <li> <a class="nav-link" href="/blog/phishing">Phishing</a> </li> <li> <a class="nav-link" href="/blog/bots-botnets">Bots &amp; Botnets</a> </li> </ul> <div class="searchbox"> <form action="/blog/search" method="GET"> <input type="text" name="tx_kesearch_pi1[sword]" placeholder="search phrase" /> <button data-trigger-searchinput type="button"><i class="icon-search"></i></button> </form> </div> </div> </div> </div> </header> <div id="inner-wrap"> <div id="main" role="main"> <div class="row expanded blog-head-container"> <div class="pagenews-header blogpage-header text-white bg-right bgm-left"> <div class="outer"> <div class="inner v-middle"> <header> <h1>Analysis of Uroburos, using WinDbg</h1> <span itemprop="dateCreated">06/02/2014 </span> </header> </div> </div> <span class="cat-title">G DATA <strong>Blog</strong></span> <span class="cat-icon"><i class="icon-blog has-top top"></i></span> </div> <style> .blogpage-header { background-image:url(/typo3conf/ext/gd_sites/Resources/Public/Images/content-elements/blog-default-header-1.jpg); } @media only screen and (max-width: 767px) { .blogpage-header { background-image:url(/typo3temp/assets/_processed_/7/a/blog-default-header-1_e60e579fe4.jpg); }} </style> </div> <div class="row"> <div class="column small-12 medium-12 large-9" id="blogpage-content-container"> <div class="row"> <div class="column fce small-12"> <p class="intro-text">Uroburos was already described as a very sophisticated and highly complex malware in our G DATA Red Paper, where we had a look at the malware’s behavior. This malware belongs to a specific type called rootkit. The general purpose of a rootkit is to modify the behavior of the system and, especially, to hide its activity. Generally, a rootkit resides in the kernel. To analyze this kind of malicious software, analysts need to use specific tools, such as WinDbg, to debug the Microsoft Windows kernel. WinDbg is a debugger provided by Microsoft. One can use this tool to debug user mode applications and kernel mode applications (for example the drivers).</p> </div> </div> <div class="row"> <div id="c129883" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>Today, we would like to give you an understanding of how analysts work their way through malware and give you some insights into the code of one of the most sophisticated digital threats. In this current example case, we decided to work with a memory dump (crash dump) of a system infected with Uroburos. To facilitate the analysis, we added an extension to add the support of python, called: PyKd. WinDbg has its own script language, but it is not easy to understand. One can download this python extension here, for free: <a href="http://pykd.codeplex.com/.">http://pykd.codeplex.com/.</a></p><p>To realize this article, the machine was infected by the Uroburos dropper with the following md5: 626576e5f0f85d77c460a322a92bb267. </p><h1>Visualization of the hooks</h1><p>The Uroburos rootkit adds several hooks to hide its activity. In our specific case, the hooking is a technique used to alter the behavior of specific system functions; the rootkit fakes the output of the Microsoft Windows API. For example, it hides registry entries, files and more.<br>To perform this task, the rootkit developers decided to use interrupts. We can display the Interrupt Descriptor Table (IDT), as shown below. The IDT table stores pointers to ISR (Interrupt Service Routines), which are called when an interrupt is triggered.</p></div></div></div> <div id="c138489" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_01_idt.PNG" width="826" height="274" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138490" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>One of the pointers (0x859e84f0) is unknown and cannot be resolved. All other pointers have a function name, following the address. The last digits of the first column are the ID of the interrupt (in our case 0xC3). We can disassemble the code available at this address:</p></div></div></div> <div id="c138491" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_02_859e84f0.PNG" width="392" height="448" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138492" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The last argument of the WinDbg command is the length (L0x16) to disassemble. The function starts by a series of NOP. The interrupt 0xC3 is used by the malware, the next step is to identify how and when this interrupt is triggered. Here is the code of the beginning of the function <span class="detail">IoCreateDevice()</span>:</p></div></div></div> <div id="c138493" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_03_IoCreateDevice.PNG" width="725" height="234" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138494" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>We can see that the second instruction is <span class="detail">int 0xC3</span> (interrupt 0xC3). Thanks to the PyKd extension, we can easily create a python script to detect every function with this interrupt:</p></div></div></div> <div id="c138495" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_04_importPyKd.PNG" width="646" height="196" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138496" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>This script starts to list each exported function in <span class="detail">ntoskrnl.exe</span>. Secondly, for each function it checks if the second instruction is <span class="detail">int 0xC3</span> (cdc3). If it is the case, the exported function’s name is displayed. Here is the output of the script regarding the current analysis:</p></div></div></div> <div id="c138497" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_05_py.PNG" width="332" height="310" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138498" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>We could use the function: <span class="detail">!chkimg</span> to easily identify the hook. However, it was a good exercise to play with PyKd. </p><p>Another interesting step is to dump the code of the driver. To perform this task, we first need to find the beginning of the PE. We can find the address thanks to the address of the code executed when an interrupt is triggered:</p></div></div></div> <div id="c138499" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_06_pool.PNG" width="684" height="408" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138500" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>This output shows us two remarkable things:</p><ul><li>&nbsp;First, the driver uses a well-known Windows kernel memory pool tag called "NtFs". The Windows components mark allocated memory block with a unique tag. But the rootkit uses the same tag as the legitimate ntfs.sys driver. This choice was made to hide the rootkit and dupe the analyst.</li><li>Secondly, the output looks like the beginning of a PE. But this PE is broken: the MZ is not available and some information is missing. For example, the value of the <span class="detail">SizeOfImage</span> (85980000+0x140) is null...</li></ul><p>The rootkit alters the beginning of the PE to hide itself. Some tools parse the memory and look for the MZ string to identify the beginning of a PE. In our current case, if we used these tools looking for a PE file, we would never identify our malware using this automation. Manual analysis is needed here. To dump our driver we need to reconstruct the PE but we don't know the size of the binary, as mentioned above, so we need to make a large dump, to be sure to not forget a part of the binary. </p><h1>Modules, drivers and devices</h1><p>We can now display the loaded (and unloaded) modules with WinDbg:</p></div></div></div> <div id="c138501" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_07_lmf.PNG" width="642" height="292" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138502" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>In our case, the rootkit’s module is fdisk.sys. According to the code shown above, it seems to be unloaded, but as we analyzed before, the code is really present on the infected system. So, the developers found a way to unload the modules while the malicious code is still running! </p><p>We can list the drive</p></div></div></div> <div id="c138503" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_08_objectdriver.PNG" width="430" height="368" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138504" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The driver used by our module is <span class="detail">\driver\Null</span>. All other modules are legitimate modules used by Windows. We can display the devices associated to the driver we are focusing on:</p></div></div></div> <div id="c138505" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_09_drvobj.PNG" width="357" height="137" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138506" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p><br>The device objects associated to our driver are:</p><ul><li>&nbsp; 0x864473e0</li><li>&nbsp; 0x862531e0</li><li>&nbsp; 0x86253748</li><li>&nbsp; 0x8576a2d0</li></ul><p>Furthermore, we can see the description of those devic</p></div></div></div> <div id="c138507" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_10_devobj.PNG" width="576" height="681" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138508" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>Two objects are particularly interesting: <span class="detail">FWPMCALLOUT</span> and <span class="detail">RawDisk1</span></p><h1>WFP callout</h1><p>This first device is <span class="detail">FWPMCALLOUT</span>. Thanks to the name of the device we can guess that the rootkit registers a callout for Windows Filtering Platform (WFP). The WFP is a set of API and system services which provides a platform for creating network filtering applications. In our case, the rootkit uses this technology to perform Deep Packet Inspection (DPI) and modifications of the network flow. The purpose of this device is to intercept relevant data as soon as a connection to the Command &amp; Control server or other local infected machines used as relay is established and to receive commands. </p><p>As there is no command to simply list the WFP callouts, we have to extract the information needed using different steps: </p><p>First, the <span class="detail">netio!gWfpGlobal</span> variable contains the starting point for the WFP data structures:</p></div></div></div> <div id="c138509" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_11_dpnetiogWfpGlobal.PNG" width="309" height="42" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138510" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>A global table stores the number of callouts and the array of the corresponding callout structures. </p><p>Here is a method to find suitable offsets:</p></div></div></div> <div id="c138511" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_12_netioFeInitCalloutTable.PNG" width="705" height="351" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138512" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The first number is the offset that contains the number of total callouts made, in hex, of course:</p></div></div></div> <div id="c138513" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_13_dps848450082d8.PNG" width="277" height="40" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138514" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The second number is the offset that contains the array in which the callout structure is stored:</p></div></div></div> <div id="c138515" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_14_dps848450082dc.PNG" width="234" height="39" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138516" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The pool tag of this address confirms our findings so far and proves that we have found the right track:</p></div></div></div> <div id="c138517" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_15_pool86233000.PNG" width="640" height="80" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138518" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>We can now extract the size of each structure stored within the array. As it is not documented by Microsoft, we identify the size by disassembling the function <span class="detail">InitDefaultCallout()</span>:</p></div></div></div> <div id="c138519" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_16_uNETIOInitDefaultCallout.PNG" width="647" height="194" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138520" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>Finally, we use a one-liner command to list the elements of this array:</p></div></div></div> <div id="c138521" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_17_rSt0.PNG" width="824" height="873" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138522" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The list of elements reminds us of the information we have seen in the IDT: two addresses are not resolved. Those two WFP callouts are: 0x859b5040 and 0x859b5520. WinDbg is not able to resolve these two addresses because the addresses are unknown. These are not addresses of a Microsoft. Now that we have the addresses, we can use the command <span class="detail">!pool</span> to validate that the addresses are in the same region as the code executed when an interrupt is triggered:</p></div></div></div> <div id="c138523" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_18_859b5040.PNG" width="633" height="98" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138524" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><h1>Virtual file system</h1><p>Previously, when looking at the device objects, we came across two devices with very similar names: <span class="detail">RawDisk1</span> and <span class="detail">RawDisk2</span>. Let us have a detailed look at the first one:</p></div></div></div> <div id="c138525" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_19_devobjrawdisk1.PNG" width="578" height="506" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138526" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>As we can see, <span class="detail">RawDisk1</span> device is in fact an NTFS file system; a virtual file system used by the rootkit to store its configuration, the exfiltrated data… </p><p>We can identify the used files (opened handles) within the file system, like <span class="detail">\queue</span> and <span class="detail">\klog</span>:</p></div></div></div> <div id="c138527" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_20_devhandles.PNG" width="846" height="1209" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138528" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>Thanks to this command we are able to list the files hidden from the operating system. </p><h1>Digital signature enforcement</h1><p>Microsoft created a Driver Signing Policy for its 64-bit versions of Windows Vista and later versions.&nbsp; To load a driver, the .sys file must be signed by a legitimate publisher. Developers may disable the Driver Signature Enforcement process during the development phase of a driver, which means a developer does not have to sign each compiled driver version during development phase. This mode is called “Test-mode”. In our case, the rootkit is not signed, which would usually mean that it had no chance to be accepted by Microsoft’s policy, but it disables the digital signature process to circumvent the checks. The status of this feature is stored in the global variable <span class="detail">nt!g_cienabled</span>. Compare the value of this variable on a clean system, without infection with the same information on an infected system:</p></div></div></div> <div id="c138529" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_21_dqntg_cienabled1.PNG" width="292" height="35" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138530" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>The code above shows that the value is set to 1</p></div></div></div> <div id="c138531" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><img class="image-embed-item " src="/fileadmin/web/general/images/blog/2014/06_2014/graphics/uroburoswindbg_code_22_dqntg_cienabled0.PNG" width="258" height="36" loading="lazy" alt="" /></figure></div></div><div class="ce-bodytext"></div></div></div> <div id="c138532" class="fce column large-12 medium-12 small-12 frame-layout-0 " ><div class="ce-textpic ce-center ce-above"><div class="ce-bodytext"><p>We can clearly identify that the malware disabled the driver signature enforcement. Generally speaking, we could do the same by using <span class="detail">bcdedit.exe -set TESTSIGNING OFF</span>, to switch into testing mode to be able to load unsigned driver. The difference is: Using <span class="detail">bcdedit.exe</span> triggers a message window which is shown to the user, at the bottom of the desktop, and this is not very secretive. The action could be detected immediately.<br>More information about the malware’s circumvention of the driver signature enforcement can be found in our SecurityBlog article: <a href="/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation" title="G Data SecurityBlog: Uroburos - Deeper travel into kernel protection mitigation" target="_blank">Uroburos – Deeper travel into kernel protection mitigation</a><br><br></p><h1>Conclusion</h1><p>What you have seen now, is a very limited part of the extensive analysis of complicated malware and a very short introduction into WinDbg. Generally, it is very hard to apprehend such an extensive tool, but when working on such a case of kernel land analysis, researchers do not have a choice. </p><p>Processed like this, in an article with code snippets, the results seem logic and do make perfect sense. But, believe us, working with malware code costs a lot of extensive training, experience and time. </p><h1>Related articles</h1><p>2014/05/13 <a href="/blog/2014/05/23958-uroburos-rootkit-belgian-foreign-ministry-stricken" title="G Data SecurityBlog: Uroburos rootkit: Belgian Foreign Ministry stricken" target="_blank">Uroburos rootkit: Belgian Foreign Ministry stricken </a></p><p>2014/03/07 <a href="/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation" title="G Data SecurityBlog: Uroburos – Deeper travel into kernel protection mitigation" target="_blank">Uroburos – Deeper travel into kernel protection mitigation</a></p><p>2014/02/28 <a href="/blog/2014/02/23968-uroburos-highly-complex-espionage-software-with-russian-roots" title="G Data SecurityBlog: Uroburos - highly complex espionage software with Russian roots" target="_blank">Uroburos - highly complex espionage software with Russian roots</a></p><p>2014/02/28 <a href="https://secure.gd/dl-en-rp-Uroburos" title="G Data SecurityLabs Red Paper about Uroburos" target="_blank" class="external-link-new-window" rel="noreferrer">G&nbsp;DATA RedPaper about Uroburos</a></p><h1>&nbsp;</h1></div></div></div> </div> </div> <div class="column small-12 medium-12 large-3" id="blogpage-sidebar-container"> <div class="row"> <div class="column small-12 fce"> </div> </div> <div class="row"> <div id="pagenews-sticky-sidebar-container" class="column small-12" data-sticky-container> <div class="sticky" id="pagenews-sticky-sidebar" data-sticky data-margin-top="0" style="width:100%;" data-deep-linking data-sticky-on="large" data-margin-bottom="0" data-top-anchor="pagenews-sticky-sidebar-container" data-btm-anchor="blogpage-content-container:bottom"> <div class="show-for-large"> <div class="sidebar-socialshare margin-bottom"> <div class="shariff" data-button-style="icon" data-twitter-via="GDATA" data-orientation="horizontal" data-lang="en" data-services="[&quot;twitter&quot;,&quot;xing&quot;,&quot;linkedin&quot;,&quot;facebook&quot;,&quot;reddit&quot]"></div> </div> <div class="pagenews-progress"> <div class="reading-time"> <span class="eta"></span> <span class="word-count"></span> </div> <progress value="0"></progress> </div> </div> <div class="row"> <div class="fce column small-12 blog-categories"> <ul> <li><a href="/blog/malware"><span class="label label-default">Malware</span></a></li> <li><a href="/blog/microsoft-windows"><span class="label label-default">Microsoft Windows</span></a></li> <li><a href="/blog/vuelnerabilities"><span class="label label-default">Vulnerabilities</span></a></li> <li><a href="/blog/cybercrime"><span class="label label-default">CyberCrime</span></a></li> </ul> </div> </div> <div class="row"> </div> </div> </div> </div> </div> </div> <div class="row expanded pagenews-footer" id="blogpage-footer"> <div class="small-12 column"> <div class="row" > <div class="small-12 medium-6 large-3 column fce"> <a class="button expanded no-margin" href="/blog">back to list</a> </div> <div class="small-12 medium-6 large-3 column fce"> <div class="sidebar-socialshare"> <div class="shariff" data-button-style="icon" data-twitter-via="GDATA" data-orientation="horizontal" data-lang="en" data-services="[&quot;twitter&quot;,&quot;xing&quot;,&quot;linkedin&quot;,&quot;facebook&quot;,&quot;reddit&quot]"></div> </div> </div> <div class="small-12 medium-12 large-3 column fce last-update"> </div> </div> </div> </div> <div class="row"> </div> </div> <div class="row"><nav id="breadcrumb" class="small-12 columns"><ul class="breadcrumbs"><li class="info-text">You are here:</li><li><a href="/blog"><span>Blog (EN)</span></a></li><li><span>Analysis of Uroburos, using WinDbg</span></li></ul></nav></div> <footer id="site-footer"> <div class="row flexcontainer"> <div class="logo"> <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-light.svg" alt="G DATA Logo" height="50" style="height: 50px; margin:16px;"/> </div> <div class="socialbar"> <div class="social text-center"> <a href="https://de.linkedin.com/company/g-data-cyberdefense" title="G DATA CyberDefense AG on Linked-In" target="_blank" rel="noreferrer"><i class="icon-linkedin"></i></a><a href="https://www.facebook.com/gdatasoftwareag" title="G DATA CyberDefense AG on Facebook" target="_blank" rel="noreferrer"><i class="icon-facebook"></i></a><a href="https://www.threads.net/@gdatacyberdefense" title="G DATA CyberDefense AG on Threads" target="_blank" rel="noreferrer"><i class="icon-threads"></i></a><a href="https://www.instagram.com/gdatacyberdefense" title="G DATA CyberDefense AG on Instagram" target="_blank" rel="noreferrer"><i class="icon-instagram"></i></a><a href="https://www.youtube.com/user/GDataSoftwareAG" title="G DATA CyberDefense AG on Youtube" target="_blank" rel="noreferrer"><i class="icon-youtube"></i></a><a href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&amp;x=1" target="_blank" rel="noreferrer"><i class="icon-rss"></i></a> </div> </div> </div> <div class="sitemap row small-up-1 medium-up-2 large-up-4"> <div class="column"> <h5>G DATA</h5> <ul> <li> <a href="/about-g-data" data-event-action="click" data-event-category="Menu-Footer" data-event-label="About G DATA">About G DATA</a> </li> <li> <a href="/g-data/newsroom" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Newsroom">Newsroom</a> </li> <li> <a href="/about-g-data/jobs" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Jobs &amp; Career">Jobs &amp; Career</a> </li> <li> <a href="/about-g-data/awards" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Awards">Awards</a> </li> </ul> </div> <div class="column"> <h5>Services</h5> <ul> <li> <a href="/pc/free-trial" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Free Trial">Free Trial</a> </li> <li> <a href="https://www.gdata.de/help/en/business/HowToArtikel/Virenanalyse/DateiURLAppEinsenden/" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Submit a suspicious file, app or URL">Submit a suspicious file, app or URL</a> </li> </ul> </div> <div class="column"> <h5>G DATA Solutions</h5> <ul> <li> <a href="/pc" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Consumer">Consumer</a> </li> <li> <a href="/business" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Business">Business</a> </li> </ul> </div> </div> <div class="row"> <hr/> </div> <div class="footnav row"> <div class="large-7 medium-6 small-12 column imprint"> <a href="/privacy">Data Protection </a><a href="/support/contact">Contact </a><a href="/imprint">Imprint </a><a href="/">gdatasoftware.com </a> </div> <div class="large-5 medium-6 small-12 column copyright"> <span>&copy;&nbsp;2024&nbsp;G DATA CyberDefense AG. All rights reserved.</span> </div> </div> </footer> <a href="#" class="go-top"><i class="icon-angle-up-regular"></i></a> </div> </div> <script src="/typo3temp/assets/compressed/merged-c04750c1ee860c887a2d873c0d8ef939.js?1721276080"></script> <script src="/typo3conf/ext/gd_sites/Resources/Public/JavaScript/gd-mainmenu-2019.js?1721250357"></script> <script src="/typo3conf/ext/gd_pagenews/Resources/Public/JavaScript/gd-guidebook.js?1721250357"></script> <script>
            $(document).ready(function() {
				GdScrollIndicator.init('#blogpage-content-container','','');
				GdScrollIndicator.calculateReadingTime([$('#blogpage-content-container'),$('.pagenews-teaser')],{readingTimeTarget:'.eta',wordCountTarget:'.word-count', prependTimeString:'Reading time: ', lessThanAMinuteString:'less then a minute', prependWordString:'(',apendWordString:' words)'});
			});
		</script> <script>
    document.addEventListener( 'DOMContentLoaded', function(e) {
        window.GdTracking = new GdTrackingModule();
        GdTracking.initialize();
    });
</script> <script data-cmp-vendor="s905" type="text/plain" class="cmplazyload">
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}

        gtag('consent', 'default', {
            'ad_storage': 'denied',
            'analytics_storage': 'denied',
            'ad_user_data': 'denied',
            'ad_personalization': 'denied',
            'wait_for_update': 500
        });

        dataLayer.push({
            'event': 'default_consent'
        });
    </script> <script data-cmp-vendor="s905" type="text/plain" class="cmplazyload">
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer','GTM-NQG4RJ');
    </script> </body> </html>