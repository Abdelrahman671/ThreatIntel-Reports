<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.19.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Playing with AsyncRAT - eln0ty</title>
<meta name="description" content="AsyncRAT is a Remote Access Tool (RAT) designed to remotely monitor and control other computers ">


  <meta name="author" content="Abdallah Elnoty">


<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="eln0ty">
<meta property="og:title" content="Playing with AsyncRAT">
<meta property="og:url" content="https://eln0ty.github.io/malware%20analysis/asyncRAT/">


  <meta property="og:description" content="AsyncRAT is a Remote Access Tool (RAT) designed to remotely monitor and control other computers ">



  <meta property="og:image" content="https://eln0ty.github.io/assets/images/malware-analysis/asyncRAT/logo.jpg">





  <meta property="article:published_time" content="2022-02-16T00:00:00+00:00">





  

  


<link rel="canonical" href="https://eln0ty.github.io/malware%20analysis/asyncRAT/">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": "Abdallah Elnoty",
      "url": "https://eln0ty.github.io/"
    
  }
</script>






<!-- end _includes/seo.html -->


<link href="/feed.xml" type="application/atom+xml" rel="alternate" title="eln0ty Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    <!-- start custom head snippets -->

<!-- insert favicons. use https://realfavicongenerator.net/ -->

<!-- end custom head snippets -->

<!-- favicon -->
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/site_data/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/site_data/favicon-16x16.png">
<meta name="theme-color" content="#ffffff">

  </head>

  <body class="layout--single wide">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="/assets/images/site_data/logo.png" alt=""></a>
        
        <a class="site-title" href="/">
          eln0ty
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/categories/#malware-analysis">Malware Analysis</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/#forensics">Forensics</a>
            </li><li class="masthead__menu-item">
              <a href="/categories">All Categories</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  
  <div class="sidebar sticky">
  


<div itemscope itemtype="https://schema.org/Person">

  
    <div class="author__avatar">
      
        <img src="/assets/images/site_data/avatar.jpg" alt="Abdallah Elnoty" itemprop="image">
      
    </div>
  

  <div class="author__content">
    
      <h3 class="author__name" itemprop="name">Abdallah Elnoty</h3>
    
    
      <div class="author__bio" itemprop="description">
        <p>Malware Analysis &amp; Reverse Engineering</p>

      </div>
    
  </div>

  <div class="author__urls-wrapper">
    <button class="btn btn--inverse">Follow</button>
    <ul class="author__urls social-icons">
      
        <li itemprop="homeLocation" itemscope itemtype="https://schema.org/Place">
          <i class="fas fa-fw fa-map-marker-alt" aria-hidden="true"></i> <span itemprop="name">127.0.0.1</span>
        </li>
      

      
        
          
            <li><a href="mailto:abdallahelnoty@gmail.com" rel="nofollow noopener noreferrer"><i class="fas fa-fw fa-envelope-square" aria-hidden="true"></i><span class="label">Email</span></a></li>
          
        
          
        
          
            <li><a href="https://twitter.com/eln0ty" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i><span class="label">Twitter</span></a></li>
          
        
          
            <li><a href="https://facebook.com/eln0ty" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-facebook-square" aria-hidden="true"></i><span class="label">Facebook</span></a></li>
          
        
          
            <li><a href="https://www.linkedin.com/in/eln0ty" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-linkedin" aria-hidden="true"></i><span class="label">LinkedIn</span></a></li>
          
        
          
            <li><a href="https://github.com/eln0ty" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-github" aria-hidden="true"></i><span class="label">GitHub</span></a></li>
          
        
          
        
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      <!--
  <li>
    <a href="http://link-to-whatever-social-network.com/user/" itemprop="sameAs" rel="nofollow noopener noreferrer">
      <i class="fas fa-fw" aria-hidden="true"></i> Custom Social Profile Link
    </a>
  </li>
-->
    </ul>
  </div>
</div>

  
  </div>



  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="Playing with AsyncRAT">
    <meta itemprop="description" content="AsyncRAT is a Remote Access Tool (RAT) designed to remotely monitor and control other computers through a secure encrypted connection. It is an open source remote administration tool, however, it could also be used maliciously because it provides functionality such as keylogger, remote desktop control, and many other functions that may cause harm to the victim’s computer. In addition, AsyncRAT can be delivered via various methods such as spear-phishing, malvertising, exploit kit and other techniques.">
    <meta itemprop="datePublished" content="2022-02-16T00:00:00+00:00">
    

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">Playing with AsyncRAT
</h1>
          
            <p class="page__meta"><i class="far fa-clock" aria-hidden="true"></i> 




  6 minute read

</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
          <aside class="sidebar__right ">
            <nav class="toc">
              <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> On this page</h4></header>
              <ul class="toc__menu">
  <li><a href="#sample-overview">Sample overview</a></li>
  <li><a href="#initialization">Initialization</a>
    <ul>
      <li><a href="#settings-details">Settings Details</a></li>
      <li><a href="#config-decryption">Config Decryption</a></li>
      <li><a href="#mutex">Mutex</a></li>
      <li><a href="#anti-analysis">Anti Analysis</a></li>
      <li><a href="#install">Install</a></li>
      <li><a href="#bsod">BSOD</a></li>
      <li><a href="#finishing-configurations">Finishing configurations</a></li>
    </ul>
  </li>
  <li><a href="#connection-with-c2">Connection with C2</a></li>
  <li><a href="#server-side-operations">Server side operations</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#iocs">IOCs</a></li>
</ul>

            </nav>
          </aside>
        
        <p>AsyncRAT is a Remote Access Tool (RAT) designed to remotely monitor and control other computers through a secure encrypted connection. It is an open source remote administration tool, however, it could also be used maliciously because it provides functionality such as keylogger, remote desktop control, and many other functions that may cause harm to the victim’s computer. In addition, AsyncRAT can be delivered via various methods such as spear-phishing, malvertising, exploit kit and other techniques.</p>

<p>We will discuss .NET code with <strong>dnSpy</strong> to learn how it works.</p>

<h1 id="sample-overview">Sample overview</h1>

<p>sha256: <code class="language-plaintext highlighter-rouge">8021f8aa674ce3a2ccb2e8f917ebaf5b638607447f0df0e405e837dd2e7a7ccd</code></p>

<p>This sample is packed and I unpacked it automatically with <a href="https://www.unpac.me/results/81742aea-53b2-43ef-be7f-ca66a3197038">unpac.me</a> (online unpacker) and got this.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\unpack.jpg"><img src="/assets\images\malware-analysis\asyncRAT\unpack.jpg" alt="" /></a></p>

<p>This is one sand box process flow</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\flow.jpg"><img src="/assets\images\malware-analysis\asyncRAT\flow.jpg" alt="" /></a></p>

<h1 id="initialization">Initialization</h1>

<p>First, Malware sleeps for 3 seconds. I don’t know why but it’s okay.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\sleep.jpg"><img src="/assets\images\malware-analysis\asyncRAT\sleep.jpg" alt="" /></a></p>

<p><a href="/assets\images\malware-analysis\asyncRAT\delay.jpg"><img src="/assets\images\malware-analysis\asyncRAT\delay.jpg" alt="" /></a></p>

<p>Second, tries to initialize all settings depending on hardcoded configurations.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\init.jpg"><img src="/assets\images\malware-analysis\asyncRAT\init.jpg" alt="" /></a>(/assets\images\malware-analysis\asyncRAT\init.jpg)</p>

<h2 id="settings-details">Settings Details</h2>

<p>Malware decrypts all configurations from <code class="language-plaintext highlighter-rouge">AES256</code> encryption algorithm here.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\initSettings.jpg"><img src="/assets\images\malware-analysis\asyncRAT\initSettings.jpg" alt="" /></a></p>

<p>Then verifies the integrity of these configurations and returns result. If false, exits from process.
You can extract values with using debugger.</p>

<p>Then malware checks if any of these configurations changed using <code class="language-plaintext highlighter-rouge">Serversignature</code> and <code class="language-plaintext highlighter-rouge">ServerCertificate</code> with <code class="language-plaintext highlighter-rouge">VerifyHash</code> function and returns the result. It’s something like a water mark in coding :)</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\integrity.jpg"><img src="/assets\images\malware-analysis\asyncRAT\integrity.jpg" alt="" /></a></p>

<h2 id="config-decryption">Config Decryption</h2>

<p>I’m not an encryption nerd but I will try to explain as I can and we don’t need to understand how it works to continue our analysis but I would love to give some help to learn some useful things. If you don’t care just scroll the whole topic and go to <strong>Mutex creation</strong>.
Let’s start with <code class="language-plaintext highlighter-rouge">Key = ejFjc0p0QWtudENHVTdsakhjTExYbm1KM1RqbTVUMlA=</code>.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\dec_key.jpg"><img src="/assets\images\malware-analysis\asyncRAT\dec_key.jpg" alt="" /></a></p>

<p>It converts <code class="language-plaintext highlighter-rouge">key</code> from Base64 then encoding to <strong>UTF8</strong> so now <code class="language-plaintext highlighter-rouge">Key = z1csJtAkntCGU7ljHcLLXnmJ3Tjm5T2P</code>.</p>

<h3 id="deriving-keys">Deriving keys</h3>

<p>This <a href="https://en.wikipedia.org/wiki/PBKDF2">link</a> gives you a complete definition about this encryption algorithm. The usage of it is to derive a new key in run time from our previous key.</p>

<p>To solve it, we have to focus with its parameters <code class="language-plaintext highlighter-rouge">dec_key = PBKDF2(key, Salt, iterations)</code></p>

<p><a href="/assets\images\malware-analysis\asyncRAT\derive_key.jpg"><img src="/assets\images\malware-analysis\asyncRAT\derive_key.jpg" alt="" /></a></p>

<h3 id="aes256">AES256</h3>

<p>Then use this dec_key with aes256 algorithm to decrypt all configurations.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\decrypt_function.jpg"><img src="/assets\images\malware-analysis\asyncRAT\decrypt_function.jpg" alt="" /></a></p>

<p>This method divides the given config, like <code class="language-plaintext highlighter-rouge">ports</code> into 3 sections:</p>

<p>Data[:32] 	-&gt; 	HMAC-SHA256 value</p>

<p>Data[32:48] -&gt; 	IV</p>

<p>Data[48:]	 -&gt;	 Encrypted bytes</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\MetaData.jpg"><img src="/assets\images\malware-analysis\asyncRAT\MetaData.jpg" alt="" /></a></p>

<h3 id="script">Script</h3>

<p>This python script automates all decoding components.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1) use PBKDF2 to derive the decryption key and initialization key used for sha
# 2) calculate sha256 of data[32:] and compare it to the embedded sha256 hash (data[:32]) (We don't care here)
# 3) iv = data[32:48]
# 4) aes_dec(key, iv, data[48:])
</span>
<span class="c1"># pip install backports.pbkdf2
# pip install malduck
</span>
<span class="kn">from</span> <span class="nn">backports.pbkdf2</span> <span class="kn">import</span> <span class="n">pbkdf2_hmac</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="nn">malduck</span> <span class="kn">import</span> <span class="n">aes</span><span class="p">,</span> <span class="n">unpad</span>

<span class="n">salt</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\xbf\xeb\x1e\x56\xfb\xcd\x97\x3b\xb2\x19\x02\x24\x30\xa5\x78\x43\x00\x3d\x56\x44\xd2\x1e\x62\xb9\xd4\xf1\x80\xe7\xe6\xc3\x39\x41</span><span class="s">"</span>
<span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"ejFjc0p0QWtudENHVTdsakhjTExYbm1KM1RqbTVUMlA="</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"Ports"</span><span class="p">:</span> <span class="s">"UGCInR8TOWCBkQI6fVXrRZ4Yj+b4OvMqcvbx3n2pTLIpcwWtvmX+PX6uN7uIsx65cuUHbVopkDdPuRbLHd6jfg=="</span><span class="p">,</span>
    <span class="s">"Hosts"</span><span class="p">:</span> <span class="s">"k/33hCqQ1vnvaz3j8VvjdZRXF/poiYruJfX1WbFuFhwXYuNriBFrqyi0fQfk4xN0LS85PC6oOtCuLYarjJSnLsoDQGhIWf6+CTyT0wNgZOg="</span><span class="p">,</span>
    <span class="s">"Version"</span><span class="p">:</span> <span class="s">"WG0EkFzynw3wCeMtt128RLUZgT6BSNw7pqLDg9XUMRmpx5WpQw1ZN64GLHYrP/h47iM2KImVVeY0wAT1RqMVVg=="</span><span class="p">,</span>
    <span class="s">"Install"</span><span class="p">:</span> <span class="s">"3/TL2kdA5ptdHUR1gfeiPmkurKrJsw3BjJ7njALFi+ouT64Tx5oE1P7U7NktNpWfBZVmmjxeR/xSyR14NdEPcw=="</span><span class="p">,</span>
    <span class="s">"MTX"</span><span class="p">:</span> <span class="s">"7vyshlirEg6SwhKPRttI85LoRXYLoFWLzaDM4h57MqKcy9iihijskYVbiDhhZu5qzqRxMBX5DpJ6dAfancdQ8cqHklNaopJNiz3/ZgGt2BI="</span><span class="p">,</span>
    <span class="s">"Anti"</span><span class="p">:</span> <span class="s">"fvHzWJyCKwkBHk/dOoyPPC5w+F3GyNg0t7NAj8VXjA2b0ntbSqH11xvQACf2jGX7VSLAd6BjykqqQIJAb98Veg=="</span><span class="p">,</span>
    <span class="s">"Pastebin"</span><span class="p">:</span> <span class="s">"B52OeJUAfsMHW3Ea2wBUni41OckwUyCtHz3yHsDSn9XjE4U+ncvS0Kmik61ZnDWTm+oNBPoQaDb5PHqfInPGXQ=="</span><span class="p">,</span>
    <span class="s">"BDOS"</span><span class="p">:</span> <span class="s">"++zHWqz0o5rkma5tjGrmNMSXzvLTZVOFmlOz4lhTPTPejjFLjqH/rhhciAYgm+Mq5bOazkPYeFGYC8q5I47wVA=="</span><span class="p">,</span>
    <span class="s">"Group"</span><span class="p">:</span> <span class="s">"fwbqIWwfsG6vrljdbLznhYHm5g+qylXiJVparVYZ5s61hXK84/sQMNn6fTH09rZ+MeWdbYV1AhcKtEpQzJ6I5g=="</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="n">dec_key</span> <span class="o">=</span> <span class="n">pbkdf2_hmac</span><span class="p">(</span><span class="s">"sha1"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="mi">50000</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>

<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="n">iv</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">32</span><span class="p">:</span><span class="mi">48</span><span class="p">]</span>
    <span class="n">decrypted</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">aes</span><span class="p">.</span><span class="n">cbc</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">dec_key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">48</span><span class="p">:]))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">decrypted</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)))</span>
</code></pre></div></div>

<p>After running the script, we have a clean config.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">key</span> 		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"z1csJtAkntCGU7ljHcLLXnmJ3Tjm5T2P"</span>
<span class="nt">ports</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"6606,7707,8808"</span>
<span class="nt">Host</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"jeazerlog.duckdns.org"</span>
<span class="nt">version</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"0.5.7B"</span>
<span class="nt">Install</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"false"</span>
<span class="nt">MTX</span>         	<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"AsyncMutex_6SI8OkPnk"</span>
<span class="nt">Pastebin</span>	<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"null"</span>
<span class="nt">Anti</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"false"</span>
<span class="nt">BDOS</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"fasle"</span>
<span class="nt">Group</span>		<span class="o">&lt;</span><span class="nt">-</span>	<span class="s1">"gta"</span>
</code></pre></div></div>

<p>I want to note that the malware is also extracted <strong>Hwid</strong> while execution, and I got its value using the debugger
<code class="language-plaintext highlighter-rouge">Hwid = 1021C7B642607CE65116</code></p>

<h2 id="mutex">Mutex</h2>

<p>The bad boy tries to make Mutex handle with MTX value which extracted from Settings to prevent the duplication of the process
<code class="language-plaintext highlighter-rouge">MTX = "AsyncMutex_6SI8OkPnk"</code> and tells windows “end the duplicated process”.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\MTX.jpg"><img src="/assets\images\malware-analysis\asyncRAT\MTX.jpg" alt="" /></a></p>

<h2 id="anti-analysis">Anti Analysis</h2>

<p>We are lucky because malware doesn’t use any anti-analysis technique according to <code class="language-plaintext highlighter-rouge">Anti = fasle</code> in Settings class.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\anti.jpg"><img src="/assets\images\malware-analysis\asyncRAT\anti.jpg" alt="" /></a></p>

<p>but I will explain what if a malware developer chooses a difficult path with analysis <code class="language-plaintext highlighter-rouge">Anti = true</code>.
The malware developer would have used five methods to make it difficult for the malware analyst to use.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\anti_tech.jpg"><img src="/assets\images\malware-analysis\asyncRAT\anti_tech.jpg" alt="" /></a></p>

<ol>
  <li>
    <p>VM detection: malware searching in <strong>Manufacture Model</strong> for keywords like <code class="language-plaintext highlighter-rouge">VIRTUAL</code> or <code class="language-plaintext highlighter-rouge">vmware</code> or <code class="language-plaintext highlighter-rouge">VirtualBox</code>.</p>

    <p><a href="/assets\images\malware-analysis\asyncRAT\vm_detec.jpg"><img src="/assets\images\malware-analysis\asyncRAT\vm_detec.jpg" alt="" /></a></p>
  </li>
  <li>
    <p>Debugger detection: Check if the debugger is present to stop the process.</p>

    <p><a href="/assets\images\malware-analysis\asyncRAT\debug_detec.jpg"><img src="/assets\images\malware-analysis\asyncRAT\debug_detec.jpg" alt="" /></a></p>
  </li>
  <li>
    <p>SandBox detection:  Tring to get a handle from <strong>SbieDll.dll</strong> that belongs to every sandbox.</p>

    <p><a href="/assets\images\malware-analysis\asyncRAT\sandboxie.jpg"><img src="/assets\images\malware-analysis\asyncRAT\sandboxie.jpg" alt="" /></a></p>
  </li>
  <li>
    <p>Small Disk detection: Most secure labs for malware analyzers such as virtual machines contain a small disk.</p>

    <p><a href="/assets\images\malware-analysis\asyncRAT\smalldisk.jpg"><img src="/assets\images\malware-analysis\asyncRAT\smalldisk.jpg" alt="" /></a></p>
  </li>
  <li>
    <p>XP windows detection: You know, Nobody uses XP today except for malware analysis or something.</p>

    <p><a href="/assets\images\malware-analysis\asyncRAT\XP.jpg"><img src="/assets\images\malware-analysis\asyncRAT\XP.jpg" alt="" /></a></p>
  </li>
</ol>

<p>Let’s move on to the next step in our main function.</p>

<h2 id="install">Install</h2>

<p>Once again, we are in luck, the malware author decided not to use any persistence mechanism according to <code class="language-plaintext highlighter-rouge">Install = fasle</code>.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\install.jpg"><img src="/assets\images\malware-analysis\asyncRAT\install.jpg" alt="" /></a></p>

<p>But I will explain the hard path again, What if <code class="language-plaintext highlighter-rouge">Install = true</code> in Settings? Let’s go…</p>

<p>The first thing is that the malware checks the path it is running on, and if it is not the same as the path in the settings, the running process is erased.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\check_path.jpg"><img src="/assets\images\malware-analysis\asyncRAT\check_path.jpg" alt="" /></a></p>

<p>The malware creates a <code class="language-plaintext highlighter-rouge">.bat</code> file in the <code class="language-plaintext highlighter-rouge">%temp%</code> to run a new process, created in the hard coded path <code class="language-plaintext highlighter-rouge">%AppData%</code>, then deletes itself.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\create_file.jpg"><img src="/assets\images\malware-analysis\asyncRAT\create_file.jpg" alt="" /></a></p>

<h3 id="persistence">Persistence</h3>

<p>The malware checks if a process has administrator privilege to perform a schedule task every time a user logs on to run or has a normal user privilege to modify the <code class="language-plaintext highlighter-rouge">Software\Microsoft\Windows\CurrentVersion\Run</code> subkey to be added in the list of startup processes.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\presistance.jpg"><img src="/assets\images\malware-analysis\asyncRAT\presistance.jpg" alt="" /></a></p>

<h2 id="bsod">BSOD</h2>

<p>Malware passes this step in the main function because <code class="language-plaintext highlighter-rouge">BDOS = false</code>.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\check_set.jpg"><img src="/assets\images\malware-analysis\asyncRAT\check_set.jpg" alt="" /></a></p>

<p>otherwise it would have verified that the user is an administrator and the operating system has been switched to the critical state.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\crit.jpg"><img src="/assets\images\malware-analysis\asyncRAT\crit.jpg" alt="" /></a></p>

<p>To learn more about <code class="language-plaintext highlighter-rouge">RtlSetProcessIsCritical</code> and what its risks are, this <a href="https://www.codeproject.com/Articles/43405/Protecting-Your-Process-with-RtlSetProcessIsCriti">link</a> explains <u>in-depth</u>.</p>

<h2 id="finishing-configurations">Finishing configurations</h2>

<p>So far, the configuration has been done and the malware will run almost forever.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\preventSleep.jpg"><img src="/assets\images\malware-analysis\asyncRAT\preventSleep.jpg" alt="" /></a></p>

<p>The next step will stablish the connection with C2 server.</p>

<h1 id="connection-with-c2">Connection with C2</h1>

<p>I won’t explain the code too much at this level of analysis because it’s a development problem, I’m just explaining what’s going on.</p>

<p>The malware creates an infinite loop to connect to C2 and the first thing it does is check if it’s already connected or not, then sleeps for 5 seconds to free up resources so windows won’t crash.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\loop.jpg"><img src="/assets\images\malware-analysis\asyncRAT\loop.jpg" alt="" /></a></p>

<p>I’ll explain a little bit what happens when malware disconnect.</p>

<p>First, It calls a Reconnect function to dispose any packets between each other.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\reconnect.jpg"><img src="/assets\images\malware-analysis\asyncRAT\reconnect.jpg" alt="" /></a></p>

<p>Then it initializes a new tcp client connection through the TLS protocol for secure connection.
You can check the code by yourself. -_^</p>

<h1 id="server-side-operations">Server side operations</h1>

<p>When the victim runs the malware in any way, whether by phishing mail or otherwise persuaded by another method, it appears to the hacker that he has run the program, and here the victim is completely controlled in a terrifying way, some of which are shown in below.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\server_side.jpg"><img src="/assets\images\malware-analysis\asyncRAT\server_side.jpg" alt="" /></a></p>

<h1 id="conclusion">Conclusion</h1>

<p>Malware declares all settings <strong>AES256</strong> then trying to connect victim machine to C2 server. From this point, all commands come from the other end of the world through the C2 server which were not embedded in the code.</p>

<p>Finally, I hope you had fun and learned something new. See you in another analysis report.</p>

<p><a href="/assets\images\malware-analysis\asyncRAT\CU.jpg"><img src="/assets\images\malware-analysis\asyncRAT\CU.jpg" alt="" /></a></p>

<h1 id="iocs">IOCs</h1>

<h4 id="hashes">Hashes</h4>

<p>Packed: 8021f8aa674ce3a2ccb2e8f917ebaf5b638607447f0df0e405e837dd2e7a7ccd</p>

<p>Unpacked: bc61724d50bff04833ef13ae13445cd43a660acf9d085a9418b6f48201524329</p>

<h4 id="c2s">C2s</h4>

<p>jeazerlog.duckdns.org:6606</p>

<p>jeazerlog.duckdns.org:7707</p>

<p>jeazerlog.duckdns.org:8808</p>

<h4 id="mutexs">MUTEXs</h4>

<p>AsyncMutex_6SI8OkPnk</p>

<h4 id="regs">REGs</h4>

<p>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p>


        
      </section>

      <footer class="page__meta">
        
        


  


  
  
  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="/categories/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware Analysis</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> Updated:</strong> <time datetime="2022-02-16T00:00:00+00:00">February 16, 2022</time></p>
        
      </footer>

      

      
  <nav class="pagination">
    
      <a href="/malware%20analysis/vidar/" class="pagination--pager" title="Deep Analysis of Vidar Information Stealer
">Previous</a>
    
    
      <a href="/forensics/Defcon-DFIR-CTF-Write-up/" class="pagination--pager" title="Digging into memory
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    
      
        
      
        
      
        
      
        
      
        
      
        
      
    

    <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2022 Abdallah Elnoty. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>
  <script src="https://kit.fontawesome.com/4eee35f757.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>







  </body>
</html>
