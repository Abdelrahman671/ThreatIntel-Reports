<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Kernel ETW is the best ETW — Elastic Security Labs</title><meta name="description" content="This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections."/><meta property="og:title" content="Kernel ETW is the best ETW — Elastic Security Labs"/><meta property="og:description" content="This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/kernel-etw-best-etw/kernel-etw-best-etw.jpg?4b91ef9ceaf91bb521ca9430cf62cd04"/><meta property="og:image:alt" content="This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/kernel-etw-best-etw"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Kernel ETW is the best ETW — Elastic Security Labs"/><meta name="twitter:description" content="This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/kernel-etw-best-etw/kernel-etw-best-etw.jpg?4b91ef9ceaf91bb521ca9430cf62cd04"/><meta name="twitter:image:alt" content="This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections."/><link rel="canonical" href="https://www.elastic.co/security-labs/kernel-etw-best-etw"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/kernel-etw-best-etw"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/kernel-etw-best-etw"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-09-13T00:00:00.000Z">13 September 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/john-uhlmann">John Uhlmann</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Kernel ETW is the best&nbsp;ETW</span></h1><p class="text-zinc-200 text-base md:text-xl">This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>14 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/perspectives">Perspectives</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Kernel ETW is the best ETW" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkernel-etw-best-etw%2Fkernel-etw-best-etw.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>A critical feature of secure-by-design software is the generation of audit logs when privileged operations are performed. These native audit logs can include details of the internal software state, which are impractical for third-party security vendors to bolt on after the fact.</p>
<p>Most Windows components generate logs using <a href="https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing">Event Tracing for Windows</a> (ETW). These events expose some of Windows&#x27;s inner workings, and there are scenarios when endpoint security products benefit from subscribing to them. For security purposes, though, not all ETW providers are created equal.</p>
<p>The first consideration is typically the reliability of the event provider itself - in particular, where the logging happens. Is it within the client process and <a href="https://twitter.com/dez_/status/938074904666271744">trivially vulnerable to ETW tampering</a>? Or is it perhaps slightly safer over in an RPC server process? Ideally, though, the telemetry will come from the <a href="https://www.elastic.co/security-labs/doubling-down-etw-callstacks">kernel</a>. Given the user-to-kernel security boundary, this provides stronger anti-tamper guarantees over in-process telemetry. This is Microsoft’s recommended approach. Like Elastic Endpoint, Microsoft Defender for Endpoint also uses kernel ETW in preference to fragile user-mode <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll</code> hooks.</p>
<p>For example, an adversary might be able to easily avoid an in-process user-mode hook on <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll!NtProtectVirtualMemory</code>, but bypassing a kernel <a href="https://github.com/search?type=code&amp;q=repo:jdu2600/Windows10EtwEvents+PROTECTVM">PROTECTVM</a> ETW event is significantly harder. Or, at least, <a href="https://www.elastic.co/security-labs/forget-vulnerable-drivers-admin-is-all-you-need">it should be</a>.</p>
<p></p>
<p>The Security Event Log is effectively just persistent storage for the events from the Microsoft-Windows-Security-Auditing ETW provider. Surprisingly, <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4688">Security Event 4688</a> for process creation is not a kernel event. The kernel dispatches the data to the Local Security Authority (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">lsass.exe</code>) service, emitting an ETW event for the Event Log to consume. So, the data could be tampered with from within that server process. Contrast this with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ProcessStart</code> event from the Microsoft-Windows-Kernel-Process provider, which is logged directly by the kernel and requires kernel-level privileges to interfere with.</p>
<p>The second consideration is then the reliability of the information being logged. You might trust the event source, but what if it is just <a href="https://www.elastic.co/security-labs/effective-parenting-detecting-lrpc-based-parent-pid-spoofing">blindly logging</a> <a href="https://labs.withsecure.com/publications/spoofing-call-stacks-to-confuse-edrs">client-supplied data</a> that is extrinsic to the event being logged?</p>
<p>In this article, we’ll focus on kernel ETW events. These are typically the most security-relevant because they are difficult to bypass and often pertain to privileged actions being performed on behalf of a client thread.</p>
<p>When Microsoft introduced Kernel Patch Protection, security vendors were significantly constrained in their ability to monitor the kernel. Given the limited number of kernel extension points provided by Microsoft, they were increasingly compelled to rely on asynchronous ETW events for after-the-fact visibility of kernel actions performed on behalf of malware.</p>
<p>Given this dependency, the public documentation of Windows kernel telemetry sources is unfortunately somewhat sparse.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="kernel-etw-events" class="absolute -top-32"></span>Kernel ETW Events</h2>
<p>There are currently <a href="https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing#types-of-providers">four types of ETW providers</a> that we need to consider.</p>
<p>Firstly, there are legacy and modern variants of “event provider”:</p>
<ul>
<li>legacy (<a href="https://learn.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-">mof</a>-based) event providers</li>
<li>modern (<a href="https://learn.microsoft.com/en-us/windows/win32/wes/writing-an-instrumentation-manifest">manifest</a>-based) event providers</li>
</ul>
<p>And then there are legacy and modern variants of “trace provider”:</p>
<ul>
<li>legacy Windows software trace preprocessor (<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/wpp-software-tracing">WPP</a>) trace providers</li>
<li>modern <a href="https://learn.microsoft.com/en-us/windows/win32/tracelogging/trace-logging-about">TraceLogging</a> trace providers</li>
</ul>
<p>The “event” versus “trace” distinction is mostly semantic. Event providers are typically registered with the operating system ahead of time, and you can inspect the available telemetry metadata. These are typically used by system administrators for troubleshooting purposes and are often semi-documented. But when something goes really, <em>really</em> wrong there are (hidden) trace providers. These are typically used only by the original software authors for advanced troubleshooting and are undocumented.</p>
<p>In practice, each uses a slightly different format file to describe and register its events and this introduces minor differences in how the events are logged - and, more importantly, how the potential events can be enumerated.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="modern-kernel-event-providers" class="absolute -top-32"></span>Modern Kernel Event Providers</h3>
<p>The modern kernel ETW providers aren’t strictly documented. However, registered event details can be queried from the operating system via the <a href="https://learn.microsoft.com/en-us/windows/win32/api/tdh/">Trace Data Helper API</a>. Microsoft’s <a href="https://github.com/microsoft/perfview">PerfView</a> tool uses these APIs to reconstruct the provider’s <a href="https://github.com/microsoft/perfview/blob/319be737115e01f77c42804cd1d41755211347f3/src/TraceEvent/RegisteredTraceEventParser.cs#L88">registration manifest</a>, and Pavel Yosifovich’s <a href="https://github.com/zodiacon/EtwExplorer">EtwExplorer</a> then wraps these manifests in a simple GUI. You can use these <a href="https://github.com/jdu2600/Windows10EtwEvents/tree/master/manifest">tab-separated value files</a> of registered manifests from successive Windows versions. A single line per event is very useful for grepping, though others have since published the <a href="https://github.com/nasbench/EVTX-ETW-Resources/tree/main/ETWProvidersManifests">raw XML manifests</a>.</p>
<p>These aren’t all of the possible Windows ETW events, however. They are only the ones registered with the operating system by default. For example, the ETW events for many <a href="https://github.com/nasbench/EVTX-ETW-Resources/issues/52">server roles aren’t registered</a> until that feature is enabled.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="legacy-kernel-event-providers" class="absolute -top-32"></span>Legacy Kernel Event Providers</h3>
<p>The <a href="https://docs.microsoft.com/en-us/windows/win32/etw/msnt-systemtrace">legacy kernel events</a> are documented by Microsoft. Mostly.</p>
<p>Legacy providers also exist within the operating system as WMI <a href="https://learn.microsoft.com/en-us/windows/win32/etw/eventtrace">EventTrace</a> classes. Providers are the root classes, groups are the children, and events are the grandchildren.</p>
<p></p>
<p>To search the legacy events in the same way as modern eventTo search legacy events in the same way as modern events, these classes were parsed, and the original MOF (mostly) reconstructed. This <a href="https://github.com/zodiacon/EtwExplorer/pull/3">MOF support was added to EtwExplorer,</a> and <a href="https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof">tab-separated value summaries</a> of the legacy events were these classes were parsed and the original MOF (mostly) reconstructed. This <a href="https://github.com/zodiacon/EtwExplorer/pull/3">MOF support was added to EtwExplorer</a> and <a href="https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof">tab-separated value summaries</a> of the legacy events published.</p>
<p></p>
<p>The fully reconstructed Windows Kernel Trace MOF is <a href="https://gist.github.com/jdu2600/a2b03e4e9cf19282a41ad766388c9856">here</a> (or in a tabular format <a href="https://github.com/jdu2600/Windows10EtwEvents/blob/master/mof/Windows_Kernel_Trace.tsv">here</a>).</p>
<p>Of the 340 registered legacy events, only 116 were documented. Typically, each legacy event needs to be enabled via a specific flag, but these weren’t documented either. There was a clue in the documentation for the kernel <a href="https://learn.microsoft.com/en-us/windows/win32/etw/obtrace">Object Manager Trace</a> events. It mentioned <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PERF_OB_HANDLE</code>, a constant that is not defined in the headers in the latest SDK. Luckily, <a href="https://geoffchappell.com/studies/windows/km/ntoskrnl/api/etw/tracesup/perfinfo_groupmask.htm">Geoff Chappell</a> and the Windows 10 1511 WDK came to the rescue. This information was used to add support for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PERFINFO_GROUPMASK</code> kernel trace flags to Microsoft’s <a href="https://github.com/microsoft/krabsetw/blob/master/examples/NativeExamples/kernel_trace_002.cpp">KrabsETW</a> library. It also turned out that the Object Trace documentation was wrong. That non-public constant can only be used with an undocumented API extension. Fortunately, public Microsoft projects such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PerfView</code> often provide <a href="https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/ETWKernelControl.cs#L464-L469">examples of how to use undocumented APIs</a>.</p>
<p>With both manifests and MOFs published on GitHub, most kernel events can now be found with <a href="https://github.com/search?type=code&amp;q=repo:jdu2600/Windows10EtwEvents+kernel">this query</a>.</p>
<p>Interestingly, Microsoft often <a href="https://en.wikipedia.org/wiki/Security_through_obscurity">obfuscates</a> the names of security-relevant events, so searching for events with a generic name prefix such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">task_</code> yields some <a href="https://github.com/search?type=code&amp;q=repo:jdu2600/Windows10EtwEvents+kernel+task_">interesting results</a>.</p>
<p>Sometimes the keyword hints to the event’s purpose. For example, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">task_014</code> in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft-Windows-Kernel-General</code> is enabled with the keyword <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KERNEL_GENERAL_SECURITY_ACCESSCHECK.</code></p>
<p>And thankfully, the parameters are almost always well-named. We might guess that <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">task_05</code> in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft-Windows-Kernel-Audit-API-Calls</code> is related to <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">OpenProcess</a> since it logs fields named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TargetProcessId</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DesiredAccess</code>.</p>
<p><a href="https://github.com/search?type=code&amp;q=repo:jdu2600/Windows10EtwEvents+kernel+processstartkey">Another useful query</a> is to search for events with an explicit <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ProcessStartKey</code> field. ETW events can be <a href="https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-enable_trace_parameters">configured</a> to include this field for the logging process, and any event that includes this information for another process is often security relevant.</p>
<p>If you had a specific API in mind, you might query for its name or its parameters. For example, if you want Named Pipe events, you might use <a href="https://github.com/search?type=code&amp;q=repo:jdu2600/Windows10EtwEvents+kernel+namedpipe">this query</a>.</p>
<p>In this instance, though, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft-Windows-SEC</code> belongs to the built-in Microsoft Security drivers that Microsoft Defender for Endpoint (MDE) utilizes. This provider is only officially available to MDE, though <a href="https://www.youtube.com/watch?v=tuoA3KGKf7o">Sebastian Feldmann and Philipp Schmied</a> have demonstrated how to start a session using an <a href="https://learn.microsoft.com/en-us/windows/win32/etw/configuring-and-starting-an-autologger-session">AutoLogger</a> and subscribe to that session’s events. This is only currently useful for MDE users as otherwise, the driver is not configured to emit events.</p>
<p>But what about trace providers?</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="modern-kernel-trace-providers" class="absolute -top-32"></span>Modern Kernel Trace Providers</h3>
<p>TraceLogging metadata is stored as an opaque blob within the logging binary. Thankfully this format has been reversed by <a href="https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7">Matt Graeber</a>. We can use Matt’s script to dump all TraceLogging metadata for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntoskrnl.exe</code>. A sample dump of Windows 11 TraceLogging metadata is <a href="https://gist.github.com/jdu2600/288475bc43ea68636c28cb25ddeb934f">here</a>.</p>
<p>Unfortunately, the metadata structure alone doesn’t retain the correlation between providers and events.  There are interesting provider names, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft.Windows.Kernel.Security</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AttackSurfaceMonitor</code>, but it’s not yet clear from our metadata dump which events belong to these providers.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="legacy-kernel-trace-providers" class="absolute -top-32"></span>Legacy Kernel Trace Providers</h3>
<p>WPP metadata is stored within symbols files (PDBs).  Microsoft includes this information in the <a href="https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-to-include-and-view-wpp-trace-messages-in-a-driver-8217-s/ba-p/270778">public symbols for some, but not all, drivers</a>.  The kernel itself, however, does not produce any WPP events. Instead, the legacy Windows Kernel Trace event provider can be passed undocumented flags to enable the legacy “trace” events usually only available to Microsoft kernel developers.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Provider</th><th>Documentation</th><th>Event Metadata</th></tr></thead><tbody><tr><td>Modern Event Providers</td><td>None</td><td><a href="https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/RegisteredTraceEventParser.cs#L81-L529">Registered XML manifests</a></td></tr><tr><td>Legacy Event Providers</td><td>Partial</td><td><a href="https://learn.microsoft.com/en-us/windows/win32/etw/retrieving-event-data-using-mof">EventTrace WMI objects</a></td></tr><tr><td>Modern Trace Providers</td><td>None</td><td><a href="https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658">Undocumented blob in binary</a></td></tr><tr><td>Legacy Trace Providers</td><td>None</td><td><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/trace-message-format-file">Undocumented blob in Symbols</a></td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="next-steps" class="absolute -top-32"></span>Next Steps</h2>
<p>We now have kernel event metadata for each of the four flavours of ETW provider, but a list of ETW events is just our starting point. Knowing the provider and event keyword may not be enough to generate the events we expect. Sometimes, an additional configuration registry key or API call is required. More often, though, we just need to understand the exact conditions under which the event is logged.</p>
<p>Knowing exactly where and what is being logged is critical to truly understanding your telemetry and its limitations. And, thanks to decompilers becoming readily available, we have the option of some just-enough-reversing available to us. In IDA we call this “press F5”. Ghidra is the open-source alternative and it supports scripting … with Java.</p>
<p>For kernel ETW, we are particularly interested in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwWrite</code> calls that are reachable from system calls. We want as much of the call site parameter information as possible, including any associated public symbol information. This meant that we needed to walk the call graph but also attempt to resolve the possible values for particular parameters.</p>
<p></p>
<p></p>
<p>The necessary parameters were the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RegHandle</code> and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EventDescriptor</code>.  The former is an opaque handle for the provider, and the latter provides event-specific information, such as the event id and its associated keywords.  An ETW keyword is an identifier used to enable a set of events.</p>
<p>Even better, these event descriptors were typically stored in a global constant with a public symbol.</p>
<p></p>
<p>We had sufficient event metadata but still needed to resolve the opaque provider handle assigned at runtime back to the metadata about the provider. For this, we also needed the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwRegister</code> calls.</p>
<p></p>
<p></p>
<p>The typical pattern for kernel modern event providers was to store the constant provider GUID and the runtime handle in globals with public symbols.</p>
<p>Another pattern encountered was calls to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwRegister</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwEwrite</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwUnregister</code>, all in the same function. In this case, we took advantage of the locality to find the provider GUID for the event.</p>
<p>Modern TraceLogging providers, however, did not have associated per-provider public symbols to provide a hint of each provider’s purpose. However, Matt Graeber had <a href="https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7">reversed the TraceLogging metadata</a> format and documented that the provider name is stored at a <a href="https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658#file-tlgmetadataparser-psm1-L461-L473">fixed offset</a> from the provider GUID. Having the exact provider name is even better than just the public symbol we recovered for modern events.</p>
<p></p>
<p>This just left the legacy providers. They didn’t seem to have either public symbols or metadata blobs.  Some constants are passed to an undocumented function named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwTraceKernelEvent</code> which wraps the eventual ETW write call.</p>
<p></p>
<p>Those constants are present in the Windows 10 1511 WDK headers (and the <a href="https://github.com/winsiderss/systeminformer/blob/7ad69bf13d31892a89be7230bdbd47ffde024a2b/phnt/include/ntwmi.h#L725">System Informer</a> headers), so we could label these events with the constant names.</p>
<p></p>
<p>This script has been recently updated for Ghidra 11, along with improved support for TraceLogging and Legacy events. You can now find it on GitHub here - <a href="https://github.com/jdu2600/API-To-ETW">https://github.com/jdu2600/API-To-ETW</a></p>
<p>Sample output for the Windows 11 kernel is <a href="https://github.com/jdu2600/API-To-ETW/blob/main/ntoskrnl.exe.csv">here</a>.</p>
<p>Our previously anonymous <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft-Windows-Kernel-Audit-API-Calls</code> events are quickly unmasked by this script.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Id</th><th>EVENT_DESCRIPTOR Symbol</th><th>Function</th></tr></thead><tbody><tr><td>1</td><td>KERNEL_AUDIT_API_PSSETLOADIMAGENOTIFYROUTINE</td><td>PsSetLoadImageNotifyRoutineEx</td></tr><tr><td>2</td><td>KERNEL_AUDIT_API_TERMINATEPROCESS</td><td>NtTerminateProcess</td></tr><tr><td>3</td><td>KERNEL_AUDIT_API_CREATESYMBOLICLINKOBJECT</td><td>ObCreateSymbolicLink</td></tr><tr><td>4</td><td>KERNEL_AUDIT_API_SETCONTEXTTHREAD</td><td>NtSetContextThread</td></tr><tr><td>5</td><td>KERNEL_AUDIT_API_OPENPROCESS</td><td>PsOpenProcess</td></tr><tr><td>6</td><td>KERNEL_AUDIT_API_OPENTHREAD</td><td>PsOpenThread</td></tr><tr><td>7</td><td>KERNEL_AUDIT_API_IOREGISTERLASTCHANCESHUTDOWNNOTIFICATION</td><td>IoRegisterLastChanceShutdownNotification</td></tr><tr><td>8</td><td>KERNEL_AUDIT_API_IOREGISTERSHUTDOWNNOTIFICATION</td><td>IoRegisterShutdownNotification</td></tr></tbody></table></div>
<p>Symbol and containing function for Microsoft-Windows-Kernel-Audit-API-Calls events</p>
<p>With the call path and parameter information recovered by the script, we can also see that the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SECURITY_ACCESSCHECK</code> event from earlier is associated with the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-seaccesscheck">SeAccessCheck</a> kernel API, but only logged within a function named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SeLogAccessFailure</code>. Only logging failure conditions is a very common occurrence with ETW events. For troubleshooting purposes, the original ETW use case, these are typically the most useful and the implementation in most components reflects this. Unfortunately, for security purposes, the inverse is often true. The successful operation logs are usually more useful for finding malicious activity. So, the value of some of these legacy events is often low.</p>
<p>Modern <a href="https://www.cisa.gov/resources-tools/resources/secure-by-design">Secure by Design</a> practice is to audit log both success and failure for security relevant activities and Microsoft continues to add new security-relevant ETW events that do this. For example, the preview build of Windows 11 24H2 includes some <a href="https://windows-internals.com/an-end-to-kaslr-bypasses/">interesting new ETW events</a> in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft-Windows-Threat-Intelligence</code> provider. Hopefully, these will be documented for security vendors ahead of its release.</p>
<p>Running this decompiler script across interesting Windows drivers and service DLLs is left as an exercise to the reader.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/kernel-etw-best-etw#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/kernel-etw-best-etw#kernel-etw-events"><span>Kernel ETW&nbsp;Events</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/kernel-etw-best-etw#modern-kernel-event-providers"><span>Modern Kernel Event&nbsp;Providers</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/kernel-etw-best-etw#legacy-kernel-event-providers"><span>Legacy Kernel Event&nbsp;Providers</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/kernel-etw-best-etw#modern-kernel-trace-providers"><span>Modern Kernel Trace&nbsp;Providers</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/kernel-etw-best-etw#legacy-kernel-trace-providers"><span>Legacy Kernel Trace&nbsp;Providers</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/kernel-etw-best-etw#next-steps"><span>Next&nbsp;Steps</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Kernel ETW is the best ETW&amp;url=https://www.elastic.co/security-labs/kernel-etw-best-etw" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/kernel-etw-best-etw" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/kernel-etw-best-etw&amp;title=Kernel ETW is the best ETW" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/kernel-etw-best-etw&amp;title=Kernel ETW is the best ETW" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Kernel ETW is the best ETW","slug":"kernel-etw-best-etw","date":"2024-09-13","description":"This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections.","image":"kernel-etw-best-etw.jpg","tags":["kernel","ETW","Windows","OS"],"body":{"raw":"\n## Preamble\n\nA critical feature of secure-by-design software is the generation of audit logs when privileged operations are performed. These native audit logs can include details of the internal software state, which are impractical for third-party security vendors to bolt on after the fact.\n\nMost Windows components generate logs using [Event Tracing for Windows](https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing) (ETW). These events expose some of Windows's inner workings, and there are scenarios when endpoint security products benefit from subscribing to them. For security purposes, though, not all ETW providers are created equal.\n\nThe first consideration is typically the reliability of the event provider itself - in particular, where the logging happens. Is it within the client process and [trivially vulnerable to ETW tampering](https://twitter.com/dez_/status/938074904666271744)? Or is it perhaps slightly safer over in an RPC server process? Ideally, though, the telemetry will come from the [kernel](https://www.elastic.co/security-labs/doubling-down-etw-callstacks). Given the user-to-kernel security boundary, this provides stronger anti-tamper guarantees over in-process telemetry. This is Microsoft’s recommended approach. Like Elastic Endpoint, Microsoft Defender for Endpoint also uses kernel ETW in preference to fragile user-mode `ntdll` hooks.\n\nFor example, an adversary might be able to easily avoid an in-process user-mode hook on `ntdll!NtProtectVirtualMemory`, but bypassing a kernel [PROTECTVM](https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+PROTECTVM) ETW event is significantly harder. Or, at least, [it should be](https://www.elastic.co/security-labs/forget-vulnerable-drivers-admin-is-all-you-need).\n\n![Sample ETW providers and where they are logged](/assets/images/kernel-etw-best-etw/image3.png \"Sample ETW providers and where they are logged\")\n\nThe Security Event Log is effectively just persistent storage for the events from the Microsoft-Windows-Security-Auditing ETW provider. Surprisingly, [Security Event 4688](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4688) for process creation is not a kernel event. The kernel dispatches the data to the Local Security Authority (`lsass.exe`) service, emitting an ETW event for the Event Log to consume. So, the data could be tampered with from within that server process. Contrast this with the `ProcessStart` event from the Microsoft-Windows-Kernel-Process provider, which is logged directly by the kernel and requires kernel-level privileges to interfere with.\n\nThe second consideration is then the reliability of the information being logged. You might trust the event source, but what if it is just [blindly logging](https://www.elastic.co/security-labs/effective-parenting-detecting-lrpc-based-parent-pid-spoofing) [client-supplied data](https://labs.withsecure.com/publications/spoofing-call-stacks-to-confuse-edrs) that is extrinsic to the event being logged?\n\nIn this article, we’ll focus on kernel ETW events. These are typically the most security-relevant because they are difficult to bypass and often pertain to privileged actions being performed on behalf of a client thread.\n\nWhen Microsoft introduced Kernel Patch Protection, security vendors were significantly constrained in their ability to monitor the kernel. Given the limited number of kernel extension points provided by Microsoft, they were increasingly compelled to rely on asynchronous ETW events for after-the-fact visibility of kernel actions performed on behalf of malware. \n\nGiven this dependency, the public documentation of Windows kernel telemetry sources is unfortunately somewhat sparse.\n\n![The events in Microsoft-Windows-Kernel-Audit-API-Calls are somewhat opaque](/assets/images/kernel-etw-best-etw/image11.png \"The events in Microsoft-Windows-Kernel-Audit-API-Calls are somewhat opaque\")\n\n## Kernel ETW Events\n\nThere are currently [four types of ETW providers](https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing#types-of-providers) that we need to consider.  \n\nFirstly, there are legacy and modern variants of “event provider”:\n\n* legacy ([mof](https://learn.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-)-based) event providers\n* modern ([manifest](https://learn.microsoft.com/en-us/windows/win32/wes/writing-an-instrumentation-manifest)-based) event providers\n\nAnd then there are legacy and modern variants of “trace provider”:\n\n* legacy Windows software trace preprocessor ([WPP](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/wpp-software-tracing)) trace providers\n* modern [TraceLogging](https://learn.microsoft.com/en-us/windows/win32/tracelogging/trace-logging-about) trace providers\n\nThe “event” versus “trace” distinction is mostly semantic. Event providers are typically registered with the operating system ahead of time, and you can inspect the available telemetry metadata. These are typically used by system administrators for troubleshooting purposes and are often semi-documented. But when something goes really, _really_ wrong there are (hidden) trace providers. These are typically used only by the original software authors for advanced troubleshooting and are undocumented.\n\nIn practice, each uses a slightly different format file to describe and register its events and this introduces minor differences in how the events are logged - and, more importantly, how the potential events can be enumerated.\n\n### Modern Kernel Event Providers\n\nThe modern kernel ETW providers aren’t strictly documented. However, registered event details can be queried from the operating system via the [Trace Data Helper API](https://learn.microsoft.com/en-us/windows/win32/api/tdh/). Microsoft’s [PerfView](https://github.com/microsoft/perfview) tool uses these APIs to reconstruct the provider’s [registration manifest](https://github.com/microsoft/perfview/blob/319be737115e01f77c42804cd1d41755211347f3/src/TraceEvent/RegisteredTraceEventParser.cs#L88), and Pavel Yosifovich’s [EtwExplorer](https://github.com/zodiacon/EtwExplorer) then wraps these manifests in a simple GUI. You can use these [tab-separated value files](https://github.com/jdu2600/Windows10EtwEvents/tree/master/manifest) of registered manifests from successive Windows versions. A single line per event is very useful for grepping, though others have since published the [raw XML manifests](https://github.com/nasbench/EVTX-ETW-Resources/tree/main/ETWProvidersManifests).\n\nThese aren’t all of the possible Windows ETW events, however. They are only the ones registered with the operating system by default. For example, the ETW events for many [server roles aren’t registered](https://github.com/nasbench/EVTX-ETW-Resources/issues/52) until that feature is enabled.\n\n### Legacy Kernel Event Providers\n\nThe [legacy kernel events](https://docs.microsoft.com/en-us/windows/win32/etw/msnt-systemtrace) are documented by Microsoft. Mostly.\n\nLegacy providers also exist within the operating system as WMI [EventTrace](https://learn.microsoft.com/en-us/windows/win32/etw/eventtrace) classes. Providers are the root classes, groups are the children, and events are the grandchildren.\n\n![Enumerating MOF providers with wbemtest](/assets/images/kernel-etw-best-etw/image8.png \"Enumerating MOF providers with wbemtest\")\n\nTo search the legacy events in the same way as modern eventTo search legacy events in the same way as modern events, these classes were parsed, and the original MOF (mostly) reconstructed. This [MOF support was added to EtwExplorer,](https://github.com/zodiacon/EtwExplorer/pull/3) and [tab-separated value summaries](https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof) of the legacy events were these classes were parsed and the original MOF (mostly) reconstructed. This [MOF support was added to EtwExplorer](https://github.com/zodiacon/EtwExplorer/pull/3) and [tab-separated value summaries](https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof) of the legacy events published. \n\n![Enumerating MOF providers with ETW Explorer](/assets/images/kernel-etw-best-etw/image6.png \"Enumerating MOF providers with ETW Explorer\")\n\nThe fully reconstructed Windows Kernel Trace MOF is [here](https://gist.github.com/jdu2600/a2b03e4e9cf19282a41ad766388c9856) (or in a tabular format [here](https://github.com/jdu2600/Windows10EtwEvents/blob/master/mof/Windows_Kernel_Trace.tsv)).\n\nOf the 340 registered legacy events, only 116 were documented. Typically, each legacy event needs to be enabled via a specific flag, but these weren’t documented either. There was a clue in the documentation for the kernel [Object Manager Trace](https://learn.microsoft.com/en-us/windows/win32/etw/obtrace) events. It mentioned `PERF_OB_HANDLE`, a constant that is not defined in the headers in the latest SDK. Luckily, [Geoff Chappell](https://geoffchappell.com/studies/windows/km/ntoskrnl/api/etw/tracesup/perfinfo_groupmask.htm) and the Windows 10 1511 WDK came to the rescue. This information was used to add support for `PERFINFO_GROUPMASK` kernel trace flags to Microsoft’s [KrabsETW](https://github.com/microsoft/krabsetw/blob/master/examples/NativeExamples/kernel_trace_002.cpp) library. It also turned out that the Object Trace documentation was wrong. That non-public constant can only be used with an undocumented API extension. Fortunately, public Microsoft projects such as `PerfView` often provide [examples of how to use undocumented APIs](https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/ETWKernelControl.cs#L464-L469).\n\nWith both manifests and MOFs published on GitHub, most kernel events can now be found with [this query](https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel).\n\nInterestingly, Microsoft often [obfuscates](https://en.wikipedia.org/wiki/Security_through_obscurity) the names of security-relevant events, so searching for events with a generic name prefix such as `task_` yields some [interesting results](https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+task_).\n\nSometimes the keyword hints to the event’s purpose. For example, `task_014` in `Microsoft-Windows-Kernel-General` is enabled with the keyword `KERNEL_GENERAL_SECURITY_ACCESSCHECK.`\n\nAnd thankfully, the parameters are almost always well-named. We might guess that `task_05` in `Microsoft-Windows-Kernel-Audit-API-Calls` is related to [OpenProcess](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess) since it logs fields named `TargetProcessId` and `DesiredAccess`.\n\n[Another useful query](https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+processstartkey) is to search for events with an explicit `ProcessStartKey` field. ETW events can be [configured](https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-enable_trace_parameters) to include this field for the logging process, and any event that includes this information for another process is often security relevant.\n\nIf you had a specific API in mind, you might query for its name or its parameters. For example, if you want Named Pipe events, you might use [this query](https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+namedpipe).\n\nIn this instance, though, `Microsoft-Windows-SEC` belongs to the built-in Microsoft Security drivers that Microsoft Defender for Endpoint (MDE) utilizes. This provider is only officially available to MDE, though [Sebastian Feldmann and Philipp Schmied](https://www.youtube.com/watch?v=tuoA3KGKf7o) have demonstrated how to start a session using an [AutoLogger](https://learn.microsoft.com/en-us/windows/win32/etw/configuring-and-starting-an-autologger-session) and subscribe to that session’s events. This is only currently useful for MDE users as otherwise, the driver is not configured to emit events.\n\nBut what about trace providers?\n\n### Modern Kernel Trace Providers\n\nTraceLogging metadata is stored as an opaque blob within the logging binary. Thankfully this format has been reversed by [Matt Graeber](https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7). We can use Matt’s script to dump all TraceLogging metadata for `ntoskrnl.exe`. A sample dump of Windows 11 TraceLogging metadata is [here](https://gist.github.com/jdu2600/288475bc43ea68636c28cb25ddeb934f).\n\nUnfortunately, the metadata structure alone doesn’t retain the correlation between providers and events.  There are interesting provider names, such as `Microsoft.Windows.Kernel.Security` and `AttackSurfaceMonitor`, but it’s not yet clear from our metadata dump which events belong to these providers.\n\n### Legacy Kernel Trace Providers\n\nWPP metadata is stored within symbols files (PDBs).  Microsoft includes this information in the [public symbols for some, but not all, drivers](https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-to-include-and-view-wpp-trace-messages-in-a-driver-8217-s/ba-p/270778).  The kernel itself, however, does not produce any WPP events. Instead, the legacy Windows Kernel Trace event provider can be passed undocumented flags to enable the legacy “trace” events usually only available to Microsoft kernel developers.\n\n| Provider               | Documentation | Event Metadata               |\n|------------------------|---------------|------------------------------|\n| Modern Event Providers | None          | [Registered XML manifests](https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/RegisteredTraceEventParser.cs#L81-L529)     |\n| Legacy Event Providers | Partial       | [EventTrace WMI objects](https://learn.microsoft.com/en-us/windows/win32/etw/retrieving-event-data-using-mof)       |\n| Modern Trace Providers | None          | [Undocumented blob in binary](https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658)  |\n| Legacy Trace Providers | None          | [Undocumented blob in Symbols](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/trace-message-format-file) |\n\n## Next Steps\n\nWe now have kernel event metadata for each of the four flavours of ETW provider, but a list of ETW events is just our starting point. Knowing the provider and event keyword may not be enough to generate the events we expect. Sometimes, an additional configuration registry key or API call is required. More often, though, we just need to understand the exact conditions under which the event is logged.\n\nKnowing exactly where and what is being logged is critical to truly understanding your telemetry and its limitations. And, thanks to decompilers becoming readily available, we have the option of some just-enough-reversing available to us. In IDA we call this “press F5”. Ghidra is the open-source alternative and it supports scripting … with Java.\n\nFor kernel ETW, we are particularly interested in `EtwWrite` calls that are reachable from system calls. We want as much of the call site parameter information as possible, including any associated public symbol information. This meant that we needed to walk the call graph but also attempt to resolve the possible values for particular parameters.\n\n![alt_text](/assets/images/kernel-etw-best-etw/image4.png \"image_tooltip\")\n\n![EtwWrite documentation](/assets/images/kernel-etw-best-etw/image12.png \"EtwWrite documentation\")\n\nThe necessary parameters were the `RegHandle` and the `EventDescriptor`.  The former is an opaque handle for the provider, and the latter provides event-specific information, such as the event id and its associated keywords.  An ETW keyword is an identifier used to enable a set of events. \n\nEven better, these event descriptors were typically stored in a global constant with a public symbol.\n\n![Example ntoskrnl.exe EVENT_DESCRIPTOR in Ghidra](/assets/images/kernel-etw-best-etw/image1.png \"Example ntoskrnl.exe EVENT_DESCRIPTOR in Ghidra\")\n\nWe had sufficient event metadata but still needed to resolve the opaque provider handle assigned at runtime back to the metadata about the provider. For this, we also needed the `EtwRegister` calls.\n\n![EtwRegister documentation](/assets/images/kernel-etw-best-etw/image9.png \"EtwRegister documentation\")\n\n![Example ntoskrnl.exe EtwRegister in Ghidra](/assets/images/kernel-etw-best-etw/image10.png \"Example ntoskrnl.exe EtwRegister in Ghidra\")\n\nThe typical pattern for kernel modern event providers was to store the constant provider GUID and the runtime handle in globals with public symbols.\n\nAnother pattern encountered was calls to `EtwRegister`, `EtwEwrite`, and `EtwUnregister`, all in the same function. In this case, we took advantage of the locality to find the provider GUID for the event.\n\nModern TraceLogging providers, however, did not have associated per-provider public symbols to provide a hint of each provider’s purpose. However, Matt Graeber had [reversed the TraceLogging metadata](https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7) format and documented that the provider name is stored at a [fixed offset](https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658#file-tlgmetadataparser-psm1-L461-L473) from the provider GUID. Having the exact provider name is even better than just the public symbol we recovered for modern events.\n\n![Example TraceLogging Provider blob in Ghidra](/assets/images/kernel-etw-best-etw/image7.png \"Example TraceLogging Provider blob in Ghidra\")\n\nThis just left the legacy providers. They didn’t seem to have either public symbols or metadata blobs.  Some constants are passed to an undocumented function named `EtwTraceKernelEvent` which wraps the eventual ETW write call.\n\n![Example legacy provider EtwTraceKernelEvent call in Ghidra](/assets/images/kernel-etw-best-etw/image5.png \"Example legacy provider EtwTraceKernelEvent call in Ghidra\")\n\nThose constants are present in the Windows 10 1511 WDK headers (and the [System Informer](https://github.com/winsiderss/systeminformer/blob/7ad69bf13d31892a89be7230bdbd47ffde024a2b/phnt/include/ntwmi.h#L725) headers), so we could label these events with the constant names.\n\n![ntwmi.h extract](/assets/images/kernel-etw-best-etw/image2.png \"ntwmi.h extract\")\n\nThis script has been recently updated for Ghidra 11, along with improved support for TraceLogging and Legacy events. You can now find it on GitHub here - [https://github.com/jdu2600/API-To-ETW](https://github.com/jdu2600/API-To-ETW)\n\nSample output for the Windows 11 kernel is [here](https://github.com/jdu2600/API-To-ETW/blob/main/ntoskrnl.exe.csv).\n\nOur previously anonymous `Microsoft-Windows-Kernel-Audit-API-Calls` events are quickly unmasked by this script.\n\n| Id | EVENT_DESCRIPTOR Symbol                                   | Function                                 |\n|----|-----------------------------------------------------------|------------------------------------------|\n| 1  | KERNEL_AUDIT_API_PSSETLOADIMAGENOTIFYROUTINE              | PsSetLoadImageNotifyRoutineEx            |\n| 2  | KERNEL_AUDIT_API_TERMINATEPROCESS                         | NtTerminateProcess                       |\n| 3  | KERNEL_AUDIT_API_CREATESYMBOLICLINKOBJECT                 | ObCreateSymbolicLink                     |\n| 4  | KERNEL_AUDIT_API_SETCONTEXTTHREAD                         | NtSetContextThread                       |\n| 5  | KERNEL_AUDIT_API_OPENPROCESS                              | PsOpenProcess                            |\n| 6  | KERNEL_AUDIT_API_OPENTHREAD                               | PsOpenThread                             |\n| 7  | KERNEL_AUDIT_API_IOREGISTERLASTCHANCESHUTDOWNNOTIFICATION | IoRegisterLastChanceShutdownNotification |\n| 8  | KERNEL_AUDIT_API_IOREGISTERSHUTDOWNNOTIFICATION           | IoRegisterShutdownNotification           |\n\nSymbol and containing function for Microsoft-Windows-Kernel-Audit-API-Calls events\n\nWith the call path and parameter information recovered by the script, we can also see that the `SECURITY_ACCESSCHECK` event from earlier is associated with the [SeAccessCheck](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-seaccesscheck) kernel API, but only logged within a function named `SeLogAccessFailure`. Only logging failure conditions is a very common occurrence with ETW events. For troubleshooting purposes, the original ETW use case, these are typically the most useful and the implementation in most components reflects this. Unfortunately, for security purposes, the inverse is often true. The successful operation logs are usually more useful for finding malicious activity. So, the value of some of these legacy events is often low.\n\nModern [Secure by Design](https://www.cisa.gov/resources-tools/resources/secure-by-design) practice is to audit log both success and failure for security relevant activities and Microsoft continues to add new security-relevant ETW events that do this. For example, the preview build of Windows 11 24H2 includes some [interesting new ETW events](https://windows-internals.com/an-end-to-kaslr-bypasses/) in the `Microsoft-Windows-Threat-Intelligence` provider. Hopefully, these will be documented for security vendors ahead of its release. \n\nRunning this decompiler script across interesting Windows drivers and service DLLs is left as an exercise to the reader.","code":"var Component=(()=\u003e{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(r,e)=\u003e()=\u003e(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=\u003e{for(var n in e)o(r,n,{get:e[n],enumerable:!0})},a=(r,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!m.call(r,i)\u0026\u0026i!==n\u0026\u0026o(r,i,{get:()=\u003ee[i],enumerable:!(s=p(e,i))||s.enumerable});return r};var v=(r,e,n)=\u003e(n=r!=null?h(u(r)):{},a(e||!r||!r.__esModule?o(n,\"default\",{value:r,enumerable:!0}):n,r)),b=r=\u003ea(o({},\"__esModule\",{value:!0}),r);var d=w((I,l)=\u003e{l.exports=_jsx_runtime});var W={};g(W,{default:()=\u003eT,frontmatter:()=\u003ey});var t=v(d()),y={title:\"Kernel ETW is the best ETW\",slug:\"kernel-etw-best-etw\",date:\"2024-09-13\",description:\"This research focuses on the importance of native audit logs in secure-by-design software, emphasizing the need for kernel-level ETW logging over user-mode hooks to enhance anti-tamper protections.\",author:[{slug:\"john-uhlmann\"}],image:\"kernel-etw-best-etw.jpg\",category:[{slug:\"perspectives\"}],tags:[\"kernel\",\"ETW\",\"Windows\",\"OS\"]};function c(r){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",img:\"img\",ul:\"ul\",li:\"li\",em:\"em\",h3:\"h3\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,t.jsx)(e.p,{children:\"A critical feature of secure-by-design software is the generation of audit logs when privileged operations are performed. These native audit logs can include details of the internal software state, which are impractical for third-party security vendors to bolt on after the fact.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Most Windows components generate logs using \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing\",rel:\"nofollow\",children:\"Event Tracing for Windows\"}),\" (ETW). These events expose some of Windows's inner workings, and there are scenarios when endpoint security products benefit from subscribing to them. For security purposes, though, not all ETW providers are created equal.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first consideration is typically the reliability of the event provider itself - in particular, where the logging happens. Is it within the client process and \",(0,t.jsx)(e.a,{href:\"https://twitter.com/dez_/status/938074904666271744\",rel:\"nofollow\",children:\"trivially vulnerable to ETW tampering\"}),\"? Or is it perhaps slightly safer over in an RPC server process? Ideally, though, the telemetry will come from the \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/doubling-down-etw-callstacks\",rel:\"nofollow\",children:\"kernel\"}),\". Given the user-to-kernel security boundary, this provides stronger anti-tamper guarantees over in-process telemetry. This is Microsoft\\u2019s recommended approach. Like Elastic Endpoint, Microsoft Defender for Endpoint also uses kernel ETW in preference to fragile user-mode \",(0,t.jsx)(e.code,{children:\"ntdll\"}),\" hooks.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For example, an adversary might be able to easily avoid an in-process user-mode hook on \",(0,t.jsx)(e.code,{children:\"ntdll!NtProtectVirtualMemory\"}),\", but bypassing a kernel \",(0,t.jsx)(e.a,{href:\"https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+PROTECTVM\",rel:\"nofollow\",children:\"PROTECTVM\"}),\" ETW event is significantly harder. Or, at least, \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/forget-vulnerable-drivers-admin-is-all-you-need\",rel:\"nofollow\",children:\"it should be\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image3.png\",alt:\"Sample ETW providers and where they are logged\",title:\"Sample ETW providers and where they are logged\",width:\"1396\",height:\"774\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The Security Event Log is effectively just persistent storage for the events from the Microsoft-Windows-Security-Auditing ETW provider. Surprisingly, \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4688\",rel:\"nofollow\",children:\"Security Event 4688\"}),\" for process creation is not a kernel event. The kernel dispatches the data to the Local Security Authority (\",(0,t.jsx)(e.code,{children:\"lsass.exe\"}),\") service, emitting an ETW event for the Event Log to consume. So, the data could be tampered with from within that server process. Contrast this with the \",(0,t.jsx)(e.code,{children:\"ProcessStart\"}),\" event from the Microsoft-Windows-Kernel-Process provider, which is logged directly by the kernel and requires kernel-level privileges to interfere with.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The second consideration is then the reliability of the information being logged. You might trust the event source, but what if it is just \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/effective-parenting-detecting-lrpc-based-parent-pid-spoofing\",rel:\"nofollow\",children:\"blindly logging\"}),\" \",(0,t.jsx)(e.a,{href:\"https://labs.withsecure.com/publications/spoofing-call-stacks-to-confuse-edrs\",rel:\"nofollow\",children:\"client-supplied data\"}),\" that is extrinsic to the event being logged?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"In this article, we\\u2019ll focus on kernel ETW events. These are typically the most security-relevant because they are difficult to bypass and often pertain to privileged actions being performed on behalf of a client thread.\"}),`\n`,(0,t.jsx)(e.p,{children:\"When Microsoft introduced Kernel Patch Protection, security vendors were significantly constrained in their ability to monitor the kernel. Given the limited number of kernel extension points provided by Microsoft, they were increasingly compelled to rely on asynchronous ETW events for after-the-fact visibility of kernel actions performed on behalf of malware.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Given this dependency, the public documentation of Windows kernel telemetry sources is unfortunately somewhat sparse.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image11.png\",alt:\"The events in Microsoft-Windows-Kernel-Audit-API-Calls are somewhat opaque\",title:\"The events in Microsoft-Windows-Kernel-Audit-API-Calls are somewhat opaque\",width:\"506\",height:\"411\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"kernel-etw-events\",children:\"Kernel ETW Events\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"There are currently \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing#types-of-providers\",rel:\"nofollow\",children:\"four types of ETW providers\"}),\" that we need to consider.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Firstly, there are legacy and modern variants of \\u201Cevent provider\\u201D:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"legacy (\",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-\",rel:\"nofollow\",children:\"mof\"}),\"-based) event providers\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"modern (\",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/wes/writing-an-instrumentation-manifest\",rel:\"nofollow\",children:\"manifest\"}),\"-based) event providers\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"And then there are legacy and modern variants of \\u201Ctrace provider\\u201D:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"legacy Windows software trace preprocessor (\",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/wpp-software-tracing\",rel:\"nofollow\",children:\"WPP\"}),\") trace providers\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"modern \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/tracelogging/trace-logging-about\",rel:\"nofollow\",children:\"TraceLogging\"}),\" trace providers\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \\u201Cevent\\u201D versus \\u201Ctrace\\u201D distinction is mostly semantic. Event providers are typically registered with the operating system ahead of time, and you can inspect the available telemetry metadata. These are typically used by system administrators for troubleshooting purposes and are often semi-documented. But when something goes really, \",(0,t.jsx)(e.em,{children:\"really\"}),\" wrong there are (hidden) trace providers. These are typically used only by the original software authors for advanced troubleshooting and are undocumented.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"In practice, each uses a slightly different format file to describe and register its events and this introduces minor differences in how the events are logged - and, more importantly, how the potential events can be enumerated.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"modern-kernel-event-providers\",children:\"Modern Kernel Event Providers\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The modern kernel ETW providers aren\\u2019t strictly documented. However, registered event details can be queried from the operating system via the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/tdh/\",rel:\"nofollow\",children:\"Trace Data Helper API\"}),\". Microsoft\\u2019s \",(0,t.jsx)(e.a,{href:\"https://github.com/microsoft/perfview\",rel:\"nofollow\",children:\"PerfView\"}),\" tool uses these APIs to reconstruct the provider\\u2019s \",(0,t.jsx)(e.a,{href:\"https://github.com/microsoft/perfview/blob/319be737115e01f77c42804cd1d41755211347f3/src/TraceEvent/RegisteredTraceEventParser.cs#L88\",rel:\"nofollow\",children:\"registration manifest\"}),\", and Pavel Yosifovich\\u2019s \",(0,t.jsx)(e.a,{href:\"https://github.com/zodiacon/EtwExplorer\",rel:\"nofollow\",children:\"EtwExplorer\"}),\" then wraps these manifests in a simple GUI. You can use these \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/Windows10EtwEvents/tree/master/manifest\",rel:\"nofollow\",children:\"tab-separated value files\"}),\" of registered manifests from successive Windows versions. A single line per event is very useful for grepping, though others have since published the \",(0,t.jsx)(e.a,{href:\"https://github.com/nasbench/EVTX-ETW-Resources/tree/main/ETWProvidersManifests\",rel:\"nofollow\",children:\"raw XML manifests\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"These aren\\u2019t all of the possible Windows ETW events, however. They are only the ones registered with the operating system by default. For example, the ETW events for many \",(0,t.jsx)(e.a,{href:\"https://github.com/nasbench/EVTX-ETW-Resources/issues/52\",rel:\"nofollow\",children:\"server roles aren\\u2019t registered\"}),\" until that feature is enabled.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"legacy-kernel-event-providers\",children:\"Legacy Kernel Event Providers\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.a,{href:\"https://docs.microsoft.com/en-us/windows/win32/etw/msnt-systemtrace\",rel:\"nofollow\",children:\"legacy kernel events\"}),\" are documented by Microsoft. Mostly.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Legacy providers also exist within the operating system as WMI \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/eventtrace\",rel:\"nofollow\",children:\"EventTrace\"}),\" classes. Providers are the root classes, groups are the children, and events are the grandchildren.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image8.png\",alt:\"Enumerating MOF providers with wbemtest\",title:\"Enumerating MOF providers with wbemtest\",width:\"1212\",height:\"1890\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"To search the legacy events in the same way as modern eventTo search legacy events in the same way as modern events, these classes were parsed, and the original MOF (mostly) reconstructed. This \",(0,t.jsx)(e.a,{href:\"https://github.com/zodiacon/EtwExplorer/pull/3\",rel:\"nofollow\",children:\"MOF support was added to EtwExplorer,\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof\",rel:\"nofollow\",children:\"tab-separated value summaries\"}),\" of the legacy events were these classes were parsed and the original MOF (mostly) reconstructed. This \",(0,t.jsx)(e.a,{href:\"https://github.com/zodiacon/EtwExplorer/pull/3\",rel:\"nofollow\",children:\"MOF support was added to EtwExplorer\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/Windows10EtwEvents/tree/master/mof\",rel:\"nofollow\",children:\"tab-separated value summaries\"}),\" of the legacy events published.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image6.png\",alt:\"Enumerating MOF providers with ETW Explorer\",title:\"Enumerating MOF providers with ETW Explorer\",width:\"1546\",height:\"1292\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The fully reconstructed Windows Kernel Trace MOF is \",(0,t.jsx)(e.a,{href:\"https://gist.github.com/jdu2600/a2b03e4e9cf19282a41ad766388c9856\",rel:\"nofollow\",children:\"here\"}),\" (or in a tabular format \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/Windows10EtwEvents/blob/master/mof/Windows_Kernel_Trace.tsv\",rel:\"nofollow\",children:\"here\"}),\").\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Of the 340 registered legacy events, only 116 were documented. Typically, each legacy event needs to be enabled via a specific flag, but these weren\\u2019t documented either. There was a clue in the documentation for the kernel \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/obtrace\",rel:\"nofollow\",children:\"Object Manager Trace\"}),\" events. It mentioned \",(0,t.jsx)(e.code,{children:\"PERF_OB_HANDLE\"}),\", a constant that is not defined in the headers in the latest SDK. Luckily, \",(0,t.jsx)(e.a,{href:\"https://geoffchappell.com/studies/windows/km/ntoskrnl/api/etw/tracesup/perfinfo_groupmask.htm\",rel:\"nofollow\",children:\"Geoff Chappell\"}),\" and the Windows 10 1511 WDK came to the rescue. This information was used to add support for \",(0,t.jsx)(e.code,{children:\"PERFINFO_GROUPMASK\"}),\" kernel trace flags to Microsoft\\u2019s \",(0,t.jsx)(e.a,{href:\"https://github.com/microsoft/krabsetw/blob/master/examples/NativeExamples/kernel_trace_002.cpp\",rel:\"nofollow\",children:\"KrabsETW\"}),\" library. It also turned out that the Object Trace documentation was wrong. That non-public constant can only be used with an undocumented API extension. Fortunately, public Microsoft projects such as \",(0,t.jsx)(e.code,{children:\"PerfView\"}),\" often provide \",(0,t.jsx)(e.a,{href:\"https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/ETWKernelControl.cs#L464-L469\",rel:\"nofollow\",children:\"examples of how to use undocumented APIs\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"With both manifests and MOFs published on GitHub, most kernel events can now be found with \",(0,t.jsx)(e.a,{href:\"https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel\",rel:\"nofollow\",children:\"this query\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Interestingly, Microsoft often \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Security_through_obscurity\",rel:\"nofollow\",children:\"obfuscates\"}),\" the names of security-relevant events, so searching for events with a generic name prefix such as \",(0,t.jsx)(e.code,{children:\"task_\"}),\" yields some \",(0,t.jsx)(e.a,{href:\"https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+task_\",rel:\"nofollow\",children:\"interesting results\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Sometimes the keyword hints to the event\\u2019s purpose. For example, \",(0,t.jsx)(e.code,{children:\"task_014\"}),\" in \",(0,t.jsx)(e.code,{children:\"Microsoft-Windows-Kernel-General\"}),\" is enabled with the keyword \",(0,t.jsx)(e.code,{children:\"KERNEL_GENERAL_SECURITY_ACCESSCHECK.\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"And thankfully, the parameters are almost always well-named. We might guess that \",(0,t.jsx)(e.code,{children:\"task_05\"}),\" in \",(0,t.jsx)(e.code,{children:\"Microsoft-Windows-Kernel-Audit-API-Calls\"}),\" is related to \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess\",rel:\"nofollow\",children:\"OpenProcess\"}),\" since it logs fields named \",(0,t.jsx)(e.code,{children:\"TargetProcessId\"}),\" and \",(0,t.jsx)(e.code,{children:\"DesiredAccess\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+processstartkey\",rel:\"nofollow\",children:\"Another useful query\"}),\" is to search for events with an explicit \",(0,t.jsx)(e.code,{children:\"ProcessStartKey\"}),\" field. ETW events can be \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-enable_trace_parameters\",rel:\"nofollow\",children:\"configured\"}),\" to include this field for the logging process, and any event that includes this information for another process is often security relevant.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you had a specific API in mind, you might query for its name or its parameters. For example, if you want Named Pipe events, you might use \",(0,t.jsx)(e.a,{href:\"https://github.com/search?type=code\u0026q=repo:jdu2600/Windows10EtwEvents+kernel+namedpipe\",rel:\"nofollow\",children:\"this query\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this instance, though, \",(0,t.jsx)(e.code,{children:\"Microsoft-Windows-SEC\"}),\" belongs to the built-in Microsoft Security drivers that Microsoft Defender for Endpoint (MDE) utilizes. This provider is only officially available to MDE, though \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=tuoA3KGKf7o\",rel:\"nofollow\",children:\"Sebastian Feldmann and Philipp Schmied\"}),\" have demonstrated how to start a session using an \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/configuring-and-starting-an-autologger-session\",rel:\"nofollow\",children:\"AutoLogger\"}),\" and subscribe to that session\\u2019s events. This is only currently useful for MDE users as otherwise, the driver is not configured to emit events.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"But what about trace providers?\"}),`\n`,(0,t.jsx)(e.h3,{id:\"modern-kernel-trace-providers\",children:\"Modern Kernel Trace Providers\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"TraceLogging metadata is stored as an opaque blob within the logging binary. Thankfully this format has been reversed by \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7\",rel:\"nofollow\",children:\"Matt Graeber\"}),\". We can use Matt\\u2019s script to dump all TraceLogging metadata for \",(0,t.jsx)(e.code,{children:\"ntoskrnl.exe\"}),\". A sample dump of Windows 11 TraceLogging metadata is \",(0,t.jsx)(e.a,{href:\"https://gist.github.com/jdu2600/288475bc43ea68636c28cb25ddeb934f\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Unfortunately, the metadata structure alone doesn\\u2019t retain the correlation between providers and events.  There are interesting provider names, such as \",(0,t.jsx)(e.code,{children:\"Microsoft.Windows.Kernel.Security\"}),\" and \",(0,t.jsx)(e.code,{children:\"AttackSurfaceMonitor\"}),\", but it\\u2019s not yet clear from our metadata dump which events belong to these providers.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"legacy-kernel-trace-providers\",children:\"Legacy Kernel Trace Providers\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"WPP metadata is stored within symbols files (PDBs).  Microsoft includes this information in the \",(0,t.jsx)(e.a,{href:\"https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-to-include-and-view-wpp-trace-messages-in-a-driver-8217-s/ba-p/270778\",rel:\"nofollow\",children:\"public symbols for some, but not all, drivers\"}),\".  The kernel itself, however, does not produce any WPP events. Instead, the legacy Windows Kernel Trace event provider can be passed undocumented flags to enable the legacy \\u201Ctrace\\u201D events usually only available to Microsoft kernel developers.\"]}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Provider\"}),(0,t.jsx)(e.th,{children:\"Documentation\"}),(0,t.jsx)(e.th,{children:\"Event Metadata\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Modern Event Providers\"}),(0,t.jsx)(e.td,{children:\"None\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:\"https://github.com/microsoft/perfview/blob/51ec1dffe9055ab58ba1b13d1b716b36760ed895/src/TraceEvent/RegisteredTraceEventParser.cs#L81-L529\",rel:\"nofollow\",children:\"Registered XML manifests\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Legacy Event Providers\"}),(0,t.jsx)(e.td,{children:\"Partial\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/etw/retrieving-event-data-using-mof\",rel:\"nofollow\",children:\"EventTrace WMI objects\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Modern Trace Providers\"}),(0,t.jsx)(e.td,{children:\"None\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:\"https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658\",rel:\"nofollow\",children:\"Undocumented blob in binary\"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Legacy Trace Providers\"}),(0,t.jsx)(e.td,{children:\"None\"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/trace-message-format-file\",rel:\"nofollow\",children:\"Undocumented blob in Symbols\"})})]})]})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"next-steps\",children:\"Next Steps\"}),`\n`,(0,t.jsx)(e.p,{children:\"We now have kernel event metadata for each of the four flavours of ETW provider, but a list of ETW events is just our starting point. Knowing the provider and event keyword may not be enough to generate the events we expect. Sometimes, an additional configuration registry key or API call is required. More often, though, we just need to understand the exact conditions under which the event is logged.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Knowing exactly where and what is being logged is critical to truly understanding your telemetry and its limitations. And, thanks to decompilers becoming readily available, we have the option of some just-enough-reversing available to us. In IDA we call this \\u201Cpress F5\\u201D. Ghidra is the open-source alternative and it supports scripting \\u2026 with Java.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For kernel ETW, we are particularly interested in \",(0,t.jsx)(e.code,{children:\"EtwWrite\"}),\" calls that are reachable from system calls. We want as much of the call site parameter information as possible, including any associated public symbol information. This meant that we needed to walk the call graph but also attempt to resolve the possible values for particular parameters.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image4.png\",alt:\"alt_text\",title:\"image_tooltip\",width:\"1192\",height:\"424\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image12.png\",alt:\"EtwWrite documentation\",title:\"EtwWrite documentation\",width:\"1192\",height:\"498\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The necessary parameters were the \",(0,t.jsx)(e.code,{children:\"RegHandle\"}),\" and the \",(0,t.jsx)(e.code,{children:\"EventDescriptor\"}),\".  The former is an opaque handle for the provider, and the latter provides event-specific information, such as the event id and its associated keywords.  An ETW keyword is an identifier used to enable a set of events.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Even better, these event descriptors were typically stored in a global constant with a public symbol.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image1.png\",alt:\"Example ntoskrnl.exe EVENT_DESCRIPTOR in Ghidra\",title:\"Example ntoskrnl.exe EVENT_DESCRIPTOR in Ghidra\",width:\"1078\",height:\"444\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We had sufficient event metadata but still needed to resolve the opaque provider handle assigned at runtime back to the metadata about the provider. For this, we also needed the \",(0,t.jsx)(e.code,{children:\"EtwRegister\"}),\" calls.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image9.png\",alt:\"EtwRegister documentation\",title:\"EtwRegister documentation\",width:\"1192\",height:\"390\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image10.png\",alt:\"Example ntoskrnl.exe EtwRegister in Ghidra\",title:\"Example ntoskrnl.exe EtwRegister in Ghidra\",width:\"1210\",height:\"78\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The typical pattern for kernel modern event providers was to store the constant provider GUID and the runtime handle in globals with public symbols.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another pattern encountered was calls to \",(0,t.jsx)(e.code,{children:\"EtwRegister\"}),\", \",(0,t.jsx)(e.code,{children:\"EtwEwrite\"}),\", and \",(0,t.jsx)(e.code,{children:\"EtwUnregister\"}),\", all in the same function. In this case, we took advantage of the locality to find the provider GUID for the event.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Modern TraceLogging providers, however, did not have associated per-provider public symbols to provide a hint of each provider\\u2019s purpose. However, Matt Graeber had \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/data-source-analysis-and-dynamic-windows-re-using-wpp-and-tracelogging-e465f8b653f7\",rel:\"nofollow\",children:\"reversed the TraceLogging metadata\"}),\" format and documented that the provider name is stored at a \",(0,t.jsx)(e.a,{href:\"https://gist.github.com/mattifestation/edbac1614694886c8ef4583149f53658#file-tlgmetadataparser-psm1-L461-L473\",rel:\"nofollow\",children:\"fixed offset\"}),\" from the provider GUID. Having the exact provider name is even better than just the public symbol we recovered for modern events.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image7.png\",alt:\"Example TraceLogging Provider blob in Ghidra\",title:\"Example TraceLogging Provider blob in Ghidra\",width:\"1052\",height:\"250\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This just left the legacy providers. They didn\\u2019t seem to have either public symbols or metadata blobs.  Some constants are passed to an undocumented function named \",(0,t.jsx)(e.code,{children:\"EtwTraceKernelEvent\"}),\" which wraps the eventual ETW write call.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image5.png\",alt:\"Example legacy provider EtwTraceKernelEvent call in Ghidra\",title:\"Example legacy provider EtwTraceKernelEvent call in Ghidra\",width:\"1354\",height:\"178\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Those constants are present in the Windows 10 1511 WDK headers (and the \",(0,t.jsx)(e.a,{href:\"https://github.com/winsiderss/systeminformer/blob/7ad69bf13d31892a89be7230bdbd47ffde024a2b/phnt/include/ntwmi.h#L725\",rel:\"nofollow\",children:\"System Informer\"}),\" headers), so we could label these events with the constant names.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/kernel-etw-best-etw/image2.png\",alt:\"ntwmi.h extract\",title:\"ntwmi.h extract\",width:\"1620\",height:\"112\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This script has been recently updated for Ghidra 11, along with improved support for TraceLogging and Legacy events. You can now find it on GitHub here - \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/API-To-ETW\",rel:\"nofollow\",children:\"https://github.com/jdu2600/API-To-ETW\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Sample output for the Windows 11 kernel is \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/API-To-ETW/blob/main/ntoskrnl.exe.csv\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Our previously anonymous \",(0,t.jsx)(e.code,{children:\"Microsoft-Windows-Kernel-Audit-API-Calls\"}),\" events are quickly unmasked by this script.\"]}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Id\"}),(0,t.jsx)(e.th,{children:\"EVENT_DESCRIPTOR Symbol\"}),(0,t.jsx)(e.th,{children:\"Function\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"1\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_PSSETLOADIMAGENOTIFYROUTINE\"}),(0,t.jsx)(e.td,{children:\"PsSetLoadImageNotifyRoutineEx\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"2\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_TERMINATEPROCESS\"}),(0,t.jsx)(e.td,{children:\"NtTerminateProcess\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"3\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_CREATESYMBOLICLINKOBJECT\"}),(0,t.jsx)(e.td,{children:\"ObCreateSymbolicLink\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"4\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_SETCONTEXTTHREAD\"}),(0,t.jsx)(e.td,{children:\"NtSetContextThread\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"5\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_OPENPROCESS\"}),(0,t.jsx)(e.td,{children:\"PsOpenProcess\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"6\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_OPENTHREAD\"}),(0,t.jsx)(e.td,{children:\"PsOpenThread\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"7\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_IOREGISTERLASTCHANCESHUTDOWNNOTIFICATION\"}),(0,t.jsx)(e.td,{children:\"IoRegisterLastChanceShutdownNotification\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"8\"}),(0,t.jsx)(e.td,{children:\"KERNEL_AUDIT_API_IOREGISTERSHUTDOWNNOTIFICATION\"}),(0,t.jsx)(e.td,{children:\"IoRegisterShutdownNotification\"})]})]})]})}),`\n`,(0,t.jsx)(e.p,{children:\"Symbol and containing function for Microsoft-Windows-Kernel-Audit-API-Calls events\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With the call path and parameter information recovered by the script, we can also see that the \",(0,t.jsx)(e.code,{children:\"SECURITY_ACCESSCHECK\"}),\" event from earlier is associated with the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-seaccesscheck\",rel:\"nofollow\",children:\"SeAccessCheck\"}),\" kernel API, but only logged within a function named \",(0,t.jsx)(e.code,{children:\"SeLogAccessFailure\"}),\". Only logging failure conditions is a very common occurrence with ETW events. For troubleshooting purposes, the original ETW use case, these are typically the most useful and the implementation in most components reflects this. Unfortunately, for security purposes, the inverse is often true. The successful operation logs are usually more useful for finding malicious activity. So, the value of some of these legacy events is often low.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Modern \",(0,t.jsx)(e.a,{href:\"https://www.cisa.gov/resources-tools/resources/secure-by-design\",rel:\"nofollow\",children:\"Secure by Design\"}),\" practice is to audit log both success and failure for security relevant activities and Microsoft continues to add new security-relevant ETW events that do this. For example, the preview build of Windows 11 24H2 includes some \",(0,t.jsx)(e.a,{href:\"https://windows-internals.com/an-end-to-kaslr-bypasses/\",rel:\"nofollow\",children:\"interesting new ETW events\"}),\" in the \",(0,t.jsx)(e.code,{children:\"Microsoft-Windows-Threat-Intelligence\"}),\" provider. Hopefully, these will be documented for security vendors ahead of its release.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Running this decompiler script across interesting Windows drivers and service DLLs is left as an exercise to the reader.\"})]})}function E(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(c,r)})):c(r)}var T=E;return b(W);})();\n;return Component;"},"_id":"articles/kernel-etw-best-etw.mdx","_raw":{"sourceFilePath":"articles/kernel-etw-best-etw.mdx","sourceFileName":"kernel-etw-best-etw.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/kernel-etw-best-etw"},"type":"Article","imageUrl":"/assets/images/kernel-etw-best-etw/kernel-etw-best-etw.jpg","readingTime":"14 min read","series":"","url":"/kernel-etw-best-etw","headings":[{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Kernel ETW Events","href":"#kernel-etw-events"},{"level":3,"title":"Modern Kernel Event Providers","href":"#modern-kernel-event-providers"},{"level":3,"title":"Legacy Kernel Event Providers","href":"#legacy-kernel-event-providers"},{"level":3,"title":"Modern Kernel Trace Providers","href":"#modern-kernel-trace-providers"},{"level":3,"title":"Legacy Kernel Trace Providers","href":"#legacy-kernel-trace-providers"},{"level":2,"title":"Next Steps","href":"#next-steps"}],"author":[{"title":"John Uhlmann","slug":"john-uhlmann","description":"Principal Security Research Engineer, Elastic","image":"john-uhlmann.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var p=(n,t)=\u003e()=\u003e(t||n((t={exports:{}}).exports,t),t.exports),f=(n,t)=\u003e{for(var e in t)o(n,e,{get:t[e],enumerable:!0})},c=(n,t,e,i)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of g(t))!x.call(n,a)\u0026\u0026a!==e\u0026\u0026o(n,a,{get:()=\u003et[a],enumerable:!(i=h(t,a))||i.enumerable});return n};var _=(n,t,e)=\u003e(e=n!=null?l(j(n)):{},c(t||!n||!n.__esModule?o(e,\"default\",{value:n,enumerable:!0}):e,n)),d=n=\u003ec(o({},\"__esModule\",{value:!0}),n);var m=p((F,s)=\u003e{s.exports=_jsx_runtime});var D={};f(D,{default:()=\u003eC,frontmatter:()=\u003eM});var r=_(m()),M={title:\"John Uhlmann\",description:\"Principal Security Research Engineer, Elastic\",slug:\"john-uhlmann\",image:\"john-uhlmann.jpg\"};function u(n){return(0,r.jsx)(r.Fragment,{})}function y(n={}){let{wrapper:t}=n.components||{};return t?(0,r.jsx)(t,Object.assign({},n,{children:(0,r.jsx)(u,n)})):u(n)}var C=y;return d(D);})();\n;return Component;"},"_id":"authors/john-uhlmann.mdx","_raw":{"sourceFilePath":"authors/john-uhlmann.mdx","sourceFileName":"john-uhlmann.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/john-uhlmann"},"type":"Author","imageUrl":"/assets/images/authors/john-uhlmann.jpg","url":"/authors/john-uhlmann"}],"category":[{"title":"Perspectives","slug":"perspectives","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!g.call(t,s)\u0026\u0026s!==n\u0026\u0026o(t,s,{get:()=\u003ee[s],enumerable:!(a=p(e,s))||a.enumerable});return t};var d=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},c(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003ec(o({},\"__esModule\",{value:!0}),t);var u=j((b,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003ev});var r=d(u()),v={title:\"Perspectives\",slug:\"perspectives\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"categories/perspectives.mdx","_raw":{"sourceFilePath":"categories/perspectives.mdx","sourceFileName":"perspectives.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/perspectives"},"type":"Category","url":"/categories/perspectives"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"kernel-etw-best-etw"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>