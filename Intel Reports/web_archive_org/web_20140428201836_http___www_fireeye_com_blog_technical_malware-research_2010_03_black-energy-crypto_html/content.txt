<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en-US" xmlns:fb="http://ogp.me/ns/fb#" xmlns:addthis="http://www.addthis.com/help/api-spec" >
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en-US" xmlns:fb="http://ogp.me/ns/fb#" xmlns:addthis="http://www.addthis.com/help/api-spec" >
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en-US" xmlns:fb="http://ogp.me/ns/fb#" xmlns:addthis="http://www.addthis.com/help/api-spec" >
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!-->
<html lang="en-US" xmlns:fb="http://ogp.me/ns/fb#" xmlns:addthis="http://www.addthis.com/help/api-spec">
<!--<![endif]-->
<head><script src="//archive.org/includes/athena.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app203.us.archive.org';v.server_ms=465;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="/_static/js/bundle-playback.js?v=HxkREWBo" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=txqj7nKC" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="/_static/js/ruffle/ruffle.js"></script>
<script type="text/javascript">
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://www.fireeye.com:80/blog/technical/malware-research/2010/03/black-energy-crypto.html","20140428201836","https://web.archive.org/","web","/_static/",
	      "1398716316");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=3PDvdIFv" />
<!-- End Wayback Rewrite JS Include -->


<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width"/>
<title>Black Energy Crypto | FireEye Blog</title>
	<script type="text/javascript">//<![CDATA[
		// Hide tabs and other expandable content
		document.write('<style type="text/css">.hideOnLoad{display: none}</style>');
	//]]></script>
		

	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<!-- mathiasbynens.be/notes/async-analytics-snippet Change UA-XXXXX-X to be your site's ID -->
	<script>  
	var _gaq=_gaq || [];  
	_gaq.push(["_setAccount","UA-363943-1"]);  
	_gaq.push(['_setDomainName', 'fireeye.com']);  
	
	
	_gaq.push(['_trackPageview']);  
	
	(function() {  
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;  
	ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js'; 
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  
	})();  
	</script> 

	
	<!-- All JavaScript at the bottom, except for Modernizr which enables HTML5 elements & feature detects -->
	<script src="/web/20140428201836js_/http://www.fireeye.com/javascript/modernizr.js"></script>
	
	<link href="https://plus.google.com/101224725548086766919" rel="publisher"/>
	<link rel="stylesheet" href="/web/20140428201836cs_/http://www.fireeye.com/css/styles.css" type="text/css"/>
<link rel="dns-prefetch" href="//web.archive.org/web/20140428201836/http://connect.facebook.net/"/>
<link rel="alternate" type="application/rss+xml" title="FireEye Blog � Feed" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/feed"/>
<link rel="alternate" type="application/rss+xml" title="FireEye Blog � Comments Feed" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/comments/feed"/>
<link rel="alternate" type="application/rss+xml" title="FireEye Blog � Black Energy Crypto Comments Feed" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html/feed"/>
<link rel="stylesheet" id="output-css" href="https://web.archive.org/web/20140428201836cs_/http://www.fireeye.com/blog/wp-content/plugins/addthis/css/output.css?ver=3.8.3" type="text/css" media="all"/>
<script type="text/javascript" src="https://web.archive.org/web/20140428201836js_/http://www.fireeye.com/blog/wp-includes/js/comment-reply.min.js?ver=3.8.3"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.fireeye.com/blog/xmlrpc.php?rsd"/>
<link rel="prev" title="MITB (Man in the Browser) Protection Layers" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/02/mitb_protection_layers.html"/>
<link rel="next" title="Win32 API Shellcode Hash Algorithm" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/cyber-exploits/2010/03/win32-api-shellcode-hash-algorithm.html"/>
<link rel="canonical" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html"/>
<link rel="shortlink" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/?p=85"/>
<meta property="og:site_name" content="FireEye Blog"/>
<meta property="og:type" content="article"/>
<meta property="og:locale" content="en_US"/>
<meta property="og:url" content="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html"/>
<meta property="og:title" content="Black Energy Crypto"/>
<meta property="og:description" content="The &quot;Yes Exploit System&quot; is encrypts its &quot;Black Energy&quot;-like components. The crypto design used has a fatal flaw, which allows for someone to completely recover the plaintexts, without knowing the keys, or algorithm used, or even any information at all?"/>
<meta property="article:published_time" content="2010-03-03T12:54:14+00:00"/>
<meta property="article:modified_time" content="2013-05-10T15:41:59+00:00"/>
<meta property="article:author" content="http://www.fireeye.com/blog/author/julia-wolf"/>
<meta property="article:section" content="Advanced Malware"/>
<meta property="article:tag" content="@comp.id"/>
<meta property="article:tag" content="bad crypto"/>
<meta property="article:tag" content="Black Energy"/>
<meta property="article:tag" content="Citibank"/>
<meta property="article:tag" content="COFF"/>
<meta property="article:tag" content="Cr4sh"/>
<meta property="article:tag" content="cryptanalysis"/>
<meta property="article:tag" content="crypto"/>
<meta property="article:tag" content="EXE header"/>
<meta property="article:tag" content="hexdumps"/>
<meta property="article:tag" content="howto"/>
<meta property="article:tag" content="known plaintext attack"/>
<meta property="article:tag" content="malware"/>
<meta property="article:tag" content="PE Header"/>
<meta property="article:tag" content="Rich Header"/>
<meta property="article:tag" content="Russian"/>
<meta property="article:tag" content="stream cipher"/>
<meta property="article:tag" content="symbols"/>
<meta property="article:tag" content="Toolkit"/>
<meta property="article:tag" content="WSJ"/>
<meta property="article:tag" content="XML"/>
<meta property="article:tag" content="xor"/>
<meta property="article:tag" content="Yes Exploit System"/>
</head>

<body id="www-fireeye-com" class="blog"><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display:none;direction:ltr;">
<div id="wm-ipp" style="position:fixed;left:0;top:0;right:0;">
<div id="donato" style="position:relative;width:100%;">
  <div id="donato-base">
    <iframe id="donato-if" src="https://archive.org/includes/donate.php?as_page=1&amp;platform=wb&amp;referer=https%3A//web.archive.org/web/20140428201836/http%3A//www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html"
	    scrolling="no" frameborder="0" style="width:100%; height:100%">
    </iframe>
  </div>
</div><div id="wm-ipp-inside">
  <div id="wm-toolbar" style="position:relative;display:flex;flex-flow:row nowrap;justify-content:space-between;">
    <div id="wm-logo" style="/*width:110px;*/padding-top:12px;">
      <a href="/web/" title="Wayback Machine home page"><img src="/_static/images/toolbar/wayback-toolbar-logo-200.png" srcset="/_static/images/toolbar/wayback-toolbar-logo-100.png, /_static/images/toolbar/wayback-toolbar-logo-150.png 1.5x, /_static/images/toolbar/wayback-toolbar-logo-200.png 2x" alt="Wayback Machine" style="width:100px" border="0" /></a>
    </div>
    <div class="c" style="display:flex;flex-flow:column nowrap;justify-content:space-between;flex:1;">
      <form class="u" style="display:flex;flex-direction:row;flex-wrap:nowrap;" target="_top" method="get" action="/web/submit" name="wmtb" id="wmtb"><input type="text" name="url" id="wmtbURL" value="http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" onfocus="this.focus();this.select();" style="flex:1;"/><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20140428201836" /><input type="submit" value="Go" />
      </form>
      <div style="display:flex;flex-flow:row nowrap;align-items:flex-end;">
                <div class="s" id="wm-nav-captures" style="flex:1;">
                    <a class="t" href="/web/20140428201836*/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="See a list of every capture for this URL">6 captures</a>
          <div class="r" title="Timespan for captures of this URL">28 Apr 2014 - 29 May 2022</div>
          </div>
        <div class="k">
          <a href="" id="wm-graph-anchor">
            <div id="wm-ipp-sparkline" title="Explore captures for this URL" style="position: relative">
              <canvas id="wm-sparkline-canvas" width="725" height="27" border="0"></canvas>
            </div>
          </a>
        </div>
      </div>
    </div>
    <div class="n">
      <table>
        <tbody>
          <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
          <tr class="m">
            <td class="b" nowrap="nowrap">Mar</td>
            <td class="c" id="displayMonthEl" title="You are here: 20:18:36 Apr 28, 2014">APR</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20140809023302/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="09 Aug 2014"><strong>Aug</strong></a></td>
          </tr>
          <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
          <tr class="d">
            <td class="b" nowrap="nowrap"><img src="/_static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" /></td>
            <td class="c" id="displayDayEl" style="width:34px;font-size:22px;white-space:nowrap;" title="You are here: 20:18:36 Apr 28, 2014">28</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20140809023302/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="02:33:02 Aug 09, 2014"><img src="/_static/images/toolbar/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0" /></a></td>
          </tr>
          <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
          <tr class="y">
            <td class="b" nowrap="nowrap">2013</td>
            <td class="c" id="displayYearEl" title="You are here: 20:18:36 Apr 28, 2014">2014</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20200607083752/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="07 Jun 2020"><strong>2020</strong></a></td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="r" style="display:flex;flex-flow:column nowrap;align-items:flex-end;justify-content:space-between;">
      <div id="wm-btns" style="text-align:right;height:23px;">
                <span class="xxs">
          <div id="wm-save-snapshot-success">success</div>
          <div id="wm-save-snapshot-fail">fail</div>
          <a id="wm-save-snapshot-open" href="#" title="Share via My Web Archive" >
            <span class="iconochive-web"></span>
          </a>
          <a href="https://archive.org/account/login.php" title="Sign In" id="wm-sign-in">
            <span class="iconochive-person"></span>
          </a>
          <span id="wm-save-snapshot-in-progress" class="iconochive-web"></span>
        </span>
                <a class="xxs" href="http://faq.web.archive.org/" title="Get some help using the Wayback Machine" style="top:-6px;"><span class="iconochive-question" style="color:rgb(87,186,244);font-size:160%;"></span></a>
        <a id="wm-tb-close" href="#close" style="top:-2px;" title="Close the toolbar"><span class="iconochive-remove-circle" style="color:#888888;font-size:240%;"></span></a>
      </div>
      <div id="wm-share" class="xxs">
        <a href="/web/20140428201836/http://web.archive.org/screenshot/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html"
           id="wm-screenshot"
           title="screenshot">
          <span class="wm-icon-screen-shot"></span>
        </a>
        <a href="#" id="wm-video" title="video">
          <span class="iconochive-movies"></span>
        </a>
        <a id="wm-share-facebook" href="#" data-url="https://web.archive.org/web/20140428201836/http://www.fireeye.com:80/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="Share on Facebook" style="margin-right:5px;" target="_blank"><span class="iconochive-facebook" style="color:#3b5998;font-size:160%;"></span></a>
        <a id="wm-share-twitter" href="#" data-url="https://web.archive.org/web/20140428201836/http://www.fireeye.com:80/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="Share on Twitter" style="margin-right:5px;" target="_blank"><span class="iconochive-twitter" style="color:#1dcaff;font-size:160%;"></span></a>
      </div>
      <div style="padding-right:2px;text-align:right;white-space:nowrap;">
        <a id="wm-expand" class="wm-btn wm-closed" href="#expand"><span id="wm-expand-icon" class="iconochive-down-solid"></span> <span class="xxs" style="font-size:80%;">About this capture</span></a>
      </div>
    </div>
  </div>
    <div id="wm-capinfo" style="border-top:1px solid #777;display:none; overflow: hidden">
        <div id="wm-capinfo-notice" source="api"></div>
                <div id="wm-capinfo-collected-by">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center">COLLECTED BY</div>
    <div style="padding:3px;position:relative" id="wm-collected-by-content">
            <div style="display:inline-block;vertical-align:top;width:50%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/alexacrawls);"></span>
		Organization: <a style="color:#33f;" href="https://archive.org/details/alexacrawls" target="_new"><span class="wm-title">Alexa Crawls</span></a>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  Starting in 1996, <a href="http://www.alexa.com/">Alexa Internet</a> has been donating their crawl data to the Internet Archive.  Flowing in every day, these data are added to the <a href="http://web.archive.org/">Wayback Machine</a> after an embargo period.
	</div>
	      </div>
      <div style="display:inline-block;vertical-align:top;width:49%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/alexacrawls)"></span>
		<div>Collection: <a style="color:#33f;" href="https://archive.org/details/alexacrawls" target="_new"><span class="wm-title">Alexa Crawls</span></a></div>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  Starting in 1996, <a href="http://www.alexa.com/">Alexa Internet</a> has been donating their crawl data to the Internet Archive.  Flowing in every day, these data are added to the <a href="http://web.archive.org/">Wayback Machine</a> after an embargo period.
	</div>
	      </div>
    </div>
    </div>
    <div id="wm-capinfo-timestamps">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center" title="Timestamps for the elements of this page">TIMESTAMPS</div>
    <div>
      <div id="wm-capresources" style="margin:0 5px 5px 5px;max-height:250px;overflow-y:scroll !important"></div>
      <div id="wm-capresources-loading" style="text-align:left;margin:0 20px 5px 5px;display:none"><img src="/_static/images/loading.gif" alt="loading" /></div>
    </div>
    </div>
  </div></div></div></div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20140428201836/http://www.fireeye.com:80/blog/technical/malware-research/2010/03/black-energy-crypto.html</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html","20140428201836",1996,"/_static/",["/_static/css/banner-styles.css?v=S1zqJCYt","/_static/css/iconochive.css?v=3PDvdIFv"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//web.archive.org/web/20140428201836/http://connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
	<div id="Wrapper">
		<div id="WrapperContent">
			<div id="Header" class="selfClear">
				<div id="SiteId"><a href="/web/20140428201836/http://www.fireeye.com/" title="FireEye: Leader in Advanced Threat Protection"><img src="/web/20140428201836im_/http://www.fireeye.com/images/logo.png" alt="FireEye Zero-Day Exploit &amp; Advanced Persistent Threat Protection Systems"/></a></div>
				<div id="Toolbar" class="selfClear">
					<ul class="links selfClear">
						<li class="first"><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/fe-on-demand-long.html?parameter=FEL_FE_HP_TXT" target="_new" title="Find out about next generation threat protection from FireEye">Get a Demo</a></li>
						<li class=""><a href="/web/20140428201836/http://www.fireeye.com/support/" title="Customer Support">Customer Support</a></li>
						<li class="last"><a href="/web/20140428201836/http://www.fireeye.com/company/contact.html" title="Contact FireEye">Contact Us</a></li>
						<li class="search">
							<form action="/web/20140428201836/http://www.fireeye.com/website/search-results.html" id="cse-search-box">
								<input name="cx" value="005750426036427330785:gu68gdpeatg" type="hidden">
								<input name="cof" value="FORID:11" type="hidden">
								<input name="ie" value="UTF-8" type="hidden">
								<fieldset class="selfClear">
									<input type="search" class="search" name="q" size="24"/>
									<input type="submit" class="submit" name="sa" value="Search"/>
								</fieldset>
							</form>
						</li>
					</ul>
				</div>
				<div id="NavigationPrimary">
					<ul class="selfClear">
						<li class="first"><a href="/web/20140428201836/http://www.fireeye.com/blog/" target="_self" title="All Posts">All Posts</a></li>
						<li class="last"><a href="/web/20140428201836/http://www.fireeye.com/" target="_self" title="FireEye Home">FireEye Home</a></li>
					</ul>
				</div>
			</div><!-- div#Header -->
		<div id="MainBody" class="selfClear">
			<div id="Mast" class="selfClear">
				<h1>Blog</h1>
			</div>


	<div id="MainChannel">
			<div id="Content">
				<div id="ContentChannel">

				
					
                    <article id="post-85" class="post-85 post type-post status-publish format-standard hentry category-malware-research tag-comp-id tag-bad-crypto tag-black-energy tag-citibank tag-coff tag-cr4sh tag-cryptanalysis tag-crypto tag-exe-header tag-hexdumps tag-howto tag-known-plaintext-attack tag-malware tag-pe-header tag-rich-header tag-russian tag-stream-cipher tag-symbols tag-toolkit tag-wsj tag-xml tag-xor tag-yes-exploit-system">
                        <header class="entry-header">
                            <h2 class="entry-title">Black Energy Crypto</h2>
                    
                                                        <div class="entry-meta selfClear">
															<div class="entry-meta-block selfClear">
															<time class="entry-date" datetime="2010-03-03T12:54:14+00:00" pubdate="pubdate">March 3, 2010</time> <span class="sep"> | </span> <span class="by-author"><span class="sep">By </span><a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/author/julia-wolf" title="Posts by Julia Wolf" class="url fn" rel="author">Julia Wolf</a></span> <span class="sep"> | </span> <span class="category_list"><a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/category/technical/malware-research" title="View all posts in Advanced Malware" rel="category tag">Advanced Malware</a></span>																													</div><!-- .entry-meta -->
                                                    </header><!-- .entry-header -->
                    
                        <div class="entry-content">
                            <p><a id="Intro" name="Intro"><br/>
<h2>Introduction</h2>
<p></a></p>
<p>Black Energy has been in the news again recently (well, <em>it was recent</em> back when I wrote the first draft of this).
<p/>
<p>I&#8217;m not here to talk about <a href="https://web.archive.org/web/20140428201836/http://www.google.com/search?q=citigroup+%22black+energy%22">Citigroup</a>, I&#8217;m here to talk about cryptography, and how to fail at it. That being said, <a href="https://web.archive.org/web/20140428201836/http://online.wsj.com/article/SB126145280820801177.html">allegedly Citibank was &#8220;hacked&#8221; using Black Energy, according to the Wall Street Journal</a>. Citigroup flat out denies it, and aside from this assertion from the WSJ, there&#8217;s no other information. But it doesn&#8217;t make sense that &#8220;Black Energy&#8221; itself, or what is commonly referred to by that name, was used for some kind of banking attack; It&#8217;s a DDoS bot.</p>
<p>Now, it could actually be Black Energy that&#8217;s responsible, or something different which just looks like Black Energy. But lately, a very Black Energy-like DDoS &#8220;module&#8221; tends to get installed along with other malware such as Zeus, via the &#8220;<a href="https://web.archive.org/web/20140428201836/http://www.google.com/search?q=%22yes+exploit+system%22">Yes Exploit System</a>&#8220;, or via Oficla/Sasfis, and like every bot, it can download and execute arbitrary files upon command. I have no idea what, if anything, happened at Citibank, but I speculate that a Black Energy bot was just along for the ride. <span title="? Yes, and that's not all! Get infected by Zeus right now, and as a bonus, you'll get this Black Energy bot for free! Operators are standing by.">An infection of one bot, quickly leads to an infestation of many. [cute metaphor about infestations goes here] It&#8217;s kinda like a big ball of malware goo.</span></p>
<h3>Analogy</h3>
<p>Ok, so you remember how the five robot lions in the show &#8220;<a href="https://web.archive.org/web/20140428201836/http://en.wikipedia.org/wiki/Voltron">Voltron</a>&#8221; would form a giant robot to battle space monsters? Each lion had its own distinct identity, like one was green, and another one was pink, etc. but they could combine to form a single robot, with a distinct identity apart from each individual lion. Ok, well malware also combines together to form a giant robot. <!-- but everyone keep talking about the individual parts. --><br/>
<br/><small><small><br/>
[I was going to make the same analogy using the <a href="https://web.archive.org/web/20140428201836/http://en.wikipedia.org/wiki/Constructicons">Constructicons</a> as examples, they're evil bots you see&hellip; but that's just a little too obscure.]</small></small>
</p>
<p>Anyway, so for something less ambiguous&hellip; onto the technical part!</p>
<p><!-- ========================== --></p>
<p><span id="more-85"></span><br/>
<a id="KindaTech" name="KindaTech"><br/>
<h2>The Technical Part</h2>
<p></a></p>
<h3>Exposition</h3>
<p>I&#8217;m never certain about how much information I should publicly reveal about how much is known about a particular malware. It&#8217;s very ego gratifying to say: <span title="u r doin it wrong u suck at teh malware"><q>Hey, the way you did this thing sucks.</q></span></p>
<p>I&#8217;m certain that word will get back to the original malware author(s), and they&#8217;ll fix the bug(s).</p>
<p>So, in the case of Black Energy, or the bot formerly known as Black Energy, someone [Cr4sh?] already got a clue that they were doing it wrong, and fixed it. So this crypto trick I&#8217;m about to reveal below doesn&#8217;t work anymore.</p>
<p>The 1.x versions of Black Energy just encoded their communications with <a href="https://web.archive.org/web/20140428201836/http://en.wikipedia.org/wiki/Base64">Base64</a>.<br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://asert.arbornetworks.com/2007/10/blackenergy-ddos-bot-analysis-available/" title="Is it spelled José Nazario?">Jose Nazario </a> wrote a good paper on it here:<br/>
<a href="https://web.archive.org/web/20140428201836/http://atlas-public.ec2.arbor.net/docs/BlackEnergy+DDoS+Bot+Analysis.pdf">BlackEnergy DDoS Bot Analysis.pdf</a> [PDF]<br/><br/>
And some other stuff about it: <a href="https://web.archive.org/web/20140428201836/http://malwarelab.org/tag/black-energy/">Posts tagged <q>Black Energy</q></a><br/><br/>
And I&#8217;m sure that Joe Stewart has probably said <a href="https://web.archive.org/web/20140428201836/http://www.google.com/search?q=%22joe+stewart%22+%22black+energy%22">something about it somewhere, sometime</a>.
</p>
<h3>Update</h3>
<p>Cr4sh &mdash; author of the original Black Energy 1.x bot(s) &mdash; released a public statement, for those who can&#8217;t read Russian (or read it less well than even I do), I&#8217;ll summarize the relivant parts:</p>
<ul>
<li>Black Energy was created as a simple DDoS bot without any rootkits, infectors, spyware, etc.</li>
<li>Cr4sh doesn&#8217;t how how this relates to stealing banking information.</li>
<li>The source code was available to many private parties, so someone must have modified it.</li>
<li>Only an idiot would put their name on a criminal bot.</li>
<li>Cr4sh says he&#8217;s not linked to any botnet networks, programs, or organizations.</li>
</ul>
<blockquote><p>Black Energy &#8211; &#x044D;&#x0442;&#x043E; DDoS-&#x0431;&#x043E;&#x0442;, &#x043A;&#x043E;&#x0442;&#x043E;&#x0440;&#x044B;&#x0439; &#x0431;&#x044B;&#x043B; &#x0440;&#x0435;&#x0437;&#x0443;&#x043B;&#x044C;&#x0442;&#x0430;&#x0442;&#x043E;&#x043C; &#x043F;&#x0440;&#x043E;&#x0432;&#x0435;&#x0434;&#x0435;&#x043D;&#x043D;&#x043E;&#x0439; &#x043D;&#x0430; &#x0437;&#x0430;&#x043A;&#x0430;&#x0437; (&#x0433;&#x043E;&#x0434;&#x0443; &#x0432; 2006-2007) &#x0440;&#x0430;&#x0431;&#x043E;&#x0442;&#x044B;, &#x043F;&#x043E; &#x0441;&#x043E;&#x0437;&#x0434;&#x0430;&#x043D;&#x0438;&#x044E; &#x043F;&#x0440;&#x043E;&#x0441;&#x0442;&#x043E;&#x0433;&#x043E; &#x0438; &#x043A;&#x043E;&#x043C;&#x043F;&#x0430;&#x043A;&#x0442;&#x043D;&#x043E;&#x0433;&#x043E; &#x0440;&#x0430;&#x0431;&#x043E;&#x0447;&#x0435;&#x0433;&#x043E; &#x0438;&#x043D;&#x0441;&#x0442;&#x0440;&#x0443;&#x043C;&#x0435;&#x043D;&#x0442;&#x0430;, &#x0431;&#x0435;&#x0437; &#x0432;&#x0441;&#x044F;&#x043A;&#x0438;&#x0445; &#x0440;&#x0443;&#x0442;&#x043A;&#x0438;&#x0442;&#x043E;&#x0432;, &#x0438;&#x043D;&#x0444;&#x0435;&#x043A;&#x0442;&#x043E;&#x0440;&#x043E;&#x0432; &#x0438; &#x043A;&#x0430;&#x043A;&#x0438;&#x0445; &#x0431;&#x044B; &#x0442;&#x043E; &#x043D;&#x0438; &#x0431;&#x044B;&#x043B;&#x043E; spyware-&#x0444;&#x0443;&#x043D;&#x043A;&#x0446;&#x0438;&#x0439;.
</p></blockquote>
<blockquote><p>&#x041A;&#x0430;&#x043A;&#x0438;&#x043C; &#x043E;&#x0431;&#x0440;&#x0430;&#x0437;&#x043E;&#x043C; DDoS-&#x0431;&#x043E;&#x0442; &#x043E;&#x0442;&#x043D;&#x043E;&#x0441;&#x0438;&#x0442;&#x0441;&#x044F; &#x043A; &#x043A;&#x0440;&#x0430;&#x0436;&#x0435; &#x0431;&#x0430;&#x043D;&#x043A;&#x043E;&#x0432;&#x0441;&#x043A;&#x043E;&#x0439; &#x0438;&#x043D;&#x0444;&#x043E;&#x0440;&#x043C;&#x0430;&#x0446;&#x0438;&#x0438; &#8211; &#x044F; &#x0432; &#x0434;&#x0443;&#x0448;&#x0435; &#x043D;&#x0435; &#x0435;&#x0431;&#x0443;. &#x041E;&#x0434;&#x043D;&#x0430;&#x043A;&#x043E;, &#x0442;&#x043E;&#x0442; &#x0444;&#x0430;&#x043A;&#x0442;, &#x0447;&#x0442;&#x043E; &#x0435;&#x0433;&#x043E; &#x0438;&#x0441;&#x0445;&#x043E;&#x0434;&#x043D;&#x0438;&#x043A;&#x0438; &#x0431;&#x044B;&#x043B;&#x0438; &#x0434;&#x043E;&#x0441;&#x0442;&#x0443;&#x043F;&#x043D;&#x044B; &#x043C;&#x043D;&#x043E;&#x0433;&#x0438;&#x043C; &#x043B;&#x044E;&#x0434;&#x044F;&#x043C; &#x0432;&#x043E; &#x0432;&#x0441;&#x0435;&#x0432;&#x043E;&#x0437;&#x043C;&#x043E;&#x0436;&#x043D;&#x044B;&#x0445; [&#x043F;&#x043E;&#x043B;&#x0443;]&#x043F;&#x0440;&#x0438;&#x0432;&#x0430;&#x0442;&#x043D;&#x044B;&#x0445; &#x0442;&#x0443;&#x0441;&#x043E;&#x0432;&#x043A;&#x0430;&#x0445;, &#x043C;&#x043E;&#x0436;&#x0435;&#x0442; &#x043E;&#x0437;&#x043D;&#x0430;&#x0447;&#x0430;&#x0442;&#x044C;, &#x0447;&#x0442;&#x043E; &#x043A;&#x0442;&#x043E;-&#x0442;&#x043E; &#x0437;&#x0430;&#x0442;&#x043E;&#x0447;&#x0438;&#x043B; &#x0435;&#x0433;&#x043E; &#x043F;&#x043E;&#x0434; &#x0441;&#x0432;&#x043E;&#x0438; &#x043D;&#x0443;&#x0436;&#x0434;&#x044B;. &#x041F;&#x043E;&#x0434;&#x043E;&#x0437;&#x0440;&#x0435;&#x0432;&#x0430;&#x0442;&#x044C; &#x0436;&#x0435; &#x0432; &#x043F;&#x0440;&#x0438;&#x0447;&#x0430;&#x0441;&#x0442;&#x043D;&#x043E;&#x0441;&#x0442;&#x0438; &#x043A; &#x043A;&#x0440;&#x0438;&#x043C;&#x0438;&#x043D;&#x0430;&#x043B;&#x044C;&#x043D;&#x044B;&#x043C; &#x043C;&#x0430;&#x0445;&#x0438;&#x043D;&#x0430;&#x0446;&#x0438;&#x044F;&#x043C; &#x0430;&#x0432;&#x0442;&#x043E;&#x0440;&#x0430; &#x0431;&#x043E;&#x0442;&#x0430;, &#x0447;&#x0435;&#x0439; &#x0430;&#x0432;&#x0442;&#x043E;&#x0433;&#x0440;&#x0430;&#x0444; &#x0441;&#x0442;&#x043E;&#x044F;&#x043B; &#x043D;&#x0430; &#x043F;&#x0443;&#x0431;&#x043B;&#x0438;&#x0447;&#x043D;&#x043E; &#x0434;&#x043E;&#x0441;&#x0442;&#x0443;&#x043F;&#x043D;&#x044B;&#x0445; &#x0431;&#x0438;&#x043B;&#x0434;&#x0430;&#x0445; 3-&#x0445; &#x043B;&#x0435;&#x0442;&#x043D;&#x0435;&#x0439; &#x0434;&#x0430;&#x0432;&#x043D;&#x043E;&#x0441;&#x0442;&#x0438;, &#x043C;&#x043E;&#x0436;&#x0435;&#x0442; &#x0442;&#x043E;&#x043B;&#x044C;&#x043A;&#x043E; &#x043F;&#x043E;&#x043B;&#x043D;&#x044B;&#x0439; &#x0438;&#x0434;&#x0438;&#x043E;&#x0442;.</p></blockquote>
<blockquote><p>PS: &#x044F; &#x0436;&#x0435; &#x0432; &#x043D;&#x0430;&#x0441;&#x0442;&#x043E;&#x044F;&#x0449;&#x0435;&#x0435; &#x0432;&#x0440;&#x0435;&#x043C;&#x044F; &#x043D;&#x0438;&#x043A;&#x0430;&#x043A;&#x0438;&#x043C; &#x0431;&#x043E;&#x043A;&#x043E;&#x043C; &#x043D;&#x0435; &#x0441;&#x0432;&#x044F;&#x0437;&#x0430;&#x043D; &#x0441; &#x0431;&#x043E;&#x0442;&#x043D;&#x0435;&#x0442;-&#x0441;&#x0435;&#x0442;&#x044F;&#x043C;&#x0438; &#x0438; &#x043F;&#x0440;&#x043E;&#x0433;&#x0440;&#x0430;&#x043C;&#x043C;&#x0430;&#x043C;&#x0438; &#x0434;&#x043B;&#x044F; &#x0438;&#x0445; &#x043E;&#x0440;&#x0433;&#x0430;&#x043D;&#x0438;&#x0437;&#x0430;&#x0446;&#x0438;&#x0438;.</p></blockquote>
<h3>Exposition</h3>
<p>Someone sent me a .pcap of some recent encrypted Black Energy communications; And had an urgent need to know what was being transmitted. But they didn&#8217;t have a copy of the bot which spewed forth this data, and the associated C&#038;C was down.</p>
<p>Well, maybe it was this sample:<br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://www.virustotal.com/analisis/58db0a680d11647fa5a74fcda1936ff54484a259300e1d92d7d8f656f62bdb96-1253309833">45f3085144f6875b27ae173f22856198</a> [<a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/?q=ocsearch&amp;ocq=45f3085144f6875b27ae173f22856198">Live Sample</a>] [<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=1e0592d004c65f7249d06840d62268b3b">Anubus</a>] [<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=13dc063d179212cc4394a3bcd9c800c4e">Another Anubus</a>] [<a href="https://web.archive.org/web/20140428201836/http://www.threatexpert.com/report.aspx?md5=45f3085144f6875b27ae173f22856198">ThreatExpert</a>]<br/><br/>
Or this one:<br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://www.virustotal.com/sv/analisis/4d8ea0b7e5f134a079c22d6655259cbbc56ce9d2a8a89fae2207c0ba26ce045a-1253048086">0eb19a4f7f3de5a2bb6460230f7ddfe4</a> [<a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/?q=ocsearch&amp;ocq=0eb19a4f7f3de5a2bb6460230f7ddfe4">Live Sample</a>] [<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=15921f68dbf4f3be4255a4705efd2451f">Anubus</a>]<br/>
[<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=17934ae35b0ca84b4ed37e23eddc50f96">Another Anubus</a>] [<a href="https://web.archive.org/web/20140428201836/http://www.threatexpert.com/report.aspx?md5=0eb19a4f7f3de5a2bb6460230f7ddfe4">ThreatExpert</a>]<br/><br/>
Or this one:<br/><br/>
[etc.]
</p>
<p>In any case, sometimes it&#8217;s usually a bit faster to just attack the crypto head-on, rather than reverse engineering a whole program looking for the decryption routine. This is because most malware authors (and sadly, many commercial software authors too) implement the crypto routine(s) incorrectly, making them fairly trivial to crack. So, rather than track down a sample and reversing it, I just did some math on the cyphertexts, looking for common mistakes.</p>
<p><a id="Tech" name="Tech"><br/>
<h2>The Actual Technical Part</h2>
<p></a></p>
<p>There was nothing known [to me or Google] about the encryption being used. But I noticed some very strong patterns in the data. It was obviously some kind of stream cipher, but not RC4 from what I can tell. I ran all the usual tests (<tt>add</tt>, <tt>subtract</tt>, or <tt>xor</tt> with <a href="https://web.archive.org/web/20140428201836/http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher">repeating</a> or incrementing patterns), it wasn&#8217;t one of those.</p>
<h3>Stream Cypher</h3>
<p>This version of Black energy is reusing the same keystream for multiple plaintexts. This is an absolutely fatal flaw for any stream cypher; Take a look at this example to see why. I say it&#8217;s obviously a stream cypher with a constant key, because if you <code>XOR</code> two cyphertexts together, the keysteam cancels out, and at every location there was a byte in one plaintext, which is the same as the byte at the same location in the other, you get a <code>NULL</code>. And transpositionally, if there was a <code>NULL</code> byte in either plaintext, the plaintext byte from the opposite plaintext will emerge.</p>
<p>Remember this identity: <code>(Message<sub>1</sub> &oplus; Keystream) &oplus; (Message<sub>2</sub> &oplus; Keystream) = Message<sub>1</sub> &oplus; Message<sub>2</sub></code></p>
<h3>For Example</h3>
<blockquote><pre><small><code>00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000030  00 00 00 00 00 00 00 00  00 00 00 00 10 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000080  8a d1 0b 61 8a d1 0b 61  8a d1 0b 61 8a d1 0b 61  |...a...a...a...a|
00000090  8a d1 59 61 8b d1 0b 61  4c d2 09 61 89 d1 0b 61  |..Ya...aL..a...a|
000000a0  9c d5 0b 61 8a d1 0b 61  8a d1 09 61 80 d1 0b 61  |...a...a...a...a|
000000b0  09 d9 57 61 ab d1 0b 61  8f dd 6a 61 9e d1 0b 61  |..Wa...a..ja...a|
000000c0  8a d1 37 61 8e d1 0b 61  8a d1 0d 61 8a d1 0b 61  |..7a...a...a...a|
000000d0  fe ba 90 af 8b d1 0b 61  52 69 63 68 a9 df a9 c7  |.......aRich....|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|
000000f0  79 42 b3 48 00 00 00 00  50 45 00 00 ac 01 0a 21  |yB.H....PE.....!|
00000100  9e 27 a1 42 00 0e 00 00  00 3a 00 00 e0 00 0e 21  |.'.B.....:.....!|
00000110  a7 11 07 0a 00 1e 00 00  00 30 00 00 00 00 00 10  |.........0......|
00000120  41 00 00 00 00 12 00 00  04 20 00 00 00 00 00 10  |A........ ......|
00000130  04 10 00 00 00 02 00 00  04 70 00 00 00 04 00 00  |.........p......|
00000140  04 00 00 00 02 00 00 04  00 50 10 00 00 14 00 00  |.........P......|
00000150  00 00 10 00 02 10 00 04  00 00 10 00 10 10 00 00  |................|
00000160  10 26 10 00 62 10 00 00  08 22 00 00 a4 00 00 00  |.&amp;..b...."......|
00000170  10 23 00 00 63 00 00 00  00 21 00 00 64 00 00 00  |.#..c....!..d...|
00000180  00 00 00 00 00 00 00 00  00 60 00 00 bc 00 00 00  |.........`......|
00000190  00 00 00 00 00 00 00 00  00 40 00 00 20 01 00 00  |.........@.. ...|
000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001c0  00 20 00 00 b4 00 00 00  00 00 00 00 00 00 00 00  |. ..............|
000001d0  00 20 00 00 5c 00 00 00  00 00 00 00 00 00 00 00  |. ..\...........|
000001e0  2e 74 65 78 74 00 00 00  00 0d 00 00 00 10 00 00  |.text...........|
000001f0  2e 7a 65 78 74 04 00 00  dd 0d 00 00 00 10 00 00  |.zext...........|
00000200  00 0e 00 00 20 04 00 60  2e 72 64 61 74 61 00 00  |.... ..`.rdata..|
00000210  72 06 00 00 20 20 00 60  2e 7a 64 61 74 73 00 00  |r...  .`.zdats..|
00000220  73 03 00 00 00 20 00 00  00 04 00 00 40 12 00 40  |s.... ......@..@|
00000230  2e 64 61 74 61 00 00 00  70 2e 00 00 40 30 00 40  |.data...p...@0.@|
00000240  2e 42 61 74 61 1a 00 00  f0 09 00 00 00 30 00 00  |.Bata........0..|
00000250  00 02 00 00 40 16 00 c0  2e 72 65 6c 6f 63 00 00  |....@....reloc..|
00000260  4c 01 00 00 40 60 00 c0  2e 70 65 6c 6f 23 00 00  |L...@`...pelo#..|
00000270  86 01 00 00 00 40 00 00  00 02 00 00 40 18 00 42  |.....@......@..B|
00000280  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 42  |............@..B|
00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*</code></small></pre>
</blockquote>
<p>Wow, that sure does look like two EXE&#8217;s XOR&#8217;d together, doesn&#8217;t it?</p>
<p><a id="Example" name="Example"><br/>
<h2>Step By Step Example</h2>
<p></a></p>
<p>Since this Anubus report is public, I&#8217;ll use it for my example: <br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=15921f68dbf4f3be4255a4705efd2451f"> http://anubis.iseclab.org/?action=result&amp;task_id=15921f68dbf4f3be4255a4705efd2451f</a><br/><br/>
Grab the .pcap file <br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://anubis.iseclab.org/?action=result&amp;task_id=15921f68dbf4f3be4255a4705efd2451f&amp;download=traffic.pcap">http://anubis.iseclab.org/?action=result&amp;task_id=15921f68dbf4f3be4255a4705efd2451f&amp;download=traffic.pcap</a><br/><br/>
And extract all of the TCP streams from this .pcap into individual files, with your favorite program for doing that kind of thing. (I think Wireshark will do it; I just always use my own Perl scripts cause it&#8217;s fast and automated.) Stripped of HTTP headers, theses are the files I got:
</p>
<p><table><small><br/>
<tr>
<th>MD5</th>
<th>Timestamp</th>
<th>Source IP:Port</th>
<th>Destination IP:Port</th>
<th>Size</th>
<th>Description</th>
</tr>
<tr>
<td>3e736a6d3f8fe6cf7e54a7658cba9352</td>
<td>1253064020.308867</td>
<td>88.214.243.45:80</td>
<td>192.168.0.2:1038</td>
<td>785</td>
<td>Encrypted XML</td>
</tr>
<tr>
<td>5394487c93a748e6b0b182101ba56a56</td>
<td>1253064023.563605</td>
<td>88.214.243.45:80</td>
<td>192.168.0.2:1039</td>
<td>11264</td>
<td>Encrypted &#8220;ddos&#8221;</td>
</tr>
<tr>
<td>d15af19966a4782ede44a1e62f8cf70b</td>
<td>1253064029.663532</td>
<td>88.214.243.45:80</td>
<td>192.168.0.2:1040</td>
<td>6657</td>
<td>Encrypted &#8220;http&#8221;</td>
</tr>
<tr>
<td>5730dbddc77de80d3d7e053699cb2136</td>
<td>1253064034.512609</td>
<td>88.214.243.45:80</td>
<td>192.168.0.2:1041</td>
<td>16896</td>
<td>Encrypted &#8220;syn&#8221;</td>
</tr>
<p></small></table>
</p>
<p title="If you're wondering how I knew, I just XOR'd every combination and looked for the most printable text out of all of them.">
So, since EXE files are mostly NULLs at the beginning&hellip; And the &#8220;syn&#8221; one seems to have the most NULLs at the beginning&hellip; It&#8217;s the one that yields the most amount of printable text.
</p>
<blockquote><p><small>
<pre><code>hexdump -C Config_x_syn
00000000  71 65 e8 6d 6f 20 76 65  76 73 69 6f 91 c2 22 31  |qe.mo vevsio.."1|
00000010  96 30 22 3f 3e 0a 3c 62  2b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;b+ernel&gt;.|
00000020  3c 70 6c 75 67 69 6e 73  3e 0a 3c 70 6c 75 67 69  |&lt;plugins&gt;.&lt;plugi|
00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 9b 3c 2f 6e  |n&gt;.&lt;name&gt;ddo.&lt;/n|
00000040  6f 72 df 30 0a 88 7f a8  53 cb 68 23 a3 1f 65 54  |or.0....S.h#..eT|
00000050  46 05 45 02 01 06 08 1c  5f 67 1c 4c 11 02 1b 08  |F.E....._g.L....|
00000060  1d 4e 5c 6f 1c 02 19 1b  47 00 00 1e 4e 73 3d 41  |.N\o....G...Ns=A|
00000070  00 0a 5a 0d 5a 79 7d 36  0b 6e 61 6d 65 3e 0a 3c  |..Z.Zy}6.name&gt;.&lt;|
00000080  11 0a be 86 4a 61 cc 98  12 32 8d d0 46 7c d1 cf  |....Ja...2..F|..|
00000090  49 6c c1 ac 1d 21 d2 ca  95 66 96 c8 1f 04 9e d6  |Il...!...f......|
000000a0  5c 73 98 cf 4f 30 a8 9a  ce 67 92 c3 16 7d db c8  |\s..O0...g...}..|
000000b0  1f 21 cd c7 68 6b 9c ac  1a 74 a7 d4 57 67 cd c8  |.!..hk...t..Wg..|
000000c0  18 33 c2 89 54 6b d0 d5  4f 6d 96 98 28 32 8d d6  |.3..Tk..Om..(2..|
000000d0  3e 1c 04 01 4d 30 a8 9a  2f 70 6c 75 67 69 6e 73  |&gt;...M0../plugins|
000000e0  3e 0a 3c 63 6d 64 73 3e  5a 79 2f 63 21 65 77 3e  |&gt;.&lt;cmds&gt;Zy/c!ew&gt;|
000000f0  73 7e c3 24 67 5f 64 61  74 61 3e 0a dc 64 6a 4e  |s~.$g_data&gt;..djN|
00000100  78 3f 3b 7e 63 7e 5f 73  69 40 65 3e 31 30 30 30  |x?;~c~_si@e&gt;1000|
00000110  90 3f 74 63 70 4f 73 69  7a 45 3e 0d 0a 3c 74 73  |.?tcpOsizE&gt;..&lt;ts|
00000120  70 4f 66 72 65 73 3e 35  34 3c 2f 74 63 70 5f 66  |pOfres&gt;54&lt;/tcp_f|
00000130  76 65 71 3e 0d 0a 3c 74  63 00 5f 74 68 76 65 61  |veq&gt;..&lt;tc._thvea|
00000140  64 73 3e 35 3e 2f 74 67  70 5f 64 68 72 75 61 64  |ds&gt;5&gt;/tgp_dhruad|
00000150  73 3e 1d 0a 3c 65 64 70  5f 73 69 7a 75 3e 31 30  |s&gt;..&lt;edp_sizu&gt;10|
00000160  20 16 3c 2f 17 64 70 5f  7b 4b 7a 65 8a 0d 0a 3c  | .&lt;/.dp_{Kze...&lt;|
00000170  75 64 70 5f 66 72 65 71  3e 35 30 3c 2f 75 64 70  |udp_freq&gt;50&lt;/udp|
00000180  5f 66 72 65 71 3e 0d 0a  3c 15 64 70 e3 74 68 72  |_freq&gt;..&lt;.dp.thr|
00000190  65 61 64 73 3e 35 3c 2f  75 64 70 5f 74 68 72 65  |eads&gt;5&lt;/udp_thre|
000001a0  61 64 73 3e 0d 0a 3c 69  63 6d 70 5f 73 69 7a 65  |ads&gt;..&lt;icmp_size|
000001b0  3e 31 30 30 30 3c 2f 69  63 6d 70 5f 73 69 7a 65  |&gt;1000&lt;/icmp_size|
000001c0  3e 2d 0a 3c dd 63 6d 70  5f 66 72 65 71 3e 35 30  |&gt;-.&lt;.cmp_freq&gt;50|
000001d0  3c 2f 69 63 6d 70 5f 66  72 65 71 3e 0d 0a 3c 69  |&lt;/icmp_freq&gt;..&lt;i|
000001e0  4d 19 15 27 00 68 72 65  61 69 73 3e 35 2c 2f 69  |M..'.hreais&gt;5,/i|
000001f0  63 63 70 5f 74 6c 72 65  61 64 73 3e 0d 0a 3c 68  |ccp_tlreads&gt;..&lt;h|
00000200  74 74 70 5f 46 72 65 11  10 43 54 51 48 4e 68 74  |ttp_Fre..CTQHNht|
00000210  06 76 5f 66 72 45 71 3e  0d 02 3c 68 74 66 70 5f  |.v_frEq&gt;..&lt;htfp_|
00000220  74 68 72 65 61 64 73 3e  35 3c 2f 68 34 74 70 1f  |threads&gt;5&lt;/h4tp.|
00000230  5a 0c 13 11 00 64 73 3e  4c 01 64 64 6f 43 3e 0a  |Z....ds&gt;L.ddoC&gt;.|
00000240  3c 4e 74 74 70 24 3c 68  74 74 70 5f 66 72 65 71  |&lt;Nttp$&lt;http_freq|
00000250  3e 33 30 3c 6f 68 74 b4  5e 2d 03 1e 0a 12 3e 0d  |&gt;30&lt;oht.^-....&gt;.|
00000260  46 3d 68 74 74 10 5f 74  68 70 65 61 64 33 3e 32  |F=htt._thpead3&gt;2|
00000270  3c 2f 68 74 74 70 5f 74  68 72 65 61 24 73 3e 7e  |&lt;/http_threa$s&gt;~|
00000280  2f 68 74 74 70 3e 0a 3c  73 79 6e 3e 3c 73 79 6e  |/http&gt;.&lt;syn&gt;&lt;syn|
00000290  5f 66 72 65 71 3e 32 30  3c 2f 73 79 6e 5f 66 72  |_freq&gt;20&lt;/syn_fr|
000002a0  65 71 3e 0d 0a 3c 73 79  6e 5f 74 68 72 65 61 64  |eq&gt;..&lt;syn_thread|
000002b0  73 3e 33 3c 2f 73 79 6e  5f 74 68 72 65 61 64 73  |s&gt;3&lt;/syn_threads|
000002c0  3e 3c 2f 73 79 6e 3e 0a  3c 2f 70 6c 67 5f 64 61  |&gt;&lt;/syn&gt;.&lt;/plg_da|
000002d0  74 61 3e 0a 3c 73 6c 65  65 70 66 72 65 71 3e 39  |ta&gt;.&lt;sleepfreq&gt;9|
000002e0  30 30 3c 2f 73 6c 65 65  70 66 72 65 71 3e 0a 3c  |00&lt;/sleepfreq&gt;.&lt;|
000002f0  69 70 3e 31 32 38 2e 31  33 30 2e 35 36 2e 32 32  |ip&gt;128.130.56.22|
00000300  3c 2f 69 70 3e 0a 3c 2f  62 6b 65 72 6e 65 6c 3e  |&lt;/ip&gt;.&lt;/bkernel&gt;|
00000310  0a                                                |.|
00000311
md5sum Config_x_syn
0880df84c5b886cbdd0e0be01deed2f6  Config_x_syn</code></pre>
<p></small></p></blockquote>
<p>Well, that certainly looks like XML doesn&#8217;t it?</p>
<p><a id="Fix1" name="Fix1"><br/>
<h2>Fixup the XML</h2>
<p></a></p>
<p>You can also approach this from the EXE side of things, but most of you are probably better at reading XML than EXE. XML also provides for a lot of redundant plaintext.</p>
<h3>General Procedue</h3>
<p>Since it&#8217;s XML, you know every tag must match up, so one can fix the broken tags easily.</p>
<ul>
<li>Merge the all of the known plaintext you can find from the config files together and make the obvious fixes.
</li>
<li>
<code>XOR</code> this back against the original cyphertext, and you get a big chunk of the keystream.
</li>
<li>
Then <code>XOR</code> this partial keystream against the EXEs.
</li>
<li>
Fix up the EXE headers, so that most of the fields make sense, try to use the RICH header if present, and make sure &#8220;.text&#8221;, &#8220;.data&#8221;, &#8220;.reloc&#8221; are spelled correctly, etc.
</li>
<li>
If you have a large malware zoo, you can look for EXE files from September, that are 11264, 6657, or 16896 bytes long, and match up mostly within the first few hundred bytes to this.<br/><br/>
(The quick way is to just XOR the plaintext you&#8217;ve got so far, against the other plaintext samples in your zoo, and see which one(s) have the lowest entropy.<br/>
It&#8217;s probably one of those. Otherwise you can just try them all if it&#8217;s not too many (and in this case it&#8217;s not too many).)
</li>
<li>
If you don&#8217;t have a sample of one of the EXEs, then just re-<code>XOR</code> again the EXE plaintext you&#8217;ve recovered so far with the original cyphertext.
</li>
<li>
And then <code>XOR</code> that partial keystream back against the config file.
</li>
<li>
Do the same sort of fix-ups you did before (you&#8217;ve got some more bytes now, the ones you just fixed in the EXE).
</li>
<li>
Then re-<code>XOR</code> this back the other way, lather rinse repeat, until you&#8217;re down to just the bits you don&#8217;t know between all four of the plaintexts.
</li>
</ul>
<p>At this point, you&#8217;ll have recovered most of the plaintext/keystream, without knowing the<br/>
password <em>or even the cypher used</em>! This trick works for any cypher that is<br/>
basically <code>$randomness ^ $plaintext</code>, where <code>$randomness</code> gets used more than<br/>
once. There&#8217;s a reason the one-time-pad is <em>one-time</em>-only.</p>
<h3>Step-by-step Example</h3>
<p>If you don&#8217;t have a hex editor, you can use any 8-bit clean text editor to make the changes, be careful not to add or remove any characters, otherwise everything after that point will be shifted. (I use <a href="https://web.archive.org/web/20140428201836/http://joe-editor.sourceforge.net/">Joe</a> as my editor, believe it or not.)</p>
<p><small>[By the way, if you think this part looks like it took me a long time to write. This was actually the least time-intensive part. The introductory paragraphs up at the beginning took the longest to write.]</small></p>
<pre><code>00000000  71 65 e8 6d 6f 20 76 65  76 73 69 6f 91 c2 22 31  |qe.mo vevsio.."1|
00000010  96 30 22 3f 3e 0a 3c 62  2b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;b+ernel&gt;.|
&hellip;
00000300  3c 2f 69 70 3e 0a 3c 2f  62 6b 65 72 6e 65 6c 3e  |&lt;/ip&gt;.&lt;/bkernel&gt;|</code></pre>
<p>
<ul>
<li>We know the first two bytes of the EXE are &#8220;<code>MZ</code>&#8220;, so <code>XOR</code> &#8220;<code>qe</code>&#8221; with &#8220;<code>MZ</code>&#8221; to get &#8220;<code>&lt;?</code>&#8220;</li>
<li>But really, that whole first line can&#8217;t be anything other than &#8220;<code>&lt;?xml version="1.0"?&gt;</code>&#8220;</li>
<li>There is a &#8220;<code>&lt;/bkernel&gt;</code>&#8221; tag at the end, so that must be a &#8220;<code>&lt;bkernel&gt;</code>&#8221; tag at the beginning.</li>
</ul>
<pre><code>00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 9b 3c 2f 6e  |n&gt;.&lt;name&gt;ddo.&lt;/n|
00000040  6f 72 df 30 0a 88 7f a8  53 cb 68 23 a3 1f 65 54  |or.0....S.h#..eT|
&hellip;
00000070  00 0a 5a 0d 5a 79 7d 36  0b 6e 61 6d 65 3e 0a 3c  |..Z.Zy}6.name&gt;.&lt;|
&hellip;
000000d0  3e 1c 04 01 4d 30 a8 9a  2f 70 6c 75 67 69 6e 73  |&gt;...M0../plugins|</code></pre>
<p>
<ul>
<li>It&#8217;s safe to assume that &#8220;<code>ddo<b>\x9B</b></code>&#8221; is really &#8220;<code>ddos</code>&#8220;.</li>
<li>The closing tag &#8220;<code>&lt;/nor<b>\xDF</b>0</code>&#8221; must be &#8220;<code>&lt;/name&gt;</code>&#8220;</li>
<li>And further down, &#8220;<code>6<b>\x0B</b>name&gt;</code>&#8221; can be either &#8220;<code>&lt;name&gt;</code>&#8221; or &#8220;<code>&lt;/name&gt;</code>&#8220;. We&#8217;ll figure it out later.</li>
<li>&#8220;<code><b>\x9A</b>/plugins&gt;</code>&#8221; is <code>"&lt;/plugins&gt;</code>&#8220;.</li>
</ul>
<pre><code>000000f0  73 7e c3 24 67 5f 64 61  74 61 3e 0a dc 64 6a 4e  |s~.$g_data&gt;..djN|
00000100  78 3f 3b 7e 63 7e 5f 73  69 40 65 3e 31 30 30 30  |x?;~c~_si@e&gt;1000|
00000110  90 3f 74 63 70 4f 73 69  7a 45 3e 0d 0a 3c 74 73  |.?tcpOsizE&gt;..&lt;ts|
00000120  70 4f 66 72 65 73 3e 35  34 3c 2f 74 63 70 5f 66  |pOfres&gt;54&lt;/tcp_f|
00000130  76 65 71 3e 0d 0a 3c 74  63 00 5f 74 68 76 65 61  |veq&gt;..&lt;tc._thvea|
00000140  64 73 3e 35 3e 2f 74 67  70 5f 64 68 72 75 61 64  |ds&gt;5&gt;/tgp_dhruad|
00000150  73 3e 1d 0a 3c 65 64 70  5f 73 69 7a 75 3e 31 30  |s&gt;..&lt;edp_sizu&gt;10|</code></pre>
<ul>
<li>&#8220;<code>djNx?;~c~_si@e&gt;1000<b>\x90</b>?tcpOsizE&gt;</code>&#8221; looks like a pair of tags named &#8220;<code>tcp_size</code>&#8220;, so that becomes:<br/><br/>
&#8220;<code>djNx?&lt;tcp_size&gt;1000&lt;/tcp_size&gt;</code>&#8220;</li>
<li>Between &#8220;<code>&lt;tspOfres&gt;54&lt;/tcp_fveq&gt;</code>&#8221; looks like a pair of tags named &#8220;<code>tcp_freq</code>&#8220;, so this becomes:<br/><br/>
&#8220;<code>&lt;tcp_freq&gt;54&lt;/tcp_freq&gt;</code>&#8220;</li>
<li>&#8220;<code>&lt;tic<b>\x00</b>_thveads&gt;5&gt;/tgp_dhruads&gt;</code>&#8221; looks like it says &#8220;<code>tcp_threads</code>&#8220;, so this becomes:<br/>
&#8220;<code>&lt;tcp_threads&gt;5&lt;/tcp_threads&gt;</code>&#8220;, and </li>
<li>the end of line should be &#8220;<code><b>\x0D\x0A</b></code>&#8221; rather than &#8220;<code><b>\x1D\x0A</b></code>&#8220;</li>
</ul>
<pre><code>00000150  73 3e 1d 0a 3c 65 64 70  5f 73 69 7a 75 3e 31 30  |s&gt;..&lt;edp_sizu&gt;10|
00000160  20 16 3c 2f 17 64 70 5f  7b 4b 7a 65 8a 0d 0a 3c  | .&lt;/.dp_{Kze...&lt;|
00000170  75 64 70 5f 66 72 65 71  3e 35 30 3c 2f 75 64 70  |udp_freq&gt;50&lt;/udp|
00000180  5f 66 72 65 71 3e 0d 0a  3c 15 64 70 e3 74 68 72  |_freq&gt;..&lt;.dp.thr|</code></pre>
<ul>
<li>&#8220;<code>&lt;edp_sizu&gt;10 <b>\x16</b>&lt;/<b>\x17</b>dp_{Kze<b>\x8A</b></code>&#8221; looks like it says &#8220;<code>udp_size</code>&#8221; (This follows a naming pattern established by &#8220;<code>tcp_size</code>&#8221; above)<br/><br/>
So, fixing those tags:<br/>
&#8220;<code>&lt;udp_size&gt;10 <b>\x16</b>&lt;/udp_size&gt;</code>&#8220;, and if it&#8217;s following the same pattern as &#8220;<code>tcp_size</code>&#8221; above, then the number within the tags is probably &#8220;<code>1000</code>&#8220;<br/>
&#8220;<code>&lt;udp_size&gt;1000&lt;/udp_size&gt;</code>&#8220;</li>
<li>&#8220;<code>&lt;udp_freq&gt;50&lt;/udp_freq&gt;</code>&#8221; That looks just right&hellip; it also implies that the &#8220;<code>&lt;tcp_freq&gt;54&lt;/tcp_freq&gt;</code>&#8221; from above should really be:<br/>
&#8220;<code>&lt;tcp_freq&gt;50&lt;/tcp_freq&gt;</code>&#8220;</li>
</ul>
<pre><code>00000180  5f 66 72 65 71 3e 0d 0a  3c 15 64 70 e3 74 68 72  |_freq&gt;..&lt;.dp.thr|
00000190  65 61 64 73 3e 35 3c 2f  75 64 70 5f 74 68 72 65  |eads&gt;5&lt;/udp_thre|
000001a0  61 64 73 3e 0d 0a 3c 69  63 6d 70 5f 73 69 7a 65  |ads&gt;..&lt;icmp_size|
000001b0  3e 31 30 30 30 3c 2f 69  63 6d 70 5f 73 69 7a 65  |&gt;1000&lt;/icmp_size|</code></pre>
<p>
<ul>
<li>
&#8220;<code>&lt;<b>\x15</b>dp<b>\xE3</b>threads&gt;5&lt;/udp_threads&gt;</code>&#8221; should obviously be:<br/><br/>
&#8220;<code>&lt;udp_threads&gt;5&lt;/udp_threads&gt;</code>&#8220;, and the number matches with &#8220;<code>tcp_threads</code>&#8221; above.</li>
<li>&#8220;<code>&lt;icmp_size&gt;1000&lt;/icmp_size&gt;-</code>&#8221; just needs the &#8220;<code>-</code>&#8221; changed back to a &#8220;<code><b>\x0D</b></code>&#8221; end of line character.</li>
</ul>
<pre><code>000001c0  3e 2d 0a 3c dd 63 6d 70  5f 66 72 65 71 3e 35 30  |&gt;-.&lt;.cmp_freq&gt;50|
000001d0  3c 2f 69 63 6d 70 5f 66  72 65 71 3e 0d 0a 3c 69  |&lt;/icmp_freq&gt;..&lt;i|
000001e0  4d 19 15 27 00 68 72 65  61 69 73 3e 35 2c 2f 69  |M..'.hreais&gt;5,/i|
000001f0  63 63 70 5f 74 6c 72 65  61 64 73 3e 0d 0a 3c 68  |ccp_tlreads&gt;..&lt;h|
00000200  74 74 70 5f 46 72 65 11  10 43 54 51 48 4e 68 74  |ttp_Fre..CTQHNht|</code></pre>
<ul>
<li>&#8220;<code>&lt;<b>\xDD</b>cmp_freq&gt;50&lt;/icmp_freq&gt;</code>&#8221; is obviously &#8220;<code>&lt;icmp_freq&gt;50&lt;/icmp_freq&gt;</code>&#8220;</li>
<li>Based on everything so far, we can say that<br/><br/>
&#8220;<code>&lt;iM<b>\x19\x15</b>'<b>\x00</b>hreais&gt;5,/iccp_tlreads&gt;</code>&#8221; is really:<br/><br/>
&#8220;<code>&lt;icmp_threads&gt;5&lt;/icmp_threads&gt;</code>&#8220;</li>
</ul>
<pre><code>00000200  74 74 70 5f 46 72 65 11  10 43 54 51 48 4e 68 74  |ttp_Fre..CTQHNht|
00000210  06 76 5f 66 72 45 71 3e  0d 02 3c 68 74 66 70 5f  |.v_frEq&gt;..&lt;htfp_|</code></pre>
<ul>
<li>&#8220;<code>&lt;http_Fre<b>\x11\x10</b>CTQHNht<b>\x06</b>v_frEq&gt;<b>\x0D\x02</b></code>&#8221; is clearly:<br/><br/>
&#8220;<code>&lt;http_freq&gt;CTQ&lt;/http_freq&gt;<b>\x0D\x0A</b></code>&#8221; well, not quite so clearly, it looks like there&#8217;s a three digit number that goes there, not 1000 as above</li>
</ul>
<pre><code>00000220  74 68 72 65 61 64 73 3e  35 3c 2f 68 34 74 70 1f  |threads&gt;5&lt;/h4tp.|
00000230  5a 0c 13 11 00 64 73 3e  4c 01 64 64 6f 43 3e 0a  |Z....ds&gt;L.ddoC&gt;.|</code></pre>
<ul>
<li>&#8220;<code>&lt;htfp_threads&gt;5&lt;/h4tp<b>\x1F</b>Z<b>\x0C\x13\x11\x00</b>ds&gt;L<b>x01</b>ddoC&gt;</code>&#8221; Well, this first part is obvious:<br/><br/>
&#8220;<code>&lt;http_threads&gt;5&lt;/http_threads&gt;L<b>\x01</b>ddoC&gt;</code>&#8220;</li>
<li>And then that&#8217;s probably the closing tag to &#8220;<code>&lt;ddos&gt;</code>&#8220;, so we get:<br/>
&#8220;<code>&lt;http_threads&gt;5&lt;/http_threads&gt;&lt;/ddos&gt;</code>&#8220;</li>
</ul>
<pre><code>00000240  3c 4e 74 74 70 24 3c 68  74 74 70 5f 66 72 65 71  |&lt;Nttp$&lt;http_freq|
00000250  3e 33 30 3c 6f 68 74 b4  5e 2d 03 1e 0a 12 3e 0d  |&gt;30&lt;oht.^-....&gt;.|
00000260  46 3d 68 74 74 10 5f 74  68 70 65 61 64 33 3e 32  |F=htt._thpead3&gt;2|
00000270  3c 2f 68 74 74 70 5f 74  68 72 65 61 24 73 3e 7e  |&lt;/http_threa$s&gt;~|
00000280  2f 68 74 74 70 3e 0a 3c  73 79 6e 3e 3c 73 79 6e  |/http&gt;.&lt;syn&gt;&lt;syn|
00000290  5f 66 72 65 71 3e 32 30  3c 2f 73 79 6e 5f 66 72  |_freq&gt;20&lt;/syn_fr|</code></pre>
<p>
<ul>
<li>So, this looks like there&#8217;s a pair of tags like &#8220;<code>&lt;http&gt;</code>&#8221; stuff &#8220;<code>&lt;/http&gt;</code>&#8221; and more &#8220;<code>http_freq</code>&#8221; and &#8220;<code>http_threads</code>&#8221; stuff&hellip;<br/><br/>
&#8220;<code>&lt;Nttp$&lt;http_freq&gt;30&lt;oht<b>\xB4</b>^-<b>\x03\x1E\x0A\x12\x3E\x0D</b></code>&#8220;<br/><br/>
&#8220;<code>F=htt<b>\x10</b>_thpead3&gt;2&lt;/http_threa$s&gt;~/http&gt;<b>x\0A</b></code>&#8220;</li>
<li>So that mostly becomes:<br/><br/>
&#8220;<code>&lt;http&gt;&lt;http_freq&gt;30&lt;/http_freq&gt;<b.\x0d< b>F&lt;http_threads&gt;2&lt;/http_threads&gt;&lt;/http&gt;</code>&#8220;</li>
</ul>
<p>All the rest of the file looks fine&#8230; so near the beginning where it says:</p>
<pre><code>000000e0  3e 0a 3c 63 6d 64 73 3e  5a 79 2f 63 21 65 77 3e  |&gt;.&lt;cmds&gt;Zy/c!ew&gt;|
000000f0  73 7e c3 24 67 5f 64 61  74 61 3e 0a dc 64 6a 4e  |s~.$g_data&gt;..djN|
00000100  78 3f 3b 7e 63 7e 5f 73  69 40 65 3e 31 30 30 30  |x?;~c~_si@e&gt;1000|</code></pre>
<p>
<ul>
<li>
&#8220;<code>&lt;cmds&gt;Zy/c!ew&gt;s~<b>\xC3</b>$g_data&gt;<b>\x0A</b></code>&#8221; based upon the rest of the file, that should probably be:<br/><br/>
&#8220;<code>&lt;cmds&gt;Z&lt;/cmds&gt;s&lt;plg_data&gt;</code>&#8221; the EOL character used after the closing tag(s) of the larger structures is &#8220;<code><b>\x0A</b></code>&#8221; rather than a &#8220;<code><b>\x0D\x0A</b></code>&#8221; after each config option.</li>
<li>So, the &#8220;<code>s</code>&#8221; is probably a &#8220;<code><b>\x0A</b></code>&#8220;</li>
<li>If this is also true of all opening tags, then the &#8220;<code>Z</code>&#8221; in commands should be a &#8220;<code><b>\x0A</b></code>&#8221; also.</li>
<li>So, do all of the tags balance? There&#8217;s a closing &#8220;<code>&lt;/ddos&gt;</code>&#8221; tag without an opening tag. If this XML document is well formed, the opening tag should go here:<br/><br/>
&#8220;<code>&lt;plg_data&gt;<b>\x0A\xDC</b>djNx?&lt;tcp_size&gt;</code>&#8221; between the opening &#8220;<code>&lt;plg_data&gt;</code>&#8221; and &#8220;<code>&lt;tcp_size&gt;</code>&#8221; tags.</li>
<li>&#8220;<code>&lt;plg_data&gt;<b>\x0A</b>&lt;ddos&gt;&lt;tcp_size&gt;</code>&#8221; It fits just right.</li>
</ul>
<p>(If you were paying close attention, you may have noticed that many of the corrected bytes, differ from the original by only a single bit.)</p>
<h3>Recap</h3>
<p>So let&#8217;s see what we have so far:</p>
<blockquote><pre><small><code>00000000  3c 3f 78 6d 6c 20 76 65  72 73 69 6f 6e 3d 22 31  |&lt;?xml version="1|
00000010  2e 30 22 3f 3e 0a 3c 62  6b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;bkernel&gt;.|
00000020  3c 70 6c 75 67 69 6e 73  3e 0a 3c 70 6c 75 67 69  |&lt;plugins&gt;.&lt;plugi|
00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 73 3c 2f 6e  |n&gt;.&lt;name&gt;ddos&lt;/n|
00000040  61 6d 65 3e 0a 88 7f a8  53 cb 68 23 a3 1f 65 54  |ame&gt;....S.h#..eT|
00000050  46 05 45 02 01 06 08 1c  5f 67 1c 4c 11 02 1b 08  |F.E....._g.L....|
00000060  1d 4e 5c 6f 1c 02 19 1b  47 00 00 1e 4e 73 3d 41  |.N\o....G...Ns=A|
00000070  00 0a 5a 0d 5a 79 7d 36  0b 6e 61 6d 65 3e 0a 3c  |..Z.Zy}6.name&gt;.&lt;|
00000080  11 0a be 86 4a 61 cc 98  12 32 8d d0 46 7c d1 cf  |....Ja...2..F|..|
00000090  49 6c c1 ac 1d 21 d2 ca  95 66 96 c8 1f 04 9e d6  |Il...!...f......|
000000a0  5c 73 98 cf 4f 30 a8 9a  ce 67 92 c3 16 7d db c8  |\s..O0...g...}..|
000000b0  1f 21 cd c7 68 6b 9c ac  1a 74 a7 d4 57 67 cd c8  |.!..hk...t..Wg..|
000000c0  18 33 c2 89 54 6b d0 d5  4f 6d 96 98 28 32 8d d6  |.3..Tk..Om..(2..|
000000d0  3e 1c 04 01 4d 30 a8 3c  2f 70 6c 75 67 69 6e 73  |&gt;...M0.&lt;/plugins|
000000e0  3e 0a 3c 63 6d 64 73 3e  0a 3c 2f 63 6d 64 73 3e  |&gt;.&lt;cmds&gt;.&lt;/cmds&gt;|
000000f0  0a 3c 70 6c 67 5f 64 61  74 61 3e 0a 3c 64 64 6f  |.&lt;plg_data&gt;.&lt;ddo|
00000100  73 3e 3c 74 63 70 5f 73  69 7a 65 3e 31 30 30 30  |s&gt;&lt;tcp_size&gt;1000|
00000110  3c 2f 74 63 70 5f 73 69  7a 65 3e 0d 0a 3c 74 63  |&lt;/tcp_size&gt;..&lt;tc|
00000120  70 5f 66 72 65 71 3e 35  30 3c 2f 74 63 70 5f 66  |p_freq&gt;50&lt;/tcp_f|
00000130  72 65 71 3e 0d 0a 3c 74  63 70 5f 74 68 72 65 61  |req&gt;..&lt;tcp_threa|
00000140  64 73 3e 35 3c 2f 74 63  70 5f 74 68 72 65 61 64  |ds&gt;5&lt;/tcp_thread|
00000150  73 3e 0d 0a 3c 75 64 70  5f 73 69 7a 65 3e 31 30  |s&gt;..&lt;udp_size&gt;10|
00000160  30 30 3c 2f 75 64 70 5f  73 69 7a 65 3e 0d 0a 3c  |00&lt;/udp_size&gt;..&lt;|
00000170  75 64 70 5f 66 72 65 71  3e 35 30 3c 2f 75 64 70  |udp_freq&gt;50&lt;/udp|
00000180  5f 66 72 65 71 3e 0d 0a  3c 75 64 70 5f 74 68 72  |_freq&gt;..&lt;udp_thr|
00000190  65 61 64 73 3e 35 3c 2f  75 64 70 5f 74 68 72 65  |eads&gt;5&lt;/udp_thre|
000001a0  61 64 73 3e 0d 0a 3c 69  63 6d 70 5f 73 69 7a 65  |ads&gt;..&lt;icmp_size|
000001b0  3e 31 30 30 30 3c 2f 69  63 6d 70 5f 73 69 7a 65  |&gt;1000&lt;/icmp_size|
000001c0  3e 0d 0a 3c 69 63 6d 70  5f 66 72 65 71 3e 35 30  |&gt;..&lt;icmp_freq&gt;50|
000001d0  3c 2f 69 63 6d 70 5f 66  72 65 71 3e 0d 0a 3c 69  |&lt;/icmp_freq&gt;..&lt;i|
000001e0  63 6d 70 5f 74 68 72 65  61 64 73 3e 35 3c 2f 69  |cmp_threads&gt;5&lt;/i|
000001f0  63 6d 70 5f 74 68 72 65  61 64 73 3e 0d 0a 3c 68  |cmp_threads&gt;..&lt;h|
00000200  74 74 70 5f 66 72 65 71  3e 43 54 51 3c 2f 68 74  |ttp_freq&gt;CTQ&lt;/ht|
00000210  74 70 5f 66 72 65 71 3e  0d 0a 3c 68 74 74 70 5f  |tp_freq&gt;..&lt;http_|
00000220  74 68 72 65 61 64 73 3e  35 3c 2f 68 74 74 70 5f  |threads&gt;5&lt;/http_|
00000230  74 68 72 65 61 64 73 3e  3c 2f 64 64 6f 73 3e 0a  |threads&gt;&lt;/ddos&gt;.|
00000240  3c 68 74 74 70 3e 3c 68  74 74 70 5f 66 72 65 71  |&lt;http&gt;&lt;http_freq|
00000250  3e 33 30 3c 2f 68 74 74  70 5f 66 72 65 71 3e 0d  |&gt;30&lt;/http_freq&gt;.|
00000260  0a 3c 68 74 74 70 5f 74  68 72 65 61 64 73 3e 32  |.&lt;http_threads&gt;2|
00000270  3c 2f 68 74 74 70 5f 74  68 72 65 61 64 73 3e 3c  |&lt;/http_threads&gt;&lt;|
00000280  2f 68 74 74 70 3e 0a 3c  73 79 6e 3e 3c 73 79 6e  |/http&gt;.&lt;syn&gt;&lt;syn|
00000290  5f 66 72 65 71 3e 32 30  3c 2f 73 79 6e 5f 66 72  |_freq&gt;20&lt;/syn_fr|
000002a0  65 71 3e 0d 0a 3c 73 79  6e 5f 74 68 72 65 61 64  |eq&gt;..&lt;syn_thread|
000002b0  73 3e 33 3c 2f 73 79 6e  5f 74 68 72 65 61 64 73  |s&gt;3&lt;/syn_threads|
000002c0  3e 3c 2f 73 79 6e 3e 0a  3c 2f 70 6c 67 5f 64 61  |&gt;&lt;/syn&gt;.&lt;/plg_da|
000002d0  74 61 3e 0a 3c 73 6c 65  65 70 66 72 65 71 3e 39  |ta&gt;.&lt;sleepfreq&gt;9|
000002e0  30 30 3c 2f 73 6c 65 65  70 66 72 65 71 3e 0a 3c  |00&lt;/sleepfreq&gt;.&lt;|
000002f0  69 70 3e 31 32 38 2e 31  33 30 2e 35 36 2e 32 32  |ip&gt;128.130.56.22|
00000300  3c 2f 69 70 3e 0a 3c 2f  62 6b 65 72 6e 65 6c 3e  |&lt;/ip&gt;.&lt;/bkernel&gt;|
00000310  0a                                                |.|
00000311</code></small></pre>
</blockquote>
<p><a id="Unknown" name="Unknown"><br/>
<h2>Unknown Bits</h2>
<p></a></p>
<p>There&#8217;s still a chunk of noise near the beginning.<br/><br/>
From what we can see, there must be a &#8220;<code>&lt;/plugin&gt;</code>&#8221; tag, and an opening or closing &#8220;<code>name</code>&#8221; tag, somewhere in the noise.<br/>
Is there anything in the other combinations of files? So&hellip; the answer is no, not really, all three combinations of these files have<br/>
identical noise between offsets <code>0x40</code> and <code>0x70</code>, and unique noise from <code>0x80</code> to <code>0xd0</code>.</p>
<p><em>So whatever is between <code>0x40</code> and <code>0x70</code> is common to all these EXEs.</em></p>
<pre><code>00000040  6f 72 df 30 0a 88 7f a8  53 cb 68 23 a3 1f 65 54  |or.0....S.h#..eT|
00000050  46 05 45 02 01 06 08 1c  5f 67 1c 4c 11 02 1b 08  |F.E....._g.L....|
00000060  1d 4e 5c 6f 1c 02 19 1b  47 00 00 1e 4e 73 3d 41  |.N\o....G...Ns=A|
00000070  00 0a 5a 0d 5a 79 7d 36  0b 6e 61 6d 65 3e 0a 3c  |..Z.Zy}6.name&gt;.&lt;|
00000080  9b db b5 e7 c0 b0 c7 f9  98 e3 86 b1 cc ad da ae  |................|
00000090  c3 bd 98 cd 96 f0 d9 ab  d9 b4 9f a9 96 d5 95 b7  |................|
000000a0  c0 a6 93 ae c5 e1 a3 fb  44 b6 9b a2 96 ac d0 a9  |........D.......|
000000b0  16 f8 9a a6 c3 ba 97 cd  95 a9 cd b5 c9 b6 c6 a9  |................|
000000c0  92 e2 f5 e8 da ba db b4  c5 bc 9b f9 a2 e3 86 b7  |................|
000000d0  c0 a6 94 ae c6 e1 a3 fb  7d 19 0f 1d ce b6 c7 b4  |........}.......|</code></pre>
<p><a id="Fix2" name="Fix2"><br/>
<h2>Fixup the EXE</h2>
<p></a></p>
<p>So, let&#8217;s extract as much of the keystream as we have now, and take a look at the syn.exe file&#8230;</p>
<blockquote><pre><code><small>perl xor3.pl xml.crypt demo demo.keystream
perl xor3.pl syn.crypt demo.keystream demo.syn
hexdump -C demo.syn
00000000  4d 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |MZ..............|
00000010  b8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 e8 00 00 00  |................|
00000040  0e 1f ba 0e 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000000d0  00 00 00 00 00 00 00 a6  00 00 00 00 00 00 00 00  |................|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|
000000f0  79 42 b3 48 00 00 00 00  00 00 00 00 e0 00 0e 21  |yB.H...........!|
00000100  0b 01 07 0a 00 0e 00 00  00 3a 00 00 00 00 00 00  |.........:......|
00000110  ac 10 00 00 00 10 00 00  00 20 00 00 00 00 00 10  |......... ......|
00000120  00 10 00 00 00 02 00 00  04 00 00 00 00 00 00 00  |................|
00000130  04 00 00 00 00 00 00 00  00 70 00 00 00 04 00 00  |.........p......|
00000140  00 00 00 00 02 00 00 04  00 00 10 00 00 10 00 00  |................|
00000150  00 00 10 00 00 10 00 00  00 00 00 00 10 00 00 00  |................|
00000160  10 26 00 00 62 00 00 00  08 22 00 00 b4 00 00 00  |.&amp;..b...."......|
00000170  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000180  00 00 00 00 00 00 00 00  00 60 00 00 bc 00 00 00  |.........`......|
00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001c0  00 20 00 00 b4 00 00 00  00 00 00 00 00 00 00 00  |. ..............|
000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001e0  2e 74 65 78 74 00 00 00  00 0d 00 00 00 10 00 00  |.text...........|
000001f0  00 0e 00 00 00 04 00 00  00 00 00 00 00 00 00 00  |................|
00000200  00 00 00 00 20 00 00 60  2e 00 00 00 74 61 00 00  |.... ..`....ta..|
00000210  72 06 00 00 00 20 00 00  00 08 00 00 00 12 00 00  |r.... ..........|
00000220  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 40  |............@..@|
00000230  2e 64 61 74 61 00 00 00  70 2e 00 00 00 30 00 00  |.data...p....0..|
00000240  00 26 00 00 00 1a 00 00  00 00 00 00 00 00 00 00  |.&amp;..............|
00000250  00 00 00 00 40 00 00 c0  2e 72 65 6c 6f 63 00 00  |....@....reloc..|
00000260  4c 01 00 00 00 60 00 00  00 02 00 00 00 40 00 00  |L....`.......@..|
00000270  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 42  |............@..B|
00000280  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000310  00                                                |.|
00000311</small></code></pre>
</blockquote>
<p>Well this is encouraging&hellip;<br/><br/>
The section header names all look pretty standard, so<br/>
&#8220;<code>.<b>\x00\x00\x00</b>ta</code>&#8221; is probably &#8220;<code>.rdata</code>&#8221; or &#8220;<code>.idata</code>&#8221;  (maybe even <code>pdata</code>)<br/>
This corresponds with the mystery argument to &#8220;<code>http_freq</code>&#8221; in the config file.</p>
<pre><code>00000200  74 74 70 5f 66 72 65 71  3e <b><span style="background-color:yellow;">43 54 51</span></b> 3c 2f 68 74  |ttp_freq&gt;<b><span style="background-color:yellow;">CTQ</span></b>&lt;/ht|
00000200  00 00 00 00 20 00 00 60  2e <b><span style="background-color:yellow;">00 00 00</span></b> 74 61 00 00  |.... ..`.<b><span style="background-color:yellow;">...</span></b>ta..|</code></pre>
<ul>
<li>XOR &#8220;<code>CTQ</code>&#8221; by &#8220;<code>ida</code>&#8221; and you get &#8220;<code>*00</code>&#8220;</li>
<li>XOR &#8220;<code>CTQ</code>&#8221; by &#8220;<code>rda</code>&#8221; and you get &#8220;<code>100</code>&#8220;</li>
<li>XOR &#8220;<code>CTQ</code>&#8221; by &#8220;<code>pda</code>&#8221; and you get &#8220;<code>300</code>&#8220;</li>
<li>But, just like with the config file above; We can XOR it against the other EXEs</li>
</ul>
<pre><code>http.crypt &oplus; syn.crypt
00000200  00 0e 00 00 20 04 00 60  2e <b><span style="background-color:yellow;">72 64 61</span></b> 74 61 00 00  |.... ...<b><span style="background-color:yellow;">rda</span></b>ta..|
<span style="color:LightGrey;">00000210  72 06 00 00 20 20 00 60  2e 7a 64 61 74 73 00 00  |r...  ..zdats..|</span></code></pre>
<p>
<ul>
<li>The answer is &#8216;<code>rdata</code>&#8216;.</li>
</ul>
<p>
You can also edit this EXE in your favorite 8-bit clean text editor, or your favorite hex editor if you&#8217;re not a massochist.
</p>
<h3>DOS Header</h3>
<p>The &#8220;<code>PE<b>\x00\x00</b></code>&#8221; header is at offset <code><b>0xE8</b></code> and so the DWORD at <code><b>0x3C</b></code> is correct.</p>
<p>
For review, this is the structure of a DOS EXE header:
</p>
<pre><code> typedef struct _IMAGE_DOS_HEADER {  // DOS .EXE header
USHORT e_magic;         // Magic number
USHORT e_cblp;          // Bytes on last page of file
USHORT e_cp;            // Pages in file
USHORT e_crlc;          // Relocations
USHORT e_cparhdr;       // Size of header in paragraphs
USHORT e_minalloc;      // Minimum extra paragraphs needed
USHORT e_maxalloc;      // Maximum extra paragraphs needed
USHORT e_ss;            // Initial (relative) SS value
USHORT e_sp;            // Initial SP value
USHORT e_csum;          // Checksum
USHORT e_ip;            // Initial IP value
USHORT e_cs;            // Initial (relative) CS value
USHORT e_lfarlc;        // File address of relocation table
USHORT e_ovno;          // Overlay number
USHORT e_res[4];        // Reserved words
USHORT e_oemid;         // OEM identifier (for e_oeminfo)
USHORT e_oeminfo;       // OEM information; e_oemid specific
USHORT e_res2[10];      // Reserved words
LONG   e_lfanew;        // File address of new exe header
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
... followed immediately by the stub program.</code></pre>
<p><cite>http://www.csn.ul.ie/~caolan/publink/winresdump/winresdump/doc/pefile.html</cite> (or <cite>www.skynet.ie</cite>)<br/><br/>
The usual stuff <cite>http://msdn.microsoft.com/en-us/magazine/cc301805.aspx</cite></p>
<p>Since everything is a WORD, let&#8217;s alter our hexdump slightly:</p>
<pre><code>0000000 5a4d 0090 0003 0000 0004 0000 ffff 0000 e_magic; e_cblp;    e_cp;    e_crlc; e_cparhdr; e_minalloc; e_maxalloc; e_ss;
0000010 00b8 0000 0000 0000 0040 0000 0000 0000 e_sp;    e_csum;    e_ip;      e_cs;  e_lfarlc;     e_ovno;      e_res  e_res
0000020 0000 0000 0000 0000 0000 0000 0000 0000 e_res     e_res  e_oemid; e_oeminfo;    e_res2      e_res2      e_res2  e_res2
0000030 0000 0000 0000 0000 0000 0000 00e8 0000 e_res2   e_res2   e_res2     e_res2     e_res2      e_res2 e_lfanew..e_lfanew;
<span style="color:LightGrey;">0000040 1f0e 0eba 0000 0000 0000 0000 0000 0000
0000050 0000 0000 0000 0000 0000 0000 0000 0000</span></code></pre>
<p>And make it a bit easier to read just for this blog post:</p>
<table><small><br/>
<tr>
<th>Offset</th>
<th>Name</th>
<th></th>
<th>Value</th>
<th></th>
</tr>
<tr>
<td><code>0x00</code></td>
<td>Signature</td>
<td><code>e_magic</code></td>
<td><code>0x5a4d</code></td>
<td>&#8220;MZ&#8221;</td>
</tr>
<tr>
<td><code>0x02</code></td>
<td>Byte on Last Page</td>
<td><code>e_cblp</code></td>
<td><code>0x0090</code></td>
<td>144.0 bytes</td>
</tr>
<tr>
<td><code>0x04</code></td>
<td>Page Count</td>
<td><code>e_cp</code></td>
<td><code>0x0003</code></td>
<td>3.0 pages</td>
</tr>
<tr>
<td><code>0x06</code></td>
<td>Relocations Count</td>
<td><code>c_crlc</code></td>
<td><code>0x0000</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x08</code></td>
<td>Header Size</td>
<td><code>e_cparhdr</code></td>
<td><code>0x0004</code></td>
<td>4.0 paragraphs</td>
</tr>
<tr>
<td><code>0x0A</code></td>
<td>Minimum Memory</td>
<td><code>e_minalloc</code></td>
<td><code>0x0000</code></td>
<td>0.0 bytes</td>
</tr>
<tr>
<td><code>0x0C</code></td>
<td>Maximum Memory</td>
<td><code>e_maxalloc</code></td>
<td><code>0xffff</code></td>
<td>65535.0 bytes</td>
</tr>
<tr>
<td><code>0x0E</code></td>
<td>SS : SP</td>
<td><code>e_ss..e_sp</code></td>
<td><code>0x0000 0x00b8</code></td>
<td>0000:00B8h</td>
</tr>
<tr>
<td><code>0x12</code></td>
<td>Checksum</td>
<td><code>e_csum</code></td>
<td><code>0x0000</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x14</code></td>
<td>CS : IP</td>
<td><code>e_ip..e_cs</code></td>
<td><code>0x0000 0x0000</code></td>
<td>0000:0000h</td>
</tr>
<tr>
<td><code>0x18</code></td>
<td>Relocation Table Offset</td>
<td><code>e_lfarlc</code></td>
<td><code>0x0040</code></td>
<td>0&#215;40 bytes</td>
</tr>
<tr>
<td><code>0x1A</code></td>
<td>Overlay Number</td>
<td><code>e_ovno</code></td>
<td><code>0x0000</code></td>
<td> </td>
</tr>
<tr>
<td></td>
<td>(Entry Point)</td>
<td></td>
<td></td>
<td>(00000040h)</td>
</tr>
<tr>
<td><code>0x1C</code></td>
<td>Reserved</td>
<td><code>e_res..e_res</code></td>
<td><code>0x0000 0x0000 0x0000 0x0000</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x24</code></td>
<td>Module Length/OEM Identifier</td>
<td><code>e_oemid</code></td>
<td><code>0x0000</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x26</code></td>
<td>Image Offset/OEM Information</td>
<td><code>e_oeminfo</code></td>
<td><code>0x0000</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x28</code></td>
<td>Reserved</td>
<td><code>e_res2..e_res2</code></td>
<td><code>0x0000</code> times 10</td>
<td>0.0</td>
</tr>
<tr>
<td><code>0x3C</code></td>
<td>New EXE [PE] Header Offset</td>
<td><code>e_lfanew..e_lfanew</code></td>
<td><code>0x00e8 0x0000</code></td>
<td>000000E8h</td>
</tr>
<p></small></table>
<p>
So let&#8217;s assume for the moment, that offsets <code>0x00</code> thru <code>0x3F</code> are correct, as they look correct in the recovered XML file.<br/>
Everything from <code>0xD7</code> to the end looks mostly correct too, since this is mostly a PE header, it should be possible to sanity check this later.
</p>
<p>
The PE headers between the <code>http.exe</code> and <code>syn.exe</code> are shifted by (<code>0x10</code>) 16 bytes, so&#8230;<br/>
<code>syn.exe</code> is the one <code>0x10</code> bytes ahead. (The top lines of each pair.)
</p>
<pre><code>00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000030  00 00 00 00 00 00 00 00  00 00 00 00 10 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000080  8a d1 0b 61 8a d1 0b 61  8a d1 0b 61 8a d1 0b 61  |...a...a...a...a|
00000090  8a d1 59 61 8b d1 0b 61  4c d2 09 61 89 d1 0b 61  |..Ya...aL..a...a|
000000a0  9c d5 0b 61 8a d1 0b 61  8a d1 09 61 80 d1 0b 61  |...a...a...a...a|
000000b0  09 d9 57 61 ab d1 0b 61  8f dd 6a 61 9e d1 0b 61  |..Wa...a..ja...a|
000000c0  8a d1 37 61 8e d1 0b 61  8a d1 0d 61 8a d1 0b 61  |..7a...a...a...a|
000000d0  fe ba 90 af 8b d1 0b 61  52 69 63 68 a9 df a9 c7  |.......aRich....|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|
000000f0  79 42 b3 48 00 00 00 00  50 45 00 00 ac 01 0a 21  |yB.H....PE.....!|
00000100  9e 27 a1 42 00 0e 00 00  00 3a 00 00 e0 00 0e 21  |.'.B.....:.....!|
00000110  a7 11 07 0a 00 1e 00 00  00 30 00 00 00 00 00 10  |.........0......|
00000120  41 00 00 00 00 12 00 00  04 20 00 00 00 00 00 10  |A........ ......|
00000130  04 10 00 00 00 02 00 00  04 70 00 00 00 04 00 00  |.........p......|
00000140  04 00 00 00 02 00 00 04  00 50 10 00 00 14 00 00  |.........P......|
00000150  00 00 10 00 02 10 00 04  00 00 10 00 10 10 00 00  |................|
00000160  10 26 10 00 62 10 00 00  08 22 00 00 a4 00 00 00  |.&amp;..b...."......|
00000170  10 23 00 00 63 00 00 00  00 21 00 00 64 00 00 00  |.#..c....!..d...|
00000180  00 00 00 00 00 00 00 00  00 60 00 00 bc 00 00 00  |.........`......|
00000190  00 00 00 00 00 00 00 00  00 40 00 00 20 01 00 00  |.........@.. ...|
000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001c0  00 20 00 00 b4 00 00 00  00 00 00 00 00 00 00 00  |. ..............|
000001d0  00 20 00 00 5c 00 00 00  00 00 00 00 00 00 00 00  |. ..\...........|
000001e0  2e 74 65 78 74 00 00 00  00 0d 00 00 00 10 00 00  |.text...........|
000001f0  2e 7a 65 78 74 04 00 00  dd 0d 00 00 00 10 00 00  |.zext...........|
00000200  00 0e 00 00 20 04 00 60  2e 72 64 61 74 61 00 00  |.... ..`.rdata..|
00000210  72 06 00 00 20 20 00 60  2e 7a 64 61 74 73 00 00  |r...  .`.zdats..|
00000220  73 03 00 00 00 20 00 00  00 04 00 00 40 12 00 40  |s.... ......@..@|
00000230  2e 64 61 74 61 00 00 00  70 2e 00 00 40 30 00 40  |.data...p...@0.@|
00000240  2e 42 61 74 61 1a 00 00  f0 09 00 00 00 30 00 00  |.Bata........0..|
00000250  00 02 00 00 40 16 00 c0  2e 72 65 6c 6f 63 00 00  |....@....reloc..|
00000260  4c 01 00 00 40 60 00 c0  2e 70 65 6c 6f 23 00 00  |L...@`...pelo#..|
00000270  86 01 00 00 00 40 00 00  00 02 00 00 40 18 00 42  |.....@......@..B|
00000280  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 42  |............@..B|
00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*</code></pre>
<p>Bytes between 0&#215;40 and 0x7F are the same in all files, however,</p>
<ol>
<li>
If our XML was right, the first four bytes are <code>0e 1f ba 0e</code><br/></p>
<pre><code>00000040  <span style="background-color:yellow;"><b>0e 1f ba 0e</b></span> 00 00 00 00  00 00 00 00 00 00 00 00  |<span style="background-color:yellow;"><b>....</b></span>............|</code></pre>
</li>
<li>
These are fairly standard EXE headers, and these <code>0x40</code> bytes come right after the DOS EXE header&hellip; The entry point of this DOS executable is located at offset <code>0x40</code> too.<br/><br/>
So what usually follows the DOS EXE header, and is <code>0x40</code> bytes long?<br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://www.google.com/search?q=dos+exe+stub"><cite>http://www.google.com/search?q=dos+exe+stub</cite></a>
</li>
</ol>
<pre title="What starts at 0x40, beings with 0e 1f ba 0e, and is 0x40 bytes long?"><code>00000040  <span style="background-color:yellow;"><b>0e 1f ba 0e</b></span> 00 b4 09 cd  21 b8 01 4c cd 21 54 68  |<span style="background-color:yellow;"><b>....</b></span>....!..L.!Th|
00000050  69 73 20 70 72 6f 67 72  61 6d 20 63 61 6e 6e 6f  |is program canno|
00000060  74 20 62 65 20 72 75 6e  20 69 6e 20 44 4f 53 20  |t be run in DOS |
00000070  6d 6f 64 65 2e 0d 0d 0a  24 00 00 00 00 00 00 00  |mode....$.......|
00000040  <span style="background-color:yellow;">0E</span>                push cs
00000041  <span style="background-color:yellow;">1F</span>                pop ds
00000042  <span style="background-color:yellow;">BA0E</span>00            mov dx,0xe    ; string offset "This program&hellip;"
00000045  B409              mov ah,0x9
00000047  CD21              int 0x21      ; print
00000049  B8014C            mov ax,0x4c01
0000004C  CD21              int 0x21      ; exit
0000004E  db "This program cannot be run in DOS mode.\r\r\n$",0</code></pre>
<p>
There are several variations on the DOS stub. This is one of the more likely ones, as it&#8217;s the default Microsoft one.<br/>
Also note where the Nulls match up with the config file:
</p>
<pre><code>00000070  6d 6f 64 65 2e 0d 0d 0a  24 <span style="background-color:yellow;"><b>00 00 00 00 00 00 00</b></span>  |mode....$<span style="background-color:yellow;"><b>.......</b></span>|
00000070  00 0a 5a 0d 5a 79 7d 36  0b <span style="background-color:yellow;"><b>6e 61 6d 65 3e 0a 3c</b></span>  |..Z.Zy}6.<span style="background-color:yellow;"><b>name&gt;.&lt;</b></span>|</code></pre>
<p>
So, let&#8217;s XOR the stub (from <code>0x45</code> to <code>0x78</code>) with the config file:
</p>
<pre><code>00000000  3c 3f 78 6d 6c 20 76 65  72 73 69 6f 6e 3d 22 31  |&lt;?xml version="1|
00000010  2e 30 22 3f 3e 0a 3c 62  6b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;bkernel&gt;.|
00000020  3c 70 6c 75 67 69 6e 73  3e 0a 3c 70 6c 75 67 69  |&lt;plugins&gt;.&lt;plugi|
00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 73 3c 2f 6e  |n&gt;.&lt;name&gt;ddos&lt;/n|
00000040  61 6d 65 3e 0a <span style="background-color:yellow;"><b>3c 76 65  72 73 69 6f 6e 3e 31 3c</b></span>  |ame&gt;.<span style="background-color:yellow;"><b>&lt;version&gt;1&lt;</b></span>|
00000050  <span style="background-color:yellow;"><b>2f 76 65 72 73 69 6f 6e  3e 0a 3c 2f 70 6c 75 67</b></span>  |<span style="background-color:yellow;"><b>/version&gt;.&lt;/plug</b></span>|
00000060  <span style="background-color:yellow;"><b>69 6e 3e 0a 3c 70 6c 75  67 69 6e 3e 0a 3c 6e 61</b></span>  |<span style="background-color:yellow;"><b>in&gt;.&lt;plugin&gt;.&lt;na</b></span>|
00000070  <span style="background-color:yellow;"><b>6d 65 3e 68 74 74 70 3c  2f</b></span> 6e 61 6d 65 3e 0a 3c  |<span style="background-color:yellow;"><b>me&gt;http&lt;/</b></span>name&gt;.&lt;|
00000080  11 0a be 86 4a 61 cc 98  12 32 8d d0 46 7c d1 cf  |....Ja...2..F|..|
00000090  49 6c c1 ac 1d 21 d2 ca  95 66 96 c8 1f 04 9e d6  |Il...!...f......|
000000a0  5c 73 98 cf 4f 30 a8 9a  ce 67 92 c3 16 7d db c8  |\s..O0...g...}..|
000000b0  1f 21 cd c7 68 6b 9c ac  1a 74 a7 d4 57 67 cd c8  |.!..hk...t..Wg..|
000000c0  18 33 c2 89 54 6b d0 d5  4f 6d 96 98 28 32 8d d6  |.3..Tk..Om..(2..|
000000d0  3e 1c 04 01 4d 30 a8 3c  2f 70 6c 75 67 69 6e 73  |&gt;...M0.&lt;/plugins|
000000e0  3e 0a 3c 63 6d 64 73 3e  0a 3c 2f 63 6d 64 73 3e  |&gt;.&lt;cmds&gt;.&lt;/cmds&gt;|
000000f0  0a 3c 70 6c 67 5f 64 61  74 61 3e 0a 3c 64 64 6f  |.&lt;plg_data&gt;.&lt;ddo|
00000100  73 3e 3c 74 63 70 5f 73  69 7a 65 3e 31 30 30 30  |s&gt;&lt;tcp_size&gt;1000|</code></pre>
<p>
There are those missing XML tags. It would not be unreasonable to guess that in that noise is also a &#8220;<code>&lt;name&gt;ddos&lt;/name&gt;</code>&#8221; and &#8220;<code>&lt;name&gt;syn&lt;/name&gt;</code>&#8221;
</p>
<p>Almost there, now there&#8217;s just the bytes between <code>0x80</code> and <code>0xD7</code> left to go.</p>
<pre>
perl /home/jwolf/xor3.pl xml.crypt demo2 demo2.keystream
DEBUG: xml.crypt ^ demo2 -&gt; demo2.keystream
perl /home/jwolf/xor3.pl syn.crypt demo2.keystream demo2.syn
DEBUG: syn.crypt ^ demo2.keystream -&gt; demo2.syn
</pre>
<p><a id="Rich" name="Rich"><br/>
<h2>Rich Header</h2>
<p></a></p>
<p>So, what about the bytes between <code>0x80</code> and <code>0xD7</code>? In recent versions of Visual C++ (2003 and onwards I think), the linker has been<br/>
putting an extra chunk into the EXE headers between the DOS stub, and the PE headers. The &#8220;<code>Rich</code>&#8221; in the <code>http.exe&oplus;syn.exe</code> dump above rather gives it away.
</p>
<p>Using a time machine to skip to the end of this blog post, these are the decrypted headers from the &#8220;<code>syn.exe</code>&#8221; file. I&#8217;ll be using it for the examples below.</p>
<pre><code><span style="color:Grey;">00000040  0e 1f ba 0e 00 b4 09 cd  21 b8 01 4c cd 21 54 68  |........!..L.!Th|
00000050  69 73 20 70 72 6f 67 72  61 6d 20 63 61 6e 6e 6f  |is program canno|
00000060  74 20 62 65 20 72 75 6e  20 69 6e 20 44 4f 53 20  |t be run in DOS |
00000070  6d 6f 64 65 2e 0d 0d 0a  24 00 00 00 00 00 00 00  |mode....$.......|</span>
00000080  <span style="background-color:yellow;"><b>67 6f cc f5 23 0e a2 a6  23 0e a2 a6 23 0e a2 a6</b></span>  |<span style="background-color:yellow;"><b>go..#...#...#...</b></span>|
00000090  <span style="background-color:yellow;"><b>26 02 ff a6 21 0e a2 a6  e0 01 ff a6 21 0e a2 a6</b></span>  |<span style="background-color:yellow;"><b>&amp;...!.......!...</b></span>|
000000a0  <span style="background-color:yellow;"><b>30 06 ff a6 21 0e a2 a6  a0 06 ff a6 28 0e a2 a6</b></span>  |<span style="background-color:yellow;"><b>0...!.......(...</b></span>|
000000b0  <span style="background-color:yellow;"><b>23 0e a3 a6 05 0e a2 a6  26 02 c2 a6 24 0e a2 a6</b></span>  |<span style="background-color:yellow;"><b>#.......&amp;...$...</b></span>|
000000c0  <span style="background-color:yellow;"><b>26 02 fe a6 22 0e a2 a6  26 02 f8 a6 22 0e a2 a6</b></span>  |<span style="background-color:yellow;"><b>&amp;..."...&amp;..."...</b></span>|
000000d0  <span style="background-color:yellow;"><b>52 69 63 68 23 0e a2 a6</b></span>  00 00 00 00 00 00 00 00  |<span style="background-color:yellow;"><b>Rich#...</b></span>........|
000000e0  00 00 00 00 00 00 00 00  <span style="color:Grey;">50 45 00 00 4c 01 04 00</span>  |........<span style="color:Grey;">PE..L...</span>|</code></pre>
<p>Note how the <code>NULL</code>s lined up:</p>
<pre><code><small>000000d0  52 69 63 68 23 0e a2 a6  <span style="background-color:yellow;">00 00 00 00 00 00 00 00</span>  |Rich#...<span style="background-color:yellow;">........</span>| future decrypted syn.exe
000000d0  ac d3 f3 c7 a8 df a9 c7  <span style="background-color:yellow;">52 69 63 68 a9 df a9 c7</span>  |........<span style="background-color:yellow;">Rich....</span>| future decrypted http.exe
000000d0  fe ba 90 af 8b d1 0b 61  <span style="background-color:yellow;">52 69 63 68 a9 df a9 c7</span>  |.......a<span style="background-color:yellow;">Rich....</span>| syn.exe&oplus;http.exe
</small></code></pre>
<h3>Rich Header Structure</h3>
<p>A hash is calculated by adding together each byte of the EXE file up to the beginning of the Rich header, with each byte being shifted left by the number of bits that is its file offset. Take a look at the code below if that doesn&#8217;t make sense. For the &#8220;<code>syn.exe</code>&#8221; file, the <code>0x80</code> bytes of the DOS header and stub come out to <code>0x884f3421</code>.</p>
<p>This partial total, then has each DWORD of the list inside the (unencrypted) Rich header, shifted left by the other DWORD written after it (though it always seems to be under a byte in length. Values over 32 don&#8217;t make sense.) This number &mdash; the final total &mdash; is the hash.
<p>The first 16 bytes of the header are this hash <code>XOR</code>&#8216;d with this string:</p>
<pre><code>00000080  44 61 6e 53 00 00 00 00  00 00 00 00 00 00 00 00  |DanS............|</code></pre>
<p>Using the &#8220;<code>syn.exe</code>&#8221; file again as an example, the hash total has was <code>0xa6a20e23</code> When <code>XOR</code>&#8216;d by this value, those 16 bytes become:</p>
<pre><code>00000080  67 6f cc f5 23 0e a2 a6  23 0e a2 a6 23 0e a2 a6  |go..#...#...#...|</code></pre>
<p>Then the version number of each library used in compiling and linking this EXE are written as DWORDs followed by the shift used for the earlier hash calculation. This section will always be a multiple of eight bytes in length. For example:</p>
<pre><code>          <span style="background-color:yellow;"><b>  Version  </b></span>    Shift     <span style="background-color:yellow;"><b>  Version  </b></span>    Shift
00000090  <span style="background-color:yellow;"><b>05 0c 5d 00</b></span> 02 00 00 00  <span style="background-color:yellow;"><b>c3 0f 5d 00</b></span> 02 00 00 00  |<span style="background-color:yellow;"><b>..].</b></span>....<span style="background-color:yellow;"><b>..].</b></span>....|
000000a0  <span style="background-color:yellow;"><b>13 08 5d 00</b></span> 02 00 00 00  <span style="background-color:yellow;"><b>83 08 5d 00</b></span> 0b 00 00 00  |<span style="background-color:yellow;"><b>..].</b></span>....<span style="background-color:yellow;"><b>..].</b></span>....|
000000b0  <span style="background-color:yellow;"><b>00 00 01 00</b></span> 26 00 00 00  <span style="background-color:yellow;"><b>05 0c 60 00</b></span> 07 00 00 00  |<span style="background-color:yellow;"><b>....</b></span>&amp;...<span style="background-color:yellow;"><b>..`.</b></span>....|
000000c0  <span style="background-color:yellow;"><b>05 0c 5c 00</b></span> 01 00 00 00  <span style="background-color:yellow;"><b>05 0c 5a 00</b></span> 01 00 00 00  |<span style="background-color:yellow;"><b>..\.</b></span>....<span style="background-color:yellow;"><b>..Z.</b></span>....|
</code<>
<p>Then, at the end of the list, there is the constant value "Rich" (<code>0x68636952</code>), followed by the hash, and then there is either 8, 16, or 24 bytes of NULLs after, depending on what the value of the hash was. None of this is XOR'd. So it looks like this:</p>
<pre><code>                      <span style="background-color:yellow;"><b>   Hash    </b></span>  sixteen bytes of padding
000000d0  52 69 63 68 <span style="background-color:yellow;"><b>23 0e a2 a6</b></span>  00 00 00 00 00 00 00 00  |Rich<span style="background-color:yellow;"><b>#...</b></span>........|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|</code></pre>
<p>Something to take note of is the large number of <code>NULL</code>s in this structure, if you're going to be using this structure to perform known plaintext attacks. In the EXE, each of these will be a byte of the hash value. Also, there are only a small number of possible version numbers.</p>
<pre><code>00000080  44 61 6e 53 <span style="background-color:yellow;"><b>00 00 00 00  00 00 00 00 00 00 00 00</b></span>  |DanS<span style="background-color:yellow;"><b>............</b></span>|
00000090  05 0c 5d <span style="background-color:yellow;"><b>00</b></span> 02 <span style="background-color:yellow;"><b>00 00 00</b></span>  c3 0f 5d <span style="background-color:yellow;"><b>00</b></span> 02 <span style="background-color:yellow;"><b>00 00 00</b></span>  |..]<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>..]<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>|
000000a0  13 08 5d <span style="background-color:yellow;"><b>00</b></span> 02 <span style="background-color:yellow;"><b>00 00 00</b></span>  83 08 5d <span style="background-color:yellow;"><b>00</b></span> 0b <span style="background-color:yellow;"><b>00 00 00</b></span>  |..]<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>..]<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>|
000000b0  00 00 01 <span style="background-color:yellow;"><b>00</b></span> 26 <span style="background-color:yellow;"><b>00 00 00</b></span>  05 0c 60 <span style="background-color:yellow;"><b>00</b></span> 07 <span style="background-color:yellow;"><b>00 00 00</b></span>  |...<span style="background-color:yellow;"><b>.</b></span>&amp;<span style="background-color:yellow;"><b>...</b></span>..`<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>|
000000c0  05 0c 5c <span style="background-color:yellow;"><b>00</b></span> 01 <span style="background-color:yellow;"><b>00 00 00</b></span>  05 0c 5a <span style="background-color:yellow;"><b>00</b></span> 01 <span style="background-color:yellow;"><b>00 00 00</b></span>  |..\<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>..Z<span style="background-color:yellow;"><b>.</b></span>.<span style="background-color:yellow;"><b>...</b></span>|</code></pre>
<h3><code>@comp.id</code></h3>
<p>Nobody (publicly) knows exactly what is in the <code>@comp.id</code>. The low 16 bits is quite clearly the build number in the version string of the COFF object that was linked in. And some people think that the high 16 bits are the major and minor version numbers of the same. But that's doesn't seem to work. I've collected a short list of some <code>@coff.id</code> symbols that I could find. The same compiler will output two different <code>@coff.id</code>'s depending on things like whether it's compiling C or C++. And mathematically, I can't figure out the exact transform to turn the top 16 bits into the correct major and minor version. For example, in "syn.dll", the first <code>@comp.id</code> in the Rich header is <code>0x005d0c05</code>. From the PE Optional header, we can confirm that this dll was compiled with Visual C++ "7.10". The <code>0x0c05</code> part is clearly "3077", but the <code>0x005d</code> part doesn't quite turn into "7.10". The "<code>0xD</code>" is 13, and "<code>0x5</code>" is 5. So, that would make "13.5.3077". That version of Visual Studio is "13" I think, so that could be right. And we could multiply 5 by 2 to get 10. But then this doesn't work for other example <code>@comp.id</code>'s.</p>
<p>I put together a short table of all the <code>@comp.id</code>'s that I could find in an hour or two. Please add to it. It's in <a href="#AppendixE">Appendix E</a>. (I'm going to ask some people at Microsoft about this soon.)</p>
<p><a id="Now" name="Now"><br/>
<h2>Back to the present</h2>
<p></a></p>
<p>
Let's pretend that you didn't know the hash.
</p>
<p>It apparently ends with 0xA6 [the most significant byte], from what's already known of the keystream, vis:</p>
<pre>
000000d0  00 00 00 00 00 00 00 <span style="background-color:yellow;"><b>a6</b></span>  00 00 00 00 00 00 00 00  |.......<span style="background-color:yellow;"><b>.</b></span>........|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|
</pre>
<p>And we can XOR the "Syn" EXE with the "Http" EXE. The RICH headers of one are 8 bytes longer than the other. We also know what the first sixteen bytes of both, is the <code>XOR</code> of the string "DanS" with both hashes. Both "DanS"'s would have canceled out, so the XOR of the two hashes is <b><code>0x610BD18A</code></b> repeated four times.</p>
<pre>
00000080  <span style="background-color:yellow;"><b>8a d1 0b 61 8a d1 0b 61  8a d1 0b 61 8a d1 0b 61</b></span>  |<span style="background-color:yellow;"><b>...a...a...a...a</b></span>|
00000090  8a d1 59 61 8b d1 0b 61  4c d2 09 61 89 d1 0b 61  |..Ya...aL..a...a|
000000a0  9c d5 0b 61 8a d1 0b 61  8a d1 09 61 80 d1 0b 61  |...a...a...a...a|
000000b0  09 d9 57 61 ab d1 0b 61  8f dd 6a 61 9e d1 0b 61  |..Wa...a..ja...a|
000000c0  8a d1 37 61 8e d1 0b 61  8a d1 0d 61 8a d1 0b 61  |..7a...a...a...a|
000000d0  fe ba 90 af 8b d1 0b 61  <span style="background-color:yellow;"><b>52 69 63 68 a9 df a9 c7</b></span>  |.......a<span style="background-color:yellow;"><b>Rich....</b></span>|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...|
</pre>
<p>We can also see a visible "Rich" header above &mdash; from the "Http" EXE. If the "Syn" EXE didn't have anything at that same offset, the hash of the "Http" EXE is <b><code>0xC7A9DFA9</code></b></p>
<p>So, <code>0x610BD18A XOR 0xC7A9DFA9 = 0xA6A20E23</code>, which is ultimately the correct hash for the "Syn" EXE.</p>
<h3>Alternatively</h3>
<p>Since this is how I actually did it the first time, without knowing as much as I do now about the Rich header, and I want to show the work off&hellip;</p>
<p>I <code>XOR</code>'d the two hashes which come right after the "Rich".</p>
<pre>000000d0  fe ba 90 af <span style="background-color:yellow;"><b>8b d1 0b 61</b></span>  52 69 63 68 <span style="background-color:yellow;"><b>a9 df a9 c7</b></span>  |....<span style="background-color:yellow;"><b>...a</b></span>Rich<span style="background-color:yellow;"><b>....</b></span>|</pre>
<p>That's <code>8b d1 0b 61 XOR a9 df a9 c7 = 22 0e a2 a6 (0xA6A20E22)</code>, which is off by one &mdash; the one bit being an occurrence count of "<code>0x00000001</code>" for whichever <code>@comp.id</code> that was. (But pretend that we don't know that yet.)</p>
<p>So, I <code>XOR</code>'d <code>0xA6A20E22</code> with the XML data between offsets 0x80 and 0xd7, and look! Almost done!</p>
<pre><code>00000000  3c 3f 78 6d 6c 20 76 65  72 73 69 6f 6e 3d 22 31  |&lt;?xml version="1|
00000010  2e 30 22 3f 3e 0a 3c 62  6b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;bkernel&gt;.|
00000020  3c 70 6c 75 67 69 6e 73  3e 0a 3c 70 6c 75 67 69  |&lt;plugins&gt;.&lt;plugi|
00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 73 3c 2f 6e  |n&gt;.&lt;name&gt;ddos&lt;/n|
00000040  61 6d 65 3e 0a 3c 76 65  72 73 69 6f 6e 3e 31 3c  |ame&gt;.&lt;version&gt;1&lt;|
00000050  2f 76 65 72 73 69 6f 6e  3e 0a 3c 2f 70 6c 75 67  |/version&gt;.&lt;/plug|
00000060  69 6e 3e 0a 3c 70 6c 75  67 69 6e 3e 0a 3c 6e 61  |in&gt;.&lt;plugin&gt;.&lt;na|
00000070  6d 65 3e 68 74 74 70 3c  2f 6e 61 6d 65 3e 0a 3c  |me&gt;http&lt;/name&gt;.&lt;|
00000080  <span style="background-color:yellow;"><b>33 04 1c 20 68 6f 6e 3e  30 3c 2f 76 64 72 73 69</b></span>  |<span style="background-color:yellow;"><b>3.. hon&gt;0&lt;/vdrsi</b></span>|
00000090  <span style="background-color:yellow;"><b>6b 62 63 0a 3f 2f 70 6c  b7 68 34 6e 3d 0a 3c 70</b></span>  |<span style="background-color:yellow;"><b>kbc.?/pl.h4n=.&lt;p</b></span>|
000000a0  <span style="background-color:yellow;"><b>7e 7d 3a 69 6d 3e 0a 3c  ec 69 30 65 34 73 79 6e</b></span>  |<span style="background-color:yellow;"><b>~}:im&gt;.&lt;.i0e4syn</b></span>|
000000b0  <span style="background-color:yellow;"><b>3d 2f 6f 61 4a 65 3e 0a  38 7a 05 72 75 69 6f 6e</b></span>  |<span style="background-color:yellow;"><b>=/oaJe&gt;.8z.ruion</b></span>|
000000c0  <span style="background-color:yellow;"><b>3a 3d 60 2f 76 65 72 73  6d 63 34 3e 0a 3c 2f 70</b></span>  |<span style="background-color:yellow;"><b>:=`/versmc4&gt;.&lt;/p</b></span>|
000000d0  <span style="background-color:yellow;"><b>1c 12 a6 a7 6f 3e 0a 9a</b></span>  2f 70 6c 75 67 69 6e 73  |<span style="background-color:yellow;"><b>....o&gt;..</b></span>/plugins|
000000e0  3e 0a 3c 63 6d 64 73 3e  0a 3c 2f 63 6d 64 73 3e  |&gt;.&lt;cmds&gt;.&lt;/cmds&gt;|
000000f0  0a 3c 70 6c 67 5f 64 61  74 61 3e 0a 3c 64 64 6f  |.&lt;plg_data&gt;.&lt;ddo|
00000100  73 3e 3c 74 63 70 5f 73  69 7a 65 3e 31 30 30 30  |s&gt;&lt;tcp_size&gt;1000|
00000110  3c 2f 74 63 70 5f 73 69  7a 65 3e 0d 0a 3c 74 63  |&lt;/tcp_size&gt;..&lt;tc|</code></pre>
<h3>Note</h3>
<p>Although not used here, don't forget you can <code>XOR</code> out the "Rich" and "DanS" DWORDS where appropriate.</p>
<p><a id="LastFix" name="LastFix"><br/>
<h3>Fixing the last chunk of XML</h3>
<p></a></p>
<p>So pull this back up in a text editor and make another correction pass over it. Since half the DWORDS are less than 0x00000010, expect to see a run of three good characters, followed by a bad one. And every <code>@comp.id</code> is 0x00 for the high byte, expect three garbled characters followed by one good one. (And all these offsets DWORD aligned.) <small>[And I know I basically said the same thing above. I wrote post in small chunks over two months, and I don't want to do more editing than I need to.]</small></p>
<p>I'm doing these example with the <code>XOR</code> hash that's slightly off. Since I already wrote up all the hexdumps and correction prose.</p>
<pre><code>00000080  33 04 1c 20 68 6f 6e 3e  30 3c 2f 76 64 72 73 69  |3.. hon&gt;0&lt;/vdrsi|
00000090  6b 62 63 0a 3f 2f 70 6c  b7 68 34 6e 3d 0a 3c 70  |kbc.?/pl.h4n=.&lt;p|</code></pre>
<ul>
<li>"<code>&lt;3<b>\x04\x1c</b> hon&gt;0&lt;/vdrsikbc<b>\x0A</b></code>" I believe looks like:<br/>
"<code>&lt;version&gt;0&lt;/version&gt;<b>\x0A</b></code>"</li>
<li>The the next byte is garbled, but "<code>/pl</code>" should be correct, and the next three garbled, but "<code>n</code>" and then "<code><b>\x0A</b>&lt;pl</code>" are correct.<br/><br/>
This is probably the closing "plugin" tag.<br/><br/>
"<code>?/pl<b>\xB7</b>h4n=<b>\x0A</b>&lt;p</code>" becomes "<code>&lt;/plugin&gt;<b>\x0A</b>&lt;p</code>"</li>
<li>"<code>&lt;p~}:im&gt;<b>\x0A</b>&lt;" the "~}:</code>" is wrong, the "<code>i</code>" should be correct, and the "<code>m</code>" wrong, while "<code>&gt;<b>\x0A</b>&lt;</code>" is correct.</li>
<li>I'm going to guess this also says "plugin"<br/><br/>
"<code>&lt;plugin&gt;<b>\x0A</b>&lt;</code>"</li>
</ul>
<pre><code>000000a0  7e 7d 3a 69 6d 3e 0a 3c  ec 69 30 65 34 73 79 6e  |~}:im&gt;.&lt;.i0e4syn|
000000b0  3d 2f 6f 61 4a 65 3e 0a  38 7a 05 72 75 69 6f 6e  |=/oaJe&gt;.8z.ruion|
000000c0  3a 3d 60 2f 76 65 72 73  6d 63 34 3e 0a 3c 2f 70  |:=`/versmc4&gt;.&lt;/p|
000000d0  1c 12 a6 a7 6f 3e 0a 9a  2f 70 6c 75 67 69 6e 73  |....o&gt;../plugins|</code></pre>
<ul>
<li>"<code>&lt;<b>\xEC</b>i0e4syn</code>" the "<code><b>\xEC</b>i0</code>" part is garbled, the "<code>e</code>" is correct, the "<code>4</code>" isn't, and the "<code>syn</code>" is correct.<br/><br/>
Considering that this is immediately followed by "<code>=/oaJe&gt;<b>\x0A</b></code>", and looking at the XML tags above. These are probably enclosing "name" tags.<br/><br/>
"<code>&lt;name&gt;syn&lt;/name&gt;<b>\x0A</b></code>"</li>
<li>"<code>8z<b>\x05</b>ruion:=`/versmc4&gt;<b>\x0A</b></code>" Well, "<code>8z<b>\x05</b></code>" and "<code>r</code>" are wrong, "<code>r</code>" and "<code>ion</code>" are correct.<br/><br/>
"<code>:=`</code>" should be wrong, "<code>/</code>" correct, "<code>v</code>" wrong, and "<code>ers</code>" correct, "<code>mc4</code>" wrong, "<code>&gt;</code>" correct, "<code><b>\x0a</b></code>" wrong and "<code>&lt;/p</code>" correct.<br/><br/>
It's probably version, considering the XML pattern from above.<br/><br/>
So, corrected: "<code>&lt;version&gt;=&lt;/version&gt;</code>" (Probably not "Version =" but rather a number, I'll deal with it later.)
</li>
</ul>
<pre><code>000000d0  1c 12 a6 a7 6f 3e 0a 9a  2f 70 6c 75 67 69 6e 73  |....o&gt;../plugins|</code></pre>
<ul>
<li>"<code>&lt;/p<b>\x1</b>c<b>\x12\xa6\xa7</b>o&gt;<b>\x0A</b>Z/plugins&gt;</code>" This is obviously the closing "plugin" tag.<br/>
"<code>&lt;/plugin&gt;\x0A&lt;/plugins&gt;</code>"</li>
</ul>
<p>
So, this looks almost totally correct, except for those version numbers. We can XOR this back against the original ciphertext, and encrypted syn.dll and<br/>
verify correctness of the EXE.
</p>
<p><a id="Final" name="Final"><br/>
<h2>Final Pass</h2>
<p></a></p>
<h3>Review</h3>
<pre><code><small>00000000  3c 3f 78 6d 6c 20 76 65  72 73 69 6f 6e 3d 22 31  |&lt;?xml version="1|
00000010  2e 30 22 3f 3e 0a 3c 62  6b 65 72 6e 65 6c 3e 0a  |.0"?&gt;.&lt;bkernel&gt;.|
00000020  3c 70 6c 75 67 69 6e 73  3e 0a 3c 70 6c 75 67 69  |&lt;plugins&gt;.&lt;plugi|
00000030  6e 3e 0a 3c 6e 61 6d 65  3e 64 64 6f 73 3c 2f 6e  |n&gt;.&lt;name&gt;ddos&lt;/n|
00000040  61 6d 65 3e 0a 3c 76 65  72 73 69 6f 6e 3e 31 3c  |ame&gt;.&lt;version&gt;1&lt;|
00000050  2f 76 65 72 73 69 6f 6e  3e 0a 3c 2f 70 6c 75 67  |/version&gt;.&lt;/plug|
00000060  69 6e 3e 0a 3c 70 6c 75  67 69 6e 3e 0a 3c 6e 61  |in&gt;.&lt;plugin&gt;.&lt;na|
00000070  6d 65 3e 68 74 74 70 3c  2f 6e 61 6d 65 3e 0a 3c  |me&gt;http&lt;/name&gt;.&lt;|
00000080  76 65 72 73 69 6f 6e 3e  <span style="background-color:yellow;"><b>30</b></span> 3c 2f 76 65 72 73 69  |version&gt;<span style="background-color:yellow;"><b>0</b></span>&lt;/versi|
00000090  6f 6e 3e 0a 3c 2f 70 6c  75 67 69 6e 3e 0a 3c 70  |on&gt;.&lt;/plugin&gt;.&lt;p|
000000a0  6c 75 67 69 6e 3e 0a 3c  6e 61 6d 65 3e 73 79 6e  |lugin&gt;.&lt;name&gt;syn|
000000b0  3c 2f 6e 61 6d 65 3e 0a  3c 76 65 72 73 69 6f 6e  |&lt;/name&gt;.&lt;version|
000000c0  3e <span style="background-color:yellow;"><b>3d</b></span> 3c 2f 76 65 72 73  69 6f 6e 3e 0a 3c 2f 70  |&gt;<span style="background-color:yellow;"><b>=</b></span>&lt;/version&gt;.&lt;/p|
000000d0  6c 75 67 69 6e 3e 0a 3c  2f 70 6c 75 67 69 6e 73  |lugin&gt;.&lt;/plugins|
000000e0  3e 0a 3c 63 6d 64 73 3e  0a 3c 2f 63 6d 64 73 3e  |&gt;.&lt;cmds&gt;.&lt;/cmds&gt;|
000000f0  0a 3c 70 6c 67 5f 64 61  74 61 3e 0a 3c 64 64 6f  |.&lt;plg_data&gt;.&lt;ddo|
00000100  73 3e 3c 74 63 70 5f 73  69 7a 65 3e 31 30 30 30  |s&gt;&lt;tcp_size&gt;1000|
00000110  3c 2f 74 63 70 5f 73 69  7a 65 3e 0d 0a 3c 74 63  |&lt;/tcp_size&gt;..&lt;tc|
00000120  70 5f 66 72 65 71 3e 35  30 3c 2f 74 63 70 5f 66  |p_freq&gt;50&lt;/tcp_f|
00000130  72 65 71 3e 0d 0a 3c 74  63 70 5f 74 68 72 65 61  |req&gt;..&lt;tcp_threa|
00000140  64 73 3e 35 3c 2f 74 63  70 5f 74 68 72 65 61 64  |ds&gt;5&lt;/tcp_thread|
00000150  73 3e 0d 0a 3c 75 64 70  5f 73 69 7a 65 3e 31 30  |s&gt;..&lt;udp_size&gt;10|
00000160  30 30 3c 2f 75 64 70 5f  73 69 7a 65 3e 0d 0a 3c  |00&lt;/udp_size&gt;..&lt;|
00000170  75 64 70 5f 66 72 65 71  3e 35 30 3c 2f 75 64 70  |udp_freq&gt;50&lt;/udp|
00000180  5f 66 72 65 71 3e 0d 0a  3c 75 64 70 5f 74 68 72  |_freq&gt;..&lt;udp_thr|
00000190  65 61 64 73 3e 35 3c 2f  75 64 70 5f 74 68 72 65  |eads&gt;5&lt;/udp_thre|
000001a0  61 64 73 3e 0d 0a 3c 69  63 6d 70 5f 73 69 7a 65  |ads&gt;..&lt;icmp_size|
000001b0  3e 31 30 30 30 3c 2f 69  63 6d 70 5f 73 69 7a 65  |&gt;1000&lt;/icmp_size|
000001c0  3e 0d 0a 3c 69 63 6d 70  5f 66 72 65 71 3e 35 30  |&gt;..&lt;icmp_freq&gt;50|
000001d0  3c 2f 69 63 6d 70 5f 66  72 65 71 3e 0d 0a 3c 69  |&lt;/icmp_freq&gt;..&lt;i|
000001e0  63 6d 70 5f 74 68 72 65  61 64 73 3e 35 3c 2f 69  |cmp_threads&gt;5&lt;/i|
000001f0  63 6d 70 5f 74 68 72 65  61 64 73 3e 0d 0a 3c 68  |cmp_threads&gt;..&lt;h|
00000200  74 74 70 5f 66 72 65 71  3e 31 30 30 3c 2f 68 74  |ttp_freq&gt;100&lt;/ht|
00000210  74 70 5f 66 72 65 71 3e  0d 0a 3c 68 74 74 70 5f  |tp_freq&gt;..&lt;http_|
00000220  74 68 72 65 61 64 73 3e  35 3c 2f 68 74 74 70 5f  |threads&gt;5&lt;/http_|
00000230  74 68 72 65 61 64 73 3e  3c 2f 64 64 6f 73 3e 0a  |threads&gt;&lt;/ddos&gt;.|
00000240  3c 68 74 74 70 3e 3c 68  74 74 70 5f 66 72 65 71  |&lt;http&gt;&lt;http_freq|
00000250  3e 33 30 3c 2f 68 74 74  70 5f 66 72 65 71 3e 0d  |&gt;30&lt;/http_freq&gt;.|
00000260  0a 3c 68 74 74 70 5f 74  68 72 65 61 64 73 3e 32  |.&lt;http_threads&gt;2|
00000270  3c 2f 68 74 74 70 5f 74  68 72 65 61 64 73 3e 3c  |&lt;/http_threads&gt;&lt;|
00000280  2f 68 74 74 70 3e 0a 3c  73 79 6e 3e 3c 73 79 6e  |/http&gt;.&lt;syn&gt;&lt;syn|
00000290  5f 66 72 65 71 3e 32 30  3c 2f 73 79 6e 5f 66 72  |_freq&gt;20&lt;/syn_fr|
000002a0  65 71 3e 0d 0a 3c 73 79  6e 5f 74 68 72 65 61 64  |eq&gt;..&lt;syn_thread|
000002b0  73 3e 33 3c 2f 73 79 6e  5f 74 68 72 65 61 64 73  |s&gt;3&lt;/syn_threads|
000002c0  3e 3c 2f 73 79 6e 3e 0a  3c 2f 70 6c 67 5f 64 61  |&gt;&lt;/syn&gt;.&lt;/plg_da|
000002d0  74 61 3e 0a 3c 73 6c 65  65 70 66 72 65 71 3e 39  |ta&gt;.&lt;sleepfreq&gt;9|
000002e0  30 30 3c 2f 73 6c 65 65  70 66 72 65 71 3e 0a 3c  |00&lt;/sleepfreq&gt;.&lt;|
000002f0  69 70 3e 31 32 38 2e 31  33 30 2e 35 36 2e 32 32  |ip&gt;128.130.56.22|
00000300  3c 2f 69 70 3e 0a 3c 2f  62 6b 65 72 6e 65 6c 3e  |&lt;/ip&gt;.&lt;/bkernel&gt;|
00000310  0a                                                |.|
00000311
00000000  4d 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |MZ..............| ; MZ!
00000010  b8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 e8 00 00 00  |................|
00000040  0e 1f ba 0e 00 b4 09 cd  21 b8 01 4c cd 21 54 68  |........!..L.!Th| ; Dos stub
00000050  69 73 20 70 72 6f 67 72  61 6d 20 63 61 6e 6e 6f  |is program canno|
00000060  74 20 62 65 20 72 75 6e  20 69 6e 20 44 4f 53 20  |t be run in DOS |
00000070  6d 6f 64 65 2e 0d 0d 0a  24 00 00 00 00 00 00 00  |mode....$.......|
00000080  67 6f cc f5 23 0e a2 a6  <span style="background-color:yellow;"><b>22</b></span> 0e a2 a6 23 0e a2 a6  |go..#...<span style="background-color:yellow;"><b>"</b></span>...#...| ; oops, still off
00000090  26 02 ff a6 21 0e a2 a6  e0 01 ff a6 21 0e a2 a6  |&amp;...!.......!...|
000000a0  30 06 ff a6 21 0e a2 a6  a0 06 ff a6 28 0e a2 a6  |0...!.......(...|
000000b0  23 0e a3 a6 05 0e a2 a6  26 02 c2 a6 24 0e a2 a6  |#.......&amp;...$...|
000000c0  26 <span style="background-color:yellow;"><b>0e</b></span> fe a6 22 0e a2 a6  26 02 f8 a6 22 0e a2 a6  |&amp;<span style="background-color:yellow;"><b>.</b></span>.."...&amp;..."...|
000000d0  52 69 63 68 23 0e a2 a6  00 00 00 00 00 00 00 00  |Rich#...........|
000000e0  00 00 00 00 00 00 00 00  50 45 00 00 4c 01 04 00  |........PE..L...| ; PE Header
000000f0  79 42 b3 48 00 00 00 00  00 00 00 00 e0 00 0e 21  |yB.H...........!|
00000100  0b 01 07 0a 00 0e 00 00  00 3a 00 00 00 00 00 00  |.........:......| ; PE Optional Header
00000110  ac 10 00 00 00 10 00 00  00 20 00 00 00 00 00 10  |......... ......|
00000120  00 10 00 00 00 02 00 00  04 00 00 00 00 00 00 00  |................|
00000130  04 00 00 00 00 00 00 00  00 70 00 00 00 04 00 00  |.........p......|
00000140  00 00 00 00 02 00 00 04  00 00 10 00 00 10 00 00  |................|
00000150  00 00 10 00 00 10 00 00  00 00 00 00 10 00 00 00  |................|
00000160  10 26 00 00 62 00 00 00  08 22 00 00 b4 00 00 00  |.&amp;..b...."......|
00000170  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000180  00 00 00 00 00 00 00 00  00 60 00 00 bc 00 00 00  |.........`......|
00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001c0  00 20 00 00 b4 00 00 00  00 00 00 00 00 00 00 00  |. ..............|
000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001e0  2e 74 65 78 74 00 00 00  00 0d 00 00 00 10 00 00  |.text...........|
000001f0  00 0e 00 00 00 04 00 00  00 00 00 00 00 00 00 00  |................|
00000200  00 00 00 00 20 00 00 60  2e 72 64 61 74 61 00 00  |.... ..`.rdata..|
00000210  72 06 00 00 00 20 00 00  00 08 00 00 00 12 00 00  |r.... ..........|
00000220  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 40  |............@..@|
00000230  2e 64 61 74 61 00 00 00  70 2e 00 00 00 30 00 00  |.data...p....0..|
00000240  00 26 00 00 00 1a 00 00  00 00 00 00 00 00 00 00  |.&amp;..............|
00000250  00 00 00 00 40 00 00 c0  2e 72 65 6c 6f 63 00 00  |....@....reloc..|
00000260  4c 01 00 00 00 60 00 00  00 02 00 00 00 40 00 00  |L....`.......@..|
00000270  00 00 00 00 00 00 00 00  00 00 00 00 40 00 00 42  |............@..B|
00000280  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000310  00                                                |.|
00000311</small></code></pre>
<h3>Finally...</h3>
<p>Ok, so we now know the correct value of the mask, since we're confident that the corresponding XML is correct here.</p>
<pre><code>000000d0  52 69 63 68 23 0e a2 a6  00 00 00 00 00 00 00 00  |Rich#...........|
000000d0  6c 75 67 69 6e 3e 0a 3c  2f 70 6c 75 67 69 6e 73  |lugin&gt;.&lt;/plugins|</code></pre>
<p>The correct mask to use is "23 0e a2 a6" not "22 0e a2 A6" as was our [my] first guess, but they were very close<br/>
only differ by "01 00 00 00" so, the correction bitmask I used was something like:</p>
<p>(You could also redo everything from "<a href="#LastFix">Fixing the last chunk of XML</a>" above, if you want to do all that XML correction over again.)</p>
<pre><code>
01 00 00 00 01 00 00 00  <span style="background-color:yellow;"><b>01</b></span> 00 00 00 01 00 00 00
00000080  67 6f cc f5 23 0e a2 a6  <span style="background-color:yellow;"><b>22</b></span> 0e a2 a6 23 0e a2 a6  |go..#...<span style="background-color:yellow;"><b>"</b></span>...#...|
00000080  76 65 72 73 69 6f 6e 3e  <span style="background-color:yellow;"><b>30</b></span> 3c 2f 76 65 72 73 69  |version&gt;<span style="background-color:yellow;"><b>0</b></span>&lt;/versi|
Correction:
00000080  67 6f cc f5 23 0e a2 a6  <span style="background-color:yellow;"><b>23</b></span> 0e a2 a6 23 0e a2 a6  |go..#...<span style="background-color:yellow;"><b>#</b></span>...#...|
00000080  76 65 72 73 69 6f 6e 3e  <span style="background-color:yellow;"><b>31</b></span> 3c 2f 76 65 72 73 69  |version&gt;<span style="background-color:yellow;"><b>1</b></span>&lt;/versi|
</code></pre>
<p>So, the version number tag was still off by one, correcting to "<code>1</code>".</p>
<p>For the other version number however, it's an actual unknown byte value,<br/>
dependent upon whatever was going through Visual Studio's Linker's tiny little mind at compile time.</p>
<p>This is the last unknown byte in the file(s). And the only time until now there is not enough information&hellip;<br/>
You could say, Well fuck it! It's probably also "<code>1</code>" like the other two version strings. (There's only a 1 in 16 chance of being wrong.)</p>
<pre><code>          01 00 00 00 01 00 00 00  01 00 00 00 01 00 00 00
000000c0  26 <span style="background-color:yellow;"><b>0e</b></span> fe a6 22 0e a2 a6  26 02 f8 a6 22 0e a2 a6  |&amp;<span style="background-color:yellow;"><b>.</b></span>.."...&amp;..."...|
000000c0  3e <span style="background-color:yellow;"><b>3d</b></span> 3c 2f 76 65 72 73  69 6f 6e 3e 0a 3c 2f 70  |&gt;<span style="background-color:yellow;"><b>=</b></span>&lt;/version&gt;.&lt;/p|
000000c0  26 <span style="background-color:yellow;"><b>02</b></span> fe a6 22 0e a2 a6  26 02 f8 a6 22 0e a2 a6  |&amp;<span style="background-color:yellow;"><b>.</b></span>.."...&amp;..."...|
000000c0  3e <span style="background-color:yellow;"><b>31</b></span> 3c 2f 76 65 72 73  69 6f 6e 3e 0a 3c 2f 70  |&gt;<span style="background-color:yellow;"><b>1</b></span>&lt;/version&gt;.&lt;/p|</code></pre>
<p>You could also try against it, all known <code>@comp.id</code>'s matching the pattern "<code>26 ?? fe a6</code>". Or, if every other byte up to the PE header is correct at this point, you can calculate the value of this byte by calculating backwards from the (known correct) hash value. (Left as an exercise for the reader.)</p>
<p>So, after doing all this, the finished config file that I came up with hashes to <code>2eddd3fa59f2bbec61415fc599e1aee8</code></br><br/>
And so we can recover the keystream, and decrypt the first 785 bytes of the other three EXE (really DLL) files. This is what I got if you want to check your work against mine. You have been following along in your notebook this whole time, right?</p>
<pre><code>27e95b028ddde6dbd9f58f3796b54f26 ddos.dll_first_785
d3c76705708d33f95a86da0dedbf5d9d http.dll_first_785
b4a14bdc6d19a805a9bd9008f555a2fa syn.dll_first_785</code></pre>
<p>Anyway, if you have a large malware zoo, you can search for DLL files, which are 11264, 6657, and 16896 bytes long. And which begin with one of the three 785 byte sequences recovered above. (There's a correspondence between file length, and which 785 byte chunk to use, which should be obvious, so I won't explain.)</p>
<p>And if you do this, the files that you find are:</p>
<pre><code>5991402077ab21c5e656550214298f20  ddos.dll [<a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/?q=ocsearch&amp;ocq=5991402077ab21c5e656550214298f20">Live Sample</a>]
fe9cf7b3f01816393298ff1345ca3c04  http.dll [<a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/?q=ocsearch&amp;ocq=fe9cf7b3f01816393298ff1345ca3c04">Live Sample</a>]
87b71080d75b5ca222fa51ce7563a615  syn.dll [<a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/?q=ocsearch&amp;ocq=87b71080d75b5ca222fa51ce7563a615">Live Sample</a>]
</code></pre>
<p>All of which I've tossed up on <a href="https://web.archive.org/web/20140428201836/http://www.offensivecomputing.net/">OC</a> for your <strike>enjoyment</strike> education. None of them are packed, all of the imports to "<code>main.dll</code>" are referring to the original sample. Pay particular attention to how the "http.dll" looks remarkably similar to "Black Energy v1.x" .</p>
<p><a id="Verify" name="Verify"><br/>
<h2>Verification</h2>
<p></a></p>
<h3>Simple Check</h3>
<p>Each of these three, when XOR's with its encrypted counterpart, all produce the exact same keystream. So these are the correctly decrypted files.</p>
<h3>Check PE Headers</h3>
<p>Are you tired of reading this yet, because I'm certainly tired of writing this. Anyway, All you need to know about PE headers:<br/>
<!-- <a href="http://www.microsoft.com/whdc/system/platform/firmware/PECOFFdwn.mspx">http://www.microsoft.com/whdc/system/platform/firmware/PECOFFdwn.mspx</a></p>
<p> --><br/>
<!-- <a href="http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/pecoff_v8.docx">pecoff_v8.docx</a> --><br/>
<span title="http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/pecoff_v8.docx"><a href="https://web.archive.org/web/20140428201836/http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx">http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx</a></span></p>
<p>You can sanity check them if you would like, I'm not going to bother. See <a href="#AppendixF">Appendix F</a>.</p>
<h3>Check Rich Headers</h3>
<p>The hash of the first umpteen bytes should calculate out correctly. I wrote a program to do some of these checks. See <a href="#AppendixC">Appendix C</a> below.</p>
<p><b>References</b><br/></p>
<p>Absolutely everything that I could find about the "Rich" header.<br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://ntcore.com/Files/richsign.htm">http://ntcore.com/Files/richsign.htm</a><br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://web17.webbpro.de/index.php?page=microsofts-rich-header">http://web17.webbpro.de/index.php?page=microsofts-rich-header</a><br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://www.woodmann.com/forum/archive/index.php/t-11367.html">http://www.woodmann.com/forum/archive/index.php/t-11367.html</a><br/><br/>
<a href="https://web.archive.org/web/20140428201836/http://trendystephen.blogspot.com/2008/01/rich-header.html">http://trendystephen.blogspot.com/2008/01/rich-header.html</a><br/><br/>
And then I saw, <a href="https://web.archive.org/web/20140428201836/http://docs.google.com/Doc?id=dcn764fg_2j54gzfc">http://docs.google.com/Doc?id=dcn764fg_2j54gzfc</a> .<br/>
</p>
<p><a id="Future" name="Future"><br/>
<h2>The Future</h2>
<p></a></p>
<p>Newer versions of "Black Energy" &mdash; or what everyone calls "Black Energy v2" &mdash; do something completely different with their crypto, so, as I said, this trick no longer works.</p>
<p>Examine these two cyphertexts. These are the ones I used as examples. Notice how all but a single byte between offsets <code>0</code> and <code>0x80</code> are the same.</p>
<pre><code>
syn.dll:
00000000  81 7f 91 83 33 59 b8 82  04 4a de ba 99 87 86 0e  |....3Y...J......|
00000010  92 5b e2 78 d0 8a 59 8a  ba 4a c5 f4 59 31 48 1e  |.[.x..Y..J..Y1H.|
00000020  29 a9 86 92 2d 60 6d 76  e9 6e 84 b8 30 7a 45 3d  |)...-`mv.n..0zE=|
00000030  b6 27 30 7d 60 6e 3e 62  1a 71 59 22 ed 45 56 1e  |.'0}`n&gt;b.qY".EV.|
00000040  24 89 84 5c 1d e6 e1 c5  c9 f1 27 22 34 c0 c8 35  |$..\......'"4..5|
00000050  fc 69 10 02 e4 31 4d 88  fc f4 38 8b 38 04 f4 00  |.i...1M...8.8...|
00000060  cb de 98 7c c8 fc f8 1b  2e 32 7a 9a 66 d6 16 41  |...|.....2z.f..A|
00000070  20 89 81 2d 04 68 f7 b0  7e da 60 30 62 0e 5d e2  | ..-.h..~.`0b.].|
00000080  df 6e 86 a8 39 1a eb 0b  c2 6d cc ab b2 2c 46 3a  |.n..9....m...,F:|
00000090  6f 46 01 8c b0 f7 f2 d1  06 74 be 80 68 a0 bd 0c  |oF.......t..h...|
http.dll:
00000000  81 7f 91 83 33 59 b8 82  04 4a de ba 99 87 86 0e  |....3Y...J......|
00000010  92 5b e2 78 d0 8a 59 8a  ba 4a c5 f4 59 31 48 1e  |.[.x..Y..J..Y1H.|
00000020  29 a9 86 92 2d 60 6d 76  e9 6e 84 b8 30 7a 45 3d  |)...-`mv.n..0zE=|
00000030  b6 27 30 7d 60 6e 3e 62  1a 71 59 22 fd 45 56 1e  |.'0}`n&gt;b.qY".EV.|
00000040  24 89 84 5c 1d e6 e1 c5  c9 f1 27 22 34 c0 c8 35  |$..\......'"4..5|
00000050  fc 69 10 02 e4 31 4d 88  fc f4 38 8b 38 04 f4 00  |.i...1M...8.8...|
00000060  cb de 98 7c c8 fc f8 1b  2e 32 7a 9a 66 d6 16 41  |...|.....2z.f..A|
00000070  20 89 81 2d 04 68 f7 b0  7e da 60 30 62 0e 5d e2  | ..-.h..~.`0b.].|
00000080  55 bf 8d c9 b3 cb e0 6a  48 bc c7 ca 38 fd 4d 5b  |U......jH...8.M[|
00000090  e5 97 58 ed 3b 26 f9 b0  4a a6 b7 e1 e1 71 b6 6d  |..X.;&#038;..J....q.m|
</code></pre>
<p>Now look at these three newer cyphertexts, generated by newer versions of the bot. There is nothing in common.</p>
<pre><code>EXE 1:
00000000  e9 e1 c4 48 3b 42 c2 94  df 90 50 ef d2 8f 10 78  |...H;B....P....x|
00000010  8f 5c f4 c8 d0 0d a4 5c  7c 14 3a 19 f9 d3 f9 7c  |.\.....\|.:....||
00000020  85 48 6c fa 1d 44 c3 cf  37 8c 19 e3 17 1c d8 b6  |.Hl..D..7.......|
00000030  c8 98 34 70 e6 57 3c 38  0e 9e fa 9e 27 a2 22 4b  |..4p.W&lt;8....'."K|
00000040  9e 7b 7e d3 5b a4 2b 71  b2 1e 5d fc 69 ee 0e be  |.{~.[.+q..].i...|
00000050  ab 20 68 b3 f7 d7 2b 3f  6c 9d 90 0b 62 85 46 e2  |. h...+?l...b.F.|
00000060  00 d9 b2 8e e8 90 0c 06  74 af 2a 70 de c9 ee d7  |........t.*p....|
00000070  7d f3 59 16 2b fe 86 7d  2c 39 b8 68 59 dc 79 c2  |}.Y.+..},9.hY.y.|
00000080  83 99 3c 7d fd 1d f2 ad  3b 9e 2a 18 14 b0 15 95  |..&lt;}....;.*.....|
00000090  ee 3f 3a ab 04 85 be 9d  e5 27 c1 02 aa 26 aa 55  |.?:......'...&amp;.U|
EXE 2:
00000000  4f 57 70 aa 8c 86 a0 54  b5 d6 14 d0 3e d5 e1 40  |OWp....T....&gt;..@|
00000010  12 20 c1 44 02 61 26 e1  1b 0a 4d 3a 7b 2a 6a f1  |. .D.a&amp;...M:{*j.|
00000020  02 7c 6f 29 d1 5b c6 11  10 ee d1 c6 8a 03 11 c3  |.|o).[..........|
00000030  42 e1 21 3c 62 2d 98 e6  0d 9c 40 91 48 34 8f b0  |B.!&lt;b-....@.H4..|
00000040  4a 32 70 a3 20 34 e7 02  67 19 eb 2a 0c b5 ed ec  |J2p. 4..g..*....|
00000050  83 3a 76 1e 49 b3 13 34  02 82 2f e5 6c 2e be 74  |.:v.I..4../.l..t|
00000060  13 03 4d 07 6f 33 16 68  11 c6 a9 02 c4 3f 77 e2  |..M.o3.h.....?w.|
00000070  5d 34 0a 1e ef cd 2f 50  d4 76 e2 58 a0 c7 af 6d  |]4..../P.v.X...m|
00000080  3d 74 a0 99 ef 75 e4 5e  07 d2 0f 96 a9 06 e7 96  |=t...u.^........|
00000090  ce 62 7d 89 4b 1f 08 6d  e3 f5 8a fb dc 92 83 87  |.b}.K..m........|
EXE 3:
00000000  1f 60 5a f2 3e c5 25 e1  62 52 9a 2b f9 1d 4f d4  |.`Z.&gt;.%.bR.+..O.|
00000010  77 84 47 d4 8b a4 d9 ea  a8 da a8 12 ec d9 ea 6f  |w.G............o|
00000020  67 ac 85 27 8f 25 5f 7f  cf f9 19 ec 45 0f d3 c5  |g..'.%_.....E...|
00000030  ef 19 cf 52 0c 5d 94 c8  48 8c 34 a7 93 c5 45 a7  |...R.]..H.4...E.|
00000040  74 55 fb fa 12 52 47 ca  87 62 49 62 b2 bc 18 0a  |tU...RG..bIb....|
00000050  4e 93 cb d1 34 2b f3 4d  86 9f 2a 1e 13 4f 0a c3  |N...4+.M..*..O..|
00000060  93 26 e8 49 32 40 e1 22  f4 16 69 fd a0 a7 b7 ee  |.&amp;.I2@."..i.....|
00000070  1e 83 a5 4f fd ff c9 59  cb 32 b9 8e a1 8c 73 8f  |...O...Y.2....s.|
00000080  e0 84 49 50 d9 56 79 16  1c 5b 27 0d 95 5a a8 4d  |..IP.Vy..['..Z.M|
00000090  c5 2f 73 8e 7a 72 19 b8  74 94 22 d1 45 fb 9c 4c  |./s.zr..t.".E..L|</code></pre>
<p><a id="End" name="End"><br/>
<h2>The End</h2>
<p></a></p>
<p>Yay! I'm done.</p>
<p><a id="AppendixA" name="AppendixA"><br/>
<h2>Appendix A</h2>
<p></a></p>
<p>When I say <code>file ^ file = file</code>, that means <codexor< code> each pair of bytes, from the same offset in both files, together, and write the result to the same offset in the third.<br/>
Formally, think of it as something like<br/>
<a style="display: inline;" href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/.a/6a00d835018afd53ef0120a8ee8fe0970b-pi"><img class="asset  asset-image at-xid-6a00d835018afd53ef0120a8ee8fe0970b" alt="" \sum_{i="0}^n" output_i="file^1_i" \oplus file^2_i" title="" \sum_{i="0}^n" output_i="file^1_i" \oplus file^2_i"" src="https://web.archive.org/web/20140428201836im_/http://www.fireeye.com/blog/wp-content/uploads/2012/11/6a00d835018afd53ef0120a8ee8fe0970b-800wi.png" border="0"/></a><br/>
<br/> You could also say the same thing about summing all the bits over <code>GF(2)</code>. But pretend that I didn't just say all that.
<p>So, File "<code>x</code>" is a stream of bytes, File "<code>y</code>" is a stream of bytes, <code>n = min(len(x),len(y))</code></p>
<p>Vaguely almost like this:</p>
<pre><code>
while ((0!=sysread(IN1, $inbuf1, 1))&amp;&amp;(0!=sysread(IN2, $inbuf2, 1))) {
$outbuf = $inbuf1 ^ $inbuf2;
syswrite(OUT, $outbuf, 1);
}</code></pre>
<p><a id="AppendixB" name="AppendixB"><br/>
<h2>Appendix B</h2>
<p></a></p>
<p>This is how I XOR files together. You might find it useful.</p>
<pre><code><small>
use Fcntl;
my $infile1 = shift;
my $infile2 = shift;
my $outfile = shift;
my $inbuf1;
my $inbuf2;
my $outbuf;
print("DEBUG: $infile1 ^ $infile2 -&gt; $outfile\n");
sysopen(IN1, $infile1, O_RDONLY);
sysopen(IN2, $infile2, O_RDONLY);
sysopen(OUT, $outfile, O_WRONLY|O_CREAT);
binmode(IN1);
binmode(IN2);
binmode(OUT);
while ((0!=sysread(IN1, $inbuf1, 1))&amp;&amp;(0!=sysread(IN2, $inbuf2, 1))) {
$outbuf = $inbuf1 ^ $inbuf2;
syswrite(OUT, $outbuf, 1);
}
close($infile1);
close($infile2);
close($outfile);
</small></code></pre>
<p><a id="AppendixC" name="AppendixC"><br/>
<h2>Appendix C</h2>
<p></a></p>
<p>If you need to un-HTML-ize this, the only encoding I did on it was:<br/><br/>
<code>sed 's/&amp;/\&amp;amp;/g' hash.pl | sed 's/&lt;/\&amp;lt;/g' | sed 's/&gt;/\&amp;gt;/g'</code></p>
<p><!-- Ironically needing to be encoded twice... anyway, if you're reading this, the original: --><br/>
<!-- sed 's/&#038;/\&amp;/g' hash.pl | sed 's/</\&lt;/g' | sed 's/>/\&gt;/g' --></p>
<pre><code><small>
#!/usr/bin/perl -w
# Julia Wolf
# Rich header hash checker.
# Public Domain
# Version 0.0.1 alpha
# Not really tested, use at own risk and all that jazz.
# Usage:
# perl this.pl some.exe
use strict;
my $file = shift or die;
sub rol {
my $number = shift;
my $bitshift = (shift) % 32;
return ( 0x0FFFFFFFF&#038;($number &lt;&lt;       $bitshift  )        ) |
( 0x0FFFFFFFF&#038;($number &gt;&gt; (32 - $bitshift) )        ) ;
}
# unused
sub ror {
my $number = shift;
my $bitshift = (shift) % 32;
return ($number &gt;&gt; $bitshift) | ($number &lt;&lt; (32 - $bitshift) );
}
my $start = 0x80; # TODO
my $data = `cat $file`; # Warning: Not portable code
my @bytes = split(//,$data);
map {$_ = unpack("C",$_); } @bytes;
my @dwords = unpack("V*", $data);
#   .text:004651D6 xormaskloop1 :                 ; CODE XREF: IMAGE::CbBuildProdidBlock(void * *)+105j
#   .text:004651D6       movzx edi, byte ptr [ebx+eax] ; edi = (BYTE) PointerToPE[eax]
#   .text:004651DA       mov cl, al              ; low byte of loop counter in cl
#   .text:004651DC       rol edi, cl             ; rotates left the current byte of PointerToPE
#   .text:004651DC                               ; with the low byte of the loop counter
#   .text:004651DE       add eax, 1              ; increment eax
#   .text:004651E1       add esi, edi            ; adds the result of the rol to the xor mask
#   .text:004651E3       cmp eax, edx            ; is counter &lt; initial xor mask value?
#   .text:004651E5       jb short xormaskloop1   ; if so, goes on with the loop
#   .text:004651E7
my $mask = $start;
for (my $i=0; $i&lt;$start; $i++) { next if ( $i&gt;=0x3C &#038;&#038; $i&lt;=0x3F );
last if ($i&gt;=$#bytes);
$mask = $mask + rol($bytes[$i],$i);
$mask = $mask &#038; 0xFFFFFFFF;
}
printf ("%016x mask\n", $mask);
#00000080  44 61 6e 53  00 00 00 00  00 00 00 00  00 00 00 00  |DanS............|
#00000090  05 0c 5d 00  02 00 00 00  c3 0f 5d 00  02 00 00 00  |..].......].....|
#000000a0  13 08 5d 00  02 00 00 00  83 08 5d 00  0b 00 00 00  |..].......].....|
#000000b0  00 00 01 00  26 00 00 00  05 0c 60 00  07 00 00 00  |....&#038;.....`.....|
#000000c0  05 0c 5c 00  01 00 00 00  05 0c 5a 00  01 00 00 00  |...\......Z.....|
#000000d0  71 67 c1 ce  00 00 00 00  23 0e a2 a6  23 0e a2 a6  |qg......#...#...|
#00000080  67 6f cc f5  23 0e a2 a6  23 0e a2 a6  23 0e a2 a6  |go..#...#...#...|
#00000090  26 02 ff a6  21 0e a2 a6  e0 01 ff a6  21 0e a2 a6  |&#038;...!.......!...|
#000000a0  30 06 ff a6  21 0e a2 a6  a0 06 ff a6  28 0e a2 a6  |0...!.......(...|
#000000b0  23 0e a3 a6  05 0e a2 a6  26 02 c2 a6  24 0e a2 a6  |#.......&#038;...$...|
#000000c0  26 02 fe a6  22 0e a2 a6  26 02 f8 a6  22 0e a2 a6  |&#038;..."...&#038;..."...|
#000000d0  52 69 63 68  23 0e a2 a6  00 00 00 00  00 00 00 00  |Rich#...........|
my $thingy = $mask;
#   .text:004651F0 xormaskloop2 :                 ; CODE XREF: IMAGE::CbBuildProdidBlock(void * *)+11Ej
#   .text:004651F0       mov edx, [eax+ 4 ]        ; edx = data1
#   .text:004651F3       mov cl, [eax+ 8 ]         ; cl = (BYTE) data2
#   .text:004651F6       mov eax, [eax]          ; eax = next list item
#   .text:004651F8       rol edx, cl             ; rotates left edx with cl
#   .text:004651FA       add esi, edx            ; adds the result of the rol to the xor mask
#   .text:004651FC       test eax, eax           ; pointer = 0?
#   .text:004651FE       jnz short xormaskloop2  ; if not, goes on with the loop
my $pe_offset = $dwords[15];
if ( $pe_offset ) {
if ( 0x00004550 == $dwords[$pe_offset/4] ) {
print ("PE OK\n");
} else {
print ("PE bad\n");
}
} else {
print ("PE missing\n");
}
my $rich_offset = 0;   #bytes
do {
$rich_offset++; # in dwords
} while ( ($rich_offset&lt;$#dwords)&#038;&#038;(0x68636952 != $dwords[$rich_offset]) ); # undef check if past end
printf ("%016x rich off\n", $rich_offset*4);
my $checksum = $dwords[$rich_offset+1];
if ( $checksum ) {
printf ("%016x checksum\n", $checksum);
} else {
print ("checksum missing\n");
}
my $ugh=0;
for (my $i=0 ; $i&lt;=$rich_offset; $i++) {
if ( $checksum ) {
if (0x536e6144 == ($dwords[$i] ^ $checksum)) {
print ("DanS OK $i\n");
$ugh = $i;
last;
}
} else {
print ("No DanS, checksum missing\n");
}
}
my $count = 0;
for (my $i=$ugh+4; $i&lt;=$rich_offset-1; $i+=2) {
print("Ignore these version numbers for now. The top WORD means something completely different.\n"); #TODO
# printf("comp.id\t%i.0.%i ? %i x %i\n",(($dwords[$i]^$checksum)&#038;0xFFFF),((($dwords[$i]^$checksum)&gt;&gt;16)&#038;0x000F),((($dwords[$i]^$checksum)&gt;&gt;17)&#038;0x000F), ($dwords[$i+1]^$checksum) );
# printf("comp.id\t%i.00.%i (%i?) x %i\n",((($dwords[$i]^$checksum)&gt;&gt;16)&#038;0x000F),(($dwords[$i]^$checksum)&#038;0xFFFF),((($dwords[$i]^$checksum)&gt;&gt;17)&#038;0x000F), ($dwords[$i+1]^$checksum) );
# printf("comp.id\t%i.%i.%i (%i?) x %i\n",((($dwords[$i]^$checksum)&gt;&gt;16)&#038;0x000F),((($dwords[$i]^$checksum)&gt;&gt;24)&#038;0x00FF),(($dwords[$i]^$checksum)&#038;0xFFFF),((($dwords[$i]^$checksum)&gt;&gt;17)&#038;0x000F), ($dwords[$i+1]^$checksum) );
printf("comp.id\t%08x\t%i.%i.%i Occurs: %i\n",
($dwords[$i]^$checksum),
((($dwords[$i]^$checksum)&#038;0x000F0000)&gt;&gt;16), # 13 major
((($dwords[$i]^$checksum)&#038;0x00F00000)&gt;&gt;19),   # 10 minor
(($dwords[$i]^$checksum)&#038;0x0000FFFF),      # 3077 build
#        ((($dwords[$i]^$checksum)&gt;&gt;20)&#038;0x000F), #
($dwords[$i+1]^$checksum) );            # 2 occurence
# This doesn't help...
#   //
#   // Symbol format.
#   //
#
#   typedef struct _IMAGE_SYMBOL {
#       union {
#           BYTE    ShortName[8];
#           struct {
#               DWORD   Short;     // if 0, use LongName
#               DWORD   Long;      // offset into string table
#           } Name;
#           DWORD   LongName[2];    // PBYTE [2]
#       } N;
#       DWORD   Value;
#       SHORT   SectionNumber;
#       WORD    Type;
#       BYTE    StorageClass;
#       BYTE    NumberOfAuxSymbols;
#   } IMAGE_SYMBOL;
#   typedef IMAGE_SYMBOL UNALIGNED *PIMAGE_SYMBOL;
#
#   #define IMAGE_SIZEOF_SYMBOL                  18
#   //
#   // Section values.
#   //
#   // Symbols have a section number of the section in which they are
#   // defined. Otherwise, section numbers have the following meanings:
#   //
#
#   #define IMAGE_SYM_UNDEFINED           (SHORT)0          // Symbol is undefined or is common.
#   #define IMAGE_SYM_ABSOLUTE            (SHORT)-1         // Symbol is an absolute value.
#   #define IMAGE_SYM_DEBUG               (SHORT)-2         // Symbol is a special debug item.
#   #define IMAGE_SYM_SECTION_MAX         0xFEFF            // Values 0xFF00-0xFFFF are special
#
$thingy = $thingy + rol( $dwords[$i] ^ $checksum, $dwords[$i+1] ^ $checksum );
$thingy = $thingy &#038; 0xFFFFFFFF;
$count++; # item count
}
printf ("%016x thingy\n", $thingy);
printf ("%016x diff\n", $checksum - $thingy ) if ( $checksum );
printf ("%016x xor\n", $checksum ^ $thingy ) if ( $checksum );
my $list = ( $count ) * 8;
printf ("%016x list len bytes\n", $list );
printf ("%016x DanS start bytes\n", $ugh*4 );
printf ("%016x list start bytes\n", $ugh*4 + 0x10);
printf ("%016x list end bytes\n", $list+($ugh*4) + 0x10 );
print ("PE == end") if () ;
my $padding = ( (  (($thingy &gt;&gt; 5) % 3)  + $count ) * 8) + 0x20;
printf ("%016x pad\n", $padding );
printf ("%016x end\n", ($ugh*4)+$padding);
print ("PE == end") if ($pe_offset)&#038;&#038;( (($ugh*4)+$padding) == ($pe_offset) ) ;
print "\n";
exit(0);
</small></code></pre>
<p><a id="AppendixD" name="AppendixD"><br/>
<h2>Appendix D</h2>
<p></a></p>
<pre>
2eddd3fa59f2bbec61415fc599e1aee8  1253064020.308867 88.214.243.45 80 192.168.0.2 1038 785 Decrypted Config File
5991402077ab21c5e656550214298f20  1253064023.563605 88.214.243.45 80 192.168.0.2 1039 11264 Decrypted "ddos" EXE
fe9cf7b3f01816393298ff1345ca3c04  1253064029.663532 88.214.243.45 80 192.168.0.2 1040 6657 Decrypted "http" EXE
87b71080d75b5ca222fa51ce7563a615  1253064034.512609 88.214.243.45 80 192.168.0.2 1041 16896 Decrypted "syn" EXE
adae2ddc6ec2cedf9d575b48267b53a4  6657  ddos_x_http
8496ee21928543ee9b49b8df5e1c861b  11264 ddos_x_syn
04c978be26ee36f7cc050795dd2c648b  6657  http_x_syn
c61e182c9b67ab9067138deac9f831a5  785   xml_x_ddos
ddb168742d95068046340ee18fa50dbc  785   xml_x_http
0880df84c5b886cbdd0e0be01deed2f6  785   xml_x_syn
</pre>
<p><a id="AppendixE" name="AppendixE"><br/>
<h2>Appendix E</h2>
<p></a></p>
<p>Look for the value of the <code>@comp.id</code> symbol, in the output from either of these:<br/><br/>
<code>nm coff.obj</code><br/><br/>
<code>dumpbin /SYMBOLS coff.obj</code>
</p>
<table>
<tr>
<th>Build</th>
<th><code>@comp.id</code></th>
<th>Notes (probably wrong)</th>
</tr>
<tr>
<td>2179</td>
<td><code>000F0883</code></td>
<td>Version 7.10.2179 (DDK 3790?)</td>
</tr>
<tr>
<td>3052</td>
<td><code>005F0BEC</code></td>
<td>Version 7.10.3052 ?</td>
</tr>
<tr>
<td>3077</td>
<td><code>000F0C05</code></td>
<td>Version 7.10.3077 (Visual Studio 2003)</td>
</tr>
<tr>
<td>3077</td>
<td><code>005D0C05</code></td>
<td>Version 7.10.3077</td>
</tr>
<tr>
<td>3077</td>
<td><code>005F0C05</code></td>
<td>Version 7.10.3077</td>
</tr>
<tr>
<td>3077</td>
<td><code>00600C05</code></td>
<td>Version 7.10.3077</td>
</tr>
<tr>
<td>4035</td>
<td></td>
<td>7.10.4035 (DDK 3790.1830)</td>
</tr>
<tr>
<td>8155</td>
<td><code>000B1FDB</code></td>
<td>Version 6.00.8155 ?</td>
</tr>
<tr>
<td>8168</td>
<td><code>00041FE8</code></td>
<td>Version 6.00.8168 ?</td>
</tr>
<tr>
<td>8168</td>
<td><code>000A1FE8</code></td>
<td></td>
</tr>
<tr>
<td>8168</td>
<td><code>000B1FE8</code></td>
<td>Version 6.00.8168 ?</td>
</tr>
<tr>
<td>8444</td>
<td><code>001220FC</code></td>
<td>Version 6.14.8444</td>
</tr>
<tr>
<td>8447</td>
<td><code>000420ff</code></td>
<td>Version 6.00.8447 ?</td>
</tr>
<tr>
<td>8966</td>
<td><code>000A2306</code></td>
<td></td>
</tr>
<tr>
<td>9044</td>
<td><code>00312354</code></td>
<td></td>
</tr>
<tr>
<td>9466</td>
<td><code>004024FA</code></td>
<td>Version 7.00.9466 ?</td>
</tr>
<tr>
<td>21022</td>
<td><code>0083521E</code></td>
<td>VS2008 9.00.21022.08 ?</td>
</tr>
<tr>
<td>21022</td>
<td><code>0093521E</code></td>
<td>9.00.21022 ?</td>
</tr>
<tr>
<td>30729</td>
<td><code>00837809</code></td>
<td>VS2008 (9.0) SP1 15.00.30729.01 ?</td>
</tr>
<tr>
<td>30729</td>
<td><code>00937809</code></td>
<td>VS2008 (9.0) SP1 15.00.30729.01 ?</td>
</tr>
<tr>
<td>50727</td>
<td><code>006DC627</code></td>
<td>VS2005 for C objects; 8.00.50727.762<br/>VS2005 (8.0) SP1 14.00.50727.762</td>
</tr>
<tr>
<td>50727</td>
<td><code>006EC627</code></td>
<td>VS2005 (via 8.00.50727.762)</td>
</tr>
<tr>
<td>50727</td>
<td><code>006EC627</code></td>
<td>VS2005 for c++ objects;<br/>8.00.50727.762? or 8.00.50727.42?</td>
</tr>
<tr>
<td>50727</td>
<td><code>007BC627</code></td>
<td>VS2005 (8.0)</td>
</tr>
</table>
<p><a id="AppendixF" name="AppendixF"><br/>
<h2>Appendix F</h2>
<p></a></p>
<pre><code><small>syn.dll:     file format efi-app-ia32
syn.dll
architecture: i386, flags 0x0000010b:
HAS_RELOC, EXEC_P, HAS_DEBUG, D_PAGED
start address 0x100010ac
Characteristics 0x210e
executable
line numbers stripped
symbols stripped
32 bit words
DLL
Time/Date               Mon Aug 25 16:38:33 2008
Magic                   010b    (PE32)
MajorLinkerVersion      7
MinorLinkerVersion      10
SizeOfCode              00000e00
SizeOfInitializedData   00003a00
SizeOfUninitializedData 00000000
AddressOfEntryPoint     00000000000010ac
BaseOfCode              0000000000001000
BaseOfData              0000000000002000
ImageBase               0000000010000000
SectionAlignment        0000000000001000
FileAlignment           0000000000000200
MajorOSystemVersion     4
MinorOSystemVersion     0
MajorImageVersion       0
MinorImageVersion       0
MajorSubsystemVersion   4
MinorSubsystemVersion   0
Win32Version            00000000
SizeOfImage             00007000
SizeOfHeaders           00000400
CheckSum                00000000
Subsystem               00000002        (Windows GUI)
DllCharacteristics      00000400
SizeOfStackReserve      0000000000100000
SizeOfStackCommit       0000000000001000
SizeOfHeapReserve       0000000000100000
SizeOfHeapCommit        0000000000001000
LoaderFlags             00000000
NumberOfRvaAndSizes     00000010
The Data Directory
Entry 0 0000000000002610 00000062 Export Directory [.edata (or where ever we found it)]
Entry 1 0000000000002208 000000b4 Import Directory [parts of .idata]
Entry 2 0000000000000000 00000000 Resource Directory [.rsrc]
Entry 3 0000000000000000 00000000 Exception Directory [.pdata]
Entry 4 0000000000000000 00000000 Security Directory
Entry 5 0000000000006000 000000bc Base Relocation Directory [.reloc]
Entry 6 0000000000000000 00000000 Debug Directory
Entry 7 0000000000000000 00000000 Description Directory
Entry 8 0000000000000000 00000000 Special Directory
Entry 9 0000000000000000 00000000 Thread Storage Directory [.tls]
Entry a 0000000000000000 00000000 Load Configuration Directory
Entry b 0000000000000000 00000000 Bound Import Directory
Entry c 0000000000002000 000000b4 Import Address Table Directory
Entry d 0000000000000000 00000000 Delay Import Directory
Entry e 0000000000000000 00000000 CLR Runtime Header
Entry f 0000000000000000 00000000 Reserved
There is an import table in .rdata at 0x10002208
The Import Tables (interpreted .rdata section contents)
vma:            Hint    Time      Forward  DLL       First
Table   Stamp     Chain    Name      Thunk
There is an export table in .rdata at 0x10002610
PE File Base Relocations (interpreted .reloc section contents)
Sections:
Idx Name          Size      VMA               LMA               File off  Algn
0 .text         00000d00  10001000  10001000  00000400  2**2
CONTENTS, ALLOC, LOAD, READONLY, CODE
1 .rdata        00000672  10002000  10002000  00001200  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
2 .data         00002600  10003000  10003000  00001a00  2**2
CONTENTS, ALLOC, LOAD, DATA
3 .reloc        0000014c  10006000  10006000  00004000  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
SYMBOL TABLE:
no symbols</small></code></pre>
<hr/>
<hr/>
<address><strong>Julia Wolf</strong> @ FireEye Malware Intelligence Lab<br/><br/>
Questions/Comments to <kbd>research</kbd> [@] <kbd>fireeye</kbd> [.] <kbd>com</kbd></address>
                                                    </div><!-- .entry-content -->
                    
                        <footer class="entry-meta">
                            This entry was posted in <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/category/technical/malware-research" title="View all posts in Advanced Malware" rel="category tag">Advanced Malware</a> and tagged <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/comp-id" rel="tag">@comp.id</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/bad-crypto" rel="tag">bad crypto</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/black-energy" rel="tag">Black Energy</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/citibank" rel="tag">Citibank</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/coff" rel="tag">COFF</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/cr4sh" rel="tag">Cr4sh</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/cryptanalysis" rel="tag">cryptanalysis</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/crypto" rel="tag">crypto</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/exe-header" rel="tag">EXE header</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/hexdumps" rel="tag">hexdumps</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/howto" rel="tag">howto</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/known-plaintext-attack" rel="tag">known plaintext attack</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/malware" rel="tag">malware</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/pe-header" rel="tag">PE Header</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/rich-header" rel="tag">Rich Header</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/russian" rel="tag">Russian</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/stream-cipher" rel="tag">stream cipher</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/symbols" rel="tag">symbols</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/toolkit" rel="tag">Toolkit</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/wsj" rel="tag">WSJ</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/xml" rel="tag">XML</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/xor" rel="tag">xor</a>, <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/tag/yes-exploit-system" rel="tag">Yes Exploit System</a> by <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/author/julia-wolf" title="Posts by Julia Wolf" class="url fn" rel="author">Julia Wolf</a>. Bookmark the <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html" title="Permalink to Black Energy Crypto" rel="bookmark">permalink</a>.                                                
                                                        <div id="author-info">
                                <div id="author-avatar">
                                    <img alt="" src="https://web.archive.org/web/20140428201836im_/http://0.gravatar.com/avatar/6a618dea06b6eda3a0659f7a02f4f762?s=68&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D68&amp;r=G" class="avatar avatar-68 photo" height="68" width="68"/>                                </div><!-- #author-avatar -->
                                <div id="author-description">
                                    <h2>About Julia Wolf</h2>
                                    Julia is a researcher.                                    <div id="author-link">
                                        <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/author/julia-wolf" rel="author">
                                            View all posts by Julia Wolf <span class="meta-nav">&rarr;</span>                                        </a>
                                    </div><!-- #author-link	-->
                                </div><!-- #author-description -->
                            </div><!-- #author-info -->
                                                    </footer><!-- .entry-meta -->
                    </article><!-- #post-85 -->


						<div id="comments" class="selfClear">
	
	
			<h2 id="comments-title">
			One thought on &ldquo;<span>Black Energy Crypto</span>&rdquo;		</h2>

		
		<ol class="commentlist">
				<li class="comment even thread-even depth-1" id="li-comment-154">
		<article id="comment-154" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt="" src="https://web.archive.org/web/20140428201836im_/http://1.gravatar.com/avatar/5045bc058e566c844369f6ac9837ac7d?s=68&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D68&amp;r=G" class="avatar avatar-68 photo" height="68" width="68"/><span class="fn">Sniper</span> on <a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/03/black-energy-crypto.html#comment-154"><time pubdate="pubdate" datetime="2010-03-03T20:32:25+00:00">March 3, 2010 at 8:32 pm</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>whoa! the actual technical part really got me dazed about how complicated botnet coding really is. its not like the &#8220;textbook&#8221; xss and sqli exploits of nasa.gov servers at pinoysecurity which is already tough to follow&#8230;</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
		</ol>

		
				<p class="nocomments">Comments are closed.</p>
		
	
			
</div><!-- #comments -->

								
					<nav id="nav-single" class="selfClear">
						<span class="nav-previous"><a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/malware-research/2010/02/mitb_protection_layers.html" rel="prev"><span class="meta-nav">&larr;</span> Previous</a></span>
						<span class="nav-next"><a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/technical/cyber-exploits/2010/03/win32-api-shellcode-hash-algorithm.html" rel="next">Next <span class="meta-nav">&rarr;</span></a></span>
					</nav><!-- #nav-single -->

			</div>
		</div><!-- div#Content -->
	</div>
    
    <div id="Sidebar">
    		
			<aside id="text-3" class="widget widget_text">			<div class="textwidget"><div class="social">
<a href="https://web.archive.org/web/20140428201836/http://facebook.com/fireeye"><img src="/web/20140428201836im_/http://www.fireeye.com/images/blog/facebook.png" alt="Facebook"/></a> 
<a href="https://web.archive.org/web/20140428201836/http://twitter.com/fireeye"><img src="/web/20140428201836im_/http://www.fireeye.com/images/blog/twitter.png" alt="Twitter"/></a> 
<a href="https://web.archive.org/web/20140428201836/http://www.linkedin.com/companies/fireeye"><img src="/web/20140428201836im_/http://www.fireeye.com/images/blog/linkedin.png" alt="LinkedIn"/></a>
<a href="/web/20140428201836/http://www.fireeye.com/blog/feed"><img src="/web/20140428201836im_/http://www.fireeye.com/images/blog/rss.png" alt="RSS"/></a>
</div></div>
		</aside><aside id="search-3" class="widget widget_search">	<div class="search">
        <form method="get" id="searchform" action="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/">
            <input type="text" class="field" name="s" id="s" placeholder="Search Blog"/>
            <input type="submit" class="submit" name="submit" id="searchsubmit" value="Search"/>
        </form>
    </div>
</aside><aside id="categories-2" class="widget widget_categories"><h2 class="widget-title">Filter by Category</h2><select name="cat" id="cat" class="postform">
	<option value="-1">Select Category</option>
	<option class="level-0" value="45">Security Perspective</option>
	<option class="level-1" value="449">&nbsp;&nbsp;&nbsp;Advanced Threat Trends</option>
	<option class="level-1" value="447">&nbsp;&nbsp;&nbsp;Business of Security</option>
	<option class="level-1" value="443">&nbsp;&nbsp;&nbsp;Executive Perspectives</option>
	<option class="level-1" value="446">&nbsp;&nbsp;&nbsp;Incident Response</option>
	<option class="level-1" value="445">&nbsp;&nbsp;&nbsp;Security News</option>
	<option class="level-1" value="448">&nbsp;&nbsp;&nbsp;Technology</option>
	<option class="level-0" value="317">Threat Research</option>
	<option class="level-1" value="12">&nbsp;&nbsp;&nbsp;Advanced Malware</option>
	<option class="level-1" value="24">&nbsp;&nbsp;&nbsp;Botnets</option>
	<option class="level-1" value="3">&nbsp;&nbsp;&nbsp;Exploits</option>
	<option class="level-1" value="453">&nbsp;&nbsp;&nbsp;Mobile Threats</option>
	<option class="level-1" value="94">&nbsp;&nbsp;&nbsp;Targeted Attack</option>
	<option class="level-1" value="345">&nbsp;&nbsp;&nbsp;Threat Intelligence</option>
	<option class="level-1" value="344">&nbsp;&nbsp;&nbsp;Vulnerabilities</option>
	<option class="level-0" value="1">Uncategorized</option>
</select>

<script type="text/javascript">
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</aside><aside id="text-5" class="widget widget_text"><h2 class="widget-title">Resources</h2>			<div class="textwidget"><div class="resources">
	<div class="resourceBlock selfClear">
		<h3><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/definitive-guide-next-gen-threats.html?x=FE_BLOG_IC">Definitive Guide to Next-Generation Threat Protection</a></h3>
		<p class="image"><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/definitive-guide-next-gen-threats.html?x=FE_BLOG_IC" class="image"><img src="https://web.archive.org/web/20140428201836im_/http://www.fireeye.com/images/infographics/definitive-guide-ngtp.png" alt="White Paper Cover" width="75"/></a></p>
		<p>Comprehensive guide on today's new breed of cyber attacks and how next-generation threat protection can fill the gaps in organizations' network defenses</p>
		<p><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/definitive-guide-next-gen-threats.html?x=FE_BLOG_IC">Download</a></p>
	</div>
	<div class="resourceBlock selfClear">
		<h3><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/protect-your-data-from-cyber-attacks.html?x=FE_BLOG_IC">Protecting Your Data, Intellectual Property, and Brand from Cyber Attacks</a></h3>
		<p class="image"><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/protect-your-data-from-cyber-attacks.html?x=FE_BLOG_IC" class="image"><img src="https://web.archive.org/web/20140428201836im_/http://www.fireeye.com/images/infographics/whitepapers/protecting-data-from-cyber-attacks.png" alt="White Paper Cover" width="75"/></a></p>
		<p>Guide for CIOs, CFOs, and CISOs on why traditional security defenses are failing and how losing the security battle can hurt your business</p>
		<p><a href="https://web.archive.org/web/20140428201836/http://www2.fireeye.com/protect-your-data-from-cyber-attacks.html?x=FE_BLOG_IC">Download</a></p>
	</div>
</div></div>
		</aside><aside id="s2_form_widget-2" class="widget s2_form_widget"><h2 class="widget-title">Subscribe to the Blog</h2><div class="subscribe"><form method="post" action="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog"><input type="hidden" name="ip" value="198.61.228.146"/><span style="display:none !important"><label for="name">Leave Blank:</label><input type="text" id="name" name="name"/><label for="uri">Do Not Change:</label><input type="text" id="uri" name="uri" value="http://"/></span><p><label for="s2email">Your email:</label><br/><input type="text" name="email" id="s2email" value="Enter email address..." size="20" onfocus="if (this.value == 'Enter email address...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email address...';}"/></p><p><input type="submit" name="subscribe" value="Subscribe"/></p></form>
</div></aside><aside id="text-2" class="widget widget_text"><h2 class="widget-title">YouTube</h2>			<div class="textwidget"><iframe width="251" height="141" src="https://web.archive.org/web/20140428201836if_/http://www.youtube.com/embed/c9DV5rICto8" frameborder="0" allowfullscreen></iframe>

<p><a href="https://web.archive.org/web/20140428201836/https://www.youtube.com/user/FireEyeInc" class="viewMore">View more videos &raquo;</a></p></div>
		</aside><aside id="twitter-3" class="widget widget_twitter"><div><h2 class="widget-title"><span class="twitterwidget twitterwidget-title">Twitter</span></h2><ul><li><span class="entry-content">Join FireEye on 4/30 &amp; learn how your company can achieve complete threat protection <a href="https://web.archive.org/web/20140428201836/http://t.co/opPxrHPg6O" target="_blank">http://t.co/opPxrHPg6O</a> <a href="https://web.archive.org/web/20140428201836/http://twitter.com/search?q=%23InfoSec" class="twitter-hashtag" target="_blank">#InfoSec</a>  <a href="https://web.archive.org/web/20140428201836/http://twitter.com/search?q=%23DFIR" class="twitter-hashtag" target="_blank">#DFIR</a></span> <span class="entry-meta"><span class="time-meta"><a href="https://web.archive.org/web/20140428201836/http://twitter.com/FireEye/statuses/451919675321233409" target="_blank">Apr. 3</a></span> <span class="from-meta">from <a href="https://web.archive.org/web/20140428201836/http://www.hootsuite.com/" rel="nofollow">HootSuite</a></span></span></li><li><span class="entry-content">Join FireEye on 4/30 &amp; learn how your company can achieve complete threat protection <a href="https://web.archive.org/web/20140428201836/http://t.co/XrUYkBiHFZ" target="_blank">http://t.co/XrUYkBiHFZ</a> <a href="https://web.archive.org/web/20140428201836/http://twitter.com/search?q=%23DFIR" class="twitter-hashtag" target="_blank">#DFIR</a> <a href="https://web.archive.org/web/20140428201836/http://twitter.com/search?q=%23InfoSec" class="twitter-hashtag" target="_blank">#InfoSec</a></span> <span class="entry-meta"><span class="time-meta"><a href="https://web.archive.org/web/20140428201836/http://twitter.com/FireEye/statuses/451803285755011073" target="_blank">Apr. 3</a></span> <span class="from-meta">from <a href="https://web.archive.org/web/20140428201836/http://www.hootsuite.com/" rel="nofollow">HootSuite</a></span></span></li></ul><div class="follow-button"><a href="https://web.archive.org/web/20140428201836/http://twitter.com/fireeye" class="twitter-follow-button" title="Follow @fireeye" data-lang="en" target="_blank">@fireeye</a></div></div></aside><aside id="text-4" class="widget widget_text"><h2 class="widget-title">Facebook</h2>			<div class="textwidget"><div class="fb-like-box" data-href="http://www.facebook.com/fireeye" data-width="251" data-show-faces="true" data-stream="false" data-border-color="5B6770" data-header="false"></div></div>
		</aside>
    </div>

	
			</div>
		</div> <!-- #WrapperContent -->
	</div> <!-- #Wrapper -->

	<div id="WrapperContentFooter">
		<div id="ContentFooter">
			<div class="footerCols selfClear">
				<nav>
					<h3>FireEye Platform</h3>
					<ul>
						<li><a href="/web/20140428201836/http://www.fireeye.com/platform/">FireEye Platform Overview</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/platform/overview-of-advanced-cyber-attacks.html">Today's Advanced Cyber Threats</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/platform/why-dont-traditional-defenses-work.html">Why Don't Traditional Defenses Work?</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/platform/why-fireeye.html">Why FireEye?</a></li>
					</ul>
				</nav>
				<nav>
					<h3>Threat Prevention Platforms</h3>
					<ul>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/web-security.html" title="FireEye Web Security">NX Series</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/email-security.html" title="FireEye Email Security">EX Series</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/content-security.html" title="FireEye File Security">FX Series</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/endpoint-security.html" title="FireEye Endpoint Security">HX Series</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/forensic-analysis.html" title="FireEye Forensic Analysis">AX Series</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/mobile-security.html" title="FireEye Mobile Security">Mobile Threat Prevention</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/cloud-email-security.html" title="FireEye Email Threat Prevention">Email Threat Prevention</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/threat-analytics-platform.html" title="FireEye Threat Analytics Platform">Threat Analytics Platform</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/products-and-solutions/" class="more">More Products and Solutions</a></li>
					</ul>
				</nav>
				<nav>
					<h3>Info and Resources</h3>
					<ul>
						<li><a href="/web/20140428201836/http://www.fireeye.com/info-center/">Info Center</a></li>
						<li><a href="https://web.archive.org/web/20140428201836/http://investors.fireeye.com/" target="_blank" class="noPopup">Investor Relations</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/partners/">Partners</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/news-events/press-releases/">News and Events</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/support/">Support</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/company/">About FireEye</a></li>
						<li><a href="/web/20140428201836/http://www.fireeye.com/company/legal/">Legal Terms &amp; Conditions</a></li>
					</ul>
				</nav>
				<nav class="social">
					<h3>Connect</h3>
					<ul>
						<li><a href="https://web.archive.org/web/20140428201836/http://www.fireeye.com/blog" class="blog">Blog</a></li>
						<li><a href="https://web.archive.org/web/20140428201836/http://twitter.com/fireeye" class="twitter">Twitter</a></li>
						<li><a href="https://web.archive.org/web/20140428201836/http://facebook.com/fireeye" class="facebook">Facebook</a></li>
						<li><a href="https://web.archive.org/web/20140428201836/http://www.linkedin.com/companies/fireeye" class="linkedin">LinkedIn</a></li>
					</ul>
				</nav>
			</div>
		</div>
	</div>
	<div id="WrapperFooter">
		<div id="Footer" class="selfClear">
			<ul class="siteLinks">
				<li class="first"><a href="/web/20140428201836/http://www.fireeye.com/company/contact.html" class="phone">877.FireEyE (877.347.3393)</a></li>
<!--				<li class="chat"><a id="liveagent_button_online_573300000008OMr" href="javascript://Chat" style="display: none;" onclick="liveagent.startChat('573300000008OMr')">Chat Now</a><div id="liveagent_button_offline_573300000008OMr" style="display: none;" class="chat" title="Sorry, no sales agents are available to assist.">Chat Offline</div>
					
					<script type="text/javascript">
					if (!window._laq) { window._laq = []; }
					window._laq.push(function(){liveagent.showWhenOnline('573300000008OMr', document.getElementById('liveagent_button_online_573300000008OMr'));
					liveagent.showWhenOffline('573300000008OMr', document.getElementById('liveagent_button_offline_573300000008OMr'));
					});</script>
					
				</li> -->
				<li class="last"><a href="/web/20140428201836/http://www.fireeye.com/company/contact.html" class="info">Request Info</a></li>
			</ul>
			<p>Copyright &copy; 2006-2013 FireEye, Inc. All rights reserved. <!-- <a href="/website/termsofuse.html">Terms of Use</a> | --> <a href="/web/20140428201836/http://www.fireeye.com/website/privacy.html">Privacy &amp; Cookies Policy</a> | <a href="/web/20140428201836/http://www.fireeye.com/website/sitemap.html">Site Map</a> | <a href="https://web.archive.org/web/20140428201836/http://www.atre.net/" target="_blank" class="noPopup">Site Credits</a></p>
		</div>
	</div>
	<script src="/web/20140428201836js_/http://www.fireeye.com/javascript/libs/jquery-1.5.2.min.js"></script>
	<script src="/web/20140428201836js_/http://www.fireeye.com/javascript/plugins.js"></script>
	<script src="/web/20140428201836js_/http://www.fireeye.com/javascript/script.js"></script>

	<!--[if lt IE 9 ]><script src="/resources/videos/flowplayer-3.2.6.min.js"></script><![endif]-->
	<!--[if lt IE 7 ]>
		<script src="/javascript/libs/dd_belatedpng.js"></script>
		<script>DD_belatedPNG.fix("img, .png_bg, .jcarousel-next, .jcarousel-prev"); // Fix any <img> or .png_bg bg-images. Also, please read goo.gl/mZiyb </script>
	<![endif]-->

    <!-- MKTO Javascript --> 
    <script src="//web.archive.org/web/20140428201836js_/http://munchkin.marketo.net/munchkin.js" type="text/javascript"></script>
	<script>mktoMunchkin("848-DID-242");</script> 
    <!-- END MKTO Javascript -->
 
	<!-- AddThis Javascript for Komodo Media Toolbox Sharing -->
	<script type="text/javascript">var addthis_config = {"data_track_clickback":true};</script>
	<script type="text/javascript" src="https://web.archive.org/web/20140428201836js_/http://s7.addthis.com/js/250/addthis_widget.js#username=fewebadmin"></script> 
	
	<!-- LeadLander Javascript --> 
    <script type="text/javascript" language="javascript">llactid=16663</script> 
    <script type="text/javascript" language="javascript" src="https://web.archive.org/web/20140428201836js_/http://t5.trackalyzer.com/trackalyze.js"></script>
	
	
	<!-- BFP Tracking -->
	<script language="JavaScript" type="text/javascript">
	if (typeof ord=='undefined') {ord=Math.random()*10000000000000000;}
	document.write('<img src="https://web.archive.org/web/20140428201836/http://ad.doubleclick.net/activity;dc_pixel_url=idgt.fireye/_retargetingpixel;dc_seg=132408;ord=' + ord + '?" width="1" height="1" border="0" alt="">');
	</script>
	<noscript>
	<img src="https://web.archive.org/web/20140428201836im_/http://ad.doubleclick.net/activity;dc_pixel_url=idgt.fireye/_retargetingpixel;dc_seg=132408;ord=123456789" width="1" height="1" border="0" alt=""/>
	</noscript>
	
</body> 
</html><!--
     FILE ARCHIVED ON 20:18:36 Apr 28, 2014 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 08:14:52 Dec 18, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.842
  exclusion.robots: 0.038
  exclusion.robots.policy: 0.024
  esindex: 0.017
  cdx.remote: 83.137
  LoadShardBlock: 179.307 (3)
  PetaboxLoader3.datanode: 153.329 (4)
  PetaboxLoader3.resolve: 105.712 (2)
  load_resource: 161.097
-->