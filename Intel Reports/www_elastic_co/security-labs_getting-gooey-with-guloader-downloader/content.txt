<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Getting gooey with GULOADER: deobfuscating the downloader — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs walks through the updated GULOADER analysis countermeasures."/><meta property="og:title" content="Getting gooey with GULOADER: deobfuscating the downloader — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs walks through the updated GULOADER analysis countermeasures."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/getting-gooey-with-guloader-downloader/photo-edited-03@2x.jpg?c28849e275a56407411b0de4eaa8b379"/><meta property="og:image:alt" content="Elastic Security Labs walks through the updated GULOADER analysis countermeasures."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Getting gooey with GULOADER: deobfuscating the downloader — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs walks through the updated GULOADER analysis countermeasures."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/getting-gooey-with-guloader-downloader/photo-edited-03@2x.jpg?c28849e275a56407411b0de4eaa8b379"/><meta name="twitter:image:alt" content="Elastic Security Labs walks through the updated GULOADER analysis countermeasures."/><link rel="canonical" href="https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2023-12-06T00:00:00.000Z">6 December 2023</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Getting gooey with GULOADER: deobfuscating the&nbsp;downloader</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs walks through the updated GULOADER analysis countermeasures.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>13 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Getting gooey with GULOADER: deobfuscating the downloader" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgetting-gooey-with-guloader-downloader%2Fphoto-edited-03%402x.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="overview" class="absolute -top-32"></span>Overview</h2>
<p>Elastic Security Labs continues to monitor active threats such as GULOADER, also known as <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye">CloudEyE</a> – an evasive shellcode downloader that has been highly active for years while under constant development. One of these recent changes is the addition of exceptions to its Vectored Exception Handler (VEH) in a fresh campaign, adding more complexity to its already long list of anti-analysis tricks.</p>
<p>While GULOADER’s core functionality hasn’t changed drastically over the past few years, these constant updates in their obfuscation techniques make analyzing GULOADER a time-consuming and resource-intensive process. In this post, we will touch on the following topics when triaging GULOADER:</p>
<ul>
<li>Reviewing the initial shellcode and unpacking process</li>
<li>Finding the entrypoint of the decrypted shellcode</li>
<li>Discuss update to GULOADER’s VEH that obfuscates control flow</li>
<li>Provide a methodology to patch out VEH</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="initial-shellcode" class="absolute -top-32"></span>Initial Shellcode</h2>
<p>In our <a href="https://www.virustotal.com/gui/file/6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99">sample</a>, GULOADER comes pre-packaged inside an NSIS (Nullsoft Scriptable Install System) installer. When the installer is extracted, the main components are:</p>
<ul>
<li><strong>NSIS Script</strong> - This script file outlines all the various configuration and installation aspects.</li>
</ul>
<p></p>
<ul>
<li><strong>System.dll</strong> - Located under the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">$PLUGINSDir</code>. This file is dropped in a temporary folder to allocate/execute the GULOADER shellcode.</li>
</ul>
<p></p>
<ul>
<li><strong>Shellcode</strong> - The encrypted shellcode is buried into a nested folder.</li>
</ul>
<p>One quick methodology to pinpoint the file hosting the shellcode can be done by monitoring <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReadFile</code> events from SysInternal’s Process Monitor after executing GULOADER. In this case, we can see that the shellcode is read in from a file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Fibroms.Hag</code>).</p>
<p></p>
<p>GULOADER executes shellcode through callbacks using different Windows API functions. The main reasoning behind this is to avoid detections centered around traditional Windows APIs used for process injection, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateRemoteThread</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WriteProcessMemory</code>. We have observed <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EnumResourceTypesA</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CallWindowProcW</code> used by GULOADER.</p>
<p></p>
<p>By reviewing the MSDN documentation for <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-enumresourcetypesa"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EnumResourceTypesA</code></a>, we can see the second parameter expects a pointer to the callback function. From the screenshot above, we can see that the newly allocated shellcode is placed into this argument.</p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="finding-main-shellcode-entrypoint" class="absolute -top-32"></span>Finding Main Shellcode Entrypoint</h2>
<p>In recent samples, GULOADER has increased the complexity at the start of the initial shellcode by including many different junk instructions and jumps. Reverse engineering of the downloader can require dealing with a long process of unwinding code obfuscation designed to break disassembly and control flow in some tooling, making it frustrating to find the actual start of the core GULOADER shellcode.</p>
<p>One methodology for finding the initial call can be leveraging graph view inside x64dbg and using a bottom-to-top approach to look for the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">call eax</code> instruction.</p>
<p></p>
<p>Another technique to trace the initial control flow involves leveraging the reversing engineering framework <a href="https://github.com/cea-sec/miasm">Miasm</a><strong>.</strong> Below is a quick example where we can pass in the shellcode and disassemble the instructions to follow the flow:</p>
<pre><code>from miasm.core.locationdb import LocationDB
from miasm.analysis.binary import Container
from miasm.analysis.machine import Machine

with open(&quot;proctoring_06BF0000.bin&quot;, &quot;rb&quot;) as f:
    code = f.read()

loc_db = LocationDB()
c = Container.from_string(code, loc_db)

machine = Machine(&#x27;x86_32&#x27;)
mdis = machine.dis_engine(c.bin_stream, loc_db=loc_db)
mdis.follow_call = True 
mdis.dontdis_retcall = True
asm_cfg = mdis.dis_multiblock(offset=0x1400)</code></pre>
<p>Miasm cuts through the 142 <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jmp</code> instructions and navigates through the junk instructions where we have configured it to stop on the call instruction to EAX (address: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x3bde</code>).</p>
<pre><code>JMP        loc_3afd
-&gt;	c_to:loc_3afd 
loc_3afd
MOV        EBX, EAX
FADDP      ST(3), ST
PANDN      XMM7, XMM2
JMP        loc_3b3e
-&gt;	c_to:loc_3b3e 
loc_3b3e
SHL        CL, 0x0
PSRAW      MM1, MM0
PSRLD      XMM1, 0xF1
JMP        loc_3b97
-&gt;	c_to:loc_3b97 
loc_3b97
CMP        DL, 0x3A
PADDW      XMM3, XMM5
PXOR       MM3, MM3
JMP        loc_3bde
-&gt;	c_to:loc_3bde 
loc_3bde
CALL       EAX</code></pre>
<p><em>Tail end of Miasm</em></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="guloaders-veh-update" class="absolute -top-32"></span>GULOADER’s VEH Update</h2>
<p>One of GULOADER’s hallmark techniques is centered around its <a href="https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling">Vectored Exception Handling</a> (VEH) capability. This feature gives Windows applications the ability to intercept and handle exceptions before they are routed through the standard exception process. Malware families and software protection applications use this technique to make it challenging for analysts and tooling to follow the malicious code.</p>
<p>GULOADER starts this process by adding the VEH using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlAddVectoredExceptionHandler</code>. Throughout the execution of the GULOADER shellcode, there is code purposely placed to trigger these different exceptions. When these exceptions are triggered, the VEH will check for hardware breakpoints. If not found, GULOADER will modify the EIP directly through the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context">CONTEXT structure</a> using a one-byte XOR key (changes per sample) with a one-byte offset from where the exception occurred. We will review a specific example of this technique in the subsequent section. Below is the decompilation of our sample’s VEH:</p>
<p></p>
<p>Although this technique is not new, GULOADER continues to add new exceptions over time; we have recently observed these two exceptions added in the last few months:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_PRIV_INSTRUCTION</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_ILLEGAL_INSTRUCTION</code></li>
</ul>
<p>As new exceptions get added to GULOADER, it can end up breaking tooling used to expedite the analysis process for researchers.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="exception_priv_instruction" class="absolute -top-32"></span>EXCEPTION_PRIV_INSTRUCTION</h3>
<p>Let’s walk through the two recently added exceptions to follow the VEH workflow. The first exception (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_PRIV_INSTRUCTION</code>), occurs when an attempt is made to execute a privileged instruction in a processor’s instruction set at a privilege level where it’s not allowed. Certain instructions, like the example below with <a href="https://www.felixcloutier.com/x86/wrmsr">WRSMR</a> expect privileges from the kernel level, so when the program is run from user mode, it will trigger the exception due to incorrect permissions.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="exception_illegal_instruction" class="absolute -top-32"></span>EXCEPTION_ILLEGAL_INSTRUCTION</h3>
<p>This exception is invoked when a program attempts to execute an invalid or undefined CPU instruction. In our sample, when we run into Intel virtualization instructions such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmclear</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmxon</code>, this will trigger an exception.</p>
<p></p>
<p>Once an exception occurs, the GULOADER VEH code will first determine which exception code was responsible for the exception. In our sample, if the exception matches any of the five below, the code will take the same path regardless.</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_ACCESS_VIOLATION</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_ILLEGAL_INSTRUCTION</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_PRIV_INSTRUCTION</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_SINGLE_STEP</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EXCEPTION_BREAKPOINT</code></li>
</ul>
<p>GULOADER will then check for any hardware breakpoints by walking the CONTEXT record found inside the <strong><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers">EXCEPTION_POINTERS</a></strong> structure. If hardware breakpoints are found in the different debug registers, GULOADER will return a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code> into the CONTEXT record, which will end up causing the shellcode to crash.</p>
<p></p>
<p>If there are no hardware breakpoints, GULOADER will retrieve a single byte which is 7 bytes away from the address that caused the exception. When using the last example with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmclear</code>, it would retrieve byte (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x8A</code>).</p>
<p></p>
<p>Then, using that byte, it will perform an XOR operation with a different hard-coded byte. In our case (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xB8</code>), this is unique per sample. Now, with a derived offset <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x32</code> (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xB8 ^ 0x8A</code>), GULOADER will modify the EIP address directly from the CONTEXT record by adding <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x32</code> to the previous address (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7697630</code>) that caused the exception resulting in the next code to execute from address (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7697662</code>).</p>
<p></p>
<p>With different junk instructions in between, and repeatedly hitting exceptions (we counted 229 unique exceptions in our sample), it’s not hard to see why this can break different tooling and increase analyst time.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="control-flow-cleaning" class="absolute -top-32"></span>Control Flow Cleaning</h2>
<p>To make following the control flow easier, an analyst can bypass the VEH by tracing the execution, logging the exceptions, and patching the shellcode using the previously discussed EIP modification algorithm. For this procedure, we leveraged <a href="https://github.com/hasherezade/tiny_tracer">TinyTracer</a>, a tool written by <a href="https://twitter.com/hasherezade">@hasherezade</a> that leverages <a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">Pin</a>, a dynamic binary instrumentation framework. This will allow us to catch the different addresses that triggered the exception, so using the example above with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmclear</code>, we can see the address was <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7697630</code>, generated an exception calling <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KiUserExceptionDispatcher</code>, a function responsible for handling user-mode exceptions.</p>
<p>Once all the exceptions are collected and filtered, these can be passed into an IDAPython script where we walk through each address, calculate the offset using the 7th byte over and XOR key (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xB8</code>), then patch out all the instructions generating exceptions with short jumps.</p>
<p>The following image is an example of patching instructions that trigger exceptions at addresses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x07697630</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x0769766C</code>.</p>
<p></p>
<p>Below is a graphic representing the control flow graph before the patching is applied globally. Our basic block with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmclear</code> instruction is highlighted in orange. By implementing the VEH, GULOADER flattens the control flow graph, making it harder to trace the program logic.</p>
<p></p>
<p>After patching the VEH with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jmp</code> instructions, this transforms the basic blocks by connecting them together, reducing the complexity behind the flow of the shellcode.</p>
<p></p>
<p>Using this technique can accelerate the cleaning process, yet it’s important to note that it isn’t a bulletproof method. In this instance, there still ends up being a good amount of code/functionality that will still need to be analyzed, but this definitely goes a long way in simplifying the code by removing the VEH. The full POC script is located <a href="https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py">here</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>GULOADER has many different features that can break disassembly, hinder control flow, and make analysis difficult for researchers. Despite this and the process being imperfect, we can counter these traits through different static or dynamic processes to help reduce the analysis time. For example, we observed that with new exceptions in the VEH, we can still trace through them and patch the shellcode. This process will set the analyst on the right path, closer to accessing the core functionality with GULOADER.</p>
<p>By sharing some of our workflow, we hope to provide multiple takeaways if you encounter GULOADER in the wild. Based on GULOADER’s changes, it&#x27;s highly likely that future behaviors will require new and different strategies. For detecting GULOADER, the following section includes YARA rules, and the IDAPython script from this post can be found <a href="https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py">here</a>. For new updates on the latest threat research, check out our <a href="https://www.elastic.co/security-labs/topics/malware-analysis">malware analysis section</a> by the Elastic Security Labs team.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h2>
<p>Elastic Security has created different YARA <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Guloader.yar">rules</a> to identify this activity. Below is an example of one YARA rule to identify GULOADER.</p>
<pre><code>rule Windows_Trojan_Guloader {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2023-10-30&quot;
        last_modified = &quot;2023-11-02&quot;   
        reference_sample = &quot;6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99&quot;
        severity = 100
        arch = &quot;x86&quot;
        threat_name = &quot;Windows.Trojan.Guloader&quot;
        license = &quot;Elastic License v2&quot;
        os = &quot;windows&quot;
    strings:
        $djb2_str_compare = { 83 C0 08 83 3C 04 00 0F 84 [4] 39 14 04 75 }
        $check_exception = { 8B 45 ?? 8B 00 38 EC 8B 58 ?? 84 FD 81 38 05 00 00 C0 }
        $parse_mem = { 18 00 10 00 00 83 C0 18 50 83 E8 04 81 00 00 10 00 00 50 }
        $hw_bp = { 39 48 0C 0F 85 [4] 39 48 10 0F 85 [4] 39 48 14 0F 85 [7] 39 48 18 }
        $scan_protection = { 39 ?? 14 8B [5] 0F 84 }
    condition:
        2 of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/guloader">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99</td><td>SHA-256</td><td>Windows.Trojan.Guloader</td><td>GULOADER downloader</td></tr><tr><td>101.99.75[.]183/MfoGYZkxZIl205.bin</td><td>url</td><td>NA</td><td>GULOADER C2 URL</td></tr><tr><td>101.99.75[.]183</td><td>ipv4-addr</td><td>NA</td><td>GULOADER C2 IP</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<ul>
<li><a href="https://github.com/elastic/labs-releases/tree/main/tools/guloader">https://github.com/elastic/labs-releases/tree/main/tools/guloader</a></li>
<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye">https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#overview"><span>Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#initial-shellcode"><span>Initial&nbsp;Shellcode</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#finding-main-shellcode-entrypoint"><span>Finding Main Shellcode&nbsp;Entrypoint</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#guloaders-veh-update"><span>GULOADER’s VEH&nbsp;Update</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/getting-gooey-with-guloader-downloader#exception_priv_instruction"><span>EXCEPTION_PRIV_INSTRUCTION</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/getting-gooey-with-guloader-downloader#exception_illegal_instruction"><span>EXCEPTION_ILLEGAL_INSTRUCTION</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#control-flow-cleaning"><span>Control Flow&nbsp;Cleaning</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#conclusion"><span>Conclusion</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#yara"><span>YARA</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/getting-gooey-with-guloader-downloader#observations"><span>Observations</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Getting gooey with GULOADER: deobfuscating the downloader&amp;url=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader&amp;title=Getting gooey with GULOADER: deobfuscating the downloader" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/getting-gooey-with-guloader-downloader&amp;title=Getting gooey with GULOADER: deobfuscating the downloader" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Getting gooey with GULOADER: deobfuscating the downloader","slug":"getting-gooey-with-guloader-downloader","date":"2023-12-06","description":"Elastic Security Labs walks through the updated GULOADER analysis countermeasures.","image":"photo-edited-03@2x.jpg","tags":["guloader","cloudeye","Vectored Exception handler"],"body":{"raw":"\n## Overview\n\nElastic Security Labs continues to monitor active threats such as GULOADER, also known as [CloudEyE](https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye) – an evasive shellcode downloader that has been highly active for years while under constant development. One of these recent changes is the addition of exceptions to its Vectored Exception Handler (VEH) in a fresh campaign, adding more complexity to its already long list of anti-analysis tricks.  \n \nWhile GULOADER’s core functionality hasn’t changed drastically over the past few years, these constant updates in their obfuscation techniques make analyzing GULOADER a time-consuming and resource-intensive process. In this post, we will touch on the following topics when triaging GULOADER:\n\n* Reviewing the initial shellcode and unpacking process\n* Finding the entrypoint of the decrypted shellcode\n* Discuss update to GULOADER’s VEH that obfuscates control flow\n* Provide a methodology to patch out VEH\n\n## Initial Shellcode\n\nIn our [sample](https://www.virustotal.com/gui/file/6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99), GULOADER comes pre-packaged inside an NSIS (Nullsoft Scriptable Install System) installer. When the installer is extracted, the main components are: \n\n* **NSIS Script** - This script file outlines all the various configuration and installation aspects.\n\n![Extracted NSIS contents](/assets/images/getting-gooey-with-guloader-downloader/image1.png \"Extracted NSIS contents\")\n\n\n* **System.dll** - Located under the `$PLUGINSDir`. This file is dropped in a temporary folder to allocate/execute the GULOADER shellcode.\n\n![System.Dll exports](/assets/images/getting-gooey-with-guloader-downloader/image10.png \"System.Dll exports\")\n\n\n* **Shellcode** - The encrypted shellcode is buried into a nested folder.\n\nOne quick methodology to pinpoint the file hosting the shellcode can be done by monitoring `ReadFile` events from SysInternal’s Process Monitor after executing GULOADER. In this case, we can see that the shellcode is read in from a file (`Fibroms.Hag`).\n\n![Shellcode Retrieved from File](/assets/images/getting-gooey-with-guloader-downloader/image11.png \"Shellcode Retrieved from File\")\n\n\nGULOADER executes shellcode through callbacks using different Windows API functions. The main reasoning behind this is to avoid detections centered around traditional Windows APIs used for process injection, such as `CreateRemoteThread` or `WriteProcessMemory`. We have observed `EnumResourceTypesA` and `CallWindowProcW` used by GULOADER.\n\n![EnumResourceTypesA Function Call inside GULOADER](/assets/images/getting-gooey-with-guloader-downloader/image6.png \"EnumResourceTypesA Function Call inside GULOADER\")\n\n\nBy reviewing the MSDN documentation for [`EnumResourceTypesA`](https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-enumresourcetypesa), we can see the second parameter expects a pointer to the callback function. From the screenshot above, we can see that the newly allocated shellcode is placed into this argument.\n\n![EnumResourceTypesA Function Parameters](/assets/images/getting-gooey-with-guloader-downloader/image13.png \"EnumResourceTypesA Function Parameters\")\n\n\n![Shellcode from second parameter EnumResourceTypesA call](/assets/images/getting-gooey-with-guloader-downloader/image7.png \"Shellcode from second parameter EnumResourceTypesA call\")\n\n\n## Finding Main Shellcode Entrypoint\n\nIn recent samples, GULOADER has increased the complexity at the start of the initial shellcode by including many different junk instructions and jumps. Reverse engineering of the downloader can require dealing with a long process of unwinding code obfuscation designed to break disassembly and control flow in some tooling, making it frustrating to find the actual start of the core GULOADER shellcode.\n\nOne methodology for finding the initial call can be leveraging graph view inside x64dbg and using a bottom-to-top approach to look for the `call eax` instruction. \n\n![Graph view for GULOADER main entrypoint call](/assets/images/getting-gooey-with-guloader-downloader/image16.png \"Graph view for GULOADER main entrypoint call\")\n\n\nAnother technique to trace the initial control flow involves leveraging the reversing engineering framework [Miasm](https://github.com/cea-sec/miasm)**.** Below is a quick example where we can pass in the shellcode and disassemble the instructions to follow the flow: \n\n```\nfrom miasm.core.locationdb import LocationDB\nfrom miasm.analysis.binary import Container\nfrom miasm.analysis.machine import Machine\n\nwith open(\"proctoring_06BF0000.bin\", \"rb\") as f:\n    code = f.read()\n\nloc_db = LocationDB()\nc = Container.from_string(code, loc_db)\n\nmachine = Machine('x86_32')\nmdis = machine.dis_engine(c.bin_stream, loc_db=loc_db)\nmdis.follow_call = True \nmdis.dontdis_retcall = True\nasm_cfg = mdis.dis_multiblock(offset=0x1400)\n```\n\nMiasm cuts through the 142 `jmp` instructions and navigates through the junk instructions where we have configured it to stop on the call instruction to EAX (address: `0x3bde`).  \n\n```\nJMP        loc_3afd\n-\u003e\tc_to:loc_3afd \nloc_3afd\nMOV        EBX, EAX\nFADDP      ST(3), ST\nPANDN      XMM7, XMM2\nJMP        loc_3b3e\n-\u003e\tc_to:loc_3b3e \nloc_3b3e\nSHL        CL, 0x0\nPSRAW      MM1, MM0\nPSRLD      XMM1, 0xF1\nJMP        loc_3b97\n-\u003e\tc_to:loc_3b97 \nloc_3b97\nCMP        DL, 0x3A\nPADDW      XMM3, XMM5\nPXOR       MM3, MM3\nJMP        loc_3bde\n-\u003e\tc_to:loc_3bde \nloc_3bde\nCALL       EAX\n```\n*Tail end of Miasm*\n\n## GULOADER’s VEH Update\n\nOne of GULOADER’s hallmark techniques is centered around its [Vectored Exception Handling](https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling) (VEH) capability. This feature gives Windows applications the ability to intercept and handle exceptions before they are routed through the standard exception process. Malware families and software protection applications use this technique to make it challenging for analysts and tooling to follow the malicious code.\n\nGULOADER starts this process by adding the VEH using `RtlAddVectoredExceptionHandler`. Throughout the execution of the GULOADER shellcode, there is code purposely placed to trigger these different exceptions. When these exceptions are triggered, the VEH will check for hardware breakpoints. If not found, GULOADER will modify the EIP directly through the [CONTEXT structure](https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context) using a one-byte XOR key (changes per sample) with a one-byte offset from where the exception occurred. We will review a specific example of this technique in the subsequent section. Below is the decompilation of our sample’s VEH:\n\n![Decompilation of VEH](/assets/images/getting-gooey-with-guloader-downloader/image3.png \"Decompilation of VEH\")\n\n\nAlthough this technique is not new, GULOADER continues to add new exceptions over time; we have recently observed these two exceptions added in the last few months:\n\n* `EXCEPTION_PRIV_INSTRUCTION`\n* `EXCEPTION_ILLEGAL_INSTRUCTION`\n\nAs new exceptions get added to GULOADER, it can end up breaking tooling used to expedite the analysis process for researchers. \n\n### EXCEPTION_PRIV_INSTRUCTION\n\nLet’s walk through the two recently added exceptions to follow the VEH workflow. The first exception (`EXCEPTION_PRIV_INSTRUCTION`), occurs when an attempt is made to execute a privileged instruction in a processor’s instruction set at a privilege level where it’s not allowed. Certain instructions, like the example below with [WRSMR](https://www.felixcloutier.com/x86/wrmsr) expect privileges from the kernel level, so when the program is run from user mode, it will trigger the exception due to incorrect permissions.\n\n\n![EXCEPTION_PRIV_INSTRUCTION triggered by wrmsr instruction](/assets/images/getting-gooey-with-guloader-downloader/image2.png \"EXCEPTION_PRIV_INSTRUCTION triggered by wrmsr instruction\")\n\n\n### EXCEPTION_ILLEGAL_INSTRUCTION\n\nThis exception is invoked when a program attempts to execute an invalid or undefined CPU instruction. In our sample, when we run into Intel virtualization instructions such as `vmclear` or `vmxon`, this will trigger an exception.  \n\n![EXCEPTION_ILLEGAL_INSTRUCTION triggered by vmclear instruction](/assets/images/getting-gooey-with-guloader-downloader/image14.png \"EXCEPTION_ILLEGAL_INSTRUCTION triggered by vmclear instruction\")\n\n\nOnce an exception occurs, the GULOADER VEH code will first determine which exception code was responsible for the exception. In our sample, if the exception matches any of the five below, the code will take the same path regardless.\n\n* `EXCEPTION_ACCESS_VIOLATION` \n* `EXCEPTION_ILLEGAL_INSTRUCTION`\n* `EXCEPTION_PRIV_INSTRUCTION`\n* `EXCEPTION_SINGLE_STEP`\n* `EXCEPTION_BREAKPOINT`\n\nGULOADER will then check for any hardware breakpoints by walking the CONTEXT record found inside the **[EXCEPTION_POINTERS](https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers)** structure. If hardware breakpoints are found in the different debug registers, GULOADER will return a `0` into the CONTEXT record, which will end up causing the shellcode to crash.\n\n![GULOADER monitoring hardware breakpoints](/assets/images/getting-gooey-with-guloader-downloader/image4.png \"GULOADER monitoring hardware breakpoints\")\n\n\nIf there are no hardware breakpoints, GULOADER will retrieve a single byte which is 7 bytes away from the address that caused the exception. When using the last example with `vmclear`, it would retrieve byte (`0x8A`).\n\n![GULOADER retrieves a single byte, 7 bytes away from the instruction, causing an exception](/assets/images/getting-gooey-with-guloader-downloader/image9.png \"GULOADER retrieves a single byte, 7 bytes away from the instruction, causing an exception\")\n\n\nThen, using that byte, it will perform an XOR operation with a different hard-coded byte. In our case (`0xB8`), this is unique per sample. Now, with a derived offset `0x32` (`0xB8 ^ 0x8A`), GULOADER will modify the EIP address directly from the CONTEXT record by adding `0x32` to the previous address (`0x7697630`) that caused the exception resulting in the next code to execute from address (`0x7697662`).\n\n![Junk instructions in between exceptions](/assets/images/getting-gooey-with-guloader-downloader/image8.png \"Junk instructions in between exceptions\")\n\n\nWith different junk instructions in between, and repeatedly hitting exceptions (we counted 229 unique exceptions in our sample), it’s not hard to see why this can break different tooling and increase analyst time.\n\n## Control Flow Cleaning\n\nTo make following the control flow easier, an analyst can bypass the VEH by tracing the execution, logging the exceptions, and patching the shellcode using the previously discussed EIP modification algorithm. For this procedure, we leveraged [TinyTracer](https://github.com/hasherezade/tiny_tracer), a tool written by [@hasherezade](https://twitter.com/hasherezade) that leverages [Pin](https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html), a dynamic binary instrumentation framework. This will allow us to catch the different addresses that triggered the exception, so using the example above with `vmclear`, we can see the address was `0x7697630`, generated an exception calling `KiUserExceptionDispatcher`, a function responsible for handling user-mode exceptions.  \n\nOnce all the exceptions are collected and filtered, these can be passed into an IDAPython script where we walk through each address, calculate the offset using the 7th byte over and XOR key (`0xB8`), then patch out all the instructions generating exceptions with short jumps. \n\nThe following image is an example of patching instructions that trigger exceptions at addresses `0x07697630` and `0x0769766C`. \n\n![Disassembly of patched instructions](/assets/images/getting-gooey-with-guloader-downloader/image15.png \"Disassembly of patched instructions\")\n\n \nBelow is a graphic representing the control flow graph before the patching is applied globally. Our basic block with the `vmclear` instruction is highlighted in orange. By implementing the VEH, GULOADER flattens the control flow graph, making it harder to trace the program logic.  \n\n![GULOADER’s control flow flattening obfuscation](/assets/images/getting-gooey-with-guloader-downloader/image5.png \"GULOADER’s control flow flattening obfuscation\")\n\n\nAfter patching the VEH with `jmp` instructions, this transforms the basic blocks by connecting them together, reducing the complexity behind the flow of the shellcode.\n\n![GULOADER’s call graph obfuscation](/assets/images/getting-gooey-with-guloader-downloader/image12.png \"GULOADER’s call graph obfuscation\")\n\n\nUsing this technique can accelerate the cleaning process, yet it’s important to note that it isn’t a bulletproof method. In this instance, there still ends up being a good amount of code/functionality that will still need to be analyzed, but this definitely goes a long way in simplifying the code by removing the VEH. The full POC script is located [here](https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py).\n\n## Conclusion\n\nGULOADER has many different features that can break disassembly, hinder control flow, and make analysis difficult for researchers. Despite this and the process being imperfect, we can counter these traits through different static or dynamic processes to help reduce the analysis time. For example, we observed that with new exceptions in the VEH, we can still trace through them and patch the shellcode. This process will set the analyst on the right path, closer to accessing the core functionality with GULOADER. \n\nBy sharing some of our workflow, we hope to provide multiple takeaways if you encounter GULOADER in the wild. Based on GULOADER’s changes, it's highly likely that future behaviors will require new and different strategies. For detecting GULOADER, the following section includes YARA rules, and the IDAPython script from this post can be found [here](https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py). For new updates on the latest threat research, check out our [malware analysis section](https://www.elastic.co/security-labs/topics/malware-analysis) by the Elastic Security Labs team. \n\n## YARA\n\nElastic Security has created different YARA [rules](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Guloader.yar) to identify this activity. Below is an example of one YARA rule to identify GULOADER. \n\n```\nrule Windows_Trojan_Guloader {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2023-10-30\"\n        last_modified = \"2023-11-02\"   \n        reference_sample = \"6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99\"\n        severity = 100\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.Guloader\"\n        license = \"Elastic License v2\"\n        os = \"windows\"\n    strings:\n        $djb2_str_compare = { 83 C0 08 83 3C 04 00 0F 84 [4] 39 14 04 75 }\n        $check_exception = { 8B 45 ?? 8B 00 38 EC 8B 58 ?? 84 FD 81 38 05 00 00 C0 }\n        $parse_mem = { 18 00 10 00 00 83 C0 18 50 83 E8 04 81 00 00 10 00 00 50 }\n        $hw_bp = { 39 48 0C 0F 85 [4] 39 48 10 0F 85 [4] 39 48 14 0F 85 [7] 39 48 18 }\n        $scan_protection = { 39 ?? 14 8B [5] 0F 84 }\n    condition:\n        2 of them\n}\n```\n\n## Observations\n \nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/guloader) in both ECS and STIX format.\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type      | Name                    | Reference                |\n|------------------------------------------------------------------|-----------|-------------------------|--------------------------|\n| 6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99 | SHA-256   | Windows.Trojan.Guloader | GULOADER downloader      |\n| 101.99.75[.]183/MfoGYZkxZIl205.bin                        | url       | NA                      | GULOADER C2 URL          |\n| 101.99.75[.]183                                                  | ipv4-addr | NA                      | GULOADER C2 IP           |\n\n## References\n\n* [https://github.com/elastic/labs-releases/tree/main/tools/guloader](https://github.com/elastic/labs-releases/tree/main/tools/guloader) \n* [https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye](https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye)","code":"var Component=(()=\u003e{var h=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=\u003e{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},l=(n,e,i,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!m.call(n,o)\u0026\u0026o!==i\u0026\u0026r(n,o,{get:()=\u003ee[o],enumerable:!(a=g(e,o))||a.enumerable});return n};var y=(n,e,i)=\u003e(i=n!=null?h(u(n)):{},l(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=\u003el(r({},\"__esModule\",{value:!0}),n);var c=w((v,s)=\u003e{s.exports=_jsx_runtime});var R={};f(R,{default:()=\u003eO,frontmatter:()=\u003eE});var t=y(c()),E={title:\"Getting gooey with GULOADER: deobfuscating the downloader\",slug:\"getting-gooey-with-guloader-downloader\",date:\"2023-12-06\",description:\"Elastic Security Labs walks through the updated GULOADER analysis countermeasures.\",author:[{slug:\"daniel-stepanic\"}],image:\"photo-edited-03@2x.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"guloader\",\"cloudeye\",\"Vectored Exception handler\"]};function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",strong:\"strong\",img:\"img\",code:\"code\",pre:\"pre\",em:\"em\",h3:\"h3\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"overview\",children:\"Overview\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Security Labs continues to monitor active threats such as GULOADER, also known as \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye\",rel:\"nofollow\",children:\"CloudEyE\"}),\" \\u2013 an evasive shellcode downloader that has been highly active for years while under constant development. One of these recent changes is the addition of exceptions to its Vectored Exception Handler (VEH) in a fresh campaign, adding more complexity to its already long list of anti-analysis tricks.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"While GULOADER\\u2019s core functionality hasn\\u2019t changed drastically over the past few years, these constant updates in their obfuscation techniques make analyzing GULOADER a time-consuming and resource-intensive process. In this post, we will touch on the following topics when triaging GULOADER:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Reviewing the initial shellcode and unpacking process\"}),`\n`,(0,t.jsx)(e.li,{children:\"Finding the entrypoint of the decrypted shellcode\"}),`\n`,(0,t.jsx)(e.li,{children:\"Discuss update to GULOADER\\u2019s VEH that obfuscates control flow\"}),`\n`,(0,t.jsx)(e.li,{children:\"Provide a methodology to patch out VEH\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"initial-shellcode\",children:\"Initial Shellcode\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In our \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99\",rel:\"nofollow\",children:\"sample\"}),\", GULOADER comes pre-packaged inside an NSIS (Nullsoft Scriptable Install System) installer. When the installer is extracted, the main components are:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"NSIS Script\"}),\" - This script file outlines all the various configuration and installation aspects.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image1.png\",alt:\"Extracted NSIS contents\",title:\"Extracted NSIS contents\",width:\"517\",height:\"160\"})}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"System.dll\"}),\" - Located under the \",(0,t.jsx)(e.code,{children:\"$PLUGINSDir\"}),\". This file is dropped in a temporary folder to allocate/execute the GULOADER shellcode.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image10.png\",alt:\"System.Dll exports\",title:\"System.Dll exports\",width:\"484\",height:\"130\"})}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Shellcode\"}),\" - The encrypted shellcode is buried into a nested folder.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"One quick methodology to pinpoint the file hosting the shellcode can be done by monitoring \",(0,t.jsx)(e.code,{children:\"ReadFile\"}),\" events from SysInternal\\u2019s Process Monitor after executing GULOADER. In this case, we can see that the shellcode is read in from a file (\",(0,t.jsx)(e.code,{children:\"Fibroms.Hag\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image11.png\",alt:\"Shellcode Retrieved from File\",title:\"Shellcode Retrieved from File\",width:\"1340\",height:\"265\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"GULOADER executes shellcode through callbacks using different Windows API functions. The main reasoning behind this is to avoid detections centered around traditional Windows APIs used for process injection, such as \",(0,t.jsx)(e.code,{children:\"CreateRemoteThread\"}),\" or \",(0,t.jsx)(e.code,{children:\"WriteProcessMemory\"}),\". We have observed \",(0,t.jsx)(e.code,{children:\"EnumResourceTypesA\"}),\" and \",(0,t.jsx)(e.code,{children:\"CallWindowProcW\"}),\" used by GULOADER.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image6.png\",alt:\"EnumResourceTypesA Function Call inside GULOADER\",title:\"EnumResourceTypesA Function Call inside GULOADER\",width:\"1064\",height:\"101\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"By reviewing the MSDN documentation for \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-enumresourcetypesa\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"EnumResourceTypesA\"})}),\", we can see the second parameter expects a pointer to the callback function. From the screenshot above, we can see that the newly allocated shellcode is placed into this argument.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image13.png\",alt:\"EnumResourceTypesA Function Parameters\",title:\"EnumResourceTypesA Function Parameters\",width:\"920\",height:\"283\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image7.png\",alt:\"Shellcode from second parameter EnumResourceTypesA call\",title:\"Shellcode from second parameter EnumResourceTypesA call\",width:\"521\",height:\"246\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"finding-main-shellcode-entrypoint\",children:\"Finding Main Shellcode Entrypoint\"}),`\n`,(0,t.jsx)(e.p,{children:\"In recent samples, GULOADER has increased the complexity at the start of the initial shellcode by including many different junk instructions and jumps. Reverse engineering of the downloader can require dealing with a long process of unwinding code obfuscation designed to break disassembly and control flow in some tooling, making it frustrating to find the actual start of the core GULOADER shellcode.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One methodology for finding the initial call can be leveraging graph view inside x64dbg and using a bottom-to-top approach to look for the \",(0,t.jsx)(e.code,{children:\"call eax\"}),\" instruction.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image16.png\",alt:\"Graph view for GULOADER main entrypoint call\",title:\"Graph view for GULOADER main entrypoint call\",width:\"309\",height:\"616\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another technique to trace the initial control flow involves leveraging the reversing engineering framework \",(0,t.jsx)(e.a,{href:\"https://github.com/cea-sec/miasm\",rel:\"nofollow\",children:\"Miasm\"}),(0,t.jsx)(e.strong,{children:\".\"}),\" Below is a quick example where we can pass in the shellcode and disassemble the instructions to follow the flow:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`from miasm.core.locationdb import LocationDB\nfrom miasm.analysis.binary import Container\nfrom miasm.analysis.machine import Machine\n\nwith open(\"proctoring_06BF0000.bin\", \"rb\") as f:\n    code = f.read()\n\nloc_db = LocationDB()\nc = Container.from_string(code, loc_db)\n\nmachine = Machine('x86_32')\nmdis = machine.dis_engine(c.bin_stream, loc_db=loc_db)\nmdis.follow_call = True \nmdis.dontdis_retcall = True\nasm_cfg = mdis.dis_multiblock(offset=0x1400)\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Miasm cuts through the 142 \",(0,t.jsx)(e.code,{children:\"jmp\"}),\" instructions and navigates through the junk instructions where we have configured it to stop on the call instruction to EAX (address: \",(0,t.jsx)(e.code,{children:\"0x3bde\"}),\").\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`JMP        loc_3afd\n-\u003e\tc_to:loc_3afd \nloc_3afd\nMOV        EBX, EAX\nFADDP      ST(3), ST\nPANDN      XMM7, XMM2\nJMP        loc_3b3e\n-\u003e\tc_to:loc_3b3e \nloc_3b3e\nSHL        CL, 0x0\nPSRAW      MM1, MM0\nPSRLD      XMM1, 0xF1\nJMP        loc_3b97\n-\u003e\tc_to:loc_3b97 \nloc_3b97\nCMP        DL, 0x3A\nPADDW      XMM3, XMM5\nPXOR       MM3, MM3\nJMP        loc_3bde\n-\u003e\tc_to:loc_3bde \nloc_3bde\nCALL       EAX\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Tail end of Miasm\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"guloaders-veh-update\",children:\"GULOADER\\u2019s VEH Update\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One of GULOADER\\u2019s hallmark techniques is centered around its \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling\",rel:\"nofollow\",children:\"Vectored Exception Handling\"}),\" (VEH) capability. This feature gives Windows applications the ability to intercept and handle exceptions before they are routed through the standard exception process. Malware families and software protection applications use this technique to make it challenging for analysts and tooling to follow the malicious code.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"GULOADER starts this process by adding the VEH using \",(0,t.jsx)(e.code,{children:\"RtlAddVectoredExceptionHandler\"}),\". Throughout the execution of the GULOADER shellcode, there is code purposely placed to trigger these different exceptions. When these exceptions are triggered, the VEH will check for hardware breakpoints. If not found, GULOADER will modify the EIP directly through the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context\",rel:\"nofollow\",children:\"CONTEXT structure\"}),\" using a one-byte XOR key (changes per sample) with a one-byte offset from where the exception occurred. We will review a specific example of this technique in the subsequent section. Below is the decompilation of our sample\\u2019s VEH:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image3.png\",alt:\"Decompilation of VEH\",title:\"Decompilation of VEH\",width:\"698\",height:\"552\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Although this technique is not new, GULOADER continues to add new exceptions over time; we have recently observed these two exceptions added in the last few months:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_PRIV_INSTRUCTION\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_ILLEGAL_INSTRUCTION\"})}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"As new exceptions get added to GULOADER, it can end up breaking tooling used to expedite the analysis process for researchers.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"exception_priv_instruction\",children:\"EXCEPTION_PRIV_INSTRUCTION\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Let\\u2019s walk through the two recently added exceptions to follow the VEH workflow. The first exception (\",(0,t.jsx)(e.code,{children:\"EXCEPTION_PRIV_INSTRUCTION\"}),\"), occurs when an attempt is made to execute a privileged instruction in a processor\\u2019s instruction set at a privilege level where it\\u2019s not allowed. Certain instructions, like the example below with \",(0,t.jsx)(e.a,{href:\"https://www.felixcloutier.com/x86/wrmsr\",rel:\"nofollow\",children:\"WRSMR\"}),\" expect privileges from the kernel level, so when the program is run from user mode, it will trigger the exception due to incorrect permissions.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image2.png\",alt:\"EXCEPTION_PRIV_INSTRUCTION triggered by wrmsr instruction\",title:\"EXCEPTION_PRIV_INSTRUCTION triggered by wrmsr instruction\",width:\"604\",height:\"176\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"exception_illegal_instruction\",children:\"EXCEPTION_ILLEGAL_INSTRUCTION\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This exception is invoked when a program attempts to execute an invalid or undefined CPU instruction. In our sample, when we run into Intel virtualization instructions such as \",(0,t.jsx)(e.code,{children:\"vmclear\"}),\" or \",(0,t.jsx)(e.code,{children:\"vmxon\"}),\", this will trigger an exception.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image14.png\",alt:\"EXCEPTION_ILLEGAL_INSTRUCTION triggered by vmclear instruction\",title:\"EXCEPTION_ILLEGAL_INSTRUCTION triggered by vmclear instruction\",width:\"668\",height:\"170\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Once an exception occurs, the GULOADER VEH code will first determine which exception code was responsible for the exception. In our sample, if the exception matches any of the five below, the code will take the same path regardless.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_ACCESS_VIOLATION\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_ILLEGAL_INSTRUCTION\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_PRIV_INSTRUCTION\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_SINGLE_STEP\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"EXCEPTION_BREAKPOINT\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"GULOADER will then check for any hardware breakpoints by walking the CONTEXT record found inside the \",(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers\",rel:\"nofollow\",children:\"EXCEPTION_POINTERS\"})}),\" structure. If hardware breakpoints are found in the different debug registers, GULOADER will return a \",(0,t.jsx)(e.code,{children:\"0\"}),\" into the CONTEXT record, which will end up causing the shellcode to crash.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image4.png\",alt:\"GULOADER monitoring hardware breakpoints\",title:\"GULOADER monitoring hardware breakpoints\",width:\"840\",height:\"285\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"If there are no hardware breakpoints, GULOADER will retrieve a single byte which is 7 bytes away from the address that caused the exception. When using the last example with \",(0,t.jsx)(e.code,{children:\"vmclear\"}),\", it would retrieve byte (\",(0,t.jsx)(e.code,{children:\"0x8A\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image9.png\",alt:\"GULOADER retrieves a single byte, 7 bytes away from the instruction, causing an exception\",title:\"GULOADER retrieves a single byte, 7 bytes away from the instruction, causing an exception\",width:\"644\",height:\"136\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Then, using that byte, it will perform an XOR operation with a different hard-coded byte. In our case (\",(0,t.jsx)(e.code,{children:\"0xB8\"}),\"), this is unique per sample. Now, with a derived offset \",(0,t.jsx)(e.code,{children:\"0x32\"}),\" (\",(0,t.jsx)(e.code,{children:\"0xB8 ^ 0x8A\"}),\"), GULOADER will modify the EIP address directly from the CONTEXT record by adding \",(0,t.jsx)(e.code,{children:\"0x32\"}),\" to the previous address (\",(0,t.jsx)(e.code,{children:\"0x7697630\"}),\") that caused the exception resulting in the next code to execute from address (\",(0,t.jsx)(e.code,{children:\"0x7697662\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image8.png\",alt:\"Junk instructions in between exceptions\",title:\"Junk instructions in between exceptions\",width:\"895\",height:\"512\"})}),`\n`,(0,t.jsx)(e.p,{children:\"With different junk instructions in between, and repeatedly hitting exceptions (we counted 229 unique exceptions in our sample), it\\u2019s not hard to see why this can break different tooling and increase analyst time.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"control-flow-cleaning\",children:\"Control Flow Cleaning\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To make following the control flow easier, an analyst can bypass the VEH by tracing the execution, logging the exceptions, and patching the shellcode using the previously discussed EIP modification algorithm. For this procedure, we leveraged \",(0,t.jsx)(e.a,{href:\"https://github.com/hasherezade/tiny_tracer\",rel:\"nofollow\",children:\"TinyTracer\"}),\", a tool written by \",(0,t.jsx)(e.a,{href:\"https://twitter.com/hasherezade\",rel:\"nofollow\",children:\"@hasherezade\"}),\" that leverages \",(0,t.jsx)(e.a,{href:\"https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html\",rel:\"nofollow\",children:\"Pin\"}),\", a dynamic binary instrumentation framework. This will allow us to catch the different addresses that triggered the exception, so using the example above with \",(0,t.jsx)(e.code,{children:\"vmclear\"}),\", we can see the address was \",(0,t.jsx)(e.code,{children:\"0x7697630\"}),\", generated an exception calling \",(0,t.jsx)(e.code,{children:\"KiUserExceptionDispatcher\"}),\", a function responsible for handling user-mode exceptions.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Once all the exceptions are collected and filtered, these can be passed into an IDAPython script where we walk through each address, calculate the offset using the 7th byte over and XOR key (\",(0,t.jsx)(e.code,{children:\"0xB8\"}),\"), then patch out all the instructions generating exceptions with short jumps.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following image is an example of patching instructions that trigger exceptions at addresses \",(0,t.jsx)(e.code,{children:\"0x07697630\"}),\" and \",(0,t.jsx)(e.code,{children:\"0x0769766C\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image15.png\",alt:\"Disassembly of patched instructions\",title:\"Disassembly of patched instructions\",width:\"950\",height:\"242\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is a graphic representing the control flow graph before the patching is applied globally. Our basic block with the \",(0,t.jsx)(e.code,{children:\"vmclear\"}),\" instruction is highlighted in orange. By implementing the VEH, GULOADER flattens the control flow graph, making it harder to trace the program logic.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image5.png\",alt:\"GULOADER\\u2019s control flow flattening obfuscation\",title:\"GULOADER\\u2019s control flow flattening obfuscation\",width:\"1440\",height:\"234\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After patching the VEH with \",(0,t.jsx)(e.code,{children:\"jmp\"}),\" instructions, this transforms the basic blocks by connecting them together, reducing the complexity behind the flow of the shellcode.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/getting-gooey-with-guloader-downloader/image12.png\",alt:\"GULOADER\\u2019s call graph obfuscation\",title:\"GULOADER\\u2019s call graph obfuscation\",width:\"379\",height:\"674\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Using this technique can accelerate the cleaning process, yet it\\u2019s important to note that it isn\\u2019t a bulletproof method. In this instance, there still ends up being a good amount of code/functionality that will still need to be analyzed, but this definitely goes a long way in simplifying the code by removing the VEH. The full POC script is located \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,t.jsx)(e.p,{children:\"GULOADER has many different features that can break disassembly, hinder control flow, and make analysis difficult for researchers. Despite this and the process being imperfect, we can counter these traits through different static or dynamic processes to help reduce the analysis time. For example, we observed that with new exceptions in the VEH, we can still trace through them and patch the shellcode. This process will set the analyst on the right path, closer to accessing the core functionality with GULOADER.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"By sharing some of our workflow, we hope to provide multiple takeaways if you encounter GULOADER in the wild. Based on GULOADER\\u2019s changes, it's highly likely that future behaviors will require new and different strategies. For detecting GULOADER, the following section includes YARA rules, and the IDAPython script from this post can be found \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/guloader/guloader_FixCFG.py\",rel:\"nofollow\",children:\"here\"}),\". For new updates on the latest threat research, check out our \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/topics/malware-analysis\",rel:\"nofollow\",children:\"malware analysis section\"}),\" by the Elastic Security Labs team.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"yara\",children:\"YARA\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Security has created different YARA \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Guloader.yar\",rel:\"nofollow\",children:\"rules\"}),\" to identify this activity. Below is an example of one YARA rule to identify GULOADER.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`rule Windows_Trojan_Guloader {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2023-10-30\"\n        last_modified = \"2023-11-02\"   \n        reference_sample = \"6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99\"\n        severity = 100\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.Guloader\"\n        license = \"Elastic License v2\"\n        os = \"windows\"\n    strings:\n        $djb2_str_compare = { 83 C0 08 83 3C 04 00 0F 84 [4] 39 14 04 75 }\n        $check_exception = { 8B 45 ?? 8B 00 38 EC 8B 58 ?? 84 FD 81 38 05 00 00 C0 }\n        $parse_mem = { 18 00 10 00 00 83 C0 18 50 83 E8 04 81 00 00 10 00 00 50 }\n        $hw_bp = { 39 48 0C 0F 85 [4] 39 48 10 0F 85 [4] 39 48 14 0F 85 [7] 39 48 18 }\n        $scan_protection = { 39 ?? 14 8B [5] 0F 84 }\n    condition:\n        2 of them\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All observables are also available for \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/guloader\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Observable\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Reference\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"6ae7089aa6beaa09b1c3aa3ecf28a884d8ca84f780aab39902223721493b1f99\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"Windows.Trojan.Guloader\"}),(0,t.jsx)(e.td,{children:\"GULOADER downloader\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"101.99.75[.]183/MfoGYZkxZIl205.bin\"}),(0,t.jsx)(e.td,{children:\"url\"}),(0,t.jsx)(e.td,{children:\"NA\"}),(0,t.jsx)(e.td,{children:\"GULOADER C2 URL\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"101.99.75[.]183\"}),(0,t.jsx)(e.td,{children:\"ipv4-addr\"}),(0,t.jsx)(e.td,{children:\"NA\"}),(0,t.jsx)(e.td,{children:\"GULOADER C2 IP\"})]})]})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/guloader\",rel:\"nofollow\",children:\"https://github.com/elastic/labs-releases/tree/main/tools/guloader\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye\",rel:\"nofollow\",children:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.cloudeye\"})}),`\n`]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var O=x;return b(R);})();\n;return Component;"},"_id":"articles/getting-gooey-with-guloader-downloader.mdx","_raw":{"sourceFilePath":"articles/getting-gooey-with-guloader-downloader.mdx","sourceFileName":"getting-gooey-with-guloader-downloader.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/getting-gooey-with-guloader-downloader"},"type":"Article","imageUrl":"/assets/images/getting-gooey-with-guloader-downloader/photo-edited-03@2x.jpg","readingTime":"13 min read","series":"","url":"/getting-gooey-with-guloader-downloader","headings":[{"level":2,"title":"Overview","href":"#overview"},{"level":2,"title":"Initial Shellcode","href":"#initial-shellcode"},{"level":2,"title":"Finding Main Shellcode Entrypoint","href":"#finding-main-shellcode-entrypoint"},{"level":2,"title":"GULOADER’s VEH Update","href":"#guloaders-veh-update"},{"level":3,"title":"EXCEPTION_PRIV_INSTRUCTION","href":"#exception_priv_instruction"},{"level":3,"title":"EXCEPTION_ILLEGAL_INSTRUCTION","href":"#exception_illegal_instruction"},{"level":2,"title":"Control Flow Cleaning","href":"#control-flow-cleaning"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var j=(t,n,e)=\u003e(e=t!=null?m(d(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),D=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((h,c)=\u003e{c.exports=_jsx_runtime});var X={};g(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Daniel Stepanic\",description:\"Elastic\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"getting-gooey-with-guloader-downloader"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>