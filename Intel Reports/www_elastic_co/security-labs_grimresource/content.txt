<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>GrimResource - Microsoft Management Console for initial access and evasion — Elastic Security Labs</title><meta name="description" content="Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses."/><meta property="og:title" content="GrimResource - Microsoft Management Console for initial access and evasion — Elastic Security Labs"/><meta property="og:description" content="Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/grimresource/grimresource.jpg?30be9142bc5c978738c94be3453259d6"/><meta property="og:image:alt" content="Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/grimresource"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="GrimResource - Microsoft Management Console for initial access and evasion — Elastic Security Labs"/><meta name="twitter:description" content="Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/grimresource/grimresource.jpg?30be9142bc5c978738c94be3453259d6"/><meta name="twitter:image:alt" content="Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses."/><link rel="canonical" href="https://www.elastic.co/security-labs/grimresource"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/grimresource"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/grimresource"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-06-22T00:00:00.000Z">22 June 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/joe-desimone">Joe Desimone</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/samir-bousseaden">Samir Bousseaden</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>GrimResource -&nbsp; Microsoft Management Console for initial access and&nbsp;evasion</span></h1><p class="text-zinc-200 text-base md:text-xl">Adversaries adapting to Microsoft&#x27;s new security landscape</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>9 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/attack-pattern">Attack pattern</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="GrimResource - Microsoft Management Console for initial access and evasion" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fgrimresource%2Fgrimresource.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="overview" class="absolute -top-32"></span>Overview</h2>
<p>After Microsoft <a href="https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked">disabled</a> office macros by default for internet-sourced documents, other infection vectors like JavaScript, MSI files, LNK objects, and ISOs have surged in popularity. However, these other techniques are scrutinized by defenders and have a high likelihood of detection. Mature attackers seek to leverage new and undisclosed infection vectors to gain access while evading defenses. A <a href="https://www.genians.co.kr/blog/threat_intelligence/facebook">recent example</a> involved DPRK actors using a new command execution technique in MSC files.</p>
<p>Elastic researchers have uncovered a new infection technique also leveraging MSC files, which we refer to as GrimResource. It allows attackers to gain full code execution in the context of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code> after a user clicks on a specially crafted MSC file. A <a href="https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb">sample</a> leveraging GrimResource was first uploaded to VirusTotal on June 6th.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>Elastic Security researchers uncovered a novel, in-the-wild code execution technique leveraging specially crafted MSC files referred to as GrimResource</li>
<li>GrimResource allows attackers to execute arbitrary code in Microsoft Management Console (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code>) with minimal security warnings, ideal for gaining initial access and evading defenses</li>
<li>Elastic is providing analysis of the technique and detection guidance so the community can protect themselves</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="analysis" class="absolute -top-32"></span>Analysis</h2>
<p>The key to the <a href="https://gist.github.com/joe-desimone/2b0bbee382c9bdfcac53f2349a379fa4">GrimResource</a> technique is using an old <a href="https://medium.com/@knownsec404team/from-http-domain-to-res-domain-xss-by-using-ie-adobes-pdf-activex-plugin-ba4f082c8199">XSS flaw</a> present in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apds.dll</code> library. By adding a reference to the vulnerable APDS resource in the appropriate StringTable section of a crafted MSC file, attackers can execute arbitrary javascript in the context of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code>. Attackers can combine this technique with <a href="https://github.com/tyranid/DotNetToJScript/tree/master">DotNetToJScript</a> to gain arbitrary code execution.</p>
<p></p>
<p>At the time of writing, the sample identified in the wild had 0 static detections in <a href="https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb/details">VirusTotal</a>.</p>
<p></p>
<p>The sample begins with a transformNode obfuscation technique, which was observed in recent but unrelated <a href="https://twitter.com/decalage2/status/1773114380013461799">macro samples</a>. This aids in evading ActiveX security warnings.</p>
<p></p>
<p>This leads to an obfuscated embedded VBScript, as reconstructed below:</p>
<p></p>
<p>The VBScript sets the target payload in a series of environment variables and then leverages the <a href="https://github.com/tyranid/DotNetToJScript/blob/master/DotNetToJScript/Resources/vbs_template.txt">DotNetToJs</a> technique to execute an embedded .NET loader. We named this component PASTALOADER and may release additional analysis on this specific tool in the future.</p>
<p></p>
<p></p>
<p>PASTALOADER retrieves the payload from environment variables set by the VBScript in the previous step:</p>
<p></p>
<p>Finally, PASTALOADER spawns a new instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dllhost.exe</code> and injects the payload into it. This is done in a deliberately stealthy manner using the <a href="https://github.com/ipSlav/DirtyCLR/tree/7b1280fee780413d43adbad9f4c2a9ce7ed9f29e">DirtyCLR</a> technique, function unhooking, and indirect syscalls. In this sample, the final payload is Cobalt Strike.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detections" class="absolute -top-32"></span>Detections</h2>
<p>In this section, we will examine current behavior detections for this sample and present new, more precise ones aimed at the technique primitives.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="suspicious-execution-via-microsoft-common-console" class="absolute -top-32"></span>Suspicious Execution via Microsoft Common Console</h3>
<p>This detection was established prior to our discovery of this new execution technique. It was originally designed to identify a <a href="https://www.genians.co.kr/blog/threat_intelligence/facebook">different method</a> (which requires the user to click on the Taskpad after opening the MSC file) that exploits the same MSC file type to execute commands through the Console Taskpads command line attribute:</p>
<p></p>
<pre><code>process where event.action == &quot;start&quot; and
 process.parent.executable : &quot;?:\\Windows\\System32\\mmc.exe&quot; and  process.parent.args : &quot;*.msc&quot; and
 not process.parent.args : (&quot;?:\\Windows\\System32\\*.msc&quot;, &quot;?:\\Windows\\SysWOW64\\*.msc&quot;, &quot;?:\\Program files\\*.msc&quot;, &quot;?:\\Program Files (x86)\\*.msc&quot;) and
 not process.executable :
              (&quot;?:\\Windows\\System32\\mmc.exe&quot;,
               &quot;?:\\Windows\\System32\\wermgr.exe&quot;,
               &quot;?:\\Windows\\System32\\WerFault.exe&quot;,
               &quot;?:\\Windows\\SysWOW64\\mmc.exe&quot;,
               &quot;?:\\Program Files\\*.exe&quot;,
               &quot;?:\\Program Files (x86)\\*.exe&quot;,
               &quot;?:\\Windows\\System32\\spool\\drivers\\x64\\3\\*.EXE&quot;,
               &quot;?:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;)</code></pre>
<p>It triggers here because this sample opted to spawn and inject a sacrificial instance of dllhost.exe:</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="net-com-object-created-in-non-standard-windows-script-interpreter" class="absolute -top-32"></span>.NET COM object created in non-standard Windows Script Interpreter</h3>
<p>The sample is using the <a href="https://github.com/tyranid/DotNetToJScript">DotNetToJScript</a> technique, which triggers another detection looking for RWX memory allocation from .NET on behalf of a Windows Script Host (WSH) script engine (Jscript or Vbscript):</p>
<p>The following EQL rule will detect execution via the .NET loader:</p>
<pre><code>api where
  not process.name : (&quot;cscript.exe&quot;, &quot;wscript.exe&quot;) and
  process.code_signature.trusted == true and
  process.code_signature.subject_name : &quot;Microsoft*&quot; and
  process.Ext.api.name == &quot;VirtualAlloc&quot; and
  process.Ext.api.parameters.allocation_type == &quot;RESERVE&quot; and 
  process.Ext.api.parameters.protection == &quot;RWX&quot; and
  process.thread.Ext.call_stack_summary : (
    /* .NET is allocating executable memory on behalf of a WSH script engine
     * Note - this covers both .NET 2 and .NET 4 framework variants */
    &quot;*|mscoree.dll|combase.dll|jscript.dll|*&quot;,
    &quot;*|mscoree.dll|combase.dll|vbscript.dll|*&quot;,
    &quot;*|mscoree.dll|combase.dll|jscript9.dll|*&quot;,
    &quot;*|mscoree.dll|combase.dll|chakra.dll|*&quot;
)</code></pre>
<p>The following alert shows <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code> allocating RWX memory and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">process.thread.Ext.call_stack_summary </code>captures the origin of the allocation from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vbscript.dll</code> to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">clr.dll</code> :</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="script-execution-via-mmc-console-file" class="absolute -top-32"></span>Script Execution via MMC Console File</h3>
<p>The two previous detections were triggered by specific implementation choices to weaponize the GrimResource method (DotNetToJS and spawning a child process). These detections can be bypassed by using more OPSEC-safe alternatives.</p>
<p>Other behaviors that might initially seem suspicious — such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code> loading <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jscript.dll</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vbscript.dll</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">msxml3.dll</code> — can be clarified compared to benign data. We can see that, except for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vbscript.dll</code>, these WSH engines are typically loaded by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code>:</p>
<p></p>
<p>The core aspect of this method involves using <a href="https://strontic.github.io/xcyclopedia/library/apds.dll-DF461ADCCD541185313F9439313D1EE1.html">apds.dll</a> to execute Jscript via XSS. This behavior is evident in the mmc.exe Procmon output as a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFile</code> operation (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apds.dll</code> is not loaded as a library):</p>
<p></p>
<p></p>
<p>We added the following detection using Elastic Defend file open events where the target file is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apds.dll</code> and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">process.name</code> is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mmc.exe</code>:</p>
<p>The following EQL rule will detect the execution of a script from the MMC console:</p>
<pre><code>sequence by process.entity_id with maxspan=1m
 [process where event.action == &quot;start&quot; and
  process.executable : &quot;?:\\Windows\\System32\\mmc.exe&quot; and process.args : &quot;*.msc&quot;]
 [file where event.action == &quot;open&quot; and file.path : &quot;?:\\Windows\\System32\\apds.dll&quot;]</code></pre>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="windows-script-execution-via-mmc-console-file" class="absolute -top-32"></span>Windows Script Execution via MMC Console File</h3>
<p>Another detection and forensic artifact is the creation of a temporary HTML file in the INetCache folder, named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">redirect[*] </code>as a result of the APDS <a href="https://owasp.org/www-community/attacks/xss/">XSS</a> redirection:</p>
<p></p>
<p>The following EQL correlation can be used to detect this behavior while also capturing the msc file path:</p>
<pre><code>sequence by process.entity_id with maxspan=1m
 [process where event.action == &quot;start&quot; and
  process.executable : &quot;?:\\Windows\\System32\\mmc.exe&quot; and process.args : &quot;*.msc&quot;]
 [file where event.action in (&quot;creation&quot;, &quot;overwrite&quot;) and
  process.executable :  &quot;?:\\Windows\\System32\\mmc.exe&quot; and file.name : &quot;redirect[?]&quot; and 
  file.path : &quot;?:\\Users\\*\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\*\\redirect[?]&quot;]</code></pre>
<p></p>
<p>Alongside the provided behavior rules, the following YARA rule can be used to detect similar files:</p>
<pre><code>rule Windows_GrimResource_MMC {
    meta:
        author = &quot;Elastic Security&quot;
        reference = &quot;https://www.elastic.co/security-labs/GrimResource&quot;
        reference_sample = &quot;14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb&quot;
        arch_context = &quot;x86&quot;
        scan_context = &quot;file, memory&quot;
        license = &quot;Elastic License v2&quot;
        os = &quot;windows&quot;
    strings:
        $xml = &quot;&lt;?xml&quot;
        $a = &quot;MMC_ConsoleFile&quot; 
        $b1 = &quot;apds.dll&quot; 
        $b2 = &quot;res://&quot;
        $b3 = &quot;javascript:eval(&quot;
        $b4 = &quot;.loadXML(&quot;
    condition:
       $xml at 0 and $a and 2 of ($b*)
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>Attackers have developed a new technique to execute arbitrary code in Microsoft Management Console using crafted MSC files. Elastic’s existing out of the box coverage shows our defense-in-depth approach is effective even against novel threats like this. Defenders should leverage our detection guidance to protect themselves and their customers from this technique before it proliferates into commodity threat groups.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observables" class="absolute -top-32"></span>Observables</h2>
<p>All observables are also <a href="https://github.com/elastic/labs-releases/tree/main/indicators/grimresource">available for download</a> in both ECS and STIX formats.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sccm-updater.msc</code></td><td>Abused MSC file</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">4cb575bc114d39f8f1e66d6e7c453987639289a28cd83a7d802744cd99087fd7</code></td><td>SHA-256</td><td>N/A</td><td>PASTALOADER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c1bba723f79282dceed4b8c40123c72a5dfcf4e3ff7dd48db8cb6c8772b60b88</code></td><td>SHA-256</td><td>N/A</td><td>Cobalt Strike payload</td></tr></tbody></table></div></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#overview"><span>Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#analysis"><span>Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#detections"><span>Detections</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/grimresource#suspicious-execution-via-microsoft-common-console"><span>Suspicious Execution via Microsoft Common&nbsp;Console</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/grimresource#net-com-object-created-in-non-standard-windows-script-interpreter"><span>.NET COM object created in non-&nbsp;standard Windows Script&nbsp;Interpreter</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/grimresource#script-execution-via-mmc-console-file-"><span>Script Execution via MMC Console File&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/grimresource#windows-script-execution-via-mmc-console-file"><span>Windows Script Execution via MMC Console&nbsp;File</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#conclusion"><span>Conclusion</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/grimresource#observables"><span>Observables</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=GrimResource - Microsoft Management Console for initial access and evasion&amp;url=https://www.elastic.co/security-labs/grimresource" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/grimresource" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/grimresource&amp;title=GrimResource - Microsoft Management Console for initial access and evasion" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/grimresource&amp;title=GrimResource - Microsoft Management Console for initial access and evasion" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"GrimResource - Microsoft Management Console for initial access and evasion","slug":"grimresource","date":"2024-06-22","description":"Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses.","image":"grimresource.jpg","subtitle":"Adversaries adapting to Microsoft's new security landscape","tags":["grimresource","mcc","msc"],"body":{"raw":"\n## Overview\n\nAfter Microsoft [disabled](https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked) office macros by default for internet-sourced documents, other infection vectors like JavaScript, MSI files, LNK objects, and ISOs have surged in popularity. However, these other techniques are scrutinized by defenders and have a high likelihood of detection. Mature attackers seek to leverage new and undisclosed infection vectors to gain access while evading defenses. A [recent example](https://www.genians.co.kr/blog/threat_intelligence/facebook) involved DPRK actors using a new command execution technique in MSC files.\n\nElastic researchers have uncovered a new infection technique also leveraging MSC files, which we refer to as GrimResource. It allows attackers to gain full code execution in the context of `mmc.exe` after a user clicks on a specially crafted MSC file. A [sample](https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb) leveraging GrimResource was first uploaded to VirusTotal on June 6th.\n\n## Key takeaways\n\n* Elastic Security researchers uncovered a novel, in-the-wild code execution technique leveraging specially crafted MSC files referred to as GrimResource\n* GrimResource allows attackers to execute arbitrary code in Microsoft Management Console (`mmc.exe`) with minimal security warnings, ideal for gaining initial access and evading defenses\n* Elastic is providing analysis of the technique and detection guidance so the community can protect themselves \n\n## Analysis\n\nThe key to the [GrimResource](https://gist.github.com/joe-desimone/2b0bbee382c9bdfcac53f2349a379fa4) technique is using an old [XSS flaw](https://medium.com/@knownsec404team/from-http-domain-to-res-domain-xss-by-using-ie-adobes-pdf-activex-plugin-ba4f082c8199) present in the `apds.dll` library. By adding a reference to the vulnerable APDS resource in the appropriate StringTable section of a crafted MSC file, attackers can execute arbitrary javascript in the context of `mmc.exe`. Attackers can combine this technique with [DotNetToJScript](https://github.com/tyranid/DotNetToJScript/tree/master) to gain arbitrary code execution.\n\n![Reference to apds.dll redirect in StringTable](/assets/images/grimresource/image17.png \"Reference to apds.dll redirect in StringTable\")\n\nAt the time of writing, the sample identified in the wild had 0 static detections in [VirusTotal](https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb/details).\n\n![VirusTotal results](/assets/images/grimresource/image1.png \"VirusTotal results\")\n\nThe sample begins with a transformNode obfuscation technique, which was observed in recent but unrelated [macro samples](https://twitter.com/decalage2/status/1773114380013461799). This aids in evading ActiveX security warnings.\n\n![transformNode evasion and obfuscation technique](/assets/images/grimresource/image15.png \"transformNode evasion and obfuscation technique\")\n\nThis leads to an obfuscated embedded VBScript, as reconstructed below:\n\n![Obfuscated VBScript](/assets/images/grimresource/image8.png \"Obfuscated VBScript\")\n\nThe VBScript sets the target payload in a series of environment variables and then leverages the [DotNetToJs](https://github.com/tyranid/DotNetToJScript/blob/master/DotNetToJScript/Resources/vbs_template.txt) technique to execute an embedded .NET loader. We named this component PASTALOADER and may release additional analysis on this specific tool in the future.\n\n![Setting the target payload environment variables](/assets/images/grimresource/image13.png \"Setting the target payload environment variables\")\n\n![DotNetToJs loading technique](/assets/images/grimresource/image2.png \"DotNetToJs loading technique\")\n\nPASTALOADER retrieves the payload from environment variables set by the VBScript in the previous step:\n\n![PASTALOADER loader retrieving the payload](/assets/images/grimresource/image14.png \"PASTALOADER loader retrieving the payload\")\n\nFinally, PASTALOADER spawns a new instance of `dllhost.exe` and injects the payload into it. This is done in a deliberately stealthy manner using the [DirtyCLR](https://github.com/ipSlav/DirtyCLR/tree/7b1280fee780413d43adbad9f4c2a9ce7ed9f29e) technique, function unhooking, and indirect syscalls. In this sample, the final payload is Cobalt Strike.\n\n![Payload injected into dllhost.exe](/assets/images/grimresource/image7.png \"Payload injected into dllhost.exe\")\n\n## Detections\n\nIn this section, we will examine current behavior detections for this sample and present new, more precise ones aimed at the technique primitives.\n\n### Suspicious Execution via Microsoft Common Console\n\nThis detection was established prior to our discovery of this new execution technique. It was originally designed to identify a [different method](https://www.genians.co.kr/blog/threat_intelligence/facebook) (which requires the user to click on the Taskpad after opening the MSC file) that exploits the same MSC file type to execute commands through the Console Taskpads command line attribute:\n\n![Command task MSC sample](/assets/images/grimresource/image12.png \"Command task MSC sample\")\n\n```\nprocess where event.action == \"start\" and\n process.parent.executable : \"?:\\\\Windows\\\\System32\\\\mmc.exe\" and  process.parent.args : \"*.msc\" and\n not process.parent.args : (\"?:\\\\Windows\\\\System32\\\\*.msc\", \"?:\\\\Windows\\\\SysWOW64\\\\*.msc\", \"?:\\\\Program files\\\\*.msc\", \"?:\\\\Program Files (x86)\\\\*.msc\") and\n not process.executable :\n              (\"?:\\\\Windows\\\\System32\\\\mmc.exe\",\n               \"?:\\\\Windows\\\\System32\\\\wermgr.exe\",\n               \"?:\\\\Windows\\\\System32\\\\WerFault.exe\",\n               \"?:\\\\Windows\\\\SysWOW64\\\\mmc.exe\",\n               \"?:\\\\Program Files\\\\*.exe\",\n               \"?:\\\\Program Files (x86)\\\\*.exe\",\n               \"?:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\*.EXE\",\n               \"?:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\")\n```\nIt triggers here because this sample opted to spawn and inject a sacrificial instance of dllhost.exe:\n\n![GrimResource detected](/assets/images/grimresource/image10.png \"GrimResource detected\")\n\n### .NET COM object created in non-standard Windows Script Interpreter\n\nThe sample is using the [DotNetToJScript](https://github.com/tyranid/DotNetToJScript) technique, which triggers another detection looking for RWX memory allocation from .NET on behalf of a Windows Script Host (WSH) script engine (Jscript or Vbscript):\n\nThe following EQL rule will detect execution via the .NET loader:\n\n```\napi where\n  not process.name : (\"cscript.exe\", \"wscript.exe\") and\n  process.code_signature.trusted == true and\n  process.code_signature.subject_name : \"Microsoft*\" and\n  process.Ext.api.name == \"VirtualAlloc\" and\n  process.Ext.api.parameters.allocation_type == \"RESERVE\" and \n  process.Ext.api.parameters.protection == \"RWX\" and\n  process.thread.Ext.call_stack_summary : (\n    /* .NET is allocating executable memory on behalf of a WSH script engine\n     * Note - this covers both .NET 2 and .NET 4 framework variants */\n    \"*|mscoree.dll|combase.dll|jscript.dll|*\",\n    \"*|mscoree.dll|combase.dll|vbscript.dll|*\",\n    \"*|mscoree.dll|combase.dll|jscript9.dll|*\",\n    \"*|mscoree.dll|combase.dll|chakra.dll|*\"\n)\n```\n\nThe following alert shows `mmc.exe` allocating RWX memory and the `process.thread.Ext.call_stack_summary `captures the origin of the allocation from `vbscript.dll` to `clr.dll` : \n\n![mmc.exe allocating RWX memory](/assets/images/grimresource/image6.png \"mmc.exe allocating RWX memory\")\n\n### Script Execution via MMC Console File \n\nThe two previous detections were triggered by specific implementation choices to weaponize the GrimResource method (DotNetToJS and spawning a child process). These detections can be bypassed by using more OPSEC-safe alternatives.\n\nOther behaviors that might initially seem suspicious — such as `mmc.exe` loading `jscript.dll`, `vbscript.dll`, and `msxml3.dll` — can be clarified compared to benign data. We can see that, except for `vbscript.dll`, these WSH engines are typically loaded by `mmc.exe`: \n\n![Normal library load behaviors by mmc.exe](/assets/images/grimresource/image4.png \"Normal library load behaviors by mmc.exe\")\n\nThe core aspect of this method involves using [apds.dll](https://strontic.github.io/xcyclopedia/library/apds.dll-DF461ADCCD541185313F9439313D1EE1.html) to execute Jscript via XSS. This behavior is evident in the mmc.exe Procmon output as a `CreateFile` operation (`apds.dll` is not loaded as a library):\n\n![apds.dll being invoked in the MSC StringTable](/assets/images/grimresource/image9.png \"apds.dll being invoked in the MSC StringTable\")\n\n![Example of the successful execution of GrimResource](/assets/images/grimresource/image16.png \"Example of the successful execution of GrimResource\")\n\nWe added the following detection using Elastic Defend file open events where the target file is `apds.dll` and the `process.name` is `mmc.exe`: \n\nThe following EQL rule will detect the execution of a script from the MMC console:\n\n```\nsequence by process.entity_id with maxspan=1m\n [process where event.action == \"start\" and\n  process.executable : \"?:\\\\Windows\\\\System32\\\\mmc.exe\" and process.args : \"*.msc\"]\n [file where event.action == \"open\" and file.path : \"?:\\\\Windows\\\\System32\\\\apds.dll\"]\n```\n\n![Timeline showing the script execution with the MMC console](/assets/images/grimresource/image5.png \"Timeline showing the script execution with the MMC console\")\n\n### Windows Script Execution via MMC Console File\n\nAnother detection and forensic artifact is the creation of a temporary HTML file in the INetCache folder, named `redirect[*] `as a result of the APDS [XSS](https://owasp.org/www-community/attacks/xss/) redirection:\n\n![Contents of redirect.html](/assets/images/grimresource/image11.png \"Contents of redirect.html\")\n\nThe following EQL correlation can be used to detect this behavior while also capturing the msc file path: \n\n```\nsequence by process.entity_id with maxspan=1m\n [process where event.action == \"start\" and\n  process.executable : \"?:\\\\Windows\\\\System32\\\\mmc.exe\" and process.args : \"*.msc\"]\n [file where event.action in (\"creation\", \"overwrite\") and\n  process.executable :  \"?:\\\\Windows\\\\System32\\\\mmc.exe\" and file.name : \"redirect[?]\" and \n  file.path : \"?:\\\\Users\\\\*\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\IE\\\\*\\\\redirect[?]\"]\n```\n\n![Timeline detecting redirect.html](/assets/images/grimresource/image3.png \"Timeline detecting redirect.html\")\n\nAlongside the provided behavior rules, the following YARA rule can be used to detect similar files:\n\n```\nrule Windows_GrimResource_MMC {\n    meta:\n        author = \"Elastic Security\"\n        reference = \"https://www.elastic.co/security-labs/GrimResource\"\n        reference_sample = \"14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb\"\n        arch_context = \"x86\"\n        scan_context = \"file, memory\"\n        license = \"Elastic License v2\"\n        os = \"windows\"\n    strings:\n        $xml = \"\u003c?xml\"\n        $a = \"MMC_ConsoleFile\" \n        $b1 = \"apds.dll\" \n        $b2 = \"res://\"\n        $b3 = \"javascript:eval(\"\n        $b4 = \".loadXML(\"\n    condition:\n       $xml at 0 and $a and 2 of ($b*)\n}\n```\n\n## Conclusion\n\nAttackers have developed a new technique to execute arbitrary code in Microsoft Management Console using crafted MSC files. Elastic’s existing out of the box coverage shows our defense-in-depth approach is effective even against novel threats like this. Defenders should leverage our detection guidance to protect themselves and their customers from this technique before it proliferates into commodity threat groups. \n\n## Observables\n\nAll observables are also [available for download](https://github.com/elastic/labs-releases/tree/main/indicators/grimresource) in both ECS and STIX formats.\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type    | Name             | Reference             |\n|------------------------------------------------------------------|---------|------------------|-----------------------|\n| `14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb` | SHA-256 | `sccm-updater.msc` | Abused MSC file       |\n| `4cb575bc114d39f8f1e66d6e7c453987639289a28cd83a7d802744cd99087fd7` | SHA-256 | N/A              | PASTALOADER           |\n| `c1bba723f79282dceed4b8c40123c72a5dfcf4e3ff7dd48db8cb6c8772b60b88` | SHA-256 | N/A              | Cobalt Strike payload |\n","code":"var Component=(()=\u003e{var h=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!u.call(t,r)\u0026\u0026r!==n\u0026\u0026s(t,r,{get:()=\u003ee[r],enumerable:!(c=m(e,r))||c.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(g(t)):{},a(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),v=t=\u003ea(s({},\"__esModule\",{value:!0}),t);var l=f((M,o)=\u003e{o.exports=_jsx_runtime});var T={};b(T,{default:()=\u003eS,frontmatter:()=\u003ey});var i=w(l()),y={title:\"GrimResource - Microsoft Management Console for initial access and evasion\",slug:\"grimresource\",date:\"2024-06-22\",subtitle:\"Adversaries adapting to Microsoft's new security landscape\",description:\"Elastic researchers uncovered a new technique, GrimResource, which allows full code execution via specially crafted MSC files. It underscores a trend of well-resourced attackers favoring innovative initial access methods to evade defenses.\",author:[{slug:\"joe-desimone\"},{slug:\"samir-bousseaden\"}],image:\"grimresource.jpg\",category:[{slug:\"attack-pattern\"}],tags:[\"grimresource\",\"mcc\",\"msc\"]};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",img:\"img\",h3:\"h3\",pre:\"pre\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"overview\",children:\"Overview\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After Microsoft \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked\",rel:\"nofollow\",children:\"disabled\"}),\" office macros by default for internet-sourced documents, other infection vectors like JavaScript, MSI files, LNK objects, and ISOs have surged in popularity. However, these other techniques are scrutinized by defenders and have a high likelihood of detection. Mature attackers seek to leverage new and undisclosed infection vectors to gain access while evading defenses. A \",(0,i.jsx)(e.a,{href:\"https://www.genians.co.kr/blog/threat_intelligence/facebook\",rel:\"nofollow\",children:\"recent example\"}),\" involved DPRK actors using a new command execution technique in MSC files.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic researchers have uncovered a new infection technique also leveraging MSC files, which we refer to as GrimResource. It allows attackers to gain full code execution in the context of \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\" after a user clicks on a specially crafted MSC file. A \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb\",rel:\"nofollow\",children:\"sample\"}),\" leveraging GrimResource was first uploaded to VirusTotal on June 6th.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Elastic Security researchers uncovered a novel, in-the-wild code execution technique leveraging specially crafted MSC files referred to as GrimResource\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"GrimResource allows attackers to execute arbitrary code in Microsoft Management Console (\",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\") with minimal security warnings, ideal for gaining initial access and evading defenses\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Elastic is providing analysis of the technique and detection guidance so the community can protect themselves\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"analysis\",children:\"Analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The key to the \",(0,i.jsx)(e.a,{href:\"https://gist.github.com/joe-desimone/2b0bbee382c9bdfcac53f2349a379fa4\",rel:\"nofollow\",children:\"GrimResource\"}),\" technique is using an old \",(0,i.jsx)(e.a,{href:\"https://medium.com/@knownsec404team/from-http-domain-to-res-domain-xss-by-using-ie-adobes-pdf-activex-plugin-ba4f082c8199\",rel:\"nofollow\",children:\"XSS flaw\"}),\" present in the \",(0,i.jsx)(e.code,{children:\"apds.dll\"}),\" library. By adding a reference to the vulnerable APDS resource in the appropriate StringTable section of a crafted MSC file, attackers can execute arbitrary javascript in the context of \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\". Attackers can combine this technique with \",(0,i.jsx)(e.a,{href:\"https://github.com/tyranid/DotNetToJScript/tree/master\",rel:\"nofollow\",children:\"DotNetToJScript\"}),\" to gain arbitrary code execution.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image17.png\",alt:\"Reference to apds.dll redirect in StringTable\",title:\"Reference to apds.dll redirect in StringTable\",width:\"785\",height:\"276\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"At the time of writing, the sample identified in the wild had 0 static detections in \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb/details\",rel:\"nofollow\",children:\"VirusTotal\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image1.png\",alt:\"VirusTotal results\",title:\"VirusTotal results\",width:\"1440\",height:\"584\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The sample begins with a transformNode obfuscation technique, which was observed in recent but unrelated \",(0,i.jsx)(e.a,{href:\"https://twitter.com/decalage2/status/1773114380013461799\",rel:\"nofollow\",children:\"macro samples\"}),\". This aids in evading ActiveX security warnings.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image15.png\",alt:\"transformNode evasion and obfuscation technique\",title:\"transformNode evasion and obfuscation technique\",width:\"1177\",height:\"508\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This leads to an obfuscated embedded VBScript, as reconstructed below:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image8.png\",alt:\"Obfuscated VBScript\",title:\"Obfuscated VBScript\",width:\"750\",height:\"444\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The VBScript sets the target payload in a series of environment variables and then leverages the \",(0,i.jsx)(e.a,{href:\"https://github.com/tyranid/DotNetToJScript/blob/master/DotNetToJScript/Resources/vbs_template.txt\",rel:\"nofollow\",children:\"DotNetToJs\"}),\" technique to execute an embedded .NET loader. We named this component PASTALOADER and may release additional analysis on this specific tool in the future.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image13.png\",alt:\"Setting the target payload environment variables\",title:\"Setting the target payload environment variables\",width:\"481\",height:\"296\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image2.png\",alt:\"DotNetToJs loading technique\",title:\"DotNetToJs loading technique\",width:\"754\",height:\"131\"})}),`\n`,(0,i.jsx)(e.p,{children:\"PASTALOADER retrieves the payload from environment variables set by the VBScript in the previous step:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image14.png\",alt:\"PASTALOADER loader retrieving the payload\",title:\"PASTALOADER loader retrieving the payload\",width:\"724\",height:\"129\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, PASTALOADER spawns a new instance of \",(0,i.jsx)(e.code,{children:\"dllhost.exe\"}),\" and injects the payload into it. This is done in a deliberately stealthy manner using the \",(0,i.jsx)(e.a,{href:\"https://github.com/ipSlav/DirtyCLR/tree/7b1280fee780413d43adbad9f4c2a9ce7ed9f29e\",rel:\"nofollow\",children:\"DirtyCLR\"}),\" technique, function unhooking, and indirect syscalls. In this sample, the final payload is Cobalt Strike.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image7.png\",alt:\"Payload injected into dllhost.exe\",title:\"Payload injected into dllhost.exe\",width:\"1440\",height:\"334\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"detections\",children:\"Detections\"}),`\n`,(0,i.jsx)(e.p,{children:\"In this section, we will examine current behavior detections for this sample and present new, more precise ones aimed at the technique primitives.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"suspicious-execution-via-microsoft-common-console\",children:\"Suspicious Execution via Microsoft Common Console\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This detection was established prior to our discovery of this new execution technique. It was originally designed to identify a \",(0,i.jsx)(e.a,{href:\"https://www.genians.co.kr/blog/threat_intelligence/facebook\",rel:\"nofollow\",children:\"different method\"}),\" (which requires the user to click on the Taskpad after opening the MSC file) that exploits the same MSC file type to execute commands through the Console Taskpads command line attribute:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image12.png\",alt:\"Command task MSC sample\",title:\"Command task MSC sample\",width:\"1440\",height:\"707\"})}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`process where event.action == \"start\" and\n process.parent.executable : \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\mmc.exe\" and  process.parent.args : \"*.msc\" and\n not process.parent.args : (\"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\*.msc\", \"?:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\*.msc\", \"?:\\\\\\\\Program files\\\\\\\\*.msc\", \"?:\\\\\\\\Program Files (x86)\\\\\\\\*.msc\") and\n not process.executable :\n              (\"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\mmc.exe\",\n               \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\wermgr.exe\",\n               \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\WerFault.exe\",\n               \"?:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\mmc.exe\",\n               \"?:\\\\\\\\Program Files\\\\\\\\*.exe\",\n               \"?:\\\\\\\\Program Files (x86)\\\\\\\\*.exe\",\n               \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\spool\\\\\\\\drivers\\\\\\\\x64\\\\\\\\3\\\\\\\\*.EXE\",\n               \"?:\\\\\\\\Program Files (x86)\\\\\\\\Microsoft\\\\\\\\Edge\\\\\\\\Application\\\\\\\\msedge.exe\")\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"It triggers here because this sample opted to spawn and inject a sacrificial instance of dllhost.exe:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image10.png\",alt:\"GrimResource detected\",title:\"GrimResource detected\",width:\"1440\",height:\"619\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"net-com-object-created-in-non-standard-windows-script-interpreter\",children:\".NET COM object created in non-standard Windows Script Interpreter\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The sample is using the \",(0,i.jsx)(e.a,{href:\"https://github.com/tyranid/DotNetToJScript\",rel:\"nofollow\",children:\"DotNetToJScript\"}),\" technique, which triggers another detection looking for RWX memory allocation from .NET on behalf of a Windows Script Host (WSH) script engine (Jscript or Vbscript):\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL rule will detect execution via the .NET loader:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`api where\n  not process.name : (\"cscript.exe\", \"wscript.exe\") and\n  process.code_signature.trusted == true and\n  process.code_signature.subject_name : \"Microsoft*\" and\n  process.Ext.api.name == \"VirtualAlloc\" and\n  process.Ext.api.parameters.allocation_type == \"RESERVE\" and \n  process.Ext.api.parameters.protection == \"RWX\" and\n  process.thread.Ext.call_stack_summary : (\n    /* .NET is allocating executable memory on behalf of a WSH script engine\n     * Note - this covers both .NET 2 and .NET 4 framework variants */\n    \"*|mscoree.dll|combase.dll|jscript.dll|*\",\n    \"*|mscoree.dll|combase.dll|vbscript.dll|*\",\n    \"*|mscoree.dll|combase.dll|jscript9.dll|*\",\n    \"*|mscoree.dll|combase.dll|chakra.dll|*\"\n)\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following alert shows \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\" allocating RWX memory and the \",(0,i.jsx)(e.code,{children:\"process.thread.Ext.call_stack_summary \"}),\"captures the origin of the allocation from \",(0,i.jsx)(e.code,{children:\"vbscript.dll\"}),\" to \",(0,i.jsx)(e.code,{children:\"clr.dll\"}),\" :\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image6.png\",alt:\"mmc.exe allocating RWX memory\",title:\"mmc.exe allocating RWX memory\",width:\"1440\",height:\"522\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"script-execution-via-mmc-console-file\",children:\"Script Execution via MMC Console File\"}),`\n`,(0,i.jsx)(e.p,{children:\"The two previous detections were triggered by specific implementation choices to weaponize the GrimResource method (DotNetToJS and spawning a child process). These detections can be bypassed by using more OPSEC-safe alternatives.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Other behaviors that might initially seem suspicious \\u2014 such as \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\" loading \",(0,i.jsx)(e.code,{children:\"jscript.dll\"}),\", \",(0,i.jsx)(e.code,{children:\"vbscript.dll\"}),\", and \",(0,i.jsx)(e.code,{children:\"msxml3.dll\"}),\" \\u2014 can be clarified compared to benign data. We can see that, except for \",(0,i.jsx)(e.code,{children:\"vbscript.dll\"}),\", these WSH engines are typically loaded by \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image4.png\",alt:\"Normal library load behaviors by mmc.exe\",title:\"Normal library load behaviors by mmc.exe\",width:\"1440\",height:\"451\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The core aspect of this method involves using \",(0,i.jsx)(e.a,{href:\"https://strontic.github.io/xcyclopedia/library/apds.dll-DF461ADCCD541185313F9439313D1EE1.html\",rel:\"nofollow\",children:\"apds.dll\"}),\" to execute Jscript via XSS. This behavior is evident in the mmc.exe Procmon output as a \",(0,i.jsx)(e.code,{children:\"CreateFile\"}),\" operation (\",(0,i.jsx)(e.code,{children:\"apds.dll\"}),\" is not loaded as a library):\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image9.png\",alt:\"apds.dll being invoked in the MSC StringTable\",title:\"apds.dll being invoked in the MSC StringTable\",width:\"1440\",height:\"465\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image16.png\",alt:\"Example of the successful execution of GrimResource\",title:\"Example of the successful execution of GrimResource\",width:\"1440\",height:\"693\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"We added the following detection using Elastic Defend file open events where the target file is \",(0,i.jsx)(e.code,{children:\"apds.dll\"}),\" and the \",(0,i.jsx)(e.code,{children:\"process.name\"}),\" is \",(0,i.jsx)(e.code,{children:\"mmc.exe\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL rule will detect the execution of a script from the MMC console:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id with maxspan=1m\n [process where event.action == \"start\" and\n  process.executable : \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\mmc.exe\" and process.args : \"*.msc\"]\n [file where event.action == \"open\" and file.path : \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\apds.dll\"]\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image5.png\",alt:\"Timeline showing the script execution with the MMC console\",title:\"Timeline showing the script execution with the MMC console\",width:\"1440\",height:\"453\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"windows-script-execution-via-mmc-console-file\",children:\"Windows Script Execution via MMC Console File\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Another detection and forensic artifact is the creation of a temporary HTML file in the INetCache folder, named \",(0,i.jsx)(e.code,{children:\"redirect[*] \"}),\"as a result of the APDS \",(0,i.jsx)(e.a,{href:\"https://owasp.org/www-community/attacks/xss/\",rel:\"nofollow\",children:\"XSS\"}),\" redirection:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image11.png\",alt:\"Contents of redirect.html\",title:\"Contents of redirect.html\",width:\"1238\",height:\"1038\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The following EQL correlation can be used to detect this behavior while also capturing the msc file path:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`sequence by process.entity_id with maxspan=1m\n [process where event.action == \"start\" and\n  process.executable : \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\mmc.exe\" and process.args : \"*.msc\"]\n [file where event.action in (\"creation\", \"overwrite\") and\n  process.executable :  \"?:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\mmc.exe\" and file.name : \"redirect[?]\" and \n  file.path : \"?:\\\\\\\\Users\\\\\\\\*\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\INetCache\\\\\\\\IE\\\\\\\\*\\\\\\\\redirect[?]\"]\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/grimresource/image3.png\",alt:\"Timeline detecting redirect.html\",title:\"Timeline detecting redirect.html\",width:\"1440\",height:\"498\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Alongside the provided behavior rules, the following YARA rule can be used to detect similar files:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`rule Windows_GrimResource_MMC {\n    meta:\n        author = \"Elastic Security\"\n        reference = \"https://www.elastic.co/security-labs/GrimResource\"\n        reference_sample = \"14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb\"\n        arch_context = \"x86\"\n        scan_context = \"file, memory\"\n        license = \"Elastic License v2\"\n        os = \"windows\"\n    strings:\n        $xml = \"\u003c?xml\"\n        $a = \"MMC_ConsoleFile\" \n        $b1 = \"apds.dll\" \n        $b2 = \"res://\"\n        $b3 = \"javascript:eval(\"\n        $b4 = \".loadXML(\"\n    condition:\n       $xml at 0 and $a and 2 of ($b*)\n}\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"Attackers have developed a new technique to execute arbitrary code in Microsoft Management Console using crafted MSC files. Elastic\\u2019s existing out of the box coverage shows our defense-in-depth approach is effective even against novel threats like this. Defenders should leverage our detection guidance to protect themselves and their customers from this technique before it proliferates into commodity threat groups.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"observables\",children:\"Observables\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/grimresource\",rel:\"nofollow\",children:\"available for download\"}),\" in both ECS and STIX formats.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"14bcb7196143fd2b800385e9b32cfacd837007b0face71a73b546b53310258bb\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"sccm-updater.msc\"})}),(0,i.jsx)(e.td,{children:\"Abused MSC file\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"4cb575bc114d39f8f1e66d6e7c453987639289a28cd83a7d802744cd99087fd7\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:\"N/A\"}),(0,i.jsx)(e.td,{children:\"PASTALOADER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"c1bba723f79282dceed4b8c40123c72a5dfcf4e3ff7dd48db8cb6c8772b60b88\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:\"N/A\"}),(0,i.jsx)(e.td,{children:\"Cobalt Strike payload\"})]})]})]})})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(d,t)})):d(t)}var S=x;return v(T);})();\n;return Component;"},"_id":"articles/grimresource.mdx","_raw":{"sourceFilePath":"articles/grimresource.mdx","sourceFileName":"grimresource.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/grimresource"},"type":"Article","imageUrl":"/assets/images/grimresource/grimresource.jpg","readingTime":"9 min read","series":"","url":"/grimresource","headings":[{"level":2,"title":"Overview","href":"#overview"},{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Analysis","href":"#analysis"},{"level":2,"title":"Detections","href":"#detections"},{"level":3,"title":"Suspicious Execution via Microsoft Common Console","href":"#suspicious-execution-via-microsoft-common-console"},{"level":3,"title":".NET COM object created in non-standard Windows Script Interpreter","href":"#net-com-object-created-in-non-standard-windows-script-interpreter"},{"level":3,"title":"Script Execution via MMC Console File ","href":"#script-execution-via-mmc-console-file-"},{"level":3,"title":"Windows Script Execution via MMC Console File","href":"#windows-script-execution-via-mmc-console-file"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"Observables","href":"#observables"}],"author":[{"title":"Joe Desimone","slug":"joe-desimone","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of j(e))!d.call(t,r)\u0026\u0026r!==n\u0026\u0026s(t,r,{get:()=\u003ee[r],enumerable:!(a=f(e,r))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},i(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),D=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var c=g((h,m)=\u003e{m.exports=_jsx_runtime});var X={};l(X,{default:()=\u003eF,frontmatter:()=\u003eM});var o=p(c()),M={title:\"Joe Desimone\",slug:\"joe-desimone\"};function u(t){return(0,o.jsx)(o.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/joe-desimone.mdx","_raw":{"sourceFilePath":"authors/joe-desimone.mdx","sourceFileName":"joe-desimone.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/joe-desimone"},"type":"Author","imageUrl":"","url":"/authors/joe-desimone"},{"title":"Samir Bousseaden","slug":"samir-bousseaden","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},u=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},u(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eu(s({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Samir Bousseaden\",slug:\"samir-bousseaden\"};function c(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(c,t)})):c(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/samir-bousseaden.mdx","_raw":{"sourceFilePath":"authors/samir-bousseaden.mdx","sourceFileName":"samir-bousseaden.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/samir-bousseaden"},"type":"Author","imageUrl":"","url":"/authors/samir-bousseaden"}],"category":[{"title":"Attack pattern","slug":"attack-pattern","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,c)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(c=f(n,a))||c.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(_(t)):{},s(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(o({},\"__esModule\",{value:!0}),t);var i=j((b,u)=\u003e{u.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003ek});var r=d(i()),k={title:\"Attack pattern\",slug:\"attack-pattern\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"categories/attack-pattern.mdx","_raw":{"sourceFilePath":"categories/attack-pattern.mdx","sourceFileName":"attack-pattern.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/attack-pattern"},"type":"Category","url":"/categories/attack-pattern"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"grimresource"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>