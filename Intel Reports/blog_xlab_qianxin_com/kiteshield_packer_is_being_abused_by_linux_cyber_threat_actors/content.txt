<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>Kiteshield Packer is Being Abused by Linux Cyber Threat Actors</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Kiteshield Packer is Being Abused by Linux Cyber Threat Actors">
    <meta property="og:description" content="Background


Over the past month, XLab&#x27;s CTIA(Cyber Threat Insight Analysis) System has captured a batch of suspicious ELF files with low detection rates on VT and very similar characteristics. Eager to delve into this, we commenced reverse engineering, facing a series of anti-debugging techniques, string obfuscation, XOR encryption, RC4">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/05/shiled_hacker-1.webp">
    <meta property="article:published_time" content="2024-05-28T13:16:29.000Z">
    <meta property="article:modified_time" content="2024-06-06T01:52:36.000Z">
    <meta property="article:tag" content="Packer">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Kiteshield Packer is Being Abused by Linux Cyber Threat Actors">
    <meta name="twitter:description" content="Background


Over the past month, XLab&#x27;s CTIA(Cyber Threat Insight Analysis) System has captured a batch of suspicious ELF files with low detection rates on VT and very similar characteristics. Eager to delve into this, we commenced reverse engineering, facing a series of anti-debugging techniques, string obfuscation, XOR encryption, RC4">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/05/shiled_hacker-1.webp">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Packer, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1792">
    <meta property="og:image:height" content="1024">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "Kiteshield Packer is Being Abused by Linux Cyber Threat Actors",
    "url": "https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/",
    "datePublished": "2024-05-28T13:16:29.000Z",
    "dateModified": "2024-06-06T01:52:36.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/05/shiled_hacker-1.webp",
        "width": 1792,
        "height": 1024
    },
    "keywords": "Packer, EN",
    "description": "Background\n\n\nOver the past month, XLab&#x27;s CTIA(Cyber Threat Insight Analysis) System has captured a batch of suspicious ELF files with low detection rates on VT and very similar characteristics. Eager to delve into this, we commenced reverse engineering, facing a series of anti-debugging techniques, string obfuscation, XOR encryption, RC4 encryption, and more. Honestly, this process was quite exhilarating for us; the more obstacles we encountered, the more exceptional the samples seemed, making u",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-packer tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-packer tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/packer/">Packer</a>
                </span>
        </div>

        <h1 class="article-title">Kiteshield Packer is Being Abused by Linux Cyber Threat Actors</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/wanghao/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/10/T04KK8X9DRR-U05JGJWNWUV-a9b7b79ecd7e-512.png" alt="Wang Hao" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/wanghao/">Wang Hao</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-05-28">2024年5月28日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 8 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/05/shiled_hacker-1.webp"
                    alt="Kiteshield Packer is Being Abused by Linux Cyber Threat Actors"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <h1 id="background">Background</h1>
<p>Over the past month, <code>XLab's CTIA(Cyber Threat Insight Analysis) System</code> has captured a batch of suspicious ELF files with low detection rates on VT and very similar characteristics. Eager to delve into this, we commenced reverse engineering, facing a series of <code>anti-debugging techniques, string obfuscation, XOR encryption, RC4 encryption</code>, and more. Honestly, this process was quite exhilarating for us; the more obstacles we encountered, the more exceptional the samples seemed, making us feel as though we had caught a significant target.</p>
<p>However, the outcome was disappointing. The low detection rates of these samples were due to the use of Kiteshield packing. Ultimately, we discovered that these samples were known threats belonging to the <strong>APT group Winnti, the cybercrime group DarkMosquito, and an unknown script kiddie</strong>.</p>
<p>Even though we did not uncover any new threats from this batch of samples, the low detection rate itself is a crucial finding. It is evident that cybercrime organizations of varying levels are starting to use Kiteshield for evasion, and security vendors currently lack sufficient awareness of this packer. Therefore, we believe it is necessary to release this article to share our findings with the community and improve antivirus engines' capabilities to handle Kiteshield packer.</p>
<h1 id="what-is-kiteshield-packer">What is Kiteshield Packer?</h1>
<p>Kiteshield is a packer/protector for x86-64 ELF binaries on Linux. Kiteshield wraps ELF binaries with multiple layers of encryption and injects them with loader code that decrypts, maps, and executes the packed binary entirely in userspace. A ptrace-based runtime engine ensures that only functions in the current call stack are decrypted at any given time and additionally implements a variety of anti-debugging techniques in order to make packed binaries as hard to reverse-engineer as possible. Both single and multithreaded binaries are supported.</p>
<p>The following sections will focus on the characteristics of binaries packed with Kiteshield and how to unpack them. For more technical details on Kiteshield, readers can refer to its <a href="https://github.com/GunshipPenguin/kiteshield?ref=blog.xlab.qianxin.com">source code on GitHub</a>.</p>
<h2 id="first-glimpse-of-kiteshield">First glimpse of Kiteshield</h2>
<p>ELF files packed with Kiteshield contain only two segments: the first segment is the Loader section, and the second is the Payload section.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_segment.png" alt="shield_segment.png" loading="lazy"></p>
<p>Their layout in the ELF file is as follows: the Loader section uses RC4 to decrypt the Payload.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/file_layout.PNG" alt="file_layout.PNG" loading="lazy"><br>
The initial <code>rc4_key</code> is located between the end of the Program Table Header and the Entry Point, with a length of 16 bytes.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_rc4.png" alt="shield_rc4.png" loading="lazy"></p>
<p>The <code>rc4_key</code> is randomly generated. For example, in <code>909c015d5602513a770508fa0b87bc6f</code>, the initial <code>rc4_key</code> would be <code>85 7F 6B A4 DD 39 5A A1 3E A7 A3 A8 11 77 E0 8E</code>.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/example.PNG" alt="example.PNG" loading="lazy"></p>
<p>The <code>rc4_key</code> cannot be used directly. First, it must be XORed with the loader code. This method ensures that the loader code has not been modified; otherwise, the correct RC4 key cannot be obtained. Afterward, the RC4 decryption takes place, and the decrypted payload is mapped into memory, followed by a jump to the new entry point.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_pattern.png" alt="shield_pattern.png" loading="lazy"></p>
<p>The code that jumps to the new entry point, <code>jump to payload section</code>, originates from the following assembly snippet in the source code <code>loader\entry.S</code>. This snippet is fixed and unchanging, serving as a characteristic signature of Kiteshield.</p>
<pre><code class="language-assembly">xor %edx, %edx
  xor %eax, %eax
  xor %ecx, %ecx
  xor %esi, %esi
  xor %edi, %edi
  xor %ebp, %ebp
  xor %r8d, %r8d
  xor %r9d, %r9d
  xor %r10d, %r10d
  xor %r11d, %r11d
  xor %r12d, %r12d
  xor %r13d, %r13d
  xor %r14d, %r14d
  xor %r15d, %r15d
  pop %rbx
  jmp *%rbx
</code></pre>
<h2 id="tricks-in-the-loader">Tricks in the Loader</h2>
<h3 id="0x1-anti-debugging">0x1: Anti-Debugging</h3>
<p>Kiteshield employs four anti-debugging techniques:</p>
<ol>
<li><strong>antidebug_proc_check_traced</strong>: Checks <code>/proc/&lt;pid&gt;/status</code> for the presence of the <code>TracerPid</code> field.</li>
<li><strong>antidebug_prctl_set_nondumpable</strong>: Sets the process's dumpable flag to 0, preventing <code>ptrace</code> from attaching or dumping.</li>
<li><strong>antidebug_rlimit_set_zero_core</strong>: Sets environment variables <code>LD_PRELOAD</code>, <code>LD_AUDIT</code>, and <code>LD_DEBUG</code> to empty values.</li>
<li><strong>antidebug_rlimit_set_zero_core</strong>: Sets the <code>RLIMIT_CORE</code> (maximum core dump size) to 0 using <code>setrlimit</code>.</li>
</ol>
<h3 id="0x2-string-obfuscation">0x2: String Obfuscation</h3>
<p>Kiteshield uses <code>DEOBF_STR</code> to implement single-byte XOR encryption, with the key hardcoded as <code>0x83</code>.</p>
<pre><code class="language-c">#define DEOBF_STR(str)                                                         \
  ({ volatile char cleartext[sizeof(str)];                                     \
     for (int i = 0; i &lt; sizeof(str); i++) {                                   \
       cleartext[i] = str[i] ^ ((0x83 + i) % 256);                             \
     };                                                                        \
     cleartext[sizeof(cleartext) - 1] = '\\0';                                 \
     (char *) cleartext; })
</code></pre>
<p>The following are the encrypted strings in the Loader, primarily used for anti-debugging.</p>
<pre><code class="language-c">STRINGS = {
    // loader/include/anti_debug.h
    'PROC_STATUS_FMT': '/proc/%d/status',
    'TRACERPID_PROC_FIELD': 'TracerPid:',

    // loader/runtime.c
    'PROC_STAT_FMT': '/proc/%d/stat',

    // loader/anti_debug.c
    'LD_PRELOAD': 'LD_PRELOAD',
    'LD_AUDIT': 'LD_AUDIT',
    'LD_DEBUG': 'LD_DEBUG',

    // loader/string.c
    'HEX_DIGITS': '0123456789abcdef'
}
</code></pre>
<p>In Kiteshield-packed files, the following code snippets, used for decrypting strings, are frequently encountered.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_string.png" alt="shield_string.png" loading="lazy"></p>
<p>Based on the logic of <code>DEOBF_STR</code>, here's the corresponding Python code to achieve decryption. The string at address <code>0x2019E0</code> is decrypted to <code>/proc/%d/status</code>.</p>
<pre><code class="language-python">import idc
enctext = idc.get_bytes(0x00000000002019E0, 15)
plaintext = bytearray()
for idx, value in enumerate(enctext):
    plaintext.append(value ^ (0x83 + idx))
    
print(plaintext))

</code></pre>
<h1 id="detection-unpacking">Detection &amp; Unpacking</h1>
<p>Based on the mentioned entry points and encrypted string characteristics, we implemented the following YARA rule and Python scripts for detection and unpacking.</p>
<h2 id="yara-rule">Yara rule</h2>
<pre><code>import "elf"
rule kiteshield{
    
    strings: 
        $loader_jmp = {31 D2 31 C0 31 C9 31 F6 31 FF 31 ED 45 31 C0 45 31 C9 45 31 D2 45 31 DB 45 31 E4 45 31 ED 45 31 F6 45 31 FF 5B FF E3}
        // "/proc/%d/status"
        $loader_s1 = {ac f4 f7 e9 e4 a7 ac ee a4 ff f9 ef fb e5 e2}
        // "TracerPid:"
        $loader_s2 = {d7 f6 e4 e5 e2 fa d9 e3 ef b6}
        // "/proc/%d/stat"
        $loader_s3 = {ac f4 f7 e9 e4 a7 ac ee a4 ff f9 ef fb}
        // "LD_PRELOAD"
        $loader_s4 = {cf c0 da d6 d5 cd c5 c5 ca c8}
        // "LD_AUDIT"
        $loader_s5 = {cf c0 da c7 d2 cc c0 de}
        // "LD_DEBUG"
        $loader_s6 = {cf c0 da c2 c2 ca dc cd}
        // "0123456789abcdef"
        $loader_s7 = {b3 b5 b7 b5 b3 bd bf bd b3 b5 ec ec ec f4 f4 f4}

    condition:
	    $loader_jmp and all of ($loader_s*) and elf.type==elf.ET_EXEC and elf.machine == elf.EM_X86_64
}
</code></pre>
<h2 id="unpacking-script">Unpacking Script</h2>
<pre><code>import struct
import re
import lief
from Crypto.Cipher import ARC4

rt_info_pattern = rb".\x00\x00\x00.\x00\x00\x00.{8}[\x08-\x0a]\x09\x0a\x0b"
def rt_info_parser(data):
    nfuncs, ntraps = struct.unpack("&lt;II", data[:8])
    # print(ntraps, nfuncs)
    rt_info_size = 17 * ntraps + 32 * nfuncs
    res = bytearray()
    for i, c in enumerate(data[8:8+rt_info_size]):
        res.append((c^i)&amp;0xff)
    traps_start = res[:]
    trap_list = []
    for i in range(ntraps):
        traps = {}
        addr, ty_type, value, fcn_i = struct.unpack("&lt;QIBI",traps_start[17*i:17*i+17])
        # print(hex(addr), ty_type, value, fcn_i)
        traps['addr'] = addr
        traps['type'] = ty_type
        traps['value'] = value
        traps['fcn_i'] = fcn_i
        trap_list.append(traps)
    funcs_start = res[17*ntraps:]
    func_list = []
    for i in range(nfuncs):
        funcs = {}
        id, start_addr, length, rc4_key = struct.unpack("&lt;IQI16s", funcs_start[i*32:i*32+32])
        # print(id, hex(start_addr), length, rc4_key.hex())
        funcs['id'] = id
        funcs['start_addr'] = start_addr
        funcs['len'] = length
        funcs['rc4_key'] = rc4_key
        func_list.append(funcs)
    return trap_list, func_list

def unpack(fn, out, runtime=False):
    with open(fn, "rb") as f:
        data = f.read()
    binary = lief.parse(data)
    elf_header = binary.header

    if elf_header.numberof_segments == 2:
        loader_seg = binary.segments[0]
        payload_seg = binary.segments[1]
        payload_offset, payload_size = payload_seg.file_offset, payload_seg.physical_size
        key_offset = elf_header.program_header_offset + elf_header.program_header_size * 2
        loader_offset, loader_size = key_offset+16, loader_seg.physical_size-key_offset-16
        key = bytearray(data[key_offset:key_offset+16])
        print(key.hex(" "))
        payload = data[payload_offset:payload_offset+payload_size]
        loader = data[loader_offset:loader_offset+loader_size]
        for i, c in enumerate(loader):
            key[i%len(key)] ^= c
        print(key.hex(" "), hex(loader_size), hex(payload_size))
        rc4 = ARC4.new(key)
        final = rc4.decrypt(payload)
        with open(out, "wb") as f:
            f.write(final)
        if runtime:
            match = re.search(rt_info_pattern, loader, re.DOTALL)
            if match:
                rt_info_offset = match.start()
                trap_list, func_list = rt_info_parser(loader[rt_info_offset:])
                with open(out, "rb") as f:
                    newdata = f.read()
                bin = lief.parse(newdata)
                elf_header = bin.header
                newdata = bytearray(newdata)
                if elf_header.file_type.value == 3:
                    base = 0x800000000
                elif elf_header.file_type.value == 2:
                    base = 0
                for i in func_list:
                    offset = i['start_addr'] - base
                    rc4 = ARC4.new(i['rc4_key'])
                    newdata[offset:offset+i['len']] = rc4.decrypt(newdata[offset:offset+i['len']])
                for i in trap_list:
                    offset = i['addr'] - base
                    newdata[offset] = i['value']
                with open(out+".fix", "wb") as f:
                    f.write(newdata)
                print("fixed")

unpack(r"bin.elf","bin.elf.unpack", True)
</code></pre>
<h1 id="cases">Cases</h1>
<p>Currently, Kiteshield's evasion capabilities are highly effective, with most mainstream antivirus software unable to unpack it. The only engine that identifies it provides a generic verdict of "Virus.Generic".</p>
<table>
<thead>
<tr>
<th>MD5</th>
<th>First Seen</th>
<th>Detection</th>
<th>Family</th>
</tr>
</thead>
<tbody>
<tr>
<td>2c80808b38140f857dc8b2b106764dd8</td>
<td>2023-12-19</td>
<td>1/67</td>
<td>amdc6766</td>
</tr>
<tr>
<td>f5623e4753f4742d388276eaee72dea6</td>
<td>2024-05-18</td>
<td>1/67</td>
<td>winnti</td>
</tr>
<tr>
<td>4afedf6fbf4ba95bbecc865d45479eaf</td>
<td>2024-05-23</td>
<td>0/67</td>
<td>gafgyt</td>
</tr>
</tbody>
</table>
<p>Below is the comparison of detection rates before and after unpacking Kiteshield-packed ELF files</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_vt.png" alt="shield_vt.png" loading="lazy"></p>
<h2 id="0x1-apt-level-winnti">0x1: APT Level: Winnti</h2>
<p><code>f5623e4753f4742d388276eaee72dea6</code> after unpacking has an MD5 hash of <code>951fe6ce076aab5ca94da020a14a8e1c</code> and a detection rate of <strong>18/67</strong>. Most antivirus software correctly identifies it as Winnti's <a href="https://medium.com/chronicle-blog/winnti-more-than-just-windows-and-gates-e4f03436031a?ref=blog.xlab.qianxin.com">userland rootkit</a>.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_winnti.png" alt="shield_winnti.png" loading="lazy"></p>
<h2 id="0x2-cybercrime-group-level-darkmosquito-amdc6766">0x2: Cybercrime Group Level: DarkMosquito (amdc6766)</h2>
<p><code>2c80808b38140f857dc8b2b106764dd8</code> after unpacking has an MD5 hash of <code>a42249e86867526c09d78c79ae26191d</code> and a detection rate of  <strong>0/67</strong>. It belongs to the <strong>cybercrime group amdc6766</strong>, exposed by Sangfor, and functions as a dropper, originating from <code>s.jpg</code>.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_sjpg.png" alt="shield_sjpg.png" loading="lazy"></p>
<p>The fact that it still has zero detections after unpacking was somewhat unexpected for us. It seems that the amdc6766 group has not yet entered the radar of mainstream antivirus software. Here, we directly quote <a href="https://www.freebuf.com/articles/network/401262.html?ref=blog.xlab.qianxin.com">Sangfor's report conclusion</a>.</p>
<blockquote>
<p>amdc6766 cybercrime grouphas long used methods such as fake pages, supply chain poisoning, and public web vulnerabilities to target software commonly used by IT personnel, such as Navicat, Xshell, LNMP, AMH, OneinStack, and BT. After selecting high-value targets, they implant dynamic link libraries, rootkits, malicious crond services, and other persistent means to control the host for long-term and launch various cybercrime activities.</p>
</blockquote>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_amdc6766.png" alt="shield_amdc6766.png" loading="lazy"></p>
<h2 id="0x3-script-kiddie-level-gafgyt">0x3: Script Kiddie Level: Gafgyt</h2>
<p><code>4afedf6fbf4ba95bbecc865d45479eaf</code> after unpacking has an MD5 hash of <code>5c9887c51a0f633e3d2af54f788da525</code> and a detection rate of 23/66. It is a typical Gafgyt botnet.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/05/shield_gaf.png" alt="shield_gaf.png" loading="lazy"></p>
<h1 id="conclusion">Conclusion</h1>
<p>In recent years, an increasing number of cybercrime actors have turned their attention to the Linux platform, resulting in a surge of Linux malwares. It is evident that Linux malwares are currently experiencing rapid growth. From a security analysis perspective, the countermeasures employed by Linux viruses are relatively "immature" compared to the sophisticated techniques seen in Windows malware.</p>
<p>However, with increased investment from both attackers and defenders, it is foreseeable that Linux malware will evolve to incorporate a variety of advanced anti-analysis techniques and diverse packing methods, similar to those found on the Windows platform. Kiteshield is just the beginning of this trend.Stay Vigilant, Stay Safe.</p>
<h1 id="ioc">IOC</h1>
<h2 id="md5">MD5</h2>
<pre><code>Winnti
f5623e4753f4742d388276eaee72dea6
951fe6ce076aab5ca94da020a14a8e1c


Amdc6766
4d79e1a1027e7713180102014fcfb3bf

2c80808b38140f857dc8b2b106764dd8
a42249e86867526c09d78c79ae26191d

909c015d5602513a770508fa0b87bc6f
57f7ffaa0333245f74e4ab68d708e14e
5ea33d0655cb5797183746c6a46df2e9
7671585e770cf0c856b79855e6bdca2a


Gafgyt
4afedf6fbf4ba95bbecc865d45479eaf
5c9887c51a0f633e3d2af54f788da525
</code></pre>
<h1 id="reference">Reference</h1>
<p><a href="https://www.antiy.com/response/DarkMozzie.html?ref=blog.xlab.qianxin.com">https://www.antiy.com/response/DarkMozzie.html</a><br>
<a href="https://www.freebuf.com/articles/network/401262.html?ref=blog.xlab.qianxin.com">https://www.freebuf.com/articles/network/401262.html</a><br>
<a href="https://www.freebuf.com/articles/network/401262.html?ref=blog.xlab.qianxin.com">https://www.freebuf.com/articles/network/401262.html</a></p>

    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/kiteshield_packer_is_being_abused_by_linux_cyber_threat_actors/";  
                this.page.identifier = "ghost-6654700cfd1b1b0001083ea1"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
