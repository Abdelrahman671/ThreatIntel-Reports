<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">

	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1">
	    <link rel="profile" href="https://gmpg.org/xfn/11" />
	    <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />

	<!-- This site is optimized with the Yoast SEO plugin v23.6 - https://yoast.com/wordpress/plugins/seo/ -->
	<title>Exploit Kits vs. Google Chrome - Avast Threat Labs</title>
	<meta name="description" content="In October 2021, we discovered that the Magnitude exploit kit was testing out a Chromium exploit chain in the wild. About a month later, we found that the Underminer exploit kit followed suit and developed an exploit for the same Chromium vulnerability. In this blog post, we are taking a closer look at the exploits as well as analyzing the current state of exploit kits." />
	<link rel="canonical" href="https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="Exploit Kits vs. Google Chrome - Avast Threat Labs" />
	<meta property="og:description" content="In October 2021, we discovered that the Magnitude exploit kit was testing out a Chromium exploit chain in the wild. About a month later, we found that the Underminer exploit kit followed suit and developed an exploit for the same Chromium vulnerability. In this blog post, we are taking a closer look at the exploits as well as analyzing the current state of exploit kits." />
	<meta property="og:url" content="https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/" />
	<meta property="og:site_name" content="Avast Threat Labs" />
	<meta property="article:published_time" content="2022-01-12T16:37:12+00:00" />
	<meta property="article:modified_time" content="2022-01-12T16:37:15+00:00" />
	<meta property="og:image" content="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-scaled.jpg" />
	<meta property="og:image:width" content="2560" />
	<meta property="og:image:height" content="1126" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Jan Vojtěšek" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@AvastThreatLabs" />
	<meta name="twitter:site" content="@AvastThreatLabs" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Jan Vojtěšek" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="30 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#article","isPartOf":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/"},"author":{"name":"Jan Vojtěšek","@id":"https://decoded.avast.io/#/schema/person/8419161d94556dbf3e643bfd7bc46ab4"},"headline":"Exploit Kits vs. Google Chrome","datePublished":"2022-01-12T16:37:12+00:00","dateModified":"2022-01-12T16:37:15+00:00","mainEntityOfPage":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/"},"wordCount":5868,"publisher":{"@id":"https://decoded.avast.io/#organization"},"image":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-scaled.jpg","keywords":["CVE-2021-21224","CVE-2021-31956","exploit","exploit kit","Magnitude","Underminer"],"articleSection":["PC"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/","url":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/","name":"Exploit Kits vs. Google Chrome - Avast Threat Labs","isPartOf":{"@id":"https://decoded.avast.io/#website"},"primaryImageOfPage":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#primaryimage"},"image":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-scaled.jpg","datePublished":"2022-01-12T16:37:12+00:00","dateModified":"2022-01-12T16:37:15+00:00","description":"In October 2021, we discovered that the Magnitude exploit kit was testing out a Chromium exploit chain in the wild. About a month later, we found that the Underminer exploit kit followed suit and developed an exploit for the same Chromium vulnerability. In this blog post, we are taking a closer look at the exploits as well as analyzing the current state of exploit kits.","breadcrumb":{"@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#primaryimage","url":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-scaled.jpg","contentUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-scaled.jpg","width":2560,"height":1126},{"@type":"BreadcrumbList","@id":"https://decoded.avast.io/janvojtesek/exploit-kits-vs-google-chrome/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://decoded.avast.io/"},{"@type":"ListItem","position":2,"name":"Exploit Kits vs. Google Chrome"}]},{"@type":"WebSite","@id":"https://decoded.avast.io/#website","url":"https://decoded.avast.io/","name":"Avast Threat Labs","description":"Uncovering Tactics, Techniques and Procedures of malicious actors","publisher":{"@id":"https://decoded.avast.io/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://decoded.avast.io/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://decoded.avast.io/#organization","name":"Avast","url":"https://decoded.avast.io/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/logo/image/","url":"","contentUrl":"","caption":"Avast"},"image":{"@id":"https://decoded.avast.io/#/schema/logo/image/"},"sameAs":["https://x.com/AvastThreatLabs"]},{"@type":"Person","@id":"https://decoded.avast.io/#/schema/person/8419161d94556dbf3e643bfd7bc46ab4","name":"Jan Vojtěšek","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/5cebfa2c9881aaefbfebdb3a9e80ca1f?s=96&d=mm&r=g","contentUrl":"https://secure.gravatar.com/avatar/5cebfa2c9881aaefbfebdb3a9e80ca1f?s=96&d=mm&r=g","caption":"Jan Vojtěšek"},"url":"https://decoded.avast.io/author/janvojtesek/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel='dns-prefetch' href='//decoded.avast.io' />
<link rel='dns-prefetch' href='//kit.fontawesome.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Feed" href="https://decoded.avast.io/feed/" />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Comments Feed" href="https://decoded.avast.io/comments/feed/" />
		<!-- This site uses the Google Analytics by MonsterInsights plugin v9.1.1 - Using Analytics tracking - https://www.monsterinsights.com/ -->
							<script src="//www.googletagmanager.com/gtag/js?id=G-GSVBRGE9D6"  data-cfasync="false" data-wpfc-render="false" type="text/javascript" async></script>
			<script data-cfasync="false" data-wpfc-render="false" type="text/javascript">
				var mi_version = '9.1.1';
				var mi_track_user = true;
				var mi_no_track_reason = '';
								var MonsterInsightsDefaultLocations = {"page_location":"https:\/\/decoded.avast.io\/janvojtesek\/exploit-kits-vs-google-chrome\/"};
				if ( typeof MonsterInsightsPrivacyGuardFilter === 'function' ) {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsPrivacyGuardFilter( MonsterInsightsExcludeQuery ) : MonsterInsightsPrivacyGuardFilter( MonsterInsightsDefaultLocations );
				} else {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsExcludeQuery : MonsterInsightsDefaultLocations;
				}

								var disableStrs = [
										'ga-disable-G-GSVBRGE9D6',
									];

				/* Function to detect opted out users */
				function __gtagTrackerIsOptedOut() {
					for (var index = 0; index < disableStrs.length; index++) {
						if (document.cookie.indexOf(disableStrs[index] + '=true') > -1) {
							return true;
						}
					}

					return false;
				}

				/* Disable tracking if the opt-out cookie exists. */
				if (__gtagTrackerIsOptedOut()) {
					for (var index = 0; index < disableStrs.length; index++) {
						window[disableStrs[index]] = true;
					}
				}

				/* Opt-out function */
				function __gtagTrackerOptout() {
					for (var index = 0; index < disableStrs.length; index++) {
						document.cookie = disableStrs[index] + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
						window[disableStrs[index]] = true;
					}
				}

				if ('undefined' === typeof gaOptout) {
					function gaOptout() {
						__gtagTrackerOptout();
					}
				}
								window.dataLayer = window.dataLayer || [];

				window.MonsterInsightsDualTracker = {
					helpers: {},
					trackers: {},
				};
				if (mi_track_user) {
					function __gtagDataLayer() {
						dataLayer.push(arguments);
					}

					function __gtagTracker(type, name, parameters) {
						if (!parameters) {
							parameters = {};
						}

						if (parameters.send_to) {
							__gtagDataLayer.apply(null, arguments);
							return;
						}

						if (type === 'event') {
														parameters.send_to = monsterinsights_frontend.v4_id;
							var hookName = name;
							if (typeof parameters['event_category'] !== 'undefined') {
								hookName = parameters['event_category'] + ':' + name;
							}

							if (typeof MonsterInsightsDualTracker.trackers[hookName] !== 'undefined') {
								MonsterInsightsDualTracker.trackers[hookName](parameters);
							} else {
								__gtagDataLayer('event', name, parameters);
							}
							
						} else {
							__gtagDataLayer.apply(null, arguments);
						}
					}

					__gtagTracker('js', new Date());
					__gtagTracker('set', {
						'developer_id.dZGIzZG': true,
											});
					if ( MonsterInsightsLocations.page_location ) {
						__gtagTracker('set', MonsterInsightsLocations);
					}
										__gtagTracker('config', 'G-GSVBRGE9D6', {"forceSSL":"true","link_attribution":"true"} );
															window.gtag = __gtagTracker;										(function () {
						/* https://developers.google.com/analytics/devguides/collection/analyticsjs/ */
						/* ga and __gaTracker compatibility shim. */
						var noopfn = function () {
							return null;
						};
						var newtracker = function () {
							return new Tracker();
						};
						var Tracker = function () {
							return null;
						};
						var p = Tracker.prototype;
						p.get = noopfn;
						p.set = noopfn;
						p.send = function () {
							var args = Array.prototype.slice.call(arguments);
							args.unshift('send');
							__gaTracker.apply(null, args);
						};
						var __gaTracker = function () {
							var len = arguments.length;
							if (len === 0) {
								return;
							}
							var f = arguments[len - 1];
							if (typeof f !== 'object' || f === null || typeof f.hitCallback !== 'function') {
								if ('send' === arguments[0]) {
									var hitConverted, hitObject = false, action;
									if ('event' === arguments[1]) {
										if ('undefined' !== typeof arguments[3]) {
											hitObject = {
												'eventAction': arguments[3],
												'eventCategory': arguments[2],
												'eventLabel': arguments[4],
												'value': arguments[5] ? arguments[5] : 1,
											}
										}
									}
									if ('pageview' === arguments[1]) {
										if ('undefined' !== typeof arguments[2]) {
											hitObject = {
												'eventAction': 'page_view',
												'page_path': arguments[2],
											}
										}
									}
									if (typeof arguments[2] === 'object') {
										hitObject = arguments[2];
									}
									if (typeof arguments[5] === 'object') {
										Object.assign(hitObject, arguments[5]);
									}
									if ('undefined' !== typeof arguments[1].hitType) {
										hitObject = arguments[1];
										if ('pageview' === hitObject.hitType) {
											hitObject.eventAction = 'page_view';
										}
									}
									if (hitObject) {
										action = 'timing' === arguments[1].hitType ? 'timing_complete' : hitObject.eventAction;
										hitConverted = mapArgs(hitObject);
										__gtagTracker('event', action, hitConverted);
									}
								}
								return;
							}

							function mapArgs(args) {
								var arg, hit = {};
								var gaMap = {
									'eventCategory': 'event_category',
									'eventAction': 'event_action',
									'eventLabel': 'event_label',
									'eventValue': 'event_value',
									'nonInteraction': 'non_interaction',
									'timingCategory': 'event_category',
									'timingVar': 'name',
									'timingValue': 'value',
									'timingLabel': 'event_label',
									'page': 'page_path',
									'location': 'page_location',
									'title': 'page_title',
									'referrer' : 'page_referrer',
								};
								for (arg in args) {
																		if (!(!args.hasOwnProperty(arg) || !gaMap.hasOwnProperty(arg))) {
										hit[gaMap[arg]] = args[arg];
									} else {
										hit[arg] = args[arg];
									}
								}
								return hit;
							}

							try {
								f.hitCallback();
							} catch (ex) {
							}
						};
						__gaTracker.create = newtracker;
						__gaTracker.getByName = newtracker;
						__gaTracker.getAll = function () {
							return [];
						};
						__gaTracker.remove = noopfn;
						__gaTracker.loaded = true;
						window['__gaTracker'] = __gaTracker;
					})();
									} else {
										console.log("");
					(function () {
						function __gtagTracker() {
							return null;
						}

						window['__gtagTracker'] = __gtagTracker;
						window['gtag'] = __gtagTracker;
					})();
									}
			</script>
				<!-- / Google Analytics by MonsterInsights -->
		<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/decoded.avast.io\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.6.2"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://decoded.avast.io/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='syntax-highlighting-code-block-theme-css' href='https://decoded.avast.io/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.5.0' type='text/css' media='all' />
<style id='syntax-highlighting-code-block-inline-css' type='text/css'>
.wp-block-code {
	border: 0;
	padding: 0;
	-webkit-text-size-adjust: 100%;
	text-size-adjust: 100%;
}

.wp-block-code > span {
	display: block;
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}

.hljs > mark.shcb-loc { background-color: #ddf6ff; }
</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--johannes-acc: #ff7900;--wp--preset--color--johannes-meta: #ffffff;--wp--preset--color--johannes-bg: #1c1c1c;--wp--preset--color--johannes-bg-alt-1: #252525;--wp--preset--color--johannes-bg-alt-2: #333333;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 12.8px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 40px;--wp--preset--font-size--x-large: 42px;--wp--preset--font-size--normal: 16px;--wp--preset--font-size--huge: 52px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='johannes-main-css' href='https://decoded.avast.io/wp-content/themes/johannes/assets/css/min.css?ver=1.1.3' type='text/css' media='all' />
<style id='johannes-main-inline-css' type='text/css'>
:root {--color_header_top_bg: #424851;--color_header_top_txt: #989da2;--color_header_top_acc: #ffffff;--color_header_middle_bg: #2d364c;--color_header_middle_txt: #ffffff;--color_header_middle_acc: #ff8000;--color_header_middle_bg_multi: #424851;--color_header_bottom_bg: #ffffff;--color_header_bottom_txt: #424851;--color_header_bottom_acc: #f13b3b;--color_header_sticky_bg: ;--color_header_sticky_txt: ;--color_header_sticky_acc: ;--color_bg: #1c1c1c;--color_bg_dark: #1b1b1b;--color_h: #ffffff;--color_txt: #ffffff;--color_acc: #ff7900;--color_meta: #ffffff;--color_bg_alt_1: #252525;--color_bg_alt_2: #333333;--color_footer_bg: #ffffff;--color_footer_txt: #424851;--color_footer_acc: #f13b3b;--color_footer_meta: #989da2;--color_dark_txt: #1c1c1c;--color_button_txt: #fff;--color_button_hover: #1c1c1c;--color_border: #444;--color_border_light: #7d7d7d;--color_category_events: #ffffff;--color_category_events_dark: #b3b3b3;--color_category_events_light: #ffffff;--color_category_iot: #37eb34;--color_category_iot_dark: #27a525;--color_category_iot_light: #73f171;--color_category_mobile: #066dce;--color_category_mobile_dark: #054d91;--color_category_mobile_light: #5199dd;--color_category_network: #d32b47;--color_category_network_dark: #941f32;--color_category_network_light: #e16b7f;--color_category_other-research: #e5eb34;--color_category_other-research_dark: #a1a525;--color_category_other-research_light: #edf171;--color_category_pc: #f87934;--color_category_pc_dark: #ae5525;--color_category_pc_light: #fba271;--color_category_reports: #858585;--color_category_reports_dark: #5e5e5e;--color_category_reports_light: #aaaaaa;--color_category_uncategorized: #ffffff;--color_category_uncategorized_dark: #b3b3b3;--color_category_uncategorized_light: #ffffff;}.category-pill.johannes-layout-g .entry-category a.category-events {background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));border-bottom: solid 2px var(--color_category_events_light);border-top: solid 2px var(--color_category_events_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-events .entry-title a {border-left: 3px solid var(--color_category_events);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-events:hover .entry-title a,.widget_categories li.category-events a {color: var(--color_category_events_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-events,.header-layout-11 .slot-r>nav>ul>li.category-events,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events,.widget_categories li.category-events a {border: 2px solid var(--color_category_events_light);background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-events:hover,.header-layout-11 .slot-r>nav>ul>li.category-events:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events:hover,.widget_categories li.category-events a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_events_light);}.category-pill.johannes-layout-g .entry-category a.category-iot {background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));border-bottom: solid 2px var(--color_category_iot_light);border-top: solid 2px var(--color_category_iot_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-iot .entry-title a {border-left: 3px solid var(--color_category_iot);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-iot:hover .entry-title a,.widget_categories li.category-iot a {color: var(--color_category_iot_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-iot,.header-layout-11 .slot-r>nav>ul>li.category-iot,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot,.widget_categories li.category-iot a {border: 2px solid var(--color_category_iot_light);background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot:hover,.widget_categories li.category-iot a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_iot_light);}.category-pill.johannes-layout-g .entry-category a.category-mobile {background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));border-bottom: solid 2px var(--color_category_mobile_light);border-top: solid 2px var(--color_category_mobile_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-mobile .entry-title a {border-left: 3px solid var(--color_category_mobile);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-mobile:hover .entry-title a,.widget_categories li.category-mobile a {color: var(--color_category_mobile_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile,.header-layout-11 .slot-r>nav>ul>li.category-mobile,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile,.widget_categories li.category-mobile a {border: 2px solid var(--color_category_mobile_light);background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile:hover,.widget_categories li.category-mobile a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_mobile_light);}.category-pill.johannes-layout-g .entry-category a.category-network {background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));border-bottom: solid 2px var(--color_category_network_light);border-top: solid 2px var(--color_category_network_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-network .entry-title a {border-left: 3px solid var(--color_category_network);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-network:hover .entry-title a,.widget_categories li.category-network a {color: var(--color_category_network_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-network,.header-layout-11 .slot-r>nav>ul>li.category-network,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network,.widget_categories li.category-network a {border: 2px solid var(--color_category_network_light);background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-network:hover,.header-layout-11 .slot-r>nav>ul>li.category-network:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network:hover,.widget_categories li.category-network a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_network_light);}.category-pill.johannes-layout-g .entry-category a.category-other-research {background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));border-bottom: solid 2px var(--color_category_other-research_light);border-top: solid 2px var(--color_category_other-research_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-other-research .entry-title a {border-left: 3px solid var(--color_category_other-research);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-other-research:hover .entry-title a,.widget_categories li.category-other-research a {color: var(--color_category_other-research_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research,.header-layout-11 .slot-r>nav>ul>li.category-other-research,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research,.widget_categories li.category-other-research a {border: 2px solid var(--color_category_other-research_light);background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research:hover,.widget_categories li.category-other-research a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_other-research_light);}.category-pill.johannes-layout-g .entry-category a.category-pc {background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));border-bottom: solid 2px var(--color_category_pc_light);border-top: solid 2px var(--color_category_pc_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-pc .entry-title a {border-left: 3px solid var(--color_category_pc);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-pc:hover .entry-title a,.widget_categories li.category-pc a {color: var(--color_category_pc_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-pc,.header-layout-11 .slot-r>nav>ul>li.category-pc,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc,.widget_categories li.category-pc a {border: 2px solid var(--color_category_pc_light);background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc:hover,.widget_categories li.category-pc a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_pc_light);}.category-pill.johannes-layout-g .entry-category a.category-reports {background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));border-bottom: solid 2px var(--color_category_reports_light);border-top: solid 2px var(--color_category_reports_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-reports .entry-title a {border-left: 3px solid var(--color_category_reports);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-reports:hover .entry-title a,.widget_categories li.category-reports a {color: var(--color_category_reports_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-reports,.header-layout-11 .slot-r>nav>ul>li.category-reports,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports,.widget_categories li.category-reports a {border: 2px solid var(--color_category_reports_light);background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports:hover,.widget_categories li.category-reports a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_reports_light);}.category-pill.johannes-layout-g .entry-category a.category-uncategorized {background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));border-bottom: solid 2px var(--color_category_uncategorized_light);border-top: solid 2px var(--color_category_uncategorized_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-uncategorized .entry-title a {border-left: 3px solid var(--color_category_uncategorized);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-uncategorized:hover .entry-title a,.widget_categories li.category-uncategorized a {color: var(--color_category_uncategorized_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized,.widget_categories li.category-uncategorized a {border: 2px solid var(--color_category_uncategorized_light);background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized:hover,.widget_categories li.category-uncategorized a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_uncategorized_light);}body{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;color: var( --color_txt );background: var( --color_bg );}.johannes-header{font-family: 'Muli', Arial, sans-serif;font-weight: 700;font-style: normal;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.wp-block-cover .wp-block-cover-image-text, .wp-block-cover .wp-block-cover-text, .wp-block-cover h2, .wp-block-cover-image .wp-block-cover-image-text, .wp-block-cover-image .wp-block-cover-text, .wp-block-cover-image h2,.entry-category a,.single-md-content .entry-summary,p.has-drop-cap:not(:focus)::first-letter,.johannes_posts_widget .entry-header > a {font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}b,strong,.entry-tags a,.entry-category a,.entry-meta a,.wp-block-tag-cloud a{font-weight: 900; }.entry-content strong{font-weight: bold;}.header-top{background: var( --color_header_top_bg );color: var( --color_header_top_txt );}.header-top nav > ul > li > a,.header-top .johannes-menu-social a{color: var( --color_header_top_txt );}.header-top nav > ul > li:hover > a,.header-top nav > ul > li.current-menu-item > a,.header-top .johannes-menu-social li:hover a{color: var( --color_header_top_acc );}.header-middle,.header-mobile{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-middle > .container {height: 130px;}.header-middle a,.johannes-mega-menu .sub-menu li:hover a,.header-mobile a{color: var( --color_header_middle_txt );}.header-middle li:hover > a,.header-middle .current-menu-item > a,.header-middle .johannes-mega-menu .sub-menu li a:hover,.header-middle .johannes-site-branding .site-title a:hover,.header-mobile .site-title a,.header-mobile a:hover{color: var( --color_header_middle_acc );}.header-middle .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-middle .sub-menu{background: var( --color_header_middle_bg );}.johannes-cover-indent .header-middle .johannes-menu>li>a:hover,.johannes-cover-indent .header-middle .johannes-menu-action a:hover{color: var( --color_header_middle_acc );}.header-sticky-main{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-sticky-main a,.header-sticky-main .johannes-mega-menu .sub-menu li:hover a,.header-sticky-main .johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_middle_txt );}.header-sticky-main li:hover > a,.header-sticky-main .current-menu-item > a,.header-sticky-main .johannes-mega-menu .sub-menu li a:hover,.header-sticky-main .johannes-site-branding .site-title a:hover{color: var( --color_header_middle_acc );}.header-sticky-main .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-sticky-main .sub-menu{background: var( --color_header_middle_bg );}.header-sticky-contextual{color: var( --color_header_middle_bg );background: var( --color_header_middle_txt );}.header-sticky-contextual,.header-sticky-contextual a{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;}.header-sticky-contextual a{color: var( --color_header_middle_bg );}.header-sticky-contextual .meta-comments:after{background: var( --color_header_middle_bg );}.header-sticky-contextual .meks_ess a:hover{color: var( --color_header_middle_acc );background: transparent;}.header-bottom{color: var( --color_header_bottom_txt );background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.johannes-header-bottom-boxed .header-bottom{background: transparent;border: none;}.johannes-header-bottom-boxed .header-bottom-slots{background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.header-bottom-slots{height: 70px;}.header-bottom a,.johannes-mega-menu .sub-menu li:hover a,.johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_bottom_txt );}.header-bottom li:hover > a,.header-bottom .current-menu-item > a,.header-bottom .johannes-mega-menu .sub-menu li a:hover,.header-bottom .johannes-site-branding .site-title a:hover{color: var( --color_header_bottom_acc );}.header-bottom .johannes-site-branding .site-title a{color: var( --color_header_bottom_txt );}.header-bottom .sub-menu{background: var( --color_header_bottom_bg );}.johannes-menu-action .search-form input[type=text]{background: var( --color_bg );}.johannes-header-multicolor .header-middle .slot-l,.johannes-header-multicolor .header-sticky .header-sticky-main .container > .slot-l,.johannes-header-multicolor .header-mobile .slot-l,.johannes-header-multicolor .slot-l .johannes-site-branding:after{background: var( --color_header_middle_bg_multi );}.johannes-cover-indent .johannes-cover{min-height: 450px;}.page.johannes-cover-indent .johannes-cover{min-height: 250px;}.single.johannes-cover-indent .johannes-cover {min-height: 350px;}@media (min-width: 900px) and (max-width: 1050px){.header-middle > .container {height: 100px;}.header-bottom > .container,.header-bottom-slots {height: 50px;}}.johannes-modal{background: var( --color_bg );}.johannes-modal .johannes-menu-social li a:hover,.meks_ess a:hover{background: var( --color_txt );}.johannes-modal .johannes-menu-social li:hover a{color: var( --color_button_hover );}.johannes-modal .johannes-modal-close{color: var( --color_txt );}.johannes-modal .johannes-modal-close:hover{color: var( --color_acc );}.meks_ess a:hover{color: var( --color_bg );}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.has-large-font-size {color: var( --color_h );}.entry-title a,a{color: var( --color_txt );}.johannes-post .entry-title a{color: var( --color_h );}.entry-content a:not([class*=button]),.comment-content a:not([class*=button]){color: var( --color_acc );}.entry-content a:not([class*=button]):hover,.comment-content a:not([class*=button]):hover{color: var( --color_txt );}.entry-title a:hover,a:hover,.entry-meta a,.written-by a,.johannes-overlay .entry-meta a:hover,body .johannes-cover .section-bg+.container .johannes-breadcrumbs a:hover,.johannes-cover .section-bg+.container .section-head a:not(.johannes-button):not(.cat-item):hover,.entry-content .wp-block-tag-cloud a:hover{color: var( --color_acc );}.entry-meta,.entry-content .entry-tags a,.entry-content .fn a,.comment-metadata,.entry-content .comment-metadata a,.written-by > span,.johannes-breadcrumbs{color: var( --color_meta );}.entry-meta a:hover,.written-by a:hover,.entry-content .wp-block-tag-cloud a{color: var( --color_txt );}.entry-meta .meta-item + .meta-item:before{background:var( --color_txt );}.entry-format i{color: var( --color_bg );background:var( --color_txt );}.category-pill .entry-category a{background-color: var( --color_acc );color: var( --color_button_txt );}.category-pill .entry-category a:hover{background-color: var( --color_txt );color: var( --color_button_hover );}.johannes-overlay.category-pill .entry-category a:hover,.johannes-cover.category-pill .entry-category a:hover {background-color: #ffffff;color: var( --color_dark_txt );}.white-bg-alt-2 .johannes-bg-alt-2 .category-pill .entry-category a:hover,.white-bg-alt-2 .johannes-bg-alt-2 .entry-format i{background-color: #ffffff;color: var( --color_dark_txt );}.media-shadow:after{background: rgba(255,255,255,0.1);}.entry-content .entry-tags a:hover,.entry-content .fn a:hover{color: var( --color_acc );}.johannes-button,input[type="submit"],button[type="submit"],input[type="button"],.wp-block-button .wp-block-button__link,.comment-reply-link,#cancel-comment-reply-link,.johannes-pagination a,.johannes-pagination,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.category-pill .entry-category a{font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}.johannes-bg-alt-1,.has-arrows .owl-nav,.has-arrows .owl-stage-outer:after,.media-shadow:after {background-color: #252525}.johannes-bg-alt-2 {background-color: #333333}.johannes-button-primary,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a{box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);background: var( --color_acc );color: var( --color_button_txt );}.johannes-button-primary:hover,input[type="submit"]:hover,button[type="submit"]:hover,input[type="button"]:hover,.johannes-pagination a:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);color: var( --color_button_txt );}.johannes-button.disabled{background: var( --color_bg_alt_1 );color: var( --color_txt ); box-shadow: none;}.johannes-button-secondary,.comment-reply-link,#cancel-comment-reply-link,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a{box-shadow: inset 0 0px 0px 1px var( --color_txt );color: var( --color_txt );opacity: .5;}.johannes-button-secondary:hover,.comment-reply-link:hover,#cancel-comment-reply-link:hover,.meks-instagram-follow-link .meks-widget-cta:hover,.mks_autor_link_wrap a:hover,.mks_read_more a:hover{box-shadow: inset 0 0px 0px 1px var( --color_acc ); opacity: 1;color: var( --color_acc );}.johannes-breadcrumbs a,.johannes-action-close:hover,.single-md-content .entry-summary span,form label .required{color: var( --color_acc );}.johannes-breadcrumbs a:hover{color: var( --color_txt );}.section-title:after{background-color: var( --color_acc );}hr{background: rgba(255,255,255,0.2);}.wp-block-preformatted,.wp-block-verse,pre,code, kbd, pre, samp, address{background:var( --color_bg_alt_1 );}.entry-content ul li:before,.wp-block-quote:before,.comment-content ul li:before{color: var( --color_txt );}.wp-block-quote.is-large:before{color: var( --color_acc );}.wp-block-table.is-style-stripes tr:nth-child(odd){background:var( --color_bg_alt_1 );}.wp-block-table.is-style-regular tbody tr,.entry-content table tr,.comment-content table tr{border-bottom: 1px solid rgba(255,255,255,0.1);}.wp-block-pullquote:not(.is-style-solid-color){color: var( --color_txt );border-color: var( --color_acc );}.wp-block-pullquote{background: var( --color_acc );color: var( --color_bg );}.johannes-sidebar-none .wp-block-pullquote.alignfull.is-style-solid-color{box-shadow: -526px 0 0 #ff7900, -1052px 0 0 #ff7900,526px 0 0 #ff7900, 1052px 0 0 var( --color_acc );}.wp-block-button .wp-block-button__link{background: var( --color_acc );color: var( --color_button_txt );box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);}.wp-block-button .wp-block-button__link:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);}.is-style-outline .wp-block-button__link {background: 0 0;color:var( --color_acc );border: 2px solid currentcolor;}.entry-content .is-style-solid-color a:not([class*=button]){color:var( --color_bg );}.entry-content .is-style-solid-color a:not([class*=button]):hover{color:var( --color_txt );}input[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=range], input[type=search], input[type=tel], input[type=text], input[type=time], input[type=url], input[type=week], select, textarea{border: 1px solid rgba(255,255,255,0.3);}body .johannes-wrapper .meks_ess{border-color: rgba(255,255,255,0.1); }.widget_eu_cookie_law_widget #eu-cookie-law input, .widget_eu_cookie_law_widget #eu-cookie-law input:focus, .widget_eu_cookie_law_widget #eu-cookie-law input:hover{background: var( --color_acc );color: var( --color_button_txt );}.double-bounce1, .double-bounce2{background-color: var( --color_acc );}.johannes-pagination .page-numbers.current,.paginated-post-wrapper span{background: var( --color_bg_alt_1 );color: var( --color_txt );}.widget li{color: rgba(255,255,255,0.8);}.widget_calendar #today a{color: #fff;}.widget_calendar #today a{background: var( --color_acc );}.tagcloud a{border-color: rgba(255,255,255,0.5);color: rgba(255,255,255,0.8);}.tagcloud a:hover{color: var( --color_acc );border-color: var( --color_acc );}.rssSummary,.widget p{color: var( --color_txt );}.johannes-bg-alt-1 .count,.johannes-bg-alt-1 li a,.johannes-bg-alt-1 .johannes-accordion-nav{background-color: var( --color_bg_alt_1 );}.johannes-bg-alt-2 .count,.johannes-bg-alt-2 li a,.johannes-bg-alt-2 .johannes-accordion-nav,.johannes-bg-alt-2 .cat-item .count, .johannes-bg-alt-2 .rss-date, .widget .johannes-bg-alt-2 .post-date, .widget .johannes-bg-alt-2 cite{background-color: var( --color_bg_alt_2 );color: #FFF;}.white-bg-alt-1 .widget .johannes-bg-alt-1 select option,.white-bg-alt-2 .widget .johannes-bg-alt-2 select option{background: var( --color_bg_alt_2 );}.widget .johannes-bg-alt-2 li a:hover{color: var( --color_acc );}.widget_categories .johannes-bg-alt-1 ul li .dots:before,.widget_archive .johannes-bg-alt-1 ul li .dots:before{color: var( --color_txt );}.widget_categories .johannes-bg-alt-2 ul li .dots:before,.widget_archive .johannes-bg-alt-2 ul li .dots:before{color: #FFF;}.search-alt input[type=search], .search-alt input[type=text], .widget_search input[type=search], .widget_search input[type=text],.mc-field-group input[type=email], .mc-field-group input[type=text]{border-bottom: 1px solid rgba(255,255,255,0.2);}.johannes-sidebar-hidden{background: var( --color_bg );}.johannes-footer{background: var( --color_footer_bg );color: var( --color_footer_txt );}.johannes-footer a,.johannes-footer .widget-title{color: var( --color_footer_txt );}.johannes-footer a:hover{color: var( --color_footer_acc );}.johannes-footer-widgets + .johannes-copyright{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .widget .count,.johannes-footer .widget_categories li a,.johannes-footer .widget_archive li a,.johannes-footer .widget .johannes-accordion-nav{background-color: var( --color_footer_bg );}.footer-divider{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .rssSummary,.johannes-footer .widget p{color: var( --color_footer_txt );}.johannes-empty-message{background: var( --color_bg_alt_1 );}.error404 .h0{color: var( --color_acc );}.johannes-goto-top,.johannes-goto-top:hover{background: var( --color_txt );color: var( --color_bg );}.johannes-ellipsis div{background: var( --color_acc );}.white-bg-alt-2 .johannes-bg-alt-2 .section-subnav .johannes-button-secondary:hover{color: var( --color_acc );}.section-subnav a{color: var( --color_txt );}.johannes-cover .section-subnav a{color: var( --color_button_txt );}.section-subnav a:hover{color: var( --color_acc );}@media(min-width: 600px){.size-johannes-fa-a{ height: 450px !important;}.size-johannes-single-3{ height: 450px !important;}.size-johannes-single-4{ height: 540px !important;}.size-johannes-page-3{ height: 360px !important;}.size-johannes-page-4{ height: 405px !important;}.size-johannes-wa-3{ height: 405px !important;}.size-johannes-wa-4{ height: 567px !important;}.size-johannes-archive-2{ height: 405px !important;}.size-johannes-archive-3{ height: 405px !important;}}@media(min-width: 900px){.size-johannes-a{ height: 484px !important;}.size-johannes-b{ height: 491px !important;}.size-johannes-c{ height: 304px !important;}.size-johannes-d{ height: 194px !important;}.size-johannes-e{ height: 304px !important;}.size-johannes-f{ height: 214px !important;}.size-johannes-fa-a{ height: 500px !important;}.size-johannes-fa-b{ height: 635px !important;}.size-johannes-fa-c{ height: 540px !important;}.size-johannes-fa-d{ height: 344px !important;}.size-johannes-fa-e{ height: 442px !important;}.size-johannes-single-1{ height: 484px !important;}.size-johannes-single-2{ height: 484px !important;}.size-johannes-single-3{ height: 500px !important;}.size-johannes-single-4{ height: 600px !important;}.size-johannes-single-5{ height: 442px !important;}.size-johannes-page-1{ height: 484px !important;}.size-johannes-page-2{ height: 484px !important;}.size-johannes-page-3{ height: 400px !important;}.size-johannes-page-4{ height: 450px !important;}.size-johannes-wa-1{ height: 442px !important;}.size-johannes-wa-2{ height: 304px !important;}.size-johannes-wa-3{ height: 450px !important;}.size-johannes-wa-4{ height: 630px !important;}.size-johannes-archive-2{ height: 450px !important;}.size-johannes-archive-3{ height: 450px !important;}}@media(min-width: 900px){.has-small-font-size{ font-size: 1.3rem;}.has-normal-font-size{ font-size: 1.6rem;}.has-large-font-size{ font-size: 4.0rem;}.has-huge-font-size{ font-size: 5.2rem;}}.has-johannes-acc-background-color{ background-color: #ff7900;}.has-johannes-acc-color{ color: #ff7900;}.has-johannes-meta-background-color{ background-color: #ffffff;}.has-johannes-meta-color{ color: #ffffff;}.has-johannes-bg-background-color{ background-color: #1c1c1c;}.has-johannes-bg-color{ color: #1c1c1c;}.has-johannes-bg-alt-1-background-color{ background-color: #252525;}.has-johannes-bg-alt-1-color{ color: #252525;}.has-johannes-bg-alt-2-background-color{ background-color: #333333;}.has-johannes-bg-alt-2-color{ color: #333333;}body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:3rem;}h1, .h1{font-size:2.6rem;}h2, .h2{font-size:2.4rem;}h3, .h3{font-size:2.2rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2rem;}h5, .h5{font-size:1.8rem;}h6, .h6{font-size:1.6rem;}.entry-meta{font-size:1.2rem;}.section-title {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.mks_author_widget h3{font-size:2.2rem;}.widget,.johannes-breadcrumbs{font-size:1.4rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.2rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 2.6rem;}.johannes-cover-indent .johannes-cover{margin-top: -70px;}.johannes-menu-social li a:after, .menu-social-container li a:after{font-size:1.6rem;}.johannes-modal .johannes-menu-social li>a:after,.johannes-menu-action .jf{font-size:2.4rem;}.johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.johannes-button-medium,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.wp-block-button .wp-block-button__link{font-size:1.3rem;}.johannes-button-small,.comment-reply-link,#cancel-comment-reply-link{font-size:1.2rem;}.category-pill .entry-category a,.category-pill-small .entry-category a{font-size:1.1rem;}@media (min-width: 600px){ .johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.wp-block-button .wp-block-button__link{font-size:1.4rem;}.category-pill .entry-category a{font-size:1.4rem;}.category-pill-small .entry-category a{font-size:1.1rem;}}@media (max-width: 374px){.johannes-overlay .h1,.johannes-overlay .h2,.johannes-overlay .h3,.johannes-overlay .h4,.johannes-overlay .h5{font-size: 2.2rem;}}@media (max-width: 600px){ .johannes-layout-fa-d .h5{font-size: 2.4rem;}.johannes-layout-f.category-pill .entry-category a{background-color: transparent;color: var( --color_acc );}.johannes-layout-c .h3,.johannes-layout-d .h5{font-size: 2.4rem;}.johannes-layout-f .h3{font-size: 1.8rem;}}@media (min-width: 600px) and (max-width: 1050px){ .johannes-layout-fa-c .h2{font-size:3.6rem;}.johannes-layout-fa-d .h5{font-size:2.4rem;}.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:5.2rem;}}@media (max-width: 1050px){ body.single-post .single-md-content{max-width: 766px;width: 100%;}body.page .single-md-content.col-lg-6,body.page .single-md-content.col-lg-6{flex: 0 0 100%}body.page .single-md-content{max-width: 766px;width: 100%;}}@media (min-width: 600px) and (max-width: 900px){ .display-1{font-size:4.6rem;}h1, .h1{font-size:4rem;}h2, .h2,.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:3.2rem;}h3, .h3,.johannes-layout-fa-c .h2,.johannes-layout-fa-d .h5,.johannes-layout-d .h5,.johannes-layout-e .h2{font-size:2.8rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2.4rem;}h5, .h5{font-size:2rem;}h6, .h6{font-size:1.8rem;}.section-title {font-size:3.2rem;}.johannes-section.wa-layout .display-1{font-size: 3rem;}.johannes-layout-f .h3{font-size: 3.2rem}.johannes-site-branding .site-title.logo-img-none{font-size: 3rem;}}@media (min-width: 900px){ body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:5.2rem;}h1, .h1 {font-size:5.2rem;}h2, .h2 {font-size:4.0rem;}h3, .h3 {font-size:3.6rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2 {font-size:3.2rem;}h5, .h5 {font-size:2.8rem;}h6, .h6 {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.section-title{font-size:4.0rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.6rem;}.johannes-section-instagram .h2{font-size: 3rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 4rem;}.entry-meta{font-size:1.4rem;}.johannes-cover-indent .johannes-cover {margin-top: -130px;}.johannes-cover-indent .johannes-cover .section-head{top: 32.5px;}}.section-description .search-alt input[type=text],.search-alt input[type=text]{color: var( --color_txt );}::-webkit-input-placeholder {color: rgba(255,255,255,0.5);}::-moz-placeholder {color: rgba(255,255,255,0.5);}:-ms-input-placeholder {color: rgba(255,255,255,0.5);}:-moz-placeholder{color: rgba(255,255,255,0.5);}.section-description .search-alt input[type=text]::-webkit-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]::-moz-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-ms-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-moz-placeholder{color: var( --color_txt );}.section-description .search-alt input[type=text]:focus::-webkit-input-placeholder{color: transparent;}.section-description .search-alt input[type=text]:focus::-moz-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-ms-input-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-moz-placeholder{color: transparent;}
</style>
<link rel='stylesheet' id='avast-common-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/common.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='avast-theme-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/dark.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='font_awesome-css' href='https://kit.fontawesome.com/a2abe1aedb.js?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='johannes-fonts-css' href='https://fonts.googleapis.com/css?family=Muli%3Aregular%2C900%2C700&#038;ver=1.1.3' type='text/css' media='all' />
<link rel='stylesheet' id='meks_ess-main-css' href='https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/css/main.css?ver=1.3' type='text/css' media='all' />
<script type="text/javascript">
            window._nslDOMReady = function (callback) {
                if ( document.readyState === "complete" || document.readyState === "interactive" ) {
                    callback();
                } else {
                    document.addEventListener( "DOMContentLoaded", callback );
                }
            };
            </script><script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/google-analytics-for-wordpress/assets/js/frontend-gtag.min.js?ver=9.1.1" id="monsterinsights-frontend-script-js" async="async" data-wp-strategy="async"></script>
<script data-cfasync="false" data-wpfc-render="false" type="text/javascript" id='monsterinsights-frontend-script-js-extra'>/* <![CDATA[ */
var monsterinsights_frontend = {"js_events_tracking":"true","download_extensions":"doc,pdf,ppt,zip,xls,docx,pptx,xlsx","inbound_paths":"[{\"path\":\"\\\/go\\\/\",\"label\":\"affiliate\"},{\"path\":\"\\\/recommend\\\/\",\"label\":\"affiliate\"}]","home_url":"https:\/\/decoded.avast.io","hash_tracking":"false","v4_id":"G-GSVBRGE9D6"};/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://decoded.avast.io/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://decoded.avast.io/wp-json/wp/v2/posts/4712" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://decoded.avast.io/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.6.2" />
<link rel='shortlink' href='https://decoded.avast.io/?p=4712' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fexploit-kits-vs-google-chrome%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fexploit-kits-vs-google-chrome%2F&#038;format=xml" />
        <script type="text/javascript" id="avast-theme-switch">
			function getCookie(cname) {
			  var name = cname + "=";
			  var decodedCookie = decodeURIComponent(document.cookie);
			  var ca = decodedCookie.split(';');
			  for(var i = 0; i <ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
				  c = c.substring(1);
				}
				if (c.indexOf(name) == 0) {
				  return c.substring(name.length, c.length);
				}
			  }
			  return "";
			}
			
			function setCookie(cname, cvalue, exdays) {
			  var d = new Date();
			  d.setTime(d.getTime() + (exdays*24*60*60*1000));
			  var expires = "expires="+ d.toUTCString();
			  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
			}
			
			function toggleTheme()
			{
				theme_cookie = getCookie("avast_theme");
				if (!theme_cookie) {console.log("theme cookie is null");theme_cookie = "dark";}
				theme_cookie = (theme_cookie != "dark" ? 'dark' : 'light');
				setTheme(theme_cookie);
			}
			
			function setTheme(theme)
			{
				console.log("settin theme to " + theme);
				const theme_element = document.querySelector('#avast-theme-css');
				theme_cookie = (theme_cookie == "dark" ? 'dark' : 'light');
				theme_element.setAttribute('href', "https://decoded.avast.io/wp-content/themes/johannes-avast/css/" + theme_cookie + ".css");
				setCookie("avast_theme", theme_cookie, 10*365);
			}
			
			theme_cookie = getCookie("avast_theme");
			if (!theme_cookie) {theme_cookie = "dark";}
			setTheme(theme_cookie);
		</script>
    <link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-32x32.png" sizes="32x32" />
<link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-180x180.png" />
<meta name="msapplication-TileImage" content="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-270x270.png" />
<style type="text/css">div.nsl-container[data-align="left"] {
    text-align: left;
}

div.nsl-container[data-align="center"] {
    text-align: center;
}

div.nsl-container[data-align="right"] {
    text-align: right;
}


div.nsl-container div.nsl-container-buttons a[data-plugin="nsl"] {
    text-decoration: none;
    box-shadow: none;
    border: 0;
}

div.nsl-container .nsl-container-buttons {
    display: flex;
    padding: 5px 0;
}

div.nsl-container.nsl-container-block .nsl-container-buttons {
    display: inline-grid;
    grid-template-columns: minmax(145px, auto);
}

div.nsl-container-block-fullwidth .nsl-container-buttons {
    flex-flow: column;
    align-items: center;
}

div.nsl-container-block-fullwidth .nsl-container-buttons a,
div.nsl-container-block .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px 0;
    width: 100%;
}

div.nsl-container-inline {
    margin: -5px;
    text-align: left;
}

div.nsl-container-inline .nsl-container-buttons {
    justify-content: center;
    flex-wrap: wrap;
}

div.nsl-container-inline .nsl-container-buttons a {
    margin: 5px;
    display: inline-block;
}

div.nsl-container-grid .nsl-container-buttons {
    flex-flow: row;
    align-items: center;
    flex-wrap: wrap;
}

div.nsl-container-grid .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px;
    max-width: 280px;
    width: 100%;
}

@media only screen and (min-width: 650px) {
    div.nsl-container-grid .nsl-container-buttons a {
        width: auto;
    }
}

div.nsl-container .nsl-button {
    cursor: pointer;
    vertical-align: top;
    border-radius: 4px;
}

div.nsl-container .nsl-button-default {
    color: #fff;
    display: flex;
}

div.nsl-container .nsl-button-icon {
    display: inline-block;
}

div.nsl-container .nsl-button-svg-container {
    flex: 0 0 auto;
    padding: 8px;
    display: flex;
    align-items: center;
}

div.nsl-container svg {
    height: 24px;
    width: 24px;
    vertical-align: top;
}

div.nsl-container .nsl-button-default div.nsl-button-label-container {
    margin: 0 24px 0 12px;
    padding: 10px 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 20px;
    letter-spacing: .25px;
    overflow: hidden;
    text-align: center;
    text-overflow: clip;
    white-space: nowrap;
    flex: 1 1 auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-transform: none;
    display: inline-block;
}

div.nsl-container .nsl-button-google[data-skin="dark"] .nsl-button-svg-container {
    margin: 1px;
    padding: 7px;
    border-radius: 3px;
    background: #fff;
}

div.nsl-container .nsl-button-google[data-skin="light"] {
    border-radius: 1px;
    box-shadow: 0 1px 5px 0 rgba(0, 0, 0, .25);
    color: RGBA(0, 0, 0, 0.54);
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container {
    padding: 0 6px;
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container svg {
    height: 40px;
    width: auto;
}

div.nsl-container .nsl-button-apple[data-skin="light"] {
    color: #000;
    box-shadow: 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="white"] {
    color: #000;
    box-shadow: inset 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="light"] {
    color: #1877F2;
    box-shadow: inset 0 0 0 1px #1877F2;
}

div.nsl-container .nsl-button-spotify[data-skin="white"] {
    color: #191414;
    box-shadow: inset 0 0 0 1px #191414;
}

div.nsl-container .nsl-button-apple div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack[data-skin="light"] {
    color: #000000;
    box-shadow: inset 0 0 0 1px #DDDDDD;
}

div.nsl-container .nsl-button-tiktok[data-skin="light"] {
    color: #161823;
    box-shadow: 0 0 0 1px rgba(22, 24, 35, 0.12);
}


div.nsl-container .nsl-button-kakao {
    color: rgba(0, 0, 0, 0.85);
}

.nsl-clear {
    clear: both;
}

.nsl-container {
    clear: both;
}

.nsl-disabled-provider .nsl-button {
    filter: grayscale(1);
    opacity: 0.8;
}

/*Button align start*/

div.nsl-container-inline[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-inline[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-inline[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}


div.nsl-container-grid[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-grid[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-grid[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}

div.nsl-container-grid[data-align="space-around"] .nsl-container-buttons {
    justify-content: space-around;
}

div.nsl-container-grid[data-align="space-between"] .nsl-container-buttons {
    justify-content: space-between;
}

/* Button align end*/

/* Redirect */

#nsl-redirect-overlay {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 1000000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(1px);
    background-color: RGBA(0, 0, 0, .32);;
}

#nsl-redirect-overlay-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
}

#nsl-redirect-overlay-spinner {
    content: '';
    display: block;
    margin: 20px;
    border: 9px solid RGBA(0, 0, 0, .6);
    border-top: 9px solid #fff;
    border-radius: 50%;
    box-shadow: inset 0 0 0 1px RGBA(0, 0, 0, .6), 0 0 0 1px RGBA(0, 0, 0, .6);
    width: 40px;
    height: 40px;
    animation: nsl-loader-spin 2s linear infinite;
}

@keyframes nsl-loader-spin {
    0% {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

#nsl-redirect-overlay-title {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    font-size: 18px;
    font-weight: bold;
    color: #3C434A;
}

#nsl-redirect-overlay-text {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    text-align: center;
    font-size: 14px;
    color: #3C434A;
}

/* Redirect END*/</style><style type="text/css">/* Notice fallback */
#nsl-notices-fallback {
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 10000;
}

.admin-bar #nsl-notices-fallback {
    top: 42px;
}

#nsl-notices-fallback > div {
    position: relative;
    background: #fff;
    border-left: 4px solid #fff;
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
    margin: 5px 15px 2px;
    padding: 1px 20px;
}

#nsl-notices-fallback > div.error {
    display: block;
    border-left-color: #dc3232;
}

#nsl-notices-fallback > div.updated {
    display: block;
    border-left-color: #46b450;
}

#nsl-notices-fallback p {
    margin: .5em 0;
    padding: 2px;
}

#nsl-notices-fallback > div:after {
    position: absolute;
    right: 5px;
    top: 5px;
    content: '\00d7';
    display: block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    text-align: center;
    font-size: 20px;
    cursor: pointer;
}</style>		<style type="text/css" id="wp-custom-css">
			.wp-block-image.has-custom-border img, .wp-block-image img {
    box-sizing: border-box;
    border: 0px solid var(--color_border) !important;
}

.hljs, .hljs-subst {
	color: lightgray;
}		</style>
		<style id="kirki-inline-styles"></style>	</head>

	<body class="post-template-default single single-post postid-4712 single-format-standard wp-embed-responsive johannes-cover-indent johannes-sidebar-none white-bg-alt-1 white-bg-alt-2 johannes-header-labels-hidden johannes-footer-margin johannes-v_1_1_3 johannes-child">

	<div class="johannes-wrapper">

	    		    
		    <header class="johannes-header johannes-header-main d-none d-lg-block">
		    	
		        <div class="header-middle header-layout-11">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png, https://storage.googleapis.com/wordpress-salat-test/sites/2/2019/06/Asset-22ldpi-1.png 2x"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
		<div class="slot-r">
			<div class="slot-r-top">
									    <nav class="menu-main-menu-container"><ul id="menu-main-menu" class="johannes-menu johannes-menu-primary"><li id="menu-item-367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li id="menu-item-369" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li id="menu-item-370" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li id="menu-item-371" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>																			<ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
												</div>
			<div class="slot-r-bottom">
															<ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>												</div>
		</div>
    </div>
</div>		    	
		    </header>

		    <div class="johannes-header header-mobile d-lg-none">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
        <div class="slot-r">
            <ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
        </div>
    </div>
</div>
		    
	    

            <div class="johannes-section category-pill johannes-cover johannes-bg-alt-2 johannes-section-margin-alt size-johannes-single-3">
    
                <div class="section-bg">
            <img width="1920" height="500" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/shutterstock_1703558134_edited2-1920x500.jpg" class="attachment-johannes-single-3 size-johannes-single-3 wp-post-image" alt="" />                        </div>
        
    <div class="container">
        <div class="section-head johannes-content-alt section-head-alt">
                        <h1 class="entry-title">Exploit Kits vs. Google Chrome</h1>                            <div class="entry-meta">
                    <span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/janvojtesek/">Jan Vojtěšek</a></span></span><span class="meta-item meta-date"><span class="updated">January 12, 2022</span></span><span class="meta-item meta-rtime">34 min read</span>                </div>
                        
        </div>
    </div>
</div>


<div class="johannes-section">
    <div class="container">
        <div class="section-content row justify-content-center">
            
            
            <div class="col-12 col-lg-8 single-md-content col-md-special johannes-order-1 ">
                 
                <article id="post-4712" class="post-4712 post type-post status-publish format-standard has-post-thumbnail hentry tag-cve-2021-21224 tag-cve-2021-31956 tag-exploit tag-exploit-kit tag-magnitude tag-underminer category-pc">

                    
                    
                    
                    <div class="entry-content entry-single clearfix">
                        
<p>In October 2021, we discovered that the <a href="https://decoded.avast.io/janvojtesek/magnitude-exploit-kit-still-alive-and-kicking/" target="_blank" rel="noreferrer noopener">Magnitude exploit kit</a> was testing out a Chromium exploit chain in the wild. This really piqued our interest, because browser exploit kits have in the past few years focused mainly on Internet Explorer vulnerabilities and it was believed that browsers like Google Chrome are just too big of a target for them. </p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/MagnitudeEK?src=hash&amp;ref_src=twsrc%5Etfw">#MagnitudeEK</a> is now stepping up its game by using CVE-2021-21224 and CVE-2021-31956 to exploit Chromium-based browsers. This is an interesting development since most exploit kits are currently targeting exclusively Internet Explorer, with Chromium staying out of their reach.</p>&mdash; Avast Threat Labs (@AvastThreatLabs) <a href="https://twitter.com/AvastThreatLabs/status/1450476708939767815?ref_src=twsrc%5Etfw">October 19, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>About a month later, we found that the <a href="https://twitter.com/AvastThreatLabs/status/1458757035076440064?s=20" target="_blank" rel="noreferrer noopener">Underminer exploit kit followed suit</a> and developed an exploit for the same Chromium vulnerability. That meant there were two exploit kits that dared to attack Google Chrome: Magnitude using <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21224" target="_blank" rel="noreferrer noopener">CVE-2021-21224</a> and <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31956" target="_blank" rel="noreferrer noopener">CVE-2021-31956</a> and Underminer using <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21224" target="_blank" rel="noreferrer noopener">CVE-2021-21224</a>, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2019-0808" target="_blank" rel="noreferrer noopener">CVE-2019-0808</a>, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-1020" target="_blank" rel="noreferrer noopener">CVE-2020-1020</a>, and <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-1054" target="_blank" rel="noreferrer noopener">CVE-2020-1054</a>.</p>



<p>We’ve been monitoring the exploit kit landscape very closely since our discoveries, watching out for any new developments. We were waiting for other exploit kits to jump on the bandwagon, but none other did, as far as we can tell. What’s more, Magnitude seems to have abandoned the Chromium exploit chain. And while Underminer still continues to use these exploits today, its traditional IE exploit chains are doing much better. According to our telemetry, less than 20% of Underminer’s exploitation attempts are targeting Chromium-based browsers.</p>



<p>This is some very good news because it suggests that the Chromium exploit chains were not as successful as the attackers hoped they would be and that it is not currently very profitable for exploit kit developers to target Chromium users. In this blog post, we would like to offer some thoughts into why that could be the case and why the attackers might have even wanted to develop these exploits in the first place. And since we don’t get to see a new Chromium exploit chain in the wild every day, we will also dissect Magnitude’s exploits and share some detailed technical information about them.</p>



<h3 class="wp-block-heading">Exploit Kit Theory</h3>



<p>To understand why exploit kit developers might have wanted to test Chromium exploits, let’s first look at things from their perspective. Their end goal in developing and maintaining an exploit kit is to make a profit: they just simply want to maximize the difference between money “earned” and money spent. To achieve this goal, most modern exploit kits follow a simple formula. They buy ads targeted to users who are likely to be vulnerable to their exploits (e.g. Internet Explorer users). These ads contain JavaScript code that is automatically executed, even when the victim doesn’t interact with the ad in any way (sometimes referred to as <em>drive-by</em> attacks). This code can then further profile the victim’s browser environment and select a suitable exploit for that environment. If the exploitation succeeds, a malicious payload (e.g. ransomware or a coinminer) is deployed to the victim. In this scenario, the money “earned” could be the ransom or mining rewards. On the other hand, the money spent is the cost of ads, infrastructure (renting servers, registering domain names etc.), and the time the attacker spends on developing and maintaining the exploit kit.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1.png"><img decoding="async" width="1024" height="686" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1-1024x686.png" alt="" class="wp-image-4730" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1-1024x686.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1-300x201.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1-768x515.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/exploit_kit_structure-1.png 1312w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption>Modus operandi of a typical browser exploit kit</figcaption></figure></div>



<p>The attackers would like to have many diverse exploits ready at any given time because it would allow them to cast a wide net for potential victims. But it is important to note that individual exploits generally get less effective over time. This is because the number of people susceptible to a known vulnerability will decrease as some people patch and other people upgrade to new devices (which are hopefully not plagued by the same vulnerabilities as their previous devices). This forces the attackers to always look for new vulnerabilities to exploit. If they stick with the same set of exploits for years, their profit would eventually reduce down to almost nothing.</p>



<p>So how do they find the right vulnerabilities to exploit? After all, there are thousands of CVEs reported each year, but only a few of them are good candidates for being included in an exploit kit. Weaponizing an exploit generally takes a lot of time (unless, of course, there is a ready-to-use PoC or the exploit can be stolen from a competitor), so the attackers might first want to carefully take into account multiple characteristics of each vulnerability. If a vulnerability scores well across these characteristics, it looks like a good candidate for inclusion in an exploit kit. Some of the more important characteristics are listed below.</p>



<ul class="wp-block-list"><li><strong>Prevalence of the vulnerability</strong> <br>The more users are affected by the vulnerability, the more attractive it is to the attackers.&nbsp;</li><li><strong>Exploit reliability</strong><br>Many exploits rely on some assumptions or are based on a race condition, which makes them fail some of the time. The attackers obviously prefer high-reliability exploits.</li><li><strong>Difficulty of exploit development</strong><br>This determines the time that needs to be spent on exploit development (if the attackers are even capable of exploiting the vulnerability). The attackers tend to prefer vulnerabilities with a public PoC exploit, which they can often just integrate into their exploit kit with minimal effort.</li><li><strong>Targeting precision</strong><br>The attackers care about how hard it is to identify (and target ads to) vulnerable victims. If they misidentify victims too often (meaning that they serve exploits to victims who they cannot exploit), they’ll just lose money on the malvertising.</li><li><strong>Expected vulnerability lifetime</strong><br>As was already discussed, each vulnerability gets less effective over time. However, the speed at which the effectiveness drops can vary a lot between vulnerabilities, mostly based on how effective is the patching process of the affected software.</li><li><strong>Exploit detectability</strong><br>The attackers have to deal with numerous security solutions that are in the business of protecting their users against exploits. These solutions can lower the exploit kit’s success rate by a lot, which is why the attackers prefer more stealthy exploits that are harder for the defenders to detect.&nbsp;</li><li><strong>Exploit potential</strong><br>Some exploits give the attackers <code>System</code>, while others might make them only end up inside a sandbox. Exploits with less potential are also less useful, because they either need to be chained with other LPE exploits, or they place limits on what the final malicious payload is able to do.</li></ul>



<p>Looking at these characteristics, the most plausible explanation for the failure of the Chromium exploit chains is the <em>expected vulnerability lifetime</em>. Google is extremely good at forcing users to install browser patches: Chrome updates are pushed to users when they’re ready and can happen many times in a month (unlike e.g. Internet Explorer updates which are locked into the once-a-month “Patch Tuesday” cycle that is only broken for exceptionally severe vulnerabilities). When CVE-2021-21224 was a zero-day vulnerability, it affected billions of users. Within a few days, almost all of these users received a patch. The only unpatched users were those who manually disabled (or broke) automatic updates, those who somehow managed not to relaunch the browser in a long time, and those running Chromium forks with bad patching habits.</p>



<p>A secondary reason for the failure could be attributed to bad <em>targeting precision</em>. Ad networks often allow the attackers to target ads based on various characteristics of the user’s browser environment, but the specific version of the browser is usually not one of these characteristics. For Internet Explorer vulnerabilities, this does not matter that much: the attackers can just buy ads for Internet Explorer users in general. As long as a certain percentage of Internet Explorer users is vulnerable to their exploits, they will make a profit. However, if they just blindly targeted Google Chrome users, the percentage of vulnerable victims might be so low, that the cost of malvertising would outweigh the money they would get by exploiting the few vulnerable users. Google also plans to <a href="https://blog.chromium.org/2021/09/user-agent-reduction-origin-trial-and-dates.html" target="_blank" rel="noreferrer noopener">reduce the amount of information</a> given in the <code>User-Agent</code> string. Exploit kits often heavily rely on this string for precise information about the browser version. With less information in the <code>User-Agent</code> header, they might have to come up with some custom version fingerprinting, which would most likely be less accurate and costly to manage.</p>



<p>Now that we have some context about exploit kits and Chromium, we can finally speculate about why the attackers decided to develop the Chromium exploit chains. First of all, adding new vulnerabilities to an exploit kit seems a lot like a “trial and error” activity. While the attackers might have some expectations about how well a certain exploit will perform, they cannot know for sure how useful it will be until they actually test it out in the wild. This means it should not be surprising that sometimes, their attempts to integrate an exploit turn out worse than they expected. Perhaps they misjudged the prevalence of the vulnerabilities or thought that it would be easier to target the vulnerable victims. Perhaps they focused too much on the characteristics that the exploits do well on: after all, they have reliable, high-potential exploits for a browser that’s used by billions. It could also be that this was all just some experimentation where the attackers just wanted to explore the land of Chromium exploits.</p>



<p>It’s also important to point out that the usage of Internet Explorer (which is currently vital for the survival of exploit kits) has been steadily dropping over the past few years. This may have forced the attackers to experiment with how viable exploits for other browsers are because they know that sooner or later they will have to make the switch. But judging from these attempts, the attackers do not seem fully capable of making the switch as of now. That is some good news because it could mean that if nothing significant changes, exploit kits might be forced to retire when Internet Explorer usage drops below some critical limit.</p>



<h3 class="wp-block-heading">CVE-2021-21224</h3>



<p>Let’s now take a closer look at the Magnitude’s exploit chain that we discovered in the wild. The exploitation starts with a JavaScript exploit for CVE-2021-21224. This is a type confusion vulnerability in <a href="https://v8.dev/" target="_blank" rel="noreferrer noopener">V8</a>, which allows the attacker to execute arbitrary code within a (sandboxed) Chromium renderer process. A zero-day exploit for this vulnerability (or <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1195777" target="_blank" rel="noreferrer noopener"><em>issue 1195777</em></a>, as it was known back then since no CVE ID had been assigned yet) was <a href="https://web.archive.org/web/20210414162911/https://github.com/avboy1337/1195777-chrome0day/commit/e2a004a0a6cc9bbd3780d6bd585eee1131adbb4f" target="_blank" rel="noreferrer noopener">dumped on Github</a> on April 14, 2021. The exploit worked for a couple of days against the latest Chrome version, until Google rushed out a patch about a week later.</p>



<p>It should not be surprising that Magnitude&#8217;s exploit is heavily inspired by the PoC on Github. However, while both Magnitude’s exploit and the PoC follow a very similar exploitation path, there are no matching code pieces, which suggests that the attackers didn’t resort that much to the “Copy/Paste” technique of exploit development. In fact, Magnitude’s exploit looks like a more cleaned-up and reliable version of the PoC. And since there is no obfuscation employed (the attackers probably meant to add it in later), the exploit is very easy to read and debug. There are even very self-explanatory function names, such as <code>confusion_to_oob</code>, <code>addrof</code>, and <code>arb_write</code>, and variable names, such as <code>oob_array</code>, <code>arb_write_buffer</code>, and <code>oob_array_map_and_properties</code>. The only way this could get any better for us researchers would be if the authors left a couple of helpful comments in there…</p>



<p>Interestingly, some parts of the exploit also seem inspired by a <a href="https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/" target="_blank" rel="noreferrer noopener">CTF writeup</a> for a “pwn” challenge from <a href="https://ctftime.org/event/778" target="_blank" rel="noreferrer noopener">*CTF 2019</a>, in which the players were supposed to exploit a made-up vulnerability that was introduced into a fork of V8. While CVE-2021-21224 is obviously a different (and actual rather than made-up) vulnerability, many of the techniques outlined in that writeup apply for V8 exploitation in general and so are used in the later stages of the Magnitude’s exploit, sometimes with the very same variable names as those used in the writeup.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/js_foofunc.png"><img decoding="async" width="518" height="348" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/js_foofunc.png" alt="" class="wp-image-4731" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/js_foofunc.png 518w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/js_foofunc-300x202.png 300w" sizes="(max-width: 518px) 100vw, 518px" /></a><figcaption>The core of the exploit, triggering the vulnerability to corrupt the length of <code>vuln_array</code></figcaption></figure></div>



<p>The root cause of the vulnerability is <a href="https://chromium.googlesource.com/v8/v8/+/09757f3b0a573a3db37a635b8a530b14ad4371c1%5E%21/" target="_blank" rel="noreferrer noopener">incorrect integer conversion</a> during the <code>SimplifiedLowering</code> phase. This incorrect conversion is triggered in the exploit by the <code>Math.max</code> call, shown in the code snippet above. As can be seen, the exploit first calls <code>foofunc</code> in a loop <code>0x10000</code> times. This is to make V8 compile that function because the bug only manifests itself after JIT compilation. Then, <code>helper["gcfunc"]</code> gets called. The purpose of this function is just to trigger garbage collection. We tested that the exploit also works without this call, but the authors probably put it there to improve the exploit’s reliability. Then, <code>foofunc</code> is called one more time, this time with <code>flagvar=true</code>, which makes <code>xvar=0xFFFFFFFF</code>. Without the bug, <code>lenvar</code> should now evaluate to <code>-0xFFFFFFFF</code> and the next statement should throw a <code>RangeError</code> because it should not be possible to create an array with a negative length. However, because of the bug, <code>lenvar</code> evaluates to an unexpected value of <code>1</code>. The reason for this is that the vulnerable code incorrectly converts the result of <code>Math.max</code> from an unsigned 32-bit integer <code>0xFFFFFFFF</code> to a signed 32-bit integer <code>-1</code>. After constructing <code>vuln_array</code>, the exploit calls <code>Array.prototype.shift</code> on it. Under normal circumstances, this method should remove the first element from the array, so the length of <code>vuln_array</code> should be zero. However, because of the disparity between the actual and the predicted value of <code>lenvar</code>, V8 makes an incorrect optimization here and just puts the 32-bit constant <code>0xFFFFFFFF</code> into <code>Array.length</code> (this is computed as <code>0-1</code> with an unsigned 32-bit underflow, where <code>0</code> is the predicted length and <code>-1</code> signifies <code>Array.prototype.shift</code> decrementing <code>Array.length</code>).&nbsp;</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/oob.png"><img loading="lazy" decoding="async" width="293" height="175" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/oob.png" alt="" class="wp-image-4732"/></a><figcaption>A demonstration of how an overwrite on <code>vuln_array</code> can corrupt the length of <code>oob_array</code></figcaption></figure></div>



<p>Now, the attackers have successfully crafted a JSArray with a corrupted <code>Array.length</code>, which allows them to perform out-of-bounds memory reads and writes. The very first out-of-bounds memory write can be seen in the last statement of the <code>confusion_to_oob</code> function. The exploit here writes <code>0xc00c</code> to <code>vuln_array[0x10]</code>. This abuses the deterministic memory layout in V8 when a function creates two local arrays. Since <code>vuln_array</code> was created first, <code>oob_array</code> is located at a known offset from it in memory and so by making out-of-bounds memory accesses through <code>vuln_array</code>, it is possible to access both the metadata and the actual data of <code>oob_array</code>. In this case, the element at index <code>0x10</code> corresponds to offset <code>0x40</code>, which is where <code>Array.length</code> of <code>oob_array</code> is stored. The out-of-bounds write therefore corrupts the length of <code>oob_array</code>, so it is now too possible to read and write past its end.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_fakeobj.png"><img loading="lazy" decoding="async" width="445" height="214" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_fakeobj.png" alt="" class="wp-image-4733" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_fakeobj.png 445w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_fakeobj-300x144.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_fakeobj-442x214.png 442w" sizes="(max-width: 445px) 100vw, 445px" /></a><figcaption>The <code>addrof</code> and <code>fakeobj</code> exploit primitives</figcaption></figure></div>



<p>Next, the exploit constructs the <a href="http://phrack.org/issues/70/3.html#:~:text=4%20-%20Building%20exploit%20primitives" target="_blank" rel="noreferrer noopener"><em>addrof</em> and <em>fakeobj</em> exploit primitives</a>. These are well-known and very powerful primitives in the world of JavaScript engine exploitation. In a nutshell, <code>addrof</code> leaks the address of a JavaScript object, while <code>fakeobj</code> creates a new, fake object at a given address. Having constructed these two primitives, the attacker can usually reuse existing techniques to get to their ultimate goal: arbitrary code execution.&nbsp;</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_example-1.png"><img loading="lazy" decoding="async" width="790" height="254" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_example-1.png" alt="" class="wp-image-4807" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_example-1.png 790w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_example-1-300x96.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/addrof_example-1-768x247.png 768w" sizes="(max-width: 790px) 100vw, 790px" /></a><figcaption>A step-by-step breakdown of the <code>addrof</code> primitive. Note that just the lower 32 bits of the address get leaked, while <code>%DebugPrint</code> returns the whole 64-bit address. In practice, this doesn’t matter because V8 compresses pointers by keeping upper 32 bits of all heap pointers constant.</figcaption></figure></div>



<p>Both primitives are constructed in a similar way, abusing the fact that <code>vuln_array[0x7]</code> and <code>oob_array[0]</code> point to the very same memory location. It is important to note here that&nbsp; <code>vuln_array</code> is internally represented by V8 as <code>HOLEY_ELEMENTS</code>, while <code>oob_array</code> is <code>PACKED_DOUBLE_ELEMENTS</code> (for more information about internal array representation in V8, please refer to <a href="https://v8.dev/blog/elements-kinds" target="_blank" rel="noreferrer noopener">this blog post</a> by the V8 devs). This makes it possible to write an object into <code>vuln_array</code> and read it (or more precisely, the pointer to it) from the other end in <code>oob_array</code> as a double. This is exactly how <code>addrof</code> is implemented, as can be seen above. Once the address is read, it is converted using <code>helper["f2ifunc"]</code> from double representation into an integer representation, with the upper 32 bits masked out, because the double takes 64 bits, while pointers in V8 are <a href="https://v8.dev/blog/pointer-compression" target="_blank" rel="noreferrer noopener">compressed</a> down to just 32 bits. <code>fakeobj</code> is implemented in the same fashion, just the other way around. First, the pointer is converted into a double using <code>helper["i2ffunc"]</code>. The pointer, encoded as a double, is then written into <code>oob_array[0]</code> and then read from <code>vuln_array[0x7]</code>, which tricks V8 into treating it as an actual object. Note that there is no masking needed in <code>fakeobj</code> because the double written into <code>oob_array</code> is represented by more bits than the pointer read from <code>vuln_array</code>.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/arw.png"><img loading="lazy" decoding="async" width="882" height="403" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/arw.png" alt="" class="wp-image-4735" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/arw.png 882w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/arw-300x137.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/arw-768x351.png 768w" sizes="(max-width: 882px) 100vw, 882px" /></a><figcaption>The arbitrary read/write exploit primitives</figcaption></figure></div>



<p>With <code>addrof</code> and <code>fakeobj</code> in place, the exploit follows a fairly standard exploitation path, which seems heavily inspired by the aforementioned <a href="https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/" target="_blank" rel="noreferrer noopener">*CTF 2019 writeup</a>. The next primitives constructed by the exploit are arbitrary read/write. To achieve these primitives, the exploit fakes a JSArray (aptly named <code>fake</code> in the code snippet above) in such a way that it has full control over its metadata. It can then overwrite the fake JSArray’s <code>elements</code> pointer, which points to the address where the actual elements of the array get stored. Corrupting the <code>elements</code> pointer allows the attackers to point the fake array to an arbitrary address, and it is then subsequently possible to read/write to that address through reads/writes on the fake array.</p>



<p>Let’s look at the implementation of the arbitrary read/write primitive in a bit more detail. The exploit first calls the <code>get_arw</code> function to set up the fake JSArray. This function starts by using an overread on <code>oob_array[3]</code> in order to leak <code>map</code> and <code>properties</code> of <code>oob_array</code> (remember that the original length of <code>oob_array</code> was <code>3</code> and that its length got corrupted earlier). The <code>map</code> and <code>properties</code> point to structures that basically describe the object type in V8. Then, a new array called <code>point_array</code> gets created, with the <code>oob_array_map_and_properties</code> value as its first element. Finally, the <code>fake</code> JSArray gets constructed at offset <code>0x20</code> before <code>point_array</code>. This offset was carefully chosen, so that the the JSArray structure corresponding to <code>fake</code> overlaps with <code>elements</code> of <code>point_array</code>. Therefore, it is possible to control the internal members of <code>fake</code> by modifying the elements of <code>point_array</code>. Note that elements in <code>point_array</code> take 64 bits, while members of the JSArray structure usually only take 32 bits, so modifying one element of <code>point_array</code> might overwrite two members of <code>fake</code> at the same time. Now, it should make sense why the first element of <code>point_array</code> was set to <code>oob_array_map_and_properties</code>. The first element is at the same address where V8 would look for the <code>map</code> and <code>properties</code> of <code>fake</code>. By initializing it like this, <code>fake</code> is created to be a <code>PACKED_DOUBLE_ELEMENTS</code> JSArray, basically inheriting its type from <code>oob_array</code>.</p>



<p>The second element of <code>point_array</code> overlaps with the <code>elements</code> pointer and <code>Array.length</code> of <code>fake</code>. The exploit uses this for both arbitrary read and arbitrary write, first corrupting the <code>elements</code> pointer to point to the desired address and then reading/writing to that address through <code>fake[0]</code>. However, as can be seen in the exploit code above, there are some additional actions taken that are worth explaining. First of all, the exploit always makes sure that <code>addrvar</code> is an odd number. This is because V8 expects pointers to be <a href="https://v8.dev/blog/pointer-compression#value-tagging-in-v8" target="_blank" rel="noreferrer noopener">tagged</a>, with the least significant bit set. Then, there is the addition of <code>2&lt;&lt;32</code> to <code>addrvar</code>. As was explained before, the second element of <code>point_array</code> takes up 64 bits in memory, while the <code>elements</code> pointer and <code>Array.length</code> both take up only 32 bits. This means that a write to <code>point_array[1]</code> overwrites both members at once and the <code>2&lt;&lt;32</code> just simply sets the <code>Array.length</code>, which is controlled by the most significant 32 bits. Finally, there is the subtraction of <code>8</code> from <code>addrvar</code>. This is because the <code>elements</code> pointer does not point straight to the first element, but instead to a <code>FixedDoubleArray</code> structure, which takes up eight bytes and precedes the actual element data in memory.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wasm.png"><img loading="lazy" decoding="async" width="750" height="130" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wasm.png" alt="" class="wp-image-4736" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wasm.png 750w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wasm-300x52.png 300w" sizes="(max-width: 750px) 100vw, 750px" /></a><figcaption>A dummy WebAssembly program that will get hollowed out and replaced by Magnitude’s shellcode</figcaption></figure></div>



<p>The final step taken by the exploit is converting the arbitrary read/write primitive into arbitrary code execution. For this, it uses a well-known trick that takes advantage of WebAssembly. When V8 JIT-compiles a WebAssembly function, it places the compiled code into memory pages that are both writable and executable (there now <a href="https://securitylab.github.com/research/in_the_wild_chrome_cve_2021_37975/#:~:text=The%20beginning%20of%20the%20end%20of%20wasm%20RWX%3F" target="_blank" rel="noreferrer noopener">seem to be some new mitigations</a> that aim to prevent this trick, but it is still working against V8 versions vulnerable to CVE-2021-21224). The exploit can therefore locate the code of a JIT-compiled WebAssembly function, overwrite it with its own shellcode and then call the original WebAssembly function from Javascript, which executes the shellcode planted there.</p>



<p>Magnitude’s exploit first creates a dummy WebAssembly module that contains a single function called <code>main</code>, which just returns the number <a href="https://simple.wikipedia.org/wiki/42_(answer)" target="_blank" rel="noreferrer noopener">42</a> (the original code of this function doesn’t really matter because it will get overwritten with the shellcode anyway). Using a combination of <code>addrof</code> and <code>arb_read</code>, the exploit obtains the address where V8 JIT-compiled the function <code>main</code>. Interestingly, it then constructs a whole new arbitrary write primitive using an ArrayBuffer with a corrupted backing store pointer and uses this newly constructed primitive to write shellcode to the address of <code>main</code>. While it could theoretically use the first arbitrary write primitive to place the shellcode there, it chooses this second method, most likely because it is more reliable. It seems that the first method might crash V8 under some rare circumstances, which makes it not practical for repeated use, such as when it gets called thousands of times to write a large shellcode buffer into memory.</p>



<p>There are two shellcodes embedded in the exploit. The first one contains an exploit for CVE-2021-31956. This one gets executed first and its goal is to steal the <code>SYSTEM</code> token to elevate the privileges of the current process. After the first shellcode returns, the second shellcode gets planted inside the JIT-compiled WebAssembly function and executed. This second shellcode injects Magniber ransomware into some already running process and lets it encrypt the victim’s drives.</p>



<h3 class="wp-block-heading">CVE-2021-31956</h3>



<p>Let’s now turn our attention to the second exploit in the chain, which Magnitude uses to escape the Chromium sandbox. This is an exploit for CVE-2021-31956, a paged pool buffer overflow in the Windows kernel. It was discovered in June 2021 by <a href="https://twitter.com/oct0xor" target="_blank" rel="noreferrer noopener">Boris Larin</a> from Kaspersky, who found it being used as a zero-day in the wild as a part of the <a href="https://securelist.com/puzzlemaker-chrome-zero-day-exploit-chain/102771/" target="_blank" rel="noreferrer noopener">PuzzleMaker attack</a>. The Kaspersky blog post about PuzzleMaker briefly describes the vulnerability and the way the attackers chose to exploit it. However, much more information about the vulnerability can be found in a <a href="https://research.nccgroup.com/2021/07/15/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-1/" target="_blank" rel="noreferrer noopener">two</a>&#8211;<a href="https://research.nccgroup.com/2021/08/17/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-2/" target="_blank" rel="noreferrer noopener">part</a> blog series by <a href="https://twitter.com/alexjplaskett" target="_blank" rel="noreferrer noopener">Alex Plaskett</a> from NCC Group. This blog series goes into great detail and pretty much provides a step-by-step guide on how to exploit the vulnerability. We found that the attackers behind Magnitude followed this guide very closely, even though there are certainly many other approaches that they could have chosen for exploitation. This shows yet again that publishing vulnerability research can be a double-edged sword. While the blog series certainly helped many defend against the vulnerability, it also made it much easier for the attackers to weaponize it.</p>



<p>The vulnerability lies in <code>ntfs.sys</code>, inside the function <code>NtfsQueryEaUserEaList</code>, which is directly reachable from the syscall <code>NtQueryEaFile</code>. This syscall internally allocates a temporary buffer on the paged pool (the size of which is controllable by a syscall parameter) and places there the NTFS Extended Attributes associated with a given file. Individual Extended Attributes are separated by a padding of up to four bytes. By making the padding start directly at the end of the allocated pool chunk, it is possible to trigger an integer underflow which results in <code>NtfsQueryEaUserEaList</code> writing subsequent Extended Attributes past the end of the pool chunk. The idea behind the exploit is to spray the pool so that chunks containing certain <a href="https://blog.quarkslab.com/playing-with-the-windows-notification-facility-wnf.html" target="_blank" rel="noreferrer noopener">Windows Notification Facility</a> (WNF) structures can be corrupted by the overflow. Using some WNF magic that will be explained later, the exploit gains an arbitrary read/write primitive, which it uses to steal the <code>SYSTEM</code> token.</p>



<p>The exploit starts by checking the victim’s Windows build number. Only builds 18362, 18363, 19041, and 19042 (19H1 &#8211; 20H2) are supported, and the exploit bails out if it finds itself running on a different build. The build number is then used to determine proper offsets into the <code>_EPROCESS</code> structure as well as to determine correct syscall numbers, because syscalls are invoked directly by the exploit, bypassing the usual syscall stubs in <code>ntdll</code>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum.png"><img loading="lazy" decoding="async" width="1024" height="423" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum-1024x423.png" alt="" class="wp-image-4737" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum-1024x423.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum-300x124.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum-768x317.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/buildnum.png 1118w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption>Check for the victim’s Windows build number</figcaption></figure></div>



<p>Next, the exploit brute-forces file handles, until it finds one on which it can use the <code>NtSetEAFile</code> syscall to set its NTFS Extended Attributes. Two attributes are set on this file, crafted to trigger an overflow of <code>0x10</code> bytes into the next pool chunk later when <code>NtQueryEaFile</code> gets called.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/EaBuffer.png"><img loading="lazy" decoding="async" width="748" height="228" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/EaBuffer.png" alt="" class="wp-image-4738" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/EaBuffer.png 748w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/EaBuffer-300x91.png 300w" sizes="(max-width: 748px) 100vw, 748px" /></a><figcaption>Specially crafted NTFS Extended Attributes, designed to cause a paged pool buffer overflow </figcaption></figure></div>



<p>When the specially crafted NTFS Extended Attributes are set, the exploit proceeds to spray the paged pool with <code>_WNF_NAME_INSTANCE</code> and <code>_WNF_STATE_DATA</code> structures. These structures are sprayed using the syscalls <code>NtCreateWnfStateName</code> and <code>NtUpdateWnfStateData</code>, respectively. The exploit then creates 10 000 extra <code>_WNF_STATE_DATA</code> structures in a row and frees each other one using <code>NtDeleteWnfStateData</code>. This creates holes between <code>_WNF_STATE_DATA</code> chunks, which are likely to get reclaimed on future pool allocations of similar size.&nbsp;</p>



<p>With this in mind, the exploit now triggers the vulnerability using <code>NtQueryEaFile</code>, with a high likelihood of getting a pool chunk preceding a random <code>_WNF_STATE_DATA</code> chunk and thus overflowing into that chunk. If that really happens, the <code>_WNF_STATE_DATA</code> structure will get corrupted as shown below. However, the exploit doesn’t know which <code>_WNF_STATE_DATA</code> structure got corrupted, if any. To find the corrupted structure, it has to iterate over all of them and query its <code>ChangeStamp</code> using <code>NtQueryWnfStateData</code>. If the <code>ChangeStamp</code> contains the magic number <code>0xcafe</code>, the exploit found the corrupted chunk. In case the overflow does not hit any <code>_WNF_STATE_DATA</code> chunk, the exploit just simply tries triggering the vulnerability again, up to 32 times. Note that in case the overflow didn’t hit a <code>_WNF_STATE_DATA</code> chunk, it might have corrupted a random chunk in the paged pool, which could result in a BSoD. However, during our testing of the exploit, we didn’t get any BSoDs during normal exploitation, which suggests that the pool spraying technique used by the attackers is relatively robust.</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wnf_state_data.png"><img loading="lazy" decoding="async" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wnf_state_data.png" alt="" class="wp-image-4739" width="683" height="132" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wnf_state_data.png 683w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/wnf_state_data-300x58.png 300w" sizes="(max-width: 683px) 100vw, 683px" /></a><figcaption>The corrupted <code>_WNF_STATE_DATA</code> instance. <code>AllocatedSize</code> and <code>DataSize</code> were both artificially increased, while <code>ChangeStamp</code> got set to an easily recognizable value.</figcaption></figure></div>



<p>After a successful <code>_WNF_STATE_DATA</code> corruption, more <code>_WNF_NAME_INSTANCE</code> structures get sprayed on the pool, with the idea that they will reclaim the other chunks freed by <code>NtDeleteWnfStateData</code>. By doing this, the attackers are trying to position a <code>_WNF_NAME_INSTANCE</code> chunk after the corrupted <code>_WNF_STATE_DATA</code> chunk in memory. To explain why they would want this, let’s first discuss what they achieved by corrupting the <code>_WNF_STATE_DATA</code> chunk.</p>



<p>The <code>_WNF_STATE_DATA</code> structure can be thought of as a header preceding an actual <code>WnfStateData</code> buffer in memory. The <code>WnfStateData</code> buffer can be read using the syscall <code>NtQueryWnfStateData</code> and written to using <code>NtUpdateWnfStateData</code>. <code>_WNF_STATE_DATA.AllocatedSize</code> determines how many bytes can be written to <code>WnfStateData</code> and <code>_WNF_STATE_DATA.DataSize</code> determines how many bytes can be read. By corrupting these two fields and setting them to a high value, the exploit gains a relative memory read/write primitive, obtaining the ability to read/write memory even after the original <code>WnfStateData</code> buffer. Now it should be clear why the attackers would want a <code>_WNF_NAME_INSTANCE</code> chunk after a corrupted <code>_WNF_STATE_DATA</code> chunk: they can use the overread/overwrite to have full control over a <code>_WNF_NAME_INSTANCE</code> structure. They just need to perform an overread and scan the overread memory for bytes <code>03 09 A8</code>, which denote the start of their <code>_WNF_NAME_INSTANCE</code> structure. If they want to change something in this structure, they can just modify some of the overread bytes and overwrite them back using <code>NtUpdateWnfStateData</code>.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/scan_0309A8.png"><img loading="lazy" decoding="async" width="461" height="199" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/scan_0309A8.png" alt="" class="wp-image-4740" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/scan_0309A8.png 461w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/scan_0309A8-300x130.png 300w" sizes="(max-width: 461px) 100vw, 461px" /></a><figcaption>The exploit scans the overread memory, looking for a <code>_WNF_NAME_INSTANCE</code> header. <code>0x0903</code> here represents the <code>NodeTypeCode</code>, while <code>0xA8</code> is a preselected <code>NodeByteSize</code>.</figcaption></figure></div>



<p>What is so interesting about a <code>_WNF_NAME_INSTANCE</code> structure, that the attackers want to have full control over it? Well, first of all, at offset <code>0x98</code> there is <code>_WNF_NAME_INSTANCE.CreatorProcess</code>, which gives them a pointer to <code>_EPROCESS</code> relevant to the current process. Kaspersky reported that PuzzleMaker used a separate information disclosure vulnerability, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31955" target="_blank" rel="noreferrer noopener">CVE-2021-31955</a>, to leak the <code>_EPROCESS</code> base address. However, the attackers behind Magnitude do not need to use a second vulnerability, because the <code>_EPROCESS</code> address is just there for the taking.</p>



<p>Another important offset is <code>0x58</code>, which corresponds to <code>_WNF_NAME_INSTANCE.StateData</code>. As the name suggests, this is a pointer to a <code>_WNF_STATE_DATA</code> structure. By modifying this, the attackers can not only enlarge the <code>WnfStateData</code> buffer but also redirect it to an arbitrary address, which gives them an arbitrary read/write primitive. There are some constraints though, such as that the <code>StateData</code> pointer has to point <code>0x10</code> bytes before the address that is to be read/written and that there has to be some data there that makes sense when interpreted as a <code>_WNF_STATE_DATA</code> structure.</p>



<p>The <code>StateData</code> pointer gets first set to <code>_EPROCESS+0x28</code>, which allows the exploit to read <code>_KPROCESS.ThreadListHead</code> (interestingly, this value gets leaked using <code>ChangeStamp</code> and <code>DataSize</code>, not through <code>WnfStateData</code>). The <code>ThreadListHead</code> points to <code>_KTHREAD.ThreadListEntry</code> of the first thread, which is the current thread in the context of Chromium exploitation. By subtracting the offset of <code>ThreadListEntry</code>, the exploit gets the <code>_KTHREAD</code> base address for the current thread.&nbsp;</p>



<p>With the base address of <code>_KTHREAD</code>, the exploit points <code>StateData</code> to <code>_KTHREAD+0x220</code>, which allows it to read/write up to three bytes starting from <code>_KTHREAD+0x230</code>. It uses this to set the byte at <code>_KTHREAD+0x232</code> to zero. On the targeted Windows builds, the offset <code>0x232</code> corresponds to <code>_KTHREAD.PreviousMode</code>. Setting its value to <code>SystemMode=0</code> tricks the kernel into believing that some of the thread’s syscalls are actually originating from the kernel. Specifically, this allows the thread to use the <code>NtReadVirtualMemory</code> and <code>NtWriteVirtualMemory</code> syscalls to perform reads and writes to the kernel address space.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/previous_mode.png"><img loading="lazy" decoding="async" width="756" height="47" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/previous_mode.png" alt="" class="wp-image-4741" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/previous_mode.png 756w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/previous_mode-300x19.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/previous_mode-736x47.png 736w" sizes="(max-width: 756px) 100vw, 756px" /></a><figcaption>The exploit corrupting <code>_KTHREAD.PreviousMode</code></figcaption></figure></div>



<p>As was the case in the Chromium exploit, the attackers here just traded an arbitrary read/write primitive for yet another arbitrary read/write primitive. However, note that the new primitive based on <code>PreviousMode</code> is a significant upgrade compared to the original <code>StateData</code> one. Most importantly, the new primitive is free of the constraints associated with the original one. The new primitive is also more reliable because there are no longer race conditions that could potentially cause a BSoD. Not to mention that just simply calling <code>NtWriteVirtualMemory</code> is much faster and much less awkward than abusing multiple WNF-related syscalls to achieve the same result.</p>



<p>With a robust arbitrary read/write primitive in place, the exploit can finally do its thing and proceed to steal the <code>SYSTEM</code> token. Using the leaked <code>_EPROCESS</code> address from before, it finds <code>_EPROCESS.ActiveProcessLinks</code>, which leads to a linked list of other <code>_EPROCESS</code> structures. It iterates over this list until it finds the <code>System</code> process. Then it reads System’s <code>_EPROCESS.Token</code> and assigns this value (with some of the <code>RefCnt</code> bits masked out) to its own <code>_EPROCESS</code> structure. Finally, the exploit also turns off some mitigation flags in <code>_EPROCESS.MitigationFlags</code>.</p>



<p>Now, the exploit has successfully elevated privileges and can pass control to the other shellcode, which was designed to load Magniber ransomware. But before it does that, the exploit performs many cleanup actions that are necessary to avoid blue screening later on. It iterates over WNF-related structures using <code>TemporaryNamesList</code> from <code>_EPROCESS.WnfContext</code> and fixes all the <code>_WNF_NAME_INSTANCE</code> structures that got overflown into at the beginning of the exploit. It also attempts to fix the <code>_POOL_HEADER</code> of the overflown <code>_WNF_STATE_DATA</code> chunks. Finally, the exploit gets rid of both read/write primitives by setting <code>_KTHREAD.PreviousMode</code> back to <code>UserMode=1</code> and using one last <code>NtUpdateWnfStateData </code>syscall to restore the corrupted <code>StateData</code> pointer back to its original value.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/cleanup.png"><img loading="lazy" decoding="async" width="631" height="658" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/cleanup.png" alt="" class="wp-image-4742" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/cleanup.png 631w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/01/cleanup-288x300.png 288w" sizes="(max-width: 631px) 100vw, 631px" /></a><figcaption>Fixups performed on previously corrupted <code>_WNF_NAME_INSTANCE</code> structures</figcaption></figure></div>



<h3 class="wp-block-heading">Final Thoughts</h3>



<p>If this isn’t the first time you’re hearing about Magnitude, you might have noticed that it often exploits vulnerabilities that were previously weaponized by APT groups, who used them as zero-days in the wild. To name a few recent examples, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31956" target="_blank" rel="noreferrer noopener">CVE-2021-31956</a> was exploited by <a href="https://securelist.com/puzzlemaker-chrome-zero-day-exploit-chain/102771/" target="_blank" rel="noreferrer noopener">PuzzleMaker</a>, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26411" target="_blank" rel="noreferrer noopener">CVE-2021-26411</a> was used in a <a href="https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/" target="_blank" rel="noreferrer noopener">high-profile attack</a> targeting security researchers, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-0986" target="_blank" rel="noreferrer noopener">CVE-2020-0986</a> was abused in <a href="https://securelist.com/operation-powerfall-cve-2020-0986-and-variants/98329/" target="_blank" rel="noreferrer noopener">Operation Powerfall</a>, and <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2019-1367" target="_blank" rel="noreferrer noopener">CVE-2019-1367</a> was <a href="https://www.blog.google/threat-analysis-group/identifying-vulnerabilities-and-protecting-you-phishing/" target="_blank" rel="noreferrer noopener">reported</a> to be exploited in the wild by an undisclosed threat actor (who might be DarkHotel APT <a href="https://blogs.360.cn/post/apt-c-06_0day.html" target="_blank" rel="noreferrer noopener">according to Qihoo 360</a>). The fact that the attackers behind Magnitude are so successful in reproducing complex exploits with no public PoCs could lead to some suspicion that they have somehow obtained under-the-counter access to private zero-day exploit samples. After all, we don’t know much about the attackers, but we do know that they are skilled exploit developers, and perhaps Magnitude is not their only source of income. But before we jump to any conclusions, we should mention that there are other, more plausible explanations for why they should prioritize vulnerabilities that were once exploited as zero-days. First, APT groups usually know what they are doing<sup>[citation needed]</sup>. If an APT group decides that a vulnerability is worth exploiting in the wild, that generally means that the vulnerability is reliably weaponizable. In a way, the attackers behind Magnitude could abuse this to let the APT groups do the hard work of selecting high-quality vulnerabilities for them. Second, zero-days in the wild usually attract a lot of research attention, which means that there are often detailed writeups that analyze the vulnerability’s root cause and speculate about how it could get exploited. These writeups make exploit development a lot easier compared to more obscure vulnerabilities which attracted only a limited amount of research.</p>



<p>As we’ve shown in this blog post, both Magnitude and Underminer managed to successfully develop exploit chains for Chromium on Windows. However, none of the exploit chains were particularly successful in terms of the number of exploited victims. So what does this mean for the future of exploit kits? We believe that unless some new, hard-to-patch vulnerability comes up, exploit kits are not something that the average Google Chrome user should have to worry about much. After all, it has to be acknowledged that Google does a great job at patching and reducing the browser’s attack surface. Unfortunately, the same cannot be said for all other Chromium-based browsers. We found that a big portion of those that we protected from Underminer were running Chromium forks that were months (or even years) behind on patching. Because of this, we recommend avoiding Chromium forks that are slow in applying security patches from the upstream. Also note that some Chromium forks might have vulnerabilities in their own custom codebase. But as long as the number of users running the vulnerable forks is relatively low, exploit kit developers will probably not even bother with implementing exploits specific just for them.</p>



<p>Finally, we should also mention that it is not entirely impossible for exploit kits to attack using zero-day or n-day exploits. If that were to happen, the attackers would probably carry out a massive burst of malvertising or watering hole campaigns. In such a scenario, even regular Google Chrome users would be at risk. The damage done by such an attack could be enormous, depending on the reaction time of browser developers, ad networks, security companies, LEAs, and other concerned parties. There are basically three ways that the attackers could get their hands on a zero-day exploit: they could either buy it, discover it themselves, or discover it being used by some other threat actor. Fortunately, using some simple math we can see that the campaign would have to be very successful if the attackers wanted to recover the cost of the zero-day, which is likely to discourage most of them. Regarding n-day exploitation, it all boils down to a race if the attackers can develop a working exploit sooner than a patch gets written and rolled out to the end users. It’s a hard race to win for the attackers, but it has been won before. We know of at least <a href="https://github.com/r4j0x00/exploits/commit/d3a21075644a124c1bbc5966d4c43337191db9f6" target="_blank" rel="noreferrer noopener">two</a> <a href="https://web.archive.org/web/20210414162911/https://github.com/avboy1337/1195777-chrome0day/commit/e2a004a0a6cc9bbd3780d6bd585eee1131adbb4f" target="_blank" rel="noreferrer noopener">cases</a> when an n-day exploit working against the latest Google Chrome version was dumped on GitHub (this probably doesn’t need to be written down, but dumping such exploits on GitHub is not a very bright idea). Fortunately, these were just renderer exploits and there were no accompanying sandbox escape exploits (which would be needed for full weaponization). But if it is possible to win the race for one exploit, it’s not unthinkable that an attacker could win it for two exploits at the same time.</p>



<h4 class="wp-block-heading">Indicators of Compromise (IoCs)</h4>



<h6 class="wp-block-heading">Magnitude</h6>



<figure class="wp-block-table"><table><tbody><tr><td>SHA-256</td><td>Note</td></tr><tr><td><code>71179e5677cbdfd8ab85507f90d403afb747fba0e2188b15bd70aac3144ae61a</code></td><td>CVE-2021-21224 exploit</td></tr><tr><td><code>a7135b92fc8072d0ad9a4d36e81a6b6b78f1528558ef0b19cb51502b50cffe6d</code></td><td>CVE-2021-21224 exploit</td></tr><tr><td><code>6c7ae2c24eaeed1cac0a35101498d87c914c262f2e0c2cd9350237929d3e1191</code></td><td>CVE-2021-31956 exploit</td></tr><tr><td><code>8c52d4a8f76e1604911cff7f6618ffaba330324490156a464a8ceaf9b590b40a</code></td><td>payload injector</td></tr><tr><td><code>8ff658257649703ee3226c1748bbe9a2d5ab19f9ea640c52fc7d801744299676</code></td><td>payload injector</td></tr></tbody></table></figure>



<h6 class="wp-block-heading">Underminer</h6>



<figure class="wp-block-table"><table><tbody><tr><td>SHA-256</td><td>Note</td></tr><tr><td><code>2ac255e1e7a93e6709de3bbefbc4e7955af44dbc6f977b60618237282b1fb970</code></td><td>CVE-2021-21224 exploit</td></tr><tr><td><code>9552e0819f24deeea876ba3e7d5eff2d215ce0d3e1f043095a6b1db70327a3d2</code></td><td>HiddenBee loader</td></tr><tr><td><code>7a3ba9b9905f3e59e99b107e329980ea1c562a5522f5c8f362340473ebf2ac6d</code></td><td>HiddenBee module container</td></tr><tr><td><code>2595f4607fad7be0a36cb328345a18f344be0c89ab2f98d1828d4154d68365f8</code></td><td>amd64/coredll.bin</td></tr><tr><td><code>ed7e6318efa905f71614987942a94df56fd0e17c63d035738daf97895e8182ab</code></td><td>amd64/pcs.bin</td></tr><tr><td><code>c2c51aa8317286c79c4d012952015c382420e4d9049914c367d6e72d81185494</code></td><td>CVE-2019-0808 exploit</td></tr><tr><td><code>d88371c41fc25c723b4706719090f5c8b93aad30f762f62f2afcd09dd3089169</code></td><td>CVE-2020-1020 exploit</td></tr><tr><td><code>b201fd9a3622aff0b0d64e829c9d838b5f150a9b20a600e087602b5cdb11e7d3</code></td><td>CVE-2020-1054 exploit</td></tr></tbody></table></figure>
                                            </div>

                </article>

                                    <div class="entry-tags clearfix">
                        <span>Tagged as</span><a href="https://decoded.avast.io/tag/cve-2021-21224/" rel="tag">CVE-2021-21224</a>, <a href="https://decoded.avast.io/tag/cve-2021-31956/" rel="tag">CVE-2021-31956</a>, <a href="https://decoded.avast.io/tag/exploit/" rel="tag">exploit</a>, <a href="https://decoded.avast.io/tag/exploit-kit/" rel="tag">exploit kit</a>, <a href="https://decoded.avast.io/tag/magnitude/" rel="tag">Magnitude</a>, <a href="https://decoded.avast.io/tag/underminer/" rel="tag">Underminer</a>                    </div>
                
                                     
		<div class="meks_ess no-labels"><span class="johannes-share-label">Share:</span><a href="#" class="meks_ess-item socicon-twitter" data-url="http://twitter.com/intent/tweet?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fexploit-kits-vs-google-chrome%2F&amp;text=Exploit%20Kits%20vs.%20Google%20Chrome"><span>X</span></a><a href="#" class="meks_ess-item socicon-facebook" data-url="http://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fexploit-kits-vs-google-chrome%2F&amp;t=Exploit%20Kits%20vs.%20Google%20Chrome"><span>Facebook</span></a></div>                
                               
		        

            </div>

            
        </div>
    </div>
</div>

        <div class="johannes-section johannes-related section-margin johannes-bg-alt-2">
        <div class="container">
            <div class="section-head">
                <h5 class="section-title h2">Further reading</h5>
            </div>
            <div class="section-content row justify-content-center">
                <div class="col-12 ">
                    <div class="row johannes-items johannes-posts">
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8850 post type-post status-publish format-standard has-post-thumbnail hentry tag-predictions tag-threats category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/"><img width="259" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/12/predictions3.jpeg" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/other-research/" rel="tag" class="cat-item category-other-research">Other/Research</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">December 4, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatintel/">Threat Intelligence Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The digital world is evolving at breakneck speed. In 2025, we’re set to witness transformative changes in cybersecurity that will redefine trust, security, and how we navigate our digital lives. Here’s what we see coming: AI Blurs Reality: Hyper-personalized AI experiences will raise questions...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8842 post type-post status-publish format-standard has-post-thumbnail hentry tag-desktop tag-malware tag-mobile tag-report tag-risk tag-threats category-reports">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/"><img width="291" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/11/jamesathatch_a_group_of_cybersecurity_experts_analysing_graphs__85ce4799-6a1a-45dd-be38-bdb871363db7.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">November 19, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatresearch/">Threat Research Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The third quarter threat report is here—and it’s packed with answers. Our Threat Labs team had uncovered some heavy stories behind the stats, exposing the relentless tactics shaping today’s threat landscape. Here’s what you need to know: 614% explosion in Scam-Yourself Attacks: Over 2 million users...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8701 post type-post status-publish format-standard has-post-thumbnail hentry tag-ai tag-cryptocurrency tag-scam category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-540x304.png 540w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">August 13, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/martinchlumecky1/">Martin Chlumecký</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>As digital currencies have grown, so have cryptocurrency scams, posing significant user risks. The rise of AI and deepfake technology has intensified scams exploiting famous personalities and events by creating realistic fake videos. Platforms like X and YouTube have been especially targeted, with...</p>
	    </div>
        </article>                        </div>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    

    
    
    <footer id="johannes-footer" class="johannes-footer">
        <div class="container">

                            <div class="footer-divider"></div>
                
	<div class="row johannes-footer-widgets justify-content-center">
	    	        	    	        	    	        	    	        	    	</div>
            
                            <div class="johannes-copyright">
                    <p>2024 Copyright © Avast Software s.r.o.</p>
                </div>
                    </div>
    </footer>

            <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>    

</div>


    <a href="javascript:void(0)" id="johannes-goto-top" class="johannes-goto-top"><i class="jf jf-chevron-up"></i></a>

<div class="johannes-action-overlay">

</div><div class="johannes-sidebar johannes-sidebar-hidden">

	<div class="johannes-sidebar-branding">
	    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span>	    <span class="johannes-action-close"><i class="jf jf-close" aria-hidden="true"></i></span>
	</div>	

		<div class="johannes-menu-mobile widget d-md-block d-lg-none">
		<div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Menu</h4>
			    <nav class="menu-main-menu-container"><ul id="menu-main-menu-1" class="johannes-menu johannes-menu-primary"><li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>			                                    <ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>                            		</div>
	</div>

		    <div id="categories-2" class="widget widget_categories"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-32 category-events"><a href="https://decoded.avast.io/category/events/">Events</a>
</li>
	<li class="cat-item cat-item-23 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a>
</li>
	<li class="cat-item cat-item-22 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a>
</li>
	<li class="cat-item cat-item-20 category-network"><a href="https://decoded.avast.io/category/network/">Network</a>
</li>
	<li class="cat-item cat-item-106 category-other-research"><a href="https://decoded.avast.io/category/other-research/">Other/Research</a>
</li>
	<li class="cat-item cat-item-21 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a>
</li>
	<li class="cat-item cat-item-135 category-reports"><a href="https://decoded.avast.io/category/reports/">Reports</a>
</li>
	<li class="cat-item cat-item-1 category-uncategorized"><a href="https://decoded.avast.io/category/uncategorized/">Uncategorized</a>
</li>
			</ul>

			</div></div><div id="tag_cloud-2" class="widget widget_tag_cloud"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Tags</h4><div class="tagcloud"><a href="https://decoded.avast.io/tag/ai/" class="tag-cloud-link tag-link-194 tag-link-position-1" style="font-size: 9.3023255813953pt;" aria-label="AI (3 items)">AI</a>
<a href="https://decoded.avast.io/tag/analysis/" class="tag-cloud-link tag-link-5 tag-link-position-2" style="font-size: 20.480620155039pt;" aria-label="analysis (42 items)">analysis</a>
<a href="https://decoded.avast.io/tag/android/" class="tag-cloud-link tag-link-6 tag-link-position-3" style="font-size: 12.015503875969pt;" aria-label="Android (6 items)">Android</a>
<a href="https://decoded.avast.io/tag/apt/" class="tag-cloud-link tag-link-63 tag-link-position-4" style="font-size: 12.015503875969pt;" aria-label="APT (6 items)">APT</a>
<a href="https://decoded.avast.io/tag/backdoor/" class="tag-cloud-link tag-link-65 tag-link-position-5" style="font-size: 14.837209302326pt;" aria-label="backdoor (12 items)">backdoor</a>
<a href="https://decoded.avast.io/tag/botnet/" class="tag-cloud-link tag-link-157 tag-link-position-6" style="font-size: 10.387596899225pt;" aria-label="botnet (4 items)">botnet</a>
<a href="https://decoded.avast.io/tag/brazil/" class="tag-cloud-link tag-link-38 tag-link-position-7" style="font-size: 8pt;" aria-label="brazil (2 items)">brazil</a>
<a href="https://decoded.avast.io/tag/cryptocurrency/" class="tag-cloud-link tag-link-105 tag-link-position-8" style="font-size: 11.255813953488pt;" aria-label="cryptocurrency (5 items)">cryptocurrency</a>
<a href="https://decoded.avast.io/tag/cryptomining/" class="tag-cloud-link tag-link-9 tag-link-position-9" style="font-size: 14.077519379845pt;" aria-label="cryptomining (10 items)">cryptomining</a>
<a href="https://decoded.avast.io/tag/csrf/" class="tag-cloud-link tag-link-26 tag-link-position-10" style="font-size: 9.3023255813953pt;" aria-label="csrf (3 items)">csrf</a>
<a href="https://decoded.avast.io/tag/ddos/" class="tag-cloud-link tag-link-173 tag-link-position-11" style="font-size: 9.3023255813953pt;" aria-label="ddos (3 items)">ddos</a>
<a href="https://decoded.avast.io/tag/decryptor/" class="tag-cloud-link tag-link-165 tag-link-position-12" style="font-size: 12.558139534884pt;" aria-label="decryptor (7 items)">decryptor</a>
<a href="https://decoded.avast.io/tag/decryptors/" class="tag-cloud-link tag-link-134 tag-link-position-13" style="font-size: 15.271317829457pt;" aria-label="decryptors (13 items)">decryptors</a>
<a href="https://decoded.avast.io/tag/desktop/" class="tag-cloud-link tag-link-139 tag-link-position-14" style="font-size: 15.271317829457pt;" aria-label="desktop (13 items)">desktop</a>
<a href="https://decoded.avast.io/tag/dirtymoe/" class="tag-cloud-link tag-link-117 tag-link-position-15" style="font-size: 11.255813953488pt;" aria-label="DirtyMoe (5 items)">DirtyMoe</a>
<a href="https://decoded.avast.io/tag/dns-hijack/" class="tag-cloud-link tag-link-27 tag-link-position-16" style="font-size: 9.3023255813953pt;" aria-label="dns hijack (3 items)">dns hijack</a>
<a href="https://decoded.avast.io/tag/exploit/" class="tag-cloud-link tag-link-28 tag-link-position-17" style="font-size: 12.558139534884pt;" aria-label="exploit (7 items)">exploit</a>
<a href="https://decoded.avast.io/tag/fake-app/" class="tag-cloud-link tag-link-7 tag-link-position-18" style="font-size: 8pt;" aria-label="fake-app (2 items)">fake-app</a>
<a href="https://decoded.avast.io/tag/ghostdns/" class="tag-cloud-link tag-link-29 tag-link-position-19" style="font-size: 9.3023255813953pt;" aria-label="ghostdns (3 items)">ghostdns</a>
<a href="https://decoded.avast.io/tag/google-play-store/" class="tag-cloud-link tag-link-40 tag-link-position-20" style="font-size: 8pt;" aria-label="Google Play Store (2 items)">Google Play Store</a>
<a href="https://decoded.avast.io/tag/iot/" class="tag-cloud-link tag-link-13 tag-link-position-21" style="font-size: 13.100775193798pt;" aria-label="iot (8 items)">iot</a>
<a href="https://decoded.avast.io/tag/malware/" class="tag-cloud-link tag-link-37 tag-link-position-22" style="font-size: 22pt;" aria-label="malware (58 items)">malware</a>
<a href="https://decoded.avast.io/tag/mobile/" class="tag-cloud-link tag-link-8 tag-link-position-23" style="font-size: 16.899224806202pt;" aria-label="mobile (19 items)">mobile</a>
<a href="https://decoded.avast.io/tag/obfuscation/" class="tag-cloud-link tag-link-57 tag-link-position-24" style="font-size: 11.255813953488pt;" aria-label="obfuscation (5 items)">obfuscation</a>
<a href="https://decoded.avast.io/tag/p-code/" class="tag-cloud-link tag-link-110 tag-link-position-25" style="font-size: 11.255813953488pt;" aria-label="P-Code (5 items)">P-Code</a>
<a href="https://decoded.avast.io/tag/phishing/" class="tag-cloud-link tag-link-31 tag-link-position-26" style="font-size: 11.255813953488pt;" aria-label="phishing (5 items)">phishing</a>
<a href="https://decoded.avast.io/tag/predictions/" class="tag-cloud-link tag-link-14 tag-link-position-27" style="font-size: 8pt;" aria-label="predictions (2 items)">predictions</a>
<a href="https://decoded.avast.io/tag/ransomware/" class="tag-cloud-link tag-link-47 tag-link-position-28" style="font-size: 15.813953488372pt;" aria-label="ransomware (15 items)">ransomware</a>
<a href="https://decoded.avast.io/tag/rat/" class="tag-cloud-link tag-link-34 tag-link-position-29" style="font-size: 11.255813953488pt;" aria-label="rat (5 items)">rat</a>
<a href="https://decoded.avast.io/tag/report/" class="tag-cloud-link tag-link-136 tag-link-position-30" style="font-size: 14.837209302326pt;" aria-label="report (12 items)">report</a>
<a href="https://decoded.avast.io/tag/research/" class="tag-cloud-link tag-link-109 tag-link-position-31" style="font-size: 12.558139534884pt;" aria-label="Research (7 items)">Research</a>
<a href="https://decoded.avast.io/tag/reversing/" class="tag-cloud-link tag-link-45 tag-link-position-32" style="font-size: 16.46511627907pt;" aria-label="reversing (17 items)">reversing</a>
<a href="https://decoded.avast.io/tag/risk/" class="tag-cloud-link tag-link-138 tag-link-position-33" style="font-size: 14.837209302326pt;" aria-label="risk (12 items)">risk</a>
<a href="https://decoded.avast.io/tag/rootkit/" class="tag-cloud-link tag-link-126 tag-link-position-34" style="font-size: 11.255813953488pt;" aria-label="rootkit (5 items)">rootkit</a>
<a href="https://decoded.avast.io/tag/router/" class="tag-cloud-link tag-link-25 tag-link-position-35" style="font-size: 9.3023255813953pt;" aria-label="router (3 items)">router</a>
<a href="https://decoded.avast.io/tag/security/" class="tag-cloud-link tag-link-54 tag-link-position-36" style="font-size: 9.3023255813953pt;" aria-label="security (3 items)">security</a>
<a href="https://decoded.avast.io/tag/series/" class="tag-cloud-link tag-link-113 tag-link-position-37" style="font-size: 15.813953488372pt;" aria-label="series (15 items)">series</a>
<a href="https://decoded.avast.io/tag/spyware/" class="tag-cloud-link tag-link-35 tag-link-position-38" style="font-size: 8pt;" aria-label="spyware (2 items)">spyware</a>
<a href="https://decoded.avast.io/tag/stealer/" class="tag-cloud-link tag-link-36 tag-link-position-39" style="font-size: 13.100775193798pt;" aria-label="stealer (8 items)">stealer</a>
<a href="https://decoded.avast.io/tag/takedown/" class="tag-cloud-link tag-link-50 tag-link-position-40" style="font-size: 8pt;" aria-label="takedown (2 items)">takedown</a>
<a href="https://decoded.avast.io/tag/threat-intel/" class="tag-cloud-link tag-link-11 tag-link-position-41" style="font-size: 8pt;" aria-label="threat-intel (2 items)">threat-intel</a>
<a href="https://decoded.avast.io/tag/threats/" class="tag-cloud-link tag-link-137 tag-link-position-42" style="font-size: 15.596899224806pt;" aria-label="threats (14 items)">threats</a>
<a href="https://decoded.avast.io/tag/vb/" class="tag-cloud-link tag-link-108 tag-link-position-43" style="font-size: 12.558139534884pt;" aria-label="VB (7 items)">VB</a>
<a href="https://decoded.avast.io/tag/vulnerability/" class="tag-cloud-link tag-link-12 tag-link-position-44" style="font-size: 12.015503875969pt;" aria-label="vulnerability (6 items)">vulnerability</a>
<a href="https://decoded.avast.io/tag/worm/" class="tag-cloud-link tag-link-49 tag-link-position-45" style="font-size: 8pt;" aria-label="worm (2 items)">worm</a></div>
</div></div>
		<div id="recent-posts-2" class="widget widget_recent_entries"><div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/">Decrypted: DoNex Ransomware and its Predecessors</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/">New Diamorphine rootkit variant seen undetected in the wild</a>
									</li>
					</ul>

		</div></div><div id="archives-2" class="widget widget_archive"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Archive</h4>
			<ul>
					<li><a href='https://decoded.avast.io/2024/12/'>December 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/11/'>November 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/08/'>August 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/07/'>July 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/06/'>June 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/05/'>May 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/04/'>April 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/02/'>February 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/01/'>January 2024</a></li>
	<li><a href='https://decoded.avast.io/2023/12/'>December 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/11/'>November 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/10/'>October 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/09/'>September 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/08/'>August 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/07/'>July 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/06/'>June 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/05/'>May 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/04/'>April 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/02/'>February 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/01/'>January 2023</a></li>
	<li><a href='https://decoded.avast.io/2022/12/'>December 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/11/'>November 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/10/'>October 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/09/'>September 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/08/'>August 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/07/'>July 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/06/'>June 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/05/'>May 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/04/'>April 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/03/'>March 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/02/'>February 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/01/'>January 2022</a></li>
	<li><a href='https://decoded.avast.io/2021/12/'>December 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/11/'>November 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/10/'>October 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/09/'>September 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/08/'>August 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/07/'>July 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/06/'>June 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/05/'>May 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/04/'>April 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/03/'>March 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/02/'>February 2021</a></li>
	<li><a href='https://decoded.avast.io/2020/12/'>December 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/11/'>November 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/10/'>October 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/09/'>September 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/08/'>August 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/06/'>June 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/05/'>May 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/04/'>April 2020</a></li>
	<li><a href='https://decoded.avast.io/2019/12/'>December 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/09/'>September 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/08/'>August 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/07/'>July 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/04/'>April 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/03/'>March 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/02/'>February 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/01/'>January 2019</a></li>
	<li><a href='https://decoded.avast.io/2018/08/'>August 2018</a></li>
	<li><a href='https://decoded.avast.io/2018/01/'>January 2018</a></li>
	<li><a href='https://decoded.avast.io/2017/10/'>October 2017</a></li>
			</ul>

			</div></div><div id="meta-2" class="widget widget_meta"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Meta</h4>
		<ul>
						<li><a rel="nofollow" href="https://decoded.avast.io/wp-login.php">Log in</a></li>
			<li><a href="https://decoded.avast.io/feed/">Entries feed</a></li>
			<li><a href="https://decoded.avast.io/comments/feed/">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</div></div>    
</div>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.masonry.min.js?ver=3.1.2b" id="jquery-masonry-js"></script>
<script type="text/javascript" id="johannes-main-js-extra">
/* <![CDATA[ */
var johannes_js_settings = {"rtl_mode":"","header_sticky":"","header_sticky_offset":"300","header_sticky_up":"","popup":"1","go_to_top":"1","grid":{"column":50,"gutter":{"xs":15,"sm":15,"md":30,"lg":30,"xl":48},"breakpoint":{"xs":0,"sm":374,"md":600,"lg":900,"xl":1128}}};
/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/themes/johannes/assets/js/min.js?ver=1.1.3" id="johannes-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/js/main.js?ver=1.3" id="meks_ess-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.7" id="page-links-to-js"></script>
<script type="text/javascript">(function (undefined) {let scriptOptions={"_localizedStrings":{"redirect_overlay_title":"Hold On","redirect_overlay_text":"You are being redirected to another page,<br>it may take a few seconds.","webview_notification_text":"The selected provider doesn't support embedded browsers!"},"_targetWindow":"prefer-popup","_redirectOverlay":"overlay-with-spinner-and-message","_unsupportedWebviewBehavior":""};
/**
 * Used when Cross-Origin-Opener-Policy blocked the access to the opener. We can't have a reference of the opened windows, so we should attempt to refresh only the windows that has opened popups.
 */
window._nslHasOpenedPopup = false;
window._nslWebViewNoticeElement = null;

window.NSLPopup = function (url, title, w, h) {
    const userAgent = navigator.userAgent,
        mobile = function () {
            return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                /\b(iP[ao]d)/.test(userAgent) ||
                /Android/i.test(userAgent) ||
                /Mobile/i.test(userAgent);
        },
        screenX = window.screenX !== undefined ? window.screenX : window.screenLeft,
        screenY = window.screenY !== undefined ? window.screenY : window.screenTop,
        outerWidth = window.outerWidth !== undefined ? window.outerWidth : document.documentElement.clientWidth,
        outerHeight = window.outerHeight !== undefined ? window.outerHeight : document.documentElement.clientHeight - 22,
        targetWidth = mobile() ? null : w,
        targetHeight = mobile() ? null : h,
        left = parseInt(screenX + (outerWidth - targetWidth) / 2, 10),
        right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
        features = [];
    if (targetWidth !== null) {
        features.push('width=' + targetWidth);
    }
    if (targetHeight !== null) {
        features.push('height=' + targetHeight);
    }
    features.push('left=' + left);
    features.push('top=' + right);
    features.push('scrollbars=1');

    const newWindow = window.open(url, title, features.join(','));

    if (window.focus) {
        newWindow.focus();
    }

    window._nslHasOpenedPopup = true;

    return newWindow;
};

let isWebView = null;

function checkWebView() {
    if (isWebView === null) {
        function _detectOS(ua) {
            if (/Android/.test(ua)) {
                return "Android";
            } else if (/iPhone|iPad|iPod/.test(ua)) {
                return "iOS";
            } else if (/Windows/.test(ua)) {
                return "Windows";
            } else if (/Mac OS X/.test(ua)) {
                return "Mac";
            } else if (/CrOS/.test(ua)) {
                return "Chrome OS";
            } else if (/Firefox/.test(ua)) {
                return "Firefox OS";
            }
            return "";
        }

        function _detectBrowser(ua) {
            let android = /Android/.test(ua);

            if (/Opera Mini/.test(ua) || / OPR/.test(ua) || / OPT/.test(ua)) {
                return "Opera";
            } else if (/CriOS/.test(ua)) {
                return "Chrome for iOS";
            } else if (/Edge/.test(ua)) {
                return "Edge";
            } else if (android && /Silk\//.test(ua)) {
                return "Silk";
            } else if (/Chrome/.test(ua)) {
                return "Chrome";
            } else if (/Firefox/.test(ua)) {
                return "Firefox";
            } else if (android) {
                return "AOSP";
            } else if (/MSIE|Trident/.test(ua)) {
                return "IE";
            } else if (/Safari\//.test(ua)) {
                return "Safari";
            } else if (/AppleWebKit/.test(ua)) {
                return "WebKit";
            }
            return "";
        }

        function _detectBrowserVersion(ua, browser) {
            if (browser === "Opera") {
                return /Opera Mini/.test(ua) ? _getVersion(ua, "Opera Mini/") :
                    / OPR/.test(ua) ? _getVersion(ua, " OPR/") :
                        _getVersion(ua, " OPT/");
            } else if (browser === "Chrome for iOS") {
                return _getVersion(ua, "CriOS/");
            } else if (browser === "Edge") {
                return _getVersion(ua, "Edge/");
            } else if (browser === "Chrome") {
                return _getVersion(ua, "Chrome/");
            } else if (browser === "Firefox") {
                return _getVersion(ua, "Firefox/");
            } else if (browser === "Silk") {
                return _getVersion(ua, "Silk/");
            } else if (browser === "AOSP") {
                return _getVersion(ua, "Version/");
            } else if (browser === "IE") {
                return /IEMobile/.test(ua) ? _getVersion(ua, "IEMobile/") :
                    /MSIE/.test(ua) ? _getVersion(ua, "MSIE ")
                        :
                        _getVersion(ua, "rv:");
            } else if (browser === "Safari") {
                return _getVersion(ua, "Version/");
            } else if (browser === "WebKit") {
                return _getVersion(ua, "WebKit/");
            }
            return "0.0.0";
        }

        function _getVersion(ua, token) {
            try {
                return _normalizeSemverString(ua.split(token)[1].trim().split(/[^\w\.]/)[0]);
            } catch (o_O) {
            }
            return "0.0.0";
        }

        function _normalizeSemverString(version) {
            const ary = version.split(/[\._]/);
            return (parseInt(ary[0], 10) || 0) + "." +
                (parseInt(ary[1], 10) || 0) + "." +
                (parseInt(ary[2], 10) || 0);
        }

        function _isWebView(ua, os, browser, version, options) {
            switch (os + browser) {
                case "iOSSafari":
                    return false;
                case "iOSWebKit":
                    return _isWebView_iOS(options);
                case "AndroidAOSP":
                    return false;
                case "AndroidChrome":
                    return parseFloat(version) >= 42 ? /; wv/.test(ua) : /\d{2}\.0\.0/.test(version) ? true : _isWebView_Android(options);
            }
            return false;
        }

        function _isWebView_iOS(options) {
            const document = (window["document"] || {});

            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("fullscreenEnabled" in document || "webkitFullscreenEnabled" in document || false);
        }

        function _isWebView_Android(options) {
            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("requestFileSystem" in window || "webkitRequestFileSystem" in window || false);
        }

        const options = {},
            nav = window.navigator || {},
            ua = nav.userAgent || "",
            os = _detectOS(ua),
            browser = _detectBrowser(ua),
            browserVersion = _detectBrowserVersion(ua, browser);

        isWebView = _isWebView(ua, os, browser, browserVersion, options);
    }

    return isWebView;
}

function isAllowedWebViewForUserAgent(provider) {
    const facebookAllowedWebViews = [
        'Instagram',
        'FBAV',
        'FBAN'
    ];
    let whitelist = [];

    if (provider && provider === 'facebook') {
        whitelist = facebookAllowedWebViews;
    }

    const nav = window.navigator || {},
        ua = nav.userAgent || "";

    if (whitelist.length && ua.match(new RegExp(whitelist.join('|')))) {
        return true;
    }

    return false;
}

function disableButtonInWebView(providerButtonElement) {
    if (providerButtonElement) {
        providerButtonElement.classList.add('nsl-disabled-provider');
        providerButtonElement.setAttribute('href', '#');

        providerButtonElement.addEventListener('pointerdown', (e) => {
            if (!window._nslWebViewNoticeElement) {
                window._nslWebViewNoticeElement = document.createElement('div');
                window._nslWebViewNoticeElement.id = "nsl-notices-fallback";
                window._nslWebViewNoticeElement.addEventListener('pointerdown', function (e) {
                    this.parentNode.removeChild(this);
                    window._nslWebViewNoticeElement = null;
                });
                const webviewNoticeHTML = '<div class="error"><p>' + scriptOptions._localizedStrings.webview_notification_text + '</p></div>';

                window._nslWebViewNoticeElement.insertAdjacentHTML("afterbegin", webviewNoticeHTML);
                document.body.appendChild(window._nslWebViewNoticeElement);
            }
        });
    }

}

window._nslDOMReady(function () {

    window.nslRedirect = function (url) {
        if (scriptOptions._redirectOverlay) {
            const overlay = document.createElement('div');
            overlay.id = "nsl-redirect-overlay";
            let overlayHTML = '';
            const overlayContainer = "<div id='nsl-redirect-overlay-container'>",
                overlayContainerClose = "</div>",
                overlaySpinner = "<div id='nsl-redirect-overlay-spinner'></div>",
                overlayTitle = "<p id='nsl-redirect-overlay-title'>" + scriptOptions._localizedStrings.redirect_overlay_title + "</p>",
                overlayText = "<p id='nsl-redirect-overlay-text'>" + scriptOptions._localizedStrings.redirect_overlay_text + "</p>";

            switch (scriptOptions._redirectOverlay) {
                case "overlay-only":
                    break;
                case "overlay-with-spinner":
                    overlayHTML = overlayContainer + overlaySpinner + overlayContainerClose;
                    break;
                default:
                    overlayHTML = overlayContainer + overlaySpinner + overlayTitle + overlayText + overlayContainerClose;
                    break;
            }

            overlay.insertAdjacentHTML("afterbegin", overlayHTML);
            document.body.appendChild(overlay);
        }

        window.location = url;
    };

    let targetWindow = scriptOptions._targetWindow || 'prefer-popup',
        lastPopup = false;


    document.addEventListener('click', function (e) {
        if (e.target) {
            const buttonLinkElement = e.target.closest('a[data-plugin="nsl"][data-action="connect"]') || e.target.closest('a[data-plugin="nsl"][data-action="link"]');
            if (buttonLinkElement) {
                if (lastPopup && !lastPopup.closed) {
                    e.preventDefault();
                    lastPopup.focus();
                } else {

                    let href = buttonLinkElement.href,
                        success = false;
                    if (href.indexOf('?') !== -1) {
                        href += '&';
                    } else {
                        href += '?';
                    }

                    const redirectTo = buttonLinkElement.dataset.redirect;
                    if (redirectTo === 'current') {
                        href += 'redirect=' + encodeURIComponent(window.location.href) + '&';
                    } else if (redirectTo && redirectTo !== '') {
                        href += 'redirect=' + encodeURIComponent(redirectTo) + '&';
                    }

                    if (targetWindow !== 'prefer-same-window' && checkWebView()) {
                        targetWindow = 'prefer-same-window';
                    }

                    if (targetWindow === 'prefer-popup') {
                        lastPopup = NSLPopup(href + 'display=popup', 'nsl-social-connect', buttonLinkElement.dataset.popupwidth, buttonLinkElement.dataset.popupheight);
                        if (lastPopup) {
                            success = true;
                            e.preventDefault();
                        }
                    } else if (targetWindow === 'prefer-new-tab') {
                        const newTab = window.open(href + 'display=popup', '_blank');
                        if (newTab) {
                            if (window.focus) {
                                newTab.focus();
                            }
                            success = true;
                            window._nslHasOpenedPopup = true;
                            e.preventDefault();
                        }
                    }

                    if (!success) {
                        window.location = href;
                        e.preventDefault();
                    }
                }
            }
        }
    });

    let buttonCountChanged = false;

    const googleLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="google"]');
    if (googleLoginButtons.length && checkWebView()) {
        googleLoginButtons.forEach(function (googleLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(googleLoginButton);
            } else {
                googleLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const facebookLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="facebook"]');
    if (facebookLoginButtons.length && checkWebView() && /Android/.test(window.navigator.userAgent) && !isAllowedWebViewForUserAgent('facebook')) {
        facebookLoginButtons.forEach(function (facebookLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(facebookLoginButton);
            } else {
                facebookLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const separators = document.querySelectorAll('div.nsl-separator');
    if (buttonCountChanged && separators.length) {
        separators.forEach(function (separator) {
            const separatorParentNode = separator.parentNode;
            if (separatorParentNode) {
                const separatorButtonContainer = separatorParentNode.querySelector('div.nsl-container-buttons');
                if (separatorButtonContainer && !separatorButtonContainer.hasChildNodes()) {
                    separator.remove();
                }
            }
        })
    }
});

/**
 * Cross-Origin-Opener-Policy blocked the access to the opener
 */
if (typeof BroadcastChannel === "function") {
    const _nslLoginBroadCastChannel = new BroadcastChannel('nsl_login_broadcast_channel');
    _nslLoginBroadCastChannel.onmessage = (event) => {
        if (window?._nslHasOpenedPopup && event.data?.action === 'redirect') {
            window._nslHasOpenedPopup = false;

            const url = event.data?.href;
            _nslLoginBroadCastChannel.close();
            if (typeof window.nslRedirect === 'function') {
                window.nslRedirect(url);
            } else {
                window.opener.location = url;
            }
        }
    };
}})();</script></body>

</html>