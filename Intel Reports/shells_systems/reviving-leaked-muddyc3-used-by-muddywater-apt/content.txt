<!doctype html>
<html lang="en-US">
<head class="no-js">
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-38782884-3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-38782884-3');
</script>

	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="profile" href="https://gmpg.org/xfn/11">
	        <link rel="pingback" href="https://shells.systems/xmlrpc.php">
	    <script>(function(html){html.className = html.className.replace(/\bno-js\b/,'js')})(document.documentElement);</script>
<title>Reviving MuddyC3 Used by MuddyWater (IRAN) APT - Shells.Systems</title>

<!-- This site is optimized with the Yoast SEO plugin v12.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Reviving MuddyC3 Used by MuddyWater (IRAN) APT - Shells.Systems" />
<meta property="og:description" content="Estimated Reading Time:  10 minutes Note : This article contain two parts one for Blue Teams and the other for red teams. go to the part you interested in or read both if you are purple team guy 😀 . MuddyWater is a well-known threat actor group founded by Iran. &#8220;that has been active since 2017. They target&nbsp;groups across Middle..." />
<meta property="og:url" content="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/" />
<meta property="og:site_name" content="Shells.Systems" />
<meta property="article:tag" content="apt" />
<meta property="article:tag" content="C2" />
<meta property="article:tag" content="MuddyWater" />
<meta property="article:tag" content="powershell" />
<meta property="article:tag" content="redteam" />
<meta property="article:section" content="Red Team" />
<meta property="article:published_time" content="2020-01-13T20:39:32+00:00" />
<meta property="article:modified_time" content="2020-01-13T20:46:39+00:00" />
<meta property="og:updated_time" content="2020-01-13T20:46:39+00:00" />
<meta property="og:image" content="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-22-36-28.png" />
<meta property="og:image:secure_url" content="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-22-36-28.png" />
<meta property="og:image:width" content="827" />
<meta property="og:image:height" content="279" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:description" content="Estimated Reading Time: 10 minutes Note : This article contain two parts one for Blue Teams and the other for red teams. go to the part you interested in or read both if you are purple team guy 😀 . MuddyWater is a well-known threat actor group founded by Iran. &#8220;that has been active since 2017. They target&nbsp;groups across Middle..." />
<meta name="twitter:title" content="Reviving MuddyC3 Used by MuddyWater (IRAN) APT - Shells.Systems" />
<meta name="twitter:site" content="@shellssystems" />
<meta name="twitter:image" content="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-22-36-28.png" />
<meta name="twitter:creator" content="@shellssystems" />
<script type='application/ld+json' class='yoast-schema-graph yoast-schema-graph--main'>{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://shells.systems/#website","url":"https://shells.systems/","name":"Shells.Systems","publisher":{"@id":"https://shells.systems/#/schema/person/7cd79373b831de89bec6468407be4a51"},"potentialAction":{"@type":"SearchAction","target":"https://shells.systems/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#primaryimage","url":"https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-22-36-28.png","width":827,"height":279},{"@type":"WebPage","@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#webpage","url":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/","inLanguage":"en-US","name":"Reviving MuddyC3 Used by MuddyWater (IRAN) APT - Shells.Systems","isPartOf":{"@id":"https://shells.systems/#website"},"primaryImageOfPage":{"@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#primaryimage"},"datePublished":"2020-01-13T20:39:32+00:00","dateModified":"2020-01-13T20:46:39+00:00"},{"@type":"Article","@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#article","isPartOf":{"@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#webpage"},"author":{"@id":"https://shells.systems/#/schema/person/af638607505d6ed6fa0b8569af81ec58"},"headline":"Reviving MuddyC3 Used by MuddyWater (IRAN) APT","datePublished":"2020-01-13T20:39:32+00:00","dateModified":"2020-01-13T20:46:39+00:00","commentCount":"4","mainEntityOfPage":{"@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#webpage"},"publisher":{"@id":"https://shells.systems/#/schema/person/7cd79373b831de89bec6468407be4a51"},"image":{"@id":"https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#primaryimage"},"keywords":"apt,C2,MuddyWater,powershell,redteam","articleSection":"Red Team"},{"@type":["Person"],"@id":"https://shells.systems/#/schema/person/af638607505d6ed6fa0b8569af81ec58","name":"Ahmed Khlief","image":{"@type":"ImageObject","@id":"https://shells.systems/#authorlogo","url":"https://secure.gravatar.com/avatar/8c2c34938d3b51479d9c0ae427b61fca?s=96&d=mm&r=g","caption":"Ahmed Khlief"},"description":"Purple Teamer , coder who obsessed in information security and will never stop learning . certified : OSCP , CRTP , DFIRP , DFIRA  , CEHV9 , CCNA R&amp;S , CCNA Cyber Ops , Splunk Power , SPlunk Core","sameAs":["https://www.linkedin.com/in/ahmed-khlief-499321a7/","https://www.youtube.com/user/27medk"]}]}</script>
<!-- / Yoast SEO plugin. -->

<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; Feed" href="https://shells.systems/feed/" />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; Comments Feed" href="https://shells.systems/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Shells.Systems &raquo; Reviving MuddyC3 Used by MuddyWater (IRAN) APT Comments Feed" href="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/shells.systems\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.0.2"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56760,9792,65039],[55358,56760,8203,9792,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='wp-block-library-css'  href='https://shells.systems/wp-includes/css/dist/block-library/style.min.css?ver=5.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='foobox-free-min-css'  href='https://shells.systems/wp-content/plugins/foobox-image-lightbox/free/css/foobox.free.min.css?ver=2.7.17' type='text/css' media='all' />
<link rel='stylesheet' id='thesimplest-google-fonts-css'  href='https://fonts.googleapis.com/css?family=Poppins%3A300%2C400%2C500%2C600%2C700%2C800%7CPT+Serif%3A400%2C400i%2C700%2C700i&#038;ver=5.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css'  href='https://shells.systems/wp-content/themes/thesimplest/assets/css/bootstrap.min.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css'  href='https://shells.systems/wp-content/themes/thesimplest/assets/css/font-awesome.min.css?ver=4.7.0' type='text/css' media='all' />
<link rel='stylesheet' id='thesimplest-style-css'  href='https://shells.systems/wp-content/themes/thesimplest/style.css?ver=5.0.2' type='text/css' media='all' />
<script type='text/javascript' src='https://shells.systems/wp-includes/js/jquery/jquery.js?ver=1.12.4'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'></script>
<script type='text/javascript'>
/* Run FooBox FREE (v2.7.17) */
var FOOBOX = window.FOOBOX = {
	ready: true,
	disableOthers: true,
	o: {wordpress: { enabled: true }, excludes:'.fbx-link,.nofoobox,.nolightbox,a[href*="pinterest.com/pin/create/button/"]', affiliate : { enabled: false }, error: "Could not load the item"},
	selectors: [
		".gallery", ".wp-block-gallery", ".wp-caption", ".wp-block-image", "a:has(img[class*=wp-image-])", ".foobox"
	],
	pre: function( $ ){
		// Custom JavaScript (Pre)
		
	},
	post: function( $ ){
		// Custom JavaScript (Post)
		
		// Custom Captions Code
		
	},
	custom: function( $ ){
		// Custom Extra JS
		
	}
};
</script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/foobox-image-lightbox/free/js/foobox.free.min.js?ver=2.7.17'></script>
<link rel='https://api.w.org/' href='https://shells.systems/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://shells.systems/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://shells.systems/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.0.2" />
<link rel='shortlink' href='https://shells.systems/?p=750' />
<link rel="alternate" type="application/json+oembed" href="https://shells.systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fshells.systems%2Freviving-leaked-muddyc3-used-by-muddywater-apt%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://shells.systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fshells.systems%2Freviving-leaked-muddyc3-used-by-muddywater-apt%2F&#038;format=xml" />
		<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
		<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #ffffff; }
</style>

</head>
<body class="post-template-default single single-post postid-750 single-format-standard custom-background">
    <div class="search-popup">
        <span class="search-popup-close"><i class="fa fa-times"></i></span>
        
<form action="https://shells.systems/" method="get" role="search" id="searchform_topbar" class="search-top-bar-popup search-form">
	<label>
		<span class="screen-reader-text">Search for:</span>
		<input type="search" class="search-field-top-bar" id="search-field-top-bar" placeholder="Search &hellip;" value="" name="s" />
	</label>
	<button type="submit" class="search-submit search-top-bar-submit" id="search-top-bar-submit">
        <span class="fa fa-search header-search-icon"></span>
        <span class="screen-reader-text">
            Search        </span>
    </button>
</form>
    </div><!-- .search-popup -->

<div id="page" class="site">
    <div class="site-inner">
        <a class="skip-link screen-reader-text" href="#content">Skip to content</a>

        <header id="masthead" class="site-header" role="banner">

                    <div class="container">
                <div class="header-links">
                                            <span class="btn-search fa fa-search icon-button-search"></span>
                    	                                </div><!-- .header-link -->
            </div>
        
        <div class="site-header-main">
            <div class="site-branding">
                                    <p class="site-title">
                        <a href="https://shells.systems/" rel="home">
                            Shells.Systems                        </a>
                    </p>
                                    <p class="site-description">WE POP SHELLS</p>
                
            </div><!-- .site-branding -->

            
        </div><!-- .site-header-main -->


    
</header>

        <div id="content" class="site-content container">


	<div id="primary" class="content-area row">
		<main id="main" class="site-main col-md-8 col-sm-12 col-md-offset-2" role="main">

			
<article id="post-750" class="post-750 post type-post status-publish format-standard has-post-thumbnail hentry category-red-team tag-apt tag-c2 tag-muddywater tag-powershell tag-redteam">

	<header class="entry-header">
		<h1 class="entry-title">Reviving MuddyC3 Used by MuddyWater (IRAN) APT</h1>
		<div class="entry-info">
			<span class="posted-on">Posted on <time class="entry-date published" datetime="2020-01-13T20:39:32+00:00">2020-01-13</time><time class="updated" datetime="2020-01-13T20:46:39+00:00">2020-01-13</time></span><span class="author-info"> by <a href="https://shells.systems/author/ahmedkhlief/">Ahmed Khlief</a></span>		</div>
	</header>

	
		<div class="entry-thumbnail">
			<img width="827" height="279" src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-22-36-28.png" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" alt="" />		</div><!-- .post-thumbnail -->

	
	<div class="entry-content">
		<span class="rt-reading-time" style="display: block;"><span class="rt-label rt-prefix">Estimated Reading Time: </span> <span class="rt-time">10</span> <span class="rt-label rt-postfix">minutes</span></span>
<p class="has-text-color has-vivid-red-color"><strong>Note : This article contain two parts one for Blue Teams and the other for red teams. go to the part you interested in or read both if you are purple team guy 😀 .</strong></p>



<p>MuddyWater is a well-known threat actor group founded by Iran. &#8220;that has been active since  2017. They target&nbsp;groups across Middle East and Central Asia, primarily  using spear phishing emails with malicious attachments. Most recently  they were connected to a campaign in March that targeted&#8221; <a rel="noreferrer noopener" href="https://blog.trendmicro.com/trendlabs-security-intelligence/campaign-possibly-connected-muddywater-surfaces-middle-east-central-asia/" target="_blank">organizations in Turkey, Pakistan, and Tajikistan</a>.[0]</p>



<p>MuddyWater attacks are characterized by the use of a slowly evolving  PowerShell-based first stage backdoor we call “POWERSTATS”. Despite  broad scrutiny and reports on MuddyWater attacks, the activity continues  with only incremental changes to the tools and techniques. [1]   </p>



<hr class="wp-block-separator"/>



<p>In June 26 2019 a group called &#8220;Green Leakers&#8221; on telegram published screenshots  of the C2 admin panel as you can see below along with screenshot of the muddyc3 c2 source code . they announced that they are selling all the leaked tools for 0.5BTC.</p>



<ul class="wp-block-gallery columns-3 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/web.jpg" alt="" data-id="757" data-link="https://shells.systems/web/" class="wp-image-757"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/photo_2019-05-07_12-13-17.jpg" alt="" data-id="756" data-link="https://shells.systems/photo_2019-05-07_12-13-17/" class="wp-image-756"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/buy.jpg" alt="" data-id="755" data-link="https://shells.systems/buy/" class="wp-image-755"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-14-12-09.png" alt="" data-id="754" data-link="https://shells.systems/screenshot-from-2020-01-13-14-12-09/" class="wp-image-754"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-13-34-57.png" alt="" data-id="752" data-link="https://shells.systems/screenshot-from-2020-01-13-13-34-57/" class="wp-image-752"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-14-03-45.png" alt="" data-id="751" data-link="https://shells.systems/screenshot-from-2020-01-13-14-03-45/" class="wp-image-751"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-14-03-45-1.png" alt="" data-id="753" data-link="https://shells.systems/screenshot-from-2020-01-13-14-03-45-2/" class="wp-image-753"/></figure></li></ul>



<p>At that time i got the source code from <a href="https://github.com/0xffff0800/MuddyC3v1.0.1-">github</a> , so i tried the code to find that the core of the c2 which is powershell payload is messing ( the leaker didn&#8217;t include the payload in order to by all the tools ). so i didn&#8217;t have time to reverse engineer the source code and i left it. last week i got 3 days off from my work ( working in SOC will keep you for ever busy ) so i started analyzing the code which will be discussed below and i was able to understand how it works in order to create the messing powershell payload and make the c2 come to life. I didn&#8217;t just revive the C2 but also  added more advanced functionality which will be released as separate tool soon.</p>



<p> Lets start by giving a summary about the muddyc3 tool :</p>



<ul><li>Coded with  python2.7</li><li>works as C2 server that serve a powershell agent script when requested </li><li>i didn&#8217;t find any function to encrypt the traffic between the the agent and the C2 but there are variables with name  private_key , public_key so i suspect the functions removed.</li><li>every function has its own url : modules , commands , result&#8230;</li><li>its make use of HTA and bas64 encoded powershell code to bypass the AV ( right now AV can catch HTA )</li><li>It use threading so many agent can connect and controlled at the same time.</li><li>the agent must collect information about the system when it first start then report it to the C2</li><li>there is template for agent which will be filled with ip and port when the C2 run.</li><li>include functions but not all implemented in the initial POC : upload , download , load modules , get screenshot</li><li>The initial powershell agent POC i created can bypass the AV including Kaspersky, Trendmicro</li></ul>



<p class="has-text-color has-medium-font-size has-vivid-cyan-blue-color"><strong>Analysis Part ( Blue Team ):</strong></p>



<p>Now we dig deep in the C2 to explain how it work and how i created the agent based on the function available in the C2 :</p>



<p><strong>C2 interface &nbsp;: </strong> simple CLI interface that ask when started for IP,Port and proxy configuration to generate the initial payloads.</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-11-15-51.png" alt="" class="wp-image-794"/><figcaption>Ask for IP and Port to generate the payload</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-11-16-01.png" alt="" class="wp-image-793"/><figcaption>Payloads generated based on the IP:Port </figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-15-41-05.png" alt="" class="wp-image-795"/><figcaption>simple Command menu which include the basic commands needed to run the C2</figcaption></figure>



<p>the source code for the interface is in the muddyc3.py which is clear and doesn&#8217;t need  explanation :</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-15-51-14.png" alt="" class="wp-image-796"/><figcaption>will generate the initial payloads then add them to array and finally print them to the user</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-15-51-23.png" alt="" class="wp-image-797"/><figcaption>this part of the code will check if the pointer in Main or an agent and get the command from the user then check if the command in the list of  menu command, it will run the menu command function defined in the cmd.py . if the command does not match the menu commands and the pointer in main then it will not do anything . if the pointer in agent menu then it will add the command to agent command queue in order to be requested and executed by the agent.</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-15-49-52.png" alt="" class="wp-image-798"/><figcaption>this screenshot from the cmd.py which shows the list of commands and the function it should run</figcaption></figure>



<p><strong>Webserver.py Functions</strong> : the web server has a list of urls for each module  some of the URLs will work with GET and other with POST depending how the function configured. below  is a summary of the functions i created an agent for it : </p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-27-13.png" alt="" class="wp-image-799"/><figcaption>its start by defining the web server listener and urls variable that include the url with its module</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-34-08.png" alt="" class="wp-image-801"/><figcaption>for example in the urls variable<strong> /get</strong> url will run the function payload so if we tried to access this link on the muddyc2 server we will get the payload </figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-36-17.png" alt="" class="wp-image-802"/><figcaption>accessing the server with url /get provided us with payload</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-38-47.png" alt="" class="wp-image-803"/><figcaption>the same with /getc we got the payload encoded with base52</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-41-21.png" alt="" class="wp-image-805"/><figcaption>/hjf and /hjfs will run these function that include powershell code that run as powershell job in the background</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-43-21.png" alt="" class="wp-image-806"/><figcaption>/hta will run mshta function to generate payload from mshta.exe</figcaption></figure>



<p>Now i will explain the core the URLs along with their code in the agent : </p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-45-06.png" alt="" class="wp-image-807"/><figcaption><strong>/info/(.*)</strong> URL will run the function info which is register function for new agents , it expect agent id name to be in the URL along with machine information in the body of the POST request. the body must contain below information separated by **  : <br>1) OS<br>2) Machine IP<br>3) system architecture<br>4) hostname<br>5)  domain name<br>6) username<br><br>the C2 will get the information along with agent ID and save it in array to be used to server commands and other implemented function cause each agent has its own commands queue .<br><br><br></figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-16-55-48.png" alt="" class="wp-image-809"/><figcaption>This code from the powershell POC agent which collect the information requried by the C2 from windows machine then generate random name for the agent. finally it will do post request to URL  <strong>/info/&lt;agent id&gt;</strong> with post request including the required information separated by **</figcaption></figure>



<div class="wp-block-image"><figure class="aligncenter"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-17-07-42.png" alt="" class="wp-image-810"/><figcaption>This URL ( /cm/(.*) ) will accept GET request with agent ID in order to serve the commands for this agent ( from command queue ) , if the agent is not registered or if the C2 goes down  then up and old agent reconnected, it will send <strong>REGISTER</strong> as response which will force the agent to register by sending request to <strong>/info/</strong> URL as you will see below in agent code.<br>also it will get the current time when the agent ask for command to determine when the last  time agent probed to give information if the agent died or still alive.</figcaption></figure></div>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-17-35-26.png" alt="" class="wp-image-811"/><figcaption>this part of code from powershell POC agent which will run in loop and keep probing the C2 for new commands using URL <strong>/cm/&lt;agent id&gt;&nbsp;</strong><br>Now if the command is REGISTER then it will contact URL <strong>/info/&lt;agent id &gt;</strong> to register and get the commands ( this is very important in order to not lose the agent when the C2 is down ).<br>if the command is empty it will wait 2 seconds before probing again for command.<br></figcaption></figure>



<div class="wp-block-image"><figure class="aligncenter"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-17-35-35.png" alt="" class="wp-image-812"/><figcaption>at last the command will be executed using Invoke-Expression and the output data will be encoded in base64 then uploaded to URL <strong>/re/&lt;agent id&gt; </strong> which will be explained below</figcaption></figure></div>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-17-49-16.png" alt="" class="wp-image-813"/><figcaption>URL /re/(.*) will run result function which will wait for the result of the executed commands in base64 then decode it and present it to the user</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-17-54-27.png" alt="" class="wp-image-814"/><figcaption>URL /md/(.*) will wait for a POST request that include agent ID in the URL and in the request body the name of the module requested then it will use the name of module to load from  Module/ folder in the C2 directory</figcaption></figure>



<div class="wp-block-image"><figure class="aligncenter"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-18-00-15.png" alt="" class="wp-image-815"/><figcaption>this code from the powershell POC agent which will check if the command got from the C2 is load then it will get the second argument splited by space to request and download the required module. the request will be handled by the function load  which will be explained below. the output of load function will include the module which will be executed by Invoke-Expression</figcaption></figure></div>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-18-44-42.png" alt="" class="wp-image-817"/><figcaption>this code from the powershell POC agent will request the module by POST request to URL /md/&lt;agent id&gt; with request body contain module name.</figcaption></figure>



<p>Now after we finished the analysis part of this article i will walk you through using muddyc3 with POC powershell agent. please note that this just POC and the full tool written on top of muddyc3 will be released soon. i finished implementing many cool features but i will wait until i add more and to be fully tested before the release.</p>



<p class="has-text-color has-medium-font-size has-vivid-red-color"><strong>Using MuddyC3 to get domain admin ( Red Team ) :</strong>  </p>



<p>i will use simple scenario to show the usage of muddyc3 powershell agent POC.</p>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-11-15-51.png" alt="" class="wp-image-794"/><figcaption>run the muddyc3 using python2.7 , it will ask you for the IP and Port will be used to create the payloads ( this will be your public  IP or the IP reachable by the devices you want to hack )</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-11-16-01.png" alt="" class="wp-image-793"/><figcaption>you can use any of the printed payloads but the last 3 undetectable from AVs the others is detectable by kaspersky</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-12-13-23.png" alt="" class="wp-image-789"/><figcaption>as you can see am testing on kaspersky free with no detection but this also applicable for the total security and enterprise edition. also i tested it on trendmicro maximum security.</figcaption></figure>



<ul class="wp-block-gallery columns-2 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-13-11-37.png" alt="" data-id="760" data-link="https://shells.systems/screenshot-from-2020-01-13-13-11-37/" class="wp-image-760"/><figcaption>when the user click enable content you will get connection on the C2 using  macro</figcaption></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-13-14-05.png" alt="" data-id="759" data-link="https://shells.systems/screenshot-from-2020-01-13-13-14-05/" class="wp-image-759"/><figcaption>you can also use macros to spread the agent which used by muddywater in their operations</figcaption></figure></li></ul>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-21-55.png" alt="" class="wp-image-818"/><figcaption>as you can see we got a connection from the agent</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-23-07.png" alt="" class="wp-image-819"/><figcaption>using list command we can see the list of agents we have and the last time the contacted the C2</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-24-00.png" alt="" class="wp-image-820"/><figcaption>using &#8221; use &#8221; command we move the agent prompt and we can issue command like pwd and get result . </figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/domain-users.png" alt="" class="wp-image-822"/><figcaption>lets see the the users in this domain to find the domain admin by using : <strong>net user /DOMAIN</strong> command</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-49-06.png" alt="" class="wp-image-823"/><figcaption>Ok so we checked the user ahmedkl and he is domain admin , now we will check if he had logged in to this machine</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-31-26.png" alt="" class="wp-image-821"/><figcaption>you can load powershell modules by copying the modules to Modules/ folder in C2 directory then use &#8221; load &lt;module name.ps1&gt; &#8221; command to load it directly into the agent session. but you can see it didn&#8217;t work here because kaspersky intercepted the data as its clear text ( this solved by encrypting the data in my upcoming tool )</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-12-26-03.png" alt="" class="wp-image-773"/><figcaption>this picture shows kaspersky blocking /md/ url because mimikatz detected by AV so we will pause to complete the demo</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-54-04.png" alt="" class="wp-image-824"/><figcaption>now that mimikatz loaded </figcaption></figure>



<ul class="wp-block-gallery columns-2 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-55-05.png" alt="" data-id="825" class="wp-image-825"/><figcaption>also  we got user hamzag credentials</figcaption></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-19-54-59.png" alt="" data-id="826" data-link="https://shells.systems/?attachment_id=826" class="wp-image-826"/><figcaption>now we have domain admin credentials </figcaption></figure></li></ul>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-21-26-05.png" alt="" class="wp-image-828"/><figcaption>Now we load Invoke-WMIExec.ps1 to do pass the hash attack using wmi</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-21-23-33.png" alt="" class="wp-image-827"/><figcaption>Now in order to use Invoke-WMIExec we need to encode our payload so we don&#8217;t have issue with characters escaping so we use python  ( make user to utf-8 encode )</figcaption></figure>



<figure class="wp-block-image"><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-21-23-54.png" alt="" class="wp-image-829"/><figcaption>as you can see the payload executed and the agent connected</figcaption></figure>



<ul class="wp-block-gallery columns-2 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-21-24-29.png" alt="" data-id="830" data-link="https://shells.systems/?attachment_id=830" class="wp-image-830"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://shells.systems/wp-content/uploads/2020/01/Screenshot-from-2020-01-13-21-24-22.png" alt="" data-id="831" data-link="https://shells.systems/?attachment_id=831" class="wp-image-831"/><figcaption>now we are in the DC</figcaption></figure></li></ul>



<p>Thank you for reading my article . you can find the muddyc3 with payload.ps1 (  powershell agent POC ) here : <a href="https://github.com/ahmedkhlief/muddyc3-Revived">Muddyc3-Revived</a></p>



<p>i will release my tool which built on top of muddyc3 soon. right now it include below features and there is more am working on : <br><br></p>



<ul><li>full encryption of modules and command channel</li><li>get  encryption key on the fly ( not hard coded )</li><li>take screenshots and send it encrypted to C2</li><li>upload files from C2</li><li>download files from the victim</li><li>staged payloads to bypass detection</li><li>bypasses AVs ( tested on kaspersky and trendmicro )</li><li>set the beacon interval dynamically even  after the agent connected</li><li>dynamic URLs </li><li>set the configuration one time ( will not ask for IP:port each time )</li><li>bug fixes and stable version</li><li>global kill switch to end campaigns </li></ul>
	</div><!-- .entry-content -->

	<footer class="entry-footer clearfix"><span class="cat-tags-links"><span class="cat-links"><span class="cat-icon"><i class="fa fa-folder-open"></i></span><span class="screen-reader-text">Categories</span><a href="https://shells.systems/category/red-team/" rel="category tag">Red Team</a></span><span class="tags-links"><span class="tags-icon"><i class="fa fa-hashtag" aria-hidden="true"></i></span><span class="screen-reader-text">Tags</span><a href="https://shells.systems/tag/apt/" rel="tag">apt</a>, <a href="https://shells.systems/tag/c2/" rel="tag">C2</a>, <a href="https://shells.systems/tag/muddywater/" rel="tag">MuddyWater</a>, <a href="https://shells.systems/tag/powershell/" rel="tag">powershell</a>, <a href="https://shells.systems/tag/redteam/" rel="tag">redteam</a></span></span></footer>
<div class="entry-author-info clearfix">
	<div class="author-avatar">
		<img alt='' src='https://secure.gravatar.com/avatar/8c2c34938d3b51479d9c0ae427b61fca?s=72&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/8c2c34938d3b51479d9c0ae427b61fca?s=144&#038;d=mm&#038;r=g 2x' class='avatar avatar-72 photo' height='72' width='72' />	</div><!-- .author-avatar -->

	<div class="author-description">
		<p class="author-title">
			<a href="https://shells.systems/author/ahmedkhlief/" title="Posts by Ahmed Khlief" rel="author">Ahmed Khlief</a>		</p>
		<p class="author-bio">
			Purple Teamer , coder who obsessed in information security and will never stop learning . certified : OSCP , CRTP , DFIRP , DFIRA  , CEHV9 , CCNA R&amp;S , CCNA Cyber Ops , Splunk Power , SPlunk Core		</p><!-- .author-bio -->
	</div><!-- .author-description -->
</div><!-- .author-info -->
</article>

	<nav class="navigation post-navigation" role="navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://shells.systems/pandorafms-v7-0ng-authenticated-remote-code-execution-cve-2019-20224/" rel="prev"><span class="meta-nav" aria-hidden="true">Previous</span><span class="screen-reader-text">Previous post:</span> <span class="post-title">PandoraFMS v7.0NG authenticated Remote Code Execution (CVE-2019-20224)</span></a></div><div class="nav-next"><a href="https://shells.systems/cacti-v1-2-8-authenticated-remote-code-execution-cve-2020-8813/" rel="next"><span class="meta-nav" aria-hidden="true">Next</span><span class="screen-reader-text">Next post:</span> <span class="post-title">Cacti v1.2.8 authenticated Remote Code Execution (CVE-2020-8813)</span></a></div></div>
	</nav>
<div id="comments" class="comments-area">

			<h3 class="comments-title">
			4 Replies to &ldquo;Reviving MuddyC3 Used by MuddyWater (IRAN) APT&rdquo;		</h3>

		
		<ol class="comment-list">
					<li id="comment-1314" class="comment even thread-even depth-1">
			<article id="div-comment-1314" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/1cb0627c3ba4ebd4dac77be152dfee13?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/1cb0627c3ba4ebd4dac77be152dfee13?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">demonsec666</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#comment-1314">
							<time datetime="2020-02-03T16:29:05+00:00">
								2020-02-03 at 4:29 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><a href="https://github.com/demonsec666/muddyc3_golang" rel="nofollow">https://github.com/demonsec666/muddyc3_golang</a></p>
<p>Hi！Ahmed Khlief<br />
i made gody version of muddyc3</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-1314' onclick='return addComment.moveForm( "div-comment-1314", "1314", "respond", "750" )' aria-label='Reply to demonsec666'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-1368" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="div-comment-1368" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/f88c7e6510e02c88cbee6d851f12cbc3?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/f88c7e6510e02c88cbee6d851f12cbc3?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">Dev</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#comment-1368">
							<time datetime="2020-02-10T12:15:06+00:00">
								2020-02-10 at 12:15 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Hey Ahmed, </p>
<p>Do you know if the html C&amp;C code also was leaked ?<br />
Furthermore, nice job on the write-up.</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-1368' onclick='return addComment.moveForm( "div-comment-1368", "1368", "respond", "750" )' aria-label='Reply to Dev'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-1385" class="pingback even thread-even depth-1">
			<div class="comment-body">
				Pingback: <a href='https://cybersecuritynews.com/apt-attack/' rel='external nofollow' class='url'>Most Dangerous APT Hacker Group&#039;s Attacks of the Year - 2019</a> 			</div>
</li><!-- #comment-## -->
		<li id="comment-1426" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="div-comment-1426" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/c9dc4c1efb5827130b1364fff33ee96b?s=42&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/c9dc4c1efb5827130b1364fff33ee96b?s=84&#038;d=mm&#038;r=g 2x' class='avatar avatar-42 photo' height='42' width='42' />						<b class="fn">Vishal</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://shells.systems/reviving-leaked-muddyc3-used-by-muddywater-apt/#comment-1426">
							<time datetime="2020-02-21T07:22:57+00:00">
								2020-02-21 at 7:22 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>But how exactly are MuddyWater (APT) and MuddyC3 (malware) linked? MuddyC3 was being sold by &#8216;Green Leakers&#8217; in June 2019, so did MuddyWater purchased it from them?</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='#comment-1426' onclick='return addComment.moveForm( "div-comment-1426", "1426", "respond", "750" )' aria-label='Reply to Vishal'>Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/reviving-leaked-muddyc3-used-by-muddywater-apt/#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://shells.systems/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate>
				<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p><p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='750' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="288dcbbb9a" /></p><p style="display: none !important;"><label>&#916;<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="68"/><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p>			</form>
			</div><!-- #respond -->
	
</div><!-- .comments-area -->
		</main><!-- .site-main -->
			</div><!-- content-area -->

        </div><!-- .site-content -->
        
                <footer id="colophon" class="site-footer" role="contentinfo">
            <div class="site-info container">
                            <a href="https://wordpress.org/">Proudly powered by WordPress</a>
            </div>
        </footer>
        
    </div><!-- site-inner -->
</div><!-- site -->

    <script type="text/javascript">
        var templateUrl = 'https://shells.systems';
        var post_id = '750';
    </script>
    <script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/skip-link-focus-fix.js?ver=1.0'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/bootstrap.min.js?ver=3.3.7'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/comment-reply.min.js?ver=5.0.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var thesimplest_screenReaderText = {"expand":"expand child menu","collapse":"collapse child menu"};
/* ]]> */
</script>
<script type='text/javascript' src='https://shells.systems/wp-content/themes/thesimplest/assets/js/main.js?ver=1.0'></script>
<script type='text/javascript' src='https://shells.systems/wp-includes/js/wp-embed.min.js?ver=5.0.2'></script>
<script defer type='text/javascript' src='https://shells.systems/wp-content/plugins/akismet/_inc/akismet-frontend.js?ver=1673961197'></script>
<script type='text/javascript' src='https://shells.systems/wp-content/plugins/srs-simple-hits-counter/js/srs_simple_hits_counter_js.js?ver=5.0.2'></script>
			<script type="text/javascript">
				jQuery.fn.prettyPhoto   = function () { return this; };
				jQuery.fn.fancybox      = function () { return this; };
				jQuery.fn.fancyZoom     = function () { return this; };
				jQuery.fn.colorbox      = function () { return this; };
				jQuery.fn.magnificPopup = function () { return this; };
			</script>
		</body>
</html>