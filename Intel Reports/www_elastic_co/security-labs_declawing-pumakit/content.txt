<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Declawing PUMAKIT — Elastic Security Labs</title><meta name="description" content="PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers."/><meta property="og:title" content="Declawing PUMAKIT — Elastic Security Labs"/><meta property="og:description" content="PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/declawing-pumakit/pumakit.jpg?f75c7ccc882573063e7dc5f6256af47d"/><meta property="og:image:alt" content="PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/declawing-pumakit"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Declawing PUMAKIT — Elastic Security Labs"/><meta name="twitter:description" content="PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/declawing-pumakit/pumakit.jpg?f75c7ccc882573063e7dc5f6256af47d"/><meta name="twitter:image:alt" content="PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers."/><link rel="canonical" href="https://www.elastic.co/security-labs/declawing-pumakit"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-934cf22cec419964.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/Lrmm91TBTcYvApwofX639/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/Lrmm91TBTcYvApwofX639/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/declawing-pumakit"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/declawing-pumakit"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-12-12T00:00:00.000Z">12 December 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/remco-sprooten">Remco Sprooten</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/ruben-groenewoud">Ruben Groenewoud</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Declawing&nbsp;PUMAKIT</span></h1><p class="text-zinc-200 text-base md:text-xl">PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>30 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Declawing PUMAKIT" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeclawing-pumakit%2Fpumakit.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="pumakit-at-a-glance" class="absolute -top-32"></span>PUMAKIT at a glance</h2>
<p>PUMAKIT is a sophisticated piece of malware, initially uncovered during routine threat hunting on VirusTotal and named after developer-embedded strings found within its binary. Its multi-stage architecture consists of a dropper (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code>), two memory-resident executables (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:tgt</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn</code>), an LKM rootkit module and a shared object (SO) userland rootkit.</p>
<p>The rootkit component, referenced by the malware authors as “PUMA&quot;,  employs an internal Linux function tracer (ftrace) to hook 18 different syscalls and several kernel functions, enabling it to manipulate core system behaviors. Unique methods are used to interact with PUMA, including using the rmdir() syscall for privilege escalation and specialized commands for extracting configuration and runtime information. Through its staged deployment, the LKM rootkitensures it only activates when specific conditions, such as secure boot checks or kernel symbol availability, are met. These conditions are verified by scanning the Linux kernel, and all necessary files are embedded as ELF binaries within the dropper.</p>
<p>Key functionalities of the kernel module include privilege escalation, hiding files and directories, concealing itself from system tools, anti-debugging measures, and establishing communication with command-and-control (C2) servers.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li><strong>Multi-Stage Architecture</strong>: The malware combines a dropper, two memory-resident executables, an LKM rootkit, and an SO userland rootkit, activating only under specific conditions.</li>
<li><strong>Advanced Stealth Mechanisms</strong>: Hooks 18 syscalls and several kernel functions using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ftrace()</code> to hide files, directories, and the rootkit itself, while evading debugging attempts.</li>
<li><strong>Unique Privilege Escalation</strong>: Utilizes unconventional hooking methods like the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> syscall for escalating privileges and interacting with the rootkit.</li>
<li><strong>Critical Functionalities</strong>: Includes privilege escalation, C2 communication, anti-debugging, and system manipulation to maintain persistence and control.</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pumakit-discovery" class="absolute -top-32"></span>PUMAKIT Discovery</h2>
<p>During routine threat hunting on VirusTotal, we came across an intriguing binary named <a href="https://www.virustotal.com/gui/file/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f">cron</a>. The binary was first uploaded on September 4, 2024, with 0 detections, raising suspicions about its potential stealthiness. Upon further examination, we discovered another related artifact, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn (deleted)</code><a href="https://www.virustotal.com/gui/file/71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24">71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24</a>, uploaded on the same day, also with 0 detections.</p>
<p></p>
<p>What caught our attention were the distinct strings embedded in these binaries, hinting at potential manipulation of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmlinuz</code> kernel package in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/boot/</code>. This prompted a deeper analysis of the samples, leading to interesting findings about their behavior and purpose.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pumakit-code-analysis" class="absolute -top-32"></span>PUMAKIT code analysis</h2>
<p>PUMAKIT, named after its embedded LKM rootkit module (named &quot;PUMA&quot; by the malware authors) and Kitsune, the SO userland rootkit, employs a multi-stage architecture, starting with a dropper that initiates an execution chain. The process begins with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code> binary, which creates two memory-resident executables: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:tgt (deleted)</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn (deleted)</code>. While <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:tgt</code> serves as a benign Cron binary, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn</code> acts as a rootkit loader. The loader is responsible for evaluating system conditions, executing a temporary script (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/script.sh</code>), and ultimately deploying the LKM rootkit. The LKM rootkit contains an embedded SO file - Kitsune - to interact with the rootkit from userspace. This execution chain is displayed below.</p>
<p></p>
<p>This structured design enables PUMAKIT to execute its payload only when specific criteria are met, ensuring stealth and reducing the likelihood of detection. Each stage of the process is meticulously crafted to hide its presence, leveraging memory-resident files and precise checks on the target environment.</p>
<p>In this section, we will dive deeper into the code analysis for the different stages, exploring its components and their role in enabling this sophisticated multi-stage malware.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-1-cron-overview" class="absolute -top-32"></span>Stage 1: Cron overview</h3>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code> binary acts as a dropper. The function below serves as the main logic handler in a PUMAKIT malware sample. Its primary goals are:</p>
<ol>
<li>Check command-line arguments for a specific keyword (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&quot;Huinder&quot;</code>).</li>
<li>If not found, embed and run hidden payloads entirely from memory without dropping them into the filesystem.</li>
<li>If found, handle specific “extraction” arguments to dump its embedded components to disk and then gracefully exit.</li>
</ol>
<p>In short, the malware tries to remain stealthy. If run usually (without a particular argument), it executes hidden ELF binaries without leaving traces on disk, possibly masquerading as a legitimate process (like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code>).</p>
<p></p>
<p>If the string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Huinder</code> isn’t found among the arguments, the code inside <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">if (!argv_)</code> executes:</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">writeToMemfd(...)</code>: This is a hallmark of fileless execution. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">memfd_create</code> allows the binary to exist entirely in memory. The malware writes its embedded payloads (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tgtElfp</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wpnElfp</code>) into anonymous file descriptors rather than dropping them onto disk.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">fork()</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">execveat()</code>: The malware forks into a child and parent process. The child redirects its standard output and error to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/dev/null</code> to avoid leaving logs and then executes the “weapon” payload (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wpnElfp</code>) using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">execveat()</code>. The parent waits for the child and then executes the “target” payload (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tgtElfp</code>). Both payloads are executed from memory, not from a file on disk, making detection and forensic analysis more difficult.</p>
<p>The choice of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">execveat()</code> is interesting—it’s a newer syscall that allows executing a program referred to by a file descriptor. This further supports the fileless nature of this malware’s execution.</p>
<p>We have identified that the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tgt</code> file is a legitimate <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code> binary. It is loaded in memory and executed after the rootkit loader (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wpn</code>) is executed.</p>
<p>After execution, the binary remains active on the host.</p>
<pre><code>&gt; ps aux
root 2138 ./30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f</code></pre>
<p>Below is a listing of the file descriptors for this process. These file descriptors show the memory-resident files created by the dropper.</p>
<pre><code>root@debian11-rg:/tmp# ls -lah /proc/2138/fd
total 0
dr-x------ 2 root root  0 Dec  6 09:57 .
dr-xr-xr-x 9 root root  0 Dec  6 09:57 ..
lr-x------ 1 root root 64 Dec  6 09:57 0 -&gt; /dev/null
l-wx------ 1 root root 64 Dec  6 09:57 1 -&gt; /dev/null
l-wx------ 1 root root 64 Dec  6 09:57 2 -&gt; /dev/null
lrwx------ 1 root root 64 Dec  6 09:57 3 -&gt; &#x27;/memfd:tgt (deleted)&#x27;
lrwx------ 1 root root 64 Dec  6 09:57 4 -&gt; &#x27;/memfd:wpn (deleted)&#x27;
lrwx------ 1 root root 64 Dec  6 09:57 5 -&gt; /run/crond.pid
lrwx------ 1 root root 64 Dec  6 09:57 6 -&gt; &#x27;socket:[20433]&#x27;</code></pre>
<p>Following the references we can see the binaries that are loaded in the sample. We can simply copy the bytes into a new file for further analysis using the offset and sizes.</p>
<p></p>
<p>Upon extraction, we find the following two new files:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Wpn</code>: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Tgt</code>: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136</code></li>
</ul>
<p>We now have the dumps of the two memory files.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-2-memory-resident-executables-overview" class="absolute -top-32"></span>Stage 2: Memory-resident executables overview</h3>
<p>Examining the <a href="https://www.virustotal.com/gui/file/934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136">/memfd:tgt</a> ELF file, it is clear that this is the default Ubuntu Linux Cron binary. There appear to be no modifications to the binary.</p>
<p>The <a href="https://www.virustotal.com/gui/file/cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe">/memfd:wpn</a> file is more interesting, as it is the binary responsible for loading the the LKM rootkit. This rootkit loader attempts to hide itself by mimicking it as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/usr/sbin/sshd</code> executable. It checks for particular prerequisites, such as whether secure boot is enabled and the required symbols are available, and if all conditions are met, it loads the kernel module rootkit.</p>
<p>Looking at the execution in Kibana, we can see that the program checks whether secure boot is enabled by querying <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dmesg</code>. If the correct conditions are met, a shell script called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">script.sh</code> is dropped in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp</code> directory and executed.</p>
<p></p>
<p>This script contains logic for inspecting and processing files based on their compression formats.</p>
<p></p>
<p>Here&#x27;s what it does:</p>
<ul>
<li>The function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c()</code> inspects files using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">file</code> command to verify whether they are ELF binaries. If not, the function returns an error.</li>
<li>The function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">d()</code> attempts to decompress a given file using various utilities like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gunzip</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">unxz</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bunzip2</code>, and others based on signatures of supported compression formats. It employs <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">grep</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tail</code> to locate and extract specific compressed segments.</li>
<li>The script attempts to locate and process a file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">$i</code>) into <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/vmlinux</code>.</li>
</ul>
<p>After the execution of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/script.sh</code>, the file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/boot/vmlinuz-5.10.0-33-cloud-amd64</code> is used as input. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tr</code> command is employed to locate gzip&#x27;s magic numbers (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\037\213\010</code>). Subsequently, a portion of the file starting at the byte offset <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">+10957311</code> is extracted using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tail</code>, decompressed with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gunzip</code>, and saved as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/vmlinux</code>. The resulting file is then verified to determine if it is a valid ELF binary.</p>
<p></p>
<p>This sequence is repeated multiple times until all entries within the script have been passed into function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">d()</code>.</p>
<pre><code>d &#x27;\037\213\010&#x27; xy gunzip
d &#x27;\3757zXZ\000&#x27; abcde unxz
d &#x27;BZh&#x27; xy bunzip2
d &#x27;\135\0\0\0&#x27; xxx unlzma
d &#x27;\211\114\132&#x27; xy &#x27;lzop -d&#x27;
d &#x27;\002!L\030&#x27; xxx &#x27;lz4 -d&#x27;
d &#x27;(\265/\375&#x27; xxx unzstd</code></pre>
<p>This process is shown below.</p>
<p></p>
<p>After running through all of the items in the script, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/vmlinux</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/script.sh</code> files are deleted.</p>
<p></p>
<p>The script&#x27;s primary purpose is to verify whether specific conditions are satisfied and, if they are, to set up the environment for deploying the rootkit using a kernel object file.</p>
<p></p>
<p>As shown in the image above, the loader looks for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">__ksymtab</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">__kcrctab</code> symbols in the Linux Kernel file and stores the offsets.</p>
<p>Several strings show that the rootkit developers refer to their rootkit as “PUMA&quot; within the dropper. Based on the conditions, the program outputs messages such as:</p>
<pre><code>PUMA %s
[+] PUMA is compatible
[+] PUMA already loaded</code></pre>
<p>Furthermore, the kernel object file contains a section named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.puma-config</code>, reinforcing the association with the rootkit.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-3-lkm-rootkit-overview" class="absolute -top-32"></span>Stage 3: LKM rootkit overview</h3>
<p>In this section, we take a closer look at the kernel module to understand its underlying functionality. Specifically, we will examine its symbol lookup features, hooking mechanism, and the key syscalls it modifies to achieve its goals.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lkm-rootkit-overview-symbol-lookup-and-hooking-mechanism" class="absolute -top-32"></span>LKM rootkit overview: symbol lookup and hooking mechanism</h4>
<p>The LKM rootkit&#x27;s ability to manipulate system behavior begins with its use of the syscall table and its reliance on kallsyms_lookup_name() for symbol resolution. Unlike modern rootkits targeting kernel versions 5.7 and above, the rootkit does not use <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kprobes</code>, indicating it is designed for older kernels.</p>
<p></p>
<p>This choice is significant because, prior to kernel version 5.7, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kallsyms_lookup_name()</code> was exported and could be easily leveraged by modules, even those without proper licensing.</p>
<p>In February 2020, kernel developers debated the unexporting of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kallsyms_lookup_name()</code> to prevent misuse by unauthorized or malicious modules. A common tactic involved adding a fake <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MODULE_LICENSE(&quot;GPL&quot;)</code> declaration to circumvent licensing checks, allowing these modules to access non-exported kernel functions. The LKM rootkitdemonstrates this behavior, as evident from its strings:</p>
<pre><code>name=audit
license=GPL</code></pre>
<p>This fraudulent use of the GPL license ensures the rootkit can call <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kallsyms_lookup_name()</code> to resolve function addresses and manipulate kernel internals.</p>
<p>In addition to its symbol resolution strategy, the kernel module employs the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ftrace()</code> hooking mechanism to establish its hooks. By leveraging <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ftrace()</code>, the rootkit effectively intercepts syscalls and replaces their handlers with custom hooks.</p>
<p></p>
<p>Evidence of this is e.g. the usage of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">unregister_ftrace_function</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ftrace_set_filter_ip</code> as shown in the snippet of code above.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lkm-rootkit-overview-hooked-syscalls-overview" class="absolute -top-32"></span>LKM rootkit overview: hooked syscalls overview</h4>
<p>We analyzed the rootkit&#x27;s syscall hooking mechanism to understand the scope of PUMA&#x27;s interference with system functionality. The following table summarizes the syscalls hooked by the rootkit, the corresponding hooked functions, and their potential purposes.</p>
<p>By viewing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cleanup_module()</code> function, we can see the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ftrace()</code> hooking mechanism being reverted by using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">unregister_ftrace_function()</code> function. This guarantees that the callback is no longer being called. Afterward, all syscalls are returned to point to the original syscall rather than the hooked syscall. This gives us a clean overview of all syscalls that were hooked.</p>
<p></p>
<p>In the following sections, we will take a closer look at a few of the hooked syscalls.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lkm-rootkit-overview-rmdir_hook" class="absolute -top-32"></span>LKM rootkit overview: rmdir_hook()</h4>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir_hook()</code> in the kernel module plays a critical role in the rootkit’s functionality, enabling it to manipulate directory removal operations for concealment and control. This hook is not limited to merely intercepting <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> syscalls but extends its functionality to enforce privilege escalation and retrieve configuration details stored within specific directories.</p>
<p></p>
<p>This hook has several checks in place. The hook expects the first characters to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> syscall to be <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya</code>. If this condition is met, the hooked function checks the 6th character, which is the command that gets executed. Finally, the 8th character is checked, which can contain process arguments for the command that is being executed. The structure looks like: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya[char][command][char][argument]</code>. Any special character (or none) can be placed between <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya</code> and the commands and arguments.</p>
<p>As of the publication date, we have identified the following commands:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Command</th><th>Purpose</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.c.0</code></td><td>Retrieve the config</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.t.0</code></td><td>Test the working</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.k.&lt;pid&gt;</code></td><td>Hide a PID</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.v.0</code></td><td>Get the running version</td></tr></tbody></table></div>
<p>Upon initialization of the rootkit, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> syscall hook is used to check whether the rootkit was loaded successfully. It does this by calling the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">t</code> command.</p>
<pre><code>ubuntu-rk:~$ rmdir test
rmdir: failed to remove &#x27;test&#x27;: No such file or directory
ubuntu-rk:~$ rmdir zarya.t
ubuntu-rk:~$</code></pre>
<p>When using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir</code> command on a non-existent directory, an error message “No such file or directory” is returned. When using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir</code> on <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.t</code>, no output is returned, indicating successful loading of the kernel module.</p>
<p>A second command is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v</code>, which is used to get the version of the running rootkit.</p>
<pre><code>ubuntu-rk:~$ rmdir zarya.v
rmdir: failed to remove &#x27;240513&#x27;: No such file or directory</code></pre>
<p>Instead of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.v</code> being added to the “failed to remove ‘<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">directory</code>’” error, the rootkit version <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">240513</code> is returned.</p>
<p>A third command is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c</code>, which prints the configuration of the rootkit.</p>
<pre><code>ubuntu-rk:~/testing$ ./dump_config &quot;zarya.c&quot;
rmdir: failed to remove &#x27;&#x27;: No such file or directory
Buffer contents (hex dump):
7ffe9ae3a270  00 01 00 00 10 70 69 6e 67 5f 69 6e 74 65 72 76  .....ping_interv
7ffe9ae3a280  61 6c 5f 73 00 2c 01 00 00 10 73 65 73 73 69 6f  al_s.,....sessio
7ffe9ae3a290  6e 5f 74 69 6d 65 6f 75 74 5f 73 00 04 00 00 00  n_timeout_s.....
7ffe9ae3a2a0  10 63 32 5f 74 69 6d 65 6f 75 74 5f 73 00 c0 a8  .c2_timeout_s...
7ffe9ae3a2b0  00 00 02 74 61 67 00 08 00 00 00 67 65 6e 65 72  ...tag.....gener
7ffe9ae3a2c0  69 63 00 02 73 5f 61 30 00 15 00 00 00 72 68 65  ic..s_a0.....rhe
7ffe9ae3a2d0  6c 2e 6f 70 73 65 63 75 72 69 74 79 31 2e 61 72  l.opsecurity1.ar
7ffe9ae3a2e0  74 00 02 73 5f 70 30 00 05 00 00 00 38 34 34 33  t..s_p0.....8443
7ffe9ae3a2f0  00 02 73 5f 63 30 00 04 00 00 00 74 6c 73 00 02  ..s_c0.....tls..
7ffe9ae3a300  73 5f 61 31 00 14 00 00 00 73 65 63 2e 6f 70 73  s_a1.....sec.ops
7ffe9ae3a310  65 63 75 72 69 74 79 31 2e 61 72 74 00 02 73 5f  ecurity1.art..s_
7ffe9ae3a320  70 31 00 05 00 00 00 38 34 34 33 00 02 73 5f 63  p1.....8443..s_c
7ffe9ae3a330  31 00 04 00 00 00 74 6c 73 00 02 73 5f 61 32 00  1.....tls..s_a2.
7ffe9ae3a340  0e 00 00 00 38 39 2e 32 33 2e 31 31 33 2e 32 30  ....89.23.113.20
7ffe9ae3a350  34 00 02 73 5f 70 32 00 05 00 00 00 38 34 34 33  4..s_p2.....8443
7ffe9ae3a360  00 02 73 5f 63 32 00 04 00 00 00 74 6c 73 00 00  ..s_c2.....tls..</code></pre>
<p>Because the payload starts with null bytes, no output is returned when running <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.c</code> through a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir</code> shell command. By writing a small C program that wraps the syscall and prints the hex/ASCII representation, we can see the configuration of the rootkit being returned.</p>
<p>Instead of using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kill()</code> syscall to get root privileges (like most rootkits do), the rootkit leverages the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> syscall for this purpose as well. The rootkit uses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">prepare_creds</code> function to modify the credential-related IDs to 0 (root), and calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">commit_creds</code> on this modified structure to obtain root privileges within its current process.</p>
<p></p>
<p>To trigger this function, we need to set the 6th character to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code>. The caveat for this hook is that it gives the caller process root privileges but does not maintain them. When executing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zarya.0</code>, nothing happens. However, when calling this hook with a C program and printing the current process’ privileges, we do get a result. A snippet of the wrapper code that is used is displayed below:</p>
<pre><code>[...]
// Print the current PID, SID, and GID
pid_t pid = getpid();
pid_t sid = getsid(0);  // Passing 0 gets the SID of the calling process
gid_t gid = getgid();

printf(&quot;Current PID: %d, SID: %d, GID: %d\n&quot;, pid, sid, gid);

// Print all credential-related IDs
uid_t ruid = getuid();    // Real user ID
uid_t euid = geteuid();   // Effective user ID
gid_t rgid = getgid();    // Real group ID
gid_t egid = getegid();   // Effective group ID
uid_t fsuid = setfsuid(-1);  // Filesystem user ID
gid_t fsgid = setfsgid(-1);  // Filesystem group ID

printf(&quot;Credentials: UID=%d, EUID=%d, GID=%d, EGID=%d, FSUID=%d, FSGID=%d\n&quot;,
    ruid, euid, rgid, egid, fsuid, fsgid);

[...]</code></pre>
<p>Executing the function, we can the following output:</p>
<pre><code>ubuntu-rk:~/testing$ whoami;id
ruben
uid=1000(ruben) gid=1000(ruben) groups=1000(ruben),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd)

ubuntu-rk:~/testing$ ./rmdir zarya.0
Received data:
zarya.0
Current PID: 41838, SID: 35117, GID: 0
Credentials: UID=0, EUID=0, GID=0, EGID=0, FSUID=0, FSGID=0</code></pre>
<p>To leverage this hook, we wrote a small C wrapper script that executes the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir zarya.0</code> command and checks whether it can now access the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/etc/shadow</code> file.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/syscall.h&gt;
#include &lt;errno.h&gt;

int main() {
    const char *directory = &quot;zarya.0&quot;;

    // Attempt to remove the directory
    if (syscall(SYS_rmdir, directory) == -1) {
        fprintf(stderr, &quot;rmdir: failed to remove &#x27;%s&#x27;: %s\n&quot;, directory, strerror(errno));
    } else {
        printf(&quot;rmdir: successfully removed &#x27;%s&#x27;\n&quot;, directory);
    }

    // Execute the `id` command
    printf(&quot;\n--- Running &#x27;id&#x27; command ---\n&quot;);
    if (system(&quot;id&quot;) == -1) {
        perror(&quot;Failed to execute &#x27;id&#x27;&quot;);
        return 1;
    }

    // Display the contents of /etc/shadow
    printf(&quot;\n--- Displaying &#x27;/etc/shadow&#x27; ---\n&quot;);
    if (system(&quot;cat /etc/shadow&quot;) == -1) {
        perror(&quot;Failed to execute &#x27;cat /etc/shadow&#x27;&quot;);
        return 1;
    }

    return 0;
}</code></pre>
<p>With success.</p>
<pre><code>ubuntu-rk:~/testing$ ./get_root
rmdir: successfully removed &#x27;zarya.0&#x27;

--- Running &#x27;id&#x27; command ---
uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd),1000(ruben)

--- Displaying &#x27;/etc/shadow&#x27; ---
root:*:19430:0:99999:7:::
[...]</code></pre>
<p>Although there are more commands available in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir()</code> function, we will, for now, move on to the next and may add them to a future publication.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lkm-rootkit-overview-getdents-and-getdents64-hooks" class="absolute -top-32"></span>LKM rootkit overview: getdents() and getdents64() hooks</h4>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">getdents_hook()</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">getdents64_hook()</code> in the rootkit are responsible for manipulating directory listing syscalls to hide files and directories from users.</p>
<p>The getdents() and getdents64() syscalls are used to read directory entries. The rootkit hooks these functions to filter out any entries that match specific criteria. Specifically, files and directories with the prefix zov_ are hidden from any user attempting to list the contents of a directory.</p>
<p>For example:</p>
<pre><code>ubuntu-rk:~/getdents_hook$ mkdir zov_hidden_dir

ubuntu-rk:~/getdents_hook$ ls -lah
total 8.0K
drwxrwxr-x  3 ruben ruben 4.0K Dec  9 11:11 .
drwxr-xr-x 11 ruben ruben 4.0K Dec  9 11:11 ..

ubuntu-rk:~/getdents_hook$ echo &quot;this file is now hidden&quot; &gt; zov_hidden_dir/zov_hidden_file

ubuntu-rk:~/getdents_hook$ ls -lah zov_hidden_dir/
total 8.0K
drwxrwxr-x 2 ruben ruben 4.0K Dec  9 11:11 .
drwxrwxr-x 3 ruben ruben 4.0K Dec  9 11:11 ..

ubuntu-rk:~/getdents_hook$ cat zov_hidden_dir/zov_hidden_file
this file is now hidden</code></pre>
<p>Here, the file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">zov_hidden</code> can be accessed directly using its entire path. However, when running the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ls</code> command, it does not appear in the directory listing.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-4-kitsune-so-overview" class="absolute -top-32"></span>Stage 4: Kitsune SO overview</h3>
<p>While digging deeper into the rootkit, another ELF file was identified within the kernel object file. After extracting this binary, we discovered this is the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/lib64/libs.so</code> file. Upon examination, we encountered several references to strings such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kitsune PID %ld</code>. This suggests that the SO is referred to as Kitsune by the developers. Kitsune may be responsible for certain behaviors observed in the rootkit. These references align with the broader context of how the rootkit manipulates user-space interactions via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LD_PRELOAD</code>.</p>
<p>This SO file plays a role in achieving the persistence and stealth mechanisms central to this rootkit, and its integration within the attack chain demonstrates the sophistication of its design. We will now showcase how to detect and/or prevent each part of the attack chain.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pumakit-execution-chain-detection--prevention" class="absolute -top-32"></span>PUMAKIT execution chain detection &amp; prevention</h2>
<p>This section will display different EQL/KQL rules and YARA signatures that can prevent and detect different parts of the PUMAKIT execution chain.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-1-cron" class="absolute -top-32"></span>Stage 1: Cron</h3>
<p>Upon execution of the dropper, an uncommon event is saved in syslog. The event states that a process has started with an executable stack. This is uncommon and interesting to watch:</p>
<pre><code>[  687.108154] process &#x27;/home/ruben_groenewoud/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f&#x27; started with executable stack</code></pre>
<p>We can search for this through the following query:</p>
<pre><code>host.os.type:linux and event.dataset:&quot;system.syslog&quot; and process.name:kernel and message: &quot;started with executable stack&quot;</code></pre>
<p>This message is stored in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/var/log/messages</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/var/log/syslog</code>. We can detect this by reading syslog through <a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">Filebeat</a> or the Elastic agent <a href="https://www.elastic.co/guide/en/integrations/current/system.html">system integration</a>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-2-memory-resident-executables" class="absolute -top-32"></span>Stage 2: Memory-resident executables</h3>
<p>We can see an unusual file descriptor execution right away. This can be detected through the following EQL query:</p>
<pre><code>process where host.os.type == &quot;linux&quot; and event.type == &quot;start&quot; and event.action == &quot;exec&quot; and process.parent.executable like &quot;/dev/fd/*&quot; and not process.parent.command_line == &quot;runc init&quot;</code></pre>
<p>This file descriptor will remain the parent of the dropper until the process ends, resulting in the execution of several files through this parent process as well:</p>
<pre><code>file where host.os.type == &quot;linux&quot; and event.type == &quot;creation&quot; and process.executable like &quot;/dev/fd/*&quot; and file.path like (
  &quot;/boot/*&quot;, &quot;/dev/shm/*&quot;, &quot;/etc/cron.*/*&quot;, &quot;/etc/init.d/*&quot;, &quot;/var/run/*&quot;
  &quot;/etc/update-motd.d/*&quot;, &quot;/tmp/*&quot;, &quot;/var/log/*&quot;, &quot;/var/tmp/*&quot;
)</code></pre>
<p>After <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/script.sh</code> is dropped (detected through the queries above), we can detect its execution by querying for file attribute discovery and unarchiving activity:</p>
<pre><code>process where host.os.type == &quot;linux&quot; and event.type == &quot;start&quot; and event.action == &quot;exec&quot; and 
(process.parent.args like &quot;/boot/*&quot; or process.args like &quot;/boot/*&quot;) and (
  (process.name in (&quot;file&quot;, &quot;unlzma&quot;, &quot;gunzip&quot;, &quot;unxz&quot;, &quot;bunzip2&quot;, &quot;unzstd&quot;, &quot;unzip&quot;, &quot;tar&quot;)) or
  (process.name == &quot;grep&quot; and process.args == &quot;ELF&quot;) or
  (process.name in (&quot;lzop&quot;, &quot;lz4&quot;) and process.args in (&quot;-d&quot;, &quot;--decode&quot;))
) and
not process.parent.name == &quot;mkinitramfs&quot;</code></pre>
<p>The script continues to seek the memory of the Linux kernel image through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tail</code> command. This can be detected, along with other memory-seeking tools, through the following query:</p>
<pre><code>process where host.os.type == &quot;linux&quot; and event.type == &quot;start&quot; and event.action == &quot;exec&quot; and
(process.parent.args like &quot;/boot/*&quot; or process.args like &quot;/boot/*&quot;) and (
  (process.name == &quot;tail&quot; and (process.args like &quot;-c*&quot; or process.args == &quot;--bytes&quot;)) or
  (process.name == &quot;cmp&quot; and process.args == &quot;-i&quot;) or
  (process.name in (&quot;hexdump&quot;, &quot;xxd&quot;) and process.args == &quot;-s&quot;) or
  (process.name == &quot;dd&quot; and process.args : (&quot;skip*&quot;, &quot;seek*&quot;))
)</code></pre>
<p>Once <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/tmp/script.sh</code> is done executing, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:tgt (deleted)</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn (deleted)</code> are created. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tgt</code> executable, which is the benign Cron executable, creates a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/run/crond.pid</code> file. This is nothing malicious but an artifact that can be detected through a simple query.</p>
<pre><code>file where host.os.type == &quot;linux&quot; and event.type == &quot;creation&quot; and file.extension in (&quot;lock&quot;, &quot;pid&quot;) and
file.path like (&quot;/tmp/*&quot;, &quot;/var/tmp/*&quot;, &quot;/run/*&quot;, &quot;/var/run/*&quot;, &quot;/var/lock/*&quot;, &quot;/dev/shm/*&quot;) and process.executable != null</code></pre>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wpn</code> executable will, if all conditions are met, load the LKMrootkit.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stage-3-rootkit-kernel--module" class="absolute -top-32"></span>Stage 3: Rootkit kernel  module</h3>
<p>The loading of kernel module is detectable through Auditd Manager by applying the following configuration:</p>
<pre><code>-a always,exit -F arch=b64 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules
-a always,exit -F arch=b32 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules</code></pre>
<p>And using the following query:</p>
<pre><code>driver where host.os.type == &quot;linux&quot; and event.action == &quot;loaded-kernel-module&quot; and auditd.data.syscall in (&quot;init_module&quot;, &quot;finit_module&quot;)</code></pre>
<p>For more information on leveraging Auditd with Elastic Security to enhance your Linux detection engineering experience, check out our <a href="https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd">Linux detection engineering with Auditd</a> research published on the Elastic Security Labs site.</p>
<p>Upon initialization, the LKM taints the kernel, as it is not signed.</p>
<pre><code>audit: module verification failed: signature and/or required key missing - tainting kernel</code></pre>
<p>We can detect this behavior through the following KQL query:</p>
<pre><code>host.os.type:linux and event.dataset:&quot;system.syslog&quot; and process.name:kernel and message:&quot;module verification failed: signature and/or required key missing - tainting kernel&quot;</code></pre>
<p>Also, the LKM has faulty code, causing it to segfault several times. For example:</p>
<pre><code>Dec  9 13:26:10 ubuntu-rk kernel: [14350.711419] cat[112653]: segfault at 8c ip 00007f70d596b63c sp 00007fff9be81360 error 4
Dec  9 13:26:10 ubuntu-rk kernel: [14350.711422] Code: 83 c4 20 48 89 d0 5b 5d 41 5c c3 48 8d 42 01 48 89 43 08 0f b6 02 41 88 44 2c ff eb c1 8b 7f 78 e9 25 5c 00 00 c3 41 54 55 53 &lt;8b&gt; 87 8c 00 00 00 48 89 fb 85 c0 79 1b e8 d7 00 00 00 48 89 df 89</code></pre>
<p>This can be detected through a simple KQL query that queries for segfaults in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kern.log</code> file.</p>
<pre><code>host.os.type:linux and event.dataset:&quot;system.syslog&quot; and process.name:kernel and message:segfault</code></pre>
<p>Once the kernel module is loaded, we can see traces of command execution through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kthreadd</code> process. The rootkit creates new kernel threads to execute specific commands. For example, the rootkit executes the following commands at short intervals:</p>
<pre><code>cat /dev/null
truncate -s 0 /usr/share/zov_f/zov_latest</code></pre>
<p>We can detect these and more potentially suspicious commands through a query such as the following:</p>
<pre><code>process where host.os.type == &quot;linux&quot; and event.type == &quot;start&quot; and event.action == &quot;exec&quot; and process.parent.name == &quot;kthreadd&quot; and (
  process.executable like (&quot;/tmp/*&quot;, &quot;/var/tmp/*&quot;, &quot;/dev/shm/*&quot;, &quot;/var/www/*&quot;, &quot;/bin/*&quot;, &quot;/usr/bin/*&quot;, &quot;/usr/local/bin/*&quot;) or
  process.name in (&quot;bash&quot;, &quot;dash&quot;, &quot;sh&quot;, &quot;tcsh&quot;, &quot;csh&quot;, &quot;zsh&quot;, &quot;ksh&quot;, &quot;fish&quot;, &quot;whoami&quot;, &quot;curl&quot;, &quot;wget&quot;, &quot;id&quot;, &quot;nohup&quot;, &quot;setsid&quot;) or
  process.command_line like (
    &quot;*/etc/cron*&quot;, &quot;*/etc/rc.local*&quot;, &quot;*/dev/tcp/*&quot;, &quot;*/etc/init.d*&quot;, &quot;*/etc/update-motd.d*&quot;,
    &quot;*/etc/ld.so*&quot;, &quot;*/etc/sudoers*&quot;, &quot;*base64 *&quot;, &quot;*base32 *&quot;, &quot;*base16 *&quot;, &quot;*/etc/profile*&quot;,
    &quot;*/dev/shm/*&quot;, &quot;*/etc/ssh*&quot;, &quot;*/home/*/.ssh/*&quot;, &quot;*/root/.ssh*&quot; , &quot;*~/.ssh/*&quot;, &quot;*autostart*&quot;,
    &quot;*xxd *&quot;, &quot;*/etc/shadow*&quot;
  )
) and not process.name == &quot;dpkg&quot;</code></pre>
<p>We can also detect the rootkits’ method of elevating privileges by analyzing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rmdir</code> command for unusual UID/GID changes.</p>
<pre><code>process where host.os.type == &quot;linux&quot; and event.type == &quot;change&quot; and event.action in (&quot;uid_change&quot;, &quot;guid_change&quot;) and process.name == &quot;rmdir&quot;</code></pre>
<p>Several other behavioral rules may also trigger, depending on the execution chain.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="one-yara-signature-to-rule-them-all" class="absolute -top-32"></span>One YARA signature to rule them all</h2>
<p>Elastic Security has created a <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Rootkit_Pumakit.yar">YARA signature</a> to identify PUMAKIT (the dropper (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code>), the rootkit loader(<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn</code>), the LKM rootkit and the Kitsune shared object files. The signature is displayed below:</p>
<pre><code>rule Linux_Trojan_Pumakit {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2024-12-09&quot;
        last_modified = &quot;2024-12-09&quot;
        os = &quot;Linux&quot;
        arch = &quot;x86, arm64&quot;
        threat_name = &quot;Linux.Trojan.Pumakit&quot;

    strings:
        $str1 = &quot;PUMA %s&quot;
        $str2 = &quot;Kitsune PID %ld&quot;
        $str3 = &quot;/usr/share/zov_f&quot;
        $str4 = &quot;zarya&quot;
        $str5 = &quot;.puma-config&quot;
        $str6 = &quot;ping_interval_s&quot;
        $str7 = &quot;session_timeout_s&quot;
        $str8 = &quot;c2_timeout_s&quot;
        $str9 = &quot;LD_PRELOAD=/lib64/libs.so&quot;
        $str10 = &quot;kit_so_len&quot;
        $str11 = &quot;opsecurity1.art&quot;
        $str12 = &quot;89.23.113.204&quot;
    
    condition:
        4 of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cron</code></td><td>PUMAKIT dropper</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:wpn (deleted</code>)</td><td>PUMAKIT loader</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/memfd:tgt (deleted)</code></td><td>Cron binary</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">8ef63f9333104ab293eef5f34701669322f1c07c0e44973d688be39c94986e27</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">libs.so</code></td><td>Kitsune shared object reference</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">8ad422f5f3d0409747ab1ac6a0919b1fa8d83c3da43564a685ae4044d0a0ea03</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">some2.elf</code></td><td>PUMAKIT variant</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bbf0fd636195d51fb5f21596d406b92f9e3d05cd85f7cd663221d7d3da8af804</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">some1.so</code></td><td>Kitsune shared object variant</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bc9193c2a8ee47801f5f44beae51ab37a652fda02cd32d01f8e88bb793172491</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">puma.ko</code></td><td>LKM rootkit</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1aab475fb8ad4a7f94a7aa2b17c769d6ae04b977d984c4e842a61fb12ea99f58</code></td><td>SHA256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kitsune.so</code></td><td>Kitsune</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sec.opsecurity1[.]art</code></td><td>domain-name</td><td></td><td>PUMAKIT C2 Server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rhel.opsecurity1[.]art</code></td><td>domain-name</td><td></td><td>PUMAKIT C2 Server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">89.23.113[.]204</code></td><td>ipv4-addr</td><td></td><td>PUMAKIT C2 Server</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="concluding-statement" class="absolute -top-32"></span>Concluding Statement</h2>
<p>PUMAKIT is a complex and stealthy threat that uses advanced techniques like syscall hooking, memory-resident execution, and unique privilege escalation methods. Its multi-architectural design highlights the growing sophistication of malware targeting Linux systems.</p>
<p>Elastic Security Labs will continue to analyze PUMAKIT, monitor its behavior, and track any updates or new variants. By refining detection methods and sharing actionable insights, we aim to keep defenders one step ahead.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/declawing-pumakit#pumakit-at-a-glance"><span>PUMAKIT at a&nbsp;glance</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/declawing-pumakit#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/declawing-pumakit#pumakit-discovery"><span>PUMAKIT&nbsp;Discovery</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/declawing-pumakit#pumakit-code-analysis"><span>PUMAKIT code&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/declawing-pumakit#stage-1-cron-overview"><span>Stage 1: Cron&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/declawing-pumakit#stage-2-memory-resident-executables-overview"><span>Stage 2: Memory-&nbsp;resident executables&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/declawing-pumakit#stage-3-lkm-rootkit-overview"><span>Stage 3: LKM rootkit&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/declawing-pumakit#lkm-rootkit-overview-symbol-lookup-and-hooking-mechanism"><span>LKM rootkit overview: symbol lookup and hooking&nbsp;mechanism</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/declawing-pumakit#lkm-rootkit-overview-hooked-syscalls-overview"><span>LKM rootkit overview: hooked syscalls&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/declawing-pumakit#lkm-rootkit-overview-rmdir_hook"><span>LKM rootkit overview:&nbsp;rmdir_hook()</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Declawing PUMAKIT&amp;url=https://www.elastic.co/security-labs/declawing-pumakit" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/declawing-pumakit" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/declawing-pumakit&amp;title=Declawing PUMAKIT" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/declawing-pumakit&amp;title=Declawing PUMAKIT" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Declawing PUMAKIT","slug":"declawing-pumakit","date":"2024-12-12","description":"PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers.","image":"pumakit.jpg","tags":["PUMAKIT","linux","loadable kernel module","lkm","malware","rootkit"],"body":{"raw":"\n## PUMAKIT at a glance\n\nPUMAKIT is a sophisticated piece of malware, initially uncovered during routine threat hunting on VirusTotal and named after developer-embedded strings found within its binary. Its multi-stage architecture consists of a dropper (`cron`), two memory-resident executables (`/memfd:tgt` and `/memfd:wpn`), an LKM rootkit module and a shared object (SO) userland rootkit.\n\nThe rootkit component, referenced by the malware authors as “PUMA\",  employs an internal Linux function tracer (ftrace) to hook 18 different syscalls and several kernel functions, enabling it to manipulate core system behaviors. Unique methods are used to interact with PUMA, including using the rmdir() syscall for privilege escalation and specialized commands for extracting configuration and runtime information. Through its staged deployment, the LKM rootkitensures it only activates when specific conditions, such as secure boot checks or kernel symbol availability, are met. These conditions are verified by scanning the Linux kernel, and all necessary files are embedded as ELF binaries within the dropper.\n\nKey functionalities of the kernel module include privilege escalation, hiding files and directories, concealing itself from system tools, anti-debugging measures, and establishing communication with command-and-control (C2) servers.\n\n## Key takeaways\n\n* **Multi-Stage Architecture**: The malware combines a dropper, two memory-resident executables, an LKM rootkit, and an SO userland rootkit, activating only under specific conditions.\n* **Advanced Stealth Mechanisms**: Hooks 18 syscalls and several kernel functions using `ftrace()` to hide files, directories, and the rootkit itself, while evading debugging attempts.\n* **Unique Privilege Escalation**: Utilizes unconventional hooking methods like the `rmdir()` syscall for escalating privileges and interacting with the rootkit.\n* **Critical Functionalities**: Includes privilege escalation, C2 communication, anti-debugging, and system manipulation to maintain persistence and control.\n\n## PUMAKIT Discovery\n\nDuring routine threat hunting on VirusTotal, we came across an intriguing binary named [cron](https://www.virustotal.com/gui/file/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f). The binary was first uploaded on September 4, 2024, with 0 detections, raising suspicions about its potential stealthiness. Upon further examination, we discovered another related artifact, `/memfd:wpn (deleted)`[71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24](https://www.virustotal.com/gui/file/71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24), uploaded on the same day, also with 0 detections.\n\n![VirusTotal Hunting](/assets/images/declawing-pumakit/image13.png)\n\nWhat caught our attention were the distinct strings embedded in these binaries, hinting at potential manipulation of the `vmlinuz` kernel package in `/boot/`. This prompted a deeper analysis of the samples, leading to interesting findings about their behavior and purpose.\n\n## PUMAKIT code analysis\n\nPUMAKIT, named after its embedded LKM rootkit module (named \"PUMA\" by the malware authors) and Kitsune, the SO userland rootkit, employs a multi-stage architecture, starting with a dropper that initiates an execution chain. The process begins with the `cron` binary, which creates two memory-resident executables: `/memfd:tgt (deleted)` and `/memfd:wpn (deleted)`. While `/memfd:tgt` serves as a benign Cron binary, `/memfd:wpn` acts as a rootkit loader. The loader is responsible for evaluating system conditions, executing a temporary script (`/tmp/script.sh`), and ultimately deploying the LKM rootkit. The LKM rootkit contains an embedded SO file - Kitsune - to interact with the rootkit from userspace. This execution chain is displayed below.\n\n![PUMAKIT infection chain](/assets/images/declawing-pumakit/image10.png \"PUMAKIT infection chain\")\n\nThis structured design enables PUMAKIT to execute its payload only when specific criteria are met, ensuring stealth and reducing the likelihood of detection. Each stage of the process is meticulously crafted to hide its presence, leveraging memory-resident files and precise checks on the target environment.\n\nIn this section, we will dive deeper into the code analysis for the different stages, exploring its components and their role in enabling this sophisticated multi-stage malware.\n\n### Stage 1: Cron overview\n\nThe `cron` binary acts as a dropper. The function below serves as the main logic handler in a PUMAKIT malware sample. Its primary goals are:\n\n1. Check command-line arguments for a specific keyword (`\"Huinder\"`).\n2. If not found, embed and run hidden payloads entirely from memory without dropping them into the filesystem.\n3. If found, handle specific “extraction” arguments to dump its embedded components to disk and then gracefully exit.\n\nIn short, the malware tries to remain stealthy. If run usually (without a particular argument), it executes hidden ELF binaries without leaving traces on disk, possibly masquerading as a legitimate process (like `cron`). \n\n![The main function of the initial dropper](/assets/images/declawing-pumakit/image14.png \"The main function of the initial dropper\")\n\nIf the string `Huinder` isn’t found among the arguments, the code inside `if (!argv_)` executes:\n\n`writeToMemfd(...)`: This is a hallmark of fileless execution. `memfd_create` allows the binary to exist entirely in memory. The malware writes its embedded payloads (`tgtElfp` and `wpnElfp`) into anonymous file descriptors rather than dropping them onto disk.\n\n`fork()` and `execveat()`: The malware forks into a child and parent process. The child redirects its standard output and error to `/dev/null` to avoid leaving logs and then executes the “weapon” payload (`wpnElfp`) using `execveat()`. The parent waits for the child and then executes the “target” payload (`tgtElfp`). Both payloads are executed from memory, not from a file on disk, making detection and forensic analysis more difficult.\n\nThe choice of `execveat()` is interesting—it’s a newer syscall that allows executing a program referred to by a file descriptor. This further supports the fileless nature of this malware’s execution.\n\nWe have identified that the `tgt` file is a legitimate `cron` binary. It is loaded in memory and executed after the rootkit loader (`wpn`) is executed.\n\nAfter execution, the binary remains active on the host.\n\n``` bash\n\u003e ps aux\nroot 2138 ./30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f\n```\n\nBelow is a listing of the file descriptors for this process. These file descriptors show the memory-resident files created by the dropper.\n\n``` bash\nroot@debian11-rg:/tmp# ls -lah /proc/2138/fd\ntotal 0\ndr-x------ 2 root root  0 Dec  6 09:57 .\ndr-xr-xr-x 9 root root  0 Dec  6 09:57 ..\nlr-x------ 1 root root 64 Dec  6 09:57 0 -\u003e /dev/null\nl-wx------ 1 root root 64 Dec  6 09:57 1 -\u003e /dev/null\nl-wx------ 1 root root 64 Dec  6 09:57 2 -\u003e /dev/null\nlrwx------ 1 root root 64 Dec  6 09:57 3 -\u003e '/memfd:tgt (deleted)'\nlrwx------ 1 root root 64 Dec  6 09:57 4 -\u003e '/memfd:wpn (deleted)'\nlrwx------ 1 root root 64 Dec  6 09:57 5 -\u003e /run/crond.pid\nlrwx------ 1 root root 64 Dec  6 09:57 6 -\u003e 'socket:[20433]'\n```\n\nFollowing the references we can see the binaries that are loaded in the sample. We can simply copy the bytes into a new file for further analysis using the offset and sizes. \n\n![Embedded ELF binary](/assets/images/declawing-pumakit/image12.png \"Embedded ELF binary\")\n\nUpon extraction, we find the following two new files:\n\n* `Wpn`: `cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe`\n* `Tgt`: `934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136`\n\nWe now have the dumps of the two memory files. \n\n### Stage 2: Memory-resident executables overview\n\nExamining the [/memfd:tgt](https://www.virustotal.com/gui/file/934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136) ELF file, it is clear that this is the default Ubuntu Linux Cron binary. There appear to be no modifications to the binary.\n\nThe [/memfd:wpn](https://www.virustotal.com/gui/file/cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe) file is more interesting, as it is the binary responsible for loading the the LKM rootkit. This rootkit loader attempts to hide itself by mimicking it as the `/usr/sbin/sshd` executable. It checks for particular prerequisites, such as whether secure boot is enabled and the required symbols are available, and if all conditions are met, it loads the kernel module rootkit.\n\nLooking at the execution in Kibana, we can see that the program checks whether secure boot is enabled by querying `dmesg`. If the correct conditions are met, a shell script called `script.sh` is dropped in the `/tmp` directory and executed.\n\n![Execution flow of the bash script and rootkit loader starting from /dev/fd/4](/assets/images/declawing-pumakit/image6.png \"Execution flow of the bash script and rootkit loader starting from /dev/fd/4\")\n\nThis script contains logic for inspecting and processing files based on their compression formats.\n\n![The Bash script that is used to decompress the kernel image](/assets/images/declawing-pumakit/image9.png \"The Bash script that is used to decompress the kernel image\")\n\nHere's what it does:\n\n* The function `c()` inspects files using the `file` command to verify whether they are ELF binaries. If not, the function returns an error.\n* The function `d()` attempts to decompress a given file using various utilities like `gunzip`, `unxz`, `bunzip2`, and others based on signatures of supported compression formats. It employs `grep` and `tail` to locate and extract specific compressed segments.\n* The script attempts to locate and process a file (`$i`) into `/tmp/vmlinux`.\n\nAfter the execution of `/tmp/script.sh`, the file `/boot/vmlinuz-5.10.0-33-cloud-amd64` is used as input. The `tr` command is employed to locate gzip's magic numbers (`\\037\\213\\010`). Subsequently, a portion of the file starting at the byte offset `+10957311` is extracted using `tail`, decompressed with `gunzip`, and saved as `/tmp/vmlinux`. The resulting file is then verified to determine if it is a valid ELF binary.\n\n![The process of determining that the decompressing has succeeded ](/assets/images/declawing-pumakit/image4.png \"The process of determining that the decompressing has succeeded \")\n\nThis sequence is repeated multiple times until all entries within the script have been passed into function `d()`. \n\n```\nd '\\037\\213\\010' xy gunzip\nd '\\3757zXZ\\000' abcde unxz\nd 'BZh' xy bunzip2\nd '\\135\\0\\0\\0' xxx unlzma\nd '\\211\\114\\132' xy 'lzop -d'\nd '\\002!L\\030' xxx 'lz4 -d'\nd '(\\265/\\375' xxx unzstd\n```\n\nThis process is shown below.\n\n![](/assets/images/declawing-pumakit/image7.png)\n\nAfter running through all of the items in the script, the `/tmp/vmlinux` and `/tmp/script.sh` files are deleted.\n\n![Deleting the script and unpacked kernel](/assets/images/declawing-pumakit/image3.png \"Deleting the script and unpacked kernel\")\n\nThe script's primary purpose is to verify whether specific conditions are satisfied and, if they are, to set up the environment for deploying the rootkit using a kernel object file.\n\n![Rootkit loader looking for symbol offsets](/assets/images/declawing-pumakit/image5.png \"Rootkit loader looking for symbol offsets\")\n\nAs shown in the image above, the loader looks for `__ksymtab` and `__kcrctab` symbols in the Linux Kernel file and stores the offsets.\n\nSeveral strings show that the rootkit developers refer to their rootkit as “PUMA\" within the dropper. Based on the conditions, the program outputs messages such as:\n\n``` python\nPUMA %s\n[+] PUMA is compatible\n[+] PUMA already loaded\n```\n\nFurthermore, the kernel object file contains a section named `.puma-config`, reinforcing the association with the rootkit.\n\n### Stage 3: LKM rootkit overview\n\nIn this section, we take a closer look at the kernel module to understand its underlying functionality. Specifically, we will examine its symbol lookup features, hooking mechanism, and the key syscalls it modifies to achieve its goals.\n\n#### LKM rootkit overview: symbol lookup and hooking mechanism\n\nThe LKM rootkit's ability to manipulate system behavior begins with its use of the syscall table and its reliance on kallsyms_lookup_name() for symbol resolution. Unlike modern rootkits targeting kernel versions 5.7 and above, the rootkit does not use `kprobes`, indicating it is designed for older kernels.\n\n![Resolving a pointer to the sys_call_table using kallsyms_lookup_name](/assets/images/declawing-pumakit/image1.png \"Resolving a pointer to the sys_call_table using kallsyms_lookup_name\")\n\nThis choice is significant because, prior to kernel version 5.7, `kallsyms_lookup_name()` was exported and could be easily leveraged by modules, even those without proper licensing.\n\nIn February 2020, kernel developers debated the unexporting of `kallsyms_lookup_name()` to prevent misuse by unauthorized or malicious modules. A common tactic involved adding a fake `MODULE_LICENSE(\"GPL\")` declaration to circumvent licensing checks, allowing these modules to access non-exported kernel functions. The LKM rootkitdemonstrates this behavior, as evident from its strings:\n\n```\nname=audit\nlicense=GPL\n```\n\nThis fraudulent use of the GPL license ensures the rootkit can call `kallsyms_lookup_name()` to resolve function addresses and manipulate kernel internals.\n\nIn addition to its symbol resolution strategy, the kernel module employs the `ftrace()` hooking mechanism to establish its hooks. By leveraging `ftrace()`, the rootkit effectively intercepts syscalls and replaces their handlers with custom hooks.\n\n![The LKM rootkit leverages ftrace for hooking](/assets/images/declawing-pumakit/image11.png \"The LKM rootkit leverages ftrace for hooking\")\n\nEvidence of this is e.g. the usage of `unregister_ftrace_function` and `ftrace_set_filter_ip` as shown in the snippet of code above.\n\n#### LKM rootkit overview: hooked syscalls overview\n\nWe analyzed the rootkit's syscall hooking mechanism to understand the scope of PUMA's interference with system functionality. The following table summarizes the syscalls hooked by the rootkit, the corresponding hooked functions, and their potential purposes.\n\nBy viewing the `cleanup_module()` function, we can see the `ftrace()` hooking mechanism being reverted by using the `unregister_ftrace_function()` function. This guarantees that the callback is no longer being called. Afterward, all syscalls are returned to point to the original syscall rather than the hooked syscall. This gives us a clean overview of all syscalls that were hooked.\n\n![Cleanup of all the hooked syscalls](/assets/images/declawing-pumakit/image15.png \"Cleanup of all the hooked syscalls\")\n\nIn the following sections, we will take a closer look at a few of the hooked syscalls.\n\n#### LKM rootkit overview: rmdir_hook()\n\nThe `rmdir_hook()` in the kernel module plays a critical role in the rootkit’s functionality, enabling it to manipulate directory removal operations for concealment and control. This hook is not limited to merely intercepting `rmdir()` syscalls but extends its functionality to enforce privilege escalation and retrieve configuration details stored within specific directories.\n\n![Start of the rmdir hook code](/assets/images/declawing-pumakit/image2.png \"Start of the rmdir hook code\")\n\nThis hook has several checks in place. The hook expects the first characters to the `rmdir()` syscall to be `zarya`. If this condition is met, the hooked function checks the 6th character, which is the command that gets executed. Finally, the 8th character is checked, which can contain process arguments for the command that is being executed. The structure looks like: `zarya[char][command][char][argument]`. Any special character (or none) can be placed between `zarya` and the commands and arguments.\n\nAs of the publication date, we have identified the following commands:\n\n| Command       | Purpose                 |\n|---------------|-------------------------|\n| `zarya.c.0`     | Retrieve the config     |\n| `zarya.t.0`     | Test the working        |\n| `zarya.k.\u003cpid\u003e` | Hide a PID              |\n| `zarya.v.0`     | Get the running version |\n\nUpon initialization of the rootkit, the `rmdir()` syscall hook is used to check whether the rootkit was loaded successfully. It does this by calling the `t` command.\n\n``` bash\nubuntu-rk:~$ rmdir test\nrmdir: failed to remove 'test': No such file or directory\nubuntu-rk:~$ rmdir zarya.t\nubuntu-rk:~$\n```\n\nWhen using the `rmdir` command on a non-existent directory, an error message “No such file or directory” is returned. When using `rmdir` on `zarya.t`, no output is returned, indicating successful loading of the kernel module.\n\nA second command is `v`, which is used to get the version of the running rootkit.\n\n``` bash\nubuntu-rk:~$ rmdir zarya.v\nrmdir: failed to remove '240513': No such file or directory\n```\n\nInstead of `zarya.v` being added to the “failed to remove ‘`directory`’” error, the rootkit version `240513` is returned. \n\nA third command is `c`, which prints the configuration of the rootkit.\n\n``` bash\nubuntu-rk:~/testing$ ./dump_config \"zarya.c\"\nrmdir: failed to remove '': No such file or directory\nBuffer contents (hex dump):\n7ffe9ae3a270  00 01 00 00 10 70 69 6e 67 5f 69 6e 74 65 72 76  .....ping_interv\n7ffe9ae3a280  61 6c 5f 73 00 2c 01 00 00 10 73 65 73 73 69 6f  al_s.,....sessio\n7ffe9ae3a290  6e 5f 74 69 6d 65 6f 75 74 5f 73 00 04 00 00 00  n_timeout_s.....\n7ffe9ae3a2a0  10 63 32 5f 74 69 6d 65 6f 75 74 5f 73 00 c0 a8  .c2_timeout_s...\n7ffe9ae3a2b0  00 00 02 74 61 67 00 08 00 00 00 67 65 6e 65 72  ...tag.....gener\n7ffe9ae3a2c0  69 63 00 02 73 5f 61 30 00 15 00 00 00 72 68 65  ic..s_a0.....rhe\n7ffe9ae3a2d0  6c 2e 6f 70 73 65 63 75 72 69 74 79 31 2e 61 72  l.opsecurity1.ar\n7ffe9ae3a2e0  74 00 02 73 5f 70 30 00 05 00 00 00 38 34 34 33  t..s_p0.....8443\n7ffe9ae3a2f0  00 02 73 5f 63 30 00 04 00 00 00 74 6c 73 00 02  ..s_c0.....tls..\n7ffe9ae3a300  73 5f 61 31 00 14 00 00 00 73 65 63 2e 6f 70 73  s_a1.....sec.ops\n7ffe9ae3a310  65 63 75 72 69 74 79 31 2e 61 72 74 00 02 73 5f  ecurity1.art..s_\n7ffe9ae3a320  70 31 00 05 00 00 00 38 34 34 33 00 02 73 5f 63  p1.....8443..s_c\n7ffe9ae3a330  31 00 04 00 00 00 74 6c 73 00 02 73 5f 61 32 00  1.....tls..s_a2.\n7ffe9ae3a340  0e 00 00 00 38 39 2e 32 33 2e 31 31 33 2e 32 30  ....89.23.113.20\n7ffe9ae3a350  34 00 02 73 5f 70 32 00 05 00 00 00 38 34 34 33  4..s_p2.....8443\n7ffe9ae3a360  00 02 73 5f 63 32 00 04 00 00 00 74 6c 73 00 00  ..s_c2.....tls..\n```\n\nBecause the payload starts with null bytes, no output is returned when running `zarya.c` through a `rmdir` shell command. By writing a small C program that wraps the syscall and prints the hex/ASCII representation, we can see the configuration of the rootkit being returned.\n\nInstead of using the `kill()` syscall to get root privileges (like most rootkits do), the rootkit leverages the `rmdir()` syscall for this purpose as well. The rootkit uses the `prepare_creds` function to modify the credential-related IDs to 0 (root), and calls `commit_creds` on this modified structure to obtain root privileges within its current process.\n\n![Privilege escalation using prepare_creds and commit_creds](/assets/images/declawing-pumakit/image8.png \"Privilege escalation using prepare_creds and commit_creds\")\n\nTo trigger this function, we need to set the 6th character to `0`. The caveat for this hook is that it gives the caller process root privileges but does not maintain them. When executing `zarya.0`, nothing happens. However, when calling this hook with a C program and printing the current process’ privileges, we do get a result. A snippet of the wrapper code that is used is displayed below:\n\n``` c\n[...]\n// Print the current PID, SID, and GID\npid_t pid = getpid();\npid_t sid = getsid(0);  // Passing 0 gets the SID of the calling process\ngid_t gid = getgid();\n\nprintf(\"Current PID: %d, SID: %d, GID: %d\\n\", pid, sid, gid);\n\n// Print all credential-related IDs\nuid_t ruid = getuid();    // Real user ID\nuid_t euid = geteuid();   // Effective user ID\ngid_t rgid = getgid();    // Real group ID\ngid_t egid = getegid();   // Effective group ID\nuid_t fsuid = setfsuid(-1);  // Filesystem user ID\ngid_t fsgid = setfsgid(-1);  // Filesystem group ID\n\nprintf(\"Credentials: UID=%d, EUID=%d, GID=%d, EGID=%d, FSUID=%d, FSGID=%d\\n\",\n    ruid, euid, rgid, egid, fsuid, fsgid);\n\n[...]\n```\n\nExecuting the function, we can the following output:\n\n``` bash\nubuntu-rk:~/testing$ whoami;id\nruben\nuid=1000(ruben) gid=1000(ruben) groups=1000(ruben),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd)\n\nubuntu-rk:~/testing$ ./rmdir zarya.0\nReceived data:\nzarya.0\nCurrent PID: 41838, SID: 35117, GID: 0\nCredentials: UID=0, EUID=0, GID=0, EGID=0, FSUID=0, FSGID=0\n```\n\nTo leverage this hook, we wrote a small C wrapper script that executes the `rmdir zarya.0` command and checks whether it can now access the `/etc/shadow` file. \n\n``` c\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/syscall.h\u003e\n#include \u003cerrno.h\u003e\n\nint main() {\n    const char *directory = \"zarya.0\";\n\n    // Attempt to remove the directory\n    if (syscall(SYS_rmdir, directory) == -1) {\n        fprintf(stderr, \"rmdir: failed to remove '%s': %s\\n\", directory, strerror(errno));\n    } else {\n        printf(\"rmdir: successfully removed '%s'\\n\", directory);\n    }\n\n    // Execute the `id` command\n    printf(\"\\n--- Running 'id' command ---\\n\");\n    if (system(\"id\") == -1) {\n        perror(\"Failed to execute 'id'\");\n        return 1;\n    }\n\n    // Display the contents of /etc/shadow\n    printf(\"\\n--- Displaying '/etc/shadow' ---\\n\");\n    if (system(\"cat /etc/shadow\") == -1) {\n        perror(\"Failed to execute 'cat /etc/shadow'\");\n        return 1;\n    }\n\n    return 0;\n}\n```\n\nWith success.\n\n``` bash\nubuntu-rk:~/testing$ ./get_root\nrmdir: successfully removed 'zarya.0'\n\n--- Running 'id' command ---\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd),1000(ruben)\n\n--- Displaying '/etc/shadow' ---\nroot:*:19430:0:99999:7:::\n[...]\n```\n\nAlthough there are more commands available in the `rmdir()` function, we will, for now, move on to the next and may add them to a future publication.\n\n#### LKM rootkit overview: getdents() and getdents64() hooks\n\nThe `getdents_hook()` and `getdents64_hook()` in the rootkit are responsible for manipulating directory listing syscalls to hide files and directories from users.\n\nThe getdents() and getdents64() syscalls are used to read directory entries. The rootkit hooks these functions to filter out any entries that match specific criteria. Specifically, files and directories with the prefix zov_ are hidden from any user attempting to list the contents of a directory.\n\nFor example:\n\n``` bash\nubuntu-rk:~/getdents_hook$ mkdir zov_hidden_dir\n\nubuntu-rk:~/getdents_hook$ ls -lah\ntotal 8.0K\ndrwxrwxr-x  3 ruben ruben 4.0K Dec  9 11:11 .\ndrwxr-xr-x 11 ruben ruben 4.0K Dec  9 11:11 ..\n\nubuntu-rk:~/getdents_hook$ echo \"this file is now hidden\" \u003e zov_hidden_dir/zov_hidden_file\n\nubuntu-rk:~/getdents_hook$ ls -lah zov_hidden_dir/\ntotal 8.0K\ndrwxrwxr-x 2 ruben ruben 4.0K Dec  9 11:11 .\ndrwxrwxr-x 3 ruben ruben 4.0K Dec  9 11:11 ..\n\nubuntu-rk:~/getdents_hook$ cat zov_hidden_dir/zov_hidden_file\nthis file is now hidden\n```\n\nHere, the file `zov_hidden` can be accessed directly using its entire path. However, when running the `ls` command, it does not appear in the directory listing.\n\n### Stage 4: Kitsune SO overview\n\nWhile digging deeper into the rootkit, another ELF file was identified within the kernel object file. After extracting this binary, we discovered this is the `/lib64/libs.so` file. Upon examination, we encountered several references to strings such as `Kitsune PID %ld`. This suggests that the SO is referred to as Kitsune by the developers. Kitsune may be responsible for certain behaviors observed in the rootkit. These references align with the broader context of how the rootkit manipulates user-space interactions via `LD_PRELOAD`.\n\nThis SO file plays a role in achieving the persistence and stealth mechanisms central to this rootkit, and its integration within the attack chain demonstrates the sophistication of its design. We will now showcase how to detect and/or prevent each part of the attack chain.\n\n## PUMAKIT execution chain detection \u0026 prevention\n\nThis section will display different EQL/KQL rules and YARA signatures that can prevent and detect different parts of the PUMAKIT execution chain.\n\n### Stage 1: Cron\n\nUpon execution of the dropper, an uncommon event is saved in syslog. The event states that a process has started with an executable stack. This is uncommon and interesting to watch:\n\n``` sysmon\n[  687.108154] process '/home/ruben_groenewoud/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f' started with executable stack\n```\n\nWe can search for this through the following query:\n\n```\nhost.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message: \"started with executable stack\"\n```\n\nThis message is stored in `/var/log/messages` or `/var/log/syslog`. We can detect this by reading syslog through [Filebeat](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html) or the Elastic agent [system integration](https://www.elastic.co/guide/en/integrations/current/system.html).\n\n### Stage 2: Memory-resident executables\n\nWe can see an unusual file descriptor execution right away. This can be detected through the following EQL query:\n\n``` sql\nprocess where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.parent.executable like \"/dev/fd/*\" and not process.parent.command_line == \"runc init\"\n```\n\nThis file descriptor will remain the parent of the dropper until the process ends, resulting in the execution of several files through this parent process as well:\n\n``` sql\nfile where host.os.type == \"linux\" and event.type == \"creation\" and process.executable like \"/dev/fd/*\" and file.path like (\n  \"/boot/*\", \"/dev/shm/*\", \"/etc/cron.*/*\", \"/etc/init.d/*\", \"/var/run/*\"\n  \"/etc/update-motd.d/*\", \"/tmp/*\", \"/var/log/*\", \"/var/tmp/*\"\n)\n```\n\nAfter `/tmp/script.sh` is dropped (detected through the queries above), we can detect its execution by querying for file attribute discovery and unarchiving activity:\n\n``` sql\nprocess where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and \n(process.parent.args like \"/boot/*\" or process.args like \"/boot/*\") and (\n  (process.name in (\"file\", \"unlzma\", \"gunzip\", \"unxz\", \"bunzip2\", \"unzstd\", \"unzip\", \"tar\")) or\n  (process.name == \"grep\" and process.args == \"ELF\") or\n  (process.name in (\"lzop\", \"lz4\") and process.args in (\"-d\", \"--decode\"))\n) and\nnot process.parent.name == \"mkinitramfs\"\n```\n\nThe script continues to seek the memory of the Linux kernel image through the `tail` command. This can be detected, along with other memory-seeking tools, through the following query:\n\n``` sql\nprocess where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and\n(process.parent.args like \"/boot/*\" or process.args like \"/boot/*\") and (\n  (process.name == \"tail\" and (process.args like \"-c*\" or process.args == \"--bytes\")) or\n  (process.name == \"cmp\" and process.args == \"-i\") or\n  (process.name in (\"hexdump\", \"xxd\") and process.args == \"-s\") or\n  (process.name == \"dd\" and process.args : (\"skip*\", \"seek*\"))\n)\n```\n\nOnce `/tmp/script.sh` is done executing, `/memfd:tgt (deleted)` and `/memfd:wpn (deleted)` are created. The `tgt` executable, which is the benign Cron executable, creates a `/run/crond.pid` file. This is nothing malicious but an artifact that can be detected through a simple query. \n\n``` sql\nfile where host.os.type == \"linux\" and event.type == \"creation\" and file.extension in (\"lock\", \"pid\") and\nfile.path like (\"/tmp/*\", \"/var/tmp/*\", \"/run/*\", \"/var/run/*\", \"/var/lock/*\", \"/dev/shm/*\") and process.executable != null\n```\n\nThe `wpn` executable will, if all conditions are met, load the LKMrootkit.\n\n### Stage 3: Rootkit kernel  module\n\nThe loading of kernel module is detectable through Auditd Manager by applying the following configuration:\n\n```\n-a always,exit -F arch=b64 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules\n-a always,exit -F arch=b32 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules\n```\n\nAnd using the following query:\n\n``` sql\ndriver where host.os.type == \"linux\" and event.action == \"loaded-kernel-module\" and auditd.data.syscall in (\"init_module\", \"finit_module\")\n```\n\nFor more information on leveraging Auditd with Elastic Security to enhance your Linux detection engineering experience, check out our [Linux detection engineering with Auditd](https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd) research published on the Elastic Security Labs site.\n\nUpon initialization, the LKM taints the kernel, as it is not signed.\n\n```\naudit: module verification failed: signature and/or required key missing - tainting kernel\n```\n\nWe can detect this behavior through the following KQL query:\n\n```\nhost.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message:\"module verification failed: signature and/or required key missing - tainting kernel\"\n```\n\nAlso, the LKM has faulty code, causing it to segfault several times. For example:\n\n```\nDec  9 13:26:10 ubuntu-rk kernel: [14350.711419] cat[112653]: segfault at 8c ip 00007f70d596b63c sp 00007fff9be81360 error 4\nDec  9 13:26:10 ubuntu-rk kernel: [14350.711422] Code: 83 c4 20 48 89 d0 5b 5d 41 5c c3 48 8d 42 01 48 89 43 08 0f b6 02 41 88 44 2c ff eb c1 8b 7f 78 e9 25 5c 00 00 c3 41 54 55 53 \u003c8b\u003e 87 8c 00 00 00 48 89 fb 85 c0 79 1b e8 d7 00 00 00 48 89 df 89\n```\n\nThis can be detected through a simple KQL query that queries for segfaults in the `kern.log` file.\n\n```\nhost.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message:segfault\n```\n\nOnce the kernel module is loaded, we can see traces of command execution through the `kthreadd` process. The rootkit creates new kernel threads to execute specific commands. For example, the rootkit executes the following commands at short intervals:\n\n``` bash\ncat /dev/null\ntruncate -s 0 /usr/share/zov_f/zov_latest\n```\n\nWe can detect these and more potentially suspicious commands through a query such as the following:\n\n``` sql\nprocess where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.parent.name == \"kthreadd\" and (\n  process.executable like (\"/tmp/*\", \"/var/tmp/*\", \"/dev/shm/*\", \"/var/www/*\", \"/bin/*\", \"/usr/bin/*\", \"/usr/local/bin/*\") or\n  process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\", \"whoami\", \"curl\", \"wget\", \"id\", \"nohup\", \"setsid\") or\n  process.command_line like (\n    \"*/etc/cron*\", \"*/etc/rc.local*\", \"*/dev/tcp/*\", \"*/etc/init.d*\", \"*/etc/update-motd.d*\",\n    \"*/etc/ld.so*\", \"*/etc/sudoers*\", \"*base64 *\", \"*base32 *\", \"*base16 *\", \"*/etc/profile*\",\n    \"*/dev/shm/*\", \"*/etc/ssh*\", \"*/home/*/.ssh/*\", \"*/root/.ssh*\" , \"*~/.ssh/*\", \"*autostart*\",\n    \"*xxd *\", \"*/etc/shadow*\"\n  )\n) and not process.name == \"dpkg\"\n```\n\nWe can also detect the rootkits’ method of elevating privileges by analyzing the `rmdir` command for unusual UID/GID changes.\n\n``` sql\nprocess where host.os.type == \"linux\" and event.type == \"change\" and event.action in (\"uid_change\", \"guid_change\") and process.name == \"rmdir\"\n```\n\nSeveral other behavioral rules may also trigger, depending on the execution chain.\n\n## One YARA signature to rule them all\n\nElastic Security has created a [YARA signature](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Rootkit_Pumakit.yar) to identify PUMAKIT (the dropper (`cron`), the rootkit loader(`/memfd:wpn`), the LKM rootkit and the Kitsune shared object files. The signature is displayed below:\n\n``` YARA\nrule Linux_Trojan_Pumakit {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-12-09\"\n        last_modified = \"2024-12-09\"\n        os = \"Linux\"\n        arch = \"x86, arm64\"\n        threat_name = \"Linux.Trojan.Pumakit\"\n\n    strings:\n        $str1 = \"PUMA %s\"\n        $str2 = \"Kitsune PID %ld\"\n        $str3 = \"/usr/share/zov_f\"\n        $str4 = \"zarya\"\n        $str5 = \".puma-config\"\n        $str6 = \"ping_interval_s\"\n        $str7 = \"session_timeout_s\"\n        $str8 = \"c2_timeout_s\"\n        $str9 = \"LD_PRELOAD=/lib64/libs.so\"\n        $str10 = \"kit_so_len\"\n        $str11 = \"opsecurity1.art\"\n        $str12 = \"89.23.113.204\"\n    \n    condition:\n        4 of them\n}\n```\n\n## Observations\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type        | Name                 | Reference                       |\n|------------------------------------------------------------------|-------------|----------------------|---------------------------------|\n| `30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f` | SHA256      | `cron`                 | PUMAKIT dropper                 |\n| `cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe` | SHA256      | `/memfd:wpn (deleted`) | PUMAKIT loader                  |\n| `934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136` | SHA256      | `/memfd:tgt (deleted)` | Cron binary                     |\n| `8ef63f9333104ab293eef5f34701669322f1c07c0e44973d688be39c94986e27` | SHA256      | `libs.so`              | Kitsune shared object reference |\n| `8ad422f5f3d0409747ab1ac6a0919b1fa8d83c3da43564a685ae4044d0a0ea03` | SHA256      | `some2.elf`            | PUMAKIT variant                 |\n| `bbf0fd636195d51fb5f21596d406b92f9e3d05cd85f7cd663221d7d3da8af804` | SHA256      | `some1.so`             | Kitsune shared object variant   |\n| `bc9193c2a8ee47801f5f44beae51ab37a652fda02cd32d01f8e88bb793172491` | SHA256      | `puma.ko`              | LKM rootkit                     |\n| `1aab475fb8ad4a7f94a7aa2b17c769d6ae04b977d984c4e842a61fb12ea99f58` | SHA256      | `kitsune.so`           | Kitsune                         |\n| `sec.opsecurity1[.]art`                                            | domain-name |                      | PUMAKIT C2 Server               |\n| `rhel.opsecurity1[.]art`                                           | domain-name |                      | PUMAKIT C2 Server               |\n| `89.23.113[.]204`                                                  | ipv4-addr   |                      | PUMAKIT C2 Server               |\n\n## Concluding Statement\n\nPUMAKIT is a complex and stealthy threat that uses advanced techniques like syscall hooking, memory-resident execution, and unique privilege escalation methods. Its multi-architectural design highlights the growing sophistication of malware targeting Linux systems.\n\nElastic Security Labs will continue to analyze PUMAKIT, monitor its behavior, and track any updates or new variants. By refining detection methods and sharing actionable insights, we aim to keep defenders one step ahead.\n","code":"var Component=(()=\u003e{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(i,e)=\u003e()=\u003e(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=\u003e{for(var t in e)o(i,t,{get:e[t],enumerable:!0})},a=(i,e,t,d)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!g.call(i,r)\u0026\u0026r!==t\u0026\u0026o(i,r,{get:()=\u003ee[r],enumerable:!(d=u(e,r))||d.enumerable});return i};var y=(i,e,t)=\u003e(t=i!=null?h(p(i)):{},a(e||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),k=i=\u003ea(o({},\"__esModule\",{value:!0}),i);var c=f((I,s)=\u003e{s.exports=_jsx_runtime});var _={};b(_,{default:()=\u003ex,frontmatter:()=\u003ew});var n=y(c()),w={title:\"Declawing PUMAKIT\",slug:\"declawing-pumakit\",date:\"2024-12-12\",description:\"PUMAKIT is a sophisticated loadable kernel module (LKM) rootkit that employs advanced stealth mechanisms to hide its presence and maintain communication with command-and-control servers.\",author:[{slug:\"remco-sprooten\"},{slug:\"ruben-groenewoud\"}],image:\"pumakit.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"PUMAKIT\",\"linux\",\"loadable kernel module\",\"lkm\",\"malware\",\"rootkit\"]};function l(i){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\",img:\"img\",h3:\"h3\",ol:\"ol\",pre:\"pre\",h4:\"h4\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"pumakit-at-a-glance\",children:\"PUMAKIT at a glance\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"PUMAKIT is a sophisticated piece of malware, initially uncovered during routine threat hunting on VirusTotal and named after developer-embedded strings found within its binary. Its multi-stage architecture consists of a dropper (\",(0,n.jsx)(e.code,{children:\"cron\"}),\"), two memory-resident executables (\",(0,n.jsx)(e.code,{children:\"/memfd:tgt\"}),\" and \",(0,n.jsx)(e.code,{children:\"/memfd:wpn\"}),\"), an LKM rootkit module and a shared object (SO) userland rootkit.\"]}),`\n`,(0,n.jsx)(e.p,{children:'The rootkit component, referenced by the malware authors as \\u201CPUMA\",  employs an internal Linux function tracer (ftrace) to hook 18 different syscalls and several kernel functions, enabling it to manipulate core system behaviors. Unique methods are used to interact with PUMA, including using the rmdir() syscall for privilege escalation and specialized commands for extracting configuration and runtime information. Through its staged deployment, the LKM rootkitensures it only activates when specific conditions, such as secure boot checks or kernel symbol availability, are met. These conditions are verified by scanning the Linux kernel, and all necessary files are embedded as ELF binaries within the dropper.'}),`\n`,(0,n.jsx)(e.p,{children:\"Key functionalities of the kernel module include privilege escalation, hiding files and directories, concealing itself from system tools, anti-debugging measures, and establishing communication with command-and-control (C2) servers.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Multi-Stage Architecture\"}),\": The malware combines a dropper, two memory-resident executables, an LKM rootkit, and an SO userland rootkit, activating only under specific conditions.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Advanced Stealth Mechanisms\"}),\": Hooks 18 syscalls and several kernel functions using \",(0,n.jsx)(e.code,{children:\"ftrace()\"}),\" to hide files, directories, and the rootkit itself, while evading debugging attempts.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Unique Privilege Escalation\"}),\": Utilizes unconventional hooking methods like the \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" syscall for escalating privileges and interacting with the rootkit.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Critical Functionalities\"}),\": Includes privilege escalation, C2 communication, anti-debugging, and system manipulation to maintain persistence and control.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"pumakit-discovery\",children:\"PUMAKIT Discovery\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"During routine threat hunting on VirusTotal, we came across an intriguing binary named \",(0,n.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f\",rel:\"nofollow\",children:\"cron\"}),\". The binary was first uploaded on September 4, 2024, with 0 detections, raising suspicions about its potential stealthiness. Upon further examination, we discovered another related artifact, \",(0,n.jsx)(e.code,{children:\"/memfd:wpn (deleted)\"}),(0,n.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24\",rel:\"nofollow\",children:\"71cc6a6547b5afda1844792ace7d5437d7e8d6db1ba995e1b2fb760699693f24\"}),\", uploaded on the same day, also with 0 detections.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image13.png\",alt:\"VirusTotal Hunting\",width:\"1999\",height:\"537\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"What caught our attention were the distinct strings embedded in these binaries, hinting at potential manipulation of the \",(0,n.jsx)(e.code,{children:\"vmlinuz\"}),\" kernel package in \",(0,n.jsx)(e.code,{children:\"/boot/\"}),\". This prompted a deeper analysis of the samples, leading to interesting findings about their behavior and purpose.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"pumakit-code-analysis\",children:\"PUMAKIT code analysis\"}),`\n`,(0,n.jsxs)(e.p,{children:['PUMAKIT, named after its embedded LKM rootkit module (named \"PUMA\" by the malware authors) and Kitsune, the SO userland rootkit, employs a multi-stage architecture, starting with a dropper that initiates an execution chain. The process begins with the ',(0,n.jsx)(e.code,{children:\"cron\"}),\" binary, which creates two memory-resident executables: \",(0,n.jsx)(e.code,{children:\"/memfd:tgt (deleted)\"}),\" and \",(0,n.jsx)(e.code,{children:\"/memfd:wpn (deleted)\"}),\". While \",(0,n.jsx)(e.code,{children:\"/memfd:tgt\"}),\" serves as a benign Cron binary, \",(0,n.jsx)(e.code,{children:\"/memfd:wpn\"}),\" acts as a rootkit loader. The loader is responsible for evaluating system conditions, executing a temporary script (\",(0,n.jsx)(e.code,{children:\"/tmp/script.sh\"}),\"), and ultimately deploying the LKM rootkit. The LKM rootkit contains an embedded SO file - Kitsune - to interact with the rootkit from userspace. This execution chain is displayed below.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image10.png\",alt:\"PUMAKIT infection chain\",title:\"PUMAKIT infection chain\",width:\"1673\",height:\"867\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This structured design enables PUMAKIT to execute its payload only when specific criteria are met, ensuring stealth and reducing the likelihood of detection. Each stage of the process is meticulously crafted to hide its presence, leveraging memory-resident files and precise checks on the target environment.\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this section, we will dive deeper into the code analysis for the different stages, exploring its components and their role in enabling this sophisticated multi-stage malware.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-1-cron-overview\",children:\"Stage 1: Cron overview\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"cron\"}),\" binary acts as a dropper. The function below serves as the main logic handler in a PUMAKIT malware sample. Its primary goals are:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Check command-line arguments for a specific keyword (\",(0,n.jsx)(e.code,{children:'\"Huinder\"'}),\").\"]}),`\n`,(0,n.jsx)(e.li,{children:\"If not found, embed and run hidden payloads entirely from memory without dropping them into the filesystem.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If found, handle specific \\u201Cextraction\\u201D arguments to dump its embedded components to disk and then gracefully exit.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In short, the malware tries to remain stealthy. If run usually (without a particular argument), it executes hidden ELF binaries without leaving traces on disk, possibly masquerading as a legitimate process (like \",(0,n.jsx)(e.code,{children:\"cron\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image14.png\",alt:\"The main function of the initial dropper\",title:\"The main function of the initial dropper\",width:\"1999\",height:\"1653\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the string \",(0,n.jsx)(e.code,{children:\"Huinder\"}),\" isn\\u2019t found among the arguments, the code inside \",(0,n.jsx)(e.code,{children:\"if (!argv_)\"}),\" executes:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"writeToMemfd(...)\"}),\": This is a hallmark of fileless execution. \",(0,n.jsx)(e.code,{children:\"memfd_create\"}),\" allows the binary to exist entirely in memory. The malware writes its embedded payloads (\",(0,n.jsx)(e.code,{children:\"tgtElfp\"}),\" and \",(0,n.jsx)(e.code,{children:\"wpnElfp\"}),\") into anonymous file descriptors rather than dropping them onto disk.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"fork()\"}),\" and \",(0,n.jsx)(e.code,{children:\"execveat()\"}),\": The malware forks into a child and parent process. The child redirects its standard output and error to \",(0,n.jsx)(e.code,{children:\"/dev/null\"}),\" to avoid leaving logs and then executes the \\u201Cweapon\\u201D payload (\",(0,n.jsx)(e.code,{children:\"wpnElfp\"}),\") using \",(0,n.jsx)(e.code,{children:\"execveat()\"}),\". The parent waits for the child and then executes the \\u201Ctarget\\u201D payload (\",(0,n.jsx)(e.code,{children:\"tgtElfp\"}),\"). Both payloads are executed from memory, not from a file on disk, making detection and forensic analysis more difficult.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The choice of \",(0,n.jsx)(e.code,{children:\"execveat()\"}),\" is interesting\\u2014it\\u2019s a newer syscall that allows executing a program referred to by a file descriptor. This further supports the fileless nature of this malware\\u2019s execution.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We have identified that the \",(0,n.jsx)(e.code,{children:\"tgt\"}),\" file is a legitimate \",(0,n.jsx)(e.code,{children:\"cron\"}),\" binary. It is loaded in memory and executed after the rootkit loader (\",(0,n.jsx)(e.code,{children:\"wpn\"}),\") is executed.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"After execution, the binary remains active on the host.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`\u003e ps aux\nroot 2138 ./30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Below is a listing of the file descriptors for this process. These file descriptors show the memory-resident files created by the dropper.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`root@debian11-rg:/tmp# ls -lah /proc/2138/fd\ntotal 0\ndr-x------ 2 root root  0 Dec  6 09:57 .\ndr-xr-xr-x 9 root root  0 Dec  6 09:57 ..\nlr-x------ 1 root root 64 Dec  6 09:57 0 -\u003e /dev/null\nl-wx------ 1 root root 64 Dec  6 09:57 1 -\u003e /dev/null\nl-wx------ 1 root root 64 Dec  6 09:57 2 -\u003e /dev/null\nlrwx------ 1 root root 64 Dec  6 09:57 3 -\u003e '/memfd:tgt (deleted)'\nlrwx------ 1 root root 64 Dec  6 09:57 4 -\u003e '/memfd:wpn (deleted)'\nlrwx------ 1 root root 64 Dec  6 09:57 5 -\u003e /run/crond.pid\nlrwx------ 1 root root 64 Dec  6 09:57 6 -\u003e 'socket:[20433]'\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Following the references we can see the binaries that are loaded in the sample. We can simply copy the bytes into a new file for further analysis using the offset and sizes.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image12.png\",alt:\"Embedded ELF binary\",title:\"Embedded ELF binary\",width:\"1999\",height:\"391\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Upon extraction, we find the following two new files:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Wpn\"}),\": \",(0,n.jsx)(e.code,{children:\"cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Tgt\"}),\": \",(0,n.jsx)(e.code,{children:\"934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"We now have the dumps of the two memory files.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-2-memory-resident-executables-overview\",children:\"Stage 2: Memory-resident executables overview\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Examining the \",(0,n.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136\",rel:\"nofollow\",children:\"/memfd:tgt\"}),\" ELF file, it is clear that this is the default Ubuntu Linux Cron binary. There appear to be no modifications to the binary.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe\",rel:\"nofollow\",children:\"/memfd:wpn\"}),\" file is more interesting, as it is the binary responsible for loading the the LKM rootkit. This rootkit loader attempts to hide itself by mimicking it as the \",(0,n.jsx)(e.code,{children:\"/usr/sbin/sshd\"}),\" executable. It checks for particular prerequisites, such as whether secure boot is enabled and the required symbols are available, and if all conditions are met, it loads the kernel module rootkit.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Looking at the execution in Kibana, we can see that the program checks whether secure boot is enabled by querying \",(0,n.jsx)(e.code,{children:\"dmesg\"}),\". If the correct conditions are met, a shell script called \",(0,n.jsx)(e.code,{children:\"script.sh\"}),\" is dropped in the \",(0,n.jsx)(e.code,{children:\"/tmp\"}),\" directory and executed.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image6.png\",alt:\"Execution flow of the bash script and rootkit loader starting from /dev/fd/4\",title:\"Execution flow of the bash script and rootkit loader starting from /dev/fd/4\",width:\"1323\",height:\"473\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This script contains logic for inspecting and processing files based on their compression formats.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image9.png\",alt:\"The Bash script that is used to decompress the kernel image\",title:\"The Bash script that is used to decompress the kernel image\",width:\"910\",height:\"959\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Here's what it does:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The function \",(0,n.jsx)(e.code,{children:\"c()\"}),\" inspects files using the \",(0,n.jsx)(e.code,{children:\"file\"}),\" command to verify whether they are ELF binaries. If not, the function returns an error.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The function \",(0,n.jsx)(e.code,{children:\"d()\"}),\" attempts to decompress a given file using various utilities like \",(0,n.jsx)(e.code,{children:\"gunzip\"}),\", \",(0,n.jsx)(e.code,{children:\"unxz\"}),\", \",(0,n.jsx)(e.code,{children:\"bunzip2\"}),\", and others based on signatures of supported compression formats. It employs \",(0,n.jsx)(e.code,{children:\"grep\"}),\" and \",(0,n.jsx)(e.code,{children:\"tail\"}),\" to locate and extract specific compressed segments.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The script attempts to locate and process a file (\",(0,n.jsx)(e.code,{children:\"$i\"}),\") into \",(0,n.jsx)(e.code,{children:\"/tmp/vmlinux\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"After the execution of \",(0,n.jsx)(e.code,{children:\"/tmp/script.sh\"}),\", the file \",(0,n.jsx)(e.code,{children:\"/boot/vmlinuz-5.10.0-33-cloud-amd64\"}),\" is used as input. The \",(0,n.jsx)(e.code,{children:\"tr\"}),\" command is employed to locate gzip's magic numbers (\",(0,n.jsx)(e.code,{children:\"\\\\037\\\\213\\\\010\"}),\"). Subsequently, a portion of the file starting at the byte offset \",(0,n.jsx)(e.code,{children:\"+10957311\"}),\" is extracted using \",(0,n.jsx)(e.code,{children:\"tail\"}),\", decompressed with \",(0,n.jsx)(e.code,{children:\"gunzip\"}),\", and saved as \",(0,n.jsx)(e.code,{children:\"/tmp/vmlinux\"}),\". The resulting file is then verified to determine if it is a valid ELF binary.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image4.png\",alt:\"The process of determining that the decompressing has succeeded \",title:\"The process of determining that the decompressing has succeeded \",width:\"1016\",height:\"645\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This sequence is repeated multiple times until all entries within the script have been passed into function \",(0,n.jsx)(e.code,{children:\"d()\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`d '\\\\037\\\\213\\\\010' xy gunzip\nd '\\\\3757zXZ\\\\000' abcde unxz\nd 'BZh' xy bunzip2\nd '\\\\135\\\\0\\\\0\\\\0' xxx unlzma\nd '\\\\211\\\\114\\\\132' xy 'lzop -d'\nd '\\\\002!L\\\\030' xxx 'lz4 -d'\nd '(\\\\265/\\\\375' xxx unzstd\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This process is shown below.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image7.png\",alt:\"\",width:\"1163\",height:\"1439\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"After running through all of the items in the script, the \",(0,n.jsx)(e.code,{children:\"/tmp/vmlinux\"}),\" and \",(0,n.jsx)(e.code,{children:\"/tmp/script.sh\"}),\" files are deleted.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image3.png\",alt:\"Deleting the script and unpacked kernel\",title:\"Deleting the script and unpacked kernel\",width:\"512\",height:\"166\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The script's primary purpose is to verify whether specific conditions are satisfied and, if they are, to set up the environment for deploying the rootkit using a kernel object file.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image5.png\",alt:\"Rootkit loader looking for symbol offsets\",title:\"Rootkit loader looking for symbol offsets\",width:\"1916\",height:\"1210\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As shown in the image above, the loader looks for \",(0,n.jsx)(e.code,{children:\"__ksymtab\"}),\" and \",(0,n.jsx)(e.code,{children:\"__kcrctab\"}),\" symbols in the Linux Kernel file and stores the offsets.\"]}),`\n`,(0,n.jsx)(e.p,{children:'Several strings show that the rootkit developers refer to their rootkit as \\u201CPUMA\" within the dropper. Based on the conditions, the program outputs messages such as:'}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-python\",children:`PUMA %s\n[+] PUMA is compatible\n[+] PUMA already loaded\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Furthermore, the kernel object file contains a section named \",(0,n.jsx)(e.code,{children:\".puma-config\"}),\", reinforcing the association with the rootkit.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-3-lkm-rootkit-overview\",children:\"Stage 3: LKM rootkit overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this section, we take a closer look at the kernel module to understand its underlying functionality. Specifically, we will examine its symbol lookup features, hooking mechanism, and the key syscalls it modifies to achieve its goals.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"lkm-rootkit-overview-symbol-lookup-and-hooking-mechanism\",children:\"LKM rootkit overview: symbol lookup and hooking mechanism\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The LKM rootkit's ability to manipulate system behavior begins with its use of the syscall table and its reliance on kallsyms_lookup_name() for symbol resolution. Unlike modern rootkits targeting kernel versions 5.7 and above, the rootkit does not use \",(0,n.jsx)(e.code,{children:\"kprobes\"}),\", indicating it is designed for older kernels.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image1.png\",alt:\"Resolving a pointer to the sys_call_table using kallsyms_lookup_name\",title:\"Resolving a pointer to the sys_call_table using kallsyms_lookup_name\",width:\"1190\",height:\"246\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This choice is significant because, prior to kernel version 5.7, \",(0,n.jsx)(e.code,{children:\"kallsyms_lookup_name()\"}),\" was exported and could be easily leveraged by modules, even those without proper licensing.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In February 2020, kernel developers debated the unexporting of \",(0,n.jsx)(e.code,{children:\"kallsyms_lookup_name()\"}),\" to prevent misuse by unauthorized or malicious modules. A common tactic involved adding a fake \",(0,n.jsx)(e.code,{children:'MODULE_LICENSE(\"GPL\")'}),\" declaration to circumvent licensing checks, allowing these modules to access non-exported kernel functions. The LKM rootkitdemonstrates this behavior, as evident from its strings:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`name=audit\nlicense=GPL\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This fraudulent use of the GPL license ensures the rootkit can call \",(0,n.jsx)(e.code,{children:\"kallsyms_lookup_name()\"}),\" to resolve function addresses and manipulate kernel internals.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In addition to its symbol resolution strategy, the kernel module employs the \",(0,n.jsx)(e.code,{children:\"ftrace()\"}),\" hooking mechanism to establish its hooks. By leveraging \",(0,n.jsx)(e.code,{children:\"ftrace()\"}),\", the rootkit effectively intercepts syscalls and replaces their handlers with custom hooks.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image11.png\",alt:\"The LKM rootkit leverages ftrace for hooking\",title:\"The LKM rootkit leverages ftrace for hooking\",width:\"1999\",height:\"586\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Evidence of this is e.g. the usage of \",(0,n.jsx)(e.code,{children:\"unregister_ftrace_function\"}),\" and \",(0,n.jsx)(e.code,{children:\"ftrace_set_filter_ip\"}),\" as shown in the snippet of code above.\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"lkm-rootkit-overview-hooked-syscalls-overview\",children:\"LKM rootkit overview: hooked syscalls overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"We analyzed the rootkit's syscall hooking mechanism to understand the scope of PUMA's interference with system functionality. The following table summarizes the syscalls hooked by the rootkit, the corresponding hooked functions, and their potential purposes.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By viewing the \",(0,n.jsx)(e.code,{children:\"cleanup_module()\"}),\" function, we can see the \",(0,n.jsx)(e.code,{children:\"ftrace()\"}),\" hooking mechanism being reverted by using the \",(0,n.jsx)(e.code,{children:\"unregister_ftrace_function()\"}),\" function. This guarantees that the callback is no longer being called. Afterward, all syscalls are returned to point to the original syscall rather than the hooked syscall. This gives us a clean overview of all syscalls that were hooked.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image15.png\",alt:\"Cleanup of all the hooked syscalls\",title:\"Cleanup of all the hooked syscalls\",width:\"938\",height:\"1186\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In the following sections, we will take a closer look at a few of the hooked syscalls.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"lkm-rootkit-overview-rmdir_hook\",children:\"LKM rootkit overview: rmdir_hook()\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"rmdir_hook()\"}),\" in the kernel module plays a critical role in the rootkit\\u2019s functionality, enabling it to manipulate directory removal operations for concealment and control. This hook is not limited to merely intercepting \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" syscalls but extends its functionality to enforce privilege escalation and retrieve configuration details stored within specific directories.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image2.png\",alt:\"Start of the rmdir hook code\",title:\"Start of the rmdir hook code\",width:\"1494\",height:\"1390\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This hook has several checks in place. The hook expects the first characters to the \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" syscall to be \",(0,n.jsx)(e.code,{children:\"zarya\"}),\". If this condition is met, the hooked function checks the 6th character, which is the command that gets executed. Finally, the 8th character is checked, which can contain process arguments for the command that is being executed. The structure looks like: \",(0,n.jsx)(e.code,{children:\"zarya[char][command][char][argument]\"}),\". Any special character (or none) can be placed between \",(0,n.jsx)(e.code,{children:\"zarya\"}),\" and the commands and arguments.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"As of the publication date, we have identified the following commands:\"}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Command\"}),(0,n.jsx)(e.th,{children:\"Purpose\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"zarya.c.0\"})}),(0,n.jsx)(e.td,{children:\"Retrieve the config\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"zarya.t.0\"})}),(0,n.jsx)(e.td,{children:\"Test the working\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"zarya.k.\u003cpid\u003e\"})}),(0,n.jsx)(e.td,{children:\"Hide a PID\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"zarya.v.0\"})}),(0,n.jsx)(e.td,{children:\"Get the running version\"})]})]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Upon initialization of the rootkit, the \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" syscall hook is used to check whether the rootkit was loaded successfully. It does this by calling the \",(0,n.jsx)(e.code,{children:\"t\"}),\" command.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~$ rmdir test\nrmdir: failed to remove 'test': No such file or directory\nubuntu-rk:~$ rmdir zarya.t\nubuntu-rk:~$\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using the \",(0,n.jsx)(e.code,{children:\"rmdir\"}),\" command on a non-existent directory, an error message \\u201CNo such file or directory\\u201D is returned. When using \",(0,n.jsx)(e.code,{children:\"rmdir\"}),\" on \",(0,n.jsx)(e.code,{children:\"zarya.t\"}),\", no output is returned, indicating successful loading of the kernel module.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A second command is \",(0,n.jsx)(e.code,{children:\"v\"}),\", which is used to get the version of the running rootkit.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~$ rmdir zarya.v\nrmdir: failed to remove '240513': No such file or directory\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Instead of \",(0,n.jsx)(e.code,{children:\"zarya.v\"}),\" being added to the \\u201Cfailed to remove \\u2018\",(0,n.jsx)(e.code,{children:\"directory\"}),\"\\u2019\\u201D error, the rootkit version \",(0,n.jsx)(e.code,{children:\"240513\"}),\" is returned.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A third command is \",(0,n.jsx)(e.code,{children:\"c\"}),\", which prints the configuration of the rootkit.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~/testing$ ./dump_config \"zarya.c\"\nrmdir: failed to remove '': No such file or directory\nBuffer contents (hex dump):\n7ffe9ae3a270  00 01 00 00 10 70 69 6e 67 5f 69 6e 74 65 72 76  .....ping_interv\n7ffe9ae3a280  61 6c 5f 73 00 2c 01 00 00 10 73 65 73 73 69 6f  al_s.,....sessio\n7ffe9ae3a290  6e 5f 74 69 6d 65 6f 75 74 5f 73 00 04 00 00 00  n_timeout_s.....\n7ffe9ae3a2a0  10 63 32 5f 74 69 6d 65 6f 75 74 5f 73 00 c0 a8  .c2_timeout_s...\n7ffe9ae3a2b0  00 00 02 74 61 67 00 08 00 00 00 67 65 6e 65 72  ...tag.....gener\n7ffe9ae3a2c0  69 63 00 02 73 5f 61 30 00 15 00 00 00 72 68 65  ic..s_a0.....rhe\n7ffe9ae3a2d0  6c 2e 6f 70 73 65 63 75 72 69 74 79 31 2e 61 72  l.opsecurity1.ar\n7ffe9ae3a2e0  74 00 02 73 5f 70 30 00 05 00 00 00 38 34 34 33  t..s_p0.....8443\n7ffe9ae3a2f0  00 02 73 5f 63 30 00 04 00 00 00 74 6c 73 00 02  ..s_c0.....tls..\n7ffe9ae3a300  73 5f 61 31 00 14 00 00 00 73 65 63 2e 6f 70 73  s_a1.....sec.ops\n7ffe9ae3a310  65 63 75 72 69 74 79 31 2e 61 72 74 00 02 73 5f  ecurity1.art..s_\n7ffe9ae3a320  70 31 00 05 00 00 00 38 34 34 33 00 02 73 5f 63  p1.....8443..s_c\n7ffe9ae3a330  31 00 04 00 00 00 74 6c 73 00 02 73 5f 61 32 00  1.....tls..s_a2.\n7ffe9ae3a340  0e 00 00 00 38 39 2e 32 33 2e 31 31 33 2e 32 30  ....89.23.113.20\n7ffe9ae3a350  34 00 02 73 5f 70 32 00 05 00 00 00 38 34 34 33  4..s_p2.....8443\n7ffe9ae3a360  00 02 73 5f 63 32 00 04 00 00 00 74 6c 73 00 00  ..s_c2.....tls..\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Because the payload starts with null bytes, no output is returned when running \",(0,n.jsx)(e.code,{children:\"zarya.c\"}),\" through a \",(0,n.jsx)(e.code,{children:\"rmdir\"}),\" shell command. By writing a small C program that wraps the syscall and prints the hex/ASCII representation, we can see the configuration of the rootkit being returned.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Instead of using the \",(0,n.jsx)(e.code,{children:\"kill()\"}),\" syscall to get root privileges (like most rootkits do), the rootkit leverages the \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" syscall for this purpose as well. The rootkit uses the \",(0,n.jsx)(e.code,{children:\"prepare_creds\"}),\" function to modify the credential-related IDs to 0 (root), and calls \",(0,n.jsx)(e.code,{children:\"commit_creds\"}),\" on this modified structure to obtain root privileges within its current process.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/declawing-pumakit/image8.png\",alt:\"Privilege escalation using prepare_creds and commit_creds\",title:\"Privilege escalation using prepare_creds and commit_creds\",width:\"1256\",height:\"698\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To trigger this function, we need to set the 6th character to \",(0,n.jsx)(e.code,{children:\"0\"}),\". The caveat for this hook is that it gives the caller process root privileges but does not maintain them. When executing \",(0,n.jsx)(e.code,{children:\"zarya.0\"}),\", nothing happens. However, when calling this hook with a C program and printing the current process\\u2019 privileges, we do get a result. A snippet of the wrapper code that is used is displayed below:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-c\",children:`[...]\n// Print the current PID, SID, and GID\npid_t pid = getpid();\npid_t sid = getsid(0);  // Passing 0 gets the SID of the calling process\ngid_t gid = getgid();\n\nprintf(\"Current PID: %d, SID: %d, GID: %d\\\\n\", pid, sid, gid);\n\n// Print all credential-related IDs\nuid_t ruid = getuid();    // Real user ID\nuid_t euid = geteuid();   // Effective user ID\ngid_t rgid = getgid();    // Real group ID\ngid_t egid = getegid();   // Effective group ID\nuid_t fsuid = setfsuid(-1);  // Filesystem user ID\ngid_t fsgid = setfsgid(-1);  // Filesystem group ID\n\nprintf(\"Credentials: UID=%d, EUID=%d, GID=%d, EGID=%d, FSUID=%d, FSGID=%d\\\\n\",\n    ruid, euid, rgid, egid, fsuid, fsgid);\n\n[...]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Executing the function, we can the following output:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~/testing$ whoami;id\nruben\nuid=1000(ruben) gid=1000(ruben) groups=1000(ruben),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd)\n\nubuntu-rk:~/testing$ ./rmdir zarya.0\nReceived data:\nzarya.0\nCurrent PID: 41838, SID: 35117, GID: 0\nCredentials: UID=0, EUID=0, GID=0, EGID=0, FSUID=0, FSGID=0\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To leverage this hook, we wrote a small C wrapper script that executes the \",(0,n.jsx)(e.code,{children:\"rmdir zarya.0\"}),\" command and checks whether it can now access the \",(0,n.jsx)(e.code,{children:\"/etc/shadow\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-c\",children:`#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/syscall.h\u003e\n#include \u003cerrno.h\u003e\n\nint main() {\n    const char *directory = \"zarya.0\";\n\n    // Attempt to remove the directory\n    if (syscall(SYS_rmdir, directory) == -1) {\n        fprintf(stderr, \"rmdir: failed to remove '%s': %s\\\\n\", directory, strerror(errno));\n    } else {\n        printf(\"rmdir: successfully removed '%s'\\\\n\", directory);\n    }\n\n    // Execute the \\`id\\` command\n    printf(\"\\\\n--- Running 'id' command ---\\\\n\");\n    if (system(\"id\") == -1) {\n        perror(\"Failed to execute 'id'\");\n        return 1;\n    }\n\n    // Display the contents of /etc/shadow\n    printf(\"\\\\n--- Displaying '/etc/shadow' ---\\\\n\");\n    if (system(\"cat /etc/shadow\") == -1) {\n        perror(\"Failed to execute 'cat /etc/shadow'\");\n        return 1;\n    }\n\n    return 0;\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"With success.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~/testing$ ./get_root\nrmdir: successfully removed 'zarya.0'\n\n--- Running 'id' command ---\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),117(lxd),1000(ruben)\n\n--- Displaying '/etc/shadow' ---\nroot:*:19430:0:99999:7:::\n[...]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Although there are more commands available in the \",(0,n.jsx)(e.code,{children:\"rmdir()\"}),\" function, we will, for now, move on to the next and may add them to a future publication.\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"lkm-rootkit-overview-getdents-and-getdents64-hooks\",children:\"LKM rootkit overview: getdents() and getdents64() hooks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"getdents_hook()\"}),\" and \",(0,n.jsx)(e.code,{children:\"getdents64_hook()\"}),\" in the rootkit are responsible for manipulating directory listing syscalls to hide files and directories from users.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The getdents() and getdents64() syscalls are used to read directory entries. The rootkit hooks these functions to filter out any entries that match specific criteria. Specifically, files and directories with the prefix zov_ are hidden from any user attempting to list the contents of a directory.\"}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ubuntu-rk:~/getdents_hook$ mkdir zov_hidden_dir\n\nubuntu-rk:~/getdents_hook$ ls -lah\ntotal 8.0K\ndrwxrwxr-x  3 ruben ruben 4.0K Dec  9 11:11 .\ndrwxr-xr-x 11 ruben ruben 4.0K Dec  9 11:11 ..\n\nubuntu-rk:~/getdents_hook$ echo \"this file is now hidden\" \u003e zov_hidden_dir/zov_hidden_file\n\nubuntu-rk:~/getdents_hook$ ls -lah zov_hidden_dir/\ntotal 8.0K\ndrwxrwxr-x 2 ruben ruben 4.0K Dec  9 11:11 .\ndrwxrwxr-x 3 ruben ruben 4.0K Dec  9 11:11 ..\n\nubuntu-rk:~/getdents_hook$ cat zov_hidden_dir/zov_hidden_file\nthis file is now hidden\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here, the file \",(0,n.jsx)(e.code,{children:\"zov_hidden\"}),\" can be accessed directly using its entire path. However, when running the \",(0,n.jsx)(e.code,{children:\"ls\"}),\" command, it does not appear in the directory listing.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-4-kitsune-so-overview\",children:\"Stage 4: Kitsune SO overview\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"While digging deeper into the rootkit, another ELF file was identified within the kernel object file. After extracting this binary, we discovered this is the \",(0,n.jsx)(e.code,{children:\"/lib64/libs.so\"}),\" file. Upon examination, we encountered several references to strings such as \",(0,n.jsx)(e.code,{children:\"Kitsune PID %ld\"}),\". This suggests that the SO is referred to as Kitsune by the developers. Kitsune may be responsible for certain behaviors observed in the rootkit. These references align with the broader context of how the rootkit manipulates user-space interactions via \",(0,n.jsx)(e.code,{children:\"LD_PRELOAD\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This SO file plays a role in achieving the persistence and stealth mechanisms central to this rootkit, and its integration within the attack chain demonstrates the sophistication of its design. We will now showcase how to detect and/or prevent each part of the attack chain.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"pumakit-execution-chain-detection--prevention\",children:\"PUMAKIT execution chain detection \u0026 prevention\"}),`\n`,(0,n.jsx)(e.p,{children:\"This section will display different EQL/KQL rules and YARA signatures that can prevent and detect different parts of the PUMAKIT execution chain.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-1-cron\",children:\"Stage 1: Cron\"}),`\n`,(0,n.jsx)(e.p,{children:\"Upon execution of the dropper, an uncommon event is saved in syslog. The event states that a process has started with an executable stack. This is uncommon and interesting to watch:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sysmon\",children:`[  687.108154] process '/home/ruben_groenewoud/30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f' started with executable stack\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We can search for this through the following query:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`host.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message: \"started with executable stack\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This message is stored in \",(0,n.jsx)(e.code,{children:\"/var/log/messages\"}),\" or \",(0,n.jsx)(e.code,{children:\"/var/log/syslog\"}),\". We can detect this by reading syslog through \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html\",rel:\"nofollow\",children:\"Filebeat\"}),\" or the Elastic agent \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/integrations/current/system.html\",rel:\"nofollow\",children:\"system integration\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-2-memory-resident-executables\",children:\"Stage 2: Memory-resident executables\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can see an unusual file descriptor execution right away. This can be detected through the following EQL query:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.parent.executable like \"/dev/fd/*\" and not process.parent.command_line == \"runc init\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This file descriptor will remain the parent of the dropper until the process ends, resulting in the execution of several files through this parent process as well:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`file where host.os.type == \"linux\" and event.type == \"creation\" and process.executable like \"/dev/fd/*\" and file.path like (\n  \"/boot/*\", \"/dev/shm/*\", \"/etc/cron.*/*\", \"/etc/init.d/*\", \"/var/run/*\"\n  \"/etc/update-motd.d/*\", \"/tmp/*\", \"/var/log/*\", \"/var/tmp/*\"\n)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"After \",(0,n.jsx)(e.code,{children:\"/tmp/script.sh\"}),\" is dropped (detected through the queries above), we can detect its execution by querying for file attribute discovery and unarchiving activity:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and \n(process.parent.args like \"/boot/*\" or process.args like \"/boot/*\") and (\n  (process.name in (\"file\", \"unlzma\", \"gunzip\", \"unxz\", \"bunzip2\", \"unzstd\", \"unzip\", \"tar\")) or\n  (process.name == \"grep\" and process.args == \"ELF\") or\n  (process.name in (\"lzop\", \"lz4\") and process.args in (\"-d\", \"--decode\"))\n) and\nnot process.parent.name == \"mkinitramfs\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The script continues to seek the memory of the Linux kernel image through the \",(0,n.jsx)(e.code,{children:\"tail\"}),\" command. This can be detected, along with other memory-seeking tools, through the following query:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and\n(process.parent.args like \"/boot/*\" or process.args like \"/boot/*\") and (\n  (process.name == \"tail\" and (process.args like \"-c*\" or process.args == \"--bytes\")) or\n  (process.name == \"cmp\" and process.args == \"-i\") or\n  (process.name in (\"hexdump\", \"xxd\") and process.args == \"-s\") or\n  (process.name == \"dd\" and process.args : (\"skip*\", \"seek*\"))\n)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once \",(0,n.jsx)(e.code,{children:\"/tmp/script.sh\"}),\" is done executing, \",(0,n.jsx)(e.code,{children:\"/memfd:tgt (deleted)\"}),\" and \",(0,n.jsx)(e.code,{children:\"/memfd:wpn (deleted)\"}),\" are created. The \",(0,n.jsx)(e.code,{children:\"tgt\"}),\" executable, which is the benign Cron executable, creates a \",(0,n.jsx)(e.code,{children:\"/run/crond.pid\"}),\" file. This is nothing malicious but an artifact that can be detected through a simple query.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`file where host.os.type == \"linux\" and event.type == \"creation\" and file.extension in (\"lock\", \"pid\") and\nfile.path like (\"/tmp/*\", \"/var/tmp/*\", \"/run/*\", \"/var/run/*\", \"/var/lock/*\", \"/dev/shm/*\") and process.executable != null\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"wpn\"}),\" executable will, if all conditions are met, load the LKMrootkit.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"stage-3-rootkit-kernel--module\",children:\"Stage 3: Rootkit kernel  module\"}),`\n`,(0,n.jsx)(e.p,{children:\"The loading of kernel module is detectable through Auditd Manager by applying the following configuration:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`-a always,exit -F arch=b64 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules\n-a always,exit -F arch=b32 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"And using the following query:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`driver where host.os.type == \"linux\" and event.action == \"loaded-kernel-module\" and auditd.data.syscall in (\"init_module\", \"finit_module\")\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For more information on leveraging Auditd with Elastic Security to enhance your Linux detection engineering experience, check out our \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd\",rel:\"nofollow\",children:\"Linux detection engineering with Auditd\"}),\" research published on the Elastic Security Labs site.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Upon initialization, the LKM taints the kernel, as it is not signed.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`audit: module verification failed: signature and/or required key missing - tainting kernel\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We can detect this behavior through the following KQL query:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`host.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message:\"module verification failed: signature and/or required key missing - tainting kernel\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Also, the LKM has faulty code, causing it to segfault several times. For example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Dec  9 13:26:10 ubuntu-rk kernel: [14350.711419] cat[112653]: segfault at 8c ip 00007f70d596b63c sp 00007fff9be81360 error 4\nDec  9 13:26:10 ubuntu-rk kernel: [14350.711422] Code: 83 c4 20 48 89 d0 5b 5d 41 5c c3 48 8d 42 01 48 89 43 08 0f b6 02 41 88 44 2c ff eb c1 8b 7f 78 e9 25 5c 00 00 c3 41 54 55 53 \u003c8b\u003e 87 8c 00 00 00 48 89 fb 85 c0 79 1b e8 d7 00 00 00 48 89 df 89\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This can be detected through a simple KQL query that queries for segfaults in the \",(0,n.jsx)(e.code,{children:\"kern.log\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`host.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and message:segfault\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once the kernel module is loaded, we can see traces of command execution through the \",(0,n.jsx)(e.code,{children:\"kthreadd\"}),\" process. The rootkit creates new kernel threads to execute specific commands. For example, the rootkit executes the following commands at short intervals:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`cat /dev/null\ntruncate -s 0 /usr/share/zov_f/zov_latest\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We can detect these and more potentially suspicious commands through a query such as the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.parent.name == \"kthreadd\" and (\n  process.executable like (\"/tmp/*\", \"/var/tmp/*\", \"/dev/shm/*\", \"/var/www/*\", \"/bin/*\", \"/usr/bin/*\", \"/usr/local/bin/*\") or\n  process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\", \"whoami\", \"curl\", \"wget\", \"id\", \"nohup\", \"setsid\") or\n  process.command_line like (\n    \"*/etc/cron*\", \"*/etc/rc.local*\", \"*/dev/tcp/*\", \"*/etc/init.d*\", \"*/etc/update-motd.d*\",\n    \"*/etc/ld.so*\", \"*/etc/sudoers*\", \"*base64 *\", \"*base32 *\", \"*base16 *\", \"*/etc/profile*\",\n    \"*/dev/shm/*\", \"*/etc/ssh*\", \"*/home/*/.ssh/*\", \"*/root/.ssh*\" , \"*~/.ssh/*\", \"*autostart*\",\n    \"*xxd *\", \"*/etc/shadow*\"\n  )\n) and not process.name == \"dpkg\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can also detect the rootkits\\u2019 method of elevating privileges by analyzing the \",(0,n.jsx)(e.code,{children:\"rmdir\"}),\" command for unusual UID/GID changes.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`process where host.os.type == \"linux\" and event.type == \"change\" and event.action in (\"uid_change\", \"guid_change\") and process.name == \"rmdir\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Several other behavioral rules may also trigger, depending on the execution chain.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"one-yara-signature-to-rule-them-all\",children:\"One YARA signature to rule them all\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Elastic Security has created a \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Rootkit_Pumakit.yar\",rel:\"nofollow\",children:\"YARA signature\"}),\" to identify PUMAKIT (the dropper (\",(0,n.jsx)(e.code,{children:\"cron\"}),\"), the rootkit loader(\",(0,n.jsx)(e.code,{children:\"/memfd:wpn\"}),\"), the LKM rootkit and the Kitsune shared object files. The signature is displayed below:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-YARA\",children:`rule Linux_Trojan_Pumakit {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-12-09\"\n        last_modified = \"2024-12-09\"\n        os = \"Linux\"\n        arch = \"x86, arm64\"\n        threat_name = \"Linux.Trojan.Pumakit\"\n\n    strings:\n        $str1 = \"PUMA %s\"\n        $str2 = \"Kitsune PID %ld\"\n        $str3 = \"/usr/share/zov_f\"\n        $str4 = \"zarya\"\n        $str5 = \".puma-config\"\n        $str6 = \"ping_interval_s\"\n        $str7 = \"session_timeout_s\"\n        $str8 = \"c2_timeout_s\"\n        $str9 = \"LD_PRELOAD=/lib64/libs.so\"\n        $str10 = \"kit_so_len\"\n        $str11 = \"opsecurity1.art\"\n        $str12 = \"89.23.113.204\"\n    \n    condition:\n        4 of them\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Observable\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Reference\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"30b26707d5fb407ef39ebee37ded7edeea2890fb5ec1ebfa09a3b3edfc80db1f\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"cron\"})}),(0,n.jsx)(e.td,{children:\"PUMAKIT dropper\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"cb070cc9223445113c3217f05ef85a930f626d3feaaea54d8585aaed3c2b3cfe\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"/memfd:wpn (deleted\"}),\")\"]}),(0,n.jsx)(e.td,{children:\"PUMAKIT loader\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"934955f0411538eebb24694982f546907f3c6df8534d6019b7ff165c4d104136\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"/memfd:tgt (deleted)\"})}),(0,n.jsx)(e.td,{children:\"Cron binary\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"8ef63f9333104ab293eef5f34701669322f1c07c0e44973d688be39c94986e27\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"libs.so\"})}),(0,n.jsx)(e.td,{children:\"Kitsune shared object reference\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"8ad422f5f3d0409747ab1ac6a0919b1fa8d83c3da43564a685ae4044d0a0ea03\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"some2.elf\"})}),(0,n.jsx)(e.td,{children:\"PUMAKIT variant\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"bbf0fd636195d51fb5f21596d406b92f9e3d05cd85f7cd663221d7d3da8af804\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"some1.so\"})}),(0,n.jsx)(e.td,{children:\"Kitsune shared object variant\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"bc9193c2a8ee47801f5f44beae51ab37a652fda02cd32d01f8e88bb793172491\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"puma.ko\"})}),(0,n.jsx)(e.td,{children:\"LKM rootkit\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"1aab475fb8ad4a7f94a7aa2b17c769d6ae04b977d984c4e842a61fb12ea99f58\"})}),(0,n.jsx)(e.td,{children:\"SHA256\"}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"kitsune.so\"})}),(0,n.jsx)(e.td,{children:\"Kitsune\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"sec.opsecurity1[.]art\"})}),(0,n.jsx)(e.td,{children:\"domain-name\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"PUMAKIT C2 Server\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"rhel.opsecurity1[.]art\"})}),(0,n.jsx)(e.td,{children:\"domain-name\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"PUMAKIT C2 Server\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"89.23.113[.]204\"})}),(0,n.jsx)(e.td,{children:\"ipv4-addr\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"PUMAKIT C2 Server\"})]})]})]})}),`\n`,(0,n.jsx)(e.h2,{id:\"concluding-statement\",children:\"Concluding Statement\"}),`\n`,(0,n.jsx)(e.p,{children:\"PUMAKIT is a complex and stealthy threat that uses advanced techniques like syscall hooking, memory-resident execution, and unique privilege escalation methods. Its multi-architectural design highlights the growing sophistication of malware targeting Linux systems.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Elastic Security Labs will continue to analyze PUMAKIT, monitor its behavior, and track any updates or new variants. By refining detection methods and sharing actionable insights, we aim to keep defenders one step ahead.\"})]})}function v(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(l,i)})):l(i)}var x=v;return k(_);})();\n;return Component;"},"_id":"articles/declawing-pumaklit.mdx","_raw":{"sourceFilePath":"articles/declawing-pumaklit.mdx","sourceFileName":"declawing-pumaklit.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/declawing-pumaklit"},"type":"Article","imageUrl":"/assets/images/declawing-pumakit/pumakit.jpg","readingTime":"30 min read","series":"","url":"/declawing-pumakit","headings":[{"level":2,"title":"PUMAKIT at a glance","href":"#pumakit-at-a-glance"},{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"PUMAKIT Discovery","href":"#pumakit-discovery"},{"level":2,"title":"PUMAKIT code analysis","href":"#pumakit-code-analysis"},{"level":3,"title":"Stage 1: Cron overview","href":"#stage-1-cron-overview"},{"level":3,"title":"Stage 2: Memory-resident executables overview","href":"#stage-2-memory-resident-executables-overview"},{"level":3,"title":"Stage 3: LKM rootkit overview","href":"#stage-3-lkm-rootkit-overview"},{"level":4,"title":"LKM rootkit overview: symbol lookup and hooking mechanism","href":"#lkm-rootkit-overview-symbol-lookup-and-hooking-mechanism"},{"level":4,"title":"LKM rootkit overview: hooked syscalls overview","href":"#lkm-rootkit-overview-hooked-syscalls-overview"},{"level":4,"title":"LKM rootkit overview: rmdir_hook()","href":"#lkm-rootkit-overview-rmdir_hook"},{"level":4,"title":"LKM rootkit overview: getdents() and getdents64() hooks","href":"#lkm-rootkit-overview-getdents-and-getdents64-hooks"},{"level":3,"title":"Stage 4: Kitsune SO overview","href":"#stage-4-kitsune-so-overview"},{"level":2,"title":"PUMAKIT execution chain detection \u0026 prevention","href":"#pumakit-execution-chain-detection--prevention"},{"level":3,"title":"Stage 1: Cron","href":"#stage-1-cron"},{"level":3,"title":"Stage 2: Memory-resident executables","href":"#stage-2-memory-resident-executables"},{"level":3,"title":"Stage 3: Rootkit kernel  module","href":"#stage-3-rootkit-kernel--module"},{"level":2,"title":"One YARA signature to rule them all","href":"#one-yara-signature-to-rule-them-all"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"Concluding Statement","href":"#concluding-statement"}],"author":[{"title":"Remco Sprooten","slug":"remco-sprooten","description":"Elastic Security Labs Team Senior Research Engineer","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!l.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=p(e,o))||a.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var m=_((D,i)=\u003e{i.exports=_jsx_runtime});var y={};d(y,{default:()=\u003eh,frontmatter:()=\u003eS});var r=j(m()),S={title:\"Remco Sprooten\",description:\"Elastic Security Labs Team Senior Research Engineer\",slug:\"remco-sprooten\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var h=b;return M(y);})();\n;return Component;"},"_id":"authors/remco-sprooten.mdx","_raw":{"sourceFilePath":"authors/remco-sprooten.mdx","sourceFileName":"remco-sprooten.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/remco-sprooten"},"type":"Author","imageUrl":"","url":"/authors/remco-sprooten"},{"title":"Ruben Groenewoud","slug":"ruben-groenewoud","description":"Security Research Engineer, Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},a=(e,t,n,u)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let o of g(t))!l.call(e,o)\u0026\u0026o!==n\u0026\u0026s(e,o,{get:()=\u003et[o],enumerable:!(u=d(t,o))||u.enumerable});return e};var p=(e,t,n)=\u003e(n=e!=null?x(f(e)):{},a(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),b=e=\u003ea(s({},\"__esModule\",{value:!0}),e);var i=_((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003eh,frontmatter:()=\u003ew});var r=p(i()),w={title:\"Ruben Groenewoud\",description:\"Security Research Engineer, Elastic\",slug:\"ruben-groenewoud\"};function m(e){return(0,r.jsx)(r.Fragment,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(m,e)})):m(e)}var h=M;return b(y);})();\n;return Component;"},"_id":"authors/ruben-groenewoud.mdx","_raw":{"sourceFilePath":"authors/ruben-groenewoud.mdx","sourceFileName":"ruben-groenewoud.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/ruben-groenewoud"},"type":"Author","imageUrl":"","url":"/authors/ruben-groenewoud"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"declawing-pumakit"},"buildId":"Lrmm91TBTcYvApwofX639","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>